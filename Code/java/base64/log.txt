- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ICache::flush_icache_stub [0x00007f1a59000080, 0x00007f1a5900009d] (29 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000080:   test   %esi,%esi
  0x00007f1a59000082:   je     0x00007f1a59000099
  0x00007f1a59000088:   mfence 
  0x00007f1a5900008b:   clflush (%rdi)
  0x00007f1a5900008e:   add    $0x40,%rdi
  0x00007f1a59000092:   dec    %esi
  0x00007f1a59000094:   jne    0x00007f1a5900008b
  0x00007f1a59000096:   mfence 
  0x00007f1a59000099:   mov    %rdx,%rax
  0x00007f1a5900009c:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::get_cpu_info_stub [0x00007f1a59000380, 0x00007f1a5900061c] (668 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000380:   push   %rbp
  0x00007f1a59000381:   mov    %rdi,%rbp
  0x00007f1a59000384:   push   %rbx
  0x00007f1a59000385:   push   %rsi
  0x00007f1a59000386:   pushfq 
  0x00007f1a59000387:   pop    %rax
  0x00007f1a59000388:   push   %rax
  0x00007f1a59000389:   mov    %rax,%rcx
  0x00007f1a5900038c:   xor    $0x40000,%eax
  0x00007f1a59000391:   push   %rax
  0x00007f1a59000392:   popfq  
  0x00007f1a59000393:   pushfq 
  0x00007f1a59000394:   pop    %rax
  0x00007f1a59000395:   cmp    %rcx,%rax
  0x00007f1a59000398:   jne    0x00007f1a590003a7
  0x00007f1a5900039a:   mov    $0x300,%eax
  0x00007f1a5900039f:   mov    %eax,0x10(%rbp)
  0x00007f1a590003a2:   jmpq   0x00007f1a5900059d
  0x00007f1a590003a7:   mov    %rcx,%rax
  0x00007f1a590003aa:   xor    $0x200000,%eax
  0x00007f1a590003af:   push   %rax
  0x00007f1a590003b0:   popfq  
  0x00007f1a590003b1:   pushfq 
  0x00007f1a590003b2:   pop    %rax
  0x00007f1a590003b3:   cmp    %rax,%rcx
  0x00007f1a590003b6:   jne    0x00007f1a590003c5
  0x00007f1a590003b8:   mov    $0x400,%eax
  0x00007f1a590003bd:   mov    %eax,0x10(%rbp)
  0x00007f1a590003c0:   jmpq   0x00007f1a5900059d
  0x00007f1a590003c5:   xor    %eax,%eax
  0x00007f1a590003c7:   cpuid  
  0x00007f1a590003c9:   or     %eax,%eax
  0x00007f1a590003cb:   je     0x00007f1a590003b8
  0x00007f1a590003cd:   lea    0x0(%rbp),%rsi
  0x00007f1a590003d1:   mov    %eax,(%rsi)
  0x00007f1a590003d3:   mov    %ebx,0x4(%rsi)
  0x00007f1a590003d6:   mov    %ecx,0x8(%rsi)
  0x00007f1a590003d9:   mov    %edx,0xc(%rsi)
  0x00007f1a590003dc:   cmp    $0xa,%eax
  0x00007f1a590003df:   jbe    0x00007f1a5900044b
  0x00007f1a590003e1:   mov    $0xb,%eax
  0x00007f1a590003e6:   xor    %ecx,%ecx
  0x00007f1a590003e8:   cpuid  
  0x00007f1a590003ea:   lea    0x40(%rbp),%rsi
  0x00007f1a590003ee:   mov    %eax,(%rsi)
  0x00007f1a590003f0:   mov    %ebx,0x4(%rsi)
  0x00007f1a590003f3:   mov    %ecx,0x8(%rsi)
  0x00007f1a590003f6:   mov    %edx,0xc(%rsi)
  0x00007f1a590003f9:   mov    $0xb,%eax
  0x00007f1a590003fe:   mov    $0x1,%ecx
  0x00007f1a59000403:   cpuid  
  0x00007f1a59000405:   push   %rax
  0x00007f1a59000406:   and    $0x1f,%eax
  0x00007f1a59000409:   or     %ebx,%eax
  0x00007f1a5900040b:   and    $0xffff,%eax
  0x00007f1a59000410:   pop    %rax
  0x00007f1a59000411:   je     0x00007f1a5900044b
  0x00007f1a59000413:   lea    0x50(%rbp),%rsi
  0x00007f1a59000417:   mov    %eax,(%rsi)
  0x00007f1a59000419:   mov    %ebx,0x4(%rsi)
  0x00007f1a5900041c:   mov    %ecx,0x8(%rsi)
  0x00007f1a5900041f:   mov    %edx,0xc(%rsi)
  0x00007f1a59000422:   mov    $0xb,%eax
  0x00007f1a59000427:   mov    $0x2,%ecx
  0x00007f1a5900042c:   cpuid  
  0x00007f1a5900042e:   push   %rax
  0x00007f1a5900042f:   and    $0x1f,%eax
  0x00007f1a59000432:   or     %ebx,%eax
  0x00007f1a59000434:   and    $0xffff,%eax
  0x00007f1a59000439:   pop    %rax
  0x00007f1a5900043a:   je     0x00007f1a5900044b
  0x00007f1a5900043c:   lea    0x60(%rbp),%rsi
  0x00007f1a59000440:   mov    %eax,(%rsi)
  0x00007f1a59000442:   mov    %ebx,0x4(%rsi)
  0x00007f1a59000445:   mov    %ecx,0x8(%rsi)
  0x00007f1a59000448:   mov    %edx,0xc(%rsi)
  0x00007f1a5900044b:   mov    $0x4,%eax
  0x00007f1a59000450:   cmp    0x0(%rbp),%eax
  0x00007f1a59000453:   jg     0x00007f1a59000471
  0x00007f1a59000455:   xor    %ecx,%ecx
  0x00007f1a59000457:   cpuid  
  0x00007f1a59000459:   push   %rax
  0x00007f1a5900045a:   and    $0x1f,%eax
  0x00007f1a5900045d:   or     %eax,%eax
  0x00007f1a5900045f:   pop    %rax
  0x00007f1a59000460:   je     0x00007f1a59000471
  0x00007f1a59000462:   lea    0x20(%rbp),%rsi
  0x00007f1a59000466:   mov    %eax,(%rsi)
  0x00007f1a59000468:   mov    %ebx,0x4(%rsi)
  0x00007f1a5900046b:   mov    %ecx,0x8(%rsi)
  0x00007f1a5900046e:   mov    %edx,0xc(%rsi)
  0x00007f1a59000471:   mov    $0x1,%eax
  0x00007f1a59000476:   cpuid  
  0x00007f1a59000478:   lea    0x10(%rbp),%rsi
  0x00007f1a5900047c:   mov    %eax,(%rsi)
  0x00007f1a5900047e:   mov    %ebx,0x4(%rsi)
  0x00007f1a59000481:   mov    %ecx,0x8(%rsi)
  0x00007f1a59000484:   mov    %edx,0xc(%rsi)
  0x00007f1a59000487:   and    $0x18000000,%ecx
  0x00007f1a5900048d:   cmp    $0x18000000,%ecx
  0x00007f1a59000493:   jne    0x00007f1a590004a6
  0x00007f1a59000495:   xor    %ecx,%ecx
  0x00007f1a59000497:   xgetbv 
  0x00007f1a5900049a:   lea    0x100(%rbp),%rsi
  0x00007f1a590004a1:   mov    %eax,(%rsi)
  0x00007f1a590004a3:   mov    %edx,0x4(%rsi)
  0x00007f1a590004a6:   mov    $0x7,%eax
  0x00007f1a590004ab:   cmp    0x0(%rbp),%eax
  0x00007f1a590004ae:   jg     0x00007f1a590004c3
  0x00007f1a590004b0:   xor    %ecx,%ecx
  0x00007f1a590004b2:   cpuid  
  0x00007f1a590004b4:   lea    0x30(%rbp),%rsi
  0x00007f1a590004b8:   mov    %eax,(%rsi)
  0x00007f1a590004ba:   mov    %ebx,0x4(%rsi)
  0x00007f1a590004bd:   mov    %ecx,0x8(%rsi)
  0x00007f1a590004c0:   mov    %edx,0xc(%rsi)
  0x00007f1a590004c3:   mov    $0x80000000,%eax
  0x00007f1a590004c8:   cpuid  
  0x00007f1a590004ca:   cmp    $0x80000000,%eax
  0x00007f1a590004cf:   jbe    0x00007f1a5900059d
  0x00007f1a590004d5:   cmp    $0x80000004,%eax
  0x00007f1a590004da:   jbe    0x00007f1a59000560
  0x00007f1a590004e0:   cmp    $0x80000006,%eax
  0x00007f1a590004e5:   jbe    0x00007f1a59000547
  0x00007f1a590004e7:   cmp    $0x80000007,%eax
  0x00007f1a590004ec:   jbe    0x00007f1a5900052e
  0x00007f1a590004ee:   cmp    $0x80000008,%eax
  0x00007f1a590004f3:   jbe    0x00007f1a59000515
  0x00007f1a590004f5:   cmp    $0x8000001e,%eax
  0x00007f1a590004fa:   jb     0x00007f1a59000515
  0x00007f1a590004fc:   mov    $0x8000001e,%eax
  0x00007f1a59000501:   cpuid  
  0x00007f1a59000503:   lea    0xf0(%rbp),%rsi
  0x00007f1a5900050a:   mov    %eax,(%rsi)
  0x00007f1a5900050c:   mov    %ebx,0x4(%rsi)
  0x00007f1a5900050f:   mov    %ecx,0x8(%rsi)
  0x00007f1a59000512:   mov    %edx,0xc(%rsi)
  0x00007f1a59000515:   mov    $0x80000008,%eax
  0x00007f1a5900051a:   cpuid  
  0x00007f1a5900051c:   lea    0xe0(%rbp),%rsi
  0x00007f1a59000523:   mov    %eax,(%rsi)
  0x00007f1a59000525:   mov    %ebx,0x4(%rsi)
  0x00007f1a59000528:   mov    %ecx,0x8(%rsi)
  0x00007f1a5900052b:   mov    %edx,0xc(%rsi)
  0x00007f1a5900052e:   mov    $0x80000007,%eax
  0x00007f1a59000533:   cpuid  
  0x00007f1a59000535:   lea    0xd0(%rbp),%rsi
  0x00007f1a5900053c:   mov    %eax,(%rsi)
  0x00007f1a5900053e:   mov    %ebx,0x4(%rsi)
  0x00007f1a59000541:   mov    %ecx,0x8(%rsi)
  0x00007f1a59000544:   mov    %edx,0xc(%rsi)
  0x00007f1a59000547:   mov    $0x80000005,%eax
  0x00007f1a5900054c:   cpuid  
  0x00007f1a5900054e:   lea    0xc0(%rbp),%rsi
  0x00007f1a59000555:   mov    %eax,(%rsi)
  0x00007f1a59000557:   mov    %ebx,0x4(%rsi)
  0x00007f1a5900055a:   mov    %ecx,0x8(%rsi)
  0x00007f1a5900055d:   mov    %edx,0xc(%rsi)
  0x00007f1a59000560:   mov    $0x80000001,%eax
  0x00007f1a59000565:   cpuid  
  0x00007f1a59000567:   lea    0x80(%rbp),%rsi
  0x00007f1a5900056e:   mov    %eax,(%rsi)
  0x00007f1a59000570:   mov    %ebx,0x4(%rsi)
  0x00007f1a59000573:   mov    %ecx,0x8(%rsi)
  0x00007f1a59000576:   mov    %edx,0xc(%rsi)
  0x00007f1a59000579:   lea    0x10(%rbp),%rsi
  0x00007f1a5900057d:   mov    $0x18000000,%ecx
  0x00007f1a59000582:   and    0x8(%rsi),%ecx
  0x00007f1a59000585:   cmp    $0x18000000,%ecx
  0x00007f1a5900058b:   jne    0x00007f1a5900059d
  0x00007f1a5900058d:   mov    $0x6,%eax
  0x00007f1a59000592:   and    0x100(%rbp),%eax
  0x00007f1a59000598:   cmp    $0x6,%eax
  0x00007f1a5900059b:   je     0x00007f1a590005a2
  0x00007f1a5900059d:   jmpq   0x00007f1a59000617
  0x00007f1a590005a2:   mov    $0xcafebabe,%ecx
  0x00007f1a590005a7:   vmovd  %ecx,%xmm0
  0x00007f1a590005ab:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f1a590005b0:   vinsertf128 $0x1,%xmm0,%ymm0,%ymm0
  0x00007f1a590005b6:   vmovdqu %ymm0,%ymm7
  0x00007f1a590005ba:   vmovdqu %ymm0,%ymm8
  0x00007f1a590005be:   vmovdqu %ymm0,%ymm15
  0x00007f1a590005c2:   xor    %esi,%esi
  0x00007f1a590005c4:   mov    (%rsi),%eax
  0x00007f1a590005c6:   lea    0x108(%rbp),%rsi
  0x00007f1a590005cd:   vmovdqu %ymm0,(%rsi)
  0x00007f1a590005d1:   vmovdqu %ymm7,0x20(%rsi)
  0x00007f1a590005d6:   vmovdqu %ymm8,0x40(%rsi)
  0x00007f1a590005db:   vmovdqu %ymm15,0x60(%rsi)
  0x00007f1a590005e0:   lea    0x0(%rbp),%rsi
  0x00007f1a590005e4:   cmpl   $0x756e6547,0x4(%rsi)
  0x00007f1a590005eb:   jne    0x00007f1a59000617
  0x00007f1a590005f1:   mov    $0xfff0ff0,%ecx
  0x00007f1a590005f6:   lea    0x10(%rbp),%rsi
  0x00007f1a590005fa:   and    (%rsi),%ecx
  0x00007f1a590005fc:   cmp    $0x50670,%ecx
  0x00007f1a59000602:   je     0x00007f1a59000617
  0x00007f1a59000608:   cmp    $0x80650,%ecx
  0x00007f1a5900060e:   je     0x00007f1a59000617
  0x00007f1a59000614:   vzeroupper 
  0x00007f1a59000617:   popfq  
  0x00007f1a59000618:   pop    %rsi
  0x00007f1a59000619:   pop    %rbx
  0x00007f1a5900061a:   pop    %rbp
  0x00007f1a5900061b:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::detect_virt_stub [0x00007f1a5900061c, 0x00007f1a59000636] (26 bytes)
--------------------------------------------------------------------------------
  0x00007f1a5900061c:   push   %rbp
  0x00007f1a5900061d:   push   %rbx
  0x00007f1a5900061e:   push   %rsi
  0x00007f1a5900061f:   mov    %rdi,%rax
  0x00007f1a59000622:   mov    %rsi,%rsi
  0x00007f1a59000625:   cpuid  
  0x00007f1a59000627:   mov    %eax,(%rsi)
  0x00007f1a59000629:   mov    %ebx,0x4(%rsi)
  0x00007f1a5900062c:   mov    %ecx,0x8(%rsi)
  0x00007f1a5900062f:   mov    %edx,0xc(%rsi)
  0x00007f1a59000632:   pop    %rsi
  0x00007f1a59000633:   pop    %rbx
  0x00007f1a59000634:   pop    %rbp
  0x00007f1a59000635:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::forward exception [0x00007f1a59000c00, 0x00007f1a59000c3d] (61 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000c00:   mov    (%rsp),%rdi
  0x00007f1a59000c04:   mov    %rdi,%rsi
  0x00007f1a59000c07:   mov    %r15,%rdi
  0x00007f1a59000c0a:   test   $0xf,%spl
  0x00007f1a59000c0e:   je     0x00007f1a59000c26
  0x00007f1a59000c14:   sub    $0x8,%rsp
  0x00007f1a59000c18:   callq  0x00007f1a63f08db0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x00007f1a59000c1d:   add    $0x8,%rsp
  0x00007f1a59000c21:   jmpq   0x00007f1a59000c2b
  0x00007f1a59000c26:   callq  0x00007f1a63f08db0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x00007f1a59000c2b:   mov    %rax,%rbx
  0x00007f1a59000c2e:   pop    %rdx
  0x00007f1a59000c2f:   mov    0x8(%r15),%rax
  0x00007f1a59000c33:   movq   $0x0,0x8(%r15)
  0x00007f1a59000c3b:   jmpq   *%rbx
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::call_stub [0x00007f1a59000c3d, 0x00007f1a59000d2a] (237 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000c3d:   push   %rbp
  0x00007f1a59000c3e:   mov    %rsp,%rbp
  0x00007f1a59000c41:   sub    $0x60,%rsp
  0x00007f1a59000c45:   mov    %r9,-0x8(%rbp)
  0x00007f1a59000c49:   mov    %r8,-0x10(%rbp)
  0x00007f1a59000c4d:   mov    %rcx,-0x18(%rbp)
  0x00007f1a59000c51:   mov    %edx,-0x20(%rbp)
  0x00007f1a59000c54:   mov    %rsi,-0x28(%rbp)
  0x00007f1a59000c58:   mov    %rdi,-0x30(%rbp)
  0x00007f1a59000c5c:   mov    %rbx,-0x38(%rbp)
  0x00007f1a59000c60:   mov    %r12,-0x40(%rbp)
  0x00007f1a59000c64:   mov    %r13,-0x48(%rbp)
  0x00007f1a59000c68:   mov    %r14,-0x50(%rbp)
  0x00007f1a59000c6c:   mov    %r15,-0x58(%rbp)
  0x00007f1a59000c70:   vstmxcsr -0x60(%rbp)
  0x00007f1a59000c75:   mov    -0x60(%rbp),%eax
  0x00007f1a59000c78:   and    $0xffc0,%eax
  0x00007f1a59000c7d:   cmp    0xb5e22e5(%rip),%eax        # 0x00007f1a645e2f68
  0x00007f1a59000c83:   je     0x00007f1a59000c91
  0x00007f1a59000c89:   vldmxcsr 0xb5e22d7(%rip)        # 0x00007f1a645e2f68
  0x00007f1a59000c91:   mov    0x18(%rbp),%r15
  0x00007f1a59000c95:   mov    0xb573374(%rip),%r12        # 0x00007f1a64574010
  0x00007f1a59000c9c:   mov    0x10(%rbp),%ecx
  0x00007f1a59000c9f:   test   %ecx,%ecx
  0x00007f1a59000ca1:   je     0x00007f1a59000cb9
  0x00007f1a59000ca7:   mov    -0x8(%rbp),%rdx
  0x00007f1a59000cab:   mov    %ecx,%esi
  0x00007f1a59000cad:   mov    (%rdx),%rax
  0x00007f1a59000cb0:   add    $0x8,%rdx
  0x00007f1a59000cb4:   dec    %esi
  0x00007f1a59000cb6:   push   %rax
  0x00007f1a59000cb7:   jne    0x00007f1a59000cad
  0x00007f1a59000cb9:   mov    -0x18(%rbp),%rbx
  0x00007f1a59000cbd:   mov    -0x10(%rbp),%rsi
  0x00007f1a59000cc1:   mov    %rsp,%r13
  0x00007f1a59000cc4:   callq  *%rsi
  0x00007f1a59000cc6:   mov    -0x28(%rbp),%rdi
  0x00007f1a59000cca:   mov    -0x20(%rbp),%esi
  0x00007f1a59000ccd:   cmp    $0xc,%esi
  0x00007f1a59000cd0:   je     0x00007f1a59000d19
  0x00007f1a59000cd6:   cmp    $0xb,%esi
  0x00007f1a59000cd9:   je     0x00007f1a59000d19
  0x00007f1a59000cdf:   cmp    $0x6,%esi
  0x00007f1a59000ce2:   je     0x00007f1a59000d1e
  0x00007f1a59000ce8:   cmp    $0x7,%esi
  0x00007f1a59000ceb:   je     0x00007f1a59000d24
  0x00007f1a59000cf1:   mov    %eax,(%rdi)
  0x00007f1a59000cf3:   lea    -0x60(%rbp),%rsp
  0x00007f1a59000cf7:   mov    -0x58(%rbp),%r15
  0x00007f1a59000cfb:   mov    -0x50(%rbp),%r14
  0x00007f1a59000cff:   mov    -0x48(%rbp),%r13
  0x00007f1a59000d03:   mov    -0x40(%rbp),%r12
  0x00007f1a59000d07:   mov    -0x38(%rbp),%rbx
  0x00007f1a59000d0b:   vldmxcsr -0x60(%rbp)
  0x00007f1a59000d10:   add    $0x60,%rsp
  0x00007f1a59000d14:   vzeroupper 
  0x00007f1a59000d17:   pop    %rbp
  0x00007f1a59000d18:   retq   
  0x00007f1a59000d19:   mov    %rax,(%rdi)
  0x00007f1a59000d1c:   jmp    0x00007f1a59000cf3
  0x00007f1a59000d1e:   vmovss %xmm0,(%rdi)
  0x00007f1a59000d22:   jmp    0x00007f1a59000cf3
  0x00007f1a59000d24:   vmovsd %xmm0,(%rdi)
  0x00007f1a59000d28:   jmp    0x00007f1a59000cf3
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::catch_exception [0x00007f1a59000d2a, 0x00007f1a59000d49] (31 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000d2a:   mov    %rax,0x8(%r15)
  0x00007f1a59000d2e:   movabs $0x7f1a64297ca0,%r10
  0x00007f1a59000d38:   mov    %r10,0x10(%r15)
  0x00007f1a59000d3c:   movl   $0x1cb,0x18(%r15)
  0x00007f1a59000d44:   jmpq   0x00007f1a59000cc6
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::orderaccess_fence [0x00007f1a59000d49, 0x00007f1a59000d50] (7 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000d49:   lock addl $0x0,-0x40(%rsp)
  0x00007f1a59000d4f:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::get_previous_sp [0x00007f1a59000d50, 0x00007f1a59000d58] (8 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000d50:   mov    %rsp,%rax
  0x00007f1a59000d53:   add    $0x8,%rax
  0x00007f1a59000d57:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::verify_mxcsr [0x00007f1a59000d58, 0x00007f1a59000d59] (1 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000d58:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::f2i_fixup [0x00007f1a59000d59, 0x00007f1a59000d91] (56 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000d59:   push   %rax
  0x00007f1a59000d5a:   push   %rcx
  0x00007f1a59000d5b:   push   %rdx
  0x00007f1a59000d5c:   push   %rsi
  0x00007f1a59000d5d:   mov    $0x7f800000,%eax
  0x00007f1a59000d62:   xor    %ecx,%ecx
  0x00007f1a59000d64:   mov    0x28(%rsp),%edx
  0x00007f1a59000d68:   mov    %edx,%esi
  0x00007f1a59000d6a:   and    $0x7fffffff,%esi
  0x00007f1a59000d70:   cmp    %esi,%eax
  0x00007f1a59000d72:   js     0x00007f1a59000d87
  0x00007f1a59000d78:   test   %edx,%edx
  0x00007f1a59000d7a:   mov    $0x80000000,%ecx
  0x00007f1a59000d7f:   mov    $0x7fffffff,%eax
  0x00007f1a59000d84:   cmovns %eax,%ecx
  0x00007f1a59000d87:   mov    %rcx,0x28(%rsp)
  0x00007f1a59000d8c:   pop    %rsi
  0x00007f1a59000d8d:   pop    %rdx
  0x00007f1a59000d8e:   pop    %rcx
  0x00007f1a59000d8f:   pop    %rax
  0x00007f1a59000d90:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::f2l_fixup [0x00007f1a59000d91, 0x00007f1a59000dd4] (67 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000d91:   push   %rax
  0x00007f1a59000d92:   push   %rcx
  0x00007f1a59000d93:   push   %rdx
  0x00007f1a59000d94:   push   %rsi
  0x00007f1a59000d95:   mov    $0x7f800000,%eax
  0x00007f1a59000d9a:   xor    %ecx,%ecx
  0x00007f1a59000d9c:   mov    0x28(%rsp),%edx
  0x00007f1a59000da0:   mov    %edx,%esi
  0x00007f1a59000da2:   and    $0x7fffffff,%esi
  0x00007f1a59000da8:   cmp    %esi,%eax
  0x00007f1a59000daa:   js     0x00007f1a59000dca
  0x00007f1a59000db0:   test   %edx,%edx
  0x00007f1a59000db2:   movabs $0x8000000000000000,%rcx
  0x00007f1a59000dbc:   movabs $0x7fffffffffffffff,%rax
  0x00007f1a59000dc6:   cmovns %rax,%rcx
  0x00007f1a59000dca:   mov    %rcx,0x28(%rsp)
  0x00007f1a59000dcf:   pop    %rsi
  0x00007f1a59000dd0:   pop    %rdx
  0x00007f1a59000dd1:   pop    %rcx
  0x00007f1a59000dd2:   pop    %rax
  0x00007f1a59000dd3:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::d2i_fixup [0x00007f1a59000dd4, 0x00007f1a59000e24] (80 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000dd4:   push   %rax
  0x00007f1a59000dd5:   push   %rcx
  0x00007f1a59000dd6:   push   %rdx
  0x00007f1a59000dd7:   push   %rsi
  0x00007f1a59000dd8:   push   %rdi
  0x00007f1a59000dd9:   mov    $0x7ff00000,%eax
  0x00007f1a59000dde:   mov    0x30(%rsp),%rdx
  0x00007f1a59000de3:   mov    %edx,%ecx
  0x00007f1a59000de5:   mov    %rdx,%rsi
  0x00007f1a59000de8:   mov    %rdx,%rdi
  0x00007f1a59000deb:   neg    %ecx
  0x00007f1a59000ded:   shr    $0x20,%rsi
  0x00007f1a59000df1:   or     %edx,%ecx
  0x00007f1a59000df3:   and    $0x7fffffff,%esi
  0x00007f1a59000df9:   xor    %edx,%edx
  0x00007f1a59000dfb:   shr    $0x1f,%ecx
  0x00007f1a59000dfe:   or     %ecx,%esi
  0x00007f1a59000e00:   cmp    %esi,%eax
  0x00007f1a59000e02:   js     0x00007f1a59000e19
  0x00007f1a59000e08:   test   %rdi,%rdi
  0x00007f1a59000e0b:   mov    $0x80000000,%edx
  0x00007f1a59000e10:   mov    $0x7fffffff,%eax
  0x00007f1a59000e15:   cmovns %rax,%rdx
  0x00007f1a59000e19:   mov    %rdx,0x30(%rsp)
  0x00007f1a59000e1e:   pop    %rdi
  0x00007f1a59000e1f:   pop    %rsi
  0x00007f1a59000e20:   pop    %rdx
  0x00007f1a59000e21:   pop    %rcx
  0x00007f1a59000e22:   pop    %rax
  0x00007f1a59000e23:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::d2l_fixup [0x00007f1a59000e24, 0x00007f1a59000e7e] (90 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000e24:   push   %rax
  0x00007f1a59000e25:   push   %rcx
  0x00007f1a59000e26:   push   %rdx
  0x00007f1a59000e27:   push   %rsi
  0x00007f1a59000e28:   push   %rdi
  0x00007f1a59000e29:   mov    $0x7ff00000,%eax
  0x00007f1a59000e2e:   mov    0x30(%rsp),%rdx
  0x00007f1a59000e33:   mov    %edx,%ecx
  0x00007f1a59000e35:   mov    %rdx,%rsi
  0x00007f1a59000e38:   mov    %rdx,%rdi
  0x00007f1a59000e3b:   neg    %ecx
  0x00007f1a59000e3d:   shr    $0x20,%rsi
  0x00007f1a59000e41:   or     %edx,%ecx
  0x00007f1a59000e43:   and    $0x7fffffff,%esi
  0x00007f1a59000e49:   xor    %edx,%edx
  0x00007f1a59000e4b:   shr    $0x1f,%ecx
  0x00007f1a59000e4e:   or     %ecx,%esi
  0x00007f1a59000e50:   cmp    %esi,%eax
  0x00007f1a59000e52:   js     0x00007f1a59000e73
  0x00007f1a59000e58:   test   %rdi,%rdi
  0x00007f1a59000e5b:   movabs $0x8000000000000000,%rdx
  0x00007f1a59000e65:   movabs $0x7fffffffffffffff,%rax
  0x00007f1a59000e6f:   cmovns %rax,%rdx
  0x00007f1a59000e73:   mov    %rdx,0x30(%rsp)
  0x00007f1a59000e78:   pop    %rdi
  0x00007f1a59000e79:   pop    %rsi
  0x00007f1a59000e7a:   pop    %rdx
  0x00007f1a59000e7b:   pop    %rcx
  0x00007f1a59000e7c:   pop    %rax
  0x00007f1a59000e7d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::float_sign_mask [0x00007f1a59000e80, 0x00007f1a59000e90] (16 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000e80:   (bad)  
  0x00007f1a59000e81:   (bad)  
  0x00007f1a59000e82:   (bad)  
  0x00007f1a59000e83:   jg     0x00007f1a59000e84
  0x00007f1a59000e85:   (bad)  
  0x00007f1a59000e86:   (bad)  
  0x00007f1a59000e87:   jg     0x00007f1a59000e88
  0x00007f1a59000e89:   (bad)  
  0x00007f1a59000e8a:   (bad)  
  0x00007f1a59000e8b:   jg     0x00007f1a59000e8c
  0x00007f1a59000e8d:   (bad)  
  0x00007f1a59000e8e:   (bad)  
  0x00007f1a59000e8f:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::float_sign_flip [0x00007f1a59000ea0, 0x00007f1a59000eb0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000ea0:   add    %al,(%rax)
  0x00007f1a59000ea2:   add    %al,-0x80000000(%rax)
  0x00007f1a59000ea8:   add    %al,(%rax)
  0x00007f1a59000eaa:   add    %al,-0x80000000(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::double_sign_mask [0x00007f1a59000ec0, 0x00007f1a59000ed0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000ec0:   (bad)  
  0x00007f1a59000ec1:   (bad)  
  0x00007f1a59000ec2:   (bad)  
  0x00007f1a59000ec3:   (bad)  
  0x00007f1a59000ec4:   (bad)  
  0x00007f1a59000ec5:   (bad)  
  0x00007f1a59000ec6:   (bad)  
  0x00007f1a59000ec7:   jg     0x00007f1a59000ec8
  0x00007f1a59000ec9:   (bad)  
  0x00007f1a59000eca:   (bad)  
  0x00007f1a59000ecb:   (bad)  
  0x00007f1a59000ecc:   (bad)  
  0x00007f1a59000ecd:   (bad)  
  0x00007f1a59000ece:   (bad)  
  0x00007f1a59000ecf:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::double_sign_flip [0x00007f1a59000ee0, 0x00007f1a59000ef0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000ee0:   add    %al,(%rax)
  0x00007f1a59000ee2:   add    %al,(%rax)
  0x00007f1a59000ee4:   add    %al,(%rax)
  0x00007f1a59000ee6:   add    %al,0x0(%rax)
  0x00007f1a59000eec:   add    %al,(%rax)
  0x00007f1a59000eee:   .byte 0x0
  0x00007f1a59000eef:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - StackOverflowError throw_exception 0x00007f1a59008610
--------------------------------------------------------------------------------
  0x00007f1a59008680:   push   %rbp
  0x00007f1a59008681:   mov    %rsp,%rbp
  0x00007f1a59008684:   sub    $0x0,%rsp
  0x00007f1a59008688:   vzeroupper 
  0x00007f1a5900868b:   mov    %rbp,0x2d0(%r15)
  0x00007f1a59008692:   movabs $0x7f1a59008688,%r10
  0x00007f1a5900869c:   mov    %r10,0x2c8(%r15)
  0x00007f1a590086a3:   mov    %rsp,0x2c0(%r15)
  0x00007f1a590086aa:   and    $0xfffffffffffffff0,%rsp
  0x00007f1a590086ae:   mov    %r15,%rdi
  0x00007f1a590086b1:   callq  0x00007f1a63f0f2a0 = SharedRuntime::throw_StackOverflowError(JavaThread*)
  0x00007f1a590086b6:   movq   $0x0,0x2c0(%r15)
  0x00007f1a590086c1:   movq   $0x0,0x2d0(%r15)
  0x00007f1a590086cc:   movq   $0x0,0x2c8(%r15)
  0x00007f1a590086d7:   vzeroupper 
  0x00007f1a590086da:   leaveq 
  0x00007f1a590086db:   jmpq   0x00007f1a59000c00
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - delayed StackOverflowError throw_exception 0x00007f1a59008910
--------------------------------------------------------------------------------
  0x00007f1a59008980:   push   %rbp
  0x00007f1a59008981:   mov    %rsp,%rbp
  0x00007f1a59008984:   sub    $0x0,%rsp
  0x00007f1a59008988:   vzeroupper 
  0x00007f1a5900898b:   mov    %rbp,0x2d0(%r15)
  0x00007f1a59008992:   movabs $0x7f1a59008988,%r10
  0x00007f1a5900899c:   mov    %r10,0x2c8(%r15)
  0x00007f1a590089a3:   mov    %rsp,0x2c0(%r15)
  0x00007f1a590089aa:   and    $0xfffffffffffffff0,%rsp
  0x00007f1a590089ae:   mov    %r15,%rdi
  0x00007f1a590089b1:   callq  0x00007f1a63f0f460 = SharedRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f1a590089b6:   movq   $0x0,0x2c0(%r15)
  0x00007f1a590089c1:   movq   $0x0,0x2d0(%r15)
  0x00007f1a590089cc:   movq   $0x0,0x2c8(%r15)
  0x00007f1a590089d7:   vzeroupper 
  0x00007f1a590089da:   leaveq 
  0x00007f1a590089db:   jmpq   0x00007f1a59000c00
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesCRC32 [0x00007f1a59000f00, 0x00007f1a59001150] (592 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59000f00:   push   %rbp
  0x00007f1a59000f01:   mov    %rsp,%rbp
  0x00007f1a59000f04:   movabs $0x7f1a6458a780,%rcx
  0x00007f1a59000f0e:   not    %edi
  0x00007f1a59000f10:   cmp    $0x10,%edx
  0x00007f1a59000f13:   jl     0x00007f1a5900112a
  0x00007f1a59000f19:   mov    %esi,%r11d
  0x00007f1a59000f1c:   and    $0xf,%r11d
  0x00007f1a59000f20:   je     0x00007f1a59000f44
  0x00007f1a59000f22:   sub    $0x10,%r11d
  0x00007f1a59000f26:   add    %r11d,%edx
  0x00007f1a59000f29:   data16 xchg %ax,%ax
  0x00007f1a59000f2c:   movsbl (%rsi),%eax
  0x00007f1a59000f2f:   xor    %edi,%eax
  0x00007f1a59000f31:   and    $0xff,%eax
  0x00007f1a59000f36:   shr    $0x8,%edi
  0x00007f1a59000f39:   xor    (%rcx,%rax,4),%edi
  0x00007f1a59000f3c:   inc    %rsi
  0x00007f1a59000f3f:   inc    %r11d
  0x00007f1a59000f42:   jl     0x00007f1a59000f2c
  0x00007f1a59000f44:   mov    %edx,%r11d
  0x00007f1a59000f47:   shr    $0x4,%edx
  0x00007f1a59000f4a:   je     0x00007f1a59001127
  0x00007f1a59000f50:   vmovdqa (%rsi),%xmm1
  0x00007f1a59000f54:   vmovd  %xmm1,%eax
  0x00007f1a59000f58:   xor    %eax,%edi
  0x00007f1a59000f5a:   vpinsrd $0x0,%edi,%xmm1,%xmm1
  0x00007f1a59000f60:   add    $0x10,%rsi
  0x00007f1a59000f64:   sub    $0x4,%edx
  0x00007f1a59000f67:   jl     0x00007f1a59001040
  0x00007f1a59000f6d:   vmovdqa (%rsi),%xmm2
  0x00007f1a59000f71:   vmovdqa 0x10(%rsi),%xmm3
  0x00007f1a59000f76:   vmovdqa 0x20(%rsi),%xmm4
  0x00007f1a59000f7b:   add    $0x30,%rsi
  0x00007f1a59000f7f:   sub    $0x3,%edx
  0x00007f1a59000f82:   jle    0x00007f1a59000ffc
  0x00007f1a59000f88:   vmovdqu 0xb589c10(%rip),%xmm0        # 0x00007f1a6458aba0
  0x00007f1a59000f90:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a59000f9b:   data16 data16 xchg %ax,%ax
  0x00007f1a59000f9f:   nop
  0x00007f1a59000fa0:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f1a59000fa6:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f1a59000fac:   vpxor  (%rsi),%xmm1,%xmm1
  0x00007f1a59000fb0:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f1a59000fb4:   vpclmulhqhqdq %xmm2,%xmm0,%xmm5
  0x00007f1a59000fba:   vpclmullqlqdq %xmm2,%xmm0,%xmm2
  0x00007f1a59000fc0:   vpxor  0x10(%rsi),%xmm2,%xmm2
  0x00007f1a59000fc5:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007f1a59000fc9:   vpclmulhqhqdq %xmm3,%xmm0,%xmm5
  0x00007f1a59000fcf:   vpclmullqlqdq %xmm3,%xmm0,%xmm3
  0x00007f1a59000fd5:   vpxor  0x20(%rsi),%xmm3,%xmm3
  0x00007f1a59000fda:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007f1a59000fde:   vpclmulhqhqdq %xmm4,%xmm0,%xmm5
  0x00007f1a59000fe4:   vpclmullqlqdq %xmm4,%xmm0,%xmm4
  0x00007f1a59000fea:   vpxor  0x30(%rsi),%xmm4,%xmm4
  0x00007f1a59000fef:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f1a59000ff3:   add    $0x40,%rsi
  0x00007f1a59000ff7:   sub    $0x4,%edx
  0x00007f1a59000ffa:   jg     0x00007f1a59000fa0
  0x00007f1a59000ffc:   vmovdqu 0xb589b8c(%rip),%xmm0        # 0x00007f1a6458ab90
  0x00007f1a59001004:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f1a5900100a:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f1a59001010:   vpxor  %xmm2,%xmm1,%xmm1
  0x00007f1a59001014:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f1a59001018:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f1a5900101e:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f1a59001024:   vpxor  %xmm3,%xmm1,%xmm1
  0x00007f1a59001028:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f1a5900102c:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f1a59001032:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f1a59001038:   vpxor  %xmm4,%xmm1,%xmm1
  0x00007f1a5900103c:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f1a59001040:   add    $0x3,%edx
  0x00007f1a59001043:   jle    0x00007f1a59001069
  0x00007f1a59001045:   vmovdqu 0xb589b43(%rip),%xmm0        # 0x00007f1a6458ab90
  0x00007f1a5900104d:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f1a59001053:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f1a59001059:   vpxor  (%rsi),%xmm1,%xmm1
  0x00007f1a5900105d:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f1a59001061:   add    $0x10,%rsi
  0x00007f1a59001065:   dec    %edx
  0x00007f1a59001067:   jg     0x00007f1a5900104d
  0x00007f1a59001069:   vmovdqu 0xb589b0f(%rip),%xmm0        # 0x00007f1a6458ab80
  0x00007f1a59001071:   vpclmulhqlqdq %xmm1,%xmm0,%xmm2
  0x00007f1a59001077:   vpand  %xmm2,%xmm0,%xmm3
  0x00007f1a5900107b:   vpclmulhqlqdq %xmm3,%xmm0,%xmm0
  0x00007f1a59001081:   vpsrldq $0x8,%xmm1,%xmm1
  0x00007f1a59001086:   vpsrldq $0x4,%xmm2,%xmm2
  0x00007f1a5900108b:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a5900108f:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f1a59001093:   vmovd  %xmm0,%eax
  0x00007f1a59001097:   and    $0xff,%eax
  0x00007f1a5900109c:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007f1a590010a1:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007f1a590010a6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a590010aa:   vmovd  %xmm0,%eax
  0x00007f1a590010ae:   and    $0xff,%eax
  0x00007f1a590010b3:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007f1a590010b8:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007f1a590010bd:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a590010c1:   vmovd  %xmm0,%eax
  0x00007f1a590010c5:   and    $0xff,%eax
  0x00007f1a590010ca:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007f1a590010cf:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007f1a590010d4:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a590010d8:   vmovd  %xmm0,%eax
  0x00007f1a590010dc:   and    $0xff,%eax
  0x00007f1a590010e1:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007f1a590010e6:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007f1a590010eb:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a590010ef:   vmovd  %xmm0,%edi
  0x00007f1a590010f3:   mov    %edi,%eax
  0x00007f1a590010f5:   and    $0xff,%eax
  0x00007f1a590010fa:   shr    $0x8,%edi
  0x00007f1a590010fd:   xor    (%rcx,%rax,4),%edi
  0x00007f1a59001100:   mov    %edi,%eax
  0x00007f1a59001102:   and    $0xff,%eax
  0x00007f1a59001107:   shr    $0x8,%edi
  0x00007f1a5900110a:   xor    (%rcx,%rax,4),%edi
  0x00007f1a5900110d:   mov    %edi,%eax
  0x00007f1a5900110f:   and    $0xff,%eax
  0x00007f1a59001114:   shr    $0x8,%edi
  0x00007f1a59001117:   xor    (%rcx,%rax,4),%edi
  0x00007f1a5900111a:   mov    %edi,%eax
  0x00007f1a5900111c:   and    $0xff,%eax
  0x00007f1a59001121:   shr    $0x8,%edi
  0x00007f1a59001124:   xor    (%rcx,%rax,4),%edi
  0x00007f1a59001127:   mov    %r11d,%edx
  0x00007f1a5900112a:   and    $0xf,%edx
  0x00007f1a5900112d:   je     0x00007f1a59001147
  0x00007f1a5900112f:   nop
  0x00007f1a59001130:   movsbl (%rsi),%eax
  0x00007f1a59001133:   xor    %edi,%eax
  0x00007f1a59001135:   and    $0xff,%eax
  0x00007f1a5900113a:   shr    $0x8,%edi
  0x00007f1a5900113d:   xor    (%rcx,%rax,4),%edi
  0x00007f1a59001140:   inc    %rsi
  0x00007f1a59001143:   dec    %edx
  0x00007f1a59001145:   jg     0x00007f1a59001130
  0x00007f1a59001147:   not    %edi
  0x00007f1a59001149:   mov    %edi,%eax
  0x00007f1a5900114b:   vzeroupper 
  0x00007f1a5900114e:   leaveq 
  0x00007f1a5900114f:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesCRC32C [0x00007f1a59001160, 0x00007f1a590013c4] (612 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59001160:   push   %rbp
  0x00007f1a59001161:   mov    %rsp,%rbp
  0x00007f1a59001164:   cmp    $0x1800,%edx
  0x00007f1a5900116a:   jl     0x00007f1a59001215
  0x00007f1a59001170:   xor    %eax,%eax
  0x00007f1a59001172:   xor    %r9d,%r9d
  0x00007f1a59001175:   mov    %rsi,%r10
  0x00007f1a59001178:   add    $0x800,%r10
  0x00007f1a5900117f:   crc32q (%rsi),%rdi
  0x00007f1a59001185:   crc32q 0x800(%rsi),%rax
  0x00007f1a5900118f:   crc32q 0x1000(%rsi),%r9
  0x00007f1a59001199:   add    $0x8,%rsi
  0x00007f1a5900119d:   cmp    %r10,%rsi
  0x00007f1a590011a0:   jl     0x00007f1a5900117f
  0x00007f1a590011a2:   vmovd  %edi,%xmm0
  0x00007f1a590011a6:   mov    $0x35d73a62,%r11d
  0x00007f1a590011ac:   vmovd  %r11d,%xmm2
  0x00007f1a590011b1:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007f1a590011b7:   vmovq  %xmm0,%rdi
  0x00007f1a590011bc:   vmovd  %eax,%xmm1
  0x00007f1a590011c0:   mov    $0xd65762a,%r11d
  0x00007f1a590011c6:   vmovd  %r11d,%xmm2
  0x00007f1a590011cb:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007f1a590011d1:   vmovq  %xmm1,%rax
  0x00007f1a590011d6:   shl    %rdi
  0x00007f1a590011d9:   mov    %edi,%r11d
  0x00007f1a590011dc:   shr    $0x20,%rdi
  0x00007f1a590011e0:   xor    %ecx,%ecx
  0x00007f1a590011e2:   crc32l %r11d,%ecx
  0x00007f1a590011e8:   xor    %ecx,%edi
  0x00007f1a590011ea:   shl    %rax
  0x00007f1a590011ed:   mov    %eax,%r11d
  0x00007f1a590011f0:   shr    $0x20,%rax
  0x00007f1a590011f4:   xor    %ecx,%ecx
  0x00007f1a590011f6:   crc32l %r11d,%ecx
  0x00007f1a590011fc:   xor    %ecx,%eax
  0x00007f1a590011fe:   xor    %eax,%edi
  0x00007f1a59001200:   xor    %r9d,%edi
  0x00007f1a59001203:   add    $0x1000,%rsi
  0x00007f1a5900120a:   sub    $0x1800,%edx
  0x00007f1a59001210:   jmpq   0x00007f1a59001164
  0x00007f1a59001215:   cmp    $0x6f0,%edx
  0x00007f1a5900121b:   jl     0x00007f1a590012c6
  0x00007f1a59001221:   xor    %eax,%eax
  0x00007f1a59001223:   xor    %r9d,%r9d
  0x00007f1a59001226:   mov    %rsi,%r10
  0x00007f1a59001229:   add    $0x250,%r10
  0x00007f1a59001230:   crc32q (%rsi),%rdi
  0x00007f1a59001236:   crc32q 0x250(%rsi),%rax
  0x00007f1a59001240:   crc32q 0x4a0(%rsi),%r9
  0x00007f1a5900124a:   add    $0x8,%rsi
  0x00007f1a5900124e:   cmp    %r10,%rsi
  0x00007f1a59001251:   jl     0x00007f1a59001230
  0x00007f1a59001253:   vmovd  %edi,%xmm0
  0x00007f1a59001257:   mov    $0x3babc3e6,%r11d
  0x00007f1a5900125d:   vmovd  %r11d,%xmm2
  0x00007f1a59001262:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007f1a59001268:   vmovq  %xmm0,%rdi
  0x00007f1a5900126d:   vmovd  %eax,%xmm1
  0x00007f1a59001271:   mov    $0x1230a27d,%r11d
  0x00007f1a59001277:   vmovd  %r11d,%xmm2
  0x00007f1a5900127c:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007f1a59001282:   vmovq  %xmm1,%rax
  0x00007f1a59001287:   shl    %rdi
  0x00007f1a5900128a:   mov    %edi,%r11d
  0x00007f1a5900128d:   shr    $0x20,%rdi
  0x00007f1a59001291:   xor    %ecx,%ecx
  0x00007f1a59001293:   crc32l %r11d,%ecx
  0x00007f1a59001299:   xor    %ecx,%edi
  0x00007f1a5900129b:   shl    %rax
  0x00007f1a5900129e:   mov    %eax,%r11d
  0x00007f1a590012a1:   shr    $0x20,%rax
  0x00007f1a590012a5:   xor    %ecx,%ecx
  0x00007f1a590012a7:   crc32l %r11d,%ecx
  0x00007f1a590012ad:   xor    %ecx,%eax
  0x00007f1a590012af:   xor    %eax,%edi
  0x00007f1a590012b1:   xor    %r9d,%edi
  0x00007f1a590012b4:   add    $0x4a0,%rsi
  0x00007f1a590012bb:   sub    $0x6f0,%edx
  0x00007f1a590012c1:   jmpq   0x00007f1a59001215
  0x00007f1a590012c6:   cmp    $0xd8,%edx
  0x00007f1a590012cc:   jl     0x00007f1a59001371
  0x00007f1a590012d2:   xor    %eax,%eax
  0x00007f1a590012d4:   xor    %r9d,%r9d
  0x00007f1a590012d7:   mov    %rsi,%r10
  0x00007f1a590012da:   add    $0x48,%r10
  0x00007f1a590012de:   crc32q (%rsi),%rdi
  0x00007f1a590012e4:   crc32q 0x48(%rsi),%rax
  0x00007f1a590012eb:   crc32q 0x90(%rsi),%r9
  0x00007f1a590012f5:   add    $0x8,%rsi
  0x00007f1a590012f9:   cmp    %r10,%rsi
  0x00007f1a590012fc:   jl     0x00007f1a590012de
  0x00007f1a590012fe:   vmovd  %edi,%xmm0
  0x00007f1a59001302:   mov    $0xe55ef1f3,%r11d
  0x00007f1a59001308:   vmovd  %r11d,%xmm2
  0x00007f1a5900130d:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007f1a59001313:   vmovq  %xmm0,%rdi
  0x00007f1a59001318:   vmovd  %eax,%xmm1
  0x00007f1a5900131c:   mov    $0x8cfaa965,%r11d
  0x00007f1a59001322:   vmovd  %r11d,%xmm2
  0x00007f1a59001327:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007f1a5900132d:   vmovq  %xmm1,%rax
  0x00007f1a59001332:   shl    %rdi
  0x00007f1a59001335:   mov    %edi,%r11d
  0x00007f1a59001338:   shr    $0x20,%rdi
  0x00007f1a5900133c:   xor    %ecx,%ecx
  0x00007f1a5900133e:   crc32l %r11d,%ecx
  0x00007f1a59001344:   xor    %ecx,%edi
  0x00007f1a59001346:   shl    %rax
  0x00007f1a59001349:   mov    %eax,%r11d
  0x00007f1a5900134c:   shr    $0x20,%rax
  0x00007f1a59001350:   xor    %ecx,%ecx
  0x00007f1a59001352:   crc32l %r11d,%ecx
  0x00007f1a59001358:   xor    %ecx,%eax
  0x00007f1a5900135a:   xor    %eax,%edi
  0x00007f1a5900135c:   xor    %r9d,%edi
  0x00007f1a5900135f:   add    $0x90,%rsi
  0x00007f1a59001366:   sub    $0xd8,%edx
  0x00007f1a5900136c:   jmpq   0x00007f1a590012c6
  0x00007f1a59001371:   mov    %edx,%eax
  0x00007f1a59001373:   and    $0x7,%eax
  0x00007f1a59001376:   neg    %eax
  0x00007f1a59001378:   add    %edx,%eax
  0x00007f1a5900137a:   add    %rsi,%rax
  0x00007f1a5900137d:   cmp    %rax,%rsi
  0x00007f1a59001380:   jge    0x00007f1a5900139f
  0x00007f1a59001382:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a5900138c:   data16 data16 xchg %ax,%ax
  0x00007f1a59001390:   crc32q (%rsi),%rdi
  0x00007f1a59001396:   add    $0x8,%rsi
  0x00007f1a5900139a:   cmp    %rax,%rsi
  0x00007f1a5900139d:   jl     0x00007f1a59001390
  0x00007f1a5900139f:   and    $0x7,%edx
  0x00007f1a590013a2:   mov    $0x1,%r9d
  0x00007f1a590013a8:   cmp    %edx,%r9d
  0x00007f1a590013ab:   jg     0x00007f1a590013bd
  0x00007f1a590013ad:   crc32b (%rsi),%edi
  0x00007f1a590013b2:   inc    %rsi
  0x00007f1a590013b5:   inc    %r9d
  0x00007f1a590013b8:   cmp    %edx,%r9d
  0x00007f1a590013bb:   jle    0x00007f1a590013ad
  0x00007f1a590013bd:   mov    %edi,%eax
  0x00007f1a590013bf:   vzeroupper 
  0x00007f1a590013c2:   leaveq 
  0x00007f1a590013c3:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesAdler32 [0x00007f1a590013e0, 0x00007f1a59001587] (423 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590013e0:   push   %rbp
  0x00007f1a590013e1:   mov    %rsp,%rbp
  0x00007f1a590013e4:   vmovq  %r12,%xmm8
  0x00007f1a590013e9:   vmovq  %r13,%xmm9
  0x00007f1a590013ee:   vmovq  %r14,%xmm10
  0x00007f1a590013f3:   vmovdqu 0xb581fa5(%rip),%ymm6        # 0x00007f1a645833a0
  0x00007f1a590013fb:   vmovdqu 0xb581f7d(%rip),%ymm7        # 0x00007f1a64583380
  0x00007f1a59001403:   mov    %rsi,%r9
  0x00007f1a59001406:   mov    %edx,%r10d
  0x00007f1a59001409:   mov    %edi,%r8d
  0x00007f1a5900140c:   shr    $0x10,%r8d
  0x00007f1a59001410:   and    $0xffff,%edi
  0x00007f1a59001416:   cmp    $0x20,%r10d
  0x00007f1a5900141a:   jb     0x00007f1a5900150f
  0x00007f1a59001420:   vmovd  %edi,%xmm0
  0x00007f1a59001424:   mov    $0x15b0,%r11d
  0x00007f1a5900142a:   cmp    %r10d,%r11d
  0x00007f1a5900142d:   cmova  %r10d,%r11d
  0x00007f1a59001431:   lea    -0xf(%r11,%r9,1),%r13
  0x00007f1a59001436:   cmp    %r13,%r9
  0x00007f1a59001439:   jae    0x00007f1a5900146c
  0x00007f1a5900143f:   nop
  0x00007f1a59001440:   vpxor  %ymm1,%ymm1,%ymm1
  0x00007f1a59001444:   vbroadcastf128 (%r9),%ymm4
  0x00007f1a59001449:   add    $0x10,%r9
  0x00007f1a5900144d:   vpshufb %ymm6,%ymm4,%ymm2
  0x00007f1a59001452:   vpaddd %ymm2,%ymm0,%ymm0
  0x00007f1a59001456:   vpaddd %ymm0,%ymm1,%ymm1
  0x00007f1a5900145a:   vpshufb %ymm7,%ymm4,%ymm3
  0x00007f1a5900145f:   vpaddd %ymm3,%ymm0,%ymm0
  0x00007f1a59001463:   vpaddd %ymm0,%ymm1,%ymm1
  0x00007f1a59001467:   cmp    %r13,%r9
  0x00007f1a5900146a:   jb     0x00007f1a59001444
  0x00007f1a5900146c:   vpslld $0x3,%ymm1,%ymm1
  0x00007f1a59001471:   vpmulld 0xb581f46(%rip),%ymm0,%ymm4        # 0x00007f1a645833c0
  0x00007f1a5900147a:   vextracti128 $0x1,%ymm0,%xmm2
  0x00007f1a59001480:   vextracti128 $0x1,%ymm1,%xmm3
  0x00007f1a59001486:   vextracti128 $0x1,%ymm4,%xmm5
  0x00007f1a5900148c:   vpaddd %xmm2,%xmm0,%xmm0
  0x00007f1a59001490:   vpaddd %xmm3,%xmm1,%xmm1
  0x00007f1a59001494:   vpaddd %xmm5,%xmm4,%xmm4
  0x00007f1a59001498:   vphaddd %xmm0,%xmm0,%xmm0
  0x00007f1a5900149d:   vphaddd %xmm1,%xmm1,%xmm1
  0x00007f1a590014a2:   vphaddd %xmm4,%xmm4,%xmm4
  0x00007f1a590014a7:   vphaddd %xmm0,%xmm0,%xmm0
  0x00007f1a590014ac:   vphaddd %xmm1,%xmm1,%xmm1
  0x00007f1a590014b1:   vphaddd %xmm4,%xmm4,%xmm4
  0x00007f1a590014b6:   vpsubd %xmm4,%xmm1,%xmm1
  0x00007f1a590014ba:   add    $0xf,%r13
  0x00007f1a590014be:   test   $0xf,%r11b
  0x00007f1a590014c2:   jne    0x00007f1a59001524
  0x00007f1a590014c8:   sub    %r11d,%r10d
  0x00007f1a590014cb:   vmovd  %xmm0,%eax
  0x00007f1a590014cf:   xor    %edx,%edx
  0x00007f1a590014d1:   mov    $0xfff1,%ecx
  0x00007f1a590014d6:   div    %ecx
  0x00007f1a590014d8:   mov    %edx,%r12d
  0x00007f1a590014db:   vmovd  %xmm1,%eax
  0x00007f1a590014df:   add    %r8d,%eax
  0x00007f1a590014e2:   xor    %edx,%edx
  0x00007f1a590014e4:   mov    $0xfff1,%ecx
  0x00007f1a590014e9:   div    %ecx
  0x00007f1a590014eb:   mov    %edx,%r8d
  0x00007f1a590014ee:   test   %r10d,%r10d
  0x00007f1a590014f1:   je     0x00007f1a59001501
  0x00007f1a590014f7:   vmovd  %r12d,%xmm0
  0x00007f1a590014fc:   jmpq   0x00007f1a59001424
  0x00007f1a59001501:   mov    %r8d,%eax
  0x00007f1a59001504:   shl    $0x10,%eax
  0x00007f1a59001507:   or     %r12d,%eax
  0x00007f1a5900150a:   jmpq   0x00007f1a59001576
  0x00007f1a5900150f:   mov    %edi,%r12d
  0x00007f1a59001512:   lea    (%r9,%r10,1),%r13
  0x00007f1a59001516:   test   %r10d,%r10d
  0x00007f1a59001519:   jne    0x00007f1a59001540
  0x00007f1a5900151f:   jmpq   0x00007f1a59001553
  0x00007f1a59001524:   vmovd  %xmm0,%r12d
  0x00007f1a59001529:   vmovd  %xmm1,%eax
  0x00007f1a5900152d:   add    %eax,%r8d
  0x00007f1a59001530:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a5900153b:   data16 data16 xchg %ax,%ax
  0x00007f1a5900153f:   nop
  0x00007f1a59001540:   movzbl (%r9),%eax
  0x00007f1a59001544:   add    %eax,%r12d
  0x00007f1a59001547:   add    $0x1,%r9
  0x00007f1a5900154b:   add    %r12d,%r8d
  0x00007f1a5900154e:   cmp    %r13,%r9
  0x00007f1a59001551:   jb     0x00007f1a59001540
  0x00007f1a59001553:   mov    %r12d,%eax
  0x00007f1a59001556:   xor    %edx,%edx
  0x00007f1a59001558:   mov    $0xfff1,%ecx
  0x00007f1a5900155d:   div    %ecx
  0x00007f1a5900155f:   mov    %edx,%r12d
  0x00007f1a59001562:   mov    %r8d,%eax
  0x00007f1a59001565:   xor    %edx,%edx
  0x00007f1a59001567:   mov    $0xfff1,%ecx
  0x00007f1a5900156c:   div    %ecx
  0x00007f1a5900156e:   shl    $0x10,%edx
  0x00007f1a59001571:   or     %r12d,%edx
  0x00007f1a59001574:   mov    %edx,%eax
  0x00007f1a59001576:   vmovq  %xmm10,%r14
  0x00007f1a5900157b:   vmovq  %xmm9,%r13
  0x00007f1a59001580:   vmovq  %xmm8,%r12
  0x00007f1a59001585:   leaveq 
  0x00007f1a59001586:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmSin [0x00007f1a59001587, 0x00007f1a59001c16] (1679 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59001587:   push   %rbp
  0x00007f1a59001588:   mov    %rsp,%rbp
  0x00007f1a5900158b:   push   %rbx
  0x00007f1a5900158c:   sub    $0x10,%rsp
  0x00007f1a59001590:   vmovsd %xmm0,0x8(%rsp)
  0x00007f1a59001596:   mov    0xc(%rsp),%eax
  0x00007f1a5900159a:   vmovq  0xb582aae(%rip),%xmm1        # 0x00007f1a64584050
  0x00007f1a590015a2:   vmovq  0xb582b06(%rip),%xmm2        # 0x00007f1a645840b0
  0x00007f1a590015aa:   and    $0x7fff0000,%eax
  0x00007f1a590015af:   sub    $0x30300000,%eax
  0x00007f1a590015b4:   cmp    $0x10c50000,%eax
  0x00007f1a590015b9:   ja     0x00007f1a59001709
  0x00007f1a590015bf:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f1a590015c3:   vmovdqu 0xb582b15(%rip),%xmm5        # 0x00007f1a645840e0
  0x00007f1a590015cb:   vmovq  0xb582afd(%rip),%xmm4        # 0x00007f1a645840d0
  0x00007f1a590015d3:   vpand  %xmm0,%xmm4,%xmm4
  0x00007f1a590015d7:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f1a590015db:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f1a590015df:   vcvttsd2si %xmm1,%edx
  0x00007f1a590015e3:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007f1a590015e7:   vmovdqu 0xb582a41(%rip),%xmm6        # 0x00007f1a64584030
  0x00007f1a590015ef:   movabs $0x3fb921fb54400000,%r8
  0x00007f1a590015f9:   vmovq  %r8,%xmm3
  0x00007f1a590015fe:   vmovdqu 0xb582a6a(%rip),%xmm5        # 0x00007f1a64584070
  0x00007f1a59001606:   vpshufd $0x44,%xmm0,%xmm4
  0x00007f1a5900160b:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f1a5900160f:   vmovddup %xmm1,%xmm1
  0x00007f1a59001613:   and    $0x3f,%edx
  0x00007f1a59001616:   shl    $0x5,%edx
  0x00007f1a59001619:   movabs $0x7f1a64583780,%rax
  0x00007f1a59001623:   add    %rdx,%rax
  0x00007f1a59001626:   vmulpd %xmm1,%xmm6,%xmm6
  0x00007f1a5900162a:   vmulsd 0xb5829f6(%rip),%xmm1,%xmm1        # 0x00007f1a64584028
  0x00007f1a59001632:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f1a59001636:   vmovq  0x8(%rax),%xmm7
  0x00007f1a5900163b:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007f1a5900163f:   vmovddup %xmm4,%xmm3
  0x00007f1a59001643:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007f1a59001647:   vpshufd $0x44,%xmm0,%xmm0
  0x00007f1a5900164c:   vmovdqu (%rax),%xmm2
  0x00007f1a59001650:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a59001654:   vsubpd %xmm6,%xmm0,%xmm0
  0x00007f1a59001658:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007f1a5900165c:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f1a59001660:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a59001664:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a59001668:   vsubsd %xmm6,%xmm3,%xmm3
  0x00007f1a5900166c:   vmovdqu 0xb582a1c(%rip),%xmm6        # 0x00007f1a64584090
  0x00007f1a59001674:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007f1a59001678:   vmovq  0x18(%rax),%xmm3
  0x00007f1a5900167d:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f1a59001681:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f1a59001685:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f1a59001689:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007f1a5900168d:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007f1a59001691:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007f1a59001695:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a59001699:   vaddpd 0xb5829df(%rip),%xmm5,%xmm5        # 0x00007f1a64584080
  0x00007f1a590016a1:   vmulsd (%rax),%xmm4,%xmm4
  0x00007f1a590016a5:   vaddpd 0xb5829f3(%rip),%xmm6,%xmm6        # 0x00007f1a645840a0
  0x00007f1a590016ad:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a590016b1:   vmovdqu %xmm3,%xmm0
  0x00007f1a590016b5:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007f1a590016ba:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007f1a590016be:   vmovdqu %xmm4,%xmm7
  0x00007f1a590016c2:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007f1a590016c6:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007f1a590016ca:   vmovq  0x8(%rax),%xmm5
  0x00007f1a590016cf:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007f1a590016d3:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f1a590016d7:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007f1a590016dc:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f1a590016e0:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f1a590016e4:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007f1a590016e8:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f1a590016ec:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f1a590016f0:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f1a590016f4:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007f1a590016f8:   vmovdqu %xmm4,%xmm0
  0x00007f1a590016fc:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f1a59001700:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f1a59001704:   jmpq   0x00007f1a59001c0f
  0x00007f1a59001709:   jg     0x00007f1a59001747
  0x00007f1a5900170f:   shr    $0x14,%eax
  0x00007f1a59001712:   cmp    $0xcfd,%eax
  0x00007f1a59001717:   jne    0x00007f1a5900172a
  0x00007f1a5900171d:   vmulsd 0xb58723b(%rip),%xmm0,%xmm0        # 0x00007f1a64588960
  0x00007f1a59001725:   jmpq   0x00007f1a59001c0f
  0x00007f1a5900172a:   vmovq  0xb582996(%rip),%xmm3        # 0x00007f1a645840c8
  0x00007f1a59001732:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007f1a59001736:   vsubsd %xmm0,%xmm3,%xmm3
  0x00007f1a5900173a:   vmulsd 0xb58297e(%rip),%xmm3,%xmm3        # 0x00007f1a645840c0
  0x00007f1a59001742:   jmpq   0x00007f1a59001c0f
  0x00007f1a59001747:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a5900174c:   and    $0x7ff0,%eax
  0x00007f1a59001751:   cmp    $0x7ff0,%eax
  0x00007f1a59001756:   je     0x00007f1a59001bfc
  0x00007f1a5900175c:   vpextrw $0x3,%xmm0,%ecx
  0x00007f1a59001761:   and    $0x7ff0,%ecx
  0x00007f1a59001767:   sub    $0x3f60,%ecx
  0x00007f1a5900176d:   shr    $0x7,%ecx
  0x00007f1a59001770:   and    $0xfffc,%ecx
  0x00007f1a59001776:   movabs $0x7f1a64583f80,%r11
  0x00007f1a59001780:   add    %r11,%rcx
  0x00007f1a59001783:   vmovq  %xmm0,%rax
  0x00007f1a59001788:   mov    0x14(%rcx),%r10d
  0x00007f1a5900178c:   mov    0x18(%rcx),%r8d
  0x00007f1a59001790:   mov    %eax,%edx
  0x00007f1a59001792:   shr    $0x15,%rax
  0x00007f1a59001796:   or     $0x80000000,%eax
  0x00007f1a5900179b:   shr    $0xb,%eax
  0x00007f1a5900179e:   mov    %r10d,%r9d
  0x00007f1a590017a1:   imul   %rdx,%r10
  0x00007f1a590017a5:   imul   %rax,%r9
  0x00007f1a590017a9:   imul   %rax,%r8
  0x00007f1a590017ad:   mov    0x10(%rcx),%esi
  0x00007f1a590017b0:   mov    0xc(%rcx),%edi
  0x00007f1a590017b3:   mov    %r10d,%r11d
  0x00007f1a590017b6:   shr    $0x20,%r10
  0x00007f1a590017ba:   add    %r10,%r9
  0x00007f1a590017bd:   add    %r8,%r11
  0x00007f1a590017c0:   mov    %r11d,%r8d
  0x00007f1a590017c3:   shr    $0x20,%r11
  0x00007f1a590017c7:   add    %r11,%r9
  0x00007f1a590017ca:   mov    %esi,%r10d
  0x00007f1a590017cd:   imul   %rdx,%rsi
  0x00007f1a590017d1:   imul   %rax,%r10
  0x00007f1a590017d5:   mov    %edi,%r11d
  0x00007f1a590017d8:   imul   %rdx,%rdi
  0x00007f1a590017dc:   mov    %esi,%ebx
  0x00007f1a590017de:   shr    $0x20,%rsi
  0x00007f1a590017e2:   add    %rbx,%r9
  0x00007f1a590017e5:   mov    %r9d,%ebx
  0x00007f1a590017e8:   shr    $0x20,%r9
  0x00007f1a590017ec:   add    %rsi,%r10
  0x00007f1a590017ef:   add    %r9,%r10
  0x00007f1a590017f2:   shl    $0x20,%rbx
  0x00007f1a590017f6:   or     %rbx,%r8
  0x00007f1a590017f9:   imul   %rax,%r11
  0x00007f1a590017fd:   mov    0x8(%rcx),%r9d
  0x00007f1a59001801:   mov    0x4(%rcx),%esi
  0x00007f1a59001804:   mov    %edi,%ebx
  0x00007f1a59001806:   shr    $0x20,%rdi
  0x00007f1a5900180a:   add    %rbx,%r10
  0x00007f1a5900180d:   mov    %r10d,%ebx
  0x00007f1a59001810:   shr    $0x20,%r10
  0x00007f1a59001814:   add    %rdi,%r11
  0x00007f1a59001817:   add    %r10,%r11
  0x00007f1a5900181a:   mov    %r9,%rdi
  0x00007f1a5900181d:   imul   %rdx,%r9
  0x00007f1a59001821:   imul   %rax,%rdi
  0x00007f1a59001825:   mov    %r9d,%r10d
  0x00007f1a59001828:   shr    $0x20,%r9
  0x00007f1a5900182c:   add    %r10,%r11
  0x00007f1a5900182f:   mov    %r11d,%r10d
  0x00007f1a59001832:   shr    $0x20,%r11
  0x00007f1a59001836:   add    %r9,%rdi
  0x00007f1a59001839:   add    %r11,%rdi
  0x00007f1a5900183c:   mov    %rsi,%r9
  0x00007f1a5900183f:   imul   %rdx,%rsi
  0x00007f1a59001843:   imul   %rax,%r9
  0x00007f1a59001847:   shl    $0x20,%r10
  0x00007f1a5900184b:   or     %rbx,%r10
  0x00007f1a5900184e:   mov    (%rcx),%eax
  0x00007f1a59001850:   mov    %esi,%r11d
  0x00007f1a59001853:   shr    $0x20,%rsi
  0x00007f1a59001857:   add    %r11,%rdi
  0x00007f1a5900185a:   mov    %edi,%r11d
  0x00007f1a5900185d:   shr    $0x20,%rdi
  0x00007f1a59001861:   add    %rsi,%r9
  0x00007f1a59001864:   add    %rdi,%r9
  0x00007f1a59001867:   imul   %rax,%rdx
  0x00007f1a5900186b:   vpextrw $0x3,%xmm0,%ebx
  0x00007f1a59001870:   movabs $0x7f1a64583f80,%rdi
  0x00007f1a5900187a:   sub    %rdi,%rcx
  0x00007f1a5900187d:   add    %ecx,%ecx
  0x00007f1a5900187f:   add    %ecx,%ecx
  0x00007f1a59001881:   add    %ecx,%ecx
  0x00007f1a59001883:   add    $0x13,%ecx
  0x00007f1a59001886:   mov    $0x8000,%esi
  0x00007f1a5900188b:   and    %ebx,%esi
  0x00007f1a5900188d:   shr    $0x4,%ebx
  0x00007f1a59001890:   and    $0x7ff,%ebx
  0x00007f1a59001896:   sub    $0x3ff,%ebx
  0x00007f1a5900189c:   sub    %ebx,%ecx
  0x00007f1a5900189e:   add    %rdx,%r9
  0x00007f1a590018a1:   mov    %ecx,%edx
  0x00007f1a590018a3:   add    $0x20,%edx
  0x00007f1a590018a6:   cmp    $0x1,%ecx
  0x00007f1a590018a9:   jl     0x00007f1a59001b4c
  0x00007f1a590018af:   neg    %ecx
  0x00007f1a590018b1:   add    $0x1d,%ecx
  0x00007f1a590018b4:   shl    %cl,%r9d
  0x00007f1a590018b7:   mov    %r9d,%edi
  0x00007f1a590018ba:   and    $0x1fffffff,%r9d
  0x00007f1a590018c1:   test   $0x10000000,%r9d
  0x00007f1a590018c8:   jne    0x00007f1a59001b79
  0x00007f1a590018ce:   shr    %cl,%r9d
  0x00007f1a590018d1:   mov    $0x0,%ebx
  0x00007f1a590018d6:   shl    $0x20,%r9
  0x00007f1a590018da:   or     %r11,%r9
  0x00007f1a590018dd:   cmp    $0x0,%r9
  0x00007f1a590018e1:   je     0x00007f1a59001af0
  0x00007f1a590018e7:   bsr    %r9,%r11
  0x00007f1a590018eb:   mov    $0x1d,%ecx
  0x00007f1a590018f0:   sub    %r11d,%ecx
  0x00007f1a590018f3:   jle    0x00007f1a59001b29
  0x00007f1a590018f9:   shl    %cl,%r9
  0x00007f1a590018fc:   mov    %r10,%rax
  0x00007f1a590018ff:   shl    %cl,%r10
  0x00007f1a59001902:   add    %ecx,%edx
  0x00007f1a59001904:   neg    %ecx
  0x00007f1a59001906:   add    $0x40,%ecx
  0x00007f1a59001909:   shr    %cl,%rax
  0x00007f1a5900190c:   shr    %cl,%r8
  0x00007f1a5900190f:   or     %rax,%r9
  0x00007f1a59001912:   or     %r8,%r10
  0x00007f1a59001915:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007f1a5900191a:   shr    %r10
  0x00007f1a5900191d:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007f1a59001922:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007f1a59001926:   shl    $0x4,%edx
  0x00007f1a59001929:   neg    %edx
  0x00007f1a5900192b:   add    $0x3ff0,%edx
  0x00007f1a59001931:   or     %esi,%edx
  0x00007f1a59001933:   xor    %ebx,%edx
  0x00007f1a59001935:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007f1a5900193a:   vmovq  0xb582716(%rip),%xmm2        # 0x00007f1a64584058
  0x00007f1a59001942:   vmovq  0xb582716(%rip),%xmm6        # 0x00007f1a64584060
  0x00007f1a5900194a:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007f1a5900194e:   sub    $0x3f0,%edx
  0x00007f1a59001954:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007f1a59001959:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f1a5900195d:   shl    $0x10,%esi
  0x00007f1a59001960:   sar    $0x1f,%esi
  0x00007f1a59001963:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f1a59001967:   vmovdqu %xmm0,%xmm1
  0x00007f1a5900196b:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007f1a5900196f:   shr    $0x1d,%edi
  0x00007f1a59001972:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f1a59001976:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007f1a5900197a:   add    %esi,%edi
  0x00007f1a5900197c:   xor    %esi,%edi
  0x00007f1a5900197e:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007f1a59001982:   mov    %edi,%eax
  0x00007f1a59001984:   vaddsd %xmm3,%xmm6,%xmm6
  0x00007f1a59001988:   vmovdqu %xmm0,%xmm2
  0x00007f1a5900198c:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f1a59001990:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007f1a59001994:   vaddsd %xmm2,%xmm6,%xmm6
  0x00007f1a59001998:   vmovq  0xb5826b0(%rip),%xmm1        # 0x00007f1a64584050
  0x00007f1a590019a0:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f1a590019a4:   vmovq  0xb582734(%rip),%xmm5        # 0x00007f1a645840e0
  0x00007f1a590019ac:   vmovq  0xb58271c(%rip),%xmm4        # 0x00007f1a645840d0
  0x00007f1a590019b4:   vpand  %xmm0,%xmm4,%xmm4
  0x00007f1a590019b8:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f1a590019bc:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f1a590019c0:   vcvttsd2si %xmm1,%edx
  0x00007f1a590019c4:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007f1a590019c8:   vmovq  0xb582670(%rip),%xmm3        # 0x00007f1a64584040
  0x00007f1a590019d0:   vmovdqu 0xb582658(%rip),%xmm2        # 0x00007f1a64584030
  0x00007f1a590019d8:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f1a590019dc:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007f1a590019e0:   shl    $0x3,%eax
  0x00007f1a590019e3:   add    $0x1c7600,%edx
  0x00007f1a590019e9:   vmovdqu %xmm0,%xmm4
  0x00007f1a590019ed:   add    %eax,%edx
  0x00007f1a590019ef:   and    $0x3f,%edx
  0x00007f1a590019f2:   vmovdqu 0xb582676(%rip),%xmm5        # 0x00007f1a64584070
  0x00007f1a590019fa:   movabs $0x7f1a64583780,%rax
  0x00007f1a59001a04:   shl    $0x5,%edx
  0x00007f1a59001a07:   add    %rdx,%rax
  0x00007f1a59001a0a:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007f1a59001a0e:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007f1a59001a12:   vmulsd 0xb58260e(%rip),%xmm1,%xmm1        # 0x00007f1a64584028
  0x00007f1a59001a1a:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f1a59001a1e:   vmovq  0x8(%rax),%xmm7
  0x00007f1a59001a23:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f1a59001a27:   vmovdqu %xmm4,%xmm3
  0x00007f1a59001a2b:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f1a59001a2f:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a59001a33:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007f1a59001a37:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007f1a59001a3b:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f1a59001a3f:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a59001a43:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a59001a47:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f1a59001a4b:   vmovdqu (%rax),%xmm2
  0x00007f1a59001a4f:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007f1a59001a53:   vmovq  0x18(%rax),%xmm3
  0x00007f1a59001a58:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f1a59001a5c:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f1a59001a60:   vsubsd %xmm6,%xmm1,%xmm1
  0x00007f1a59001a64:   vmovdqu 0xb582624(%rip),%xmm6        # 0x00007f1a64584090
  0x00007f1a59001a6c:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f1a59001a70:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007f1a59001a74:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007f1a59001a78:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007f1a59001a7c:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a59001a80:   vaddpd 0xb5825f8(%rip),%xmm5,%xmm5        # 0x00007f1a64584080
  0x00007f1a59001a88:   vmulsd (%rax),%xmm4,%xmm4
  0x00007f1a59001a8c:   vaddpd 0xb58260c(%rip),%xmm6,%xmm6        # 0x00007f1a645840a0
  0x00007f1a59001a94:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a59001a98:   vmovdqu %xmm3,%xmm0
  0x00007f1a59001a9c:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007f1a59001aa1:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007f1a59001aa5:   vmovdqu %xmm4,%xmm7
  0x00007f1a59001aa9:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007f1a59001aad:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007f1a59001ab1:   vmovq  0x8(%rax),%xmm5
  0x00007f1a59001ab6:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007f1a59001aba:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f1a59001abe:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007f1a59001ac3:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f1a59001ac7:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f1a59001acb:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007f1a59001acf:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f1a59001ad3:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f1a59001ad7:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f1a59001adb:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007f1a59001adf:   vmovdqu %xmm4,%xmm0
  0x00007f1a59001ae3:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f1a59001ae7:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f1a59001aeb:   jmpq   0x00007f1a59001c0f
  0x00007f1a59001af0:   add    $0x40,%edx
  0x00007f1a59001af3:   mov    %r10,%r9
  0x00007f1a59001af6:   mov    %r8,%r10
  0x00007f1a59001af9:   mov    $0x0,%r8d
  0x00007f1a59001aff:   cmp    $0x0,%r9
  0x00007f1a59001b03:   jne    0x00007f1a590018e7
  0x00007f1a59001b09:   add    $0x40,%edx
  0x00007f1a59001b0c:   mov    %r10,%r9
  0x00007f1a59001b0f:   mov    %r8,%r10
  0x00007f1a59001b12:   cmp    $0x0,%r9
  0x00007f1a59001b16:   jne    0x00007f1a590018e7
  0x00007f1a59001b1c:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a59001b20:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f1a59001b24:   jmpq   0x00007f1a59001998
  0x00007f1a59001b29:   je     0x00007f1a59001915
  0x00007f1a59001b2f:   neg    %ecx
  0x00007f1a59001b31:   shr    %cl,%r10
  0x00007f1a59001b34:   mov    %r9,%rax
  0x00007f1a59001b37:   shr    %cl,%r9
  0x00007f1a59001b3a:   sub    %ecx,%edx
  0x00007f1a59001b3c:   neg    %ecx
  0x00007f1a59001b3e:   add    $0x40,%ecx
  0x00007f1a59001b41:   shl    %cl,%rax
  0x00007f1a59001b44:   or     %rax,%r10
  0x00007f1a59001b47:   jmpq   0x00007f1a59001915
  0x00007f1a59001b4c:   neg    %ecx
  0x00007f1a59001b4e:   shl    $0x20,%r9
  0x00007f1a59001b52:   or     %r11,%r9
  0x00007f1a59001b55:   shl    %cl,%r9
  0x00007f1a59001b58:   mov    %r9,%rdi
  0x00007f1a59001b5b:   test   $0x80000000,%r9d
  0x00007f1a59001b62:   jne    0x00007f1a59001bbb
  0x00007f1a59001b68:   shr    %cl,%r9d
  0x00007f1a59001b6b:   mov    $0x0,%ebx
  0x00007f1a59001b70:   shr    $0x3,%rdi
  0x00007f1a59001b74:   jmpq   0x00007f1a590018dd
  0x00007f1a59001b79:   shr    %cl,%r9d
  0x00007f1a59001b7c:   mov    $0x20000000,%ebx
  0x00007f1a59001b81:   shr    %cl,%ebx
  0x00007f1a59001b83:   shl    $0x20,%r9
  0x00007f1a59001b87:   or     %r11,%r9
  0x00007f1a59001b8a:   shl    $0x20,%rbx
  0x00007f1a59001b8e:   add    $0x20000000,%edi
  0x00007f1a59001b94:   mov    $0x0,%ecx
  0x00007f1a59001b99:   mov    $0x0,%r11d
  0x00007f1a59001b9f:   sub    %r8,%rcx
  0x00007f1a59001ba2:   sbb    %r10,%r11
  0x00007f1a59001ba5:   sbb    %r9,%rbx
  0x00007f1a59001ba8:   mov    %rcx,%r8
  0x00007f1a59001bab:   mov    %r11,%r10
  0x00007f1a59001bae:   mov    %rbx,%r9
  0x00007f1a59001bb1:   mov    $0x8000,%ebx
  0x00007f1a59001bb6:   jmpq   0x00007f1a590018dd
  0x00007f1a59001bbb:   shr    %cl,%r9d
  0x00007f1a59001bbe:   movabs $0x100000000,%rbx
  0x00007f1a59001bc8:   shr    %cl,%rbx
  0x00007f1a59001bcb:   mov    $0x0,%ecx
  0x00007f1a59001bd0:   mov    $0x0,%r11d
  0x00007f1a59001bd6:   sub    %r8,%rcx
  0x00007f1a59001bd9:   sbb    %r10,%r11
  0x00007f1a59001bdc:   sbb    %r9,%rbx
  0x00007f1a59001bdf:   mov    %rcx,%r8
  0x00007f1a59001be2:   mov    %r11,%r10
  0x00007f1a59001be5:   mov    %rbx,%r9
  0x00007f1a59001be8:   mov    $0x8000,%ebx
  0x00007f1a59001bed:   shr    $0x3,%rdi
  0x00007f1a59001bf1:   add    $0x20000000,%edi
  0x00007f1a59001bf7:   jmpq   0x00007f1a590018dd
  0x00007f1a59001bfc:   vmovq  0x8(%rsp),%xmm0
  0x00007f1a59001c02:   vmulsd 0xb58243e(%rip),%xmm0,%xmm0        # 0x00007f1a64584048
  0x00007f1a59001c0a:   vmovq  %xmm0,(%rsp)
  0x00007f1a59001c0f:   add    $0x10,%rsp
  0x00007f1a59001c13:   pop    %rbx
  0x00007f1a59001c14:   leaveq 
  0x00007f1a59001c15:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmCos [0x00007f1a59001c16, 0x00007f1a59002287] (1649 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59001c16:   push   %rbp
  0x00007f1a59001c17:   mov    %rsp,%rbp
  0x00007f1a59001c1a:   push   %rbx
  0x00007f1a59001c1b:   sub    $0x10,%rsp
  0x00007f1a59001c1f:   vmovsd %xmm0,0x8(%rsp)
  0x00007f1a59001c25:   mov    0xc(%rsp),%eax
  0x00007f1a59001c29:   vmovq  0xb58241f(%rip),%xmm1        # 0x00007f1a64584050
  0x00007f1a59001c31:   and    $0x7fff0000,%eax
  0x00007f1a59001c36:   sub    $0x30300000,%eax
  0x00007f1a59001c3b:   cmp    $0x10c50000,%eax
  0x00007f1a59001c40:   ja     0x00007f1a59001d8c
  0x00007f1a59001c46:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f1a59001c4a:   vmovdqu 0xb58248e(%rip),%xmm5        # 0x00007f1a645840e0
  0x00007f1a59001c52:   vmovq  0xb582476(%rip),%xmm4        # 0x00007f1a645840d0
  0x00007f1a59001c5a:   vpand  %xmm0,%xmm4,%xmm4
  0x00007f1a59001c5e:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f1a59001c62:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f1a59001c66:   vcvttsd2si %xmm1,%edx
  0x00007f1a59001c6a:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007f1a59001c6e:   vmovdqu 0xb5823ba(%rip),%xmm2        # 0x00007f1a64584030
  0x00007f1a59001c76:   vmovq  0xb5823c2(%rip),%xmm3        # 0x00007f1a64584040
  0x00007f1a59001c7e:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f1a59001c82:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007f1a59001c86:   add    $0x1c7610,%rdx
  0x00007f1a59001c8d:   vmovdqu %xmm0,%xmm4
  0x00007f1a59001c91:   and    $0x3f,%rdx
  0x00007f1a59001c95:   vmovdqu 0xb5823d3(%rip),%xmm5        # 0x00007f1a64584070
  0x00007f1a59001c9d:   movabs $0x7f1a64583780,%rax
  0x00007f1a59001ca7:   shl    $0x5,%rdx
  0x00007f1a59001cab:   add    %rdx,%rax
  0x00007f1a59001cae:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007f1a59001cb2:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007f1a59001cb6:   vmulsd 0xb58236a(%rip),%xmm1,%xmm1        # 0x00007f1a64584028
  0x00007f1a59001cbe:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f1a59001cc2:   vmovq  0x8(%rax),%xmm7
  0x00007f1a59001cc7:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f1a59001ccb:   vmovdqu %xmm4,%xmm3
  0x00007f1a59001ccf:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f1a59001cd3:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a59001cd7:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007f1a59001cdb:   vmovdqu 0xb5823ad(%rip),%xmm6        # 0x00007f1a64584090
  0x00007f1a59001ce3:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007f1a59001ce7:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f1a59001ceb:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a59001cef:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a59001cf3:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f1a59001cf7:   vmovdqu (%rax),%xmm2
  0x00007f1a59001cfb:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007f1a59001cff:   vmovq  0x18(%rax),%xmm3
  0x00007f1a59001d04:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f1a59001d08:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f1a59001d0c:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f1a59001d10:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007f1a59001d14:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007f1a59001d18:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007f1a59001d1c:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a59001d20:   vaddpd 0xb582358(%rip),%xmm5,%xmm5        # 0x00007f1a64584080
  0x00007f1a59001d28:   vmulsd (%rax),%xmm4,%xmm4
  0x00007f1a59001d2c:   vaddpd 0xb58236c(%rip),%xmm6,%xmm6        # 0x00007f1a645840a0
  0x00007f1a59001d34:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a59001d38:   vmovdqu %xmm3,%xmm0
  0x00007f1a59001d3c:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007f1a59001d41:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007f1a59001d45:   vmovdqu %xmm4,%xmm7
  0x00007f1a59001d49:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007f1a59001d4d:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007f1a59001d51:   vmovq  0x8(%rax),%xmm5
  0x00007f1a59001d56:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007f1a59001d5a:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f1a59001d5e:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007f1a59001d63:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f1a59001d67:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f1a59001d6b:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007f1a59001d6f:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f1a59001d73:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f1a59001d77:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f1a59001d7b:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007f1a59001d7f:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f1a59001d83:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f1a59001d87:   jmpq   0x00007f1a59002280
  0x00007f1a59001d8c:   jg     0x00007f1a59001db6
  0x00007f1a59001d92:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a59001d97:   and    $0x7fff,%eax
  0x00007f1a59001d9c:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a59001da1:   vmovq  0xb582347(%rip),%xmm1        # 0x00007f1a645840f0
  0x00007f1a59001da9:   vsubsd %xmm0,%xmm1,%xmm1
  0x00007f1a59001dad:   vmovdqu %xmm1,%xmm0
  0x00007f1a59001db1:   jmpq   0x00007f1a59002280
  0x00007f1a59001db6:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a59001dbb:   and    $0x7ff0,%eax
  0x00007f1a59001dc0:   cmp    $0x7ff0,%eax
  0x00007f1a59001dc5:   je     0x00007f1a5900226d
  0x00007f1a59001dcb:   vpextrw $0x3,%xmm0,%ecx
  0x00007f1a59001dd0:   and    $0x7ff0,%ecx
  0x00007f1a59001dd6:   sub    $0x3f60,%ecx
  0x00007f1a59001ddc:   shr    $0x7,%ecx
  0x00007f1a59001ddf:   and    $0xfffc,%ecx
  0x00007f1a59001de5:   movabs $0x7f1a64583f80,%r11
  0x00007f1a59001def:   add    %r11,%rcx
  0x00007f1a59001df2:   vmovq  %xmm0,%rax
  0x00007f1a59001df7:   mov    0x14(%rcx),%r10d
  0x00007f1a59001dfb:   mov    0x18(%rcx),%r8d
  0x00007f1a59001dff:   mov    %eax,%edx
  0x00007f1a59001e01:   shr    $0x15,%rax
  0x00007f1a59001e05:   or     $0x80000000,%eax
  0x00007f1a59001e0a:   shr    $0xb,%eax
  0x00007f1a59001e0d:   mov    %r10d,%r9d
  0x00007f1a59001e10:   imul   %rdx,%r10
  0x00007f1a59001e14:   imul   %rax,%r9
  0x00007f1a59001e18:   imul   %rax,%r8
  0x00007f1a59001e1c:   mov    0x10(%rcx),%esi
  0x00007f1a59001e1f:   mov    0xc(%rcx),%edi
  0x00007f1a59001e22:   mov    %r10d,%r11d
  0x00007f1a59001e25:   shr    $0x20,%r10
  0x00007f1a59001e29:   add    %r10,%r9
  0x00007f1a59001e2c:   add    %r8,%r11
  0x00007f1a59001e2f:   mov    %r11d,%r8d
  0x00007f1a59001e32:   shr    $0x20,%r11
  0x00007f1a59001e36:   add    %r11,%r9
  0x00007f1a59001e39:   mov    %esi,%r10d
  0x00007f1a59001e3c:   imul   %rdx,%rsi
  0x00007f1a59001e40:   imul   %rax,%r10
  0x00007f1a59001e44:   mov    %edi,%r11d
  0x00007f1a59001e47:   imul   %rdx,%rdi
  0x00007f1a59001e4b:   mov    %esi,%ebx
  0x00007f1a59001e4d:   shr    $0x20,%rsi
  0x00007f1a59001e51:   add    %rbx,%r9
  0x00007f1a59001e54:   mov    %r9d,%ebx
  0x00007f1a59001e57:   shr    $0x20,%r9
  0x00007f1a59001e5b:   add    %rsi,%r10
  0x00007f1a59001e5e:   add    %r9,%r10
  0x00007f1a59001e61:   shl    $0x20,%rbx
  0x00007f1a59001e65:   or     %rbx,%r8
  0x00007f1a59001e68:   imul   %rax,%r11
  0x00007f1a59001e6c:   mov    0x8(%rcx),%r9d
  0x00007f1a59001e70:   mov    0x4(%rcx),%esi
  0x00007f1a59001e73:   mov    %edi,%ebx
  0x00007f1a59001e75:   shr    $0x20,%rdi
  0x00007f1a59001e79:   add    %rbx,%r10
  0x00007f1a59001e7c:   mov    %r10d,%ebx
  0x00007f1a59001e7f:   shr    $0x20,%r10
  0x00007f1a59001e83:   add    %rdi,%r11
  0x00007f1a59001e86:   add    %r10,%r11
  0x00007f1a59001e89:   mov    %r9,%rdi
  0x00007f1a59001e8c:   imul   %rdx,%r9
  0x00007f1a59001e90:   imul   %rax,%rdi
  0x00007f1a59001e94:   mov    %r9d,%r10d
  0x00007f1a59001e97:   shr    $0x20,%r9
  0x00007f1a59001e9b:   add    %r10,%r11
  0x00007f1a59001e9e:   mov    %r11d,%r10d
  0x00007f1a59001ea1:   shr    $0x20,%r11
  0x00007f1a59001ea5:   add    %r9,%rdi
  0x00007f1a59001ea8:   add    %r11,%rdi
  0x00007f1a59001eab:   mov    %rsi,%r9
  0x00007f1a59001eae:   imul   %rdx,%rsi
  0x00007f1a59001eb2:   imul   %rax,%r9
  0x00007f1a59001eb6:   shl    $0x20,%r10
  0x00007f1a59001eba:   or     %rbx,%r10
  0x00007f1a59001ebd:   mov    (%rcx),%eax
  0x00007f1a59001ebf:   mov    %esi,%r11d
  0x00007f1a59001ec2:   shr    $0x20,%rsi
  0x00007f1a59001ec6:   add    %r11,%rdi
  0x00007f1a59001ec9:   mov    %edi,%r11d
  0x00007f1a59001ecc:   shr    $0x20,%rdi
  0x00007f1a59001ed0:   add    %rsi,%r9
  0x00007f1a59001ed3:   add    %rdi,%r9
  0x00007f1a59001ed6:   imul   %rax,%rdx
  0x00007f1a59001eda:   vpextrw $0x3,%xmm0,%ebx
  0x00007f1a59001edf:   movabs $0x7f1a64583f80,%rdi
  0x00007f1a59001ee9:   sub    %rdi,%rcx
  0x00007f1a59001eec:   add    %ecx,%ecx
  0x00007f1a59001eee:   add    %ecx,%ecx
  0x00007f1a59001ef0:   add    %ecx,%ecx
  0x00007f1a59001ef2:   add    $0x13,%ecx
  0x00007f1a59001ef5:   mov    $0x8000,%esi
  0x00007f1a59001efa:   and    %ebx,%esi
  0x00007f1a59001efc:   shr    $0x4,%ebx
  0x00007f1a59001eff:   and    $0x7ff,%ebx
  0x00007f1a59001f05:   sub    $0x3ff,%ebx
  0x00007f1a59001f0b:   sub    %ebx,%ecx
  0x00007f1a59001f0d:   add    %rdx,%r9
  0x00007f1a59001f10:   mov    %ecx,%edx
  0x00007f1a59001f12:   add    $0x20,%edx
  0x00007f1a59001f15:   cmp    $0x1,%ecx
  0x00007f1a59001f18:   jl     0x00007f1a590021bd
  0x00007f1a59001f1e:   neg    %ecx
  0x00007f1a59001f20:   add    $0x1d,%ecx
  0x00007f1a59001f23:   shl    %cl,%r9d
  0x00007f1a59001f26:   mov    %r9d,%edi
  0x00007f1a59001f29:   and    $0x1fffffff,%r9d
  0x00007f1a59001f30:   test   $0x10000000,%r9d
  0x00007f1a59001f37:   jne    0x00007f1a590021ea
  0x00007f1a59001f3d:   shr    %cl,%r9d
  0x00007f1a59001f40:   mov    $0x0,%ebx
  0x00007f1a59001f45:   shl    $0x20,%r9
  0x00007f1a59001f49:   or     %r11,%r9
  0x00007f1a59001f4c:   cmp    $0x0,%r9
  0x00007f1a59001f50:   je     0x00007f1a59002161
  0x00007f1a59001f56:   bsr    %r9,%r11
  0x00007f1a59001f5a:   mov    $0x1d,%ecx
  0x00007f1a59001f5f:   sub    %r11d,%ecx
  0x00007f1a59001f62:   jle    0x00007f1a5900219a
  0x00007f1a59001f68:   shl    %cl,%r9
  0x00007f1a59001f6b:   mov    %r10,%rax
  0x00007f1a59001f6e:   shl    %cl,%r10
  0x00007f1a59001f71:   add    %ecx,%edx
  0x00007f1a59001f73:   neg    %ecx
  0x00007f1a59001f75:   add    $0x40,%ecx
  0x00007f1a59001f78:   shr    %cl,%rax
  0x00007f1a59001f7b:   shr    %cl,%r8
  0x00007f1a59001f7e:   or     %rax,%r9
  0x00007f1a59001f81:   or     %r8,%r10
  0x00007f1a59001f84:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007f1a59001f89:   shr    %r10
  0x00007f1a59001f8c:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007f1a59001f91:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007f1a59001f95:   shl    $0x4,%edx
  0x00007f1a59001f98:   neg    %edx
  0x00007f1a59001f9a:   add    $0x3ff0,%edx
  0x00007f1a59001fa0:   or     %esi,%edx
  0x00007f1a59001fa2:   xor    %ebx,%edx
  0x00007f1a59001fa4:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007f1a59001fa9:   vmovq  0xb5820a7(%rip),%xmm2        # 0x00007f1a64584058
  0x00007f1a59001fb1:   vmovq  0xb5820a7(%rip),%xmm6        # 0x00007f1a64584060
  0x00007f1a59001fb9:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007f1a59001fbd:   sub    $0x3f0,%edx
  0x00007f1a59001fc3:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007f1a59001fc8:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f1a59001fcc:   shl    $0x10,%esi
  0x00007f1a59001fcf:   sar    $0x1f,%esi
  0x00007f1a59001fd2:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f1a59001fd6:   vmovdqu %xmm0,%xmm1
  0x00007f1a59001fda:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007f1a59001fde:   shr    $0x1d,%edi
  0x00007f1a59001fe1:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f1a59001fe5:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007f1a59001fe9:   add    %esi,%edi
  0x00007f1a59001feb:   xor    %esi,%edi
  0x00007f1a59001fed:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007f1a59001ff1:   mov    %edi,%eax
  0x00007f1a59001ff3:   vaddsd %xmm3,%xmm6,%xmm6
  0x00007f1a59001ff7:   vmovdqu %xmm0,%xmm2
  0x00007f1a59001ffb:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f1a59001fff:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007f1a59002003:   vaddsd %xmm2,%xmm6,%xmm6
  0x00007f1a59002007:   vmovq  0xb582041(%rip),%xmm1        # 0x00007f1a64584050
  0x00007f1a5900200f:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f1a59002013:   vmovq  0xb5820c5(%rip),%xmm5        # 0x00007f1a645840e0
  0x00007f1a5900201b:   vmovq  0xb5820ad(%rip),%xmm4        # 0x00007f1a645840d0
  0x00007f1a59002023:   vpand  %xmm0,%xmm4,%xmm4
  0x00007f1a59002027:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f1a5900202b:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f1a5900202f:   vcvttsd2si %xmm1,%rdx
  0x00007f1a59002034:   vcvtsi2sd %rdx,%xmm1,%xmm1
  0x00007f1a59002039:   vmovq  0xb581fff(%rip),%xmm3        # 0x00007f1a64584040
  0x00007f1a59002041:   vmovdqu 0xb581fe7(%rip),%xmm2        # 0x00007f1a64584030
  0x00007f1a59002049:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f1a5900204d:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007f1a59002051:   shl    $0x3,%eax
  0x00007f1a59002054:   add    $0x1c7610,%edx
  0x00007f1a5900205a:   vmovdqu %xmm0,%xmm4
  0x00007f1a5900205e:   add    %eax,%edx
  0x00007f1a59002060:   and    $0x3f,%edx
  0x00007f1a59002063:   vmovdqu 0xb582005(%rip),%xmm5        # 0x00007f1a64584070
  0x00007f1a5900206b:   movabs $0x7f1a64583780,%rax
  0x00007f1a59002075:   shl    $0x5,%edx
  0x00007f1a59002078:   add    %rdx,%rax
  0x00007f1a5900207b:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007f1a5900207f:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007f1a59002083:   vmulsd 0xb581f9d(%rip),%xmm1,%xmm1        # 0x00007f1a64584028
  0x00007f1a5900208b:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f1a5900208f:   vmovq  0x8(%rax),%xmm7
  0x00007f1a59002094:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f1a59002098:   vmovdqu %xmm4,%xmm3
  0x00007f1a5900209c:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f1a590020a0:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a590020a4:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007f1a590020a8:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007f1a590020ac:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f1a590020b0:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a590020b4:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a590020b8:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f1a590020bc:   vmovdqu (%rax),%xmm2
  0x00007f1a590020c0:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007f1a590020c4:   vmovq  0x18(%rax),%xmm3
  0x00007f1a590020c9:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f1a590020cd:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f1a590020d1:   vsubsd %xmm6,%xmm1,%xmm1
  0x00007f1a590020d5:   vmovdqu 0xb581fb3(%rip),%xmm6        # 0x00007f1a64584090
  0x00007f1a590020dd:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f1a590020e1:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007f1a590020e5:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007f1a590020e9:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007f1a590020ed:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a590020f1:   vaddpd 0xb581f87(%rip),%xmm5,%xmm5        # 0x00007f1a64584080
  0x00007f1a590020f9:   vmulsd (%rax),%xmm4,%xmm4
  0x00007f1a590020fd:   vaddpd 0xb581f9b(%rip),%xmm6,%xmm6        # 0x00007f1a645840a0
  0x00007f1a59002105:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a59002109:   vmovdqu %xmm3,%xmm0
  0x00007f1a5900210d:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007f1a59002112:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007f1a59002116:   vmovdqu %xmm4,%xmm7
  0x00007f1a5900211a:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007f1a5900211e:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007f1a59002122:   vmovq  0x8(%rax),%xmm5
  0x00007f1a59002127:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007f1a5900212b:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f1a5900212f:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007f1a59002134:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f1a59002138:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f1a5900213c:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007f1a59002140:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f1a59002144:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f1a59002148:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f1a5900214c:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007f1a59002150:   vmovdqu %xmm4,%xmm0
  0x00007f1a59002154:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f1a59002158:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f1a5900215c:   jmpq   0x00007f1a59002280
  0x00007f1a59002161:   add    $0x40,%edx
  0x00007f1a59002164:   mov    %r10,%r9
  0x00007f1a59002167:   mov    %r8,%r10
  0x00007f1a5900216a:   mov    $0x0,%r8d
  0x00007f1a59002170:   cmp    $0x0,%r9
  0x00007f1a59002174:   jne    0x00007f1a59001f56
  0x00007f1a5900217a:   add    $0x40,%edx
  0x00007f1a5900217d:   mov    %r10,%r9
  0x00007f1a59002180:   mov    %r8,%r10
  0x00007f1a59002183:   cmp    $0x0,%r9
  0x00007f1a59002187:   jne    0x00007f1a59001f56
  0x00007f1a5900218d:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a59002191:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f1a59002195:   jmpq   0x00007f1a59002007
  0x00007f1a5900219a:   je     0x00007f1a59001f84
  0x00007f1a590021a0:   neg    %ecx
  0x00007f1a590021a2:   shr    %cl,%r10
  0x00007f1a590021a5:   mov    %r9,%rax
  0x00007f1a590021a8:   shr    %cl,%r9
  0x00007f1a590021ab:   sub    %ecx,%edx
  0x00007f1a590021ad:   neg    %ecx
  0x00007f1a590021af:   add    $0x40,%ecx
  0x00007f1a590021b2:   shl    %cl,%rax
  0x00007f1a590021b5:   or     %rax,%r10
  0x00007f1a590021b8:   jmpq   0x00007f1a59001f84
  0x00007f1a590021bd:   neg    %ecx
  0x00007f1a590021bf:   shl    $0x20,%r9
  0x00007f1a590021c3:   or     %r11,%r9
  0x00007f1a590021c6:   shl    %cl,%r9
  0x00007f1a590021c9:   mov    %r9,%rdi
  0x00007f1a590021cc:   test   $0x80000000,%r9d
  0x00007f1a590021d3:   jne    0x00007f1a5900222c
  0x00007f1a590021d9:   shr    %cl,%r9d
  0x00007f1a590021dc:   mov    $0x0,%ebx
  0x00007f1a590021e1:   shr    $0x3,%rdi
  0x00007f1a590021e5:   jmpq   0x00007f1a59001f4c
  0x00007f1a590021ea:   shr    %cl,%r9d
  0x00007f1a590021ed:   mov    $0x20000000,%ebx
  0x00007f1a590021f2:   shr    %cl,%ebx
  0x00007f1a590021f4:   shl    $0x20,%r9
  0x00007f1a590021f8:   or     %r11,%r9
  0x00007f1a590021fb:   shl    $0x20,%rbx
  0x00007f1a590021ff:   add    $0x20000000,%edi
  0x00007f1a59002205:   mov    $0x0,%ecx
  0x00007f1a5900220a:   mov    $0x0,%r11d
  0x00007f1a59002210:   sub    %r8,%rcx
  0x00007f1a59002213:   sbb    %r10,%r11
  0x00007f1a59002216:   sbb    %r9,%rbx
  0x00007f1a59002219:   mov    %rcx,%r8
  0x00007f1a5900221c:   mov    %r11,%r10
  0x00007f1a5900221f:   mov    %rbx,%r9
  0x00007f1a59002222:   mov    $0x8000,%ebx
  0x00007f1a59002227:   jmpq   0x00007f1a59001f4c
  0x00007f1a5900222c:   shr    %cl,%r9d
  0x00007f1a5900222f:   movabs $0x100000000,%rbx
  0x00007f1a59002239:   shr    %cl,%rbx
  0x00007f1a5900223c:   mov    $0x0,%ecx
  0x00007f1a59002241:   mov    $0x0,%r11d
  0x00007f1a59002247:   sub    %r8,%rcx
  0x00007f1a5900224a:   sbb    %r10,%r11
  0x00007f1a5900224d:   sbb    %r9,%rbx
  0x00007f1a59002250:   mov    %rcx,%r8
  0x00007f1a59002253:   mov    %r11,%r10
  0x00007f1a59002256:   mov    %rbx,%r9
  0x00007f1a59002259:   mov    $0x8000,%ebx
  0x00007f1a5900225e:   shr    $0x3,%rdi
  0x00007f1a59002262:   add    $0x20000000,%edi
  0x00007f1a59002268:   jmpq   0x00007f1a59001f4c
  0x00007f1a5900226d:   vmovsd 0x8(%rsp),%xmm0
  0x00007f1a59002273:   vmulsd 0xb581dcd(%rip),%xmm0,%xmm0        # 0x00007f1a64584048
  0x00007f1a5900227b:   vmovq  %xmm0,(%rsp)
  0x00007f1a59002280:   add    $0x10,%rsp
  0x00007f1a59002284:   pop    %rbx
  0x00007f1a59002285:   leaveq 
  0x00007f1a59002286:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmTan [0x00007f1a59002287, 0x00007f1a59002acf] (2120 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59002287:   push   %rbp
  0x00007f1a59002288:   mov    %rsp,%rbp
  0x00007f1a5900228b:   push   %rbx
  0x00007f1a5900228c:   sub    $0x10,%rsp
  0x00007f1a59002290:   vmovsd %xmm0,0x8(%rsp)
  0x00007f1a59002296:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a5900229b:   and    $0x7fff,%eax
  0x00007f1a590022a0:   sub    $0x3fba,%eax
  0x00007f1a590022a5:   cmp    $0x10e,%eax
  0x00007f1a590022aa:   ja     0x00007f1a590024b1
  0x00007f1a590022b0:   vmovdqu 0xb581e28(%rip),%xmm5        # 0x00007f1a645840e0
  0x00007f1a590022b8:   vmovdqu 0xb587d80(%rip),%xmm6        # 0x00007f1a6458a040
  0x00007f1a590022c0:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f1a590022c4:   vmovdqu 0xb587d64(%rip),%xmm4        # 0x00007f1a6458a030
  0x00007f1a590022cc:   vandpd %xmm0,%xmm4,%xmm4
  0x00007f1a590022d0:   vmovdqu 0xb587d48(%rip),%xmm1        # 0x00007f1a6458a020
  0x00007f1a590022d8:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f1a590022dc:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f1a590022e0:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f1a590022e4:   vmovdqu %xmm1,%xmm7
  0x00007f1a590022e8:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007f1a590022ec:   vcvttsd2si %xmm7,%edx
  0x00007f1a590022f0:   (bad)  
  0x00007f1a590022f4:   leaveq 
  0x00007f1a590022f5:   vcvtdq2pd %xmm1,%xmm1
  0x00007f1a590022f9:   vmulpd %xmm6,%xmm1,%xmm1
  0x00007f1a590022fd:   vmovdqu 0xb587d0b(%rip),%xmm3        # 0x00007f1a6458a010
  0x00007f1a59002305:   vmovq  0xb586663(%rip),%xmm5        # 0x00007f1a64588970
  0x00007f1a5900230d:   add    $0x72900,%rdx
  0x00007f1a59002314:   vmovdqu 0xb587ce4(%rip),%xmm4        # 0x00007f1a6458a000
  0x00007f1a5900231c:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007f1a59002320:   and    $0x1f,%rdx
  0x00007f1a59002324:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007f1a59002328:   mov    %rdx,%rcx
  0x00007f1a5900232b:   vmulpd %xmm1,%xmm4,%xmm4
  0x00007f1a5900232f:   shl    %rcx
  0x00007f1a59002332:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007f1a59002336:   vmulpd 0xb587cb2(%rip),%xmm1,%xmm1        # 0x00007f1a64589ff0
  0x00007f1a5900233e:   add    %rcx,%rdx
  0x00007f1a59002341:   shl    $0x2,%rcx
  0x00007f1a59002345:   add    %rcx,%rdx
  0x00007f1a59002348:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f1a5900234c:   vmovdqu %xmm0,%xmm2
  0x00007f1a59002350:   vsubpd %xmm4,%xmm0,%xmm0
  0x00007f1a59002354:   vmovq  0xb581d94(%rip),%xmm6        # 0x00007f1a645840f0
  0x00007f1a5900235c:   shl    $0x4,%rdx
  0x00007f1a59002360:   movabs $0x7f1a645889f0,%rax
  0x00007f1a5900236a:   vandpd 0xb58666e(%rip),%xmm5,%xmm5        # 0x00007f1a645889e0
  0x00007f1a59002372:   vmovdqu %xmm0,%xmm3
  0x00007f1a59002376:   add    %rdx,%rax
  0x00007f1a59002379:   vsubpd %xmm0,%xmm2,%xmm2
  0x00007f1a5900237d:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007f1a59002381:   vdivsd %xmm5,%xmm6,%xmm6
  0x00007f1a59002385:   vsubpd %xmm4,%xmm2,%xmm2
  0x00007f1a59002389:   vmovdqu 0x10(%rax),%xmm7
  0x00007f1a5900238e:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f1a59002392:   vmulpd %xmm0,%xmm7,%xmm7
  0x00007f1a59002396:   vsubpd %xmm1,%xmm2,%xmm2
  0x00007f1a5900239a:   vmovdqu 0x30(%rax),%xmm1
  0x00007f1a5900239f:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f1a590023a3:   vmovdqu 0x60(%rax),%xmm4
  0x00007f1a590023a8:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007f1a590023ac:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f1a590023b0:   vmovdqu %xmm0,%xmm3
  0x00007f1a590023b4:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a590023b8:   vaddpd (%rax),%xmm7,%xmm7
  0x00007f1a590023bc:   vaddpd 0x20(%rax),%xmm1,%xmm1
  0x00007f1a590023c1:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f1a590023c5:   vaddpd 0x50(%rax),%xmm4,%xmm4
  0x00007f1a590023ca:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007f1a590023ce:   vmovdqu 0x70(%rax),%xmm1
  0x00007f1a590023d3:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f1a590023d7:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a590023db:   vaddpd %xmm1,%xmm4,%xmm4
  0x00007f1a590023df:   vmovdqu 0x40(%rax),%xmm1
  0x00007f1a590023e4:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f1a590023e8:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007f1a590023ec:   vmovdqu %xmm3,%xmm1
  0x00007f1a590023f0:   vmulpd %xmm0,%xmm3,%xmm3
  0x00007f1a590023f4:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f1a590023f8:   vmulpd 0x90(%rax),%xmm1,%xmm1
  0x00007f1a59002400:   vmulpd %xmm3,%xmm4,%xmm4
  0x00007f1a59002404:   vmovdqu %xmm1,%xmm3
  0x00007f1a59002408:   vaddpd %xmm4,%xmm7,%xmm7
  0x00007f1a5900240c:   vmovdqu %xmm1,%xmm4
  0x00007f1a59002410:   vmulsd %xmm7,%xmm0,%xmm0
  0x00007f1a59002414:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007f1a59002418:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f1a5900241c:   vunpckhpd %xmm1,%xmm1,%xmm1
  0x00007f1a59002420:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007f1a59002424:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f1a59002428:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f1a5900242c:   vmovdqu %xmm2,%xmm4
  0x00007f1a59002430:   vmovq  0x90(%rax),%xmm7
  0x00007f1a59002438:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007f1a5900243c:   vaddsd 0x98(%rax),%xmm7,%xmm7
  0x00007f1a59002444:   vmulsd %xmm2,%xmm7,%xmm7
  0x00007f1a59002448:   vaddsd 0x88(%rax),%xmm7,%xmm7
  0x00007f1a59002450:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007f1a59002454:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f1a59002458:   vmovq  0xb581c90(%rip),%xmm7        # 0x00007f1a645840f0
  0x00007f1a59002460:   vmulsd %xmm6,%xmm4,%xmm4
  0x00007f1a59002464:   vmovq  0xa8(%rax),%xmm2
  0x00007f1a5900246c:   vandpd %xmm6,%xmm2,%xmm2
  0x00007f1a59002470:   vmulsd %xmm2,%xmm5,%xmm5
  0x00007f1a59002474:   vmulsd 0xa0(%rax),%xmm6,%xmm6
  0x00007f1a5900247c:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007f1a59002480:   vsubsd 0x80(%rax),%xmm2,%xmm2
  0x00007f1a59002488:   vsubsd %xmm4,%xmm7,%xmm7
  0x00007f1a5900248c:   vmulsd %xmm6,%xmm7,%xmm7
  0x00007f1a59002490:   vmovdqu %xmm3,%xmm4
  0x00007f1a59002494:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f1a59002498:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f1a5900249c:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f1a590024a0:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f1a590024a4:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007f1a590024a8:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f1a590024ac:   jmpq   0x00007f1a59002ac8
  0x00007f1a590024b1:   jg     0x00007f1a5900255a
  0x00007f1a590024b7:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a590024bc:   mov    %eax,%edx
  0x00007f1a590024be:   and    $0x7ff0,%eax
  0x00007f1a590024c3:   je     0x00007f1a5900254d
  0x00007f1a590024c9:   and    $0x7fff,%edx
  0x00007f1a590024cf:   cmp    $0x3e20,%edx
  0x00007f1a590024d5:   jb     0x00007f1a59002530
  0x00007f1a590024db:   vmovdqu %xmm0,%xmm2
  0x00007f1a590024df:   vmovdqu %xmm0,%xmm3
  0x00007f1a590024e3:   vmovq  0xb5864e5(%rip),%xmm1        # 0x00007f1a645889d0
  0x00007f1a590024eb:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007f1a590024ef:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007f1a590024f3:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f1a590024f7:   vaddsd 0xb5864c1(%rip),%xmm1,%xmm1        # 0x00007f1a645889c0
  0x00007f1a590024ff:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f1a59002503:   vaddsd 0xb5864a5(%rip),%xmm1,%xmm1        # 0x00007f1a645889b0
  0x00007f1a5900250b:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f1a5900250f:   vaddsd 0xb586489(%rip),%xmm1,%xmm1        # 0x00007f1a645889a0
  0x00007f1a59002517:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f1a5900251b:   vaddsd 0xb58646d(%rip),%xmm1,%xmm1        # 0x00007f1a64588990
  0x00007f1a59002523:   vmulsd %xmm3,%xmm1,%xmm1
  0x00007f1a59002527:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f1a5900252b:   jmpq   0x00007f1a59002ac8
  0x00007f1a59002530:   vmovq  0xb581b90(%rip),%xmm3        # 0x00007f1a645840c8
  0x00007f1a59002538:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007f1a5900253c:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f1a59002540:   vmulsd 0xb581b78(%rip),%xmm0,%xmm0        # 0x00007f1a645840c0
  0x00007f1a59002548:   jmpq   0x00007f1a59002ac8
  0x00007f1a5900254d:   vmovdqu %xmm0,%xmm1
  0x00007f1a59002551:   vmulsd %xmm1,%xmm1,%xmm1
  0x00007f1a59002555:   jmpq   0x00007f1a59002ac8
  0x00007f1a5900255a:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a5900255f:   and    $0x7ff0,%eax
  0x00007f1a59002564:   cmp    $0x7ff0,%eax
  0x00007f1a59002569:   je     0x00007f1a59002ab5
  0x00007f1a5900256f:   vpextrw $0x3,%xmm0,%ecx
  0x00007f1a59002574:   and    $0x7ff0,%ecx
  0x00007f1a5900257a:   sub    $0x3f60,%ecx
  0x00007f1a59002580:   shr    $0x7,%ecx
  0x00007f1a59002583:   and    $0xfffc,%ecx
  0x00007f1a59002589:   movabs $0x7f1a64583f80,%r11
  0x00007f1a59002593:   add    %r11,%rcx
  0x00007f1a59002596:   vmovq  %xmm0,%rax
  0x00007f1a5900259b:   mov    0x14(%rcx),%r10d
  0x00007f1a5900259f:   mov    0x18(%rcx),%r8d
  0x00007f1a590025a3:   mov    %eax,%edx
  0x00007f1a590025a5:   shr    $0x15,%rax
  0x00007f1a590025a9:   or     $0x80000000,%eax
  0x00007f1a590025ae:   shr    $0xb,%eax
  0x00007f1a590025b1:   mov    %r10d,%r9d
  0x00007f1a590025b4:   imul   %rdx,%r10
  0x00007f1a590025b8:   imul   %rax,%r9
  0x00007f1a590025bc:   imul   %rax,%r8
  0x00007f1a590025c0:   mov    0x10(%rcx),%esi
  0x00007f1a590025c3:   mov    0xc(%rcx),%edi
  0x00007f1a590025c6:   mov    %r10d,%r11d
  0x00007f1a590025c9:   shr    $0x20,%r10
  0x00007f1a590025cd:   add    %r10,%r9
  0x00007f1a590025d0:   add    %r8,%r11
  0x00007f1a590025d3:   mov    %r11d,%r8d
  0x00007f1a590025d6:   shr    $0x20,%r11
  0x00007f1a590025da:   add    %r11,%r9
  0x00007f1a590025dd:   mov    %esi,%r10d
  0x00007f1a590025e0:   imul   %rdx,%rsi
  0x00007f1a590025e4:   imul   %rax,%r10
  0x00007f1a590025e8:   mov    %edi,%r11d
  0x00007f1a590025eb:   imul   %rdx,%rdi
  0x00007f1a590025ef:   mov    %esi,%ebx
  0x00007f1a590025f1:   shr    $0x20,%rsi
  0x00007f1a590025f5:   add    %rbx,%r9
  0x00007f1a590025f8:   mov    %r9d,%ebx
  0x00007f1a590025fb:   shr    $0x20,%r9
  0x00007f1a590025ff:   add    %rsi,%r10
  0x00007f1a59002602:   add    %r9,%r10
  0x00007f1a59002605:   shl    $0x20,%rbx
  0x00007f1a59002609:   or     %rbx,%r8
  0x00007f1a5900260c:   imul   %rax,%r11
  0x00007f1a59002610:   mov    0x8(%rcx),%r9d
  0x00007f1a59002614:   mov    0x4(%rcx),%esi
  0x00007f1a59002617:   mov    %edi,%ebx
  0x00007f1a59002619:   shr    $0x20,%rdi
  0x00007f1a5900261d:   add    %rbx,%r10
  0x00007f1a59002620:   mov    %r10d,%ebx
  0x00007f1a59002623:   shr    $0x20,%r10
  0x00007f1a59002627:   add    %rdi,%r11
  0x00007f1a5900262a:   add    %r10,%r11
  0x00007f1a5900262d:   mov    %r9,%rdi
  0x00007f1a59002630:   imul   %rdx,%r9
  0x00007f1a59002634:   imul   %rax,%rdi
  0x00007f1a59002638:   mov    %r9d,%r10d
  0x00007f1a5900263b:   shr    $0x20,%r9
  0x00007f1a5900263f:   add    %r10,%r11
  0x00007f1a59002642:   mov    %r11d,%r10d
  0x00007f1a59002645:   shr    $0x20,%r11
  0x00007f1a59002649:   add    %r9,%rdi
  0x00007f1a5900264c:   add    %r11,%rdi
  0x00007f1a5900264f:   mov    %rsi,%r9
  0x00007f1a59002652:   imul   %rdx,%rsi
  0x00007f1a59002656:   imul   %rax,%r9
  0x00007f1a5900265a:   shl    $0x20,%r10
  0x00007f1a5900265e:   or     %rbx,%r10
  0x00007f1a59002661:   mov    (%rcx),%eax
  0x00007f1a59002663:   mov    %esi,%r11d
  0x00007f1a59002666:   shr    $0x20,%rsi
  0x00007f1a5900266a:   add    %r11,%rdi
  0x00007f1a5900266d:   mov    %edi,%r11d
  0x00007f1a59002670:   shr    $0x20,%rdi
  0x00007f1a59002674:   add    %rsi,%r9
  0x00007f1a59002677:   add    %rdi,%r9
  0x00007f1a5900267a:   imul   %rax,%rdx
  0x00007f1a5900267e:   vpextrw $0x3,%xmm0,%ebx
  0x00007f1a59002683:   movabs $0x7f1a64583f80,%rdi
  0x00007f1a5900268d:   sub    %rdi,%rcx
  0x00007f1a59002690:   add    %ecx,%ecx
  0x00007f1a59002692:   add    %ecx,%ecx
  0x00007f1a59002694:   add    %ecx,%ecx
  0x00007f1a59002696:   add    $0x13,%ecx
  0x00007f1a59002699:   mov    $0x8000,%esi
  0x00007f1a5900269e:   and    %ebx,%esi
  0x00007f1a590026a0:   shr    $0x4,%ebx
  0x00007f1a590026a3:   and    $0x7ff,%ebx
  0x00007f1a590026a9:   sub    $0x3ff,%ebx
  0x00007f1a590026af:   sub    %ebx,%ecx
  0x00007f1a590026b1:   add    %rdx,%r9
  0x00007f1a590026b4:   mov    %ecx,%edx
  0x00007f1a590026b6:   add    $0x20,%edx
  0x00007f1a590026b9:   cmp    $0x0,%ecx
  0x00007f1a590026bc:   jl     0x00007f1a59002a05
  0x00007f1a590026c2:   neg    %ecx
  0x00007f1a590026c4:   add    $0x1d,%ecx
  0x00007f1a590026c7:   shl    %cl,%r9d
  0x00007f1a590026ca:   mov    %r9d,%edi
  0x00007f1a590026cd:   and    $0x3fffffff,%r9d
  0x00007f1a590026d4:   test   $0x20000000,%r9d
  0x00007f1a590026db:   jne    0x00007f1a59002a32
  0x00007f1a590026e1:   shr    %cl,%r9d
  0x00007f1a590026e4:   mov    $0x0,%ebx
  0x00007f1a590026e9:   shl    $0x20,%r9
  0x00007f1a590026ed:   or     %r11,%r9
  0x00007f1a590026f0:   cmp    $0x0,%r9
  0x00007f1a590026f4:   je     0x00007f1a590029b1
  0x00007f1a590026fa:   bsr    %r9,%r11
  0x00007f1a590026fe:   mov    $0x1d,%ecx
  0x00007f1a59002703:   sub    %r11d,%ecx
  0x00007f1a59002706:   jle    0x00007f1a590029e2
  0x00007f1a5900270c:   shl    %cl,%r9
  0x00007f1a5900270f:   mov    %r10,%rax
  0x00007f1a59002712:   shl    %cl,%r10
  0x00007f1a59002715:   add    %ecx,%edx
  0x00007f1a59002717:   neg    %ecx
  0x00007f1a59002719:   add    $0x40,%ecx
  0x00007f1a5900271c:   shr    %cl,%rax
  0x00007f1a5900271f:   shr    %cl,%r8
  0x00007f1a59002722:   or     %rax,%r9
  0x00007f1a59002725:   or     %r8,%r10
  0x00007f1a59002728:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007f1a5900272d:   shr    %r10
  0x00007f1a59002730:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007f1a59002735:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007f1a59002739:   shl    $0x4,%edx
  0x00007f1a5900273c:   neg    %edx
  0x00007f1a5900273e:   add    $0x3ff0,%edx
  0x00007f1a59002744:   or     %esi,%edx
  0x00007f1a59002746:   xor    %ebx,%edx
  0x00007f1a59002748:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007f1a5900274d:   vmovq  0xb586223(%rip),%xmm2        # 0x00007f1a64588978
  0x00007f1a59002755:   vmovq  0xb586223(%rip),%xmm7        # 0x00007f1a64588980
  0x00007f1a5900275d:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007f1a59002761:   sub    $0x3f0,%edx
  0x00007f1a59002767:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007f1a5900276c:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f1a59002770:   shl    $0x10,%esi
  0x00007f1a59002773:   sar    $0x1f,%esi
  0x00007f1a59002776:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f1a5900277a:   vmovdqu %xmm0,%xmm1
  0x00007f1a5900277e:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007f1a59002782:   shr    $0x1e,%edi
  0x00007f1a59002785:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f1a59002789:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007f1a5900278d:   add    %esi,%edi
  0x00007f1a5900278f:   xor    %esi,%edi
  0x00007f1a59002791:   vmulsd %xmm1,%xmm7,%xmm7
  0x00007f1a59002795:   mov    %edi,%eax
  0x00007f1a59002797:   vaddsd %xmm3,%xmm7,%xmm7
  0x00007f1a5900279b:   vmovdqu %xmm0,%xmm2
  0x00007f1a5900279f:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f1a590027a3:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007f1a590027a7:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007f1a590027ab:   vmovdqu 0xb58786d(%rip),%xmm1        # 0x00007f1a6458a020
  0x00007f1a590027b3:   vmovddup %xmm0,%xmm0
  0x00007f1a590027b7:   vmovdqu 0xb587871(%rip),%xmm4        # 0x00007f1a6458a030
  0x00007f1a590027bf:   vandpd %xmm0,%xmm4,%xmm4
  0x00007f1a590027c3:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f1a590027c7:   vmovddup %xmm7,%xmm7
  0x00007f1a590027cb:   vmovdqu 0xb58190d(%rip),%xmm5        # 0x00007f1a645840e0
  0x00007f1a590027d3:   vmovdqu 0xb587865(%rip),%xmm6        # 0x00007f1a6458a040
  0x00007f1a590027db:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f1a590027df:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f1a590027e3:   vmovdqu %xmm1,%xmm5
  0x00007f1a590027e7:   vunpckhpd %xmm5,%xmm5,%xmm5
  0x00007f1a590027eb:   vcvttsd2si %xmm5,%edx
  0x00007f1a590027ef:   (bad)  
  0x00007f1a590027f3:   leaveq 
  0x00007f1a590027f4:   vcvtdq2pd %xmm1,%xmm1
  0x00007f1a590027f8:   vmulpd %xmm6,%xmm1,%xmm1
  0x00007f1a590027fc:   vmovdqu 0xb58780c(%rip),%xmm3        # 0x00007f1a6458a010
  0x00007f1a59002804:   vmovq  0xb586164(%rip),%xmm5        # 0x00007f1a64588970
  0x00007f1a5900280c:   shl    $0x4,%eax
  0x00007f1a5900280f:   add    $0x72900,%edx
  0x00007f1a59002815:   vmovdqu 0xb5877e3(%rip),%xmm4        # 0x00007f1a6458a000
  0x00007f1a5900281d:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007f1a59002821:   add    %eax,%edx
  0x00007f1a59002823:   and    $0x1f,%edx
  0x00007f1a59002826:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007f1a5900282a:   mov    %edx,%ecx
  0x00007f1a5900282c:   vmulpd %xmm1,%xmm4,%xmm4
  0x00007f1a59002830:   shl    %ecx
  0x00007f1a59002832:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007f1a59002836:   vmulpd 0xb5877b2(%rip),%xmm1,%xmm1        # 0x00007f1a64589ff0
  0x00007f1a5900283e:   add    %ecx,%edx
  0x00007f1a59002840:   shl    $0x2,%ecx
  0x00007f1a59002843:   add    %ecx,%edx
  0x00007f1a59002845:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f1a59002849:   vmovdqu %xmm0,%xmm2
  0x00007f1a5900284d:   vsubpd %xmm4,%xmm0,%xmm0
  0x00007f1a59002851:   vmovq  0xb581897(%rip),%xmm6        # 0x00007f1a645840f0
  0x00007f1a59002859:   shl    $0x4,%edx
  0x00007f1a5900285c:   movabs $0x7f1a645889f0,%rax
  0x00007f1a59002866:   vandpd 0xb586172(%rip),%xmm5,%xmm5        # 0x00007f1a645889e0
  0x00007f1a5900286e:   vmovdqu %xmm0,%xmm3
  0x00007f1a59002872:   add    %rdx,%rax
  0x00007f1a59002875:   vsubpd %xmm0,%xmm2,%xmm2
  0x00007f1a59002879:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007f1a5900287d:   vdivsd %xmm5,%xmm6,%xmm6
  0x00007f1a59002881:   vsubpd %xmm4,%xmm2,%xmm2
  0x00007f1a59002885:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f1a59002889:   vsubpd %xmm1,%xmm2,%xmm2
  0x00007f1a5900288d:   vmovdqu 0x30(%rax),%xmm1
  0x00007f1a59002892:   vaddpd %xmm7,%xmm2,%xmm2
  0x00007f1a59002896:   vmovdqu 0x10(%rax),%xmm7
  0x00007f1a5900289b:   vmulpd %xmm0,%xmm7,%xmm7
  0x00007f1a5900289f:   vmovdqu 0x60(%rax),%xmm4
  0x00007f1a590028a4:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f1a590028a8:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007f1a590028ac:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f1a590028b0:   vmovdqu %xmm0,%xmm3
  0x00007f1a590028b4:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a590028b8:   vaddpd (%rax),%xmm7,%xmm7
  0x00007f1a590028bc:   vaddpd 0x20(%rax),%xmm1,%xmm1
  0x00007f1a590028c1:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f1a590028c5:   vaddpd 0x50(%rax),%xmm4,%xmm4
  0x00007f1a590028ca:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007f1a590028ce:   vmovdqu 0x70(%rax),%xmm1
  0x00007f1a590028d3:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f1a590028d7:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a590028db:   vaddpd %xmm1,%xmm4,%xmm4
  0x00007f1a590028df:   vmovdqu 0x40(%rax),%xmm1
  0x00007f1a590028e4:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f1a590028e8:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007f1a590028ec:   vmovdqu %xmm3,%xmm1
  0x00007f1a590028f0:   vmulpd %xmm0,%xmm3,%xmm3
  0x00007f1a590028f4:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f1a590028f8:   vmulpd 0x90(%rax),%xmm1,%xmm1
  0x00007f1a59002900:   vmulpd %xmm3,%xmm4,%xmm4
  0x00007f1a59002904:   vmovdqu %xmm1,%xmm3
  0x00007f1a59002908:   vaddpd %xmm4,%xmm7,%xmm7
  0x00007f1a5900290c:   vmovdqu %xmm1,%xmm4
  0x00007f1a59002910:   vmulsd %xmm7,%xmm0,%xmm0
  0x00007f1a59002914:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007f1a59002918:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f1a5900291c:   vunpckhpd %xmm1,%xmm1,%xmm1
  0x00007f1a59002920:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007f1a59002924:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f1a59002928:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f1a5900292c:   vmovdqu %xmm2,%xmm4
  0x00007f1a59002930:   vmovq  0x90(%rax),%xmm7
  0x00007f1a59002938:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007f1a5900293c:   vaddsd 0x98(%rax),%xmm7,%xmm7
  0x00007f1a59002944:   vmulsd %xmm2,%xmm7,%xmm7
  0x00007f1a59002948:   vaddsd 0x88(%rax),%xmm7,%xmm7
  0x00007f1a59002950:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007f1a59002954:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f1a59002958:   vmovq  0xb581790(%rip),%xmm7        # 0x00007f1a645840f0
  0x00007f1a59002960:   vmulsd %xmm6,%xmm4,%xmm4
  0x00007f1a59002964:   vmovq  0xa8(%rax),%xmm2
  0x00007f1a5900296c:   vandpd %xmm6,%xmm2,%xmm2
  0x00007f1a59002970:   vmulsd %xmm2,%xmm5,%xmm5
  0x00007f1a59002974:   vmulsd 0xa0(%rax),%xmm6,%xmm6
  0x00007f1a5900297c:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007f1a59002980:   vsubsd 0x80(%rax),%xmm2,%xmm2
  0x00007f1a59002988:   vsubsd %xmm4,%xmm7,%xmm7
  0x00007f1a5900298c:   vmulsd %xmm6,%xmm7,%xmm7
  0x00007f1a59002990:   vmovdqu %xmm3,%xmm4
  0x00007f1a59002994:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f1a59002998:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f1a5900299c:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f1a590029a0:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f1a590029a4:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007f1a590029a8:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f1a590029ac:   jmpq   0x00007f1a59002ac8
  0x00007f1a590029b1:   add    $0x40,%edx
  0x00007f1a590029b4:   mov    %r10,%r9
  0x00007f1a590029b7:   mov    %r8,%r10
  0x00007f1a590029ba:   mov    $0x0,%r8d
  0x00007f1a590029c0:   cmp    $0x0,%r9
  0x00007f1a590029c4:   jne    0x00007f1a590026fa
  0x00007f1a590029ca:   add    $0x40,%edx
  0x00007f1a590029cd:   mov    %r10,%r9
  0x00007f1a590029d0:   mov    %r8,%r10
  0x00007f1a590029d3:   cmp    $0x0,%r9
  0x00007f1a590029d7:   jne    0x00007f1a590026fa
  0x00007f1a590029dd:   jmpq   0x00007f1a59002728
  0x00007f1a590029e2:   je     0x00007f1a59002728
  0x00007f1a590029e8:   neg    %ecx
  0x00007f1a590029ea:   shr    %cl,%r10
  0x00007f1a590029ed:   mov    %r9,%rax
  0x00007f1a590029f0:   shr    %cl,%r9
  0x00007f1a590029f3:   sub    %ecx,%edx
  0x00007f1a590029f5:   neg    %ecx
  0x00007f1a590029f7:   add    $0x40,%ecx
  0x00007f1a590029fa:   shl    %cl,%rax
  0x00007f1a590029fd:   or     %rax,%r10
  0x00007f1a59002a00:   jmpq   0x00007f1a59002728
  0x00007f1a59002a05:   not    %ecx
  0x00007f1a59002a07:   shl    $0x20,%r9
  0x00007f1a59002a0b:   or     %r11,%r9
  0x00007f1a59002a0e:   shl    %cl,%r9
  0x00007f1a59002a11:   mov    %r9,%rdi
  0x00007f1a59002a14:   test   $0x80000000,%r9d
  0x00007f1a59002a1b:   jne    0x00007f1a59002a74
  0x00007f1a59002a21:   shr    %cl,%r9d
  0x00007f1a59002a24:   mov    $0x0,%ebx
  0x00007f1a59002a29:   shr    $0x2,%rdi
  0x00007f1a59002a2d:   jmpq   0x00007f1a590026f0
  0x00007f1a59002a32:   shr    %cl,%r9d
  0x00007f1a59002a35:   mov    $0x40000000,%ebx
  0x00007f1a59002a3a:   shr    %cl,%ebx
  0x00007f1a59002a3c:   shl    $0x20,%r9
  0x00007f1a59002a40:   or     %r11,%r9
  0x00007f1a59002a43:   shl    $0x20,%rbx
  0x00007f1a59002a47:   add    $0x40000000,%edi
  0x00007f1a59002a4d:   mov    $0x0,%ecx
  0x00007f1a59002a52:   mov    $0x0,%r11d
  0x00007f1a59002a58:   sub    %r8,%rcx
  0x00007f1a59002a5b:   sbb    %r10,%r11
  0x00007f1a59002a5e:   sbb    %r9,%rbx
  0x00007f1a59002a61:   mov    %rcx,%r8
  0x00007f1a59002a64:   mov    %r11,%r10
  0x00007f1a59002a67:   mov    %rbx,%r9
  0x00007f1a59002a6a:   mov    $0x8000,%ebx
  0x00007f1a59002a6f:   jmpq   0x00007f1a590026f0
  0x00007f1a59002a74:   shr    %cl,%r9d
  0x00007f1a59002a77:   movabs $0x100000000,%rbx
  0x00007f1a59002a81:   shr    %cl,%rbx
  0x00007f1a59002a84:   mov    $0x0,%ecx
  0x00007f1a59002a89:   mov    $0x0,%r11d
  0x00007f1a59002a8f:   sub    %r8,%rcx
  0x00007f1a59002a92:   sbb    %r10,%r11
  0x00007f1a59002a95:   sbb    %r9,%rbx
  0x00007f1a59002a98:   mov    %rcx,%r8
  0x00007f1a59002a9b:   mov    %r11,%r10
  0x00007f1a59002a9e:   mov    %rbx,%r9
  0x00007f1a59002aa1:   mov    $0x8000,%ebx
  0x00007f1a59002aa6:   shr    $0x2,%rdi
  0x00007f1a59002aaa:   add    $0x40000000,%edi
  0x00007f1a59002ab0:   jmpq   0x00007f1a590026f0
  0x00007f1a59002ab5:   vmovq  0x8(%rsp),%xmm0
  0x00007f1a59002abb:   vmulsd 0xb581585(%rip),%xmm0,%xmm0        # 0x00007f1a64584048
  0x00007f1a59002ac3:   vmovq  %xmm0,(%rsp)
  0x00007f1a59002ac8:   add    $0x10,%rsp
  0x00007f1a59002acc:   pop    %rbx
  0x00007f1a59002acd:   leaveq 
  0x00007f1a59002ace:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmExp [0x00007f1a59002acf, 0x00007f1a59002def] (800 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59002acf:   push   %rbp
  0x00007f1a59002ad0:   mov    %rsp,%rbp
  0x00007f1a59002ad3:   sub    $0x18,%rsp
  0x00007f1a59002ad7:   vmovsd %xmm0,0x8(%rsp)
  0x00007f1a59002add:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f1a59002ae1:   vmovdqu 0xb581b07(%rip),%xmm1        # 0x00007f1a645845f0
  0x00007f1a59002ae9:   vmovdqu 0xb581b0f(%rip),%xmm2        # 0x00007f1a64584600
  0x00007f1a59002af1:   vmovdqu 0xb581b17(%rip),%xmm3        # 0x00007f1a64584610
  0x00007f1a59002af9:   vmovdqu 0xb5815af(%rip),%xmm6        # 0x00007f1a645840b0
  0x00007f1a59002b01:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a59002b06:   and    $0x7fff,%eax
  0x00007f1a59002b0b:   mov    $0x408f,%edx
  0x00007f1a59002b10:   sub    %eax,%edx
  0x00007f1a59002b12:   sub    $0x3c90,%eax
  0x00007f1a59002b17:   or     %eax,%edx
  0x00007f1a59002b19:   cmp    $0x80000000,%edx
  0x00007f1a59002b1f:   jae    0x00007f1a59002db6
  0x00007f1a59002b25:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f1a59002b29:   vaddpd %xmm6,%xmm1,%xmm1
  0x00007f1a59002b2d:   vmovapd %xmm1,%xmm7
  0x00007f1a59002b31:   vsubpd %xmm6,%xmm1,%xmm1
  0x00007f1a59002b35:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007f1a59002b39:   vmovdqu 0xb581aef(%rip),%xmm4        # 0x00007f1a64584630
  0x00007f1a59002b41:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007f1a59002b45:   vmovdqu 0xb581af3(%rip),%xmm5        # 0x00007f1a64584640
  0x00007f1a59002b4d:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007f1a59002b51:   vmovd  %xmm7,%eax
  0x00007f1a59002b55:   mov    %eax,%ecx
  0x00007f1a59002b57:   and    $0x3f,%ecx
  0x00007f1a59002b5a:   shl    $0x4,%ecx
  0x00007f1a59002b5d:   sar    $0x6,%eax
  0x00007f1a59002b60:   mov    %eax,%edx
  0x00007f1a59002b62:   vmovdqu 0xb581a76(%rip),%xmm6        # 0x00007f1a645845e0
  0x00007f1a59002b6a:   vpand  %xmm6,%xmm7,%xmm7
  0x00007f1a59002b6e:   vmovdqu 0xb581a5a(%rip),%xmm6        # 0x00007f1a645845d0
  0x00007f1a59002b76:   vpaddq %xmm6,%xmm7,%xmm7
  0x00007f1a59002b7a:   (bad)  
  0x00007f1a59002b7e:   imull  (%rsi)
  0x00007f1a59002b80:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007f1a59002b84:   movabs $0x7f1a645841d0,%r11
  0x00007f1a59002b8e:   vmovdqu (%rcx,%r11,1),%xmm2
  0x00007f1a59002b94:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007f1a59002b98:   vmovapd %xmm0,%xmm6
  0x00007f1a59002b9c:   vmovapd %xmm0,%xmm1
  0x00007f1a59002ba0:   vmulpd %xmm6,%xmm6,%xmm6
  0x00007f1a59002ba4:   vmulpd %xmm6,%xmm0,%xmm0
  0x00007f1a59002ba8:   vaddpd %xmm4,%xmm5,%xmm5
  0x00007f1a59002bac:   vmulsd %xmm6,%xmm0,%xmm0
  0x00007f1a59002bb0:   vmulpd 0xb581a68(%rip),%xmm6,%xmm6        # 0x00007f1a64584620
  0x00007f1a59002bb8:   vaddsd %xmm2,%xmm1,%xmm1
  0x00007f1a59002bbc:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007f1a59002bc0:   vmulpd %xmm5,%xmm0,%xmm0
  0x00007f1a59002bc4:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007f1a59002bc8:   vpor   %xmm7,%xmm2,%xmm2
  0x00007f1a59002bcc:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007f1a59002bd0:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f1a59002bd4:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f1a59002bd8:   add    $0x37e,%edx
  0x00007f1a59002bde:   cmp    $0x77c,%edx
  0x00007f1a59002be4:   ja     0x00007f1a59002bf7
  0x00007f1a59002bea:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007f1a59002bee:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007f1a59002bf2:   jmpq   0x00007f1a59002de9
  0x00007f1a59002bf7:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f1a59002bfb:   vmovdqu 0xb5815bd(%rip),%xmm4        # 0x00007f1a645841c0
  0x00007f1a59002c03:   mov    $0xfffffc02,%edx
  0x00007f1a59002c08:   sub    %eax,%edx
  0x00007f1a59002c0a:   vmovd  %edx,%xmm5
  0x00007f1a59002c0e:   vpsllq %xmm5,%xmm4,%xmm4
  0x00007f1a59002c12:   mov    %eax,%ecx
  0x00007f1a59002c14:   sar    %eax
  0x00007f1a59002c16:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f1a59002c1b:   vmovdqu 0xb58158d(%rip),%xmm6        # 0x00007f1a645841b0
  0x00007f1a59002c23:   (bad)  
  0x00007f1a59002c27:   repz add $0xc5,%al
  0x00007f1a59002c2a:   jmpq   0x00007f1a54c60029
  0x00007f1a59002c2f:   pop    %rcx
  0x00007f1a59002c30:   retq   $0xfa83
  0x00007f1a59002c33:   xor    $0xf,%al
  0x00007f1a59002c35:   (bad)  
  0x00007f1a59002c39:   add    %al,%ch
  0x00007f1a59002c3b:   (bad)  
  0x00007f1a59002c3d:   loop   0x00007f1a59002c04
  0x00007f1a59002c3f:   loope  0x00007f1a59002c3f
  0x00007f1a59002c41:   faddp  %st,%st(5)
  0x00007f1a59002c43:   jmp    0x00007f1a59002ca1
  0x00007f1a59002c45:   (bad)  
  0x00007f1a59002c46:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007f1a59002c4a:   cmp    $0x3ff,%ecx
  0x00007f1a59002c50:   jge    0x00007f1a59002ce0
  0x00007f1a59002c56:   vpextrw $0x3,%xmm0,%ecx
  0x00007f1a59002c5b:   and    $0x8000,%ecx
  0x00007f1a59002c61:   or     %ecx,%edx
  0x00007f1a59002c63:   cmp    $0x0,%edx
  0x00007f1a59002c66:   je     0x00007f1a59002cd3
  0x00007f1a59002c6c:   vmovapd %xmm0,%xmm6
  0x00007f1a59002c70:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f1a59002c74:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f1a59002c78:   vpextrw $0x3,%xmm0,%ecx
  0x00007f1a59002c7d:   and    $0x7ff0,%ecx
  0x00007f1a59002c83:   cmp    $0x0,%ecx
  0x00007f1a59002c86:   je     0x00007f1a59002c91
  0x00007f1a59002c8c:   jmpq   0x00007f1a59002de9
  0x00007f1a59002c91:   vmulsd %xmm3,%xmm6,%xmm6
  0x00007f1a59002c95:   vmulsd %xmm3,%xmm4,%xmm4
  0x00007f1a59002c99:   vmovdqu %xmm6,%xmm0
  0x00007f1a59002c9d:   vpxor  %xmm4,%xmm6,%xmm6
  0x00007f1a59002ca1:   vpsrad $0x1f,%xmm6,%xmm6
  0x00007f1a59002ca6:   vpshufd $0x55,%xmm6,%xmm6
  0x00007f1a59002cab:   (bad)  
  0x00007f1a59002caf:   lock add %eax,%ebp
  0x00007f1a59002cb2:   stc    
  0x00007f1a59002cb3:   jae    0x00007f1a59002c85
  0x00007f1a59002cb5:   add    %eax,%ebp
  0x00007f1a59002cb7:   stc    
  0x00007f1a59002cb8:   out    %eax,(%dx)
  0x00007f1a59002cb9:   mov    $0xc9,%ch
  0x00007f1a59002cbc:   jae    0x00007f1a59002c94
  0x00007f1a59002cbe:   (bad)  
  0x00007f1a59002cbf:   vpaddq %xmm6,%xmm0,%xmm0
  0x00007f1a59002cc3:   vpaddq %xmm4,%xmm0,%xmm0
  0x00007f1a59002cc7:   movl   $0xf,(%rsp)
  0x00007f1a59002cce:   jmpq   0x00007f1a59002ddd
  0x00007f1a59002cd3:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f1a59002cd7:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f1a59002cdb:   jmpq   0x00007f1a59002de9
  0x00007f1a59002ce0:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f1a59002ce4:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f1a59002ce8:   vpextrw $0x3,%xmm0,%ecx
  0x00007f1a59002ced:   and    $0x7ff0,%ecx
  0x00007f1a59002cf3:   cmp    $0x7ff0,%ecx
  0x00007f1a59002cf9:   jae    0x00007f1a59002d42
  0x00007f1a59002cff:   jmpq   0x00007f1a59002de9
  0x00007f1a59002d04:   vpaddd %xmm6,%xmm3,%xmm3
  0x00007f1a59002d08:   vaddpd %xmm2,%xmm0,%xmm0
  0x00007f1a59002d0c:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f1a59002d10:   movl   $0xf,(%rsp)
  0x00007f1a59002d17:   jmpq   0x00007f1a59002ddd
  0x00007f1a59002d1c:   cmp    $0x7ff00000,%eax
  0x00007f1a59002d21:   jae    0x00007f1a59002d66
  0x00007f1a59002d27:   mov    0xc(%rsp),%eax
  0x00007f1a59002d2b:   cmp    $0x80000000,%eax
  0x00007f1a59002d30:   jae    0x00007f1a59002d4e
  0x00007f1a59002d36:   vmovsd 0xb581462(%rip),%xmm0        # 0x00007f1a645841a0
  0x00007f1a59002d3e:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f1a59002d42:   movl   $0xe,(%rsp)
  0x00007f1a59002d49:   jmpq   0x00007f1a59002ddd
  0x00007f1a59002d4e:   vmovsd 0xb581442(%rip),%xmm0        # 0x00007f1a64584198
  0x00007f1a59002d56:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f1a59002d5a:   movl   $0xf,(%rsp)
  0x00007f1a59002d61:   jmpq   0x00007f1a59002ddd
  0x00007f1a59002d66:   mov    0x8(%rsp),%edx
  0x00007f1a59002d6a:   cmp    $0x7ff00000,%eax
  0x00007f1a59002d6f:   ja     0x00007f1a59002da7
  0x00007f1a59002d75:   cmp    $0x0,%edx
  0x00007f1a59002d78:   jne    0x00007f1a59002da7
  0x00007f1a59002d7e:   mov    0xc(%rsp),%eax
  0x00007f1a59002d82:   cmp    $0x7ff00000,%eax
  0x00007f1a59002d87:   jne    0x00007f1a59002d9a
  0x00007f1a59002d8d:   vmovsd 0xb5813fb(%rip),%xmm0        # 0x00007f1a64584190
  0x00007f1a59002d95:   jmpq   0x00007f1a59002de9
  0x00007f1a59002d9a:   vmovsd 0xb5dbf9e(%rip),%xmm0        # 0x00007f1a645ded40
  0x00007f1a59002da2:   jmpq   0x00007f1a59002de9
  0x00007f1a59002da7:   vmovsd 0x8(%rsp),%xmm0
  0x00007f1a59002dad:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f1a59002db1:   jmpq   0x00007f1a59002de9
  0x00007f1a59002db6:   mov    0xc(%rsp),%eax
  0x00007f1a59002dba:   and    $0x7fffffff,%eax
  0x00007f1a59002dbf:   cmp    $0x40900000,%eax
  0x00007f1a59002dc4:   jae    0x00007f1a59002d1c
  0x00007f1a59002dca:   vmovsd %xmm0,0x8(%rsp)
  0x00007f1a59002dd0:   vaddsd 0xb581318(%rip),%xmm0,%xmm0        # 0x00007f1a645840f0
  0x00007f1a59002dd8:   jmpq   0x00007f1a59002de9
  0x00007f1a59002ddd:   vmovq  %xmm0,0x10(%rsp)
  0x00007f1a59002de3:   vmovq  0x10(%rsp),%xmm0
  0x00007f1a59002de9:   add    $0x18,%rsp
  0x00007f1a59002ded:   leaveq 
  0x00007f1a59002dee:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmPow [0x00007f1a59002def, 0x00007f1a59003ee3] (4340 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59002def:   push   %rbp
  0x00007f1a59002df0:   mov    %rsp,%rbp
  0x00007f1a59002df3:   sub    $0x28,%rsp
  0x00007f1a59002df7:   vmovsd %xmm0,0x8(%rsp)
  0x00007f1a59002dfd:   vmovsd %xmm1,0x10(%rsp)
  0x00007f1a59002e03:   vmovq  %xmm1,%r8
  0x00007f1a59002e08:   cmp    0xb582a39(%rip),%r8        # 0x00007f1a64585848
  0x00007f1a59002e0f:   jne    0x00007f1a59002e1a
  0x00007f1a59002e11:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f1a59002e15:   jmpq   0x00007f1a59003edd
  0x00007f1a59002e1a:   cmp    0xb582a1f(%rip),%r8        # 0x00007f1a64585840
  0x00007f1a59002e21:   jne    0x00007f1a59002e3a
  0x00007f1a59002e23:   vmovq  %xmm0,%r9
  0x00007f1a59002e28:   cmp    0xb5dbf19(%rip),%r9        # 0x00007f1a645ded48
  0x00007f1a59002e2f:   jl     0x00007f1a59002e3a
  0x00007f1a59002e31:   vsqrtsd %xmm0,%xmm0,%xmm0
  0x00007f1a59002e35:   jmpq   0x00007f1a59003edd
  0x00007f1a59002e3a:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a59002e3f:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f1a59002e43:   movabs $0x3ff0000000000000,%r9
  0x00007f1a59002e4d:   vmovq  %r9,%xmm2
  0x00007f1a59002e52:   mov    $0x3fb90000,%r8d
  0x00007f1a59002e58:   vmovq  %r8,%xmm7
  0x00007f1a59002e5d:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a59002e61:   movabs $0x77f0000000000000,%r10
  0x00007f1a59002e6b:   vmovq  %r10,%xmm1
  0x00007f1a59002e70:   vmovdqu %xmm0,%xmm3
  0x00007f1a59002e74:   mov    $0x7ff0,%edx
  0x00007f1a59002e79:   and    %eax,%edx
  0x00007f1a59002e7b:   sub    $0x3ff0,%edx
  0x00007f1a59002e81:   mov    %edx,%ecx
  0x00007f1a59002e83:   sar    $0x1f,%edx
  0x00007f1a59002e86:   add    %edx,%ecx
  0x00007f1a59002e88:   xor    %edx,%ecx
  0x00007f1a59002e8a:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f1a59002e8e:   vmovdqu 0xb585aba(%rip),%xmm6        # 0x00007f1a64588950
  0x00007f1a59002e96:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f1a59002e9b:   vmovq  0xb585a9d(%rip),%xmm2        # 0x00007f1a64588940
  0x00007f1a59002ea3:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f1a59002ea8:   add    $0x10,%ecx
  0x00007f1a59002eab:   bsr    %ecx,%ecx
  0x00007f1a59002eae:   vrcpps %xmm0,%xmm0
  0x00007f1a59002eb2:   (bad)  
  0x00007f1a59002eb6:   repz or $0x41,%al
  0x00007f1a59002eb9:   mov    $0x2000,%ebx
  0x00007f1a59002ebe:   vmovq  %r11,%xmm4
  0x00007f1a59002ec3:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007f1a59002ec8:   sub    $0x10,%eax
  0x00007f1a59002ecb:   cmp    $0x7fe0,%eax
  0x00007f1a59002ed0:   jae    0x00007f1a590030e5
  0x00007f1a59002ed6:   mov    $0x0,%r8d
  0x00007f1a59002edc:   vmulss %xmm7,%xmm0,%xmm0
  0x00007f1a59002ee0:   mov    $0xffffffff,%edx
  0x00007f1a59002ee5:   sub    $0x4,%ecx
  0x00007f1a59002ee8:   shl    %cl,%edx
  0x00007f1a59002eea:   shl    $0x20,%rdx
  0x00007f1a59002eee:   vmovq  %rdx,%xmm5
  0x00007f1a59002ef3:   vpor   %xmm1,%xmm3,%xmm3
  0x00007f1a59002ef7:   sub    $0x3fdf,%eax
  0x00007f1a59002efc:   cmp    $0x1,%eax
  0x00007f1a59002eff:   jbe    0x00007f1a59003afa
  0x00007f1a59002f05:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f1a59002f09:   vpand  %xmm3,%xmm5,%xmm5
  0x00007f1a59002f0d:   vmovd  %xmm0,%edx
  0x00007f1a59002f11:   (bad)  
  0x00007f1a59002f15:   lock sbb $0xdd5ce3c5,%eax
  0x00007f1a59002f1b:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f1a59002f1f:   sub    $0x1,%eax
  0x00007f1a59002f22:   sar    $0x4,%eax
  0x00007f1a59002f25:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f1a59002f29:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a59002f2d:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007f1a59002f31:   vmovdqu 0xb584937(%rip),%xmm1        # 0x00007f1a64587870
  0x00007f1a59002f39:   movabs $0x7f1a64585860,%r11
  0x00007f1a59002f43:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007f1a59002f47:   vmovdqu 0xb584931(%rip),%xmm4        # 0x00007f1a64587880
  0x00007f1a59002f4f:   mov    %eax,%ecx
  0x00007f1a59002f51:   sar    $0x1f,%eax
  0x00007f1a59002f54:   add    %eax,%ecx
  0x00007f1a59002f56:   xor    %ecx,%eax
  0x00007f1a59002f58:   add    $0x1,%eax
  0x00007f1a59002f5b:   bsr    %eax,%eax
  0x00007f1a59002f5e:   vunpcklpd %xmm3,%xmm5,%xmm5
  0x00007f1a59002f62:   vmovdqu 0xb584926(%rip),%xmm6        # 0x00007f1a64587890
  0x00007f1a59002f6a:   vaddsd %xmm5,%xmm3,%xmm3
  0x00007f1a59002f6e:   and    $0xffc000,%edx
  0x00007f1a59002f74:   shr    $0xa,%edx
  0x00007f1a59002f77:   vaddpd -0xe40(%r11,%rdx,1),%xmm5,%xmm5
  0x00007f1a59002f81:   vmovdqu 0xb584917(%rip),%xmm0        # 0x00007f1a645878a0
  0x00007f1a59002f89:   vpshufd $0x44,%xmm3,%xmm2
  0x00007f1a59002f8e:   vmulsd %xmm3,%xmm3,%xmm3
  0x00007f1a59002f92:   vmulpd %xmm2,%xmm1,%xmm1
  0x00007f1a59002f96:   vmulpd %xmm2,%xmm4,%xmm4
  0x00007f1a59002f9a:   vaddsd %xmm7,%xmm5,%xmm5
  0x00007f1a59002f9e:   vmulsd %xmm3,%xmm2,%xmm2
  0x00007f1a59002fa2:   vaddpd %xmm1,%xmm6,%xmm6
  0x00007f1a59002fa6:   vmulsd %xmm3,%xmm3,%xmm3
  0x00007f1a59002faa:   vaddpd %xmm4,%xmm0,%xmm0
  0x00007f1a59002fae:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a59002fb4:   mov    0x16(%rsp),%cx
  0x00007f1a59002fb9:   vpshufd $0xee,%xmm5,%xmm7
  0x00007f1a59002fbe:   vmovq  0xb58596a(%rip),%xmm4        # 0x00007f1a64588930
  0x00007f1a59002fc6:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f1a59002fca:   vpshufd $0x44,%xmm3,%xmm3
  0x00007f1a59002fcf:   vmulpd %xmm2,%xmm0,%xmm0
  0x00007f1a59002fd3:   shl    $0x4,%eax
  0x00007f1a59002fd6:   sub    $0x3e00,%eax
  0x00007f1a59002fdb:   and    $0x7ff0,%ecx
  0x00007f1a59002fe1:   add    %ecx,%eax
  0x00007f1a59002fe3:   vmulpd %xmm6,%xmm3,%xmm3
  0x00007f1a59002fe7:   cmp    $0x270,%eax
  0x00007f1a59002fec:   jae    0x00007f1a590032a6
  0x00007f1a59002ff2:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f1a59002ff6:   mov    $0x42b8,%edx
  0x00007f1a59002ffb:   vpinsrw $0x3,%edx,%xmm6,%xmm6
  0x00007f1a59003000:   vmovdqu %xmm1,%xmm2
  0x00007f1a59003004:   vpand  %xmm1,%xmm4,%xmm4
  0x00007f1a59003008:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007f1a5900300c:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007f1a59003010:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f1a59003014:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007f1a59003018:   vmovdqu %xmm6,%xmm7
  0x00007f1a5900301c:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f1a59003020:   movabs $0x7f1a64587930,%r11
  0x00007f1a5900302a:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007f1a5900302e:   vmovd  %xmm6,%edx
  0x00007f1a59003032:   vsubsd %xmm7,%xmm6,%xmm6
  0x00007f1a59003036:   vpshufd $0xee,%xmm3,%xmm0
  0x00007f1a5900303b:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007f1a5900303f:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f1a59003043:   mov    %edx,%ecx
  0x00007f1a59003045:   and    $0xff,%edx
  0x00007f1a5900304b:   add    %edx,%edx
  0x00007f1a5900304d:   vmovdqu (%r11,%rdx,8),%xmm5
  0x00007f1a59003053:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007f1a59003057:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007f1a5900305b:   vmovdqu 0xb58489d(%rip),%xmm7        # 0x00007f1a64587900
  0x00007f1a59003063:   vmovdqu 0xb5848a5(%rip),%xmm3        # 0x00007f1a64587910
  0x00007f1a5900306b:   shl    $0xc,%ecx
  0x00007f1a5900306e:   xor    %r8d,%ecx
  0x00007f1a59003071:   and    $0xfff00000,%ecx
  0x00007f1a59003077:   vmovq  %rcx,%xmm6
  0x00007f1a5900307c:   vaddsd %xmm4,%xmm2,%xmm2
  0x00007f1a59003080:   movabs $0x3fe62e42fefa39ef,%r9
  0x00007f1a5900308a:   vmovq  %r9,%xmm1
  0x00007f1a5900308f:   vpshufd $0x44,%xmm2,%xmm0
  0x00007f1a59003094:   vpshufd $0x44,%xmm2,%xmm4
  0x00007f1a59003099:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f1a5900309d:   vpshufd $0x11,%xmm6,%xmm6
  0x00007f1a590030a2:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a590030a6:   vmulpd %xmm4,%xmm7,%xmm7
  0x00007f1a590030aa:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007f1a590030ae:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007f1a590030b2:   vpshufd $0xee,%xmm5,%xmm6
  0x00007f1a590030b7:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f1a590030bb:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007f1a590030bf:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f1a590030c3:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f1a590030c7:   vpshufd $0xee,%xmm0,%xmm3
  0x00007f1a590030cc:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007f1a590030d0:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f1a590030d4:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f1a590030d8:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f1a590030dc:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f1a590030e0:   jmpq   0x00007f1a59003edd
  0x00007f1a590030e5:   add    $0x10,%eax
  0x00007f1a590030e8:   mov    $0x7ff0,%edx
  0x00007f1a590030ed:   and    %eax,%edx
  0x00007f1a590030ef:   cmp    $0x7ff0,%edx
  0x00007f1a590030f5:   je     0x00007f1a5900341e
  0x00007f1a590030fb:   test   $0x8000,%eax
  0x00007f1a59003100:   jne    0x00007f1a590036b7
  0x00007f1a59003106:   vmovq  0x8(%rsp),%xmm0
  0x00007f1a5900310c:   vmovq  0x8(%rsp),%xmm3
  0x00007f1a59003112:   vmovd  %xmm3,%edx
  0x00007f1a59003116:   vpsrlq $0x20,%xmm3,%xmm3
  0x00007f1a5900311b:   vmovd  %xmm3,%ecx
  0x00007f1a5900311f:   or     %ecx,%edx
  0x00007f1a59003121:   cmp    $0x0,%edx
  0x00007f1a59003124:   je     0x00007f1a590038f5
  0x00007f1a5900312a:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f1a5900312e:   mov    $0x47f0,%eax
  0x00007f1a59003133:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f1a59003138:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f1a5900313c:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f1a59003140:   mov    $0x3ff0,%eax
  0x00007f1a59003145:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f1a5900314a:   vmovdqu %xmm0,%xmm3
  0x00007f1a5900314e:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a59003153:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f1a59003157:   mov    $0x47f0,%ecx
  0x00007f1a5900315c:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f1a59003161:   vmovq  0xb5857d7(%rip),%xmm2        # 0x00007f1a64588940
  0x00007f1a59003169:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f1a5900316e:   vrcpps %xmm0,%xmm0
  0x00007f1a59003172:   (bad)  
  0x00007f1a59003176:   repz or $0xc5,%al
  0x00007f1a59003179:   cli    
  0x00007f1a5900317a:   outsl  %ds:(%rsi),(%dx)
  0x00007f1a5900317b:   xor    $0xb5857d0,%eax
  0x00007f1a59003180:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007f1a59003185:   vmulss %xmm7,%xmm0,%xmm0
  0x00007f1a59003189:   mov    $0xfffffc00,%edx
  0x00007f1a5900318e:   vmovd  %edx,%xmm5
  0x00007f1a59003192:   vpor   %xmm1,%xmm3,%xmm3
  0x00007f1a59003196:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f1a5900319a:   (bad)  
  0x00007f1a5900319e:   cmc    
  0x00007f1a5900319f:   and    %al,%ch
  0x00007f1a590031a1:   stc    
  0x00007f1a590031a2:   jle    0x00007f1a59003166
  0x00007f1a590031a4:   (bad)  
  0x00007f1a590031a8:   lock sbb $0xebdbd1c5,%eax
  0x00007f1a590031ae:   mov    $0x0,%r8d
  0x00007f1a590031b4:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f1a590031b8:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f1a590031bc:   and    $0x7ff0,%eax
  0x00007f1a590031c1:   sub    $0x47f0,%eax
  0x00007f1a590031c6:   sar    $0x4,%eax
  0x00007f1a590031c9:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f1a590031cd:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a590031d1:   jmpq   0x00007f1a59002f2d
  0x00007f1a590031d6:   vmovq  0x8(%rsp),%xmm0
  0x00007f1a590031dc:   vmovq  0x8(%rsp),%xmm3
  0x00007f1a590031e2:   vmovd  %xmm3,%edx
  0x00007f1a590031e6:   vpsrlq $0x20,%xmm3,%xmm3
  0x00007f1a590031eb:   vmovd  %xmm3,%ecx
  0x00007f1a590031ef:   or     %ecx,%edx
  0x00007f1a590031f1:   cmp    $0x0,%edx
  0x00007f1a590031f4:   je     0x00007f1a590038f5
  0x00007f1a590031fa:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f1a590031fe:   mov    $0x47f0,%eax
  0x00007f1a59003203:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f1a59003208:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f1a5900320c:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f1a59003210:   mov    $0x3ff0,%eax
  0x00007f1a59003215:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f1a5900321a:   vmovdqu %xmm0,%xmm3
  0x00007f1a5900321e:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a59003223:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f1a59003227:   mov    $0x47f0,%ecx
  0x00007f1a5900322c:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f1a59003231:   vmovq  0xb585707(%rip),%xmm2        # 0x00007f1a64588940
  0x00007f1a59003239:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f1a5900323e:   vrcpps %xmm0,%xmm0
  0x00007f1a59003242:   (bad)  
  0x00007f1a59003246:   repz or $0xc5,%al
  0x00007f1a59003249:   cli    
  0x00007f1a5900324a:   outsl  %ds:(%rsi),(%dx)
  0x00007f1a5900324b:   xor    $0xb585700,%eax
  0x00007f1a59003250:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007f1a59003255:   vmulss %xmm7,%xmm0,%xmm0
  0x00007f1a59003259:   mov    $0xfffffc00,%edx
  0x00007f1a5900325e:   vmovd  %edx,%xmm5
  0x00007f1a59003262:   vpor   %xmm1,%xmm3,%xmm3
  0x00007f1a59003266:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f1a5900326a:   (bad)  
  0x00007f1a5900326e:   cmc    
  0x00007f1a5900326f:   and    %al,%ch
  0x00007f1a59003271:   stc    
  0x00007f1a59003272:   jle    0x00007f1a59003236
  0x00007f1a59003274:   (bad)  
  0x00007f1a59003278:   lock sbb $0xebdbd1c5,%eax
  0x00007f1a5900327e:   mov    $0x80000000,%r8d
  0x00007f1a59003284:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f1a59003288:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f1a5900328c:   and    $0x7ff0,%eax
  0x00007f1a59003291:   sub    $0x47f0,%eax
  0x00007f1a59003296:   sar    $0x4,%eax
  0x00007f1a59003299:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f1a5900329d:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a590032a1:   jmpq   0x00007f1a59002f2d
  0x00007f1a590032a6:   cmp    $0x0,%eax
  0x00007f1a590032a9:   jl     0x00007f1a59003867
  0x00007f1a590032af:   cmp    $0x2f0,%eax
  0x00007f1a590032b4:   jae    0x00007f1a590039f7
  0x00007f1a590032ba:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f1a590032be:   vmovq  0xb58460a(%rip),%xmm2        # 0x00007f1a645878d0
  0x00007f1a590032c6:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007f1a590032ca:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f1a590032ce:   mov    $0x42b8,%eax
  0x00007f1a590032d3:   vpinsrw $0x3,%eax,%xmm6,%xmm6
  0x00007f1a590032d8:   vpshufd $0xee,%xmm3,%xmm0
  0x00007f1a590032dd:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f1a590032e1:   vmovdqu %xmm5,%xmm3
  0x00007f1a590032e5:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f1a590032e9:   vmovdqu %xmm2,%xmm4
  0x00007f1a590032ed:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f1a590032f1:   vmovdqu %xmm5,%xmm7
  0x00007f1a590032f5:   vpand  %xmm2,%xmm5,%xmm5
  0x00007f1a590032f9:   vmovdqu %xmm1,%xmm2
  0x00007f1a590032fd:   vpand  %xmm1,%xmm4,%xmm4
  0x00007f1a59003301:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007f1a59003305:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f1a59003309:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007f1a5900330d:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007f1a59003311:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f1a59003315:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007f1a59003319:   vmovdqu %xmm6,%xmm7
  0x00007f1a5900331d:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007f1a59003321:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f1a59003325:   vmovd  %xmm6,%eax
  0x00007f1a59003329:   vsubsd %xmm7,%xmm6,%xmm6
  0x00007f1a5900332d:   movabs $0x7f1a64587930,%r11
  0x00007f1a59003337:   vaddsd %xmm1,%xmm2,%xmm2
  0x00007f1a5900333b:   vmovdqu 0xb5845bd(%rip),%xmm7        # 0x00007f1a64587900
  0x00007f1a59003343:   vmovdqu 0xb5845c5(%rip),%xmm3        # 0x00007f1a64587910
  0x00007f1a5900334b:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007f1a5900334f:   vpextrw $0x3,%xmm6,%edx
  0x00007f1a59003354:   mov    %eax,%ecx
  0x00007f1a59003356:   and    $0xff,%eax
  0x00007f1a5900335b:   add    %eax,%eax
  0x00007f1a5900335d:   vmovdqu (%r11,%rax,8),%xmm5
  0x00007f1a59003363:   vaddsd %xmm4,%xmm2,%xmm2
  0x00007f1a59003367:   sar    $0x8,%ecx
  0x00007f1a5900336a:   mov    %ecx,%eax
  0x00007f1a5900336c:   sar    %ecx
  0x00007f1a5900336e:   sub    %ecx,%eax
  0x00007f1a59003370:   shl    $0x14,%ecx
  0x00007f1a59003373:   xor    %r8d,%ecx
  0x00007f1a59003376:   vmovd  %ecx,%xmm6
  0x00007f1a5900337a:   vmovq  0xb58459e(%rip),%xmm1        # 0x00007f1a64587920
  0x00007f1a59003382:   and    $0x7fff,%edx
  0x00007f1a59003388:   cmp    $0x4091,%edx
  0x00007f1a5900338e:   ja     0x00007f1a590039f7
  0x00007f1a59003394:   vpshufd $0x44,%xmm2,%xmm0
  0x00007f1a59003399:   vpshufd $0x44,%xmm2,%xmm4
  0x00007f1a5900339e:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a590033a2:   vmulpd %xmm4,%xmm7,%xmm7
  0x00007f1a590033a6:   vpshufd $0x11,%xmm6,%xmm6
  0x00007f1a590033ab:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f1a590033af:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f1a590033b3:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007f1a590033b7:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007f1a590033bb:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007f1a590033bf:   vpshufd $0xee,%xmm5,%xmm6
  0x00007f1a590033c4:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f1a590033c8:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f1a590033cc:   vpshufd $0xee,%xmm0,%xmm3
  0x00007f1a590033d1:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007f1a590033d5:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f1a590033d9:   shl    $0x4,%eax
  0x00007f1a590033dc:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007f1a590033e0:   add    $0x3ff0,%eax
  0x00007f1a590033e5:   vpinsrw $0x3,%eax,%xmm4,%xmm4
  0x00007f1a590033ea:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f1a590033ee:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f1a590033f2:   vmovdqu %xmm0,%xmm1
  0x00007f1a590033f6:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f1a590033fa:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f1a590033fe:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a59003403:   and    $0x7ff0,%eax
  0x00007f1a59003408:   je     0x00007f1a59003a98
  0x00007f1a5900340e:   cmp    $0x7ff0,%eax
  0x00007f1a59003413:   je     0x00007f1a59003a52
  0x00007f1a59003419:   jmpq   0x00007f1a59003edd
  0x00007f1a5900341e:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a59003424:   vmovq  0x8(%rsp),%xmm0
  0x00007f1a5900342a:   vmovdqu %xmm0,%xmm2
  0x00007f1a5900342e:   vmovd  %xmm2,%eax
  0x00007f1a59003432:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007f1a59003437:   vmovd  %xmm2,%edx
  0x00007f1a5900343b:   or     %edx,%eax
  0x00007f1a5900343d:   je     0x00007f1a5900348e
  0x00007f1a59003443:   vmovd  %xmm1,%eax
  0x00007f1a59003447:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f1a5900344c:   vmovd  %xmm1,%edx
  0x00007f1a59003450:   mov    %edx,%ecx
  0x00007f1a59003452:   add    %edx,%edx
  0x00007f1a59003454:   or     %edx,%eax
  0x00007f1a59003456:   je     0x00007f1a59003465
  0x00007f1a5900345c:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f1a59003460:   jmpq   0x00007f1a59003edd
  0x00007f1a59003465:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a59003469:   mov    $0x3ff0,%eax
  0x00007f1a5900346e:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a59003473:   movl   $0x1d,(%rsp)
  0x00007f1a5900347a:   jmpq   0x00007f1a59003ed1
  0x00007f1a5900347f:   vmovq  0x10(%rsp),%xmm0
  0x00007f1a59003485:   vaddpd %xmm0,%xmm0,%xmm0
  0x00007f1a59003489:   jmpq   0x00007f1a59003edd
  0x00007f1a5900348e:   vmovd  %xmm1,%eax
  0x00007f1a59003492:   vmovdqu %xmm1,%xmm2
  0x00007f1a59003496:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f1a5900349b:   vmovd  %xmm1,%edx
  0x00007f1a5900349f:   mov    %edx,%ecx
  0x00007f1a590034a1:   add    %edx,%edx
  0x00007f1a590034a3:   or     %edx,%eax
  0x00007f1a590034a5:   je     0x00007f1a5900384b
  0x00007f1a590034ab:   vpextrw $0x3,%xmm2,%eax
  0x00007f1a590034b0:   and    $0x7ff0,%eax
  0x00007f1a590034b5:   cmp    $0x7ff0,%eax
  0x00007f1a590034ba:   jne    0x00007f1a590034d1
  0x00007f1a590034c0:   vmovd  %xmm2,%eax
  0x00007f1a590034c4:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007f1a590034c9:   vmovd  %xmm2,%edx
  0x00007f1a590034cd:   or     %edx,%eax
  0x00007f1a590034cf:   jne    0x00007f1a5900347f
  0x00007f1a590034d1:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a590034d6:   test   $0x8000,%eax
  0x00007f1a590034db:   jne    0x00007f1a59003511
  0x00007f1a590034e1:   test   $0x80000000,%ecx
  0x00007f1a590034e7:   jne    0x00007f1a5900385e
  0x00007f1a590034ed:   jmpq   0x00007f1a59003edd
  0x00007f1a590034f2:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a590034f8:   vmovd  %xmm1,%eax
  0x00007f1a590034fc:   test   $0x1,%al
  0x00007f1a590034fe:   jne    0x00007f1a590035af
  0x00007f1a59003504:   test   $0x2,%al
  0x00007f1a59003506:   jne    0x00007f1a59003581
  0x00007f1a5900350c:   jmpq   0x00007f1a590035af
  0x00007f1a59003511:   shr    $0x14,%ecx
  0x00007f1a59003514:   and    $0x7ff,%ecx
  0x00007f1a5900351a:   cmp    $0x433,%ecx
  0x00007f1a59003520:   ja     0x00007f1a590035af
  0x00007f1a59003526:   je     0x00007f1a590035d8
  0x00007f1a5900352c:   cmp    $0x432,%ecx
  0x00007f1a59003532:   ja     0x00007f1a590034f2
  0x00007f1a59003534:   cmp    $0x3ff,%ecx
  0x00007f1a5900353a:   jb     0x00007f1a590035af
  0x00007f1a59003540:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a59003546:   mov    $0x4338,%eax
  0x00007f1a5900354b:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f1a5900354f:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f1a59003554:   vmovdqu %xmm3,%xmm4
  0x00007f1a59003558:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007f1a5900355c:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f1a59003560:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f1a59003564:   vpextrw $0x3,%xmm1,%eax
  0x00007f1a59003569:   and    $0x7ff0,%eax
  0x00007f1a5900356e:   jne    0x00007f1a590035af
  0x00007f1a59003574:   vmovd  %xmm3,%eax
  0x00007f1a59003578:   and    $0x1,%eax
  0x00007f1a5900357b:   je     0x00007f1a590035af
  0x00007f1a59003581:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a59003587:   vpextrw $0x3,%xmm1,%eax
  0x00007f1a5900358c:   and    $0x8000,%eax
  0x00007f1a59003591:   jne    0x00007f1a5900359c
  0x00007f1a59003597:   jmpq   0x00007f1a59003edd
  0x00007f1a5900359c:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a590035a0:   mov    $0x8000,%eax
  0x00007f1a590035a5:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a590035aa:   jmpq   0x00007f1a59003edd
  0x00007f1a590035af:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a590035b5:   vpextrw $0x3,%xmm1,%eax
  0x00007f1a590035ba:   and    $0x8000,%eax
  0x00007f1a590035bf:   jne    0x00007f1a5900385e
  0x00007f1a590035c5:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a590035c9:   mov    $0x7ff0,%eax
  0x00007f1a590035ce:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a590035d3:   jmpq   0x00007f1a59003edd
  0x00007f1a590035d8:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a590035de:   vmovd  %xmm1,%eax
  0x00007f1a590035e2:   and    $0x1,%eax
  0x00007f1a590035e5:   je     0x00007f1a590035af
  0x00007f1a590035e7:   jmp    0x00007f1a59003581
  0x00007f1a590035e9:   vmovd  %xmm1,%eax
  0x00007f1a590035ed:   vpsrlq $0x14,%xmm1,%xmm1
  0x00007f1a590035f2:   vmovd  %xmm1,%edx
  0x00007f1a590035f6:   or     %edx,%eax
  0x00007f1a590035f8:   je     0x00007f1a5900360d
  0x00007f1a590035fe:   vmovq  0x10(%rsp),%xmm0
  0x00007f1a59003604:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f1a59003608:   jmpq   0x00007f1a59003edd
  0x00007f1a5900360d:   vmovq  0x8(%rsp),%xmm0
  0x00007f1a59003613:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a59003618:   cmp    $0xbff0,%eax
  0x00007f1a5900361d:   jne    0x00007f1a5900364b
  0x00007f1a59003623:   vmovd  %xmm0,%ecx
  0x00007f1a59003627:   vpsrlq $0x14,%xmm0,%xmm0
  0x00007f1a5900362c:   vmovd  %xmm0,%edx
  0x00007f1a59003630:   or     %edx,%ecx
  0x00007f1a59003632:   jne    0x00007f1a5900364b
  0x00007f1a59003638:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a5900363c:   mov    $0x7ff8,%eax
  0x00007f1a59003641:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a59003646:   jmpq   0x00007f1a59003edd
  0x00007f1a5900364b:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a59003651:   and    $0x7ff0,%eax
  0x00007f1a59003656:   sub    $0x3ff0,%eax
  0x00007f1a5900365b:   vpextrw $0x3,%xmm1,%edx
  0x00007f1a59003660:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a59003664:   xor    %edx,%eax
  0x00007f1a59003666:   and    $0x8000,%eax
  0x00007f1a5900366b:   je     0x00007f1a59003676
  0x00007f1a59003671:   jmpq   0x00007f1a59003edd
  0x00007f1a59003676:   mov    $0x7ff0,%ecx
  0x00007f1a5900367b:   vpinsrw $0x3,%ecx,%xmm0,%xmm0
  0x00007f1a59003680:   jmpq   0x00007f1a59003edd
  0x00007f1a59003685:   vmovd  %xmm1,%eax
  0x00007f1a59003689:   cmp    $0x4320,%edx
  0x00007f1a5900368f:   ja     0x00007f1a590036aa
  0x00007f1a59003695:   test   $0x1,%al
  0x00007f1a59003697:   jne    0x00007f1a590037c9
  0x00007f1a5900369d:   test   $0x2,%al
  0x00007f1a5900369f:   je     0x00007f1a590037eb
  0x00007f1a590036a5:   jmpq   0x00007f1a59003769
  0x00007f1a590036aa:   test   $0x1,%al
  0x00007f1a590036ac:   je     0x00007f1a590037eb
  0x00007f1a590036b2:   jmpq   0x00007f1a59003769
  0x00007f1a590036b7:   vmovq  0x8(%rsp),%xmm2
  0x00007f1a590036bd:   vmovd  %xmm2,%eax
  0x00007f1a590036c1:   vpsrlq $0x1f,%xmm2,%xmm2
  0x00007f1a590036c6:   vmovd  %xmm2,%ecx
  0x00007f1a590036ca:   or     %ecx,%eax
  0x00007f1a590036cc:   je     0x00007f1a590038f5
  0x00007f1a590036d2:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a590036d8:   vpextrw $0x3,%xmm1,%edx
  0x00007f1a590036dd:   vmovd  %xmm1,%eax
  0x00007f1a590036e1:   vmovdqu %xmm1,%xmm2
  0x00007f1a590036e5:   vpsrlq $0x20,%xmm2,%xmm2
  0x00007f1a590036ea:   vmovd  %xmm2,%ecx
  0x00007f1a590036ee:   add    %ecx,%ecx
  0x00007f1a590036f0:   or     %eax,%ecx
  0x00007f1a590036f2:   je     0x00007f1a590038c8
  0x00007f1a590036f8:   and    $0x7ff0,%edx
  0x00007f1a590036fe:   cmp    $0x7ff0,%edx
  0x00007f1a59003704:   je     0x00007f1a590035e9
  0x00007f1a5900370a:   cmp    $0x4330,%edx
  0x00007f1a59003710:   ja     0x00007f1a590037eb
  0x00007f1a59003716:   cmp    $0x4320,%edx
  0x00007f1a5900371c:   jae    0x00007f1a59003685
  0x00007f1a59003722:   cmp    $0x3ff0,%edx
  0x00007f1a59003728:   jb     0x00007f1a590037c9
  0x00007f1a5900372e:   mov    $0x4338,%eax
  0x00007f1a59003733:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f1a59003737:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f1a5900373c:   vmovdqu %xmm2,%xmm4
  0x00007f1a59003740:   vaddsd %xmm1,%xmm2,%xmm2
  0x00007f1a59003744:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f1a59003748:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f1a5900374c:   vpextrw $0x3,%xmm1,%eax
  0x00007f1a59003751:   and    $0x7fff,%eax
  0x00007f1a59003756:   jne    0x00007f1a590037c9
  0x00007f1a5900375c:   vmovd  %xmm2,%eax
  0x00007f1a59003760:   and    $0x1,%eax
  0x00007f1a59003763:   je     0x00007f1a590037eb
  0x00007f1a59003769:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a5900376d:   mov    $0x77f0,%edx
  0x00007f1a59003772:   vpinsrw $0x3,%edx,%xmm1,%xmm1
  0x00007f1a59003777:   vmovq  0xb5851c1(%rip),%xmm2        # 0x00007f1a64588940
  0x00007f1a5900377f:   vmovq  0x8(%rsp),%xmm4
  0x00007f1a59003785:   vpextrw $0x3,%xmm4,%eax
  0x00007f1a5900378a:   mov    $0x2000,%edx
  0x00007f1a5900378f:   vmovd  %edx,%xmm4
  0x00007f1a59003793:   and    $0x7fff,%eax
  0x00007f1a59003798:   sub    $0x10,%eax
  0x00007f1a5900379b:   jl     0x00007f1a590031d6
  0x00007f1a590037a1:   mov    %eax,%edx
  0x00007f1a590037a3:   and    $0x7ff0,%edx
  0x00007f1a590037a9:   sub    $0x3ff0,%edx
  0x00007f1a590037af:   mov    %edx,%ecx
  0x00007f1a590037b1:   sar    $0x1f,%edx
  0x00007f1a590037b4:   add    %edx,%ecx
  0x00007f1a590037b6:   xor    %edx,%ecx
  0x00007f1a590037b8:   add    $0x10,%ecx
  0x00007f1a590037bb:   bsr    %ecx,%ecx
  0x00007f1a590037be:   mov    $0x80000000,%r8d
  0x00007f1a590037c4:   jmpq   0x00007f1a59002edc
  0x00007f1a590037c9:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a590037cd:   mov    $0x7ff0,%eax
  0x00007f1a590037d2:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f1a590037d7:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a590037db:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f1a590037df:   movl   $0x1c,(%rsp)
  0x00007f1a590037e6:   jmpq   0x00007f1a59003ed1
  0x00007f1a590037eb:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a590037ef:   mov    $0x77f0,%edx
  0x00007f1a590037f4:   vpinsrw $0x3,%edx,%xmm1,%xmm1
  0x00007f1a590037f9:   vmovq  0xb58513f(%rip),%xmm2        # 0x00007f1a64588940
  0x00007f1a59003801:   vmovq  0x8(%rsp),%xmm4
  0x00007f1a59003807:   vpextrw $0x3,%xmm4,%eax
  0x00007f1a5900380c:   mov    $0x2000,%edx
  0x00007f1a59003811:   vmovd  %edx,%xmm4
  0x00007f1a59003815:   and    $0x7fff,%eax
  0x00007f1a5900381a:   sub    $0x10,%eax
  0x00007f1a5900381d:   jl     0x00007f1a59003106
  0x00007f1a59003823:   mov    %eax,%edx
  0x00007f1a59003825:   and    $0x7ff0,%edx
  0x00007f1a5900382b:   sub    $0x3ff0,%edx
  0x00007f1a59003831:   mov    %edx,%ecx
  0x00007f1a59003833:   sar    $0x1f,%edx
  0x00007f1a59003836:   add    %edx,%ecx
  0x00007f1a59003838:   xor    %edx,%ecx
  0x00007f1a5900383a:   add    $0x10,%ecx
  0x00007f1a5900383d:   bsr    %ecx,%ecx
  0x00007f1a59003840:   mov    $0x0,%r8d
  0x00007f1a59003846:   jmpq   0x00007f1a59002edc
  0x00007f1a5900384b:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a5900384f:   mov    $0x3ff0,%eax
  0x00007f1a59003854:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a59003859:   jmpq   0x00007f1a59003edd
  0x00007f1a5900385e:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a59003862:   jmpq   0x00007f1a59003edd
  0x00007f1a59003867:   add    $0x180,%eax
  0x00007f1a5900386c:   cmp    $0x0,%eax
  0x00007f1a5900386f:   jl     0x00007f1a590038c8
  0x00007f1a59003875:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007f1a59003879:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f1a5900387d:   shr    $0x1f,%r8d
  0x00007f1a59003881:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007f1a59003885:   vpshufd $0xee,%xmm3,%xmm0
  0x00007f1a5900388a:   vaddsd %xmm0,%xmm3,%xmm3
  0x00007f1a5900388e:   movabs $0x7f1a64585850,%r11
  0x00007f1a59003898:   vmovq  (%r11,%r8,8),%xmm4
  0x00007f1a5900389e:   vmulsd %xmm3,%xmm1,%xmm1
  0x00007f1a590038a2:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a590038a6:   mov    $0x3ff0,%eax
  0x00007f1a590038ab:   shl    $0xf,%r8d
  0x00007f1a590038af:   or     %r8d,%eax
  0x00007f1a590038b2:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a590038b7:   vaddsd %xmm1,%xmm5,%xmm5
  0x00007f1a590038bb:   vmulsd %xmm4,%xmm5,%xmm5
  0x00007f1a590038bf:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f1a590038c3:   jmpq   0x00007f1a59003edd
  0x00007f1a590038c8:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a590038cc:   mov    $0x3ff0,%eax
  0x00007f1a590038d1:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a590038d6:   jmpq   0x00007f1a59003edd
  0x00007f1a590038db:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a590038df:   mov    $0x3ff0,%eax
  0x00007f1a590038e4:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a590038e9:   movl   $0x1a,(%rsp)
  0x00007f1a590038f0:   jmpq   0x00007f1a59003ed1
  0x00007f1a590038f5:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a590038fb:   vmovdqu %xmm1,%xmm2
  0x00007f1a590038ff:   vpextrw $0x3,%xmm1,%eax
  0x00007f1a59003904:   and    $0x7ff0,%eax
  0x00007f1a59003909:   cmp    $0x7ff0,%eax
  0x00007f1a5900390e:   jne    0x00007f1a59003929
  0x00007f1a59003914:   vmovd  %xmm2,%eax
  0x00007f1a59003918:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007f1a5900391d:   vmovd  %xmm2,%edx
  0x00007f1a59003921:   or     %edx,%eax
  0x00007f1a59003923:   jne    0x00007f1a5900347f
  0x00007f1a59003929:   vmovd  %xmm1,%eax
  0x00007f1a5900392d:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f1a59003932:   vmovd  %xmm1,%edx
  0x00007f1a59003936:   mov    %edx,%ecx
  0x00007f1a59003938:   add    %edx,%edx
  0x00007f1a5900393a:   or     %edx,%eax
  0x00007f1a5900393c:   je     0x00007f1a590038db
  0x00007f1a5900393e:   shr    $0x15,%edx
  0x00007f1a59003941:   cmp    $0x433,%edx
  0x00007f1a59003947:   ja     0x00007f1a590039c5
  0x00007f1a5900394d:   je     0x00007f1a590039b7
  0x00007f1a59003953:   cmp    $0x3ff,%edx
  0x00007f1a59003959:   jb     0x00007f1a590039c5
  0x00007f1a5900395f:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a59003965:   mov    $0x4338,%eax
  0x00007f1a5900396a:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f1a5900396e:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f1a59003973:   vmovdqu %xmm3,%xmm4
  0x00007f1a59003977:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007f1a5900397b:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f1a5900397f:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f1a59003983:   vpextrw $0x3,%xmm1,%eax
  0x00007f1a59003988:   and    $0x7ff0,%eax
  0x00007f1a5900398d:   jne    0x00007f1a590039c5
  0x00007f1a59003993:   vmovd  %xmm3,%eax
  0x00007f1a59003997:   and    $0x1,%eax
  0x00007f1a5900399a:   je     0x00007f1a590039c5
  0x00007f1a590039a0:   vmovq  0x8(%rsp),%xmm0
  0x00007f1a590039a6:   test   $0x80000000,%ecx
  0x00007f1a590039ac:   jne    0x00007f1a590039d5
  0x00007f1a590039b2:   jmpq   0x00007f1a59003edd
  0x00007f1a590039b7:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a590039bd:   vmovd  %xmm1,%eax
  0x00007f1a590039c1:   test   $0x1,%al
  0x00007f1a590039c3:   jne    0x00007f1a590039a0
  0x00007f1a590039c5:   test   $0x80000000,%ecx
  0x00007f1a590039cb:   je     0x00007f1a5900385e
  0x00007f1a590039d1:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a590039d5:   mov    $0x3ff0,%eax
  0x00007f1a590039da:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a590039de:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f1a590039e3:   vdivsd %xmm0,%xmm1,%xmm1
  0x00007f1a590039e7:   vmovdqu %xmm1,%xmm0
  0x00007f1a590039eb:   movl   $0x1b,(%rsp)
  0x00007f1a590039f2:   jmpq   0x00007f1a59003ed1
  0x00007f1a590039f7:   vmovq  0x8(%rsp),%xmm2
  0x00007f1a590039fd:   vmovq  0x10(%rsp),%xmm6
  0x00007f1a59003a03:   vpextrw $0x3,%xmm2,%eax
  0x00007f1a59003a08:   vpextrw $0x3,%xmm6,%edx
  0x00007f1a59003a0d:   mov    $0x7ff0,%ecx
  0x00007f1a59003a12:   and    %edx,%ecx
  0x00007f1a59003a14:   cmp    $0x7ff0,%ecx
  0x00007f1a59003a1a:   je     0x00007f1a59003e17
  0x00007f1a59003a20:   and    $0x7ff0,%eax
  0x00007f1a59003a25:   sub    $0x3ff0,%eax
  0x00007f1a59003a2a:   xor    %eax,%edx
  0x00007f1a59003a2c:   test   $0x8000,%edx
  0x00007f1a59003a32:   jne    0x00007f1a59003a5e
  0x00007f1a59003a38:   mov    $0x7fe0,%eax
  0x00007f1a59003a3d:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a59003a42:   shr    $0x10,%r8d
  0x00007f1a59003a46:   or     %r8d,%eax
  0x00007f1a59003a49:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f1a59003a4e:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f1a59003a52:   movl   $0x18,(%rsp)
  0x00007f1a59003a59:   jmpq   0x00007f1a59003ed1
  0x00007f1a59003a5e:   mov    $0x10,%eax
  0x00007f1a59003a63:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a59003a68:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f1a59003a6c:   test   $0x80000000,%r8d
  0x00007f1a59003a73:   je     0x00007f1a59003a8c
  0x00007f1a59003a79:   movabs $0x8000000000000000,%r9
  0x00007f1a59003a83:   vmovq  %r9,%xmm2
  0x00007f1a59003a88:   vxorpd %xmm2,%xmm0,%xmm0
  0x00007f1a59003a8c:   movl   $0x19,(%rsp)
  0x00007f1a59003a93:   jmpq   0x00007f1a59003ed1
  0x00007f1a59003a98:   vpextrw $0x3,%xmm5,%ecx
  0x00007f1a59003a9d:   vpextrw $0x3,%xmm4,%edx
  0x00007f1a59003aa2:   mov    $0xffffffff,%eax
  0x00007f1a59003aa7:   and    $0x7ff0,%ecx
  0x00007f1a59003aad:   sub    $0x3ff0,%ecx
  0x00007f1a59003ab3:   and    $0x7ff0,%edx
  0x00007f1a59003ab9:   add    %ecx,%edx
  0x00007f1a59003abb:   mov    $0xffffffe1,%ecx
  0x00007f1a59003ac0:   sar    $0x4,%edx
  0x00007f1a59003ac3:   sub    %edx,%ecx
  0x00007f1a59003ac5:   jle    0x00007f1a59003ad6
  0x00007f1a59003acb:   cmp    $0x14,%ecx
  0x00007f1a59003ace:   ja     0x00007f1a59003af8
  0x00007f1a59003ad4:   shl    %cl,%eax
  0x00007f1a59003ad6:   vmovd  %eax,%xmm0
  0x00007f1a59003ada:   (bad)  
  0x00007f1a59003ade:   lock and %al,%ch
  0x00007f1a59003ae1:   stc    
  0x00007f1a59003ae2:   fcmovnb %st(5),%st
  0x00007f1a59003ae4:   vsubsd %xmm0,%xmm5,%xmm5
  0x00007f1a59003ae8:   vaddsd %xmm1,%xmm5,%xmm5
  0x00007f1a59003aec:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f1a59003af0:   vmulsd %xmm4,%xmm5,%xmm5
  0x00007f1a59003af4:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f1a59003af8:   jmp    0x00007f1a59003a8c
  0x00007f1a59003afa:   mov    0x16(%rsp),%cx
  0x00007f1a59003aff:   mov    $0x80000000,%edx
  0x00007f1a59003b04:   vmovd  %edx,%xmm1
  0x00007f1a59003b08:   vxorpd %xmm7,%xmm7,%xmm7
  0x00007f1a59003b0c:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f1a59003b10:   vmovd  %xmm0,%edx
  0x00007f1a59003b14:   (bad)  
  0x00007f1a59003b18:   lock sbb $0xcbd4f1c5,%eax
  0x00007f1a59003b1e:   vpand  %xmm1,%xmm5,%xmm5
  0x00007f1a59003b22:   and    $0x7ff0,%ecx
  0x00007f1a59003b28:   cmp    $0x40b0,%ecx
  0x00007f1a59003b2e:   jl     0x00007f1a59002f17
  0x00007f1a59003b34:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f1a59003b38:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f1a59003b3c:   add    $0x3fdf,%eax
  0x00007f1a59003b41:   shr    $0x4,%eax
  0x00007f1a59003b44:   sub    $0x3fe,%eax
  0x00007f1a59003b49:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f1a59003b4d:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a59003b51:   movabs $0x7f1a64585860,%r11
  0x00007f1a59003b5b:   vmovq  0xb583d8d(%rip),%xmm4        # 0x00007f1a645878f0
  0x00007f1a59003b63:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007f1a59003b67:   vmovq  0xb583d81(%rip),%xmm6        # 0x00007f1a645878f0
  0x00007f1a59003b6f:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007f1a59003b73:   vmovq  0xb583d7d(%rip),%xmm1        # 0x00007f1a645878f8
  0x00007f1a59003b7b:   vpshufd $0x44,%xmm3,%xmm2
  0x00007f1a59003b80:   vunpcklpd %xmm3,%xmm5,%xmm5
  0x00007f1a59003b84:   vaddsd %xmm5,%xmm3,%xmm3
  0x00007f1a59003b88:   vmovq  0xb583d68(%rip),%xmm0        # 0x00007f1a645878f8
  0x00007f1a59003b90:   and    $0xffc000,%edx
  0x00007f1a59003b96:   shr    $0xa,%edx
  0x00007f1a59003b99:   vaddpd -0xe40(%r11,%rdx,1),%xmm7,%xmm7
  0x00007f1a59003ba3:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007f1a59003ba7:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007f1a59003bab:   vmulsd %xmm2,%xmm6,%xmm6
  0x00007f1a59003baf:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f1a59003bb3:   vmovdqu %xmm5,%xmm2
  0x00007f1a59003bb7:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007f1a59003bbb:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f1a59003bbf:   vmovdqu %xmm7,%xmm0
  0x00007f1a59003bc3:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f1a59003bc7:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007f1a59003bcb:   vmulsd %xmm2,%xmm6,%xmm6
  0x00007f1a59003bcf:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007f1a59003bd3:   vmovdqu %xmm7,%xmm2
  0x00007f1a59003bd7:   vaddsd %xmm4,%xmm7,%xmm7
  0x00007f1a59003bdb:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f1a59003bdf:   vsubsd %xmm7,%xmm2,%xmm2
  0x00007f1a59003be3:   vaddsd %xmm2,%xmm4,%xmm4
  0x00007f1a59003be7:   vpshufd $0xee,%xmm5,%xmm2
  0x00007f1a59003bec:   vmovdqu %xmm7,%xmm5
  0x00007f1a59003bf0:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007f1a59003bf4:   vaddsd %xmm0,%xmm4,%xmm4
  0x00007f1a59003bf8:   vmovdqu 0xb583c70(%rip),%xmm0        # 0x00007f1a64587870
  0x00007f1a59003c00:   vsubsd %xmm7,%xmm5,%xmm5
  0x00007f1a59003c04:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f1a59003c08:   vmovdqu %xmm7,%xmm4
  0x00007f1a59003c0c:   vaddsd %xmm2,%xmm5,%xmm5
  0x00007f1a59003c10:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007f1a59003c14:   vmovdqu 0xb583c94(%rip),%xmm2        # 0x00007f1a645878b0
  0x00007f1a59003c1c:   vsubsd %xmm7,%xmm4,%xmm4
  0x00007f1a59003c20:   vaddsd %xmm5,%xmm6,%xmm6
  0x00007f1a59003c24:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007f1a59003c28:   vpshufd $0xee,%xmm7,%xmm5
  0x00007f1a59003c2d:   vmovapd %xmm7,%xmm1
  0x00007f1a59003c31:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007f1a59003c35:   vsubsd %xmm7,%xmm1,%xmm1
  0x00007f1a59003c39:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f1a59003c3d:   vmovdqu 0xb583c7b(%rip),%xmm5        # 0x00007f1a645878c0
  0x00007f1a59003c45:   vpshufd $0x44,%xmm3,%xmm3
  0x00007f1a59003c4a:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f1a59003c4e:   vaddsd %xmm1,%xmm6,%xmm6
  0x00007f1a59003c52:   vmovdqu 0xb583c36(%rip),%xmm1        # 0x00007f1a64587890
  0x00007f1a59003c5a:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f1a59003c5e:   vmulpd %xmm3,%xmm2,%xmm2
  0x00007f1a59003c62:   vpshufd $0x44,%xmm3,%xmm4
  0x00007f1a59003c67:   vmulpd %xmm3,%xmm3,%xmm3
  0x00007f1a59003c6b:   vaddpd %xmm1,%xmm0,%xmm0
  0x00007f1a59003c6f:   vaddpd %xmm2,%xmm5,%xmm5
  0x00007f1a59003c73:   vmulsd %xmm3,%xmm4,%xmm4
  0x00007f1a59003c77:   vmovq  0xb583c61(%rip),%xmm2        # 0x00007f1a645878e0
  0x00007f1a59003c7f:   vmulpd %xmm3,%xmm3,%xmm3
  0x00007f1a59003c83:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a59003c89:   mov    0x16(%rsp),%cx
  0x00007f1a59003c8e:   vmulpd %xmm4,%xmm0,%xmm0
  0x00007f1a59003c92:   vpextrw $0x3,%xmm7,%eax
  0x00007f1a59003c97:   vmulpd %xmm4,%xmm5,%xmm5
  0x00007f1a59003c9b:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f1a59003c9f:   vmovq  0xb584c91(%rip),%xmm4        # 0x00007f1a64588938
  0x00007f1a59003ca7:   vpand  %xmm7,%xmm2,%xmm2
  0x00007f1a59003cab:   vaddsd %xmm6,%xmm5,%xmm5
  0x00007f1a59003caf:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f1a59003cb3:   vaddpd %xmm0,%xmm5,%xmm5
  0x00007f1a59003cb7:   and    $0x7ff0,%eax
  0x00007f1a59003cbc:   sub    $0x3ff0,%eax
  0x00007f1a59003cc1:   and    $0x7ff0,%ecx
  0x00007f1a59003cc7:   cmp    $0x7ff0,%ecx
  0x00007f1a59003ccd:   je     0x00007f1a59003e17
  0x00007f1a59003cd3:   add    %eax,%ecx
  0x00007f1a59003cd5:   cmp    $0x40c0,%ecx
  0x00007f1a59003cdb:   jae    0x00007f1a59003e7c
  0x00007f1a59003ce1:   vpshufd $0xee,%xmm5,%xmm0
  0x00007f1a59003ce6:   vpand  %xmm1,%xmm4,%xmm4
  0x00007f1a59003cea:   vmovdqu %xmm1,%xmm3
  0x00007f1a59003cee:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f1a59003cf2:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007f1a59003cf6:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f1a59003cfa:   mov    $0x42b8,%edx
  0x00007f1a59003cff:   vpinsrw $0x3,%edx,%xmm6,%xmm6
  0x00007f1a59003d04:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007f1a59003d08:   vmulsd %xmm2,%xmm4,%xmm4
  0x00007f1a59003d0c:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f1a59003d10:   vmovdqu %xmm6,%xmm5
  0x00007f1a59003d14:   vmulsd %xmm7,%xmm3,%xmm3
  0x00007f1a59003d18:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f1a59003d1c:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f1a59003d20:   vmovdqu 0xb583bd8(%rip),%xmm7        # 0x00007f1a64587900
  0x00007f1a59003d28:   vmovd  %xmm6,%edx
  0x00007f1a59003d2c:   vsubsd %xmm5,%xmm6,%xmm6
  0x00007f1a59003d30:   movabs $0x7f1a64587930,%r11
  0x00007f1a59003d3a:   vmovdqu 0xb583bce(%rip),%xmm3        # 0x00007f1a64587910
  0x00007f1a59003d42:   vmovq  0xb583bd6(%rip),%xmm2        # 0x00007f1a64587920
  0x00007f1a59003d4a:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007f1a59003d4e:   mov    %edx,%ecx
  0x00007f1a59003d50:   and    $0xff,%edx
  0x00007f1a59003d56:   add    %edx,%edx
  0x00007f1a59003d58:   vmovdqu (%r11,%rdx,8),%xmm5
  0x00007f1a59003d5e:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007f1a59003d62:   vpextrw $0x3,%xmm6,%edx
  0x00007f1a59003d67:   shr    $0x8,%ecx
  0x00007f1a59003d6a:   mov    %ecx,%eax
  0x00007f1a59003d6c:   shr    %ecx
  0x00007f1a59003d6e:   sub    %ecx,%eax
  0x00007f1a59003d70:   shl    $0x14,%ecx
  0x00007f1a59003d73:   vmovd  %ecx,%xmm6
  0x00007f1a59003d77:   vpshufd $0x44,%xmm4,%xmm0
  0x00007f1a59003d7c:   vpshufd $0x44,%xmm4,%xmm1
  0x00007f1a59003d81:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f1a59003d85:   vmulpd %xmm1,%xmm7,%xmm7
  0x00007f1a59003d89:   vpshufd $0x11,%xmm6,%xmm6
  0x00007f1a59003d8e:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f1a59003d92:   and    $0x7fff,%edx
  0x00007f1a59003d98:   cmp    $0x4091,%edx
  0x00007f1a59003d9e:   ja     0x00007f1a590039f7
  0x00007f1a59003da4:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f1a59003da8:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007f1a59003dac:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007f1a59003db0:   vmulsd %xmm5,%xmm2,%xmm2
  0x00007f1a59003db4:   vpshufd $0xee,%xmm5,%xmm6
  0x00007f1a59003db9:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f1a59003dbd:   vaddsd %xmm6,%xmm2,%xmm2
  0x00007f1a59003dc1:   vpshufd $0xee,%xmm0,%xmm3
  0x00007f1a59003dc6:   add    $0x3ff,%eax
  0x00007f1a59003dcb:   shl    $0x14,%eax
  0x00007f1a59003dce:   or     %r8d,%eax
  0x00007f1a59003dd1:   vmovd  %eax,%xmm4
  0x00007f1a59003dd5:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007f1a59003dd9:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f1a59003ddd:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007f1a59003de1:   (bad)  
  0x00007f1a59003de5:   hlt    
  0x00007f1a59003de6:   and    %al,%ch
  0x00007f1a59003de8:   sti    
  0x00007f1a59003de9:   pop    %rax
  0x00007f1a59003dea:   retq   
  0x00007f1a59003deb:   vmovdqu %xmm0,%xmm1
  0x00007f1a59003def:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f1a59003df3:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f1a59003df7:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a59003dfc:   and    $0x7ff0,%eax
  0x00007f1a59003e01:   je     0x00007f1a59003a98
  0x00007f1a59003e07:   cmp    $0x7ff0,%eax
  0x00007f1a59003e0c:   je     0x00007f1a59003a52
  0x00007f1a59003e12:   jmpq   0x00007f1a59003edd
  0x00007f1a59003e17:   vmovq  0x8(%rsp),%xmm0
  0x00007f1a59003e1d:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f1a59003e21:   mov    $0xbff0,%eax
  0x00007f1a59003e26:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f1a59003e2b:   vaddsd %xmm0,%xmm2,%xmm2
  0x00007f1a59003e2f:   vpextrw $0x3,%xmm2,%eax
  0x00007f1a59003e34:   cmp    $0x0,%eax
  0x00007f1a59003e37:   jne    0x00007f1a59003e50
  0x00007f1a59003e3d:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a59003e41:   mov    $0x7ff8,%eax
  0x00007f1a59003e46:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a59003e4b:   jmpq   0x00007f1a59003edd
  0x00007f1a59003e50:   vmovq  0x10(%rsp),%xmm1
  0x00007f1a59003e56:   vmovd  %xmm1,%edx
  0x00007f1a59003e5a:   vmovdqu %xmm1,%xmm3
  0x00007f1a59003e5e:   vpsrlq $0x14,%xmm3,%xmm3
  0x00007f1a59003e63:   vmovd  %xmm3,%ecx
  0x00007f1a59003e67:   or     %edx,%ecx
  0x00007f1a59003e69:   je     0x00007f1a59003e98
  0x00007f1a59003e6f:   vaddsd %xmm1,%xmm1,%xmm1
  0x00007f1a59003e73:   vmovdqu %xmm1,%xmm0
  0x00007f1a59003e77:   jmpq   0x00007f1a59003edd
  0x00007f1a59003e7c:   vpextrw $0x3,%xmm1,%eax
  0x00007f1a59003e81:   vpextrw $0x3,%xmm2,%ecx
  0x00007f1a59003e86:   xor    %ecx,%eax
  0x00007f1a59003e88:   test   $0x8000,%eax
  0x00007f1a59003e8d:   je     0x00007f1a59003a38
  0x00007f1a59003e93:   jmpq   0x00007f1a59003a5e
  0x00007f1a59003e98:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a59003e9d:   and    $0x7ff0,%eax
  0x00007f1a59003ea2:   vpextrw $0x3,%xmm1,%edx
  0x00007f1a59003ea7:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a59003eab:   sub    $0x3ff0,%eax
  0x00007f1a59003eb0:   xor    %edx,%eax
  0x00007f1a59003eb2:   test   $0x8000,%eax
  0x00007f1a59003eb7:   je     0x00007f1a59003ec2
  0x00007f1a59003ebd:   jmpq   0x00007f1a59003edd
  0x00007f1a59003ec2:   mov    $0x7ff0,%edx
  0x00007f1a59003ec7:   vpinsrw $0x3,%edx,%xmm0,%xmm0
  0x00007f1a59003ecc:   jmpq   0x00007f1a59003edd
  0x00007f1a59003ed1:   vmovq  %xmm0,0x18(%rsp)
  0x00007f1a59003ed7:   vmovq  0x18(%rsp),%xmm0
  0x00007f1a59003edd:   add    $0x28,%rsp
  0x00007f1a59003ee1:   leaveq 
  0x00007f1a59003ee2:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmLog [0x00007f1a59003ee3, 0x00007f1a59004157] (628 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59003ee3:   push   %rbp
  0x00007f1a59003ee4:   mov    %rsp,%rbp
  0x00007f1a59003ee7:   sub    $0x18,%rsp
  0x00007f1a59003eeb:   vmovsd %xmm0,(%rsp)
  0x00007f1a59003ef0:   movabs $0x3ff0000000000000,%rax
  0x00007f1a59003efa:   vmovq  %rax,%xmm2
  0x00007f1a59003eff:   movabs $0x77f0000000000000,%rdx
  0x00007f1a59003f09:   vmovq  %rdx,%xmm3
  0x00007f1a59003f0e:   mov    $0x8000,%ecx
  0x00007f1a59003f13:   vmovd  %ecx,%xmm4
  0x00007f1a59003f17:   movabs $0xffffe00000000000,%r11
  0x00007f1a59003f21:   vmovq  %r11,%xmm5
  0x00007f1a59003f26:   vmovdqu %xmm0,%xmm1
  0x00007f1a59003f2a:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a59003f2f:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f1a59003f33:   mov    $0x3fe0,%ecx
  0x00007f1a59003f38:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f1a59003f3d:   movabs $0x7f1a64584f40,%r8
  0x00007f1a59003f47:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f1a59003f4c:   vrcpps %xmm0,%xmm0
  0x00007f1a59003f50:   (bad)  
  0x00007f1a59003f54:   icebp  
  0x00007f1a59003f55:   or     $0xc5,%al
  0x00007f1a59003f57:   stc    
  0x00007f1a59003f58:   jo     0x00007f1a59003f4f
  0x00007f1a59003f5a:   in     $0xc5,%al
  0x00007f1a59003f5c:   icebp  
  0x00007f1a59003f5d:   jae    0x00007f1a59003f30
  0x00007f1a59003f5f:   or     $0x83,%al
  0x00007f1a59003f61:   callq  0x00007f1ad8e07c76
  0x00007f1a59003f66:   add    %al,(%rax)
  0x00007f1a59003f68:   jae    0x00007f1a59004041
  0x00007f1a59003f6e:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f1a59003f72:   vpor   %xmm3,%xmm1,%xmm1
  0x00007f1a59003f76:   vmovd  %xmm0,%edx
  0x00007f1a59003f7a:   (bad)  
  0x00007f1a59003f7e:   lock sbb $0xe9dbd1c5,%eax
  0x00007f1a59003f84:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f1a59003f88:   vsubsd %xmm5,%xmm1,%xmm1
  0x00007f1a59003f8c:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a59003f90:   and    $0x7ff0,%eax
  0x00007f1a59003f95:   sub    %ecx,%eax
  0x00007f1a59003f97:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f1a59003f9b:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f1a59003f9f:   vmovq  0xb580f89(%rip),%xmm6        # 0x00007f1a64584f30
  0x00007f1a59003fa7:   vmovdqu 0xb580f51(%rip),%xmm3        # 0x00007f1a64584f00
  0x00007f1a59003faf:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007f1a59003fb3:   and    $0xff0000,%edx
  0x00007f1a59003fb9:   shr    $0xc,%edx
  0x00007f1a59003fbc:   vmovdqu (%r8,%rdx,1),%xmm0
  0x00007f1a59003fc2:   vmovdqu 0xb580f46(%rip),%xmm4        # 0x00007f1a64584f10
  0x00007f1a59003fca:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f1a59003fce:   vmovdqu 0xb580f4a(%rip),%xmm2        # 0x00007f1a64584f20
  0x00007f1a59003fd6:   vmulsd %xmm7,%xmm6,%xmm6
  0x00007f1a59003fda:   vmovddup %xmm1,%xmm5
  0x00007f1a59003fde:   vmulsd 0xb580f52(%rip),%xmm7,%xmm7        # 0x00007f1a64584f38
  0x00007f1a59003fe6:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f1a59003fea:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f1a59003fee:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007f1a59003ff2:   vmulpd %xmm5,%xmm5,%xmm5
  0x00007f1a59003ff6:   vmovddup %xmm0,%xmm6
  0x00007f1a59003ffa:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f1a59003ffe:   vaddpd %xmm2,%xmm4,%xmm4
  0x00007f1a59004002:   vmulpd %xmm5,%xmm3,%xmm3
  0x00007f1a59004006:   vsubsd %xmm0,%xmm6,%xmm6
  0x00007f1a5900400a:   vmulsd %xmm1,%xmm4,%xmm4
  0x00007f1a5900400e:   vpshufd $0xee,%xmm0,%xmm2
  0x00007f1a59004013:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f1a59004017:   vmulsd %xmm5,%xmm5,%xmm5
  0x00007f1a5900401b:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007f1a5900401f:   vaddpd %xmm3,%xmm4,%xmm4
  0x00007f1a59004023:   vaddsd %xmm7,%xmm1,%xmm1
  0x00007f1a59004027:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007f1a5900402b:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f1a5900402f:   vpshufd $0xee,%xmm4,%xmm5
  0x00007f1a59004034:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f1a59004038:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f1a5900403c:   jmpq   0x00007f1a59004151
  0x00007f1a59004041:   vmovq  (%rsp),%xmm0
  0x00007f1a59004046:   vmovq  (%rsp),%xmm1
  0x00007f1a5900404b:   add    $0x10,%eax
  0x00007f1a5900404e:   cmp    $0x8000,%eax
  0x00007f1a59004053:   jae    0x00007f1a590040de
  0x00007f1a59004059:   cmp    $0x10,%eax
  0x00007f1a5900405c:   jb     0x00007f1a59004077
  0x00007f1a59004062:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f1a59004066:   jmpq   0x00007f1a59004151
  0x00007f1a5900406b:   ja     0x00007f1a59004062
  0x00007f1a5900406d:   cmp    $0x0,%edx
  0x00007f1a59004070:   ja     0x00007f1a59004062
  0x00007f1a59004072:   jmpq   0x00007f1a59004104
  0x00007f1a59004077:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a5900407b:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007f1a5900407f:   vmovd  %xmm1,%edx
  0x00007f1a59004083:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f1a59004088:   vmovd  %xmm1,%ecx
  0x00007f1a5900408c:   or     %ecx,%edx
  0x00007f1a5900408e:   cmp    $0x0,%edx
  0x00007f1a59004091:   je     0x00007f1a59004127
  0x00007f1a59004097:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a5900409b:   mov    $0x47f0,%eax
  0x00007f1a590040a0:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f1a590040a5:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f1a590040a9:   vmovdqu %xmm0,%xmm1
  0x00007f1a590040ad:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a590040b2:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f1a590040b6:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f1a590040bb:   mov    $0x47f0,%ecx
  0x00007f1a590040c0:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f1a590040c5:   vrcpps %xmm0,%xmm0
  0x00007f1a590040c9:   (bad)  
  0x00007f1a590040cd:   icebp  
  0x00007f1a590040ce:   or     $0xc5,%al
  0x00007f1a590040d0:   stc    
  0x00007f1a590040d1:   jo     0x00007f1a590040c8
  0x00007f1a590040d3:   in     $0xc5,%al
  0x00007f1a590040d5:   icebp  
  0x00007f1a590040d6:   jae    0x00007f1a590040a9
  0x00007f1a590040d8:   or     $0xe9,%al
  0x00007f1a590040da:   nop
  0x00007f1a590040db:   (bad)  
  0x00007f1a590040dc:   (bad)  
  0x00007f1a590040dd:   inc    %ebp
  0x00007f1a590040df:   stc    
  0x00007f1a590040e0:   jle    0x00007f1a590040ac
  0x00007f1a590040e2:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f1a590040e7:   vmovd  %xmm1,%ecx
  0x00007f1a590040eb:   add    %ecx,%ecx
  0x00007f1a590040ed:   cmp    $0xffe00000,%ecx
  0x00007f1a590040f3:   jae    0x00007f1a5900406b
  0x00007f1a590040f9:   or     %ecx,%edx
  0x00007f1a590040fb:   cmp    $0x0,%edx
  0x00007f1a590040fe:   je     0x00007f1a59004127
  0x00007f1a59004104:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a59004108:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a5900410c:   mov    $0x7ff0,%eax
  0x00007f1a59004111:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f1a59004116:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f1a5900411a:   movl   $0x3,0x10(%rsp)
  0x00007f1a59004122:   jmpq   0x00007f1a59004145
  0x00007f1a59004127:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a5900412b:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a5900412f:   mov    $0xbff0,%eax
  0x00007f1a59004134:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a59004139:   vdivsd %xmm1,%xmm0,%xmm0
  0x00007f1a5900413d:   movl   $0x2,0x10(%rsp)
  0x00007f1a59004145:   vmovq  %xmm0,0x8(%rsp)
  0x00007f1a5900414b:   vmovq  0x8(%rsp),%xmm0
  0x00007f1a59004151:   add    $0x18,%rsp
  0x00007f1a59004155:   leaveq 
  0x00007f1a59004156:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmLog10 [0x00007f1a59004157, 0x00007f1a59004403] (684 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59004157:   push   %rbp
  0x00007f1a59004158:   mov    %rsp,%rbp
  0x00007f1a5900415b:   sub    $0x18,%rsp
  0x00007f1a5900415f:   vmovsd %xmm0,(%rsp)
  0x00007f1a59004164:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f1a59004168:   mov    $0x3ff0,%eax
  0x00007f1a5900416d:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f1a59004172:   mov    $0x3ede0000,%ecx
  0x00007f1a59004177:   vmovd  %ecx,%xmm7
  0x00007f1a5900417b:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f1a5900417f:   mov    $0x77f0,%edx
  0x00007f1a59004184:   vpinsrw $0x3,%edx,%xmm3,%xmm3
  0x00007f1a59004189:   vmovdqu %xmm0,%xmm1
  0x00007f1a5900418d:   mov    $0x8000,%edx
  0x00007f1a59004192:   vmovd  %edx,%xmm4
  0x00007f1a59004196:   vmovdqu 0xb580d52(%rip),%xmm5        # 0x00007f1a64584ef0
  0x00007f1a5900419e:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a590041a3:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f1a590041a7:   mov    $0x3fe0,%ecx
  0x00007f1a590041ac:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f1a590041b1:   vmovdqu 0xb580d27(%rip),%xmm2        # 0x00007f1a64584ee0
  0x00007f1a590041b9:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f1a590041be:   vrcpps %xmm0,%xmm0
  0x00007f1a590041c2:   (bad)  
  0x00007f1a590041c6:   icebp  
  0x00007f1a590041c7:   or     $0xc5,%al
  0x00007f1a590041c9:   stc    
  0x00007f1a590041ca:   jo     0x00007f1a590041c1
  0x00007f1a590041cc:   rex.WRX vpsrlq $0xc,%xmm1,%xmm1
  0x00007f1a590041d2:   sub    $0x10,%eax
  0x00007f1a590041d5:   cmp    $0x7fe0,%eax
  0x00007f1a590041da:   jae    0x00007f1a590042d7
  0x00007f1a590041e0:   vmulss %xmm7,%xmm0,%xmm0
  0x00007f1a590041e4:   vpor   %xmm3,%xmm1,%xmm1
  0x00007f1a590041e8:   movabs $0x7f1a645846d0,%r11
  0x00007f1a590041f2:   vandpd %xmm1,%xmm5,%xmm5
  0x00007f1a590041f6:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f1a590041fa:   vsubsd %xmm5,%xmm1,%xmm1
  0x00007f1a590041fe:   vmovd  %xmm0,%edx
  0x00007f1a59004202:   (bad)  
  0x00007f1a59004206:   lock sbb $0xc654f9c5,%eax
  0x00007f1a5900420c:   and    $0x7ff0,%eax
  0x00007f1a59004211:   sub    %ecx,%eax
  0x00007f1a59004213:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f1a59004217:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f1a5900421b:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f1a5900421f:   vmovq  0xb580499(%rip),%xmm6        # 0x00007f1a645846c0
  0x00007f1a59004227:   vmovdqu 0xb580461(%rip),%xmm3        # 0x00007f1a64584690
  0x00007f1a5900422f:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007f1a59004233:   and    $0xff0000,%edx
  0x00007f1a59004239:   shr    $0xc,%edx
  0x00007f1a5900423c:   vmovdqu -0x5e0(%r11,%rdx,1),%xmm0
  0x00007f1a59004246:   vmovdqu 0xb580452(%rip),%xmm4        # 0x00007f1a645846a0
  0x00007f1a5900424e:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f1a59004252:   vmovdqu 0xb580456(%rip),%xmm2        # 0x00007f1a645846b0
  0x00007f1a5900425a:   vmulsd %xmm7,%xmm6,%xmm6
  0x00007f1a5900425e:   vpshufd $0x44,%xmm1,%xmm5
  0x00007f1a59004263:   vmulsd 0xb58045d(%rip),%xmm7,%xmm7        # 0x00007f1a645846c8
  0x00007f1a5900426b:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f1a5900426f:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f1a59004273:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007f1a59004277:   vmovq  0xb580c69(%rip),%xmm6        # 0x00007f1a64584ee8
  0x00007f1a5900427f:   vmulpd %xmm5,%xmm5,%xmm5
  0x00007f1a59004283:   vaddpd %xmm2,%xmm4,%xmm4
  0x00007f1a59004287:   vmulpd %xmm5,%xmm3,%xmm3
  0x00007f1a5900428b:   vpshufd $0xe4,%xmm0,%xmm2
  0x00007f1a59004290:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f1a59004294:   vmulsd %xmm1,%xmm4,%xmm4
  0x00007f1a59004298:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007f1a5900429c:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007f1a590042a0:   vaddsd %xmm2,%xmm1,%xmm1
  0x00007f1a590042a4:   vpshufd $0xee,%xmm0,%xmm2
  0x00007f1a590042a9:   vmulsd %xmm5,%xmm5,%xmm5
  0x00007f1a590042ad:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007f1a590042b1:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f1a590042b5:   vaddpd %xmm3,%xmm4,%xmm4
  0x00007f1a590042b9:   vaddsd %xmm7,%xmm1,%xmm1
  0x00007f1a590042bd:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007f1a590042c1:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f1a590042c5:   vpshufd $0xee,%xmm4,%xmm5
  0x00007f1a590042ca:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f1a590042ce:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f1a590042d2:   jmpq   0x00007f1a590043fd
  0x00007f1a590042d7:   vmovq  (%rsp),%xmm0
  0x00007f1a590042dc:   vmovq  (%rsp),%xmm1
  0x00007f1a590042e1:   add    $0x10,%eax
  0x00007f1a590042e4:   cmp    $0x8000,%eax
  0x00007f1a590042e9:   jae    0x00007f1a5900438a
  0x00007f1a590042ef:   cmp    $0x10,%eax
  0x00007f1a590042f2:   jb     0x00007f1a5900430d
  0x00007f1a590042f8:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f1a590042fc:   jmpq   0x00007f1a590043fd
  0x00007f1a59004301:   ja     0x00007f1a590042f8
  0x00007f1a59004303:   cmp    $0x0,%edx
  0x00007f1a59004306:   ja     0x00007f1a590042f8
  0x00007f1a59004308:   jmpq   0x00007f1a590043b0
  0x00007f1a5900430d:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a59004311:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007f1a59004315:   vmovd  %xmm1,%edx
  0x00007f1a59004319:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f1a5900431e:   vmovd  %xmm1,%ecx
  0x00007f1a59004322:   or     %ecx,%edx
  0x00007f1a59004324:   cmp    $0x0,%edx
  0x00007f1a59004327:   je     0x00007f1a590043d3
  0x00007f1a5900432d:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a59004331:   mov    $0x47f0,%eax
  0x00007f1a59004336:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f1a5900433b:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f1a5900433f:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f1a59004343:   mov    $0x3ff0,%eax
  0x00007f1a59004348:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f1a5900434d:   vmovdqu %xmm0,%xmm1
  0x00007f1a59004351:   vpextrw $0x3,%xmm0,%eax
  0x00007f1a59004356:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f1a5900435a:   mov    $0x47f0,%ecx
  0x00007f1a5900435f:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f1a59004364:   vmovdqu 0xb580b74(%rip),%xmm2        # 0x00007f1a64584ee0
  0x00007f1a5900436c:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f1a59004371:   vrcpps %xmm0,%xmm0
  0x00007f1a59004375:   (bad)  
  0x00007f1a59004379:   icebp  
  0x00007f1a5900437a:   or     $0xc5,%al
  0x00007f1a5900437c:   stc    
  0x00007f1a5900437d:   jo     0x00007f1a59004374
  0x00007f1a5900437f:   rex.WRX vpsrlq $0xc,%xmm1,%xmm1
  0x00007f1a59004385:   jmpq   0x00007f1a590041e0
  0x00007f1a5900438a:   vmovd  %xmm1,%edx
  0x00007f1a5900438e:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f1a59004393:   vmovd  %xmm1,%ecx
  0x00007f1a59004397:   add    %ecx,%ecx
  0x00007f1a59004399:   cmp    $0xffe00000,%ecx
  0x00007f1a5900439f:   jae    0x00007f1a59004301
  0x00007f1a590043a5:   or     %ecx,%edx
  0x00007f1a590043a7:   cmp    $0x0,%edx
  0x00007f1a590043aa:   je     0x00007f1a590043d3
  0x00007f1a590043b0:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a590043b4:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a590043b8:   mov    $0x7ff0,%eax
  0x00007f1a590043bd:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f1a590043c2:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f1a590043c6:   movl   $0x9,0x10(%rsp)
  0x00007f1a590043ce:   jmpq   0x00007f1a590043f1
  0x00007f1a590043d3:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f1a590043d7:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f1a590043db:   mov    $0xbff0,%eax
  0x00007f1a590043e0:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f1a590043e5:   vdivsd %xmm1,%xmm0,%xmm0
  0x00007f1a590043e9:   movl   $0x8,0x10(%rsp)
  0x00007f1a590043f1:   vmovq  %xmm0,0x8(%rsp)
  0x00007f1a590043f7:   vmovq  0x8(%rsp),%xmm0
  0x00007f1a590043fd:   add    $0x18,%rsp
  0x00007f1a59004401:   leaveq 
  0x00007f1a59004402:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::getCPUIDNameInfo_stub [0x00007f1a59008300, 0x00007f1a590083df] (223 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59008300:   push   %rbp
  0x00007f1a59008301:   mov    %rdi,%rbp
  0x00007f1a59008304:   push   %rbx
  0x00007f1a59008305:   push   %rsi
  0x00007f1a59008306:   pushfq 
  0x00007f1a59008307:   pop    %rax
  0x00007f1a59008308:   push   %rax
  0x00007f1a59008309:   mov    %rax,%rcx
  0x00007f1a5900830c:   xor    $0x40000,%eax
  0x00007f1a59008311:   push   %rax
  0x00007f1a59008312:   popfq  
  0x00007f1a59008313:   pushfq 
  0x00007f1a59008314:   pop    %rax
  0x00007f1a59008315:   cmp    %rcx,%rax
  0x00007f1a59008318:   jne    0x00007f1a59008324
  0x00007f1a5900831a:   mov    $0x300,%eax
  0x00007f1a5900831f:   jmpq   0x00007f1a590083da
  0x00007f1a59008324:   mov    %rcx,%rax
  0x00007f1a59008327:   xor    $0x200000,%eax
  0x00007f1a5900832c:   push   %rax
  0x00007f1a5900832d:   popfq  
  0x00007f1a5900832e:   pushfq 
  0x00007f1a5900832f:   pop    %rax
  0x00007f1a59008330:   cmp    %rax,%rcx
  0x00007f1a59008333:   jne    0x00007f1a5900833f
  0x00007f1a59008335:   mov    $0x400,%eax
  0x00007f1a5900833a:   jmpq   0x00007f1a590083da
  0x00007f1a5900833f:   xor    %eax,%eax
  0x00007f1a59008341:   cpuid  
  0x00007f1a59008343:   or     %eax,%eax
  0x00007f1a59008345:   je     0x00007f1a59008335
  0x00007f1a59008347:   mov    $0x80000000,%eax
  0x00007f1a5900834c:   cpuid  
  0x00007f1a5900834e:   cmp    $0x80000004,%eax
  0x00007f1a59008353:   jb     0x00007f1a590083da
  0x00007f1a59008359:   mov    $0x80000002,%eax
  0x00007f1a5900835e:   cpuid  
  0x00007f1a59008360:   lea    0x90(%rbp),%rsi
  0x00007f1a59008367:   mov    %eax,(%rsi)
  0x00007f1a59008369:   lea    0x94(%rbp),%rsi
  0x00007f1a59008370:   mov    %ebx,(%rsi)
  0x00007f1a59008372:   lea    0x98(%rbp),%rsi
  0x00007f1a59008379:   mov    %ecx,(%rsi)
  0x00007f1a5900837b:   lea    0x9c(%rbp),%rsi
  0x00007f1a59008382:   mov    %edx,(%rsi)
  0x00007f1a59008384:   mov    $0x80000003,%eax
  0x00007f1a59008389:   cpuid  
  0x00007f1a5900838b:   lea    0xa0(%rbp),%rsi
  0x00007f1a59008392:   mov    %eax,(%rsi)
  0x00007f1a59008394:   lea    0xa4(%rbp),%rsi
  0x00007f1a5900839b:   mov    %ebx,(%rsi)
  0x00007f1a5900839d:   lea    0xa8(%rbp),%rsi
  0x00007f1a590083a4:   mov    %ecx,(%rsi)
  0x00007f1a590083a6:   lea    0xac(%rbp),%rsi
  0x00007f1a590083ad:   mov    %edx,(%rsi)
  0x00007f1a590083af:   mov    $0x80000004,%eax
  0x00007f1a590083b4:   cpuid  
  0x00007f1a590083b6:   lea    0xb0(%rbp),%rsi
  0x00007f1a590083bd:   mov    %eax,(%rsi)
  0x00007f1a590083bf:   lea    0xb4(%rbp),%rsi
  0x00007f1a590083c6:   mov    %ebx,(%rsi)
  0x00007f1a590083c8:   lea    0xb8(%rbp),%rsi
  0x00007f1a590083cf:   mov    %ecx,(%rsi)
  0x00007f1a590083d1:   lea    0xbc(%rbp),%rsi
  0x00007f1a590083d8:   mov    %edx,(%rsi)
  0x00007f1a590083da:   popfq  
  0x00007f1a590083db:   pop    %rsi
  0x00007f1a590083dc:   pop    %rbx
  0x00007f1a590083dd:   pop    %rbp
  0x00007f1a590083de:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - jfr_write_checkpoint 0x00007f1a5901cc10
--------------------------------------------------------------------------------
  0x00007f1a5901cc80:   push   %rbp
  0x00007f1a5901cc81:   mov    %rsp,%rbp
  0x00007f1a5901cc84:   vzeroupper 
  0x00007f1a5901cc87:   mov    %rbp,0x2d0(%r15)
  0x00007f1a5901cc8e:   movabs $0x7f1a5901cc84,%r10
  0x00007f1a5901cc98:   mov    %r10,0x2c8(%r15)
  0x00007f1a5901cc9f:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5901cca6:   mov    %r15,%rdi
  0x00007f1a5901cca9:   test   $0xf,%spl
  0x00007f1a5901ccad:   je     0x00007f1a5901ccc5
  0x00007f1a5901ccb3:   sub    $0x8,%rsp
  0x00007f1a5901ccb7:   callq  0x00007f1a63aaf420 = JfrIntrinsicSupport::write_checkpoint(JavaThread*)
  0x00007f1a5901ccbc:   add    $0x8,%rsp
  0x00007f1a5901ccc0:   jmpq   0x00007f1a5901ccca
  0x00007f1a5901ccc5:   callq  0x00007f1a63aaf420 = JfrIntrinsicSupport::write_checkpoint(JavaThread*)
  0x00007f1a5901ccca:   movq   $0x0,0x2c0(%r15)
  0x00007f1a5901ccd5:   movq   $0x0,0x2d0(%r15)
  0x00007f1a5901cce0:   movq   $0x0,0x2c8(%r15)
  0x00007f1a5901cceb:   vzeroupper 
  0x00007f1a5901ccee:   test   %rax,%rax
  0x00007f1a5901ccf1:   je     0x00007f1a5901ccfb
  0x00007f1a5901ccf7:   mov    -0x2(%rax),%rax
  0x00007f1a5901ccfb:   leaveq 
  0x00007f1a5901ccfc:   retq   
  0x00007f1a5901ccfd:   hlt    
  0x00007f1a5901ccfe:   hlt    
  0x00007f1a5901ccff:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 4 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - wrong_method_stub 0x00007f1a5901c690
--------------------------------------------------------------------------------
  0x00007f1a5901c700:   push   %rbp
  0x00007f1a5901c701:   mov    %rsp,%rbp
  0x00007f1a5901c704:   pushfq 
  0x00007f1a5901c705:   sub    $0x8,%rsp
  0x00007f1a5901c709:   sub    $0x80,%rsp
  0x00007f1a5901c710:   mov    %rax,0x78(%rsp)
  0x00007f1a5901c715:   mov    %rcx,0x70(%rsp)
  0x00007f1a5901c71a:   mov    %rdx,0x68(%rsp)
  0x00007f1a5901c71f:   mov    %rbx,0x60(%rsp)
  0x00007f1a5901c724:   mov    %rbp,0x50(%rsp)
  0x00007f1a5901c729:   mov    %rsi,0x48(%rsp)
  0x00007f1a5901c72e:   mov    %rdi,0x40(%rsp)
  0x00007f1a5901c733:   mov    %r8,0x38(%rsp)
  0x00007f1a5901c738:   mov    %r9,0x30(%rsp)
  0x00007f1a5901c73d:   mov    %r10,0x28(%rsp)
  0x00007f1a5901c742:   mov    %r11,0x20(%rsp)
  0x00007f1a5901c747:   mov    %r12,0x18(%rsp)
  0x00007f1a5901c74c:   mov    %r13,0x10(%rsp)
  0x00007f1a5901c751:   mov    %r14,0x8(%rsp)
  0x00007f1a5901c756:   mov    %r15,(%rsp)
  0x00007f1a5901c75a:   sub    $0xa80,%rsp
  0x00007f1a5901c761:   fxsave64 (%rsp)
  0x00007f1a5901c766:   vzeroupper 
  0x00007f1a5901c769:   vzeroupper 
  0x00007f1a5901c76c:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5901c773:   mov    %r15,%rdi
  0x00007f1a5901c776:   callq  0x00007f1a63f0db00 = SharedRuntime::handle_wrong_method(JavaThread*)
  0x00007f1a5901c77b:   movq   $0x0,0x2c0(%r15)
  0x00007f1a5901c786:   movq   $0x0,0x2c8(%r15)
  0x00007f1a5901c791:   vzeroupper 
  0x00007f1a5901c794:   cmpq   $0x0,0x8(%r15)
  0x00007f1a5901c799:   jne    0x00007f1a5901c829
  0x00007f1a5901c79f:   mov    0x320(%r15),%rbx
  0x00007f1a5901c7a6:   movq   $0x0,0x320(%r15)
  0x00007f1a5901c7b1:   mov    %rbx,0xae0(%rsp)
  0x00007f1a5901c7b9:   mov    %rax,0xaf8(%rsp)
  0x00007f1a5901c7c1:   vzeroupper 
  0x00007f1a5901c7c4:   fxrstor64 (%rsp)
  0x00007f1a5901c7c9:   add    $0xa80,%rsp
  0x00007f1a5901c7d0:   mov    (%rsp),%r15
  0x00007f1a5901c7d4:   mov    0x8(%rsp),%r14
  0x00007f1a5901c7d9:   mov    0x10(%rsp),%r13
  0x00007f1a5901c7de:   mov    0x18(%rsp),%r12
  0x00007f1a5901c7e3:   mov    0x20(%rsp),%r11
  0x00007f1a5901c7e8:   mov    0x28(%rsp),%r10
  0x00007f1a5901c7ed:   mov    0x30(%rsp),%r9
  0x00007f1a5901c7f2:   mov    0x38(%rsp),%r8
  0x00007f1a5901c7f7:   mov    0x40(%rsp),%rdi
  0x00007f1a5901c7fc:   mov    0x48(%rsp),%rsi
  0x00007f1a5901c801:   mov    0x50(%rsp),%rbp
  0x00007f1a5901c806:   mov    0x60(%rsp),%rbx
  0x00007f1a5901c80b:   mov    0x68(%rsp),%rdx
  0x00007f1a5901c810:   mov    0x70(%rsp),%rcx
  0x00007f1a5901c815:   mov    0x78(%rsp),%rax
  0x00007f1a5901c81a:   add    $0x80,%rsp
  0x00007f1a5901c821:   add    $0x8,%rsp
  0x00007f1a5901c825:   popfq  
  0x00007f1a5901c826:   pop    %rbp
  0x00007f1a5901c827:   jmpq   *%rax
  0x00007f1a5901c829:   vzeroupper 
  0x00007f1a5901c82c:   fxrstor64 (%rsp)
  0x00007f1a5901c831:   add    $0xa80,%rsp
  0x00007f1a5901c838:   mov    (%rsp),%r15
  0x00007f1a5901c83c:   mov    0x8(%rsp),%r14
  0x00007f1a5901c841:   mov    0x10(%rsp),%r13
  0x00007f1a5901c846:   mov    0x18(%rsp),%r12
  0x00007f1a5901c84b:   mov    0x20(%rsp),%r11
  0x00007f1a5901c850:   mov    0x28(%rsp),%r10
  0x00007f1a5901c855:   mov    0x30(%rsp),%r9
  0x00007f1a5901c85a:   mov    0x38(%rsp),%r8
  0x00007f1a5901c85f:   mov    0x40(%rsp),%rdi
  0x00007f1a5901c864:   mov    0x48(%rsp),%rsi
  0x00007f1a5901c869:   mov    0x50(%rsp),%rbp
  0x00007f1a5901c86e:   mov    0x60(%rsp),%rbx
  0x00007f1a5901c873:   mov    0x68(%rsp),%rdx
  0x00007f1a5901c878:   mov    0x70(%rsp),%rcx
  0x00007f1a5901c87d:   mov    0x78(%rsp),%rax
  0x00007f1a5901c882:   add    $0x80,%rsp
  0x00007f1a5901c889:   add    $0x8,%rsp
  0x00007f1a5901c88d:   popfq  
  0x00007f1a5901c88e:   pop    %rbp
  0x00007f1a5901c88f:   movq   $0x0,0x318(%r15)
  0x00007f1a5901c89a:   mov    0x8(%r15),%rax
  0x00007f1a5901c89e:   jmpq   0x00007f1a59000c00
  0x00007f1a5901c8a3:   hlt    
  0x00007f1a5901c8a4:   hlt    
  0x00007f1a5901c8a5:   hlt    
  0x00007f1a5901c8a6:   hlt    
  0x00007f1a5901c8a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - wrong_method_abstract_stub 0x00007f1a59063190
--------------------------------------------------------------------------------
  0x00007f1a59063200:   push   %rbp
  0x00007f1a59063201:   mov    %rsp,%rbp
  0x00007f1a59063204:   pushfq 
  0x00007f1a59063205:   sub    $0x8,%rsp
  0x00007f1a59063209:   sub    $0x80,%rsp
  0x00007f1a59063210:   mov    %rax,0x78(%rsp)
  0x00007f1a59063215:   mov    %rcx,0x70(%rsp)
  0x00007f1a5906321a:   mov    %rdx,0x68(%rsp)
  0x00007f1a5906321f:   mov    %rbx,0x60(%rsp)
  0x00007f1a59063224:   mov    %rbp,0x50(%rsp)
  0x00007f1a59063229:   mov    %rsi,0x48(%rsp)
  0x00007f1a5906322e:   mov    %rdi,0x40(%rsp)
  0x00007f1a59063233:   mov    %r8,0x38(%rsp)
  0x00007f1a59063238:   mov    %r9,0x30(%rsp)
  0x00007f1a5906323d:   mov    %r10,0x28(%rsp)
  0x00007f1a59063242:   mov    %r11,0x20(%rsp)
  0x00007f1a59063247:   mov    %r12,0x18(%rsp)
  0x00007f1a5906324c:   mov    %r13,0x10(%rsp)
  0x00007f1a59063251:   mov    %r14,0x8(%rsp)
  0x00007f1a59063256:   mov    %r15,(%rsp)
  0x00007f1a5906325a:   sub    $0xa80,%rsp
  0x00007f1a59063261:   fxsave64 (%rsp)
  0x00007f1a59063266:   vzeroupper 
  0x00007f1a59063269:   vzeroupper 
  0x00007f1a5906326c:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59063273:   mov    %r15,%rdi
  0x00007f1a59063276:   callq  0x00007f1a63f0c6e0 = SharedRuntime::handle_wrong_method_abstract(JavaThread*)
  0x00007f1a5906327b:   movq   $0x0,0x2c0(%r15)
  0x00007f1a59063286:   movq   $0x0,0x2c8(%r15)
  0x00007f1a59063291:   vzeroupper 
  0x00007f1a59063294:   cmpq   $0x0,0x8(%r15)
  0x00007f1a59063299:   jne    0x00007f1a59063329
  0x00007f1a5906329f:   mov    0x320(%r15),%rbx
  0x00007f1a590632a6:   movq   $0x0,0x320(%r15)
  0x00007f1a590632b1:   mov    %rbx,0xae0(%rsp)
  0x00007f1a590632b9:   mov    %rax,0xaf8(%rsp)
  0x00007f1a590632c1:   vzeroupper 
  0x00007f1a590632c4:   fxrstor64 (%rsp)
  0x00007f1a590632c9:   add    $0xa80,%rsp
  0x00007f1a590632d0:   mov    (%rsp),%r15
  0x00007f1a590632d4:   mov    0x8(%rsp),%r14
  0x00007f1a590632d9:   mov    0x10(%rsp),%r13
  0x00007f1a590632de:   mov    0x18(%rsp),%r12
  0x00007f1a590632e3:   mov    0x20(%rsp),%r11
  0x00007f1a590632e8:   mov    0x28(%rsp),%r10
  0x00007f1a590632ed:   mov    0x30(%rsp),%r9
  0x00007f1a590632f2:   mov    0x38(%rsp),%r8
  0x00007f1a590632f7:   mov    0x40(%rsp),%rdi
  0x00007f1a590632fc:   mov    0x48(%rsp),%rsi
  0x00007f1a59063301:   mov    0x50(%rsp),%rbp
  0x00007f1a59063306:   mov    0x60(%rsp),%rbx
  0x00007f1a5906330b:   mov    0x68(%rsp),%rdx
  0x00007f1a59063310:   mov    0x70(%rsp),%rcx
  0x00007f1a59063315:   mov    0x78(%rsp),%rax
  0x00007f1a5906331a:   add    $0x80,%rsp
  0x00007f1a59063321:   add    $0x8,%rsp
  0x00007f1a59063325:   popfq  
  0x00007f1a59063326:   pop    %rbp
  0x00007f1a59063327:   jmpq   *%rax
  0x00007f1a59063329:   vzeroupper 
  0x00007f1a5906332c:   fxrstor64 (%rsp)
  0x00007f1a59063331:   add    $0xa80,%rsp
  0x00007f1a59063338:   mov    (%rsp),%r15
  0x00007f1a5906333c:   mov    0x8(%rsp),%r14
  0x00007f1a59063341:   mov    0x10(%rsp),%r13
  0x00007f1a59063346:   mov    0x18(%rsp),%r12
  0x00007f1a5906334b:   mov    0x20(%rsp),%r11
  0x00007f1a59063350:   mov    0x28(%rsp),%r10
  0x00007f1a59063355:   mov    0x30(%rsp),%r9
  0x00007f1a5906335a:   mov    0x38(%rsp),%r8
  0x00007f1a5906335f:   mov    0x40(%rsp),%rdi
  0x00007f1a59063364:   mov    0x48(%rsp),%rsi
  0x00007f1a59063369:   mov    0x50(%rsp),%rbp
  0x00007f1a5906336e:   mov    0x60(%rsp),%rbx
  0x00007f1a59063373:   mov    0x68(%rsp),%rdx
  0x00007f1a59063378:   mov    0x70(%rsp),%rcx
  0x00007f1a5906337d:   mov    0x78(%rsp),%rax
  0x00007f1a59063382:   add    $0x80,%rsp
  0x00007f1a59063389:   add    $0x8,%rsp
  0x00007f1a5906338d:   popfq  
  0x00007f1a5906338e:   pop    %rbp
  0x00007f1a5906338f:   movq   $0x0,0x318(%r15)
  0x00007f1a5906339a:   mov    0x8(%r15),%rax
  0x00007f1a5906339e:   jmpq   0x00007f1a59000c00
  0x00007f1a590633a3:   hlt    
  0x00007f1a590633a4:   hlt    
  0x00007f1a590633a5:   hlt    
  0x00007f1a590633a6:   hlt    
  0x00007f1a590633a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - ic_miss_stub 0x00007f1a59063490
--------------------------------------------------------------------------------
  0x00007f1a59063500:   push   %rbp
  0x00007f1a59063501:   mov    %rsp,%rbp
  0x00007f1a59063504:   pushfq 
  0x00007f1a59063505:   sub    $0x8,%rsp
  0x00007f1a59063509:   sub    $0x80,%rsp
  0x00007f1a59063510:   mov    %rax,0x78(%rsp)
  0x00007f1a59063515:   mov    %rcx,0x70(%rsp)
  0x00007f1a5906351a:   mov    %rdx,0x68(%rsp)
  0x00007f1a5906351f:   mov    %rbx,0x60(%rsp)
  0x00007f1a59063524:   mov    %rbp,0x50(%rsp)
  0x00007f1a59063529:   mov    %rsi,0x48(%rsp)
  0x00007f1a5906352e:   mov    %rdi,0x40(%rsp)
  0x00007f1a59063533:   mov    %r8,0x38(%rsp)
  0x00007f1a59063538:   mov    %r9,0x30(%rsp)
  0x00007f1a5906353d:   mov    %r10,0x28(%rsp)
  0x00007f1a59063542:   mov    %r11,0x20(%rsp)
  0x00007f1a59063547:   mov    %r12,0x18(%rsp)
  0x00007f1a5906354c:   mov    %r13,0x10(%rsp)
  0x00007f1a59063551:   mov    %r14,0x8(%rsp)
  0x00007f1a59063556:   mov    %r15,(%rsp)
  0x00007f1a5906355a:   sub    $0xa80,%rsp
  0x00007f1a59063561:   fxsave64 (%rsp)
  0x00007f1a59063566:   vzeroupper 
  0x00007f1a59063569:   vzeroupper 
  0x00007f1a5906356c:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59063573:   mov    %r15,%rdi
  0x00007f1a59063576:   callq  0x00007f1a63f0f9a0 = SharedRuntime::handle_wrong_method_ic_miss(JavaThread*)
  0x00007f1a5906357b:   movq   $0x0,0x2c0(%r15)
  0x00007f1a59063586:   movq   $0x0,0x2c8(%r15)
  0x00007f1a59063591:   vzeroupper 
  0x00007f1a59063594:   cmpq   $0x0,0x8(%r15)
  0x00007f1a59063599:   jne    0x00007f1a59063629
  0x00007f1a5906359f:   mov    0x320(%r15),%rbx
  0x00007f1a590635a6:   movq   $0x0,0x320(%r15)
  0x00007f1a590635b1:   mov    %rbx,0xae0(%rsp)
  0x00007f1a590635b9:   mov    %rax,0xaf8(%rsp)
  0x00007f1a590635c1:   vzeroupper 
  0x00007f1a590635c4:   fxrstor64 (%rsp)
  0x00007f1a590635c9:   add    $0xa80,%rsp
  0x00007f1a590635d0:   mov    (%rsp),%r15
  0x00007f1a590635d4:   mov    0x8(%rsp),%r14
  0x00007f1a590635d9:   mov    0x10(%rsp),%r13
  0x00007f1a590635de:   mov    0x18(%rsp),%r12
  0x00007f1a590635e3:   mov    0x20(%rsp),%r11
  0x00007f1a590635e8:   mov    0x28(%rsp),%r10
  0x00007f1a590635ed:   mov    0x30(%rsp),%r9
  0x00007f1a590635f2:   mov    0x38(%rsp),%r8
  0x00007f1a590635f7:   mov    0x40(%rsp),%rdi
  0x00007f1a590635fc:   mov    0x48(%rsp),%rsi
  0x00007f1a59063601:   mov    0x50(%rsp),%rbp
  0x00007f1a59063606:   mov    0x60(%rsp),%rbx
  0x00007f1a5906360b:   mov    0x68(%rsp),%rdx
  0x00007f1a59063610:   mov    0x70(%rsp),%rcx
  0x00007f1a59063615:   mov    0x78(%rsp),%rax
  0x00007f1a5906361a:   add    $0x80,%rsp
  0x00007f1a59063621:   add    $0x8,%rsp
  0x00007f1a59063625:   popfq  
  0x00007f1a59063626:   pop    %rbp
  0x00007f1a59063627:   jmpq   *%rax
  0x00007f1a59063629:   vzeroupper 
  0x00007f1a5906362c:   fxrstor64 (%rsp)
  0x00007f1a59063631:   add    $0xa80,%rsp
  0x00007f1a59063638:   mov    (%rsp),%r15
  0x00007f1a5906363c:   mov    0x8(%rsp),%r14
  0x00007f1a59063641:   mov    0x10(%rsp),%r13
  0x00007f1a59063646:   mov    0x18(%rsp),%r12
  0x00007f1a5906364b:   mov    0x20(%rsp),%r11
  0x00007f1a59063650:   mov    0x28(%rsp),%r10
  0x00007f1a59063655:   mov    0x30(%rsp),%r9
  0x00007f1a5906365a:   mov    0x38(%rsp),%r8
  0x00007f1a5906365f:   mov    0x40(%rsp),%rdi
  0x00007f1a59063664:   mov    0x48(%rsp),%rsi
  0x00007f1a59063669:   mov    0x50(%rsp),%rbp
  0x00007f1a5906366e:   mov    0x60(%rsp),%rbx
  0x00007f1a59063673:   mov    0x68(%rsp),%rdx
  0x00007f1a59063678:   mov    0x70(%rsp),%rcx
  0x00007f1a5906367d:   mov    0x78(%rsp),%rax
  0x00007f1a59063682:   add    $0x80,%rsp
  0x00007f1a59063689:   add    $0x8,%rsp
  0x00007f1a5906368d:   popfq  
  0x00007f1a5906368e:   pop    %rbp
  0x00007f1a5906368f:   movq   $0x0,0x318(%r15)
  0x00007f1a5906369a:   mov    0x8(%r15),%rax
  0x00007f1a5906369e:   jmpq   0x00007f1a59000c00
  0x00007f1a590636a3:   hlt    
  0x00007f1a590636a4:   hlt    
  0x00007f1a590636a5:   hlt    
  0x00007f1a590636a6:   hlt    
  0x00007f1a590636a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_opt_virtual_call 0x00007f1a59063790
--------------------------------------------------------------------------------
  0x00007f1a59063800:   push   %rbp
  0x00007f1a59063801:   mov    %rsp,%rbp
  0x00007f1a59063804:   pushfq 
  0x00007f1a59063805:   sub    $0x8,%rsp
  0x00007f1a59063809:   sub    $0x80,%rsp
  0x00007f1a59063810:   mov    %rax,0x78(%rsp)
  0x00007f1a59063815:   mov    %rcx,0x70(%rsp)
  0x00007f1a5906381a:   mov    %rdx,0x68(%rsp)
  0x00007f1a5906381f:   mov    %rbx,0x60(%rsp)
  0x00007f1a59063824:   mov    %rbp,0x50(%rsp)
  0x00007f1a59063829:   mov    %rsi,0x48(%rsp)
  0x00007f1a5906382e:   mov    %rdi,0x40(%rsp)
  0x00007f1a59063833:   mov    %r8,0x38(%rsp)
  0x00007f1a59063838:   mov    %r9,0x30(%rsp)
  0x00007f1a5906383d:   mov    %r10,0x28(%rsp)
  0x00007f1a59063842:   mov    %r11,0x20(%rsp)
  0x00007f1a59063847:   mov    %r12,0x18(%rsp)
  0x00007f1a5906384c:   mov    %r13,0x10(%rsp)
  0x00007f1a59063851:   mov    %r14,0x8(%rsp)
  0x00007f1a59063856:   mov    %r15,(%rsp)
  0x00007f1a5906385a:   sub    $0xa80,%rsp
  0x00007f1a59063861:   fxsave64 (%rsp)
  0x00007f1a59063866:   vzeroupper 
  0x00007f1a59063869:   vzeroupper 
  0x00007f1a5906386c:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59063873:   mov    %r15,%rdi
  0x00007f1a59063876:   callq  0x00007f1a63f0e730 = SharedRuntime::resolve_opt_virtual_call_C(JavaThread*)
  0x00007f1a5906387b:   movq   $0x0,0x2c0(%r15)
  0x00007f1a59063886:   movq   $0x0,0x2c8(%r15)
  0x00007f1a59063891:   vzeroupper 
  0x00007f1a59063894:   cmpq   $0x0,0x8(%r15)
  0x00007f1a59063899:   jne    0x00007f1a59063929
  0x00007f1a5906389f:   mov    0x320(%r15),%rbx
  0x00007f1a590638a6:   movq   $0x0,0x320(%r15)
  0x00007f1a590638b1:   mov    %rbx,0xae0(%rsp)
  0x00007f1a590638b9:   mov    %rax,0xaf8(%rsp)
  0x00007f1a590638c1:   vzeroupper 
  0x00007f1a590638c4:   fxrstor64 (%rsp)
  0x00007f1a590638c9:   add    $0xa80,%rsp
  0x00007f1a590638d0:   mov    (%rsp),%r15
  0x00007f1a590638d4:   mov    0x8(%rsp),%r14
  0x00007f1a590638d9:   mov    0x10(%rsp),%r13
  0x00007f1a590638de:   mov    0x18(%rsp),%r12
  0x00007f1a590638e3:   mov    0x20(%rsp),%r11
  0x00007f1a590638e8:   mov    0x28(%rsp),%r10
  0x00007f1a590638ed:   mov    0x30(%rsp),%r9
  0x00007f1a590638f2:   mov    0x38(%rsp),%r8
  0x00007f1a590638f7:   mov    0x40(%rsp),%rdi
  0x00007f1a590638fc:   mov    0x48(%rsp),%rsi
  0x00007f1a59063901:   mov    0x50(%rsp),%rbp
  0x00007f1a59063906:   mov    0x60(%rsp),%rbx
  0x00007f1a5906390b:   mov    0x68(%rsp),%rdx
  0x00007f1a59063910:   mov    0x70(%rsp),%rcx
  0x00007f1a59063915:   mov    0x78(%rsp),%rax
  0x00007f1a5906391a:   add    $0x80,%rsp
  0x00007f1a59063921:   add    $0x8,%rsp
  0x00007f1a59063925:   popfq  
  0x00007f1a59063926:   pop    %rbp
  0x00007f1a59063927:   jmpq   *%rax
  0x00007f1a59063929:   vzeroupper 
  0x00007f1a5906392c:   fxrstor64 (%rsp)
  0x00007f1a59063931:   add    $0xa80,%rsp
  0x00007f1a59063938:   mov    (%rsp),%r15
  0x00007f1a5906393c:   mov    0x8(%rsp),%r14
  0x00007f1a59063941:   mov    0x10(%rsp),%r13
  0x00007f1a59063946:   mov    0x18(%rsp),%r12
  0x00007f1a5906394b:   mov    0x20(%rsp),%r11
  0x00007f1a59063950:   mov    0x28(%rsp),%r10
  0x00007f1a59063955:   mov    0x30(%rsp),%r9
  0x00007f1a5906395a:   mov    0x38(%rsp),%r8
  0x00007f1a5906395f:   mov    0x40(%rsp),%rdi
  0x00007f1a59063964:   mov    0x48(%rsp),%rsi
  0x00007f1a59063969:   mov    0x50(%rsp),%rbp
  0x00007f1a5906396e:   mov    0x60(%rsp),%rbx
  0x00007f1a59063973:   mov    0x68(%rsp),%rdx
  0x00007f1a59063978:   mov    0x70(%rsp),%rcx
  0x00007f1a5906397d:   mov    0x78(%rsp),%rax
  0x00007f1a59063982:   add    $0x80,%rsp
  0x00007f1a59063989:   add    $0x8,%rsp
  0x00007f1a5906398d:   popfq  
  0x00007f1a5906398e:   pop    %rbp
  0x00007f1a5906398f:   movq   $0x0,0x318(%r15)
  0x00007f1a5906399a:   mov    0x8(%r15),%rax
  0x00007f1a5906399e:   jmpq   0x00007f1a59000c00
  0x00007f1a590639a3:   hlt    
  0x00007f1a590639a4:   hlt    
  0x00007f1a590639a5:   hlt    
  0x00007f1a590639a6:   hlt    
  0x00007f1a590639a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_virtual_call 0x00007f1a59063a90
--------------------------------------------------------------------------------
  0x00007f1a59063b00:   push   %rbp
  0x00007f1a59063b01:   mov    %rsp,%rbp
  0x00007f1a59063b04:   pushfq 
  0x00007f1a59063b05:   sub    $0x8,%rsp
  0x00007f1a59063b09:   sub    $0x80,%rsp
  0x00007f1a59063b10:   mov    %rax,0x78(%rsp)
  0x00007f1a59063b15:   mov    %rcx,0x70(%rsp)
  0x00007f1a59063b1a:   mov    %rdx,0x68(%rsp)
  0x00007f1a59063b1f:   mov    %rbx,0x60(%rsp)
  0x00007f1a59063b24:   mov    %rbp,0x50(%rsp)
  0x00007f1a59063b29:   mov    %rsi,0x48(%rsp)
  0x00007f1a59063b2e:   mov    %rdi,0x40(%rsp)
  0x00007f1a59063b33:   mov    %r8,0x38(%rsp)
  0x00007f1a59063b38:   mov    %r9,0x30(%rsp)
  0x00007f1a59063b3d:   mov    %r10,0x28(%rsp)
  0x00007f1a59063b42:   mov    %r11,0x20(%rsp)
  0x00007f1a59063b47:   mov    %r12,0x18(%rsp)
  0x00007f1a59063b4c:   mov    %r13,0x10(%rsp)
  0x00007f1a59063b51:   mov    %r14,0x8(%rsp)
  0x00007f1a59063b56:   mov    %r15,(%rsp)
  0x00007f1a59063b5a:   sub    $0xa80,%rsp
  0x00007f1a59063b61:   fxsave64 (%rsp)
  0x00007f1a59063b66:   vzeroupper 
  0x00007f1a59063b69:   vzeroupper 
  0x00007f1a59063b6c:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59063b73:   mov    %r15,%rdi
  0x00007f1a59063b76:   callq  0x00007f1a63f0e570 = SharedRuntime::resolve_virtual_call_C(JavaThread*)
  0x00007f1a59063b7b:   movq   $0x0,0x2c0(%r15)
  0x00007f1a59063b86:   movq   $0x0,0x2c8(%r15)
  0x00007f1a59063b91:   vzeroupper 
  0x00007f1a59063b94:   cmpq   $0x0,0x8(%r15)
  0x00007f1a59063b99:   jne    0x00007f1a59063c29
  0x00007f1a59063b9f:   mov    0x320(%r15),%rbx
  0x00007f1a59063ba6:   movq   $0x0,0x320(%r15)
  0x00007f1a59063bb1:   mov    %rbx,0xae0(%rsp)
  0x00007f1a59063bb9:   mov    %rax,0xaf8(%rsp)
  0x00007f1a59063bc1:   vzeroupper 
  0x00007f1a59063bc4:   fxrstor64 (%rsp)
  0x00007f1a59063bc9:   add    $0xa80,%rsp
  0x00007f1a59063bd0:   mov    (%rsp),%r15
  0x00007f1a59063bd4:   mov    0x8(%rsp),%r14
  0x00007f1a59063bd9:   mov    0x10(%rsp),%r13
  0x00007f1a59063bde:   mov    0x18(%rsp),%r12
  0x00007f1a59063be3:   mov    0x20(%rsp),%r11
  0x00007f1a59063be8:   mov    0x28(%rsp),%r10
  0x00007f1a59063bed:   mov    0x30(%rsp),%r9
  0x00007f1a59063bf2:   mov    0x38(%rsp),%r8
  0x00007f1a59063bf7:   mov    0x40(%rsp),%rdi
  0x00007f1a59063bfc:   mov    0x48(%rsp),%rsi
  0x00007f1a59063c01:   mov    0x50(%rsp),%rbp
  0x00007f1a59063c06:   mov    0x60(%rsp),%rbx
  0x00007f1a59063c0b:   mov    0x68(%rsp),%rdx
  0x00007f1a59063c10:   mov    0x70(%rsp),%rcx
  0x00007f1a59063c15:   mov    0x78(%rsp),%rax
  0x00007f1a59063c1a:   add    $0x80,%rsp
  0x00007f1a59063c21:   add    $0x8,%rsp
  0x00007f1a59063c25:   popfq  
  0x00007f1a59063c26:   pop    %rbp
  0x00007f1a59063c27:   jmpq   *%rax
  0x00007f1a59063c29:   vzeroupper 
  0x00007f1a59063c2c:   fxrstor64 (%rsp)
  0x00007f1a59063c31:   add    $0xa80,%rsp
  0x00007f1a59063c38:   mov    (%rsp),%r15
  0x00007f1a59063c3c:   mov    0x8(%rsp),%r14
  0x00007f1a59063c41:   mov    0x10(%rsp),%r13
  0x00007f1a59063c46:   mov    0x18(%rsp),%r12
  0x00007f1a59063c4b:   mov    0x20(%rsp),%r11
  0x00007f1a59063c50:   mov    0x28(%rsp),%r10
  0x00007f1a59063c55:   mov    0x30(%rsp),%r9
  0x00007f1a59063c5a:   mov    0x38(%rsp),%r8
  0x00007f1a59063c5f:   mov    0x40(%rsp),%rdi
  0x00007f1a59063c64:   mov    0x48(%rsp),%rsi
  0x00007f1a59063c69:   mov    0x50(%rsp),%rbp
  0x00007f1a59063c6e:   mov    0x60(%rsp),%rbx
  0x00007f1a59063c73:   mov    0x68(%rsp),%rdx
  0x00007f1a59063c78:   mov    0x70(%rsp),%rcx
  0x00007f1a59063c7d:   mov    0x78(%rsp),%rax
  0x00007f1a59063c82:   add    $0x80,%rsp
  0x00007f1a59063c89:   add    $0x8,%rsp
  0x00007f1a59063c8d:   popfq  
  0x00007f1a59063c8e:   pop    %rbp
  0x00007f1a59063c8f:   movq   $0x0,0x318(%r15)
  0x00007f1a59063c9a:   mov    0x8(%r15),%rax
  0x00007f1a59063c9e:   jmpq   0x00007f1a59000c00
  0x00007f1a59063ca3:   hlt    
  0x00007f1a59063ca4:   hlt    
  0x00007f1a59063ca5:   hlt    
  0x00007f1a59063ca6:   hlt    
  0x00007f1a59063ca7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_static_call 0x00007f1a59063d90
--------------------------------------------------------------------------------
  0x00007f1a59063e00:   push   %rbp
  0x00007f1a59063e01:   mov    %rsp,%rbp
  0x00007f1a59063e04:   pushfq 
  0x00007f1a59063e05:   sub    $0x8,%rsp
  0x00007f1a59063e09:   sub    $0x80,%rsp
  0x00007f1a59063e10:   mov    %rax,0x78(%rsp)
  0x00007f1a59063e15:   mov    %rcx,0x70(%rsp)
  0x00007f1a59063e1a:   mov    %rdx,0x68(%rsp)
  0x00007f1a59063e1f:   mov    %rbx,0x60(%rsp)
  0x00007f1a59063e24:   mov    %rbp,0x50(%rsp)
  0x00007f1a59063e29:   mov    %rsi,0x48(%rsp)
  0x00007f1a59063e2e:   mov    %rdi,0x40(%rsp)
  0x00007f1a59063e33:   mov    %r8,0x38(%rsp)
  0x00007f1a59063e38:   mov    %r9,0x30(%rsp)
  0x00007f1a59063e3d:   mov    %r10,0x28(%rsp)
  0x00007f1a59063e42:   mov    %r11,0x20(%rsp)
  0x00007f1a59063e47:   mov    %r12,0x18(%rsp)
  0x00007f1a59063e4c:   mov    %r13,0x10(%rsp)
  0x00007f1a59063e51:   mov    %r14,0x8(%rsp)
  0x00007f1a59063e56:   mov    %r15,(%rsp)
  0x00007f1a59063e5a:   sub    $0xa80,%rsp
  0x00007f1a59063e61:   fxsave64 (%rsp)
  0x00007f1a59063e66:   vzeroupper 
  0x00007f1a59063e69:   vzeroupper 
  0x00007f1a59063e6c:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59063e73:   mov    %r15,%rdi
  0x00007f1a59063e76:   callq  0x00007f1a63f0e2e0 = SharedRuntime::resolve_static_call_C(JavaThread*)
  0x00007f1a59063e7b:   movq   $0x0,0x2c0(%r15)
  0x00007f1a59063e86:   movq   $0x0,0x2c8(%r15)
  0x00007f1a59063e91:   vzeroupper 
  0x00007f1a59063e94:   cmpq   $0x0,0x8(%r15)
  0x00007f1a59063e99:   jne    0x00007f1a59063f29
  0x00007f1a59063e9f:   mov    0x320(%r15),%rbx
  0x00007f1a59063ea6:   movq   $0x0,0x320(%r15)
  0x00007f1a59063eb1:   mov    %rbx,0xae0(%rsp)
  0x00007f1a59063eb9:   mov    %rax,0xaf8(%rsp)
  0x00007f1a59063ec1:   vzeroupper 
  0x00007f1a59063ec4:   fxrstor64 (%rsp)
  0x00007f1a59063ec9:   add    $0xa80,%rsp
  0x00007f1a59063ed0:   mov    (%rsp),%r15
  0x00007f1a59063ed4:   mov    0x8(%rsp),%r14
  0x00007f1a59063ed9:   mov    0x10(%rsp),%r13
  0x00007f1a59063ede:   mov    0x18(%rsp),%r12
  0x00007f1a59063ee3:   mov    0x20(%rsp),%r11
  0x00007f1a59063ee8:   mov    0x28(%rsp),%r10
  0x00007f1a59063eed:   mov    0x30(%rsp),%r9
  0x00007f1a59063ef2:   mov    0x38(%rsp),%r8
  0x00007f1a59063ef7:   mov    0x40(%rsp),%rdi
  0x00007f1a59063efc:   mov    0x48(%rsp),%rsi
  0x00007f1a59063f01:   mov    0x50(%rsp),%rbp
  0x00007f1a59063f06:   mov    0x60(%rsp),%rbx
  0x00007f1a59063f0b:   mov    0x68(%rsp),%rdx
  0x00007f1a59063f10:   mov    0x70(%rsp),%rcx
  0x00007f1a59063f15:   mov    0x78(%rsp),%rax
  0x00007f1a59063f1a:   add    $0x80,%rsp
  0x00007f1a59063f21:   add    $0x8,%rsp
  0x00007f1a59063f25:   popfq  
  0x00007f1a59063f26:   pop    %rbp
  0x00007f1a59063f27:   jmpq   *%rax
  0x00007f1a59063f29:   vzeroupper 
  0x00007f1a59063f2c:   fxrstor64 (%rsp)
  0x00007f1a59063f31:   add    $0xa80,%rsp
  0x00007f1a59063f38:   mov    (%rsp),%r15
  0x00007f1a59063f3c:   mov    0x8(%rsp),%r14
  0x00007f1a59063f41:   mov    0x10(%rsp),%r13
  0x00007f1a59063f46:   mov    0x18(%rsp),%r12
  0x00007f1a59063f4b:   mov    0x20(%rsp),%r11
  0x00007f1a59063f50:   mov    0x28(%rsp),%r10
  0x00007f1a59063f55:   mov    0x30(%rsp),%r9
  0x00007f1a59063f5a:   mov    0x38(%rsp),%r8
  0x00007f1a59063f5f:   mov    0x40(%rsp),%rdi
  0x00007f1a59063f64:   mov    0x48(%rsp),%rsi
  0x00007f1a59063f69:   mov    0x50(%rsp),%rbp
  0x00007f1a59063f6e:   mov    0x60(%rsp),%rbx
  0x00007f1a59063f73:   mov    0x68(%rsp),%rdx
  0x00007f1a59063f78:   mov    0x70(%rsp),%rcx
  0x00007f1a59063f7d:   mov    0x78(%rsp),%rax
  0x00007f1a59063f82:   add    $0x80,%rsp
  0x00007f1a59063f89:   add    $0x8,%rsp
  0x00007f1a59063f8d:   popfq  
  0x00007f1a59063f8e:   pop    %rbp
  0x00007f1a59063f8f:   movq   $0x0,0x318(%r15)
  0x00007f1a59063f9a:   mov    0x8(%r15),%rax
  0x00007f1a59063f9e:   jmpq   0x00007f1a59000c00
  0x00007f1a59063fa3:   hlt    
  0x00007f1a59063fa4:   hlt    
  0x00007f1a59063fa5:   hlt    
  0x00007f1a59063fa6:   hlt    
  0x00007f1a59063fa7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007f1a59069c90
--------------------------------------------------------------------------------
  0x00007f1a59069d00:   push   %rbx
  0x00007f1a59069d01:   push   %rbp
  0x00007f1a59069d02:   mov    %rsp,%rbp
  0x00007f1a59069d05:   pushfq 
  0x00007f1a59069d06:   sub    $0x8,%rsp
  0x00007f1a59069d0a:   sub    $0x80,%rsp
  0x00007f1a59069d11:   mov    %rax,0x78(%rsp)
  0x00007f1a59069d16:   mov    %rcx,0x70(%rsp)
  0x00007f1a59069d1b:   mov    %rdx,0x68(%rsp)
  0x00007f1a59069d20:   mov    %rbx,0x60(%rsp)
  0x00007f1a59069d25:   mov    %rbp,0x50(%rsp)
  0x00007f1a59069d2a:   mov    %rsi,0x48(%rsp)
  0x00007f1a59069d2f:   mov    %rdi,0x40(%rsp)
  0x00007f1a59069d34:   mov    %r8,0x38(%rsp)
  0x00007f1a59069d39:   mov    %r9,0x30(%rsp)
  0x00007f1a59069d3e:   mov    %r10,0x28(%rsp)
  0x00007f1a59069d43:   mov    %r11,0x20(%rsp)
  0x00007f1a59069d48:   mov    %r12,0x18(%rsp)
  0x00007f1a59069d4d:   mov    %r13,0x10(%rsp)
  0x00007f1a59069d52:   mov    %r14,0x8(%rsp)
  0x00007f1a59069d57:   mov    %r15,(%rsp)
  0x00007f1a59069d5b:   sub    $0xa80,%rsp
  0x00007f1a59069d62:   fxsave64 (%rsp)
  0x00007f1a59069d67:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007f1a59069d72:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007f1a59069d7d:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007f1a59069d88:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007f1a59069d93:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007f1a59069d9e:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007f1a59069da9:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007f1a59069db4:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007f1a59069dbf:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007f1a59069dca:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007f1a59069dd5:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007f1a59069de0:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007f1a59069deb:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007f1a59069df6:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007f1a59069e01:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007f1a59069e0c:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007f1a59069e17:   vzeroupper 
  0x00007f1a59069e1a:   vzeroupper 
  0x00007f1a59069e1d:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59069e24:   mov    0x390(%r15),%rbx
  0x00007f1a59069e2b:   mov    %rbx,0x8(%rbp)
  0x00007f1a59069e2f:   mov    %r15,%rdi
  0x00007f1a59069e32:   callq  0x00007f1a63efb2e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007f1a59069e37:   movq   $0x0,0x2c0(%r15)
  0x00007f1a59069e42:   movq   $0x0,0x2c8(%r15)
  0x00007f1a59069e4d:   vzeroupper 
  0x00007f1a59069e50:   cmpq   $0x0,0x8(%r15)
  0x00007f1a59069e55:   je     0x00007f1a59069f76
  0x00007f1a59069e5b:   vzeroupper 
  0x00007f1a59069e5e:   vinsertf128 $0x1,0x240(%rsp),%ymm0,%ymm0
  0x00007f1a59069e69:   vinsertf128 $0x1,0x250(%rsp),%ymm1,%ymm1
  0x00007f1a59069e74:   vinsertf128 $0x1,0x260(%rsp),%ymm2,%ymm2
  0x00007f1a59069e7f:   vinsertf128 $0x1,0x270(%rsp),%ymm3,%ymm3
  0x00007f1a59069e8a:   vinsertf128 $0x1,0x280(%rsp),%ymm4,%ymm4
  0x00007f1a59069e95:   vinsertf128 $0x1,0x290(%rsp),%ymm5,%ymm5
  0x00007f1a59069ea0:   vinsertf128 $0x1,0x2a0(%rsp),%ymm6,%ymm6
  0x00007f1a59069eab:   vinsertf128 $0x1,0x2b0(%rsp),%ymm7,%ymm7
  0x00007f1a59069eb6:   vinsertf128 $0x1,0x2c0(%rsp),%ymm8,%ymm8
  0x00007f1a59069ec1:   vinsertf128 $0x1,0x2d0(%rsp),%ymm9,%ymm9
  0x00007f1a59069ecc:   vinsertf128 $0x1,0x2e0(%rsp),%ymm10,%ymm10
  0x00007f1a59069ed7:   vinsertf128 $0x1,0x2f0(%rsp),%ymm11,%ymm11
  0x00007f1a59069ee2:   vinsertf128 $0x1,0x300(%rsp),%ymm12,%ymm12
  0x00007f1a59069eed:   vinsertf128 $0x1,0x310(%rsp),%ymm13,%ymm13
  0x00007f1a59069ef8:   vinsertf128 $0x1,0x320(%rsp),%ymm14,%ymm14
  0x00007f1a59069f03:   vinsertf128 $0x1,0x330(%rsp),%ymm15,%ymm15
  0x00007f1a59069f0e:   fxrstor64 (%rsp)
  0x00007f1a59069f13:   add    $0xa80,%rsp
  0x00007f1a59069f1a:   mov    (%rsp),%r15
  0x00007f1a59069f1e:   mov    0x8(%rsp),%r14
  0x00007f1a59069f23:   mov    0x10(%rsp),%r13
  0x00007f1a59069f28:   mov    0x18(%rsp),%r12
  0x00007f1a59069f2d:   mov    0x20(%rsp),%r11
  0x00007f1a59069f32:   mov    0x28(%rsp),%r10
  0x00007f1a59069f37:   mov    0x30(%rsp),%r9
  0x00007f1a59069f3c:   mov    0x38(%rsp),%r8
  0x00007f1a59069f41:   mov    0x40(%rsp),%rdi
  0x00007f1a59069f46:   mov    0x48(%rsp),%rsi
  0x00007f1a59069f4b:   mov    0x50(%rsp),%rbp
  0x00007f1a59069f50:   mov    0x60(%rsp),%rbx
  0x00007f1a59069f55:   mov    0x68(%rsp),%rdx
  0x00007f1a59069f5a:   mov    0x70(%rsp),%rcx
  0x00007f1a59069f5f:   mov    0x78(%rsp),%rax
  0x00007f1a59069f64:   add    $0x80,%rsp
  0x00007f1a59069f6b:   add    $0x8,%rsp
  0x00007f1a59069f6f:   popfq  
  0x00007f1a59069f70:   pop    %rbp
  0x00007f1a59069f71:   jmpq   0x00007f1a59000c00
  0x00007f1a59069f76:   cmp    0x8(%rbp),%rbx
  0x00007f1a59069f7a:   jne    0x00007f1a59069fac
  0x00007f1a59069f7c:   cmpb   $0x41,(%rbx)
  0x00007f1a59069f7f:   jne    0x00007f1a59069f89
  0x00007f1a59069f85:   add    $0x1,%rbx
  0x00007f1a59069f89:   movzbq 0x1(%rbx),%rcx
  0x00007f1a59069f8e:   and    $0x7,%rcx
  0x00007f1a59069f92:   sub    $0x4,%rcx
  0x00007f1a59069f96:   cmp    $0x1,%rcx
  0x00007f1a59069f9a:   ja     0x00007f1a59069fa4
  0x00007f1a59069fa0:   add    $0x1,%rbx
  0x00007f1a59069fa4:   add    $0x2,%rbx
  0x00007f1a59069fa8:   mov    %rbx,0x8(%rbp)
  0x00007f1a59069fac:   vzeroupper 
  0x00007f1a59069faf:   vinsertf128 $0x1,0x240(%rsp),%ymm0,%ymm0
  0x00007f1a59069fba:   vinsertf128 $0x1,0x250(%rsp),%ymm1,%ymm1
  0x00007f1a59069fc5:   vinsertf128 $0x1,0x260(%rsp),%ymm2,%ymm2
  0x00007f1a59069fd0:   vinsertf128 $0x1,0x270(%rsp),%ymm3,%ymm3
  0x00007f1a59069fdb:   vinsertf128 $0x1,0x280(%rsp),%ymm4,%ymm4
  0x00007f1a59069fe6:   vinsertf128 $0x1,0x290(%rsp),%ymm5,%ymm5
  0x00007f1a59069ff1:   vinsertf128 $0x1,0x2a0(%rsp),%ymm6,%ymm6
  0x00007f1a59069ffc:   vinsertf128 $0x1,0x2b0(%rsp),%ymm7,%ymm7
  0x00007f1a5906a007:   vinsertf128 $0x1,0x2c0(%rsp),%ymm8,%ymm8
  0x00007f1a5906a012:   vinsertf128 $0x1,0x2d0(%rsp),%ymm9,%ymm9
  0x00007f1a5906a01d:   vinsertf128 $0x1,0x2e0(%rsp),%ymm10,%ymm10
  0x00007f1a5906a028:   vinsertf128 $0x1,0x2f0(%rsp),%ymm11,%ymm11
  0x00007f1a5906a033:   vinsertf128 $0x1,0x300(%rsp),%ymm12,%ymm12
  0x00007f1a5906a03e:   vinsertf128 $0x1,0x310(%rsp),%ymm13,%ymm13
  0x00007f1a5906a049:   vinsertf128 $0x1,0x320(%rsp),%ymm14,%ymm14
  0x00007f1a5906a054:   vinsertf128 $0x1,0x330(%rsp),%ymm15,%ymm15
  0x00007f1a5906a05f:   fxrstor64 (%rsp)
  0x00007f1a5906a064:   add    $0xa80,%rsp
  0x00007f1a5906a06b:   mov    (%rsp),%r15
  0x00007f1a5906a06f:   mov    0x8(%rsp),%r14
  0x00007f1a5906a074:   mov    0x10(%rsp),%r13
  0x00007f1a5906a079:   mov    0x18(%rsp),%r12
  0x00007f1a5906a07e:   mov    0x20(%rsp),%r11
  0x00007f1a5906a083:   mov    0x28(%rsp),%r10
  0x00007f1a5906a088:   mov    0x30(%rsp),%r9
  0x00007f1a5906a08d:   mov    0x38(%rsp),%r8
  0x00007f1a5906a092:   mov    0x40(%rsp),%rdi
  0x00007f1a5906a097:   mov    0x48(%rsp),%rsi
  0x00007f1a5906a09c:   mov    0x50(%rsp),%rbp
  0x00007f1a5906a0a1:   mov    0x60(%rsp),%rbx
  0x00007f1a5906a0a6:   mov    0x68(%rsp),%rdx
  0x00007f1a5906a0ab:   mov    0x70(%rsp),%rcx
  0x00007f1a5906a0b0:   mov    0x78(%rsp),%rax
  0x00007f1a5906a0b5:   add    $0x80,%rsp
  0x00007f1a5906a0bc:   add    $0x8,%rsp
  0x00007f1a5906a0c0:   popfq  
  0x00007f1a5906a0c1:   pop    %rbp
  0x00007f1a5906a0c2:   retq   
  0x00007f1a5906a0c3:   hlt    
  0x00007f1a5906a0c4:   hlt    
  0x00007f1a5906a0c5:   hlt    
  0x00007f1a5906a0c6:   hlt    
  0x00007f1a5906a0c7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [576]=Callers_xmm0 [592]=Callers_xmm1 [608]=Callers_xmm2 [624]=Callers_xmm3 [640]=Callers_xmm4 [656]=Callers_xmm5 [672]=Callers_xmm6 [688]=Callers_xmm7 [704]=Callers_xmm8 [720]=Callers_xmm9 [736]=Callers_xmm10 [752]=Callers_xmm11 [768]=Callers_xmm12 [784]=Callers_xmm13 [800]=Callers_xmm14 [816]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 311 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007f1a5906a110
--------------------------------------------------------------------------------
  0x00007f1a5906a180:   push   %rbx
  0x00007f1a5906a181:   push   %rbp
  0x00007f1a5906a182:   mov    %rsp,%rbp
  0x00007f1a5906a185:   pushfq 
  0x00007f1a5906a186:   sub    $0x8,%rsp
  0x00007f1a5906a18a:   sub    $0x80,%rsp
  0x00007f1a5906a191:   mov    %rax,0x78(%rsp)
  0x00007f1a5906a196:   mov    %rcx,0x70(%rsp)
  0x00007f1a5906a19b:   mov    %rdx,0x68(%rsp)
  0x00007f1a5906a1a0:   mov    %rbx,0x60(%rsp)
  0x00007f1a5906a1a5:   mov    %rbp,0x50(%rsp)
  0x00007f1a5906a1aa:   mov    %rsi,0x48(%rsp)
  0x00007f1a5906a1af:   mov    %rdi,0x40(%rsp)
  0x00007f1a5906a1b4:   mov    %r8,0x38(%rsp)
  0x00007f1a5906a1b9:   mov    %r9,0x30(%rsp)
  0x00007f1a5906a1be:   mov    %r10,0x28(%rsp)
  0x00007f1a5906a1c3:   mov    %r11,0x20(%rsp)
  0x00007f1a5906a1c8:   mov    %r12,0x18(%rsp)
  0x00007f1a5906a1cd:   mov    %r13,0x10(%rsp)
  0x00007f1a5906a1d2:   mov    %r14,0x8(%rsp)
  0x00007f1a5906a1d7:   mov    %r15,(%rsp)
  0x00007f1a5906a1db:   sub    $0xa80,%rsp
  0x00007f1a5906a1e2:   fxsave64 (%rsp)
  0x00007f1a5906a1e7:   vzeroupper 
  0x00007f1a5906a1ea:   vzeroupper 
  0x00007f1a5906a1ed:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5906a1f4:   mov    0x390(%r15),%rbx
  0x00007f1a5906a1fb:   mov    %rbx,0x8(%rbp)
  0x00007f1a5906a1ff:   mov    %r15,%rdi
  0x00007f1a5906a202:   callq  0x00007f1a63efb2e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007f1a5906a207:   movq   $0x0,0x2c0(%r15)
  0x00007f1a5906a212:   movq   $0x0,0x2c8(%r15)
  0x00007f1a5906a21d:   vzeroupper 
  0x00007f1a5906a220:   cmpq   $0x0,0x8(%r15)
  0x00007f1a5906a225:   je     0x00007f1a5906a296
  0x00007f1a5906a22b:   vzeroupper 
  0x00007f1a5906a22e:   fxrstor64 (%rsp)
  0x00007f1a5906a233:   add    $0xa80,%rsp
  0x00007f1a5906a23a:   mov    (%rsp),%r15
  0x00007f1a5906a23e:   mov    0x8(%rsp),%r14
  0x00007f1a5906a243:   mov    0x10(%rsp),%r13
  0x00007f1a5906a248:   mov    0x18(%rsp),%r12
  0x00007f1a5906a24d:   mov    0x20(%rsp),%r11
  0x00007f1a5906a252:   mov    0x28(%rsp),%r10
  0x00007f1a5906a257:   mov    0x30(%rsp),%r9
  0x00007f1a5906a25c:   mov    0x38(%rsp),%r8
  0x00007f1a5906a261:   mov    0x40(%rsp),%rdi
  0x00007f1a5906a266:   mov    0x48(%rsp),%rsi
  0x00007f1a5906a26b:   mov    0x50(%rsp),%rbp
  0x00007f1a5906a270:   mov    0x60(%rsp),%rbx
  0x00007f1a5906a275:   mov    0x68(%rsp),%rdx
  0x00007f1a5906a27a:   mov    0x70(%rsp),%rcx
  0x00007f1a5906a27f:   mov    0x78(%rsp),%rax
  0x00007f1a5906a284:   add    $0x80,%rsp
  0x00007f1a5906a28b:   add    $0x8,%rsp
  0x00007f1a5906a28f:   popfq  
  0x00007f1a5906a290:   pop    %rbp
  0x00007f1a5906a291:   jmpq   0x00007f1a59000c00
  0x00007f1a5906a296:   cmp    0x8(%rbp),%rbx
  0x00007f1a5906a29a:   jne    0x00007f1a5906a2cc
  0x00007f1a5906a29c:   cmpb   $0x41,(%rbx)
  0x00007f1a5906a29f:   jne    0x00007f1a5906a2a9
  0x00007f1a5906a2a5:   add    $0x1,%rbx
  0x00007f1a5906a2a9:   movzbq 0x1(%rbx),%rcx
  0x00007f1a5906a2ae:   and    $0x7,%rcx
  0x00007f1a5906a2b2:   sub    $0x4,%rcx
  0x00007f1a5906a2b6:   cmp    $0x1,%rcx
  0x00007f1a5906a2ba:   ja     0x00007f1a5906a2c4
  0x00007f1a5906a2c0:   add    $0x1,%rbx
  0x00007f1a5906a2c4:   add    $0x2,%rbx
  0x00007f1a5906a2c8:   mov    %rbx,0x8(%rbp)
  0x00007f1a5906a2cc:   vzeroupper 
  0x00007f1a5906a2cf:   fxrstor64 (%rsp)
  0x00007f1a5906a2d4:   add    $0xa80,%rsp
  0x00007f1a5906a2db:   mov    (%rsp),%r15
  0x00007f1a5906a2df:   mov    0x8(%rsp),%r14
  0x00007f1a5906a2e4:   mov    0x10(%rsp),%r13
  0x00007f1a5906a2e9:   mov    0x18(%rsp),%r12
  0x00007f1a5906a2ee:   mov    0x20(%rsp),%r11
  0x00007f1a5906a2f3:   mov    0x28(%rsp),%r10
  0x00007f1a5906a2f8:   mov    0x30(%rsp),%r9
  0x00007f1a5906a2fd:   mov    0x38(%rsp),%r8
  0x00007f1a5906a302:   mov    0x40(%rsp),%rdi
  0x00007f1a5906a307:   mov    0x48(%rsp),%rsi
  0x00007f1a5906a30c:   mov    0x50(%rsp),%rbp
  0x00007f1a5906a311:   mov    0x60(%rsp),%rbx
  0x00007f1a5906a316:   mov    0x68(%rsp),%rdx
  0x00007f1a5906a31b:   mov    0x70(%rsp),%rcx
  0x00007f1a5906a320:   mov    0x78(%rsp),%rax
  0x00007f1a5906a325:   add    $0x80,%rsp
  0x00007f1a5906a32c:   add    $0x8,%rsp
  0x00007f1a5906a330:   popfq  
  0x00007f1a5906a331:   pop    %rbp
  0x00007f1a5906a332:   retq   
  0x00007f1a5906a333:   hlt    
  0x00007f1a5906a334:   hlt    
  0x00007f1a5906a335:   hlt    
  0x00007f1a5906a336:   hlt    
  0x00007f1a5906a337:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 135 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007f1a5906a410
--------------------------------------------------------------------------------
  0x00007f1a5906a480:   push   %rbp
  0x00007f1a5906a481:   mov    %rsp,%rbp
  0x00007f1a5906a484:   pushfq 
  0x00007f1a5906a485:   sub    $0x8,%rsp
  0x00007f1a5906a489:   sub    $0x80,%rsp
  0x00007f1a5906a490:   mov    %rax,0x78(%rsp)
  0x00007f1a5906a495:   mov    %rcx,0x70(%rsp)
  0x00007f1a5906a49a:   mov    %rdx,0x68(%rsp)
  0x00007f1a5906a49f:   mov    %rbx,0x60(%rsp)
  0x00007f1a5906a4a4:   mov    %rbp,0x50(%rsp)
  0x00007f1a5906a4a9:   mov    %rsi,0x48(%rsp)
  0x00007f1a5906a4ae:   mov    %rdi,0x40(%rsp)
  0x00007f1a5906a4b3:   mov    %r8,0x38(%rsp)
  0x00007f1a5906a4b8:   mov    %r9,0x30(%rsp)
  0x00007f1a5906a4bd:   mov    %r10,0x28(%rsp)
  0x00007f1a5906a4c2:   mov    %r11,0x20(%rsp)
  0x00007f1a5906a4c7:   mov    %r12,0x18(%rsp)
  0x00007f1a5906a4cc:   mov    %r13,0x10(%rsp)
  0x00007f1a5906a4d1:   mov    %r14,0x8(%rsp)
  0x00007f1a5906a4d6:   mov    %r15,(%rsp)
  0x00007f1a5906a4da:   sub    $0xa80,%rsp
  0x00007f1a5906a4e1:   fxsave64 (%rsp)
  0x00007f1a5906a4e6:   vzeroupper 
  0x00007f1a5906a4e9:   vzeroupper 
  0x00007f1a5906a4ec:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5906a4f3:   mov    %r15,%rdi
  0x00007f1a5906a4f6:   callq  0x00007f1a63efb2e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007f1a5906a4fb:   movq   $0x0,0x2c0(%r15)
  0x00007f1a5906a506:   movq   $0x0,0x2c8(%r15)
  0x00007f1a5906a511:   vzeroupper 
  0x00007f1a5906a514:   cmpq   $0x0,0x8(%r15)
  0x00007f1a5906a519:   je     0x00007f1a5906a58a
  0x00007f1a5906a51f:   vzeroupper 
  0x00007f1a5906a522:   fxrstor64 (%rsp)
  0x00007f1a5906a527:   add    $0xa80,%rsp
  0x00007f1a5906a52e:   mov    (%rsp),%r15
  0x00007f1a5906a532:   mov    0x8(%rsp),%r14
  0x00007f1a5906a537:   mov    0x10(%rsp),%r13
  0x00007f1a5906a53c:   mov    0x18(%rsp),%r12
  0x00007f1a5906a541:   mov    0x20(%rsp),%r11
  0x00007f1a5906a546:   mov    0x28(%rsp),%r10
  0x00007f1a5906a54b:   mov    0x30(%rsp),%r9
  0x00007f1a5906a550:   mov    0x38(%rsp),%r8
  0x00007f1a5906a555:   mov    0x40(%rsp),%rdi
  0x00007f1a5906a55a:   mov    0x48(%rsp),%rsi
  0x00007f1a5906a55f:   mov    0x50(%rsp),%rbp
  0x00007f1a5906a564:   mov    0x60(%rsp),%rbx
  0x00007f1a5906a569:   mov    0x68(%rsp),%rdx
  0x00007f1a5906a56e:   mov    0x70(%rsp),%rcx
  0x00007f1a5906a573:   mov    0x78(%rsp),%rax
  0x00007f1a5906a578:   add    $0x80,%rsp
  0x00007f1a5906a57f:   add    $0x8,%rsp
  0x00007f1a5906a583:   popfq  
  0x00007f1a5906a584:   pop    %rbp
  0x00007f1a5906a585:   jmpq   0x00007f1a59000c00
  0x00007f1a5906a58a:   vzeroupper 
  0x00007f1a5906a58d:   fxrstor64 (%rsp)
  0x00007f1a5906a592:   add    $0xa80,%rsp
  0x00007f1a5906a599:   mov    (%rsp),%r15
  0x00007f1a5906a59d:   mov    0x8(%rsp),%r14
  0x00007f1a5906a5a2:   mov    0x10(%rsp),%r13
  0x00007f1a5906a5a7:   mov    0x18(%rsp),%r12
  0x00007f1a5906a5ac:   mov    0x20(%rsp),%r11
  0x00007f1a5906a5b1:   mov    0x28(%rsp),%r10
  0x00007f1a5906a5b6:   mov    0x30(%rsp),%r9
  0x00007f1a5906a5bb:   mov    0x38(%rsp),%r8
  0x00007f1a5906a5c0:   mov    0x40(%rsp),%rdi
  0x00007f1a5906a5c5:   mov    0x48(%rsp),%rsi
  0x00007f1a5906a5ca:   mov    0x50(%rsp),%rbp
  0x00007f1a5906a5cf:   mov    0x60(%rsp),%rbx
  0x00007f1a5906a5d4:   mov    0x68(%rsp),%rdx
  0x00007f1a5906a5d9:   mov    0x70(%rsp),%rcx
  0x00007f1a5906a5de:   mov    0x78(%rsp),%rax
  0x00007f1a5906a5e3:   add    $0x80,%rsp
  0x00007f1a5906a5ea:   add    $0x8,%rsp
  0x00007f1a5906a5ee:   popfq  
  0x00007f1a5906a5ef:   pop    %rbp
  0x00007f1a5906a5f0:   retq   
  0x00007f1a5906a5f1:   hlt    
  0x00007f1a5906a5f2:   hlt    
  0x00007f1a5906a5f3:   hlt    
  0x00007f1a5906a5f4:   hlt    
  0x00007f1a5906a5f5:   hlt    
  0x00007f1a5906a5f6:   hlt    
  0x00007f1a5906a5f7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding DeoptimizationBlob 0x00007f1a59069690
--------------------------------------------------------------------------------
  0x00007f1a59069720:   push   %rbp
  0x00007f1a59069721:   mov    %rsp,%rbp
  0x00007f1a59069724:   pushfq 
  0x00007f1a59069725:   sub    $0x8,%rsp
  0x00007f1a59069729:   sub    $0x80,%rsp
  0x00007f1a59069730:   mov    %rax,0x78(%rsp)
  0x00007f1a59069735:   mov    %rcx,0x70(%rsp)
  0x00007f1a5906973a:   mov    %rdx,0x68(%rsp)
  0x00007f1a5906973f:   mov    %rbx,0x60(%rsp)
  0x00007f1a59069744:   mov    %rbp,0x50(%rsp)
  0x00007f1a59069749:   mov    %rsi,0x48(%rsp)
  0x00007f1a5906974e:   mov    %rdi,0x40(%rsp)
  0x00007f1a59069753:   mov    %r8,0x38(%rsp)
  0x00007f1a59069758:   mov    %r9,0x30(%rsp)
  0x00007f1a5906975d:   mov    %r10,0x28(%rsp)
  0x00007f1a59069762:   mov    %r11,0x20(%rsp)
  0x00007f1a59069767:   mov    %r12,0x18(%rsp)
  0x00007f1a5906976c:   mov    %r13,0x10(%rsp)
  0x00007f1a59069771:   mov    %r14,0x8(%rsp)
  0x00007f1a59069776:   mov    %r15,(%rsp)
  0x00007f1a5906977a:   sub    $0xa80,%rsp
  0x00007f1a59069781:   fxsave64 (%rsp)
  0x00007f1a59069786:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007f1a59069791:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007f1a5906979c:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007f1a590697a7:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007f1a590697b2:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007f1a590697bd:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007f1a590697c8:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007f1a590697d3:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007f1a590697de:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007f1a590697e9:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007f1a590697f4:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007f1a590697ff:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007f1a5906980a:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007f1a59069815:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007f1a59069820:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007f1a5906982b:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007f1a59069836:   vzeroupper 
  0x00007f1a59069839:   mov    $0x0,%r14d
  0x00007f1a5906983f:   jmpq   0x00007f1a59069ab0
  0x00007f1a59069844:   push   %rbp
  0x00007f1a59069845:   mov    %rsp,%rbp
  0x00007f1a59069848:   pushfq 
  0x00007f1a59069849:   sub    $0x8,%rsp
  0x00007f1a5906984d:   sub    $0x80,%rsp
  0x00007f1a59069854:   mov    %rax,0x78(%rsp)
  0x00007f1a59069859:   mov    %rcx,0x70(%rsp)
  0x00007f1a5906985e:   mov    %rdx,0x68(%rsp)
  0x00007f1a59069863:   mov    %rbx,0x60(%rsp)
  0x00007f1a59069868:   mov    %rbp,0x50(%rsp)
  0x00007f1a5906986d:   mov    %rsi,0x48(%rsp)
  0x00007f1a59069872:   mov    %rdi,0x40(%rsp)
  0x00007f1a59069877:   mov    %r8,0x38(%rsp)
  0x00007f1a5906987c:   mov    %r9,0x30(%rsp)
  0x00007f1a59069881:   mov    %r10,0x28(%rsp)
  0x00007f1a59069886:   mov    %r11,0x20(%rsp)
  0x00007f1a5906988b:   mov    %r12,0x18(%rsp)
  0x00007f1a59069890:   mov    %r13,0x10(%rsp)
  0x00007f1a59069895:   mov    %r14,0x8(%rsp)
  0x00007f1a5906989a:   mov    %r15,(%rsp)
  0x00007f1a5906989e:   sub    $0xa80,%rsp
  0x00007f1a590698a5:   fxsave64 (%rsp)
  0x00007f1a590698aa:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007f1a590698b5:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007f1a590698c0:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007f1a590698cb:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007f1a590698d6:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007f1a590698e1:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007f1a590698ec:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007f1a590698f7:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007f1a59069902:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007f1a5906990d:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007f1a59069918:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007f1a59069923:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007f1a5906992e:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007f1a59069939:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007f1a59069944:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007f1a5906994f:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007f1a5906995a:   vzeroupper 
  0x00007f1a5906995d:   mov    $0x3,%r14d
  0x00007f1a59069963:   jmpq   0x00007f1a59069ab0
  0x00007f1a59069968:   mov    %rdx,0x430(%r15)
  0x00007f1a5906996f:   mov    %rax,0x428(%r15)
  0x00007f1a59069976:   pushq  $0x0
  0x00007f1a5906997b:   push   %rbp
  0x00007f1a5906997c:   mov    %rsp,%rbp
  0x00007f1a5906997f:   pushfq 
  0x00007f1a59069980:   sub    $0x8,%rsp
  0x00007f1a59069984:   sub    $0x80,%rsp
  0x00007f1a5906998b:   mov    %rax,0x78(%rsp)
  0x00007f1a59069990:   mov    %rcx,0x70(%rsp)
  0x00007f1a59069995:   mov    %rdx,0x68(%rsp)
  0x00007f1a5906999a:   mov    %rbx,0x60(%rsp)
  0x00007f1a5906999f:   mov    %rbp,0x50(%rsp)
  0x00007f1a590699a4:   mov    %rsi,0x48(%rsp)
  0x00007f1a590699a9:   mov    %rdi,0x40(%rsp)
  0x00007f1a590699ae:   mov    %r8,0x38(%rsp)
  0x00007f1a590699b3:   mov    %r9,0x30(%rsp)
  0x00007f1a590699b8:   mov    %r10,0x28(%rsp)
  0x00007f1a590699bd:   mov    %r11,0x20(%rsp)
  0x00007f1a590699c2:   mov    %r12,0x18(%rsp)
  0x00007f1a590699c7:   mov    %r13,0x10(%rsp)
  0x00007f1a590699cc:   mov    %r14,0x8(%rsp)
  0x00007f1a590699d1:   mov    %r15,(%rsp)
  0x00007f1a590699d5:   sub    $0xa80,%rsp
  0x00007f1a590699dc:   fxsave64 (%rsp)
  0x00007f1a590699e1:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007f1a590699ec:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007f1a590699f7:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007f1a59069a02:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007f1a59069a0d:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007f1a59069a18:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007f1a59069a23:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007f1a59069a2e:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007f1a59069a39:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007f1a59069a44:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007f1a59069a4f:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007f1a59069a5a:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007f1a59069a65:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007f1a59069a70:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007f1a59069a7b:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007f1a59069a86:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007f1a59069a91:   vzeroupper 
  0x00007f1a59069a94:   mov    $0x1,%r14d
  0x00007f1a59069a9a:   mov    0x430(%r15),%rdx
  0x00007f1a59069aa1:   mov    %rdx,0x8(%rbp)
  0x00007f1a59069aa5:   movq   $0x0,0x430(%r15)
  0x00007f1a59069ab0:   vzeroupper 
  0x00007f1a59069ab3:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59069aba:   mov    %r15,%rdi
  0x00007f1a59069abd:   mov    %r14d,%esi
  0x00007f1a59069ac0:   callq  0x00007f1a63849170 = Deoptimization::fetch_unroll_info(JavaThread*, int)
  0x00007f1a59069ac5:   movq   $0x0,0x2c0(%r15)
  0x00007f1a59069ad0:   movq   $0x0,0x2c8(%r15)
  0x00007f1a59069adb:   vzeroupper 
  0x00007f1a59069ade:   mov    %rax,%rdi
  0x00007f1a59069ae1:   mov    0x3c(%rdi),%r14d
  0x00007f1a59069ae5:   cmp    $0x1,%r14d
  0x00007f1a59069ae9:   jne    0x00007f1a59069b23
  0x00007f1a59069aef:   mov    0x428(%r15),%rax
  0x00007f1a59069af6:   mov    0x430(%r15),%rdx
  0x00007f1a59069afd:   movq   $0x0,0x428(%r15)
  0x00007f1a59069b08:   movq   $0x0,0x430(%r15)
  0x00007f1a59069b13:   mov    %rax,0xaf8(%rsp)
  0x00007f1a59069b1b:   mov    %rdx,0xae8(%rsp)
  0x00007f1a59069b23:   vmovsd 0xa0(%rsp),%xmm0
  0x00007f1a59069b2c:   mov    0xaf8(%rsp),%rax
  0x00007f1a59069b34:   mov    0xae8(%rsp),%rdx
  0x00007f1a59069b3c:   add    $0xb18,%rsp
  0x00007f1a59069b43:   mov    (%rdi),%ecx
  0x00007f1a59069b45:   add    %rcx,%rsp
  0x00007f1a59069b48:   mov    0x30(%rdi),%rbp
  0x00007f1a59069b4c:   mov    0x18(%rdi),%rcx
  0x00007f1a59069b50:   add    $0x8,%rsp
  0x00007f1a59069b54:   mov    0x10(%rdi),%rsi
  0x00007f1a59069b58:   mov    0x8(%rdi),%edx
  0x00007f1a59069b5b:   mov    %rsp,%r8
  0x00007f1a59069b5e:   mov    0x4(%rdi),%ebx
  0x00007f1a59069b61:   sub    %rbx,%rsp
  0x00007f1a59069b64:   mov    (%rsi),%rbx
  0x00007f1a59069b67:   sub    $0x10,%rbx
  0x00007f1a59069b6b:   rex.W pushq (%rcx)
  0x00007f1a59069b6e:   push   %rbp
  0x00007f1a59069b6f:   mov    %rsp,%rbp
  0x00007f1a59069b72:   sub    %rbx,%rsp
  0x00007f1a59069b75:   movq   $0x0,-0x10(%rbp)
  0x00007f1a59069b7d:   mov    %r8,-0x8(%rbp)
  0x00007f1a59069b81:   mov    %rsp,%r8
  0x00007f1a59069b84:   add    $0x8,%rsi
  0x00007f1a59069b88:   add    $0x8,%rcx
  0x00007f1a59069b8c:   dec    %edx
  0x00007f1a59069b8e:   jne    0x00007f1a59069b64
  0x00007f1a59069b90:   rex.W pushq (%rcx)
  0x00007f1a59069b93:   push   %rbp
  0x00007f1a59069b94:   mov    %rsp,%rbp
  0x00007f1a59069b97:   sub    $0xb10,%rsp
  0x00007f1a59069b9e:   vmovsd %xmm0,0xa0(%rsp)
  0x00007f1a59069ba7:   mov    %rax,0xaf8(%rsp)
  0x00007f1a59069baf:   vzeroupper 
  0x00007f1a59069bb2:   mov    %rbp,0x2d0(%r15)
  0x00007f1a59069bb9:   movabs $0x7f1a59069baf,%r10
  0x00007f1a59069bc3:   mov    %r10,0x2c8(%r15)
  0x00007f1a59069bca:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59069bd1:   and    $0xfffffffffffffff0,%rsp
  0x00007f1a59069bd5:   mov    %r15,%rdi
  0x00007f1a59069bd8:   mov    %r14d,%esi
  0x00007f1a59069bdb:   callq  0x00007f1a63841710 = Deoptimization::unpack_frames(JavaThread*, int)
  0x00007f1a59069be0:   mov    0x2c0(%r15),%rsp
  0x00007f1a59069be7:   movq   $0x0,0x2c0(%r15)
  0x00007f1a59069bf2:   movq   $0x0,0x2d0(%r15)
  0x00007f1a59069bfd:   movq   $0x0,0x2c8(%r15)
  0x00007f1a59069c08:   vzeroupper 
  0x00007f1a59069c0b:   vmovsd 0xa0(%rsp),%xmm0
  0x00007f1a59069c14:   mov    0xaf8(%rsp),%rax
  0x00007f1a59069c1c:   mov    0xae8(%rsp),%rdx
  0x00007f1a59069c24:   leaveq 
  0x00007f1a59069c25:   retq   
  0x00007f1a59069c26:   hlt    
  0x00007f1a59069c27:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 2 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [576]=Callers_xmm0 [592]=Callers_xmm1 [608]=Callers_xmm2 [624]=Callers_xmm3 [640]=Callers_xmm4 [656]=Callers_xmm5 [672]=Callers_xmm6 [688]=Callers_xmm7 [704]=Callers_xmm8 [720]=Callers_xmm9 [736]=Callers_xmm10 [752]=Callers_xmm11 [768]=Callers_xmm12 [784]=Callers_xmm13 [800]=Callers_xmm14 [816]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 933 
ImmutableOopMap {} pc offsets: 1167 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding UncommonTrapBlob 0x00007f1a59069310
--------------------------------------------------------------------------------
  0x00007f1a59069380:   sub    $0x8,%rsp
  0x00007f1a59069384:   mov    %rbp,(%rsp)
  0x00007f1a59069388:   mov    %esi,%esi
  0x00007f1a5906938a:   vzeroupper 
  0x00007f1a5906938d:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59069394:   mov    %r15,%rdi
  0x00007f1a59069397:   mov    $0x2,%edx
  0x00007f1a5906939c:   callq  0x00007f1a63849200 = Deoptimization::uncommon_trap(JavaThread*, int, int)
  0x00007f1a590693a1:   movq   $0x0,0x2c0(%r15)
  0x00007f1a590693ac:   movq   $0x0,0x2c8(%r15)
  0x00007f1a590693b7:   vzeroupper 
  0x00007f1a590693ba:   mov    %rax,%rdi
  0x00007f1a590693bd:   add    $0x8,%rsp
  0x00007f1a590693c1:   mov    (%rdi),%ecx
  0x00007f1a590693c3:   add    %rcx,%rsp
  0x00007f1a590693c6:   mov    0x30(%rdi),%rbp
  0x00007f1a590693ca:   mov    0x18(%rdi),%rcx
  0x00007f1a590693ce:   add    $0x8,%rsp
  0x00007f1a590693d2:   mov    0x10(%rdi),%rsi
  0x00007f1a590693d6:   mov    0x8(%rdi),%edx
  0x00007f1a590693d9:   mov    %rsp,%r8
  0x00007f1a590693dc:   mov    0x4(%rdi),%ebx
  0x00007f1a590693df:   sub    %rbx,%rsp
  0x00007f1a590693e2:   mov    (%rsi),%rbx
  0x00007f1a590693e5:   sub    $0x10,%rbx
  0x00007f1a590693e9:   rex.W pushq (%rcx)
  0x00007f1a590693ec:   push   %rbp
  0x00007f1a590693ed:   mov    %rsp,%rbp
  0x00007f1a590693f0:   sub    %rbx,%rsp
  0x00007f1a590693f3:   mov    %r8,-0x8(%rbp)
  0x00007f1a590693f7:   movq   $0x0,-0x10(%rbp)
  0x00007f1a590693ff:   mov    %rsp,%r8
  0x00007f1a59069402:   add    $0x8,%rsi
  0x00007f1a59069406:   add    $0x8,%rcx
  0x00007f1a5906940a:   dec    %edx
  0x00007f1a5906940c:   jne    0x00007f1a590693e2
  0x00007f1a5906940e:   rex.W pushq (%rcx)
  0x00007f1a59069411:   push   %rbp
  0x00007f1a59069412:   mov    %rsp,%rbp
  0x00007f1a59069415:   sub    $0x0,%rsp
  0x00007f1a59069419:   vzeroupper 
  0x00007f1a5906941c:   mov    %rbp,0x2d0(%r15)
  0x00007f1a59069423:   movabs $0x7f1a59069419,%r10
  0x00007f1a5906942d:   mov    %r10,0x2c8(%r15)
  0x00007f1a59069434:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5906943b:   and    $0xfffffffffffffff0,%rsp
  0x00007f1a5906943f:   mov    %r15,%rdi
  0x00007f1a59069442:   mov    $0x2,%esi
  0x00007f1a59069447:   callq  0x00007f1a63841710 = Deoptimization::unpack_frames(JavaThread*, int)
  0x00007f1a5906944c:   movq   $0x0,0x2c0(%r15)
  0x00007f1a59069457:   movq   $0x0,0x2d0(%r15)
  0x00007f1a59069462:   movq   $0x0,0x2c8(%r15)
  0x00007f1a5906946d:   vzeroupper 
  0x00007f1a59069470:   leaveq 
  0x00007f1a59069471:   retq   
  0x00007f1a59069472:   hlt    
  0x00007f1a59069473:   hlt    
  0x00007f1a59069474:   hlt    
  0x00007f1a59069475:   hlt    
  0x00007f1a59069476:   hlt    
  0x00007f1a59069477:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 2 OopMaps

ImmutableOopMap {} pc offsets: 33 153 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - AbstractMethodError throw_exception 0x00007f1a5903fb90
--------------------------------------------------------------------------------
  0x00007f1a5903fc00:   push   %rbp
  0x00007f1a5903fc01:   mov    %rsp,%rbp
  0x00007f1a5903fc04:   sub    $0x0,%rsp
  0x00007f1a5903fc08:   vzeroupper 
  0x00007f1a5903fc0b:   mov    %rbp,0x2d0(%r15)
  0x00007f1a5903fc12:   movabs $0x7f1a5903fc08,%r10
  0x00007f1a5903fc1c:   mov    %r10,0x2c8(%r15)
  0x00007f1a5903fc23:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5903fc2a:   and    $0xfffffffffffffff0,%rsp
  0x00007f1a5903fc2e:   mov    %r15,%rdi
  0x00007f1a5903fc31:   callq  0x00007f1a63f0eea0 = SharedRuntime::throw_AbstractMethodError(JavaThread*)
  0x00007f1a5903fc36:   movq   $0x0,0x2c0(%r15)
  0x00007f1a5903fc41:   movq   $0x0,0x2d0(%r15)
  0x00007f1a5903fc4c:   movq   $0x0,0x2c8(%r15)
  0x00007f1a5903fc57:   vzeroupper 
  0x00007f1a5903fc5a:   leaveq 
  0x00007f1a5903fc5b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - IncompatibleClassChangeError throw_exception 0x00007f1a5903f890
--------------------------------------------------------------------------------
  0x00007f1a5903f900:   push   %rbp
  0x00007f1a5903f901:   mov    %rsp,%rbp
  0x00007f1a5903f904:   sub    $0x0,%rsp
  0x00007f1a5903f908:   vzeroupper 
  0x00007f1a5903f90b:   mov    %rbp,0x2d0(%r15)
  0x00007f1a5903f912:   movabs $0x7f1a5903f908,%r10
  0x00007f1a5903f91c:   mov    %r10,0x2c8(%r15)
  0x00007f1a5903f923:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5903f92a:   and    $0xfffffffffffffff0,%rsp
  0x00007f1a5903f92e:   mov    %r15,%rdi
  0x00007f1a5903f931:   callq  0x00007f1a63f0f0a0 = SharedRuntime::throw_IncompatibleClassChangeError(JavaThread*)
  0x00007f1a5903f936:   movq   $0x0,0x2c0(%r15)
  0x00007f1a5903f941:   movq   $0x0,0x2d0(%r15)
  0x00007f1a5903f94c:   movq   $0x0,0x2c8(%r15)
  0x00007f1a5903f957:   vzeroupper 
  0x00007f1a5903f95a:   leaveq 
  0x00007f1a5903f95b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - NullPointerException at call throw_exception 0x00007f1a5903f590
--------------------------------------------------------------------------------
  0x00007f1a5903f600:   push   %rbp
  0x00007f1a5903f601:   mov    %rsp,%rbp
  0x00007f1a5903f604:   sub    $0x0,%rsp
  0x00007f1a5903f608:   vzeroupper 
  0x00007f1a5903f60b:   mov    %rbp,0x2d0(%r15)
  0x00007f1a5903f612:   movabs $0x7f1a5903f608,%r10
  0x00007f1a5903f61c:   mov    %r10,0x2c8(%r15)
  0x00007f1a5903f623:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5903f62a:   and    $0xfffffffffffffff0,%rsp
  0x00007f1a5903f62e:   mov    %r15,%rdi
  0x00007f1a5903f631:   callq  0x00007f1a63f0eda0 = SharedRuntime::throw_NullPointerException_at_call(JavaThread*)
  0x00007f1a5903f636:   movq   $0x0,0x2c0(%r15)
  0x00007f1a5903f641:   movq   $0x0,0x2d0(%r15)
  0x00007f1a5903f64c:   movq   $0x0,0x2c8(%r15)
  0x00007f1a5903f657:   vzeroupper 
  0x00007f1a5903f65a:   leaveq 
  0x00007f1a5903f65b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_float_sign_mask [0x00007f1a59040280, 0x00007f1a590402c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040280:   (bad)  
  0x00007f1a59040281:   (bad)  
  0x00007f1a59040282:   (bad)  
  0x00007f1a59040283:   jg     Stub::vector_float_sign_mask+4 0x00007f1a59040284
  0x00007f1a59040285:   (bad)  
  0x00007f1a59040286:   (bad)  
  0x00007f1a59040287:   jg     Stub::vector_float_sign_mask+8 0x00007f1a59040288
  0x00007f1a59040289:   (bad)  
  0x00007f1a5904028a:   (bad)  
  0x00007f1a5904028b:   jg     Stub::vector_float_sign_mask+12 0x00007f1a5904028c
  0x00007f1a5904028d:   (bad)  
  0x00007f1a5904028e:   (bad)  
  0x00007f1a5904028f:   jg     Stub::vector_float_sign_mask+16 0x00007f1a59040290
  0x00007f1a59040291:   (bad)  
  0x00007f1a59040292:   (bad)  
  0x00007f1a59040293:   jg     Stub::vector_float_sign_mask+20 0x00007f1a59040294
  0x00007f1a59040295:   (bad)  
  0x00007f1a59040296:   (bad)  
  0x00007f1a59040297:   jg     Stub::vector_float_sign_mask+24 0x00007f1a59040298
  0x00007f1a59040299:   (bad)  
  0x00007f1a5904029a:   (bad)  
  0x00007f1a5904029b:   jg     Stub::vector_float_sign_mask+28 0x00007f1a5904029c
  0x00007f1a5904029d:   (bad)  
  0x00007f1a5904029e:   (bad)  
  0x00007f1a5904029f:   jg     Stub::vector_float_sign_mask+32 0x00007f1a590402a0
  0x00007f1a590402a1:   (bad)  
  0x00007f1a590402a2:   (bad)  
  0x00007f1a590402a3:   jg     Stub::vector_float_sign_mask+36 0x00007f1a590402a4
  0x00007f1a590402a5:   (bad)  
  0x00007f1a590402a6:   (bad)  
  0x00007f1a590402a7:   jg     Stub::vector_float_sign_mask+40 0x00007f1a590402a8
  0x00007f1a590402a9:   (bad)  
  0x00007f1a590402aa:   (bad)  
  0x00007f1a590402ab:   jg     Stub::vector_float_sign_mask+44 0x00007f1a590402ac
  0x00007f1a590402ad:   (bad)  
  0x00007f1a590402ae:   (bad)  
  0x00007f1a590402af:   jg     Stub::vector_float_sign_mask+48 0x00007f1a590402b0
  0x00007f1a590402b1:   (bad)  
  0x00007f1a590402b2:   (bad)  
  0x00007f1a590402b3:   jg     Stub::vector_float_sign_mask+52 0x00007f1a590402b4
  0x00007f1a590402b5:   (bad)  
  0x00007f1a590402b6:   (bad)  
  0x00007f1a590402b7:   jg     Stub::vector_float_sign_mask+56 0x00007f1a590402b8
  0x00007f1a590402b9:   (bad)  
  0x00007f1a590402ba:   (bad)  
  0x00007f1a590402bb:   jg     Stub::vector_float_sign_mask+60 0x00007f1a590402bc
  0x00007f1a590402bd:   (bad)  
  0x00007f1a590402be:   (bad)  
  0x00007f1a590402bf:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_float_sign_flip [0x00007f1a590402c0, 0x00007f1a59040300] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590402c0:   add    %al,(%rax)
  0x00007f1a590402c2:   add    %al,-0x80000000(%rax)
  0x00007f1a590402c8:   add    %al,(%rax)
  0x00007f1a590402ca:   add    %al,-0x80000000(%rax)
  0x00007f1a590402d0:   add    %al,(%rax)
  0x00007f1a590402d2:   add    %al,-0x80000000(%rax)
  0x00007f1a590402d8:   add    %al,(%rax)
  0x00007f1a590402da:   add    %al,-0x80000000(%rax)
  0x00007f1a590402e0:   add    %al,(%rax)
  0x00007f1a590402e2:   add    %al,-0x80000000(%rax)
  0x00007f1a590402e8:   add    %al,(%rax)
  0x00007f1a590402ea:   add    %al,-0x80000000(%rax)
  0x00007f1a590402f0:   add    %al,(%rax)
  0x00007f1a590402f2:   add    %al,-0x80000000(%rax)
  0x00007f1a590402f8:   add    %al,(%rax)
  0x00007f1a590402fa:   add    %al,-0x80000000(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_double_sign_mask [0x00007f1a59040300, 0x00007f1a59040340] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040300:   (bad)  
  0x00007f1a59040301:   (bad)  
  0x00007f1a59040302:   (bad)  
  0x00007f1a59040303:   (bad)  
  0x00007f1a59040304:   (bad)  
  0x00007f1a59040305:   (bad)  
  0x00007f1a59040306:   (bad)  
  0x00007f1a59040307:   jg     Stub::vector_double_sign_mask+8 0x00007f1a59040308
  0x00007f1a59040309:   (bad)  
  0x00007f1a5904030a:   (bad)  
  0x00007f1a5904030b:   (bad)  
  0x00007f1a5904030c:   (bad)  
  0x00007f1a5904030d:   (bad)  
  0x00007f1a5904030e:   (bad)  
  0x00007f1a5904030f:   jg     Stub::vector_double_sign_mask+16 0x00007f1a59040310
  0x00007f1a59040311:   (bad)  
  0x00007f1a59040312:   (bad)  
  0x00007f1a59040313:   (bad)  
  0x00007f1a59040314:   (bad)  
  0x00007f1a59040315:   (bad)  
  0x00007f1a59040316:   (bad)  
  0x00007f1a59040317:   jg     Stub::vector_double_sign_mask+24 0x00007f1a59040318
  0x00007f1a59040319:   (bad)  
  0x00007f1a5904031a:   (bad)  
  0x00007f1a5904031b:   (bad)  
  0x00007f1a5904031c:   (bad)  
  0x00007f1a5904031d:   (bad)  
  0x00007f1a5904031e:   (bad)  
  0x00007f1a5904031f:   jg     Stub::vector_double_sign_mask+32 0x00007f1a59040320
  0x00007f1a59040321:   (bad)  
  0x00007f1a59040322:   (bad)  
  0x00007f1a59040323:   (bad)  
  0x00007f1a59040324:   (bad)  
  0x00007f1a59040325:   (bad)  
  0x00007f1a59040326:   (bad)  
  0x00007f1a59040327:   jg     Stub::vector_double_sign_mask+40 0x00007f1a59040328
  0x00007f1a59040329:   (bad)  
  0x00007f1a5904032a:   (bad)  
  0x00007f1a5904032b:   (bad)  
  0x00007f1a5904032c:   (bad)  
  0x00007f1a5904032d:   (bad)  
  0x00007f1a5904032e:   (bad)  
  0x00007f1a5904032f:   jg     Stub::vector_double_sign_mask+48 0x00007f1a59040330
  0x00007f1a59040331:   (bad)  
  0x00007f1a59040332:   (bad)  
  0x00007f1a59040333:   (bad)  
  0x00007f1a59040334:   (bad)  
  0x00007f1a59040335:   (bad)  
  0x00007f1a59040336:   (bad)  
  0x00007f1a59040337:   jg     Stub::vector_double_sign_mask+56 0x00007f1a59040338
  0x00007f1a59040339:   (bad)  
  0x00007f1a5904033a:   (bad)  
  0x00007f1a5904033b:   (bad)  
  0x00007f1a5904033c:   (bad)  
  0x00007f1a5904033d:   (bad)  
  0x00007f1a5904033e:   (bad)  
  0x00007f1a5904033f:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_double_sign_flip [0x00007f1a59040340, 0x00007f1a59040380] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040340:   add    %al,(%rax)
  0x00007f1a59040342:   add    %al,(%rax)
  0x00007f1a59040344:   add    %al,(%rax)
  0x00007f1a59040346:   add    %al,0x0(%rax)
  0x00007f1a5904034c:   add    %al,(%rax)
  0x00007f1a5904034e:   add    %al,0x0(%rax)
  0x00007f1a59040354:   add    %al,(%rax)
  0x00007f1a59040356:   add    %al,0x0(%rax)
  0x00007f1a5904035c:   add    %al,(%rax)
  0x00007f1a5904035e:   add    %al,0x0(%rax)
  0x00007f1a59040364:   add    %al,(%rax)
  0x00007f1a59040366:   add    %al,0x0(%rax)
  0x00007f1a5904036c:   add    %al,(%rax)
  0x00007f1a5904036e:   add    %al,0x0(%rax)
  0x00007f1a59040374:   add    %al,(%rax)
  0x00007f1a59040376:   add    %al,0x0(%rax)
  0x00007f1a5904037c:   add    %al,(%rax)
  0x00007f1a5904037e:   .byte 0x0
  0x00007f1a5904037f:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_all_bits_set [0x00007f1a59040380, 0x00007f1a590403c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040380:   (bad)  
  0x00007f1a59040381:   (bad)  
  0x00007f1a59040382:   (bad)  
  0x00007f1a59040383:   (bad)  
  0x00007f1a59040384:   (bad)  
  0x00007f1a59040385:   (bad)  
  0x00007f1a59040386:   (bad)  
  0x00007f1a59040387:   (bad)  
  0x00007f1a59040388:   (bad)  
  0x00007f1a59040389:   (bad)  
  0x00007f1a5904038a:   (bad)  
  0x00007f1a5904038b:   (bad)  
  0x00007f1a5904038c:   (bad)  
  0x00007f1a5904038d:   (bad)  
  0x00007f1a5904038e:   (bad)  
  0x00007f1a5904038f:   (bad)  
  0x00007f1a59040390:   (bad)  
  0x00007f1a59040391:   (bad)  
  0x00007f1a59040392:   (bad)  
  0x00007f1a59040393:   (bad)  
  0x00007f1a59040394:   (bad)  
  0x00007f1a59040395:   (bad)  
  0x00007f1a59040396:   (bad)  
  0x00007f1a59040397:   (bad)  
  0x00007f1a59040398:   (bad)  
  0x00007f1a59040399:   (bad)  
  0x00007f1a5904039a:   (bad)  
  0x00007f1a5904039b:   (bad)  
  0x00007f1a5904039c:   (bad)  
  0x00007f1a5904039d:   (bad)  
  0x00007f1a5904039e:   (bad)  
  0x00007f1a5904039f:   (bad)  
  0x00007f1a590403a0:   (bad)  
  0x00007f1a590403a1:   (bad)  
  0x00007f1a590403a2:   (bad)  
  0x00007f1a590403a3:   (bad)  
  0x00007f1a590403a4:   (bad)  
  0x00007f1a590403a5:   (bad)  
  0x00007f1a590403a6:   (bad)  
  0x00007f1a590403a7:   (bad)  
  0x00007f1a590403a8:   (bad)  
  0x00007f1a590403a9:   (bad)  
  0x00007f1a590403aa:   (bad)  
  0x00007f1a590403ab:   (bad)  
  0x00007f1a590403ac:   (bad)  
  0x00007f1a590403ad:   (bad)  
  0x00007f1a590403ae:   (bad)  
  0x00007f1a590403af:   (bad)  
  0x00007f1a590403b0:   (bad)  
  0x00007f1a590403b1:   (bad)  
  0x00007f1a590403b2:   (bad)  
  0x00007f1a590403b3:   (bad)  
  0x00007f1a590403b4:   (bad)  
  0x00007f1a590403b5:   (bad)  
  0x00007f1a590403b6:   (bad)  
  0x00007f1a590403b7:   (bad)  
  0x00007f1a590403b8:   (bad)  
  0x00007f1a590403b9:   (bad)  
  0x00007f1a590403ba:   (bad)  
  0x00007f1a590403bb:   (bad)  
  0x00007f1a590403bc:   (bad)  
  0x00007f1a590403bd:   (bad)  
  0x00007f1a590403be:   (bad)  
  0x00007f1a590403bf:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_mask_cmp_bits [0x00007f1a590403c0, 0x00007f1a59040400] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590403c0:   add    %eax,(%rax)
  0x00007f1a590403c2:   add    %al,(%rax)
  0x00007f1a590403c4:   add    %eax,(%rax)
  0x00007f1a590403c6:   add    %al,(%rax)
  0x00007f1a590403c8:   add    %eax,(%rax)
  0x00007f1a590403ca:   add    %al,(%rax)
  0x00007f1a590403cc:   add    %eax,(%rax)
  0x00007f1a590403ce:   add    %al,(%rax)
  0x00007f1a590403d0:   add    %eax,(%rax)
  0x00007f1a590403d2:   add    %al,(%rax)
  0x00007f1a590403d4:   add    %eax,(%rax)
  0x00007f1a590403d6:   add    %al,(%rax)
  0x00007f1a590403d8:   add    %eax,(%rax)
  0x00007f1a590403da:   add    %al,(%rax)
  0x00007f1a590403dc:   add    %eax,(%rax)
  0x00007f1a590403de:   add    %al,(%rax)
  0x00007f1a590403e0:   add    %eax,(%rax)
  0x00007f1a590403e2:   add    %al,(%rax)
  0x00007f1a590403e4:   add    %eax,(%rax)
  0x00007f1a590403e6:   add    %al,(%rax)
  0x00007f1a590403e8:   add    %eax,(%rax)
  0x00007f1a590403ea:   add    %al,(%rax)
  0x00007f1a590403ec:   add    %eax,(%rax)
  0x00007f1a590403ee:   add    %al,(%rax)
  0x00007f1a590403f0:   add    %eax,(%rax)
  0x00007f1a590403f2:   add    %al,(%rax)
  0x00007f1a590403f4:   add    %eax,(%rax)
  0x00007f1a590403f6:   add    %al,(%rax)
  0x00007f1a590403f8:   add    %eax,(%rax)
  0x00007f1a590403fa:   add    %al,(%rax)
  0x00007f1a590403fc:   add    %eax,(%rax)
  0x00007f1a590403fe:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_short_to_byte_mask [0x00007f1a59040400, 0x00007f1a59040440] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040400:   incl   (%rax)
  0x00007f1a59040402:   incl   (%rax)
  0x00007f1a59040404:   incl   (%rax)
  0x00007f1a59040406:   incl   (%rax)
  0x00007f1a59040408:   incl   (%rax)
  0x00007f1a5904040a:   incl   (%rax)
  0x00007f1a5904040c:   incl   (%rax)
  0x00007f1a5904040e:   incl   (%rax)
  0x00007f1a59040410:   incl   (%rax)
  0x00007f1a59040412:   incl   (%rax)
  0x00007f1a59040414:   incl   (%rax)
  0x00007f1a59040416:   incl   (%rax)
  0x00007f1a59040418:   incl   (%rax)
  0x00007f1a5904041a:   incl   (%rax)
  0x00007f1a5904041c:   incl   (%rax)
  0x00007f1a5904041e:   incl   (%rax)
  0x00007f1a59040420:   incl   (%rax)
  0x00007f1a59040422:   incl   (%rax)
  0x00007f1a59040424:   incl   (%rax)
  0x00007f1a59040426:   incl   (%rax)
  0x00007f1a59040428:   incl   (%rax)
  0x00007f1a5904042a:   incl   (%rax)
  0x00007f1a5904042c:   incl   (%rax)
  0x00007f1a5904042e:   incl   (%rax)
  0x00007f1a59040430:   incl   (%rax)
  0x00007f1a59040432:   incl   (%rax)
  0x00007f1a59040434:   incl   (%rax)
  0x00007f1a59040436:   incl   (%rax)
  0x00007f1a59040438:   incl   (%rax)
  0x00007f1a5904043a:   incl   (%rax)
  0x00007f1a5904043c:   incl   (%rax)
  0x00007f1a5904043e:   incl   (%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_byte_perm_mask [0x00007f1a59040440, 0x00007f1a59040480] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040440:   add    %eax,(%rax)
  0x00007f1a59040442:   add    %al,(%rax)
  0x00007f1a59040444:   add    %al,(%rax)
  0x00007f1a59040446:   add    %al,(%rax)
  0x00007f1a59040448:   add    (%rax),%eax
  0x00007f1a5904044a:   add    %al,(%rax)
  0x00007f1a5904044c:   add    %al,(%rax)
  0x00007f1a5904044e:   add    %al,(%rax)
  0x00007f1a59040450:   add    $0x0,%eax
  0x00007f1a59040455:   add    %al,(%rax)
  0x00007f1a59040457:   add    %al,(%rdi)
  0x00007f1a59040459:   add    %al,(%rax)
  0x00007f1a5904045b:   add    %al,(%rax)
  0x00007f1a5904045d:   add    %al,(%rax)
  0x00007f1a5904045f:   add    %al,(%rax)
  0x00007f1a59040461:   add    %al,(%rax)
  0x00007f1a59040463:   add    %al,(%rax)
  0x00007f1a59040465:   add    %al,(%rax)
  0x00007f1a59040467:   add    %al,(%rdx)
  0x00007f1a59040469:   add    %al,(%rax)
  0x00007f1a5904046b:   add    %al,(%rax)
  0x00007f1a5904046d:   add    %al,(%rax)
  0x00007f1a5904046f:   add    %al,(%rax,%rax,1)
  0x00007f1a59040472:   add    %al,(%rax)
  0x00007f1a59040474:   add    %al,(%rax)
  0x00007f1a59040476:   add    %al,(%rax)
  0x00007f1a59040478:   (bad)  
  0x00007f1a59040479:   add    %al,(%rax)
  0x00007f1a5904047b:   add    %al,(%rax)
  0x00007f1a5904047d:   add    %al,(%rax)
  0x00007f1a5904047f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_to_byte_mask [0x00007f1a59040480, 0x00007f1a590404c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040480:   incl   (%rax)
  0x00007f1a59040482:   add    %al,(%rax)
  0x00007f1a59040484:   incl   (%rax)
  0x00007f1a59040486:   add    %al,(%rax)
  0x00007f1a59040488:   incl   (%rax)
  0x00007f1a5904048a:   add    %al,(%rax)
  0x00007f1a5904048c:   incl   (%rax)
  0x00007f1a5904048e:   add    %al,(%rax)
  0x00007f1a59040490:   incl   (%rax)
  0x00007f1a59040492:   add    %al,(%rax)
  0x00007f1a59040494:   incl   (%rax)
  0x00007f1a59040496:   add    %al,(%rax)
  0x00007f1a59040498:   incl   (%rax)
  0x00007f1a5904049a:   add    %al,(%rax)
  0x00007f1a5904049c:   incl   (%rax)
  0x00007f1a5904049e:   add    %al,(%rax)
  0x00007f1a590404a0:   incl   (%rax)
  0x00007f1a590404a2:   add    %al,(%rax)
  0x00007f1a590404a4:   incl   (%rax)
  0x00007f1a590404a6:   add    %al,(%rax)
  0x00007f1a590404a8:   incl   (%rax)
  0x00007f1a590404aa:   add    %al,(%rax)
  0x00007f1a590404ac:   incl   (%rax)
  0x00007f1a590404ae:   add    %al,(%rax)
  0x00007f1a590404b0:   incl   (%rax)
  0x00007f1a590404b2:   add    %al,(%rax)
  0x00007f1a590404b4:   incl   (%rax)
  0x00007f1a590404b6:   add    %al,(%rax)
  0x00007f1a590404b8:   incl   (%rax)
  0x00007f1a590404ba:   add    %al,(%rax)
  0x00007f1a590404bc:   incl   (%rax)
  0x00007f1a590404be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_to_short_mask [0x00007f1a590404c0, 0x00007f1a59040500] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590404c0:   (bad)  
  0x00007f1a590404c1:   incl   (%rax)
  0x00007f1a590404c3:   add    %bh,%bh
  0x00007f1a590404c5:   incl   (%rax)
  0x00007f1a590404c7:   add    %bh,%bh
  0x00007f1a590404c9:   incl   (%rax)
  0x00007f1a590404cb:   add    %bh,%bh
  0x00007f1a590404cd:   incl   (%rax)
  0x00007f1a590404cf:   add    %bh,%bh
  0x00007f1a590404d1:   incl   (%rax)
  0x00007f1a590404d3:   add    %bh,%bh
  0x00007f1a590404d5:   incl   (%rax)
  0x00007f1a590404d7:   add    %bh,%bh
  0x00007f1a590404d9:   incl   (%rax)
  0x00007f1a590404db:   add    %bh,%bh
  0x00007f1a590404dd:   incl   (%rax)
  0x00007f1a590404df:   add    %bh,%bh
  0x00007f1a590404e1:   incl   (%rax)
  0x00007f1a590404e3:   add    %bh,%bh
  0x00007f1a590404e5:   incl   (%rax)
  0x00007f1a590404e7:   add    %bh,%bh
  0x00007f1a590404e9:   incl   (%rax)
  0x00007f1a590404eb:   add    %bh,%bh
  0x00007f1a590404ed:   incl   (%rax)
  0x00007f1a590404ef:   add    %bh,%bh
  0x00007f1a590404f1:   incl   (%rax)
  0x00007f1a590404f3:   add    %bh,%bh
  0x00007f1a590404f5:   incl   (%rax)
  0x00007f1a590404f7:   add    %bh,%bh
  0x00007f1a590404f9:   incl   (%rax)
  0x00007f1a590404fb:   add    %bh,%bh
  0x00007f1a590404fd:   incl   (%rax)
  0x00007f1a590404ff:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_32_bit_mask [0x00007f1a59040500, 0x00007f1a59040540] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040500:   (bad)  
  0x00007f1a59040501:   (bad)  
  0x00007f1a59040502:   (bad)  
  0x00007f1a59040503:   incl   (%rax)
  0x00007f1a59040505:   add    %al,(%rax)
  0x00007f1a59040507:   add    %al,(%rax)
  0x00007f1a59040509:   add    %al,(%rax)
  0x00007f1a5904050b:   add    %al,(%rax)
  0x00007f1a5904050d:   add    %al,(%rax)
  0x00007f1a5904050f:   add    %al,(%rax)
  0x00007f1a59040511:   add    %al,(%rax)
  0x00007f1a59040513:   add    %al,(%rax)
  0x00007f1a59040515:   add    %al,(%rax)
  0x00007f1a59040517:   add    %al,(%rax)
  0x00007f1a59040519:   add    %al,(%rax)
  0x00007f1a5904051b:   add    %al,(%rax)
  0x00007f1a5904051d:   add    %al,(%rax)
  0x00007f1a5904051f:   add    %al,(%rax)
  0x00007f1a59040521:   add    %al,(%rax)
  0x00007f1a59040523:   add    %al,(%rax)
  0x00007f1a59040525:   add    %al,(%rax)
  0x00007f1a59040527:   add    %al,(%rax)
  0x00007f1a59040529:   add    %al,(%rax)
  0x00007f1a5904052b:   add    %al,(%rax)
  0x00007f1a5904052d:   add    %al,(%rax)
  0x00007f1a5904052f:   add    %al,(%rax)
  0x00007f1a59040531:   add    %al,(%rax)
  0x00007f1a59040533:   add    %al,(%rax)
  0x00007f1a59040535:   add    %al,(%rax)
  0x00007f1a59040537:   add    %al,(%rax)
  0x00007f1a59040539:   add    %al,(%rax)
  0x00007f1a5904053b:   add    %al,(%rax)
  0x00007f1a5904053d:   add    %al,(%rax)
  0x00007f1a5904053f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_64_bit_mask [0x00007f1a59040540, 0x00007f1a59040580] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040540:   (bad)  
  0x00007f1a59040541:   (bad)  
  0x00007f1a59040542:   (bad)  
  0x00007f1a59040543:   (bad)  
  0x00007f1a59040544:   (bad)  
  0x00007f1a59040545:   (bad)  
  0x00007f1a59040546:   (bad)  
  0x00007f1a59040547:   incl   (%rax)
  0x00007f1a59040549:   add    %al,(%rax)
  0x00007f1a5904054b:   add    %al,(%rax)
  0x00007f1a5904054d:   add    %al,(%rax)
  0x00007f1a5904054f:   add    %al,(%rax)
  0x00007f1a59040551:   add    %al,(%rax)
  0x00007f1a59040553:   add    %al,(%rax)
  0x00007f1a59040555:   add    %al,(%rax)
  0x00007f1a59040557:   add    %al,(%rax)
  0x00007f1a59040559:   add    %al,(%rax)
  0x00007f1a5904055b:   add    %al,(%rax)
  0x00007f1a5904055d:   add    %al,(%rax)
  0x00007f1a5904055f:   add    %al,(%rax)
  0x00007f1a59040561:   add    %al,(%rax)
  0x00007f1a59040563:   add    %al,(%rax)
  0x00007f1a59040565:   add    %al,(%rax)
  0x00007f1a59040567:   add    %al,(%rax)
  0x00007f1a59040569:   add    %al,(%rax)
  0x00007f1a5904056b:   add    %al,(%rax)
  0x00007f1a5904056d:   add    %al,(%rax)
  0x00007f1a5904056f:   add    %al,(%rax)
  0x00007f1a59040571:   add    %al,(%rax)
  0x00007f1a59040573:   add    %al,(%rax)
  0x00007f1a59040575:   add    %al,(%rax)
  0x00007f1a59040577:   add    %al,(%rax)
  0x00007f1a59040579:   add    %al,(%rax)
  0x00007f1a5904057b:   add    %al,(%rax)
  0x00007f1a5904057d:   add    %al,(%rax)
  0x00007f1a5904057f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_shuffle_mask [0x00007f1a59040580, 0x00007f1a590405c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040580:   add    %al,(%rcx)
  0x00007f1a59040582:   add    (%rbx),%al
  0x00007f1a59040584:   add    %al,(%rcx)
  0x00007f1a59040586:   add    (%rbx),%al
  0x00007f1a59040588:   add    %al,(%rcx)
  0x00007f1a5904058a:   add    (%rbx),%al
  0x00007f1a5904058c:   add    %al,(%rcx)
  0x00007f1a5904058e:   add    (%rbx),%al
  0x00007f1a59040590:   add    %al,(%rcx)
  0x00007f1a59040592:   add    (%rbx),%al
  0x00007f1a59040594:   add    %al,(%rcx)
  0x00007f1a59040596:   add    (%rbx),%al
  0x00007f1a59040598:   add    %al,(%rcx)
  0x00007f1a5904059a:   add    (%rbx),%al
  0x00007f1a5904059c:   add    %al,(%rcx)
  0x00007f1a5904059e:   add    (%rbx),%al
  0x00007f1a590405a0:   add    %al,(%rcx)
  0x00007f1a590405a2:   add    (%rbx),%al
  0x00007f1a590405a4:   add    %al,(%rcx)
  0x00007f1a590405a6:   add    (%rbx),%al
  0x00007f1a590405a8:   add    %al,(%rcx)
  0x00007f1a590405aa:   add    (%rbx),%al
  0x00007f1a590405ac:   add    %al,(%rcx)
  0x00007f1a590405ae:   add    (%rbx),%al
  0x00007f1a590405b0:   add    %al,(%rcx)
  0x00007f1a590405b2:   add    (%rbx),%al
  0x00007f1a590405b4:   add    %al,(%rcx)
  0x00007f1a590405b6:   add    (%rbx),%al
  0x00007f1a590405b8:   add    %al,(%rcx)
  0x00007f1a590405ba:   add    (%rbx),%al
  0x00007f1a590405bc:   add    %al,(%rcx)
  0x00007f1a590405be:   add    (%rbx),%al
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_byte_shuffle_mask [0x00007f1a590405c0, 0x00007f1a590405e0] (32 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590405c0:   jo     Stub::<unknown> 0x00007f1a59040632
  0x00007f1a590405c2:   jo     Stub::<unknown> 0x00007f1a59040634
  0x00007f1a590405c4:   jo     Stub::<unknown> 0x00007f1a59040636
  0x00007f1a590405c6:   jo     Stub::<unknown> 0x00007f1a59040638
  0x00007f1a590405c8:   jo     Stub::<unknown> 0x00007f1a5904063a
  0x00007f1a590405ca:   jo     Stub::<unknown> 0x00007f1a5904063c
  0x00007f1a590405cc:   jo     Stub::<unknown> 0x00007f1a5904063e
  0x00007f1a590405ce:   jo     Stub::<unknown> 0x00007f1a59040640
  0x00007f1a590405d0:   lock lock lock lock lock lock lock lock lock lock lock lock lock lock
  0x00007f1a590405de:   lock
  0x00007f1a590405df:   lock
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_short_shuffle_mask [0x00007f1a590405e0, 0x00007f1a59040620] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590405e0:   add    %al,(%rcx)
  0x00007f1a590405e2:   add    %al,(%rcx)
  0x00007f1a590405e4:   add    %al,(%rcx)
  0x00007f1a590405e6:   add    %al,(%rcx)
  0x00007f1a590405e8:   add    %al,(%rcx)
  0x00007f1a590405ea:   add    %al,(%rcx)
  0x00007f1a590405ec:   add    %al,(%rcx)
  0x00007f1a590405ee:   add    %al,(%rcx)
  0x00007f1a590405f0:   add    %al,(%rcx)
  0x00007f1a590405f2:   add    %al,(%rcx)
  0x00007f1a590405f4:   add    %al,(%rcx)
  0x00007f1a590405f6:   add    %al,(%rcx)
  0x00007f1a590405f8:   add    %al,(%rcx)
  0x00007f1a590405fa:   add    %al,(%rcx)
  0x00007f1a590405fc:   add    %al,(%rcx)
  0x00007f1a590405fe:   add    %al,(%rcx)
  0x00007f1a59040600:   add    %al,(%rcx)
  0x00007f1a59040602:   add    %al,(%rcx)
  0x00007f1a59040604:   add    %al,(%rcx)
  0x00007f1a59040606:   add    %al,(%rcx)
  0x00007f1a59040608:   add    %al,(%rcx)
  0x00007f1a5904060a:   add    %al,(%rcx)
  0x00007f1a5904060c:   add    %al,(%rcx)
  0x00007f1a5904060e:   add    %al,(%rcx)
  0x00007f1a59040610:   add    %al,(%rcx)
  0x00007f1a59040612:   add    %al,(%rcx)
  0x00007f1a59040614:   add    %al,(%rcx)
  0x00007f1a59040616:   add    %al,(%rcx)
  0x00007f1a59040618:   add    %al,(%rcx)
  0x00007f1a5904061a:   add    %al,(%rcx)
  0x00007f1a5904061c:   add    %al,(%rcx)
  0x00007f1a5904061e:   add    %al,(%rcx)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_long_shuffle_mask [0x00007f1a59040620, 0x00007f1a59040660] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040620:   add    %al,(%rax)
  0x00007f1a59040622:   add    %al,(%rax)
  0x00007f1a59040624:   add    %eax,(%rax)
  0x00007f1a59040626:   add    %al,(%rax)
  0x00007f1a59040628:   add    %al,(%rax)
  0x00007f1a5904062a:   add    %al,(%rax)
  0x00007f1a5904062c:   add    %eax,(%rax)
  0x00007f1a5904062e:   add    %al,(%rax)
  0x00007f1a59040630:   add    %al,(%rax)
  0x00007f1a59040632:   add    %al,(%rax)
  0x00007f1a59040634:   add    %eax,(%rax)
  0x00007f1a59040636:   add    %al,(%rax)
  0x00007f1a59040638:   add    %al,(%rax)
  0x00007f1a5904063a:   add    %al,(%rax)
  0x00007f1a5904063c:   add    %eax,(%rax)
  0x00007f1a5904063e:   add    %al,(%rax)
  0x00007f1a59040640:   add    %al,(%rax)
  0x00007f1a59040642:   add    %al,(%rax)
  0x00007f1a59040644:   add    %eax,(%rax)
  0x00007f1a59040646:   add    %al,(%rax)
  0x00007f1a59040648:   add    %al,(%rax)
  0x00007f1a5904064a:   add    %al,(%rax)
  0x00007f1a5904064c:   add    %eax,(%rax)
  0x00007f1a5904064e:   add    %al,(%rax)
  0x00007f1a59040650:   add    %al,(%rax)
  0x00007f1a59040652:   add    %al,(%rax)
  0x00007f1a59040654:   add    %eax,(%rax)
  0x00007f1a59040656:   add    %al,(%rax)
  0x00007f1a59040658:   add    %al,(%rax)
  0x00007f1a5904065a:   add    %al,(%rax)
  0x00007f1a5904065c:   add    %eax,(%rax)
  0x00007f1a5904065e:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_long_sign_mask [0x00007f1a59040660, 0x00007f1a590406a0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040660:   add    %al,(%rax)
  0x00007f1a59040662:   add    %al,(%rax)
  0x00007f1a59040664:   add    %al,(%rax)
  0x00007f1a59040666:   add    %al,0x0(%rax)
  0x00007f1a5904066c:   add    %al,(%rax)
  0x00007f1a5904066e:   add    %al,0x0(%rax)
  0x00007f1a59040674:   add    %al,(%rax)
  0x00007f1a59040676:   add    %al,0x0(%rax)
  0x00007f1a5904067c:   add    %al,(%rax)
  0x00007f1a5904067e:   add    %al,0x0(%rax)
  0x00007f1a59040684:   add    %al,(%rax)
  0x00007f1a59040686:   add    %al,0x0(%rax)
  0x00007f1a5904068c:   add    %al,(%rax)
  0x00007f1a5904068e:   add    %al,0x0(%rax)
  0x00007f1a59040694:   add    %al,(%rax)
  0x00007f1a59040696:   add    %al,0x0(%rax)
  0x00007f1a5904069c:   add    %al,(%rax)
  0x00007f1a5904069e:   .byte 0x0
  0x00007f1a5904069f:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::iota_indices [0x00007f1a590406a0, 0x00007f1a59040820] (384 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590406a0:   add    %al,(%rcx)
  0x00007f1a590406a2:   add    (%rbx),%al
  0x00007f1a590406a4:   add    $0x5,%al
  0x00007f1a590406a6:   (bad)  
  0x00007f1a590406a7:   (bad)  
  0x00007f1a590406a8:   or     %cl,(%rcx)
  0x00007f1a590406aa:   or     (%rbx),%cl
  0x00007f1a590406ac:   or     $0xd,%al
  0x00007f1a590406ae:   (bad)  
  0x00007f1a590406af:   movups (%rcx),%xmm2
  0x00007f1a590406b2:   adc    (%rbx),%dl
  0x00007f1a590406b4:   adc    $0x15,%al
  0x00007f1a590406b6:   (bad)  
  0x00007f1a590406b7:   (bad)  
  0x00007f1a590406b8:   sbb    %bl,(%rcx)
  0x00007f1a590406ba:   sbb    (%rbx),%bl
  0x00007f1a590406bc:   sbb    $0x1d,%al
  0x00007f1a590406be:   (bad)  
  0x00007f1a590406bf:   (bad)  
  0x00007f1a590406c0:   and    %ah,(%rcx)
  0x00007f1a590406c2:   and    (%rbx),%ah
  0x00007f1a590406c4:   and    $0x25,%al
  0x00007f1a590406c6:   es (bad) 
  0x00007f1a590406c8:   sub    %ch,(%rcx)
  0x00007f1a590406ca:   sub    (%rbx),%ch
  0x00007f1a590406cc:   sub    $0x2d,%al
  0x00007f1a590406ce:   cs (bad) 
  0x00007f1a590406d0:   xor    %dh,(%rcx)
  0x00007f1a590406d2:   xor    (%rbx),%dh
  0x00007f1a590406d4:   xor    $0x35,%al
  0x00007f1a590406d6:   ss (bad) 
  0x00007f1a590406d8:   cmp    %bh,(%rcx)
  0x00007f1a590406da:   cmp    (%rbx),%bh
  0x00007f1a590406dc:   cmp    $0x3d,%al
  0x00007f1a590406de:   ds (bad) 
  0x00007f1a590406e0:   add    %al,(%rax)
  0x00007f1a590406e2:   add    %eax,(%rax)
  0x00007f1a590406e4:   add    (%rax),%al
  0x00007f1a590406e6:   add    (%rax),%eax
  0x00007f1a590406e8:   add    $0x0,%al
  0x00007f1a590406ea:   add    $0x7000600,%eax
  0x00007f1a590406ef:   add    %cl,(%rax)
  0x00007f1a590406f1:   add    %cl,(%rcx)
  0x00007f1a590406f3:   add    %cl,(%rdx)
  0x00007f1a590406f5:   add    %cl,(%rbx)
  0x00007f1a590406f7:   add    %cl,(%rax,%rax,1)
  0x00007f1a590406fa:   or     $0xf000e00,%eax
  0x00007f1a590406ff:   add    %dl,(%rax)
  0x00007f1a59040701:   add    %dl,(%rcx)
  0x00007f1a59040703:   add    %dl,(%rdx)
  0x00007f1a59040705:   add    %dl,(%rbx)
  0x00007f1a59040707:   add    %dl,(%rax,%rax,1)
  0x00007f1a5904070a:   adc    $0x17001600,%eax
  0x00007f1a5904070f:   add    %bl,(%rax)
  0x00007f1a59040711:   add    %bl,(%rcx)
  0x00007f1a59040713:   add    %bl,(%rdx)
  0x00007f1a59040715:   add    %bl,(%rbx)
  0x00007f1a59040717:   add    %bl,(%rax,%rax,1)
  0x00007f1a5904071a:   sbb    $0x1f001e00,%eax
  0x00007f1a5904071f:   add    %al,(%rax)
  0x00007f1a59040721:   add    %al,(%rax)
  0x00007f1a59040723:   add    %al,(%rcx)
  0x00007f1a59040725:   add    %al,(%rax)
  0x00007f1a59040727:   add    %al,(%rdx)
  0x00007f1a59040729:   add    %al,(%rax)
  0x00007f1a5904072b:   add    %al,(%rbx)
  0x00007f1a5904072d:   add    %al,(%rax)
  0x00007f1a5904072f:   add    %al,(%rax,%rax,1)
  0x00007f1a59040732:   add    %al,(%rax)
  0x00007f1a59040734:   add    $0x6000000,%eax
  0x00007f1a59040739:   add    %al,(%rax)
  0x00007f1a5904073b:   add    %al,(%rdi)
  0x00007f1a5904073d:   add    %al,(%rax)
  0x00007f1a5904073f:   add    %cl,(%rax)
  0x00007f1a59040741:   add    %al,(%rax)
  0x00007f1a59040743:   add    %cl,(%rcx)
  0x00007f1a59040745:   add    %al,(%rax)
  0x00007f1a59040747:   add    %cl,(%rdx)
  0x00007f1a59040749:   add    %al,(%rax)
  0x00007f1a5904074b:   add    %cl,(%rbx)
  0x00007f1a5904074d:   add    %al,(%rax)
  0x00007f1a5904074f:   add    %cl,(%rax,%rax,1)
  0x00007f1a59040752:   add    %al,(%rax)
  0x00007f1a59040754:   or     $0xe000000,%eax
  0x00007f1a59040759:   add    %al,(%rax)
  0x00007f1a5904075b:   add    %cl,(%rdi)
  0x00007f1a5904075d:   add    %al,(%rax)
  0x00007f1a5904075f:   add    %al,(%rax)
  0x00007f1a59040761:   add    %al,(%rax)
  0x00007f1a59040763:   add    %al,(%rax)
  0x00007f1a59040765:   add    %al,(%rax)
  0x00007f1a59040767:   add    %al,(%rcx)
  0x00007f1a59040769:   add    %al,(%rax)
  0x00007f1a5904076b:   add    %al,(%rax)
  0x00007f1a5904076d:   add    %al,(%rax)
  0x00007f1a5904076f:   add    %al,(%rdx)
  0x00007f1a59040771:   add    %al,(%rax)
  0x00007f1a59040773:   add    %al,(%rax)
  0x00007f1a59040775:   add    %al,(%rax)
  0x00007f1a59040777:   add    %al,(%rbx)
  0x00007f1a59040779:   add    %al,(%rax)
  0x00007f1a5904077b:   add    %al,(%rax)
  0x00007f1a5904077d:   add    %al,(%rax)
  0x00007f1a5904077f:   add    %al,(%rax,%rax,1)
  0x00007f1a59040782:   add    %al,(%rax)
  0x00007f1a59040784:   add    %al,(%rax)
  0x00007f1a59040786:   add    %al,(%rax)
  0x00007f1a59040788:   add    $0x0,%eax
  0x00007f1a5904078d:   add    %al,(%rax)
  0x00007f1a5904078f:   add    %al,(%rsi)
  0x00007f1a59040791:   add    %al,(%rax)
  0x00007f1a59040793:   add    %al,(%rax)
  0x00007f1a59040795:   add    %al,(%rax)
  0x00007f1a59040797:   add    %al,(%rdi)
  0x00007f1a59040799:   add    %al,(%rax)
  0x00007f1a5904079b:   add    %al,(%rax)
  0x00007f1a5904079d:   add    %al,(%rax)
  0x00007f1a5904079f:   add    %al,(%rax)
  0x00007f1a590407a1:   add    %al,(%rax)
  0x00007f1a590407a3:   add    %al,(%rax)
  0x00007f1a590407a5:   add    %al,0x3f(%rax)
  0x00007f1a590407ab:   add    %al,(%rax)
  0x00007f1a590407ae:   rex
  0x00007f1a590407af:   add    %al,(%rax)
  0x00007f1a590407b2:   addb   $0x0,0x0(%rax)
  0x00007f1a590407b6:   movabs 0xe0000040c0000040,%al
  0x00007f1a590407bf:   add    %al,(%rax)
  0x00007f1a590407c2:   add    %al,0x0(%rcx)
  0x00007f1a590407c5:   add    %dl,(%rax)
  0x00007f1a590407c7:   add    %al,(%r8)
  0x00007f1a590407ca:   and    %al,0x0(%rcx)
  0x00007f1a590407cd:   add    %dh,(%rax)
  0x00007f1a590407cf:   add    %al,(%r8)
  0x00007f1a590407d2:   rex
  0x00007f1a590407d3:   add    %al,(%r8)
  0x00007f1a590407d6:   push   %rax
  0x00007f1a590407d7:   add    %al,(%r8)
  0x00007f1a590407da:   (bad)  
  0x00007f1a590407db:   add    %al,(%r8)
  0x00007f1a590407de:   jo     Stub::<unknown> 0x00007f1a59040821
  0x00007f1a590407e0:   add    %al,(%rax)
  0x00007f1a590407e2:   add    %al,(%rax)
  0x00007f1a590407e4:   add    %al,(%rax)
  0x00007f1a590407e6:   add    %al,(%rax)
  0x00007f1a590407e8:   add    %al,(%rax)
  0x00007f1a590407ea:   add    %al,(%rax)
  0x00007f1a590407ec:   add    %al,(%rax)
  0x00007f1a590407ee:   lock (bad) 
  0x00007f1a590407f0:   add    %al,(%rax)
  0x00007f1a590407f2:   add    %al,(%rax)
  0x00007f1a590407f4:   add    %al,(%rax)
  0x00007f1a590407f6:   add    %al,0x0(%rax)
  0x00007f1a590407f9:   add    %al,(%rax)
  0x00007f1a590407fb:   add    %al,(%rax)
  0x00007f1a590407fd:   add    %cl,(%rax)
  0x00007f1a590407ff:   add    %al,(%rax)
  0x00007f1a59040802:   add    %al,(%rax)
  0x00007f1a59040804:   add    %al,(%rax)
  0x00007f1a59040806:   adc    %al,0x0(%rax)
  0x00007f1a59040809:   add    %al,(%rax)
  0x00007f1a5904080b:   add    %al,(%rax)
  0x00007f1a5904080d:   add    %dl,(%rax,%rax,2)
  0x00007f1a59040810:   add    %al,(%rax)
  0x00007f1a59040812:   add    %al,(%rax)
  0x00007f1a59040814:   add    %al,(%rax)
  0x00007f1a59040816:   sbb    %al,0x0(%rax)
  0x00007f1a59040819:   add    %al,(%rax)
  0x00007f1a5904081b:   add    %al,(%rax)
  0x00007f1a5904081d:   add    %bl,(%rax,%rax,2)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::count_leading_zeros_lut [0x00007f1a59040840, 0x00007f1a59040880] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040840:   add    $0x3,%al
  0x00007f1a59040842:   add    (%rdx),%al
  0x00007f1a59040844:   add    %eax,(%rcx)
  0x00007f1a59040846:   add    %eax,(%rcx)
  0x00007f1a59040848:   add    %al,(%rax)
  0x00007f1a5904084a:   add    %al,(%rax)
  0x00007f1a5904084c:   add    %al,(%rax)
  0x00007f1a5904084e:   add    %al,(%rax)
  0x00007f1a59040850:   add    $0x3,%al
  0x00007f1a59040852:   add    (%rdx),%al
  0x00007f1a59040854:   add    %eax,(%rcx)
  0x00007f1a59040856:   add    %eax,(%rcx)
  0x00007f1a59040858:   add    %al,(%rax)
  0x00007f1a5904085a:   add    %al,(%rax)
  0x00007f1a5904085c:   add    %al,(%rax)
  0x00007f1a5904085e:   add    %al,(%rax)
  0x00007f1a59040860:   add    $0x3,%al
  0x00007f1a59040862:   add    (%rdx),%al
  0x00007f1a59040864:   add    %eax,(%rcx)
  0x00007f1a59040866:   add    %eax,(%rcx)
  0x00007f1a59040868:   add    %al,(%rax)
  0x00007f1a5904086a:   add    %al,(%rax)
  0x00007f1a5904086c:   add    %al,(%rax)
  0x00007f1a5904086e:   add    %al,(%rax)
  0x00007f1a59040870:   add    $0x3,%al
  0x00007f1a59040872:   add    (%rdx),%al
  0x00007f1a59040874:   add    %eax,(%rcx)
  0x00007f1a59040876:   add    %eax,(%rcx)
  0x00007f1a59040878:   add    %al,(%rax)
  0x00007f1a5904087a:   add    %al,(%rax)
  0x00007f1a5904087c:   add    %al,(%rax)
  0x00007f1a5904087e:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::reverse_bit_lut [0x00007f1a59040880, 0x00007f1a590408c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040880:   add    %cl,(%rax)
  0x00007f1a59040882:   add    $0xc,%al
  0x00007f1a59040884:   add    (%rdx),%cl
  0x00007f1a59040886:   (bad)  
  0x00007f1a59040887:   (bad)  
  0x00007f1a59040888:   add    %ecx,(%rcx)
  0x00007f1a5904088a:   add    $0x70b030d,%eax
  0x00007f1a5904088f:   str    (%rax)
  0x00007f1a59040892:   add    $0xc,%al
  0x00007f1a59040894:   add    (%rdx),%cl
  0x00007f1a59040896:   (bad)  
  0x00007f1a59040897:   (bad)  
  0x00007f1a59040898:   add    %ecx,(%rcx)
  0x00007f1a5904089a:   add    $0x70b030d,%eax
  0x00007f1a5904089f:   str    (%rax)
  0x00007f1a590408a2:   add    $0xc,%al
  0x00007f1a590408a4:   add    (%rdx),%cl
  0x00007f1a590408a6:   (bad)  
  0x00007f1a590408a7:   (bad)  
  0x00007f1a590408a8:   add    %ecx,(%rcx)
  0x00007f1a590408aa:   add    $0x70b030d,%eax
  0x00007f1a590408af:   str    (%rax)
  0x00007f1a590408b2:   add    $0xc,%al
  0x00007f1a590408b4:   add    (%rdx),%cl
  0x00007f1a590408b6:   (bad)  
  0x00007f1a590408b7:   (bad)  
  0x00007f1a590408b8:   add    %ecx,(%rcx)
  0x00007f1a590408ba:   add    $0x70b030d,%eax
  0x00007f1a590408bf:   .byte 0xf
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_long [0x00007f1a590408c0, 0x00007f1a59040900] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590408c0:   (bad)  
  0x00007f1a590408c1:   (bad)  
  0x00007f1a590408c2:   add    $0x1020304,%eax
  0x00007f1a590408c7:   add    %cl,(%rdi)
  0x00007f1a590408c9:   (bad)  
  0x00007f1a590408ca:   or     $0x90a0b0c,%eax
  0x00007f1a590408cf:   or     %al,(%rdi)
  0x00007f1a590408d1:   (bad)  
  0x00007f1a590408d2:   add    $0x1020304,%eax
  0x00007f1a590408d7:   add    %cl,(%rdi)
  0x00007f1a590408d9:   (bad)  
  0x00007f1a590408da:   or     $0x90a0b0c,%eax
  0x00007f1a590408df:   or     %al,(%rdi)
  0x00007f1a590408e1:   (bad)  
  0x00007f1a590408e2:   add    $0x1020304,%eax
  0x00007f1a590408e7:   add    %cl,(%rdi)
  0x00007f1a590408e9:   (bad)  
  0x00007f1a590408ea:   or     $0x90a0b0c,%eax
  0x00007f1a590408ef:   or     %al,(%rdi)
  0x00007f1a590408f1:   (bad)  
  0x00007f1a590408f2:   add    $0x1020304,%eax
  0x00007f1a590408f7:   add    %cl,(%rdi)
  0x00007f1a590408f9:   (bad)  
  0x00007f1a590408fa:   or     $0x90a0b0c,%eax
  0x00007f1a590408ff:   .byte 0x8
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_int [0x00007f1a59040900, 0x00007f1a59040940] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040900:   add    (%rdx),%eax
  0x00007f1a59040902:   add    %eax,(%rax)
  0x00007f1a59040904:   (bad)  
  0x00007f1a59040905:   (bad)  
  0x00007f1a59040906:   add    $0x90a0b04,%eax
  0x00007f1a5904090b:   or     %cl,(%rdi)
  0x00007f1a5904090d:   (bad)  
  0x00007f1a5904090e:   or     $0x102030c,%eax
  0x00007f1a59040913:   add    %al,(%rdi)
  0x00007f1a59040915:   (bad)  
  0x00007f1a59040916:   add    $0x90a0b04,%eax
  0x00007f1a5904091b:   or     %cl,(%rdi)
  0x00007f1a5904091d:   (bad)  
  0x00007f1a5904091e:   or     $0x102030c,%eax
  0x00007f1a59040923:   add    %al,(%rdi)
  0x00007f1a59040925:   (bad)  
  0x00007f1a59040926:   add    $0x90a0b04,%eax
  0x00007f1a5904092b:   or     %cl,(%rdi)
  0x00007f1a5904092d:   (bad)  
  0x00007f1a5904092e:   or     $0x102030c,%eax
  0x00007f1a59040933:   add    %al,(%rdi)
  0x00007f1a59040935:   (bad)  
  0x00007f1a59040936:   add    $0x90a0b04,%eax
  0x00007f1a5904093b:   or     %cl,(%rdi)
  0x00007f1a5904093d:   (bad)  
  0x00007f1a5904093e:   .byte 0xd
  0x00007f1a5904093f:   .byte 0xc
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_short [0x00007f1a59040940, 0x00007f1a59040980] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040940:   add    %eax,(%rax)
  0x00007f1a59040942:   add    (%rdx),%eax
  0x00007f1a59040944:   add    $0x9060704,%eax
  0x00007f1a59040949:   or     %cl,(%rbx)
  0x00007f1a5904094b:   or     0x10e0f0c(%rip),%cl        # 0x00007f1a5a12185d
  0x00007f1a59040951:   add    %al,(%rbx)
  0x00007f1a59040953:   add    0x9060704(%rip),%al        # 0x00007f1a620a105d
  0x00007f1a59040959:   or     %cl,(%rbx)
  0x00007f1a5904095b:   or     0x10e0f0c(%rip),%cl        # 0x00007f1a5a12186d
  0x00007f1a59040961:   add    %al,(%rbx)
  0x00007f1a59040963:   add    0x9060704(%rip),%al        # 0x00007f1a620a106d
  0x00007f1a59040969:   or     %cl,(%rbx)
  0x00007f1a5904096b:   or     0x10e0f0c(%rip),%cl        # 0x00007f1a5a12187d
  0x00007f1a59040971:   add    %al,(%rbx)
  0x00007f1a59040973:   add    0x9060704(%rip),%al        # 0x00007f1a620a107d
  0x00007f1a59040979:   or     %cl,(%rbx)
  0x00007f1a5904097b:   .byte 0xa
  0x00007f1a5904097c:   .byte 0xd
  0x00007f1a5904097d:   or     $0xf,%al
  0x00007f1a5904097f:   (bad)  
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::popcount_lut [0x00007f1a59040980, 0x00007f1a590409c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040980:   add    %al,(%rcx)
  0x00007f1a59040982:   add    %eax,(%rdx)
  0x00007f1a59040984:   add    %eax,(%rdx)
  0x00007f1a59040986:   add    (%rbx),%al
  0x00007f1a59040988:   add    %eax,(%rdx)
  0x00007f1a5904098a:   add    (%rbx),%al
  0x00007f1a5904098c:   add    (%rbx),%al
  0x00007f1a5904098e:   add    (%rax,%rax,1),%eax
  0x00007f1a59040991:   add    %eax,(%rcx)
  0x00007f1a59040993:   add    (%rcx),%al
  0x00007f1a59040995:   add    (%rdx),%al
  0x00007f1a59040997:   add    (%rcx),%eax
  0x00007f1a59040999:   add    (%rdx),%al
  0x00007f1a5904099b:   add    (%rdx),%eax
  0x00007f1a5904099d:   add    (%rbx),%eax
  0x00007f1a5904099f:   add    $0x0,%al
  0x00007f1a590409a1:   add    %eax,(%rcx)
  0x00007f1a590409a3:   add    (%rcx),%al
  0x00007f1a590409a5:   add    (%rdx),%al
  0x00007f1a590409a7:   add    (%rcx),%eax
  0x00007f1a590409a9:   add    (%rdx),%al
  0x00007f1a590409ab:   add    (%rdx),%eax
  0x00007f1a590409ad:   add    (%rbx),%eax
  0x00007f1a590409af:   add    $0x0,%al
  0x00007f1a590409b1:   add    %eax,(%rcx)
  0x00007f1a590409b3:   add    (%rcx),%al
  0x00007f1a590409b5:   add    (%rdx),%al
  0x00007f1a590409b7:   add    (%rcx),%eax
  0x00007f1a590409b9:   add    (%rdx),%al
  0x00007f1a590409bb:   add    (%rdx),%eax
  0x00007f1a590409bd:   add    (%rbx),%eax
  0x00007f1a590409bf:   .byte 0x4
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::_data_cache_writeback [0x00007f1a590409c0, 0x00007f1a590409ca] (10 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590409c0:   push   %rbp
  0x00007f1a590409c1:   mov    %rsp,%rbp
  0x00007f1a590409c4:   clwb   (%rdi)
  0x00007f1a590409c8:   leaveq 
  0x00007f1a590409c9:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::_data_cache_writeback_sync [0x00007f1a590409e0, 0x00007f1a590409f2] (18 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590409e0:   push   %rbp
  0x00007f1a590409e1:   mov    %rsp,%rbp
  0x00007f1a590409e4:   cmp    $0x0,%edi
  0x00007f1a590409e7:   jne    Stub::_data_cache_writeback_sync+16 0x00007f1a590409f0
  0x00007f1a590409ed:   sfence 
  0x00007f1a590409f0:   leaveq 
  0x00007f1a590409f1:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_disjoint_arraycopy [0x00007f1a59040a00, 0x00007f1a59040ab3] (179 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040a00:   push   %rbp
  0x00007f1a59040a01:   mov    %rsp,%rbp
  0x00007f1a59040a04:   mov    %rdx,%rcx
  0x00007f1a59040a07:   shr    $0x3,%rdx
  0x00007f1a59040a0b:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f1a59040a10:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f1a59040a15:   neg    %rdx
  0x00007f1a59040a18:   jmpq   Stub::jbyte_disjoint_arraycopy+136 0x00007f1a59040a88
  0x00007f1a59040a1d:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f1a59040a22:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f1a59040a27:   inc    %rdx
  0x00007f1a59040a2a:   jne    Stub::jbyte_disjoint_arraycopy+29 0x00007f1a59040a1d
  0x00007f1a59040a2c:   test   $0x4,%cl
  0x00007f1a59040a2f:   je     Stub::jbyte_disjoint_arraycopy+63 0x00007f1a59040a3f
  0x00007f1a59040a31:   mov    0x8(%rdi),%eax
  0x00007f1a59040a34:   mov    %eax,0x8(%rsi)
  0x00007f1a59040a37:   add    $0x4,%rdi
  0x00007f1a59040a3b:   add    $0x4,%rsi
  0x00007f1a59040a3f:   test   $0x2,%cl
  0x00007f1a59040a42:   je     Stub::jbyte_disjoint_arraycopy+84 0x00007f1a59040a54
  0x00007f1a59040a44:   mov    0x8(%rdi),%ax
  0x00007f1a59040a48:   mov    %ax,0x8(%rsi)
  0x00007f1a59040a4c:   add    $0x2,%rdi
  0x00007f1a59040a50:   add    $0x2,%rsi
  0x00007f1a59040a54:   test   $0x1,%cl
  0x00007f1a59040a57:   je     Stub::jbyte_disjoint_arraycopy+95 0x00007f1a59040a5f
  0x00007f1a59040a59:   mov    0x8(%rdi),%al
  0x00007f1a59040a5c:   mov    %al,0x8(%rsi)
  0x00007f1a59040a5f:   xor    %rax,%rax
  0x00007f1a59040a62:   vzeroupper 
  0x00007f1a59040a65:   leaveq 
  0x00007f1a59040a66:   retq   
  0x00007f1a59040a67:   nopw   0x0(%rax,%rax,1)
  0x00007f1a59040a70:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f1a59040a76:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f1a59040a7c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f1a59040a82:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f1a59040a88:   add    $0x8,%rdx
  0x00007f1a59040a8c:   jle    Stub::jbyte_disjoint_arraycopy+112 0x00007f1a59040a70
  0x00007f1a59040a8e:   sub    $0x4,%rdx
  0x00007f1a59040a92:   jg     Stub::jbyte_disjoint_arraycopy+164 0x00007f1a59040aa4
  0x00007f1a59040a94:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f1a59040a9a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f1a59040aa0:   add    $0x4,%rdx
  0x00007f1a59040aa4:   sub    $0x4,%rdx
  0x00007f1a59040aa8:   jl     Stub::jbyte_disjoint_arraycopy+29 0x00007f1a59040a1d
  0x00007f1a59040aae:   jmpq   Stub::jbyte_disjoint_arraycopy+44 0x00007f1a59040a2c
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_arraycopy [0x00007f1a59040ac0, 0x00007f1a59040b7e] (190 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040ac0:   push   %rbp
  0x00007f1a59040ac1:   mov    %rsp,%rbp
  0x00007f1a59040ac4:   cmp    %rdi,%rsi
  0x00007f1a59040ac7:   lea    (%rdi,%rdx,1),%rax
  0x00007f1a59040acb:   jbe    Stub::jbyte_disjoint_arraycopy+4 0x00007f1a59040a04
  0x00007f1a59040ad1:   cmp    %rax,%rsi
  0x00007f1a59040ad4:   jae    Stub::jbyte_disjoint_arraycopy+4 0x00007f1a59040a04
  0x00007f1a59040ada:   mov    %rdx,%rcx
  0x00007f1a59040add:   shr    $0x3,%rdx
  0x00007f1a59040ae1:   test   $0x1,%cl
  0x00007f1a59040ae4:   je     Stub::jbyte_arraycopy+53 0x00007f1a59040af5
  0x00007f1a59040aea:   mov    -0x1(%rdi,%rcx,1),%al
  0x00007f1a59040aee:   mov    %al,-0x1(%rsi,%rcx,1)
  0x00007f1a59040af2:   dec    %rcx
  0x00007f1a59040af5:   test   $0x2,%cl
  0x00007f1a59040af8:   je     Stub::jbyte_arraycopy+72 0x00007f1a59040b08
  0x00007f1a59040afe:   mov    -0x2(%rdi,%rcx,1),%ax
  0x00007f1a59040b03:   mov    %ax,-0x2(%rsi,%rcx,1)
  0x00007f1a59040b08:   test   $0x4,%cl
  0x00007f1a59040b0b:   je     Stub::jbyte_arraycopy+150 0x00007f1a59040b56
  0x00007f1a59040b11:   mov    (%rdi,%rdx,8),%eax
  0x00007f1a59040b14:   mov    %eax,(%rsi,%rdx,8)
  0x00007f1a59040b17:   jmpq   Stub::jbyte_arraycopy+150 0x00007f1a59040b56
  0x00007f1a59040b1c:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f1a59040b21:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f1a59040b26:   dec    %rdx
  0x00007f1a59040b29:   jne    Stub::jbyte_arraycopy+92 0x00007f1a59040b1c
  0x00007f1a59040b2b:   xor    %rax,%rax
  0x00007f1a59040b2e:   vzeroupper 
  0x00007f1a59040b31:   leaveq 
  0x00007f1a59040b32:   retq   
  0x00007f1a59040b33:   nopw   0x0(%rax,%rax,1)
  0x00007f1a59040b3c:   data16 data16 xchg %ax,%ax
  0x00007f1a59040b40:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f1a59040b46:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f1a59040b4c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f1a59040b51:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f1a59040b56:   sub    $0x8,%rdx
  0x00007f1a59040b5a:   jge    Stub::jbyte_arraycopy+128 0x00007f1a59040b40
  0x00007f1a59040b5c:   add    $0x4,%rdx
  0x00007f1a59040b60:   jl     Stub::jbyte_arraycopy+176 0x00007f1a59040b70
  0x00007f1a59040b62:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f1a59040b67:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f1a59040b6c:   sub    $0x4,%rdx
  0x00007f1a59040b70:   add    $0x4,%rdx
  0x00007f1a59040b74:   jg     Stub::jbyte_arraycopy+92 0x00007f1a59040b1c
  0x00007f1a59040b76:   xor    %rax,%rax
  0x00007f1a59040b79:   vzeroupper 
  0x00007f1a59040b7c:   leaveq 
  0x00007f1a59040b7d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_disjoint_arraycopy [0x00007f1a59040b80, 0x00007f1a59040c1c] (156 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040b80:   push   %rbp
  0x00007f1a59040b81:   mov    %rsp,%rbp
  0x00007f1a59040b84:   mov    %rdx,%rcx
  0x00007f1a59040b87:   shr    $0x2,%rdx
  0x00007f1a59040b8b:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f1a59040b90:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f1a59040b95:   neg    %rdx
  0x00007f1a59040b98:   jmpq   Stub::jshort_disjoint_arraycopy+120 0x00007f1a59040bf8
  0x00007f1a59040b9d:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f1a59040ba2:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f1a59040ba7:   inc    %rdx
  0x00007f1a59040baa:   jne    Stub::jshort_disjoint_arraycopy+29 0x00007f1a59040b9d
  0x00007f1a59040bac:   test   $0x2,%cl
  0x00007f1a59040baf:   je     Stub::jshort_disjoint_arraycopy+63 0x00007f1a59040bbf
  0x00007f1a59040bb1:   mov    0x8(%rdi),%eax
  0x00007f1a59040bb4:   mov    %eax,0x8(%rsi)
  0x00007f1a59040bb7:   add    $0x4,%rdi
  0x00007f1a59040bbb:   add    $0x4,%rsi
  0x00007f1a59040bbf:   test   $0x1,%cl
  0x00007f1a59040bc2:   je     Stub::jshort_disjoint_arraycopy+76 0x00007f1a59040bcc
  0x00007f1a59040bc4:   mov    0x8(%rdi),%ax
  0x00007f1a59040bc8:   mov    %ax,0x8(%rsi)
  0x00007f1a59040bcc:   xor    %rax,%rax
  0x00007f1a59040bcf:   vzeroupper 
  0x00007f1a59040bd2:   leaveq 
  0x00007f1a59040bd3:   retq   
  0x00007f1a59040bd4:   nopl   0x0(%rax,%rax,1)
  0x00007f1a59040bdc:   data16 data16 xchg %ax,%ax
  0x00007f1a59040be0:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f1a59040be6:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f1a59040bec:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f1a59040bf2:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f1a59040bf8:   add    $0x8,%rdx
  0x00007f1a59040bfc:   jle    Stub::jshort_disjoint_arraycopy+96 0x00007f1a59040be0
  0x00007f1a59040bfe:   sub    $0x4,%rdx
  0x00007f1a59040c02:   jg     Stub::jshort_disjoint_arraycopy+148 0x00007f1a59040c14
  0x00007f1a59040c04:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f1a59040c0a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f1a59040c10:   add    $0x4,%rdx
  0x00007f1a59040c14:   sub    $0x4,%rdx
  0x00007f1a59040c18:   jl     Stub::jshort_disjoint_arraycopy+29 0x00007f1a59040b9d
  0x00007f1a59040c1a:   jmp    Stub::jshort_disjoint_arraycopy+44 0x00007f1a59040bac
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_arraycopy [0x00007f1a59040c20, 0x00007f1a59040cbe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040c20:   push   %rbp
  0x00007f1a59040c21:   mov    %rsp,%rbp
  0x00007f1a59040c24:   cmp    %rdi,%rsi
  0x00007f1a59040c27:   lea    (%rdi,%rdx,2),%rax
  0x00007f1a59040c2b:   jbe    Stub::jshort_disjoint_arraycopy+4 0x00007f1a59040b84
  0x00007f1a59040c31:   cmp    %rax,%rsi
  0x00007f1a59040c34:   jae    Stub::jshort_disjoint_arraycopy+4 0x00007f1a59040b84
  0x00007f1a59040c3a:   mov    %rdx,%rcx
  0x00007f1a59040c3d:   shr    $0x2,%rdx
  0x00007f1a59040c41:   test   $0x1,%cl
  0x00007f1a59040c44:   je     Stub::jshort_arraycopy+48 0x00007f1a59040c50
  0x00007f1a59040c46:   mov    -0x2(%rdi,%rcx,2),%ax
  0x00007f1a59040c4b:   mov    %ax,-0x2(%rsi,%rcx,2)
  0x00007f1a59040c50:   test   $0x2,%cl
  0x00007f1a59040c53:   je     Stub::jshort_arraycopy+118 0x00007f1a59040c96
  0x00007f1a59040c59:   mov    (%rdi,%rdx,8),%eax
  0x00007f1a59040c5c:   mov    %eax,(%rsi,%rdx,8)
  0x00007f1a59040c5f:   jmpq   Stub::jshort_arraycopy+118 0x00007f1a59040c96
  0x00007f1a59040c64:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f1a59040c69:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f1a59040c6e:   dec    %rdx
  0x00007f1a59040c71:   jne    Stub::jshort_arraycopy+68 0x00007f1a59040c64
  0x00007f1a59040c73:   xor    %rax,%rax
  0x00007f1a59040c76:   vzeroupper 
  0x00007f1a59040c79:   leaveq 
  0x00007f1a59040c7a:   retq   
  0x00007f1a59040c7b:   nopl   0x0(%rax,%rax,1)
  0x00007f1a59040c80:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f1a59040c86:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f1a59040c8c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f1a59040c91:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f1a59040c96:   sub    $0x8,%rdx
  0x00007f1a59040c9a:   jge    Stub::jshort_arraycopy+96 0x00007f1a59040c80
  0x00007f1a59040c9c:   add    $0x4,%rdx
  0x00007f1a59040ca0:   jl     Stub::jshort_arraycopy+144 0x00007f1a59040cb0
  0x00007f1a59040ca2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f1a59040ca7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f1a59040cac:   sub    $0x4,%rdx
  0x00007f1a59040cb0:   add    $0x4,%rdx
  0x00007f1a59040cb4:   jg     Stub::jshort_arraycopy+68 0x00007f1a59040c64
  0x00007f1a59040cb6:   xor    %rax,%rax
  0x00007f1a59040cb9:   vzeroupper 
  0x00007f1a59040cbc:   leaveq 
  0x00007f1a59040cbd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_disjoint_arraycopy [0x00007f1a59040cc0, 0x00007f1a59040d3c] (124 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040cc0:   push   %rbp
  0x00007f1a59040cc1:   mov    %rsp,%rbp
  0x00007f1a59040cc4:   mov    %rdx,%rcx
  0x00007f1a59040cc7:   shr    %rdx
  0x00007f1a59040cca:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f1a59040ccf:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f1a59040cd4:   neg    %rdx
  0x00007f1a59040cd7:   jmpq   Stub::jint_disjoint_arraycopy+88 0x00007f1a59040d18
  0x00007f1a59040cdc:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f1a59040ce1:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f1a59040ce6:   inc    %rdx
  0x00007f1a59040ce9:   jne    Stub::jint_disjoint_arraycopy+28 0x00007f1a59040cdc
  0x00007f1a59040ceb:   test   $0x1,%cl
  0x00007f1a59040cee:   je     Stub::jint_disjoint_arraycopy+54 0x00007f1a59040cf6
  0x00007f1a59040cf0:   mov    0x8(%rdi),%eax
  0x00007f1a59040cf3:   mov    %eax,0x8(%rsi)
  0x00007f1a59040cf6:   vzeroupper 
  0x00007f1a59040cf9:   xor    %rax,%rax
  0x00007f1a59040cfc:   leaveq 
  0x00007f1a59040cfd:   retq   
  0x00007f1a59040cfe:   xchg   %ax,%ax
  0x00007f1a59040d00:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f1a59040d06:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f1a59040d0c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f1a59040d12:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f1a59040d18:   add    $0x8,%rdx
  0x00007f1a59040d1c:   jle    Stub::jint_disjoint_arraycopy+64 0x00007f1a59040d00
  0x00007f1a59040d1e:   sub    $0x4,%rdx
  0x00007f1a59040d22:   jg     Stub::jint_disjoint_arraycopy+116 0x00007f1a59040d34
  0x00007f1a59040d24:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f1a59040d2a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f1a59040d30:   add    $0x4,%rdx
  0x00007f1a59040d34:   sub    $0x4,%rdx
  0x00007f1a59040d38:   jl     Stub::jint_disjoint_arraycopy+28 0x00007f1a59040cdc
  0x00007f1a59040d3a:   jmp    Stub::jint_disjoint_arraycopy+43 0x00007f1a59040ceb
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_arraycopy [0x00007f1a59040d40, 0x00007f1a59040dce] (142 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040d40:   push   %rbp
  0x00007f1a59040d41:   mov    %rsp,%rbp
  0x00007f1a59040d44:   cmp    %rdi,%rsi
  0x00007f1a59040d47:   lea    (%rdi,%rdx,4),%rax
  0x00007f1a59040d4b:   jbe    Stub::jint_disjoint_arraycopy+4 0x00007f1a59040cc4
  0x00007f1a59040d51:   cmp    %rax,%rsi
  0x00007f1a59040d54:   jae    Stub::jint_disjoint_arraycopy+4 0x00007f1a59040cc4
  0x00007f1a59040d5a:   mov    %rdx,%rcx
  0x00007f1a59040d5d:   shr    %rdx
  0x00007f1a59040d60:   test   $0x1,%cl
  0x00007f1a59040d63:   je     Stub::jint_arraycopy+102 0x00007f1a59040da6
  0x00007f1a59040d69:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f1a59040d6d:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f1a59040d71:   jmpq   Stub::jint_arraycopy+102 0x00007f1a59040da6
  0x00007f1a59040d76:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f1a59040d7b:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f1a59040d80:   dec    %rdx
  0x00007f1a59040d83:   jne    Stub::jint_arraycopy+54 0x00007f1a59040d76
  0x00007f1a59040d85:   xor    %rax,%rax
  0x00007f1a59040d88:   vzeroupper 
  0x00007f1a59040d8b:   leaveq 
  0x00007f1a59040d8c:   retq   
  0x00007f1a59040d8d:   data16 xchg %ax,%ax
  0x00007f1a59040d90:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f1a59040d96:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f1a59040d9c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f1a59040da1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f1a59040da6:   sub    $0x8,%rdx
  0x00007f1a59040daa:   jge    Stub::jint_arraycopy+80 0x00007f1a59040d90
  0x00007f1a59040dac:   add    $0x4,%rdx
  0x00007f1a59040db0:   jl     Stub::jint_arraycopy+128 0x00007f1a59040dc0
  0x00007f1a59040db2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f1a59040db7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f1a59040dbc:   sub    $0x4,%rdx
  0x00007f1a59040dc0:   add    $0x4,%rdx
  0x00007f1a59040dc4:   jg     Stub::jint_arraycopy+54 0x00007f1a59040d76
  0x00007f1a59040dc6:   xor    %rax,%rax
  0x00007f1a59040dc9:   vzeroupper 
  0x00007f1a59040dcc:   leaveq 
  0x00007f1a59040dcd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jlong_disjoint_arraycopy [0x00007f1a59040de0, 0x00007f1a59040e52] (114 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040de0:   push   %rbp
  0x00007f1a59040de1:   mov    %rsp,%rbp
  0x00007f1a59040de4:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f1a59040de9:   lea    -0x8(%rsi,%rdx,8),%rcx
  0x00007f1a59040dee:   neg    %rdx
  0x00007f1a59040df1:   jmpq   Stub::jlong_disjoint_arraycopy+72 0x00007f1a59040e28
  0x00007f1a59040df6:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f1a59040dfb:   mov    %rax,0x8(%rcx,%rdx,8)
  0x00007f1a59040e00:   inc    %rdx
  0x00007f1a59040e03:   jne    Stub::jlong_disjoint_arraycopy+22 0x00007f1a59040df6
  0x00007f1a59040e05:   xor    %rax,%rax
  0x00007f1a59040e08:   vzeroupper 
  0x00007f1a59040e0b:   leaveq 
  0x00007f1a59040e0c:   retq   
  0x00007f1a59040e0d:   data16 xchg %ax,%ax
  0x00007f1a59040e10:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f1a59040e16:   vmovdqu %ymm0,-0x38(%rcx,%rdx,8)
  0x00007f1a59040e1c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f1a59040e22:   vmovdqu %ymm1,-0x18(%rcx,%rdx,8)
  0x00007f1a59040e28:   add    $0x8,%rdx
  0x00007f1a59040e2c:   jle    Stub::jlong_disjoint_arraycopy+48 0x00007f1a59040e10
  0x00007f1a59040e2e:   sub    $0x4,%rdx
  0x00007f1a59040e32:   jg     Stub::jlong_disjoint_arraycopy+100 0x00007f1a59040e44
  0x00007f1a59040e34:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f1a59040e3a:   vmovdqu %ymm0,-0x18(%rcx,%rdx,8)
  0x00007f1a59040e40:   add    $0x4,%rdx
  0x00007f1a59040e44:   sub    $0x4,%rdx
  0x00007f1a59040e48:   jl     Stub::jlong_disjoint_arraycopy+22 0x00007f1a59040df6
  0x00007f1a59040e4a:   vzeroupper 
  0x00007f1a59040e4d:   xor    %rax,%rax
  0x00007f1a59040e50:   leaveq 
  0x00007f1a59040e51:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jlong_arraycopy [0x00007f1a59040e60, 0x00007f1a59040ede] (126 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040e60:   push   %rbp
  0x00007f1a59040e61:   mov    %rsp,%rbp
  0x00007f1a59040e64:   cmp    %rdi,%rsi
  0x00007f1a59040e67:   lea    (%rdi,%rdx,8),%rax
  0x00007f1a59040e6b:   jbe    Stub::jlong_disjoint_arraycopy+4 0x00007f1a59040de4
  0x00007f1a59040e71:   cmp    %rax,%rsi
  0x00007f1a59040e74:   jae    Stub::jlong_disjoint_arraycopy+4 0x00007f1a59040de4
  0x00007f1a59040e7a:   jmpq   Stub::jlong_arraycopy+86 0x00007f1a59040eb6
  0x00007f1a59040e7f:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f1a59040e84:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f1a59040e89:   dec    %rdx
  0x00007f1a59040e8c:   jne    Stub::jlong_arraycopy+31 0x00007f1a59040e7f
  0x00007f1a59040e8e:   xor    %rax,%rax
  0x00007f1a59040e91:   vzeroupper 
  0x00007f1a59040e94:   leaveq 
  0x00007f1a59040e95:   retq   
  0x00007f1a59040e96:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a59040ea0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f1a59040ea6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f1a59040eac:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f1a59040eb1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f1a59040eb6:   sub    $0x8,%rdx
  0x00007f1a59040eba:   jge    Stub::jlong_arraycopy+64 0x00007f1a59040ea0
  0x00007f1a59040ebc:   add    $0x4,%rdx
  0x00007f1a59040ec0:   jl     Stub::jlong_arraycopy+112 0x00007f1a59040ed0
  0x00007f1a59040ec2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f1a59040ec7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f1a59040ecc:   sub    $0x4,%rdx
  0x00007f1a59040ed0:   add    $0x4,%rdx
  0x00007f1a59040ed4:   jg     Stub::jlong_arraycopy+31 0x00007f1a59040e7f
  0x00007f1a59040ed6:   vzeroupper 
  0x00007f1a59040ed9:   xor    %rax,%rax
  0x00007f1a59040edc:   leaveq 
  0x00007f1a59040edd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_disjoint_arraycopy [0x00007f1a59040ee0, 0x00007f1a59041083] (419 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59040ee0:   push   %rbp
  0x00007f1a59040ee1:   mov    %rsp,%rbp
  0x00007f1a59040ee4:   mov    %rsi,%r11
  0x00007f1a59040ee7:   cmpb   $0x0,0x40(%r15)
  0x00007f1a59040eec:   je     Stub::oop_disjoint_arraycopy+156 0x00007f1a59040f7c
  0x00007f1a59040ef2:   sub    $0x50,%rsp
  0x00007f1a59040ef6:   mov    %rax,(%rsp)
  0x00007f1a59040efa:   mov    %rcx,0x8(%rsp)
  0x00007f1a59040eff:   mov    %rdx,0x10(%rsp)
  0x00007f1a59040f04:   mov    %rsi,0x18(%rsp)
  0x00007f1a59040f09:   mov    %rdi,0x20(%rsp)
  0x00007f1a59040f0e:   mov    %r8,0x28(%rsp)
  0x00007f1a59040f13:   mov    %r9,0x30(%rsp)
  0x00007f1a59040f18:   mov    %r10,0x38(%rsp)
  0x00007f1a59040f1d:   mov    %r11,0x40(%rsp)
  0x00007f1a59040f22:   mov    %rsi,%rdi
  0x00007f1a59040f25:   mov    %rdx,%rsi
  0x00007f1a59040f28:   test   $0xf,%spl
  0x00007f1a59040f2c:   je     Stub::oop_disjoint_arraycopy+100 0x00007f1a59040f44
  0x00007f1a59040f32:   sub    $0x8,%rsp
  0x00007f1a59040f36:   callq  0x00007f1a6392cd00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f1a59040f3b:   add    $0x8,%rsp
  0x00007f1a59040f3f:   jmpq   Stub::oop_disjoint_arraycopy+105 0x00007f1a59040f49
  0x00007f1a59040f44:   callq  0x00007f1a6392cd00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f1a59040f49:   mov    0x40(%rsp),%r11
  0x00007f1a59040f4e:   mov    0x38(%rsp),%r10
  0x00007f1a59040f53:   mov    0x30(%rsp),%r9
  0x00007f1a59040f58:   mov    0x28(%rsp),%r8
  0x00007f1a59040f5d:   mov    0x20(%rsp),%rdi
  0x00007f1a59040f62:   mov    0x18(%rsp),%rsi
  0x00007f1a59040f67:   mov    0x10(%rsp),%rdx
  0x00007f1a59040f6c:   mov    0x8(%rsp),%rcx
  0x00007f1a59040f71:   mov    (%rsp),%rax
  0x00007f1a59040f75:   add    $0x50,%rsp
  0x00007f1a59040f79:   vzeroupper 
  0x00007f1a59040f7c:   mov    %rdx,%rcx
  0x00007f1a59040f7f:   shr    %rdx
  0x00007f1a59040f82:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f1a59040f87:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f1a59040f8c:   neg    %rdx
  0x00007f1a59040f8f:   jmpq   Stub::oop_disjoint_arraycopy+376 0x00007f1a59041058
  0x00007f1a59040f94:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f1a59040f99:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f1a59040f9e:   inc    %rdx
  0x00007f1a59040fa1:   jne    Stub::oop_disjoint_arraycopy+180 0x00007f1a59040f94
  0x00007f1a59040fa3:   test   $0x1,%cl
  0x00007f1a59040fa6:   je     Stub::oop_disjoint_arraycopy+206 0x00007f1a59040fae
  0x00007f1a59040fa8:   mov    0x8(%rdi),%eax
  0x00007f1a59040fab:   mov    %eax,0x8(%rsi)
  0x00007f1a59040fae:   sub    $0x50,%rsp
  0x00007f1a59040fb2:   mov    %rax,(%rsp)
  0x00007f1a59040fb6:   mov    %rcx,0x8(%rsp)
  0x00007f1a59040fbb:   mov    %rdx,0x10(%rsp)
  0x00007f1a59040fc0:   mov    %rsi,0x18(%rsp)
  0x00007f1a59040fc5:   mov    %rdi,0x20(%rsp)
  0x00007f1a59040fca:   mov    %r8,0x28(%rsp)
  0x00007f1a59040fcf:   mov    %r9,0x30(%rsp)
  0x00007f1a59040fd4:   mov    %r10,0x38(%rsp)
  0x00007f1a59040fd9:   mov    %r11,0x40(%rsp)
  0x00007f1a59040fde:   mov    %r11,%rdi
  0x00007f1a59040fe1:   mov    %rcx,%rsi
  0x00007f1a59040fe4:   test   $0xf,%spl
  0x00007f1a59040fe8:   je     Stub::oop_disjoint_arraycopy+288 0x00007f1a59041000
  0x00007f1a59040fee:   sub    $0x8,%rsp
  0x00007f1a59040ff2:   callq  0x00007f1a6392cd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f1a59040ff7:   add    $0x8,%rsp
  0x00007f1a59040ffb:   jmpq   Stub::oop_disjoint_arraycopy+293 0x00007f1a59041005
  0x00007f1a59041000:   callq  0x00007f1a6392cd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f1a59041005:   mov    0x40(%rsp),%r11
  0x00007f1a5904100a:   mov    0x38(%rsp),%r10
  0x00007f1a5904100f:   mov    0x30(%rsp),%r9
  0x00007f1a59041014:   mov    0x28(%rsp),%r8
  0x00007f1a59041019:   mov    0x20(%rsp),%rdi
  0x00007f1a5904101e:   mov    0x18(%rsp),%rsi
  0x00007f1a59041023:   mov    0x10(%rsp),%rdx
  0x00007f1a59041028:   mov    0x8(%rsp),%rcx
  0x00007f1a5904102d:   mov    (%rsp),%rax
  0x00007f1a59041031:   add    $0x50,%rsp
  0x00007f1a59041035:   vzeroupper 
  0x00007f1a59041038:   vzeroupper 
  0x00007f1a5904103b:   xor    %rax,%rax
  0x00007f1a5904103e:   leaveq 
  0x00007f1a5904103f:   retq   
  0x00007f1a59041040:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f1a59041046:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f1a5904104c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f1a59041052:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f1a59041058:   add    $0x8,%rdx
  0x00007f1a5904105c:   jle    Stub::oop_disjoint_arraycopy+352 0x00007f1a59041040
  0x00007f1a5904105e:   sub    $0x4,%rdx
  0x00007f1a59041062:   jg     Stub::oop_disjoint_arraycopy+404 0x00007f1a59041074
  0x00007f1a59041064:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f1a5904106a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f1a59041070:   add    $0x4,%rdx
  0x00007f1a59041074:   sub    $0x4,%rdx
  0x00007f1a59041078:   jl     Stub::oop_disjoint_arraycopy+180 0x00007f1a59040f94
  0x00007f1a5904107e:   jmpq   Stub::oop_disjoint_arraycopy+195 0x00007f1a59040fa3
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_arraycopy [0x00007f1a590410a0, 0x00007f1a59041258] (440 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590410a0:   push   %rbp
  0x00007f1a590410a1:   mov    %rsp,%rbp
  0x00007f1a590410a4:   cmp    %rdi,%rsi
  0x00007f1a590410a7:   lea    (%rdi,%rdx,4),%rax
  0x00007f1a590410ab:   jbe    Stub::oop_disjoint_arraycopy+4 0x00007f1a59040ee4
  0x00007f1a590410b1:   cmp    %rax,%rsi
  0x00007f1a590410b4:   jae    Stub::oop_disjoint_arraycopy+4 0x00007f1a59040ee4
  0x00007f1a590410ba:   cmpb   $0x0,0x40(%r15)
  0x00007f1a590410bf:   je     Stub::oop_arraycopy+175 0x00007f1a5904114f
  0x00007f1a590410c5:   sub    $0x50,%rsp
  0x00007f1a590410c9:   mov    %rax,(%rsp)
  0x00007f1a590410cd:   mov    %rcx,0x8(%rsp)
  0x00007f1a590410d2:   mov    %rdx,0x10(%rsp)
  0x00007f1a590410d7:   mov    %rsi,0x18(%rsp)
  0x00007f1a590410dc:   mov    %rdi,0x20(%rsp)
  0x00007f1a590410e1:   mov    %r8,0x28(%rsp)
  0x00007f1a590410e6:   mov    %r9,0x30(%rsp)
  0x00007f1a590410eb:   mov    %r10,0x38(%rsp)
  0x00007f1a590410f0:   mov    %r11,0x40(%rsp)
  0x00007f1a590410f5:   mov    %rsi,%rdi
  0x00007f1a590410f8:   mov    %rdx,%rsi
  0x00007f1a590410fb:   test   $0xf,%spl
  0x00007f1a590410ff:   je     Stub::oop_arraycopy+119 0x00007f1a59041117
  0x00007f1a59041105:   sub    $0x8,%rsp
  0x00007f1a59041109:   callq  0x00007f1a6392cd00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f1a5904110e:   add    $0x8,%rsp
  0x00007f1a59041112:   jmpq   Stub::oop_arraycopy+124 0x00007f1a5904111c
  0x00007f1a59041117:   callq  0x00007f1a6392cd00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f1a5904111c:   mov    0x40(%rsp),%r11
  0x00007f1a59041121:   mov    0x38(%rsp),%r10
  0x00007f1a59041126:   mov    0x30(%rsp),%r9
  0x00007f1a5904112b:   mov    0x28(%rsp),%r8
  0x00007f1a59041130:   mov    0x20(%rsp),%rdi
  0x00007f1a59041135:   mov    0x18(%rsp),%rsi
  0x00007f1a5904113a:   mov    0x10(%rsp),%rdx
  0x00007f1a5904113f:   mov    0x8(%rsp),%rcx
  0x00007f1a59041144:   mov    (%rsp),%rax
  0x00007f1a59041148:   add    $0x50,%rsp
  0x00007f1a5904114c:   vzeroupper 
  0x00007f1a5904114f:   mov    %rdx,%rcx
  0x00007f1a59041152:   shr    %rdx
  0x00007f1a59041155:   test   $0x1,%cl
  0x00007f1a59041158:   je     Stub::oop_arraycopy+262 0x00007f1a590411a6
  0x00007f1a5904115e:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f1a59041162:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f1a59041166:   jmpq   Stub::oop_arraycopy+262 0x00007f1a590411a6
  0x00007f1a5904116b:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f1a59041170:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f1a59041175:   dec    %rdx
  0x00007f1a59041178:   jne    Stub::oop_arraycopy+203 0x00007f1a5904116b
  0x00007f1a5904117a:   jmpq   Stub::oop_arraycopy+294 0x00007f1a590411c6
  0x00007f1a5904117f:   xor    %rax,%rax
  0x00007f1a59041182:   vzeroupper 
  0x00007f1a59041185:   leaveq 
  0x00007f1a59041186:   retq   
  0x00007f1a59041187:   nopw   0x0(%rax,%rax,1)
  0x00007f1a59041190:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f1a59041196:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f1a5904119c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f1a590411a1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f1a590411a6:   sub    $0x8,%rdx
  0x00007f1a590411aa:   jge    Stub::oop_arraycopy+240 0x00007f1a59041190
  0x00007f1a590411ac:   add    $0x4,%rdx
  0x00007f1a590411b0:   jl     Stub::oop_arraycopy+288 0x00007f1a590411c0
  0x00007f1a590411b2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f1a590411b7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f1a590411bc:   sub    $0x4,%rdx
  0x00007f1a590411c0:   add    $0x4,%rdx
  0x00007f1a590411c4:   jg     Stub::oop_arraycopy+203 0x00007f1a5904116b
  0x00007f1a590411c6:   sub    $0x50,%rsp
  0x00007f1a590411ca:   mov    %rax,(%rsp)
  0x00007f1a590411ce:   mov    %rcx,0x8(%rsp)
  0x00007f1a590411d3:   mov    %rdx,0x10(%rsp)
  0x00007f1a590411d8:   mov    %rsi,0x18(%rsp)
  0x00007f1a590411dd:   mov    %rdi,0x20(%rsp)
  0x00007f1a590411e2:   mov    %r8,0x28(%rsp)
  0x00007f1a590411e7:   mov    %r9,0x30(%rsp)
  0x00007f1a590411ec:   mov    %r10,0x38(%rsp)
  0x00007f1a590411f1:   mov    %r11,0x40(%rsp)
  0x00007f1a590411f6:   mov    %rsi,%rdi
  0x00007f1a590411f9:   mov    %rcx,%rsi
  0x00007f1a590411fc:   test   $0xf,%spl
  0x00007f1a59041200:   je     Stub::oop_arraycopy+376 0x00007f1a59041218
  0x00007f1a59041206:   sub    $0x8,%rsp
  0x00007f1a5904120a:   callq  0x00007f1a6392cd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f1a5904120f:   add    $0x8,%rsp
  0x00007f1a59041213:   jmpq   Stub::oop_arraycopy+381 0x00007f1a5904121d
  0x00007f1a59041218:   callq  0x00007f1a6392cd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f1a5904121d:   mov    0x40(%rsp),%r11
  0x00007f1a59041222:   mov    0x38(%rsp),%r10
  0x00007f1a59041227:   mov    0x30(%rsp),%r9
  0x00007f1a5904122c:   mov    0x28(%rsp),%r8
  0x00007f1a59041231:   mov    0x20(%rsp),%rdi
  0x00007f1a59041236:   mov    0x18(%rsp),%rsi
  0x00007f1a5904123b:   mov    0x10(%rsp),%rdx
  0x00007f1a59041240:   mov    0x8(%rsp),%rcx
  0x00007f1a59041245:   mov    (%rsp),%rax
  0x00007f1a59041249:   add    $0x50,%rsp
  0x00007f1a5904124d:   vzeroupper 
  0x00007f1a59041250:   xor    %rax,%rax
  0x00007f1a59041253:   vzeroupper 
  0x00007f1a59041256:   leaveq 
  0x00007f1a59041257:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_disjoint_arraycopy_uninit [0x00007f1a59041260, 0x00007f1a59041373] (275 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59041260:   push   %rbp
  0x00007f1a59041261:   mov    %rsp,%rbp
  0x00007f1a59041264:   mov    %rsi,%r11
  0x00007f1a59041267:   mov    %rdx,%rcx
  0x00007f1a5904126a:   shr    %rdx
  0x00007f1a5904126d:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f1a59041272:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f1a59041277:   neg    %rdx
  0x00007f1a5904127a:   jmpq   Stub::oop_disjoint_arraycopy_uninit+232 0x00007f1a59041348
  0x00007f1a5904127f:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f1a59041284:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f1a59041289:   inc    %rdx
  0x00007f1a5904128c:   jne    Stub::oop_disjoint_arraycopy_uninit+31 0x00007f1a5904127f
  0x00007f1a5904128e:   test   $0x1,%cl
  0x00007f1a59041291:   je     Stub::oop_disjoint_arraycopy_uninit+57 0x00007f1a59041299
  0x00007f1a59041293:   mov    0x8(%rdi),%eax
  0x00007f1a59041296:   mov    %eax,0x8(%rsi)
  0x00007f1a59041299:   sub    $0x50,%rsp
  0x00007f1a5904129d:   mov    %rax,(%rsp)
  0x00007f1a590412a1:   mov    %rcx,0x8(%rsp)
  0x00007f1a590412a6:   mov    %rdx,0x10(%rsp)
  0x00007f1a590412ab:   mov    %rsi,0x18(%rsp)
  0x00007f1a590412b0:   mov    %rdi,0x20(%rsp)
  0x00007f1a590412b5:   mov    %r8,0x28(%rsp)
  0x00007f1a590412ba:   mov    %r9,0x30(%rsp)
  0x00007f1a590412bf:   mov    %r10,0x38(%rsp)
  0x00007f1a590412c4:   mov    %r11,0x40(%rsp)
  0x00007f1a590412c9:   mov    %r11,%rdi
  0x00007f1a590412cc:   mov    %rcx,%rsi
  0x00007f1a590412cf:   test   $0xf,%spl
  0x00007f1a590412d3:   je     Stub::oop_disjoint_arraycopy_uninit+139 0x00007f1a590412eb
  0x00007f1a590412d9:   sub    $0x8,%rsp
  0x00007f1a590412dd:   callq  0x00007f1a6392cd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f1a590412e2:   add    $0x8,%rsp
  0x00007f1a590412e6:   jmpq   Stub::oop_disjoint_arraycopy_uninit+144 0x00007f1a590412f0
  0x00007f1a590412eb:   callq  0x00007f1a6392cd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f1a590412f0:   mov    0x40(%rsp),%r11
  0x00007f1a590412f5:   mov    0x38(%rsp),%r10
  0x00007f1a590412fa:   mov    0x30(%rsp),%r9
  0x00007f1a590412ff:   mov    0x28(%rsp),%r8
  0x00007f1a59041304:   mov    0x20(%rsp),%rdi
  0x00007f1a59041309:   mov    0x18(%rsp),%rsi
  0x00007f1a5904130e:   mov    0x10(%rsp),%rdx
  0x00007f1a59041313:   mov    0x8(%rsp),%rcx
  0x00007f1a59041318:   mov    (%rsp),%rax
  0x00007f1a5904131c:   add    $0x50,%rsp
  0x00007f1a59041320:   vzeroupper 
  0x00007f1a59041323:   vzeroupper 
  0x00007f1a59041326:   xor    %rax,%rax
  0x00007f1a59041329:   leaveq 
  0x00007f1a5904132a:   retq   
  0x00007f1a5904132b:   nopl   0x0(%rax,%rax,1)
  0x00007f1a59041330:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f1a59041336:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f1a5904133c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f1a59041342:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f1a59041348:   add    $0x8,%rdx
  0x00007f1a5904134c:   jle    Stub::oop_disjoint_arraycopy_uninit+208 0x00007f1a59041330
  0x00007f1a5904134e:   sub    $0x4,%rdx
  0x00007f1a59041352:   jg     Stub::oop_disjoint_arraycopy_uninit+260 0x00007f1a59041364
  0x00007f1a59041354:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f1a5904135a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f1a59041360:   add    $0x4,%rdx
  0x00007f1a59041364:   sub    $0x4,%rdx
  0x00007f1a59041368:   jl     Stub::oop_disjoint_arraycopy_uninit+31 0x00007f1a5904127f
  0x00007f1a5904136e:   jmpq   Stub::oop_disjoint_arraycopy_uninit+46 0x00007f1a5904128e
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_arraycopy_uninit [0x00007f1a59041380, 0x00007f1a590414a8] (296 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59041380:   push   %rbp
  0x00007f1a59041381:   mov    %rsp,%rbp
  0x00007f1a59041384:   cmp    %rdi,%rsi
  0x00007f1a59041387:   lea    (%rdi,%rdx,4),%rax
  0x00007f1a5904138b:   jbe    Stub::oop_disjoint_arraycopy_uninit+4 0x00007f1a59041264
  0x00007f1a59041391:   cmp    %rax,%rsi
  0x00007f1a59041394:   jae    Stub::oop_disjoint_arraycopy_uninit+4 0x00007f1a59041264
  0x00007f1a5904139a:   mov    %rdx,%rcx
  0x00007f1a5904139d:   shr    %rdx
  0x00007f1a590413a0:   test   $0x1,%cl
  0x00007f1a590413a3:   je     Stub::oop_arraycopy_uninit+118 0x00007f1a590413f6
  0x00007f1a590413a9:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f1a590413ad:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f1a590413b1:   jmpq   Stub::oop_arraycopy_uninit+118 0x00007f1a590413f6
  0x00007f1a590413b6:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f1a590413bb:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f1a590413c0:   dec    %rdx
  0x00007f1a590413c3:   jne    Stub::oop_arraycopy_uninit+54 0x00007f1a590413b6
  0x00007f1a590413c5:   jmpq   Stub::oop_arraycopy_uninit+150 0x00007f1a59041416
  0x00007f1a590413ca:   xor    %rax,%rax
  0x00007f1a590413cd:   vzeroupper 
  0x00007f1a590413d0:   leaveq 
  0x00007f1a590413d1:   retq   
  0x00007f1a590413d2:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a590413dc:   data16 data16 xchg %ax,%ax
  0x00007f1a590413e0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f1a590413e6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f1a590413ec:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f1a590413f1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f1a590413f6:   sub    $0x8,%rdx
  0x00007f1a590413fa:   jge    Stub::oop_arraycopy_uninit+96 0x00007f1a590413e0
  0x00007f1a590413fc:   add    $0x4,%rdx
  0x00007f1a59041400:   jl     Stub::oop_arraycopy_uninit+144 0x00007f1a59041410
  0x00007f1a59041402:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f1a59041407:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f1a5904140c:   sub    $0x4,%rdx
  0x00007f1a59041410:   add    $0x4,%rdx
  0x00007f1a59041414:   jg     Stub::oop_arraycopy_uninit+54 0x00007f1a590413b6
  0x00007f1a59041416:   sub    $0x50,%rsp
  0x00007f1a5904141a:   mov    %rax,(%rsp)
  0x00007f1a5904141e:   mov    %rcx,0x8(%rsp)
  0x00007f1a59041423:   mov    %rdx,0x10(%rsp)
  0x00007f1a59041428:   mov    %rsi,0x18(%rsp)
  0x00007f1a5904142d:   mov    %rdi,0x20(%rsp)
  0x00007f1a59041432:   mov    %r8,0x28(%rsp)
  0x00007f1a59041437:   mov    %r9,0x30(%rsp)
  0x00007f1a5904143c:   mov    %r10,0x38(%rsp)
  0x00007f1a59041441:   mov    %r11,0x40(%rsp)
  0x00007f1a59041446:   mov    %rsi,%rdi
  0x00007f1a59041449:   mov    %rcx,%rsi
  0x00007f1a5904144c:   test   $0xf,%spl
  0x00007f1a59041450:   je     Stub::oop_arraycopy_uninit+232 0x00007f1a59041468
  0x00007f1a59041456:   sub    $0x8,%rsp
  0x00007f1a5904145a:   callq  0x00007f1a6392cd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f1a5904145f:   add    $0x8,%rsp
  0x00007f1a59041463:   jmpq   Stub::oop_arraycopy_uninit+237 0x00007f1a5904146d
  0x00007f1a59041468:   callq  0x00007f1a6392cd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f1a5904146d:   mov    0x40(%rsp),%r11
  0x00007f1a59041472:   mov    0x38(%rsp),%r10
  0x00007f1a59041477:   mov    0x30(%rsp),%r9
  0x00007f1a5904147c:   mov    0x28(%rsp),%r8
  0x00007f1a59041481:   mov    0x20(%rsp),%rdi
  0x00007f1a59041486:   mov    0x18(%rsp),%rsi
  0x00007f1a5904148b:   mov    0x10(%rsp),%rdx
  0x00007f1a59041490:   mov    0x8(%rsp),%rcx
  0x00007f1a59041495:   mov    (%rsp),%rax
  0x00007f1a59041499:   add    $0x50,%rsp
  0x00007f1a5904149d:   vzeroupper 
  0x00007f1a590414a0:   xor    %rax,%rax
  0x00007f1a590414a3:   vzeroupper 
  0x00007f1a590414a6:   leaveq 
  0x00007f1a590414a7:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::checkcast_arraycopy [0x00007f1a590414c0, 0x00007f1a590416a1] (481 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590414c0:   push   %rbp
  0x00007f1a590414c1:   mov    %rsp,%rbp
  0x00007f1a590414c4:   sub    $0x18,%rsp
  0x00007f1a590414c8:   mov    %r13,(%rsp)
  0x00007f1a590414cc:   mov    %r14,0x8(%rsp)
  0x00007f1a590414d1:   mov    %r10,0x10(%rsp)
  0x00007f1a590414d6:   cmpb   $0x0,0x40(%r15)
  0x00007f1a590414db:   je     Stub::checkcast_arraycopy+171 0x00007f1a5904156b
  0x00007f1a590414e1:   sub    $0x50,%rsp
  0x00007f1a590414e5:   mov    %rax,(%rsp)
  0x00007f1a590414e9:   mov    %rcx,0x8(%rsp)
  0x00007f1a590414ee:   mov    %rdx,0x10(%rsp)
  0x00007f1a590414f3:   mov    %rsi,0x18(%rsp)
  0x00007f1a590414f8:   mov    %rdi,0x20(%rsp)
  0x00007f1a590414fd:   mov    %r8,0x28(%rsp)
  0x00007f1a59041502:   mov    %r9,0x30(%rsp)
  0x00007f1a59041507:   mov    %r10,0x38(%rsp)
  0x00007f1a5904150c:   mov    %r11,0x40(%rsp)
  0x00007f1a59041511:   mov    %rsi,%rdi
  0x00007f1a59041514:   mov    %rdx,%rsi
  0x00007f1a59041517:   test   $0xf,%spl
  0x00007f1a5904151b:   je     Stub::checkcast_arraycopy+115 0x00007f1a59041533
  0x00007f1a59041521:   sub    $0x8,%rsp
  0x00007f1a59041525:   callq  0x00007f1a6392cd00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f1a5904152a:   add    $0x8,%rsp
  0x00007f1a5904152e:   jmpq   Stub::checkcast_arraycopy+120 0x00007f1a59041538
  0x00007f1a59041533:   callq  0x00007f1a6392cd00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f1a59041538:   mov    0x40(%rsp),%r11
  0x00007f1a5904153d:   mov    0x38(%rsp),%r10
  0x00007f1a59041542:   mov    0x30(%rsp),%r9
  0x00007f1a59041547:   mov    0x28(%rsp),%r8
  0x00007f1a5904154c:   mov    0x20(%rsp),%rdi
  0x00007f1a59041551:   mov    0x18(%rsp),%rsi
  0x00007f1a59041556:   mov    0x10(%rsp),%rdx
  0x00007f1a5904155b:   mov    0x8(%rsp),%rcx
  0x00007f1a59041560:   mov    (%rsp),%rax
  0x00007f1a59041564:   add    $0x50,%rsp
  0x00007f1a59041568:   vzeroupper 
  0x00007f1a5904156b:   lea    (%rdi,%rdx,4),%rdi
  0x00007f1a5904156f:   lea    (%rsi,%rdx,4),%r13
  0x00007f1a59041573:   mov    %rdx,%r14
  0x00007f1a59041576:   neg    %rdx
  0x00007f1a59041579:   jne    Stub::checkcast_arraycopy+226 0x00007f1a590415a2
  0x00007f1a5904157f:   xor    %rax,%rax
  0x00007f1a59041582:   jmpq   Stub::checkcast_arraycopy+465 0x00007f1a59041691
  0x00007f1a59041587:   nopw   0x0(%rax,%rax,1)
  0x00007f1a59041590:   shr    $0x3,%rax
  0x00007f1a59041594:   mov    %eax,0x0(%r13,%rdx,4)
  0x00007f1a59041599:   inc    %rdx
  0x00007f1a5904159c:   je     Stub::checkcast_arraycopy+324 0x00007f1a59041604
  0x00007f1a590415a2:   mov    (%rdi,%rdx,4),%eax
  0x00007f1a590415a5:   shl    $0x3,%rax
  0x00007f1a590415a9:   test   %rax,%rax
  0x00007f1a590415ac:   je     Stub::checkcast_arraycopy+208 0x00007f1a59041590
  0x00007f1a590415ae:   mov    0x8(%rax),%r11d
  0x00007f1a590415b2:   movabs $0x800000000,%r10
  0x00007f1a590415bc:   add    %r10,%r11
  0x00007f1a590415bf:   cmp    %r8,%r11
  0x00007f1a590415c2:   je     Stub::checkcast_arraycopy+208 0x00007f1a59041590
  0x00007f1a590415c4:   cmp    (%r11,%rcx,1),%r8
  0x00007f1a590415c8:   je     Stub::checkcast_arraycopy+208 0x00007f1a59041590
  0x00007f1a590415ca:   cmp    $0x20,%ecx
  0x00007f1a590415cd:   jne    Stub::checkcast_arraycopy+308 0x00007f1a590415f4
  0x00007f1a590415d3:   push   %rax
  0x00007f1a590415d4:   mov    %r8,%rax
  0x00007f1a590415d7:   push   %rcx
  0x00007f1a590415d8:   push   %rdi
  0x00007f1a590415d9:   mov    0x28(%r11),%rdi
  0x00007f1a590415dd:   mov    (%rdi),%ecx
  0x00007f1a590415df:   add    $0x8,%rdi
  0x00007f1a590415e3:   test   %rax,%rax
  0x00007f1a590415e6:   repnz scas %es:(%rdi),%rax
  0x00007f1a590415e9:   pop    %rdi
  0x00007f1a590415ea:   pop    %rcx
  0x00007f1a590415eb:   pop    %rax
  0x00007f1a590415ec:   jne    Stub::checkcast_arraycopy+308 0x00007f1a590415f4
  0x00007f1a590415ee:   mov    %r8,0x20(%r11)
  0x00007f1a590415f2:   jmp    Stub::checkcast_arraycopy+208 0x00007f1a59041590
  0x00007f1a590415f4:   add    %rdx,%r14
  0x00007f1a590415f7:   mov    %r14,%rax
  0x00007f1a590415fa:   not    %rax
  0x00007f1a590415fd:   jne    Stub::checkcast_arraycopy+327 0x00007f1a59041607
  0x00007f1a590415ff:   jmpq   Stub::checkcast_arraycopy+465 0x00007f1a59041691
  0x00007f1a59041604:   xor    %rax,%rax
  0x00007f1a59041607:   sub    $0x50,%rsp
  0x00007f1a5904160b:   mov    %rax,(%rsp)
  0x00007f1a5904160f:   mov    %rcx,0x8(%rsp)
  0x00007f1a59041614:   mov    %rdx,0x10(%rsp)
  0x00007f1a59041619:   mov    %rsi,0x18(%rsp)
  0x00007f1a5904161e:   mov    %rdi,0x20(%rsp)
  0x00007f1a59041623:   mov    %r8,0x28(%rsp)
  0x00007f1a59041628:   mov    %r9,0x30(%rsp)
  0x00007f1a5904162d:   mov    %r10,0x38(%rsp)
  0x00007f1a59041632:   mov    %r11,0x40(%rsp)
  0x00007f1a59041637:   mov    %rsi,%rdi
  0x00007f1a5904163a:   mov    %r14,%rsi
  0x00007f1a5904163d:   test   $0xf,%spl
  0x00007f1a59041641:   je     Stub::checkcast_arraycopy+409 0x00007f1a59041659
  0x00007f1a59041647:   sub    $0x8,%rsp
  0x00007f1a5904164b:   callq  0x00007f1a6392cd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f1a59041650:   add    $0x8,%rsp
  0x00007f1a59041654:   jmpq   Stub::checkcast_arraycopy+414 0x00007f1a5904165e
  0x00007f1a59041659:   callq  0x00007f1a6392cd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f1a5904165e:   mov    0x40(%rsp),%r11
  0x00007f1a59041663:   mov    0x38(%rsp),%r10
  0x00007f1a59041668:   mov    0x30(%rsp),%r9
  0x00007f1a5904166d:   mov    0x28(%rsp),%r8
  0x00007f1a59041672:   mov    0x20(%rsp),%rdi
  0x00007f1a59041677:   mov    0x18(%rsp),%rsi
  0x00007f1a5904167c:   mov    0x10(%rsp),%rdx
  0x00007f1a59041681:   mov    0x8(%rsp),%rcx
  0x00007f1a59041686:   mov    (%rsp),%rax
  0x00007f1a5904168a:   add    $0x50,%rsp
  0x00007f1a5904168e:   vzeroupper 
  0x00007f1a59041691:   mov    (%rsp),%r13
  0x00007f1a59041695:   mov    0x8(%rsp),%r14
  0x00007f1a5904169a:   mov    0x10(%rsp),%r10
  0x00007f1a5904169f:   leaveq 
  0x00007f1a590416a0:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::checkcast_arraycopy_uninit [0x00007f1a590416c0, 0x00007f1a59041811] (337 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590416c0:   push   %rbp
  0x00007f1a590416c1:   mov    %rsp,%rbp
  0x00007f1a590416c4:   sub    $0x18,%rsp
  0x00007f1a590416c8:   mov    %r13,(%rsp)
  0x00007f1a590416cc:   mov    %r14,0x8(%rsp)
  0x00007f1a590416d1:   mov    %r10,0x10(%rsp)
  0x00007f1a590416d6:   lea    (%rdi,%rdx,4),%rdi
  0x00007f1a590416da:   lea    (%rsi,%rdx,4),%r13
  0x00007f1a590416de:   mov    %rdx,%r14
  0x00007f1a590416e1:   neg    %rdx
  0x00007f1a590416e4:   jne    Stub::checkcast_arraycopy_uninit+82 0x00007f1a59041712
  0x00007f1a590416ea:   xor    %rax,%rax
  0x00007f1a590416ed:   jmpq   Stub::checkcast_arraycopy_uninit+321 0x00007f1a59041801
  0x00007f1a590416f2:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a590416fc:   data16 data16 xchg %ax,%ax
  0x00007f1a59041700:   shr    $0x3,%rax
  0x00007f1a59041704:   mov    %eax,0x0(%r13,%rdx,4)
  0x00007f1a59041709:   inc    %rdx
  0x00007f1a5904170c:   je     Stub::checkcast_arraycopy_uninit+180 0x00007f1a59041774
  0x00007f1a59041712:   mov    (%rdi,%rdx,4),%eax
  0x00007f1a59041715:   shl    $0x3,%rax
  0x00007f1a59041719:   test   %rax,%rax
  0x00007f1a5904171c:   je     Stub::checkcast_arraycopy_uninit+64 0x00007f1a59041700
  0x00007f1a5904171e:   mov    0x8(%rax),%r11d
  0x00007f1a59041722:   movabs $0x800000000,%r10
  0x00007f1a5904172c:   add    %r10,%r11
  0x00007f1a5904172f:   cmp    %r8,%r11
  0x00007f1a59041732:   je     Stub::checkcast_arraycopy_uninit+64 0x00007f1a59041700
  0x00007f1a59041734:   cmp    (%r11,%rcx,1),%r8
  0x00007f1a59041738:   je     Stub::checkcast_arraycopy_uninit+64 0x00007f1a59041700
  0x00007f1a5904173a:   cmp    $0x20,%ecx
  0x00007f1a5904173d:   jne    Stub::checkcast_arraycopy_uninit+164 0x00007f1a59041764
  0x00007f1a59041743:   push   %rax
  0x00007f1a59041744:   mov    %r8,%rax
  0x00007f1a59041747:   push   %rcx
  0x00007f1a59041748:   push   %rdi
  0x00007f1a59041749:   mov    0x28(%r11),%rdi
  0x00007f1a5904174d:   mov    (%rdi),%ecx
  0x00007f1a5904174f:   add    $0x8,%rdi
  0x00007f1a59041753:   test   %rax,%rax
  0x00007f1a59041756:   repnz scas %es:(%rdi),%rax
  0x00007f1a59041759:   pop    %rdi
  0x00007f1a5904175a:   pop    %rcx
  0x00007f1a5904175b:   pop    %rax
  0x00007f1a5904175c:   jne    Stub::checkcast_arraycopy_uninit+164 0x00007f1a59041764
  0x00007f1a5904175e:   mov    %r8,0x20(%r11)
  0x00007f1a59041762:   jmp    Stub::checkcast_arraycopy_uninit+64 0x00007f1a59041700
  0x00007f1a59041764:   add    %rdx,%r14
  0x00007f1a59041767:   mov    %r14,%rax
  0x00007f1a5904176a:   not    %rax
  0x00007f1a5904176d:   jne    Stub::checkcast_arraycopy_uninit+183 0x00007f1a59041777
  0x00007f1a5904176f:   jmpq   Stub::checkcast_arraycopy_uninit+321 0x00007f1a59041801
  0x00007f1a59041774:   xor    %rax,%rax
  0x00007f1a59041777:   sub    $0x50,%rsp
  0x00007f1a5904177b:   mov    %rax,(%rsp)
  0x00007f1a5904177f:   mov    %rcx,0x8(%rsp)
  0x00007f1a59041784:   mov    %rdx,0x10(%rsp)
  0x00007f1a59041789:   mov    %rsi,0x18(%rsp)
  0x00007f1a5904178e:   mov    %rdi,0x20(%rsp)
  0x00007f1a59041793:   mov    %r8,0x28(%rsp)
  0x00007f1a59041798:   mov    %r9,0x30(%rsp)
  0x00007f1a5904179d:   mov    %r10,0x38(%rsp)
  0x00007f1a590417a2:   mov    %r11,0x40(%rsp)
  0x00007f1a590417a7:   mov    %rsi,%rdi
  0x00007f1a590417aa:   mov    %r14,%rsi
  0x00007f1a590417ad:   test   $0xf,%spl
  0x00007f1a590417b1:   je     Stub::checkcast_arraycopy_uninit+265 0x00007f1a590417c9
  0x00007f1a590417b7:   sub    $0x8,%rsp
  0x00007f1a590417bb:   callq  0x00007f1a6392cd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f1a590417c0:   add    $0x8,%rsp
  0x00007f1a590417c4:   jmpq   Stub::checkcast_arraycopy_uninit+270 0x00007f1a590417ce
  0x00007f1a590417c9:   callq  0x00007f1a6392cd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f1a590417ce:   mov    0x40(%rsp),%r11
  0x00007f1a590417d3:   mov    0x38(%rsp),%r10
  0x00007f1a590417d8:   mov    0x30(%rsp),%r9
  0x00007f1a590417dd:   mov    0x28(%rsp),%r8
  0x00007f1a590417e2:   mov    0x20(%rsp),%rdi
  0x00007f1a590417e7:   mov    0x18(%rsp),%rsi
  0x00007f1a590417ec:   mov    0x10(%rsp),%rdx
  0x00007f1a590417f1:   mov    0x8(%rsp),%rcx
  0x00007f1a590417f6:   mov    (%rsp),%rax
  0x00007f1a590417fa:   add    $0x50,%rsp
  0x00007f1a590417fe:   vzeroupper 
  0x00007f1a59041801:   mov    (%rsp),%r13
  0x00007f1a59041805:   mov    0x8(%rsp),%r14
  0x00007f1a5904180a:   mov    0x10(%rsp),%r10
  0x00007f1a5904180f:   leaveq 
  0x00007f1a59041810:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::unsafe_arraycopy [0x00007f1a59041820, 0x00007f1a59041857] (55 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59041820:   push   %rbp
  0x00007f1a59041821:   mov    %rsp,%rbp
  0x00007f1a59041824:   mov    %rdi,%rax
  0x00007f1a59041827:   or     %rsi,%rax
  0x00007f1a5904182a:   or     %rdx,%rax
  0x00007f1a5904182d:   test   $0x7,%al
  0x00007f1a5904182f:   je     Stub::unsafe_arraycopy+46 0x00007f1a5904184e
  0x00007f1a59041831:   test   $0x3,%al
  0x00007f1a59041833:   je     Stub::unsafe_arraycopy+37 0x00007f1a59041845
  0x00007f1a59041835:   test   $0x1,%al
  0x00007f1a59041837:   jne    Stub::jbyte_arraycopy+4 0x00007f1a59040ac4
  0x00007f1a5904183d:   shr    %rdx
  0x00007f1a59041840:   jmpq   Stub::jshort_arraycopy+4 0x00007f1a59040c24
  0x00007f1a59041845:   shr    $0x2,%rdx
  0x00007f1a59041849:   jmpq   Stub::jint_arraycopy+4 0x00007f1a59040d44
  0x00007f1a5904184e:   shr    $0x3,%rdx
  0x00007f1a59041852:   jmpq   Stub::jlong_arraycopy+4 0x00007f1a59040e64
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::generic_arraycopy [0x00007f1a5904185b, 0x00007f1a59041a44] (489 bytes)
--------------------------------------------------------------------------------
  0x00007f1a5904185b:   jmpq   Stub::generic_arraycopy+481 0x00007f1a59041a3c
  0x00007f1a59041860:   push   %rbp
  0x00007f1a59041861:   mov    %rsp,%rbp
  0x00007f1a59041864:   test   %rdi,%rdi
  0x00007f1a59041867:   je     Stub::generic_arraycopy
  0x00007f1a59041869:   test   %esi,%esi
  0x00007f1a5904186b:   js     Stub::generic_arraycopy
  0x00007f1a5904186d:   test   %rdx,%rdx
  0x00007f1a59041870:   je     Stub::generic_arraycopy
  0x00007f1a59041872:   test   %ecx,%ecx
  0x00007f1a59041874:   js     Stub::generic_arraycopy
  0x00007f1a59041876:   mov    %r8d,%r11d
  0x00007f1a59041879:   test   %r11d,%r11d
  0x00007f1a5904187c:   js     Stub::generic_arraycopy
  0x00007f1a5904187e:   mov    0x8(%rdi),%r10d
  0x00007f1a59041882:   movabs $0x800000000,%r9
  0x00007f1a5904188c:   add    %r9,%r10
  0x00007f1a5904188f:   cmpl   $0x80100c02,0x8(%r10)
  0x00007f1a59041897:   je     Stub::generic_arraycopy+244 0x00007f1a5904194f
  0x00007f1a5904189d:   mov    0x8(%rdx),%eax
  0x00007f1a590418a0:   movabs $0x800000000,%r9
  0x00007f1a590418aa:   add    %r9,%rax
  0x00007f1a590418ad:   cmp    %rax,%r10
  0x00007f1a590418b0:   jne    Stub::generic_arraycopy+481 0x00007f1a59041a3c
  0x00007f1a590418b6:   mov    0x8(%r10),%eax
  0x00007f1a590418ba:   cmp    $0x0,%eax
  0x00007f1a590418bd:   jge    Stub::generic_arraycopy+481 0x00007f1a59041a3c
  0x00007f1a590418c3:   mov    %r11d,%r10d
  0x00007f1a590418c6:   add    %esi,%r10d
  0x00007f1a590418c9:   cmp    0xc(%rdi),%r10d
  0x00007f1a590418cd:   ja     Stub::generic_arraycopy+481 0x00007f1a59041a3c
  0x00007f1a590418d3:   mov    %r11d,%r10d
  0x00007f1a590418d6:   add    %ecx,%r10d
  0x00007f1a590418d9:   cmp    0xc(%rdx),%r10d
  0x00007f1a590418dd:   ja     Stub::generic_arraycopy+481 0x00007f1a59041a3c
  0x00007f1a590418e3:   movslq %esi,%rsi
  0x00007f1a590418e6:   movslq %ecx,%rcx
  0x00007f1a590418e9:   mov    %eax,%r10d
  0x00007f1a590418ec:   shr    $0x10,%r10d
  0x00007f1a590418f0:   and    $0xff,%r10
  0x00007f1a590418f7:   add    %r10,%rdi
  0x00007f1a590418fa:   add    %r10,%rdx
  0x00007f1a590418fd:   and    $0x3f,%eax
  0x00007f1a59041900:   cmp    $0x0,%eax
  0x00007f1a59041903:   jne    Stub::generic_arraycopy+186 0x00007f1a59041915
  0x00007f1a59041905:   lea    (%rdi,%rsi,1),%rdi
  0x00007f1a59041909:   lea    (%rdx,%rcx,1),%rsi
  0x00007f1a5904190d:   movslq %r11d,%rdx
  0x00007f1a59041910:   jmpq   Stub::jbyte_arraycopy+4 0x00007f1a59040ac4
  0x00007f1a59041915:   cmp    $0x1,%eax
  0x00007f1a59041918:   jne    Stub::generic_arraycopy+207 0x00007f1a5904192a
  0x00007f1a5904191a:   lea    (%rdi,%rsi,2),%rdi
  0x00007f1a5904191e:   lea    (%rdx,%rcx,2),%rsi
  0x00007f1a59041922:   movslq %r11d,%rdx
  0x00007f1a59041925:   jmpq   Stub::jshort_arraycopy+4 0x00007f1a59040c24
  0x00007f1a5904192a:   cmp    $0x2,%eax
  0x00007f1a5904192d:   jne    Stub::generic_arraycopy+228 0x00007f1a5904193f
  0x00007f1a5904192f:   lea    (%rdi,%rsi,4),%rdi
  0x00007f1a59041933:   lea    (%rdx,%rcx,4),%rsi
  0x00007f1a59041937:   movslq %r11d,%rdx
  0x00007f1a5904193a:   jmpq   Stub::jint_arraycopy+4 0x00007f1a59040d44
  0x00007f1a5904193f:   lea    (%rdi,%rsi,8),%rdi
  0x00007f1a59041943:   lea    (%rdx,%rcx,8),%rsi
  0x00007f1a59041947:   movslq %r11d,%rdx
  0x00007f1a5904194a:   jmpq   Stub::jlong_arraycopy+4 0x00007f1a59040e64
  0x00007f1a5904194f:   mov    0x8(%rdx),%eax
  0x00007f1a59041952:   movabs $0x800000000,%r9
  0x00007f1a5904195c:   add    %r9,%rax
  0x00007f1a5904195f:   cmp    %rax,%r10
  0x00007f1a59041962:   jne    Stub::generic_arraycopy+325 0x00007f1a590419a0
  0x00007f1a59041968:   mov    %r11d,%r10d
  0x00007f1a5904196b:   add    %esi,%r10d
  0x00007f1a5904196e:   cmp    0xc(%rdi),%r10d
  0x00007f1a59041972:   ja     Stub::generic_arraycopy+481 0x00007f1a59041a3c
  0x00007f1a59041978:   mov    %r11d,%r10d
  0x00007f1a5904197b:   add    %ecx,%r10d
  0x00007f1a5904197e:   cmp    0xc(%rdx),%r10d
  0x00007f1a59041982:   ja     Stub::generic_arraycopy+481 0x00007f1a59041a3c
  0x00007f1a59041988:   movslq %esi,%rsi
  0x00007f1a5904198b:   movslq %ecx,%rcx
  0x00007f1a5904198e:   lea    0x10(%rdi,%rsi,4),%rdi
  0x00007f1a59041993:   lea    0x10(%rdx,%rcx,4),%rsi
  0x00007f1a59041998:   movslq %r11d,%rdx
  0x00007f1a5904199b:   jmpq   Stub::oop_arraycopy+4 0x00007f1a590410a4
  0x00007f1a590419a0:   cmpl   $0x80100c02,0x8(%rax)
  0x00007f1a590419a7:   jne    Stub::generic_arraycopy+481 0x00007f1a59041a3c
  0x00007f1a590419ad:   mov    %r11d,%eax
  0x00007f1a590419b0:   add    %esi,%eax
  0x00007f1a590419b2:   cmp    0xc(%rdi),%eax
  0x00007f1a590419b5:   ja     Stub::generic_arraycopy+481 0x00007f1a59041a3c
  0x00007f1a590419bb:   mov    %r11d,%eax
  0x00007f1a590419be:   add    %ecx,%eax
  0x00007f1a590419c0:   cmp    0xc(%rdx),%eax
  0x00007f1a590419c3:   ja     Stub::generic_arraycopy+481 0x00007f1a59041a3c
  0x00007f1a590419c9:   movslq %esi,%rsi
  0x00007f1a590419cc:   movslq %ecx,%rcx
  0x00007f1a590419cf:   mov    0x8(%rdx),%r11d
  0x00007f1a590419d3:   movabs $0x800000000,%r9
  0x00007f1a590419dd:   add    %r9,%r11
  0x00007f1a590419e0:   lea    0x10(%rdi,%rsi,4),%rdi
  0x00007f1a590419e5:   lea    0x10(%rdx,%rcx,4),%rsi
  0x00007f1a590419ea:   mov    %r8d,%edx
  0x00007f1a590419ed:   mov    0x14(%r11),%ecx
  0x00007f1a590419f1:   cmp    %r11,%r10
  0x00007f1a590419f4:   je     Stub::generic_arraycopy+320 0x00007f1a5904199b
  0x00007f1a590419f6:   cmp    (%r10,%rcx,1),%r11
  0x00007f1a590419fa:   je     Stub::generic_arraycopy+320 0x00007f1a5904199b
  0x00007f1a590419fc:   cmp    $0x20,%ecx
  0x00007f1a590419ff:   jne    Stub::generic_arraycopy+462 0x00007f1a59041a29
  0x00007f1a59041a05:   push   %rax
  0x00007f1a59041a06:   mov    %r11,%rax
  0x00007f1a59041a09:   push   %rcx
  0x00007f1a59041a0a:   push   %rdi
  0x00007f1a59041a0b:   mov    0x28(%r10),%rdi
  0x00007f1a59041a0f:   mov    (%rdi),%ecx
  0x00007f1a59041a11:   add    $0x8,%rdi
  0x00007f1a59041a15:   test   %rax,%rax
  0x00007f1a59041a18:   repnz scas %es:(%rdi),%rax
  0x00007f1a59041a1b:   pop    %rdi
  0x00007f1a59041a1c:   pop    %rcx
  0x00007f1a59041a1d:   pop    %rax
  0x00007f1a59041a1e:   jne    Stub::generic_arraycopy+462 0x00007f1a59041a29
  0x00007f1a59041a20:   mov    %r11,0x20(%r10)
  0x00007f1a59041a24:   jmpq   Stub::generic_arraycopy+320 0x00007f1a5904199b
  0x00007f1a59041a29:   mov    0xd0(%r11),%r11
  0x00007f1a59041a30:   mov    0x14(%r11),%ecx
  0x00007f1a59041a34:   mov    %r11,%r8
  0x00007f1a59041a37:   jmpq   Stub::checkcast_arraycopy+4 0x00007f1a590414c4
  0x00007f1a59041a3c:   xor    %rax,%rax
  0x00007f1a59041a3f:   not    %rax
  0x00007f1a59041a42:   leaveq 
  0x00007f1a59041a43:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_fill [0x00007f1a59041a60, 0x00007f1a59041b0b] (171 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59041a60:   mov    %rdx,%r11
  0x00007f1a59041a63:   push   %rbp
  0x00007f1a59041a64:   mov    %rsp,%rbp
  0x00007f1a59041a67:   and    $0xff,%esi
  0x00007f1a59041a6d:   mov    %esi,%eax
  0x00007f1a59041a6f:   shl    $0x8,%eax
  0x00007f1a59041a72:   or     %eax,%esi
  0x00007f1a59041a74:   mov    %esi,%eax
  0x00007f1a59041a76:   shl    $0x10,%eax
  0x00007f1a59041a79:   or     %eax,%esi
  0x00007f1a59041a7b:   cmp    $0x8,%r11d
  0x00007f1a59041a7f:   jb     Stub::jbyte_fill+132 0x00007f1a59041ae4
  0x00007f1a59041a85:   vmovd  %esi,%xmm0
  0x00007f1a59041a89:   vpbroadcastd %xmm0,%ymm0
  0x00007f1a59041a8e:   sub    $0x40,%r11d
  0x00007f1a59041a92:   jl     Stub::jbyte_fill+83 0x00007f1a59041ab3
  0x00007f1a59041a98:   nopl   0x0(%rax,%rax,1)
  0x00007f1a59041aa0:   vmovdqu %ymm0,(%rdi)
  0x00007f1a59041aa4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f1a59041aa9:   add    $0x40,%rdi
  0x00007f1a59041aad:   sub    $0x40,%r11d
  0x00007f1a59041ab1:   jge    Stub::jbyte_fill+64 0x00007f1a59041aa0
  0x00007f1a59041ab3:   add    $0x20,%r11d
  0x00007f1a59041ab7:   jl     Stub::jbyte_fill+101 0x00007f1a59041ac5
  0x00007f1a59041ab9:   vmovdqu %ymm0,(%rdi)
  0x00007f1a59041abd:   add    $0x20,%rdi
  0x00007f1a59041ac1:   sub    $0x20,%r11d
  0x00007f1a59041ac5:   vmovd  %esi,%xmm0
  0x00007f1a59041ac9:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f1a59041ace:   add    $0x20,%r11d
  0x00007f1a59041ad2:   je     Stub::jbyte_fill+166 0x00007f1a59041b06
  0x00007f1a59041ad4:   jmp    Stub::jbyte_fill+126 0x00007f1a59041ade
  0x00007f1a59041ad6:   vmovq  %xmm0,(%rdi)
  0x00007f1a59041ada:   add    $0x8,%rdi
  0x00007f1a59041ade:   sub    $0x8,%r11d
  0x00007f1a59041ae2:   jge    Stub::jbyte_fill+118 0x00007f1a59041ad6
  0x00007f1a59041ae4:   test   $0x4,%r11b
  0x00007f1a59041ae8:   je     Stub::jbyte_fill+144 0x00007f1a59041af0
  0x00007f1a59041aea:   mov    %esi,(%rdi)
  0x00007f1a59041aec:   add    $0x4,%rdi
  0x00007f1a59041af0:   test   $0x2,%r11b
  0x00007f1a59041af4:   je     Stub::jbyte_fill+157 0x00007f1a59041afd
  0x00007f1a59041af6:   mov    %si,(%rdi)
  0x00007f1a59041af9:   add    $0x2,%rdi
  0x00007f1a59041afd:   test   $0x1,%r11b
  0x00007f1a59041b01:   je     Stub::jbyte_fill+166 0x00007f1a59041b06
  0x00007f1a59041b03:   mov    %sil,(%rdi)
  0x00007f1a59041b06:   vzeroupper 
  0x00007f1a59041b09:   leaveq 
  0x00007f1a59041b0a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_fill [0x00007f1a59041b20, 0x00007f1a59041bbe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59041b20:   mov    %rdx,%r11
  0x00007f1a59041b23:   push   %rbp
  0x00007f1a59041b24:   mov    %rsp,%rbp
  0x00007f1a59041b27:   and    $0xffff,%esi
  0x00007f1a59041b2d:   mov    %esi,%eax
  0x00007f1a59041b2f:   shl    $0x10,%eax
  0x00007f1a59041b32:   or     %eax,%esi
  0x00007f1a59041b34:   cmp    $0x4,%r11d
  0x00007f1a59041b38:   jb     Stub::jshort_fill+132 0x00007f1a59041ba4
  0x00007f1a59041b3e:   vmovd  %esi,%xmm0
  0x00007f1a59041b42:   vpbroadcastd %xmm0,%ymm0
  0x00007f1a59041b47:   sub    $0x20,%r11d
  0x00007f1a59041b4b:   jl     Stub::jshort_fill+83 0x00007f1a59041b73
  0x00007f1a59041b51:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a59041b5c:   data16 data16 xchg %ax,%ax
  0x00007f1a59041b60:   vmovdqu %ymm0,(%rdi)
  0x00007f1a59041b64:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f1a59041b69:   add    $0x40,%rdi
  0x00007f1a59041b6d:   sub    $0x20,%r11d
  0x00007f1a59041b71:   jge    Stub::jshort_fill+64 0x00007f1a59041b60
  0x00007f1a59041b73:   add    $0x10,%r11d
  0x00007f1a59041b77:   jl     Stub::jshort_fill+101 0x00007f1a59041b85
  0x00007f1a59041b79:   vmovdqu %ymm0,(%rdi)
  0x00007f1a59041b7d:   add    $0x20,%rdi
  0x00007f1a59041b81:   sub    $0x10,%r11d
  0x00007f1a59041b85:   vmovd  %esi,%xmm0
  0x00007f1a59041b89:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f1a59041b8e:   add    $0x10,%r11d
  0x00007f1a59041b92:   je     Stub::jshort_fill+153 0x00007f1a59041bb9
  0x00007f1a59041b94:   jmp    Stub::jshort_fill+126 0x00007f1a59041b9e
  0x00007f1a59041b96:   vmovq  %xmm0,(%rdi)
  0x00007f1a59041b9a:   add    $0x8,%rdi
  0x00007f1a59041b9e:   sub    $0x4,%r11d
  0x00007f1a59041ba2:   jge    Stub::jshort_fill+118 0x00007f1a59041b96
  0x00007f1a59041ba4:   test   $0x2,%r11b
  0x00007f1a59041ba8:   je     Stub::jshort_fill+144 0x00007f1a59041bb0
  0x00007f1a59041baa:   mov    %esi,(%rdi)
  0x00007f1a59041bac:   add    $0x4,%rdi
  0x00007f1a59041bb0:   test   $0x1,%r11b
  0x00007f1a59041bb4:   je     Stub::jshort_fill+153 0x00007f1a59041bb9
  0x00007f1a59041bb6:   mov    %si,(%rdi)
  0x00007f1a59041bb9:   vzeroupper 
  0x00007f1a59041bbc:   leaveq 
  0x00007f1a59041bbd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_fill [0x00007f1a59041bc0, 0x00007f1a59041c41] (129 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59041bc0:   mov    %rdx,%r11
  0x00007f1a59041bc3:   push   %rbp
  0x00007f1a59041bc4:   mov    %rsp,%rbp
  0x00007f1a59041bc7:   cmp    $0x2,%r11d
  0x00007f1a59041bcb:   jb     Stub::jint_fill+116 0x00007f1a59041c34
  0x00007f1a59041bd1:   vmovd  %esi,%xmm0
  0x00007f1a59041bd5:   vpbroadcastd %xmm0,%ymm0
  0x00007f1a59041bda:   sub    $0x10,%r11d
  0x00007f1a59041bde:   jl     Stub::jint_fill+67 0x00007f1a59041c03
  0x00007f1a59041be4:   nopl   0x0(%rax,%rax,1)
  0x00007f1a59041bec:   data16 data16 xchg %ax,%ax
  0x00007f1a59041bf0:   vmovdqu %ymm0,(%rdi)
  0x00007f1a59041bf4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f1a59041bf9:   add    $0x40,%rdi
  0x00007f1a59041bfd:   sub    $0x10,%r11d
  0x00007f1a59041c01:   jge    Stub::jint_fill+48 0x00007f1a59041bf0
  0x00007f1a59041c03:   add    $0x8,%r11d
  0x00007f1a59041c07:   jl     Stub::jint_fill+85 0x00007f1a59041c15
  0x00007f1a59041c09:   vmovdqu %ymm0,(%rdi)
  0x00007f1a59041c0d:   add    $0x20,%rdi
  0x00007f1a59041c11:   sub    $0x8,%r11d
  0x00007f1a59041c15:   vmovd  %esi,%xmm0
  0x00007f1a59041c19:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f1a59041c1e:   add    $0x8,%r11d
  0x00007f1a59041c22:   je     Stub::jint_fill+124 0x00007f1a59041c3c
  0x00007f1a59041c24:   jmp    Stub::jint_fill+110 0x00007f1a59041c2e
  0x00007f1a59041c26:   vmovq  %xmm0,(%rdi)
  0x00007f1a59041c2a:   add    $0x8,%rdi
  0x00007f1a59041c2e:   sub    $0x2,%r11d
  0x00007f1a59041c32:   jge    Stub::jint_fill+102 0x00007f1a59041c26
  0x00007f1a59041c34:   test   $0x1,%r11b
  0x00007f1a59041c38:   je     Stub::jint_fill+124 0x00007f1a59041c3c
  0x00007f1a59041c3a:   mov    %esi,(%rdi)
  0x00007f1a59041c3c:   vzeroupper 
  0x00007f1a59041c3f:   leaveq 
  0x00007f1a59041c40:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jbyte_fill [0x00007f1a59041c60, 0x00007f1a59041d0b] (171 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59041c60:   mov    %rdx,%r11
  0x00007f1a59041c63:   push   %rbp
  0x00007f1a59041c64:   mov    %rsp,%rbp
  0x00007f1a59041c67:   and    $0xff,%esi
  0x00007f1a59041c6d:   mov    %esi,%eax
  0x00007f1a59041c6f:   shl    $0x8,%eax
  0x00007f1a59041c72:   or     %eax,%esi
  0x00007f1a59041c74:   mov    %esi,%eax
  0x00007f1a59041c76:   shl    $0x10,%eax
  0x00007f1a59041c79:   or     %eax,%esi
  0x00007f1a59041c7b:   cmp    $0x8,%r11d
  0x00007f1a59041c7f:   jb     Stub::arrayof_jbyte_fill+132 0x00007f1a59041ce4
  0x00007f1a59041c85:   vmovd  %esi,%xmm0
  0x00007f1a59041c89:   vpbroadcastd %xmm0,%ymm0
  0x00007f1a59041c8e:   sub    $0x40,%r11d
  0x00007f1a59041c92:   jl     Stub::arrayof_jbyte_fill+83 0x00007f1a59041cb3
  0x00007f1a59041c98:   nopl   0x0(%rax,%rax,1)
  0x00007f1a59041ca0:   vmovdqu %ymm0,(%rdi)
  0x00007f1a59041ca4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f1a59041ca9:   add    $0x40,%rdi
  0x00007f1a59041cad:   sub    $0x40,%r11d
  0x00007f1a59041cb1:   jge    Stub::arrayof_jbyte_fill+64 0x00007f1a59041ca0
  0x00007f1a59041cb3:   add    $0x20,%r11d
  0x00007f1a59041cb7:   jl     Stub::arrayof_jbyte_fill+101 0x00007f1a59041cc5
  0x00007f1a59041cb9:   vmovdqu %ymm0,(%rdi)
  0x00007f1a59041cbd:   add    $0x20,%rdi
  0x00007f1a59041cc1:   sub    $0x20,%r11d
  0x00007f1a59041cc5:   vmovd  %esi,%xmm0
  0x00007f1a59041cc9:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f1a59041cce:   add    $0x20,%r11d
  0x00007f1a59041cd2:   je     Stub::arrayof_jbyte_fill+166 0x00007f1a59041d06
  0x00007f1a59041cd4:   jmp    Stub::arrayof_jbyte_fill+126 0x00007f1a59041cde
  0x00007f1a59041cd6:   vmovq  %xmm0,(%rdi)
  0x00007f1a59041cda:   add    $0x8,%rdi
  0x00007f1a59041cde:   sub    $0x8,%r11d
  0x00007f1a59041ce2:   jge    Stub::arrayof_jbyte_fill+118 0x00007f1a59041cd6
  0x00007f1a59041ce4:   test   $0x4,%r11b
  0x00007f1a59041ce8:   je     Stub::arrayof_jbyte_fill+144 0x00007f1a59041cf0
  0x00007f1a59041cea:   mov    %esi,(%rdi)
  0x00007f1a59041cec:   add    $0x4,%rdi
  0x00007f1a59041cf0:   test   $0x2,%r11b
  0x00007f1a59041cf4:   je     Stub::arrayof_jbyte_fill+157 0x00007f1a59041cfd
  0x00007f1a59041cf6:   mov    %si,(%rdi)
  0x00007f1a59041cf9:   add    $0x2,%rdi
  0x00007f1a59041cfd:   test   $0x1,%r11b
  0x00007f1a59041d01:   je     Stub::arrayof_jbyte_fill+166 0x00007f1a59041d06
  0x00007f1a59041d03:   mov    %sil,(%rdi)
  0x00007f1a59041d06:   vzeroupper 
  0x00007f1a59041d09:   leaveq 
  0x00007f1a59041d0a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jshort_fill [0x00007f1a59041d20, 0x00007f1a59041dbe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59041d20:   mov    %rdx,%r11
  0x00007f1a59041d23:   push   %rbp
  0x00007f1a59041d24:   mov    %rsp,%rbp
  0x00007f1a59041d27:   and    $0xffff,%esi
  0x00007f1a59041d2d:   mov    %esi,%eax
  0x00007f1a59041d2f:   shl    $0x10,%eax
  0x00007f1a59041d32:   or     %eax,%esi
  0x00007f1a59041d34:   cmp    $0x4,%r11d
  0x00007f1a59041d38:   jb     Stub::arrayof_jshort_fill+132 0x00007f1a59041da4
  0x00007f1a59041d3e:   vmovd  %esi,%xmm0
  0x00007f1a59041d42:   vpbroadcastd %xmm0,%ymm0
  0x00007f1a59041d47:   sub    $0x20,%r11d
  0x00007f1a59041d4b:   jl     Stub::arrayof_jshort_fill+83 0x00007f1a59041d73
  0x00007f1a59041d51:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a59041d5c:   data16 data16 xchg %ax,%ax
  0x00007f1a59041d60:   vmovdqu %ymm0,(%rdi)
  0x00007f1a59041d64:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f1a59041d69:   add    $0x40,%rdi
  0x00007f1a59041d6d:   sub    $0x20,%r11d
  0x00007f1a59041d71:   jge    Stub::arrayof_jshort_fill+64 0x00007f1a59041d60
  0x00007f1a59041d73:   add    $0x10,%r11d
  0x00007f1a59041d77:   jl     Stub::arrayof_jshort_fill+101 0x00007f1a59041d85
  0x00007f1a59041d79:   vmovdqu %ymm0,(%rdi)
  0x00007f1a59041d7d:   add    $0x20,%rdi
  0x00007f1a59041d81:   sub    $0x10,%r11d
  0x00007f1a59041d85:   vmovd  %esi,%xmm0
  0x00007f1a59041d89:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f1a59041d8e:   add    $0x10,%r11d
  0x00007f1a59041d92:   je     Stub::arrayof_jshort_fill+153 0x00007f1a59041db9
  0x00007f1a59041d94:   jmp    Stub::arrayof_jshort_fill+126 0x00007f1a59041d9e
  0x00007f1a59041d96:   vmovq  %xmm0,(%rdi)
  0x00007f1a59041d9a:   add    $0x8,%rdi
  0x00007f1a59041d9e:   sub    $0x4,%r11d
  0x00007f1a59041da2:   jge    Stub::arrayof_jshort_fill+118 0x00007f1a59041d96
  0x00007f1a59041da4:   test   $0x2,%r11b
  0x00007f1a59041da8:   je     Stub::arrayof_jshort_fill+144 0x00007f1a59041db0
  0x00007f1a59041daa:   mov    %esi,(%rdi)
  0x00007f1a59041dac:   add    $0x4,%rdi
  0x00007f1a59041db0:   test   $0x1,%r11b
  0x00007f1a59041db4:   je     Stub::arrayof_jshort_fill+153 0x00007f1a59041db9
  0x00007f1a59041db6:   mov    %si,(%rdi)
  0x00007f1a59041db9:   vzeroupper 
  0x00007f1a59041dbc:   leaveq 
  0x00007f1a59041dbd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jint_fill [0x00007f1a59041dc0, 0x00007f1a59041e41] (129 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59041dc0:   mov    %rdx,%r11
  0x00007f1a59041dc3:   push   %rbp
  0x00007f1a59041dc4:   mov    %rsp,%rbp
  0x00007f1a59041dc7:   cmp    $0x2,%r11d
  0x00007f1a59041dcb:   jb     Stub::arrayof_jint_fill+116 0x00007f1a59041e34
  0x00007f1a59041dd1:   vmovd  %esi,%xmm0
  0x00007f1a59041dd5:   vpbroadcastd %xmm0,%ymm0
  0x00007f1a59041dda:   sub    $0x10,%r11d
  0x00007f1a59041dde:   jl     Stub::arrayof_jint_fill+67 0x00007f1a59041e03
  0x00007f1a59041de4:   nopl   0x0(%rax,%rax,1)
  0x00007f1a59041dec:   data16 data16 xchg %ax,%ax
  0x00007f1a59041df0:   vmovdqu %ymm0,(%rdi)
  0x00007f1a59041df4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f1a59041df9:   add    $0x40,%rdi
  0x00007f1a59041dfd:   sub    $0x10,%r11d
  0x00007f1a59041e01:   jge    Stub::arrayof_jint_fill+48 0x00007f1a59041df0
  0x00007f1a59041e03:   add    $0x8,%r11d
  0x00007f1a59041e07:   jl     Stub::arrayof_jint_fill+85 0x00007f1a59041e15
  0x00007f1a59041e09:   vmovdqu %ymm0,(%rdi)
  0x00007f1a59041e0d:   add    $0x20,%rdi
  0x00007f1a59041e11:   sub    $0x8,%r11d
  0x00007f1a59041e15:   vmovd  %esi,%xmm0
  0x00007f1a59041e19:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f1a59041e1e:   add    $0x8,%r11d
  0x00007f1a59041e22:   je     Stub::arrayof_jint_fill+124 0x00007f1a59041e3c
  0x00007f1a59041e24:   jmp    Stub::arrayof_jint_fill+110 0x00007f1a59041e2e
  0x00007f1a59041e26:   vmovq  %xmm0,(%rdi)
  0x00007f1a59041e2a:   add    $0x8,%rdi
  0x00007f1a59041e2e:   sub    $0x2,%r11d
  0x00007f1a59041e32:   jge    Stub::arrayof_jint_fill+102 0x00007f1a59041e26
  0x00007f1a59041e34:   test   $0x1,%r11b
  0x00007f1a59041e38:   je     Stub::arrayof_jint_fill+124 0x00007f1a59041e3c
  0x00007f1a59041e3a:   mov    %esi,(%rdi)
  0x00007f1a59041e3c:   vzeroupper 
  0x00007f1a59041e3f:   leaveq 
  0x00007f1a59041e40:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::aescrypt_encryptBlock [0x00007f1a59041e60, 0x00007f1a59041f7a] (282 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59041e60:   push   %rbp
  0x00007f1a59041e61:   mov    %rsp,%rbp
  0x00007f1a59041e64:   mov    -0x4(%rdx),%eax
  0x00007f1a59041e67:   vmovdqu 0xb5417d1(%rip),%xmm1        # 0x00007f1a64583640
  0x00007f1a59041e6f:   vmovdqu (%rdi),%xmm0
  0x00007f1a59041e73:   vmovdqu (%rdx),%xmm2
  0x00007f1a59041e77:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f1a59041e7c:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f1a59041e80:   vmovdqu 0x10(%rdx),%xmm2
  0x00007f1a59041e85:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f1a59041e8a:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f1a59041e8f:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59041e94:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f1a59041e99:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a59041e9e:   vmovdqu 0x40(%rdx),%xmm5
  0x00007f1a59041ea3:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f1a59041ea8:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f1a59041ead:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f1a59041eb2:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f1a59041eb7:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f1a59041ebc:   vmovdqu 0x50(%rdx),%xmm2
  0x00007f1a59041ec1:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f1a59041ec6:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f1a59041ecb:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59041ed0:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f1a59041ed5:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a59041eda:   vmovdqu 0x80(%rdx),%xmm5
  0x00007f1a59041ee2:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f1a59041ee7:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f1a59041eec:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f1a59041ef1:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f1a59041ef6:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f1a59041efb:   vmovdqu 0x90(%rdx),%xmm2
  0x00007f1a59041f03:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f1a59041f08:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f1a59041f10:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59041f15:   cmp    $0x2c,%eax
  0x00007f1a59041f18:   je     Stub::aescrypt_encryptBlock+263 0x00007f1a59041f67
  0x00007f1a59041f1a:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f1a59041f1f:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f1a59041f24:   vmovdqu 0xb0(%rdx),%xmm2
  0x00007f1a59041f2c:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f1a59041f31:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f1a59041f39:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59041f3e:   cmp    $0x34,%eax
  0x00007f1a59041f41:   je     Stub::aescrypt_encryptBlock+263 0x00007f1a59041f67
  0x00007f1a59041f43:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f1a59041f48:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f1a59041f4d:   vmovdqu 0xd0(%rdx),%xmm2
  0x00007f1a59041f55:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f1a59041f5a:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007f1a59041f62:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59041f67:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f1a59041f6c:   vaesenclast %xmm3,%xmm0,%xmm0
  0x00007f1a59041f71:   vmovdqu %xmm0,(%rsi)
  0x00007f1a59041f75:   xor    %rax,%rax
  0x00007f1a59041f78:   leaveq 
  0x00007f1a59041f79:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::aescrypt_decryptBlock [0x00007f1a59041f80, 0x00007f1a5904209a] (282 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59041f80:   push   %rbp
  0x00007f1a59041f81:   mov    %rsp,%rbp
  0x00007f1a59041f84:   mov    -0x4(%rdx),%eax
  0x00007f1a59041f87:   vmovdqu 0xb5416b1(%rip),%xmm1        # 0x00007f1a64583640
  0x00007f1a59041f8f:   vmovdqu (%rdi),%xmm0
  0x00007f1a59041f93:   vmovdqu 0x10(%rdx),%xmm2
  0x00007f1a59041f98:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f1a59041f9d:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f1a59041fa2:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59041fa7:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f1a59041fac:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a59041fb1:   vmovdqu 0x40(%rdx),%xmm5
  0x00007f1a59041fb6:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f1a59041fbb:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f1a59041fbf:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f1a59041fc4:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f1a59041fc9:   vaesdec %xmm5,%xmm0,%xmm0
  0x00007f1a59041fce:   vmovdqu 0x50(%rdx),%xmm2
  0x00007f1a59041fd3:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f1a59041fd8:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f1a59041fdd:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59041fe2:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f1a59041fe7:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a59041fec:   vmovdqu 0x80(%rdx),%xmm5
  0x00007f1a59041ff4:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f1a59041ff9:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007f1a59041ffe:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f1a59042003:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f1a59042008:   vaesdec %xmm5,%xmm0,%xmm0
  0x00007f1a5904200d:   vmovdqu 0x90(%rdx),%xmm2
  0x00007f1a59042015:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f1a5904201a:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f1a59042022:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042027:   vmovdqu (%rdx),%xmm4
  0x00007f1a5904202b:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a59042030:   cmp    $0x2c,%eax
  0x00007f1a59042033:   je     Stub::aescrypt_decryptBlock+258 0x00007f1a59042082
  0x00007f1a59042035:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007f1a5904203a:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f1a5904203f:   vmovdqu 0xb0(%rdx),%xmm2
  0x00007f1a59042047:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f1a5904204c:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f1a59042054:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042059:   cmp    $0x34,%eax
  0x00007f1a5904205c:   je     Stub::aescrypt_decryptBlock+258 0x00007f1a59042082
  0x00007f1a5904205e:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007f1a59042063:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f1a59042068:   vmovdqu 0xd0(%rdx),%xmm2
  0x00007f1a59042070:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f1a59042075:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007f1a5904207d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042082:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007f1a59042087:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f1a5904208c:   vaesdeclast %xmm4,%xmm0,%xmm0
  0x00007f1a59042091:   vmovdqu %xmm0,(%rsi)
  0x00007f1a59042095:   xor    %rax,%rax
  0x00007f1a59042098:   leaveq 
  0x00007f1a59042099:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::cipherBlockChaining_encryptAESCrypt [0x00007f1a590420a0, 0x00007f1a590422c8] (552 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590420a0:   push   %rbp
  0x00007f1a590420a1:   mov    %rsp,%rbp
  0x00007f1a590420a4:   push   %r8
  0x00007f1a590420a6:   vmovdqu 0xb541592(%rip),%xmm1        # 0x00007f1a64583640
  0x00007f1a590420ae:   vmovdqu (%rdx),%xmm2
  0x00007f1a590420b2:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f1a590420b7:   vmovdqu 0x10(%rdx),%xmm3
  0x00007f1a590420bc:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a590420c1:   vmovdqu 0x20(%rdx),%xmm4
  0x00007f1a590420c6:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a590420cb:   vmovdqu 0x30(%rdx),%xmm5
  0x00007f1a590420d0:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f1a590420d5:   vmovdqu 0x40(%rdx),%xmm6
  0x00007f1a590420da:   vpshufb %xmm1,%xmm6,%xmm6
  0x00007f1a590420df:   vmovdqu 0x50(%rdx),%xmm7
  0x00007f1a590420e4:   vpshufb %xmm1,%xmm7,%xmm7
  0x00007f1a590420e9:   vmovdqu 0x60(%rdx),%xmm8
  0x00007f1a590420ee:   vpshufb %xmm1,%xmm8,%xmm8
  0x00007f1a590420f3:   vmovdqu 0x70(%rdx),%xmm9
  0x00007f1a590420f8:   vpshufb %xmm1,%xmm9,%xmm9
  0x00007f1a590420fd:   vmovdqu 0x80(%rdx),%xmm10
  0x00007f1a59042105:   vpshufb %xmm1,%xmm10,%xmm10
  0x00007f1a5904210a:   vmovdqu 0x90(%rdx),%xmm11
  0x00007f1a59042112:   vpshufb %xmm1,%xmm11,%xmm11
  0x00007f1a59042117:   vmovdqu 0xa0(%rdx),%xmm12
  0x00007f1a5904211f:   vpshufb %xmm1,%xmm12,%xmm12
  0x00007f1a59042124:   vmovdqu (%rcx),%xmm0
  0x00007f1a59042128:   mov    -0x4(%rdx),%eax
  0x00007f1a5904212b:   cmp    $0x2c,%eax
  0x00007f1a5904212e:   jne    Stub::cipherBlockChaining_encryptAESCrypt+245 0x00007f1a59042195
  0x00007f1a59042134:   movabs $0x0,%rax
  0x00007f1a5904213e:   xchg   %ax,%ax
  0x00007f1a59042140:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f1a59042145:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a59042149:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f1a5904214d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f1a59042152:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f1a59042157:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f1a5904215c:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007f1a59042161:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007f1a59042166:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007f1a5904216b:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007f1a59042170:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007f1a59042175:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007f1a5904217a:   vaesenclast %xmm12,%xmm0,%xmm0
  0x00007f1a5904217f:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f1a59042184:   add    $0x10,%rax
  0x00007f1a59042188:   sub    $0x10,%r8
  0x00007f1a5904218c:   jne    Stub::cipherBlockChaining_encryptAESCrypt+160 0x00007f1a59042140
  0x00007f1a5904218e:   vmovdqu %xmm0,(%rcx)
  0x00007f1a59042192:   pop    %rax
  0x00007f1a59042193:   leaveq 
  0x00007f1a59042194:   retq   
  0x00007f1a59042195:   vmovdqu 0xb0(%rdx),%xmm13
  0x00007f1a5904219d:   vpshufb %xmm1,%xmm13,%xmm13
  0x00007f1a590421a2:   vmovdqu 0xc0(%rdx),%xmm14
  0x00007f1a590421aa:   vpshufb %xmm1,%xmm14,%xmm14
  0x00007f1a590421af:   cmp    $0x34,%eax
  0x00007f1a590421b2:   jne    Stub::cipherBlockChaining_encryptAESCrypt+397 0x00007f1a5904222d
  0x00007f1a590421b8:   movabs $0x0,%rax
  0x00007f1a590421c2:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a590421cc:   data16 data16 xchg %ax,%ax
  0x00007f1a590421d0:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f1a590421d5:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a590421d9:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f1a590421dd:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f1a590421e2:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f1a590421e7:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f1a590421ec:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007f1a590421f1:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007f1a590421f6:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007f1a590421fb:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007f1a59042200:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007f1a59042205:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007f1a5904220a:   vaesenc %xmm12,%xmm0,%xmm0
  0x00007f1a5904220f:   vaesenc %xmm13,%xmm0,%xmm0
  0x00007f1a59042214:   vaesenclast %xmm14,%xmm0,%xmm0
  0x00007f1a59042219:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f1a5904221e:   add    $0x10,%rax
  0x00007f1a59042222:   sub    $0x10,%r8
  0x00007f1a59042226:   jne    Stub::cipherBlockChaining_encryptAESCrypt+304 0x00007f1a590421d0
  0x00007f1a59042228:   jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x00007f1a5904218e
  0x00007f1a5904222d:   vmovdqu 0xd0(%rdx),%xmm15
  0x00007f1a59042235:   vpshufb %xmm1,%xmm15,%xmm15
  0x00007f1a5904223a:   movabs $0x0,%rax
  0x00007f1a59042244:   nopl   0x0(%rax,%rax,1)
  0x00007f1a5904224c:   data16 data16 xchg %ax,%ax
  0x00007f1a59042250:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f1a59042255:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a59042259:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f1a5904225d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f1a59042262:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f1a59042267:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f1a5904226c:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007f1a59042271:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007f1a59042276:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007f1a5904227b:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007f1a59042280:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007f1a59042285:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007f1a5904228a:   vaesenc %xmm12,%xmm0,%xmm0
  0x00007f1a5904228f:   vaesenc %xmm13,%xmm0,%xmm0
  0x00007f1a59042294:   vaesenc %xmm14,%xmm0,%xmm0
  0x00007f1a59042299:   vaesenc %xmm15,%xmm0,%xmm0
  0x00007f1a5904229e:   vmovdqu 0xe0(%rdx),%xmm1
  0x00007f1a590422a6:   vpshufb 0xb541391(%rip),%xmm1,%xmm1        # 0x00007f1a64583640
  0x00007f1a590422af:   vaesenclast %xmm1,%xmm0,%xmm0
  0x00007f1a590422b4:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f1a590422b9:   add    $0x10,%rax
  0x00007f1a590422bd:   sub    $0x10,%r8
  0x00007f1a590422c1:   jne    Stub::cipherBlockChaining_encryptAESCrypt+432 0x00007f1a59042250
  0x00007f1a590422c3:   jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x00007f1a5904218e
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::cipherBlockChaining_decryptAESCrypt [0x00007f1a590422e0, 0x00007f1a59042aa9] (1993 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590422e0:   push   %rbp
  0x00007f1a590422e1:   mov    %rsp,%rbp
  0x00007f1a590422e4:   push   %r8
  0x00007f1a590422e6:   push   %rbx
  0x00007f1a590422e7:   vmovdqu 0xb541351(%rip),%xmm1        # 0x00007f1a64583640
  0x00007f1a590422ef:   vmovdqu 0x10(%rdx),%xmm5
  0x00007f1a590422f4:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f1a590422f9:   vmovdqu 0x20(%rdx),%xmm6
  0x00007f1a590422fe:   vpshufb %xmm1,%xmm6,%xmm6
  0x00007f1a59042303:   vmovdqu 0x30(%rdx),%xmm7
  0x00007f1a59042308:   vpshufb %xmm1,%xmm7,%xmm7
  0x00007f1a5904230d:   vmovdqu 0x40(%rdx),%xmm8
  0x00007f1a59042312:   vpshufb %xmm1,%xmm8,%xmm8
  0x00007f1a59042317:   vmovdqu 0x50(%rdx),%xmm9
  0x00007f1a5904231c:   vpshufb %xmm1,%xmm9,%xmm9
  0x00007f1a59042321:   vmovdqu 0x60(%rdx),%xmm10
  0x00007f1a59042326:   vpshufb %xmm1,%xmm10,%xmm10
  0x00007f1a5904232b:   vmovdqu 0x70(%rdx),%xmm11
  0x00007f1a59042330:   vpshufb %xmm1,%xmm11,%xmm11
  0x00007f1a59042335:   vmovdqu 0x80(%rdx),%xmm12
  0x00007f1a5904233d:   vpshufb %xmm1,%xmm12,%xmm12
  0x00007f1a59042342:   vmovdqu 0x90(%rdx),%xmm13
  0x00007f1a5904234a:   vpshufb %xmm1,%xmm13,%xmm13
  0x00007f1a5904234f:   vmovdqu 0xa0(%rdx),%xmm14
  0x00007f1a59042357:   vpshufb %xmm1,%xmm14,%xmm14
  0x00007f1a5904235c:   vmovdqu (%rdx),%xmm15
  0x00007f1a59042360:   vpshufb %xmm1,%xmm15,%xmm15
  0x00007f1a59042365:   vmovdqu (%rcx),%xmm1
  0x00007f1a59042369:   xor    %rax,%rax
  0x00007f1a5904236c:   mov    -0x4(%rdx),%ebx
  0x00007f1a5904236f:   cmp    $0x34,%ebx
  0x00007f1a59042372:   je     Stub::cipherBlockChaining_decryptAESCrypt+603 0x00007f1a5904253b
  0x00007f1a59042378:   cmp    $0x3c,%ebx
  0x00007f1a5904237b:   je     Stub::cipherBlockChaining_decryptAESCrypt+1221 0x00007f1a590427a5
  0x00007f1a59042381:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a5904238c:   data16 data16 xchg %ax,%ax
  0x00007f1a59042390:   cmp    $0x40,%r8
  0x00007f1a59042394:   jl     Stub::cipherBlockChaining_decryptAESCrypt+500 0x00007f1a590424d4
  0x00007f1a5904239a:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f1a5904239f:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007f1a590423a5:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007f1a590423ab:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007f1a590423b1:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f1a590423b5:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007f1a590423b9:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007f1a590423bd:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f1a590423c1:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f1a590423c6:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007f1a590423cb:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007f1a590423d0:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007f1a590423d5:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f1a590423da:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007f1a590423df:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007f1a590423e4:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007f1a590423e9:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f1a590423ee:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007f1a590423f3:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007f1a590423f8:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007f1a590423fd:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f1a59042402:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007f1a59042407:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007f1a5904240c:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007f1a59042411:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f1a59042416:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007f1a5904241b:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007f1a59042420:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007f1a59042425:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f1a5904242a:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007f1a5904242f:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007f1a59042434:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007f1a59042439:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f1a5904243e:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007f1a59042443:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007f1a59042448:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007f1a5904244d:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f1a59042452:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007f1a59042457:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007f1a5904245c:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007f1a59042461:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f1a59042466:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007f1a5904246b:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007f1a59042470:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007f1a59042475:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f1a5904247a:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007f1a5904247f:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007f1a59042484:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007f1a59042489:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a5904248d:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f1a59042492:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007f1a59042496:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007f1a5904249c:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007f1a590424a0:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007f1a590424a6:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007f1a590424aa:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007f1a590424b0:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f1a590424b5:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007f1a590424bb:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007f1a590424c1:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007f1a590424c7:   add    $0x40,%rax
  0x00007f1a590424cb:   sub    $0x40,%r8
  0x00007f1a590424cf:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+176 0x00007f1a59042390
  0x00007f1a590424d4:   cmp    $0x0,%r8
  0x00007f1a590424d8:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f1a59042aa1
  0x00007f1a590424de:   xchg   %ax,%ax
  0x00007f1a590424e0:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f1a590424e5:   vmovdqa %xmm0,%xmm2
  0x00007f1a590424e9:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f1a590424ed:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f1a590424f2:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f1a590424f7:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f1a590424fc:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f1a59042501:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f1a59042506:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f1a5904250b:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f1a59042510:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f1a59042515:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f1a5904251a:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f1a5904251f:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a59042523:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f1a59042528:   vmovdqa %xmm2,%xmm1
  0x00007f1a5904252c:   add    $0x10,%rax
  0x00007f1a59042530:   sub    $0x10,%r8
  0x00007f1a59042534:   jne    Stub::cipherBlockChaining_decryptAESCrypt+512 0x00007f1a590424e0
  0x00007f1a59042536:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f1a59042aa1
  0x00007f1a5904253b:   cmp    $0x40,%r8
  0x00007f1a5904253f:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1075 0x00007f1a59042713
  0x00007f1a59042545:   sub    $0x30,%rsp
  0x00007f1a59042549:   vmovdqu %xmm15,(%rsp)
  0x00007f1a5904254e:   vmovdqu 0xb0(%rdx),%xmm15
  0x00007f1a59042556:   vpshufb 0xb5410e1(%rip),%xmm15,%xmm15        # 0x00007f1a64583640
  0x00007f1a5904255f:   vmovdqu %xmm15,0x10(%rsp)
  0x00007f1a59042565:   vmovdqu 0xc0(%rdx),%xmm1
  0x00007f1a5904256d:   vpshufb 0xb5410ca(%rip),%xmm1,%xmm1        # 0x00007f1a64583640
  0x00007f1a59042576:   vmovdqu %xmm1,0x20(%rsp)
  0x00007f1a5904257c:   nopl   0x0(%rax)
  0x00007f1a59042580:   cmp    $0x40,%r8
  0x00007f1a59042584:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1061 0x00007f1a59042705
  0x00007f1a5904258a:   vmovdqu 0x10(%rsp),%xmm15
  0x00007f1a59042590:   vmovdqu 0x20(%rsp),%xmm1
  0x00007f1a59042596:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f1a5904259b:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007f1a590425a1:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007f1a590425a7:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007f1a590425ad:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f1a590425b1:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007f1a590425b5:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007f1a590425b9:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f1a590425bd:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f1a590425c2:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007f1a590425c7:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007f1a590425cc:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007f1a590425d1:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f1a590425d6:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007f1a590425db:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007f1a590425e0:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007f1a590425e5:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f1a590425ea:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007f1a590425ef:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007f1a590425f4:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007f1a590425f9:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f1a590425fe:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007f1a59042603:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007f1a59042608:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007f1a5904260d:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f1a59042612:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007f1a59042617:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007f1a5904261c:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007f1a59042621:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f1a59042626:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007f1a5904262b:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007f1a59042630:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007f1a59042635:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f1a5904263a:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007f1a5904263f:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007f1a59042644:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007f1a59042649:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f1a5904264e:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007f1a59042653:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007f1a59042658:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007f1a5904265d:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f1a59042662:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007f1a59042667:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007f1a5904266c:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007f1a59042671:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007f1a59042676:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007f1a5904267b:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007f1a59042680:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007f1a59042685:   vmovdqu (%rsp),%xmm15
  0x00007f1a5904268a:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007f1a5904268f:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007f1a59042694:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007f1a59042699:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007f1a5904269e:   vmovdqu (%rcx),%xmm1
  0x00007f1a590426a2:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f1a590426a7:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007f1a590426ac:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007f1a590426b1:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007f1a590426b6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a590426ba:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f1a590426bf:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007f1a590426c3:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007f1a590426c9:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007f1a590426cd:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007f1a590426d3:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007f1a590426d7:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007f1a590426dd:   vmovdqu %xmm1,(%rcx)
  0x00007f1a590426e1:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f1a590426e6:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007f1a590426ec:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007f1a590426f2:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007f1a590426f8:   add    $0x40,%rax
  0x00007f1a590426fc:   sub    $0x40,%r8
  0x00007f1a59042700:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+672 0x00007f1a59042580
  0x00007f1a59042705:   add    $0x30,%rsp
  0x00007f1a59042709:   cmp    $0x0,%r8
  0x00007f1a5904270d:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f1a59042aa1
  0x00007f1a59042713:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007f1a5904271b:   vpshufb 0xb540f1c(%rip),%xmm3,%xmm3        # 0x00007f1a64583640
  0x00007f1a59042724:   vmovdqu 0xc0(%rdx),%xmm4
  0x00007f1a5904272c:   vpshufb 0xb540f0b(%rip),%xmm4,%xmm4        # 0x00007f1a64583640
  0x00007f1a59042735:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a59042740:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f1a59042745:   vmovdqa %xmm0,%xmm2
  0x00007f1a59042749:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f1a5904274d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f1a59042752:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f1a59042757:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f1a5904275c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f1a59042761:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f1a59042766:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f1a5904276b:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f1a59042770:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f1a59042775:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f1a5904277a:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f1a5904277f:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f1a59042784:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f1a59042789:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a5904278d:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f1a59042792:   vmovdqa %xmm2,%xmm1
  0x00007f1a59042796:   add    $0x10,%rax
  0x00007f1a5904279a:   sub    $0x10,%r8
  0x00007f1a5904279e:   jne    Stub::cipherBlockChaining_decryptAESCrypt+1120 0x00007f1a59042740
  0x00007f1a590427a0:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f1a59042aa1
  0x00007f1a590427a5:   cmp    $0x40,%r8
  0x00007f1a590427a9:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1799 0x00007f1a590429e7
  0x00007f1a590427af:   sub    $0x50,%rsp
  0x00007f1a590427b3:   vmovdqu %xmm15,(%rsp)
  0x00007f1a590427b8:   vmovdqu 0xd0(%rdx),%xmm15
  0x00007f1a590427c0:   vpshufb 0xb540e77(%rip),%xmm15,%xmm15        # 0x00007f1a64583640
  0x00007f1a590427c9:   vmovdqu %xmm15,0x30(%rsp)
  0x00007f1a590427cf:   vmovdqu 0xe0(%rdx),%xmm1
  0x00007f1a590427d7:   vpshufb 0xb540e60(%rip),%xmm1,%xmm1        # 0x00007f1a64583640
  0x00007f1a590427e0:   vmovdqu %xmm1,0x40(%rsp)
  0x00007f1a590427e6:   vmovdqu 0xb0(%rdx),%xmm15
  0x00007f1a590427ee:   vpshufb 0xb540e49(%rip),%xmm15,%xmm15        # 0x00007f1a64583640
  0x00007f1a590427f7:   vmovdqu %xmm15,0x10(%rsp)
  0x00007f1a590427fd:   vmovdqu 0xc0(%rdx),%xmm1
  0x00007f1a59042805:   vpshufb 0xb540e32(%rip),%xmm1,%xmm1        # 0x00007f1a64583640
  0x00007f1a5904280e:   vmovdqu %xmm1,0x20(%rsp)
  0x00007f1a59042814:   nopl   0x0(%rax,%rax,1)
  0x00007f1a5904281c:   data16 data16 xchg %ax,%ax
  0x00007f1a59042820:   cmp    $0x40,%r8
  0x00007f1a59042824:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1785 0x00007f1a590429d9
  0x00007f1a5904282a:   vmovdqu 0x10(%rsp),%xmm15
  0x00007f1a59042830:   vmovdqu 0x20(%rsp),%xmm1
  0x00007f1a59042836:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f1a5904283b:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007f1a59042841:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007f1a59042847:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007f1a5904284d:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f1a59042851:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007f1a59042855:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007f1a59042859:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f1a5904285d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f1a59042862:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007f1a59042867:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007f1a5904286c:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007f1a59042871:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f1a59042876:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007f1a5904287b:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007f1a59042880:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007f1a59042885:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f1a5904288a:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007f1a5904288f:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007f1a59042894:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007f1a59042899:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f1a5904289e:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007f1a590428a3:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007f1a590428a8:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007f1a590428ad:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f1a590428b2:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007f1a590428b7:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007f1a590428bc:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007f1a590428c1:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f1a590428c6:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007f1a590428cb:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007f1a590428d0:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007f1a590428d5:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f1a590428da:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007f1a590428df:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007f1a590428e4:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007f1a590428e9:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f1a590428ee:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007f1a590428f3:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007f1a590428f8:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007f1a590428fd:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f1a59042902:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007f1a59042907:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007f1a5904290c:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007f1a59042911:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007f1a59042916:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007f1a5904291b:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007f1a59042920:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007f1a59042925:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007f1a5904292a:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007f1a5904292f:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007f1a59042934:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007f1a59042939:   vmovdqu 0x30(%rsp),%xmm15
  0x00007f1a5904293f:   vmovdqu 0x40(%rsp),%xmm1
  0x00007f1a59042945:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007f1a5904294a:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007f1a5904294f:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007f1a59042954:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007f1a59042959:   vmovdqu (%rsp),%xmm15
  0x00007f1a5904295e:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007f1a59042963:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007f1a59042968:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007f1a5904296d:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007f1a59042972:   vmovdqu (%rcx),%xmm1
  0x00007f1a59042976:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f1a5904297b:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007f1a59042980:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007f1a59042985:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007f1a5904298a:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a5904298e:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f1a59042993:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007f1a59042997:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007f1a5904299d:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007f1a590429a1:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007f1a590429a7:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007f1a590429ab:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007f1a590429b1:   vmovdqu %xmm1,(%rcx)
  0x00007f1a590429b5:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f1a590429ba:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007f1a590429c0:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007f1a590429c6:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007f1a590429cc:   add    $0x40,%rax
  0x00007f1a590429d0:   sub    $0x40,%r8
  0x00007f1a590429d4:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1344 0x00007f1a59042820
  0x00007f1a590429d9:   add    $0x50,%rsp
  0x00007f1a590429dd:   cmp    $0x0,%r8
  0x00007f1a590429e1:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f1a59042aa1
  0x00007f1a590429e7:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007f1a590429ef:   vpshufb 0xb540c48(%rip),%xmm3,%xmm3        # 0x00007f1a64583640
  0x00007f1a590429f8:   nopl   0x0(%rax,%rax,1)
  0x00007f1a59042a00:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f1a59042a05:   vmovdqa %xmm0,%xmm2
  0x00007f1a59042a09:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f1a59042a0d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f1a59042a12:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f1a59042a17:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f1a59042a1c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f1a59042a21:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f1a59042a26:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f1a59042a2b:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f1a59042a30:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f1a59042a35:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f1a59042a3a:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f1a59042a3f:   vmovdqu 0xc0(%rdx),%xmm4
  0x00007f1a59042a47:   vpshufb 0xb540bf0(%rip),%xmm4,%xmm4        # 0x00007f1a64583640
  0x00007f1a59042a50:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f1a59042a55:   vmovdqu 0xd0(%rdx),%xmm4
  0x00007f1a59042a5d:   vpshufb 0xb540bda(%rip),%xmm4,%xmm4        # 0x00007f1a64583640
  0x00007f1a59042a66:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f1a59042a6b:   vmovdqu 0xe0(%rdx),%xmm4
  0x00007f1a59042a73:   vpshufb 0xb540bc4(%rip),%xmm4,%xmm4        # 0x00007f1a64583640
  0x00007f1a59042a7c:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f1a59042a81:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f1a59042a86:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a59042a8a:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f1a59042a8f:   vmovdqa %xmm2,%xmm1
  0x00007f1a59042a93:   add    $0x10,%rax
  0x00007f1a59042a97:   sub    $0x10,%r8
  0x00007f1a59042a9b:   jne    Stub::cipherBlockChaining_decryptAESCrypt+1824 0x00007f1a59042a00
  0x00007f1a59042aa1:   vmovdqu %xmm1,(%rcx)
  0x00007f1a59042aa5:   pop    %rbx
  0x00007f1a59042aa6:   pop    %rax
  0x00007f1a59042aa7:   leaveq 
  0x00007f1a59042aa8:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::counterMode_AESCrypt [0x00007f1a59042ac0, 0x00007f1a59043c79] (4537 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59042ac0:   push   %rbp
  0x00007f1a59042ac1:   mov    %rsp,%rbp
  0x00007f1a59042ac4:   push   %r8
  0x00007f1a59042ac6:   mov    0x10(%rbp),%r10
  0x00007f1a59042aca:   mov    (%r10),%r11d
  0x00007f1a59042acd:   push   %rbx
  0x00007f1a59042ace:   vmovdqu (%rcx),%xmm2
  0x00007f1a59042ad2:   vmovdqu 0xb540b26(%rip),%xmm0        # 0x00007f1a64583600
  0x00007f1a59042ada:   vpshufb %xmm0,%xmm2,%xmm2
  0x00007f1a59042adf:   movabs $0x0,%rax
  0x00007f1a59042ae9:   cmp    $0x10,%r11
  0x00007f1a59042aed:   jae    Stub::counterMode_AESCrypt+85 0x00007f1a59042b15
  0x00007f1a59042af3:   cmp    $0x0,%r8
  0x00007f1a59042af7:   jle    Stub::counterMode_AESCrypt+85 0x00007f1a59042b15
  0x00007f1a59042afd:   mov    (%r9,%r11,1),%bl
  0x00007f1a59042b01:   xor    (%rdi,%rax,1),%bl
  0x00007f1a59042b04:   mov    %bl,(%rsi,%rax,1)
  0x00007f1a59042b07:   add    $0x1,%rax
  0x00007f1a59042b0b:   add    $0x1,%r11
  0x00007f1a59042b0f:   sub    $0x1,%r8
  0x00007f1a59042b13:   jmp    Stub::counterMode_AESCrypt+41 0x00007f1a59042ae9
  0x00007f1a59042b15:   mov    %r11d,(%r10)
  0x00007f1a59042b18:   vmovdqu 0xb540b20(%rip),%xmm1        # 0x00007f1a64583640
  0x00007f1a59042b20:   mov    -0x4(%rdx),%ebx
  0x00007f1a59042b23:   cmp    $0x34,%ebx
  0x00007f1a59042b26:   je     Stub::counterMode_AESCrypt+1472 0x00007f1a59043080
  0x00007f1a59042b2c:   cmp    $0x3c,%ebx
  0x00007f1a59042b2f:   je     Stub::counterMode_AESCrypt+2944 0x00007f1a59043640
  0x00007f1a59042b35:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a59042b40:   cmp    $0x60,%r8
  0x00007f1a59042b44:   jl     Stub::counterMode_AESCrypt+976 0x00007f1a59042e90
  0x00007f1a59042b4a:   vmovdqu (%rdx),%xmm3
  0x00007f1a59042b4e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042b53:   vmovdqa %xmm2,%xmm5
  0x00007f1a59042b57:   vmovdqa %xmm2,%xmm6
  0x00007f1a59042b5b:   vmovdqa %xmm2,%xmm7
  0x00007f1a59042b5f:   vmovdqa %xmm2,%xmm8
  0x00007f1a59042b63:   vmovdqa %xmm2,%xmm9
  0x00007f1a59042b67:   vmovdqa %xmm2,%xmm10
  0x00007f1a59042b6b:   vpextrq $0x0,%xmm6,%rbx
  0x00007f1a59042b71:   add    $0x1,%rbx
  0x00007f1a59042b75:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007f1a59042b7b:   jae    Stub::counterMode_AESCrypt+209 0x00007f1a59042b91
  0x00007f1a59042b81:   vpextrq $0x1,%xmm6,%rbx
  0x00007f1a59042b87:   add    $0x1,%rbx
  0x00007f1a59042b8b:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007f1a59042b91:   vpextrq $0x0,%xmm7,%rbx
  0x00007f1a59042b97:   add    $0x2,%rbx
  0x00007f1a59042b9b:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007f1a59042ba1:   jae    Stub::counterMode_AESCrypt+247 0x00007f1a59042bb7
  0x00007f1a59042ba7:   vpextrq $0x1,%xmm7,%rbx
  0x00007f1a59042bad:   add    $0x1,%rbx
  0x00007f1a59042bb1:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007f1a59042bb7:   vpextrq $0x0,%xmm8,%rbx
  0x00007f1a59042bbd:   add    $0x3,%rbx
  0x00007f1a59042bc1:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007f1a59042bc7:   jae    Stub::counterMode_AESCrypt+285 0x00007f1a59042bdd
  0x00007f1a59042bcd:   vpextrq $0x1,%xmm8,%rbx
  0x00007f1a59042bd3:   add    $0x1,%rbx
  0x00007f1a59042bd7:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007f1a59042bdd:   vpextrq $0x0,%xmm9,%rbx
  0x00007f1a59042be3:   add    $0x4,%rbx
  0x00007f1a59042be7:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007f1a59042bed:   jae    Stub::counterMode_AESCrypt+323 0x00007f1a59042c03
  0x00007f1a59042bf3:   vpextrq $0x1,%xmm9,%rbx
  0x00007f1a59042bf9:   add    $0x1,%rbx
  0x00007f1a59042bfd:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007f1a59042c03:   vpextrq $0x0,%xmm10,%rbx
  0x00007f1a59042c09:   add    $0x5,%rbx
  0x00007f1a59042c0d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007f1a59042c13:   jae    Stub::counterMode_AESCrypt+361 0x00007f1a59042c29
  0x00007f1a59042c19:   vpextrq $0x1,%xmm10,%rbx
  0x00007f1a59042c1f:   add    $0x1,%rbx
  0x00007f1a59042c23:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007f1a59042c29:   vpextrq $0x0,%xmm2,%rbx
  0x00007f1a59042c2f:   add    $0x6,%rbx
  0x00007f1a59042c33:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f1a59042c39:   jae    Stub::counterMode_AESCrypt+399 0x00007f1a59042c4f
  0x00007f1a59042c3f:   vpextrq $0x1,%xmm2,%rbx
  0x00007f1a59042c45:   add    $0x1,%rbx
  0x00007f1a59042c49:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f1a59042c4f:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f1a59042c54:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007f1a59042c59:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007f1a59042c5e:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007f1a59042c63:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007f1a59042c68:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007f1a59042c6d:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f1a59042c71:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007f1a59042c75:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007f1a59042c79:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007f1a59042c7d:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f1a59042c81:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007f1a59042c85:   vmovdqu 0x10(%rdx),%xmm4
  0x00007f1a59042c8a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a59042c8f:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f1a59042c94:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042c99:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a59042c9e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a59042ca3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a59042ca8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a59042cad:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a59042cb2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59042cb7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042cbc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a59042cc1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a59042cc6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a59042ccb:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a59042cd0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a59042cd5:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f1a59042cda:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a59042cdf:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f1a59042ce4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042ce9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a59042cee:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a59042cf3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a59042cf8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a59042cfd:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a59042d02:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59042d07:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042d0c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a59042d11:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a59042d16:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a59042d1b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a59042d20:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a59042d25:   vmovdqu 0x50(%rdx),%xmm4
  0x00007f1a59042d2a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a59042d2f:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f1a59042d34:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042d39:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a59042d3e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a59042d43:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a59042d48:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a59042d4d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a59042d52:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59042d57:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042d5c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a59042d61:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a59042d66:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a59042d6b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a59042d70:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a59042d75:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f1a59042d7a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a59042d7f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f1a59042d87:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042d8c:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a59042d91:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a59042d96:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a59042d9b:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a59042da0:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a59042da5:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59042daa:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042daf:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a59042db4:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a59042db9:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a59042dbe:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a59042dc3:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a59042dc8:   vmovdqu 0x90(%rdx),%xmm4
  0x00007f1a59042dd0:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a59042dd5:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f1a59042ddd:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042de2:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a59042de7:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a59042dec:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a59042df1:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a59042df6:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a59042dfb:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59042e00:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f1a59042e05:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007f1a59042e0a:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007f1a59042e0f:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007f1a59042e14:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007f1a59042e19:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007f1a59042e1e:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f1a59042e23:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007f1a59042e29:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007f1a59042e2f:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007f1a59042e35:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007f1a59042e3b:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007f1a59042e41:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f1a59042e46:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007f1a59042e4b:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007f1a59042e50:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007f1a59042e55:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f1a59042e59:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007f1a59042e5d:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f1a59042e62:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007f1a59042e68:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007f1a59042e6e:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007f1a59042e74:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007f1a59042e7a:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007f1a59042e80:   add    $0x60,%rax
  0x00007f1a59042e84:   sub    $0x60,%r8
  0x00007f1a59042e88:   jmpq   Stub::counterMode_AESCrypt+128 0x00007f1a59042b40
  0x00007f1a59042e8d:   data16 xchg %ax,%ax
  0x00007f1a59042e90:   cmp    $0x0,%r8
  0x00007f1a59042e94:   jle    Stub::counterMode_AESCrypt+4524 0x00007f1a59043c6c
  0x00007f1a59042e9a:   vmovdqu (%rdx),%xmm3
  0x00007f1a59042e9e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042ea3:   vmovdqa %xmm2,%xmm5
  0x00007f1a59042ea7:   vpextrq $0x0,%xmm2,%rbx
  0x00007f1a59042ead:   add    $0x1,%rbx
  0x00007f1a59042eb1:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f1a59042eb7:   jae    Stub::counterMode_AESCrypt+1037 0x00007f1a59042ecd
  0x00007f1a59042ebd:   vpextrq $0x1,%xmm2,%rbx
  0x00007f1a59042ec3:   add    $0x1,%rbx
  0x00007f1a59042ec7:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f1a59042ecd:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f1a59042ed2:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f1a59042ed6:   vmovdqu 0x10(%rdx),%xmm3
  0x00007f1a59042edb:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042ee0:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042ee5:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f1a59042eea:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042eef:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042ef4:   vmovdqu 0x30(%rdx),%xmm3
  0x00007f1a59042ef9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042efe:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042f03:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f1a59042f08:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042f0d:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042f12:   vmovdqu 0x50(%rdx),%xmm3
  0x00007f1a59042f17:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042f1c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042f21:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f1a59042f26:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042f2b:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042f30:   vmovdqu 0x70(%rdx),%xmm3
  0x00007f1a59042f35:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042f3a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042f3f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f1a59042f47:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042f4c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042f51:   vmovdqu 0x90(%rdx),%xmm3
  0x00007f1a59042f59:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042f5e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59042f63:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f1a59042f6b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59042f70:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f1a59042f75:   cmp    $0x10,%r8
  0x00007f1a59042f79:   jl     Stub::counterMode_AESCrypt+1243 0x00007f1a59042f9b
  0x00007f1a59042f7f:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f1a59042f84:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f1a59042f89:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f1a59042f8e:   add    $0x10,%rax
  0x00007f1a59042f92:   sub    $0x10,%r8
  0x00007f1a59042f96:   jmpq   Stub::counterMode_AESCrypt+976 0x00007f1a59042e90
  0x00007f1a59042f9b:   add    %r8,%rax
  0x00007f1a59042f9e:   test   $0x8,%r8b
  0x00007f1a59042fa2:   je     Stub::counterMode_AESCrypt+1267 0x00007f1a59042fb3
  0x00007f1a59042fa8:   sub    $0x8,%rax
  0x00007f1a59042fac:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f1a59042fb3:   test   $0x4,%r8b
  0x00007f1a59042fb7:   je     Stub::counterMode_AESCrypt+1294 0x00007f1a59042fce
  0x00007f1a59042fbd:   sub    $0x4,%rax
  0x00007f1a59042fc1:   vpslldq $0x4,%xmm11,%xmm11
  0x00007f1a59042fc7:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f1a59042fce:   test   $0x2,%r8b
  0x00007f1a59042fd2:   je     Stub::counterMode_AESCrypt+1320 0x00007f1a59042fe8
  0x00007f1a59042fd8:   sub    $0x2,%rax
  0x00007f1a59042fdc:   vpslldq $0x2,%xmm11,%xmm11
  0x00007f1a59042fe2:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f1a59042fe8:   test   $0x1,%r8b
  0x00007f1a59042fec:   je     Stub::counterMode_AESCrypt+1347 0x00007f1a59043003
  0x00007f1a59042ff2:   sub    $0x1,%rax
  0x00007f1a59042ff6:   vpslldq $0x1,%xmm11,%xmm11
  0x00007f1a59042ffc:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f1a59043003:   vmovdqu %xmm5,(%r9)
  0x00007f1a59043008:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f1a5904300d:   test   $0x8,%r8b
  0x00007f1a59043011:   je     Stub::counterMode_AESCrypt+1383 0x00007f1a59043027
  0x00007f1a59043017:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f1a5904301e:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f1a59043023:   add    $0x8,%rax
  0x00007f1a59043027:   test   $0x4,%r8b
  0x00007f1a5904302b:   je     Stub::counterMode_AESCrypt+1409 0x00007f1a59043041
  0x00007f1a59043031:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f1a59043038:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007f1a5904303d:   add    $0x4,%rax
  0x00007f1a59043041:   test   $0x2,%r8b
  0x00007f1a59043045:   je     Stub::counterMode_AESCrypt+1435 0x00007f1a5904305b
  0x00007f1a5904304b:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f1a59043052:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007f1a59043057:   add    $0x2,%rax
  0x00007f1a5904305b:   test   $0x1,%r8b
  0x00007f1a5904305f:   je     Stub::counterMode_AESCrypt+1452 0x00007f1a5904306c
  0x00007f1a59043065:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f1a5904306c:   mov    %r8d,(%r10)
  0x00007f1a5904306f:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007f1a59043c6c
  0x00007f1a59043074:   nopl   0x0(%rax,%rax,1)
  0x00007f1a5904307c:   data16 data16 xchg %ax,%ax
  0x00007f1a59043080:   cmp    $0x60,%r8
  0x00007f1a59043084:   jl     Stub::counterMode_AESCrypt+2416 0x00007f1a59043430
  0x00007f1a5904308a:   vmovdqu (%rdx),%xmm3
  0x00007f1a5904308e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043093:   vmovdqa %xmm2,%xmm5
  0x00007f1a59043097:   vmovdqa %xmm2,%xmm6
  0x00007f1a5904309b:   vmovdqa %xmm2,%xmm7
  0x00007f1a5904309f:   vmovdqa %xmm2,%xmm8
  0x00007f1a590430a3:   vmovdqa %xmm2,%xmm9
  0x00007f1a590430a7:   vmovdqa %xmm2,%xmm10
  0x00007f1a590430ab:   vpextrq $0x0,%xmm6,%rbx
  0x00007f1a590430b1:   add    $0x1,%rbx
  0x00007f1a590430b5:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007f1a590430bb:   jae    Stub::counterMode_AESCrypt+1553 0x00007f1a590430d1
  0x00007f1a590430c1:   vpextrq $0x1,%xmm6,%rbx
  0x00007f1a590430c7:   add    $0x1,%rbx
  0x00007f1a590430cb:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007f1a590430d1:   vpextrq $0x0,%xmm7,%rbx
  0x00007f1a590430d7:   add    $0x2,%rbx
  0x00007f1a590430db:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007f1a590430e1:   jae    Stub::counterMode_AESCrypt+1591 0x00007f1a590430f7
  0x00007f1a590430e7:   vpextrq $0x1,%xmm7,%rbx
  0x00007f1a590430ed:   add    $0x1,%rbx
  0x00007f1a590430f1:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007f1a590430f7:   vpextrq $0x0,%xmm8,%rbx
  0x00007f1a590430fd:   add    $0x3,%rbx
  0x00007f1a59043101:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007f1a59043107:   jae    Stub::counterMode_AESCrypt+1629 0x00007f1a5904311d
  0x00007f1a5904310d:   vpextrq $0x1,%xmm8,%rbx
  0x00007f1a59043113:   add    $0x1,%rbx
  0x00007f1a59043117:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007f1a5904311d:   vpextrq $0x0,%xmm9,%rbx
  0x00007f1a59043123:   add    $0x4,%rbx
  0x00007f1a59043127:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007f1a5904312d:   jae    Stub::counterMode_AESCrypt+1667 0x00007f1a59043143
  0x00007f1a59043133:   vpextrq $0x1,%xmm9,%rbx
  0x00007f1a59043139:   add    $0x1,%rbx
  0x00007f1a5904313d:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007f1a59043143:   vpextrq $0x0,%xmm10,%rbx
  0x00007f1a59043149:   add    $0x5,%rbx
  0x00007f1a5904314d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007f1a59043153:   jae    Stub::counterMode_AESCrypt+1705 0x00007f1a59043169
  0x00007f1a59043159:   vpextrq $0x1,%xmm10,%rbx
  0x00007f1a5904315f:   add    $0x1,%rbx
  0x00007f1a59043163:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007f1a59043169:   vpextrq $0x0,%xmm2,%rbx
  0x00007f1a5904316f:   add    $0x6,%rbx
  0x00007f1a59043173:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f1a59043179:   jae    Stub::counterMode_AESCrypt+1743 0x00007f1a5904318f
  0x00007f1a5904317f:   vpextrq $0x1,%xmm2,%rbx
  0x00007f1a59043185:   add    $0x1,%rbx
  0x00007f1a59043189:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f1a5904318f:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f1a59043194:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007f1a59043199:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007f1a5904319e:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007f1a590431a3:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007f1a590431a8:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007f1a590431ad:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f1a590431b1:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007f1a590431b5:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007f1a590431b9:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007f1a590431bd:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f1a590431c1:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007f1a590431c5:   vmovdqu 0x10(%rdx),%xmm4
  0x00007f1a590431ca:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a590431cf:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f1a590431d4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a590431d9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a590431de:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a590431e3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a590431e8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a590431ed:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a590431f2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a590431f7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a590431fc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a59043201:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a59043206:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a5904320b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a59043210:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a59043215:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f1a5904321a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a5904321f:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f1a59043224:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043229:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a5904322e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a59043233:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a59043238:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a5904323d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a59043242:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59043247:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a5904324c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a59043251:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a59043256:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a5904325b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a59043260:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a59043265:   vmovdqu 0x50(%rdx),%xmm4
  0x00007f1a5904326a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a5904326f:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f1a59043274:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043279:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a5904327e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a59043283:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a59043288:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a5904328d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a59043292:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59043297:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a5904329c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a590432a1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a590432a6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a590432ab:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a590432b0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a590432b5:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f1a590432ba:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a590432bf:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f1a590432c7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a590432cc:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a590432d1:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a590432d6:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a590432db:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a590432e0:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a590432e5:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a590432ea:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a590432ef:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a590432f4:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a590432f9:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a590432fe:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a59043303:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a59043308:   vmovdqu 0x90(%rdx),%xmm4
  0x00007f1a59043310:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a59043315:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f1a5904331d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043322:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a59043327:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a5904332c:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a59043331:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a59043336:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a5904333b:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59043340:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043345:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a5904334a:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a5904334f:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a59043354:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a59043359:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a5904335e:   vmovdqu 0xb0(%rdx),%xmm4
  0x00007f1a59043366:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a5904336b:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f1a59043373:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043378:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a5904337d:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a59043382:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a59043387:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a5904338c:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a59043391:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59043396:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f1a5904339b:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007f1a590433a0:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007f1a590433a5:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007f1a590433aa:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007f1a590433af:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007f1a590433b4:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f1a590433b9:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007f1a590433bf:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007f1a590433c5:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007f1a590433cb:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007f1a590433d1:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007f1a590433d7:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f1a590433dc:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007f1a590433e1:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007f1a590433e6:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007f1a590433eb:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f1a590433ef:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007f1a590433f3:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f1a590433f8:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007f1a590433fe:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007f1a59043404:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007f1a5904340a:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007f1a59043410:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007f1a59043416:   add    $0x60,%rax
  0x00007f1a5904341a:   sub    $0x60,%r8
  0x00007f1a5904341e:   jmpq   Stub::counterMode_AESCrypt+1472 0x00007f1a59043080
  0x00007f1a59043423:   nopw   0x0(%rax,%rax,1)
  0x00007f1a5904342c:   data16 data16 xchg %ax,%ax
  0x00007f1a59043430:   cmp    $0x0,%r8
  0x00007f1a59043434:   jle    Stub::counterMode_AESCrypt+4524 0x00007f1a59043c6c
  0x00007f1a5904343a:   vmovdqu (%rdx),%xmm3
  0x00007f1a5904343e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043443:   vmovdqa %xmm2,%xmm5
  0x00007f1a59043447:   vpextrq $0x0,%xmm2,%rbx
  0x00007f1a5904344d:   add    $0x1,%rbx
  0x00007f1a59043451:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f1a59043457:   jae    Stub::counterMode_AESCrypt+2477 0x00007f1a5904346d
  0x00007f1a5904345d:   vpextrq $0x1,%xmm2,%rbx
  0x00007f1a59043463:   add    $0x1,%rbx
  0x00007f1a59043467:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f1a5904346d:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f1a59043472:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f1a59043476:   vmovdqu 0x10(%rdx),%xmm3
  0x00007f1a5904347b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043480:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043485:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f1a5904348a:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a5904348f:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043494:   vmovdqu 0x30(%rdx),%xmm3
  0x00007f1a59043499:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a5904349e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a590434a3:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f1a590434a8:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a590434ad:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a590434b2:   vmovdqu 0x50(%rdx),%xmm3
  0x00007f1a590434b7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a590434bc:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a590434c1:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f1a590434c6:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a590434cb:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a590434d0:   vmovdqu 0x70(%rdx),%xmm3
  0x00007f1a590434d5:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a590434da:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a590434df:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f1a590434e7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a590434ec:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a590434f1:   vmovdqu 0x90(%rdx),%xmm3
  0x00007f1a590434f9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a590434fe:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043503:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f1a5904350b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043510:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043515:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007f1a5904351d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043522:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043527:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f1a5904352f:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043534:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f1a59043539:   cmp    $0x10,%r8
  0x00007f1a5904353d:   jl     Stub::counterMode_AESCrypt+2719 0x00007f1a5904355f
  0x00007f1a59043543:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f1a59043548:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f1a5904354d:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f1a59043552:   add    $0x10,%rax
  0x00007f1a59043556:   sub    $0x10,%r8
  0x00007f1a5904355a:   jmpq   Stub::counterMode_AESCrypt+2416 0x00007f1a59043430
  0x00007f1a5904355f:   add    %r8,%rax
  0x00007f1a59043562:   test   $0x8,%r8b
  0x00007f1a59043566:   je     Stub::counterMode_AESCrypt+2743 0x00007f1a59043577
  0x00007f1a5904356c:   sub    $0x8,%rax
  0x00007f1a59043570:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f1a59043577:   test   $0x4,%r8b
  0x00007f1a5904357b:   je     Stub::counterMode_AESCrypt+2770 0x00007f1a59043592
  0x00007f1a59043581:   sub    $0x4,%rax
  0x00007f1a59043585:   vpslldq $0x4,%xmm11,%xmm11
  0x00007f1a5904358b:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f1a59043592:   test   $0x2,%r8b
  0x00007f1a59043596:   je     Stub::counterMode_AESCrypt+2796 0x00007f1a590435ac
  0x00007f1a5904359c:   sub    $0x2,%rax
  0x00007f1a590435a0:   vpslldq $0x2,%xmm11,%xmm11
  0x00007f1a590435a6:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f1a590435ac:   test   $0x1,%r8b
  0x00007f1a590435b0:   je     Stub::counterMode_AESCrypt+2823 0x00007f1a590435c7
  0x00007f1a590435b6:   sub    $0x1,%rax
  0x00007f1a590435ba:   vpslldq $0x1,%xmm11,%xmm11
  0x00007f1a590435c0:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f1a590435c7:   vmovdqu %xmm5,(%r9)
  0x00007f1a590435cc:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f1a590435d1:   test   $0x8,%r8b
  0x00007f1a590435d5:   je     Stub::counterMode_AESCrypt+2859 0x00007f1a590435eb
  0x00007f1a590435db:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f1a590435e2:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f1a590435e7:   add    $0x8,%rax
  0x00007f1a590435eb:   test   $0x4,%r8b
  0x00007f1a590435ef:   je     Stub::counterMode_AESCrypt+2885 0x00007f1a59043605
  0x00007f1a590435f5:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f1a590435fc:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007f1a59043601:   add    $0x4,%rax
  0x00007f1a59043605:   test   $0x2,%r8b
  0x00007f1a59043609:   je     Stub::counterMode_AESCrypt+2911 0x00007f1a5904361f
  0x00007f1a5904360f:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f1a59043616:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007f1a5904361b:   add    $0x2,%rax
  0x00007f1a5904361f:   test   $0x1,%r8b
  0x00007f1a59043623:   je     Stub::counterMode_AESCrypt+2928 0x00007f1a59043630
  0x00007f1a59043629:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f1a59043630:   mov    %r8d,(%r10)
  0x00007f1a59043633:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007f1a59043c6c
  0x00007f1a59043638:   nopl   0x0(%rax,%rax,1)
  0x00007f1a59043640:   cmp    $0x60,%r8
  0x00007f1a59043644:   jl     Stub::counterMode_AESCrypt+3968 0x00007f1a59043a40
  0x00007f1a5904364a:   vmovdqu (%rdx),%xmm3
  0x00007f1a5904364e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043653:   vmovdqa %xmm2,%xmm5
  0x00007f1a59043657:   vmovdqa %xmm2,%xmm6
  0x00007f1a5904365b:   vmovdqa %xmm2,%xmm7
  0x00007f1a5904365f:   vmovdqa %xmm2,%xmm8
  0x00007f1a59043663:   vmovdqa %xmm2,%xmm9
  0x00007f1a59043667:   vmovdqa %xmm2,%xmm10
  0x00007f1a5904366b:   vpextrq $0x0,%xmm6,%rbx
  0x00007f1a59043671:   add    $0x1,%rbx
  0x00007f1a59043675:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007f1a5904367b:   jae    Stub::counterMode_AESCrypt+3025 0x00007f1a59043691
  0x00007f1a59043681:   vpextrq $0x1,%xmm6,%rbx
  0x00007f1a59043687:   add    $0x1,%rbx
  0x00007f1a5904368b:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007f1a59043691:   vpextrq $0x0,%xmm7,%rbx
  0x00007f1a59043697:   add    $0x2,%rbx
  0x00007f1a5904369b:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007f1a590436a1:   jae    Stub::counterMode_AESCrypt+3063 0x00007f1a590436b7
  0x00007f1a590436a7:   vpextrq $0x1,%xmm7,%rbx
  0x00007f1a590436ad:   add    $0x1,%rbx
  0x00007f1a590436b1:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007f1a590436b7:   vpextrq $0x0,%xmm8,%rbx
  0x00007f1a590436bd:   add    $0x3,%rbx
  0x00007f1a590436c1:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007f1a590436c7:   jae    Stub::counterMode_AESCrypt+3101 0x00007f1a590436dd
  0x00007f1a590436cd:   vpextrq $0x1,%xmm8,%rbx
  0x00007f1a590436d3:   add    $0x1,%rbx
  0x00007f1a590436d7:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007f1a590436dd:   vpextrq $0x0,%xmm9,%rbx
  0x00007f1a590436e3:   add    $0x4,%rbx
  0x00007f1a590436e7:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007f1a590436ed:   jae    Stub::counterMode_AESCrypt+3139 0x00007f1a59043703
  0x00007f1a590436f3:   vpextrq $0x1,%xmm9,%rbx
  0x00007f1a590436f9:   add    $0x1,%rbx
  0x00007f1a590436fd:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007f1a59043703:   vpextrq $0x0,%xmm10,%rbx
  0x00007f1a59043709:   add    $0x5,%rbx
  0x00007f1a5904370d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007f1a59043713:   jae    Stub::counterMode_AESCrypt+3177 0x00007f1a59043729
  0x00007f1a59043719:   vpextrq $0x1,%xmm10,%rbx
  0x00007f1a5904371f:   add    $0x1,%rbx
  0x00007f1a59043723:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007f1a59043729:   vpextrq $0x0,%xmm2,%rbx
  0x00007f1a5904372f:   add    $0x6,%rbx
  0x00007f1a59043733:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f1a59043739:   jae    Stub::counterMode_AESCrypt+3215 0x00007f1a5904374f
  0x00007f1a5904373f:   vpextrq $0x1,%xmm2,%rbx
  0x00007f1a59043745:   add    $0x1,%rbx
  0x00007f1a59043749:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f1a5904374f:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f1a59043754:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007f1a59043759:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007f1a5904375e:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007f1a59043763:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007f1a59043768:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007f1a5904376d:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f1a59043771:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007f1a59043775:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007f1a59043779:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007f1a5904377d:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f1a59043781:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007f1a59043785:   vmovdqu 0x10(%rdx),%xmm4
  0x00007f1a5904378a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a5904378f:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f1a59043794:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043799:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a5904379e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a590437a3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a590437a8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a590437ad:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a590437b2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a590437b7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a590437bc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a590437c1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a590437c6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a590437cb:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a590437d0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a590437d5:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f1a590437da:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a590437df:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f1a590437e4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a590437e9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a590437ee:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a590437f3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a590437f8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a590437fd:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a59043802:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59043807:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a5904380c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a59043811:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a59043816:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a5904381b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a59043820:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a59043825:   vmovdqu 0x50(%rdx),%xmm4
  0x00007f1a5904382a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a5904382f:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f1a59043834:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043839:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a5904383e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a59043843:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a59043848:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a5904384d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a59043852:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59043857:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a5904385c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a59043861:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a59043866:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a5904386b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a59043870:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a59043875:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f1a5904387a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a5904387f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f1a59043887:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a5904388c:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a59043891:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a59043896:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a5904389b:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a590438a0:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a590438a5:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a590438aa:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a590438af:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a590438b4:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a590438b9:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a590438be:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a590438c3:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a590438c8:   vmovdqu 0x90(%rdx),%xmm4
  0x00007f1a590438d0:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a590438d5:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f1a590438dd:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a590438e2:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a590438e7:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a590438ec:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a590438f1:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a590438f6:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a590438fb:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59043900:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043905:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a5904390a:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a5904390f:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a59043914:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a59043919:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a5904391e:   vmovdqu 0xb0(%rdx),%xmm4
  0x00007f1a59043926:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a5904392b:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f1a59043933:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043938:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a5904393d:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a59043942:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a59043947:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a5904394c:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a59043951:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a59043956:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a5904395b:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f1a59043960:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f1a59043965:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f1a5904396a:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f1a5904396f:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f1a59043974:   vmovdqu 0xd0(%rdx),%xmm4
  0x00007f1a5904397c:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f1a59043981:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007f1a59043989:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a5904398e:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f1a59043993:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f1a59043998:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f1a5904399d:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f1a590439a2:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f1a590439a7:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f1a590439ac:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f1a590439b1:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007f1a590439b6:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007f1a590439bb:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007f1a590439c0:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007f1a590439c5:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007f1a590439ca:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f1a590439cf:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007f1a590439d5:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007f1a590439db:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007f1a590439e1:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007f1a590439e7:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007f1a590439ed:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f1a590439f2:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007f1a590439f7:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007f1a590439fc:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007f1a59043a01:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f1a59043a05:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007f1a59043a09:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f1a59043a0e:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007f1a59043a14:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007f1a59043a1a:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007f1a59043a20:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007f1a59043a26:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007f1a59043a2c:   add    $0x60,%rax
  0x00007f1a59043a30:   sub    $0x60,%r8
  0x00007f1a59043a34:   jmpq   Stub::counterMode_AESCrypt+2944 0x00007f1a59043640
  0x00007f1a59043a39:   nopl   0x0(%rax)
  0x00007f1a59043a40:   cmp    $0x0,%r8
  0x00007f1a59043a44:   jle    Stub::counterMode_AESCrypt+4524 0x00007f1a59043c6c
  0x00007f1a59043a4a:   vmovdqu (%rdx),%xmm3
  0x00007f1a59043a4e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043a53:   vmovdqa %xmm2,%xmm5
  0x00007f1a59043a57:   vpextrq $0x0,%xmm2,%rbx
  0x00007f1a59043a5d:   add    $0x1,%rbx
  0x00007f1a59043a61:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f1a59043a67:   jae    Stub::counterMode_AESCrypt+4029 0x00007f1a59043a7d
  0x00007f1a59043a6d:   vpextrq $0x1,%xmm2,%rbx
  0x00007f1a59043a73:   add    $0x1,%rbx
  0x00007f1a59043a77:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f1a59043a7d:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f1a59043a82:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f1a59043a86:   vmovdqu 0x10(%rdx),%xmm3
  0x00007f1a59043a8b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043a90:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043a95:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f1a59043a9a:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043a9f:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043aa4:   vmovdqu 0x30(%rdx),%xmm3
  0x00007f1a59043aa9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043aae:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043ab3:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f1a59043ab8:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043abd:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043ac2:   vmovdqu 0x50(%rdx),%xmm3
  0x00007f1a59043ac7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043acc:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043ad1:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f1a59043ad6:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043adb:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043ae0:   vmovdqu 0x70(%rdx),%xmm3
  0x00007f1a59043ae5:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043aea:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043aef:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f1a59043af7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043afc:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043b01:   vmovdqu 0x90(%rdx),%xmm3
  0x00007f1a59043b09:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043b0e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043b13:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f1a59043b1b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043b20:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043b25:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007f1a59043b2d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043b32:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043b37:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f1a59043b3f:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043b44:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043b49:   vmovdqu 0xd0(%rdx),%xmm3
  0x00007f1a59043b51:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043b56:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f1a59043b5b:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007f1a59043b63:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f1a59043b68:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f1a59043b6d:   cmp    $0x10,%r8
  0x00007f1a59043b71:   jl     Stub::counterMode_AESCrypt+4307 0x00007f1a59043b93
  0x00007f1a59043b77:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f1a59043b7c:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f1a59043b81:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f1a59043b86:   add    $0x10,%rax
  0x00007f1a59043b8a:   sub    $0x10,%r8
  0x00007f1a59043b8e:   jmpq   Stub::counterMode_AESCrypt+3968 0x00007f1a59043a40
  0x00007f1a59043b93:   add    %r8,%rax
  0x00007f1a59043b96:   test   $0x8,%r8b
  0x00007f1a59043b9a:   je     Stub::counterMode_AESCrypt+4331 0x00007f1a59043bab
  0x00007f1a59043ba0:   sub    $0x8,%rax
  0x00007f1a59043ba4:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f1a59043bab:   test   $0x4,%r8b
  0x00007f1a59043baf:   je     Stub::counterMode_AESCrypt+4358 0x00007f1a59043bc6
  0x00007f1a59043bb5:   sub    $0x4,%rax
  0x00007f1a59043bb9:   vpslldq $0x4,%xmm11,%xmm11
  0x00007f1a59043bbf:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f1a59043bc6:   test   $0x2,%r8b
  0x00007f1a59043bca:   je     Stub::counterMode_AESCrypt+4384 0x00007f1a59043be0
  0x00007f1a59043bd0:   sub    $0x2,%rax
  0x00007f1a59043bd4:   vpslldq $0x2,%xmm11,%xmm11
  0x00007f1a59043bda:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f1a59043be0:   test   $0x1,%r8b
  0x00007f1a59043be4:   je     Stub::counterMode_AESCrypt+4411 0x00007f1a59043bfb
  0x00007f1a59043bea:   sub    $0x1,%rax
  0x00007f1a59043bee:   vpslldq $0x1,%xmm11,%xmm11
  0x00007f1a59043bf4:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f1a59043bfb:   vmovdqu %xmm5,(%r9)
  0x00007f1a59043c00:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f1a59043c05:   test   $0x8,%r8b
  0x00007f1a59043c09:   je     Stub::counterMode_AESCrypt+4447 0x00007f1a59043c1f
  0x00007f1a59043c0f:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f1a59043c16:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f1a59043c1b:   add    $0x8,%rax
  0x00007f1a59043c1f:   test   $0x4,%r8b
  0x00007f1a59043c23:   je     Stub::counterMode_AESCrypt+4473 0x00007f1a59043c39
  0x00007f1a59043c29:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f1a59043c30:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007f1a59043c35:   add    $0x4,%rax
  0x00007f1a59043c39:   test   $0x2,%r8b
  0x00007f1a59043c3d:   je     Stub::counterMode_AESCrypt+4499 0x00007f1a59043c53
  0x00007f1a59043c43:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f1a59043c4a:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007f1a59043c4f:   add    $0x2,%rax
  0x00007f1a59043c53:   test   $0x1,%r8b
  0x00007f1a59043c57:   je     Stub::counterMode_AESCrypt+4516 0x00007f1a59043c64
  0x00007f1a59043c5d:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f1a59043c64:   mov    %r8d,(%r10)
  0x00007f1a59043c67:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007f1a59043c6c
  0x00007f1a59043c6c:   vpshufb %xmm0,%xmm2,%xmm2
  0x00007f1a59043c71:   vmovdqu %xmm2,(%rcx)
  0x00007f1a59043c75:   pop    %rbx
  0x00007f1a59043c76:   pop    %rax
  0x00007f1a59043c77:   leaveq 
  0x00007f1a59043c78:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::ghash_processBlocks [0x00007f1a59043c80, 0x00007f1a5904410c] (1164 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59043c80:   push   %rbp
  0x00007f1a59043c81:   mov    %rsp,%rbp
  0x00007f1a59043c84:   push   %rbx
  0x00007f1a59043c85:   test   %rcx,%rcx
  0x00007f1a59043c88:   je     Stub::ghash_processBlocks+1144 0x00007f1a590440f8
  0x00007f1a59043c8e:   vmovdqu 0x10(%rsi),%xmm5
  0x00007f1a59043c93:   vptest %xmm5,%xmm5
  0x00007f1a59043c98:   jne    Stub::ghash_processBlocks+35 0x00007f1a59043ca3
  0x00007f1a59043c9e:   callq  Stub::ghash_processBlocks+839 0x00007f1a59043fc7
  0x00007f1a59043ca3:   vmovdqu 0xb5409c5(%rip),%xmm14        # 0x00007f1a64584670
  0x00007f1a59043cab:   vmovdqu (%rdi),%xmm0
  0x00007f1a59043caf:   vpshufb %xmm14,%xmm0,%xmm0
  0x00007f1a59043cb4:   cmp    $0x8,%ecx
  0x00007f1a59043cb7:   jb     Stub::ghash_processBlocks+648 0x00007f1a59043f08
  0x00007f1a59043cbd:   vmovdqu 0x80(%rsi),%xmm5
  0x00007f1a59043cc5:   vptest %xmm5,%xmm5
  0x00007f1a59043cca:   jne    Stub::ghash_processBlocks+85 0x00007f1a59043cd5
  0x00007f1a59043cd0:   callq  Stub::ghash_processBlocks+932 0x00007f1a59044024
  0x00007f1a59043cd5:   sub    $0x8,%ecx
  0x00007f1a59043cd8:   vmovdqu 0xb540980(%rip),%xmm2        # 0x00007f1a64584660
  0x00007f1a59043ce0:   vmovdqu 0x70(%rdx),%xmm1
  0x00007f1a59043ce5:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f1a59043cea:   vmovdqu 0x10(%rsi),%xmm15
  0x00007f1a59043cef:   vpclmulhqlqdq %xmm15,%xmm1,%xmm5
  0x00007f1a59043cf5:   vpclmullqlqdq %xmm15,%xmm1,%xmm3
  0x00007f1a59043cfb:   vpclmulhqhqdq %xmm15,%xmm1,%xmm4
  0x00007f1a59043d01:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043d07:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043d0b:   vmovdqu 0x60(%rdx),%xmm1
  0x00007f1a59043d10:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f1a59043d15:   vmovdqu 0x20(%rsi),%xmm15
  0x00007f1a59043d1a:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043d20:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043d24:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043d2a:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f1a59043d2e:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043d34:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f1a59043d38:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043d3e:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043d42:   vmovdqu 0x50(%rdx),%xmm1
  0x00007f1a59043d47:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f1a59043d4c:   vmovdqu 0x30(%rsi),%xmm15
  0x00007f1a59043d51:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043d57:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043d5b:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043d61:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f1a59043d65:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043d6b:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f1a59043d6f:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043d75:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043d79:   vmovdqu 0x40(%rdx),%xmm1
  0x00007f1a59043d7e:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f1a59043d83:   vmovdqu 0x40(%rsi),%xmm15
  0x00007f1a59043d88:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043d8e:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043d92:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043d98:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f1a59043d9c:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043da2:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f1a59043da6:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043dac:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043db0:   vmovdqu 0x30(%rdx),%xmm1
  0x00007f1a59043db5:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f1a59043dba:   vmovdqu 0x50(%rsi),%xmm15
  0x00007f1a59043dbf:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043dc5:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043dc9:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043dcf:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f1a59043dd3:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043dd9:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f1a59043ddd:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043de3:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043de7:   vmovdqu 0x20(%rdx),%xmm1
  0x00007f1a59043dec:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f1a59043df1:   vmovdqu 0x60(%rsi),%xmm15
  0x00007f1a59043df6:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043dfc:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043e00:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043e06:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f1a59043e0a:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043e10:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f1a59043e14:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043e1a:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043e1e:   vmovdqu 0x10(%rdx),%xmm1
  0x00007f1a59043e23:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f1a59043e28:   vmovdqu 0x70(%rsi),%xmm15
  0x00007f1a59043e2d:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043e33:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043e37:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043e3d:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f1a59043e41:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043e47:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f1a59043e4b:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043e51:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043e55:   vmovdqu (%rdx),%xmm1
  0x00007f1a59043e59:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f1a59043e5e:   vpxor  %xmm0,%xmm1,%xmm1
  0x00007f1a59043e62:   vmovdqu 0x80(%rsi),%xmm15
  0x00007f1a59043e6a:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043e70:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043e74:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043e7a:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f1a59043e7e:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043e84:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f1a59043e88:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f1a59043e8e:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043e92:   vpslldq $0x8,%xmm5,%xmm6
  0x00007f1a59043e97:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f1a59043e9c:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f1a59043ea0:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f1a59043ea4:   vpslld $0x1f,%xmm3,%xmm8
  0x00007f1a59043ea9:   vpslld $0x1e,%xmm3,%xmm9
  0x00007f1a59043eae:   vpslld $0x19,%xmm3,%xmm10
  0x00007f1a59043eb3:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007f1a59043eb8:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007f1a59043ebd:   vpslldq $0xc,%xmm8,%xmm9
  0x00007f1a59043ec3:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007f1a59043ec9:   vpxor  %xmm9,%xmm3,%xmm3
  0x00007f1a59043ece:   vpsrld $0x1,%xmm3,%xmm9
  0x00007f1a59043ed3:   vpsrld $0x2,%xmm3,%xmm10
  0x00007f1a59043ed8:   vpsrld $0x7,%xmm3,%xmm5
  0x00007f1a59043edd:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007f1a59043ee2:   vpxor  %xmm5,%xmm9,%xmm9
  0x00007f1a59043ee6:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007f1a59043eeb:   vpxor  %xmm3,%xmm9,%xmm3
  0x00007f1a59043eef:   vpxor  %xmm4,%xmm3,%xmm0
  0x00007f1a59043ef3:   lea    0x80(%rdx),%rdx
  0x00007f1a59043efa:   cmp    $0x8,%ecx
  0x00007f1a59043efd:   jb     Stub::ghash_processBlocks+648 0x00007f1a59043f08
  0x00007f1a59043f03:   jmpq   Stub::ghash_processBlocks+85 0x00007f1a59043cd5
  0x00007f1a59043f08:   vmovdqu 0x10(%rsi),%xmm3
  0x00007f1a59043f0d:   vmovdqu 0xb54074b(%rip),%xmm2        # 0x00007f1a64584660
  0x00007f1a59043f15:   cmp    $0x0,%ecx
  0x00007f1a59043f18:   je     Stub::ghash_processBlocks+697 0x00007f1a59043f39
  0x00007f1a59043f1e:   sub    $0x1,%ecx
  0x00007f1a59043f21:   vmovdqu (%rdx),%xmm1
  0x00007f1a59043f25:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f1a59043f2a:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f1a59043f2e:   callq  Stub::ghash_processBlocks+711 0x00007f1a59043f47
  0x00007f1a59043f33:   add    $0x10,%rdx
  0x00007f1a59043f37:   jmp    Stub::ghash_processBlocks+661 0x00007f1a59043f15
  0x00007f1a59043f39:   vpshufb %xmm14,%xmm0,%xmm0
  0x00007f1a59043f3e:   vmovdqu %xmm0,(%rdi)
  0x00007f1a59043f42:   jmpq   Stub::ghash_processBlocks+1144 0x00007f1a590440f8
  0x00007f1a59043f47:   vpclmullqlqdq %xmm3,%xmm0,%xmm4
  0x00007f1a59043f4d:   vpclmulhqhqdq %xmm3,%xmm0,%xmm7
  0x00007f1a59043f53:   vpclmullqhqdq %xmm3,%xmm0,%xmm5
  0x00007f1a59043f59:   vpclmulhqlqdq %xmm3,%xmm0,%xmm6
  0x00007f1a59043f5f:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59043f63:   vpslldq $0x8,%xmm5,%xmm6
  0x00007f1a59043f68:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f1a59043f6d:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f1a59043f71:   vpxor  %xmm5,%xmm7,%xmm7
  0x00007f1a59043f75:   vpslld $0x1f,%xmm4,%xmm8
  0x00007f1a59043f7a:   vpslld $0x1e,%xmm4,%xmm9
  0x00007f1a59043f7f:   vpslld $0x19,%xmm4,%xmm10
  0x00007f1a59043f84:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007f1a59043f89:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007f1a59043f8e:   vpslldq $0xc,%xmm8,%xmm9
  0x00007f1a59043f94:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007f1a59043f9a:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007f1a59043f9f:   vpsrld $0x1,%xmm4,%xmm9
  0x00007f1a59043fa4:   vpsrld $0x2,%xmm4,%xmm10
  0x00007f1a59043fa9:   vpsrld $0x7,%xmm4,%xmm11
  0x00007f1a59043fae:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007f1a59043fb3:   vpxor  %xmm11,%xmm9,%xmm9
  0x00007f1a59043fb8:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007f1a59043fbd:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007f1a59043fc2:   vpxor  %xmm4,%xmm7,%xmm0
  0x00007f1a59043fc6:   retq   
  0x00007f1a59043fc7:   vmovdqu (%rsi),%xmm13
  0x00007f1a59043fcb:   vmovdqu 0xb54069d(%rip),%xmm10        # 0x00007f1a64584670
  0x00007f1a59043fd3:   vpshufb %xmm10,%xmm13,%xmm13
  0x00007f1a59043fd8:   vpsrld $0x7,%xmm13,%xmm3
  0x00007f1a59043fde:   vmovdqu 0xb54069a(%rip),%xmm4        # 0x00007f1a64584680
  0x00007f1a59043fe6:   vpshufb %xmm4,%xmm3,%xmm3
  0x00007f1a59043feb:   mov    $0xff00,%eax
  0x00007f1a59043ff0:   vmovd  %eax,%xmm4
  0x00007f1a59043ff4:   vpshufb %xmm3,%xmm4,%xmm4
  0x00007f1a59043ff9:   vmovdqu 0xb54064f(%rip),%xmm5        # 0x00007f1a64584650
  0x00007f1a59044001:   vpand  %xmm4,%xmm5,%xmm5
  0x00007f1a59044005:   vpsrld $0x1f,%xmm13,%xmm3
  0x00007f1a5904400b:   vpslld $0x1,%xmm13,%xmm4
  0x00007f1a59044011:   vpslldq $0x4,%xmm3,%xmm3
  0x00007f1a59044016:   vpxor  %xmm3,%xmm4,%xmm13
  0x00007f1a5904401a:   vpxor  %xmm5,%xmm13,%xmm13
  0x00007f1a5904401e:   vmovdqu %xmm13,0x10(%rsi)
  0x00007f1a59044023:   retq   
  0x00007f1a59044024:   vmovdqu 0x10(%rsi),%xmm13
  0x00007f1a59044029:   vmovdqu %xmm13,%xmm1
  0x00007f1a5904402e:   callq  Stub::ghash_processBlocks+1016 0x00007f1a59044078
  0x00007f1a59044033:   vmovdqu %xmm13,0x20(%rsi)
  0x00007f1a59044038:   callq  Stub::ghash_processBlocks+1016 0x00007f1a59044078
  0x00007f1a5904403d:   vmovdqu %xmm13,0x30(%rsi)
  0x00007f1a59044042:   callq  Stub::ghash_processBlocks+1016 0x00007f1a59044078
  0x00007f1a59044047:   vmovdqu %xmm13,0x40(%rsi)
  0x00007f1a5904404c:   callq  Stub::ghash_processBlocks+1016 0x00007f1a59044078
  0x00007f1a59044051:   vmovdqu %xmm13,0x50(%rsi)
  0x00007f1a59044056:   callq  Stub::ghash_processBlocks+1016 0x00007f1a59044078
  0x00007f1a5904405b:   vmovdqu %xmm13,0x60(%rsi)
  0x00007f1a59044060:   callq  Stub::ghash_processBlocks+1016 0x00007f1a59044078
  0x00007f1a59044065:   vmovdqu %xmm13,0x70(%rsi)
  0x00007f1a5904406a:   callq  Stub::ghash_processBlocks+1016 0x00007f1a59044078
  0x00007f1a5904406f:   vmovdqu %xmm13,0x80(%rsi)
  0x00007f1a59044077:   retq   
  0x00007f1a59044078:   vpclmullqlqdq %xmm1,%xmm13,%xmm4
  0x00007f1a5904407e:   vpclmulhqhqdq %xmm1,%xmm13,%xmm7
  0x00007f1a59044084:   vpclmullqhqdq %xmm1,%xmm13,%xmm5
  0x00007f1a5904408a:   vpclmulhqlqdq %xmm1,%xmm13,%xmm6
  0x00007f1a59044090:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f1a59044094:   vpslldq $0x8,%xmm5,%xmm6
  0x00007f1a59044099:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f1a5904409e:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f1a590440a2:   vpxor  %xmm5,%xmm7,%xmm7
  0x00007f1a590440a6:   vpslld $0x1f,%xmm4,%xmm8
  0x00007f1a590440ab:   vpslld $0x1e,%xmm4,%xmm9
  0x00007f1a590440b0:   vpslld $0x19,%xmm4,%xmm10
  0x00007f1a590440b5:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007f1a590440ba:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007f1a590440bf:   vpslldq $0xc,%xmm8,%xmm9
  0x00007f1a590440c5:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007f1a590440cb:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007f1a590440d0:   vpsrld $0x1,%xmm4,%xmm9
  0x00007f1a590440d5:   vpsrld $0x2,%xmm4,%xmm10
  0x00007f1a590440da:   vpsrld $0x7,%xmm4,%xmm11
  0x00007f1a590440df:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007f1a590440e4:   vpxor  %xmm11,%xmm9,%xmm9
  0x00007f1a590440e9:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007f1a590440ee:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007f1a590440f3:   vpxor  %xmm4,%xmm7,%xmm13
  0x00007f1a590440f7:   retq   
  0x00007f1a590440f8:   vpxor  %xmm0,%xmm0,%xmm0
  0x00007f1a590440fc:   vpxor  %xmm1,%xmm1,%xmm1
  0x00007f1a59044100:   vpxor  %xmm3,%xmm3,%xmm3
  0x00007f1a59044104:   vpxor  %xmm15,%xmm15,%xmm15
  0x00007f1a59044109:   pop    %rbx
  0x00007f1a5904410a:   leaveq 
  0x00007f1a5904410b:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::chacha20Block [0x00007f1a59044120, 0x00007f1a590443c1] (673 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59044120:   push   %rbp
  0x00007f1a59044121:   mov    %rsp,%rbp
  0x00007f1a59044124:   movabs $0x7f1a64583680,%r9
  0x00007f1a5904412e:   movabs $0x7f1a64583740,%rax
  0x00007f1a59044138:   vbroadcastf128 (%rdi),%ymm0
  0x00007f1a5904413d:   vbroadcastf128 0x10(%rdi),%ymm1
  0x00007f1a59044143:   vbroadcastf128 0x20(%rdi),%ymm2
  0x00007f1a59044149:   vbroadcastf128 0x30(%rdi),%ymm3
  0x00007f1a5904414f:   vpaddd (%rax),%ymm3,%ymm3
  0x00007f1a59044153:   vpaddd 0x20(%rax),%ymm3,%ymm13
  0x00007f1a59044158:   vmovdqu %ymm0,%ymm4
  0x00007f1a5904415c:   vmovdqu %ymm1,%ymm5
  0x00007f1a59044160:   vmovdqu %ymm2,%ymm6
  0x00007f1a59044164:   vmovdqu %ymm3,%ymm7
  0x00007f1a59044168:   vmovdqu %ymm0,%ymm8
  0x00007f1a5904416c:   vmovdqu %ymm1,%ymm9
  0x00007f1a59044170:   vmovdqu %ymm2,%ymm10
  0x00007f1a59044174:   vmovdqu %ymm13,%ymm11
  0x00007f1a59044179:   vmovdqu (%r9),%ymm14
  0x00007f1a5904417e:   vmovdqu 0x20(%r9),%ymm15
  0x00007f1a59044184:   mov    $0xa,%r8d
  0x00007f1a5904418a:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007f1a5904418e:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007f1a59044192:   vpshufb %ymm15,%ymm7,%ymm7
  0x00007f1a59044197:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007f1a5904419b:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007f1a5904419f:   vpsrld $0x14,%ymm5,%ymm12
  0x00007f1a590441a4:   vpslld $0xc,%ymm5,%ymm5
  0x00007f1a590441a9:   vpor   %ymm12,%ymm5,%ymm5
  0x00007f1a590441ae:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007f1a590441b2:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007f1a590441b6:   vpshufb %ymm14,%ymm7,%ymm7
  0x00007f1a590441bb:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007f1a590441bf:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007f1a590441c3:   vpsrld $0x19,%ymm5,%ymm12
  0x00007f1a590441c8:   vpslld $0x7,%ymm5,%ymm5
  0x00007f1a590441cd:   vpor   %ymm12,%ymm5,%ymm5
  0x00007f1a590441d2:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007f1a590441d7:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007f1a590441dc:   vpshufb %ymm15,%ymm11,%ymm11
  0x00007f1a590441e1:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007f1a590441e6:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007f1a590441eb:   vpsrld $0x14,%ymm9,%ymm12
  0x00007f1a590441f1:   vpslld $0xc,%ymm9,%ymm9
  0x00007f1a590441f7:   vpor   %ymm12,%ymm9,%ymm9
  0x00007f1a590441fc:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007f1a59044201:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007f1a59044206:   vpshufb %ymm14,%ymm11,%ymm11
  0x00007f1a5904420b:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007f1a59044210:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007f1a59044215:   vpsrld $0x19,%ymm9,%ymm12
  0x00007f1a5904421b:   vpslld $0x7,%ymm9,%ymm9
  0x00007f1a59044221:   vpor   %ymm12,%ymm9,%ymm9
  0x00007f1a59044226:   vpshufd $0x39,%ymm5,%ymm5
  0x00007f1a5904422b:   vpshufd $0x4e,%ymm6,%ymm6
  0x00007f1a59044230:   vpshufd $0x93,%ymm7,%ymm7
  0x00007f1a59044235:   vpshufd $0x39,%ymm9,%ymm9
  0x00007f1a5904423b:   vpshufd $0x4e,%ymm10,%ymm10
  0x00007f1a59044241:   vpshufd $0x93,%ymm11,%ymm11
  0x00007f1a59044247:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007f1a5904424b:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007f1a5904424f:   vpshufb %ymm15,%ymm7,%ymm7
  0x00007f1a59044254:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007f1a59044258:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007f1a5904425c:   vpsrld $0x14,%ymm5,%ymm12
  0x00007f1a59044261:   vpslld $0xc,%ymm5,%ymm5
  0x00007f1a59044266:   vpor   %ymm12,%ymm5,%ymm5
  0x00007f1a5904426b:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007f1a5904426f:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007f1a59044273:   vpshufb %ymm14,%ymm7,%ymm7
  0x00007f1a59044278:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007f1a5904427c:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007f1a59044280:   vpsrld $0x19,%ymm5,%ymm12
  0x00007f1a59044285:   vpslld $0x7,%ymm5,%ymm5
  0x00007f1a5904428a:   vpor   %ymm12,%ymm5,%ymm5
  0x00007f1a5904428f:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007f1a59044294:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007f1a59044299:   vpshufb %ymm15,%ymm11,%ymm11
  0x00007f1a5904429e:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007f1a590442a3:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007f1a590442a8:   vpsrld $0x14,%ymm9,%ymm12
  0x00007f1a590442ae:   vpslld $0xc,%ymm9,%ymm9
  0x00007f1a590442b4:   vpor   %ymm12,%ymm9,%ymm9
  0x00007f1a590442b9:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007f1a590442be:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007f1a590442c3:   vpshufb %ymm14,%ymm11,%ymm11
  0x00007f1a590442c8:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007f1a590442cd:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007f1a590442d2:   vpsrld $0x19,%ymm9,%ymm12
  0x00007f1a590442d8:   vpslld $0x7,%ymm9,%ymm9
  0x00007f1a590442de:   vpor   %ymm12,%ymm9,%ymm9
  0x00007f1a590442e3:   vpshufd $0x93,%ymm5,%ymm5
  0x00007f1a590442e8:   vpshufd $0x4e,%ymm6,%ymm6
  0x00007f1a590442ed:   vpshufd $0x39,%ymm7,%ymm7
  0x00007f1a590442f2:   vpshufd $0x93,%ymm9,%ymm9
  0x00007f1a590442f8:   vpshufd $0x4e,%ymm10,%ymm10
  0x00007f1a590442fe:   vpshufd $0x39,%ymm11,%ymm11
  0x00007f1a59044304:   dec    %r8
  0x00007f1a59044307:   jne    Stub::chacha20Block+106 0x00007f1a5904418a
  0x00007f1a5904430d:   vpaddd %ymm0,%ymm4,%ymm4
  0x00007f1a59044311:   vpaddd %ymm1,%ymm5,%ymm5
  0x00007f1a59044315:   vpaddd %ymm2,%ymm6,%ymm6
  0x00007f1a59044319:   vpaddd %ymm3,%ymm7,%ymm7
  0x00007f1a5904431d:   vpaddd %ymm0,%ymm8,%ymm8
  0x00007f1a59044321:   vpaddd %ymm1,%ymm9,%ymm9
  0x00007f1a59044325:   vpaddd %ymm2,%ymm10,%ymm10
  0x00007f1a59044329:   vpaddd %ymm13,%ymm11,%ymm11
  0x00007f1a5904432e:   vextracti128 $0x0,%ymm4,(%rsi)
  0x00007f1a59044334:   vextracti128 $0x1,%ymm4,0x40(%rsi)
  0x00007f1a5904433b:   vextracti128 $0x0,%ymm5,0x10(%rsi)
  0x00007f1a59044342:   vextracti128 $0x1,%ymm5,0x50(%rsi)
  0x00007f1a59044349:   vextracti128 $0x0,%ymm6,0x20(%rsi)
  0x00007f1a59044350:   vextracti128 $0x1,%ymm6,0x60(%rsi)
  0x00007f1a59044357:   vextracti128 $0x0,%ymm7,0x30(%rsi)
  0x00007f1a5904435e:   vextracti128 $0x1,%ymm7,0x70(%rsi)
  0x00007f1a59044365:   vextracti128 $0x0,%ymm8,0x80(%rsi)
  0x00007f1a5904436f:   vextracti128 $0x1,%ymm8,0xc0(%rsi)
  0x00007f1a59044379:   vextracti128 $0x0,%ymm9,0x90(%rsi)
  0x00007f1a59044383:   vextracti128 $0x1,%ymm9,0xd0(%rsi)
  0x00007f1a5904438d:   vextracti128 $0x0,%ymm10,0xa0(%rsi)
  0x00007f1a59044397:   vextracti128 $0x1,%ymm10,0xe0(%rsi)
  0x00007f1a590443a1:   vextracti128 $0x0,%ymm11,0xb0(%rsi)
  0x00007f1a590443ab:   vextracti128 $0x1,%ymm11,0xf0(%rsi)
  0x00007f1a590443b5:   movabs $0x100,%rax
  0x00007f1a590443bf:   leaveq 
  0x00007f1a590443c0:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::md5_implCompress [0x00007f1a590443e0, 0x00007f1a59044a69] (1673 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590443e0:   push   %rbp
  0x00007f1a590443e1:   mov    %rsp,%rbp
  0x00007f1a590443e4:   push   %rbx
  0x00007f1a590443e5:   push   %rdi
  0x00007f1a590443e6:   push   %rsi
  0x00007f1a590443e7:   push   %r15
  0x00007f1a590443e9:   sub    $0x10,%rsp
  0x00007f1a590443ed:   mov    %rdi,%r15
  0x00007f1a590443f0:   mov    %rsi,(%rsp)
  0x00007f1a590443f4:   mov    (%rsp),%rdi
  0x00007f1a590443f8:   mov    (%rdi),%eax
  0x00007f1a590443fa:   mov    0x4(%rdi),%ebx
  0x00007f1a590443fd:   mov    0x8(%rdi),%ecx
  0x00007f1a59044400:   mov    0xc(%rdi),%edx
  0x00007f1a59044403:   add    $0xd76aa478,%eax
  0x00007f1a59044408:   mov    %ecx,%esi
  0x00007f1a5904440a:   add    (%r15),%eax
  0x00007f1a5904440d:   xor    %edx,%esi
  0x00007f1a5904440f:   and    %ebx,%esi
  0x00007f1a59044411:   xor    %edx,%esi
  0x00007f1a59044413:   add    %esi,%eax
  0x00007f1a59044415:   rol    $0x7,%eax
  0x00007f1a59044418:   add    %ebx,%eax
  0x00007f1a5904441a:   add    $0xe8c7b756,%edx
  0x00007f1a59044420:   mov    %ebx,%esi
  0x00007f1a59044422:   add    0x4(%r15),%edx
  0x00007f1a59044426:   xor    %ecx,%esi
  0x00007f1a59044428:   and    %eax,%esi
  0x00007f1a5904442a:   xor    %ecx,%esi
  0x00007f1a5904442c:   add    %esi,%edx
  0x00007f1a5904442e:   rol    $0xc,%edx
  0x00007f1a59044431:   add    %eax,%edx
  0x00007f1a59044433:   add    $0x242070db,%ecx
  0x00007f1a59044439:   mov    %eax,%esi
  0x00007f1a5904443b:   add    0x8(%r15),%ecx
  0x00007f1a5904443f:   xor    %ebx,%esi
  0x00007f1a59044441:   and    %edx,%esi
  0x00007f1a59044443:   xor    %ebx,%esi
  0x00007f1a59044445:   add    %esi,%ecx
  0x00007f1a59044447:   rol    $0x11,%ecx
  0x00007f1a5904444a:   add    %edx,%ecx
  0x00007f1a5904444c:   add    $0xc1bdceee,%ebx
  0x00007f1a59044452:   mov    %edx,%esi
  0x00007f1a59044454:   add    0xc(%r15),%ebx
  0x00007f1a59044458:   xor    %eax,%esi
  0x00007f1a5904445a:   and    %ecx,%esi
  0x00007f1a5904445c:   xor    %eax,%esi
  0x00007f1a5904445e:   add    %esi,%ebx
  0x00007f1a59044460:   rol    $0x16,%ebx
  0x00007f1a59044463:   add    %ecx,%ebx
  0x00007f1a59044465:   add    $0xf57c0faf,%eax
  0x00007f1a5904446a:   mov    %ecx,%esi
  0x00007f1a5904446c:   add    0x10(%r15),%eax
  0x00007f1a59044470:   xor    %edx,%esi
  0x00007f1a59044472:   and    %ebx,%esi
  0x00007f1a59044474:   xor    %edx,%esi
  0x00007f1a59044476:   add    %esi,%eax
  0x00007f1a59044478:   rol    $0x7,%eax
  0x00007f1a5904447b:   add    %ebx,%eax
  0x00007f1a5904447d:   add    $0x4787c62a,%edx
  0x00007f1a59044483:   mov    %ebx,%esi
  0x00007f1a59044485:   add    0x14(%r15),%edx
  0x00007f1a59044489:   xor    %ecx,%esi
  0x00007f1a5904448b:   and    %eax,%esi
  0x00007f1a5904448d:   xor    %ecx,%esi
  0x00007f1a5904448f:   add    %esi,%edx
  0x00007f1a59044491:   rol    $0xc,%edx
  0x00007f1a59044494:   add    %eax,%edx
  0x00007f1a59044496:   add    $0xa8304613,%ecx
  0x00007f1a5904449c:   mov    %eax,%esi
  0x00007f1a5904449e:   add    0x18(%r15),%ecx
  0x00007f1a590444a2:   xor    %ebx,%esi
  0x00007f1a590444a4:   and    %edx,%esi
  0x00007f1a590444a6:   xor    %ebx,%esi
  0x00007f1a590444a8:   add    %esi,%ecx
  0x00007f1a590444aa:   rol    $0x11,%ecx
  0x00007f1a590444ad:   add    %edx,%ecx
  0x00007f1a590444af:   add    $0xfd469501,%ebx
  0x00007f1a590444b5:   mov    %edx,%esi
  0x00007f1a590444b7:   add    0x1c(%r15),%ebx
  0x00007f1a590444bb:   xor    %eax,%esi
  0x00007f1a590444bd:   and    %ecx,%esi
  0x00007f1a590444bf:   xor    %eax,%esi
  0x00007f1a590444c1:   add    %esi,%ebx
  0x00007f1a590444c3:   rol    $0x16,%ebx
  0x00007f1a590444c6:   add    %ecx,%ebx
  0x00007f1a590444c8:   add    $0x698098d8,%eax
  0x00007f1a590444cd:   mov    %ecx,%esi
  0x00007f1a590444cf:   add    0x20(%r15),%eax
  0x00007f1a590444d3:   xor    %edx,%esi
  0x00007f1a590444d5:   and    %ebx,%esi
  0x00007f1a590444d7:   xor    %edx,%esi
  0x00007f1a590444d9:   add    %esi,%eax
  0x00007f1a590444db:   rol    $0x7,%eax
  0x00007f1a590444de:   add    %ebx,%eax
  0x00007f1a590444e0:   add    $0x8b44f7af,%edx
  0x00007f1a590444e6:   mov    %ebx,%esi
  0x00007f1a590444e8:   add    0x24(%r15),%edx
  0x00007f1a590444ec:   xor    %ecx,%esi
  0x00007f1a590444ee:   and    %eax,%esi
  0x00007f1a590444f0:   xor    %ecx,%esi
  0x00007f1a590444f2:   add    %esi,%edx
  0x00007f1a590444f4:   rol    $0xc,%edx
  0x00007f1a590444f7:   add    %eax,%edx
  0x00007f1a590444f9:   add    $0xffff5bb1,%ecx
  0x00007f1a590444ff:   mov    %eax,%esi
  0x00007f1a59044501:   add    0x28(%r15),%ecx
  0x00007f1a59044505:   xor    %ebx,%esi
  0x00007f1a59044507:   and    %edx,%esi
  0x00007f1a59044509:   xor    %ebx,%esi
  0x00007f1a5904450b:   add    %esi,%ecx
  0x00007f1a5904450d:   rol    $0x11,%ecx
  0x00007f1a59044510:   add    %edx,%ecx
  0x00007f1a59044512:   add    $0x895cd7be,%ebx
  0x00007f1a59044518:   mov    %edx,%esi
  0x00007f1a5904451a:   add    0x2c(%r15),%ebx
  0x00007f1a5904451e:   xor    %eax,%esi
  0x00007f1a59044520:   and    %ecx,%esi
  0x00007f1a59044522:   xor    %eax,%esi
  0x00007f1a59044524:   add    %esi,%ebx
  0x00007f1a59044526:   rol    $0x16,%ebx
  0x00007f1a59044529:   add    %ecx,%ebx
  0x00007f1a5904452b:   add    $0x6b901122,%eax
  0x00007f1a59044530:   mov    %ecx,%esi
  0x00007f1a59044532:   add    0x30(%r15),%eax
  0x00007f1a59044536:   xor    %edx,%esi
  0x00007f1a59044538:   and    %ebx,%esi
  0x00007f1a5904453a:   xor    %edx,%esi
  0x00007f1a5904453c:   add    %esi,%eax
  0x00007f1a5904453e:   rol    $0x7,%eax
  0x00007f1a59044541:   add    %ebx,%eax
  0x00007f1a59044543:   add    $0xfd987193,%edx
  0x00007f1a59044549:   mov    %ebx,%esi
  0x00007f1a5904454b:   add    0x34(%r15),%edx
  0x00007f1a5904454f:   xor    %ecx,%esi
  0x00007f1a59044551:   and    %eax,%esi
  0x00007f1a59044553:   xor    %ecx,%esi
  0x00007f1a59044555:   add    %esi,%edx
  0x00007f1a59044557:   rol    $0xc,%edx
  0x00007f1a5904455a:   add    %eax,%edx
  0x00007f1a5904455c:   add    $0xa679438e,%ecx
  0x00007f1a59044562:   mov    %eax,%esi
  0x00007f1a59044564:   add    0x38(%r15),%ecx
  0x00007f1a59044568:   xor    %ebx,%esi
  0x00007f1a5904456a:   and    %edx,%esi
  0x00007f1a5904456c:   xor    %ebx,%esi
  0x00007f1a5904456e:   add    %esi,%ecx
  0x00007f1a59044570:   rol    $0x11,%ecx
  0x00007f1a59044573:   add    %edx,%ecx
  0x00007f1a59044575:   add    $0x49b40821,%ebx
  0x00007f1a5904457b:   mov    %edx,%esi
  0x00007f1a5904457d:   add    0x3c(%r15),%ebx
  0x00007f1a59044581:   xor    %eax,%esi
  0x00007f1a59044583:   and    %ecx,%esi
  0x00007f1a59044585:   xor    %eax,%esi
  0x00007f1a59044587:   add    %esi,%ebx
  0x00007f1a59044589:   rol    $0x16,%ebx
  0x00007f1a5904458c:   add    %ecx,%ebx
  0x00007f1a5904458e:   add    $0xf61e2562,%eax
  0x00007f1a59044593:   mov    %edx,%esi
  0x00007f1a59044595:   mov    %edx,%edi
  0x00007f1a59044597:   add    0x4(%r15),%eax
  0x00007f1a5904459b:   not    %esi
  0x00007f1a5904459d:   and    %ebx,%edi
  0x00007f1a5904459f:   and    %ecx,%esi
  0x00007f1a590445a1:   or     %edi,%esi
  0x00007f1a590445a3:   add    %esi,%eax
  0x00007f1a590445a5:   rol    $0x5,%eax
  0x00007f1a590445a8:   add    %ebx,%eax
  0x00007f1a590445aa:   add    $0xc040b340,%edx
  0x00007f1a590445b0:   mov    %ecx,%esi
  0x00007f1a590445b2:   mov    %ecx,%edi
  0x00007f1a590445b4:   add    0x18(%r15),%edx
  0x00007f1a590445b8:   not    %esi
  0x00007f1a590445ba:   and    %eax,%edi
  0x00007f1a590445bc:   and    %ebx,%esi
  0x00007f1a590445be:   or     %edi,%esi
  0x00007f1a590445c0:   add    %esi,%edx
  0x00007f1a590445c2:   rol    $0x9,%edx
  0x00007f1a590445c5:   add    %eax,%edx
  0x00007f1a590445c7:   add    $0x265e5a51,%ecx
  0x00007f1a590445cd:   mov    %ebx,%esi
  0x00007f1a590445cf:   mov    %ebx,%edi
  0x00007f1a590445d1:   add    0x2c(%r15),%ecx
  0x00007f1a590445d5:   not    %esi
  0x00007f1a590445d7:   and    %edx,%edi
  0x00007f1a590445d9:   and    %eax,%esi
  0x00007f1a590445db:   or     %edi,%esi
  0x00007f1a590445dd:   add    %esi,%ecx
  0x00007f1a590445df:   rol    $0xe,%ecx
  0x00007f1a590445e2:   add    %edx,%ecx
  0x00007f1a590445e4:   add    $0xe9b6c7aa,%ebx
  0x00007f1a590445ea:   mov    %eax,%esi
  0x00007f1a590445ec:   mov    %eax,%edi
  0x00007f1a590445ee:   add    (%r15),%ebx
  0x00007f1a590445f1:   not    %esi
  0x00007f1a590445f3:   and    %ecx,%edi
  0x00007f1a590445f5:   and    %edx,%esi
  0x00007f1a590445f7:   or     %edi,%esi
  0x00007f1a590445f9:   add    %esi,%ebx
  0x00007f1a590445fb:   rol    $0x14,%ebx
  0x00007f1a590445fe:   add    %ecx,%ebx
  0x00007f1a59044600:   add    $0xd62f105d,%eax
  0x00007f1a59044605:   mov    %edx,%esi
  0x00007f1a59044607:   mov    %edx,%edi
  0x00007f1a59044609:   add    0x14(%r15),%eax
  0x00007f1a5904460d:   not    %esi
  0x00007f1a5904460f:   and    %ebx,%edi
  0x00007f1a59044611:   and    %ecx,%esi
  0x00007f1a59044613:   or     %edi,%esi
  0x00007f1a59044615:   add    %esi,%eax
  0x00007f1a59044617:   rol    $0x5,%eax
  0x00007f1a5904461a:   add    %ebx,%eax
  0x00007f1a5904461c:   add    $0x2441453,%edx
  0x00007f1a59044622:   mov    %ecx,%esi
  0x00007f1a59044624:   mov    %ecx,%edi
  0x00007f1a59044626:   add    0x28(%r15),%edx
  0x00007f1a5904462a:   not    %esi
  0x00007f1a5904462c:   and    %eax,%edi
  0x00007f1a5904462e:   and    %ebx,%esi
  0x00007f1a59044630:   or     %edi,%esi
  0x00007f1a59044632:   add    %esi,%edx
  0x00007f1a59044634:   rol    $0x9,%edx
  0x00007f1a59044637:   add    %eax,%edx
  0x00007f1a59044639:   add    $0xd8a1e681,%ecx
  0x00007f1a5904463f:   mov    %ebx,%esi
  0x00007f1a59044641:   mov    %ebx,%edi
  0x00007f1a59044643:   add    0x3c(%r15),%ecx
  0x00007f1a59044647:   not    %esi
  0x00007f1a59044649:   and    %edx,%edi
  0x00007f1a5904464b:   and    %eax,%esi
  0x00007f1a5904464d:   or     %edi,%esi
  0x00007f1a5904464f:   add    %esi,%ecx
  0x00007f1a59044651:   rol    $0xe,%ecx
  0x00007f1a59044654:   add    %edx,%ecx
  0x00007f1a59044656:   add    $0xe7d3fbc8,%ebx
  0x00007f1a5904465c:   mov    %eax,%esi
  0x00007f1a5904465e:   mov    %eax,%edi
  0x00007f1a59044660:   add    0x10(%r15),%ebx
  0x00007f1a59044664:   not    %esi
  0x00007f1a59044666:   and    %ecx,%edi
  0x00007f1a59044668:   and    %edx,%esi
  0x00007f1a5904466a:   or     %edi,%esi
  0x00007f1a5904466c:   add    %esi,%ebx
  0x00007f1a5904466e:   rol    $0x14,%ebx
  0x00007f1a59044671:   add    %ecx,%ebx
  0x00007f1a59044673:   add    $0x21e1cde6,%eax
  0x00007f1a59044678:   mov    %edx,%esi
  0x00007f1a5904467a:   mov    %edx,%edi
  0x00007f1a5904467c:   add    0x24(%r15),%eax
  0x00007f1a59044680:   not    %esi
  0x00007f1a59044682:   and    %ebx,%edi
  0x00007f1a59044684:   and    %ecx,%esi
  0x00007f1a59044686:   or     %edi,%esi
  0x00007f1a59044688:   add    %esi,%eax
  0x00007f1a5904468a:   rol    $0x5,%eax
  0x00007f1a5904468d:   add    %ebx,%eax
  0x00007f1a5904468f:   add    $0xc33707d6,%edx
  0x00007f1a59044695:   mov    %ecx,%esi
  0x00007f1a59044697:   mov    %ecx,%edi
  0x00007f1a59044699:   add    0x38(%r15),%edx
  0x00007f1a5904469d:   not    %esi
  0x00007f1a5904469f:   and    %eax,%edi
  0x00007f1a590446a1:   and    %ebx,%esi
  0x00007f1a590446a3:   or     %edi,%esi
  0x00007f1a590446a5:   add    %esi,%edx
  0x00007f1a590446a7:   rol    $0x9,%edx
  0x00007f1a590446aa:   add    %eax,%edx
  0x00007f1a590446ac:   add    $0xf4d50d87,%ecx
  0x00007f1a590446b2:   mov    %ebx,%esi
  0x00007f1a590446b4:   mov    %ebx,%edi
  0x00007f1a590446b6:   add    0xc(%r15),%ecx
  0x00007f1a590446ba:   not    %esi
  0x00007f1a590446bc:   and    %edx,%edi
  0x00007f1a590446be:   and    %eax,%esi
  0x00007f1a590446c0:   or     %edi,%esi
  0x00007f1a590446c2:   add    %esi,%ecx
  0x00007f1a590446c4:   rol    $0xe,%ecx
  0x00007f1a590446c7:   add    %edx,%ecx
  0x00007f1a590446c9:   add    $0x455a14ed,%ebx
  0x00007f1a590446cf:   mov    %eax,%esi
  0x00007f1a590446d1:   mov    %eax,%edi
  0x00007f1a590446d3:   add    0x20(%r15),%ebx
  0x00007f1a590446d7:   not    %esi
  0x00007f1a590446d9:   and    %ecx,%edi
  0x00007f1a590446db:   and    %edx,%esi
  0x00007f1a590446dd:   or     %edi,%esi
  0x00007f1a590446df:   add    %esi,%ebx
  0x00007f1a590446e1:   rol    $0x14,%ebx
  0x00007f1a590446e4:   add    %ecx,%ebx
  0x00007f1a590446e6:   add    $0xa9e3e905,%eax
  0x00007f1a590446eb:   mov    %edx,%esi
  0x00007f1a590446ed:   mov    %edx,%edi
  0x00007f1a590446ef:   add    0x34(%r15),%eax
  0x00007f1a590446f3:   not    %esi
  0x00007f1a590446f5:   and    %ebx,%edi
  0x00007f1a590446f7:   and    %ecx,%esi
  0x00007f1a590446f9:   or     %edi,%esi
  0x00007f1a590446fb:   add    %esi,%eax
  0x00007f1a590446fd:   rol    $0x5,%eax
  0x00007f1a59044700:   add    %ebx,%eax
  0x00007f1a59044702:   add    $0xfcefa3f8,%edx
  0x00007f1a59044708:   mov    %ecx,%esi
  0x00007f1a5904470a:   mov    %ecx,%edi
  0x00007f1a5904470c:   add    0x8(%r15),%edx
  0x00007f1a59044710:   not    %esi
  0x00007f1a59044712:   and    %eax,%edi
  0x00007f1a59044714:   and    %ebx,%esi
  0x00007f1a59044716:   or     %edi,%esi
  0x00007f1a59044718:   add    %esi,%edx
  0x00007f1a5904471a:   rol    $0x9,%edx
  0x00007f1a5904471d:   add    %eax,%edx
  0x00007f1a5904471f:   add    $0x676f02d9,%ecx
  0x00007f1a59044725:   mov    %ebx,%esi
  0x00007f1a59044727:   mov    %ebx,%edi
  0x00007f1a59044729:   add    0x1c(%r15),%ecx
  0x00007f1a5904472d:   not    %esi
  0x00007f1a5904472f:   and    %edx,%edi
  0x00007f1a59044731:   and    %eax,%esi
  0x00007f1a59044733:   or     %edi,%esi
  0x00007f1a59044735:   add    %esi,%ecx
  0x00007f1a59044737:   rol    $0xe,%ecx
  0x00007f1a5904473a:   add    %edx,%ecx
  0x00007f1a5904473c:   add    $0x8d2a4c8a,%ebx
  0x00007f1a59044742:   mov    %eax,%esi
  0x00007f1a59044744:   mov    %eax,%edi
  0x00007f1a59044746:   add    0x30(%r15),%ebx
  0x00007f1a5904474a:   not    %esi
  0x00007f1a5904474c:   and    %ecx,%edi
  0x00007f1a5904474e:   and    %edx,%esi
  0x00007f1a59044750:   or     %edi,%esi
  0x00007f1a59044752:   add    %esi,%ebx
  0x00007f1a59044754:   rol    $0x14,%ebx
  0x00007f1a59044757:   add    %ecx,%ebx
  0x00007f1a59044759:   add    $0xfffa3942,%eax
  0x00007f1a5904475e:   mov    %ecx,%esi
  0x00007f1a59044760:   add    0x14(%r15),%eax
  0x00007f1a59044764:   xor    %edx,%esi
  0x00007f1a59044766:   xor    %ebx,%esi
  0x00007f1a59044768:   add    %esi,%eax
  0x00007f1a5904476a:   rol    $0x4,%eax
  0x00007f1a5904476d:   add    %ebx,%eax
  0x00007f1a5904476f:   add    $0x8771f681,%edx
  0x00007f1a59044775:   mov    %ebx,%esi
  0x00007f1a59044777:   add    0x20(%r15),%edx
  0x00007f1a5904477b:   xor    %ecx,%esi
  0x00007f1a5904477d:   xor    %eax,%esi
  0x00007f1a5904477f:   add    %esi,%edx
  0x00007f1a59044781:   rol    $0xb,%edx
  0x00007f1a59044784:   add    %eax,%edx
  0x00007f1a59044786:   add    $0x6d9d6122,%ecx
  0x00007f1a5904478c:   mov    %eax,%esi
  0x00007f1a5904478e:   add    0x2c(%r15),%ecx
  0x00007f1a59044792:   xor    %ebx,%esi
  0x00007f1a59044794:   xor    %edx,%esi
  0x00007f1a59044796:   add    %esi,%ecx
  0x00007f1a59044798:   rol    $0x10,%ecx
  0x00007f1a5904479b:   add    %edx,%ecx
  0x00007f1a5904479d:   add    $0xfde5380c,%ebx
  0x00007f1a590447a3:   mov    %edx,%esi
  0x00007f1a590447a5:   add    0x38(%r15),%ebx
  0x00007f1a590447a9:   xor    %eax,%esi
  0x00007f1a590447ab:   xor    %ecx,%esi
  0x00007f1a590447ad:   add    %esi,%ebx
  0x00007f1a590447af:   rol    $0x17,%ebx
  0x00007f1a590447b2:   add    %ecx,%ebx
  0x00007f1a590447b4:   add    $0xa4beea44,%eax
  0x00007f1a590447b9:   mov    %ecx,%esi
  0x00007f1a590447bb:   add    0x4(%r15),%eax
  0x00007f1a590447bf:   xor    %edx,%esi
  0x00007f1a590447c1:   xor    %ebx,%esi
  0x00007f1a590447c3:   add    %esi,%eax
  0x00007f1a590447c5:   rol    $0x4,%eax
  0x00007f1a590447c8:   add    %ebx,%eax
  0x00007f1a590447ca:   add    $0x4bdecfa9,%edx
  0x00007f1a590447d0:   mov    %ebx,%esi
  0x00007f1a590447d2:   add    0x10(%r15),%edx
  0x00007f1a590447d6:   xor    %ecx,%esi
  0x00007f1a590447d8:   xor    %eax,%esi
  0x00007f1a590447da:   add    %esi,%edx
  0x00007f1a590447dc:   rol    $0xb,%edx
  0x00007f1a590447df:   add    %eax,%edx
  0x00007f1a590447e1:   add    $0xf6bb4b60,%ecx
  0x00007f1a590447e7:   mov    %eax,%esi
  0x00007f1a590447e9:   add    0x1c(%r15),%ecx
  0x00007f1a590447ed:   xor    %ebx,%esi
  0x00007f1a590447ef:   xor    %edx,%esi
  0x00007f1a590447f1:   add    %esi,%ecx
  0x00007f1a590447f3:   rol    $0x10,%ecx
  0x00007f1a590447f6:   add    %edx,%ecx
  0x00007f1a590447f8:   add    $0xbebfbc70,%ebx
  0x00007f1a590447fe:   mov    %edx,%esi
  0x00007f1a59044800:   add    0x28(%r15),%ebx
  0x00007f1a59044804:   xor    %eax,%esi
  0x00007f1a59044806:   xor    %ecx,%esi
  0x00007f1a59044808:   add    %esi,%ebx
  0x00007f1a5904480a:   rol    $0x17,%ebx
  0x00007f1a5904480d:   add    %ecx,%ebx
  0x00007f1a5904480f:   add    $0x289b7ec6,%eax
  0x00007f1a59044814:   mov    %ecx,%esi
  0x00007f1a59044816:   add    0x34(%r15),%eax
  0x00007f1a5904481a:   xor    %edx,%esi
  0x00007f1a5904481c:   xor    %ebx,%esi
  0x00007f1a5904481e:   add    %esi,%eax
  0x00007f1a59044820:   rol    $0x4,%eax
  0x00007f1a59044823:   add    %ebx,%eax
  0x00007f1a59044825:   add    $0xeaa127fa,%edx
  0x00007f1a5904482b:   mov    %ebx,%esi
  0x00007f1a5904482d:   add    (%r15),%edx
  0x00007f1a59044830:   xor    %ecx,%esi
  0x00007f1a59044832:   xor    %eax,%esi
  0x00007f1a59044834:   add    %esi,%edx
  0x00007f1a59044836:   rol    $0xb,%edx
  0x00007f1a59044839:   add    %eax,%edx
  0x00007f1a5904483b:   add    $0xd4ef3085,%ecx
  0x00007f1a59044841:   mov    %eax,%esi
  0x00007f1a59044843:   add    0xc(%r15),%ecx
  0x00007f1a59044847:   xor    %ebx,%esi
  0x00007f1a59044849:   xor    %edx,%esi
  0x00007f1a5904484b:   add    %esi,%ecx
  0x00007f1a5904484d:   rol    $0x10,%ecx
  0x00007f1a59044850:   add    %edx,%ecx
  0x00007f1a59044852:   add    $0x4881d05,%ebx
  0x00007f1a59044858:   mov    %edx,%esi
  0x00007f1a5904485a:   add    0x18(%r15),%ebx
  0x00007f1a5904485e:   xor    %eax,%esi
  0x00007f1a59044860:   xor    %ecx,%esi
  0x00007f1a59044862:   add    %esi,%ebx
  0x00007f1a59044864:   rol    $0x17,%ebx
  0x00007f1a59044867:   add    %ecx,%ebx
  0x00007f1a59044869:   add    $0xd9d4d039,%eax
  0x00007f1a5904486e:   mov    %ecx,%esi
  0x00007f1a59044870:   add    0x24(%r15),%eax
  0x00007f1a59044874:   xor    %edx,%esi
  0x00007f1a59044876:   xor    %ebx,%esi
  0x00007f1a59044878:   add    %esi,%eax
  0x00007f1a5904487a:   rol    $0x4,%eax
  0x00007f1a5904487d:   add    %ebx,%eax
  0x00007f1a5904487f:   add    $0xe6db99e5,%edx
  0x00007f1a59044885:   mov    %ebx,%esi
  0x00007f1a59044887:   add    0x30(%r15),%edx
  0x00007f1a5904488b:   xor    %ecx,%esi
  0x00007f1a5904488d:   xor    %eax,%esi
  0x00007f1a5904488f:   add    %esi,%edx
  0x00007f1a59044891:   rol    $0xb,%edx
  0x00007f1a59044894:   add    %eax,%edx
  0x00007f1a59044896:   add    $0x1fa27cf8,%ecx
  0x00007f1a5904489c:   mov    %eax,%esi
  0x00007f1a5904489e:   add    0x3c(%r15),%ecx
  0x00007f1a590448a2:   xor    %ebx,%esi
  0x00007f1a590448a4:   xor    %edx,%esi
  0x00007f1a590448a6:   add    %esi,%ecx
  0x00007f1a590448a8:   rol    $0x10,%ecx
  0x00007f1a590448ab:   add    %edx,%ecx
  0x00007f1a590448ad:   add    $0xc4ac5665,%ebx
  0x00007f1a590448b3:   mov    %edx,%esi
  0x00007f1a590448b5:   add    0x8(%r15),%ebx
  0x00007f1a590448b9:   xor    %eax,%esi
  0x00007f1a590448bb:   xor    %ecx,%esi
  0x00007f1a590448bd:   add    %esi,%ebx
  0x00007f1a590448bf:   rol    $0x17,%ebx
  0x00007f1a590448c2:   add    %ecx,%ebx
  0x00007f1a590448c4:   add    $0xf4292244,%eax
  0x00007f1a590448c9:   mov    %edx,%esi
  0x00007f1a590448cb:   not    %esi
  0x00007f1a590448cd:   add    (%r15),%eax
  0x00007f1a590448d0:   or     %ebx,%esi
  0x00007f1a590448d2:   xor    %ecx,%esi
  0x00007f1a590448d4:   add    %esi,%eax
  0x00007f1a590448d6:   rol    $0x6,%eax
  0x00007f1a590448d9:   add    %ebx,%eax
  0x00007f1a590448db:   add    $0x432aff97,%edx
  0x00007f1a590448e1:   mov    %ecx,%esi
  0x00007f1a590448e3:   not    %esi
  0x00007f1a590448e5:   add    0x1c(%r15),%edx
  0x00007f1a590448e9:   or     %eax,%esi
  0x00007f1a590448eb:   xor    %ebx,%esi
  0x00007f1a590448ed:   add    %esi,%edx
  0x00007f1a590448ef:   rol    $0xa,%edx
  0x00007f1a590448f2:   add    %eax,%edx
  0x00007f1a590448f4:   add    $0xab9423a7,%ecx
  0x00007f1a590448fa:   mov    %ebx,%esi
  0x00007f1a590448fc:   not    %esi
  0x00007f1a590448fe:   add    0x38(%r15),%ecx
  0x00007f1a59044902:   or     %edx,%esi
  0x00007f1a59044904:   xor    %eax,%esi
  0x00007f1a59044906:   add    %esi,%ecx
  0x00007f1a59044908:   rol    $0xf,%ecx
  0x00007f1a5904490b:   add    %edx,%ecx
  0x00007f1a5904490d:   add    $0xfc93a039,%ebx
  0x00007f1a59044913:   mov    %eax,%esi
  0x00007f1a59044915:   not    %esi
  0x00007f1a59044917:   add    0x14(%r15),%ebx
  0x00007f1a5904491b:   or     %ecx,%esi
  0x00007f1a5904491d:   xor    %edx,%esi
  0x00007f1a5904491f:   add    %esi,%ebx
  0x00007f1a59044921:   rol    $0x15,%ebx
  0x00007f1a59044924:   add    %ecx,%ebx
  0x00007f1a59044926:   add    $0x655b59c3,%eax
  0x00007f1a5904492b:   mov    %edx,%esi
  0x00007f1a5904492d:   not    %esi
  0x00007f1a5904492f:   add    0x30(%r15),%eax
  0x00007f1a59044933:   or     %ebx,%esi
  0x00007f1a59044935:   xor    %ecx,%esi
  0x00007f1a59044937:   add    %esi,%eax
  0x00007f1a59044939:   rol    $0x6,%eax
  0x00007f1a5904493c:   add    %ebx,%eax
  0x00007f1a5904493e:   add    $0x8f0ccc92,%edx
  0x00007f1a59044944:   mov    %ecx,%esi
  0x00007f1a59044946:   not    %esi
  0x00007f1a59044948:   add    0xc(%r15),%edx
  0x00007f1a5904494c:   or     %eax,%esi
  0x00007f1a5904494e:   xor    %ebx,%esi
  0x00007f1a59044950:   add    %esi,%edx
  0x00007f1a59044952:   rol    $0xa,%edx
  0x00007f1a59044955:   add    %eax,%edx
  0x00007f1a59044957:   add    $0xffeff47d,%ecx
  0x00007f1a5904495d:   mov    %ebx,%esi
  0x00007f1a5904495f:   not    %esi
  0x00007f1a59044961:   add    0x28(%r15),%ecx
  0x00007f1a59044965:   or     %edx,%esi
  0x00007f1a59044967:   xor    %eax,%esi
  0x00007f1a59044969:   add    %esi,%ecx
  0x00007f1a5904496b:   rol    $0xf,%ecx
  0x00007f1a5904496e:   add    %edx,%ecx
  0x00007f1a59044970:   add    $0x85845dd1,%ebx
  0x00007f1a59044976:   mov    %eax,%esi
  0x00007f1a59044978:   not    %esi
  0x00007f1a5904497a:   add    0x4(%r15),%ebx
  0x00007f1a5904497e:   or     %ecx,%esi
  0x00007f1a59044980:   xor    %edx,%esi
  0x00007f1a59044982:   add    %esi,%ebx
  0x00007f1a59044984:   rol    $0x15,%ebx
  0x00007f1a59044987:   add    %ecx,%ebx
  0x00007f1a59044989:   add    $0x6fa87e4f,%eax
  0x00007f1a5904498e:   mov    %edx,%esi
  0x00007f1a59044990:   not    %esi
  0x00007f1a59044992:   add    0x20(%r15),%eax
  0x00007f1a59044996:   or     %ebx,%esi
  0x00007f1a59044998:   xor    %ecx,%esi
  0x00007f1a5904499a:   add    %esi,%eax
  0x00007f1a5904499c:   rol    $0x6,%eax
  0x00007f1a5904499f:   add    %ebx,%eax
  0x00007f1a590449a1:   add    $0xfe2ce6e0,%edx
  0x00007f1a590449a7:   mov    %ecx,%esi
  0x00007f1a590449a9:   not    %esi
  0x00007f1a590449ab:   add    0x3c(%r15),%edx
  0x00007f1a590449af:   or     %eax,%esi
  0x00007f1a590449b1:   xor    %ebx,%esi
  0x00007f1a590449b3:   add    %esi,%edx
  0x00007f1a590449b5:   rol    $0xa,%edx
  0x00007f1a590449b8:   add    %eax,%edx
  0x00007f1a590449ba:   add    $0xa3014314,%ecx
  0x00007f1a590449c0:   mov    %ebx,%esi
  0x00007f1a590449c2:   not    %esi
  0x00007f1a590449c4:   add    0x18(%r15),%ecx
  0x00007f1a590449c8:   or     %edx,%esi
  0x00007f1a590449ca:   xor    %eax,%esi
  0x00007f1a590449cc:   add    %esi,%ecx
  0x00007f1a590449ce:   rol    $0xf,%ecx
  0x00007f1a590449d1:   add    %edx,%ecx
  0x00007f1a590449d3:   add    $0x4e0811a1,%ebx
  0x00007f1a590449d9:   mov    %eax,%esi
  0x00007f1a590449db:   not    %esi
  0x00007f1a590449dd:   add    0x34(%r15),%ebx
  0x00007f1a590449e1:   or     %ecx,%esi
  0x00007f1a590449e3:   xor    %edx,%esi
  0x00007f1a590449e5:   add    %esi,%ebx
  0x00007f1a590449e7:   rol    $0x15,%ebx
  0x00007f1a590449ea:   add    %ecx,%ebx
  0x00007f1a590449ec:   add    $0xf7537e82,%eax
  0x00007f1a590449f1:   mov    %edx,%esi
  0x00007f1a590449f3:   not    %esi
  0x00007f1a590449f5:   add    0x10(%r15),%eax
  0x00007f1a590449f9:   or     %ebx,%esi
  0x00007f1a590449fb:   xor    %ecx,%esi
  0x00007f1a590449fd:   add    %esi,%eax
  0x00007f1a590449ff:   rol    $0x6,%eax
  0x00007f1a59044a02:   add    %ebx,%eax
  0x00007f1a59044a04:   add    $0xbd3af235,%edx
  0x00007f1a59044a0a:   mov    %ecx,%esi
  0x00007f1a59044a0c:   not    %esi
  0x00007f1a59044a0e:   add    0x2c(%r15),%edx
  0x00007f1a59044a12:   or     %eax,%esi
  0x00007f1a59044a14:   xor    %ebx,%esi
  0x00007f1a59044a16:   add    %esi,%edx
  0x00007f1a59044a18:   rol    $0xa,%edx
  0x00007f1a59044a1b:   add    %eax,%edx
  0x00007f1a59044a1d:   add    $0x2ad7d2bb,%ecx
  0x00007f1a59044a23:   mov    %ebx,%esi
  0x00007f1a59044a25:   not    %esi
  0x00007f1a59044a27:   add    0x8(%r15),%ecx
  0x00007f1a59044a2b:   or     %edx,%esi
  0x00007f1a59044a2d:   xor    %eax,%esi
  0x00007f1a59044a2f:   add    %esi,%ecx
  0x00007f1a59044a31:   rol    $0xf,%ecx
  0x00007f1a59044a34:   add    %edx,%ecx
  0x00007f1a59044a36:   add    $0xeb86d391,%ebx
  0x00007f1a59044a3c:   mov    %eax,%esi
  0x00007f1a59044a3e:   not    %esi
  0x00007f1a59044a40:   add    0x24(%r15),%ebx
  0x00007f1a59044a44:   or     %ecx,%esi
  0x00007f1a59044a46:   xor    %edx,%esi
  0x00007f1a59044a48:   add    %esi,%ebx
  0x00007f1a59044a4a:   rol    $0x15,%ebx
  0x00007f1a59044a4d:   add    %ecx,%ebx
  0x00007f1a59044a4f:   mov    (%rsp),%rdi
  0x00007f1a59044a53:   add    %eax,(%rdi)
  0x00007f1a59044a55:   add    %ebx,0x4(%rdi)
  0x00007f1a59044a58:   add    %ecx,0x8(%rdi)
  0x00007f1a59044a5b:   add    %edx,0xc(%rdi)
  0x00007f1a59044a5e:   add    $0x10,%rsp
  0x00007f1a59044a62:   pop    %r15
  0x00007f1a59044a64:   pop    %rsi
  0x00007f1a59044a65:   pop    %rdi
  0x00007f1a59044a66:   pop    %rbx
  0x00007f1a59044a67:   leaveq 
  0x00007f1a59044a68:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::md5_implCompressMB [0x00007f1a59044a80, 0x00007f1a5904512b] (1707 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59044a80:   push   %rbp
  0x00007f1a59044a81:   mov    %rsp,%rbp
  0x00007f1a59044a84:   push   %rbx
  0x00007f1a59044a85:   push   %rdi
  0x00007f1a59044a86:   push   %rsi
  0x00007f1a59044a87:   push   %r15
  0x00007f1a59044a89:   sub    $0x10,%rsp
  0x00007f1a59044a8d:   mov    %rdi,%r15
  0x00007f1a59044a90:   mov    %rsi,(%rsp)
  0x00007f1a59044a94:   mov    %edx,0x8(%rsp)
  0x00007f1a59044a98:   mov    %ecx,0xc(%rsp)
  0x00007f1a59044a9c:   mov    (%rsp),%rdi
  0x00007f1a59044aa0:   mov    (%rdi),%eax
  0x00007f1a59044aa2:   mov    0x4(%rdi),%ebx
  0x00007f1a59044aa5:   mov    0x8(%rdi),%ecx
  0x00007f1a59044aa8:   mov    0xc(%rdi),%edx
  0x00007f1a59044aab:   add    $0xd76aa478,%eax
  0x00007f1a59044ab0:   mov    %ecx,%esi
  0x00007f1a59044ab2:   add    (%r15),%eax
  0x00007f1a59044ab5:   xor    %edx,%esi
  0x00007f1a59044ab7:   and    %ebx,%esi
  0x00007f1a59044ab9:   xor    %edx,%esi
  0x00007f1a59044abb:   add    %esi,%eax
  0x00007f1a59044abd:   rol    $0x7,%eax
  0x00007f1a59044ac0:   add    %ebx,%eax
  0x00007f1a59044ac2:   add    $0xe8c7b756,%edx
  0x00007f1a59044ac8:   mov    %ebx,%esi
  0x00007f1a59044aca:   add    0x4(%r15),%edx
  0x00007f1a59044ace:   xor    %ecx,%esi
  0x00007f1a59044ad0:   and    %eax,%esi
  0x00007f1a59044ad2:   xor    %ecx,%esi
  0x00007f1a59044ad4:   add    %esi,%edx
  0x00007f1a59044ad6:   rol    $0xc,%edx
  0x00007f1a59044ad9:   add    %eax,%edx
  0x00007f1a59044adb:   add    $0x242070db,%ecx
  0x00007f1a59044ae1:   mov    %eax,%esi
  0x00007f1a59044ae3:   add    0x8(%r15),%ecx
  0x00007f1a59044ae7:   xor    %ebx,%esi
  0x00007f1a59044ae9:   and    %edx,%esi
  0x00007f1a59044aeb:   xor    %ebx,%esi
  0x00007f1a59044aed:   add    %esi,%ecx
  0x00007f1a59044aef:   rol    $0x11,%ecx
  0x00007f1a59044af2:   add    %edx,%ecx
  0x00007f1a59044af4:   add    $0xc1bdceee,%ebx
  0x00007f1a59044afa:   mov    %edx,%esi
  0x00007f1a59044afc:   add    0xc(%r15),%ebx
  0x00007f1a59044b00:   xor    %eax,%esi
  0x00007f1a59044b02:   and    %ecx,%esi
  0x00007f1a59044b04:   xor    %eax,%esi
  0x00007f1a59044b06:   add    %esi,%ebx
  0x00007f1a59044b08:   rol    $0x16,%ebx
  0x00007f1a59044b0b:   add    %ecx,%ebx
  0x00007f1a59044b0d:   add    $0xf57c0faf,%eax
  0x00007f1a59044b12:   mov    %ecx,%esi
  0x00007f1a59044b14:   add    0x10(%r15),%eax
  0x00007f1a59044b18:   xor    %edx,%esi
  0x00007f1a59044b1a:   and    %ebx,%esi
  0x00007f1a59044b1c:   xor    %edx,%esi
  0x00007f1a59044b1e:   add    %esi,%eax
  0x00007f1a59044b20:   rol    $0x7,%eax
  0x00007f1a59044b23:   add    %ebx,%eax
  0x00007f1a59044b25:   add    $0x4787c62a,%edx
  0x00007f1a59044b2b:   mov    %ebx,%esi
  0x00007f1a59044b2d:   add    0x14(%r15),%edx
  0x00007f1a59044b31:   xor    %ecx,%esi
  0x00007f1a59044b33:   and    %eax,%esi
  0x00007f1a59044b35:   xor    %ecx,%esi
  0x00007f1a59044b37:   add    %esi,%edx
  0x00007f1a59044b39:   rol    $0xc,%edx
  0x00007f1a59044b3c:   add    %eax,%edx
  0x00007f1a59044b3e:   add    $0xa8304613,%ecx
  0x00007f1a59044b44:   mov    %eax,%esi
  0x00007f1a59044b46:   add    0x18(%r15),%ecx
  0x00007f1a59044b4a:   xor    %ebx,%esi
  0x00007f1a59044b4c:   and    %edx,%esi
  0x00007f1a59044b4e:   xor    %ebx,%esi
  0x00007f1a59044b50:   add    %esi,%ecx
  0x00007f1a59044b52:   rol    $0x11,%ecx
  0x00007f1a59044b55:   add    %edx,%ecx
  0x00007f1a59044b57:   add    $0xfd469501,%ebx
  0x00007f1a59044b5d:   mov    %edx,%esi
  0x00007f1a59044b5f:   add    0x1c(%r15),%ebx
  0x00007f1a59044b63:   xor    %eax,%esi
  0x00007f1a59044b65:   and    %ecx,%esi
  0x00007f1a59044b67:   xor    %eax,%esi
  0x00007f1a59044b69:   add    %esi,%ebx
  0x00007f1a59044b6b:   rol    $0x16,%ebx
  0x00007f1a59044b6e:   add    %ecx,%ebx
  0x00007f1a59044b70:   add    $0x698098d8,%eax
  0x00007f1a59044b75:   mov    %ecx,%esi
  0x00007f1a59044b77:   add    0x20(%r15),%eax
  0x00007f1a59044b7b:   xor    %edx,%esi
  0x00007f1a59044b7d:   and    %ebx,%esi
  0x00007f1a59044b7f:   xor    %edx,%esi
  0x00007f1a59044b81:   add    %esi,%eax
  0x00007f1a59044b83:   rol    $0x7,%eax
  0x00007f1a59044b86:   add    %ebx,%eax
  0x00007f1a59044b88:   add    $0x8b44f7af,%edx
  0x00007f1a59044b8e:   mov    %ebx,%esi
  0x00007f1a59044b90:   add    0x24(%r15),%edx
  0x00007f1a59044b94:   xor    %ecx,%esi
  0x00007f1a59044b96:   and    %eax,%esi
  0x00007f1a59044b98:   xor    %ecx,%esi
  0x00007f1a59044b9a:   add    %esi,%edx
  0x00007f1a59044b9c:   rol    $0xc,%edx
  0x00007f1a59044b9f:   add    %eax,%edx
  0x00007f1a59044ba1:   add    $0xffff5bb1,%ecx
  0x00007f1a59044ba7:   mov    %eax,%esi
  0x00007f1a59044ba9:   add    0x28(%r15),%ecx
  0x00007f1a59044bad:   xor    %ebx,%esi
  0x00007f1a59044baf:   and    %edx,%esi
  0x00007f1a59044bb1:   xor    %ebx,%esi
  0x00007f1a59044bb3:   add    %esi,%ecx
  0x00007f1a59044bb5:   rol    $0x11,%ecx
  0x00007f1a59044bb8:   add    %edx,%ecx
  0x00007f1a59044bba:   add    $0x895cd7be,%ebx
  0x00007f1a59044bc0:   mov    %edx,%esi
  0x00007f1a59044bc2:   add    0x2c(%r15),%ebx
  0x00007f1a59044bc6:   xor    %eax,%esi
  0x00007f1a59044bc8:   and    %ecx,%esi
  0x00007f1a59044bca:   xor    %eax,%esi
  0x00007f1a59044bcc:   add    %esi,%ebx
  0x00007f1a59044bce:   rol    $0x16,%ebx
  0x00007f1a59044bd1:   add    %ecx,%ebx
  0x00007f1a59044bd3:   add    $0x6b901122,%eax
  0x00007f1a59044bd8:   mov    %ecx,%esi
  0x00007f1a59044bda:   add    0x30(%r15),%eax
  0x00007f1a59044bde:   xor    %edx,%esi
  0x00007f1a59044be0:   and    %ebx,%esi
  0x00007f1a59044be2:   xor    %edx,%esi
  0x00007f1a59044be4:   add    %esi,%eax
  0x00007f1a59044be6:   rol    $0x7,%eax
  0x00007f1a59044be9:   add    %ebx,%eax
  0x00007f1a59044beb:   add    $0xfd987193,%edx
  0x00007f1a59044bf1:   mov    %ebx,%esi
  0x00007f1a59044bf3:   add    0x34(%r15),%edx
  0x00007f1a59044bf7:   xor    %ecx,%esi
  0x00007f1a59044bf9:   and    %eax,%esi
  0x00007f1a59044bfb:   xor    %ecx,%esi
  0x00007f1a59044bfd:   add    %esi,%edx
  0x00007f1a59044bff:   rol    $0xc,%edx
  0x00007f1a59044c02:   add    %eax,%edx
  0x00007f1a59044c04:   add    $0xa679438e,%ecx
  0x00007f1a59044c0a:   mov    %eax,%esi
  0x00007f1a59044c0c:   add    0x38(%r15),%ecx
  0x00007f1a59044c10:   xor    %ebx,%esi
  0x00007f1a59044c12:   and    %edx,%esi
  0x00007f1a59044c14:   xor    %ebx,%esi
  0x00007f1a59044c16:   add    %esi,%ecx
  0x00007f1a59044c18:   rol    $0x11,%ecx
  0x00007f1a59044c1b:   add    %edx,%ecx
  0x00007f1a59044c1d:   add    $0x49b40821,%ebx
  0x00007f1a59044c23:   mov    %edx,%esi
  0x00007f1a59044c25:   add    0x3c(%r15),%ebx
  0x00007f1a59044c29:   xor    %eax,%esi
  0x00007f1a59044c2b:   and    %ecx,%esi
  0x00007f1a59044c2d:   xor    %eax,%esi
  0x00007f1a59044c2f:   add    %esi,%ebx
  0x00007f1a59044c31:   rol    $0x16,%ebx
  0x00007f1a59044c34:   add    %ecx,%ebx
  0x00007f1a59044c36:   add    $0xf61e2562,%eax
  0x00007f1a59044c3b:   mov    %edx,%esi
  0x00007f1a59044c3d:   mov    %edx,%edi
  0x00007f1a59044c3f:   add    0x4(%r15),%eax
  0x00007f1a59044c43:   not    %esi
  0x00007f1a59044c45:   and    %ebx,%edi
  0x00007f1a59044c47:   and    %ecx,%esi
  0x00007f1a59044c49:   or     %edi,%esi
  0x00007f1a59044c4b:   add    %esi,%eax
  0x00007f1a59044c4d:   rol    $0x5,%eax
  0x00007f1a59044c50:   add    %ebx,%eax
  0x00007f1a59044c52:   add    $0xc040b340,%edx
  0x00007f1a59044c58:   mov    %ecx,%esi
  0x00007f1a59044c5a:   mov    %ecx,%edi
  0x00007f1a59044c5c:   add    0x18(%r15),%edx
  0x00007f1a59044c60:   not    %esi
  0x00007f1a59044c62:   and    %eax,%edi
  0x00007f1a59044c64:   and    %ebx,%esi
  0x00007f1a59044c66:   or     %edi,%esi
  0x00007f1a59044c68:   add    %esi,%edx
  0x00007f1a59044c6a:   rol    $0x9,%edx
  0x00007f1a59044c6d:   add    %eax,%edx
  0x00007f1a59044c6f:   add    $0x265e5a51,%ecx
  0x00007f1a59044c75:   mov    %ebx,%esi
  0x00007f1a59044c77:   mov    %ebx,%edi
  0x00007f1a59044c79:   add    0x2c(%r15),%ecx
  0x00007f1a59044c7d:   not    %esi
  0x00007f1a59044c7f:   and    %edx,%edi
  0x00007f1a59044c81:   and    %eax,%esi
  0x00007f1a59044c83:   or     %edi,%esi
  0x00007f1a59044c85:   add    %esi,%ecx
  0x00007f1a59044c87:   rol    $0xe,%ecx
  0x00007f1a59044c8a:   add    %edx,%ecx
  0x00007f1a59044c8c:   add    $0xe9b6c7aa,%ebx
  0x00007f1a59044c92:   mov    %eax,%esi
  0x00007f1a59044c94:   mov    %eax,%edi
  0x00007f1a59044c96:   add    (%r15),%ebx
  0x00007f1a59044c99:   not    %esi
  0x00007f1a59044c9b:   and    %ecx,%edi
  0x00007f1a59044c9d:   and    %edx,%esi
  0x00007f1a59044c9f:   or     %edi,%esi
  0x00007f1a59044ca1:   add    %esi,%ebx
  0x00007f1a59044ca3:   rol    $0x14,%ebx
  0x00007f1a59044ca6:   add    %ecx,%ebx
  0x00007f1a59044ca8:   add    $0xd62f105d,%eax
  0x00007f1a59044cad:   mov    %edx,%esi
  0x00007f1a59044caf:   mov    %edx,%edi
  0x00007f1a59044cb1:   add    0x14(%r15),%eax
  0x00007f1a59044cb5:   not    %esi
  0x00007f1a59044cb7:   and    %ebx,%edi
  0x00007f1a59044cb9:   and    %ecx,%esi
  0x00007f1a59044cbb:   or     %edi,%esi
  0x00007f1a59044cbd:   add    %esi,%eax
  0x00007f1a59044cbf:   rol    $0x5,%eax
  0x00007f1a59044cc2:   add    %ebx,%eax
  0x00007f1a59044cc4:   add    $0x2441453,%edx
  0x00007f1a59044cca:   mov    %ecx,%esi
  0x00007f1a59044ccc:   mov    %ecx,%edi
  0x00007f1a59044cce:   add    0x28(%r15),%edx
  0x00007f1a59044cd2:   not    %esi
  0x00007f1a59044cd4:   and    %eax,%edi
  0x00007f1a59044cd6:   and    %ebx,%esi
  0x00007f1a59044cd8:   or     %edi,%esi
  0x00007f1a59044cda:   add    %esi,%edx
  0x00007f1a59044cdc:   rol    $0x9,%edx
  0x00007f1a59044cdf:   add    %eax,%edx
  0x00007f1a59044ce1:   add    $0xd8a1e681,%ecx
  0x00007f1a59044ce7:   mov    %ebx,%esi
  0x00007f1a59044ce9:   mov    %ebx,%edi
  0x00007f1a59044ceb:   add    0x3c(%r15),%ecx
  0x00007f1a59044cef:   not    %esi
  0x00007f1a59044cf1:   and    %edx,%edi
  0x00007f1a59044cf3:   and    %eax,%esi
  0x00007f1a59044cf5:   or     %edi,%esi
  0x00007f1a59044cf7:   add    %esi,%ecx
  0x00007f1a59044cf9:   rol    $0xe,%ecx
  0x00007f1a59044cfc:   add    %edx,%ecx
  0x00007f1a59044cfe:   add    $0xe7d3fbc8,%ebx
  0x00007f1a59044d04:   mov    %eax,%esi
  0x00007f1a59044d06:   mov    %eax,%edi
  0x00007f1a59044d08:   add    0x10(%r15),%ebx
  0x00007f1a59044d0c:   not    %esi
  0x00007f1a59044d0e:   and    %ecx,%edi
  0x00007f1a59044d10:   and    %edx,%esi
  0x00007f1a59044d12:   or     %edi,%esi
  0x00007f1a59044d14:   add    %esi,%ebx
  0x00007f1a59044d16:   rol    $0x14,%ebx
  0x00007f1a59044d19:   add    %ecx,%ebx
  0x00007f1a59044d1b:   add    $0x21e1cde6,%eax
  0x00007f1a59044d20:   mov    %edx,%esi
  0x00007f1a59044d22:   mov    %edx,%edi
  0x00007f1a59044d24:   add    0x24(%r15),%eax
  0x00007f1a59044d28:   not    %esi
  0x00007f1a59044d2a:   and    %ebx,%edi
  0x00007f1a59044d2c:   and    %ecx,%esi
  0x00007f1a59044d2e:   or     %edi,%esi
  0x00007f1a59044d30:   add    %esi,%eax
  0x00007f1a59044d32:   rol    $0x5,%eax
  0x00007f1a59044d35:   add    %ebx,%eax
  0x00007f1a59044d37:   add    $0xc33707d6,%edx
  0x00007f1a59044d3d:   mov    %ecx,%esi
  0x00007f1a59044d3f:   mov    %ecx,%edi
  0x00007f1a59044d41:   add    0x38(%r15),%edx
  0x00007f1a59044d45:   not    %esi
  0x00007f1a59044d47:   and    %eax,%edi
  0x00007f1a59044d49:   and    %ebx,%esi
  0x00007f1a59044d4b:   or     %edi,%esi
  0x00007f1a59044d4d:   add    %esi,%edx
  0x00007f1a59044d4f:   rol    $0x9,%edx
  0x00007f1a59044d52:   add    %eax,%edx
  0x00007f1a59044d54:   add    $0xf4d50d87,%ecx
  0x00007f1a59044d5a:   mov    %ebx,%esi
  0x00007f1a59044d5c:   mov    %ebx,%edi
  0x00007f1a59044d5e:   add    0xc(%r15),%ecx
  0x00007f1a59044d62:   not    %esi
  0x00007f1a59044d64:   and    %edx,%edi
  0x00007f1a59044d66:   and    %eax,%esi
  0x00007f1a59044d68:   or     %edi,%esi
  0x00007f1a59044d6a:   add    %esi,%ecx
  0x00007f1a59044d6c:   rol    $0xe,%ecx
  0x00007f1a59044d6f:   add    %edx,%ecx
  0x00007f1a59044d71:   add    $0x455a14ed,%ebx
  0x00007f1a59044d77:   mov    %eax,%esi
  0x00007f1a59044d79:   mov    %eax,%edi
  0x00007f1a59044d7b:   add    0x20(%r15),%ebx
  0x00007f1a59044d7f:   not    %esi
  0x00007f1a59044d81:   and    %ecx,%edi
  0x00007f1a59044d83:   and    %edx,%esi
  0x00007f1a59044d85:   or     %edi,%esi
  0x00007f1a59044d87:   add    %esi,%ebx
  0x00007f1a59044d89:   rol    $0x14,%ebx
  0x00007f1a59044d8c:   add    %ecx,%ebx
  0x00007f1a59044d8e:   add    $0xa9e3e905,%eax
  0x00007f1a59044d93:   mov    %edx,%esi
  0x00007f1a59044d95:   mov    %edx,%edi
  0x00007f1a59044d97:   add    0x34(%r15),%eax
  0x00007f1a59044d9b:   not    %esi
  0x00007f1a59044d9d:   and    %ebx,%edi
  0x00007f1a59044d9f:   and    %ecx,%esi
  0x00007f1a59044da1:   or     %edi,%esi
  0x00007f1a59044da3:   add    %esi,%eax
  0x00007f1a59044da5:   rol    $0x5,%eax
  0x00007f1a59044da8:   add    %ebx,%eax
  0x00007f1a59044daa:   add    $0xfcefa3f8,%edx
  0x00007f1a59044db0:   mov    %ecx,%esi
  0x00007f1a59044db2:   mov    %ecx,%edi
  0x00007f1a59044db4:   add    0x8(%r15),%edx
  0x00007f1a59044db8:   not    %esi
  0x00007f1a59044dba:   and    %eax,%edi
  0x00007f1a59044dbc:   and    %ebx,%esi
  0x00007f1a59044dbe:   or     %edi,%esi
  0x00007f1a59044dc0:   add    %esi,%edx
  0x00007f1a59044dc2:   rol    $0x9,%edx
  0x00007f1a59044dc5:   add    %eax,%edx
  0x00007f1a59044dc7:   add    $0x676f02d9,%ecx
  0x00007f1a59044dcd:   mov    %ebx,%esi
  0x00007f1a59044dcf:   mov    %ebx,%edi
  0x00007f1a59044dd1:   add    0x1c(%r15),%ecx
  0x00007f1a59044dd5:   not    %esi
  0x00007f1a59044dd7:   and    %edx,%edi
  0x00007f1a59044dd9:   and    %eax,%esi
  0x00007f1a59044ddb:   or     %edi,%esi
  0x00007f1a59044ddd:   add    %esi,%ecx
  0x00007f1a59044ddf:   rol    $0xe,%ecx
  0x00007f1a59044de2:   add    %edx,%ecx
  0x00007f1a59044de4:   add    $0x8d2a4c8a,%ebx
  0x00007f1a59044dea:   mov    %eax,%esi
  0x00007f1a59044dec:   mov    %eax,%edi
  0x00007f1a59044dee:   add    0x30(%r15),%ebx
  0x00007f1a59044df2:   not    %esi
  0x00007f1a59044df4:   and    %ecx,%edi
  0x00007f1a59044df6:   and    %edx,%esi
  0x00007f1a59044df8:   or     %edi,%esi
  0x00007f1a59044dfa:   add    %esi,%ebx
  0x00007f1a59044dfc:   rol    $0x14,%ebx
  0x00007f1a59044dff:   add    %ecx,%ebx
  0x00007f1a59044e01:   add    $0xfffa3942,%eax
  0x00007f1a59044e06:   mov    %ecx,%esi
  0x00007f1a59044e08:   add    0x14(%r15),%eax
  0x00007f1a59044e0c:   xor    %edx,%esi
  0x00007f1a59044e0e:   xor    %ebx,%esi
  0x00007f1a59044e10:   add    %esi,%eax
  0x00007f1a59044e12:   rol    $0x4,%eax
  0x00007f1a59044e15:   add    %ebx,%eax
  0x00007f1a59044e17:   add    $0x8771f681,%edx
  0x00007f1a59044e1d:   mov    %ebx,%esi
  0x00007f1a59044e1f:   add    0x20(%r15),%edx
  0x00007f1a59044e23:   xor    %ecx,%esi
  0x00007f1a59044e25:   xor    %eax,%esi
  0x00007f1a59044e27:   add    %esi,%edx
  0x00007f1a59044e29:   rol    $0xb,%edx
  0x00007f1a59044e2c:   add    %eax,%edx
  0x00007f1a59044e2e:   add    $0x6d9d6122,%ecx
  0x00007f1a59044e34:   mov    %eax,%esi
  0x00007f1a59044e36:   add    0x2c(%r15),%ecx
  0x00007f1a59044e3a:   xor    %ebx,%esi
  0x00007f1a59044e3c:   xor    %edx,%esi
  0x00007f1a59044e3e:   add    %esi,%ecx
  0x00007f1a59044e40:   rol    $0x10,%ecx
  0x00007f1a59044e43:   add    %edx,%ecx
  0x00007f1a59044e45:   add    $0xfde5380c,%ebx
  0x00007f1a59044e4b:   mov    %edx,%esi
  0x00007f1a59044e4d:   add    0x38(%r15),%ebx
  0x00007f1a59044e51:   xor    %eax,%esi
  0x00007f1a59044e53:   xor    %ecx,%esi
  0x00007f1a59044e55:   add    %esi,%ebx
  0x00007f1a59044e57:   rol    $0x17,%ebx
  0x00007f1a59044e5a:   add    %ecx,%ebx
  0x00007f1a59044e5c:   add    $0xa4beea44,%eax
  0x00007f1a59044e61:   mov    %ecx,%esi
  0x00007f1a59044e63:   add    0x4(%r15),%eax
  0x00007f1a59044e67:   xor    %edx,%esi
  0x00007f1a59044e69:   xor    %ebx,%esi
  0x00007f1a59044e6b:   add    %esi,%eax
  0x00007f1a59044e6d:   rol    $0x4,%eax
  0x00007f1a59044e70:   add    %ebx,%eax
  0x00007f1a59044e72:   add    $0x4bdecfa9,%edx
  0x00007f1a59044e78:   mov    %ebx,%esi
  0x00007f1a59044e7a:   add    0x10(%r15),%edx
  0x00007f1a59044e7e:   xor    %ecx,%esi
  0x00007f1a59044e80:   xor    %eax,%esi
  0x00007f1a59044e82:   add    %esi,%edx
  0x00007f1a59044e84:   rol    $0xb,%edx
  0x00007f1a59044e87:   add    %eax,%edx
  0x00007f1a59044e89:   add    $0xf6bb4b60,%ecx
  0x00007f1a59044e8f:   mov    %eax,%esi
  0x00007f1a59044e91:   add    0x1c(%r15),%ecx
  0x00007f1a59044e95:   xor    %ebx,%esi
  0x00007f1a59044e97:   xor    %edx,%esi
  0x00007f1a59044e99:   add    %esi,%ecx
  0x00007f1a59044e9b:   rol    $0x10,%ecx
  0x00007f1a59044e9e:   add    %edx,%ecx
  0x00007f1a59044ea0:   add    $0xbebfbc70,%ebx
  0x00007f1a59044ea6:   mov    %edx,%esi
  0x00007f1a59044ea8:   add    0x28(%r15),%ebx
  0x00007f1a59044eac:   xor    %eax,%esi
  0x00007f1a59044eae:   xor    %ecx,%esi
  0x00007f1a59044eb0:   add    %esi,%ebx
  0x00007f1a59044eb2:   rol    $0x17,%ebx
  0x00007f1a59044eb5:   add    %ecx,%ebx
  0x00007f1a59044eb7:   add    $0x289b7ec6,%eax
  0x00007f1a59044ebc:   mov    %ecx,%esi
  0x00007f1a59044ebe:   add    0x34(%r15),%eax
  0x00007f1a59044ec2:   xor    %edx,%esi
  0x00007f1a59044ec4:   xor    %ebx,%esi
  0x00007f1a59044ec6:   add    %esi,%eax
  0x00007f1a59044ec8:   rol    $0x4,%eax
  0x00007f1a59044ecb:   add    %ebx,%eax
  0x00007f1a59044ecd:   add    $0xeaa127fa,%edx
  0x00007f1a59044ed3:   mov    %ebx,%esi
  0x00007f1a59044ed5:   add    (%r15),%edx
  0x00007f1a59044ed8:   xor    %ecx,%esi
  0x00007f1a59044eda:   xor    %eax,%esi
  0x00007f1a59044edc:   add    %esi,%edx
  0x00007f1a59044ede:   rol    $0xb,%edx
  0x00007f1a59044ee1:   add    %eax,%edx
  0x00007f1a59044ee3:   add    $0xd4ef3085,%ecx
  0x00007f1a59044ee9:   mov    %eax,%esi
  0x00007f1a59044eeb:   add    0xc(%r15),%ecx
  0x00007f1a59044eef:   xor    %ebx,%esi
  0x00007f1a59044ef1:   xor    %edx,%esi
  0x00007f1a59044ef3:   add    %esi,%ecx
  0x00007f1a59044ef5:   rol    $0x10,%ecx
  0x00007f1a59044ef8:   add    %edx,%ecx
  0x00007f1a59044efa:   add    $0x4881d05,%ebx
  0x00007f1a59044f00:   mov    %edx,%esi
  0x00007f1a59044f02:   add    0x18(%r15),%ebx
  0x00007f1a59044f06:   xor    %eax,%esi
  0x00007f1a59044f08:   xor    %ecx,%esi
  0x00007f1a59044f0a:   add    %esi,%ebx
  0x00007f1a59044f0c:   rol    $0x17,%ebx
  0x00007f1a59044f0f:   add    %ecx,%ebx
  0x00007f1a59044f11:   add    $0xd9d4d039,%eax
  0x00007f1a59044f16:   mov    %ecx,%esi
  0x00007f1a59044f18:   add    0x24(%r15),%eax
  0x00007f1a59044f1c:   xor    %edx,%esi
  0x00007f1a59044f1e:   xor    %ebx,%esi
  0x00007f1a59044f20:   add    %esi,%eax
  0x00007f1a59044f22:   rol    $0x4,%eax
  0x00007f1a59044f25:   add    %ebx,%eax
  0x00007f1a59044f27:   add    $0xe6db99e5,%edx
  0x00007f1a59044f2d:   mov    %ebx,%esi
  0x00007f1a59044f2f:   add    0x30(%r15),%edx
  0x00007f1a59044f33:   xor    %ecx,%esi
  0x00007f1a59044f35:   xor    %eax,%esi
  0x00007f1a59044f37:   add    %esi,%edx
  0x00007f1a59044f39:   rol    $0xb,%edx
  0x00007f1a59044f3c:   add    %eax,%edx
  0x00007f1a59044f3e:   add    $0x1fa27cf8,%ecx
  0x00007f1a59044f44:   mov    %eax,%esi
  0x00007f1a59044f46:   add    0x3c(%r15),%ecx
  0x00007f1a59044f4a:   xor    %ebx,%esi
  0x00007f1a59044f4c:   xor    %edx,%esi
  0x00007f1a59044f4e:   add    %esi,%ecx
  0x00007f1a59044f50:   rol    $0x10,%ecx
  0x00007f1a59044f53:   add    %edx,%ecx
  0x00007f1a59044f55:   add    $0xc4ac5665,%ebx
  0x00007f1a59044f5b:   mov    %edx,%esi
  0x00007f1a59044f5d:   add    0x8(%r15),%ebx
  0x00007f1a59044f61:   xor    %eax,%esi
  0x00007f1a59044f63:   xor    %ecx,%esi
  0x00007f1a59044f65:   add    %esi,%ebx
  0x00007f1a59044f67:   rol    $0x17,%ebx
  0x00007f1a59044f6a:   add    %ecx,%ebx
  0x00007f1a59044f6c:   add    $0xf4292244,%eax
  0x00007f1a59044f71:   mov    %edx,%esi
  0x00007f1a59044f73:   not    %esi
  0x00007f1a59044f75:   add    (%r15),%eax
  0x00007f1a59044f78:   or     %ebx,%esi
  0x00007f1a59044f7a:   xor    %ecx,%esi
  0x00007f1a59044f7c:   add    %esi,%eax
  0x00007f1a59044f7e:   rol    $0x6,%eax
  0x00007f1a59044f81:   add    %ebx,%eax
  0x00007f1a59044f83:   add    $0x432aff97,%edx
  0x00007f1a59044f89:   mov    %ecx,%esi
  0x00007f1a59044f8b:   not    %esi
  0x00007f1a59044f8d:   add    0x1c(%r15),%edx
  0x00007f1a59044f91:   or     %eax,%esi
  0x00007f1a59044f93:   xor    %ebx,%esi
  0x00007f1a59044f95:   add    %esi,%edx
  0x00007f1a59044f97:   rol    $0xa,%edx
  0x00007f1a59044f9a:   add    %eax,%edx
  0x00007f1a59044f9c:   add    $0xab9423a7,%ecx
  0x00007f1a59044fa2:   mov    %ebx,%esi
  0x00007f1a59044fa4:   not    %esi
  0x00007f1a59044fa6:   add    0x38(%r15),%ecx
  0x00007f1a59044faa:   or     %edx,%esi
  0x00007f1a59044fac:   xor    %eax,%esi
  0x00007f1a59044fae:   add    %esi,%ecx
  0x00007f1a59044fb0:   rol    $0xf,%ecx
  0x00007f1a59044fb3:   add    %edx,%ecx
  0x00007f1a59044fb5:   add    $0xfc93a039,%ebx
  0x00007f1a59044fbb:   mov    %eax,%esi
  0x00007f1a59044fbd:   not    %esi
  0x00007f1a59044fbf:   add    0x14(%r15),%ebx
  0x00007f1a59044fc3:   or     %ecx,%esi
  0x00007f1a59044fc5:   xor    %edx,%esi
  0x00007f1a59044fc7:   add    %esi,%ebx
  0x00007f1a59044fc9:   rol    $0x15,%ebx
  0x00007f1a59044fcc:   add    %ecx,%ebx
  0x00007f1a59044fce:   add    $0x655b59c3,%eax
  0x00007f1a59044fd3:   mov    %edx,%esi
  0x00007f1a59044fd5:   not    %esi
  0x00007f1a59044fd7:   add    0x30(%r15),%eax
  0x00007f1a59044fdb:   or     %ebx,%esi
  0x00007f1a59044fdd:   xor    %ecx,%esi
  0x00007f1a59044fdf:   add    %esi,%eax
  0x00007f1a59044fe1:   rol    $0x6,%eax
  0x00007f1a59044fe4:   add    %ebx,%eax
  0x00007f1a59044fe6:   add    $0x8f0ccc92,%edx
  0x00007f1a59044fec:   mov    %ecx,%esi
  0x00007f1a59044fee:   not    %esi
  0x00007f1a59044ff0:   add    0xc(%r15),%edx
  0x00007f1a59044ff4:   or     %eax,%esi
  0x00007f1a59044ff6:   xor    %ebx,%esi
  0x00007f1a59044ff8:   add    %esi,%edx
  0x00007f1a59044ffa:   rol    $0xa,%edx
  0x00007f1a59044ffd:   add    %eax,%edx
  0x00007f1a59044fff:   add    $0xffeff47d,%ecx
  0x00007f1a59045005:   mov    %ebx,%esi
  0x00007f1a59045007:   not    %esi
  0x00007f1a59045009:   add    0x28(%r15),%ecx
  0x00007f1a5904500d:   or     %edx,%esi
  0x00007f1a5904500f:   xor    %eax,%esi
  0x00007f1a59045011:   add    %esi,%ecx
  0x00007f1a59045013:   rol    $0xf,%ecx
  0x00007f1a59045016:   add    %edx,%ecx
  0x00007f1a59045018:   add    $0x85845dd1,%ebx
  0x00007f1a5904501e:   mov    %eax,%esi
  0x00007f1a59045020:   not    %esi
  0x00007f1a59045022:   add    0x4(%r15),%ebx
  0x00007f1a59045026:   or     %ecx,%esi
  0x00007f1a59045028:   xor    %edx,%esi
  0x00007f1a5904502a:   add    %esi,%ebx
  0x00007f1a5904502c:   rol    $0x15,%ebx
  0x00007f1a5904502f:   add    %ecx,%ebx
  0x00007f1a59045031:   add    $0x6fa87e4f,%eax
  0x00007f1a59045036:   mov    %edx,%esi
  0x00007f1a59045038:   not    %esi
  0x00007f1a5904503a:   add    0x20(%r15),%eax
  0x00007f1a5904503e:   or     %ebx,%esi
  0x00007f1a59045040:   xor    %ecx,%esi
  0x00007f1a59045042:   add    %esi,%eax
  0x00007f1a59045044:   rol    $0x6,%eax
  0x00007f1a59045047:   add    %ebx,%eax
  0x00007f1a59045049:   add    $0xfe2ce6e0,%edx
  0x00007f1a5904504f:   mov    %ecx,%esi
  0x00007f1a59045051:   not    %esi
  0x00007f1a59045053:   add    0x3c(%r15),%edx
  0x00007f1a59045057:   or     %eax,%esi
  0x00007f1a59045059:   xor    %ebx,%esi
  0x00007f1a5904505b:   add    %esi,%edx
  0x00007f1a5904505d:   rol    $0xa,%edx
  0x00007f1a59045060:   add    %eax,%edx
  0x00007f1a59045062:   add    $0xa3014314,%ecx
  0x00007f1a59045068:   mov    %ebx,%esi
  0x00007f1a5904506a:   not    %esi
  0x00007f1a5904506c:   add    0x18(%r15),%ecx
  0x00007f1a59045070:   or     %edx,%esi
  0x00007f1a59045072:   xor    %eax,%esi
  0x00007f1a59045074:   add    %esi,%ecx
  0x00007f1a59045076:   rol    $0xf,%ecx
  0x00007f1a59045079:   add    %edx,%ecx
  0x00007f1a5904507b:   add    $0x4e0811a1,%ebx
  0x00007f1a59045081:   mov    %eax,%esi
  0x00007f1a59045083:   not    %esi
  0x00007f1a59045085:   add    0x34(%r15),%ebx
  0x00007f1a59045089:   or     %ecx,%esi
  0x00007f1a5904508b:   xor    %edx,%esi
  0x00007f1a5904508d:   add    %esi,%ebx
  0x00007f1a5904508f:   rol    $0x15,%ebx
  0x00007f1a59045092:   add    %ecx,%ebx
  0x00007f1a59045094:   add    $0xf7537e82,%eax
  0x00007f1a59045099:   mov    %edx,%esi
  0x00007f1a5904509b:   not    %esi
  0x00007f1a5904509d:   add    0x10(%r15),%eax
  0x00007f1a590450a1:   or     %ebx,%esi
  0x00007f1a590450a3:   xor    %ecx,%esi
  0x00007f1a590450a5:   add    %esi,%eax
  0x00007f1a590450a7:   rol    $0x6,%eax
  0x00007f1a590450aa:   add    %ebx,%eax
  0x00007f1a590450ac:   add    $0xbd3af235,%edx
  0x00007f1a590450b2:   mov    %ecx,%esi
  0x00007f1a590450b4:   not    %esi
  0x00007f1a590450b6:   add    0x2c(%r15),%edx
  0x00007f1a590450ba:   or     %eax,%esi
  0x00007f1a590450bc:   xor    %ebx,%esi
  0x00007f1a590450be:   add    %esi,%edx
  0x00007f1a590450c0:   rol    $0xa,%edx
  0x00007f1a590450c3:   add    %eax,%edx
  0x00007f1a590450c5:   add    $0x2ad7d2bb,%ecx
  0x00007f1a590450cb:   mov    %ebx,%esi
  0x00007f1a590450cd:   not    %esi
  0x00007f1a590450cf:   add    0x8(%r15),%ecx
  0x00007f1a590450d3:   or     %edx,%esi
  0x00007f1a590450d5:   xor    %eax,%esi
  0x00007f1a590450d7:   add    %esi,%ecx
  0x00007f1a590450d9:   rol    $0xf,%ecx
  0x00007f1a590450dc:   add    %edx,%ecx
  0x00007f1a590450de:   add    $0xeb86d391,%ebx
  0x00007f1a590450e4:   mov    %eax,%esi
  0x00007f1a590450e6:   not    %esi
  0x00007f1a590450e8:   add    0x24(%r15),%ebx
  0x00007f1a590450ec:   or     %ecx,%esi
  0x00007f1a590450ee:   xor    %edx,%esi
  0x00007f1a590450f0:   add    %esi,%ebx
  0x00007f1a590450f2:   rol    $0x15,%ebx
  0x00007f1a590450f5:   add    %ecx,%ebx
  0x00007f1a590450f7:   mov    (%rsp),%rdi
  0x00007f1a590450fb:   add    %eax,(%rdi)
  0x00007f1a590450fd:   add    %ebx,0x4(%rdi)
  0x00007f1a59045100:   add    %ecx,0x8(%rdi)
  0x00007f1a59045103:   add    %edx,0xc(%rdi)
  0x00007f1a59045106:   add    $0x40,%r15
  0x00007f1a5904510a:   addl   $0x40,0x8(%rsp)
  0x00007f1a5904510f:   mov    0x8(%rsp),%esi
  0x00007f1a59045113:   cmp    0xc(%rsp),%esi
  0x00007f1a59045117:   jbe    Stub::md5_implCompressMB+28 0x00007f1a59044a9c
  0x00007f1a5904511d:   mov    %rsi,%rax
  0x00007f1a59045120:   add    $0x10,%rsp
  0x00007f1a59045124:   pop    %r15
  0x00007f1a59045126:   pop    %rsi
  0x00007f1a59045127:   pop    %rdi
  0x00007f1a59045128:   pop    %rbx
  0x00007f1a59045129:   leaveq 
  0x00007f1a5904512a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::pshuffle_byte_flip_mask [0x00007f1a59045140, 0x00007f1a590451a0] (96 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59045140:   add    (%rdx),%eax
  0x00007f1a59045142:   add    %eax,(%rax)
  0x00007f1a59045144:   (bad)  
  0x00007f1a59045145:   (bad)  
  0x00007f1a59045146:   add    $0x90a0b04,%eax
  0x00007f1a5904514b:   or     %cl,(%rdi)
  0x00007f1a5904514d:   (bad)  
  0x00007f1a5904514e:   or     $0x102030c,%eax
  0x00007f1a59045153:   add    %al,(%rdi)
  0x00007f1a59045155:   (bad)  
  0x00007f1a59045156:   add    $0x90a0b04,%eax
  0x00007f1a5904515b:   or     %cl,(%rdi)
  0x00007f1a5904515d:   (bad)  
  0x00007f1a5904515e:   or     $0x201000c,%eax
  0x00007f1a59045163:   add    (%rax),%ecx
  0x00007f1a59045165:   or     %ecx,(%rdx)
  0x00007f1a59045167:   or     %edi,%edi
  0x00007f1a59045169:   (bad)  
  0x00007f1a5904516a:   (bad)  
  0x00007f1a5904516b:   (bad)  
  0x00007f1a5904516c:   (bad)  
  0x00007f1a5904516d:   (bad)  
  0x00007f1a5904516e:   (bad)  
  0x00007f1a5904516f:   incl   (%rax)
  0x00007f1a59045171:   add    %eax,(%rdx)
  0x00007f1a59045173:   add    (%rax),%ecx
  0x00007f1a59045175:   or     %ecx,(%rdx)
  0x00007f1a59045177:   or     %edi,%edi
  0x00007f1a59045179:   (bad)  
  0x00007f1a5904517a:   (bad)  
  0x00007f1a5904517b:   (bad)  
  0x00007f1a5904517c:   (bad)  
  0x00007f1a5904517d:   (bad)  
  0x00007f1a5904517e:   (bad)  
  0x00007f1a5904517f:   (bad)  
  0x00007f1a59045180:   (bad)  
  0x00007f1a59045181:   (bad)  
  0x00007f1a59045182:   (bad)  
  0x00007f1a59045183:   (bad)  
  0x00007f1a59045184:   (bad)  
  0x00007f1a59045185:   (bad)  
  0x00007f1a59045186:   (bad)  
  0x00007f1a59045187:   incl   (%rax)
  0x00007f1a59045189:   add    %eax,(%rdx)
  0x00007f1a5904518b:   add    (%rax),%ecx
  0x00007f1a5904518d:   or     %ecx,(%rdx)
  0x00007f1a5904518f:   or     %edi,%edi
  0x00007f1a59045191:   (bad)  
  0x00007f1a59045192:   (bad)  
  0x00007f1a59045193:   (bad)  
  0x00007f1a59045194:   (bad)  
  0x00007f1a59045195:   (bad)  
  0x00007f1a59045196:   (bad)  
  0x00007f1a59045197:   incl   (%rax)
  0x00007f1a59045199:   add    %eax,(%rdx)
  0x00007f1a5904519b:   add    (%rax),%ecx
  0x00007f1a5904519d:   or     %ecx,(%rdx)
  0x00007f1a5904519f:   .byte 0xb
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha256_implCompress [0x00007f1a590451a0, 0x00007f1a590462cf] (4399 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590451a0:   push   %rbp
  0x00007f1a590451a1:   mov    %rsp,%rbp
  0x00007f1a590451a4:   sub    $0x20,%rsp
  0x00007f1a590451a8:   push   %rcx
  0x00007f1a590451a9:   push   %rdx
  0x00007f1a590451aa:   push   %rbx
  0x00007f1a590451ab:   push   %rbp
  0x00007f1a590451ac:   push   %r12
  0x00007f1a590451ae:   push   %r13
  0x00007f1a590451b0:   push   %r14
  0x00007f1a590451b2:   push   %r15
  0x00007f1a590451b4:   mov    %rsp,%rax
  0x00007f1a590451b7:   sub    $0x220,%rsp
  0x00007f1a590451be:   and    $0xffffffffffffffe0,%rsp
  0x00007f1a590451c2:   mov    %rax,0x218(%rsp)
  0x00007f1a590451ca:   mov    %rcx,%r9
  0x00007f1a590451cd:   mov    %rdx,%r8
  0x00007f1a590451d0:   mov    %rsi,%rdx
  0x00007f1a590451d3:   mov    %rdi,%rcx
  0x00007f1a590451d6:   lea    (%rcx),%rcx
  0x00007f1a590451d9:   mov    %rdx,%rdx
  0x00007f1a590451dc:   xor    %r8,%r8
  0x00007f1a590451df:   add    $0x40,%r8
  0x00007f1a590451e3:   lea    -0x40(%rcx,%r8,1),%r8
  0x00007f1a590451e8:   mov    %r8,0x200(%rsp)
  0x00007f1a590451f0:   cmp    %r8,%rcx
  0x00007f1a590451f3:   je     Stub::sha256_implCompress+4309 0x00007f1a59046275
  0x00007f1a590451f9:   mov    (%rdx),%eax
  0x00007f1a590451fb:   mov    0x4(%rdx),%ebx
  0x00007f1a590451fe:   mov    0x8(%rdx),%edi
  0x00007f1a59045201:   mov    0xc(%rdx),%esi
  0x00007f1a59045204:   mov    0x10(%rdx),%r8d
  0x00007f1a59045208:   mov    0x14(%rdx),%r9d
  0x00007f1a5904520c:   mov    0x1c(%rdx),%r11d
  0x00007f1a59045210:   vmovdqu -0xd8(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007f1a59045218:   vmovdqu -0xc0(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007f1a59045160
  0x00007f1a59045220:   vmovdqu -0xa8(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007f1a59045180
  0x00007f1a59045228:   mov    0x18(%rdx),%r10d
  0x00007f1a5904522c:   mov    %rdx,0x210(%rsp)
  0x00007f1a59045234:   movabs $0x7f1a645df4c0,%rbp
  0x00007f1a5904523e:   vmovdqu (%rcx),%ymm0
  0x00007f1a59045242:   vmovdqu 0x20(%rcx),%ymm1
  0x00007f1a59045247:   vmovdqu 0x40(%rcx),%ymm2
  0x00007f1a5904524c:   vmovdqu 0x60(%rcx),%ymm3
  0x00007f1a59045251:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007f1a59045256:   vpshufb %ymm13,%ymm1,%ymm1
  0x00007f1a5904525b:   vpshufb %ymm13,%ymm2,%ymm2
  0x00007f1a59045260:   vpshufb %ymm13,%ymm3,%ymm3
  0x00007f1a59045265:   vperm2i128 $0x20,%ymm2,%ymm0,%ymm4
  0x00007f1a5904526b:   vperm2i128 $0x31,%ymm2,%ymm0,%ymm5
  0x00007f1a59045271:   vperm2i128 $0x20,%ymm3,%ymm1,%ymm6
  0x00007f1a59045277:   vperm2i128 $0x31,%ymm3,%ymm1,%ymm7
  0x00007f1a5904527d:   add    $0x40,%rcx
  0x00007f1a59045281:   mov    %rcx,0x208(%rsp)
  0x00007f1a59045289:   xor    %rdx,%rdx
  0x00007f1a5904528c:   nopl   0x0(%rax)
  0x00007f1a59045290:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007f1a59045296:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007f1a5904529b:   mov    %eax,%ecx
  0x00007f1a5904529d:   rorx   $0x19,%r8d,%r13d
  0x00007f1a590452a3:   rorx   $0xb,%r8d,%r14d
  0x00007f1a590452a9:   add    (%rsp,%rdx,1),%r11d
  0x00007f1a590452ad:   or     %edi,%ecx
  0x00007f1a590452af:   mov    %r9d,%r15d
  0x00007f1a590452b2:   rorx   $0xd,%eax,%r12d
  0x00007f1a590452b8:   xor    %r14d,%r13d
  0x00007f1a590452bb:   xor    %r10d,%r15d
  0x00007f1a590452be:   rorx   $0x6,%r8d,%r14d
  0x00007f1a590452c4:   and    %r8d,%r15d
  0x00007f1a590452c7:   xor    %r14d,%r13d
  0x00007f1a590452ca:   rorx   $0x16,%eax,%r14d
  0x00007f1a590452d0:   add    %r11d,%esi
  0x00007f1a590452d3:   and    %ebx,%ecx
  0x00007f1a590452d5:   xor    %r12d,%r14d
  0x00007f1a590452d8:   rorx   $0x2,%eax,%r12d
  0x00007f1a590452de:   xor    %r10d,%r15d
  0x00007f1a590452e1:   xor    %r12d,%r14d
  0x00007f1a590452e4:   mov    %eax,%r12d
  0x00007f1a590452e7:   and    %edi,%r12d
  0x00007f1a590452ea:   add    %r13d,%r15d
  0x00007f1a590452ed:   or     %r12d,%ecx
  0x00007f1a590452f0:   add    %r14d,%r11d
  0x00007f1a590452f3:   add    %r15d,%esi
  0x00007f1a590452f6:   add    %r15d,%r11d
  0x00007f1a590452f9:   add    %ecx,%r11d
  0x00007f1a590452fc:   vpalignr $0x4,%ymm6,%ymm7,%ymm0
  0x00007f1a59045302:   vpaddd %ymm4,%ymm0,%ymm0
  0x00007f1a59045306:   vpalignr $0x4,%ymm4,%ymm5,%ymm1
  0x00007f1a5904530c:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f1a59045311:   vpslld $0x19,%ymm1,%ymm3
  0x00007f1a59045316:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a5904531a:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f1a5904531f:   mov    %r11d,%ecx
  0x00007f1a59045322:   rorx   $0x19,%esi,%r13d
  0x00007f1a59045328:   rorx   $0xb,%esi,%r14d
  0x00007f1a5904532e:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007f1a59045333:   or     %ebx,%ecx
  0x00007f1a59045335:   mov    %r8d,%r15d
  0x00007f1a59045338:   rorx   $0xd,%r11d,%r12d
  0x00007f1a5904533e:   xor    %r14d,%r13d
  0x00007f1a59045341:   xor    %r9d,%r15d
  0x00007f1a59045344:   rorx   $0x6,%esi,%r14d
  0x00007f1a5904534a:   and    %esi,%r15d
  0x00007f1a5904534d:   xor    %r14d,%r13d
  0x00007f1a59045350:   rorx   $0x16,%r11d,%r14d
  0x00007f1a59045356:   add    %r10d,%edi
  0x00007f1a59045359:   and    %eax,%ecx
  0x00007f1a5904535b:   xor    %r12d,%r14d
  0x00007f1a5904535e:   rorx   $0x2,%r11d,%r12d
  0x00007f1a59045364:   xor    %r9d,%r15d
  0x00007f1a59045367:   xor    %r12d,%r14d
  0x00007f1a5904536a:   mov    %r11d,%r12d
  0x00007f1a5904536d:   and    %ebx,%r12d
  0x00007f1a59045370:   add    %r13d,%r15d
  0x00007f1a59045373:   or     %r12d,%ecx
  0x00007f1a59045376:   add    %r14d,%r10d
  0x00007f1a59045379:   add    %r15d,%edi
  0x00007f1a5904537c:   add    %r15d,%r10d
  0x00007f1a5904537f:   add    %ecx,%r10d
  0x00007f1a59045382:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f1a59045387:   vpslld $0xe,%ymm1,%ymm1
  0x00007f1a5904538c:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f1a59045390:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f1a59045394:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f1a59045399:   vpshufd $0xfa,%ymm7,%ymm2
  0x00007f1a5904539e:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f1a590453a2:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f1a590453a7:   mov    %r10d,%ecx
  0x00007f1a590453aa:   rorx   $0x19,%edi,%r13d
  0x00007f1a590453b0:   rorx   $0xb,%edi,%r14d
  0x00007f1a590453b6:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007f1a590453bb:   or     %eax,%ecx
  0x00007f1a590453bd:   mov    %esi,%r15d
  0x00007f1a590453c0:   rorx   $0xd,%r10d,%r12d
  0x00007f1a590453c6:   xor    %r14d,%r13d
  0x00007f1a590453c9:   xor    %r8d,%r15d
  0x00007f1a590453cc:   rorx   $0x6,%edi,%r14d
  0x00007f1a590453d2:   and    %edi,%r15d
  0x00007f1a590453d5:   xor    %r14d,%r13d
  0x00007f1a590453d8:   rorx   $0x16,%r10d,%r14d
  0x00007f1a590453de:   add    %r9d,%ebx
  0x00007f1a590453e1:   and    %r11d,%ecx
  0x00007f1a590453e4:   xor    %r12d,%r14d
  0x00007f1a590453e7:   rorx   $0x2,%r10d,%r12d
  0x00007f1a590453ed:   xor    %r8d,%r15d
  0x00007f1a590453f0:   xor    %r12d,%r14d
  0x00007f1a590453f3:   mov    %r10d,%r12d
  0x00007f1a590453f6:   and    %eax,%r12d
  0x00007f1a590453f9:   add    %r13d,%r15d
  0x00007f1a590453fc:   or     %r12d,%ecx
  0x00007f1a590453ff:   add    %r14d,%r9d
  0x00007f1a59045402:   add    %r15d,%ebx
  0x00007f1a59045405:   add    %r15d,%r9d
  0x00007f1a59045408:   add    %ecx,%r9d
  0x00007f1a5904540b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59045410:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a59045415:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a59045419:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f1a5904541d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f1a59045422:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f1a59045427:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f1a5904542c:   mov    %r9d,%ecx
  0x00007f1a5904542f:   rorx   $0x19,%ebx,%r13d
  0x00007f1a59045435:   rorx   $0xb,%ebx,%r14d
  0x00007f1a5904543b:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007f1a59045440:   or     %r11d,%ecx
  0x00007f1a59045443:   mov    %edi,%r15d
  0x00007f1a59045446:   rorx   $0xd,%r9d,%r12d
  0x00007f1a5904544c:   xor    %r14d,%r13d
  0x00007f1a5904544f:   xor    %esi,%r15d
  0x00007f1a59045452:   rorx   $0x6,%ebx,%r14d
  0x00007f1a59045458:   and    %ebx,%r15d
  0x00007f1a5904545b:   xor    %r14d,%r13d
  0x00007f1a5904545e:   rorx   $0x16,%r9d,%r14d
  0x00007f1a59045464:   add    %r8d,%eax
  0x00007f1a59045467:   and    %r10d,%ecx
  0x00007f1a5904546a:   xor    %r12d,%r14d
  0x00007f1a5904546d:   rorx   $0x2,%r9d,%r12d
  0x00007f1a59045473:   xor    %esi,%r15d
  0x00007f1a59045476:   xor    %r12d,%r14d
  0x00007f1a59045479:   mov    %r9d,%r12d
  0x00007f1a5904547c:   and    %r11d,%r12d
  0x00007f1a5904547f:   add    %r13d,%r15d
  0x00007f1a59045482:   or     %r12d,%ecx
  0x00007f1a59045485:   add    %r14d,%r8d
  0x00007f1a59045488:   add    %r15d,%eax
  0x00007f1a5904548b:   add    %r15d,%r8d
  0x00007f1a5904548e:   add    %ecx,%r8d
  0x00007f1a59045491:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f1a59045496:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a5904549b:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a590454a0:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a590454a4:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f1a590454a8:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f1a590454ad:   vpaddd %ymm0,%ymm11,%ymm4
  0x00007f1a590454b1:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007f1a590454b7:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007f1a590454bd:   mov    %r8d,%ecx
  0x00007f1a590454c0:   rorx   $0x19,%eax,%r13d
  0x00007f1a590454c6:   rorx   $0xb,%eax,%r14d
  0x00007f1a590454cc:   add    0x20(%rsp,%rdx,1),%esi
  0x00007f1a590454d0:   or     %r10d,%ecx
  0x00007f1a590454d3:   mov    %ebx,%r15d
  0x00007f1a590454d6:   rorx   $0xd,%r8d,%r12d
  0x00007f1a590454dc:   xor    %r14d,%r13d
  0x00007f1a590454df:   xor    %edi,%r15d
  0x00007f1a590454e2:   rorx   $0x6,%eax,%r14d
  0x00007f1a590454e8:   and    %eax,%r15d
  0x00007f1a590454eb:   xor    %r14d,%r13d
  0x00007f1a590454ee:   rorx   $0x16,%r8d,%r14d
  0x00007f1a590454f4:   add    %esi,%r11d
  0x00007f1a590454f7:   and    %r9d,%ecx
  0x00007f1a590454fa:   xor    %r12d,%r14d
  0x00007f1a590454fd:   rorx   $0x2,%r8d,%r12d
  0x00007f1a59045503:   xor    %edi,%r15d
  0x00007f1a59045506:   xor    %r12d,%r14d
  0x00007f1a59045509:   mov    %r8d,%r12d
  0x00007f1a5904550c:   and    %r10d,%r12d
  0x00007f1a5904550f:   add    %r13d,%r15d
  0x00007f1a59045512:   or     %r12d,%ecx
  0x00007f1a59045515:   add    %r14d,%esi
  0x00007f1a59045518:   add    %r15d,%r11d
  0x00007f1a5904551b:   add    %r15d,%esi
  0x00007f1a5904551e:   add    %ecx,%esi
  0x00007f1a59045520:   vpalignr $0x4,%ymm7,%ymm4,%ymm0
  0x00007f1a59045526:   vpaddd %ymm5,%ymm0,%ymm0
  0x00007f1a5904552a:   vpalignr $0x4,%ymm5,%ymm6,%ymm1
  0x00007f1a59045530:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f1a59045535:   vpslld $0x19,%ymm1,%ymm3
  0x00007f1a5904553a:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a5904553e:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f1a59045543:   mov    %esi,%ecx
  0x00007f1a59045545:   rorx   $0x19,%r11d,%r13d
  0x00007f1a5904554b:   rorx   $0xb,%r11d,%r14d
  0x00007f1a59045551:   add    0x24(%rsp,%rdx,1),%edi
  0x00007f1a59045555:   or     %r9d,%ecx
  0x00007f1a59045558:   mov    %eax,%r15d
  0x00007f1a5904555b:   rorx   $0xd,%esi,%r12d
  0x00007f1a59045561:   xor    %r14d,%r13d
  0x00007f1a59045564:   xor    %ebx,%r15d
  0x00007f1a59045567:   rorx   $0x6,%r11d,%r14d
  0x00007f1a5904556d:   and    %r11d,%r15d
  0x00007f1a59045570:   xor    %r14d,%r13d
  0x00007f1a59045573:   rorx   $0x16,%esi,%r14d
  0x00007f1a59045579:   add    %edi,%r10d
  0x00007f1a5904557c:   and    %r8d,%ecx
  0x00007f1a5904557f:   xor    %r12d,%r14d
  0x00007f1a59045582:   rorx   $0x2,%esi,%r12d
  0x00007f1a59045588:   xor    %ebx,%r15d
  0x00007f1a5904558b:   xor    %r12d,%r14d
  0x00007f1a5904558e:   mov    %esi,%r12d
  0x00007f1a59045591:   and    %r9d,%r12d
  0x00007f1a59045594:   add    %r13d,%r15d
  0x00007f1a59045597:   or     %r12d,%ecx
  0x00007f1a5904559a:   add    %r14d,%edi
  0x00007f1a5904559d:   add    %r15d,%r10d
  0x00007f1a590455a0:   add    %r15d,%edi
  0x00007f1a590455a3:   add    %ecx,%edi
  0x00007f1a590455a5:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f1a590455aa:   vpslld $0xe,%ymm1,%ymm1
  0x00007f1a590455af:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f1a590455b3:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f1a590455b7:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f1a590455bc:   vpshufd $0xfa,%ymm4,%ymm2
  0x00007f1a590455c1:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f1a590455c5:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f1a590455ca:   mov    %edi,%ecx
  0x00007f1a590455cc:   rorx   $0x19,%r10d,%r13d
  0x00007f1a590455d2:   rorx   $0xb,%r10d,%r14d
  0x00007f1a590455d8:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007f1a590455dc:   or     %r8d,%ecx
  0x00007f1a590455df:   mov    %r11d,%r15d
  0x00007f1a590455e2:   rorx   $0xd,%edi,%r12d
  0x00007f1a590455e8:   xor    %r14d,%r13d
  0x00007f1a590455eb:   xor    %eax,%r15d
  0x00007f1a590455ee:   rorx   $0x6,%r10d,%r14d
  0x00007f1a590455f4:   and    %r10d,%r15d
  0x00007f1a590455f7:   xor    %r14d,%r13d
  0x00007f1a590455fa:   rorx   $0x16,%edi,%r14d
  0x00007f1a59045600:   add    %ebx,%r9d
  0x00007f1a59045603:   and    %esi,%ecx
  0x00007f1a59045605:   xor    %r12d,%r14d
  0x00007f1a59045608:   rorx   $0x2,%edi,%r12d
  0x00007f1a5904560e:   xor    %eax,%r15d
  0x00007f1a59045611:   xor    %r12d,%r14d
  0x00007f1a59045614:   mov    %edi,%r12d
  0x00007f1a59045617:   and    %r8d,%r12d
  0x00007f1a5904561a:   add    %r13d,%r15d
  0x00007f1a5904561d:   or     %r12d,%ecx
  0x00007f1a59045620:   add    %r14d,%ebx
  0x00007f1a59045623:   add    %r15d,%r9d
  0x00007f1a59045626:   add    %r15d,%ebx
  0x00007f1a59045629:   add    %ecx,%ebx
  0x00007f1a5904562b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59045630:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a59045635:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a59045639:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f1a5904563d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f1a59045642:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f1a59045647:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f1a5904564c:   mov    %ebx,%ecx
  0x00007f1a5904564e:   rorx   $0x19,%r9d,%r13d
  0x00007f1a59045654:   rorx   $0xb,%r9d,%r14d
  0x00007f1a5904565a:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007f1a5904565e:   or     %esi,%ecx
  0x00007f1a59045660:   mov    %r10d,%r15d
  0x00007f1a59045663:   rorx   $0xd,%ebx,%r12d
  0x00007f1a59045669:   xor    %r14d,%r13d
  0x00007f1a5904566c:   xor    %r11d,%r15d
  0x00007f1a5904566f:   rorx   $0x6,%r9d,%r14d
  0x00007f1a59045675:   and    %r9d,%r15d
  0x00007f1a59045678:   xor    %r14d,%r13d
  0x00007f1a5904567b:   rorx   $0x16,%ebx,%r14d
  0x00007f1a59045681:   add    %eax,%r8d
  0x00007f1a59045684:   and    %edi,%ecx
  0x00007f1a59045686:   xor    %r12d,%r14d
  0x00007f1a59045689:   rorx   $0x2,%ebx,%r12d
  0x00007f1a5904568f:   xor    %r11d,%r15d
  0x00007f1a59045692:   xor    %r12d,%r14d
  0x00007f1a59045695:   mov    %ebx,%r12d
  0x00007f1a59045698:   and    %esi,%r12d
  0x00007f1a5904569b:   add    %r13d,%r15d
  0x00007f1a5904569e:   or     %r12d,%ecx
  0x00007f1a590456a1:   add    %r14d,%eax
  0x00007f1a590456a4:   add    %r15d,%r8d
  0x00007f1a590456a7:   add    %r15d,%eax
  0x00007f1a590456aa:   add    %ecx,%eax
  0x00007f1a590456ac:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f1a590456b1:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a590456b6:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a590456bb:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a590456bf:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f1a590456c3:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f1a590456c8:   vpaddd %ymm0,%ymm11,%ymm5
  0x00007f1a590456cc:   vpaddd 0x40(%rbp,%rdx,1),%ymm6,%ymm9
  0x00007f1a590456d2:   vmovdqu %ymm9,0x40(%rsp,%rdx,1)
  0x00007f1a590456d8:   mov    %eax,%ecx
  0x00007f1a590456da:   rorx   $0x19,%r8d,%r13d
  0x00007f1a590456e0:   rorx   $0xb,%r8d,%r14d
  0x00007f1a590456e6:   add    0x40(%rsp,%rdx,1),%r11d
  0x00007f1a590456eb:   or     %edi,%ecx
  0x00007f1a590456ed:   mov    %r9d,%r15d
  0x00007f1a590456f0:   rorx   $0xd,%eax,%r12d
  0x00007f1a590456f6:   xor    %r14d,%r13d
  0x00007f1a590456f9:   xor    %r10d,%r15d
  0x00007f1a590456fc:   rorx   $0x6,%r8d,%r14d
  0x00007f1a59045702:   and    %r8d,%r15d
  0x00007f1a59045705:   xor    %r14d,%r13d
  0x00007f1a59045708:   rorx   $0x16,%eax,%r14d
  0x00007f1a5904570e:   add    %r11d,%esi
  0x00007f1a59045711:   and    %ebx,%ecx
  0x00007f1a59045713:   xor    %r12d,%r14d
  0x00007f1a59045716:   rorx   $0x2,%eax,%r12d
  0x00007f1a5904571c:   xor    %r10d,%r15d
  0x00007f1a5904571f:   xor    %r12d,%r14d
  0x00007f1a59045722:   mov    %eax,%r12d
  0x00007f1a59045725:   and    %edi,%r12d
  0x00007f1a59045728:   add    %r13d,%r15d
  0x00007f1a5904572b:   or     %r12d,%ecx
  0x00007f1a5904572e:   add    %r14d,%r11d
  0x00007f1a59045731:   add    %r15d,%esi
  0x00007f1a59045734:   add    %r15d,%r11d
  0x00007f1a59045737:   add    %ecx,%r11d
  0x00007f1a5904573a:   vpalignr $0x4,%ymm4,%ymm5,%ymm0
  0x00007f1a59045740:   vpaddd %ymm6,%ymm0,%ymm0
  0x00007f1a59045744:   vpalignr $0x4,%ymm6,%ymm7,%ymm1
  0x00007f1a5904574a:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f1a5904574f:   vpslld $0x19,%ymm1,%ymm3
  0x00007f1a59045754:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a59045758:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f1a5904575d:   mov    %r11d,%ecx
  0x00007f1a59045760:   rorx   $0x19,%esi,%r13d
  0x00007f1a59045766:   rorx   $0xb,%esi,%r14d
  0x00007f1a5904576c:   add    0x44(%rsp,%rdx,1),%r10d
  0x00007f1a59045771:   or     %ebx,%ecx
  0x00007f1a59045773:   mov    %r8d,%r15d
  0x00007f1a59045776:   rorx   $0xd,%r11d,%r12d
  0x00007f1a5904577c:   xor    %r14d,%r13d
  0x00007f1a5904577f:   xor    %r9d,%r15d
  0x00007f1a59045782:   rorx   $0x6,%esi,%r14d
  0x00007f1a59045788:   and    %esi,%r15d
  0x00007f1a5904578b:   xor    %r14d,%r13d
  0x00007f1a5904578e:   rorx   $0x16,%r11d,%r14d
  0x00007f1a59045794:   add    %r10d,%edi
  0x00007f1a59045797:   and    %eax,%ecx
  0x00007f1a59045799:   xor    %r12d,%r14d
  0x00007f1a5904579c:   rorx   $0x2,%r11d,%r12d
  0x00007f1a590457a2:   xor    %r9d,%r15d
  0x00007f1a590457a5:   xor    %r12d,%r14d
  0x00007f1a590457a8:   mov    %r11d,%r12d
  0x00007f1a590457ab:   and    %ebx,%r12d
  0x00007f1a590457ae:   add    %r13d,%r15d
  0x00007f1a590457b1:   or     %r12d,%ecx
  0x00007f1a590457b4:   add    %r14d,%r10d
  0x00007f1a590457b7:   add    %r15d,%edi
  0x00007f1a590457ba:   add    %r15d,%r10d
  0x00007f1a590457bd:   add    %ecx,%r10d
  0x00007f1a590457c0:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f1a590457c5:   vpslld $0xe,%ymm1,%ymm1
  0x00007f1a590457ca:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f1a590457ce:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f1a590457d2:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f1a590457d7:   vpshufd $0xfa,%ymm5,%ymm2
  0x00007f1a590457dc:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f1a590457e0:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f1a590457e5:   mov    %r10d,%ecx
  0x00007f1a590457e8:   rorx   $0x19,%edi,%r13d
  0x00007f1a590457ee:   rorx   $0xb,%edi,%r14d
  0x00007f1a590457f4:   add    0x48(%rsp,%rdx,1),%r9d
  0x00007f1a590457f9:   or     %eax,%ecx
  0x00007f1a590457fb:   mov    %esi,%r15d
  0x00007f1a590457fe:   rorx   $0xd,%r10d,%r12d
  0x00007f1a59045804:   xor    %r14d,%r13d
  0x00007f1a59045807:   xor    %r8d,%r15d
  0x00007f1a5904580a:   rorx   $0x6,%edi,%r14d
  0x00007f1a59045810:   and    %edi,%r15d
  0x00007f1a59045813:   xor    %r14d,%r13d
  0x00007f1a59045816:   rorx   $0x16,%r10d,%r14d
  0x00007f1a5904581c:   add    %r9d,%ebx
  0x00007f1a5904581f:   and    %r11d,%ecx
  0x00007f1a59045822:   xor    %r12d,%r14d
  0x00007f1a59045825:   rorx   $0x2,%r10d,%r12d
  0x00007f1a5904582b:   xor    %r8d,%r15d
  0x00007f1a5904582e:   xor    %r12d,%r14d
  0x00007f1a59045831:   mov    %r10d,%r12d
  0x00007f1a59045834:   and    %eax,%r12d
  0x00007f1a59045837:   add    %r13d,%r15d
  0x00007f1a5904583a:   or     %r12d,%ecx
  0x00007f1a5904583d:   add    %r14d,%r9d
  0x00007f1a59045840:   add    %r15d,%ebx
  0x00007f1a59045843:   add    %r15d,%r9d
  0x00007f1a59045846:   add    %ecx,%r9d
  0x00007f1a59045849:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a5904584e:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a59045853:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a59045857:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f1a5904585b:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f1a59045860:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f1a59045865:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f1a5904586a:   mov    %r9d,%ecx
  0x00007f1a5904586d:   rorx   $0x19,%ebx,%r13d
  0x00007f1a59045873:   rorx   $0xb,%ebx,%r14d
  0x00007f1a59045879:   add    0x4c(%rsp,%rdx,1),%r8d
  0x00007f1a5904587e:   or     %r11d,%ecx
  0x00007f1a59045881:   mov    %edi,%r15d
  0x00007f1a59045884:   rorx   $0xd,%r9d,%r12d
  0x00007f1a5904588a:   xor    %r14d,%r13d
  0x00007f1a5904588d:   xor    %esi,%r15d
  0x00007f1a59045890:   rorx   $0x6,%ebx,%r14d
  0x00007f1a59045896:   and    %ebx,%r15d
  0x00007f1a59045899:   xor    %r14d,%r13d
  0x00007f1a5904589c:   rorx   $0x16,%r9d,%r14d
  0x00007f1a590458a2:   add    %r8d,%eax
  0x00007f1a590458a5:   and    %r10d,%ecx
  0x00007f1a590458a8:   xor    %r12d,%r14d
  0x00007f1a590458ab:   rorx   $0x2,%r9d,%r12d
  0x00007f1a590458b1:   xor    %esi,%r15d
  0x00007f1a590458b4:   xor    %r12d,%r14d
  0x00007f1a590458b7:   mov    %r9d,%r12d
  0x00007f1a590458ba:   and    %r11d,%r12d
  0x00007f1a590458bd:   add    %r13d,%r15d
  0x00007f1a590458c0:   or     %r12d,%ecx
  0x00007f1a590458c3:   add    %r14d,%r8d
  0x00007f1a590458c6:   add    %r15d,%eax
  0x00007f1a590458c9:   add    %r15d,%r8d
  0x00007f1a590458cc:   add    %ecx,%r8d
  0x00007f1a590458cf:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f1a590458d4:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a590458d9:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a590458de:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a590458e2:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f1a590458e6:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f1a590458eb:   vpaddd %ymm0,%ymm11,%ymm6
  0x00007f1a590458ef:   vpaddd 0x60(%rbp,%rdx,1),%ymm7,%ymm9
  0x00007f1a590458f5:   vmovdqu %ymm9,0x60(%rsp,%rdx,1)
  0x00007f1a590458fb:   mov    %r8d,%ecx
  0x00007f1a590458fe:   rorx   $0x19,%eax,%r13d
  0x00007f1a59045904:   rorx   $0xb,%eax,%r14d
  0x00007f1a5904590a:   add    0x60(%rsp,%rdx,1),%esi
  0x00007f1a5904590e:   or     %r10d,%ecx
  0x00007f1a59045911:   mov    %ebx,%r15d
  0x00007f1a59045914:   rorx   $0xd,%r8d,%r12d
  0x00007f1a5904591a:   xor    %r14d,%r13d
  0x00007f1a5904591d:   xor    %edi,%r15d
  0x00007f1a59045920:   rorx   $0x6,%eax,%r14d
  0x00007f1a59045926:   and    %eax,%r15d
  0x00007f1a59045929:   xor    %r14d,%r13d
  0x00007f1a5904592c:   rorx   $0x16,%r8d,%r14d
  0x00007f1a59045932:   add    %esi,%r11d
  0x00007f1a59045935:   and    %r9d,%ecx
  0x00007f1a59045938:   xor    %r12d,%r14d
  0x00007f1a5904593b:   rorx   $0x2,%r8d,%r12d
  0x00007f1a59045941:   xor    %edi,%r15d
  0x00007f1a59045944:   xor    %r12d,%r14d
  0x00007f1a59045947:   mov    %r8d,%r12d
  0x00007f1a5904594a:   and    %r10d,%r12d
  0x00007f1a5904594d:   add    %r13d,%r15d
  0x00007f1a59045950:   or     %r12d,%ecx
  0x00007f1a59045953:   add    %r14d,%esi
  0x00007f1a59045956:   add    %r15d,%r11d
  0x00007f1a59045959:   add    %r15d,%esi
  0x00007f1a5904595c:   add    %ecx,%esi
  0x00007f1a5904595e:   vpalignr $0x4,%ymm5,%ymm6,%ymm0
  0x00007f1a59045964:   vpaddd %ymm7,%ymm0,%ymm0
  0x00007f1a59045968:   vpalignr $0x4,%ymm7,%ymm4,%ymm1
  0x00007f1a5904596e:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f1a59045973:   vpslld $0x19,%ymm1,%ymm3
  0x00007f1a59045978:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a5904597c:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f1a59045981:   mov    %esi,%ecx
  0x00007f1a59045983:   rorx   $0x19,%r11d,%r13d
  0x00007f1a59045989:   rorx   $0xb,%r11d,%r14d
  0x00007f1a5904598f:   add    0x64(%rsp,%rdx,1),%edi
  0x00007f1a59045993:   or     %r9d,%ecx
  0x00007f1a59045996:   mov    %eax,%r15d
  0x00007f1a59045999:   rorx   $0xd,%esi,%r12d
  0x00007f1a5904599f:   xor    %r14d,%r13d
  0x00007f1a590459a2:   xor    %ebx,%r15d
  0x00007f1a590459a5:   rorx   $0x6,%r11d,%r14d
  0x00007f1a590459ab:   and    %r11d,%r15d
  0x00007f1a590459ae:   xor    %r14d,%r13d
  0x00007f1a590459b1:   rorx   $0x16,%esi,%r14d
  0x00007f1a590459b7:   add    %edi,%r10d
  0x00007f1a590459ba:   and    %r8d,%ecx
  0x00007f1a590459bd:   xor    %r12d,%r14d
  0x00007f1a590459c0:   rorx   $0x2,%esi,%r12d
  0x00007f1a590459c6:   xor    %ebx,%r15d
  0x00007f1a590459c9:   xor    %r12d,%r14d
  0x00007f1a590459cc:   mov    %esi,%r12d
  0x00007f1a590459cf:   and    %r9d,%r12d
  0x00007f1a590459d2:   add    %r13d,%r15d
  0x00007f1a590459d5:   or     %r12d,%ecx
  0x00007f1a590459d8:   add    %r14d,%edi
  0x00007f1a590459db:   add    %r15d,%r10d
  0x00007f1a590459de:   add    %r15d,%edi
  0x00007f1a590459e1:   add    %ecx,%edi
  0x00007f1a590459e3:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f1a590459e8:   vpslld $0xe,%ymm1,%ymm1
  0x00007f1a590459ed:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f1a590459f1:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f1a590459f5:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f1a590459fa:   vpshufd $0xfa,%ymm6,%ymm2
  0x00007f1a590459ff:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f1a59045a03:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f1a59045a08:   mov    %edi,%ecx
  0x00007f1a59045a0a:   rorx   $0x19,%r10d,%r13d
  0x00007f1a59045a10:   rorx   $0xb,%r10d,%r14d
  0x00007f1a59045a16:   add    0x68(%rsp,%rdx,1),%ebx
  0x00007f1a59045a1a:   or     %r8d,%ecx
  0x00007f1a59045a1d:   mov    %r11d,%r15d
  0x00007f1a59045a20:   rorx   $0xd,%edi,%r12d
  0x00007f1a59045a26:   xor    %r14d,%r13d
  0x00007f1a59045a29:   xor    %eax,%r15d
  0x00007f1a59045a2c:   rorx   $0x6,%r10d,%r14d
  0x00007f1a59045a32:   and    %r10d,%r15d
  0x00007f1a59045a35:   xor    %r14d,%r13d
  0x00007f1a59045a38:   rorx   $0x16,%edi,%r14d
  0x00007f1a59045a3e:   add    %ebx,%r9d
  0x00007f1a59045a41:   and    %esi,%ecx
  0x00007f1a59045a43:   xor    %r12d,%r14d
  0x00007f1a59045a46:   rorx   $0x2,%edi,%r12d
  0x00007f1a59045a4c:   xor    %eax,%r15d
  0x00007f1a59045a4f:   xor    %r12d,%r14d
  0x00007f1a59045a52:   mov    %edi,%r12d
  0x00007f1a59045a55:   and    %r8d,%r12d
  0x00007f1a59045a58:   add    %r13d,%r15d
  0x00007f1a59045a5b:   or     %r12d,%ecx
  0x00007f1a59045a5e:   add    %r14d,%ebx
  0x00007f1a59045a61:   add    %r15d,%r9d
  0x00007f1a59045a64:   add    %r15d,%ebx
  0x00007f1a59045a67:   add    %ecx,%ebx
  0x00007f1a59045a69:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59045a6e:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a59045a73:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a59045a77:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f1a59045a7b:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f1a59045a80:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f1a59045a85:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f1a59045a8a:   mov    %ebx,%ecx
  0x00007f1a59045a8c:   rorx   $0x19,%r9d,%r13d
  0x00007f1a59045a92:   rorx   $0xb,%r9d,%r14d
  0x00007f1a59045a98:   add    0x6c(%rsp,%rdx,1),%eax
  0x00007f1a59045a9c:   or     %esi,%ecx
  0x00007f1a59045a9e:   mov    %r10d,%r15d
  0x00007f1a59045aa1:   rorx   $0xd,%ebx,%r12d
  0x00007f1a59045aa7:   xor    %r14d,%r13d
  0x00007f1a59045aaa:   xor    %r11d,%r15d
  0x00007f1a59045aad:   rorx   $0x6,%r9d,%r14d
  0x00007f1a59045ab3:   and    %r9d,%r15d
  0x00007f1a59045ab6:   xor    %r14d,%r13d
  0x00007f1a59045ab9:   rorx   $0x16,%ebx,%r14d
  0x00007f1a59045abf:   add    %eax,%r8d
  0x00007f1a59045ac2:   and    %edi,%ecx
  0x00007f1a59045ac4:   xor    %r12d,%r14d
  0x00007f1a59045ac7:   rorx   $0x2,%ebx,%r12d
  0x00007f1a59045acd:   xor    %r11d,%r15d
  0x00007f1a59045ad0:   xor    %r12d,%r14d
  0x00007f1a59045ad3:   mov    %ebx,%r12d
  0x00007f1a59045ad6:   and    %esi,%r12d
  0x00007f1a59045ad9:   add    %r13d,%r15d
  0x00007f1a59045adc:   or     %r12d,%ecx
  0x00007f1a59045adf:   add    %r14d,%eax
  0x00007f1a59045ae2:   add    %r15d,%r8d
  0x00007f1a59045ae5:   add    %r15d,%eax
  0x00007f1a59045ae8:   add    %ecx,%eax
  0x00007f1a59045aea:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f1a59045aef:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59045af4:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a59045af9:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a59045afd:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f1a59045b01:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f1a59045b06:   vpaddd %ymm0,%ymm11,%ymm7
  0x00007f1a59045b0a:   add    $0x80,%rdx
  0x00007f1a59045b11:   cmp    $0x180,%rdx
  0x00007f1a59045b18:   jb     Stub::sha256_implCompress+240 0x00007f1a59045290
  0x00007f1a59045b1e:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007f1a59045b24:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007f1a59045b29:   mov    %r9d,%r15d
  0x00007f1a59045b2c:   rorx   $0x19,%r8d,%r13d
  0x00007f1a59045b32:   rorx   $0xb,%r8d,%r14d
  0x00007f1a59045b38:   xor    %r10d,%r15d
  0x00007f1a59045b3b:   xor    %r14d,%r13d
  0x00007f1a59045b3e:   rorx   $0x6,%r8d,%r14d
  0x00007f1a59045b44:   and    %r8d,%r15d
  0x00007f1a59045b47:   xor    %r14d,%r13d
  0x00007f1a59045b4a:   rorx   $0xd,%eax,%r12d
  0x00007f1a59045b50:   xor    %r10d,%r15d
  0x00007f1a59045b53:   rorx   $0x16,%eax,%r14d
  0x00007f1a59045b59:   mov    %eax,%ecx
  0x00007f1a59045b5b:   xor    %r12d,%r14d
  0x00007f1a59045b5e:   rorx   $0x2,%eax,%r12d
  0x00007f1a59045b64:   add    (%rsp,%rdx,1),%r11d
  0x00007f1a59045b68:   or     %edi,%ecx
  0x00007f1a59045b6a:   xor    %r12d,%r14d
  0x00007f1a59045b6d:   mov    %eax,%r12d
  0x00007f1a59045b70:   and    %ebx,%ecx
  0x00007f1a59045b72:   and    %edi,%r12d
  0x00007f1a59045b75:   add    %r13d,%r15d
  0x00007f1a59045b78:   add    %r11d,%esi
  0x00007f1a59045b7b:   or     %r12d,%ecx
  0x00007f1a59045b7e:   add    %r14d,%r11d
  0x00007f1a59045b81:   add    %r15d,%esi
  0x00007f1a59045b84:   add    %r15d,%r11d
  0x00007f1a59045b87:   mov    %r8d,%r15d
  0x00007f1a59045b8a:   rorx   $0x19,%esi,%r13d
  0x00007f1a59045b90:   rorx   $0xb,%esi,%r14d
  0x00007f1a59045b96:   xor    %r9d,%r15d
  0x00007f1a59045b99:   xor    %r14d,%r13d
  0x00007f1a59045b9c:   rorx   $0x6,%esi,%r14d
  0x00007f1a59045ba2:   and    %esi,%r15d
  0x00007f1a59045ba5:   add    %ecx,%r11d
  0x00007f1a59045ba8:   xor    %r14d,%r13d
  0x00007f1a59045bab:   rorx   $0xd,%r11d,%r12d
  0x00007f1a59045bb1:   xor    %r9d,%r15d
  0x00007f1a59045bb4:   rorx   $0x16,%r11d,%r14d
  0x00007f1a59045bba:   mov    %r11d,%ecx
  0x00007f1a59045bbd:   xor    %r12d,%r14d
  0x00007f1a59045bc0:   rorx   $0x2,%r11d,%r12d
  0x00007f1a59045bc6:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007f1a59045bcb:   or     %ebx,%ecx
  0x00007f1a59045bcd:   xor    %r12d,%r14d
  0x00007f1a59045bd0:   mov    %r11d,%r12d
  0x00007f1a59045bd3:   and    %eax,%ecx
  0x00007f1a59045bd5:   and    %ebx,%r12d
  0x00007f1a59045bd8:   add    %r13d,%r15d
  0x00007f1a59045bdb:   add    %r10d,%edi
  0x00007f1a59045bde:   or     %r12d,%ecx
  0x00007f1a59045be1:   add    %r14d,%r10d
  0x00007f1a59045be4:   add    %r15d,%edi
  0x00007f1a59045be7:   add    %r15d,%r10d
  0x00007f1a59045bea:   mov    %esi,%r15d
  0x00007f1a59045bed:   rorx   $0x19,%edi,%r13d
  0x00007f1a59045bf3:   rorx   $0xb,%edi,%r14d
  0x00007f1a59045bf9:   xor    %r8d,%r15d
  0x00007f1a59045bfc:   xor    %r14d,%r13d
  0x00007f1a59045bff:   rorx   $0x6,%edi,%r14d
  0x00007f1a59045c05:   and    %edi,%r15d
  0x00007f1a59045c08:   add    %ecx,%r10d
  0x00007f1a59045c0b:   xor    %r14d,%r13d
  0x00007f1a59045c0e:   rorx   $0xd,%r10d,%r12d
  0x00007f1a59045c14:   xor    %r8d,%r15d
  0x00007f1a59045c17:   rorx   $0x16,%r10d,%r14d
  0x00007f1a59045c1d:   mov    %r10d,%ecx
  0x00007f1a59045c20:   xor    %r12d,%r14d
  0x00007f1a59045c23:   rorx   $0x2,%r10d,%r12d
  0x00007f1a59045c29:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007f1a59045c2e:   or     %eax,%ecx
  0x00007f1a59045c30:   xor    %r12d,%r14d
  0x00007f1a59045c33:   mov    %r10d,%r12d
  0x00007f1a59045c36:   and    %r11d,%ecx
  0x00007f1a59045c39:   and    %eax,%r12d
  0x00007f1a59045c3c:   add    %r13d,%r15d
  0x00007f1a59045c3f:   add    %r9d,%ebx
  0x00007f1a59045c42:   or     %r12d,%ecx
  0x00007f1a59045c45:   add    %r14d,%r9d
  0x00007f1a59045c48:   add    %r15d,%ebx
  0x00007f1a59045c4b:   add    %r15d,%r9d
  0x00007f1a59045c4e:   mov    %edi,%r15d
  0x00007f1a59045c51:   rorx   $0x19,%ebx,%r13d
  0x00007f1a59045c57:   rorx   $0xb,%ebx,%r14d
  0x00007f1a59045c5d:   xor    %esi,%r15d
  0x00007f1a59045c60:   xor    %r14d,%r13d
  0x00007f1a59045c63:   rorx   $0x6,%ebx,%r14d
  0x00007f1a59045c69:   and    %ebx,%r15d
  0x00007f1a59045c6c:   add    %ecx,%r9d
  0x00007f1a59045c6f:   xor    %r14d,%r13d
  0x00007f1a59045c72:   rorx   $0xd,%r9d,%r12d
  0x00007f1a59045c78:   xor    %esi,%r15d
  0x00007f1a59045c7b:   rorx   $0x16,%r9d,%r14d
  0x00007f1a59045c81:   mov    %r9d,%ecx
  0x00007f1a59045c84:   xor    %r12d,%r14d
  0x00007f1a59045c87:   rorx   $0x2,%r9d,%r12d
  0x00007f1a59045c8d:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007f1a59045c92:   or     %r11d,%ecx
  0x00007f1a59045c95:   xor    %r12d,%r14d
  0x00007f1a59045c98:   mov    %r9d,%r12d
  0x00007f1a59045c9b:   and    %r10d,%ecx
  0x00007f1a59045c9e:   and    %r11d,%r12d
  0x00007f1a59045ca1:   add    %r13d,%r15d
  0x00007f1a59045ca4:   add    %r8d,%eax
  0x00007f1a59045ca7:   or     %r12d,%ecx
  0x00007f1a59045caa:   add    %r14d,%r8d
  0x00007f1a59045cad:   add    %r15d,%eax
  0x00007f1a59045cb0:   add    %r15d,%r8d
  0x00007f1a59045cb3:   add    %ecx,%r8d
  0x00007f1a59045cb6:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007f1a59045cbc:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007f1a59045cc2:   mov    %ebx,%r15d
  0x00007f1a59045cc5:   rorx   $0x19,%eax,%r13d
  0x00007f1a59045ccb:   rorx   $0xb,%eax,%r14d
  0x00007f1a59045cd1:   xor    %edi,%r15d
  0x00007f1a59045cd4:   xor    %r14d,%r13d
  0x00007f1a59045cd7:   rorx   $0x6,%eax,%r14d
  0x00007f1a59045cdd:   and    %eax,%r15d
  0x00007f1a59045ce0:   xor    %r14d,%r13d
  0x00007f1a59045ce3:   rorx   $0xd,%r8d,%r12d
  0x00007f1a59045ce9:   xor    %edi,%r15d
  0x00007f1a59045cec:   rorx   $0x16,%r8d,%r14d
  0x00007f1a59045cf2:   mov    %r8d,%ecx
  0x00007f1a59045cf5:   xor    %r12d,%r14d
  0x00007f1a59045cf8:   rorx   $0x2,%r8d,%r12d
  0x00007f1a59045cfe:   add    0x20(%rsp,%rdx,1),%esi
  0x00007f1a59045d02:   or     %r10d,%ecx
  0x00007f1a59045d05:   xor    %r12d,%r14d
  0x00007f1a59045d08:   mov    %r8d,%r12d
  0x00007f1a59045d0b:   and    %r9d,%ecx
  0x00007f1a59045d0e:   and    %r10d,%r12d
  0x00007f1a59045d11:   add    %r13d,%r15d
  0x00007f1a59045d14:   add    %esi,%r11d
  0x00007f1a59045d17:   or     %r12d,%ecx
  0x00007f1a59045d1a:   add    %r14d,%esi
  0x00007f1a59045d1d:   add    %r15d,%r11d
  0x00007f1a59045d20:   add    %r15d,%esi
  0x00007f1a59045d23:   mov    %eax,%r15d
  0x00007f1a59045d26:   rorx   $0x19,%r11d,%r13d
  0x00007f1a59045d2c:   rorx   $0xb,%r11d,%r14d
  0x00007f1a59045d32:   xor    %ebx,%r15d
  0x00007f1a59045d35:   xor    %r14d,%r13d
  0x00007f1a59045d38:   rorx   $0x6,%r11d,%r14d
  0x00007f1a59045d3e:   and    %r11d,%r15d
  0x00007f1a59045d41:   add    %ecx,%esi
  0x00007f1a59045d43:   xor    %r14d,%r13d
  0x00007f1a59045d46:   rorx   $0xd,%esi,%r12d
  0x00007f1a59045d4c:   xor    %ebx,%r15d
  0x00007f1a59045d4f:   rorx   $0x16,%esi,%r14d
  0x00007f1a59045d55:   mov    %esi,%ecx
  0x00007f1a59045d57:   xor    %r12d,%r14d
  0x00007f1a59045d5a:   rorx   $0x2,%esi,%r12d
  0x00007f1a59045d60:   add    0x24(%rsp,%rdx,1),%edi
  0x00007f1a59045d64:   or     %r9d,%ecx
  0x00007f1a59045d67:   xor    %r12d,%r14d
  0x00007f1a59045d6a:   mov    %esi,%r12d
  0x00007f1a59045d6d:   and    %r8d,%ecx
  0x00007f1a59045d70:   and    %r9d,%r12d
  0x00007f1a59045d73:   add    %r13d,%r15d
  0x00007f1a59045d76:   add    %edi,%r10d
  0x00007f1a59045d79:   or     %r12d,%ecx
  0x00007f1a59045d7c:   add    %r14d,%edi
  0x00007f1a59045d7f:   add    %r15d,%r10d
  0x00007f1a59045d82:   add    %r15d,%edi
  0x00007f1a59045d85:   mov    %r11d,%r15d
  0x00007f1a59045d88:   rorx   $0x19,%r10d,%r13d
  0x00007f1a59045d8e:   rorx   $0xb,%r10d,%r14d
  0x00007f1a59045d94:   xor    %eax,%r15d
  0x00007f1a59045d97:   xor    %r14d,%r13d
  0x00007f1a59045d9a:   rorx   $0x6,%r10d,%r14d
  0x00007f1a59045da0:   and    %r10d,%r15d
  0x00007f1a59045da3:   add    %ecx,%edi
  0x00007f1a59045da5:   xor    %r14d,%r13d
  0x00007f1a59045da8:   rorx   $0xd,%edi,%r12d
  0x00007f1a59045dae:   xor    %eax,%r15d
  0x00007f1a59045db1:   rorx   $0x16,%edi,%r14d
  0x00007f1a59045db7:   mov    %edi,%ecx
  0x00007f1a59045db9:   xor    %r12d,%r14d
  0x00007f1a59045dbc:   rorx   $0x2,%edi,%r12d
  0x00007f1a59045dc2:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007f1a59045dc6:   or     %r8d,%ecx
  0x00007f1a59045dc9:   xor    %r12d,%r14d
  0x00007f1a59045dcc:   mov    %edi,%r12d
  0x00007f1a59045dcf:   and    %esi,%ecx
  0x00007f1a59045dd1:   and    %r8d,%r12d
  0x00007f1a59045dd4:   add    %r13d,%r15d
  0x00007f1a59045dd7:   add    %ebx,%r9d
  0x00007f1a59045dda:   or     %r12d,%ecx
  0x00007f1a59045ddd:   add    %r14d,%ebx
  0x00007f1a59045de0:   add    %r15d,%r9d
  0x00007f1a59045de3:   add    %r15d,%ebx
  0x00007f1a59045de6:   mov    %r10d,%r15d
  0x00007f1a59045de9:   rorx   $0x19,%r9d,%r13d
  0x00007f1a59045def:   rorx   $0xb,%r9d,%r14d
  0x00007f1a59045df5:   xor    %r11d,%r15d
  0x00007f1a59045df8:   xor    %r14d,%r13d
  0x00007f1a59045dfb:   rorx   $0x6,%r9d,%r14d
  0x00007f1a59045e01:   and    %r9d,%r15d
  0x00007f1a59045e04:   add    %ecx,%ebx
  0x00007f1a59045e06:   xor    %r14d,%r13d
  0x00007f1a59045e09:   rorx   $0xd,%ebx,%r12d
  0x00007f1a59045e0f:   xor    %r11d,%r15d
  0x00007f1a59045e12:   rorx   $0x16,%ebx,%r14d
  0x00007f1a59045e18:   mov    %ebx,%ecx
  0x00007f1a59045e1a:   xor    %r12d,%r14d
  0x00007f1a59045e1d:   rorx   $0x2,%ebx,%r12d
  0x00007f1a59045e23:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007f1a59045e27:   or     %esi,%ecx
  0x00007f1a59045e29:   xor    %r12d,%r14d
  0x00007f1a59045e2c:   mov    %ebx,%r12d
  0x00007f1a59045e2f:   and    %edi,%ecx
  0x00007f1a59045e31:   and    %esi,%r12d
  0x00007f1a59045e34:   add    %r13d,%r15d
  0x00007f1a59045e37:   add    %eax,%r8d
  0x00007f1a59045e3a:   or     %r12d,%ecx
  0x00007f1a59045e3d:   add    %r14d,%eax
  0x00007f1a59045e40:   add    %r15d,%r8d
  0x00007f1a59045e43:   add    %r15d,%eax
  0x00007f1a59045e46:   add    %ecx,%eax
  0x00007f1a59045e48:   add    $0x40,%rdx
  0x00007f1a59045e4c:   vmovdqu %ymm6,%ymm4
  0x00007f1a59045e50:   vmovdqu %ymm7,%ymm5
  0x00007f1a59045e54:   cmp    $0x200,%rdx
  0x00007f1a59045e5b:   jb     Stub::sha256_implCompress+2430 0x00007f1a59045b1e
  0x00007f1a59045e61:   mov    0x210(%rsp),%rdx
  0x00007f1a59045e69:   mov    0x208(%rsp),%rcx
  0x00007f1a59045e71:   add    (%rdx),%eax
  0x00007f1a59045e73:   mov    %eax,(%rdx)
  0x00007f1a59045e75:   add    0x4(%rdx),%ebx
  0x00007f1a59045e78:   mov    %ebx,0x4(%rdx)
  0x00007f1a59045e7b:   add    0x8(%rdx),%edi
  0x00007f1a59045e7e:   mov    %edi,0x8(%rdx)
  0x00007f1a59045e81:   add    0xc(%rdx),%esi
  0x00007f1a59045e84:   mov    %esi,0xc(%rdx)
  0x00007f1a59045e87:   add    0x10(%rdx),%r8d
  0x00007f1a59045e8b:   mov    %r8d,0x10(%rdx)
  0x00007f1a59045e8f:   add    0x14(%rdx),%r9d
  0x00007f1a59045e93:   mov    %r9d,0x14(%rdx)
  0x00007f1a59045e97:   add    0x18(%rdx),%r10d
  0x00007f1a59045e9b:   mov    %r10d,0x18(%rdx)
  0x00007f1a59045e9f:   add    0x1c(%rdx),%r11d
  0x00007f1a59045ea3:   mov    %r11d,0x1c(%rdx)
  0x00007f1a59045ea7:   cmp    0x200(%rsp),%rcx
  0x00007f1a59045eaf:   ja     Stub::sha256_implCompress+4370 0x00007f1a590462b2
  0x00007f1a59045eb5:   xor    %rdx,%rdx
  0x00007f1a59045eb8:   nopl   0x0(%rax,%rax,1)
  0x00007f1a59045ec0:   mov    %r9d,%r15d
  0x00007f1a59045ec3:   rorx   $0x19,%r8d,%r13d
  0x00007f1a59045ec9:   rorx   $0xb,%r8d,%r14d
  0x00007f1a59045ecf:   xor    %r10d,%r15d
  0x00007f1a59045ed2:   xor    %r14d,%r13d
  0x00007f1a59045ed5:   rorx   $0x6,%r8d,%r14d
  0x00007f1a59045edb:   and    %r8d,%r15d
  0x00007f1a59045ede:   xor    %r14d,%r13d
  0x00007f1a59045ee1:   rorx   $0xd,%eax,%r12d
  0x00007f1a59045ee7:   xor    %r10d,%r15d
  0x00007f1a59045eea:   rorx   $0x16,%eax,%r14d
  0x00007f1a59045ef0:   mov    %eax,%ecx
  0x00007f1a59045ef2:   xor    %r12d,%r14d
  0x00007f1a59045ef5:   rorx   $0x2,%eax,%r12d
  0x00007f1a59045efb:   add    0x10(%rsp,%rdx,1),%r11d
  0x00007f1a59045f00:   or     %edi,%ecx
  0x00007f1a59045f02:   xor    %r12d,%r14d
  0x00007f1a59045f05:   mov    %eax,%r12d
  0x00007f1a59045f08:   and    %ebx,%ecx
  0x00007f1a59045f0a:   and    %edi,%r12d
  0x00007f1a59045f0d:   add    %r13d,%r15d
  0x00007f1a59045f10:   add    %r11d,%esi
  0x00007f1a59045f13:   or     %r12d,%ecx
  0x00007f1a59045f16:   add    %r14d,%r11d
  0x00007f1a59045f19:   add    %r15d,%esi
  0x00007f1a59045f1c:   add    %r15d,%r11d
  0x00007f1a59045f1f:   mov    %r8d,%r15d
  0x00007f1a59045f22:   rorx   $0x19,%esi,%r13d
  0x00007f1a59045f28:   rorx   $0xb,%esi,%r14d
  0x00007f1a59045f2e:   xor    %r9d,%r15d
  0x00007f1a59045f31:   xor    %r14d,%r13d
  0x00007f1a59045f34:   rorx   $0x6,%esi,%r14d
  0x00007f1a59045f3a:   and    %esi,%r15d
  0x00007f1a59045f3d:   add    %ecx,%r11d
  0x00007f1a59045f40:   xor    %r14d,%r13d
  0x00007f1a59045f43:   rorx   $0xd,%r11d,%r12d
  0x00007f1a59045f49:   xor    %r9d,%r15d
  0x00007f1a59045f4c:   rorx   $0x16,%r11d,%r14d
  0x00007f1a59045f52:   mov    %r11d,%ecx
  0x00007f1a59045f55:   xor    %r12d,%r14d
  0x00007f1a59045f58:   rorx   $0x2,%r11d,%r12d
  0x00007f1a59045f5e:   add    0x14(%rsp,%rdx,1),%r10d
  0x00007f1a59045f63:   or     %ebx,%ecx
  0x00007f1a59045f65:   xor    %r12d,%r14d
  0x00007f1a59045f68:   mov    %r11d,%r12d
  0x00007f1a59045f6b:   and    %eax,%ecx
  0x00007f1a59045f6d:   and    %ebx,%r12d
  0x00007f1a59045f70:   add    %r13d,%r15d
  0x00007f1a59045f73:   add    %r10d,%edi
  0x00007f1a59045f76:   or     %r12d,%ecx
  0x00007f1a59045f79:   add    %r14d,%r10d
  0x00007f1a59045f7c:   add    %r15d,%edi
  0x00007f1a59045f7f:   add    %r15d,%r10d
  0x00007f1a59045f82:   mov    %esi,%r15d
  0x00007f1a59045f85:   rorx   $0x19,%edi,%r13d
  0x00007f1a59045f8b:   rorx   $0xb,%edi,%r14d
  0x00007f1a59045f91:   xor    %r8d,%r15d
  0x00007f1a59045f94:   xor    %r14d,%r13d
  0x00007f1a59045f97:   rorx   $0x6,%edi,%r14d
  0x00007f1a59045f9d:   and    %edi,%r15d
  0x00007f1a59045fa0:   add    %ecx,%r10d
  0x00007f1a59045fa3:   xor    %r14d,%r13d
  0x00007f1a59045fa6:   rorx   $0xd,%r10d,%r12d
  0x00007f1a59045fac:   xor    %r8d,%r15d
  0x00007f1a59045faf:   rorx   $0x16,%r10d,%r14d
  0x00007f1a59045fb5:   mov    %r10d,%ecx
  0x00007f1a59045fb8:   xor    %r12d,%r14d
  0x00007f1a59045fbb:   rorx   $0x2,%r10d,%r12d
  0x00007f1a59045fc1:   add    0x18(%rsp,%rdx,1),%r9d
  0x00007f1a59045fc6:   or     %eax,%ecx
  0x00007f1a59045fc8:   xor    %r12d,%r14d
  0x00007f1a59045fcb:   mov    %r10d,%r12d
  0x00007f1a59045fce:   and    %r11d,%ecx
  0x00007f1a59045fd1:   and    %eax,%r12d
  0x00007f1a59045fd4:   add    %r13d,%r15d
  0x00007f1a59045fd7:   add    %r9d,%ebx
  0x00007f1a59045fda:   or     %r12d,%ecx
  0x00007f1a59045fdd:   add    %r14d,%r9d
  0x00007f1a59045fe0:   add    %r15d,%ebx
  0x00007f1a59045fe3:   add    %r15d,%r9d
  0x00007f1a59045fe6:   mov    %edi,%r15d
  0x00007f1a59045fe9:   rorx   $0x19,%ebx,%r13d
  0x00007f1a59045fef:   rorx   $0xb,%ebx,%r14d
  0x00007f1a59045ff5:   xor    %esi,%r15d
  0x00007f1a59045ff8:   xor    %r14d,%r13d
  0x00007f1a59045ffb:   rorx   $0x6,%ebx,%r14d
  0x00007f1a59046001:   and    %ebx,%r15d
  0x00007f1a59046004:   add    %ecx,%r9d
  0x00007f1a59046007:   xor    %r14d,%r13d
  0x00007f1a5904600a:   rorx   $0xd,%r9d,%r12d
  0x00007f1a59046010:   xor    %esi,%r15d
  0x00007f1a59046013:   rorx   $0x16,%r9d,%r14d
  0x00007f1a59046019:   mov    %r9d,%ecx
  0x00007f1a5904601c:   xor    %r12d,%r14d
  0x00007f1a5904601f:   rorx   $0x2,%r9d,%r12d
  0x00007f1a59046025:   add    0x1c(%rsp,%rdx,1),%r8d
  0x00007f1a5904602a:   or     %r11d,%ecx
  0x00007f1a5904602d:   xor    %r12d,%r14d
  0x00007f1a59046030:   mov    %r9d,%r12d
  0x00007f1a59046033:   and    %r10d,%ecx
  0x00007f1a59046036:   and    %r11d,%r12d
  0x00007f1a59046039:   add    %r13d,%r15d
  0x00007f1a5904603c:   add    %r8d,%eax
  0x00007f1a5904603f:   or     %r12d,%ecx
  0x00007f1a59046042:   add    %r14d,%r8d
  0x00007f1a59046045:   add    %r15d,%eax
  0x00007f1a59046048:   add    %r15d,%r8d
  0x00007f1a5904604b:   add    %ecx,%r8d
  0x00007f1a5904604e:   mov    %ebx,%r15d
  0x00007f1a59046051:   rorx   $0x19,%eax,%r13d
  0x00007f1a59046057:   rorx   $0xb,%eax,%r14d
  0x00007f1a5904605d:   xor    %edi,%r15d
  0x00007f1a59046060:   xor    %r14d,%r13d
  0x00007f1a59046063:   rorx   $0x6,%eax,%r14d
  0x00007f1a59046069:   and    %eax,%r15d
  0x00007f1a5904606c:   xor    %r14d,%r13d
  0x00007f1a5904606f:   rorx   $0xd,%r8d,%r12d
  0x00007f1a59046075:   xor    %edi,%r15d
  0x00007f1a59046078:   rorx   $0x16,%r8d,%r14d
  0x00007f1a5904607e:   mov    %r8d,%ecx
  0x00007f1a59046081:   xor    %r12d,%r14d
  0x00007f1a59046084:   rorx   $0x2,%r8d,%r12d
  0x00007f1a5904608a:   add    0x30(%rsp,%rdx,1),%esi
  0x00007f1a5904608e:   or     %r10d,%ecx
  0x00007f1a59046091:   xor    %r12d,%r14d
  0x00007f1a59046094:   mov    %r8d,%r12d
  0x00007f1a59046097:   and    %r9d,%ecx
  0x00007f1a5904609a:   and    %r10d,%r12d
  0x00007f1a5904609d:   add    %r13d,%r15d
  0x00007f1a590460a0:   add    %esi,%r11d
  0x00007f1a590460a3:   or     %r12d,%ecx
  0x00007f1a590460a6:   add    %r14d,%esi
  0x00007f1a590460a9:   add    %r15d,%r11d
  0x00007f1a590460ac:   add    %r15d,%esi
  0x00007f1a590460af:   mov    %eax,%r15d
  0x00007f1a590460b2:   rorx   $0x19,%r11d,%r13d
  0x00007f1a590460b8:   rorx   $0xb,%r11d,%r14d
  0x00007f1a590460be:   xor    %ebx,%r15d
  0x00007f1a590460c1:   xor    %r14d,%r13d
  0x00007f1a590460c4:   rorx   $0x6,%r11d,%r14d
  0x00007f1a590460ca:   and    %r11d,%r15d
  0x00007f1a590460cd:   add    %ecx,%esi
  0x00007f1a590460cf:   xor    %r14d,%r13d
  0x00007f1a590460d2:   rorx   $0xd,%esi,%r12d
  0x00007f1a590460d8:   xor    %ebx,%r15d
  0x00007f1a590460db:   rorx   $0x16,%esi,%r14d
  0x00007f1a590460e1:   mov    %esi,%ecx
  0x00007f1a590460e3:   xor    %r12d,%r14d
  0x00007f1a590460e6:   rorx   $0x2,%esi,%r12d
  0x00007f1a590460ec:   add    0x34(%rsp,%rdx,1),%edi
  0x00007f1a590460f0:   or     %r9d,%ecx
  0x00007f1a590460f3:   xor    %r12d,%r14d
  0x00007f1a590460f6:   mov    %esi,%r12d
  0x00007f1a590460f9:   and    %r8d,%ecx
  0x00007f1a590460fc:   and    %r9d,%r12d
  0x00007f1a590460ff:   add    %r13d,%r15d
  0x00007f1a59046102:   add    %edi,%r10d
  0x00007f1a59046105:   or     %r12d,%ecx
  0x00007f1a59046108:   add    %r14d,%edi
  0x00007f1a5904610b:   add    %r15d,%r10d
  0x00007f1a5904610e:   add    %r15d,%edi
  0x00007f1a59046111:   mov    %r11d,%r15d
  0x00007f1a59046114:   rorx   $0x19,%r10d,%r13d
  0x00007f1a5904611a:   rorx   $0xb,%r10d,%r14d
  0x00007f1a59046120:   xor    %eax,%r15d
  0x00007f1a59046123:   xor    %r14d,%r13d
  0x00007f1a59046126:   rorx   $0x6,%r10d,%r14d
  0x00007f1a5904612c:   and    %r10d,%r15d
  0x00007f1a5904612f:   add    %ecx,%edi
  0x00007f1a59046131:   xor    %r14d,%r13d
  0x00007f1a59046134:   rorx   $0xd,%edi,%r12d
  0x00007f1a5904613a:   xor    %eax,%r15d
  0x00007f1a5904613d:   rorx   $0x16,%edi,%r14d
  0x00007f1a59046143:   mov    %edi,%ecx
  0x00007f1a59046145:   xor    %r12d,%r14d
  0x00007f1a59046148:   rorx   $0x2,%edi,%r12d
  0x00007f1a5904614e:   add    0x38(%rsp,%rdx,1),%ebx
  0x00007f1a59046152:   or     %r8d,%ecx
  0x00007f1a59046155:   xor    %r12d,%r14d
  0x00007f1a59046158:   mov    %edi,%r12d
  0x00007f1a5904615b:   and    %esi,%ecx
  0x00007f1a5904615d:   and    %r8d,%r12d
  0x00007f1a59046160:   add    %r13d,%r15d
  0x00007f1a59046163:   add    %ebx,%r9d
  0x00007f1a59046166:   or     %r12d,%ecx
  0x00007f1a59046169:   add    %r14d,%ebx
  0x00007f1a5904616c:   add    %r15d,%r9d
  0x00007f1a5904616f:   add    %r15d,%ebx
  0x00007f1a59046172:   mov    %r10d,%r15d
  0x00007f1a59046175:   rorx   $0x19,%r9d,%r13d
  0x00007f1a5904617b:   rorx   $0xb,%r9d,%r14d
  0x00007f1a59046181:   xor    %r11d,%r15d
  0x00007f1a59046184:   xor    %r14d,%r13d
  0x00007f1a59046187:   rorx   $0x6,%r9d,%r14d
  0x00007f1a5904618d:   and    %r9d,%r15d
  0x00007f1a59046190:   add    %ecx,%ebx
  0x00007f1a59046192:   xor    %r14d,%r13d
  0x00007f1a59046195:   rorx   $0xd,%ebx,%r12d
  0x00007f1a5904619b:   xor    %r11d,%r15d
  0x00007f1a5904619e:   rorx   $0x16,%ebx,%r14d
  0x00007f1a590461a4:   mov    %ebx,%ecx
  0x00007f1a590461a6:   xor    %r12d,%r14d
  0x00007f1a590461a9:   rorx   $0x2,%ebx,%r12d
  0x00007f1a590461af:   add    0x3c(%rsp,%rdx,1),%eax
  0x00007f1a590461b3:   or     %esi,%ecx
  0x00007f1a590461b5:   xor    %r12d,%r14d
  0x00007f1a590461b8:   mov    %ebx,%r12d
  0x00007f1a590461bb:   and    %edi,%ecx
  0x00007f1a590461bd:   and    %esi,%r12d
  0x00007f1a590461c0:   add    %r13d,%r15d
  0x00007f1a590461c3:   add    %eax,%r8d
  0x00007f1a590461c6:   or     %r12d,%ecx
  0x00007f1a590461c9:   add    %r14d,%eax
  0x00007f1a590461cc:   add    %r15d,%r8d
  0x00007f1a590461cf:   add    %r15d,%eax
  0x00007f1a590461d2:   add    %ecx,%eax
  0x00007f1a590461d4:   add    $0x40,%rdx
  0x00007f1a590461d8:   cmp    $0x200,%rdx
  0x00007f1a590461df:   jb     Stub::sha256_implCompress+3360 0x00007f1a59045ec0
  0x00007f1a590461e5:   mov    0x210(%rsp),%rdx
  0x00007f1a590461ed:   mov    0x208(%rsp),%rcx
  0x00007f1a590461f5:   add    $0x40,%rcx
  0x00007f1a590461f9:   add    (%rdx),%eax
  0x00007f1a590461fb:   mov    %eax,(%rdx)
  0x00007f1a590461fd:   add    0x4(%rdx),%ebx
  0x00007f1a59046200:   mov    %ebx,0x4(%rdx)
  0x00007f1a59046203:   add    0x8(%rdx),%edi
  0x00007f1a59046206:   mov    %edi,0x8(%rdx)
  0x00007f1a59046209:   add    0xc(%rdx),%esi
  0x00007f1a5904620c:   mov    %esi,0xc(%rdx)
  0x00007f1a5904620f:   add    0x10(%rdx),%r8d
  0x00007f1a59046213:   mov    %r8d,0x10(%rdx)
  0x00007f1a59046217:   add    0x14(%rdx),%r9d
  0x00007f1a5904621b:   mov    %r9d,0x14(%rdx)
  0x00007f1a5904621f:   add    0x18(%rdx),%r10d
  0x00007f1a59046223:   mov    %r10d,0x18(%rdx)
  0x00007f1a59046227:   add    0x1c(%rdx),%r11d
  0x00007f1a5904622b:   mov    %r11d,0x1c(%rdx)
  0x00007f1a5904622f:   cmp    0x200(%rsp),%rcx
  0x00007f1a59046237:   jb     Stub::sha256_implCompress+148 0x00007f1a59045234
  0x00007f1a5904623d:   ja     Stub::sha256_implCompress+4370 0x00007f1a590462b2
  0x00007f1a5904623f:   movabs $0x7f1a645df4c0,%rbp
  0x00007f1a59046249:   vmovdqu (%rcx),%xmm4
  0x00007f1a5904624d:   vmovdqu 0x10(%rcx),%xmm5
  0x00007f1a59046252:   vmovdqu 0x20(%rcx),%xmm6
  0x00007f1a59046257:   vmovdqu 0x30(%rcx),%xmm7
  0x00007f1a5904625c:   vpshufb %xmm13,%xmm4,%xmm4
  0x00007f1a59046261:   vpshufb %xmm13,%xmm5,%xmm5
  0x00007f1a59046266:   vpshufb %xmm13,%xmm6,%xmm6
  0x00007f1a5904626b:   vpshufb %xmm13,%xmm7,%xmm7
  0x00007f1a59046270:   jmpq   Stub::sha256_implCompress+221 0x00007f1a5904527d
  0x00007f1a59046275:   mov    (%rdx),%eax
  0x00007f1a59046277:   mov    0x4(%rdx),%ebx
  0x00007f1a5904627a:   mov    0x8(%rdx),%edi
  0x00007f1a5904627d:   mov    0xc(%rdx),%esi
  0x00007f1a59046280:   mov    0x10(%rdx),%r8d
  0x00007f1a59046284:   mov    0x14(%rdx),%r9d
  0x00007f1a59046288:   mov    0x1c(%rdx),%r11d
  0x00007f1a5904628c:   vmovdqu -0x1154(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007f1a59046294:   vmovdqu -0x113c(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007f1a59045160
  0x00007f1a5904629c:   vmovdqu -0x1124(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007f1a59045180
  0x00007f1a590462a4:   mov    0x18(%rdx),%r10d
  0x00007f1a590462a8:   mov    %rdx,0x210(%rsp)
  0x00007f1a590462b0:   jmp    Stub::sha256_implCompress+4255 0x00007f1a5904623f
  0x00007f1a590462b2:   mov    0x218(%rsp),%rsp
  0x00007f1a590462ba:   pop    %r15
  0x00007f1a590462bc:   pop    %r14
  0x00007f1a590462be:   pop    %r13
  0x00007f1a590462c0:   pop    %r12
  0x00007f1a590462c2:   pop    %rbp
  0x00007f1a590462c3:   pop    %rbx
  0x00007f1a590462c4:   pop    %rdx
  0x00007f1a590462c5:   pop    %rcx
  0x00007f1a590462c6:   add    $0x20,%rsp
  0x00007f1a590462ca:   vzeroupper 
  0x00007f1a590462cd:   leaveq 
  0x00007f1a590462ce:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha256_implCompressMB [0x00007f1a590462e0, 0x00007f1a5904743d] (4445 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590462e0:   push   %rbp
  0x00007f1a590462e1:   mov    %rsp,%rbp
  0x00007f1a590462e4:   sub    $0x20,%rsp
  0x00007f1a590462e8:   push   %rcx
  0x00007f1a590462e9:   push   %rdx
  0x00007f1a590462ea:   push   %rbx
  0x00007f1a590462eb:   push   %rbp
  0x00007f1a590462ec:   push   %r12
  0x00007f1a590462ee:   push   %r13
  0x00007f1a590462f0:   push   %r14
  0x00007f1a590462f2:   push   %r15
  0x00007f1a590462f4:   mov    %rsp,%rax
  0x00007f1a590462f7:   sub    $0x220,%rsp
  0x00007f1a590462fe:   and    $0xffffffffffffffe0,%rsp
  0x00007f1a59046302:   mov    %rax,0x218(%rsp)
  0x00007f1a5904630a:   mov    %rcx,%r9
  0x00007f1a5904630d:   mov    %rdx,%r8
  0x00007f1a59046310:   mov    %rsi,%rdx
  0x00007f1a59046313:   mov    %rdi,%rcx
  0x00007f1a59046316:   lea    (%rcx),%rcx
  0x00007f1a59046319:   mov    %rdx,%rdx
  0x00007f1a5904631c:   xor    %rax,%rax
  0x00007f1a5904631f:   cmp    %r9,%r8
  0x00007f1a59046322:   jae    Stub::sha256_implCompressMB+78 0x00007f1a5904632e
  0x00007f1a59046324:   add    $0x40,%r8
  0x00007f1a59046328:   add    $0x40,%rax
  0x00007f1a5904632c:   jmp    Stub::sha256_implCompressMB+63 0x00007f1a5904631f
  0x00007f1a5904632e:   mov    %rax,%r8
  0x00007f1a59046331:   cmp    $0x0,%r8
  0x00007f1a59046335:   je     Stub::sha256_implCompressMB+4402 0x00007f1a59047412
  0x00007f1a5904633b:   lea    -0x40(%rcx,%r8,1),%r8
  0x00007f1a59046340:   mov    %r8,0x200(%rsp)
  0x00007f1a59046348:   cmp    %r8,%rcx
  0x00007f1a5904634b:   je     Stub::sha256_implCompressMB+4341 0x00007f1a590473d5
  0x00007f1a59046351:   mov    (%rdx),%eax
  0x00007f1a59046353:   mov    0x4(%rdx),%ebx
  0x00007f1a59046356:   mov    0x8(%rdx),%edi
  0x00007f1a59046359:   mov    0xc(%rdx),%esi
  0x00007f1a5904635c:   mov    0x10(%rdx),%r8d
  0x00007f1a59046360:   mov    0x14(%rdx),%r9d
  0x00007f1a59046364:   mov    0x1c(%rdx),%r11d
  0x00007f1a59046368:   vmovdqu -0x1230(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007f1a59046370:   vmovdqu -0x1218(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007f1a59045160
  0x00007f1a59046378:   vmovdqu -0x1200(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007f1a59045180
  0x00007f1a59046380:   mov    0x18(%rdx),%r10d
  0x00007f1a59046384:   mov    %rdx,0x210(%rsp)
  0x00007f1a5904638c:   movabs $0x7f1a645df4c0,%rbp
  0x00007f1a59046396:   vmovdqu (%rcx),%ymm0
  0x00007f1a5904639a:   vmovdqu 0x20(%rcx),%ymm1
  0x00007f1a5904639f:   vmovdqu 0x40(%rcx),%ymm2
  0x00007f1a590463a4:   vmovdqu 0x60(%rcx),%ymm3
  0x00007f1a590463a9:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007f1a590463ae:   vpshufb %ymm13,%ymm1,%ymm1
  0x00007f1a590463b3:   vpshufb %ymm13,%ymm2,%ymm2
  0x00007f1a590463b8:   vpshufb %ymm13,%ymm3,%ymm3
  0x00007f1a590463bd:   vperm2i128 $0x20,%ymm2,%ymm0,%ymm4
  0x00007f1a590463c3:   vperm2i128 $0x31,%ymm2,%ymm0,%ymm5
  0x00007f1a590463c9:   vperm2i128 $0x20,%ymm3,%ymm1,%ymm6
  0x00007f1a590463cf:   vperm2i128 $0x31,%ymm3,%ymm1,%ymm7
  0x00007f1a590463d5:   add    $0x40,%rcx
  0x00007f1a590463d9:   mov    %rcx,0x208(%rsp)
  0x00007f1a590463e1:   xor    %rdx,%rdx
  0x00007f1a590463e4:   nopl   0x0(%rax,%rax,1)
  0x00007f1a590463ec:   data16 data16 xchg %ax,%ax
  0x00007f1a590463f0:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007f1a590463f6:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007f1a590463fb:   mov    %eax,%ecx
  0x00007f1a590463fd:   rorx   $0x19,%r8d,%r13d
  0x00007f1a59046403:   rorx   $0xb,%r8d,%r14d
  0x00007f1a59046409:   add    (%rsp,%rdx,1),%r11d
  0x00007f1a5904640d:   or     %edi,%ecx
  0x00007f1a5904640f:   mov    %r9d,%r15d
  0x00007f1a59046412:   rorx   $0xd,%eax,%r12d
  0x00007f1a59046418:   xor    %r14d,%r13d
  0x00007f1a5904641b:   xor    %r10d,%r15d
  0x00007f1a5904641e:   rorx   $0x6,%r8d,%r14d
  0x00007f1a59046424:   and    %r8d,%r15d
  0x00007f1a59046427:   xor    %r14d,%r13d
  0x00007f1a5904642a:   rorx   $0x16,%eax,%r14d
  0x00007f1a59046430:   add    %r11d,%esi
  0x00007f1a59046433:   and    %ebx,%ecx
  0x00007f1a59046435:   xor    %r12d,%r14d
  0x00007f1a59046438:   rorx   $0x2,%eax,%r12d
  0x00007f1a5904643e:   xor    %r10d,%r15d
  0x00007f1a59046441:   xor    %r12d,%r14d
  0x00007f1a59046444:   mov    %eax,%r12d
  0x00007f1a59046447:   and    %edi,%r12d
  0x00007f1a5904644a:   add    %r13d,%r15d
  0x00007f1a5904644d:   or     %r12d,%ecx
  0x00007f1a59046450:   add    %r14d,%r11d
  0x00007f1a59046453:   add    %r15d,%esi
  0x00007f1a59046456:   add    %r15d,%r11d
  0x00007f1a59046459:   add    %ecx,%r11d
  0x00007f1a5904645c:   vpalignr $0x4,%ymm6,%ymm7,%ymm0
  0x00007f1a59046462:   vpaddd %ymm4,%ymm0,%ymm0
  0x00007f1a59046466:   vpalignr $0x4,%ymm4,%ymm5,%ymm1
  0x00007f1a5904646c:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f1a59046471:   vpslld $0x19,%ymm1,%ymm3
  0x00007f1a59046476:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a5904647a:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f1a5904647f:   mov    %r11d,%ecx
  0x00007f1a59046482:   rorx   $0x19,%esi,%r13d
  0x00007f1a59046488:   rorx   $0xb,%esi,%r14d
  0x00007f1a5904648e:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007f1a59046493:   or     %ebx,%ecx
  0x00007f1a59046495:   mov    %r8d,%r15d
  0x00007f1a59046498:   rorx   $0xd,%r11d,%r12d
  0x00007f1a5904649e:   xor    %r14d,%r13d
  0x00007f1a590464a1:   xor    %r9d,%r15d
  0x00007f1a590464a4:   rorx   $0x6,%esi,%r14d
  0x00007f1a590464aa:   and    %esi,%r15d
  0x00007f1a590464ad:   xor    %r14d,%r13d
  0x00007f1a590464b0:   rorx   $0x16,%r11d,%r14d
  0x00007f1a590464b6:   add    %r10d,%edi
  0x00007f1a590464b9:   and    %eax,%ecx
  0x00007f1a590464bb:   xor    %r12d,%r14d
  0x00007f1a590464be:   rorx   $0x2,%r11d,%r12d
  0x00007f1a590464c4:   xor    %r9d,%r15d
  0x00007f1a590464c7:   xor    %r12d,%r14d
  0x00007f1a590464ca:   mov    %r11d,%r12d
  0x00007f1a590464cd:   and    %ebx,%r12d
  0x00007f1a590464d0:   add    %r13d,%r15d
  0x00007f1a590464d3:   or     %r12d,%ecx
  0x00007f1a590464d6:   add    %r14d,%r10d
  0x00007f1a590464d9:   add    %r15d,%edi
  0x00007f1a590464dc:   add    %r15d,%r10d
  0x00007f1a590464df:   add    %ecx,%r10d
  0x00007f1a590464e2:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f1a590464e7:   vpslld $0xe,%ymm1,%ymm1
  0x00007f1a590464ec:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f1a590464f0:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f1a590464f4:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f1a590464f9:   vpshufd $0xfa,%ymm7,%ymm2
  0x00007f1a590464fe:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f1a59046502:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f1a59046507:   mov    %r10d,%ecx
  0x00007f1a5904650a:   rorx   $0x19,%edi,%r13d
  0x00007f1a59046510:   rorx   $0xb,%edi,%r14d
  0x00007f1a59046516:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007f1a5904651b:   or     %eax,%ecx
  0x00007f1a5904651d:   mov    %esi,%r15d
  0x00007f1a59046520:   rorx   $0xd,%r10d,%r12d
  0x00007f1a59046526:   xor    %r14d,%r13d
  0x00007f1a59046529:   xor    %r8d,%r15d
  0x00007f1a5904652c:   rorx   $0x6,%edi,%r14d
  0x00007f1a59046532:   and    %edi,%r15d
  0x00007f1a59046535:   xor    %r14d,%r13d
  0x00007f1a59046538:   rorx   $0x16,%r10d,%r14d
  0x00007f1a5904653e:   add    %r9d,%ebx
  0x00007f1a59046541:   and    %r11d,%ecx
  0x00007f1a59046544:   xor    %r12d,%r14d
  0x00007f1a59046547:   rorx   $0x2,%r10d,%r12d
  0x00007f1a5904654d:   xor    %r8d,%r15d
  0x00007f1a59046550:   xor    %r12d,%r14d
  0x00007f1a59046553:   mov    %r10d,%r12d
  0x00007f1a59046556:   and    %eax,%r12d
  0x00007f1a59046559:   add    %r13d,%r15d
  0x00007f1a5904655c:   or     %r12d,%ecx
  0x00007f1a5904655f:   add    %r14d,%r9d
  0x00007f1a59046562:   add    %r15d,%ebx
  0x00007f1a59046565:   add    %r15d,%r9d
  0x00007f1a59046568:   add    %ecx,%r9d
  0x00007f1a5904656b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59046570:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a59046575:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a59046579:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f1a5904657d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f1a59046582:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f1a59046587:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f1a5904658c:   mov    %r9d,%ecx
  0x00007f1a5904658f:   rorx   $0x19,%ebx,%r13d
  0x00007f1a59046595:   rorx   $0xb,%ebx,%r14d
  0x00007f1a5904659b:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007f1a590465a0:   or     %r11d,%ecx
  0x00007f1a590465a3:   mov    %edi,%r15d
  0x00007f1a590465a6:   rorx   $0xd,%r9d,%r12d
  0x00007f1a590465ac:   xor    %r14d,%r13d
  0x00007f1a590465af:   xor    %esi,%r15d
  0x00007f1a590465b2:   rorx   $0x6,%ebx,%r14d
  0x00007f1a590465b8:   and    %ebx,%r15d
  0x00007f1a590465bb:   xor    %r14d,%r13d
  0x00007f1a590465be:   rorx   $0x16,%r9d,%r14d
  0x00007f1a590465c4:   add    %r8d,%eax
  0x00007f1a590465c7:   and    %r10d,%ecx
  0x00007f1a590465ca:   xor    %r12d,%r14d
  0x00007f1a590465cd:   rorx   $0x2,%r9d,%r12d
  0x00007f1a590465d3:   xor    %esi,%r15d
  0x00007f1a590465d6:   xor    %r12d,%r14d
  0x00007f1a590465d9:   mov    %r9d,%r12d
  0x00007f1a590465dc:   and    %r11d,%r12d
  0x00007f1a590465df:   add    %r13d,%r15d
  0x00007f1a590465e2:   or     %r12d,%ecx
  0x00007f1a590465e5:   add    %r14d,%r8d
  0x00007f1a590465e8:   add    %r15d,%eax
  0x00007f1a590465eb:   add    %r15d,%r8d
  0x00007f1a590465ee:   add    %ecx,%r8d
  0x00007f1a590465f1:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f1a590465f6:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a590465fb:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a59046600:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a59046604:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f1a59046608:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f1a5904660d:   vpaddd %ymm0,%ymm11,%ymm4
  0x00007f1a59046611:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007f1a59046617:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007f1a5904661d:   mov    %r8d,%ecx
  0x00007f1a59046620:   rorx   $0x19,%eax,%r13d
  0x00007f1a59046626:   rorx   $0xb,%eax,%r14d
  0x00007f1a5904662c:   add    0x20(%rsp,%rdx,1),%esi
  0x00007f1a59046630:   or     %r10d,%ecx
  0x00007f1a59046633:   mov    %ebx,%r15d
  0x00007f1a59046636:   rorx   $0xd,%r8d,%r12d
  0x00007f1a5904663c:   xor    %r14d,%r13d
  0x00007f1a5904663f:   xor    %edi,%r15d
  0x00007f1a59046642:   rorx   $0x6,%eax,%r14d
  0x00007f1a59046648:   and    %eax,%r15d
  0x00007f1a5904664b:   xor    %r14d,%r13d
  0x00007f1a5904664e:   rorx   $0x16,%r8d,%r14d
  0x00007f1a59046654:   add    %esi,%r11d
  0x00007f1a59046657:   and    %r9d,%ecx
  0x00007f1a5904665a:   xor    %r12d,%r14d
  0x00007f1a5904665d:   rorx   $0x2,%r8d,%r12d
  0x00007f1a59046663:   xor    %edi,%r15d
  0x00007f1a59046666:   xor    %r12d,%r14d
  0x00007f1a59046669:   mov    %r8d,%r12d
  0x00007f1a5904666c:   and    %r10d,%r12d
  0x00007f1a5904666f:   add    %r13d,%r15d
  0x00007f1a59046672:   or     %r12d,%ecx
  0x00007f1a59046675:   add    %r14d,%esi
  0x00007f1a59046678:   add    %r15d,%r11d
  0x00007f1a5904667b:   add    %r15d,%esi
  0x00007f1a5904667e:   add    %ecx,%esi
  0x00007f1a59046680:   vpalignr $0x4,%ymm7,%ymm4,%ymm0
  0x00007f1a59046686:   vpaddd %ymm5,%ymm0,%ymm0
  0x00007f1a5904668a:   vpalignr $0x4,%ymm5,%ymm6,%ymm1
  0x00007f1a59046690:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f1a59046695:   vpslld $0x19,%ymm1,%ymm3
  0x00007f1a5904669a:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a5904669e:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f1a590466a3:   mov    %esi,%ecx
  0x00007f1a590466a5:   rorx   $0x19,%r11d,%r13d
  0x00007f1a590466ab:   rorx   $0xb,%r11d,%r14d
  0x00007f1a590466b1:   add    0x24(%rsp,%rdx,1),%edi
  0x00007f1a590466b5:   or     %r9d,%ecx
  0x00007f1a590466b8:   mov    %eax,%r15d
  0x00007f1a590466bb:   rorx   $0xd,%esi,%r12d
  0x00007f1a590466c1:   xor    %r14d,%r13d
  0x00007f1a590466c4:   xor    %ebx,%r15d
  0x00007f1a590466c7:   rorx   $0x6,%r11d,%r14d
  0x00007f1a590466cd:   and    %r11d,%r15d
  0x00007f1a590466d0:   xor    %r14d,%r13d
  0x00007f1a590466d3:   rorx   $0x16,%esi,%r14d
  0x00007f1a590466d9:   add    %edi,%r10d
  0x00007f1a590466dc:   and    %r8d,%ecx
  0x00007f1a590466df:   xor    %r12d,%r14d
  0x00007f1a590466e2:   rorx   $0x2,%esi,%r12d
  0x00007f1a590466e8:   xor    %ebx,%r15d
  0x00007f1a590466eb:   xor    %r12d,%r14d
  0x00007f1a590466ee:   mov    %esi,%r12d
  0x00007f1a590466f1:   and    %r9d,%r12d
  0x00007f1a590466f4:   add    %r13d,%r15d
  0x00007f1a590466f7:   or     %r12d,%ecx
  0x00007f1a590466fa:   add    %r14d,%edi
  0x00007f1a590466fd:   add    %r15d,%r10d
  0x00007f1a59046700:   add    %r15d,%edi
  0x00007f1a59046703:   add    %ecx,%edi
  0x00007f1a59046705:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f1a5904670a:   vpslld $0xe,%ymm1,%ymm1
  0x00007f1a5904670f:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f1a59046713:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f1a59046717:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f1a5904671c:   vpshufd $0xfa,%ymm4,%ymm2
  0x00007f1a59046721:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f1a59046725:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f1a5904672a:   mov    %edi,%ecx
  0x00007f1a5904672c:   rorx   $0x19,%r10d,%r13d
  0x00007f1a59046732:   rorx   $0xb,%r10d,%r14d
  0x00007f1a59046738:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007f1a5904673c:   or     %r8d,%ecx
  0x00007f1a5904673f:   mov    %r11d,%r15d
  0x00007f1a59046742:   rorx   $0xd,%edi,%r12d
  0x00007f1a59046748:   xor    %r14d,%r13d
  0x00007f1a5904674b:   xor    %eax,%r15d
  0x00007f1a5904674e:   rorx   $0x6,%r10d,%r14d
  0x00007f1a59046754:   and    %r10d,%r15d
  0x00007f1a59046757:   xor    %r14d,%r13d
  0x00007f1a5904675a:   rorx   $0x16,%edi,%r14d
  0x00007f1a59046760:   add    %ebx,%r9d
  0x00007f1a59046763:   and    %esi,%ecx
  0x00007f1a59046765:   xor    %r12d,%r14d
  0x00007f1a59046768:   rorx   $0x2,%edi,%r12d
  0x00007f1a5904676e:   xor    %eax,%r15d
  0x00007f1a59046771:   xor    %r12d,%r14d
  0x00007f1a59046774:   mov    %edi,%r12d
  0x00007f1a59046777:   and    %r8d,%r12d
  0x00007f1a5904677a:   add    %r13d,%r15d
  0x00007f1a5904677d:   or     %r12d,%ecx
  0x00007f1a59046780:   add    %r14d,%ebx
  0x00007f1a59046783:   add    %r15d,%r9d
  0x00007f1a59046786:   add    %r15d,%ebx
  0x00007f1a59046789:   add    %ecx,%ebx
  0x00007f1a5904678b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59046790:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a59046795:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a59046799:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f1a5904679d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f1a590467a2:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f1a590467a7:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f1a590467ac:   mov    %ebx,%ecx
  0x00007f1a590467ae:   rorx   $0x19,%r9d,%r13d
  0x00007f1a590467b4:   rorx   $0xb,%r9d,%r14d
  0x00007f1a590467ba:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007f1a590467be:   or     %esi,%ecx
  0x00007f1a590467c0:   mov    %r10d,%r15d
  0x00007f1a590467c3:   rorx   $0xd,%ebx,%r12d
  0x00007f1a590467c9:   xor    %r14d,%r13d
  0x00007f1a590467cc:   xor    %r11d,%r15d
  0x00007f1a590467cf:   rorx   $0x6,%r9d,%r14d
  0x00007f1a590467d5:   and    %r9d,%r15d
  0x00007f1a590467d8:   xor    %r14d,%r13d
  0x00007f1a590467db:   rorx   $0x16,%ebx,%r14d
  0x00007f1a590467e1:   add    %eax,%r8d
  0x00007f1a590467e4:   and    %edi,%ecx
  0x00007f1a590467e6:   xor    %r12d,%r14d
  0x00007f1a590467e9:   rorx   $0x2,%ebx,%r12d
  0x00007f1a590467ef:   xor    %r11d,%r15d
  0x00007f1a590467f2:   xor    %r12d,%r14d
  0x00007f1a590467f5:   mov    %ebx,%r12d
  0x00007f1a590467f8:   and    %esi,%r12d
  0x00007f1a590467fb:   add    %r13d,%r15d
  0x00007f1a590467fe:   or     %r12d,%ecx
  0x00007f1a59046801:   add    %r14d,%eax
  0x00007f1a59046804:   add    %r15d,%r8d
  0x00007f1a59046807:   add    %r15d,%eax
  0x00007f1a5904680a:   add    %ecx,%eax
  0x00007f1a5904680c:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f1a59046811:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59046816:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a5904681b:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a5904681f:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f1a59046823:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f1a59046828:   vpaddd %ymm0,%ymm11,%ymm5
  0x00007f1a5904682c:   vpaddd 0x40(%rbp,%rdx,1),%ymm6,%ymm9
  0x00007f1a59046832:   vmovdqu %ymm9,0x40(%rsp,%rdx,1)
  0x00007f1a59046838:   mov    %eax,%ecx
  0x00007f1a5904683a:   rorx   $0x19,%r8d,%r13d
  0x00007f1a59046840:   rorx   $0xb,%r8d,%r14d
  0x00007f1a59046846:   add    0x40(%rsp,%rdx,1),%r11d
  0x00007f1a5904684b:   or     %edi,%ecx
  0x00007f1a5904684d:   mov    %r9d,%r15d
  0x00007f1a59046850:   rorx   $0xd,%eax,%r12d
  0x00007f1a59046856:   xor    %r14d,%r13d
  0x00007f1a59046859:   xor    %r10d,%r15d
  0x00007f1a5904685c:   rorx   $0x6,%r8d,%r14d
  0x00007f1a59046862:   and    %r8d,%r15d
  0x00007f1a59046865:   xor    %r14d,%r13d
  0x00007f1a59046868:   rorx   $0x16,%eax,%r14d
  0x00007f1a5904686e:   add    %r11d,%esi
  0x00007f1a59046871:   and    %ebx,%ecx
  0x00007f1a59046873:   xor    %r12d,%r14d
  0x00007f1a59046876:   rorx   $0x2,%eax,%r12d
  0x00007f1a5904687c:   xor    %r10d,%r15d
  0x00007f1a5904687f:   xor    %r12d,%r14d
  0x00007f1a59046882:   mov    %eax,%r12d
  0x00007f1a59046885:   and    %edi,%r12d
  0x00007f1a59046888:   add    %r13d,%r15d
  0x00007f1a5904688b:   or     %r12d,%ecx
  0x00007f1a5904688e:   add    %r14d,%r11d
  0x00007f1a59046891:   add    %r15d,%esi
  0x00007f1a59046894:   add    %r15d,%r11d
  0x00007f1a59046897:   add    %ecx,%r11d
  0x00007f1a5904689a:   vpalignr $0x4,%ymm4,%ymm5,%ymm0
  0x00007f1a590468a0:   vpaddd %ymm6,%ymm0,%ymm0
  0x00007f1a590468a4:   vpalignr $0x4,%ymm6,%ymm7,%ymm1
  0x00007f1a590468aa:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f1a590468af:   vpslld $0x19,%ymm1,%ymm3
  0x00007f1a590468b4:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a590468b8:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f1a590468bd:   mov    %r11d,%ecx
  0x00007f1a590468c0:   rorx   $0x19,%esi,%r13d
  0x00007f1a590468c6:   rorx   $0xb,%esi,%r14d
  0x00007f1a590468cc:   add    0x44(%rsp,%rdx,1),%r10d
  0x00007f1a590468d1:   or     %ebx,%ecx
  0x00007f1a590468d3:   mov    %r8d,%r15d
  0x00007f1a590468d6:   rorx   $0xd,%r11d,%r12d
  0x00007f1a590468dc:   xor    %r14d,%r13d
  0x00007f1a590468df:   xor    %r9d,%r15d
  0x00007f1a590468e2:   rorx   $0x6,%esi,%r14d
  0x00007f1a590468e8:   and    %esi,%r15d
  0x00007f1a590468eb:   xor    %r14d,%r13d
  0x00007f1a590468ee:   rorx   $0x16,%r11d,%r14d
  0x00007f1a590468f4:   add    %r10d,%edi
  0x00007f1a590468f7:   and    %eax,%ecx
  0x00007f1a590468f9:   xor    %r12d,%r14d
  0x00007f1a590468fc:   rorx   $0x2,%r11d,%r12d
  0x00007f1a59046902:   xor    %r9d,%r15d
  0x00007f1a59046905:   xor    %r12d,%r14d
  0x00007f1a59046908:   mov    %r11d,%r12d
  0x00007f1a5904690b:   and    %ebx,%r12d
  0x00007f1a5904690e:   add    %r13d,%r15d
  0x00007f1a59046911:   or     %r12d,%ecx
  0x00007f1a59046914:   add    %r14d,%r10d
  0x00007f1a59046917:   add    %r15d,%edi
  0x00007f1a5904691a:   add    %r15d,%r10d
  0x00007f1a5904691d:   add    %ecx,%r10d
  0x00007f1a59046920:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f1a59046925:   vpslld $0xe,%ymm1,%ymm1
  0x00007f1a5904692a:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f1a5904692e:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f1a59046932:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f1a59046937:   vpshufd $0xfa,%ymm5,%ymm2
  0x00007f1a5904693c:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f1a59046940:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f1a59046945:   mov    %r10d,%ecx
  0x00007f1a59046948:   rorx   $0x19,%edi,%r13d
  0x00007f1a5904694e:   rorx   $0xb,%edi,%r14d
  0x00007f1a59046954:   add    0x48(%rsp,%rdx,1),%r9d
  0x00007f1a59046959:   or     %eax,%ecx
  0x00007f1a5904695b:   mov    %esi,%r15d
  0x00007f1a5904695e:   rorx   $0xd,%r10d,%r12d
  0x00007f1a59046964:   xor    %r14d,%r13d
  0x00007f1a59046967:   xor    %r8d,%r15d
  0x00007f1a5904696a:   rorx   $0x6,%edi,%r14d
  0x00007f1a59046970:   and    %edi,%r15d
  0x00007f1a59046973:   xor    %r14d,%r13d
  0x00007f1a59046976:   rorx   $0x16,%r10d,%r14d
  0x00007f1a5904697c:   add    %r9d,%ebx
  0x00007f1a5904697f:   and    %r11d,%ecx
  0x00007f1a59046982:   xor    %r12d,%r14d
  0x00007f1a59046985:   rorx   $0x2,%r10d,%r12d
  0x00007f1a5904698b:   xor    %r8d,%r15d
  0x00007f1a5904698e:   xor    %r12d,%r14d
  0x00007f1a59046991:   mov    %r10d,%r12d
  0x00007f1a59046994:   and    %eax,%r12d
  0x00007f1a59046997:   add    %r13d,%r15d
  0x00007f1a5904699a:   or     %r12d,%ecx
  0x00007f1a5904699d:   add    %r14d,%r9d
  0x00007f1a590469a0:   add    %r15d,%ebx
  0x00007f1a590469a3:   add    %r15d,%r9d
  0x00007f1a590469a6:   add    %ecx,%r9d
  0x00007f1a590469a9:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a590469ae:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a590469b3:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a590469b7:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f1a590469bb:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f1a590469c0:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f1a590469c5:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f1a590469ca:   mov    %r9d,%ecx
  0x00007f1a590469cd:   rorx   $0x19,%ebx,%r13d
  0x00007f1a590469d3:   rorx   $0xb,%ebx,%r14d
  0x00007f1a590469d9:   add    0x4c(%rsp,%rdx,1),%r8d
  0x00007f1a590469de:   or     %r11d,%ecx
  0x00007f1a590469e1:   mov    %edi,%r15d
  0x00007f1a590469e4:   rorx   $0xd,%r9d,%r12d
  0x00007f1a590469ea:   xor    %r14d,%r13d
  0x00007f1a590469ed:   xor    %esi,%r15d
  0x00007f1a590469f0:   rorx   $0x6,%ebx,%r14d
  0x00007f1a590469f6:   and    %ebx,%r15d
  0x00007f1a590469f9:   xor    %r14d,%r13d
  0x00007f1a590469fc:   rorx   $0x16,%r9d,%r14d
  0x00007f1a59046a02:   add    %r8d,%eax
  0x00007f1a59046a05:   and    %r10d,%ecx
  0x00007f1a59046a08:   xor    %r12d,%r14d
  0x00007f1a59046a0b:   rorx   $0x2,%r9d,%r12d
  0x00007f1a59046a11:   xor    %esi,%r15d
  0x00007f1a59046a14:   xor    %r12d,%r14d
  0x00007f1a59046a17:   mov    %r9d,%r12d
  0x00007f1a59046a1a:   and    %r11d,%r12d
  0x00007f1a59046a1d:   add    %r13d,%r15d
  0x00007f1a59046a20:   or     %r12d,%ecx
  0x00007f1a59046a23:   add    %r14d,%r8d
  0x00007f1a59046a26:   add    %r15d,%eax
  0x00007f1a59046a29:   add    %r15d,%r8d
  0x00007f1a59046a2c:   add    %ecx,%r8d
  0x00007f1a59046a2f:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f1a59046a34:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59046a39:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a59046a3e:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a59046a42:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f1a59046a46:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f1a59046a4b:   vpaddd %ymm0,%ymm11,%ymm6
  0x00007f1a59046a4f:   vpaddd 0x60(%rbp,%rdx,1),%ymm7,%ymm9
  0x00007f1a59046a55:   vmovdqu %ymm9,0x60(%rsp,%rdx,1)
  0x00007f1a59046a5b:   mov    %r8d,%ecx
  0x00007f1a59046a5e:   rorx   $0x19,%eax,%r13d
  0x00007f1a59046a64:   rorx   $0xb,%eax,%r14d
  0x00007f1a59046a6a:   add    0x60(%rsp,%rdx,1),%esi
  0x00007f1a59046a6e:   or     %r10d,%ecx
  0x00007f1a59046a71:   mov    %ebx,%r15d
  0x00007f1a59046a74:   rorx   $0xd,%r8d,%r12d
  0x00007f1a59046a7a:   xor    %r14d,%r13d
  0x00007f1a59046a7d:   xor    %edi,%r15d
  0x00007f1a59046a80:   rorx   $0x6,%eax,%r14d
  0x00007f1a59046a86:   and    %eax,%r15d
  0x00007f1a59046a89:   xor    %r14d,%r13d
  0x00007f1a59046a8c:   rorx   $0x16,%r8d,%r14d
  0x00007f1a59046a92:   add    %esi,%r11d
  0x00007f1a59046a95:   and    %r9d,%ecx
  0x00007f1a59046a98:   xor    %r12d,%r14d
  0x00007f1a59046a9b:   rorx   $0x2,%r8d,%r12d
  0x00007f1a59046aa1:   xor    %edi,%r15d
  0x00007f1a59046aa4:   xor    %r12d,%r14d
  0x00007f1a59046aa7:   mov    %r8d,%r12d
  0x00007f1a59046aaa:   and    %r10d,%r12d
  0x00007f1a59046aad:   add    %r13d,%r15d
  0x00007f1a59046ab0:   or     %r12d,%ecx
  0x00007f1a59046ab3:   add    %r14d,%esi
  0x00007f1a59046ab6:   add    %r15d,%r11d
  0x00007f1a59046ab9:   add    %r15d,%esi
  0x00007f1a59046abc:   add    %ecx,%esi
  0x00007f1a59046abe:   vpalignr $0x4,%ymm5,%ymm6,%ymm0
  0x00007f1a59046ac4:   vpaddd %ymm7,%ymm0,%ymm0
  0x00007f1a59046ac8:   vpalignr $0x4,%ymm7,%ymm4,%ymm1
  0x00007f1a59046ace:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f1a59046ad3:   vpslld $0x19,%ymm1,%ymm3
  0x00007f1a59046ad8:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a59046adc:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f1a59046ae1:   mov    %esi,%ecx
  0x00007f1a59046ae3:   rorx   $0x19,%r11d,%r13d
  0x00007f1a59046ae9:   rorx   $0xb,%r11d,%r14d
  0x00007f1a59046aef:   add    0x64(%rsp,%rdx,1),%edi
  0x00007f1a59046af3:   or     %r9d,%ecx
  0x00007f1a59046af6:   mov    %eax,%r15d
  0x00007f1a59046af9:   rorx   $0xd,%esi,%r12d
  0x00007f1a59046aff:   xor    %r14d,%r13d
  0x00007f1a59046b02:   xor    %ebx,%r15d
  0x00007f1a59046b05:   rorx   $0x6,%r11d,%r14d
  0x00007f1a59046b0b:   and    %r11d,%r15d
  0x00007f1a59046b0e:   xor    %r14d,%r13d
  0x00007f1a59046b11:   rorx   $0x16,%esi,%r14d
  0x00007f1a59046b17:   add    %edi,%r10d
  0x00007f1a59046b1a:   and    %r8d,%ecx
  0x00007f1a59046b1d:   xor    %r12d,%r14d
  0x00007f1a59046b20:   rorx   $0x2,%esi,%r12d
  0x00007f1a59046b26:   xor    %ebx,%r15d
  0x00007f1a59046b29:   xor    %r12d,%r14d
  0x00007f1a59046b2c:   mov    %esi,%r12d
  0x00007f1a59046b2f:   and    %r9d,%r12d
  0x00007f1a59046b32:   add    %r13d,%r15d
  0x00007f1a59046b35:   or     %r12d,%ecx
  0x00007f1a59046b38:   add    %r14d,%edi
  0x00007f1a59046b3b:   add    %r15d,%r10d
  0x00007f1a59046b3e:   add    %r15d,%edi
  0x00007f1a59046b41:   add    %ecx,%edi
  0x00007f1a59046b43:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f1a59046b48:   vpslld $0xe,%ymm1,%ymm1
  0x00007f1a59046b4d:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f1a59046b51:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f1a59046b55:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f1a59046b5a:   vpshufd $0xfa,%ymm6,%ymm2
  0x00007f1a59046b5f:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f1a59046b63:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f1a59046b68:   mov    %edi,%ecx
  0x00007f1a59046b6a:   rorx   $0x19,%r10d,%r13d
  0x00007f1a59046b70:   rorx   $0xb,%r10d,%r14d
  0x00007f1a59046b76:   add    0x68(%rsp,%rdx,1),%ebx
  0x00007f1a59046b7a:   or     %r8d,%ecx
  0x00007f1a59046b7d:   mov    %r11d,%r15d
  0x00007f1a59046b80:   rorx   $0xd,%edi,%r12d
  0x00007f1a59046b86:   xor    %r14d,%r13d
  0x00007f1a59046b89:   xor    %eax,%r15d
  0x00007f1a59046b8c:   rorx   $0x6,%r10d,%r14d
  0x00007f1a59046b92:   and    %r10d,%r15d
  0x00007f1a59046b95:   xor    %r14d,%r13d
  0x00007f1a59046b98:   rorx   $0x16,%edi,%r14d
  0x00007f1a59046b9e:   add    %ebx,%r9d
  0x00007f1a59046ba1:   and    %esi,%ecx
  0x00007f1a59046ba3:   xor    %r12d,%r14d
  0x00007f1a59046ba6:   rorx   $0x2,%edi,%r12d
  0x00007f1a59046bac:   xor    %eax,%r15d
  0x00007f1a59046baf:   xor    %r12d,%r14d
  0x00007f1a59046bb2:   mov    %edi,%r12d
  0x00007f1a59046bb5:   and    %r8d,%r12d
  0x00007f1a59046bb8:   add    %r13d,%r15d
  0x00007f1a59046bbb:   or     %r12d,%ecx
  0x00007f1a59046bbe:   add    %r14d,%ebx
  0x00007f1a59046bc1:   add    %r15d,%r9d
  0x00007f1a59046bc4:   add    %r15d,%ebx
  0x00007f1a59046bc7:   add    %ecx,%ebx
  0x00007f1a59046bc9:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59046bce:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a59046bd3:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a59046bd7:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f1a59046bdb:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f1a59046be0:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f1a59046be5:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f1a59046bea:   mov    %ebx,%ecx
  0x00007f1a59046bec:   rorx   $0x19,%r9d,%r13d
  0x00007f1a59046bf2:   rorx   $0xb,%r9d,%r14d
  0x00007f1a59046bf8:   add    0x6c(%rsp,%rdx,1),%eax
  0x00007f1a59046bfc:   or     %esi,%ecx
  0x00007f1a59046bfe:   mov    %r10d,%r15d
  0x00007f1a59046c01:   rorx   $0xd,%ebx,%r12d
  0x00007f1a59046c07:   xor    %r14d,%r13d
  0x00007f1a59046c0a:   xor    %r11d,%r15d
  0x00007f1a59046c0d:   rorx   $0x6,%r9d,%r14d
  0x00007f1a59046c13:   and    %r9d,%r15d
  0x00007f1a59046c16:   xor    %r14d,%r13d
  0x00007f1a59046c19:   rorx   $0x16,%ebx,%r14d
  0x00007f1a59046c1f:   add    %eax,%r8d
  0x00007f1a59046c22:   and    %edi,%ecx
  0x00007f1a59046c24:   xor    %r12d,%r14d
  0x00007f1a59046c27:   rorx   $0x2,%ebx,%r12d
  0x00007f1a59046c2d:   xor    %r11d,%r15d
  0x00007f1a59046c30:   xor    %r12d,%r14d
  0x00007f1a59046c33:   mov    %ebx,%r12d
  0x00007f1a59046c36:   and    %esi,%r12d
  0x00007f1a59046c39:   add    %r13d,%r15d
  0x00007f1a59046c3c:   or     %r12d,%ecx
  0x00007f1a59046c3f:   add    %r14d,%eax
  0x00007f1a59046c42:   add    %r15d,%r8d
  0x00007f1a59046c45:   add    %r15d,%eax
  0x00007f1a59046c48:   add    %ecx,%eax
  0x00007f1a59046c4a:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f1a59046c4f:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59046c54:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f1a59046c59:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f1a59046c5d:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f1a59046c61:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f1a59046c66:   vpaddd %ymm0,%ymm11,%ymm7
  0x00007f1a59046c6a:   add    $0x80,%rdx
  0x00007f1a59046c71:   cmp    $0x180,%rdx
  0x00007f1a59046c78:   jb     Stub::sha256_implCompressMB+272 0x00007f1a590463f0
  0x00007f1a59046c7e:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007f1a59046c84:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007f1a59046c89:   mov    %r9d,%r15d
  0x00007f1a59046c8c:   rorx   $0x19,%r8d,%r13d
  0x00007f1a59046c92:   rorx   $0xb,%r8d,%r14d
  0x00007f1a59046c98:   xor    %r10d,%r15d
  0x00007f1a59046c9b:   xor    %r14d,%r13d
  0x00007f1a59046c9e:   rorx   $0x6,%r8d,%r14d
  0x00007f1a59046ca4:   and    %r8d,%r15d
  0x00007f1a59046ca7:   xor    %r14d,%r13d
  0x00007f1a59046caa:   rorx   $0xd,%eax,%r12d
  0x00007f1a59046cb0:   xor    %r10d,%r15d
  0x00007f1a59046cb3:   rorx   $0x16,%eax,%r14d
  0x00007f1a59046cb9:   mov    %eax,%ecx
  0x00007f1a59046cbb:   xor    %r12d,%r14d
  0x00007f1a59046cbe:   rorx   $0x2,%eax,%r12d
  0x00007f1a59046cc4:   add    (%rsp,%rdx,1),%r11d
  0x00007f1a59046cc8:   or     %edi,%ecx
  0x00007f1a59046cca:   xor    %r12d,%r14d
  0x00007f1a59046ccd:   mov    %eax,%r12d
  0x00007f1a59046cd0:   and    %ebx,%ecx
  0x00007f1a59046cd2:   and    %edi,%r12d
  0x00007f1a59046cd5:   add    %r13d,%r15d
  0x00007f1a59046cd8:   add    %r11d,%esi
  0x00007f1a59046cdb:   or     %r12d,%ecx
  0x00007f1a59046cde:   add    %r14d,%r11d
  0x00007f1a59046ce1:   add    %r15d,%esi
  0x00007f1a59046ce4:   add    %r15d,%r11d
  0x00007f1a59046ce7:   mov    %r8d,%r15d
  0x00007f1a59046cea:   rorx   $0x19,%esi,%r13d
  0x00007f1a59046cf0:   rorx   $0xb,%esi,%r14d
  0x00007f1a59046cf6:   xor    %r9d,%r15d
  0x00007f1a59046cf9:   xor    %r14d,%r13d
  0x00007f1a59046cfc:   rorx   $0x6,%esi,%r14d
  0x00007f1a59046d02:   and    %esi,%r15d
  0x00007f1a59046d05:   add    %ecx,%r11d
  0x00007f1a59046d08:   xor    %r14d,%r13d
  0x00007f1a59046d0b:   rorx   $0xd,%r11d,%r12d
  0x00007f1a59046d11:   xor    %r9d,%r15d
  0x00007f1a59046d14:   rorx   $0x16,%r11d,%r14d
  0x00007f1a59046d1a:   mov    %r11d,%ecx
  0x00007f1a59046d1d:   xor    %r12d,%r14d
  0x00007f1a59046d20:   rorx   $0x2,%r11d,%r12d
  0x00007f1a59046d26:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007f1a59046d2b:   or     %ebx,%ecx
  0x00007f1a59046d2d:   xor    %r12d,%r14d
  0x00007f1a59046d30:   mov    %r11d,%r12d
  0x00007f1a59046d33:   and    %eax,%ecx
  0x00007f1a59046d35:   and    %ebx,%r12d
  0x00007f1a59046d38:   add    %r13d,%r15d
  0x00007f1a59046d3b:   add    %r10d,%edi
  0x00007f1a59046d3e:   or     %r12d,%ecx
  0x00007f1a59046d41:   add    %r14d,%r10d
  0x00007f1a59046d44:   add    %r15d,%edi
  0x00007f1a59046d47:   add    %r15d,%r10d
  0x00007f1a59046d4a:   mov    %esi,%r15d
  0x00007f1a59046d4d:   rorx   $0x19,%edi,%r13d
  0x00007f1a59046d53:   rorx   $0xb,%edi,%r14d
  0x00007f1a59046d59:   xor    %r8d,%r15d
  0x00007f1a59046d5c:   xor    %r14d,%r13d
  0x00007f1a59046d5f:   rorx   $0x6,%edi,%r14d
  0x00007f1a59046d65:   and    %edi,%r15d
  0x00007f1a59046d68:   add    %ecx,%r10d
  0x00007f1a59046d6b:   xor    %r14d,%r13d
  0x00007f1a59046d6e:   rorx   $0xd,%r10d,%r12d
  0x00007f1a59046d74:   xor    %r8d,%r15d
  0x00007f1a59046d77:   rorx   $0x16,%r10d,%r14d
  0x00007f1a59046d7d:   mov    %r10d,%ecx
  0x00007f1a59046d80:   xor    %r12d,%r14d
  0x00007f1a59046d83:   rorx   $0x2,%r10d,%r12d
  0x00007f1a59046d89:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007f1a59046d8e:   or     %eax,%ecx
  0x00007f1a59046d90:   xor    %r12d,%r14d
  0x00007f1a59046d93:   mov    %r10d,%r12d
  0x00007f1a59046d96:   and    %r11d,%ecx
  0x00007f1a59046d99:   and    %eax,%r12d
  0x00007f1a59046d9c:   add    %r13d,%r15d
  0x00007f1a59046d9f:   add    %r9d,%ebx
  0x00007f1a59046da2:   or     %r12d,%ecx
  0x00007f1a59046da5:   add    %r14d,%r9d
  0x00007f1a59046da8:   add    %r15d,%ebx
  0x00007f1a59046dab:   add    %r15d,%r9d
  0x00007f1a59046dae:   mov    %edi,%r15d
  0x00007f1a59046db1:   rorx   $0x19,%ebx,%r13d
  0x00007f1a59046db7:   rorx   $0xb,%ebx,%r14d
  0x00007f1a59046dbd:   xor    %esi,%r15d
  0x00007f1a59046dc0:   xor    %r14d,%r13d
  0x00007f1a59046dc3:   rorx   $0x6,%ebx,%r14d
  0x00007f1a59046dc9:   and    %ebx,%r15d
  0x00007f1a59046dcc:   add    %ecx,%r9d
  0x00007f1a59046dcf:   xor    %r14d,%r13d
  0x00007f1a59046dd2:   rorx   $0xd,%r9d,%r12d
  0x00007f1a59046dd8:   xor    %esi,%r15d
  0x00007f1a59046ddb:   rorx   $0x16,%r9d,%r14d
  0x00007f1a59046de1:   mov    %r9d,%ecx
  0x00007f1a59046de4:   xor    %r12d,%r14d
  0x00007f1a59046de7:   rorx   $0x2,%r9d,%r12d
  0x00007f1a59046ded:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007f1a59046df2:   or     %r11d,%ecx
  0x00007f1a59046df5:   xor    %r12d,%r14d
  0x00007f1a59046df8:   mov    %r9d,%r12d
  0x00007f1a59046dfb:   and    %r10d,%ecx
  0x00007f1a59046dfe:   and    %r11d,%r12d
  0x00007f1a59046e01:   add    %r13d,%r15d
  0x00007f1a59046e04:   add    %r8d,%eax
  0x00007f1a59046e07:   or     %r12d,%ecx
  0x00007f1a59046e0a:   add    %r14d,%r8d
  0x00007f1a59046e0d:   add    %r15d,%eax
  0x00007f1a59046e10:   add    %r15d,%r8d
  0x00007f1a59046e13:   add    %ecx,%r8d
  0x00007f1a59046e16:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007f1a59046e1c:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007f1a59046e22:   mov    %ebx,%r15d
  0x00007f1a59046e25:   rorx   $0x19,%eax,%r13d
  0x00007f1a59046e2b:   rorx   $0xb,%eax,%r14d
  0x00007f1a59046e31:   xor    %edi,%r15d
  0x00007f1a59046e34:   xor    %r14d,%r13d
  0x00007f1a59046e37:   rorx   $0x6,%eax,%r14d
  0x00007f1a59046e3d:   and    %eax,%r15d
  0x00007f1a59046e40:   xor    %r14d,%r13d
  0x00007f1a59046e43:   rorx   $0xd,%r8d,%r12d
  0x00007f1a59046e49:   xor    %edi,%r15d
  0x00007f1a59046e4c:   rorx   $0x16,%r8d,%r14d
  0x00007f1a59046e52:   mov    %r8d,%ecx
  0x00007f1a59046e55:   xor    %r12d,%r14d
  0x00007f1a59046e58:   rorx   $0x2,%r8d,%r12d
  0x00007f1a59046e5e:   add    0x20(%rsp,%rdx,1),%esi
  0x00007f1a59046e62:   or     %r10d,%ecx
  0x00007f1a59046e65:   xor    %r12d,%r14d
  0x00007f1a59046e68:   mov    %r8d,%r12d
  0x00007f1a59046e6b:   and    %r9d,%ecx
  0x00007f1a59046e6e:   and    %r10d,%r12d
  0x00007f1a59046e71:   add    %r13d,%r15d
  0x00007f1a59046e74:   add    %esi,%r11d
  0x00007f1a59046e77:   or     %r12d,%ecx
  0x00007f1a59046e7a:   add    %r14d,%esi
  0x00007f1a59046e7d:   add    %r15d,%r11d
  0x00007f1a59046e80:   add    %r15d,%esi
  0x00007f1a59046e83:   mov    %eax,%r15d
  0x00007f1a59046e86:   rorx   $0x19,%r11d,%r13d
  0x00007f1a59046e8c:   rorx   $0xb,%r11d,%r14d
  0x00007f1a59046e92:   xor    %ebx,%r15d
  0x00007f1a59046e95:   xor    %r14d,%r13d
  0x00007f1a59046e98:   rorx   $0x6,%r11d,%r14d
  0x00007f1a59046e9e:   and    %r11d,%r15d
  0x00007f1a59046ea1:   add    %ecx,%esi
  0x00007f1a59046ea3:   xor    %r14d,%r13d
  0x00007f1a59046ea6:   rorx   $0xd,%esi,%r12d
  0x00007f1a59046eac:   xor    %ebx,%r15d
  0x00007f1a59046eaf:   rorx   $0x16,%esi,%r14d
  0x00007f1a59046eb5:   mov    %esi,%ecx
  0x00007f1a59046eb7:   xor    %r12d,%r14d
  0x00007f1a59046eba:   rorx   $0x2,%esi,%r12d
  0x00007f1a59046ec0:   add    0x24(%rsp,%rdx,1),%edi
  0x00007f1a59046ec4:   or     %r9d,%ecx
  0x00007f1a59046ec7:   xor    %r12d,%r14d
  0x00007f1a59046eca:   mov    %esi,%r12d
  0x00007f1a59046ecd:   and    %r8d,%ecx
  0x00007f1a59046ed0:   and    %r9d,%r12d
  0x00007f1a59046ed3:   add    %r13d,%r15d
  0x00007f1a59046ed6:   add    %edi,%r10d
  0x00007f1a59046ed9:   or     %r12d,%ecx
  0x00007f1a59046edc:   add    %r14d,%edi
  0x00007f1a59046edf:   add    %r15d,%r10d
  0x00007f1a59046ee2:   add    %r15d,%edi
  0x00007f1a59046ee5:   mov    %r11d,%r15d
  0x00007f1a59046ee8:   rorx   $0x19,%r10d,%r13d
  0x00007f1a59046eee:   rorx   $0xb,%r10d,%r14d
  0x00007f1a59046ef4:   xor    %eax,%r15d
  0x00007f1a59046ef7:   xor    %r14d,%r13d
  0x00007f1a59046efa:   rorx   $0x6,%r10d,%r14d
  0x00007f1a59046f00:   and    %r10d,%r15d
  0x00007f1a59046f03:   add    %ecx,%edi
  0x00007f1a59046f05:   xor    %r14d,%r13d
  0x00007f1a59046f08:   rorx   $0xd,%edi,%r12d
  0x00007f1a59046f0e:   xor    %eax,%r15d
  0x00007f1a59046f11:   rorx   $0x16,%edi,%r14d
  0x00007f1a59046f17:   mov    %edi,%ecx
  0x00007f1a59046f19:   xor    %r12d,%r14d
  0x00007f1a59046f1c:   rorx   $0x2,%edi,%r12d
  0x00007f1a59046f22:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007f1a59046f26:   or     %r8d,%ecx
  0x00007f1a59046f29:   xor    %r12d,%r14d
  0x00007f1a59046f2c:   mov    %edi,%r12d
  0x00007f1a59046f2f:   and    %esi,%ecx
  0x00007f1a59046f31:   and    %r8d,%r12d
  0x00007f1a59046f34:   add    %r13d,%r15d
  0x00007f1a59046f37:   add    %ebx,%r9d
  0x00007f1a59046f3a:   or     %r12d,%ecx
  0x00007f1a59046f3d:   add    %r14d,%ebx
  0x00007f1a59046f40:   add    %r15d,%r9d
  0x00007f1a59046f43:   add    %r15d,%ebx
  0x00007f1a59046f46:   mov    %r10d,%r15d
  0x00007f1a59046f49:   rorx   $0x19,%r9d,%r13d
  0x00007f1a59046f4f:   rorx   $0xb,%r9d,%r14d
  0x00007f1a59046f55:   xor    %r11d,%r15d
  0x00007f1a59046f58:   xor    %r14d,%r13d
  0x00007f1a59046f5b:   rorx   $0x6,%r9d,%r14d
  0x00007f1a59046f61:   and    %r9d,%r15d
  0x00007f1a59046f64:   add    %ecx,%ebx
  0x00007f1a59046f66:   xor    %r14d,%r13d
  0x00007f1a59046f69:   rorx   $0xd,%ebx,%r12d
  0x00007f1a59046f6f:   xor    %r11d,%r15d
  0x00007f1a59046f72:   rorx   $0x16,%ebx,%r14d
  0x00007f1a59046f78:   mov    %ebx,%ecx
  0x00007f1a59046f7a:   xor    %r12d,%r14d
  0x00007f1a59046f7d:   rorx   $0x2,%ebx,%r12d
  0x00007f1a59046f83:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007f1a59046f87:   or     %esi,%ecx
  0x00007f1a59046f89:   xor    %r12d,%r14d
  0x00007f1a59046f8c:   mov    %ebx,%r12d
  0x00007f1a59046f8f:   and    %edi,%ecx
  0x00007f1a59046f91:   and    %esi,%r12d
  0x00007f1a59046f94:   add    %r13d,%r15d
  0x00007f1a59046f97:   add    %eax,%r8d
  0x00007f1a59046f9a:   or     %r12d,%ecx
  0x00007f1a59046f9d:   add    %r14d,%eax
  0x00007f1a59046fa0:   add    %r15d,%r8d
  0x00007f1a59046fa3:   add    %r15d,%eax
  0x00007f1a59046fa6:   add    %ecx,%eax
  0x00007f1a59046fa8:   add    $0x40,%rdx
  0x00007f1a59046fac:   vmovdqu %ymm6,%ymm4
  0x00007f1a59046fb0:   vmovdqu %ymm7,%ymm5
  0x00007f1a59046fb4:   cmp    $0x200,%rdx
  0x00007f1a59046fbb:   jb     Stub::sha256_implCompressMB+2462 0x00007f1a59046c7e
  0x00007f1a59046fc1:   mov    0x210(%rsp),%rdx
  0x00007f1a59046fc9:   mov    0x208(%rsp),%rcx
  0x00007f1a59046fd1:   add    (%rdx),%eax
  0x00007f1a59046fd3:   mov    %eax,(%rdx)
  0x00007f1a59046fd5:   add    0x4(%rdx),%ebx
  0x00007f1a59046fd8:   mov    %ebx,0x4(%rdx)
  0x00007f1a59046fdb:   add    0x8(%rdx),%edi
  0x00007f1a59046fde:   mov    %edi,0x8(%rdx)
  0x00007f1a59046fe1:   add    0xc(%rdx),%esi
  0x00007f1a59046fe4:   mov    %esi,0xc(%rdx)
  0x00007f1a59046fe7:   add    0x10(%rdx),%r8d
  0x00007f1a59046feb:   mov    %r8d,0x10(%rdx)
  0x00007f1a59046fef:   add    0x14(%rdx),%r9d
  0x00007f1a59046ff3:   mov    %r9d,0x14(%rdx)
  0x00007f1a59046ff7:   add    0x18(%rdx),%r10d
  0x00007f1a59046ffb:   mov    %r10d,0x18(%rdx)
  0x00007f1a59046fff:   add    0x1c(%rdx),%r11d
  0x00007f1a59047003:   mov    %r11d,0x1c(%rdx)
  0x00007f1a59047007:   cmp    0x200(%rsp),%rcx
  0x00007f1a5904700f:   ja     Stub::sha256_implCompressMB+4402 0x00007f1a59047412
  0x00007f1a59047015:   xor    %rdx,%rdx
  0x00007f1a59047018:   nopl   0x0(%rax,%rax,1)
  0x00007f1a59047020:   mov    %r9d,%r15d
  0x00007f1a59047023:   rorx   $0x19,%r8d,%r13d
  0x00007f1a59047029:   rorx   $0xb,%r8d,%r14d
  0x00007f1a5904702f:   xor    %r10d,%r15d
  0x00007f1a59047032:   xor    %r14d,%r13d
  0x00007f1a59047035:   rorx   $0x6,%r8d,%r14d
  0x00007f1a5904703b:   and    %r8d,%r15d
  0x00007f1a5904703e:   xor    %r14d,%r13d
  0x00007f1a59047041:   rorx   $0xd,%eax,%r12d
  0x00007f1a59047047:   xor    %r10d,%r15d
  0x00007f1a5904704a:   rorx   $0x16,%eax,%r14d
  0x00007f1a59047050:   mov    %eax,%ecx
  0x00007f1a59047052:   xor    %r12d,%r14d
  0x00007f1a59047055:   rorx   $0x2,%eax,%r12d
  0x00007f1a5904705b:   add    0x10(%rsp,%rdx,1),%r11d
  0x00007f1a59047060:   or     %edi,%ecx
  0x00007f1a59047062:   xor    %r12d,%r14d
  0x00007f1a59047065:   mov    %eax,%r12d
  0x00007f1a59047068:   and    %ebx,%ecx
  0x00007f1a5904706a:   and    %edi,%r12d
  0x00007f1a5904706d:   add    %r13d,%r15d
  0x00007f1a59047070:   add    %r11d,%esi
  0x00007f1a59047073:   or     %r12d,%ecx
  0x00007f1a59047076:   add    %r14d,%r11d
  0x00007f1a59047079:   add    %r15d,%esi
  0x00007f1a5904707c:   add    %r15d,%r11d
  0x00007f1a5904707f:   mov    %r8d,%r15d
  0x00007f1a59047082:   rorx   $0x19,%esi,%r13d
  0x00007f1a59047088:   rorx   $0xb,%esi,%r14d
  0x00007f1a5904708e:   xor    %r9d,%r15d
  0x00007f1a59047091:   xor    %r14d,%r13d
  0x00007f1a59047094:   rorx   $0x6,%esi,%r14d
  0x00007f1a5904709a:   and    %esi,%r15d
  0x00007f1a5904709d:   add    %ecx,%r11d
  0x00007f1a590470a0:   xor    %r14d,%r13d
  0x00007f1a590470a3:   rorx   $0xd,%r11d,%r12d
  0x00007f1a590470a9:   xor    %r9d,%r15d
  0x00007f1a590470ac:   rorx   $0x16,%r11d,%r14d
  0x00007f1a590470b2:   mov    %r11d,%ecx
  0x00007f1a590470b5:   xor    %r12d,%r14d
  0x00007f1a590470b8:   rorx   $0x2,%r11d,%r12d
  0x00007f1a590470be:   add    0x14(%rsp,%rdx,1),%r10d
  0x00007f1a590470c3:   or     %ebx,%ecx
  0x00007f1a590470c5:   xor    %r12d,%r14d
  0x00007f1a590470c8:   mov    %r11d,%r12d
  0x00007f1a590470cb:   and    %eax,%ecx
  0x00007f1a590470cd:   and    %ebx,%r12d
  0x00007f1a590470d0:   add    %r13d,%r15d
  0x00007f1a590470d3:   add    %r10d,%edi
  0x00007f1a590470d6:   or     %r12d,%ecx
  0x00007f1a590470d9:   add    %r14d,%r10d
  0x00007f1a590470dc:   add    %r15d,%edi
  0x00007f1a590470df:   add    %r15d,%r10d
  0x00007f1a590470e2:   mov    %esi,%r15d
  0x00007f1a590470e5:   rorx   $0x19,%edi,%r13d
  0x00007f1a590470eb:   rorx   $0xb,%edi,%r14d
  0x00007f1a590470f1:   xor    %r8d,%r15d
  0x00007f1a590470f4:   xor    %r14d,%r13d
  0x00007f1a590470f7:   rorx   $0x6,%edi,%r14d
  0x00007f1a590470fd:   and    %edi,%r15d
  0x00007f1a59047100:   add    %ecx,%r10d
  0x00007f1a59047103:   xor    %r14d,%r13d
  0x00007f1a59047106:   rorx   $0xd,%r10d,%r12d
  0x00007f1a5904710c:   xor    %r8d,%r15d
  0x00007f1a5904710f:   rorx   $0x16,%r10d,%r14d
  0x00007f1a59047115:   mov    %r10d,%ecx
  0x00007f1a59047118:   xor    %r12d,%r14d
  0x00007f1a5904711b:   rorx   $0x2,%r10d,%r12d
  0x00007f1a59047121:   add    0x18(%rsp,%rdx,1),%r9d
  0x00007f1a59047126:   or     %eax,%ecx
  0x00007f1a59047128:   xor    %r12d,%r14d
  0x00007f1a5904712b:   mov    %r10d,%r12d
  0x00007f1a5904712e:   and    %r11d,%ecx
  0x00007f1a59047131:   and    %eax,%r12d
  0x00007f1a59047134:   add    %r13d,%r15d
  0x00007f1a59047137:   add    %r9d,%ebx
  0x00007f1a5904713a:   or     %r12d,%ecx
  0x00007f1a5904713d:   add    %r14d,%r9d
  0x00007f1a59047140:   add    %r15d,%ebx
  0x00007f1a59047143:   add    %r15d,%r9d
  0x00007f1a59047146:   mov    %edi,%r15d
  0x00007f1a59047149:   rorx   $0x19,%ebx,%r13d
  0x00007f1a5904714f:   rorx   $0xb,%ebx,%r14d
  0x00007f1a59047155:   xor    %esi,%r15d
  0x00007f1a59047158:   xor    %r14d,%r13d
  0x00007f1a5904715b:   rorx   $0x6,%ebx,%r14d
  0x00007f1a59047161:   and    %ebx,%r15d
  0x00007f1a59047164:   add    %ecx,%r9d
  0x00007f1a59047167:   xor    %r14d,%r13d
  0x00007f1a5904716a:   rorx   $0xd,%r9d,%r12d
  0x00007f1a59047170:   xor    %esi,%r15d
  0x00007f1a59047173:   rorx   $0x16,%r9d,%r14d
  0x00007f1a59047179:   mov    %r9d,%ecx
  0x00007f1a5904717c:   xor    %r12d,%r14d
  0x00007f1a5904717f:   rorx   $0x2,%r9d,%r12d
  0x00007f1a59047185:   add    0x1c(%rsp,%rdx,1),%r8d
  0x00007f1a5904718a:   or     %r11d,%ecx
  0x00007f1a5904718d:   xor    %r12d,%r14d
  0x00007f1a59047190:   mov    %r9d,%r12d
  0x00007f1a59047193:   and    %r10d,%ecx
  0x00007f1a59047196:   and    %r11d,%r12d
  0x00007f1a59047199:   add    %r13d,%r15d
  0x00007f1a5904719c:   add    %r8d,%eax
  0x00007f1a5904719f:   or     %r12d,%ecx
  0x00007f1a590471a2:   add    %r14d,%r8d
  0x00007f1a590471a5:   add    %r15d,%eax
  0x00007f1a590471a8:   add    %r15d,%r8d
  0x00007f1a590471ab:   add    %ecx,%r8d
  0x00007f1a590471ae:   mov    %ebx,%r15d
  0x00007f1a590471b1:   rorx   $0x19,%eax,%r13d
  0x00007f1a590471b7:   rorx   $0xb,%eax,%r14d
  0x00007f1a590471bd:   xor    %edi,%r15d
  0x00007f1a590471c0:   xor    %r14d,%r13d
  0x00007f1a590471c3:   rorx   $0x6,%eax,%r14d
  0x00007f1a590471c9:   and    %eax,%r15d
  0x00007f1a590471cc:   xor    %r14d,%r13d
  0x00007f1a590471cf:   rorx   $0xd,%r8d,%r12d
  0x00007f1a590471d5:   xor    %edi,%r15d
  0x00007f1a590471d8:   rorx   $0x16,%r8d,%r14d
  0x00007f1a590471de:   mov    %r8d,%ecx
  0x00007f1a590471e1:   xor    %r12d,%r14d
  0x00007f1a590471e4:   rorx   $0x2,%r8d,%r12d
  0x00007f1a590471ea:   add    0x30(%rsp,%rdx,1),%esi
  0x00007f1a590471ee:   or     %r10d,%ecx
  0x00007f1a590471f1:   xor    %r12d,%r14d
  0x00007f1a590471f4:   mov    %r8d,%r12d
  0x00007f1a590471f7:   and    %r9d,%ecx
  0x00007f1a590471fa:   and    %r10d,%r12d
  0x00007f1a590471fd:   add    %r13d,%r15d
  0x00007f1a59047200:   add    %esi,%r11d
  0x00007f1a59047203:   or     %r12d,%ecx
  0x00007f1a59047206:   add    %r14d,%esi
  0x00007f1a59047209:   add    %r15d,%r11d
  0x00007f1a5904720c:   add    %r15d,%esi
  0x00007f1a5904720f:   mov    %eax,%r15d
  0x00007f1a59047212:   rorx   $0x19,%r11d,%r13d
  0x00007f1a59047218:   rorx   $0xb,%r11d,%r14d
  0x00007f1a5904721e:   xor    %ebx,%r15d
  0x00007f1a59047221:   xor    %r14d,%r13d
  0x00007f1a59047224:   rorx   $0x6,%r11d,%r14d
  0x00007f1a5904722a:   and    %r11d,%r15d
  0x00007f1a5904722d:   add    %ecx,%esi
  0x00007f1a5904722f:   xor    %r14d,%r13d
  0x00007f1a59047232:   rorx   $0xd,%esi,%r12d
  0x00007f1a59047238:   xor    %ebx,%r15d
  0x00007f1a5904723b:   rorx   $0x16,%esi,%r14d
  0x00007f1a59047241:   mov    %esi,%ecx
  0x00007f1a59047243:   xor    %r12d,%r14d
  0x00007f1a59047246:   rorx   $0x2,%esi,%r12d
  0x00007f1a5904724c:   add    0x34(%rsp,%rdx,1),%edi
  0x00007f1a59047250:   or     %r9d,%ecx
  0x00007f1a59047253:   xor    %r12d,%r14d
  0x00007f1a59047256:   mov    %esi,%r12d
  0x00007f1a59047259:   and    %r8d,%ecx
  0x00007f1a5904725c:   and    %r9d,%r12d
  0x00007f1a5904725f:   add    %r13d,%r15d
  0x00007f1a59047262:   add    %edi,%r10d
  0x00007f1a59047265:   or     %r12d,%ecx
  0x00007f1a59047268:   add    %r14d,%edi
  0x00007f1a5904726b:   add    %r15d,%r10d
  0x00007f1a5904726e:   add    %r15d,%edi
  0x00007f1a59047271:   mov    %r11d,%r15d
  0x00007f1a59047274:   rorx   $0x19,%r10d,%r13d
  0x00007f1a5904727a:   rorx   $0xb,%r10d,%r14d
  0x00007f1a59047280:   xor    %eax,%r15d
  0x00007f1a59047283:   xor    %r14d,%r13d
  0x00007f1a59047286:   rorx   $0x6,%r10d,%r14d
  0x00007f1a5904728c:   and    %r10d,%r15d
  0x00007f1a5904728f:   add    %ecx,%edi
  0x00007f1a59047291:   xor    %r14d,%r13d
  0x00007f1a59047294:   rorx   $0xd,%edi,%r12d
  0x00007f1a5904729a:   xor    %eax,%r15d
  0x00007f1a5904729d:   rorx   $0x16,%edi,%r14d
  0x00007f1a590472a3:   mov    %edi,%ecx
  0x00007f1a590472a5:   xor    %r12d,%r14d
  0x00007f1a590472a8:   rorx   $0x2,%edi,%r12d
  0x00007f1a590472ae:   add    0x38(%rsp,%rdx,1),%ebx
  0x00007f1a590472b2:   or     %r8d,%ecx
  0x00007f1a590472b5:   xor    %r12d,%r14d
  0x00007f1a590472b8:   mov    %edi,%r12d
  0x00007f1a590472bb:   and    %esi,%ecx
  0x00007f1a590472bd:   and    %r8d,%r12d
  0x00007f1a590472c0:   add    %r13d,%r15d
  0x00007f1a590472c3:   add    %ebx,%r9d
  0x00007f1a590472c6:   or     %r12d,%ecx
  0x00007f1a590472c9:   add    %r14d,%ebx
  0x00007f1a590472cc:   add    %r15d,%r9d
  0x00007f1a590472cf:   add    %r15d,%ebx
  0x00007f1a590472d2:   mov    %r10d,%r15d
  0x00007f1a590472d5:   rorx   $0x19,%r9d,%r13d
  0x00007f1a590472db:   rorx   $0xb,%r9d,%r14d
  0x00007f1a590472e1:   xor    %r11d,%r15d
  0x00007f1a590472e4:   xor    %r14d,%r13d
  0x00007f1a590472e7:   rorx   $0x6,%r9d,%r14d
  0x00007f1a590472ed:   and    %r9d,%r15d
  0x00007f1a590472f0:   add    %ecx,%ebx
  0x00007f1a590472f2:   xor    %r14d,%r13d
  0x00007f1a590472f5:   rorx   $0xd,%ebx,%r12d
  0x00007f1a590472fb:   xor    %r11d,%r15d
  0x00007f1a590472fe:   rorx   $0x16,%ebx,%r14d
  0x00007f1a59047304:   mov    %ebx,%ecx
  0x00007f1a59047306:   xor    %r12d,%r14d
  0x00007f1a59047309:   rorx   $0x2,%ebx,%r12d
  0x00007f1a5904730f:   add    0x3c(%rsp,%rdx,1),%eax
  0x00007f1a59047313:   or     %esi,%ecx
  0x00007f1a59047315:   xor    %r12d,%r14d
  0x00007f1a59047318:   mov    %ebx,%r12d
  0x00007f1a5904731b:   and    %edi,%ecx
  0x00007f1a5904731d:   and    %esi,%r12d
  0x00007f1a59047320:   add    %r13d,%r15d
  0x00007f1a59047323:   add    %eax,%r8d
  0x00007f1a59047326:   or     %r12d,%ecx
  0x00007f1a59047329:   add    %r14d,%eax
  0x00007f1a5904732c:   add    %r15d,%r8d
  0x00007f1a5904732f:   add    %r15d,%eax
  0x00007f1a59047332:   add    %ecx,%eax
  0x00007f1a59047334:   add    $0x40,%rdx
  0x00007f1a59047338:   cmp    $0x200,%rdx
  0x00007f1a5904733f:   jb     Stub::sha256_implCompressMB+3392 0x00007f1a59047020
  0x00007f1a59047345:   mov    0x210(%rsp),%rdx
  0x00007f1a5904734d:   mov    0x208(%rsp),%rcx
  0x00007f1a59047355:   add    $0x40,%rcx
  0x00007f1a59047359:   add    (%rdx),%eax
  0x00007f1a5904735b:   mov    %eax,(%rdx)
  0x00007f1a5904735d:   add    0x4(%rdx),%ebx
  0x00007f1a59047360:   mov    %ebx,0x4(%rdx)
  0x00007f1a59047363:   add    0x8(%rdx),%edi
  0x00007f1a59047366:   mov    %edi,0x8(%rdx)
  0x00007f1a59047369:   add    0xc(%rdx),%esi
  0x00007f1a5904736c:   mov    %esi,0xc(%rdx)
  0x00007f1a5904736f:   add    0x10(%rdx),%r8d
  0x00007f1a59047373:   mov    %r8d,0x10(%rdx)
  0x00007f1a59047377:   add    0x14(%rdx),%r9d
  0x00007f1a5904737b:   mov    %r9d,0x14(%rdx)
  0x00007f1a5904737f:   add    0x18(%rdx),%r10d
  0x00007f1a59047383:   mov    %r10d,0x18(%rdx)
  0x00007f1a59047387:   add    0x1c(%rdx),%r11d
  0x00007f1a5904738b:   mov    %r11d,0x1c(%rdx)
  0x00007f1a5904738f:   cmp    0x200(%rsp),%rcx
  0x00007f1a59047397:   jb     Stub::sha256_implCompressMB+172 0x00007f1a5904638c
  0x00007f1a5904739d:   ja     Stub::sha256_implCompressMB+4402 0x00007f1a59047412
  0x00007f1a5904739f:   movabs $0x7f1a645df4c0,%rbp
  0x00007f1a590473a9:   vmovdqu (%rcx),%xmm4
  0x00007f1a590473ad:   vmovdqu 0x10(%rcx),%xmm5
  0x00007f1a590473b2:   vmovdqu 0x20(%rcx),%xmm6
  0x00007f1a590473b7:   vmovdqu 0x30(%rcx),%xmm7
  0x00007f1a590473bc:   vpshufb %xmm13,%xmm4,%xmm4
  0x00007f1a590473c1:   vpshufb %xmm13,%xmm5,%xmm5
  0x00007f1a590473c6:   vpshufb %xmm13,%xmm6,%xmm6
  0x00007f1a590473cb:   vpshufb %xmm13,%xmm7,%xmm7
  0x00007f1a590473d0:   jmpq   Stub::sha256_implCompressMB+245 0x00007f1a590463d5
  0x00007f1a590473d5:   mov    (%rdx),%eax
  0x00007f1a590473d7:   mov    0x4(%rdx),%ebx
  0x00007f1a590473da:   mov    0x8(%rdx),%edi
  0x00007f1a590473dd:   mov    0xc(%rdx),%esi
  0x00007f1a590473e0:   mov    0x10(%rdx),%r8d
  0x00007f1a590473e4:   mov    0x14(%rdx),%r9d
  0x00007f1a590473e8:   mov    0x1c(%rdx),%r11d
  0x00007f1a590473ec:   vmovdqu -0x22b4(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007f1a590473f4:   vmovdqu -0x229c(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007f1a59045160
  0x00007f1a590473fc:   vmovdqu -0x2284(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007f1a59045180
  0x00007f1a59047404:   mov    0x18(%rdx),%r10d
  0x00007f1a59047408:   mov    %rdx,0x210(%rsp)
  0x00007f1a59047410:   jmp    Stub::sha256_implCompressMB+4287 0x00007f1a5904739f
  0x00007f1a59047412:   mov    0x218(%rsp),%rsp
  0x00007f1a5904741a:   pop    %r15
  0x00007f1a5904741c:   pop    %r14
  0x00007f1a5904741e:   pop    %r13
  0x00007f1a59047420:   pop    %r12
  0x00007f1a59047422:   pop    %rbp
  0x00007f1a59047423:   pop    %rbx
  0x00007f1a59047424:   pop    %rdx
  0x00007f1a59047425:   pop    %rcx
  0x00007f1a59047426:   mov    %rdx,%rax
  0x00007f1a59047429:   cmp    %rcx,%rax
  0x00007f1a5904742c:   jae    Stub::sha256_implCompressMB+4436 0x00007f1a59047434
  0x00007f1a5904742e:   add    $0x40,%rax
  0x00007f1a59047432:   jmp    Stub::sha256_implCompressMB+4425 0x00007f1a59047429
  0x00007f1a59047434:   add    $0x20,%rsp
  0x00007f1a59047438:   vzeroupper 
  0x00007f1a5904743b:   leaveq 
  0x00007f1a5904743c:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::pshuffle_byte_flip_mask_sha512 [0x00007f1a59047440, 0x00007f1a59047480] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59047440:   (bad)  
  0x00007f1a59047441:   (bad)  
  0x00007f1a59047442:   add    $0x1020304,%eax
  0x00007f1a59047447:   add    %cl,(%rdi)
  0x00007f1a59047449:   (bad)  
  0x00007f1a5904744a:   or     $0x90a0b0c,%eax
  0x00007f1a5904744f:   or     %dl,(%rdi)
  0x00007f1a59047451:   (bad)  
  0x00007f1a59047452:   adc    $0x11121314,%eax
  0x00007f1a59047457:   adc    %bl,(%rdi)
  0x00007f1a59047459:   (bad)  
  0x00007f1a5904745a:   sbb    $0x191a1b1c,%eax
  0x00007f1a5904745f:   sbb    %al,(%rax)
  0x00007f1a59047461:   add    %al,(%rax)
  0x00007f1a59047463:   add    %al,(%rax)
  0x00007f1a59047465:   add    %al,(%rax)
  0x00007f1a59047467:   add    %al,(%rax)
  0x00007f1a59047469:   add    %al,(%rax)
  0x00007f1a5904746b:   add    %al,(%rax)
  0x00007f1a5904746d:   add    %al,(%rax)
  0x00007f1a5904746f:   add    %bh,%bh
  0x00007f1a59047471:   (bad)  
  0x00007f1a59047472:   (bad)  
  0x00007f1a59047473:   (bad)  
  0x00007f1a59047474:   (bad)  
  0x00007f1a59047475:   (bad)  
  0x00007f1a59047476:   (bad)  
  0x00007f1a59047477:   (bad)  
  0x00007f1a59047478:   (bad)  
  0x00007f1a59047479:   (bad)  
  0x00007f1a5904747a:   (bad)  
  0x00007f1a5904747b:   (bad)  
  0x00007f1a5904747c:   (bad)  
  0x00007f1a5904747d:   (bad)  
  0x00007f1a5904747e:   (bad)  
  0x00007f1a5904747f:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha512_implCompress [0x00007f1a59047480, 0x00007f1a59048295] (3605 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59047480:   push   %rbp
  0x00007f1a59047481:   mov    %rsp,%rbp
  0x00007f1a59047484:   push   %rdx
  0x00007f1a59047485:   push   %rcx
  0x00007f1a59047486:   mov    %rsp,%rax
  0x00007f1a59047489:   sub    $0x70,%rsp
  0x00007f1a5904748d:   and    $0xffffffffffffffe0,%rsp
  0x00007f1a59047491:   mov    %rax,0x38(%rsp)
  0x00007f1a59047496:   mov    %rbp,0x40(%rsp)
  0x00007f1a5904749b:   mov    %rbx,0x48(%rsp)
  0x00007f1a590474a0:   mov    %r12,0x50(%rsp)
  0x00007f1a590474a5:   mov    %r13,0x58(%rsp)
  0x00007f1a590474aa:   mov    %r14,0x60(%rsp)
  0x00007f1a590474af:   mov    %r15,0x68(%rsp)
  0x00007f1a590474b4:   vpblendd $0xf0,%xmm1,%xmm0,%xmm0
  0x00007f1a590474ba:   vpblendd $0xf0,%ymm1,%ymm0,%ymm0
  0x00007f1a590474c0:   xor    %rdx,%rdx
  0x00007f1a590474c3:   add    $0x80,%rdx
  0x00007f1a590474ca:   add    %rdi,%rdx
  0x00007f1a590474cd:   mov    %rdx,0x30(%rsp)
  0x00007f1a590474d2:   mov    (%rsi),%rax
  0x00007f1a590474d5:   mov    0x8(%rsi),%rbx
  0x00007f1a590474d9:   mov    0x10(%rsi),%rcx
  0x00007f1a590474dd:   mov    0x18(%rsi),%r8
  0x00007f1a590474e1:   mov    0x20(%rsi),%rdx
  0x00007f1a590474e5:   mov    0x28(%rsi),%r9
  0x00007f1a590474e9:   mov    0x38(%rsi),%r11
  0x00007f1a590474ed:   vmovdqu -0xb5(%rip),%ymm9        # Stub::pshuffle_byte_flip_mask_sha512
  0x00007f1a590474f5:   vmovdqu -0x9d(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask_sha512+32 0x00007f1a59047460
  0x00007f1a590474fd:   mov    0x30(%rsi),%r10
  0x00007f1a59047501:   movabs $0x7f1a6458a140,%rbp
  0x00007f1a5904750b:   vmovdqu (%rdi),%ymm4
  0x00007f1a5904750f:   vpshufb %ymm9,%ymm4,%ymm4
  0x00007f1a59047514:   vmovdqu 0x20(%rdi),%ymm5
  0x00007f1a59047519:   vpshufb %ymm9,%ymm5,%ymm5
  0x00007f1a5904751e:   vmovdqu 0x40(%rdi),%ymm6
  0x00007f1a59047523:   vpshufb %ymm9,%ymm6,%ymm6
  0x00007f1a59047528:   vmovdqu 0x60(%rdi),%ymm7
  0x00007f1a5904752d:   vpshufb %ymm9,%ymm7,%ymm7
  0x00007f1a59047532:   mov    %rdi,0x28(%rsp)
  0x00007f1a59047537:   movq   $0x4,0x20(%rsp)
  0x00007f1a59047540:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007f1a59047545:   vmovdqu %ymm0,(%rsp)
  0x00007f1a5904754a:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm0
  0x00007f1a59047550:   vpalignr $0x8,%ymm6,%ymm0,%ymm0
  0x00007f1a59047556:   vpaddq %ymm4,%ymm0,%ymm0
  0x00007f1a5904755a:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm1
  0x00007f1a59047560:   vpalignr $0x8,%ymm4,%ymm1,%ymm1
  0x00007f1a59047566:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f1a5904756b:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f1a59047570:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a59047574:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f1a59047579:   mov    %rax,%rdi
  0x00007f1a5904757c:   rorx   $0x29,%rdx,%r13
  0x00007f1a59047582:   rorx   $0x12,%rdx,%r14
  0x00007f1a59047588:   add    (%rsp),%r11
  0x00007f1a5904758c:   or     %rcx,%rdi
  0x00007f1a5904758f:   mov    %r9,%r15
  0x00007f1a59047592:   xor    %r10,%r15
  0x00007f1a59047595:   rorx   $0x22,%rax,%r12
  0x00007f1a5904759b:   xor    %r14,%r13
  0x00007f1a5904759e:   rorx   $0xe,%rdx,%r14
  0x00007f1a590475a4:   and    %rdx,%r15
  0x00007f1a590475a7:   add    %r11,%r8
  0x00007f1a590475aa:   and    %rbx,%rdi
  0x00007f1a590475ad:   xor    %r14,%r13
  0x00007f1a590475b0:   rorx   $0x27,%rax,%r14
  0x00007f1a590475b6:   xor    %r12,%r14
  0x00007f1a590475b9:   rorx   $0x1c,%rax,%r12
  0x00007f1a590475bf:   xor    %r10,%r15
  0x00007f1a590475c2:   xor    %r12,%r14
  0x00007f1a590475c5:   mov    %rax,%r12
  0x00007f1a590475c8:   and    %rcx,%r12
  0x00007f1a590475cb:   add    %r13,%r15
  0x00007f1a590475ce:   or     %r12,%rdi
  0x00007f1a590475d1:   add    %r14,%r11
  0x00007f1a590475d4:   add    %r15,%r8
  0x00007f1a590475d7:   add    %r15,%r11
  0x00007f1a590475da:   add    %rdi,%r11
  0x00007f1a590475dd:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f1a590475e2:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f1a590475e7:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f1a590475eb:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f1a590475f0:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f1a590475f4:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f1a590475f8:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm4
  0x00007f1a590475fe:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f1a59047603:   vperm2f128 $0x11,%ymm7,%ymm7,%ymm2
  0x00007f1a59047609:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f1a5904760e:   mov    %r11,%rdi
  0x00007f1a59047611:   rorx   $0x29,%r8,%r13
  0x00007f1a59047617:   rorx   $0x12,%r8,%r14
  0x00007f1a5904761d:   add    0x8(%rsp),%r10
  0x00007f1a59047622:   or     %rbx,%rdi
  0x00007f1a59047625:   mov    %rdx,%r15
  0x00007f1a59047628:   xor    %r9,%r15
  0x00007f1a5904762b:   rorx   $0x22,%r11,%r12
  0x00007f1a59047631:   xor    %r14,%r13
  0x00007f1a59047634:   rorx   $0xe,%r8,%r14
  0x00007f1a5904763a:   and    %r8,%r15
  0x00007f1a5904763d:   add    %r10,%rcx
  0x00007f1a59047640:   and    %rax,%rdi
  0x00007f1a59047643:   xor    %r14,%r13
  0x00007f1a59047646:   rorx   $0x27,%r11,%r14
  0x00007f1a5904764c:   xor    %r12,%r14
  0x00007f1a5904764f:   rorx   $0x1c,%r11,%r12
  0x00007f1a59047655:   xor    %r9,%r15
  0x00007f1a59047658:   xor    %r12,%r14
  0x00007f1a5904765b:   mov    %r11,%r12
  0x00007f1a5904765e:   and    %rbx,%r12
  0x00007f1a59047661:   add    %r13,%r15
  0x00007f1a59047664:   or     %r12,%rdi
  0x00007f1a59047667:   add    %r14,%r10
  0x00007f1a5904766a:   add    %r15,%rcx
  0x00007f1a5904766d:   add    %r15,%r10
  0x00007f1a59047670:   add    %rdi,%r10
  0x00007f1a59047673:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59047678:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f1a5904767d:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047681:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047685:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f1a5904768a:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f1a5904768f:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047693:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047697:   vpaddq %ymm8,%ymm4,%ymm4
  0x00007f1a5904769c:   vpsrlq $0x6,%ymm4,%ymm8
  0x00007f1a590476a1:   mov    %r10,%rdi
  0x00007f1a590476a4:   rorx   $0x29,%rcx,%r13
  0x00007f1a590476aa:   rorx   $0x12,%rcx,%r14
  0x00007f1a590476b0:   add    0x10(%rsp),%r9
  0x00007f1a590476b5:   or     %rax,%rdi
  0x00007f1a590476b8:   mov    %r8,%r15
  0x00007f1a590476bb:   xor    %rdx,%r15
  0x00007f1a590476be:   rorx   $0x22,%r10,%r12
  0x00007f1a590476c4:   xor    %r14,%r13
  0x00007f1a590476c7:   rorx   $0xe,%rcx,%r14
  0x00007f1a590476cd:   and    %rcx,%r15
  0x00007f1a590476d0:   add    %r9,%rbx
  0x00007f1a590476d3:   and    %r11,%rdi
  0x00007f1a590476d6:   xor    %r14,%r13
  0x00007f1a590476d9:   rorx   $0x27,%r10,%r14
  0x00007f1a590476df:   xor    %r12,%r14
  0x00007f1a590476e2:   rorx   $0x1c,%r10,%r12
  0x00007f1a590476e8:   xor    %rdx,%r15
  0x00007f1a590476eb:   xor    %r12,%r14
  0x00007f1a590476ee:   mov    %r10,%r12
  0x00007f1a590476f1:   and    %rax,%r12
  0x00007f1a590476f4:   add    %r13,%r15
  0x00007f1a590476f7:   or     %r12,%rdi
  0x00007f1a590476fa:   add    %r14,%r9
  0x00007f1a590476fd:   add    %r15,%rbx
  0x00007f1a59047700:   add    %r15,%r9
  0x00007f1a59047703:   add    %rdi,%r9
  0x00007f1a59047706:   vpsrlq $0x13,%ymm4,%ymm3
  0x00007f1a5904770b:   vpsllq $0x2d,%ymm4,%ymm1
  0x00007f1a59047710:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047714:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047718:   vpsrlq $0x3d,%ymm4,%ymm3
  0x00007f1a5904771d:   vpsllq $0x3,%ymm4,%ymm1
  0x00007f1a59047722:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047726:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a5904772a:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f1a5904772f:   vpblendd $0xf0,%ymm2,%ymm4,%ymm4
  0x00007f1a59047735:   mov    %r9,%rdi
  0x00007f1a59047738:   rorx   $0x29,%rbx,%r13
  0x00007f1a5904773e:   rorx   $0x12,%rbx,%r14
  0x00007f1a59047744:   add    0x18(%rsp),%rdx
  0x00007f1a59047749:   or     %r11,%rdi
  0x00007f1a5904774c:   mov    %rcx,%r15
  0x00007f1a5904774f:   xor    %r8,%r15
  0x00007f1a59047752:   rorx   $0x22,%r9,%r12
  0x00007f1a59047758:   xor    %r14,%r13
  0x00007f1a5904775b:   rorx   $0xe,%rbx,%r14
  0x00007f1a59047761:   and    %rbx,%r15
  0x00007f1a59047764:   add    %rdx,%rax
  0x00007f1a59047767:   and    %r10,%rdi
  0x00007f1a5904776a:   xor    %r14,%r13
  0x00007f1a5904776d:   rorx   $0x27,%r9,%r14
  0x00007f1a59047773:   xor    %r12,%r14
  0x00007f1a59047776:   rorx   $0x1c,%r9,%r12
  0x00007f1a5904777c:   xor    %r8,%r15
  0x00007f1a5904777f:   xor    %r12,%r14
  0x00007f1a59047782:   mov    %r9,%r12
  0x00007f1a59047785:   and    %r11,%r12
  0x00007f1a59047788:   add    %r13,%r15
  0x00007f1a5904778b:   or     %r12,%rdi
  0x00007f1a5904778e:   add    %r14,%rdx
  0x00007f1a59047791:   add    %r15,%rax
  0x00007f1a59047794:   add    %r15,%rdx
  0x00007f1a59047797:   add    %rdi,%rdx
  0x00007f1a5904779a:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007f1a5904779f:   vmovdqu %ymm0,(%rsp)
  0x00007f1a590477a4:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm0
  0x00007f1a590477aa:   vpalignr $0x8,%ymm7,%ymm0,%ymm0
  0x00007f1a590477b0:   vpaddq %ymm5,%ymm0,%ymm0
  0x00007f1a590477b4:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm1
  0x00007f1a590477ba:   vpalignr $0x8,%ymm5,%ymm1,%ymm1
  0x00007f1a590477c0:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f1a590477c5:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f1a590477ca:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a590477ce:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f1a590477d3:   mov    %rdx,%rdi
  0x00007f1a590477d6:   rorx   $0x29,%rax,%r13
  0x00007f1a590477dc:   rorx   $0x12,%rax,%r14
  0x00007f1a590477e2:   add    (%rsp),%r8
  0x00007f1a590477e6:   or     %r10,%rdi
  0x00007f1a590477e9:   mov    %rbx,%r15
  0x00007f1a590477ec:   xor    %rcx,%r15
  0x00007f1a590477ef:   rorx   $0x22,%rdx,%r12
  0x00007f1a590477f5:   xor    %r14,%r13
  0x00007f1a590477f8:   rorx   $0xe,%rax,%r14
  0x00007f1a590477fe:   and    %rax,%r15
  0x00007f1a59047801:   add    %r8,%r11
  0x00007f1a59047804:   and    %r9,%rdi
  0x00007f1a59047807:   xor    %r14,%r13
  0x00007f1a5904780a:   rorx   $0x27,%rdx,%r14
  0x00007f1a59047810:   xor    %r12,%r14
  0x00007f1a59047813:   rorx   $0x1c,%rdx,%r12
  0x00007f1a59047819:   xor    %rcx,%r15
  0x00007f1a5904781c:   xor    %r12,%r14
  0x00007f1a5904781f:   mov    %rdx,%r12
  0x00007f1a59047822:   and    %r10,%r12
  0x00007f1a59047825:   add    %r13,%r15
  0x00007f1a59047828:   or     %r12,%rdi
  0x00007f1a5904782b:   add    %r14,%r8
  0x00007f1a5904782e:   add    %r15,%r11
  0x00007f1a59047831:   add    %r15,%r8
  0x00007f1a59047834:   add    %rdi,%r8
  0x00007f1a59047837:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f1a5904783c:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f1a59047841:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f1a59047845:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f1a5904784a:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f1a5904784e:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f1a59047852:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm5
  0x00007f1a59047858:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f1a5904785d:   vperm2f128 $0x11,%ymm4,%ymm4,%ymm2
  0x00007f1a59047863:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f1a59047868:   mov    %r8,%rdi
  0x00007f1a5904786b:   rorx   $0x29,%r11,%r13
  0x00007f1a59047871:   rorx   $0x12,%r11,%r14
  0x00007f1a59047877:   add    0x8(%rsp),%rcx
  0x00007f1a5904787c:   or     %r9,%rdi
  0x00007f1a5904787f:   mov    %rax,%r15
  0x00007f1a59047882:   xor    %rbx,%r15
  0x00007f1a59047885:   rorx   $0x22,%r8,%r12
  0x00007f1a5904788b:   xor    %r14,%r13
  0x00007f1a5904788e:   rorx   $0xe,%r11,%r14
  0x00007f1a59047894:   and    %r11,%r15
  0x00007f1a59047897:   add    %rcx,%r10
  0x00007f1a5904789a:   and    %rdx,%rdi
  0x00007f1a5904789d:   xor    %r14,%r13
  0x00007f1a590478a0:   rorx   $0x27,%r8,%r14
  0x00007f1a590478a6:   xor    %r12,%r14
  0x00007f1a590478a9:   rorx   $0x1c,%r8,%r12
  0x00007f1a590478af:   xor    %rbx,%r15
  0x00007f1a590478b2:   xor    %r12,%r14
  0x00007f1a590478b5:   mov    %r8,%r12
  0x00007f1a590478b8:   and    %r9,%r12
  0x00007f1a590478bb:   add    %r13,%r15
  0x00007f1a590478be:   or     %r12,%rdi
  0x00007f1a590478c1:   add    %r14,%rcx
  0x00007f1a590478c4:   add    %r15,%r10
  0x00007f1a590478c7:   add    %r15,%rcx
  0x00007f1a590478ca:   add    %rdi,%rcx
  0x00007f1a590478cd:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a590478d2:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f1a590478d7:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a590478db:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a590478df:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f1a590478e4:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f1a590478e9:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a590478ed:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a590478f1:   vpaddq %ymm8,%ymm5,%ymm5
  0x00007f1a590478f6:   vpsrlq $0x6,%ymm5,%ymm8
  0x00007f1a590478fb:   mov    %rcx,%rdi
  0x00007f1a590478fe:   rorx   $0x29,%r10,%r13
  0x00007f1a59047904:   rorx   $0x12,%r10,%r14
  0x00007f1a5904790a:   add    0x10(%rsp),%rbx
  0x00007f1a5904790f:   or     %rdx,%rdi
  0x00007f1a59047912:   mov    %r11,%r15
  0x00007f1a59047915:   xor    %rax,%r15
  0x00007f1a59047918:   rorx   $0x22,%rcx,%r12
  0x00007f1a5904791e:   xor    %r14,%r13
  0x00007f1a59047921:   rorx   $0xe,%r10,%r14
  0x00007f1a59047927:   and    %r10,%r15
  0x00007f1a5904792a:   add    %rbx,%r9
  0x00007f1a5904792d:   and    %r8,%rdi
  0x00007f1a59047930:   xor    %r14,%r13
  0x00007f1a59047933:   rorx   $0x27,%rcx,%r14
  0x00007f1a59047939:   xor    %r12,%r14
  0x00007f1a5904793c:   rorx   $0x1c,%rcx,%r12
  0x00007f1a59047942:   xor    %rax,%r15
  0x00007f1a59047945:   xor    %r12,%r14
  0x00007f1a59047948:   mov    %rcx,%r12
  0x00007f1a5904794b:   and    %rdx,%r12
  0x00007f1a5904794e:   add    %r13,%r15
  0x00007f1a59047951:   or     %r12,%rdi
  0x00007f1a59047954:   add    %r14,%rbx
  0x00007f1a59047957:   add    %r15,%r9
  0x00007f1a5904795a:   add    %r15,%rbx
  0x00007f1a5904795d:   add    %rdi,%rbx
  0x00007f1a59047960:   vpsrlq $0x13,%ymm5,%ymm3
  0x00007f1a59047965:   vpsllq $0x2d,%ymm5,%ymm1
  0x00007f1a5904796a:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a5904796e:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047972:   vpsrlq $0x3d,%ymm5,%ymm3
  0x00007f1a59047977:   vpsllq $0x3,%ymm5,%ymm1
  0x00007f1a5904797c:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047980:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047984:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f1a59047989:   vpblendd $0xf0,%ymm2,%ymm5,%ymm5
  0x00007f1a5904798f:   mov    %rbx,%rdi
  0x00007f1a59047992:   rorx   $0x29,%r9,%r13
  0x00007f1a59047998:   rorx   $0x12,%r9,%r14
  0x00007f1a5904799e:   add    0x18(%rsp),%rax
  0x00007f1a590479a3:   or     %r8,%rdi
  0x00007f1a590479a6:   mov    %r10,%r15
  0x00007f1a590479a9:   xor    %r11,%r15
  0x00007f1a590479ac:   rorx   $0x22,%rbx,%r12
  0x00007f1a590479b2:   xor    %r14,%r13
  0x00007f1a590479b5:   rorx   $0xe,%r9,%r14
  0x00007f1a590479bb:   and    %r9,%r15
  0x00007f1a590479be:   add    %rax,%rdx
  0x00007f1a590479c1:   and    %rcx,%rdi
  0x00007f1a590479c4:   xor    %r14,%r13
  0x00007f1a590479c7:   rorx   $0x27,%rbx,%r14
  0x00007f1a590479cd:   xor    %r12,%r14
  0x00007f1a590479d0:   rorx   $0x1c,%rbx,%r12
  0x00007f1a590479d6:   xor    %r11,%r15
  0x00007f1a590479d9:   xor    %r12,%r14
  0x00007f1a590479dc:   mov    %rbx,%r12
  0x00007f1a590479df:   and    %r8,%r12
  0x00007f1a590479e2:   add    %r13,%r15
  0x00007f1a590479e5:   or     %r12,%rdi
  0x00007f1a590479e8:   add    %r14,%rax
  0x00007f1a590479eb:   add    %r15,%rdx
  0x00007f1a590479ee:   add    %r15,%rax
  0x00007f1a590479f1:   add    %rdi,%rax
  0x00007f1a590479f4:   vpaddq 0x40(%rbp),%ymm6,%ymm0
  0x00007f1a590479f9:   vmovdqu %ymm0,(%rsp)
  0x00007f1a590479fe:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm0
  0x00007f1a59047a04:   vpalignr $0x8,%ymm4,%ymm0,%ymm0
  0x00007f1a59047a0a:   vpaddq %ymm6,%ymm0,%ymm0
  0x00007f1a59047a0e:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm1
  0x00007f1a59047a14:   vpalignr $0x8,%ymm6,%ymm1,%ymm1
  0x00007f1a59047a1a:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f1a59047a1f:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f1a59047a24:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a59047a28:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f1a59047a2d:   mov    %rax,%rdi
  0x00007f1a59047a30:   rorx   $0x29,%rdx,%r13
  0x00007f1a59047a36:   rorx   $0x12,%rdx,%r14
  0x00007f1a59047a3c:   add    (%rsp),%r11
  0x00007f1a59047a40:   or     %rcx,%rdi
  0x00007f1a59047a43:   mov    %r9,%r15
  0x00007f1a59047a46:   xor    %r10,%r15
  0x00007f1a59047a49:   rorx   $0x22,%rax,%r12
  0x00007f1a59047a4f:   xor    %r14,%r13
  0x00007f1a59047a52:   rorx   $0xe,%rdx,%r14
  0x00007f1a59047a58:   and    %rdx,%r15
  0x00007f1a59047a5b:   add    %r11,%r8
  0x00007f1a59047a5e:   and    %rbx,%rdi
  0x00007f1a59047a61:   xor    %r14,%r13
  0x00007f1a59047a64:   rorx   $0x27,%rax,%r14
  0x00007f1a59047a6a:   xor    %r12,%r14
  0x00007f1a59047a6d:   rorx   $0x1c,%rax,%r12
  0x00007f1a59047a73:   xor    %r10,%r15
  0x00007f1a59047a76:   xor    %r12,%r14
  0x00007f1a59047a79:   mov    %rax,%r12
  0x00007f1a59047a7c:   and    %rcx,%r12
  0x00007f1a59047a7f:   add    %r13,%r15
  0x00007f1a59047a82:   or     %r12,%rdi
  0x00007f1a59047a85:   add    %r14,%r11
  0x00007f1a59047a88:   add    %r15,%r8
  0x00007f1a59047a8b:   add    %r15,%r11
  0x00007f1a59047a8e:   add    %rdi,%r11
  0x00007f1a59047a91:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f1a59047a96:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f1a59047a9b:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f1a59047a9f:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f1a59047aa4:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f1a59047aa8:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f1a59047aac:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm6
  0x00007f1a59047ab2:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f1a59047ab7:   vperm2f128 $0x11,%ymm5,%ymm5,%ymm2
  0x00007f1a59047abd:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f1a59047ac2:   mov    %r11,%rdi
  0x00007f1a59047ac5:   rorx   $0x29,%r8,%r13
  0x00007f1a59047acb:   rorx   $0x12,%r8,%r14
  0x00007f1a59047ad1:   add    0x8(%rsp),%r10
  0x00007f1a59047ad6:   or     %rbx,%rdi
  0x00007f1a59047ad9:   mov    %rdx,%r15
  0x00007f1a59047adc:   xor    %r9,%r15
  0x00007f1a59047adf:   rorx   $0x22,%r11,%r12
  0x00007f1a59047ae5:   xor    %r14,%r13
  0x00007f1a59047ae8:   rorx   $0xe,%r8,%r14
  0x00007f1a59047aee:   and    %r8,%r15
  0x00007f1a59047af1:   add    %r10,%rcx
  0x00007f1a59047af4:   and    %rax,%rdi
  0x00007f1a59047af7:   xor    %r14,%r13
  0x00007f1a59047afa:   rorx   $0x27,%r11,%r14
  0x00007f1a59047b00:   xor    %r12,%r14
  0x00007f1a59047b03:   rorx   $0x1c,%r11,%r12
  0x00007f1a59047b09:   xor    %r9,%r15
  0x00007f1a59047b0c:   xor    %r12,%r14
  0x00007f1a59047b0f:   mov    %r11,%r12
  0x00007f1a59047b12:   and    %rbx,%r12
  0x00007f1a59047b15:   add    %r13,%r15
  0x00007f1a59047b18:   or     %r12,%rdi
  0x00007f1a59047b1b:   add    %r14,%r10
  0x00007f1a59047b1e:   add    %r15,%rcx
  0x00007f1a59047b21:   add    %r15,%r10
  0x00007f1a59047b24:   add    %rdi,%r10
  0x00007f1a59047b27:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59047b2c:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f1a59047b31:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047b35:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047b39:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f1a59047b3e:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f1a59047b43:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047b47:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047b4b:   vpaddq %ymm8,%ymm6,%ymm6
  0x00007f1a59047b50:   vpsrlq $0x6,%ymm6,%ymm8
  0x00007f1a59047b55:   mov    %r10,%rdi
  0x00007f1a59047b58:   rorx   $0x29,%rcx,%r13
  0x00007f1a59047b5e:   rorx   $0x12,%rcx,%r14
  0x00007f1a59047b64:   add    0x10(%rsp),%r9
  0x00007f1a59047b69:   or     %rax,%rdi
  0x00007f1a59047b6c:   mov    %r8,%r15
  0x00007f1a59047b6f:   xor    %rdx,%r15
  0x00007f1a59047b72:   rorx   $0x22,%r10,%r12
  0x00007f1a59047b78:   xor    %r14,%r13
  0x00007f1a59047b7b:   rorx   $0xe,%rcx,%r14
  0x00007f1a59047b81:   and    %rcx,%r15
  0x00007f1a59047b84:   add    %r9,%rbx
  0x00007f1a59047b87:   and    %r11,%rdi
  0x00007f1a59047b8a:   xor    %r14,%r13
  0x00007f1a59047b8d:   rorx   $0x27,%r10,%r14
  0x00007f1a59047b93:   xor    %r12,%r14
  0x00007f1a59047b96:   rorx   $0x1c,%r10,%r12
  0x00007f1a59047b9c:   xor    %rdx,%r15
  0x00007f1a59047b9f:   xor    %r12,%r14
  0x00007f1a59047ba2:   mov    %r10,%r12
  0x00007f1a59047ba5:   and    %rax,%r12
  0x00007f1a59047ba8:   add    %r13,%r15
  0x00007f1a59047bab:   or     %r12,%rdi
  0x00007f1a59047bae:   add    %r14,%r9
  0x00007f1a59047bb1:   add    %r15,%rbx
  0x00007f1a59047bb4:   add    %r15,%r9
  0x00007f1a59047bb7:   add    %rdi,%r9
  0x00007f1a59047bba:   vpsrlq $0x13,%ymm6,%ymm3
  0x00007f1a59047bbf:   vpsllq $0x2d,%ymm6,%ymm1
  0x00007f1a59047bc4:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047bc8:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047bcc:   vpsrlq $0x3d,%ymm6,%ymm3
  0x00007f1a59047bd1:   vpsllq $0x3,%ymm6,%ymm1
  0x00007f1a59047bd6:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047bda:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047bde:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f1a59047be3:   vpblendd $0xf0,%ymm2,%ymm6,%ymm6
  0x00007f1a59047be9:   mov    %r9,%rdi
  0x00007f1a59047bec:   rorx   $0x29,%rbx,%r13
  0x00007f1a59047bf2:   rorx   $0x12,%rbx,%r14
  0x00007f1a59047bf8:   add    0x18(%rsp),%rdx
  0x00007f1a59047bfd:   or     %r11,%rdi
  0x00007f1a59047c00:   mov    %rcx,%r15
  0x00007f1a59047c03:   xor    %r8,%r15
  0x00007f1a59047c06:   rorx   $0x22,%r9,%r12
  0x00007f1a59047c0c:   xor    %r14,%r13
  0x00007f1a59047c0f:   rorx   $0xe,%rbx,%r14
  0x00007f1a59047c15:   and    %rbx,%r15
  0x00007f1a59047c18:   add    %rdx,%rax
  0x00007f1a59047c1b:   and    %r10,%rdi
  0x00007f1a59047c1e:   xor    %r14,%r13
  0x00007f1a59047c21:   rorx   $0x27,%r9,%r14
  0x00007f1a59047c27:   xor    %r12,%r14
  0x00007f1a59047c2a:   rorx   $0x1c,%r9,%r12
  0x00007f1a59047c30:   xor    %r8,%r15
  0x00007f1a59047c33:   xor    %r12,%r14
  0x00007f1a59047c36:   mov    %r9,%r12
  0x00007f1a59047c39:   and    %r11,%r12
  0x00007f1a59047c3c:   add    %r13,%r15
  0x00007f1a59047c3f:   or     %r12,%rdi
  0x00007f1a59047c42:   add    %r14,%rdx
  0x00007f1a59047c45:   add    %r15,%rax
  0x00007f1a59047c48:   add    %r15,%rdx
  0x00007f1a59047c4b:   add    %rdi,%rdx
  0x00007f1a59047c4e:   vpaddq 0x60(%rbp),%ymm7,%ymm0
  0x00007f1a59047c53:   vmovdqu %ymm0,(%rsp)
  0x00007f1a59047c58:   add    $0x80,%rbp
  0x00007f1a59047c5f:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm0
  0x00007f1a59047c65:   vpalignr $0x8,%ymm5,%ymm0,%ymm0
  0x00007f1a59047c6b:   vpaddq %ymm7,%ymm0,%ymm0
  0x00007f1a59047c6f:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm1
  0x00007f1a59047c75:   vpalignr $0x8,%ymm7,%ymm1,%ymm1
  0x00007f1a59047c7b:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f1a59047c80:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f1a59047c85:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a59047c89:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f1a59047c8e:   mov    %rdx,%rdi
  0x00007f1a59047c91:   rorx   $0x29,%rax,%r13
  0x00007f1a59047c97:   rorx   $0x12,%rax,%r14
  0x00007f1a59047c9d:   add    (%rsp),%r8
  0x00007f1a59047ca1:   or     %r10,%rdi
  0x00007f1a59047ca4:   mov    %rbx,%r15
  0x00007f1a59047ca7:   xor    %rcx,%r15
  0x00007f1a59047caa:   rorx   $0x22,%rdx,%r12
  0x00007f1a59047cb0:   xor    %r14,%r13
  0x00007f1a59047cb3:   rorx   $0xe,%rax,%r14
  0x00007f1a59047cb9:   and    %rax,%r15
  0x00007f1a59047cbc:   add    %r8,%r11
  0x00007f1a59047cbf:   and    %r9,%rdi
  0x00007f1a59047cc2:   xor    %r14,%r13
  0x00007f1a59047cc5:   rorx   $0x27,%rdx,%r14
  0x00007f1a59047ccb:   xor    %r12,%r14
  0x00007f1a59047cce:   rorx   $0x1c,%rdx,%r12
  0x00007f1a59047cd4:   xor    %rcx,%r15
  0x00007f1a59047cd7:   xor    %r12,%r14
  0x00007f1a59047cda:   mov    %rdx,%r12
  0x00007f1a59047cdd:   and    %r10,%r12
  0x00007f1a59047ce0:   add    %r13,%r15
  0x00007f1a59047ce3:   or     %r12,%rdi
  0x00007f1a59047ce6:   add    %r14,%r8
  0x00007f1a59047ce9:   add    %r15,%r11
  0x00007f1a59047cec:   add    %r15,%r8
  0x00007f1a59047cef:   add    %rdi,%r8
  0x00007f1a59047cf2:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f1a59047cf7:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f1a59047cfc:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f1a59047d00:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f1a59047d05:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f1a59047d09:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f1a59047d0d:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm7
  0x00007f1a59047d13:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f1a59047d18:   vperm2f128 $0x11,%ymm6,%ymm6,%ymm2
  0x00007f1a59047d1e:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f1a59047d23:   mov    %r8,%rdi
  0x00007f1a59047d26:   rorx   $0x29,%r11,%r13
  0x00007f1a59047d2c:   rorx   $0x12,%r11,%r14
  0x00007f1a59047d32:   add    0x8(%rsp),%rcx
  0x00007f1a59047d37:   or     %r9,%rdi
  0x00007f1a59047d3a:   mov    %rax,%r15
  0x00007f1a59047d3d:   xor    %rbx,%r15
  0x00007f1a59047d40:   rorx   $0x22,%r8,%r12
  0x00007f1a59047d46:   xor    %r14,%r13
  0x00007f1a59047d49:   rorx   $0xe,%r11,%r14
  0x00007f1a59047d4f:   and    %r11,%r15
  0x00007f1a59047d52:   add    %rcx,%r10
  0x00007f1a59047d55:   and    %rdx,%rdi
  0x00007f1a59047d58:   xor    %r14,%r13
  0x00007f1a59047d5b:   rorx   $0x27,%r8,%r14
  0x00007f1a59047d61:   xor    %r12,%r14
  0x00007f1a59047d64:   rorx   $0x1c,%r8,%r12
  0x00007f1a59047d6a:   xor    %rbx,%r15
  0x00007f1a59047d6d:   xor    %r12,%r14
  0x00007f1a59047d70:   mov    %r8,%r12
  0x00007f1a59047d73:   and    %r9,%r12
  0x00007f1a59047d76:   add    %r13,%r15
  0x00007f1a59047d79:   or     %r12,%rdi
  0x00007f1a59047d7c:   add    %r14,%rcx
  0x00007f1a59047d7f:   add    %r15,%r10
  0x00007f1a59047d82:   add    %r15,%rcx
  0x00007f1a59047d85:   add    %rdi,%rcx
  0x00007f1a59047d88:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59047d8d:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f1a59047d92:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047d96:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047d9a:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f1a59047d9f:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f1a59047da4:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047da8:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047dac:   vpaddq %ymm8,%ymm7,%ymm7
  0x00007f1a59047db1:   vpsrlq $0x6,%ymm7,%ymm8
  0x00007f1a59047db6:   mov    %rcx,%rdi
  0x00007f1a59047db9:   rorx   $0x29,%r10,%r13
  0x00007f1a59047dbf:   rorx   $0x12,%r10,%r14
  0x00007f1a59047dc5:   add    0x10(%rsp),%rbx
  0x00007f1a59047dca:   or     %rdx,%rdi
  0x00007f1a59047dcd:   mov    %r11,%r15
  0x00007f1a59047dd0:   xor    %rax,%r15
  0x00007f1a59047dd3:   rorx   $0x22,%rcx,%r12
  0x00007f1a59047dd9:   xor    %r14,%r13
  0x00007f1a59047ddc:   rorx   $0xe,%r10,%r14
  0x00007f1a59047de2:   and    %r10,%r15
  0x00007f1a59047de5:   add    %rbx,%r9
  0x00007f1a59047de8:   and    %r8,%rdi
  0x00007f1a59047deb:   xor    %r14,%r13
  0x00007f1a59047dee:   rorx   $0x27,%rcx,%r14
  0x00007f1a59047df4:   xor    %r12,%r14
  0x00007f1a59047df7:   rorx   $0x1c,%rcx,%r12
  0x00007f1a59047dfd:   xor    %rax,%r15
  0x00007f1a59047e00:   xor    %r12,%r14
  0x00007f1a59047e03:   mov    %rcx,%r12
  0x00007f1a59047e06:   and    %rdx,%r12
  0x00007f1a59047e09:   add    %r13,%r15
  0x00007f1a59047e0c:   or     %r12,%rdi
  0x00007f1a59047e0f:   add    %r14,%rbx
  0x00007f1a59047e12:   add    %r15,%r9
  0x00007f1a59047e15:   add    %r15,%rbx
  0x00007f1a59047e18:   add    %rdi,%rbx
  0x00007f1a59047e1b:   vpsrlq $0x13,%ymm7,%ymm3
  0x00007f1a59047e20:   vpsllq $0x2d,%ymm7,%ymm1
  0x00007f1a59047e25:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047e29:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047e2d:   vpsrlq $0x3d,%ymm7,%ymm3
  0x00007f1a59047e32:   vpsllq $0x3,%ymm7,%ymm1
  0x00007f1a59047e37:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59047e3b:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59047e3f:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f1a59047e44:   vpblendd $0xf0,%ymm2,%ymm7,%ymm7
  0x00007f1a59047e4a:   mov    %rbx,%rdi
  0x00007f1a59047e4d:   rorx   $0x29,%r9,%r13
  0x00007f1a59047e53:   rorx   $0x12,%r9,%r14
  0x00007f1a59047e59:   add    0x18(%rsp),%rax
  0x00007f1a59047e5e:   or     %r8,%rdi
  0x00007f1a59047e61:   mov    %r10,%r15
  0x00007f1a59047e64:   xor    %r11,%r15
  0x00007f1a59047e67:   rorx   $0x22,%rbx,%r12
  0x00007f1a59047e6d:   xor    %r14,%r13
  0x00007f1a59047e70:   rorx   $0xe,%r9,%r14
  0x00007f1a59047e76:   and    %r9,%r15
  0x00007f1a59047e79:   add    %rax,%rdx
  0x00007f1a59047e7c:   and    %rcx,%rdi
  0x00007f1a59047e7f:   xor    %r14,%r13
  0x00007f1a59047e82:   rorx   $0x27,%rbx,%r14
  0x00007f1a59047e88:   xor    %r12,%r14
  0x00007f1a59047e8b:   rorx   $0x1c,%rbx,%r12
  0x00007f1a59047e91:   xor    %r11,%r15
  0x00007f1a59047e94:   xor    %r12,%r14
  0x00007f1a59047e97:   mov    %rbx,%r12
  0x00007f1a59047e9a:   and    %r8,%r12
  0x00007f1a59047e9d:   add    %r13,%r15
  0x00007f1a59047ea0:   or     %r12,%rdi
  0x00007f1a59047ea3:   add    %r14,%rax
  0x00007f1a59047ea6:   add    %r15,%rdx
  0x00007f1a59047ea9:   add    %r15,%rax
  0x00007f1a59047eac:   add    %rdi,%rax
  0x00007f1a59047eaf:   subq   $0x1,0x20(%rsp)
  0x00007f1a59047eb5:   jne    Stub::sha512_implCompress+192 0x00007f1a59047540
  0x00007f1a59047ebb:   movq   $0x2,0x20(%rsp)
  0x00007f1a59047ec4:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007f1a59047ec9:   vmovdqu %ymm0,(%rsp)
  0x00007f1a59047ece:   mov    %r9,%r15
  0x00007f1a59047ed1:   rorx   $0x29,%rdx,%r13
  0x00007f1a59047ed7:   rorx   $0x12,%rdx,%r14
  0x00007f1a59047edd:   xor    %r10,%r15
  0x00007f1a59047ee0:   xor    %r14,%r13
  0x00007f1a59047ee3:   rorx   $0xe,%rdx,%r14
  0x00007f1a59047ee9:   and    %rdx,%r15
  0x00007f1a59047eec:   xor    %r14,%r13
  0x00007f1a59047eef:   rorx   $0x22,%rax,%r12
  0x00007f1a59047ef5:   xor    %r10,%r15
  0x00007f1a59047ef8:   rorx   $0x27,%rax,%r14
  0x00007f1a59047efe:   mov    %rax,%rdi
  0x00007f1a59047f01:   xor    %r12,%r14
  0x00007f1a59047f04:   rorx   $0x1c,%rax,%r12
  0x00007f1a59047f0a:   add    (%rsp),%r11
  0x00007f1a59047f0e:   or     %rcx,%rdi
  0x00007f1a59047f11:   xor    %r12,%r14
  0x00007f1a59047f14:   mov    %rax,%r12
  0x00007f1a59047f17:   and    %rbx,%rdi
  0x00007f1a59047f1a:   and    %rcx,%r12
  0x00007f1a59047f1d:   add    %r13,%r15
  0x00007f1a59047f20:   add    %r11,%r8
  0x00007f1a59047f23:   or     %r12,%rdi
  0x00007f1a59047f26:   add    %r14,%r11
  0x00007f1a59047f29:   add    %r15,%r8
  0x00007f1a59047f2c:   add    %r15,%r11
  0x00007f1a59047f2f:   mov    %rdx,%r15
  0x00007f1a59047f32:   rorx   $0x29,%r8,%r13
  0x00007f1a59047f38:   rorx   $0x12,%r8,%r14
  0x00007f1a59047f3e:   xor    %r9,%r15
  0x00007f1a59047f41:   xor    %r14,%r13
  0x00007f1a59047f44:   rorx   $0xe,%r8,%r14
  0x00007f1a59047f4a:   and    %r8,%r15
  0x00007f1a59047f4d:   add    %rdi,%r11
  0x00007f1a59047f50:   xor    %r14,%r13
  0x00007f1a59047f53:   rorx   $0x22,%r11,%r12
  0x00007f1a59047f59:   xor    %r9,%r15
  0x00007f1a59047f5c:   rorx   $0x27,%r11,%r14
  0x00007f1a59047f62:   mov    %r11,%rdi
  0x00007f1a59047f65:   xor    %r12,%r14
  0x00007f1a59047f68:   rorx   $0x1c,%r11,%r12
  0x00007f1a59047f6e:   add    0x8(%rsp),%r10
  0x00007f1a59047f73:   or     %rbx,%rdi
  0x00007f1a59047f76:   xor    %r12,%r14
  0x00007f1a59047f79:   mov    %r11,%r12
  0x00007f1a59047f7c:   and    %rax,%rdi
  0x00007f1a59047f7f:   and    %rbx,%r12
  0x00007f1a59047f82:   add    %r13,%r15
  0x00007f1a59047f85:   add    %r10,%rcx
  0x00007f1a59047f88:   or     %r12,%rdi
  0x00007f1a59047f8b:   add    %r14,%r10
  0x00007f1a59047f8e:   add    %r15,%rcx
  0x00007f1a59047f91:   add    %r15,%r10
  0x00007f1a59047f94:   mov    %r8,%r15
  0x00007f1a59047f97:   rorx   $0x29,%rcx,%r13
  0x00007f1a59047f9d:   rorx   $0x12,%rcx,%r14
  0x00007f1a59047fa3:   xor    %rdx,%r15
  0x00007f1a59047fa6:   xor    %r14,%r13
  0x00007f1a59047fa9:   rorx   $0xe,%rcx,%r14
  0x00007f1a59047faf:   and    %rcx,%r15
  0x00007f1a59047fb2:   add    %rdi,%r10
  0x00007f1a59047fb5:   xor    %r14,%r13
  0x00007f1a59047fb8:   rorx   $0x22,%r10,%r12
  0x00007f1a59047fbe:   xor    %rdx,%r15
  0x00007f1a59047fc1:   rorx   $0x27,%r10,%r14
  0x00007f1a59047fc7:   mov    %r10,%rdi
  0x00007f1a59047fca:   xor    %r12,%r14
  0x00007f1a59047fcd:   rorx   $0x1c,%r10,%r12
  0x00007f1a59047fd3:   add    0x10(%rsp),%r9
  0x00007f1a59047fd8:   or     %rax,%rdi
  0x00007f1a59047fdb:   xor    %r12,%r14
  0x00007f1a59047fde:   mov    %r10,%r12
  0x00007f1a59047fe1:   and    %r11,%rdi
  0x00007f1a59047fe4:   and    %rax,%r12
  0x00007f1a59047fe7:   add    %r13,%r15
  0x00007f1a59047fea:   add    %r9,%rbx
  0x00007f1a59047fed:   or     %r12,%rdi
  0x00007f1a59047ff0:   add    %r14,%r9
  0x00007f1a59047ff3:   add    %r15,%rbx
  0x00007f1a59047ff6:   add    %r15,%r9
  0x00007f1a59047ff9:   mov    %rcx,%r15
  0x00007f1a59047ffc:   rorx   $0x29,%rbx,%r13
  0x00007f1a59048002:   rorx   $0x12,%rbx,%r14
  0x00007f1a59048008:   xor    %r8,%r15
  0x00007f1a5904800b:   xor    %r14,%r13
  0x00007f1a5904800e:   rorx   $0xe,%rbx,%r14
  0x00007f1a59048014:   and    %rbx,%r15
  0x00007f1a59048017:   add    %rdi,%r9
  0x00007f1a5904801a:   xor    %r14,%r13
  0x00007f1a5904801d:   rorx   $0x22,%r9,%r12
  0x00007f1a59048023:   xor    %r8,%r15
  0x00007f1a59048026:   rorx   $0x27,%r9,%r14
  0x00007f1a5904802c:   mov    %r9,%rdi
  0x00007f1a5904802f:   xor    %r12,%r14
  0x00007f1a59048032:   rorx   $0x1c,%r9,%r12
  0x00007f1a59048038:   add    0x18(%rsp),%rdx
  0x00007f1a5904803d:   or     %r11,%rdi
  0x00007f1a59048040:   xor    %r12,%r14
  0x00007f1a59048043:   mov    %r9,%r12
  0x00007f1a59048046:   and    %r10,%rdi
  0x00007f1a59048049:   and    %r11,%r12
  0x00007f1a5904804c:   add    %r13,%r15
  0x00007f1a5904804f:   add    %rdx,%rax
  0x00007f1a59048052:   or     %r12,%rdi
  0x00007f1a59048055:   add    %r14,%rdx
  0x00007f1a59048058:   add    %r15,%rax
  0x00007f1a5904805b:   add    %r15,%rdx
  0x00007f1a5904805e:   add    %rdi,%rdx
  0x00007f1a59048061:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007f1a59048066:   vmovdqu %ymm0,(%rsp)
  0x00007f1a5904806b:   add    $0x40,%rbp
  0x00007f1a5904806f:   mov    %rbx,%r15
  0x00007f1a59048072:   rorx   $0x29,%rax,%r13
  0x00007f1a59048078:   rorx   $0x12,%rax,%r14
  0x00007f1a5904807e:   xor    %rcx,%r15
  0x00007f1a59048081:   xor    %r14,%r13
  0x00007f1a59048084:   rorx   $0xe,%rax,%r14
  0x00007f1a5904808a:   and    %rax,%r15
  0x00007f1a5904808d:   xor    %r14,%r13
  0x00007f1a59048090:   rorx   $0x22,%rdx,%r12
  0x00007f1a59048096:   xor    %rcx,%r15
  0x00007f1a59048099:   rorx   $0x27,%rdx,%r14
  0x00007f1a5904809f:   mov    %rdx,%rdi
  0x00007f1a590480a2:   xor    %r12,%r14
  0x00007f1a590480a5:   rorx   $0x1c,%rdx,%r12
  0x00007f1a590480ab:   add    (%rsp),%r8
  0x00007f1a590480af:   or     %r10,%rdi
  0x00007f1a590480b2:   xor    %r12,%r14
  0x00007f1a590480b5:   mov    %rdx,%r12
  0x00007f1a590480b8:   and    %r9,%rdi
  0x00007f1a590480bb:   and    %r10,%r12
  0x00007f1a590480be:   add    %r13,%r15
  0x00007f1a590480c1:   add    %r8,%r11
  0x00007f1a590480c4:   or     %r12,%rdi
  0x00007f1a590480c7:   add    %r14,%r8
  0x00007f1a590480ca:   add    %r15,%r11
  0x00007f1a590480cd:   add    %r15,%r8
  0x00007f1a590480d0:   mov    %rax,%r15
  0x00007f1a590480d3:   rorx   $0x29,%r11,%r13
  0x00007f1a590480d9:   rorx   $0x12,%r11,%r14
  0x00007f1a590480df:   xor    %rbx,%r15
  0x00007f1a590480e2:   xor    %r14,%r13
  0x00007f1a590480e5:   rorx   $0xe,%r11,%r14
  0x00007f1a590480eb:   and    %r11,%r15
  0x00007f1a590480ee:   add    %rdi,%r8
  0x00007f1a590480f1:   xor    %r14,%r13
  0x00007f1a590480f4:   rorx   $0x22,%r8,%r12
  0x00007f1a590480fa:   xor    %rbx,%r15
  0x00007f1a590480fd:   rorx   $0x27,%r8,%r14
  0x00007f1a59048103:   mov    %r8,%rdi
  0x00007f1a59048106:   xor    %r12,%r14
  0x00007f1a59048109:   rorx   $0x1c,%r8,%r12
  0x00007f1a5904810f:   add    0x8(%rsp),%rcx
  0x00007f1a59048114:   or     %r9,%rdi
  0x00007f1a59048117:   xor    %r12,%r14
  0x00007f1a5904811a:   mov    %r8,%r12
  0x00007f1a5904811d:   and    %rdx,%rdi
  0x00007f1a59048120:   and    %r9,%r12
  0x00007f1a59048123:   add    %r13,%r15
  0x00007f1a59048126:   add    %rcx,%r10
  0x00007f1a59048129:   or     %r12,%rdi
  0x00007f1a5904812c:   add    %r14,%rcx
  0x00007f1a5904812f:   add    %r15,%r10
  0x00007f1a59048132:   add    %r15,%rcx
  0x00007f1a59048135:   mov    %r11,%r15
  0x00007f1a59048138:   rorx   $0x29,%r10,%r13
  0x00007f1a5904813e:   rorx   $0x12,%r10,%r14
  0x00007f1a59048144:   xor    %rax,%r15
  0x00007f1a59048147:   xor    %r14,%r13
  0x00007f1a5904814a:   rorx   $0xe,%r10,%r14
  0x00007f1a59048150:   and    %r10,%r15
  0x00007f1a59048153:   add    %rdi,%rcx
  0x00007f1a59048156:   xor    %r14,%r13
  0x00007f1a59048159:   rorx   $0x22,%rcx,%r12
  0x00007f1a5904815f:   xor    %rax,%r15
  0x00007f1a59048162:   rorx   $0x27,%rcx,%r14
  0x00007f1a59048168:   mov    %rcx,%rdi
  0x00007f1a5904816b:   xor    %r12,%r14
  0x00007f1a5904816e:   rorx   $0x1c,%rcx,%r12
  0x00007f1a59048174:   add    0x10(%rsp),%rbx
  0x00007f1a59048179:   or     %rdx,%rdi
  0x00007f1a5904817c:   xor    %r12,%r14
  0x00007f1a5904817f:   mov    %rcx,%r12
  0x00007f1a59048182:   and    %r8,%rdi
  0x00007f1a59048185:   and    %rdx,%r12
  0x00007f1a59048188:   add    %r13,%r15
  0x00007f1a5904818b:   add    %rbx,%r9
  0x00007f1a5904818e:   or     %r12,%rdi
  0x00007f1a59048191:   add    %r14,%rbx
  0x00007f1a59048194:   add    %r15,%r9
  0x00007f1a59048197:   add    %r15,%rbx
  0x00007f1a5904819a:   mov    %r10,%r15
  0x00007f1a5904819d:   rorx   $0x29,%r9,%r13
  0x00007f1a590481a3:   rorx   $0x12,%r9,%r14
  0x00007f1a590481a9:   xor    %r11,%r15
  0x00007f1a590481ac:   xor    %r14,%r13
  0x00007f1a590481af:   rorx   $0xe,%r9,%r14
  0x00007f1a590481b5:   and    %r9,%r15
  0x00007f1a590481b8:   add    %rdi,%rbx
  0x00007f1a590481bb:   xor    %r14,%r13
  0x00007f1a590481be:   rorx   $0x22,%rbx,%r12
  0x00007f1a590481c4:   xor    %r11,%r15
  0x00007f1a590481c7:   rorx   $0x27,%rbx,%r14
  0x00007f1a590481cd:   mov    %rbx,%rdi
  0x00007f1a590481d0:   xor    %r12,%r14
  0x00007f1a590481d3:   rorx   $0x1c,%rbx,%r12
  0x00007f1a590481d9:   add    0x18(%rsp),%rax
  0x00007f1a590481de:   or     %r8,%rdi
  0x00007f1a590481e1:   xor    %r12,%r14
  0x00007f1a590481e4:   mov    %rbx,%r12
  0x00007f1a590481e7:   and    %rcx,%rdi
  0x00007f1a590481ea:   and    %r8,%r12
  0x00007f1a590481ed:   add    %r13,%r15
  0x00007f1a590481f0:   add    %rax,%rdx
  0x00007f1a590481f3:   or     %r12,%rdi
  0x00007f1a590481f6:   add    %r14,%rax
  0x00007f1a590481f9:   add    %r15,%rdx
  0x00007f1a590481fc:   add    %r15,%rax
  0x00007f1a590481ff:   add    %rdi,%rax
  0x00007f1a59048202:   vmovdqu %ymm6,%ymm4
  0x00007f1a59048206:   vmovdqu %ymm7,%ymm5
  0x00007f1a5904820a:   subq   $0x1,0x20(%rsp)
  0x00007f1a59048210:   jne    Stub::sha512_implCompress+2628 0x00007f1a59047ec4
  0x00007f1a59048216:   add    (%rsi),%rax
  0x00007f1a59048219:   mov    %rax,(%rsi)
  0x00007f1a5904821c:   add    0x8(%rsi),%rbx
  0x00007f1a59048220:   mov    %rbx,0x8(%rsi)
  0x00007f1a59048224:   add    0x10(%rsi),%rcx
  0x00007f1a59048228:   mov    %rcx,0x10(%rsi)
  0x00007f1a5904822c:   add    0x18(%rsi),%r8
  0x00007f1a59048230:   mov    %r8,0x18(%rsi)
  0x00007f1a59048234:   add    0x20(%rsi),%rdx
  0x00007f1a59048238:   mov    %rdx,0x20(%rsi)
  0x00007f1a5904823c:   add    0x28(%rsi),%r9
  0x00007f1a59048240:   mov    %r9,0x28(%rsi)
  0x00007f1a59048244:   add    0x30(%rsi),%r10
  0x00007f1a59048248:   mov    %r10,0x30(%rsi)
  0x00007f1a5904824c:   add    0x38(%rsi),%r11
  0x00007f1a59048250:   mov    %r11,0x38(%rsi)
  0x00007f1a59048254:   mov    0x28(%rsp),%rdi
  0x00007f1a59048259:   add    $0x80,%rdi
  0x00007f1a59048260:   cmp    0x30(%rsp),%rdi
  0x00007f1a59048265:   jne    Stub::sha512_implCompress+129 0x00007f1a59047501
  0x00007f1a5904826b:   mov    0x40(%rsp),%rbp
  0x00007f1a59048270:   mov    0x48(%rsp),%rbx
  0x00007f1a59048275:   mov    0x50(%rsp),%r12
  0x00007f1a5904827a:   mov    0x58(%rsp),%r13
  0x00007f1a5904827f:   mov    0x60(%rsp),%r14
  0x00007f1a59048284:   mov    0x68(%rsp),%r15
  0x00007f1a59048289:   mov    0x38(%rsp),%rsp
  0x00007f1a5904828e:   pop    %rcx
  0x00007f1a5904828f:   pop    %rdx
  0x00007f1a59048290:   vzeroupper 
  0x00007f1a59048293:   leaveq 
  0x00007f1a59048294:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha512_implCompressMB [0x00007f1a590482a0, 0x00007f1a590490e5] (3653 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590482a0:   push   %rbp
  0x00007f1a590482a1:   mov    %rsp,%rbp
  0x00007f1a590482a4:   push   %rdx
  0x00007f1a590482a5:   push   %rcx
  0x00007f1a590482a6:   mov    %rsp,%rax
  0x00007f1a590482a9:   sub    $0x70,%rsp
  0x00007f1a590482ad:   and    $0xffffffffffffffe0,%rsp
  0x00007f1a590482b1:   mov    %rax,0x38(%rsp)
  0x00007f1a590482b6:   mov    %rbp,0x40(%rsp)
  0x00007f1a590482bb:   mov    %rbx,0x48(%rsp)
  0x00007f1a590482c0:   mov    %r12,0x50(%rsp)
  0x00007f1a590482c5:   mov    %r13,0x58(%rsp)
  0x00007f1a590482ca:   mov    %r14,0x60(%rsp)
  0x00007f1a590482cf:   mov    %r15,0x68(%rsp)
  0x00007f1a590482d4:   vpblendd $0xf0,%xmm1,%xmm0,%xmm0
  0x00007f1a590482da:   vpblendd $0xf0,%ymm1,%ymm0,%ymm0
  0x00007f1a590482e0:   xor    %rax,%rax
  0x00007f1a590482e3:   cmp    %rcx,%rdx
  0x00007f1a590482e6:   jae    Stub::sha512_implCompressMB+87 0x00007f1a590482f7
  0x00007f1a590482e8:   add    $0x80,%rdx
  0x00007f1a590482ef:   add    $0x80,%rax
  0x00007f1a590482f5:   jmp    Stub::sha512_implCompressMB+67 0x00007f1a590482e3
  0x00007f1a590482f7:   mov    %rax,%rdx
  0x00007f1a590482fa:   cmp    $0x0,%rdx
  0x00007f1a590482fe:   je     Stub::sha512_implCompressMB+3595 0x00007f1a590490ab
  0x00007f1a59048304:   add    %rdi,%rdx
  0x00007f1a59048307:   mov    %rdx,0x30(%rsp)
  0x00007f1a5904830c:   mov    (%rsi),%rax
  0x00007f1a5904830f:   mov    0x8(%rsi),%rbx
  0x00007f1a59048313:   mov    0x10(%rsi),%rcx
  0x00007f1a59048317:   mov    0x18(%rsi),%r8
  0x00007f1a5904831b:   mov    0x20(%rsi),%rdx
  0x00007f1a5904831f:   mov    0x28(%rsi),%r9
  0x00007f1a59048323:   mov    0x38(%rsi),%r11
  0x00007f1a59048327:   vmovdqu -0xeef(%rip),%ymm9        # Stub::pshuffle_byte_flip_mask_sha512
  0x00007f1a5904832f:   vmovdqu -0xed7(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask_sha512+32 0x00007f1a59047460
  0x00007f1a59048337:   mov    0x30(%rsi),%r10
  0x00007f1a5904833b:   movabs $0x7f1a6458a140,%rbp
  0x00007f1a59048345:   vmovdqu (%rdi),%ymm4
  0x00007f1a59048349:   vpshufb %ymm9,%ymm4,%ymm4
  0x00007f1a5904834e:   vmovdqu 0x20(%rdi),%ymm5
  0x00007f1a59048353:   vpshufb %ymm9,%ymm5,%ymm5
  0x00007f1a59048358:   vmovdqu 0x40(%rdi),%ymm6
  0x00007f1a5904835d:   vpshufb %ymm9,%ymm6,%ymm6
  0x00007f1a59048362:   vmovdqu 0x60(%rdi),%ymm7
  0x00007f1a59048367:   vpshufb %ymm9,%ymm7,%ymm7
  0x00007f1a5904836c:   mov    %rdi,0x28(%rsp)
  0x00007f1a59048371:   movq   $0x4,0x20(%rsp)
  0x00007f1a5904837a:   nopw   0x0(%rax,%rax,1)
  0x00007f1a59048380:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007f1a59048385:   vmovdqu %ymm0,(%rsp)
  0x00007f1a5904838a:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm0
  0x00007f1a59048390:   vpalignr $0x8,%ymm6,%ymm0,%ymm0
  0x00007f1a59048396:   vpaddq %ymm4,%ymm0,%ymm0
  0x00007f1a5904839a:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm1
  0x00007f1a590483a0:   vpalignr $0x8,%ymm4,%ymm1,%ymm1
  0x00007f1a590483a6:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f1a590483ab:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f1a590483b0:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a590483b4:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f1a590483b9:   mov    %rax,%rdi
  0x00007f1a590483bc:   rorx   $0x29,%rdx,%r13
  0x00007f1a590483c2:   rorx   $0x12,%rdx,%r14
  0x00007f1a590483c8:   add    (%rsp),%r11
  0x00007f1a590483cc:   or     %rcx,%rdi
  0x00007f1a590483cf:   mov    %r9,%r15
  0x00007f1a590483d2:   xor    %r10,%r15
  0x00007f1a590483d5:   rorx   $0x22,%rax,%r12
  0x00007f1a590483db:   xor    %r14,%r13
  0x00007f1a590483de:   rorx   $0xe,%rdx,%r14
  0x00007f1a590483e4:   and    %rdx,%r15
  0x00007f1a590483e7:   add    %r11,%r8
  0x00007f1a590483ea:   and    %rbx,%rdi
  0x00007f1a590483ed:   xor    %r14,%r13
  0x00007f1a590483f0:   rorx   $0x27,%rax,%r14
  0x00007f1a590483f6:   xor    %r12,%r14
  0x00007f1a590483f9:   rorx   $0x1c,%rax,%r12
  0x00007f1a590483ff:   xor    %r10,%r15
  0x00007f1a59048402:   xor    %r12,%r14
  0x00007f1a59048405:   mov    %rax,%r12
  0x00007f1a59048408:   and    %rcx,%r12
  0x00007f1a5904840b:   add    %r13,%r15
  0x00007f1a5904840e:   or     %r12,%rdi
  0x00007f1a59048411:   add    %r14,%r11
  0x00007f1a59048414:   add    %r15,%r8
  0x00007f1a59048417:   add    %r15,%r11
  0x00007f1a5904841a:   add    %rdi,%r11
  0x00007f1a5904841d:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f1a59048422:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f1a59048427:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f1a5904842b:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f1a59048430:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f1a59048434:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f1a59048438:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm4
  0x00007f1a5904843e:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f1a59048443:   vperm2f128 $0x11,%ymm7,%ymm7,%ymm2
  0x00007f1a59048449:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f1a5904844e:   mov    %r11,%rdi
  0x00007f1a59048451:   rorx   $0x29,%r8,%r13
  0x00007f1a59048457:   rorx   $0x12,%r8,%r14
  0x00007f1a5904845d:   add    0x8(%rsp),%r10
  0x00007f1a59048462:   or     %rbx,%rdi
  0x00007f1a59048465:   mov    %rdx,%r15
  0x00007f1a59048468:   xor    %r9,%r15
  0x00007f1a5904846b:   rorx   $0x22,%r11,%r12
  0x00007f1a59048471:   xor    %r14,%r13
  0x00007f1a59048474:   rorx   $0xe,%r8,%r14
  0x00007f1a5904847a:   and    %r8,%r15
  0x00007f1a5904847d:   add    %r10,%rcx
  0x00007f1a59048480:   and    %rax,%rdi
  0x00007f1a59048483:   xor    %r14,%r13
  0x00007f1a59048486:   rorx   $0x27,%r11,%r14
  0x00007f1a5904848c:   xor    %r12,%r14
  0x00007f1a5904848f:   rorx   $0x1c,%r11,%r12
  0x00007f1a59048495:   xor    %r9,%r15
  0x00007f1a59048498:   xor    %r12,%r14
  0x00007f1a5904849b:   mov    %r11,%r12
  0x00007f1a5904849e:   and    %rbx,%r12
  0x00007f1a590484a1:   add    %r13,%r15
  0x00007f1a590484a4:   or     %r12,%rdi
  0x00007f1a590484a7:   add    %r14,%r10
  0x00007f1a590484aa:   add    %r15,%rcx
  0x00007f1a590484ad:   add    %r15,%r10
  0x00007f1a590484b0:   add    %rdi,%r10
  0x00007f1a590484b3:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a590484b8:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f1a590484bd:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a590484c1:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a590484c5:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f1a590484ca:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f1a590484cf:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a590484d3:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a590484d7:   vpaddq %ymm8,%ymm4,%ymm4
  0x00007f1a590484dc:   vpsrlq $0x6,%ymm4,%ymm8
  0x00007f1a590484e1:   mov    %r10,%rdi
  0x00007f1a590484e4:   rorx   $0x29,%rcx,%r13
  0x00007f1a590484ea:   rorx   $0x12,%rcx,%r14
  0x00007f1a590484f0:   add    0x10(%rsp),%r9
  0x00007f1a590484f5:   or     %rax,%rdi
  0x00007f1a590484f8:   mov    %r8,%r15
  0x00007f1a590484fb:   xor    %rdx,%r15
  0x00007f1a590484fe:   rorx   $0x22,%r10,%r12
  0x00007f1a59048504:   xor    %r14,%r13
  0x00007f1a59048507:   rorx   $0xe,%rcx,%r14
  0x00007f1a5904850d:   and    %rcx,%r15
  0x00007f1a59048510:   add    %r9,%rbx
  0x00007f1a59048513:   and    %r11,%rdi
  0x00007f1a59048516:   xor    %r14,%r13
  0x00007f1a59048519:   rorx   $0x27,%r10,%r14
  0x00007f1a5904851f:   xor    %r12,%r14
  0x00007f1a59048522:   rorx   $0x1c,%r10,%r12
  0x00007f1a59048528:   xor    %rdx,%r15
  0x00007f1a5904852b:   xor    %r12,%r14
  0x00007f1a5904852e:   mov    %r10,%r12
  0x00007f1a59048531:   and    %rax,%r12
  0x00007f1a59048534:   add    %r13,%r15
  0x00007f1a59048537:   or     %r12,%rdi
  0x00007f1a5904853a:   add    %r14,%r9
  0x00007f1a5904853d:   add    %r15,%rbx
  0x00007f1a59048540:   add    %r15,%r9
  0x00007f1a59048543:   add    %rdi,%r9
  0x00007f1a59048546:   vpsrlq $0x13,%ymm4,%ymm3
  0x00007f1a5904854b:   vpsllq $0x2d,%ymm4,%ymm1
  0x00007f1a59048550:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59048554:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59048558:   vpsrlq $0x3d,%ymm4,%ymm3
  0x00007f1a5904855d:   vpsllq $0x3,%ymm4,%ymm1
  0x00007f1a59048562:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59048566:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a5904856a:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f1a5904856f:   vpblendd $0xf0,%ymm2,%ymm4,%ymm4
  0x00007f1a59048575:   mov    %r9,%rdi
  0x00007f1a59048578:   rorx   $0x29,%rbx,%r13
  0x00007f1a5904857e:   rorx   $0x12,%rbx,%r14
  0x00007f1a59048584:   add    0x18(%rsp),%rdx
  0x00007f1a59048589:   or     %r11,%rdi
  0x00007f1a5904858c:   mov    %rcx,%r15
  0x00007f1a5904858f:   xor    %r8,%r15
  0x00007f1a59048592:   rorx   $0x22,%r9,%r12
  0x00007f1a59048598:   xor    %r14,%r13
  0x00007f1a5904859b:   rorx   $0xe,%rbx,%r14
  0x00007f1a590485a1:   and    %rbx,%r15
  0x00007f1a590485a4:   add    %rdx,%rax
  0x00007f1a590485a7:   and    %r10,%rdi
  0x00007f1a590485aa:   xor    %r14,%r13
  0x00007f1a590485ad:   rorx   $0x27,%r9,%r14
  0x00007f1a590485b3:   xor    %r12,%r14
  0x00007f1a590485b6:   rorx   $0x1c,%r9,%r12
  0x00007f1a590485bc:   xor    %r8,%r15
  0x00007f1a590485bf:   xor    %r12,%r14
  0x00007f1a590485c2:   mov    %r9,%r12
  0x00007f1a590485c5:   and    %r11,%r12
  0x00007f1a590485c8:   add    %r13,%r15
  0x00007f1a590485cb:   or     %r12,%rdi
  0x00007f1a590485ce:   add    %r14,%rdx
  0x00007f1a590485d1:   add    %r15,%rax
  0x00007f1a590485d4:   add    %r15,%rdx
  0x00007f1a590485d7:   add    %rdi,%rdx
  0x00007f1a590485da:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007f1a590485df:   vmovdqu %ymm0,(%rsp)
  0x00007f1a590485e4:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm0
  0x00007f1a590485ea:   vpalignr $0x8,%ymm7,%ymm0,%ymm0
  0x00007f1a590485f0:   vpaddq %ymm5,%ymm0,%ymm0
  0x00007f1a590485f4:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm1
  0x00007f1a590485fa:   vpalignr $0x8,%ymm5,%ymm1,%ymm1
  0x00007f1a59048600:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f1a59048605:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f1a5904860a:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a5904860e:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f1a59048613:   mov    %rdx,%rdi
  0x00007f1a59048616:   rorx   $0x29,%rax,%r13
  0x00007f1a5904861c:   rorx   $0x12,%rax,%r14
  0x00007f1a59048622:   add    (%rsp),%r8
  0x00007f1a59048626:   or     %r10,%rdi
  0x00007f1a59048629:   mov    %rbx,%r15
  0x00007f1a5904862c:   xor    %rcx,%r15
  0x00007f1a5904862f:   rorx   $0x22,%rdx,%r12
  0x00007f1a59048635:   xor    %r14,%r13
  0x00007f1a59048638:   rorx   $0xe,%rax,%r14
  0x00007f1a5904863e:   and    %rax,%r15
  0x00007f1a59048641:   add    %r8,%r11
  0x00007f1a59048644:   and    %r9,%rdi
  0x00007f1a59048647:   xor    %r14,%r13
  0x00007f1a5904864a:   rorx   $0x27,%rdx,%r14
  0x00007f1a59048650:   xor    %r12,%r14
  0x00007f1a59048653:   rorx   $0x1c,%rdx,%r12
  0x00007f1a59048659:   xor    %rcx,%r15
  0x00007f1a5904865c:   xor    %r12,%r14
  0x00007f1a5904865f:   mov    %rdx,%r12
  0x00007f1a59048662:   and    %r10,%r12
  0x00007f1a59048665:   add    %r13,%r15
  0x00007f1a59048668:   or     %r12,%rdi
  0x00007f1a5904866b:   add    %r14,%r8
  0x00007f1a5904866e:   add    %r15,%r11
  0x00007f1a59048671:   add    %r15,%r8
  0x00007f1a59048674:   add    %rdi,%r8
  0x00007f1a59048677:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f1a5904867c:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f1a59048681:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f1a59048685:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f1a5904868a:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f1a5904868e:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f1a59048692:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm5
  0x00007f1a59048698:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f1a5904869d:   vperm2f128 $0x11,%ymm4,%ymm4,%ymm2
  0x00007f1a590486a3:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f1a590486a8:   mov    %r8,%rdi
  0x00007f1a590486ab:   rorx   $0x29,%r11,%r13
  0x00007f1a590486b1:   rorx   $0x12,%r11,%r14
  0x00007f1a590486b7:   add    0x8(%rsp),%rcx
  0x00007f1a590486bc:   or     %r9,%rdi
  0x00007f1a590486bf:   mov    %rax,%r15
  0x00007f1a590486c2:   xor    %rbx,%r15
  0x00007f1a590486c5:   rorx   $0x22,%r8,%r12
  0x00007f1a590486cb:   xor    %r14,%r13
  0x00007f1a590486ce:   rorx   $0xe,%r11,%r14
  0x00007f1a590486d4:   and    %r11,%r15
  0x00007f1a590486d7:   add    %rcx,%r10
  0x00007f1a590486da:   and    %rdx,%rdi
  0x00007f1a590486dd:   xor    %r14,%r13
  0x00007f1a590486e0:   rorx   $0x27,%r8,%r14
  0x00007f1a590486e6:   xor    %r12,%r14
  0x00007f1a590486e9:   rorx   $0x1c,%r8,%r12
  0x00007f1a590486ef:   xor    %rbx,%r15
  0x00007f1a590486f2:   xor    %r12,%r14
  0x00007f1a590486f5:   mov    %r8,%r12
  0x00007f1a590486f8:   and    %r9,%r12
  0x00007f1a590486fb:   add    %r13,%r15
  0x00007f1a590486fe:   or     %r12,%rdi
  0x00007f1a59048701:   add    %r14,%rcx
  0x00007f1a59048704:   add    %r15,%r10
  0x00007f1a59048707:   add    %r15,%rcx
  0x00007f1a5904870a:   add    %rdi,%rcx
  0x00007f1a5904870d:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59048712:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f1a59048717:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a5904871b:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a5904871f:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f1a59048724:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f1a59048729:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a5904872d:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59048731:   vpaddq %ymm8,%ymm5,%ymm5
  0x00007f1a59048736:   vpsrlq $0x6,%ymm5,%ymm8
  0x00007f1a5904873b:   mov    %rcx,%rdi
  0x00007f1a5904873e:   rorx   $0x29,%r10,%r13
  0x00007f1a59048744:   rorx   $0x12,%r10,%r14
  0x00007f1a5904874a:   add    0x10(%rsp),%rbx
  0x00007f1a5904874f:   or     %rdx,%rdi
  0x00007f1a59048752:   mov    %r11,%r15
  0x00007f1a59048755:   xor    %rax,%r15
  0x00007f1a59048758:   rorx   $0x22,%rcx,%r12
  0x00007f1a5904875e:   xor    %r14,%r13
  0x00007f1a59048761:   rorx   $0xe,%r10,%r14
  0x00007f1a59048767:   and    %r10,%r15
  0x00007f1a5904876a:   add    %rbx,%r9
  0x00007f1a5904876d:   and    %r8,%rdi
  0x00007f1a59048770:   xor    %r14,%r13
  0x00007f1a59048773:   rorx   $0x27,%rcx,%r14
  0x00007f1a59048779:   xor    %r12,%r14
  0x00007f1a5904877c:   rorx   $0x1c,%rcx,%r12
  0x00007f1a59048782:   xor    %rax,%r15
  0x00007f1a59048785:   xor    %r12,%r14
  0x00007f1a59048788:   mov    %rcx,%r12
  0x00007f1a5904878b:   and    %rdx,%r12
  0x00007f1a5904878e:   add    %r13,%r15
  0x00007f1a59048791:   or     %r12,%rdi
  0x00007f1a59048794:   add    %r14,%rbx
  0x00007f1a59048797:   add    %r15,%r9
  0x00007f1a5904879a:   add    %r15,%rbx
  0x00007f1a5904879d:   add    %rdi,%rbx
  0x00007f1a590487a0:   vpsrlq $0x13,%ymm5,%ymm3
  0x00007f1a590487a5:   vpsllq $0x2d,%ymm5,%ymm1
  0x00007f1a590487aa:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a590487ae:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a590487b2:   vpsrlq $0x3d,%ymm5,%ymm3
  0x00007f1a590487b7:   vpsllq $0x3,%ymm5,%ymm1
  0x00007f1a590487bc:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a590487c0:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a590487c4:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f1a590487c9:   vpblendd $0xf0,%ymm2,%ymm5,%ymm5
  0x00007f1a590487cf:   mov    %rbx,%rdi
  0x00007f1a590487d2:   rorx   $0x29,%r9,%r13
  0x00007f1a590487d8:   rorx   $0x12,%r9,%r14
  0x00007f1a590487de:   add    0x18(%rsp),%rax
  0x00007f1a590487e3:   or     %r8,%rdi
  0x00007f1a590487e6:   mov    %r10,%r15
  0x00007f1a590487e9:   xor    %r11,%r15
  0x00007f1a590487ec:   rorx   $0x22,%rbx,%r12
  0x00007f1a590487f2:   xor    %r14,%r13
  0x00007f1a590487f5:   rorx   $0xe,%r9,%r14
  0x00007f1a590487fb:   and    %r9,%r15
  0x00007f1a590487fe:   add    %rax,%rdx
  0x00007f1a59048801:   and    %rcx,%rdi
  0x00007f1a59048804:   xor    %r14,%r13
  0x00007f1a59048807:   rorx   $0x27,%rbx,%r14
  0x00007f1a5904880d:   xor    %r12,%r14
  0x00007f1a59048810:   rorx   $0x1c,%rbx,%r12
  0x00007f1a59048816:   xor    %r11,%r15
  0x00007f1a59048819:   xor    %r12,%r14
  0x00007f1a5904881c:   mov    %rbx,%r12
  0x00007f1a5904881f:   and    %r8,%r12
  0x00007f1a59048822:   add    %r13,%r15
  0x00007f1a59048825:   or     %r12,%rdi
  0x00007f1a59048828:   add    %r14,%rax
  0x00007f1a5904882b:   add    %r15,%rdx
  0x00007f1a5904882e:   add    %r15,%rax
  0x00007f1a59048831:   add    %rdi,%rax
  0x00007f1a59048834:   vpaddq 0x40(%rbp),%ymm6,%ymm0
  0x00007f1a59048839:   vmovdqu %ymm0,(%rsp)
  0x00007f1a5904883e:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm0
  0x00007f1a59048844:   vpalignr $0x8,%ymm4,%ymm0,%ymm0
  0x00007f1a5904884a:   vpaddq %ymm6,%ymm0,%ymm0
  0x00007f1a5904884e:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm1
  0x00007f1a59048854:   vpalignr $0x8,%ymm6,%ymm1,%ymm1
  0x00007f1a5904885a:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f1a5904885f:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f1a59048864:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a59048868:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f1a5904886d:   mov    %rax,%rdi
  0x00007f1a59048870:   rorx   $0x29,%rdx,%r13
  0x00007f1a59048876:   rorx   $0x12,%rdx,%r14
  0x00007f1a5904887c:   add    (%rsp),%r11
  0x00007f1a59048880:   or     %rcx,%rdi
  0x00007f1a59048883:   mov    %r9,%r15
  0x00007f1a59048886:   xor    %r10,%r15
  0x00007f1a59048889:   rorx   $0x22,%rax,%r12
  0x00007f1a5904888f:   xor    %r14,%r13
  0x00007f1a59048892:   rorx   $0xe,%rdx,%r14
  0x00007f1a59048898:   and    %rdx,%r15
  0x00007f1a5904889b:   add    %r11,%r8
  0x00007f1a5904889e:   and    %rbx,%rdi
  0x00007f1a590488a1:   xor    %r14,%r13
  0x00007f1a590488a4:   rorx   $0x27,%rax,%r14
  0x00007f1a590488aa:   xor    %r12,%r14
  0x00007f1a590488ad:   rorx   $0x1c,%rax,%r12
  0x00007f1a590488b3:   xor    %r10,%r15
  0x00007f1a590488b6:   xor    %r12,%r14
  0x00007f1a590488b9:   mov    %rax,%r12
  0x00007f1a590488bc:   and    %rcx,%r12
  0x00007f1a590488bf:   add    %r13,%r15
  0x00007f1a590488c2:   or     %r12,%rdi
  0x00007f1a590488c5:   add    %r14,%r11
  0x00007f1a590488c8:   add    %r15,%r8
  0x00007f1a590488cb:   add    %r15,%r11
  0x00007f1a590488ce:   add    %rdi,%r11
  0x00007f1a590488d1:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f1a590488d6:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f1a590488db:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f1a590488df:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f1a590488e4:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f1a590488e8:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f1a590488ec:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm6
  0x00007f1a590488f2:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f1a590488f7:   vperm2f128 $0x11,%ymm5,%ymm5,%ymm2
  0x00007f1a590488fd:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f1a59048902:   mov    %r11,%rdi
  0x00007f1a59048905:   rorx   $0x29,%r8,%r13
  0x00007f1a5904890b:   rorx   $0x12,%r8,%r14
  0x00007f1a59048911:   add    0x8(%rsp),%r10
  0x00007f1a59048916:   or     %rbx,%rdi
  0x00007f1a59048919:   mov    %rdx,%r15
  0x00007f1a5904891c:   xor    %r9,%r15
  0x00007f1a5904891f:   rorx   $0x22,%r11,%r12
  0x00007f1a59048925:   xor    %r14,%r13
  0x00007f1a59048928:   rorx   $0xe,%r8,%r14
  0x00007f1a5904892e:   and    %r8,%r15
  0x00007f1a59048931:   add    %r10,%rcx
  0x00007f1a59048934:   and    %rax,%rdi
  0x00007f1a59048937:   xor    %r14,%r13
  0x00007f1a5904893a:   rorx   $0x27,%r11,%r14
  0x00007f1a59048940:   xor    %r12,%r14
  0x00007f1a59048943:   rorx   $0x1c,%r11,%r12
  0x00007f1a59048949:   xor    %r9,%r15
  0x00007f1a5904894c:   xor    %r12,%r14
  0x00007f1a5904894f:   mov    %r11,%r12
  0x00007f1a59048952:   and    %rbx,%r12
  0x00007f1a59048955:   add    %r13,%r15
  0x00007f1a59048958:   or     %r12,%rdi
  0x00007f1a5904895b:   add    %r14,%r10
  0x00007f1a5904895e:   add    %r15,%rcx
  0x00007f1a59048961:   add    %r15,%r10
  0x00007f1a59048964:   add    %rdi,%r10
  0x00007f1a59048967:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a5904896c:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f1a59048971:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59048975:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59048979:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f1a5904897e:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f1a59048983:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59048987:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a5904898b:   vpaddq %ymm8,%ymm6,%ymm6
  0x00007f1a59048990:   vpsrlq $0x6,%ymm6,%ymm8
  0x00007f1a59048995:   mov    %r10,%rdi
  0x00007f1a59048998:   rorx   $0x29,%rcx,%r13
  0x00007f1a5904899e:   rorx   $0x12,%rcx,%r14
  0x00007f1a590489a4:   add    0x10(%rsp),%r9
  0x00007f1a590489a9:   or     %rax,%rdi
  0x00007f1a590489ac:   mov    %r8,%r15
  0x00007f1a590489af:   xor    %rdx,%r15
  0x00007f1a590489b2:   rorx   $0x22,%r10,%r12
  0x00007f1a590489b8:   xor    %r14,%r13
  0x00007f1a590489bb:   rorx   $0xe,%rcx,%r14
  0x00007f1a590489c1:   and    %rcx,%r15
  0x00007f1a590489c4:   add    %r9,%rbx
  0x00007f1a590489c7:   and    %r11,%rdi
  0x00007f1a590489ca:   xor    %r14,%r13
  0x00007f1a590489cd:   rorx   $0x27,%r10,%r14
  0x00007f1a590489d3:   xor    %r12,%r14
  0x00007f1a590489d6:   rorx   $0x1c,%r10,%r12
  0x00007f1a590489dc:   xor    %rdx,%r15
  0x00007f1a590489df:   xor    %r12,%r14
  0x00007f1a590489e2:   mov    %r10,%r12
  0x00007f1a590489e5:   and    %rax,%r12
  0x00007f1a590489e8:   add    %r13,%r15
  0x00007f1a590489eb:   or     %r12,%rdi
  0x00007f1a590489ee:   add    %r14,%r9
  0x00007f1a590489f1:   add    %r15,%rbx
  0x00007f1a590489f4:   add    %r15,%r9
  0x00007f1a590489f7:   add    %rdi,%r9
  0x00007f1a590489fa:   vpsrlq $0x13,%ymm6,%ymm3
  0x00007f1a590489ff:   vpsllq $0x2d,%ymm6,%ymm1
  0x00007f1a59048a04:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59048a08:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59048a0c:   vpsrlq $0x3d,%ymm6,%ymm3
  0x00007f1a59048a11:   vpsllq $0x3,%ymm6,%ymm1
  0x00007f1a59048a16:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59048a1a:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59048a1e:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f1a59048a23:   vpblendd $0xf0,%ymm2,%ymm6,%ymm6
  0x00007f1a59048a29:   mov    %r9,%rdi
  0x00007f1a59048a2c:   rorx   $0x29,%rbx,%r13
  0x00007f1a59048a32:   rorx   $0x12,%rbx,%r14
  0x00007f1a59048a38:   add    0x18(%rsp),%rdx
  0x00007f1a59048a3d:   or     %r11,%rdi
  0x00007f1a59048a40:   mov    %rcx,%r15
  0x00007f1a59048a43:   xor    %r8,%r15
  0x00007f1a59048a46:   rorx   $0x22,%r9,%r12
  0x00007f1a59048a4c:   xor    %r14,%r13
  0x00007f1a59048a4f:   rorx   $0xe,%rbx,%r14
  0x00007f1a59048a55:   and    %rbx,%r15
  0x00007f1a59048a58:   add    %rdx,%rax
  0x00007f1a59048a5b:   and    %r10,%rdi
  0x00007f1a59048a5e:   xor    %r14,%r13
  0x00007f1a59048a61:   rorx   $0x27,%r9,%r14
  0x00007f1a59048a67:   xor    %r12,%r14
  0x00007f1a59048a6a:   rorx   $0x1c,%r9,%r12
  0x00007f1a59048a70:   xor    %r8,%r15
  0x00007f1a59048a73:   xor    %r12,%r14
  0x00007f1a59048a76:   mov    %r9,%r12
  0x00007f1a59048a79:   and    %r11,%r12
  0x00007f1a59048a7c:   add    %r13,%r15
  0x00007f1a59048a7f:   or     %r12,%rdi
  0x00007f1a59048a82:   add    %r14,%rdx
  0x00007f1a59048a85:   add    %r15,%rax
  0x00007f1a59048a88:   add    %r15,%rdx
  0x00007f1a59048a8b:   add    %rdi,%rdx
  0x00007f1a59048a8e:   vpaddq 0x60(%rbp),%ymm7,%ymm0
  0x00007f1a59048a93:   vmovdqu %ymm0,(%rsp)
  0x00007f1a59048a98:   add    $0x80,%rbp
  0x00007f1a59048a9f:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm0
  0x00007f1a59048aa5:   vpalignr $0x8,%ymm5,%ymm0,%ymm0
  0x00007f1a59048aab:   vpaddq %ymm7,%ymm0,%ymm0
  0x00007f1a59048aaf:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm1
  0x00007f1a59048ab5:   vpalignr $0x8,%ymm7,%ymm1,%ymm1
  0x00007f1a59048abb:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f1a59048ac0:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f1a59048ac5:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f1a59048ac9:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f1a59048ace:   mov    %rdx,%rdi
  0x00007f1a59048ad1:   rorx   $0x29,%rax,%r13
  0x00007f1a59048ad7:   rorx   $0x12,%rax,%r14
  0x00007f1a59048add:   add    (%rsp),%r8
  0x00007f1a59048ae1:   or     %r10,%rdi
  0x00007f1a59048ae4:   mov    %rbx,%r15
  0x00007f1a59048ae7:   xor    %rcx,%r15
  0x00007f1a59048aea:   rorx   $0x22,%rdx,%r12
  0x00007f1a59048af0:   xor    %r14,%r13
  0x00007f1a59048af3:   rorx   $0xe,%rax,%r14
  0x00007f1a59048af9:   and    %rax,%r15
  0x00007f1a59048afc:   add    %r8,%r11
  0x00007f1a59048aff:   and    %r9,%rdi
  0x00007f1a59048b02:   xor    %r14,%r13
  0x00007f1a59048b05:   rorx   $0x27,%rdx,%r14
  0x00007f1a59048b0b:   xor    %r12,%r14
  0x00007f1a59048b0e:   rorx   $0x1c,%rdx,%r12
  0x00007f1a59048b14:   xor    %rcx,%r15
  0x00007f1a59048b17:   xor    %r12,%r14
  0x00007f1a59048b1a:   mov    %rdx,%r12
  0x00007f1a59048b1d:   and    %r10,%r12
  0x00007f1a59048b20:   add    %r13,%r15
  0x00007f1a59048b23:   or     %r12,%rdi
  0x00007f1a59048b26:   add    %r14,%r8
  0x00007f1a59048b29:   add    %r15,%r11
  0x00007f1a59048b2c:   add    %r15,%r8
  0x00007f1a59048b2f:   add    %rdi,%r8
  0x00007f1a59048b32:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f1a59048b37:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f1a59048b3c:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f1a59048b40:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f1a59048b45:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f1a59048b49:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f1a59048b4d:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm7
  0x00007f1a59048b53:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f1a59048b58:   vperm2f128 $0x11,%ymm6,%ymm6,%ymm2
  0x00007f1a59048b5e:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f1a59048b63:   mov    %r8,%rdi
  0x00007f1a59048b66:   rorx   $0x29,%r11,%r13
  0x00007f1a59048b6c:   rorx   $0x12,%r11,%r14
  0x00007f1a59048b72:   add    0x8(%rsp),%rcx
  0x00007f1a59048b77:   or     %r9,%rdi
  0x00007f1a59048b7a:   mov    %rax,%r15
  0x00007f1a59048b7d:   xor    %rbx,%r15
  0x00007f1a59048b80:   rorx   $0x22,%r8,%r12
  0x00007f1a59048b86:   xor    %r14,%r13
  0x00007f1a59048b89:   rorx   $0xe,%r11,%r14
  0x00007f1a59048b8f:   and    %r11,%r15
  0x00007f1a59048b92:   add    %rcx,%r10
  0x00007f1a59048b95:   and    %rdx,%rdi
  0x00007f1a59048b98:   xor    %r14,%r13
  0x00007f1a59048b9b:   rorx   $0x27,%r8,%r14
  0x00007f1a59048ba1:   xor    %r12,%r14
  0x00007f1a59048ba4:   rorx   $0x1c,%r8,%r12
  0x00007f1a59048baa:   xor    %rbx,%r15
  0x00007f1a59048bad:   xor    %r12,%r14
  0x00007f1a59048bb0:   mov    %r8,%r12
  0x00007f1a59048bb3:   and    %r9,%r12
  0x00007f1a59048bb6:   add    %r13,%r15
  0x00007f1a59048bb9:   or     %r12,%rdi
  0x00007f1a59048bbc:   add    %r14,%rcx
  0x00007f1a59048bbf:   add    %r15,%r10
  0x00007f1a59048bc2:   add    %r15,%rcx
  0x00007f1a59048bc5:   add    %rdi,%rcx
  0x00007f1a59048bc8:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f1a59048bcd:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f1a59048bd2:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59048bd6:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59048bda:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f1a59048bdf:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f1a59048be4:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59048be8:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59048bec:   vpaddq %ymm8,%ymm7,%ymm7
  0x00007f1a59048bf1:   vpsrlq $0x6,%ymm7,%ymm8
  0x00007f1a59048bf6:   mov    %rcx,%rdi
  0x00007f1a59048bf9:   rorx   $0x29,%r10,%r13
  0x00007f1a59048bff:   rorx   $0x12,%r10,%r14
  0x00007f1a59048c05:   add    0x10(%rsp),%rbx
  0x00007f1a59048c0a:   or     %rdx,%rdi
  0x00007f1a59048c0d:   mov    %r11,%r15
  0x00007f1a59048c10:   xor    %rax,%r15
  0x00007f1a59048c13:   rorx   $0x22,%rcx,%r12
  0x00007f1a59048c19:   xor    %r14,%r13
  0x00007f1a59048c1c:   rorx   $0xe,%r10,%r14
  0x00007f1a59048c22:   and    %r10,%r15
  0x00007f1a59048c25:   add    %rbx,%r9
  0x00007f1a59048c28:   and    %r8,%rdi
  0x00007f1a59048c2b:   xor    %r14,%r13
  0x00007f1a59048c2e:   rorx   $0x27,%rcx,%r14
  0x00007f1a59048c34:   xor    %r12,%r14
  0x00007f1a59048c37:   rorx   $0x1c,%rcx,%r12
  0x00007f1a59048c3d:   xor    %rax,%r15
  0x00007f1a59048c40:   xor    %r12,%r14
  0x00007f1a59048c43:   mov    %rcx,%r12
  0x00007f1a59048c46:   and    %rdx,%r12
  0x00007f1a59048c49:   add    %r13,%r15
  0x00007f1a59048c4c:   or     %r12,%rdi
  0x00007f1a59048c4f:   add    %r14,%rbx
  0x00007f1a59048c52:   add    %r15,%r9
  0x00007f1a59048c55:   add    %r15,%rbx
  0x00007f1a59048c58:   add    %rdi,%rbx
  0x00007f1a59048c5b:   vpsrlq $0x13,%ymm7,%ymm3
  0x00007f1a59048c60:   vpsllq $0x2d,%ymm7,%ymm1
  0x00007f1a59048c65:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59048c69:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59048c6d:   vpsrlq $0x3d,%ymm7,%ymm3
  0x00007f1a59048c72:   vpsllq $0x3,%ymm7,%ymm1
  0x00007f1a59048c77:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f1a59048c7b:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f1a59048c7f:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f1a59048c84:   vpblendd $0xf0,%ymm2,%ymm7,%ymm7
  0x00007f1a59048c8a:   mov    %rbx,%rdi
  0x00007f1a59048c8d:   rorx   $0x29,%r9,%r13
  0x00007f1a59048c93:   rorx   $0x12,%r9,%r14
  0x00007f1a59048c99:   add    0x18(%rsp),%rax
  0x00007f1a59048c9e:   or     %r8,%rdi
  0x00007f1a59048ca1:   mov    %r10,%r15
  0x00007f1a59048ca4:   xor    %r11,%r15
  0x00007f1a59048ca7:   rorx   $0x22,%rbx,%r12
  0x00007f1a59048cad:   xor    %r14,%r13
  0x00007f1a59048cb0:   rorx   $0xe,%r9,%r14
  0x00007f1a59048cb6:   and    %r9,%r15
  0x00007f1a59048cb9:   add    %rax,%rdx
  0x00007f1a59048cbc:   and    %rcx,%rdi
  0x00007f1a59048cbf:   xor    %r14,%r13
  0x00007f1a59048cc2:   rorx   $0x27,%rbx,%r14
  0x00007f1a59048cc8:   xor    %r12,%r14
  0x00007f1a59048ccb:   rorx   $0x1c,%rbx,%r12
  0x00007f1a59048cd1:   xor    %r11,%r15
  0x00007f1a59048cd4:   xor    %r12,%r14
  0x00007f1a59048cd7:   mov    %rbx,%r12
  0x00007f1a59048cda:   and    %r8,%r12
  0x00007f1a59048cdd:   add    %r13,%r15
  0x00007f1a59048ce0:   or     %r12,%rdi
  0x00007f1a59048ce3:   add    %r14,%rax
  0x00007f1a59048ce6:   add    %r15,%rdx
  0x00007f1a59048ce9:   add    %r15,%rax
  0x00007f1a59048cec:   add    %rdi,%rax
  0x00007f1a59048cef:   subq   $0x1,0x20(%rsp)
  0x00007f1a59048cf5:   jne    Stub::sha512_implCompressMB+224 0x00007f1a59048380
  0x00007f1a59048cfb:   movq   $0x2,0x20(%rsp)
  0x00007f1a59048d04:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007f1a59048d09:   vmovdqu %ymm0,(%rsp)
  0x00007f1a59048d0e:   mov    %r9,%r15
  0x00007f1a59048d11:   rorx   $0x29,%rdx,%r13
  0x00007f1a59048d17:   rorx   $0x12,%rdx,%r14
  0x00007f1a59048d1d:   xor    %r10,%r15
  0x00007f1a59048d20:   xor    %r14,%r13
  0x00007f1a59048d23:   rorx   $0xe,%rdx,%r14
  0x00007f1a59048d29:   and    %rdx,%r15
  0x00007f1a59048d2c:   xor    %r14,%r13
  0x00007f1a59048d2f:   rorx   $0x22,%rax,%r12
  0x00007f1a59048d35:   xor    %r10,%r15
  0x00007f1a59048d38:   rorx   $0x27,%rax,%r14
  0x00007f1a59048d3e:   mov    %rax,%rdi
  0x00007f1a59048d41:   xor    %r12,%r14
  0x00007f1a59048d44:   rorx   $0x1c,%rax,%r12
  0x00007f1a59048d4a:   add    (%rsp),%r11
  0x00007f1a59048d4e:   or     %rcx,%rdi
  0x00007f1a59048d51:   xor    %r12,%r14
  0x00007f1a59048d54:   mov    %rax,%r12
  0x00007f1a59048d57:   and    %rbx,%rdi
  0x00007f1a59048d5a:   and    %rcx,%r12
  0x00007f1a59048d5d:   add    %r13,%r15
  0x00007f1a59048d60:   add    %r11,%r8
  0x00007f1a59048d63:   or     %r12,%rdi
  0x00007f1a59048d66:   add    %r14,%r11
  0x00007f1a59048d69:   add    %r15,%r8
  0x00007f1a59048d6c:   add    %r15,%r11
  0x00007f1a59048d6f:   mov    %rdx,%r15
  0x00007f1a59048d72:   rorx   $0x29,%r8,%r13
  0x00007f1a59048d78:   rorx   $0x12,%r8,%r14
  0x00007f1a59048d7e:   xor    %r9,%r15
  0x00007f1a59048d81:   xor    %r14,%r13
  0x00007f1a59048d84:   rorx   $0xe,%r8,%r14
  0x00007f1a59048d8a:   and    %r8,%r15
  0x00007f1a59048d8d:   add    %rdi,%r11
  0x00007f1a59048d90:   xor    %r14,%r13
  0x00007f1a59048d93:   rorx   $0x22,%r11,%r12
  0x00007f1a59048d99:   xor    %r9,%r15
  0x00007f1a59048d9c:   rorx   $0x27,%r11,%r14
  0x00007f1a59048da2:   mov    %r11,%rdi
  0x00007f1a59048da5:   xor    %r12,%r14
  0x00007f1a59048da8:   rorx   $0x1c,%r11,%r12
  0x00007f1a59048dae:   add    0x8(%rsp),%r10
  0x00007f1a59048db3:   or     %rbx,%rdi
  0x00007f1a59048db6:   xor    %r12,%r14
  0x00007f1a59048db9:   mov    %r11,%r12
  0x00007f1a59048dbc:   and    %rax,%rdi
  0x00007f1a59048dbf:   and    %rbx,%r12
  0x00007f1a59048dc2:   add    %r13,%r15
  0x00007f1a59048dc5:   add    %r10,%rcx
  0x00007f1a59048dc8:   or     %r12,%rdi
  0x00007f1a59048dcb:   add    %r14,%r10
  0x00007f1a59048dce:   add    %r15,%rcx
  0x00007f1a59048dd1:   add    %r15,%r10
  0x00007f1a59048dd4:   mov    %r8,%r15
  0x00007f1a59048dd7:   rorx   $0x29,%rcx,%r13
  0x00007f1a59048ddd:   rorx   $0x12,%rcx,%r14
  0x00007f1a59048de3:   xor    %rdx,%r15
  0x00007f1a59048de6:   xor    %r14,%r13
  0x00007f1a59048de9:   rorx   $0xe,%rcx,%r14
  0x00007f1a59048def:   and    %rcx,%r15
  0x00007f1a59048df2:   add    %rdi,%r10
  0x00007f1a59048df5:   xor    %r14,%r13
  0x00007f1a59048df8:   rorx   $0x22,%r10,%r12
  0x00007f1a59048dfe:   xor    %rdx,%r15
  0x00007f1a59048e01:   rorx   $0x27,%r10,%r14
  0x00007f1a59048e07:   mov    %r10,%rdi
  0x00007f1a59048e0a:   xor    %r12,%r14
  0x00007f1a59048e0d:   rorx   $0x1c,%r10,%r12
  0x00007f1a59048e13:   add    0x10(%rsp),%r9
  0x00007f1a59048e18:   or     %rax,%rdi
  0x00007f1a59048e1b:   xor    %r12,%r14
  0x00007f1a59048e1e:   mov    %r10,%r12
  0x00007f1a59048e21:   and    %r11,%rdi
  0x00007f1a59048e24:   and    %rax,%r12
  0x00007f1a59048e27:   add    %r13,%r15
  0x00007f1a59048e2a:   add    %r9,%rbx
  0x00007f1a59048e2d:   or     %r12,%rdi
  0x00007f1a59048e30:   add    %r14,%r9
  0x00007f1a59048e33:   add    %r15,%rbx
  0x00007f1a59048e36:   add    %r15,%r9
  0x00007f1a59048e39:   mov    %rcx,%r15
  0x00007f1a59048e3c:   rorx   $0x29,%rbx,%r13
  0x00007f1a59048e42:   rorx   $0x12,%rbx,%r14
  0x00007f1a59048e48:   xor    %r8,%r15
  0x00007f1a59048e4b:   xor    %r14,%r13
  0x00007f1a59048e4e:   rorx   $0xe,%rbx,%r14
  0x00007f1a59048e54:   and    %rbx,%r15
  0x00007f1a59048e57:   add    %rdi,%r9
  0x00007f1a59048e5a:   xor    %r14,%r13
  0x00007f1a59048e5d:   rorx   $0x22,%r9,%r12
  0x00007f1a59048e63:   xor    %r8,%r15
  0x00007f1a59048e66:   rorx   $0x27,%r9,%r14
  0x00007f1a59048e6c:   mov    %r9,%rdi
  0x00007f1a59048e6f:   xor    %r12,%r14
  0x00007f1a59048e72:   rorx   $0x1c,%r9,%r12
  0x00007f1a59048e78:   add    0x18(%rsp),%rdx
  0x00007f1a59048e7d:   or     %r11,%rdi
  0x00007f1a59048e80:   xor    %r12,%r14
  0x00007f1a59048e83:   mov    %r9,%r12
  0x00007f1a59048e86:   and    %r10,%rdi
  0x00007f1a59048e89:   and    %r11,%r12
  0x00007f1a59048e8c:   add    %r13,%r15
  0x00007f1a59048e8f:   add    %rdx,%rax
  0x00007f1a59048e92:   or     %r12,%rdi
  0x00007f1a59048e95:   add    %r14,%rdx
  0x00007f1a59048e98:   add    %r15,%rax
  0x00007f1a59048e9b:   add    %r15,%rdx
  0x00007f1a59048e9e:   add    %rdi,%rdx
  0x00007f1a59048ea1:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007f1a59048ea6:   vmovdqu %ymm0,(%rsp)
  0x00007f1a59048eab:   add    $0x40,%rbp
  0x00007f1a59048eaf:   mov    %rbx,%r15
  0x00007f1a59048eb2:   rorx   $0x29,%rax,%r13
  0x00007f1a59048eb8:   rorx   $0x12,%rax,%r14
  0x00007f1a59048ebe:   xor    %rcx,%r15
  0x00007f1a59048ec1:   xor    %r14,%r13
  0x00007f1a59048ec4:   rorx   $0xe,%rax,%r14
  0x00007f1a59048eca:   and    %rax,%r15
  0x00007f1a59048ecd:   xor    %r14,%r13
  0x00007f1a59048ed0:   rorx   $0x22,%rdx,%r12
  0x00007f1a59048ed6:   xor    %rcx,%r15
  0x00007f1a59048ed9:   rorx   $0x27,%rdx,%r14
  0x00007f1a59048edf:   mov    %rdx,%rdi
  0x00007f1a59048ee2:   xor    %r12,%r14
  0x00007f1a59048ee5:   rorx   $0x1c,%rdx,%r12
  0x00007f1a59048eeb:   add    (%rsp),%r8
  0x00007f1a59048eef:   or     %r10,%rdi
  0x00007f1a59048ef2:   xor    %r12,%r14
  0x00007f1a59048ef5:   mov    %rdx,%r12
  0x00007f1a59048ef8:   and    %r9,%rdi
  0x00007f1a59048efb:   and    %r10,%r12
  0x00007f1a59048efe:   add    %r13,%r15
  0x00007f1a59048f01:   add    %r8,%r11
  0x00007f1a59048f04:   or     %r12,%rdi
  0x00007f1a59048f07:   add    %r14,%r8
  0x00007f1a59048f0a:   add    %r15,%r11
  0x00007f1a59048f0d:   add    %r15,%r8
  0x00007f1a59048f10:   mov    %rax,%r15
  0x00007f1a59048f13:   rorx   $0x29,%r11,%r13
  0x00007f1a59048f19:   rorx   $0x12,%r11,%r14
  0x00007f1a59048f1f:   xor    %rbx,%r15
  0x00007f1a59048f22:   xor    %r14,%r13
  0x00007f1a59048f25:   rorx   $0xe,%r11,%r14
  0x00007f1a59048f2b:   and    %r11,%r15
  0x00007f1a59048f2e:   add    %rdi,%r8
  0x00007f1a59048f31:   xor    %r14,%r13
  0x00007f1a59048f34:   rorx   $0x22,%r8,%r12
  0x00007f1a59048f3a:   xor    %rbx,%r15
  0x00007f1a59048f3d:   rorx   $0x27,%r8,%r14
  0x00007f1a59048f43:   mov    %r8,%rdi
  0x00007f1a59048f46:   xor    %r12,%r14
  0x00007f1a59048f49:   rorx   $0x1c,%r8,%r12
  0x00007f1a59048f4f:   add    0x8(%rsp),%rcx
  0x00007f1a59048f54:   or     %r9,%rdi
  0x00007f1a59048f57:   xor    %r12,%r14
  0x00007f1a59048f5a:   mov    %r8,%r12
  0x00007f1a59048f5d:   and    %rdx,%rdi
  0x00007f1a59048f60:   and    %r9,%r12
  0x00007f1a59048f63:   add    %r13,%r15
  0x00007f1a59048f66:   add    %rcx,%r10
  0x00007f1a59048f69:   or     %r12,%rdi
  0x00007f1a59048f6c:   add    %r14,%rcx
  0x00007f1a59048f6f:   add    %r15,%r10
  0x00007f1a59048f72:   add    %r15,%rcx
  0x00007f1a59048f75:   mov    %r11,%r15
  0x00007f1a59048f78:   rorx   $0x29,%r10,%r13
  0x00007f1a59048f7e:   rorx   $0x12,%r10,%r14
  0x00007f1a59048f84:   xor    %rax,%r15
  0x00007f1a59048f87:   xor    %r14,%r13
  0x00007f1a59048f8a:   rorx   $0xe,%r10,%r14
  0x00007f1a59048f90:   and    %r10,%r15
  0x00007f1a59048f93:   add    %rdi,%rcx
  0x00007f1a59048f96:   xor    %r14,%r13
  0x00007f1a59048f99:   rorx   $0x22,%rcx,%r12
  0x00007f1a59048f9f:   xor    %rax,%r15
  0x00007f1a59048fa2:   rorx   $0x27,%rcx,%r14
  0x00007f1a59048fa8:   mov    %rcx,%rdi
  0x00007f1a59048fab:   xor    %r12,%r14
  0x00007f1a59048fae:   rorx   $0x1c,%rcx,%r12
  0x00007f1a59048fb4:   add    0x10(%rsp),%rbx
  0x00007f1a59048fb9:   or     %rdx,%rdi
  0x00007f1a59048fbc:   xor    %r12,%r14
  0x00007f1a59048fbf:   mov    %rcx,%r12
  0x00007f1a59048fc2:   and    %r8,%rdi
  0x00007f1a59048fc5:   and    %rdx,%r12
  0x00007f1a59048fc8:   add    %r13,%r15
  0x00007f1a59048fcb:   add    %rbx,%r9
  0x00007f1a59048fce:   or     %r12,%rdi
  0x00007f1a59048fd1:   add    %r14,%rbx
  0x00007f1a59048fd4:   add    %r15,%r9
  0x00007f1a59048fd7:   add    %r15,%rbx
  0x00007f1a59048fda:   mov    %r10,%r15
  0x00007f1a59048fdd:   rorx   $0x29,%r9,%r13
  0x00007f1a59048fe3:   rorx   $0x12,%r9,%r14
  0x00007f1a59048fe9:   xor    %r11,%r15
  0x00007f1a59048fec:   xor    %r14,%r13
  0x00007f1a59048fef:   rorx   $0xe,%r9,%r14
  0x00007f1a59048ff5:   and    %r9,%r15
  0x00007f1a59048ff8:   add    %rdi,%rbx
  0x00007f1a59048ffb:   xor    %r14,%r13
  0x00007f1a59048ffe:   rorx   $0x22,%rbx,%r12
  0x00007f1a59049004:   xor    %r11,%r15
  0x00007f1a59049007:   rorx   $0x27,%rbx,%r14
  0x00007f1a5904900d:   mov    %rbx,%rdi
  0x00007f1a59049010:   xor    %r12,%r14
  0x00007f1a59049013:   rorx   $0x1c,%rbx,%r12
  0x00007f1a59049019:   add    0x18(%rsp),%rax
  0x00007f1a5904901e:   or     %r8,%rdi
  0x00007f1a59049021:   xor    %r12,%r14
  0x00007f1a59049024:   mov    %rbx,%r12
  0x00007f1a59049027:   and    %rcx,%rdi
  0x00007f1a5904902a:   and    %r8,%r12
  0x00007f1a5904902d:   add    %r13,%r15
  0x00007f1a59049030:   add    %rax,%rdx
  0x00007f1a59049033:   or     %r12,%rdi
  0x00007f1a59049036:   add    %r14,%rax
  0x00007f1a59049039:   add    %r15,%rdx
  0x00007f1a5904903c:   add    %r15,%rax
  0x00007f1a5904903f:   add    %rdi,%rax
  0x00007f1a59049042:   vmovdqu %ymm6,%ymm4
  0x00007f1a59049046:   vmovdqu %ymm7,%ymm5
  0x00007f1a5904904a:   subq   $0x1,0x20(%rsp)
  0x00007f1a59049050:   jne    Stub::sha512_implCompressMB+2660 0x00007f1a59048d04
  0x00007f1a59049056:   add    (%rsi),%rax
  0x00007f1a59049059:   mov    %rax,(%rsi)
  0x00007f1a5904905c:   add    0x8(%rsi),%rbx
  0x00007f1a59049060:   mov    %rbx,0x8(%rsi)
  0x00007f1a59049064:   add    0x10(%rsi),%rcx
  0x00007f1a59049068:   mov    %rcx,0x10(%rsi)
  0x00007f1a5904906c:   add    0x18(%rsi),%r8
  0x00007f1a59049070:   mov    %r8,0x18(%rsi)
  0x00007f1a59049074:   add    0x20(%rsi),%rdx
  0x00007f1a59049078:   mov    %rdx,0x20(%rsi)
  0x00007f1a5904907c:   add    0x28(%rsi),%r9
  0x00007f1a59049080:   mov    %r9,0x28(%rsi)
  0x00007f1a59049084:   add    0x30(%rsi),%r10
  0x00007f1a59049088:   mov    %r10,0x30(%rsi)
  0x00007f1a5904908c:   add    0x38(%rsi),%r11
  0x00007f1a59049090:   mov    %r11,0x38(%rsi)
  0x00007f1a59049094:   mov    0x28(%rsp),%rdi
  0x00007f1a59049099:   add    $0x80,%rdi
  0x00007f1a590490a0:   cmp    0x30(%rsp),%rdi
  0x00007f1a590490a5:   jne    Stub::sha512_implCompressMB+155 0x00007f1a5904833b
  0x00007f1a590490ab:   mov    0x40(%rsp),%rbp
  0x00007f1a590490b0:   mov    0x48(%rsp),%rbx
  0x00007f1a590490b5:   mov    0x50(%rsp),%r12
  0x00007f1a590490ba:   mov    0x58(%rsp),%r13
  0x00007f1a590490bf:   mov    0x60(%rsp),%r14
  0x00007f1a590490c4:   mov    0x68(%rsp),%r15
  0x00007f1a590490c9:   mov    0x38(%rsp),%rsp
  0x00007f1a590490ce:   pop    %rcx
  0x00007f1a590490cf:   pop    %rdx
  0x00007f1a590490d0:   mov    %rdx,%rax
  0x00007f1a590490d3:   cmp    %rcx,%rax
  0x00007f1a590490d6:   jae    Stub::sha512_implCompressMB+3648 0x00007f1a590490e0
  0x00007f1a590490d8:   add    $0x80,%rax
  0x00007f1a590490de:   jmp    Stub::sha512_implCompressMB+3635 0x00007f1a590490d3
  0x00007f1a590490e0:   vzeroupper 
  0x00007f1a590490e3:   leaveq 
  0x00007f1a590490e4:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_shuffle_base64 [0x00007f1a59049100, 0x00007f1a59049120] (32 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049100:   add    $0x8050604,%eax
  0x00007f1a59049105:   (bad)  
  0x00007f1a59049106:   or     %ecx,(%rax)
  0x00007f1a59049108:   or     (%rdx),%ecx
  0x00007f1a5904910a:   or     $0xb,%al
  0x00007f1a5904910c:   (bad)  
  0x00007f1a5904910d:   or     $0x10e0f,%eax
  0x00007f1a59049112:   add    (%rcx),%al
  0x00007f1a59049114:   add    $0x3,%al
  0x00007f1a59049116:   add    $0x8060704,%eax
  0x00007f1a5904911b:   (bad)  
  0x00007f1a5904911c:   or     (%rcx),%cl
  0x00007f1a5904911e:   or     (%rdx),%ecx
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_input_mask_base64 [0x00007f1a59049120, 0x00007f1a59049140] (32 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049120:   add    %al,(%rax)
  0x00007f1a59049122:   add    %al,(%rax)
  0x00007f1a59049124:   add    %al,(%rax)
  0x00007f1a59049126:   add    %al,-0x80000000(%rax)
  0x00007f1a5904912c:   add    %al,(%rax)
  0x00007f1a5904912e:   add    %al,-0x80000000(%rax)
  0x00007f1a59049134:   add    %al,(%rax)
  0x00007f1a59049136:   add    %al,-0x80000000(%rax)
  0x00007f1a5904913c:   add    %al,(%rax)
  0x00007f1a5904913e:   .byte 0x0
  0x00007f1a5904913f:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_lut_base64 [0x00007f1a59049140, 0x00007f1a59049180] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049140:   rex.B
  0x00007f1a59049141:   rex.RXB cld 
  0x00007f1a59049143:   cld    
  0x00007f1a59049144:   cld    
  0x00007f1a59049145:   cld    
  0x00007f1a59049146:   cld    
  0x00007f1a59049147:   cld    
  0x00007f1a59049148:   cld    
  0x00007f1a59049149:   cld    
  0x00007f1a5904914a:   cld    
  0x00007f1a5904914b:   cld    
  0x00007f1a5904914c:   in     (%dx),%eax
  0x00007f1a5904914d:   lock add %al,(%rax)
  0x00007f1a59049150:   rex.B
  0x00007f1a59049151:   rex.RXB cld 
  0x00007f1a59049153:   cld    
  0x00007f1a59049154:   cld    
  0x00007f1a59049155:   cld    
  0x00007f1a59049156:   cld    
  0x00007f1a59049157:   cld    
  0x00007f1a59049158:   cld    
  0x00007f1a59049159:   cld    
  0x00007f1a5904915a:   cld    
  0x00007f1a5904915b:   cld    
  0x00007f1a5904915c:   in     (%dx),%eax
  0x00007f1a5904915d:   lock add %al,(%rax)
  0x00007f1a59049160:   rex.B
  0x00007f1a59049161:   rex.RXB cld 
  0x00007f1a59049163:   cld    
  0x00007f1a59049164:   cld    
  0x00007f1a59049165:   cld    
  0x00007f1a59049166:   cld    
  0x00007f1a59049167:   cld    
  0x00007f1a59049168:   cld    
  0x00007f1a59049169:   cld    
  0x00007f1a5904916a:   cld    
  0x00007f1a5904916b:   cld    
  0x00007f1a5904916c:   out    %eax,(%dx)
  0x00007f1a5904916d:   and    %al,(%rax)
  0x00007f1a5904916f:   add    %al,0x47(%rcx)
  0x00007f1a59049172:   cld    
  0x00007f1a59049173:   cld    
  0x00007f1a59049174:   cld    
  0x00007f1a59049175:   cld    
  0x00007f1a59049176:   cld    
  0x00007f1a59049177:   cld    
  0x00007f1a59049178:   cld    
  0x00007f1a59049179:   cld    
  0x00007f1a5904917a:   cld    
  0x00007f1a5904917b:   cld    
  0x00007f1a5904917c:   out    %eax,(%dx)
  0x00007f1a5904917d:   and    %al,(%rax)
  0x00007f1a5904917f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::AVX2_tables_base64 [0x00007f1a59049180, 0x00007f1a59049230] (176 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049180:   (bad)  
  0x00007f1a59049181:   (bad)  
  0x00007f1a59049182:   (bad)  
  0x00007f1a59049183:   (bad)  
  0x00007f1a59049184:   (bad)  
  0x00007f1a59049185:   (bad)  
  0x00007f1a59049186:   (bad)  
  0x00007f1a59049187:   (bad)  
  0x00007f1a59049188:   pop    %rdi
  0x00007f1a59049189:   pop    %rdi
  0x00007f1a5904918a:   pop    %rdi
  0x00007f1a5904918b:   pop    %rdi
  0x00007f1a5904918c:   pop    %rdi
  0x00007f1a5904918d:   pop    %rdi
  0x00007f1a5904918e:   pop    %rdi
  0x00007f1a5904918f:   pop    %rdi
  0x00007f1a59049190:   add    %al,(%rax)
  0x00007f1a59049192:   add    %al,(%rax)
  0x00007f1a59049194:   add    %eax,(%rax)
  0x00007f1a59049196:   add    %al,(%rax)
  0x00007f1a59049198:   add    (%rax),%al
  0x00007f1a5904919a:   add    %al,(%rax)
  0x00007f1a5904919c:   add    $0x0,%al
  0x00007f1a5904919e:   add    %al,(%rax)
  0x00007f1a590491a0:   add    $0x6000000,%eax
  0x00007f1a590491a5:   add    %al,(%rax)
  0x00007f1a590491a7:   add    %bh,%bh
  0x00007f1a590491a9:   (bad)  
  0x00007f1a590491aa:   (bad)  
  0x00007f1a590491ab:   (bad)  
  0x00007f1a590491ac:   (bad)  
  0x00007f1a590491ad:   (bad)  
  0x00007f1a590491ae:   (bad)  
  0x00007f1a590491af:   callq  *(%rax)
  0x00007f1a590491b1:   adc    %al,(%rcx)
  0x00007f1a590491b3:   add    (%rax,%rcx,1),%al
  0x00007f1a590491b6:   add    $0x8,%al
  0x00007f1a590491b8:   adc    %dl,(%rax)
  0x00007f1a590491ba:   adc    %dl,(%rax)
  0x00007f1a590491bc:   adc    %dl,(%rax)
  0x00007f1a590491be:   adc    %dl,(%rax)
  0x00007f1a590491c0:   adc    %dl,(%rax)
  0x00007f1a590491c2:   add    %eax,(%rdx)
  0x00007f1a590491c4:   add    $0x8,%al
  0x00007f1a590491c6:   add    $0x8,%al
  0x00007f1a590491c8:   adc    %dl,(%rax)
  0x00007f1a590491ca:   adc    %dl,(%rax)
  0x00007f1a590491cc:   adc    %dl,(%rax)
  0x00007f1a590491ce:   adc    %dl,(%rax)
  0x00007f1a590491d0:   rex add %eax,0x1(%rax)
  0x00007f1a590491d4:   rex add %eax,0x1(%rax)
  0x00007f1a590491d8:   rex add %eax,0x1(%rax)
  0x00007f1a590491dc:   rex add %eax,0x1(%rax)
  0x00007f1a590491e0:   rex add %eax,0x1(%rax)
  0x00007f1a590491e4:   rex add %eax,0x1(%rax)
  0x00007f1a590491e8:   rex add %eax,0x1(%rax)
  0x00007f1a590491ec:   rex add %eax,0x1(%rax)
  0x00007f1a590491f0:   add    %dl,(%rax)
  0x00007f1a590491f2:   add    %eax,(%rax)
  0x00007f1a590491f4:   add    %dl,(%rax)
  0x00007f1a590491f6:   add    %eax,(%rax)
  0x00007f1a590491f8:   add    %dl,(%rax)
  0x00007f1a590491fa:   add    %eax,(%rax)
  0x00007f1a590491fc:   add    %dl,(%rax)
  0x00007f1a590491fe:   add    %eax,(%rax)
  0x00007f1a59049200:   add    %dl,(%rax)
  0x00007f1a59049202:   add    %eax,(%rax)
  0x00007f1a59049204:   add    %dl,(%rax)
  0x00007f1a59049206:   add    %eax,(%rax)
  0x00007f1a59049208:   add    %dl,(%rax)
  0x00007f1a5904920a:   add    %eax,(%rax)
  0x00007f1a5904920c:   add    %dl,(%rax)
  0x00007f1a5904920e:   add    %eax,(%rax)
  0x00007f1a59049210:   add    (%rcx),%al
  0x00007f1a59049212:   add    %al,(%rsi)
  0x00007f1a59049214:   add    $0x8090a04,%eax
  0x00007f1a59049219:   (bad)  
  0x00007f1a5904921a:   or     $0xffffff0c,%eax
  0x00007f1a5904921f:   incl   (%rdx)
  0x00007f1a59049221:   add    %eax,(%rax)
  0x00007f1a59049223:   (bad)  
  0x00007f1a59049224:   add    $0x8090a04,%eax
  0x00007f1a59049229:   (bad)  
  0x00007f1a5904922a:   or     $0xffffff0c,%eax
  0x00007f1a5904922f:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::AVX2_tables_URL_base64 [0x00007f1a59049240, 0x00007f1a590492c0] (128 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049240:   adc    $0x11111111,%eax
  0x00007f1a59049245:   adc    %edx,(%rcx)
  0x00007f1a59049247:   adc    %edx,(%rcx)
  0x00007f1a59049249:   adc    %edx,(%rbx)
  0x00007f1a5904924b:   sbb    (%rbx),%bl
  0x00007f1a5904924d:   sbb    (%rbx),%ebx
  0x00007f1a5904924f:   sbb    0x11111111(%rip),%dl        # 0x00007f1a6a15a366
  0x00007f1a59049255:   adc    %edx,(%rcx)
  0x00007f1a59049257:   adc    %edx,(%rcx)
  0x00007f1a59049259:   adc    %edx,(%rbx)
  0x00007f1a5904925b:   sbb    (%rbx),%bl
  0x00007f1a5904925d:   sbb    (%rbx),%ebx
  0x00007f1a5904925f:   sbb    (%rax),%al
  0x00007f1a59049261:   adc    %dl,(%rbx)
  0x00007f1a59049263:   add    $0xbf,%al
  0x00007f1a59049265:   mov    $0xb9b9,%edi
  0x00007f1a5904926a:   add    %al,(%rax)
  0x00007f1a5904926c:   add    %al,(%rax)
  0x00007f1a5904926e:   add    %al,(%rax)
  0x00007f1a59049270:   add    %dl,(%rax)
  0x00007f1a59049272:   adc    (%rdi,%rdi,4),%eax
  0x00007f1a59049275:   mov    $0xb9b9,%edi
  0x00007f1a5904927a:   add    %al,(%rax)
  0x00007f1a5904927c:   add    %al,(%rax)
  0x00007f1a5904927e:   add    %al,(%rax)
  0x00007f1a59049280:   adc    $0x11111111,%eax
  0x00007f1a59049285:   adc    %edx,(%rcx)
  0x00007f1a59049287:   adc    %edx,(%rcx)
  0x00007f1a59049289:   adc    %edx,(%rbx)
  0x00007f1a5904928b:   sbb    (%rbx),%ebx
  0x00007f1a5904928d:   sbb    (%rbx),%bl
  0x00007f1a5904928f:   sbb    0x11111111(%rip),%edx        # 0x00007f1a6a15a3a6
  0x00007f1a59049295:   adc    %edx,(%rcx)
  0x00007f1a59049297:   adc    %edx,(%rcx)
  0x00007f1a59049299:   adc    %edx,(%rbx)
  0x00007f1a5904929b:   sbb    (%rbx),%ebx
  0x00007f1a5904929d:   sbb    (%rbx),%bl
  0x00007f1a5904929f:   sbb    (%rax),%eax
  0x00007f1a590492a1:   adc    %dl,(%rcx)
  0x00007f1a590492a3:   add    $0xbf,%al
  0x00007f1a590492a5:   mov    $0xb9b9,%edi
  0x00007f1a590492aa:   add    %al,(%rax)
  0x00007f1a590492ac:   add    %al,(%rax)
  0x00007f1a590492ae:   add    %al,(%rax)
  0x00007f1a590492b0:   add    %dl,(%rax)
  0x00007f1a590492b2:   adc    %eax,(%rdi,%rdi,4)
  0x00007f1a590492b5:   mov    $0xb9b9,%edi
  0x00007f1a590492ba:   add    %al,(%rax)
  0x00007f1a590492bc:   add    %al,(%rax)
  0x00007f1a590492be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::encoding_table_base64 [0x00007f1a590492c0, 0x00007f1a59049340] (128 bytes)
--------------------------------------------------------------------------------
  0x00007f1a590492c0:   rex.B
  0x00007f1a590492c1:   rex.X
  0x00007f1a590492c2:   rex.XB
  0x00007f1a590492c3:   rex.R
  0x00007f1a590492c4:   rex.RB
  0x00007f1a590492c5:   rex.RX
  0x00007f1a590492c6:   rex.RXB
  0x00007f1a590492c7:   rex.W
  0x00007f1a590492c8:   rex.WB
  0x00007f1a590492c9:   rex.WX
  0x00007f1a590492ca:   rex.WXB
  0x00007f1a590492cb:   rex.WR
  0x00007f1a590492cc:   rex.WRB
  0x00007f1a590492cd:   rex.WRX
  0x00007f1a590492ce:   rex.WRXB push %r8
  0x00007f1a590492d0:   push   %rcx
  0x00007f1a590492d1:   push   %rdx
  0x00007f1a590492d2:   push   %rbx
  0x00007f1a590492d3:   push   %rsp
  0x00007f1a590492d4:   push   %rbp
  0x00007f1a590492d5:   push   %rsi
  0x00007f1a590492d6:   push   %rdi
  0x00007f1a590492d7:   pop    %rax
  0x00007f1a590492d8:   pop    %rcx
  0x00007f1a590492d9:   pop    %rdx
  0x00007f1a590492da:   (bad)  
  0x00007f1a590492db:   (bad)  {%k5}
  0x00007f1a590492e0:   addr32 pushq $0x6c6b6a69
  0x00007f1a590492e6:   insl   (%dx),%es:(%rdi)
  0x00007f1a590492e7:   outsb  %ds:(%rsi),(%dx)
  0x00007f1a590492e8:   outsl  %ds:(%rsi),(%dx)
  0x00007f1a590492e9:   jo     Stub::<unknown> 0x00007f1a5904935c
  0x00007f1a590492eb:   jb     Stub::<unknown> 0x00007f1a59049360
  0x00007f1a590492ed:   je     Stub::<unknown> 0x00007f1a59049364
  0x00007f1a590492ef:   jbe    Stub::<unknown> 0x00007f1a59049368
  0x00007f1a590492f1:   js     Stub::<unknown> 0x00007f1a5904936c
  0x00007f1a590492f3:   jp     Stub::encoding_table_base64+101 0x00007f1a59049325
  0x00007f1a590492f5:   xor    %esi,(%rdx)
  0x00007f1a590492f7:   xor    0x39383736(,%rsi,1),%esi
  0x00007f1a590492fe:   sub    (%rdi),%ebp
  0x00007f1a59049300:   rex.B
  0x00007f1a59049301:   rex.X
  0x00007f1a59049302:   rex.XB
  0x00007f1a59049303:   rex.R
  0x00007f1a59049304:   rex.RB
  0x00007f1a59049305:   rex.RX
  0x00007f1a59049306:   rex.RXB
  0x00007f1a59049307:   rex.W
  0x00007f1a59049308:   rex.WB
  0x00007f1a59049309:   rex.WX
  0x00007f1a5904930a:   rex.WXB
  0x00007f1a5904930b:   rex.WR
  0x00007f1a5904930c:   rex.WRB
  0x00007f1a5904930d:   rex.WRX
  0x00007f1a5904930e:   rex.WRXB push %r8
  0x00007f1a59049310:   push   %rcx
  0x00007f1a59049311:   push   %rdx
  0x00007f1a59049312:   push   %rbx
  0x00007f1a59049313:   push   %rsp
  0x00007f1a59049314:   push   %rbp
  0x00007f1a59049315:   push   %rsi
  0x00007f1a59049316:   push   %rdi
  0x00007f1a59049317:   pop    %rax
  0x00007f1a59049318:   pop    %rcx
  0x00007f1a59049319:   pop    %rdx
  0x00007f1a5904931a:   (bad)  
  0x00007f1a5904931b:   (bad)  {%k5}
  0x00007f1a59049320:   addr32 pushq $0x6c6b6a69
  0x00007f1a59049326:   insl   (%dx),%es:(%rdi)
  0x00007f1a59049327:   outsb  %ds:(%rsi),(%dx)
  0x00007f1a59049328:   outsl  %ds:(%rsi),(%dx)
  0x00007f1a59049329:   jo     Stub::<unknown> 0x00007f1a5904939c
  0x00007f1a5904932b:   jb     Stub::<unknown> 0x00007f1a590493a0
  0x00007f1a5904932d:   je     Stub::<unknown> 0x00007f1a590493a4
  0x00007f1a5904932f:   jbe    Stub::<unknown> 0x00007f1a590493a8
  0x00007f1a59049331:   js     Stub::<unknown> 0x00007f1a590493ac
  0x00007f1a59049333:   jp     Stub::<unknown> 0x00007f1a59049365
  0x00007f1a59049335:   xor    %esi,(%rdx)
  0x00007f1a59049337:   xor    0x39383736(,%rsi,1),%esi
  0x00007f1a5904933e:   .byte 0x2d
  0x00007f1a5904933f:   pop    %rdi
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::decoding_table_base64 [0x00007f1a59049340, 0x00007f1a59049540] (512 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049340:   (bad)  
  0x00007f1a59049341:   (bad)  
  0x00007f1a59049342:   (bad)  
  0x00007f1a59049343:   (bad)  
  0x00007f1a59049344:   (bad)  
  0x00007f1a59049345:   (bad)  
  0x00007f1a59049346:   (bad)  
  0x00007f1a59049347:   (bad)  
  0x00007f1a59049348:   (bad)  
  0x00007f1a59049349:   (bad)  
  0x00007f1a5904934a:   (bad)  
  0x00007f1a5904934b:   (bad)  
  0x00007f1a5904934c:   (bad)  
  0x00007f1a5904934d:   (bad)  
  0x00007f1a5904934e:   (bad)  
  0x00007f1a5904934f:   (bad)  
  0x00007f1a59049350:   (bad)  
  0x00007f1a59049351:   (bad)  
  0x00007f1a59049352:   (bad)  
  0x00007f1a59049353:   (bad)  
  0x00007f1a59049354:   (bad)  
  0x00007f1a59049355:   (bad)  
  0x00007f1a59049356:   (bad)  
  0x00007f1a59049357:   (bad)  
  0x00007f1a59049358:   (bad)  
  0x00007f1a59049359:   (bad)  
  0x00007f1a5904935a:   (bad)  
  0x00007f1a5904935b:   (bad)  
  0x00007f1a5904935c:   (bad)  
  0x00007f1a5904935d:   (bad)  
  0x00007f1a5904935e:   (bad)  
  0x00007f1a5904935f:   (bad)  
  0x00007f1a59049360:   (bad)  
  0x00007f1a59049361:   (bad)  
  0x00007f1a59049362:   (bad)  
  0x00007f1a59049363:   (bad)  
  0x00007f1a59049364:   (bad)  
  0x00007f1a59049365:   (bad)  
  0x00007f1a59049366:   (bad)  
  0x00007f1a59049367:   (bad)  
  0x00007f1a59049368:   (bad)  
  0x00007f1a59049369:   (bad)  
  0x00007f1a5904936a:   (bad)  
  0x00007f1a5904936b:   ds (bad) 
  0x00007f1a5904936d:   (bad)  
  0x00007f1a5904936e:   (bad)  
  0x00007f1a5904936f:   (bad)  
  0x00007f1a59049370:   xor    $0x35,%al
  0x00007f1a59049372:   ss (bad) 
  0x00007f1a59049374:   cmp    %bh,(%rcx)
  0x00007f1a59049376:   cmp    (%rbx),%bh
  0x00007f1a59049378:   cmp    $0x3d,%al
  0x00007f1a5904937a:   (bad)  
  0x00007f1a5904937b:   (bad)  
  0x00007f1a5904937c:   (bad)  
  0x00007f1a5904937d:   (bad)  
  0x00007f1a5904937e:   (bad)  
  0x00007f1a5904937f:   (bad)  
  0x00007f1a59049380:   incl   (%rax)
  0x00007f1a59049382:   add    %eax,(%rdx)
  0x00007f1a59049384:   add    0x9080706(,%rax,1),%eax
  0x00007f1a5904938b:   or     (%rbx),%cl
  0x00007f1a5904938d:   or     $0xd,%al
  0x00007f1a5904938f:   (bad)  
  0x00007f1a59049390:   movups (%rcx),%xmm2
  0x00007f1a59049393:   adc    (%rbx),%dl
  0x00007f1a59049395:   adc    $0x15,%al
  0x00007f1a59049397:   (bad)  
  0x00007f1a59049398:   (bad)  
  0x00007f1a59049399:   sbb    %bl,(%rcx)
  0x00007f1a5904939b:   (bad)  
  0x00007f1a5904939c:   (bad)  
  0x00007f1a5904939d:   (bad)  
  0x00007f1a5904939e:   (bad)  
  0x00007f1a5904939f:   (bad)  
  0x00007f1a590493a0:   lcall  *(%rdx)
  0x00007f1a590493a2:   sbb    0x21201f1e(,%rbx,1),%ebx
  0x00007f1a590493a9:   and    (%rbx),%ah
  0x00007f1a590493ab:   and    $0x25,%al
  0x00007f1a590493ad:   es (bad) 
  0x00007f1a590493af:   sub    %ch,(%rcx)
  0x00007f1a590493b1:   sub    (%rbx),%ch
  0x00007f1a590493b3:   sub    $0x2d,%al
  0x00007f1a590493b5:   cs (bad) 
  0x00007f1a590493b7:   xor    %dh,(%rcx)
  0x00007f1a590493b9:   xor    (%rbx),%dh
  0x00007f1a590493bb:   (bad)  
  0x00007f1a590493bc:   (bad)  
  0x00007f1a590493bd:   (bad)  
  0x00007f1a590493be:   (bad)  
  0x00007f1a590493bf:   (bad)  
  0x00007f1a590493c0:   (bad)  
  0x00007f1a590493c1:   (bad)  
  0x00007f1a590493c2:   (bad)  
  0x00007f1a590493c3:   (bad)  
  0x00007f1a590493c4:   (bad)  
  0x00007f1a590493c5:   (bad)  
  0x00007f1a590493c6:   (bad)  
  0x00007f1a590493c7:   (bad)  
  0x00007f1a590493c8:   (bad)  
  0x00007f1a590493c9:   (bad)  
  0x00007f1a590493ca:   (bad)  
  0x00007f1a590493cb:   (bad)  
  0x00007f1a590493cc:   (bad)  
  0x00007f1a590493cd:   (bad)  
  0x00007f1a590493ce:   (bad)  
  0x00007f1a590493cf:   (bad)  
  0x00007f1a590493d0:   (bad)  
  0x00007f1a590493d1:   (bad)  
  0x00007f1a590493d2:   (bad)  
  0x00007f1a590493d3:   (bad)  
  0x00007f1a590493d4:   (bad)  
  0x00007f1a590493d5:   (bad)  
  0x00007f1a590493d6:   (bad)  
  0x00007f1a590493d7:   (bad)  
  0x00007f1a590493d8:   (bad)  
  0x00007f1a590493d9:   (bad)  
  0x00007f1a590493da:   (bad)  
  0x00007f1a590493db:   (bad)  
  0x00007f1a590493dc:   (bad)  
  0x00007f1a590493dd:   (bad)  
  0x00007f1a590493de:   (bad)  
  0x00007f1a590493df:   (bad)  
  0x00007f1a590493e0:   (bad)  
  0x00007f1a590493e1:   (bad)  
  0x00007f1a590493e2:   (bad)  
  0x00007f1a590493e3:   (bad)  
  0x00007f1a590493e4:   (bad)  
  0x00007f1a590493e5:   (bad)  
  0x00007f1a590493e6:   (bad)  
  0x00007f1a590493e7:   (bad)  
  0x00007f1a590493e8:   (bad)  
  0x00007f1a590493e9:   (bad)  
  0x00007f1a590493ea:   (bad)  
  0x00007f1a590493eb:   (bad)  
  0x00007f1a590493ec:   (bad)  
  0x00007f1a590493ed:   (bad)  
  0x00007f1a590493ee:   (bad)  
  0x00007f1a590493ef:   (bad)  
  0x00007f1a590493f0:   (bad)  
  0x00007f1a590493f1:   (bad)  
  0x00007f1a590493f2:   (bad)  
  0x00007f1a590493f3:   (bad)  
  0x00007f1a590493f4:   (bad)  
  0x00007f1a590493f5:   (bad)  
  0x00007f1a590493f6:   (bad)  
  0x00007f1a590493f7:   (bad)  
  0x00007f1a590493f8:   (bad)  
  0x00007f1a590493f9:   (bad)  
  0x00007f1a590493fa:   (bad)  
  0x00007f1a590493fb:   (bad)  
  0x00007f1a590493fc:   (bad)  
  0x00007f1a590493fd:   (bad)  
  0x00007f1a590493fe:   (bad)  
  0x00007f1a590493ff:   (bad)  
  0x00007f1a59049400:   (bad)  
  0x00007f1a59049401:   (bad)  
  0x00007f1a59049402:   (bad)  
  0x00007f1a59049403:   (bad)  
  0x00007f1a59049404:   (bad)  
  0x00007f1a59049405:   (bad)  
  0x00007f1a59049406:   (bad)  
  0x00007f1a59049407:   (bad)  
  0x00007f1a59049408:   (bad)  
  0x00007f1a59049409:   (bad)  
  0x00007f1a5904940a:   (bad)  
  0x00007f1a5904940b:   (bad)  
  0x00007f1a5904940c:   (bad)  
  0x00007f1a5904940d:   (bad)  
  0x00007f1a5904940e:   (bad)  
  0x00007f1a5904940f:   (bad)  
  0x00007f1a59049410:   (bad)  
  0x00007f1a59049411:   (bad)  
  0x00007f1a59049412:   (bad)  
  0x00007f1a59049413:   (bad)  
  0x00007f1a59049414:   (bad)  
  0x00007f1a59049415:   (bad)  
  0x00007f1a59049416:   (bad)  
  0x00007f1a59049417:   (bad)  
  0x00007f1a59049418:   (bad)  
  0x00007f1a59049419:   (bad)  
  0x00007f1a5904941a:   (bad)  
  0x00007f1a5904941b:   (bad)  
  0x00007f1a5904941c:   (bad)  
  0x00007f1a5904941d:   (bad)  
  0x00007f1a5904941e:   (bad)  
  0x00007f1a5904941f:   (bad)  
  0x00007f1a59049420:   (bad)  
  0x00007f1a59049421:   (bad)  
  0x00007f1a59049422:   (bad)  
  0x00007f1a59049423:   (bad)  
  0x00007f1a59049424:   (bad)  
  0x00007f1a59049425:   (bad)  
  0x00007f1a59049426:   (bad)  
  0x00007f1a59049427:   (bad)  
  0x00007f1a59049428:   (bad)  
  0x00007f1a59049429:   (bad)  
  0x00007f1a5904942a:   (bad)  
  0x00007f1a5904942b:   (bad)  
  0x00007f1a5904942c:   (bad)  
  0x00007f1a5904942d:   (bad)  
  0x00007f1a5904942e:   (bad)  
  0x00007f1a5904942f:   (bad)  
  0x00007f1a59049430:   (bad)  
  0x00007f1a59049431:   (bad)  
  0x00007f1a59049432:   (bad)  
  0x00007f1a59049433:   (bad)  
  0x00007f1a59049434:   (bad)  
  0x00007f1a59049435:   (bad)  
  0x00007f1a59049436:   (bad)  
  0x00007f1a59049437:   (bad)  
  0x00007f1a59049438:   (bad)  
  0x00007f1a59049439:   (bad)  
  0x00007f1a5904943a:   (bad)  
  0x00007f1a5904943b:   (bad)  
  0x00007f1a5904943c:   (bad)  
  0x00007f1a5904943d:   (bad)  
  0x00007f1a5904943e:   (bad)  
  0x00007f1a5904943f:   (bad)  
  0x00007f1a59049440:   (bad)  
  0x00007f1a59049441:   (bad)  
  0x00007f1a59049442:   (bad)  
  0x00007f1a59049443:   (bad)  
  0x00007f1a59049444:   (bad)  
  0x00007f1a59049445:   (bad)  
  0x00007f1a59049446:   (bad)  
  0x00007f1a59049447:   (bad)  
  0x00007f1a59049448:   (bad)  
  0x00007f1a59049449:   (bad)  
  0x00007f1a5904944a:   (bad)  
  0x00007f1a5904944b:   (bad)  
  0x00007f1a5904944c:   (bad)  
  0x00007f1a5904944d:   (bad)  
  0x00007f1a5904944e:   (bad)  
  0x00007f1a5904944f:   (bad)  
  0x00007f1a59049450:   (bad)  
  0x00007f1a59049451:   (bad)  
  0x00007f1a59049452:   (bad)  
  0x00007f1a59049453:   (bad)  
  0x00007f1a59049454:   (bad)  
  0x00007f1a59049455:   (bad)  
  0x00007f1a59049456:   (bad)  
  0x00007f1a59049457:   (bad)  
  0x00007f1a59049458:   (bad)  
  0x00007f1a59049459:   (bad)  
  0x00007f1a5904945a:   (bad)  
  0x00007f1a5904945b:   (bad)  
  0x00007f1a5904945c:   (bad)  
  0x00007f1a5904945d:   (bad)  
  0x00007f1a5904945e:   (bad)  
  0x00007f1a5904945f:   (bad)  
  0x00007f1a59049460:   (bad)  
  0x00007f1a59049461:   (bad)  
  0x00007f1a59049462:   (bad)  
  0x00007f1a59049463:   (bad)  
  0x00007f1a59049464:   (bad)  
  0x00007f1a59049465:   (bad)  
  0x00007f1a59049466:   (bad)  
  0x00007f1a59049467:   (bad)  
  0x00007f1a59049468:   (bad)  
  0x00007f1a59049469:   (bad)  
  0x00007f1a5904946a:   (bad)  
  0x00007f1a5904946b:   (bad)  
  0x00007f1a5904946c:   (bad)  
  0x00007f1a5904946d:   ds (bad) 
  0x00007f1a5904946f:   pushq  0x39383736(,%rsi,1)
  0x00007f1a59049476:   cmp    (%rbx),%bh
  0x00007f1a59049478:   cmp    $0x3d,%al
  0x00007f1a5904947a:   (bad)  
  0x00007f1a5904947b:   (bad)  
  0x00007f1a5904947c:   (bad)  
  0x00007f1a5904947d:   (bad)  
  0x00007f1a5904947e:   (bad)  
  0x00007f1a5904947f:   (bad)  
  0x00007f1a59049480:   incl   (%rax)
  0x00007f1a59049482:   add    %eax,(%rdx)
  0x00007f1a59049484:   add    0x9080706(,%rax,1),%eax
  0x00007f1a5904948b:   or     (%rbx),%cl
  0x00007f1a5904948d:   or     $0xd,%al
  0x00007f1a5904948f:   (bad)  
  0x00007f1a59049490:   movups (%rcx),%xmm2
  0x00007f1a59049493:   adc    (%rbx),%dl
  0x00007f1a59049495:   adc    $0x15,%al
  0x00007f1a59049497:   (bad)  
  0x00007f1a59049498:   (bad)  
  0x00007f1a59049499:   sbb    %bl,(%rcx)
  0x00007f1a5904949b:   (bad)  
  0x00007f1a5904949c:   (bad)  
  0x00007f1a5904949d:   (bad)  
  0x00007f1a5904949e:   (bad)  
  0x00007f1a5904949f:   (bad)  
  0x00007f1a590494a0:   lcall  *(%rdx)
  0x00007f1a590494a2:   sbb    0x21201f1e(,%rbx,1),%ebx
  0x00007f1a590494a9:   and    (%rbx),%ah
  0x00007f1a590494ab:   and    $0x25,%al
  0x00007f1a590494ad:   es (bad) 
  0x00007f1a590494af:   sub    %ch,(%rcx)
  0x00007f1a590494b1:   sub    (%rbx),%ch
  0x00007f1a590494b3:   sub    $0x2d,%al
  0x00007f1a590494b5:   cs (bad) 
  0x00007f1a590494b7:   xor    %dh,(%rcx)
  0x00007f1a590494b9:   xor    (%rbx),%dh
  0x00007f1a590494bb:   (bad)  
  0x00007f1a590494bc:   (bad)  
  0x00007f1a590494bd:   (bad)  
  0x00007f1a590494be:   (bad)  
  0x00007f1a590494bf:   (bad)  
  0x00007f1a590494c0:   (bad)  
  0x00007f1a590494c1:   (bad)  
  0x00007f1a590494c2:   (bad)  
  0x00007f1a590494c3:   (bad)  
  0x00007f1a590494c4:   (bad)  
  0x00007f1a590494c5:   (bad)  
  0x00007f1a590494c6:   (bad)  
  0x00007f1a590494c7:   (bad)  
  0x00007f1a590494c8:   (bad)  
  0x00007f1a590494c9:   (bad)  
  0x00007f1a590494ca:   (bad)  
  0x00007f1a590494cb:   (bad)  
  0x00007f1a590494cc:   (bad)  
  0x00007f1a590494cd:   (bad)  
  0x00007f1a590494ce:   (bad)  
  0x00007f1a590494cf:   (bad)  
  0x00007f1a590494d0:   (bad)  
  0x00007f1a590494d1:   (bad)  
  0x00007f1a590494d2:   (bad)  
  0x00007f1a590494d3:   (bad)  
  0x00007f1a590494d4:   (bad)  
  0x00007f1a590494d5:   (bad)  
  0x00007f1a590494d6:   (bad)  
  0x00007f1a590494d7:   (bad)  
  0x00007f1a590494d8:   (bad)  
  0x00007f1a590494d9:   (bad)  
  0x00007f1a590494da:   (bad)  
  0x00007f1a590494db:   (bad)  
  0x00007f1a590494dc:   (bad)  
  0x00007f1a590494dd:   (bad)  
  0x00007f1a590494de:   (bad)  
  0x00007f1a590494df:   (bad)  
  0x00007f1a590494e0:   (bad)  
  0x00007f1a590494e1:   (bad)  
  0x00007f1a590494e2:   (bad)  
  0x00007f1a590494e3:   (bad)  
  0x00007f1a590494e4:   (bad)  
  0x00007f1a590494e5:   (bad)  
  0x00007f1a590494e6:   (bad)  
  0x00007f1a590494e7:   (bad)  
  0x00007f1a590494e8:   (bad)  
  0x00007f1a590494e9:   (bad)  
  0x00007f1a590494ea:   (bad)  
  0x00007f1a590494eb:   (bad)  
  0x00007f1a590494ec:   (bad)  
  0x00007f1a590494ed:   (bad)  
  0x00007f1a590494ee:   (bad)  
  0x00007f1a590494ef:   (bad)  
  0x00007f1a590494f0:   (bad)  
  0x00007f1a590494f1:   (bad)  
  0x00007f1a590494f2:   (bad)  
  0x00007f1a590494f3:   (bad)  
  0x00007f1a590494f4:   (bad)  
  0x00007f1a590494f5:   (bad)  
  0x00007f1a590494f6:   (bad)  
  0x00007f1a590494f7:   (bad)  
  0x00007f1a590494f8:   (bad)  
  0x00007f1a590494f9:   (bad)  
  0x00007f1a590494fa:   (bad)  
  0x00007f1a590494fb:   (bad)  
  0x00007f1a590494fc:   (bad)  
  0x00007f1a590494fd:   (bad)  
  0x00007f1a590494fe:   (bad)  
  0x00007f1a590494ff:   (bad)  
  0x00007f1a59049500:   (bad)  
  0x00007f1a59049501:   (bad)  
  0x00007f1a59049502:   (bad)  
  0x00007f1a59049503:   (bad)  
  0x00007f1a59049504:   (bad)  
  0x00007f1a59049505:   (bad)  
  0x00007f1a59049506:   (bad)  
  0x00007f1a59049507:   (bad)  
  0x00007f1a59049508:   (bad)  
  0x00007f1a59049509:   (bad)  
  0x00007f1a5904950a:   (bad)  
  0x00007f1a5904950b:   (bad)  
  0x00007f1a5904950c:   (bad)  
  0x00007f1a5904950d:   (bad)  
  0x00007f1a5904950e:   (bad)  
  0x00007f1a5904950f:   (bad)  
  0x00007f1a59049510:   (bad)  
  0x00007f1a59049511:   (bad)  
  0x00007f1a59049512:   (bad)  
  0x00007f1a59049513:   (bad)  
  0x00007f1a59049514:   (bad)  
  0x00007f1a59049515:   (bad)  
  0x00007f1a59049516:   (bad)  
  0x00007f1a59049517:   (bad)  
  0x00007f1a59049518:   (bad)  
  0x00007f1a59049519:   (bad)  
  0x00007f1a5904951a:   (bad)  
  0x00007f1a5904951b:   (bad)  
  0x00007f1a5904951c:   (bad)  
  0x00007f1a5904951d:   (bad)  
  0x00007f1a5904951e:   (bad)  
  0x00007f1a5904951f:   (bad)  
  0x00007f1a59049520:   (bad)  
  0x00007f1a59049521:   (bad)  
  0x00007f1a59049522:   (bad)  
  0x00007f1a59049523:   (bad)  
  0x00007f1a59049524:   (bad)  
  0x00007f1a59049525:   (bad)  
  0x00007f1a59049526:   (bad)  
  0x00007f1a59049527:   (bad)  
  0x00007f1a59049528:   (bad)  
  0x00007f1a59049529:   (bad)  
  0x00007f1a5904952a:   (bad)  
  0x00007f1a5904952b:   (bad)  
  0x00007f1a5904952c:   (bad)  
  0x00007f1a5904952d:   (bad)  
  0x00007f1a5904952e:   (bad)  
  0x00007f1a5904952f:   (bad)  
  0x00007f1a59049530:   (bad)  
  0x00007f1a59049531:   (bad)  
  0x00007f1a59049532:   (bad)  
  0x00007f1a59049533:   (bad)  
  0x00007f1a59049534:   (bad)  
  0x00007f1a59049535:   (bad)  
  0x00007f1a59049536:   (bad)  
  0x00007f1a59049537:   (bad)  
  0x00007f1a59049538:   (bad)  
  0x00007f1a59049539:   (bad)  
  0x00007f1a5904953a:   (bad)  
  0x00007f1a5904953b:   (bad)  
  0x00007f1a5904953c:   (bad)  
  0x00007f1a5904953d:   (bad)  
  0x00007f1a5904953e:   (bad)  
  0x00007f1a5904953f:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::implEncode [0x00007f1a59049540, 0x00007f1a59049736] (502 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049540:   push   %rbp
  0x00007f1a59049541:   mov    %rsp,%rbp
  0x00007f1a59049544:   push   %r12
  0x00007f1a59049546:   push   %r13
  0x00007f1a59049548:   push   %r14
  0x00007f1a5904954a:   push   %r15
  0x00007f1a5904954c:   mov    %edx,%r14d
  0x00007f1a5904954f:   sub    %esi,%r14d
  0x00007f1a59049552:   cmp    $0x0,%r14d
  0x00007f1a59049556:   jle    Stub::implEncode+492 0x00007f1a5904972c
  0x00007f1a5904955c:   cmp    $0x1f,%r14d
  0x00007f1a59049560:   jbe    Stub::implEncode+333 0x00007f1a5904968d
  0x00007f1a59049566:   vmovdqu -0x46e(%rip),%ymm9        # Stub::avx2_shuffle_base64
  0x00007f1a5904956e:   mov    $0xfc0fc00,%eax
  0x00007f1a59049573:   vmovd  %eax,%xmm8
  0x00007f1a59049577:   vmovdqu -0x45f(%rip),%ymm1        # Stub::avx2_input_mask_base64
  0x00007f1a5904957f:   vpbroadcastd %xmm8,%ymm8
  0x00007f1a59049584:   mov    $0x4000040,%eax
  0x00007f1a59049589:   sub    $0x18,%r14d
  0x00007f1a5904958d:   vmovd  %eax,%xmm7
  0x00007f1a59049591:   vpbroadcastd %xmm7,%ymm7
  0x00007f1a59049596:   vpmaskmovd -0x4(%rdi,%rsi,1),%ymm1,%ymm1
  0x00007f1a5904959d:   vpshufb %ymm9,%ymm1,%ymm1
  0x00007f1a590495a2:   add    $0x18,%esi
  0x00007f1a590495a5:   mov    $0x3f03f0,%eax
  0x00007f1a590495aa:   vmovd  %eax,%xmm6
  0x00007f1a590495ae:   vpbroadcastd %xmm6,%ymm6
  0x00007f1a590495b3:   mov    $0x1000010,%eax
  0x00007f1a590495b8:   vmovd  %eax,%xmm5
  0x00007f1a590495bc:   vpbroadcastd %xmm5,%ymm5
  0x00007f1a590495c1:   vpand  %ymm1,%ymm8,%ymm0
  0x00007f1a590495c5:   mov    $0x19191919,%eax
  0x00007f1a590495ca:   vmovd  %eax,%xmm3
  0x00007f1a590495ce:   vpbroadcastd %xmm3,%ymm3
  0x00007f1a590495d3:   mov    $0x33333333,%eax
  0x00007f1a590495d8:   vmovd  %eax,%xmm4
  0x00007f1a590495dc:   vpbroadcastd %xmm4,%ymm4
  0x00007f1a590495e1:   vpmulhuw %ymm7,%ymm0,%ymm2
  0x00007f1a590495e5:   vpand  %ymm1,%ymm6,%ymm0
  0x00007f1a590495e9:   vpmullw %ymm0,%ymm5,%ymm0
  0x00007f1a590495ed:   vpor   %ymm2,%ymm0,%ymm0
  0x00007f1a590495f1:   vpcmpgtb %ymm3,%ymm0,%ymm2
  0x00007f1a590495f5:   vpsubusb %ymm4,%ymm0,%ymm1
  0x00007f1a590495f9:   vpsubb %ymm2,%ymm1,%ymm1
  0x00007f1a590495fd:   movabs $0x7f1a59049140,%r11
  0x00007f1a59049607:   mov    %r9d,%r15d
  0x00007f1a5904960a:   shl    $0x5,%r15d
  0x00007f1a5904960e:   vmovdqu (%r11,%r15,1),%ymm2
  0x00007f1a59049614:   vpshufb %ymm1,%ymm2,%ymm1
  0x00007f1a59049619:   vpaddb %ymm0,%ymm1,%ymm0
  0x00007f1a5904961d:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007f1a59049623:   add    $0x20,%r8d
  0x00007f1a59049627:   cmp    $0x1f,%r14d
  0x00007f1a5904962b:   jbe    Stub::implEncode+333 0x00007f1a5904968d
  0x00007f1a59049631:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a5904963c:   data16 data16 xchg %ax,%ax
  0x00007f1a59049640:   vmovdqu -0x4(%rdi,%rsi,1),%ymm1
  0x00007f1a59049646:   sub    $0x18,%r14d
  0x00007f1a5904964a:   add    $0x18,%esi
  0x00007f1a5904964d:   vpshufb %ymm9,%ymm1,%ymm1
  0x00007f1a59049652:   vpand  %ymm1,%ymm8,%ymm0
  0x00007f1a59049656:   vpmulhuw %ymm7,%ymm0,%ymm10
  0x00007f1a5904965a:   vpand  %ymm1,%ymm6,%ymm0
  0x00007f1a5904965e:   vpmullw %ymm0,%ymm5,%ymm0
  0x00007f1a59049662:   vpor   %ymm10,%ymm0,%ymm0
  0x00007f1a59049667:   vpcmpgtb %ymm3,%ymm0,%ymm10
  0x00007f1a5904966b:   vpsubusb %ymm4,%ymm0,%ymm1
  0x00007f1a5904966f:   vpsubb %ymm10,%ymm1,%ymm1
  0x00007f1a59049674:   vpshufb %ymm1,%ymm2,%ymm1
  0x00007f1a59049679:   vpaddb %ymm0,%ymm1,%ymm0
  0x00007f1a5904967d:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007f1a59049683:   add    $0x20,%r8d
  0x00007f1a59049687:   cmp    $0x1f,%r14d
  0x00007f1a5904968b:   ja     Stub::implEncode+256 0x00007f1a59049640
  0x00007f1a5904968d:   vzeroupper 
  0x00007f1a59049690:   cmp    $0x3,%r14d
  0x00007f1a59049694:   jb     Stub::implEncode+492 0x00007f1a5904972c
  0x00007f1a5904969a:   movabs $0x7f1a590492c0,%r11
  0x00007f1a590496a4:   mov    %r9d,%r15d
  0x00007f1a590496a7:   shl    $0x6,%r15d
  0x00007f1a590496ab:   add    %r15,%r11
  0x00007f1a590496ae:   movzbl (%rdi,%rsi,1),%r15d
  0x00007f1a590496b3:   movzbl 0x1(%rdi,%rsi,1),%r10d
  0x00007f1a590496b9:   movzbl 0x2(%rdi,%rsi,1),%r13d
  0x00007f1a590496bf:   mov    %r10d,%eax
  0x00007f1a590496c2:   shl    $0x18,%r10d
  0x00007f1a590496c6:   or     %r10d,%eax
  0x00007f1a590496c9:   sub    $0x3,%r14d
  0x00007f1a590496cd:   shl    $0x8,%r15d
  0x00007f1a590496d1:   shl    $0x10,%r13d
  0x00007f1a590496d5:   or     %r15d,%eax
  0x00007f1a590496d8:   add    $0x3,%esi
  0x00007f1a590496db:   or     %r13d,%eax
  0x00007f1a590496de:   shr    $0x10,%r13d
  0x00007f1a590496e2:   and    $0x3f,%r13d
  0x00007f1a590496e6:   shr    $0xa,%r15d
  0x00007f1a590496ea:   movzbl (%r11,%r13,1),%r13d
  0x00007f1a590496ef:   movzbl (%r11,%r15,1),%r15d
  0x00007f1a590496f4:   mov    %r13b,0x3(%rcx,%r8,1)
  0x00007f1a590496f9:   shr    $0x4,%eax
  0x00007f1a590496fc:   mov    %eax,%r10d
  0x00007f1a590496ff:   and    $0x3f,%eax
  0x00007f1a59049702:   mov    %r15b,(%rcx,%r8,1)
  0x00007f1a59049706:   movzbl (%r11,%rax,1),%eax
  0x00007f1a5904970b:   shr    $0x12,%r10d
  0x00007f1a5904970f:   and    $0x3f,%r10d
  0x00007f1a59049713:   movzbl (%r11,%r10,1),%r10d
  0x00007f1a59049718:   mov    %al,0x1(%rcx,%r8,1)
  0x00007f1a5904971d:   mov    %r10b,0x2(%rcx,%r8,1)
  0x00007f1a59049722:   add    $0x4,%r8d
  0x00007f1a59049726:   cmp    $0x3,%r14d
  0x00007f1a5904972a:   jae    Stub::implEncode+366 0x00007f1a590496ae
  0x00007f1a5904972c:   pop    %r15
  0x00007f1a5904972e:   pop    %r14
  0x00007f1a59049730:   pop    %r13
  0x00007f1a59049732:   pop    %r12
  0x00007f1a59049734:   leaveq 
  0x00007f1a59049735:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::implDecode [0x00007f1a59049740, 0x00007f1a59049904] (452 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049740:   push   %rbp
  0x00007f1a59049741:   mov    %rsp,%rbp
  0x00007f1a59049744:   push   %r12
  0x00007f1a59049746:   push   %r13
  0x00007f1a59049748:   push   %r14
  0x00007f1a5904974a:   push   %r15
  0x00007f1a5904974c:   push   %rbx
  0x00007f1a5904974d:   mov    0x10(%rbp),%ebx
  0x00007f1a59049750:   mov    %edx,%r14d
  0x00007f1a59049753:   sub    %esi,%r14d
  0x00007f1a59049756:   push   %rcx
  0x00007f1a59049757:   sub    $0x2c,%r14d
  0x00007f1a5904975b:   cmp    $0x0,%r14d
  0x00007f1a5904975f:   jbe    Stub::implDecode+255 0x00007f1a5904983f
  0x00007f1a59049765:   cmp    $0x0,%ebx
  0x00007f1a59049768:   jne    Stub::implDecode+255 0x00007f1a5904983f
  0x00007f1a5904976e:   shl    $0x3,%r9d
  0x00007f1a59049772:   movabs $0x7f1a59049180,%r13
  0x00007f1a5904977c:   vpbroadcastq 0x0(%r13,%r9,1),%ymm4
  0x00007f1a59049783:   vmovdqu %ymm4,%ymm10
  0x00007f1a59049787:   vmovdqu 0x10(%r13),%ymm12
  0x00007f1a5904978d:   vmovdqu 0x30(%r13),%ymm9
  0x00007f1a59049793:   vmovdqu 0x50(%r13),%ymm7
  0x00007f1a59049799:   vmovdqu 0x70(%r13),%ymm6
  0x00007f1a5904979f:   vmovdqu 0x90(%r13),%ymm13
  0x00007f1a590497a8:   movabs $0x7f1a59049240,%r13
  0x00007f1a590497b2:   shl    $0x2,%r9d
  0x00007f1a590497b6:   vmovdqu 0x0(%r13,%r9,1),%ymm11
  0x00007f1a590497bd:   vmovdqu 0x20(%r13,%r9,1),%ymm8
  0x00007f1a590497c4:   shr    $0x5,%r9d
  0x00007f1a590497c8:   jmpq   Stub::implDecode+207 0x00007f1a5904980f
  0x00007f1a590497cd:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a590497d8:   data16 data16 xchg %ax,%ax
  0x00007f1a590497dc:   nopl   0x0(%rax)
  0x00007f1a590497e0:   vpaddb %ymm2,%ymm0,%ymm0
  0x00007f1a590497e4:   vpmaddubsw %ymm7,%ymm0,%ymm0
  0x00007f1a590497e9:   vpmaddwd %ymm6,%ymm0,%ymm0
  0x00007f1a590497ed:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007f1a590497f2:   vpermd %ymm0,%ymm12,%ymm0
  0x00007f1a590497f7:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007f1a590497fd:   add    $0x20,%rdi
  0x00007f1a59049801:   add    $0x18,%rcx
  0x00007f1a59049805:   sub    $0x20,%r14d
  0x00007f1a59049809:   jbe    Stub::implDecode+255 0x00007f1a5904983f
  0x00007f1a5904980f:   vmovdqu (%rdi,%rsi,1),%ymm2
  0x00007f1a59049814:   vpsrld $0x4,%ymm2,%ymm1
  0x00007f1a59049819:   vpand  %ymm1,%ymm4,%ymm1
  0x00007f1a5904981d:   vpand  %ymm4,%ymm2,%ymm3
  0x00007f1a59049821:   vpcmpeqb %ymm2,%ymm10,%ymm0
  0x00007f1a59049825:   vpshufb %ymm3,%ymm11,%ymm3
  0x00007f1a5904982a:   vpshufb %ymm1,%ymm9,%ymm5
  0x00007f1a5904982f:   vptest %ymm5,%ymm3
  0x00007f1a59049834:   vpaddb %ymm1,%ymm0,%ymm0
  0x00007f1a59049838:   vpshufb %ymm0,%ymm8,%ymm0
  0x00007f1a5904983d:   je     Stub::implDecode+160 0x00007f1a590497e0
  0x00007f1a5904983f:   add    $0x2c,%r14d
  0x00007f1a59049843:   vzeroupper 
  0x00007f1a59049846:   shr    $0x2,%r14d
  0x00007f1a5904984a:   cmp    $0x0,%r14d
  0x00007f1a5904984e:   jle    Stub::implDecode+434 0x00007f1a590498f2
  0x00007f1a59049854:   shl    $0x8,%r9d
  0x00007f1a59049858:   movabs $0x7f1a59049340,%r11
  0x00007f1a59049862:   add    %r9,%r11
  0x00007f1a59049865:   jmpq   Stub::implDecode+379 0x00007f1a590498bb
  0x00007f1a5904986a:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a59049875:   data16 data16 xchg %ax,%ax
  0x00007f1a59049879:   nopl   0x0(%rax)
  0x00007f1a59049880:   shl    $0x12,%r13d
  0x00007f1a59049884:   shl    $0xc,%r15d
  0x00007f1a59049888:   shl    $0x6,%edx
  0x00007f1a5904988b:   or     %r15d,%r13d
  0x00007f1a5904988e:   or     %edx,%r13d
  0x00007f1a59049891:   or     %r9d,%r13d
  0x00007f1a59049894:   add    $0x4,%rdi
  0x00007f1a59049898:   mov    %r13b,0x2(%rcx,%r8,1)
  0x00007f1a5904989d:   shr    $0x8,%r13d
  0x00007f1a590498a1:   mov    %r13b,0x1(%rcx,%r8,1)
  0x00007f1a590498a6:   shr    $0x8,%r13d
  0x00007f1a590498aa:   mov    %r13b,(%rcx,%r8,1)
  0x00007f1a590498ae:   add    $0x3,%rcx
  0x00007f1a590498b2:   dec    %r14d
  0x00007f1a590498b5:   je     Stub::implDecode+434 0x00007f1a590498f2
  0x00007f1a590498bb:   movzbl (%rdi,%rsi,1),%r13d
  0x00007f1a590498c0:   movzbl 0x1(%rdi,%rsi,1),%r15d
  0x00007f1a590498c6:   movsbl (%r11,%r13,1),%r13d
  0x00007f1a590498cb:   movsbl (%r11,%r15,1),%r15d
  0x00007f1a590498d0:   movzbl 0x2(%rdi,%rsi,1),%edx
  0x00007f1a590498d5:   movzbl 0x3(%rdi,%rsi,1),%r9d
  0x00007f1a590498db:   movsbl (%r11,%rdx,1),%edx
  0x00007f1a590498e0:   movsbl (%r11,%r9,1),%r9d
  0x00007f1a590498e5:   mov    %r13,%rax
  0x00007f1a590498e8:   or     %r15d,%eax
  0x00007f1a590498eb:   or     %edx,%eax
  0x00007f1a590498ed:   or     %r9d,%eax
  0x00007f1a590498f0:   jns    Stub::implDecode+320 0x00007f1a59049880
  0x00007f1a590498f2:   pop    %rax
  0x00007f1a590498f3:   sub    %rax,%rcx
  0x00007f1a590498f6:   mov    %rcx,%rax
  0x00007f1a590498f9:   pop    %rbx
  0x00007f1a590498fa:   pop    %r15
  0x00007f1a590498fc:   pop    %r14
  0x00007f1a590498fe:   pop    %r13
  0x00007f1a59049900:   pop    %r12
  0x00007f1a59049902:   leaveq 
  0x00007f1a59049903:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::nmethod_entry_barrier [0x00007f1a59049920, 0x00007f1a59049acd] (429 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049920:   pushq  $0xffffffffffffffff
  0x00007f1a59049925:   push   %rbp
  0x00007f1a59049926:   mov    %rsp,%rbp
  0x00007f1a59049929:   push   %rdi
  0x00007f1a5904992a:   lea    0x18(%rsp),%rdi
  0x00007f1a5904992f:   sub    $0x80,%rsp
  0x00007f1a59049936:   mov    %rax,0x78(%rsp)
  0x00007f1a5904993b:   mov    %rcx,0x70(%rsp)
  0x00007f1a59049940:   mov    %rdx,0x68(%rsp)
  0x00007f1a59049945:   mov    %rbx,0x60(%rsp)
  0x00007f1a5904994a:   mov    %rbp,0x50(%rsp)
  0x00007f1a5904994f:   mov    %rsi,0x48(%rsp)
  0x00007f1a59049954:   mov    %rdi,0x40(%rsp)
  0x00007f1a59049959:   mov    %r8,0x38(%rsp)
  0x00007f1a5904995e:   mov    %r9,0x30(%rsp)
  0x00007f1a59049963:   mov    %r10,0x28(%rsp)
  0x00007f1a59049968:   mov    %r11,0x20(%rsp)
  0x00007f1a5904996d:   mov    %r12,0x18(%rsp)
  0x00007f1a59049972:   mov    %r13,0x10(%rsp)
  0x00007f1a59049977:   mov    %r14,0x8(%rsp)
  0x00007f1a5904997c:   mov    %r15,(%rsp)
  0x00007f1a59049980:   sub    $0x80,%rsp
  0x00007f1a59049987:   vmovdqu %xmm7,0x70(%rsp)
  0x00007f1a5904998d:   vmovdqu %xmm6,0x60(%rsp)
  0x00007f1a59049993:   vmovdqu %xmm5,0x50(%rsp)
  0x00007f1a59049999:   vmovdqu %xmm4,0x40(%rsp)
  0x00007f1a5904999f:   vmovdqu %xmm3,0x30(%rsp)
  0x00007f1a590499a5:   vmovdqu %xmm2,0x20(%rsp)
  0x00007f1a590499ab:   vmovdqu %xmm1,0x10(%rsp)
  0x00007f1a590499b1:   vmovdqu %xmm0,(%rsp)
  0x00007f1a590499b6:   test   $0xf,%spl
  0x00007f1a590499ba:   je     Stub::nmethod_entry_barrier+178 0x00007f1a590499d2
  0x00007f1a590499c0:   sub    $0x8,%rsp
  0x00007f1a590499c4:   callq  0x00007f1a6362a2e0 = BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)
  0x00007f1a590499c9:   add    $0x8,%rsp
  0x00007f1a590499cd:   jmpq   Stub::nmethod_entry_barrier+183 0x00007f1a590499d7
  0x00007f1a590499d2:   callq  0x00007f1a6362a2e0 = BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)
  0x00007f1a590499d7:   vmovdqu (%rsp),%xmm0
  0x00007f1a590499dc:   vmovdqu 0x10(%rsp),%xmm1
  0x00007f1a590499e2:   vmovdqu 0x20(%rsp),%xmm2
  0x00007f1a590499e8:   vmovdqu 0x30(%rsp),%xmm3
  0x00007f1a590499ee:   vmovdqu 0x40(%rsp),%xmm4
  0x00007f1a590499f4:   vmovdqu 0x50(%rsp),%xmm5
  0x00007f1a590499fa:   vmovdqu 0x60(%rsp),%xmm6
  0x00007f1a59049a00:   vmovdqu 0x70(%rsp),%xmm7
  0x00007f1a59049a06:   add    $0x80,%rsp
  0x00007f1a59049a0d:   cmp    $0x1,%eax
  0x00007f1a59049a10:   je     Stub::nmethod_entry_barrier+334 0x00007f1a59049a6e
  0x00007f1a59049a16:   mov    (%rsp),%r15
  0x00007f1a59049a1a:   mov    0x8(%rsp),%r14
  0x00007f1a59049a1f:   mov    0x10(%rsp),%r13
  0x00007f1a59049a24:   mov    0x18(%rsp),%r12
  0x00007f1a59049a29:   mov    0x20(%rsp),%r11
  0x00007f1a59049a2e:   mov    0x28(%rsp),%r10
  0x00007f1a59049a33:   mov    0x30(%rsp),%r9
  0x00007f1a59049a38:   mov    0x38(%rsp),%r8
  0x00007f1a59049a3d:   mov    0x40(%rsp),%rdi
  0x00007f1a59049a42:   mov    0x48(%rsp),%rsi
  0x00007f1a59049a47:   mov    0x50(%rsp),%rbp
  0x00007f1a59049a4c:   mov    0x60(%rsp),%rbx
  0x00007f1a59049a51:   mov    0x68(%rsp),%rdx
  0x00007f1a59049a56:   mov    0x70(%rsp),%rcx
  0x00007f1a59049a5b:   mov    0x78(%rsp),%rax
  0x00007f1a59049a60:   add    $0x80,%rsp
  0x00007f1a59049a67:   pop    %rdi
  0x00007f1a59049a68:   leaveq 
  0x00007f1a59049a69:   add    $0x8,%rsp
  0x00007f1a59049a6d:   retq   
  0x00007f1a59049a6e:   mov    (%rsp),%r15
  0x00007f1a59049a72:   mov    0x8(%rsp),%r14
  0x00007f1a59049a77:   mov    0x10(%rsp),%r13
  0x00007f1a59049a7c:   mov    0x18(%rsp),%r12
  0x00007f1a59049a81:   mov    0x20(%rsp),%r11
  0x00007f1a59049a86:   mov    0x28(%rsp),%r10
  0x00007f1a59049a8b:   mov    0x30(%rsp),%r9
  0x00007f1a59049a90:   mov    0x38(%rsp),%r8
  0x00007f1a59049a95:   mov    0x40(%rsp),%rdi
  0x00007f1a59049a9a:   mov    0x48(%rsp),%rsi
  0x00007f1a59049a9f:   mov    0x50(%rsp),%rbp
  0x00007f1a59049aa4:   mov    0x60(%rsp),%rbx
  0x00007f1a59049aa9:   mov    0x68(%rsp),%rdx
  0x00007f1a59049aae:   mov    0x70(%rsp),%rcx
  0x00007f1a59049ab3:   mov    0x78(%rsp),%rax
  0x00007f1a59049ab8:   add    $0x80,%rsp
  0x00007f1a59049abf:   pop    %rdi
  0x00007f1a59049ac0:   leaveq 
  0x00007f1a59049ac1:   test   %rsp,(%rsp)
  0x00007f1a59049ac5:   mov    (%rsp),%rsp
  0x00007f1a59049ac9:   jmpq   *-0x8(%rsp)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::multiplyToLen [0x00007f1a59049ae0, 0x00007f1a59049d0f] (559 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049ae0:   push   %rbp
  0x00007f1a59049ae1:   mov    %rsp,%rbp
  0x00007f1a59049ae4:   mov    %r9,%r11
  0x00007f1a59049ae7:   mov    %rsi,%rax
  0x00007f1a59049aea:   mov    %rdx,%rsi
  0x00007f1a59049aed:   push   %r12
  0x00007f1a59049aef:   push   %r13
  0x00007f1a59049af1:   push   %r14
  0x00007f1a59049af3:   push   %r15
  0x00007f1a59049af5:   push   %rbx
  0x00007f1a59049af6:   push   %rax
  0x00007f1a59049af7:   push   %r11
  0x00007f1a59049af9:   mov    %ecx,%r12d
  0x00007f1a59049afc:   mov    %r11d,%r13d
  0x00007f1a59049aff:   xor    %rbx,%rbx
  0x00007f1a59049b02:   mov    %eax,%r14d
  0x00007f1a59049b05:   dec    %r14d
  0x00007f1a59049b08:   js     Stub::multiplyToLen+545 0x00007f1a59049d01
  0x00007f1a59049b0e:   dec    %r14d
  0x00007f1a59049b11:   js     Stub::multiplyToLen+129 0x00007f1a59049b61
  0x00007f1a59049b17:   mov    (%rdi,%r14,4),%r11
  0x00007f1a59049b1b:   ror    $0x20,%r11
  0x00007f1a59049b1f:   dec    %r12d
  0x00007f1a59049b22:   js     Stub::multiplyToLen+134 0x00007f1a59049b66
  0x00007f1a59049b28:   dec    %r12d
  0x00007f1a59049b2b:   js     Stub::multiplyToLen+124 0x00007f1a59049b5c
  0x00007f1a59049b31:   mov    (%rsi,%r12,4),%r15
  0x00007f1a59049b35:   ror    $0x20,%r15
  0x00007f1a59049b39:   mov    %r11,%rax
  0x00007f1a59049b3c:   mul    %r15
  0x00007f1a59049b3f:   add    %rbx,%rax
  0x00007f1a59049b42:   adc    $0x0,%rdx
  0x00007f1a59049b46:   sub    $0x2,%r13d
  0x00007f1a59049b4a:   mov    %eax,0x4(%r8,%r13,4)
  0x00007f1a59049b4f:   shr    $0x20,%rax
  0x00007f1a59049b53:   mov    %eax,(%r8,%r13,4)
  0x00007f1a59049b57:   mov    %rdx,%rbx
  0x00007f1a59049b5a:   jmp    Stub::multiplyToLen+63 0x00007f1a59049b1f
  0x00007f1a59049b5c:   mov    (%rsi),%r15d
  0x00007f1a59049b5f:   jmp    Stub::multiplyToLen+89 0x00007f1a59049b39
  0x00007f1a59049b61:   mov    (%rdi),%r11d
  0x00007f1a59049b64:   jmp    Stub::multiplyToLen+63 0x00007f1a59049b1f
  0x00007f1a59049b66:   test   %r13d,%r13d
  0x00007f1a59049b69:   je     Stub::multiplyToLen+169 0x00007f1a59049b89
  0x00007f1a59049b6f:   sub    $0x1,%r13d
  0x00007f1a59049b73:   je     Stub::multiplyToLen+165 0x00007f1a59049b85
  0x00007f1a59049b79:   mov    %ebx,(%r8,%r13,4)
  0x00007f1a59049b7d:   shr    $0x20,%rbx
  0x00007f1a59049b81:   sub    $0x1,%r13d
  0x00007f1a59049b85:   mov    %ebx,(%r8,%r13,4)
  0x00007f1a59049b89:   xor    %ebx,%ebx
  0x00007f1a59049b8b:   mov    %ecx,%r12d
  0x00007f1a59049b8e:   sub    $0x1,%r14d
  0x00007f1a59049b92:   js     Stub::multiplyToLen+545 0x00007f1a59049d01
  0x00007f1a59049b98:   push   %r8
  0x00007f1a59049b9a:   lea    0x4(%r8,%r14,4),%r8
  0x00007f1a59049b9f:   sub    $0x1,%r14d
  0x00007f1a59049ba3:   js     Stub::multiplyToLen+538 0x00007f1a59049cfa
  0x00007f1a59049ba9:   mov    (%rdi,%r14,4),%rdx
  0x00007f1a59049bad:   rorx   $0x20,%rdx,%rdx
  0x00007f1a59049bb3:   push   %rdi
  0x00007f1a59049bb4:   push   %r14
  0x00007f1a59049bb6:   push   %rcx
  0x00007f1a59049bb7:   mov    %r12d,%ecx
  0x00007f1a59049bba:   and    $0xfffffffc,%ecx
  0x00007f1a59049bbd:   shr    $0x2,%ecx
  0x00007f1a59049bc0:   sub    $0x1,%ecx
  0x00007f1a59049bc3:   js     Stub::multiplyToLen+365 0x00007f1a59049c4d
  0x00007f1a59049bc9:   sub    $0x4,%r12d
  0x00007f1a59049bcd:   mov    0x8(%rsi,%r12,4),%rax
  0x00007f1a59049bd2:   rorx   $0x20,%rax,%rax
  0x00007f1a59049bd8:   mov    (%rsi,%r12,4),%r13
  0x00007f1a59049bdc:   rorx   $0x20,%r13,%r13
  0x00007f1a59049be2:   mulx   %rax,%r14,%r15
  0x00007f1a59049be7:   mulx   %r13,%r11,%rdi
  0x00007f1a59049bec:   mov    0x8(%r8,%r12,4),%rax
  0x00007f1a59049bf1:   rorx   $0x20,%rax,%rax
  0x00007f1a59049bf7:   mov    (%r8,%r12,4),%r13
  0x00007f1a59049bfb:   rorx   $0x20,%r13,%r13
  0x00007f1a59049c01:   adcx   %rbx,%r14
  0x00007f1a59049c07:   adox   %rax,%r14
  0x00007f1a59049c0d:   adcx   %r11,%r15
  0x00007f1a59049c13:   adox   %r13,%r15
  0x00007f1a59049c19:   mov    $0x0,%ebx
  0x00007f1a59049c1e:   adcx   %rbx,%rdi
  0x00007f1a59049c24:   adox   %rbx,%rdi
  0x00007f1a59049c2a:   mov    %rdi,%rbx
  0x00007f1a59049c2d:   mov    %r14d,0xc(%r8,%r12,4)
  0x00007f1a59049c32:   shr    $0x20,%r14
  0x00007f1a59049c36:   mov    %r14d,0x8(%r8,%r12,4)
  0x00007f1a59049c3b:   mov    %r15d,0x4(%r8,%r12,4)
  0x00007f1a59049c40:   shr    $0x20,%r15
  0x00007f1a59049c44:   mov    %r15d,(%r8,%r12,4)
  0x00007f1a59049c48:   jmpq   Stub::multiplyToLen+224 0x00007f1a59049bc0
  0x00007f1a59049c4d:   and    $0x3,%r12d
  0x00007f1a59049c51:   je     Stub::multiplyToLen+503 0x00007f1a59049cd7
  0x00007f1a59049c57:   sub    $0x2,%r12d
  0x00007f1a59049c5b:   js     Stub::multiplyToLen+440 0x00007f1a59049c98
  0x00007f1a59049c61:   mov    (%rsi,%r12,4),%rax
  0x00007f1a59049c65:   rorx   $0x20,%rax,%rax
  0x00007f1a59049c6b:   mulx   %rax,%r14,%r15
  0x00007f1a59049c70:   mov    (%r8,%r12,4),%r13
  0x00007f1a59049c74:   rorx   $0x20,%r13,%r13
  0x00007f1a59049c7a:   add    %rbx,%r14
  0x00007f1a59049c7d:   adc    $0x0,%r15
  0x00007f1a59049c81:   add    %r13,%r14
  0x00007f1a59049c84:   adc    $0x0,%r15
  0x00007f1a59049c88:   mov    %r14d,0x4(%r8,%r12,4)
  0x00007f1a59049c8d:   shr    $0x20,%r14
  0x00007f1a59049c91:   mov    %r14d,(%r8,%r12,4)
  0x00007f1a59049c95:   mov    %r15,%rbx
  0x00007f1a59049c98:   add    $0x2,%r12d
  0x00007f1a59049c9c:   and    $0x1,%r12d
  0x00007f1a59049ca0:   sub    $0x1,%r12d
  0x00007f1a59049ca4:   js     Stub::multiplyToLen+503 0x00007f1a59049cd7
  0x00007f1a59049caa:   mov    (%rsi,%r12,4),%r15d
  0x00007f1a59049cae:   mulx   %r15,%r14,%rdi
  0x00007f1a59049cb3:   mov    (%r8,%r12,4),%r15d
  0x00007f1a59049cb7:   add    %r15,%r14
  0x00007f1a59049cba:   adc    $0x0,%rdi
  0x00007f1a59049cbe:   add    %rbx,%r14
  0x00007f1a59049cc1:   adc    $0x0,%rdi
  0x00007f1a59049cc5:   mov    %r14d,(%r8,%r12,4)
  0x00007f1a59049cc9:   shr    $0x20,%r14
  0x00007f1a59049ccd:   shl    $0x20,%rdi
  0x00007f1a59049cd1:   or     %rdi,%r14
  0x00007f1a59049cd4:   mov    %r14,%rbx
  0x00007f1a59049cd7:   pop    %rcx
  0x00007f1a59049cd8:   pop    %rax
  0x00007f1a59049cd9:   pop    %rdi
  0x00007f1a59049cda:   pop    %r8
  0x00007f1a59049cdc:   mov    %eax,%r14d
  0x00007f1a59049cdf:   add    $0x1,%r14d
  0x00007f1a59049ce3:   mov    %ebx,(%r8,%r14,4)
  0x00007f1a59049ce7:   sub    $0x1,%r14d
  0x00007f1a59049ceb:   js     Stub::multiplyToLen+545 0x00007f1a59049d01
  0x00007f1a59049ced:   shr    $0x20,%rbx
  0x00007f1a59049cf1:   mov    %ebx,(%r8,%r14,4)
  0x00007f1a59049cf5:   jmpq   Stub::multiplyToLen+169 0x00007f1a59049b89
  0x00007f1a59049cfa:   mov    (%rdi),%edx
  0x00007f1a59049cfc:   jmpq   Stub::multiplyToLen+211 0x00007f1a59049bb3
  0x00007f1a59049d01:   pop    %r11
  0x00007f1a59049d03:   pop    %rax
  0x00007f1a59049d04:   pop    %rbx
  0x00007f1a59049d05:   pop    %r15
  0x00007f1a59049d07:   pop    %r14
  0x00007f1a59049d09:   pop    %r13
  0x00007f1a59049d0b:   pop    %r12
  0x00007f1a59049d0d:   leaveq 
  0x00007f1a59049d0e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::squareToLen [0x00007f1a59049d20, 0x00007f1a59049e3f] (287 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049d20:   push   %rbp
  0x00007f1a59049d21:   mov    %rsp,%rbp
  0x00007f1a59049d24:   mov    %rdx,%r8
  0x00007f1a59049d27:   push   %r12
  0x00007f1a59049d29:   push   %r13
  0x00007f1a59049d2b:   push   %r14
  0x00007f1a59049d2d:   push   %r15
  0x00007f1a59049d2f:   push   %rbx
  0x00007f1a59049d30:   xor    %rbx,%rbx
  0x00007f1a59049d33:   xor    %rdx,%rdx
  0x00007f1a59049d36:   xor    %r12d,%r12d
  0x00007f1a59049d39:   xor    %r15d,%r15d
  0x00007f1a59049d3c:   test   $0x1,%sil
  0x00007f1a59049d40:   je     Stub::squareToLen+60 0x00007f1a59049d5c
  0x00007f1a59049d42:   mov    (%rdi,%r12,4),%eax
  0x00007f1a59049d46:   imul   %rax,%rax
  0x00007f1a59049d4a:   shr    %rax
  0x00007f1a59049d4d:   adc    $0x0,%rbx
  0x00007f1a59049d51:   mov    %rax,(%r8,%r15,4)
  0x00007f1a59049d55:   inc    %r12d
  0x00007f1a59049d58:   add    $0x2,%r15d
  0x00007f1a59049d5c:   cmp    %rsi,%r12
  0x00007f1a59049d5f:   je     Stub::squareToLen+108 0x00007f1a59049d8c
  0x00007f1a59049d61:   mov    (%rdi,%r12,4),%rax
  0x00007f1a59049d65:   ror    $0x20,%rax
  0x00007f1a59049d69:   mul    %rax
  0x00007f1a59049d6c:   shr    %rbx
  0x00007f1a59049d6f:   rcr    %rdx
  0x00007f1a59049d72:   rcr    %rax
  0x00007f1a59049d75:   adc    $0x0,%rbx
  0x00007f1a59049d79:   mov    %rdx,(%r8,%r15,4)
  0x00007f1a59049d7d:   mov    %rax,0x8(%r8,%r15,4)
  0x00007f1a59049d82:   add    $0x2,%r12d
  0x00007f1a59049d86:   add    $0x4,%r15d
  0x00007f1a59049d8a:   jmp    Stub::squareToLen+60 0x00007f1a59049d5c
  0x00007f1a59049d8c:   push   %rcx
  0x00007f1a59049d8d:   push   %rsi
  0x00007f1a59049d8e:   add    $0x2,%ecx
  0x00007f1a59049d91:   xor    %rbx,%rbx
  0x00007f1a59049d94:   sub    $0x4,%ecx
  0x00007f1a59049d97:   sub    $0x2,%esi
  0x00007f1a59049d9a:   push   %rcx
  0x00007f1a59049d9b:   push   %rsi
  0x00007f1a59049d9c:   cmp    $0x0,%esi
  0x00007f1a59049d9f:   jle    Stub::squareToLen+225 0x00007f1a59049e01
  0x00007f1a59049da1:   mov    (%rdi,%rsi,4),%rdx
  0x00007f1a59049da5:   rorx   $0x20,%rdx,%rdx
  0x00007f1a59049dab:   dec    %esi
  0x00007f1a59049dad:   js     Stub::squareToLen+190 0x00007f1a59049dde
  0x00007f1a59049daf:   dec    %esi
  0x00007f1a59049db1:   js     Stub::squareToLen+220 0x00007f1a59049dfc
  0x00007f1a59049db3:   mov    (%rdi,%rsi,4),%r15
  0x00007f1a59049db7:   ror    $0x20,%r15
  0x00007f1a59049dbb:   sub    $0x2,%ecx
  0x00007f1a59049dbe:   mov    (%r8,%rcx,4),%r14
  0x00007f1a59049dc2:   mulx   %r15,%r15,%r13
  0x00007f1a59049dc7:   add    %rbx,%r14
  0x00007f1a59049dca:   adc    $0x0,%r13
  0x00007f1a59049dce:   add    %r15,%r14
  0x00007f1a59049dd1:   adc    $0x0,%r13
  0x00007f1a59049dd5:   mov    %r13,%rbx
  0x00007f1a59049dd8:   mov    %r14,(%r8,%rcx,4)
  0x00007f1a59049ddc:   jmp    Stub::squareToLen+139 0x00007f1a59049dab
  0x00007f1a59049dde:   mov    $0x1,%r12d
  0x00007f1a59049de4:   sub    $0x2,%ecx
  0x00007f1a59049de7:   add    %rbx,(%r8,%rcx,4)
  0x00007f1a59049deb:   jae    Stub::squareToLen+216 0x00007f1a59049df8
  0x00007f1a59049ded:   sub    $0x2,%ecx
  0x00007f1a59049df0:   js     Stub::squareToLen+216 0x00007f1a59049df8
  0x00007f1a59049df2:   add    %r12,(%r8,%rcx,4)
  0x00007f1a59049df6:   jmp    Stub::squareToLen+203 0x00007f1a59049deb
  0x00007f1a59049df8:   pop    %rsi
  0x00007f1a59049df9:   pop    %rcx
  0x00007f1a59049dfa:   jmp    Stub::squareToLen+113 0x00007f1a59049d91
  0x00007f1a59049dfc:   mov    (%rdi),%r15d
  0x00007f1a59049dff:   jmp    Stub::squareToLen+155 0x00007f1a59049dbb
  0x00007f1a59049e01:   pop    %rsi
  0x00007f1a59049e02:   pop    %rcx
  0x00007f1a59049e03:   pop    %rsi
  0x00007f1a59049e04:   pop    %rcx
  0x00007f1a59049e05:   mov    %ecx,%r14d
  0x00007f1a59049e08:   xor    %r12d,%r12d
  0x00007f1a59049e0b:   dec    %r14d
  0x00007f1a59049e0e:   dec    %r14d
  0x00007f1a59049e11:   js     Stub::squareToLen+262 0x00007f1a59049e26
  0x00007f1a59049e13:   mov    (%r8,%r14,4),%r13
  0x00007f1a59049e17:   rcl    %r13
  0x00007f1a59049e1a:   rorx   $0x20,%r13,%r13
  0x00007f1a59049e20:   mov    %r13,(%r8,%r14,4)
  0x00007f1a59049e24:   jmp    Stub::squareToLen+235 0x00007f1a59049e0b
  0x00007f1a59049e26:   mov    -0x4(%rdi,%rsi,4),%r14d
  0x00007f1a59049e2b:   and    $0x1,%r14d
  0x00007f1a59049e2f:   or     %r14d,-0x4(%r8,%rcx,4)
  0x00007f1a59049e34:   pop    %rbx
  0x00007f1a59049e35:   pop    %r15
  0x00007f1a59049e37:   pop    %r14
  0x00007f1a59049e39:   pop    %r13
  0x00007f1a59049e3b:   pop    %r12
  0x00007f1a59049e3d:   leaveq 
  0x00007f1a59049e3e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::mulAdd [0x00007f1a59049e40, 0x00007f1a59049f37] (247 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049e40:   push   %rbp
  0x00007f1a59049e41:   mov    %rsp,%rbp
  0x00007f1a59049e44:   mov    %rdx,%r11
  0x00007f1a59049e47:   push   %r12
  0x00007f1a59049e49:   push   %r13
  0x00007f1a59049e4b:   push   %r14
  0x00007f1a59049e4d:   push   %r15
  0x00007f1a59049e4f:   push   %rbx
  0x00007f1a59049e50:   mov    %r8d,%edx
  0x00007f1a59049e53:   xor    %rbx,%rbx
  0x00007f1a59049e56:   mov    %ecx,%r12d
  0x00007f1a59049e59:   shr    $0x2,%r12d
  0x00007f1a59049e5d:   sub    $0x1,%r12d
  0x00007f1a59049e61:   js     Stub::mulAdd+139 0x00007f1a59049ecb
  0x00007f1a59049e63:   sub    $0x4,%ecx
  0x00007f1a59049e66:   sub    $0x4,%r11d
  0x00007f1a59049e6a:   mov    0x8(%rsi,%rcx,4),%r15
  0x00007f1a59049e6f:   ror    $0x20,%r15
  0x00007f1a59049e73:   mov    0x8(%rdi,%r11,4),%r14
  0x00007f1a59049e78:   ror    $0x20,%r14
  0x00007f1a59049e7c:   mulx   %r15,%r15,%rax
  0x00007f1a59049e81:   add    %rbx,%r14
  0x00007f1a59049e84:   adc    $0x0,%rax
  0x00007f1a59049e88:   add    %r15,%r14
  0x00007f1a59049e8b:   adc    $0x0,%rax
  0x00007f1a59049e8f:   mov    %rax,%rbx
  0x00007f1a59049e92:   ror    $0x20,%r14
  0x00007f1a59049e96:   mov    %r14,0x8(%rdi,%r11,4)
  0x00007f1a59049e9b:   mov    (%rsi,%rcx,4),%r15
  0x00007f1a59049e9f:   ror    $0x20,%r15
  0x00007f1a59049ea3:   mov    (%rdi,%r11,4),%r14
  0x00007f1a59049ea7:   ror    $0x20,%r14
  0x00007f1a59049eab:   mulx   %r15,%r15,%rax
  0x00007f1a59049eb0:   add    %rbx,%r14
  0x00007f1a59049eb3:   adc    $0x0,%rax
  0x00007f1a59049eb7:   add    %r15,%r14
  0x00007f1a59049eba:   adc    $0x0,%rax
  0x00007f1a59049ebe:   mov    %rax,%rbx
  0x00007f1a59049ec1:   ror    $0x20,%r14
  0x00007f1a59049ec5:   mov    %r14,(%rdi,%r11,4)
  0x00007f1a59049ec9:   jmp    Stub::mulAdd+29 0x00007f1a59049e5d
  0x00007f1a59049ecb:   dec    %ecx
  0x00007f1a59049ecd:   js     Stub::mulAdd+234 0x00007f1a59049f2a
  0x00007f1a59049ecf:   dec    %ecx
  0x00007f1a59049ed1:   js     Stub::mulAdd+201 0x00007f1a59049f09
  0x00007f1a59049ed3:   mov    (%rsi,%rcx,4),%r15
  0x00007f1a59049ed7:   ror    $0x20,%r15
  0x00007f1a59049edb:   sub    $0x2,%r11d
  0x00007f1a59049edf:   mov    (%rdi,%r11,4),%r14
  0x00007f1a59049ee3:   ror    $0x20,%r14
  0x00007f1a59049ee7:   mulx   %r15,%r15,%rax
  0x00007f1a59049eec:   add    %rbx,%r14
  0x00007f1a59049eef:   adc    $0x0,%rax
  0x00007f1a59049ef3:   add    %r15,%r14
  0x00007f1a59049ef6:   adc    $0x0,%rax
  0x00007f1a59049efa:   mov    %rax,%rbx
  0x00007f1a59049efd:   ror    $0x20,%r14
  0x00007f1a59049f01:   mov    %r14,(%rdi,%r11,4)
  0x00007f1a59049f05:   test   %ecx,%ecx
  0x00007f1a59049f07:   je     Stub::mulAdd+234 0x00007f1a59049f2a
  0x00007f1a59049f09:   mov    (%rsi),%r15d
  0x00007f1a59049f0c:   mov    -0x4(%rdi,%r11,4),%r14d
  0x00007f1a59049f11:   mov    %r8d,%eax
  0x00007f1a59049f14:   mul    %r15d
  0x00007f1a59049f17:   add    %ebx,%r14d
  0x00007f1a59049f1a:   adc    $0x0,%edx
  0x00007f1a59049f1d:   add    %eax,%r14d
  0x00007f1a59049f20:   adc    $0x0,%edx
  0x00007f1a59049f23:   mov    %edx,%ebx
  0x00007f1a59049f25:   mov    %r14d,-0x4(%rdi,%r11,4)
  0x00007f1a59049f2a:   mov    %ebx,%eax
  0x00007f1a59049f2c:   pop    %rbx
  0x00007f1a59049f2d:   pop    %r15
  0x00007f1a59049f2f:   pop    %r14
  0x00007f1a59049f31:   pop    %r13
  0x00007f1a59049f33:   pop    %r12
  0x00007f1a59049f35:   leaveq 
  0x00007f1a59049f36:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vectorizedMismatch [0x00007f1a59049f40, 0x00007f1a5904a0d4] (404 bytes)
--------------------------------------------------------------------------------
  0x00007f1a59049f40:   push   %rbp
  0x00007f1a59049f41:   mov    %rsp,%rbp
  0x00007f1a59049f44:   shl    %cl,%rdx
  0x00007f1a59049f47:   xor    %rax,%rax
  0x00007f1a59049f4a:   cmp    $0x8,%rdx
  0x00007f1a59049f4e:   je     Stub::vectorizedMismatch+148 0x00007f1a59049fd4
  0x00007f1a59049f54:   jl     Stub::vectorizedMismatch+182 0x00007f1a59049ff6
  0x00007f1a59049f5a:   cmp    $0x10,%rdx
  0x00007f1a59049f5e:   je     Stub::vectorizedMismatch+103 0x00007f1a59049fa7
  0x00007f1a59049f64:   jl     Stub::vectorizedMismatch+148 0x00007f1a59049fd4
  0x00007f1a59049f6a:   cmp    $0x20,%rdx
  0x00007f1a59049f6e:   jl     Stub::vectorizedMismatch+97 0x00007f1a59049fa1
  0x00007f1a59049f70:   sub    $0x20,%rdx
  0x00007f1a59049f74:   vmovdqu (%rdi,%rax,1),%ymm0
  0x00007f1a59049f79:   vmovdqu (%rsi,%rax,1),%ymm1
  0x00007f1a59049f7e:   vpxor  %ymm1,%ymm0,%ymm2
  0x00007f1a59049f82:   vptest %ymm2,%ymm2
  0x00007f1a59049f87:   jne    Stub::vectorizedMismatch+314 0x00007f1a5904a07a
  0x00007f1a59049f8d:   add    $0x20,%rax
  0x00007f1a59049f91:   sub    $0x20,%rdx
  0x00007f1a59049f95:   jge    Stub::vectorizedMismatch+52 0x00007f1a59049f74
  0x00007f1a59049f97:   add    $0x20,%rdx
  0x00007f1a59049f9b:   je     Stub::vectorizedMismatch+389 0x00007f1a5904a0c5
  0x00007f1a59049fa1:   cmp    $0x10,%rdx
  0x00007f1a59049fa5:   jl     Stub::vectorizedMismatch+142 0x00007f1a59049fce
  0x00007f1a59049fa7:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f1a59049fac:   vmovdqu (%rsi,%rax,1),%xmm1
  0x00007f1a59049fb1:   vpxor  %xmm1,%xmm0,%xmm2
  0x00007f1a59049fb5:   vptest %xmm2,%xmm2
  0x00007f1a59049fba:   jne    Stub::vectorizedMismatch+345 0x00007f1a5904a099
  0x00007f1a59049fc0:   add    $0x10,%rax
  0x00007f1a59049fc4:   sub    $0x10,%rdx
  0x00007f1a59049fc8:   je     Stub::vectorizedMismatch+389 0x00007f1a5904a0c5
  0x00007f1a59049fce:   cmp    $0x8,%rdx
  0x00007f1a59049fd2:   jl     Stub::vectorizedMismatch+182 0x00007f1a59049ff6
  0x00007f1a59049fd4:   mov    (%rdi,%rax,1),%r8
  0x00007f1a59049fd8:   mov    (%rsi,%rax,1),%r9
  0x00007f1a59049fdc:   xor    %r9,%r8
  0x00007f1a59049fdf:   test   %r8,%r8
  0x00007f1a59049fe2:   jne    Stub::vectorizedMismatch+373 0x00007f1a5904a0b5
  0x00007f1a59049fe8:   add    $0x8,%rax
  0x00007f1a59049fec:   sub    $0x8,%rdx
  0x00007f1a59049ff0:   je     Stub::vectorizedMismatch+389 0x00007f1a5904a0c5
  0x00007f1a59049ff6:   cmp    $0x4,%rdx
  0x00007f1a59049ffa:   jl     Stub::vectorizedMismatch+219 0x00007f1a5904a01b
  0x00007f1a59049ffc:   mov    (%rdi,%rax,1),%r8d
  0x00007f1a5904a000:   xor    (%rsi,%rax,1),%r8d
  0x00007f1a5904a004:   test   %r8d,%r8d
  0x00007f1a5904a007:   jne    Stub::vectorizedMismatch+373 0x00007f1a5904a0b5
  0x00007f1a5904a00d:   add    $0x4,%rax
  0x00007f1a5904a011:   sub    $0x4,%rdx
  0x00007f1a5904a015:   je     Stub::vectorizedMismatch+389 0x00007f1a5904a0c5
  0x00007f1a5904a01b:   movzbl (%rdi,%rax,1),%r8d
  0x00007f1a5904a020:   movzbl (%rsi,%rax,1),%r9d
  0x00007f1a5904a025:   xor    %r9d,%r8d
  0x00007f1a5904a028:   test   %r8d,%r8d
  0x00007f1a5904a02b:   jne    Stub::vectorizedMismatch+384 0x00007f1a5904a0c0
  0x00007f1a5904a031:   dec    %rdx
  0x00007f1a5904a034:   je     Stub::vectorizedMismatch+389 0x00007f1a5904a0c5
  0x00007f1a5904a03a:   inc    %rax
  0x00007f1a5904a03d:   movzbl (%rdi,%rax,1),%r8d
  0x00007f1a5904a042:   movzbl (%rsi,%rax,1),%r9d
  0x00007f1a5904a047:   xor    %r9d,%r8d
  0x00007f1a5904a04a:   test   %r8d,%r8d
  0x00007f1a5904a04d:   jne    Stub::vectorizedMismatch+384 0x00007f1a5904a0c0
  0x00007f1a5904a053:   dec    %rdx
  0x00007f1a5904a056:   je     Stub::vectorizedMismatch+389 0x00007f1a5904a0c5
  0x00007f1a5904a05c:   inc    %rax
  0x00007f1a5904a05f:   movzbl (%rdi,%rax,1),%r8d
  0x00007f1a5904a064:   movzbl (%rsi,%rax,1),%r9d
  0x00007f1a5904a069:   xor    %r9d,%r8d
  0x00007f1a5904a06c:   test   %r8d,%r8d
  0x00007f1a5904a06f:   jne    Stub::vectorizedMismatch+384 0x00007f1a5904a0c0
  0x00007f1a5904a075:   jmpq   Stub::vectorizedMismatch+389 0x00007f1a5904a0c5
  0x00007f1a5904a07a:   vpcmpeqb %ymm2,%ymm2,%ymm2
  0x00007f1a5904a07e:   vpcmpeqb %ymm1,%ymm0,%ymm0
  0x00007f1a5904a082:   vpxor  %ymm2,%ymm0,%ymm0
  0x00007f1a5904a086:   vpmovmskb %ymm0,%r8d
  0x00007f1a5904a08a:   bsf    %r8,%r8
  0x00007f1a5904a08e:   add    %r8,%rax
  0x00007f1a5904a091:   shr    %cl,%rax
  0x00007f1a5904a094:   jmpq   Stub::vectorizedMismatch+399 0x00007f1a5904a0cf
  0x00007f1a5904a099:   vpcmpeqb %xmm2,%xmm2,%xmm2
  0x00007f1a5904a09d:   vpcmpeqb %xmm1,%xmm0,%xmm0
  0x00007f1a5904a0a1:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f1a5904a0a5:   vpmovmskb %xmm0,%r8d
  0x00007f1a5904a0a9:   bsf    %r8,%r8
  0x00007f1a5904a0ad:   add    %r8,%rax
  0x00007f1a5904a0b0:   shr    %cl,%rax
  0x00007f1a5904a0b3:   jmp    Stub::vectorizedMismatch+399 0x00007f1a5904a0cf
  0x00007f1a5904a0b5:   bsf    %r8,%r8
  0x00007f1a5904a0b9:   shr    $0x3,%r8
  0x00007f1a5904a0bd:   add    %r8,%rax
  0x00007f1a5904a0c0:   shr    %cl,%rax
  0x00007f1a5904a0c3:   jmp    Stub::vectorizedMismatch+399 0x00007f1a5904a0cf
  0x00007f1a5904a0c5:   movabs $0xffffffffffffffff,%rax
  0x00007f1a5904a0cf:   vzeroupper 
  0x00007f1a5904a0d2:   leaveq 
  0x00007f1a5904a0d3:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_invokeGeneric [0x00007f1a5903e500, 0x00007f1a5903e501] (1 bytes)
--------------------------------------------------------------------------------
  0x00007f1a5903e500:   hlt    
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_invokeBasic [0x00007f1a5903e501, 0x00007f1a5903e556] (85 bytes)
--------------------------------------------------------------------------------
  0x00007f1a5903e501:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a5903e50c:   data16 data16 xchg %ax,%ax
  0x00007f1a5903e510:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a5903e51b:   data16 data16 xchg %ax,%ax
  0x00007f1a5903e51f:   nop
  0x00007f1a5903e520:   mov    0x8(%rbx),%rdx
  0x00007f1a5903e524:   movzwl 0x2c(%rdx),%edx
  0x00007f1a5903e528:   mov    (%rsp,%rdx,8),%rcx
  0x00007f1a5903e52c:   mov    0x14(%rcx),%ebx
  0x00007f1a5903e52f:   shl    $0x3,%rbx
  0x00007f1a5903e533:   mov    0x28(%rbx),%ebx
  0x00007f1a5903e536:   shl    $0x3,%rbx
  0x00007f1a5903e53a:   mov    0x24(%rbx),%ebx
  0x00007f1a5903e53d:   shl    $0x3,%rbx
  0x00007f1a5903e541:   mov    0x10(%rbx),%rbx
  0x00007f1a5903e545:   test   %rbx,%rbx
  0x00007f1a5903e548:   je     0x00007f1a5903e551
  0x00007f1a5903e54e:   jmpq   *0x50(%rbx)
  0x00007f1a5903e551:   jmpq   0x00007f1a5903fc00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToVirtual [0x00007f1a5903e556, 0x00007f1a5903e59d] (71 bytes)
--------------------------------------------------------------------------------
  0x00007f1a5903e556:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a5903e560:   mov    0x8(%rbx),%rdx
  0x00007f1a5903e564:   movzwl 0x2c(%rdx),%edx
  0x00007f1a5903e568:   mov    (%rsp,%rdx,8),%rcx
  0x00007f1a5903e56c:   pop    %rax
  0x00007f1a5903e56d:   pop    %rbx
  0x00007f1a5903e56e:   push   %rax
  0x00007f1a5903e56f:   mov    0x8(%rcx),%r10d
  0x00007f1a5903e573:   movabs $0x800000000,%r11
  0x00007f1a5903e57d:   add    %r11,%r10
  0x00007f1a5903e580:   mov    0x10(%rbx),%r11
  0x00007f1a5903e584:   mov    0x1c0(%r10,%r11,8),%rbx
  0x00007f1a5903e58c:   test   %rbx,%rbx
  0x00007f1a5903e58f:   je     0x00007f1a5903e598
  0x00007f1a5903e595:   jmpq   *0x50(%rbx)
  0x00007f1a5903e598:   jmpq   0x00007f1a5903fc00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToStatic [0x00007f1a5903e59d, 0x00007f1a5903e5bf] (34 bytes)
--------------------------------------------------------------------------------
  0x00007f1a5903e59d:   data16 xchg %ax,%ax
  0x00007f1a5903e5a0:   pop    %rax
  0x00007f1a5903e5a1:   pop    %rbx
  0x00007f1a5903e5a2:   push   %rax
  0x00007f1a5903e5a3:   mov    0x24(%rbx),%ebx
  0x00007f1a5903e5a6:   shl    $0x3,%rbx
  0x00007f1a5903e5aa:   mov    0x10(%rbx),%rbx
  0x00007f1a5903e5ae:   test   %rbx,%rbx
  0x00007f1a5903e5b1:   je     0x00007f1a5903e5ba
  0x00007f1a5903e5b7:   jmpq   *0x50(%rbx)
  0x00007f1a5903e5ba:   jmpq   0x00007f1a5903fc00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToSpecial [0x00007f1a5903e5bf, 0x00007f1a5903e5ee] (47 bytes)
--------------------------------------------------------------------------------
  0x00007f1a5903e5bf:   nop
  0x00007f1a5903e5c0:   mov    0x8(%rbx),%rdx
  0x00007f1a5903e5c4:   movzwl 0x2c(%rdx),%edx
  0x00007f1a5903e5c8:   mov    (%rsp,%rdx,8),%rcx
  0x00007f1a5903e5cc:   pop    %rax
  0x00007f1a5903e5cd:   pop    %rbx
  0x00007f1a5903e5ce:   push   %rax
  0x00007f1a5903e5cf:   cmp    (%rcx),%rax
  0x00007f1a5903e5d2:   mov    0x24(%rbx),%ebx
  0x00007f1a5903e5d5:   shl    $0x3,%rbx
  0x00007f1a5903e5d9:   mov    0x10(%rbx),%rbx
  0x00007f1a5903e5dd:   test   %rbx,%rbx
  0x00007f1a5903e5e0:   je     0x00007f1a5903e5e9
  0x00007f1a5903e5e6:   jmpq   *0x50(%rbx)
  0x00007f1a5903e5e9:   jmpq   0x00007f1a5903fc00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToInterface [0x00007f1a5903e5ee, 0x00007f1a5903e67d] (143 bytes)
--------------------------------------------------------------------------------
  0x00007f1a5903e5ee:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f1a5903e5f9:   data16 data16 xchg %ax,%ax
  0x00007f1a5903e5fd:   data16 xchg %ax,%ax
  0x00007f1a5903e600:   mov    0x8(%rbx),%rdx
  0x00007f1a5903e604:   movzwl 0x2c(%rdx),%edx
  0x00007f1a5903e608:   mov    (%rsp,%rdx,8),%rcx
  0x00007f1a5903e60c:   pop    %rax
  0x00007f1a5903e60d:   pop    %rbx
  0x00007f1a5903e60e:   push   %rax
  0x00007f1a5903e60f:   mov    0x8(%rcx),%r10d
  0x00007f1a5903e613:   movabs $0x800000000,%r11
  0x00007f1a5903e61d:   add    %r11,%r10
  0x00007f1a5903e620:   mov    0x18(%rbx),%eax
  0x00007f1a5903e623:   shl    $0x3,%rax
  0x00007f1a5903e627:   mov    0x10(%rax),%rax
  0x00007f1a5903e62b:   mov    0x10(%rbx),%rbx
  0x00007f1a5903e62f:   mov    0xa0(%r10),%r11d
  0x00007f1a5903e636:   lea    0x1c0(%r10,%r11,8),%r11
  0x00007f1a5903e63e:   lea    (%r10,%rbx,8),%r10
  0x00007f1a5903e642:   mov    (%r11),%rbx
  0x00007f1a5903e645:   cmp    %rbx,%rax
  0x00007f1a5903e648:   je     0x00007f1a5903e65f
  0x00007f1a5903e64a:   test   %rbx,%rbx
  0x00007f1a5903e64d:   je     0x00007f1a5903e678
  0x00007f1a5903e653:   add    $0x10,%r11
  0x00007f1a5903e657:   mov    (%r11),%rbx
  0x00007f1a5903e65a:   cmp    %rbx,%rax
  0x00007f1a5903e65d:   jne    0x00007f1a5903e64a
  0x00007f1a5903e65f:   mov    0x8(%r11),%r11d
  0x00007f1a5903e663:   mov    (%r10,%r11,1),%rbx
  0x00007f1a5903e667:   test   %rbx,%rbx
  0x00007f1a5903e66a:   je     0x00007f1a5903e673
  0x00007f1a5903e670:   jmpq   *0x50(%rbx)
  0x00007f1a5903e673:   jmpq   0x00007f1a5903fc00
  0x00007f1a5903e678:   jmpq   0x00007f1a5903f900
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToNative [0x00007f1a5903e67d, 0x00007f1a5903e67e] (1 bytes)
--------------------------------------------------------------------------------
  0x00007f1a5903e67d:   hlt    
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding ExceptionBlob 0x00007f1a5908f910
--------------------------------------------------------------------------------
  0x00007f1a5908f980:   push   %rdx
  0x00007f1a5908f981:   sub    $0x8,%rsp
  0x00007f1a5908f985:   mov    %rbp,(%rsp)
  0x00007f1a5908f989:   mov    %rax,0x428(%r15)
  0x00007f1a5908f990:   mov    %rdx,0x430(%r15)
  0x00007f1a5908f997:   vzeroupper 
  0x00007f1a5908f99a:   movabs $0x7f1a5908f997,%r10
  0x00007f1a5908f9a4:   mov    %r10,0x2c8(%r15)
  0x00007f1a5908f9ab:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5908f9b2:   mov    %r15,%rdi
  0x00007f1a5908f9b5:   and    $0xfffffffffffffff0,%rsp
  0x00007f1a5908f9b9:   callq  0x00007f1a63ef9550 = OptoRuntime::handle_exception_C(JavaThread*)
  0x00007f1a5908f9be:   movq   $0x0,0x2c0(%r15)
  0x00007f1a5908f9c9:   movq   $0x0,0x2c8(%r15)
  0x00007f1a5908f9d4:   vzeroupper 
  0x00007f1a5908f9d7:   mov    (%rsp),%rbp
  0x00007f1a5908f9db:   add    $0x8,%rsp
  0x00007f1a5908f9df:   pop    %rdx
  0x00007f1a5908f9e0:   mov    %rax,%r8
  0x00007f1a5908f9e3:   mov    0x428(%r15),%rax
  0x00007f1a5908f9ea:   mov    0x430(%r15),%rdx
  0x00007f1a5908f9f1:   movq   $0x0,0x428(%r15)
  0x00007f1a5908f9fc:   jmpq   *%r8
  0x00007f1a5908f9ff:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 23 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_instance_Java 0x00007f1a59096010
--------------------------------------------------------------------------------
  0x00007f1a59096080:   sub    $0x8,%rsp
  0x00007f1a59096087:   mov    %rbp,(%rsp)
  0x00007f1a5909608b:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59096092:   mov    %rsi,%rdi
  0x00007f1a59096095:   mov    %r15,%rsi
  0x00007f1a59096098:   nopl   0x0(%rax,%rax,1)
  0x00007f1a590960a0:   movabs $0x7f1a63ef7020,%r10
  0x00007f1a590960aa:   callq  *%r10
  0x00007f1a590960ad:   mov    %r12,0x2c0(%r15)
  0x00007f1a590960b4:   mov    %r12,0x2c8(%r15)
  0x00007f1a590960bb:   mov    0x318(%r15),%rax
  0x00007f1a590960c2:   mov    %r12,0x318(%r15)
  0x00007f1a590960c9:   cmp    0x8(%r15),%r12
  0x00007f1a590960cd:   jne    0x00007f1a590960d1
  0x00007f1a590960cf:   pop    %rbp
  0x00007f1a590960d0:   retq   
  0x00007f1a590960d1:   xor    %ebx,%ebx
  0x00007f1a590960d3:   movabs $0x7f1a59000c00,%r10
  0x00007f1a590960dd:   pop    %rbp
  0x00007f1a590960de:   jmpq   *%r10
  0x00007f1a590960e1:   hlt    
  0x00007f1a590960e2:   hlt    
  0x00007f1a590960e3:   hlt    
  0x00007f1a590960e4:   hlt    
  0x00007f1a590960e5:   hlt    
  0x00007f1a590960e6:   hlt    
  0x00007f1a590960e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_array_Java 0x00007f1a59097610
--------------------------------------------------------------------------------
  0x00007f1a59097680:   sub    $0x8,%rsp
  0x00007f1a59097687:   mov    %rbp,(%rsp)
  0x00007f1a5909768b:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59097692:   mov    %rsi,%rdi
  0x00007f1a59097695:   mov    %edx,%esi
  0x00007f1a59097697:   mov    %r15,%rdx
  0x00007f1a5909769a:   nopw   0x0(%rax,%rax,1)
  0x00007f1a590976a0:   movabs $0x7f1a63ef7240,%r10
  0x00007f1a590976aa:   callq  *%r10
  0x00007f1a590976ad:   mov    %r12,0x2c0(%r15)
  0x00007f1a590976b4:   mov    %r12,0x2c8(%r15)
  0x00007f1a590976bb:   mov    0x318(%r15),%rax
  0x00007f1a590976c2:   mov    %r12,0x318(%r15)
  0x00007f1a590976c9:   cmp    0x8(%r15),%r12
  0x00007f1a590976cd:   jne    0x00007f1a590976d1
  0x00007f1a590976cf:   pop    %rbp
  0x00007f1a590976d0:   retq   
  0x00007f1a590976d1:   xor    %ebx,%ebx
  0x00007f1a590976d3:   movabs $0x7f1a59000c00,%r10
  0x00007f1a590976dd:   pop    %rbp
  0x00007f1a590976de:   jmpq   *%r10
  0x00007f1a590976e1:   hlt    
  0x00007f1a590976e2:   hlt    
  0x00007f1a590976e3:   hlt    
  0x00007f1a590976e4:   hlt    
  0x00007f1a590976e5:   hlt    
  0x00007f1a590976e6:   hlt    
  0x00007f1a590976e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_array_nozero_Java 0x00007f1a5909af10
--------------------------------------------------------------------------------
  0x00007f1a5909af80:   sub    $0x8,%rsp
  0x00007f1a5909af87:   mov    %rbp,(%rsp)
  0x00007f1a5909af8b:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5909af92:   mov    %rsi,%rdi
  0x00007f1a5909af95:   mov    %edx,%esi
  0x00007f1a5909af97:   mov    %r15,%rdx
  0x00007f1a5909af9a:   nopw   0x0(%rax,%rax,1)
  0x00007f1a5909afa0:   movabs $0x7f1a63ef8110,%r10
  0x00007f1a5909afaa:   callq  *%r10
  0x00007f1a5909afad:   mov    %r12,0x2c0(%r15)
  0x00007f1a5909afb4:   mov    %r12,0x2c8(%r15)
  0x00007f1a5909afbb:   mov    0x318(%r15),%rax
  0x00007f1a5909afc2:   mov    %r12,0x318(%r15)
  0x00007f1a5909afc9:   cmp    0x8(%r15),%r12
  0x00007f1a5909afcd:   jne    0x00007f1a5909afd1
  0x00007f1a5909afcf:   pop    %rbp
  0x00007f1a5909afd0:   retq   
  0x00007f1a5909afd1:   xor    %ebx,%ebx
  0x00007f1a5909afd3:   movabs $0x7f1a59000c00,%r10
  0x00007f1a5909afdd:   pop    %rbp
  0x00007f1a5909afde:   jmpq   *%r10
  0x00007f1a5909afe1:   hlt    
  0x00007f1a5909afe2:   hlt    
  0x00007f1a5909afe3:   hlt    
  0x00007f1a5909afe4:   hlt    
  0x00007f1a5909afe5:   hlt    
  0x00007f1a5909afe6:   hlt    
  0x00007f1a5909afe7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray2_Java 0x00007f1a5909b210
--------------------------------------------------------------------------------
  0x00007f1a5909b280:   sub    $0x8,%rsp
  0x00007f1a5909b287:   mov    %rbp,(%rsp)
  0x00007f1a5909b28b:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5909b292:   mov    %rsi,%rdi
  0x00007f1a5909b295:   mov    %edx,%esi
  0x00007f1a5909b297:   mov    %ecx,%edx
  0x00007f1a5909b299:   mov    %r15,%rcx
  0x00007f1a5909b29c:   nopl   0x0(%rax)
  0x00007f1a5909b2a0:   movabs $0x7f1a63ef73f0,%r10
  0x00007f1a5909b2aa:   callq  *%r10
  0x00007f1a5909b2ad:   mov    %r12,0x2c0(%r15)
  0x00007f1a5909b2b4:   mov    %r12,0x2c8(%r15)
  0x00007f1a5909b2bb:   mov    0x318(%r15),%rax
  0x00007f1a5909b2c2:   mov    %r12,0x318(%r15)
  0x00007f1a5909b2c9:   cmp    0x8(%r15),%r12
  0x00007f1a5909b2cd:   jne    0x00007f1a5909b2d1
  0x00007f1a5909b2cf:   pop    %rbp
  0x00007f1a5909b2d0:   retq   
  0x00007f1a5909b2d1:   xor    %ebx,%ebx
  0x00007f1a5909b2d3:   movabs $0x7f1a59000c00,%r10
  0x00007f1a5909b2dd:   pop    %rbp
  0x00007f1a5909b2de:   jmpq   *%r10
  0x00007f1a5909b2e1:   hlt    
  0x00007f1a5909b2e2:   hlt    
  0x00007f1a5909b2e3:   hlt    
  0x00007f1a5909b2e4:   hlt    
  0x00007f1a5909b2e5:   hlt    
  0x00007f1a5909b2e6:   hlt    
  0x00007f1a5909b2e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray3_Java 0x00007f1a5909be10
--------------------------------------------------------------------------------
  0x00007f1a5909be80:   sub    $0x8,%rsp
  0x00007f1a5909be87:   mov    %rbp,(%rsp)
  0x00007f1a5909be8b:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5909be92:   mov    %rsi,%rdi
  0x00007f1a5909be95:   mov    %edx,%esi
  0x00007f1a5909be97:   mov    %ecx,%edx
  0x00007f1a5909be99:   mov    %r8d,%ecx
  0x00007f1a5909be9c:   mov    %r15,%r8
  0x00007f1a5909be9f:   nop
  0x00007f1a5909bea0:   movabs $0x7f1a63ef7570,%r10
  0x00007f1a5909beaa:   callq  *%r10
  0x00007f1a5909bead:   mov    %r12,0x2c0(%r15)
  0x00007f1a5909beb4:   mov    %r12,0x2c8(%r15)
  0x00007f1a5909bebb:   mov    0x318(%r15),%rax
  0x00007f1a5909bec2:   mov    %r12,0x318(%r15)
  0x00007f1a5909bec9:   cmp    0x8(%r15),%r12
  0x00007f1a5909becd:   jne    0x00007f1a5909bed1
  0x00007f1a5909becf:   pop    %rbp
  0x00007f1a5909bed0:   retq   
  0x00007f1a5909bed1:   xor    %ebx,%ebx
  0x00007f1a5909bed3:   movabs $0x7f1a59000c00,%r10
  0x00007f1a5909bedd:   pop    %rbp
  0x00007f1a5909bede:   jmpq   *%r10
  0x00007f1a5909bee1:   hlt    
  0x00007f1a5909bee2:   hlt    
  0x00007f1a5909bee3:   hlt    
  0x00007f1a5909bee4:   hlt    
  0x00007f1a5909bee5:   hlt    
  0x00007f1a5909bee6:   hlt    
  0x00007f1a5909bee7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray4_Java 0x00007f1a59093990
--------------------------------------------------------------------------------
  0x00007f1a59093a00:   sub    $0x8,%rsp
  0x00007f1a59093a07:   mov    %rbp,(%rsp)
  0x00007f1a59093a0b:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59093a12:   mov    %rsi,%rdi
  0x00007f1a59093a15:   mov    %edx,%esi
  0x00007f1a59093a17:   mov    %ecx,%edx
  0x00007f1a59093a19:   mov    %r8d,%ecx
  0x00007f1a59093a1c:   mov    %r9d,%r8d
  0x00007f1a59093a1f:   mov    %r15,%r9
  0x00007f1a59093a22:   movabs $0x7f1a63ef76f0,%r10
  0x00007f1a59093a2c:   callq  *%r10
  0x00007f1a59093a2f:   mov    %r12,0x2c0(%r15)
  0x00007f1a59093a36:   mov    %r12,0x2c8(%r15)
  0x00007f1a59093a3d:   mov    0x318(%r15),%rax
  0x00007f1a59093a44:   mov    %r12,0x318(%r15)
  0x00007f1a59093a4b:   cmp    0x8(%r15),%r12
  0x00007f1a59093a4f:   jne    0x00007f1a59093a53
  0x00007f1a59093a51:   pop    %rbp
  0x00007f1a59093a52:   retq   
  0x00007f1a59093a53:   xor    %ebx,%ebx
  0x00007f1a59093a55:   movabs $0x7f1a59000c00,%r10
  0x00007f1a59093a5f:   pop    %rbp
  0x00007f1a59093a60:   jmpq   *%r10
  0x00007f1a59093a63:   hlt    
  0x00007f1a59093a64:   hlt    
  0x00007f1a59093a65:   hlt    
  0x00007f1a59093a66:   hlt    
  0x00007f1a59093a67:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 47 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray5_Java 0x00007f1a59094f10
--------------------------------------------------------------------------------
  0x00007f1a59094f80:   sub    $0x18,%rsp
  0x00007f1a59094f87:   mov    %rbp,0x10(%rsp)
  0x00007f1a59094f8c:   mov    %edi,%r10d
  0x00007f1a59094f8f:   mov    %rsp,0x2c0(%r15)
  0x00007f1a59094f96:   mov    %rsi,%rdi
  0x00007f1a59094f99:   mov    %edx,%esi
  0x00007f1a59094f9b:   mov    %ecx,%edx
  0x00007f1a59094f9d:   mov    %r8d,%ecx
  0x00007f1a59094fa0:   mov    %r9d,%r8d
  0x00007f1a59094fa3:   mov    %r10d,%r9d
  0x00007f1a59094fa6:   mov    %r15,(%rsp)
  0x00007f1a59094faa:   movabs $0x7f1a63ef7880,%r10
  0x00007f1a59094fb4:   callq  *%r10
  0x00007f1a59094fb7:   mov    %r12,0x2c0(%r15)
  0x00007f1a59094fbe:   mov    %r12,0x2c8(%r15)
  0x00007f1a59094fc5:   mov    0x318(%r15),%rax
  0x00007f1a59094fcc:   mov    %r12,0x318(%r15)
  0x00007f1a59094fd3:   cmp    0x8(%r15),%r12
  0x00007f1a59094fd7:   jne    0x00007f1a59094fdf
  0x00007f1a59094fd9:   add    $0x10,%rsp
  0x00007f1a59094fdd:   pop    %rbp
  0x00007f1a59094fde:   retq   
  0x00007f1a59094fdf:   xor    %ebx,%ebx
  0x00007f1a59094fe1:   movabs $0x7f1a59000c00,%r10
  0x00007f1a59094feb:   add    $0x10,%rsp
  0x00007f1a59094fef:   pop    %rbp
  0x00007f1a59094ff0:   jmpq   *%r10
  0x00007f1a59094ff3:   hlt    
  0x00007f1a59094ff4:   hlt    
  0x00007f1a59094ff5:   hlt    
  0x00007f1a59094ff6:   hlt    
  0x00007f1a59094ff7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 55 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarrayN_Java 0x00007f1a590a1390
--------------------------------------------------------------------------------
  0x00007f1a590a1400:   sub    $0x8,%rsp
  0x00007f1a590a1407:   mov    %rbp,(%rsp)
  0x00007f1a590a140b:   mov    %rsp,0x2c0(%r15)
  0x00007f1a590a1412:   mov    %rsi,%rdi
  0x00007f1a590a1415:   mov    %rdx,%rsi
  0x00007f1a590a1418:   mov    %r15,%rdx
  0x00007f1a590a141b:   nopl   0x0(%rax,%rax,1)
  0x00007f1a590a1420:   movabs $0x7f1a63ef7a20,%r10
  0x00007f1a590a142a:   callq  *%r10
  0x00007f1a590a142d:   mov    %r12,0x2c0(%r15)
  0x00007f1a590a1434:   mov    %r12,0x2c8(%r15)
  0x00007f1a590a143b:   mov    0x318(%r15),%rax
  0x00007f1a590a1442:   mov    %r12,0x318(%r15)
  0x00007f1a590a1449:   cmp    0x8(%r15),%r12
  0x00007f1a590a144d:   jne    0x00007f1a590a1451
  0x00007f1a590a144f:   pop    %rbp
  0x00007f1a590a1450:   retq   
  0x00007f1a590a1451:   xor    %ebx,%ebx
  0x00007f1a590a1453:   movabs $0x7f1a59000c00,%r10
  0x00007f1a590a145d:   pop    %rbp
  0x00007f1a590a145e:   jmpq   *%r10
  0x00007f1a590a1461:   hlt    
  0x00007f1a590a1462:   hlt    
  0x00007f1a590a1463:   hlt    
  0x00007f1a590a1464:   hlt    
  0x00007f1a590a1465:   hlt    
  0x00007f1a590a1466:   hlt    
  0x00007f1a590a1467:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _complete_monitor_locking_Java 0x00007f1a5909e410
--------------------------------------------------------------------------------
  0x00007f1a5909e480:   sub    $0x8,%rsp
  0x00007f1a5909e487:   mov    %rbp,(%rsp)
  0x00007f1a5909e48b:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5909e492:   mov    %rsi,%rdi
  0x00007f1a5909e495:   mov    %rdx,%rsi
  0x00007f1a5909e498:   mov    %r15,%rdx
  0x00007f1a5909e49b:   nopl   0x0(%rax,%rax,1)
  0x00007f1a5909e4a0:   movabs $0x7f1a63f0a470,%r10
  0x00007f1a5909e4aa:   callq  *%r10
  0x00007f1a5909e4ad:   mov    %r12,0x2c0(%r15)
  0x00007f1a5909e4b4:   mov    %r12,0x2c8(%r15)
  0x00007f1a5909e4bb:   nopl   0x0(%rax,%rax,1)
  0x00007f1a5909e4c0:   cmp    0x8(%r15),%r12
  0x00007f1a5909e4c4:   jne    0x00007f1a5909e4c8
  0x00007f1a5909e4c6:   pop    %rbp
  0x00007f1a5909e4c7:   retq   
  0x00007f1a5909e4c8:   xor    %ebx,%ebx
  0x00007f1a5909e4ca:   movabs $0x7f1a59000c00,%r10
  0x00007f1a5909e4d4:   pop    %rbp
  0x00007f1a5909e4d5:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _monitor_notify_Java 0x00007f1a5909dc90
--------------------------------------------------------------------------------
  0x00007f1a5909dd00:   sub    $0x8,%rsp
  0x00007f1a5909dd07:   mov    %rbp,(%rsp)
  0x00007f1a5909dd0b:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5909dd12:   mov    %rsi,%rdi
  0x00007f1a5909dd15:   mov    %r15,%rsi
  0x00007f1a5909dd18:   nopl   0x0(%rax,%rax,1)
  0x00007f1a5909dd20:   movabs $0x7f1a63ef5360,%r10
  0x00007f1a5909dd2a:   callq  *%r10
  0x00007f1a5909dd2d:   mov    %r12,0x2c0(%r15)
  0x00007f1a5909dd34:   mov    %r12,0x2c8(%r15)
  0x00007f1a5909dd3b:   nopl   0x0(%rax,%rax,1)
  0x00007f1a5909dd40:   cmp    0x8(%r15),%r12
  0x00007f1a5909dd44:   jne    0x00007f1a5909dd48
  0x00007f1a5909dd46:   pop    %rbp
  0x00007f1a5909dd47:   retq   
  0x00007f1a5909dd48:   xor    %ebx,%ebx
  0x00007f1a5909dd4a:   movabs $0x7f1a59000c00,%r10
  0x00007f1a5909dd54:   pop    %rbp
  0x00007f1a5909dd55:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _monitor_notifyAll_Java 0x00007f1a5909f590
--------------------------------------------------------------------------------
  0x00007f1a5909f600:   sub    $0x8,%rsp
  0x00007f1a5909f607:   mov    %rbp,(%rsp)
  0x00007f1a5909f60b:   mov    %rsp,0x2c0(%r15)
  0x00007f1a5909f612:   mov    %rsi,%rdi
  0x00007f1a5909f615:   mov    %r15,%rsi
  0x00007f1a5909f618:   nopl   0x0(%rax,%rax,1)
  0x00007f1a5909f620:   movabs $0x7f1a63ef5160,%r10
  0x00007f1a5909f62a:   callq  *%r10
  0x00007f1a5909f62d:   mov    %r12,0x2c0(%r15)
  0x00007f1a5909f634:   mov    %r12,0x2c8(%r15)
  0x00007f1a5909f63b:   nopl   0x0(%rax,%rax,1)
  0x00007f1a5909f640:   cmp    0x8(%r15),%r12
  0x00007f1a5909f644:   jne    0x00007f1a5909f648
  0x00007f1a5909f646:   pop    %rbp
  0x00007f1a5909f647:   retq   
  0x00007f1a5909f648:   xor    %ebx,%ebx
  0x00007f1a5909f64a:   movabs $0x7f1a59000c00,%r10
  0x00007f1a5909f654:   pop    %rbp
  0x00007f1a5909f655:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _rethrow_Java 0x00007f1a590a4c10
--------------------------------------------------------------------------------
  0x00007f1a590a4c80:   sub    $0x18,%rsp
  0x00007f1a590a4c87:   mov    %rbp,0x10(%rsp)
  0x00007f1a590a4c8c:   rex.W pushq 0x18(%rsp)
  0x00007f1a590a4c91:   rex.W popq (%rsp)
  0x00007f1a590a4c95:   mov    %rsp,0x2c0(%r15)
  0x00007f1a590a4c9c:   mov    %rsi,%rdi
  0x00007f1a590a4c9f:   mov    %r15,%rsi
  0x00007f1a590a4ca2:   mov    (%rsp),%rdx
  0x00007f1a590a4ca6:   movabs $0x7f1a63ef4da0,%r10
  0x00007f1a590a4cb0:   callq  *%r10
  0x00007f1a590a4cb3:   mov    %rax,%r10
  0x00007f1a590a4cb6:   mov    %r12,0x2c0(%r15)
  0x00007f1a590a4cbd:   mov    %r12,0x2c8(%r15)
  0x00007f1a590a4cc4:   mov    0x318(%r15),%rax
  0x00007f1a590a4ccb:   mov    %r12,0x318(%r15)
  0x00007f1a590a4cd2:   cmp    0x8(%r15),%r12
  0x00007f1a590a4cd6:   jne    0x00007f1a590a4ce1
  0x00007f1a590a4cd8:   add    $0x10,%rsp
  0x00007f1a590a4cdc:   pop    %rbp
  0x00007f1a590a4cdd:   pop    %rdx
  0x00007f1a590a4cde:   jmpq   *%r10
  0x00007f1a590a4ce1:   xor    %ebx,%ebx
  0x00007f1a590a4ce3:   movabs $0x7f1a59000c00,%r10
  0x00007f1a590a4ced:   add    $0x10,%rsp
  0x00007f1a590a4cf1:   pop    %rbp
  0x00007f1a590a4cf2:   jmpq   *%r10
  0x00007f1a590a4cf5:   hlt    
  0x00007f1a590a4cf6:   hlt    
  0x00007f1a590a4cf7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 51 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _slow_arraycopy_Java 0x00007f1a590a4310
--------------------------------------------------------------------------------
  0x00007f1a590a4380:   sub    $0x8,%rsp
  0x00007f1a590a4387:   mov    %rbp,(%rsp)
  0x00007f1a590a438b:   mov    %rsp,0x2c0(%r15)
  0x00007f1a590a4392:   mov    %rsi,%rdi
  0x00007f1a590a4395:   mov    %edx,%esi
  0x00007f1a590a4397:   mov    %rcx,%rdx
  0x00007f1a590a439a:   mov    %r8d,%ecx
  0x00007f1a590a439d:   mov    %r9d,%r8d
  0x00007f1a590a43a0:   mov    %r15,%r9
  0x00007f1a590a43a3:   movabs $0x7f1a63f09fa0,%r10
  0x00007f1a590a43ad:   callq  *%r10
  0x00007f1a590a43b0:   mov    %r12,0x2c0(%r15)
  0x00007f1a590a43b7:   mov    %r12,0x2c8(%r15)
  0x00007f1a590a43be:   xchg   %ax,%ax
  0x00007f1a590a43c0:   cmp    0x8(%r15),%r12
  0x00007f1a590a43c4:   jne    0x00007f1a590a43c8
  0x00007f1a590a43c6:   pop    %rbp
  0x00007f1a590a43c7:   retq   
  0x00007f1a590a43c8:   xor    %ebx,%ebx
  0x00007f1a590a43ca:   movabs $0x7f1a59000c00,%r10
  0x00007f1a590a43d4:   pop    %rbp
  0x00007f1a590a43d5:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 48 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _register_finalizer_Java 0x00007f1a590a4010
--------------------------------------------------------------------------------
  0x00007f1a590a4080:   sub    $0x8,%rsp
  0x00007f1a590a4087:   mov    %rbp,(%rsp)
  0x00007f1a590a408b:   mov    %rsp,0x2c0(%r15)
  0x00007f1a590a4092:   mov    %rsi,%rdi
  0x00007f1a590a4095:   mov    %r15,%rsi
  0x00007f1a590a4098:   nopl   0x0(%rax,%rax,1)
  0x00007f1a590a40a0:   movabs $0x7f1a63ef5090,%r10
  0x00007f1a590a40aa:   callq  *%r10
  0x00007f1a590a40ad:   mov    %r12,0x2c0(%r15)
  0x00007f1a590a40b4:   mov    %r12,0x2c8(%r15)
  0x00007f1a590a40bb:   nopl   0x0(%rax,%rax,1)
  0x00007f1a590a40c0:   cmp    0x8(%r15),%r12
  0x00007f1a590a40c4:   jne    0x00007f1a590a40c8
  0x00007f1a590a40c6:   pop    %rbp
  0x00007f1a590a40c7:   retq   
  0x00007f1a590a40c8:   xor    %ebx,%ebx
  0x00007f1a590a40ca:   movabs $0x7f1a59000c00,%r10
  0x00007f1a590a40d4:   pop    %rbp
  0x00007f1a590a40d5:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

[Time]  32 ms  [Res] 20000
- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ICache::flush_icache_stub [0x00007f32dd000080, 0x00007f32dd00009d] (29 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000080:   test   %esi,%esi
  0x00007f32dd000082:   je     0x00007f32dd000099
  0x00007f32dd000088:   mfence 
  0x00007f32dd00008b:   clflush (%rdi)
  0x00007f32dd00008e:   add    $0x40,%rdi
  0x00007f32dd000092:   dec    %esi
  0x00007f32dd000094:   jne    0x00007f32dd00008b
  0x00007f32dd000096:   mfence 
  0x00007f32dd000099:   mov    %rdx,%rax
  0x00007f32dd00009c:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::get_cpu_info_stub [0x00007f32dd000380, 0x00007f32dd00061c] (668 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000380:   push   %rbp
  0x00007f32dd000381:   mov    %rdi,%rbp
  0x00007f32dd000384:   push   %rbx
  0x00007f32dd000385:   push   %rsi
  0x00007f32dd000386:   pushfq 
  0x00007f32dd000387:   pop    %rax
  0x00007f32dd000388:   push   %rax
  0x00007f32dd000389:   mov    %rax,%rcx
  0x00007f32dd00038c:   xor    $0x40000,%eax
  0x00007f32dd000391:   push   %rax
  0x00007f32dd000392:   popfq  
  0x00007f32dd000393:   pushfq 
  0x00007f32dd000394:   pop    %rax
  0x00007f32dd000395:   cmp    %rcx,%rax
  0x00007f32dd000398:   jne    0x00007f32dd0003a7
  0x00007f32dd00039a:   mov    $0x300,%eax
  0x00007f32dd00039f:   mov    %eax,0x10(%rbp)
  0x00007f32dd0003a2:   jmpq   0x00007f32dd00059d
  0x00007f32dd0003a7:   mov    %rcx,%rax
  0x00007f32dd0003aa:   xor    $0x200000,%eax
  0x00007f32dd0003af:   push   %rax
  0x00007f32dd0003b0:   popfq  
  0x00007f32dd0003b1:   pushfq 
  0x00007f32dd0003b2:   pop    %rax
  0x00007f32dd0003b3:   cmp    %rax,%rcx
  0x00007f32dd0003b6:   jne    0x00007f32dd0003c5
  0x00007f32dd0003b8:   mov    $0x400,%eax
  0x00007f32dd0003bd:   mov    %eax,0x10(%rbp)
  0x00007f32dd0003c0:   jmpq   0x00007f32dd00059d
  0x00007f32dd0003c5:   xor    %eax,%eax
  0x00007f32dd0003c7:   cpuid  
  0x00007f32dd0003c9:   or     %eax,%eax
  0x00007f32dd0003cb:   je     0x00007f32dd0003b8
  0x00007f32dd0003cd:   lea    0x0(%rbp),%rsi
  0x00007f32dd0003d1:   mov    %eax,(%rsi)
  0x00007f32dd0003d3:   mov    %ebx,0x4(%rsi)
  0x00007f32dd0003d6:   mov    %ecx,0x8(%rsi)
  0x00007f32dd0003d9:   mov    %edx,0xc(%rsi)
  0x00007f32dd0003dc:   cmp    $0xa,%eax
  0x00007f32dd0003df:   jbe    0x00007f32dd00044b
  0x00007f32dd0003e1:   mov    $0xb,%eax
  0x00007f32dd0003e6:   xor    %ecx,%ecx
  0x00007f32dd0003e8:   cpuid  
  0x00007f32dd0003ea:   lea    0x40(%rbp),%rsi
  0x00007f32dd0003ee:   mov    %eax,(%rsi)
  0x00007f32dd0003f0:   mov    %ebx,0x4(%rsi)
  0x00007f32dd0003f3:   mov    %ecx,0x8(%rsi)
  0x00007f32dd0003f6:   mov    %edx,0xc(%rsi)
  0x00007f32dd0003f9:   mov    $0xb,%eax
  0x00007f32dd0003fe:   mov    $0x1,%ecx
  0x00007f32dd000403:   cpuid  
  0x00007f32dd000405:   push   %rax
  0x00007f32dd000406:   and    $0x1f,%eax
  0x00007f32dd000409:   or     %ebx,%eax
  0x00007f32dd00040b:   and    $0xffff,%eax
  0x00007f32dd000410:   pop    %rax
  0x00007f32dd000411:   je     0x00007f32dd00044b
  0x00007f32dd000413:   lea    0x50(%rbp),%rsi
  0x00007f32dd000417:   mov    %eax,(%rsi)
  0x00007f32dd000419:   mov    %ebx,0x4(%rsi)
  0x00007f32dd00041c:   mov    %ecx,0x8(%rsi)
  0x00007f32dd00041f:   mov    %edx,0xc(%rsi)
  0x00007f32dd000422:   mov    $0xb,%eax
  0x00007f32dd000427:   mov    $0x2,%ecx
  0x00007f32dd00042c:   cpuid  
  0x00007f32dd00042e:   push   %rax
  0x00007f32dd00042f:   and    $0x1f,%eax
  0x00007f32dd000432:   or     %ebx,%eax
  0x00007f32dd000434:   and    $0xffff,%eax
  0x00007f32dd000439:   pop    %rax
  0x00007f32dd00043a:   je     0x00007f32dd00044b
  0x00007f32dd00043c:   lea    0x60(%rbp),%rsi
  0x00007f32dd000440:   mov    %eax,(%rsi)
  0x00007f32dd000442:   mov    %ebx,0x4(%rsi)
  0x00007f32dd000445:   mov    %ecx,0x8(%rsi)
  0x00007f32dd000448:   mov    %edx,0xc(%rsi)
  0x00007f32dd00044b:   mov    $0x4,%eax
  0x00007f32dd000450:   cmp    0x0(%rbp),%eax
  0x00007f32dd000453:   jg     0x00007f32dd000471
  0x00007f32dd000455:   xor    %ecx,%ecx
  0x00007f32dd000457:   cpuid  
  0x00007f32dd000459:   push   %rax
  0x00007f32dd00045a:   and    $0x1f,%eax
  0x00007f32dd00045d:   or     %eax,%eax
  0x00007f32dd00045f:   pop    %rax
  0x00007f32dd000460:   je     0x00007f32dd000471
  0x00007f32dd000462:   lea    0x20(%rbp),%rsi
  0x00007f32dd000466:   mov    %eax,(%rsi)
  0x00007f32dd000468:   mov    %ebx,0x4(%rsi)
  0x00007f32dd00046b:   mov    %ecx,0x8(%rsi)
  0x00007f32dd00046e:   mov    %edx,0xc(%rsi)
  0x00007f32dd000471:   mov    $0x1,%eax
  0x00007f32dd000476:   cpuid  
  0x00007f32dd000478:   lea    0x10(%rbp),%rsi
  0x00007f32dd00047c:   mov    %eax,(%rsi)
  0x00007f32dd00047e:   mov    %ebx,0x4(%rsi)
  0x00007f32dd000481:   mov    %ecx,0x8(%rsi)
  0x00007f32dd000484:   mov    %edx,0xc(%rsi)
  0x00007f32dd000487:   and    $0x18000000,%ecx
  0x00007f32dd00048d:   cmp    $0x18000000,%ecx
  0x00007f32dd000493:   jne    0x00007f32dd0004a6
  0x00007f32dd000495:   xor    %ecx,%ecx
  0x00007f32dd000497:   xgetbv 
  0x00007f32dd00049a:   lea    0x100(%rbp),%rsi
  0x00007f32dd0004a1:   mov    %eax,(%rsi)
  0x00007f32dd0004a3:   mov    %edx,0x4(%rsi)
  0x00007f32dd0004a6:   mov    $0x7,%eax
  0x00007f32dd0004ab:   cmp    0x0(%rbp),%eax
  0x00007f32dd0004ae:   jg     0x00007f32dd0004c3
  0x00007f32dd0004b0:   xor    %ecx,%ecx
  0x00007f32dd0004b2:   cpuid  
  0x00007f32dd0004b4:   lea    0x30(%rbp),%rsi
  0x00007f32dd0004b8:   mov    %eax,(%rsi)
  0x00007f32dd0004ba:   mov    %ebx,0x4(%rsi)
  0x00007f32dd0004bd:   mov    %ecx,0x8(%rsi)
  0x00007f32dd0004c0:   mov    %edx,0xc(%rsi)
  0x00007f32dd0004c3:   mov    $0x80000000,%eax
  0x00007f32dd0004c8:   cpuid  
  0x00007f32dd0004ca:   cmp    $0x80000000,%eax
  0x00007f32dd0004cf:   jbe    0x00007f32dd00059d
  0x00007f32dd0004d5:   cmp    $0x80000004,%eax
  0x00007f32dd0004da:   jbe    0x00007f32dd000560
  0x00007f32dd0004e0:   cmp    $0x80000006,%eax
  0x00007f32dd0004e5:   jbe    0x00007f32dd000547
  0x00007f32dd0004e7:   cmp    $0x80000007,%eax
  0x00007f32dd0004ec:   jbe    0x00007f32dd00052e
  0x00007f32dd0004ee:   cmp    $0x80000008,%eax
  0x00007f32dd0004f3:   jbe    0x00007f32dd000515
  0x00007f32dd0004f5:   cmp    $0x8000001e,%eax
  0x00007f32dd0004fa:   jb     0x00007f32dd000515
  0x00007f32dd0004fc:   mov    $0x8000001e,%eax
  0x00007f32dd000501:   cpuid  
  0x00007f32dd000503:   lea    0xf0(%rbp),%rsi
  0x00007f32dd00050a:   mov    %eax,(%rsi)
  0x00007f32dd00050c:   mov    %ebx,0x4(%rsi)
  0x00007f32dd00050f:   mov    %ecx,0x8(%rsi)
  0x00007f32dd000512:   mov    %edx,0xc(%rsi)
  0x00007f32dd000515:   mov    $0x80000008,%eax
  0x00007f32dd00051a:   cpuid  
  0x00007f32dd00051c:   lea    0xe0(%rbp),%rsi
  0x00007f32dd000523:   mov    %eax,(%rsi)
  0x00007f32dd000525:   mov    %ebx,0x4(%rsi)
  0x00007f32dd000528:   mov    %ecx,0x8(%rsi)
  0x00007f32dd00052b:   mov    %edx,0xc(%rsi)
  0x00007f32dd00052e:   mov    $0x80000007,%eax
  0x00007f32dd000533:   cpuid  
  0x00007f32dd000535:   lea    0xd0(%rbp),%rsi
  0x00007f32dd00053c:   mov    %eax,(%rsi)
  0x00007f32dd00053e:   mov    %ebx,0x4(%rsi)
  0x00007f32dd000541:   mov    %ecx,0x8(%rsi)
  0x00007f32dd000544:   mov    %edx,0xc(%rsi)
  0x00007f32dd000547:   mov    $0x80000005,%eax
  0x00007f32dd00054c:   cpuid  
  0x00007f32dd00054e:   lea    0xc0(%rbp),%rsi
  0x00007f32dd000555:   mov    %eax,(%rsi)
  0x00007f32dd000557:   mov    %ebx,0x4(%rsi)
  0x00007f32dd00055a:   mov    %ecx,0x8(%rsi)
  0x00007f32dd00055d:   mov    %edx,0xc(%rsi)
  0x00007f32dd000560:   mov    $0x80000001,%eax
  0x00007f32dd000565:   cpuid  
  0x00007f32dd000567:   lea    0x80(%rbp),%rsi
  0x00007f32dd00056e:   mov    %eax,(%rsi)
  0x00007f32dd000570:   mov    %ebx,0x4(%rsi)
  0x00007f32dd000573:   mov    %ecx,0x8(%rsi)
  0x00007f32dd000576:   mov    %edx,0xc(%rsi)
  0x00007f32dd000579:   lea    0x10(%rbp),%rsi
  0x00007f32dd00057d:   mov    $0x18000000,%ecx
  0x00007f32dd000582:   and    0x8(%rsi),%ecx
  0x00007f32dd000585:   cmp    $0x18000000,%ecx
  0x00007f32dd00058b:   jne    0x00007f32dd00059d
  0x00007f32dd00058d:   mov    $0x6,%eax
  0x00007f32dd000592:   and    0x100(%rbp),%eax
  0x00007f32dd000598:   cmp    $0x6,%eax
  0x00007f32dd00059b:   je     0x00007f32dd0005a2
  0x00007f32dd00059d:   jmpq   0x00007f32dd000617
  0x00007f32dd0005a2:   mov    $0xcafebabe,%ecx
  0x00007f32dd0005a7:   vmovd  %ecx,%xmm0
  0x00007f32dd0005ab:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f32dd0005b0:   vinsertf128 $0x1,%xmm0,%ymm0,%ymm0
  0x00007f32dd0005b6:   vmovdqu %ymm0,%ymm7
  0x00007f32dd0005ba:   vmovdqu %ymm0,%ymm8
  0x00007f32dd0005be:   vmovdqu %ymm0,%ymm15
  0x00007f32dd0005c2:   xor    %esi,%esi
  0x00007f32dd0005c4:   mov    (%rsi),%eax
  0x00007f32dd0005c6:   lea    0x108(%rbp),%rsi
  0x00007f32dd0005cd:   vmovdqu %ymm0,(%rsi)
  0x00007f32dd0005d1:   vmovdqu %ymm7,0x20(%rsi)
  0x00007f32dd0005d6:   vmovdqu %ymm8,0x40(%rsi)
  0x00007f32dd0005db:   vmovdqu %ymm15,0x60(%rsi)
  0x00007f32dd0005e0:   lea    0x0(%rbp),%rsi
  0x00007f32dd0005e4:   cmpl   $0x756e6547,0x4(%rsi)
  0x00007f32dd0005eb:   jne    0x00007f32dd000617
  0x00007f32dd0005f1:   mov    $0xfff0ff0,%ecx
  0x00007f32dd0005f6:   lea    0x10(%rbp),%rsi
  0x00007f32dd0005fa:   and    (%rsi),%ecx
  0x00007f32dd0005fc:   cmp    $0x50670,%ecx
  0x00007f32dd000602:   je     0x00007f32dd000617
  0x00007f32dd000608:   cmp    $0x80650,%ecx
  0x00007f32dd00060e:   je     0x00007f32dd000617
  0x00007f32dd000614:   vzeroupper 
  0x00007f32dd000617:   popfq  
  0x00007f32dd000618:   pop    %rsi
  0x00007f32dd000619:   pop    %rbx
  0x00007f32dd00061a:   pop    %rbp
  0x00007f32dd00061b:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::detect_virt_stub [0x00007f32dd00061c, 0x00007f32dd000636] (26 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd00061c:   push   %rbp
  0x00007f32dd00061d:   push   %rbx
  0x00007f32dd00061e:   push   %rsi
  0x00007f32dd00061f:   mov    %rdi,%rax
  0x00007f32dd000622:   mov    %rsi,%rsi
  0x00007f32dd000625:   cpuid  
  0x00007f32dd000627:   mov    %eax,(%rsi)
  0x00007f32dd000629:   mov    %ebx,0x4(%rsi)
  0x00007f32dd00062c:   mov    %ecx,0x8(%rsi)
  0x00007f32dd00062f:   mov    %edx,0xc(%rsi)
  0x00007f32dd000632:   pop    %rsi
  0x00007f32dd000633:   pop    %rbx
  0x00007f32dd000634:   pop    %rbp
  0x00007f32dd000635:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::forward exception [0x00007f32dd000c00, 0x00007f32dd000c3d] (61 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000c00:   mov    (%rsp),%rdi
  0x00007f32dd000c04:   mov    %rdi,%rsi
  0x00007f32dd000c07:   mov    %r15,%rdi
  0x00007f32dd000c0a:   test   $0xf,%spl
  0x00007f32dd000c0e:   je     0x00007f32dd000c26
  0x00007f32dd000c14:   sub    $0x8,%rsp
  0x00007f32dd000c18:   callq  0x00007f32e67dedb0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x00007f32dd000c1d:   add    $0x8,%rsp
  0x00007f32dd000c21:   jmpq   0x00007f32dd000c2b
  0x00007f32dd000c26:   callq  0x00007f32e67dedb0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x00007f32dd000c2b:   mov    %rax,%rbx
  0x00007f32dd000c2e:   pop    %rdx
  0x00007f32dd000c2f:   mov    0x8(%r15),%rax
  0x00007f32dd000c33:   movq   $0x0,0x8(%r15)
  0x00007f32dd000c3b:   jmpq   *%rbx
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::call_stub [0x00007f32dd000c3d, 0x00007f32dd000d2a] (237 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000c3d:   push   %rbp
  0x00007f32dd000c3e:   mov    %rsp,%rbp
  0x00007f32dd000c41:   sub    $0x60,%rsp
  0x00007f32dd000c45:   mov    %r9,-0x8(%rbp)
  0x00007f32dd000c49:   mov    %r8,-0x10(%rbp)
  0x00007f32dd000c4d:   mov    %rcx,-0x18(%rbp)
  0x00007f32dd000c51:   mov    %edx,-0x20(%rbp)
  0x00007f32dd000c54:   mov    %rsi,-0x28(%rbp)
  0x00007f32dd000c58:   mov    %rdi,-0x30(%rbp)
  0x00007f32dd000c5c:   mov    %rbx,-0x38(%rbp)
  0x00007f32dd000c60:   mov    %r12,-0x40(%rbp)
  0x00007f32dd000c64:   mov    %r13,-0x48(%rbp)
  0x00007f32dd000c68:   mov    %r14,-0x50(%rbp)
  0x00007f32dd000c6c:   mov    %r15,-0x58(%rbp)
  0x00007f32dd000c70:   vstmxcsr -0x60(%rbp)
  0x00007f32dd000c75:   mov    -0x60(%rbp),%eax
  0x00007f32dd000c78:   and    $0xffc0,%eax
  0x00007f32dd000c7d:   cmp    0x9eb82e5(%rip),%eax        # 0x00007f32e6eb8f68
  0x00007f32dd000c83:   je     0x00007f32dd000c91
  0x00007f32dd000c89:   vldmxcsr 0x9eb82d7(%rip)        # 0x00007f32e6eb8f68
  0x00007f32dd000c91:   mov    0x18(%rbp),%r15
  0x00007f32dd000c95:   mov    0x9e49374(%rip),%r12        # 0x00007f32e6e4a010
  0x00007f32dd000c9c:   mov    0x10(%rbp),%ecx
  0x00007f32dd000c9f:   test   %ecx,%ecx
  0x00007f32dd000ca1:   je     0x00007f32dd000cb9
  0x00007f32dd000ca7:   mov    -0x8(%rbp),%rdx
  0x00007f32dd000cab:   mov    %ecx,%esi
  0x00007f32dd000cad:   mov    (%rdx),%rax
  0x00007f32dd000cb0:   add    $0x8,%rdx
  0x00007f32dd000cb4:   dec    %esi
  0x00007f32dd000cb6:   push   %rax
  0x00007f32dd000cb7:   jne    0x00007f32dd000cad
  0x00007f32dd000cb9:   mov    -0x18(%rbp),%rbx
  0x00007f32dd000cbd:   mov    -0x10(%rbp),%rsi
  0x00007f32dd000cc1:   mov    %rsp,%r13
  0x00007f32dd000cc4:   callq  *%rsi
  0x00007f32dd000cc6:   mov    -0x28(%rbp),%rdi
  0x00007f32dd000cca:   mov    -0x20(%rbp),%esi
  0x00007f32dd000ccd:   cmp    $0xc,%esi
  0x00007f32dd000cd0:   je     0x00007f32dd000d19
  0x00007f32dd000cd6:   cmp    $0xb,%esi
  0x00007f32dd000cd9:   je     0x00007f32dd000d19
  0x00007f32dd000cdf:   cmp    $0x6,%esi
  0x00007f32dd000ce2:   je     0x00007f32dd000d1e
  0x00007f32dd000ce8:   cmp    $0x7,%esi
  0x00007f32dd000ceb:   je     0x00007f32dd000d24
  0x00007f32dd000cf1:   mov    %eax,(%rdi)
  0x00007f32dd000cf3:   lea    -0x60(%rbp),%rsp
  0x00007f32dd000cf7:   mov    -0x58(%rbp),%r15
  0x00007f32dd000cfb:   mov    -0x50(%rbp),%r14
  0x00007f32dd000cff:   mov    -0x48(%rbp),%r13
  0x00007f32dd000d03:   mov    -0x40(%rbp),%r12
  0x00007f32dd000d07:   mov    -0x38(%rbp),%rbx
  0x00007f32dd000d0b:   vldmxcsr -0x60(%rbp)
  0x00007f32dd000d10:   add    $0x60,%rsp
  0x00007f32dd000d14:   vzeroupper 
  0x00007f32dd000d17:   pop    %rbp
  0x00007f32dd000d18:   retq   
  0x00007f32dd000d19:   mov    %rax,(%rdi)
  0x00007f32dd000d1c:   jmp    0x00007f32dd000cf3
  0x00007f32dd000d1e:   vmovss %xmm0,(%rdi)
  0x00007f32dd000d22:   jmp    0x00007f32dd000cf3
  0x00007f32dd000d24:   vmovsd %xmm0,(%rdi)
  0x00007f32dd000d28:   jmp    0x00007f32dd000cf3
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::catch_exception [0x00007f32dd000d2a, 0x00007f32dd000d49] (31 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000d2a:   mov    %rax,0x8(%r15)
  0x00007f32dd000d2e:   movabs $0x7f32e6b6dca0,%r10
  0x00007f32dd000d38:   mov    %r10,0x10(%r15)
  0x00007f32dd000d3c:   movl   $0x1cb,0x18(%r15)
  0x00007f32dd000d44:   jmpq   0x00007f32dd000cc6
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::orderaccess_fence [0x00007f32dd000d49, 0x00007f32dd000d50] (7 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000d49:   lock addl $0x0,-0x40(%rsp)
  0x00007f32dd000d4f:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::get_previous_sp [0x00007f32dd000d50, 0x00007f32dd000d58] (8 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000d50:   mov    %rsp,%rax
  0x00007f32dd000d53:   add    $0x8,%rax
  0x00007f32dd000d57:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::verify_mxcsr [0x00007f32dd000d58, 0x00007f32dd000d59] (1 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000d58:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::f2i_fixup [0x00007f32dd000d59, 0x00007f32dd000d91] (56 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000d59:   push   %rax
  0x00007f32dd000d5a:   push   %rcx
  0x00007f32dd000d5b:   push   %rdx
  0x00007f32dd000d5c:   push   %rsi
  0x00007f32dd000d5d:   mov    $0x7f800000,%eax
  0x00007f32dd000d62:   xor    %ecx,%ecx
  0x00007f32dd000d64:   mov    0x28(%rsp),%edx
  0x00007f32dd000d68:   mov    %edx,%esi
  0x00007f32dd000d6a:   and    $0x7fffffff,%esi
  0x00007f32dd000d70:   cmp    %esi,%eax
  0x00007f32dd000d72:   js     0x00007f32dd000d87
  0x00007f32dd000d78:   test   %edx,%edx
  0x00007f32dd000d7a:   mov    $0x80000000,%ecx
  0x00007f32dd000d7f:   mov    $0x7fffffff,%eax
  0x00007f32dd000d84:   cmovns %eax,%ecx
  0x00007f32dd000d87:   mov    %rcx,0x28(%rsp)
  0x00007f32dd000d8c:   pop    %rsi
  0x00007f32dd000d8d:   pop    %rdx
  0x00007f32dd000d8e:   pop    %rcx
  0x00007f32dd000d8f:   pop    %rax
  0x00007f32dd000d90:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::f2l_fixup [0x00007f32dd000d91, 0x00007f32dd000dd4] (67 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000d91:   push   %rax
  0x00007f32dd000d92:   push   %rcx
  0x00007f32dd000d93:   push   %rdx
  0x00007f32dd000d94:   push   %rsi
  0x00007f32dd000d95:   mov    $0x7f800000,%eax
  0x00007f32dd000d9a:   xor    %ecx,%ecx
  0x00007f32dd000d9c:   mov    0x28(%rsp),%edx
  0x00007f32dd000da0:   mov    %edx,%esi
  0x00007f32dd000da2:   and    $0x7fffffff,%esi
  0x00007f32dd000da8:   cmp    %esi,%eax
  0x00007f32dd000daa:   js     0x00007f32dd000dca
  0x00007f32dd000db0:   test   %edx,%edx
  0x00007f32dd000db2:   movabs $0x8000000000000000,%rcx
  0x00007f32dd000dbc:   movabs $0x7fffffffffffffff,%rax
  0x00007f32dd000dc6:   cmovns %rax,%rcx
  0x00007f32dd000dca:   mov    %rcx,0x28(%rsp)
  0x00007f32dd000dcf:   pop    %rsi
  0x00007f32dd000dd0:   pop    %rdx
  0x00007f32dd000dd1:   pop    %rcx
  0x00007f32dd000dd2:   pop    %rax
  0x00007f32dd000dd3:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::d2i_fixup [0x00007f32dd000dd4, 0x00007f32dd000e24] (80 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000dd4:   push   %rax
  0x00007f32dd000dd5:   push   %rcx
  0x00007f32dd000dd6:   push   %rdx
  0x00007f32dd000dd7:   push   %rsi
  0x00007f32dd000dd8:   push   %rdi
  0x00007f32dd000dd9:   mov    $0x7ff00000,%eax
  0x00007f32dd000dde:   mov    0x30(%rsp),%rdx
  0x00007f32dd000de3:   mov    %edx,%ecx
  0x00007f32dd000de5:   mov    %rdx,%rsi
  0x00007f32dd000de8:   mov    %rdx,%rdi
  0x00007f32dd000deb:   neg    %ecx
  0x00007f32dd000ded:   shr    $0x20,%rsi
  0x00007f32dd000df1:   or     %edx,%ecx
  0x00007f32dd000df3:   and    $0x7fffffff,%esi
  0x00007f32dd000df9:   xor    %edx,%edx
  0x00007f32dd000dfb:   shr    $0x1f,%ecx
  0x00007f32dd000dfe:   or     %ecx,%esi
  0x00007f32dd000e00:   cmp    %esi,%eax
  0x00007f32dd000e02:   js     0x00007f32dd000e19
  0x00007f32dd000e08:   test   %rdi,%rdi
  0x00007f32dd000e0b:   mov    $0x80000000,%edx
  0x00007f32dd000e10:   mov    $0x7fffffff,%eax
  0x00007f32dd000e15:   cmovns %rax,%rdx
  0x00007f32dd000e19:   mov    %rdx,0x30(%rsp)
  0x00007f32dd000e1e:   pop    %rdi
  0x00007f32dd000e1f:   pop    %rsi
  0x00007f32dd000e20:   pop    %rdx
  0x00007f32dd000e21:   pop    %rcx
  0x00007f32dd000e22:   pop    %rax
  0x00007f32dd000e23:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::d2l_fixup [0x00007f32dd000e24, 0x00007f32dd000e7e] (90 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000e24:   push   %rax
  0x00007f32dd000e25:   push   %rcx
  0x00007f32dd000e26:   push   %rdx
  0x00007f32dd000e27:   push   %rsi
  0x00007f32dd000e28:   push   %rdi
  0x00007f32dd000e29:   mov    $0x7ff00000,%eax
  0x00007f32dd000e2e:   mov    0x30(%rsp),%rdx
  0x00007f32dd000e33:   mov    %edx,%ecx
  0x00007f32dd000e35:   mov    %rdx,%rsi
  0x00007f32dd000e38:   mov    %rdx,%rdi
  0x00007f32dd000e3b:   neg    %ecx
  0x00007f32dd000e3d:   shr    $0x20,%rsi
  0x00007f32dd000e41:   or     %edx,%ecx
  0x00007f32dd000e43:   and    $0x7fffffff,%esi
  0x00007f32dd000e49:   xor    %edx,%edx
  0x00007f32dd000e4b:   shr    $0x1f,%ecx
  0x00007f32dd000e4e:   or     %ecx,%esi
  0x00007f32dd000e50:   cmp    %esi,%eax
  0x00007f32dd000e52:   js     0x00007f32dd000e73
  0x00007f32dd000e58:   test   %rdi,%rdi
  0x00007f32dd000e5b:   movabs $0x8000000000000000,%rdx
  0x00007f32dd000e65:   movabs $0x7fffffffffffffff,%rax
  0x00007f32dd000e6f:   cmovns %rax,%rdx
  0x00007f32dd000e73:   mov    %rdx,0x30(%rsp)
  0x00007f32dd000e78:   pop    %rdi
  0x00007f32dd000e79:   pop    %rsi
  0x00007f32dd000e7a:   pop    %rdx
  0x00007f32dd000e7b:   pop    %rcx
  0x00007f32dd000e7c:   pop    %rax
  0x00007f32dd000e7d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::float_sign_mask [0x00007f32dd000e80, 0x00007f32dd000e90] (16 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000e80:   (bad)  
  0x00007f32dd000e81:   (bad)  
  0x00007f32dd000e82:   (bad)  
  0x00007f32dd000e83:   jg     0x00007f32dd000e84
  0x00007f32dd000e85:   (bad)  
  0x00007f32dd000e86:   (bad)  
  0x00007f32dd000e87:   jg     0x00007f32dd000e88
  0x00007f32dd000e89:   (bad)  
  0x00007f32dd000e8a:   (bad)  
  0x00007f32dd000e8b:   jg     0x00007f32dd000e8c
  0x00007f32dd000e8d:   (bad)  
  0x00007f32dd000e8e:   (bad)  
  0x00007f32dd000e8f:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::float_sign_flip [0x00007f32dd000ea0, 0x00007f32dd000eb0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000ea0:   add    %al,(%rax)
  0x00007f32dd000ea2:   add    %al,-0x80000000(%rax)
  0x00007f32dd000ea8:   add    %al,(%rax)
  0x00007f32dd000eaa:   add    %al,-0x80000000(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::double_sign_mask [0x00007f32dd000ec0, 0x00007f32dd000ed0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000ec0:   (bad)  
  0x00007f32dd000ec1:   (bad)  
  0x00007f32dd000ec2:   (bad)  
  0x00007f32dd000ec3:   (bad)  
  0x00007f32dd000ec4:   (bad)  
  0x00007f32dd000ec5:   (bad)  
  0x00007f32dd000ec6:   (bad)  
  0x00007f32dd000ec7:   jg     0x00007f32dd000ec8
  0x00007f32dd000ec9:   (bad)  
  0x00007f32dd000eca:   (bad)  
  0x00007f32dd000ecb:   (bad)  
  0x00007f32dd000ecc:   (bad)  
  0x00007f32dd000ecd:   (bad)  
  0x00007f32dd000ece:   (bad)  
  0x00007f32dd000ecf:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::double_sign_flip [0x00007f32dd000ee0, 0x00007f32dd000ef0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000ee0:   add    %al,(%rax)
  0x00007f32dd000ee2:   add    %al,(%rax)
  0x00007f32dd000ee4:   add    %al,(%rax)
  0x00007f32dd000ee6:   add    %al,0x0(%rax)
  0x00007f32dd000eec:   add    %al,(%rax)
  0x00007f32dd000eee:   .byte 0x0
  0x00007f32dd000eef:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - StackOverflowError throw_exception 0x00007f32dd008610
--------------------------------------------------------------------------------
  0x00007f32dd008680:   push   %rbp
  0x00007f32dd008681:   mov    %rsp,%rbp
  0x00007f32dd008684:   sub    $0x0,%rsp
  0x00007f32dd008688:   vzeroupper 
  0x00007f32dd00868b:   mov    %rbp,0x2d0(%r15)
  0x00007f32dd008692:   movabs $0x7f32dd008688,%r10
  0x00007f32dd00869c:   mov    %r10,0x2c8(%r15)
  0x00007f32dd0086a3:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd0086aa:   and    $0xfffffffffffffff0,%rsp
  0x00007f32dd0086ae:   mov    %r15,%rdi
  0x00007f32dd0086b1:   callq  0x00007f32e67e52a0 = SharedRuntime::throw_StackOverflowError(JavaThread*)
  0x00007f32dd0086b6:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd0086c1:   movq   $0x0,0x2d0(%r15)
  0x00007f32dd0086cc:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd0086d7:   vzeroupper 
  0x00007f32dd0086da:   leaveq 
  0x00007f32dd0086db:   jmpq   0x00007f32dd000c00
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - delayed StackOverflowError throw_exception 0x00007f32dd008910
--------------------------------------------------------------------------------
  0x00007f32dd008980:   push   %rbp
  0x00007f32dd008981:   mov    %rsp,%rbp
  0x00007f32dd008984:   sub    $0x0,%rsp
  0x00007f32dd008988:   vzeroupper 
  0x00007f32dd00898b:   mov    %rbp,0x2d0(%r15)
  0x00007f32dd008992:   movabs $0x7f32dd008988,%r10
  0x00007f32dd00899c:   mov    %r10,0x2c8(%r15)
  0x00007f32dd0089a3:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd0089aa:   and    $0xfffffffffffffff0,%rsp
  0x00007f32dd0089ae:   mov    %r15,%rdi
  0x00007f32dd0089b1:   callq  0x00007f32e67e5460 = SharedRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f32dd0089b6:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd0089c1:   movq   $0x0,0x2d0(%r15)
  0x00007f32dd0089cc:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd0089d7:   vzeroupper 
  0x00007f32dd0089da:   leaveq 
  0x00007f32dd0089db:   jmpq   0x00007f32dd000c00
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesCRC32 [0x00007f32dd000f00, 0x00007f32dd001170] (624 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd000f00:   push   %rbp
  0x00007f32dd000f01:   mov    %rsp,%rbp
  0x00007f32dd000f04:   movabs $0x7f32e6e60780,%rcx
  0x00007f32dd000f0e:   not    %edi
  0x00007f32dd000f10:   cmp    $0x10,%edx
  0x00007f32dd000f13:   jl     0x00007f32dd00114a
  0x00007f32dd000f19:   mov    %esi,%r11d
  0x00007f32dd000f1c:   and    $0xf,%r11d
  0x00007f32dd000f20:   je     0x00007f32dd000f44
  0x00007f32dd000f22:   sub    $0x10,%r11d
  0x00007f32dd000f26:   add    %r11d,%edx
  0x00007f32dd000f29:   data16 xchg %ax,%ax
  0x00007f32dd000f2c:   movsbl (%rsi),%eax
  0x00007f32dd000f2f:   xor    %edi,%eax
  0x00007f32dd000f31:   and    $0xff,%eax
  0x00007f32dd000f36:   shr    $0x8,%edi
  0x00007f32dd000f39:   xor    (%rcx,%rax,4),%edi
  0x00007f32dd000f3c:   inc    %rsi
  0x00007f32dd000f3f:   inc    %r11d
  0x00007f32dd000f42:   jl     0x00007f32dd000f2c
  0x00007f32dd000f44:   mov    %edx,%r11d
  0x00007f32dd000f47:   shr    $0x4,%edx
  0x00007f32dd000f4a:   je     0x00007f32dd001147
  0x00007f32dd000f50:   vmovdqa (%rsi),%xmm1
  0x00007f32dd000f54:   vmovd  %xmm1,%eax
  0x00007f32dd000f58:   xor    %eax,%edi
  0x00007f32dd000f5a:   vpinsrd $0x0,%edi,%xmm1,%xmm1
  0x00007f32dd000f60:   add    $0x10,%rsi
  0x00007f32dd000f64:   sub    $0x4,%edx
  0x00007f32dd000f67:   jl     0x00007f32dd001060
  0x00007f32dd000f6d:   vmovdqa (%rsi),%xmm2
  0x00007f32dd000f71:   vmovdqa 0x10(%rsi),%xmm3
  0x00007f32dd000f76:   vmovdqa 0x20(%rsi),%xmm4
  0x00007f32dd000f7b:   add    $0x30,%rsi
  0x00007f32dd000f7f:   sub    $0x3,%edx
  0x00007f32dd000f82:   jle    0x00007f32dd00101c
  0x00007f32dd000f88:   vmovdqu 0x9e5fc10(%rip),%xmm0        # 0x00007f32e6e60ba0
  0x00007f32dd000f90:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd000f9b:   data16 data16 xchg %ax,%ax
  0x00007f32dd000f9f:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd000faa:   data16 data16 xchg %ax,%ax
  0x00007f32dd000fae:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd000fb9:   data16 data16 xchg %ax,%ax
  0x00007f32dd000fbd:   data16 xchg %ax,%ax
  0x00007f32dd000fc0:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f32dd000fc6:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f32dd000fcc:   vpxor  (%rsi),%xmm1,%xmm1
  0x00007f32dd000fd0:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f32dd000fd4:   vpclmulhqhqdq %xmm2,%xmm0,%xmm5
  0x00007f32dd000fda:   vpclmullqlqdq %xmm2,%xmm0,%xmm2
  0x00007f32dd000fe0:   vpxor  0x10(%rsi),%xmm2,%xmm2
  0x00007f32dd000fe5:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007f32dd000fe9:   vpclmulhqhqdq %xmm3,%xmm0,%xmm5
  0x00007f32dd000fef:   vpclmullqlqdq %xmm3,%xmm0,%xmm3
  0x00007f32dd000ff5:   vpxor  0x20(%rsi),%xmm3,%xmm3
  0x00007f32dd000ffa:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007f32dd000ffe:   vpclmulhqhqdq %xmm4,%xmm0,%xmm5
  0x00007f32dd001004:   vpclmullqlqdq %xmm4,%xmm0,%xmm4
  0x00007f32dd00100a:   vpxor  0x30(%rsi),%xmm4,%xmm4
  0x00007f32dd00100f:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f32dd001013:   add    $0x40,%rsi
  0x00007f32dd001017:   sub    $0x4,%edx
  0x00007f32dd00101a:   jg     0x00007f32dd000fc0
  0x00007f32dd00101c:   vmovdqu 0x9e5fb6c(%rip),%xmm0        # 0x00007f32e6e60b90
  0x00007f32dd001024:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f32dd00102a:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f32dd001030:   vpxor  %xmm2,%xmm1,%xmm1
  0x00007f32dd001034:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f32dd001038:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f32dd00103e:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f32dd001044:   vpxor  %xmm3,%xmm1,%xmm1
  0x00007f32dd001048:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f32dd00104c:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f32dd001052:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f32dd001058:   vpxor  %xmm4,%xmm1,%xmm1
  0x00007f32dd00105c:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f32dd001060:   add    $0x3,%edx
  0x00007f32dd001063:   jle    0x00007f32dd001089
  0x00007f32dd001065:   vmovdqu 0x9e5fb23(%rip),%xmm0        # 0x00007f32e6e60b90
  0x00007f32dd00106d:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f32dd001073:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f32dd001079:   vpxor  (%rsi),%xmm1,%xmm1
  0x00007f32dd00107d:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f32dd001081:   add    $0x10,%rsi
  0x00007f32dd001085:   dec    %edx
  0x00007f32dd001087:   jg     0x00007f32dd00106d
  0x00007f32dd001089:   vmovdqu 0x9e5faef(%rip),%xmm0        # 0x00007f32e6e60b80
  0x00007f32dd001091:   vpclmulhqlqdq %xmm1,%xmm0,%xmm2
  0x00007f32dd001097:   vpand  %xmm2,%xmm0,%xmm3
  0x00007f32dd00109b:   vpclmulhqlqdq %xmm3,%xmm0,%xmm0
  0x00007f32dd0010a1:   vpsrldq $0x8,%xmm1,%xmm1
  0x00007f32dd0010a6:   vpsrldq $0x4,%xmm2,%xmm2
  0x00007f32dd0010ab:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd0010af:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f32dd0010b3:   vmovd  %xmm0,%eax
  0x00007f32dd0010b7:   and    $0xff,%eax
  0x00007f32dd0010bc:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007f32dd0010c1:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007f32dd0010c6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd0010ca:   vmovd  %xmm0,%eax
  0x00007f32dd0010ce:   and    $0xff,%eax
  0x00007f32dd0010d3:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007f32dd0010d8:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007f32dd0010dd:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd0010e1:   vmovd  %xmm0,%eax
  0x00007f32dd0010e5:   and    $0xff,%eax
  0x00007f32dd0010ea:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007f32dd0010ef:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007f32dd0010f4:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd0010f8:   vmovd  %xmm0,%eax
  0x00007f32dd0010fc:   and    $0xff,%eax
  0x00007f32dd001101:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007f32dd001106:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007f32dd00110b:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd00110f:   vmovd  %xmm0,%edi
  0x00007f32dd001113:   mov    %edi,%eax
  0x00007f32dd001115:   and    $0xff,%eax
  0x00007f32dd00111a:   shr    $0x8,%edi
  0x00007f32dd00111d:   xor    (%rcx,%rax,4),%edi
  0x00007f32dd001120:   mov    %edi,%eax
  0x00007f32dd001122:   and    $0xff,%eax
  0x00007f32dd001127:   shr    $0x8,%edi
  0x00007f32dd00112a:   xor    (%rcx,%rax,4),%edi
  0x00007f32dd00112d:   mov    %edi,%eax
  0x00007f32dd00112f:   and    $0xff,%eax
  0x00007f32dd001134:   shr    $0x8,%edi
  0x00007f32dd001137:   xor    (%rcx,%rax,4),%edi
  0x00007f32dd00113a:   mov    %edi,%eax
  0x00007f32dd00113c:   and    $0xff,%eax
  0x00007f32dd001141:   shr    $0x8,%edi
  0x00007f32dd001144:   xor    (%rcx,%rax,4),%edi
  0x00007f32dd001147:   mov    %r11d,%edx
  0x00007f32dd00114a:   and    $0xf,%edx
  0x00007f32dd00114d:   je     0x00007f32dd001167
  0x00007f32dd00114f:   nop
  0x00007f32dd001150:   movsbl (%rsi),%eax
  0x00007f32dd001153:   xor    %edi,%eax
  0x00007f32dd001155:   and    $0xff,%eax
  0x00007f32dd00115a:   shr    $0x8,%edi
  0x00007f32dd00115d:   xor    (%rcx,%rax,4),%edi
  0x00007f32dd001160:   inc    %rsi
  0x00007f32dd001163:   dec    %edx
  0x00007f32dd001165:   jg     0x00007f32dd001150
  0x00007f32dd001167:   not    %edi
  0x00007f32dd001169:   mov    %edi,%eax
  0x00007f32dd00116b:   vzeroupper 
  0x00007f32dd00116e:   leaveq 
  0x00007f32dd00116f:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesCRC32C [0x00007f32dd001180, 0x00007f32dd0013e4] (612 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd001180:   push   %rbp
  0x00007f32dd001181:   mov    %rsp,%rbp
  0x00007f32dd001184:   cmp    $0x1800,%edx
  0x00007f32dd00118a:   jl     0x00007f32dd001235
  0x00007f32dd001190:   xor    %eax,%eax
  0x00007f32dd001192:   xor    %r9d,%r9d
  0x00007f32dd001195:   mov    %rsi,%r10
  0x00007f32dd001198:   add    $0x800,%r10
  0x00007f32dd00119f:   crc32q (%rsi),%rdi
  0x00007f32dd0011a5:   crc32q 0x800(%rsi),%rax
  0x00007f32dd0011af:   crc32q 0x1000(%rsi),%r9
  0x00007f32dd0011b9:   add    $0x8,%rsi
  0x00007f32dd0011bd:   cmp    %r10,%rsi
  0x00007f32dd0011c0:   jl     0x00007f32dd00119f
  0x00007f32dd0011c2:   vmovd  %edi,%xmm0
  0x00007f32dd0011c6:   mov    $0x35d73a62,%r11d
  0x00007f32dd0011cc:   vmovd  %r11d,%xmm2
  0x00007f32dd0011d1:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007f32dd0011d7:   vmovq  %xmm0,%rdi
  0x00007f32dd0011dc:   vmovd  %eax,%xmm1
  0x00007f32dd0011e0:   mov    $0xd65762a,%r11d
  0x00007f32dd0011e6:   vmovd  %r11d,%xmm2
  0x00007f32dd0011eb:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007f32dd0011f1:   vmovq  %xmm1,%rax
  0x00007f32dd0011f6:   shl    %rdi
  0x00007f32dd0011f9:   mov    %edi,%r11d
  0x00007f32dd0011fc:   shr    $0x20,%rdi
  0x00007f32dd001200:   xor    %ecx,%ecx
  0x00007f32dd001202:   crc32l %r11d,%ecx
  0x00007f32dd001208:   xor    %ecx,%edi
  0x00007f32dd00120a:   shl    %rax
  0x00007f32dd00120d:   mov    %eax,%r11d
  0x00007f32dd001210:   shr    $0x20,%rax
  0x00007f32dd001214:   xor    %ecx,%ecx
  0x00007f32dd001216:   crc32l %r11d,%ecx
  0x00007f32dd00121c:   xor    %ecx,%eax
  0x00007f32dd00121e:   xor    %eax,%edi
  0x00007f32dd001220:   xor    %r9d,%edi
  0x00007f32dd001223:   add    $0x1000,%rsi
  0x00007f32dd00122a:   sub    $0x1800,%edx
  0x00007f32dd001230:   jmpq   0x00007f32dd001184
  0x00007f32dd001235:   cmp    $0x6f0,%edx
  0x00007f32dd00123b:   jl     0x00007f32dd0012e6
  0x00007f32dd001241:   xor    %eax,%eax
  0x00007f32dd001243:   xor    %r9d,%r9d
  0x00007f32dd001246:   mov    %rsi,%r10
  0x00007f32dd001249:   add    $0x250,%r10
  0x00007f32dd001250:   crc32q (%rsi),%rdi
  0x00007f32dd001256:   crc32q 0x250(%rsi),%rax
  0x00007f32dd001260:   crc32q 0x4a0(%rsi),%r9
  0x00007f32dd00126a:   add    $0x8,%rsi
  0x00007f32dd00126e:   cmp    %r10,%rsi
  0x00007f32dd001271:   jl     0x00007f32dd001250
  0x00007f32dd001273:   vmovd  %edi,%xmm0
  0x00007f32dd001277:   mov    $0x3babc3e6,%r11d
  0x00007f32dd00127d:   vmovd  %r11d,%xmm2
  0x00007f32dd001282:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007f32dd001288:   vmovq  %xmm0,%rdi
  0x00007f32dd00128d:   vmovd  %eax,%xmm1
  0x00007f32dd001291:   mov    $0x1230a27d,%r11d
  0x00007f32dd001297:   vmovd  %r11d,%xmm2
  0x00007f32dd00129c:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007f32dd0012a2:   vmovq  %xmm1,%rax
  0x00007f32dd0012a7:   shl    %rdi
  0x00007f32dd0012aa:   mov    %edi,%r11d
  0x00007f32dd0012ad:   shr    $0x20,%rdi
  0x00007f32dd0012b1:   xor    %ecx,%ecx
  0x00007f32dd0012b3:   crc32l %r11d,%ecx
  0x00007f32dd0012b9:   xor    %ecx,%edi
  0x00007f32dd0012bb:   shl    %rax
  0x00007f32dd0012be:   mov    %eax,%r11d
  0x00007f32dd0012c1:   shr    $0x20,%rax
  0x00007f32dd0012c5:   xor    %ecx,%ecx
  0x00007f32dd0012c7:   crc32l %r11d,%ecx
  0x00007f32dd0012cd:   xor    %ecx,%eax
  0x00007f32dd0012cf:   xor    %eax,%edi
  0x00007f32dd0012d1:   xor    %r9d,%edi
  0x00007f32dd0012d4:   add    $0x4a0,%rsi
  0x00007f32dd0012db:   sub    $0x6f0,%edx
  0x00007f32dd0012e1:   jmpq   0x00007f32dd001235
  0x00007f32dd0012e6:   cmp    $0xd8,%edx
  0x00007f32dd0012ec:   jl     0x00007f32dd001391
  0x00007f32dd0012f2:   xor    %eax,%eax
  0x00007f32dd0012f4:   xor    %r9d,%r9d
  0x00007f32dd0012f7:   mov    %rsi,%r10
  0x00007f32dd0012fa:   add    $0x48,%r10
  0x00007f32dd0012fe:   crc32q (%rsi),%rdi
  0x00007f32dd001304:   crc32q 0x48(%rsi),%rax
  0x00007f32dd00130b:   crc32q 0x90(%rsi),%r9
  0x00007f32dd001315:   add    $0x8,%rsi
  0x00007f32dd001319:   cmp    %r10,%rsi
  0x00007f32dd00131c:   jl     0x00007f32dd0012fe
  0x00007f32dd00131e:   vmovd  %edi,%xmm0
  0x00007f32dd001322:   mov    $0xe55ef1f3,%r11d
  0x00007f32dd001328:   vmovd  %r11d,%xmm2
  0x00007f32dd00132d:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007f32dd001333:   vmovq  %xmm0,%rdi
  0x00007f32dd001338:   vmovd  %eax,%xmm1
  0x00007f32dd00133c:   mov    $0x8cfaa965,%r11d
  0x00007f32dd001342:   vmovd  %r11d,%xmm2
  0x00007f32dd001347:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007f32dd00134d:   vmovq  %xmm1,%rax
  0x00007f32dd001352:   shl    %rdi
  0x00007f32dd001355:   mov    %edi,%r11d
  0x00007f32dd001358:   shr    $0x20,%rdi
  0x00007f32dd00135c:   xor    %ecx,%ecx
  0x00007f32dd00135e:   crc32l %r11d,%ecx
  0x00007f32dd001364:   xor    %ecx,%edi
  0x00007f32dd001366:   shl    %rax
  0x00007f32dd001369:   mov    %eax,%r11d
  0x00007f32dd00136c:   shr    $0x20,%rax
  0x00007f32dd001370:   xor    %ecx,%ecx
  0x00007f32dd001372:   crc32l %r11d,%ecx
  0x00007f32dd001378:   xor    %ecx,%eax
  0x00007f32dd00137a:   xor    %eax,%edi
  0x00007f32dd00137c:   xor    %r9d,%edi
  0x00007f32dd00137f:   add    $0x90,%rsi
  0x00007f32dd001386:   sub    $0xd8,%edx
  0x00007f32dd00138c:   jmpq   0x00007f32dd0012e6
  0x00007f32dd001391:   mov    %edx,%eax
  0x00007f32dd001393:   and    $0x7,%eax
  0x00007f32dd001396:   neg    %eax
  0x00007f32dd001398:   add    %edx,%eax
  0x00007f32dd00139a:   add    %rsi,%rax
  0x00007f32dd00139d:   cmp    %rax,%rsi
  0x00007f32dd0013a0:   jge    0x00007f32dd0013bf
  0x00007f32dd0013a2:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd0013ac:   data16 data16 xchg %ax,%ax
  0x00007f32dd0013b0:   crc32q (%rsi),%rdi
  0x00007f32dd0013b6:   add    $0x8,%rsi
  0x00007f32dd0013ba:   cmp    %rax,%rsi
  0x00007f32dd0013bd:   jl     0x00007f32dd0013b0
  0x00007f32dd0013bf:   and    $0x7,%edx
  0x00007f32dd0013c2:   mov    $0x1,%r9d
  0x00007f32dd0013c8:   cmp    %edx,%r9d
  0x00007f32dd0013cb:   jg     0x00007f32dd0013dd
  0x00007f32dd0013cd:   crc32b (%rsi),%edi
  0x00007f32dd0013d2:   inc    %rsi
  0x00007f32dd0013d5:   inc    %r9d
  0x00007f32dd0013d8:   cmp    %edx,%r9d
  0x00007f32dd0013db:   jle    0x00007f32dd0013cd
  0x00007f32dd0013dd:   mov    %edi,%eax
  0x00007f32dd0013df:   vzeroupper 
  0x00007f32dd0013e2:   leaveq 
  0x00007f32dd0013e3:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesAdler32 [0x00007f32dd001400, 0x00007f32dd0015e7] (487 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd001400:   push   %rbp
  0x00007f32dd001401:   mov    %rsp,%rbp
  0x00007f32dd001404:   vmovq  %r12,%xmm8
  0x00007f32dd001409:   vmovq  %r13,%xmm9
  0x00007f32dd00140e:   vmovq  %r14,%xmm10
  0x00007f32dd001413:   vmovdqu 0x9e57f85(%rip),%ymm6        # 0x00007f32e6e593a0
  0x00007f32dd00141b:   vmovdqu 0x9e57f5d(%rip),%ymm7        # 0x00007f32e6e59380
  0x00007f32dd001423:   mov    %rsi,%r9
  0x00007f32dd001426:   mov    %edx,%r10d
  0x00007f32dd001429:   mov    %edi,%r8d
  0x00007f32dd00142c:   shr    $0x10,%r8d
  0x00007f32dd001430:   and    $0xffff,%edi
  0x00007f32dd001436:   cmp    $0x20,%r10d
  0x00007f32dd00143a:   jb     0x00007f32dd00154f
  0x00007f32dd001440:   vmovd  %edi,%xmm0
  0x00007f32dd001444:   mov    $0x15b0,%r11d
  0x00007f32dd00144a:   cmp    %r10d,%r11d
  0x00007f32dd00144d:   cmova  %r10d,%r11d
  0x00007f32dd001451:   lea    -0xf(%r11,%r9,1),%r13
  0x00007f32dd001456:   cmp    %r13,%r9
  0x00007f32dd001459:   jae    0x00007f32dd0014ac
  0x00007f32dd00145f:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd00146a:   data16 data16 xchg %ax,%ax
  0x00007f32dd00146e:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd001479:   data16 data16 xchg %ax,%ax
  0x00007f32dd00147d:   data16 xchg %ax,%ax
  0x00007f32dd001480:   vpxor  %ymm1,%ymm1,%ymm1
  0x00007f32dd001484:   vbroadcastf128 (%r9),%ymm4
  0x00007f32dd001489:   add    $0x10,%r9
  0x00007f32dd00148d:   vpshufb %ymm6,%ymm4,%ymm2
  0x00007f32dd001492:   vpaddd %ymm2,%ymm0,%ymm0
  0x00007f32dd001496:   vpaddd %ymm0,%ymm1,%ymm1
  0x00007f32dd00149a:   vpshufb %ymm7,%ymm4,%ymm3
  0x00007f32dd00149f:   vpaddd %ymm3,%ymm0,%ymm0
  0x00007f32dd0014a3:   vpaddd %ymm0,%ymm1,%ymm1
  0x00007f32dd0014a7:   cmp    %r13,%r9
  0x00007f32dd0014aa:   jb     0x00007f32dd001484
  0x00007f32dd0014ac:   vpslld $0x3,%ymm1,%ymm1
  0x00007f32dd0014b1:   vpmulld 0x9e57f06(%rip),%ymm0,%ymm4        # 0x00007f32e6e593c0
  0x00007f32dd0014ba:   vextracti128 $0x1,%ymm0,%xmm2
  0x00007f32dd0014c0:   vextracti128 $0x1,%ymm1,%xmm3
  0x00007f32dd0014c6:   vextracti128 $0x1,%ymm4,%xmm5
  0x00007f32dd0014cc:   vpaddd %xmm2,%xmm0,%xmm0
  0x00007f32dd0014d0:   vpaddd %xmm3,%xmm1,%xmm1
  0x00007f32dd0014d4:   vpaddd %xmm5,%xmm4,%xmm4
  0x00007f32dd0014d8:   vphaddd %xmm0,%xmm0,%xmm0
  0x00007f32dd0014dd:   vphaddd %xmm1,%xmm1,%xmm1
  0x00007f32dd0014e2:   vphaddd %xmm4,%xmm4,%xmm4
  0x00007f32dd0014e7:   vphaddd %xmm0,%xmm0,%xmm0
  0x00007f32dd0014ec:   vphaddd %xmm1,%xmm1,%xmm1
  0x00007f32dd0014f1:   vphaddd %xmm4,%xmm4,%xmm4
  0x00007f32dd0014f6:   vpsubd %xmm4,%xmm1,%xmm1
  0x00007f32dd0014fa:   add    $0xf,%r13
  0x00007f32dd0014fe:   test   $0xf,%r11b
  0x00007f32dd001502:   jne    0x00007f32dd001564
  0x00007f32dd001508:   sub    %r11d,%r10d
  0x00007f32dd00150b:   vmovd  %xmm0,%eax
  0x00007f32dd00150f:   xor    %edx,%edx
  0x00007f32dd001511:   mov    $0xfff1,%ecx
  0x00007f32dd001516:   div    %ecx
  0x00007f32dd001518:   mov    %edx,%r12d
  0x00007f32dd00151b:   vmovd  %xmm1,%eax
  0x00007f32dd00151f:   add    %r8d,%eax
  0x00007f32dd001522:   xor    %edx,%edx
  0x00007f32dd001524:   mov    $0xfff1,%ecx
  0x00007f32dd001529:   div    %ecx
  0x00007f32dd00152b:   mov    %edx,%r8d
  0x00007f32dd00152e:   test   %r10d,%r10d
  0x00007f32dd001531:   je     0x00007f32dd001541
  0x00007f32dd001537:   vmovd  %r12d,%xmm0
  0x00007f32dd00153c:   jmpq   0x00007f32dd001444
  0x00007f32dd001541:   mov    %r8d,%eax
  0x00007f32dd001544:   shl    $0x10,%eax
  0x00007f32dd001547:   or     %r12d,%eax
  0x00007f32dd00154a:   jmpq   0x00007f32dd0015d6
  0x00007f32dd00154f:   mov    %edi,%r12d
  0x00007f32dd001552:   lea    (%r9,%r10,1),%r13
  0x00007f32dd001556:   test   %r10d,%r10d
  0x00007f32dd001559:   jne    0x00007f32dd0015a0
  0x00007f32dd00155f:   jmpq   0x00007f32dd0015b3
  0x00007f32dd001564:   vmovd  %xmm0,%r12d
  0x00007f32dd001569:   vmovd  %xmm1,%eax
  0x00007f32dd00156d:   add    %eax,%r8d
  0x00007f32dd001570:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd00157b:   data16 data16 xchg %ax,%ax
  0x00007f32dd00157f:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd00158a:   data16 data16 xchg %ax,%ax
  0x00007f32dd00158e:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd001599:   data16 data16 xchg %ax,%ax
  0x00007f32dd00159d:   data16 xchg %ax,%ax
  0x00007f32dd0015a0:   movzbl (%r9),%eax
  0x00007f32dd0015a4:   add    %eax,%r12d
  0x00007f32dd0015a7:   add    $0x1,%r9
  0x00007f32dd0015ab:   add    %r12d,%r8d
  0x00007f32dd0015ae:   cmp    %r13,%r9
  0x00007f32dd0015b1:   jb     0x00007f32dd0015a0
  0x00007f32dd0015b3:   mov    %r12d,%eax
  0x00007f32dd0015b6:   xor    %edx,%edx
  0x00007f32dd0015b8:   mov    $0xfff1,%ecx
  0x00007f32dd0015bd:   div    %ecx
  0x00007f32dd0015bf:   mov    %edx,%r12d
  0x00007f32dd0015c2:   mov    %r8d,%eax
  0x00007f32dd0015c5:   xor    %edx,%edx
  0x00007f32dd0015c7:   mov    $0xfff1,%ecx
  0x00007f32dd0015cc:   div    %ecx
  0x00007f32dd0015ce:   shl    $0x10,%edx
  0x00007f32dd0015d1:   or     %r12d,%edx
  0x00007f32dd0015d4:   mov    %edx,%eax
  0x00007f32dd0015d6:   vmovq  %xmm10,%r14
  0x00007f32dd0015db:   vmovq  %xmm9,%r13
  0x00007f32dd0015e0:   vmovq  %xmm8,%r12
  0x00007f32dd0015e5:   leaveq 
  0x00007f32dd0015e6:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmSin [0x00007f32dd0015e7, 0x00007f32dd001c76] (1679 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0015e7:   push   %rbp
  0x00007f32dd0015e8:   mov    %rsp,%rbp
  0x00007f32dd0015eb:   push   %rbx
  0x00007f32dd0015ec:   sub    $0x10,%rsp
  0x00007f32dd0015f0:   vmovsd %xmm0,0x8(%rsp)
  0x00007f32dd0015f6:   mov    0xc(%rsp),%eax
  0x00007f32dd0015fa:   vmovq  0x9e58a4e(%rip),%xmm1        # 0x00007f32e6e5a050
  0x00007f32dd001602:   vmovq  0x9e58aa6(%rip),%xmm2        # 0x00007f32e6e5a0b0
  0x00007f32dd00160a:   and    $0x7fff0000,%eax
  0x00007f32dd00160f:   sub    $0x30300000,%eax
  0x00007f32dd001614:   cmp    $0x10c50000,%eax
  0x00007f32dd001619:   ja     0x00007f32dd001769
  0x00007f32dd00161f:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f32dd001623:   vmovdqu 0x9e58ab5(%rip),%xmm5        # 0x00007f32e6e5a0e0
  0x00007f32dd00162b:   vmovq  0x9e58a9d(%rip),%xmm4        # 0x00007f32e6e5a0d0
  0x00007f32dd001633:   vpand  %xmm0,%xmm4,%xmm4
  0x00007f32dd001637:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f32dd00163b:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f32dd00163f:   vcvttsd2si %xmm1,%edx
  0x00007f32dd001643:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007f32dd001647:   vmovdqu 0x9e589e1(%rip),%xmm6        # 0x00007f32e6e5a030
  0x00007f32dd00164f:   movabs $0x3fb921fb54400000,%r8
  0x00007f32dd001659:   vmovq  %r8,%xmm3
  0x00007f32dd00165e:   vmovdqu 0x9e58a0a(%rip),%xmm5        # 0x00007f32e6e5a070
  0x00007f32dd001666:   vpshufd $0x44,%xmm0,%xmm4
  0x00007f32dd00166b:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f32dd00166f:   vmovddup %xmm1,%xmm1
  0x00007f32dd001673:   and    $0x3f,%edx
  0x00007f32dd001676:   shl    $0x5,%edx
  0x00007f32dd001679:   movabs $0x7f32e6e59780,%rax
  0x00007f32dd001683:   add    %rdx,%rax
  0x00007f32dd001686:   vmulpd %xmm1,%xmm6,%xmm6
  0x00007f32dd00168a:   vmulsd 0x9e58996(%rip),%xmm1,%xmm1        # 0x00007f32e6e5a028
  0x00007f32dd001692:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f32dd001696:   vmovq  0x8(%rax),%xmm7
  0x00007f32dd00169b:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007f32dd00169f:   vmovddup %xmm4,%xmm3
  0x00007f32dd0016a3:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007f32dd0016a7:   vpshufd $0x44,%xmm0,%xmm0
  0x00007f32dd0016ac:   vmovdqu (%rax),%xmm2
  0x00007f32dd0016b0:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd0016b4:   vsubpd %xmm6,%xmm0,%xmm0
  0x00007f32dd0016b8:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007f32dd0016bc:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f32dd0016c0:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd0016c4:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd0016c8:   vsubsd %xmm6,%xmm3,%xmm3
  0x00007f32dd0016cc:   vmovdqu 0x9e589bc(%rip),%xmm6        # 0x00007f32e6e5a090
  0x00007f32dd0016d4:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007f32dd0016d8:   vmovq  0x18(%rax),%xmm3
  0x00007f32dd0016dd:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f32dd0016e1:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f32dd0016e5:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f32dd0016e9:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007f32dd0016ed:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007f32dd0016f1:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007f32dd0016f5:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd0016f9:   vaddpd 0x9e5897f(%rip),%xmm5,%xmm5        # 0x00007f32e6e5a080
  0x00007f32dd001701:   vmulsd (%rax),%xmm4,%xmm4
  0x00007f32dd001705:   vaddpd 0x9e58993(%rip),%xmm6,%xmm6        # 0x00007f32e6e5a0a0
  0x00007f32dd00170d:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd001711:   vmovdqu %xmm3,%xmm0
  0x00007f32dd001715:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007f32dd00171a:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007f32dd00171e:   vmovdqu %xmm4,%xmm7
  0x00007f32dd001722:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007f32dd001726:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007f32dd00172a:   vmovq  0x8(%rax),%xmm5
  0x00007f32dd00172f:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007f32dd001733:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f32dd001737:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007f32dd00173c:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f32dd001740:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f32dd001744:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007f32dd001748:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f32dd00174c:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f32dd001750:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f32dd001754:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007f32dd001758:   vmovdqu %xmm4,%xmm0
  0x00007f32dd00175c:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f32dd001760:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f32dd001764:   jmpq   0x00007f32dd001c6f
  0x00007f32dd001769:   jg     0x00007f32dd0017a7
  0x00007f32dd00176f:   shr    $0x14,%eax
  0x00007f32dd001772:   cmp    $0xcfd,%eax
  0x00007f32dd001777:   jne    0x00007f32dd00178a
  0x00007f32dd00177d:   vmulsd 0x9e5d1db(%rip),%xmm0,%xmm0        # 0x00007f32e6e5e960
  0x00007f32dd001785:   jmpq   0x00007f32dd001c6f
  0x00007f32dd00178a:   vmovq  0x9e58936(%rip),%xmm3        # 0x00007f32e6e5a0c8
  0x00007f32dd001792:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007f32dd001796:   vsubsd %xmm0,%xmm3,%xmm3
  0x00007f32dd00179a:   vmulsd 0x9e5891e(%rip),%xmm3,%xmm3        # 0x00007f32e6e5a0c0
  0x00007f32dd0017a2:   jmpq   0x00007f32dd001c6f
  0x00007f32dd0017a7:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd0017ac:   and    $0x7ff0,%eax
  0x00007f32dd0017b1:   cmp    $0x7ff0,%eax
  0x00007f32dd0017b6:   je     0x00007f32dd001c5c
  0x00007f32dd0017bc:   vpextrw $0x3,%xmm0,%ecx
  0x00007f32dd0017c1:   and    $0x7ff0,%ecx
  0x00007f32dd0017c7:   sub    $0x3f60,%ecx
  0x00007f32dd0017cd:   shr    $0x7,%ecx
  0x00007f32dd0017d0:   and    $0xfffc,%ecx
  0x00007f32dd0017d6:   movabs $0x7f32e6e59f80,%r11
  0x00007f32dd0017e0:   add    %r11,%rcx
  0x00007f32dd0017e3:   vmovq  %xmm0,%rax
  0x00007f32dd0017e8:   mov    0x14(%rcx),%r10d
  0x00007f32dd0017ec:   mov    0x18(%rcx),%r8d
  0x00007f32dd0017f0:   mov    %eax,%edx
  0x00007f32dd0017f2:   shr    $0x15,%rax
  0x00007f32dd0017f6:   or     $0x80000000,%eax
  0x00007f32dd0017fb:   shr    $0xb,%eax
  0x00007f32dd0017fe:   mov    %r10d,%r9d
  0x00007f32dd001801:   imul   %rdx,%r10
  0x00007f32dd001805:   imul   %rax,%r9
  0x00007f32dd001809:   imul   %rax,%r8
  0x00007f32dd00180d:   mov    0x10(%rcx),%esi
  0x00007f32dd001810:   mov    0xc(%rcx),%edi
  0x00007f32dd001813:   mov    %r10d,%r11d
  0x00007f32dd001816:   shr    $0x20,%r10
  0x00007f32dd00181a:   add    %r10,%r9
  0x00007f32dd00181d:   add    %r8,%r11
  0x00007f32dd001820:   mov    %r11d,%r8d
  0x00007f32dd001823:   shr    $0x20,%r11
  0x00007f32dd001827:   add    %r11,%r9
  0x00007f32dd00182a:   mov    %esi,%r10d
  0x00007f32dd00182d:   imul   %rdx,%rsi
  0x00007f32dd001831:   imul   %rax,%r10
  0x00007f32dd001835:   mov    %edi,%r11d
  0x00007f32dd001838:   imul   %rdx,%rdi
  0x00007f32dd00183c:   mov    %esi,%ebx
  0x00007f32dd00183e:   shr    $0x20,%rsi
  0x00007f32dd001842:   add    %rbx,%r9
  0x00007f32dd001845:   mov    %r9d,%ebx
  0x00007f32dd001848:   shr    $0x20,%r9
  0x00007f32dd00184c:   add    %rsi,%r10
  0x00007f32dd00184f:   add    %r9,%r10
  0x00007f32dd001852:   shl    $0x20,%rbx
  0x00007f32dd001856:   or     %rbx,%r8
  0x00007f32dd001859:   imul   %rax,%r11
  0x00007f32dd00185d:   mov    0x8(%rcx),%r9d
  0x00007f32dd001861:   mov    0x4(%rcx),%esi
  0x00007f32dd001864:   mov    %edi,%ebx
  0x00007f32dd001866:   shr    $0x20,%rdi
  0x00007f32dd00186a:   add    %rbx,%r10
  0x00007f32dd00186d:   mov    %r10d,%ebx
  0x00007f32dd001870:   shr    $0x20,%r10
  0x00007f32dd001874:   add    %rdi,%r11
  0x00007f32dd001877:   add    %r10,%r11
  0x00007f32dd00187a:   mov    %r9,%rdi
  0x00007f32dd00187d:   imul   %rdx,%r9
  0x00007f32dd001881:   imul   %rax,%rdi
  0x00007f32dd001885:   mov    %r9d,%r10d
  0x00007f32dd001888:   shr    $0x20,%r9
  0x00007f32dd00188c:   add    %r10,%r11
  0x00007f32dd00188f:   mov    %r11d,%r10d
  0x00007f32dd001892:   shr    $0x20,%r11
  0x00007f32dd001896:   add    %r9,%rdi
  0x00007f32dd001899:   add    %r11,%rdi
  0x00007f32dd00189c:   mov    %rsi,%r9
  0x00007f32dd00189f:   imul   %rdx,%rsi
  0x00007f32dd0018a3:   imul   %rax,%r9
  0x00007f32dd0018a7:   shl    $0x20,%r10
  0x00007f32dd0018ab:   or     %rbx,%r10
  0x00007f32dd0018ae:   mov    (%rcx),%eax
  0x00007f32dd0018b0:   mov    %esi,%r11d
  0x00007f32dd0018b3:   shr    $0x20,%rsi
  0x00007f32dd0018b7:   add    %r11,%rdi
  0x00007f32dd0018ba:   mov    %edi,%r11d
  0x00007f32dd0018bd:   shr    $0x20,%rdi
  0x00007f32dd0018c1:   add    %rsi,%r9
  0x00007f32dd0018c4:   add    %rdi,%r9
  0x00007f32dd0018c7:   imul   %rax,%rdx
  0x00007f32dd0018cb:   vpextrw $0x3,%xmm0,%ebx
  0x00007f32dd0018d0:   movabs $0x7f32e6e59f80,%rdi
  0x00007f32dd0018da:   sub    %rdi,%rcx
  0x00007f32dd0018dd:   add    %ecx,%ecx
  0x00007f32dd0018df:   add    %ecx,%ecx
  0x00007f32dd0018e1:   add    %ecx,%ecx
  0x00007f32dd0018e3:   add    $0x13,%ecx
  0x00007f32dd0018e6:   mov    $0x8000,%esi
  0x00007f32dd0018eb:   and    %ebx,%esi
  0x00007f32dd0018ed:   shr    $0x4,%ebx
  0x00007f32dd0018f0:   and    $0x7ff,%ebx
  0x00007f32dd0018f6:   sub    $0x3ff,%ebx
  0x00007f32dd0018fc:   sub    %ebx,%ecx
  0x00007f32dd0018fe:   add    %rdx,%r9
  0x00007f32dd001901:   mov    %ecx,%edx
  0x00007f32dd001903:   add    $0x20,%edx
  0x00007f32dd001906:   cmp    $0x1,%ecx
  0x00007f32dd001909:   jl     0x00007f32dd001bac
  0x00007f32dd00190f:   neg    %ecx
  0x00007f32dd001911:   add    $0x1d,%ecx
  0x00007f32dd001914:   shl    %cl,%r9d
  0x00007f32dd001917:   mov    %r9d,%edi
  0x00007f32dd00191a:   and    $0x1fffffff,%r9d
  0x00007f32dd001921:   test   $0x10000000,%r9d
  0x00007f32dd001928:   jne    0x00007f32dd001bd9
  0x00007f32dd00192e:   shr    %cl,%r9d
  0x00007f32dd001931:   mov    $0x0,%ebx
  0x00007f32dd001936:   shl    $0x20,%r9
  0x00007f32dd00193a:   or     %r11,%r9
  0x00007f32dd00193d:   cmp    $0x0,%r9
  0x00007f32dd001941:   je     0x00007f32dd001b50
  0x00007f32dd001947:   bsr    %r9,%r11
  0x00007f32dd00194b:   mov    $0x1d,%ecx
  0x00007f32dd001950:   sub    %r11d,%ecx
  0x00007f32dd001953:   jle    0x00007f32dd001b89
  0x00007f32dd001959:   shl    %cl,%r9
  0x00007f32dd00195c:   mov    %r10,%rax
  0x00007f32dd00195f:   shl    %cl,%r10
  0x00007f32dd001962:   add    %ecx,%edx
  0x00007f32dd001964:   neg    %ecx
  0x00007f32dd001966:   add    $0x40,%ecx
  0x00007f32dd001969:   shr    %cl,%rax
  0x00007f32dd00196c:   shr    %cl,%r8
  0x00007f32dd00196f:   or     %rax,%r9
  0x00007f32dd001972:   or     %r8,%r10
  0x00007f32dd001975:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007f32dd00197a:   shr    %r10
  0x00007f32dd00197d:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007f32dd001982:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007f32dd001986:   shl    $0x4,%edx
  0x00007f32dd001989:   neg    %edx
  0x00007f32dd00198b:   add    $0x3ff0,%edx
  0x00007f32dd001991:   or     %esi,%edx
  0x00007f32dd001993:   xor    %ebx,%edx
  0x00007f32dd001995:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007f32dd00199a:   vmovq  0x9e586b6(%rip),%xmm2        # 0x00007f32e6e5a058
  0x00007f32dd0019a2:   vmovq  0x9e586b6(%rip),%xmm6        # 0x00007f32e6e5a060
  0x00007f32dd0019aa:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007f32dd0019ae:   sub    $0x3f0,%edx
  0x00007f32dd0019b4:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007f32dd0019b9:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f32dd0019bd:   shl    $0x10,%esi
  0x00007f32dd0019c0:   sar    $0x1f,%esi
  0x00007f32dd0019c3:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f32dd0019c7:   vmovdqu %xmm0,%xmm1
  0x00007f32dd0019cb:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007f32dd0019cf:   shr    $0x1d,%edi
  0x00007f32dd0019d2:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f32dd0019d6:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007f32dd0019da:   add    %esi,%edi
  0x00007f32dd0019dc:   xor    %esi,%edi
  0x00007f32dd0019de:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007f32dd0019e2:   mov    %edi,%eax
  0x00007f32dd0019e4:   vaddsd %xmm3,%xmm6,%xmm6
  0x00007f32dd0019e8:   vmovdqu %xmm0,%xmm2
  0x00007f32dd0019ec:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f32dd0019f0:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007f32dd0019f4:   vaddsd %xmm2,%xmm6,%xmm6
  0x00007f32dd0019f8:   vmovq  0x9e58650(%rip),%xmm1        # 0x00007f32e6e5a050
  0x00007f32dd001a00:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f32dd001a04:   vmovq  0x9e586d4(%rip),%xmm5        # 0x00007f32e6e5a0e0
  0x00007f32dd001a0c:   vmovq  0x9e586bc(%rip),%xmm4        # 0x00007f32e6e5a0d0
  0x00007f32dd001a14:   vpand  %xmm0,%xmm4,%xmm4
  0x00007f32dd001a18:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f32dd001a1c:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f32dd001a20:   vcvttsd2si %xmm1,%edx
  0x00007f32dd001a24:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007f32dd001a28:   vmovq  0x9e58610(%rip),%xmm3        # 0x00007f32e6e5a040
  0x00007f32dd001a30:   vmovdqu 0x9e585f8(%rip),%xmm2        # 0x00007f32e6e5a030
  0x00007f32dd001a38:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f32dd001a3c:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007f32dd001a40:   shl    $0x3,%eax
  0x00007f32dd001a43:   add    $0x1c7600,%edx
  0x00007f32dd001a49:   vmovdqu %xmm0,%xmm4
  0x00007f32dd001a4d:   add    %eax,%edx
  0x00007f32dd001a4f:   and    $0x3f,%edx
  0x00007f32dd001a52:   vmovdqu 0x9e58616(%rip),%xmm5        # 0x00007f32e6e5a070
  0x00007f32dd001a5a:   movabs $0x7f32e6e59780,%rax
  0x00007f32dd001a64:   shl    $0x5,%edx
  0x00007f32dd001a67:   add    %rdx,%rax
  0x00007f32dd001a6a:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007f32dd001a6e:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007f32dd001a72:   vmulsd 0x9e585ae(%rip),%xmm1,%xmm1        # 0x00007f32e6e5a028
  0x00007f32dd001a7a:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f32dd001a7e:   vmovq  0x8(%rax),%xmm7
  0x00007f32dd001a83:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f32dd001a87:   vmovdqu %xmm4,%xmm3
  0x00007f32dd001a8b:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f32dd001a8f:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd001a93:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007f32dd001a97:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007f32dd001a9b:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f32dd001a9f:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd001aa3:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd001aa7:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f32dd001aab:   vmovdqu (%rax),%xmm2
  0x00007f32dd001aaf:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007f32dd001ab3:   vmovq  0x18(%rax),%xmm3
  0x00007f32dd001ab8:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f32dd001abc:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f32dd001ac0:   vsubsd %xmm6,%xmm1,%xmm1
  0x00007f32dd001ac4:   vmovdqu 0x9e585c4(%rip),%xmm6        # 0x00007f32e6e5a090
  0x00007f32dd001acc:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f32dd001ad0:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007f32dd001ad4:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007f32dd001ad8:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007f32dd001adc:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd001ae0:   vaddpd 0x9e58598(%rip),%xmm5,%xmm5        # 0x00007f32e6e5a080
  0x00007f32dd001ae8:   vmulsd (%rax),%xmm4,%xmm4
  0x00007f32dd001aec:   vaddpd 0x9e585ac(%rip),%xmm6,%xmm6        # 0x00007f32e6e5a0a0
  0x00007f32dd001af4:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd001af8:   vmovdqu %xmm3,%xmm0
  0x00007f32dd001afc:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007f32dd001b01:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007f32dd001b05:   vmovdqu %xmm4,%xmm7
  0x00007f32dd001b09:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007f32dd001b0d:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007f32dd001b11:   vmovq  0x8(%rax),%xmm5
  0x00007f32dd001b16:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007f32dd001b1a:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f32dd001b1e:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007f32dd001b23:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f32dd001b27:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f32dd001b2b:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007f32dd001b2f:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f32dd001b33:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f32dd001b37:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f32dd001b3b:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007f32dd001b3f:   vmovdqu %xmm4,%xmm0
  0x00007f32dd001b43:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f32dd001b47:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f32dd001b4b:   jmpq   0x00007f32dd001c6f
  0x00007f32dd001b50:   add    $0x40,%edx
  0x00007f32dd001b53:   mov    %r10,%r9
  0x00007f32dd001b56:   mov    %r8,%r10
  0x00007f32dd001b59:   mov    $0x0,%r8d
  0x00007f32dd001b5f:   cmp    $0x0,%r9
  0x00007f32dd001b63:   jne    0x00007f32dd001947
  0x00007f32dd001b69:   add    $0x40,%edx
  0x00007f32dd001b6c:   mov    %r10,%r9
  0x00007f32dd001b6f:   mov    %r8,%r10
  0x00007f32dd001b72:   cmp    $0x0,%r9
  0x00007f32dd001b76:   jne    0x00007f32dd001947
  0x00007f32dd001b7c:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd001b80:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f32dd001b84:   jmpq   0x00007f32dd0019f8
  0x00007f32dd001b89:   je     0x00007f32dd001975
  0x00007f32dd001b8f:   neg    %ecx
  0x00007f32dd001b91:   shr    %cl,%r10
  0x00007f32dd001b94:   mov    %r9,%rax
  0x00007f32dd001b97:   shr    %cl,%r9
  0x00007f32dd001b9a:   sub    %ecx,%edx
  0x00007f32dd001b9c:   neg    %ecx
  0x00007f32dd001b9e:   add    $0x40,%ecx
  0x00007f32dd001ba1:   shl    %cl,%rax
  0x00007f32dd001ba4:   or     %rax,%r10
  0x00007f32dd001ba7:   jmpq   0x00007f32dd001975
  0x00007f32dd001bac:   neg    %ecx
  0x00007f32dd001bae:   shl    $0x20,%r9
  0x00007f32dd001bb2:   or     %r11,%r9
  0x00007f32dd001bb5:   shl    %cl,%r9
  0x00007f32dd001bb8:   mov    %r9,%rdi
  0x00007f32dd001bbb:   test   $0x80000000,%r9d
  0x00007f32dd001bc2:   jne    0x00007f32dd001c1b
  0x00007f32dd001bc8:   shr    %cl,%r9d
  0x00007f32dd001bcb:   mov    $0x0,%ebx
  0x00007f32dd001bd0:   shr    $0x3,%rdi
  0x00007f32dd001bd4:   jmpq   0x00007f32dd00193d
  0x00007f32dd001bd9:   shr    %cl,%r9d
  0x00007f32dd001bdc:   mov    $0x20000000,%ebx
  0x00007f32dd001be1:   shr    %cl,%ebx
  0x00007f32dd001be3:   shl    $0x20,%r9
  0x00007f32dd001be7:   or     %r11,%r9
  0x00007f32dd001bea:   shl    $0x20,%rbx
  0x00007f32dd001bee:   add    $0x20000000,%edi
  0x00007f32dd001bf4:   mov    $0x0,%ecx
  0x00007f32dd001bf9:   mov    $0x0,%r11d
  0x00007f32dd001bff:   sub    %r8,%rcx
  0x00007f32dd001c02:   sbb    %r10,%r11
  0x00007f32dd001c05:   sbb    %r9,%rbx
  0x00007f32dd001c08:   mov    %rcx,%r8
  0x00007f32dd001c0b:   mov    %r11,%r10
  0x00007f32dd001c0e:   mov    %rbx,%r9
  0x00007f32dd001c11:   mov    $0x8000,%ebx
  0x00007f32dd001c16:   jmpq   0x00007f32dd00193d
  0x00007f32dd001c1b:   shr    %cl,%r9d
  0x00007f32dd001c1e:   movabs $0x100000000,%rbx
  0x00007f32dd001c28:   shr    %cl,%rbx
  0x00007f32dd001c2b:   mov    $0x0,%ecx
  0x00007f32dd001c30:   mov    $0x0,%r11d
  0x00007f32dd001c36:   sub    %r8,%rcx
  0x00007f32dd001c39:   sbb    %r10,%r11
  0x00007f32dd001c3c:   sbb    %r9,%rbx
  0x00007f32dd001c3f:   mov    %rcx,%r8
  0x00007f32dd001c42:   mov    %r11,%r10
  0x00007f32dd001c45:   mov    %rbx,%r9
  0x00007f32dd001c48:   mov    $0x8000,%ebx
  0x00007f32dd001c4d:   shr    $0x3,%rdi
  0x00007f32dd001c51:   add    $0x20000000,%edi
  0x00007f32dd001c57:   jmpq   0x00007f32dd00193d
  0x00007f32dd001c5c:   vmovq  0x8(%rsp),%xmm0
  0x00007f32dd001c62:   vmulsd 0x9e583de(%rip),%xmm0,%xmm0        # 0x00007f32e6e5a048
  0x00007f32dd001c6a:   vmovq  %xmm0,(%rsp)
  0x00007f32dd001c6f:   add    $0x10,%rsp
  0x00007f32dd001c73:   pop    %rbx
  0x00007f32dd001c74:   leaveq 
  0x00007f32dd001c75:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmCos [0x00007f32dd001c76, 0x00007f32dd0022e7] (1649 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd001c76:   push   %rbp
  0x00007f32dd001c77:   mov    %rsp,%rbp
  0x00007f32dd001c7a:   push   %rbx
  0x00007f32dd001c7b:   sub    $0x10,%rsp
  0x00007f32dd001c7f:   vmovsd %xmm0,0x8(%rsp)
  0x00007f32dd001c85:   mov    0xc(%rsp),%eax
  0x00007f32dd001c89:   vmovq  0x9e583bf(%rip),%xmm1        # 0x00007f32e6e5a050
  0x00007f32dd001c91:   and    $0x7fff0000,%eax
  0x00007f32dd001c96:   sub    $0x30300000,%eax
  0x00007f32dd001c9b:   cmp    $0x10c50000,%eax
  0x00007f32dd001ca0:   ja     0x00007f32dd001dec
  0x00007f32dd001ca6:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f32dd001caa:   vmovdqu 0x9e5842e(%rip),%xmm5        # 0x00007f32e6e5a0e0
  0x00007f32dd001cb2:   vmovq  0x9e58416(%rip),%xmm4        # 0x00007f32e6e5a0d0
  0x00007f32dd001cba:   vpand  %xmm0,%xmm4,%xmm4
  0x00007f32dd001cbe:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f32dd001cc2:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f32dd001cc6:   vcvttsd2si %xmm1,%edx
  0x00007f32dd001cca:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007f32dd001cce:   vmovdqu 0x9e5835a(%rip),%xmm2        # 0x00007f32e6e5a030
  0x00007f32dd001cd6:   vmovq  0x9e58362(%rip),%xmm3        # 0x00007f32e6e5a040
  0x00007f32dd001cde:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f32dd001ce2:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007f32dd001ce6:   add    $0x1c7610,%rdx
  0x00007f32dd001ced:   vmovdqu %xmm0,%xmm4
  0x00007f32dd001cf1:   and    $0x3f,%rdx
  0x00007f32dd001cf5:   vmovdqu 0x9e58373(%rip),%xmm5        # 0x00007f32e6e5a070
  0x00007f32dd001cfd:   movabs $0x7f32e6e59780,%rax
  0x00007f32dd001d07:   shl    $0x5,%rdx
  0x00007f32dd001d0b:   add    %rdx,%rax
  0x00007f32dd001d0e:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007f32dd001d12:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007f32dd001d16:   vmulsd 0x9e5830a(%rip),%xmm1,%xmm1        # 0x00007f32e6e5a028
  0x00007f32dd001d1e:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f32dd001d22:   vmovq  0x8(%rax),%xmm7
  0x00007f32dd001d27:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f32dd001d2b:   vmovdqu %xmm4,%xmm3
  0x00007f32dd001d2f:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f32dd001d33:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd001d37:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007f32dd001d3b:   vmovdqu 0x9e5834d(%rip),%xmm6        # 0x00007f32e6e5a090
  0x00007f32dd001d43:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007f32dd001d47:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f32dd001d4b:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd001d4f:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd001d53:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f32dd001d57:   vmovdqu (%rax),%xmm2
  0x00007f32dd001d5b:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007f32dd001d5f:   vmovq  0x18(%rax),%xmm3
  0x00007f32dd001d64:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f32dd001d68:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f32dd001d6c:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f32dd001d70:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007f32dd001d74:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007f32dd001d78:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007f32dd001d7c:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd001d80:   vaddpd 0x9e582f8(%rip),%xmm5,%xmm5        # 0x00007f32e6e5a080
  0x00007f32dd001d88:   vmulsd (%rax),%xmm4,%xmm4
  0x00007f32dd001d8c:   vaddpd 0x9e5830c(%rip),%xmm6,%xmm6        # 0x00007f32e6e5a0a0
  0x00007f32dd001d94:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd001d98:   vmovdqu %xmm3,%xmm0
  0x00007f32dd001d9c:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007f32dd001da1:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007f32dd001da5:   vmovdqu %xmm4,%xmm7
  0x00007f32dd001da9:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007f32dd001dad:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007f32dd001db1:   vmovq  0x8(%rax),%xmm5
  0x00007f32dd001db6:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007f32dd001dba:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f32dd001dbe:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007f32dd001dc3:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f32dd001dc7:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f32dd001dcb:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007f32dd001dcf:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f32dd001dd3:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f32dd001dd7:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f32dd001ddb:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007f32dd001ddf:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f32dd001de3:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f32dd001de7:   jmpq   0x00007f32dd0022e0
  0x00007f32dd001dec:   jg     0x00007f32dd001e16
  0x00007f32dd001df2:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd001df7:   and    $0x7fff,%eax
  0x00007f32dd001dfc:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd001e01:   vmovq  0x9e582e7(%rip),%xmm1        # 0x00007f32e6e5a0f0
  0x00007f32dd001e09:   vsubsd %xmm0,%xmm1,%xmm1
  0x00007f32dd001e0d:   vmovdqu %xmm1,%xmm0
  0x00007f32dd001e11:   jmpq   0x00007f32dd0022e0
  0x00007f32dd001e16:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd001e1b:   and    $0x7ff0,%eax
  0x00007f32dd001e20:   cmp    $0x7ff0,%eax
  0x00007f32dd001e25:   je     0x00007f32dd0022cd
  0x00007f32dd001e2b:   vpextrw $0x3,%xmm0,%ecx
  0x00007f32dd001e30:   and    $0x7ff0,%ecx
  0x00007f32dd001e36:   sub    $0x3f60,%ecx
  0x00007f32dd001e3c:   shr    $0x7,%ecx
  0x00007f32dd001e3f:   and    $0xfffc,%ecx
  0x00007f32dd001e45:   movabs $0x7f32e6e59f80,%r11
  0x00007f32dd001e4f:   add    %r11,%rcx
  0x00007f32dd001e52:   vmovq  %xmm0,%rax
  0x00007f32dd001e57:   mov    0x14(%rcx),%r10d
  0x00007f32dd001e5b:   mov    0x18(%rcx),%r8d
  0x00007f32dd001e5f:   mov    %eax,%edx
  0x00007f32dd001e61:   shr    $0x15,%rax
  0x00007f32dd001e65:   or     $0x80000000,%eax
  0x00007f32dd001e6a:   shr    $0xb,%eax
  0x00007f32dd001e6d:   mov    %r10d,%r9d
  0x00007f32dd001e70:   imul   %rdx,%r10
  0x00007f32dd001e74:   imul   %rax,%r9
  0x00007f32dd001e78:   imul   %rax,%r8
  0x00007f32dd001e7c:   mov    0x10(%rcx),%esi
  0x00007f32dd001e7f:   mov    0xc(%rcx),%edi
  0x00007f32dd001e82:   mov    %r10d,%r11d
  0x00007f32dd001e85:   shr    $0x20,%r10
  0x00007f32dd001e89:   add    %r10,%r9
  0x00007f32dd001e8c:   add    %r8,%r11
  0x00007f32dd001e8f:   mov    %r11d,%r8d
  0x00007f32dd001e92:   shr    $0x20,%r11
  0x00007f32dd001e96:   add    %r11,%r9
  0x00007f32dd001e99:   mov    %esi,%r10d
  0x00007f32dd001e9c:   imul   %rdx,%rsi
  0x00007f32dd001ea0:   imul   %rax,%r10
  0x00007f32dd001ea4:   mov    %edi,%r11d
  0x00007f32dd001ea7:   imul   %rdx,%rdi
  0x00007f32dd001eab:   mov    %esi,%ebx
  0x00007f32dd001ead:   shr    $0x20,%rsi
  0x00007f32dd001eb1:   add    %rbx,%r9
  0x00007f32dd001eb4:   mov    %r9d,%ebx
  0x00007f32dd001eb7:   shr    $0x20,%r9
  0x00007f32dd001ebb:   add    %rsi,%r10
  0x00007f32dd001ebe:   add    %r9,%r10
  0x00007f32dd001ec1:   shl    $0x20,%rbx
  0x00007f32dd001ec5:   or     %rbx,%r8
  0x00007f32dd001ec8:   imul   %rax,%r11
  0x00007f32dd001ecc:   mov    0x8(%rcx),%r9d
  0x00007f32dd001ed0:   mov    0x4(%rcx),%esi
  0x00007f32dd001ed3:   mov    %edi,%ebx
  0x00007f32dd001ed5:   shr    $0x20,%rdi
  0x00007f32dd001ed9:   add    %rbx,%r10
  0x00007f32dd001edc:   mov    %r10d,%ebx
  0x00007f32dd001edf:   shr    $0x20,%r10
  0x00007f32dd001ee3:   add    %rdi,%r11
  0x00007f32dd001ee6:   add    %r10,%r11
  0x00007f32dd001ee9:   mov    %r9,%rdi
  0x00007f32dd001eec:   imul   %rdx,%r9
  0x00007f32dd001ef0:   imul   %rax,%rdi
  0x00007f32dd001ef4:   mov    %r9d,%r10d
  0x00007f32dd001ef7:   shr    $0x20,%r9
  0x00007f32dd001efb:   add    %r10,%r11
  0x00007f32dd001efe:   mov    %r11d,%r10d
  0x00007f32dd001f01:   shr    $0x20,%r11
  0x00007f32dd001f05:   add    %r9,%rdi
  0x00007f32dd001f08:   add    %r11,%rdi
  0x00007f32dd001f0b:   mov    %rsi,%r9
  0x00007f32dd001f0e:   imul   %rdx,%rsi
  0x00007f32dd001f12:   imul   %rax,%r9
  0x00007f32dd001f16:   shl    $0x20,%r10
  0x00007f32dd001f1a:   or     %rbx,%r10
  0x00007f32dd001f1d:   mov    (%rcx),%eax
  0x00007f32dd001f1f:   mov    %esi,%r11d
  0x00007f32dd001f22:   shr    $0x20,%rsi
  0x00007f32dd001f26:   add    %r11,%rdi
  0x00007f32dd001f29:   mov    %edi,%r11d
  0x00007f32dd001f2c:   shr    $0x20,%rdi
  0x00007f32dd001f30:   add    %rsi,%r9
  0x00007f32dd001f33:   add    %rdi,%r9
  0x00007f32dd001f36:   imul   %rax,%rdx
  0x00007f32dd001f3a:   vpextrw $0x3,%xmm0,%ebx
  0x00007f32dd001f3f:   movabs $0x7f32e6e59f80,%rdi
  0x00007f32dd001f49:   sub    %rdi,%rcx
  0x00007f32dd001f4c:   add    %ecx,%ecx
  0x00007f32dd001f4e:   add    %ecx,%ecx
  0x00007f32dd001f50:   add    %ecx,%ecx
  0x00007f32dd001f52:   add    $0x13,%ecx
  0x00007f32dd001f55:   mov    $0x8000,%esi
  0x00007f32dd001f5a:   and    %ebx,%esi
  0x00007f32dd001f5c:   shr    $0x4,%ebx
  0x00007f32dd001f5f:   and    $0x7ff,%ebx
  0x00007f32dd001f65:   sub    $0x3ff,%ebx
  0x00007f32dd001f6b:   sub    %ebx,%ecx
  0x00007f32dd001f6d:   add    %rdx,%r9
  0x00007f32dd001f70:   mov    %ecx,%edx
  0x00007f32dd001f72:   add    $0x20,%edx
  0x00007f32dd001f75:   cmp    $0x1,%ecx
  0x00007f32dd001f78:   jl     0x00007f32dd00221d
  0x00007f32dd001f7e:   neg    %ecx
  0x00007f32dd001f80:   add    $0x1d,%ecx
  0x00007f32dd001f83:   shl    %cl,%r9d
  0x00007f32dd001f86:   mov    %r9d,%edi
  0x00007f32dd001f89:   and    $0x1fffffff,%r9d
  0x00007f32dd001f90:   test   $0x10000000,%r9d
  0x00007f32dd001f97:   jne    0x00007f32dd00224a
  0x00007f32dd001f9d:   shr    %cl,%r9d
  0x00007f32dd001fa0:   mov    $0x0,%ebx
  0x00007f32dd001fa5:   shl    $0x20,%r9
  0x00007f32dd001fa9:   or     %r11,%r9
  0x00007f32dd001fac:   cmp    $0x0,%r9
  0x00007f32dd001fb0:   je     0x00007f32dd0021c1
  0x00007f32dd001fb6:   bsr    %r9,%r11
  0x00007f32dd001fba:   mov    $0x1d,%ecx
  0x00007f32dd001fbf:   sub    %r11d,%ecx
  0x00007f32dd001fc2:   jle    0x00007f32dd0021fa
  0x00007f32dd001fc8:   shl    %cl,%r9
  0x00007f32dd001fcb:   mov    %r10,%rax
  0x00007f32dd001fce:   shl    %cl,%r10
  0x00007f32dd001fd1:   add    %ecx,%edx
  0x00007f32dd001fd3:   neg    %ecx
  0x00007f32dd001fd5:   add    $0x40,%ecx
  0x00007f32dd001fd8:   shr    %cl,%rax
  0x00007f32dd001fdb:   shr    %cl,%r8
  0x00007f32dd001fde:   or     %rax,%r9
  0x00007f32dd001fe1:   or     %r8,%r10
  0x00007f32dd001fe4:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007f32dd001fe9:   shr    %r10
  0x00007f32dd001fec:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007f32dd001ff1:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007f32dd001ff5:   shl    $0x4,%edx
  0x00007f32dd001ff8:   neg    %edx
  0x00007f32dd001ffa:   add    $0x3ff0,%edx
  0x00007f32dd002000:   or     %esi,%edx
  0x00007f32dd002002:   xor    %ebx,%edx
  0x00007f32dd002004:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007f32dd002009:   vmovq  0x9e58047(%rip),%xmm2        # 0x00007f32e6e5a058
  0x00007f32dd002011:   vmovq  0x9e58047(%rip),%xmm6        # 0x00007f32e6e5a060
  0x00007f32dd002019:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007f32dd00201d:   sub    $0x3f0,%edx
  0x00007f32dd002023:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007f32dd002028:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f32dd00202c:   shl    $0x10,%esi
  0x00007f32dd00202f:   sar    $0x1f,%esi
  0x00007f32dd002032:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f32dd002036:   vmovdqu %xmm0,%xmm1
  0x00007f32dd00203a:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007f32dd00203e:   shr    $0x1d,%edi
  0x00007f32dd002041:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f32dd002045:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007f32dd002049:   add    %esi,%edi
  0x00007f32dd00204b:   xor    %esi,%edi
  0x00007f32dd00204d:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007f32dd002051:   mov    %edi,%eax
  0x00007f32dd002053:   vaddsd %xmm3,%xmm6,%xmm6
  0x00007f32dd002057:   vmovdqu %xmm0,%xmm2
  0x00007f32dd00205b:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f32dd00205f:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007f32dd002063:   vaddsd %xmm2,%xmm6,%xmm6
  0x00007f32dd002067:   vmovq  0x9e57fe1(%rip),%xmm1        # 0x00007f32e6e5a050
  0x00007f32dd00206f:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f32dd002073:   vmovq  0x9e58065(%rip),%xmm5        # 0x00007f32e6e5a0e0
  0x00007f32dd00207b:   vmovq  0x9e5804d(%rip),%xmm4        # 0x00007f32e6e5a0d0
  0x00007f32dd002083:   vpand  %xmm0,%xmm4,%xmm4
  0x00007f32dd002087:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f32dd00208b:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f32dd00208f:   vcvttsd2si %xmm1,%rdx
  0x00007f32dd002094:   vcvtsi2sd %rdx,%xmm1,%xmm1
  0x00007f32dd002099:   vmovq  0x9e57f9f(%rip),%xmm3        # 0x00007f32e6e5a040
  0x00007f32dd0020a1:   vmovdqu 0x9e57f87(%rip),%xmm2        # 0x00007f32e6e5a030
  0x00007f32dd0020a9:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f32dd0020ad:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007f32dd0020b1:   shl    $0x3,%eax
  0x00007f32dd0020b4:   add    $0x1c7610,%edx
  0x00007f32dd0020ba:   vmovdqu %xmm0,%xmm4
  0x00007f32dd0020be:   add    %eax,%edx
  0x00007f32dd0020c0:   and    $0x3f,%edx
  0x00007f32dd0020c3:   vmovdqu 0x9e57fa5(%rip),%xmm5        # 0x00007f32e6e5a070
  0x00007f32dd0020cb:   movabs $0x7f32e6e59780,%rax
  0x00007f32dd0020d5:   shl    $0x5,%edx
  0x00007f32dd0020d8:   add    %rdx,%rax
  0x00007f32dd0020db:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007f32dd0020df:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007f32dd0020e3:   vmulsd 0x9e57f3d(%rip),%xmm1,%xmm1        # 0x00007f32e6e5a028
  0x00007f32dd0020eb:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f32dd0020ef:   vmovq  0x8(%rax),%xmm7
  0x00007f32dd0020f4:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f32dd0020f8:   vmovdqu %xmm4,%xmm3
  0x00007f32dd0020fc:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f32dd002100:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd002104:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007f32dd002108:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007f32dd00210c:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f32dd002110:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd002114:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd002118:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f32dd00211c:   vmovdqu (%rax),%xmm2
  0x00007f32dd002120:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007f32dd002124:   vmovq  0x18(%rax),%xmm3
  0x00007f32dd002129:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f32dd00212d:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f32dd002131:   vsubsd %xmm6,%xmm1,%xmm1
  0x00007f32dd002135:   vmovdqu 0x9e57f53(%rip),%xmm6        # 0x00007f32e6e5a090
  0x00007f32dd00213d:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f32dd002141:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007f32dd002145:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007f32dd002149:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007f32dd00214d:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd002151:   vaddpd 0x9e57f27(%rip),%xmm5,%xmm5        # 0x00007f32e6e5a080
  0x00007f32dd002159:   vmulsd (%rax),%xmm4,%xmm4
  0x00007f32dd00215d:   vaddpd 0x9e57f3b(%rip),%xmm6,%xmm6        # 0x00007f32e6e5a0a0
  0x00007f32dd002165:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd002169:   vmovdqu %xmm3,%xmm0
  0x00007f32dd00216d:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007f32dd002172:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007f32dd002176:   vmovdqu %xmm4,%xmm7
  0x00007f32dd00217a:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007f32dd00217e:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007f32dd002182:   vmovq  0x8(%rax),%xmm5
  0x00007f32dd002187:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007f32dd00218b:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f32dd00218f:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007f32dd002194:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f32dd002198:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f32dd00219c:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007f32dd0021a0:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f32dd0021a4:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f32dd0021a8:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f32dd0021ac:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007f32dd0021b0:   vmovdqu %xmm4,%xmm0
  0x00007f32dd0021b4:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f32dd0021b8:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f32dd0021bc:   jmpq   0x00007f32dd0022e0
  0x00007f32dd0021c1:   add    $0x40,%edx
  0x00007f32dd0021c4:   mov    %r10,%r9
  0x00007f32dd0021c7:   mov    %r8,%r10
  0x00007f32dd0021ca:   mov    $0x0,%r8d
  0x00007f32dd0021d0:   cmp    $0x0,%r9
  0x00007f32dd0021d4:   jne    0x00007f32dd001fb6
  0x00007f32dd0021da:   add    $0x40,%edx
  0x00007f32dd0021dd:   mov    %r10,%r9
  0x00007f32dd0021e0:   mov    %r8,%r10
  0x00007f32dd0021e3:   cmp    $0x0,%r9
  0x00007f32dd0021e7:   jne    0x00007f32dd001fb6
  0x00007f32dd0021ed:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd0021f1:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f32dd0021f5:   jmpq   0x00007f32dd002067
  0x00007f32dd0021fa:   je     0x00007f32dd001fe4
  0x00007f32dd002200:   neg    %ecx
  0x00007f32dd002202:   shr    %cl,%r10
  0x00007f32dd002205:   mov    %r9,%rax
  0x00007f32dd002208:   shr    %cl,%r9
  0x00007f32dd00220b:   sub    %ecx,%edx
  0x00007f32dd00220d:   neg    %ecx
  0x00007f32dd00220f:   add    $0x40,%ecx
  0x00007f32dd002212:   shl    %cl,%rax
  0x00007f32dd002215:   or     %rax,%r10
  0x00007f32dd002218:   jmpq   0x00007f32dd001fe4
  0x00007f32dd00221d:   neg    %ecx
  0x00007f32dd00221f:   shl    $0x20,%r9
  0x00007f32dd002223:   or     %r11,%r9
  0x00007f32dd002226:   shl    %cl,%r9
  0x00007f32dd002229:   mov    %r9,%rdi
  0x00007f32dd00222c:   test   $0x80000000,%r9d
  0x00007f32dd002233:   jne    0x00007f32dd00228c
  0x00007f32dd002239:   shr    %cl,%r9d
  0x00007f32dd00223c:   mov    $0x0,%ebx
  0x00007f32dd002241:   shr    $0x3,%rdi
  0x00007f32dd002245:   jmpq   0x00007f32dd001fac
  0x00007f32dd00224a:   shr    %cl,%r9d
  0x00007f32dd00224d:   mov    $0x20000000,%ebx
  0x00007f32dd002252:   shr    %cl,%ebx
  0x00007f32dd002254:   shl    $0x20,%r9
  0x00007f32dd002258:   or     %r11,%r9
  0x00007f32dd00225b:   shl    $0x20,%rbx
  0x00007f32dd00225f:   add    $0x20000000,%edi
  0x00007f32dd002265:   mov    $0x0,%ecx
  0x00007f32dd00226a:   mov    $0x0,%r11d
  0x00007f32dd002270:   sub    %r8,%rcx
  0x00007f32dd002273:   sbb    %r10,%r11
  0x00007f32dd002276:   sbb    %r9,%rbx
  0x00007f32dd002279:   mov    %rcx,%r8
  0x00007f32dd00227c:   mov    %r11,%r10
  0x00007f32dd00227f:   mov    %rbx,%r9
  0x00007f32dd002282:   mov    $0x8000,%ebx
  0x00007f32dd002287:   jmpq   0x00007f32dd001fac
  0x00007f32dd00228c:   shr    %cl,%r9d
  0x00007f32dd00228f:   movabs $0x100000000,%rbx
  0x00007f32dd002299:   shr    %cl,%rbx
  0x00007f32dd00229c:   mov    $0x0,%ecx
  0x00007f32dd0022a1:   mov    $0x0,%r11d
  0x00007f32dd0022a7:   sub    %r8,%rcx
  0x00007f32dd0022aa:   sbb    %r10,%r11
  0x00007f32dd0022ad:   sbb    %r9,%rbx
  0x00007f32dd0022b0:   mov    %rcx,%r8
  0x00007f32dd0022b3:   mov    %r11,%r10
  0x00007f32dd0022b6:   mov    %rbx,%r9
  0x00007f32dd0022b9:   mov    $0x8000,%ebx
  0x00007f32dd0022be:   shr    $0x3,%rdi
  0x00007f32dd0022c2:   add    $0x20000000,%edi
  0x00007f32dd0022c8:   jmpq   0x00007f32dd001fac
  0x00007f32dd0022cd:   vmovsd 0x8(%rsp),%xmm0
  0x00007f32dd0022d3:   vmulsd 0x9e57d6d(%rip),%xmm0,%xmm0        # 0x00007f32e6e5a048
  0x00007f32dd0022db:   vmovq  %xmm0,(%rsp)
  0x00007f32dd0022e0:   add    $0x10,%rsp
  0x00007f32dd0022e4:   pop    %rbx
  0x00007f32dd0022e5:   leaveq 
  0x00007f32dd0022e6:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmTan [0x00007f32dd0022e7, 0x00007f32dd002b2f] (2120 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0022e7:   push   %rbp
  0x00007f32dd0022e8:   mov    %rsp,%rbp
  0x00007f32dd0022eb:   push   %rbx
  0x00007f32dd0022ec:   sub    $0x10,%rsp
  0x00007f32dd0022f0:   vmovsd %xmm0,0x8(%rsp)
  0x00007f32dd0022f6:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd0022fb:   and    $0x7fff,%eax
  0x00007f32dd002300:   sub    $0x3fba,%eax
  0x00007f32dd002305:   cmp    $0x10e,%eax
  0x00007f32dd00230a:   ja     0x00007f32dd002511
  0x00007f32dd002310:   vmovdqu 0x9e57dc8(%rip),%xmm5        # 0x00007f32e6e5a0e0
  0x00007f32dd002318:   vmovdqu 0x9e5dd20(%rip),%xmm6        # 0x00007f32e6e60040
  0x00007f32dd002320:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f32dd002324:   vmovdqu 0x9e5dd04(%rip),%xmm4        # 0x00007f32e6e60030
  0x00007f32dd00232c:   vandpd %xmm0,%xmm4,%xmm4
  0x00007f32dd002330:   vmovdqu 0x9e5dce8(%rip),%xmm1        # 0x00007f32e6e60020
  0x00007f32dd002338:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f32dd00233c:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f32dd002340:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f32dd002344:   vmovdqu %xmm1,%xmm7
  0x00007f32dd002348:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007f32dd00234c:   vcvttsd2si %xmm7,%edx
  0x00007f32dd002350:   (bad)  
  0x00007f32dd002354:   leaveq 
  0x00007f32dd002355:   vcvtdq2pd %xmm1,%xmm1
  0x00007f32dd002359:   vmulpd %xmm6,%xmm1,%xmm1
  0x00007f32dd00235d:   vmovdqu 0x9e5dcab(%rip),%xmm3        # 0x00007f32e6e60010
  0x00007f32dd002365:   vmovq  0x9e5c603(%rip),%xmm5        # 0x00007f32e6e5e970
  0x00007f32dd00236d:   add    $0x72900,%rdx
  0x00007f32dd002374:   vmovdqu 0x9e5dc84(%rip),%xmm4        # 0x00007f32e6e60000
  0x00007f32dd00237c:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007f32dd002380:   and    $0x1f,%rdx
  0x00007f32dd002384:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007f32dd002388:   mov    %rdx,%rcx
  0x00007f32dd00238b:   vmulpd %xmm1,%xmm4,%xmm4
  0x00007f32dd00238f:   shl    %rcx
  0x00007f32dd002392:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007f32dd002396:   vmulpd 0x9e5dc52(%rip),%xmm1,%xmm1        # 0x00007f32e6e5fff0
  0x00007f32dd00239e:   add    %rcx,%rdx
  0x00007f32dd0023a1:   shl    $0x2,%rcx
  0x00007f32dd0023a5:   add    %rcx,%rdx
  0x00007f32dd0023a8:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f32dd0023ac:   vmovdqu %xmm0,%xmm2
  0x00007f32dd0023b0:   vsubpd %xmm4,%xmm0,%xmm0
  0x00007f32dd0023b4:   vmovq  0x9e57d34(%rip),%xmm6        # 0x00007f32e6e5a0f0
  0x00007f32dd0023bc:   shl    $0x4,%rdx
  0x00007f32dd0023c0:   movabs $0x7f32e6e5e9f0,%rax
  0x00007f32dd0023ca:   vandpd 0x9e5c60e(%rip),%xmm5,%xmm5        # 0x00007f32e6e5e9e0
  0x00007f32dd0023d2:   vmovdqu %xmm0,%xmm3
  0x00007f32dd0023d6:   add    %rdx,%rax
  0x00007f32dd0023d9:   vsubpd %xmm0,%xmm2,%xmm2
  0x00007f32dd0023dd:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007f32dd0023e1:   vdivsd %xmm5,%xmm6,%xmm6
  0x00007f32dd0023e5:   vsubpd %xmm4,%xmm2,%xmm2
  0x00007f32dd0023e9:   vmovdqu 0x10(%rax),%xmm7
  0x00007f32dd0023ee:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f32dd0023f2:   vmulpd %xmm0,%xmm7,%xmm7
  0x00007f32dd0023f6:   vsubpd %xmm1,%xmm2,%xmm2
  0x00007f32dd0023fa:   vmovdqu 0x30(%rax),%xmm1
  0x00007f32dd0023ff:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f32dd002403:   vmovdqu 0x60(%rax),%xmm4
  0x00007f32dd002408:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007f32dd00240c:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f32dd002410:   vmovdqu %xmm0,%xmm3
  0x00007f32dd002414:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd002418:   vaddpd (%rax),%xmm7,%xmm7
  0x00007f32dd00241c:   vaddpd 0x20(%rax),%xmm1,%xmm1
  0x00007f32dd002421:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f32dd002425:   vaddpd 0x50(%rax),%xmm4,%xmm4
  0x00007f32dd00242a:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007f32dd00242e:   vmovdqu 0x70(%rax),%xmm1
  0x00007f32dd002433:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f32dd002437:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd00243b:   vaddpd %xmm1,%xmm4,%xmm4
  0x00007f32dd00243f:   vmovdqu 0x40(%rax),%xmm1
  0x00007f32dd002444:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f32dd002448:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007f32dd00244c:   vmovdqu %xmm3,%xmm1
  0x00007f32dd002450:   vmulpd %xmm0,%xmm3,%xmm3
  0x00007f32dd002454:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f32dd002458:   vmulpd 0x90(%rax),%xmm1,%xmm1
  0x00007f32dd002460:   vmulpd %xmm3,%xmm4,%xmm4
  0x00007f32dd002464:   vmovdqu %xmm1,%xmm3
  0x00007f32dd002468:   vaddpd %xmm4,%xmm7,%xmm7
  0x00007f32dd00246c:   vmovdqu %xmm1,%xmm4
  0x00007f32dd002470:   vmulsd %xmm7,%xmm0,%xmm0
  0x00007f32dd002474:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007f32dd002478:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f32dd00247c:   vunpckhpd %xmm1,%xmm1,%xmm1
  0x00007f32dd002480:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007f32dd002484:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f32dd002488:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f32dd00248c:   vmovdqu %xmm2,%xmm4
  0x00007f32dd002490:   vmovq  0x90(%rax),%xmm7
  0x00007f32dd002498:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007f32dd00249c:   vaddsd 0x98(%rax),%xmm7,%xmm7
  0x00007f32dd0024a4:   vmulsd %xmm2,%xmm7,%xmm7
  0x00007f32dd0024a8:   vaddsd 0x88(%rax),%xmm7,%xmm7
  0x00007f32dd0024b0:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007f32dd0024b4:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f32dd0024b8:   vmovq  0x9e57c30(%rip),%xmm7        # 0x00007f32e6e5a0f0
  0x00007f32dd0024c0:   vmulsd %xmm6,%xmm4,%xmm4
  0x00007f32dd0024c4:   vmovq  0xa8(%rax),%xmm2
  0x00007f32dd0024cc:   vandpd %xmm6,%xmm2,%xmm2
  0x00007f32dd0024d0:   vmulsd %xmm2,%xmm5,%xmm5
  0x00007f32dd0024d4:   vmulsd 0xa0(%rax),%xmm6,%xmm6
  0x00007f32dd0024dc:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007f32dd0024e0:   vsubsd 0x80(%rax),%xmm2,%xmm2
  0x00007f32dd0024e8:   vsubsd %xmm4,%xmm7,%xmm7
  0x00007f32dd0024ec:   vmulsd %xmm6,%xmm7,%xmm7
  0x00007f32dd0024f0:   vmovdqu %xmm3,%xmm4
  0x00007f32dd0024f4:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f32dd0024f8:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f32dd0024fc:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f32dd002500:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f32dd002504:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007f32dd002508:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f32dd00250c:   jmpq   0x00007f32dd002b28
  0x00007f32dd002511:   jg     0x00007f32dd0025ba
  0x00007f32dd002517:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd00251c:   mov    %eax,%edx
  0x00007f32dd00251e:   and    $0x7ff0,%eax
  0x00007f32dd002523:   je     0x00007f32dd0025ad
  0x00007f32dd002529:   and    $0x7fff,%edx
  0x00007f32dd00252f:   cmp    $0x3e20,%edx
  0x00007f32dd002535:   jb     0x00007f32dd002590
  0x00007f32dd00253b:   vmovdqu %xmm0,%xmm2
  0x00007f32dd00253f:   vmovdqu %xmm0,%xmm3
  0x00007f32dd002543:   vmovq  0x9e5c485(%rip),%xmm1        # 0x00007f32e6e5e9d0
  0x00007f32dd00254b:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007f32dd00254f:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007f32dd002553:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f32dd002557:   vaddsd 0x9e5c461(%rip),%xmm1,%xmm1        # 0x00007f32e6e5e9c0
  0x00007f32dd00255f:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f32dd002563:   vaddsd 0x9e5c445(%rip),%xmm1,%xmm1        # 0x00007f32e6e5e9b0
  0x00007f32dd00256b:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f32dd00256f:   vaddsd 0x9e5c429(%rip),%xmm1,%xmm1        # 0x00007f32e6e5e9a0
  0x00007f32dd002577:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f32dd00257b:   vaddsd 0x9e5c40d(%rip),%xmm1,%xmm1        # 0x00007f32e6e5e990
  0x00007f32dd002583:   vmulsd %xmm3,%xmm1,%xmm1
  0x00007f32dd002587:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f32dd00258b:   jmpq   0x00007f32dd002b28
  0x00007f32dd002590:   vmovq  0x9e57b30(%rip),%xmm3        # 0x00007f32e6e5a0c8
  0x00007f32dd002598:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007f32dd00259c:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f32dd0025a0:   vmulsd 0x9e57b18(%rip),%xmm0,%xmm0        # 0x00007f32e6e5a0c0
  0x00007f32dd0025a8:   jmpq   0x00007f32dd002b28
  0x00007f32dd0025ad:   vmovdqu %xmm0,%xmm1
  0x00007f32dd0025b1:   vmulsd %xmm1,%xmm1,%xmm1
  0x00007f32dd0025b5:   jmpq   0x00007f32dd002b28
  0x00007f32dd0025ba:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd0025bf:   and    $0x7ff0,%eax
  0x00007f32dd0025c4:   cmp    $0x7ff0,%eax
  0x00007f32dd0025c9:   je     0x00007f32dd002b15
  0x00007f32dd0025cf:   vpextrw $0x3,%xmm0,%ecx
  0x00007f32dd0025d4:   and    $0x7ff0,%ecx
  0x00007f32dd0025da:   sub    $0x3f60,%ecx
  0x00007f32dd0025e0:   shr    $0x7,%ecx
  0x00007f32dd0025e3:   and    $0xfffc,%ecx
  0x00007f32dd0025e9:   movabs $0x7f32e6e59f80,%r11
  0x00007f32dd0025f3:   add    %r11,%rcx
  0x00007f32dd0025f6:   vmovq  %xmm0,%rax
  0x00007f32dd0025fb:   mov    0x14(%rcx),%r10d
  0x00007f32dd0025ff:   mov    0x18(%rcx),%r8d
  0x00007f32dd002603:   mov    %eax,%edx
  0x00007f32dd002605:   shr    $0x15,%rax
  0x00007f32dd002609:   or     $0x80000000,%eax
  0x00007f32dd00260e:   shr    $0xb,%eax
  0x00007f32dd002611:   mov    %r10d,%r9d
  0x00007f32dd002614:   imul   %rdx,%r10
  0x00007f32dd002618:   imul   %rax,%r9
  0x00007f32dd00261c:   imul   %rax,%r8
  0x00007f32dd002620:   mov    0x10(%rcx),%esi
  0x00007f32dd002623:   mov    0xc(%rcx),%edi
  0x00007f32dd002626:   mov    %r10d,%r11d
  0x00007f32dd002629:   shr    $0x20,%r10
  0x00007f32dd00262d:   add    %r10,%r9
  0x00007f32dd002630:   add    %r8,%r11
  0x00007f32dd002633:   mov    %r11d,%r8d
  0x00007f32dd002636:   shr    $0x20,%r11
  0x00007f32dd00263a:   add    %r11,%r9
  0x00007f32dd00263d:   mov    %esi,%r10d
  0x00007f32dd002640:   imul   %rdx,%rsi
  0x00007f32dd002644:   imul   %rax,%r10
  0x00007f32dd002648:   mov    %edi,%r11d
  0x00007f32dd00264b:   imul   %rdx,%rdi
  0x00007f32dd00264f:   mov    %esi,%ebx
  0x00007f32dd002651:   shr    $0x20,%rsi
  0x00007f32dd002655:   add    %rbx,%r9
  0x00007f32dd002658:   mov    %r9d,%ebx
  0x00007f32dd00265b:   shr    $0x20,%r9
  0x00007f32dd00265f:   add    %rsi,%r10
  0x00007f32dd002662:   add    %r9,%r10
  0x00007f32dd002665:   shl    $0x20,%rbx
  0x00007f32dd002669:   or     %rbx,%r8
  0x00007f32dd00266c:   imul   %rax,%r11
  0x00007f32dd002670:   mov    0x8(%rcx),%r9d
  0x00007f32dd002674:   mov    0x4(%rcx),%esi
  0x00007f32dd002677:   mov    %edi,%ebx
  0x00007f32dd002679:   shr    $0x20,%rdi
  0x00007f32dd00267d:   add    %rbx,%r10
  0x00007f32dd002680:   mov    %r10d,%ebx
  0x00007f32dd002683:   shr    $0x20,%r10
  0x00007f32dd002687:   add    %rdi,%r11
  0x00007f32dd00268a:   add    %r10,%r11
  0x00007f32dd00268d:   mov    %r9,%rdi
  0x00007f32dd002690:   imul   %rdx,%r9
  0x00007f32dd002694:   imul   %rax,%rdi
  0x00007f32dd002698:   mov    %r9d,%r10d
  0x00007f32dd00269b:   shr    $0x20,%r9
  0x00007f32dd00269f:   add    %r10,%r11
  0x00007f32dd0026a2:   mov    %r11d,%r10d
  0x00007f32dd0026a5:   shr    $0x20,%r11
  0x00007f32dd0026a9:   add    %r9,%rdi
  0x00007f32dd0026ac:   add    %r11,%rdi
  0x00007f32dd0026af:   mov    %rsi,%r9
  0x00007f32dd0026b2:   imul   %rdx,%rsi
  0x00007f32dd0026b6:   imul   %rax,%r9
  0x00007f32dd0026ba:   shl    $0x20,%r10
  0x00007f32dd0026be:   or     %rbx,%r10
  0x00007f32dd0026c1:   mov    (%rcx),%eax
  0x00007f32dd0026c3:   mov    %esi,%r11d
  0x00007f32dd0026c6:   shr    $0x20,%rsi
  0x00007f32dd0026ca:   add    %r11,%rdi
  0x00007f32dd0026cd:   mov    %edi,%r11d
  0x00007f32dd0026d0:   shr    $0x20,%rdi
  0x00007f32dd0026d4:   add    %rsi,%r9
  0x00007f32dd0026d7:   add    %rdi,%r9
  0x00007f32dd0026da:   imul   %rax,%rdx
  0x00007f32dd0026de:   vpextrw $0x3,%xmm0,%ebx
  0x00007f32dd0026e3:   movabs $0x7f32e6e59f80,%rdi
  0x00007f32dd0026ed:   sub    %rdi,%rcx
  0x00007f32dd0026f0:   add    %ecx,%ecx
  0x00007f32dd0026f2:   add    %ecx,%ecx
  0x00007f32dd0026f4:   add    %ecx,%ecx
  0x00007f32dd0026f6:   add    $0x13,%ecx
  0x00007f32dd0026f9:   mov    $0x8000,%esi
  0x00007f32dd0026fe:   and    %ebx,%esi
  0x00007f32dd002700:   shr    $0x4,%ebx
  0x00007f32dd002703:   and    $0x7ff,%ebx
  0x00007f32dd002709:   sub    $0x3ff,%ebx
  0x00007f32dd00270f:   sub    %ebx,%ecx
  0x00007f32dd002711:   add    %rdx,%r9
  0x00007f32dd002714:   mov    %ecx,%edx
  0x00007f32dd002716:   add    $0x20,%edx
  0x00007f32dd002719:   cmp    $0x0,%ecx
  0x00007f32dd00271c:   jl     0x00007f32dd002a65
  0x00007f32dd002722:   neg    %ecx
  0x00007f32dd002724:   add    $0x1d,%ecx
  0x00007f32dd002727:   shl    %cl,%r9d
  0x00007f32dd00272a:   mov    %r9d,%edi
  0x00007f32dd00272d:   and    $0x3fffffff,%r9d
  0x00007f32dd002734:   test   $0x20000000,%r9d
  0x00007f32dd00273b:   jne    0x00007f32dd002a92
  0x00007f32dd002741:   shr    %cl,%r9d
  0x00007f32dd002744:   mov    $0x0,%ebx
  0x00007f32dd002749:   shl    $0x20,%r9
  0x00007f32dd00274d:   or     %r11,%r9
  0x00007f32dd002750:   cmp    $0x0,%r9
  0x00007f32dd002754:   je     0x00007f32dd002a11
  0x00007f32dd00275a:   bsr    %r9,%r11
  0x00007f32dd00275e:   mov    $0x1d,%ecx
  0x00007f32dd002763:   sub    %r11d,%ecx
  0x00007f32dd002766:   jle    0x00007f32dd002a42
  0x00007f32dd00276c:   shl    %cl,%r9
  0x00007f32dd00276f:   mov    %r10,%rax
  0x00007f32dd002772:   shl    %cl,%r10
  0x00007f32dd002775:   add    %ecx,%edx
  0x00007f32dd002777:   neg    %ecx
  0x00007f32dd002779:   add    $0x40,%ecx
  0x00007f32dd00277c:   shr    %cl,%rax
  0x00007f32dd00277f:   shr    %cl,%r8
  0x00007f32dd002782:   or     %rax,%r9
  0x00007f32dd002785:   or     %r8,%r10
  0x00007f32dd002788:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007f32dd00278d:   shr    %r10
  0x00007f32dd002790:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007f32dd002795:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007f32dd002799:   shl    $0x4,%edx
  0x00007f32dd00279c:   neg    %edx
  0x00007f32dd00279e:   add    $0x3ff0,%edx
  0x00007f32dd0027a4:   or     %esi,%edx
  0x00007f32dd0027a6:   xor    %ebx,%edx
  0x00007f32dd0027a8:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007f32dd0027ad:   vmovq  0x9e5c1c3(%rip),%xmm2        # 0x00007f32e6e5e978
  0x00007f32dd0027b5:   vmovq  0x9e5c1c3(%rip),%xmm7        # 0x00007f32e6e5e980
  0x00007f32dd0027bd:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007f32dd0027c1:   sub    $0x3f0,%edx
  0x00007f32dd0027c7:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007f32dd0027cc:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f32dd0027d0:   shl    $0x10,%esi
  0x00007f32dd0027d3:   sar    $0x1f,%esi
  0x00007f32dd0027d6:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f32dd0027da:   vmovdqu %xmm0,%xmm1
  0x00007f32dd0027de:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007f32dd0027e2:   shr    $0x1e,%edi
  0x00007f32dd0027e5:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f32dd0027e9:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007f32dd0027ed:   add    %esi,%edi
  0x00007f32dd0027ef:   xor    %esi,%edi
  0x00007f32dd0027f1:   vmulsd %xmm1,%xmm7,%xmm7
  0x00007f32dd0027f5:   mov    %edi,%eax
  0x00007f32dd0027f7:   vaddsd %xmm3,%xmm7,%xmm7
  0x00007f32dd0027fb:   vmovdqu %xmm0,%xmm2
  0x00007f32dd0027ff:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f32dd002803:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007f32dd002807:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007f32dd00280b:   vmovdqu 0x9e5d80d(%rip),%xmm1        # 0x00007f32e6e60020
  0x00007f32dd002813:   vmovddup %xmm0,%xmm0
  0x00007f32dd002817:   vmovdqu 0x9e5d811(%rip),%xmm4        # 0x00007f32e6e60030
  0x00007f32dd00281f:   vandpd %xmm0,%xmm4,%xmm4
  0x00007f32dd002823:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f32dd002827:   vmovddup %xmm7,%xmm7
  0x00007f32dd00282b:   vmovdqu 0x9e578ad(%rip),%xmm5        # 0x00007f32e6e5a0e0
  0x00007f32dd002833:   vmovdqu 0x9e5d805(%rip),%xmm6        # 0x00007f32e6e60040
  0x00007f32dd00283b:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f32dd00283f:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f32dd002843:   vmovdqu %xmm1,%xmm5
  0x00007f32dd002847:   vunpckhpd %xmm5,%xmm5,%xmm5
  0x00007f32dd00284b:   vcvttsd2si %xmm5,%edx
  0x00007f32dd00284f:   (bad)  
  0x00007f32dd002853:   leaveq 
  0x00007f32dd002854:   vcvtdq2pd %xmm1,%xmm1
  0x00007f32dd002858:   vmulpd %xmm6,%xmm1,%xmm1
  0x00007f32dd00285c:   vmovdqu 0x9e5d7ac(%rip),%xmm3        # 0x00007f32e6e60010
  0x00007f32dd002864:   vmovq  0x9e5c104(%rip),%xmm5        # 0x00007f32e6e5e970
  0x00007f32dd00286c:   shl    $0x4,%eax
  0x00007f32dd00286f:   add    $0x72900,%edx
  0x00007f32dd002875:   vmovdqu 0x9e5d783(%rip),%xmm4        # 0x00007f32e6e60000
  0x00007f32dd00287d:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007f32dd002881:   add    %eax,%edx
  0x00007f32dd002883:   and    $0x1f,%edx
  0x00007f32dd002886:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007f32dd00288a:   mov    %edx,%ecx
  0x00007f32dd00288c:   vmulpd %xmm1,%xmm4,%xmm4
  0x00007f32dd002890:   shl    %ecx
  0x00007f32dd002892:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007f32dd002896:   vmulpd 0x9e5d752(%rip),%xmm1,%xmm1        # 0x00007f32e6e5fff0
  0x00007f32dd00289e:   add    %ecx,%edx
  0x00007f32dd0028a0:   shl    $0x2,%ecx
  0x00007f32dd0028a3:   add    %ecx,%edx
  0x00007f32dd0028a5:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f32dd0028a9:   vmovdqu %xmm0,%xmm2
  0x00007f32dd0028ad:   vsubpd %xmm4,%xmm0,%xmm0
  0x00007f32dd0028b1:   vmovq  0x9e57837(%rip),%xmm6        # 0x00007f32e6e5a0f0
  0x00007f32dd0028b9:   shl    $0x4,%edx
  0x00007f32dd0028bc:   movabs $0x7f32e6e5e9f0,%rax
  0x00007f32dd0028c6:   vandpd 0x9e5c112(%rip),%xmm5,%xmm5        # 0x00007f32e6e5e9e0
  0x00007f32dd0028ce:   vmovdqu %xmm0,%xmm3
  0x00007f32dd0028d2:   add    %rdx,%rax
  0x00007f32dd0028d5:   vsubpd %xmm0,%xmm2,%xmm2
  0x00007f32dd0028d9:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007f32dd0028dd:   vdivsd %xmm5,%xmm6,%xmm6
  0x00007f32dd0028e1:   vsubpd %xmm4,%xmm2,%xmm2
  0x00007f32dd0028e5:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f32dd0028e9:   vsubpd %xmm1,%xmm2,%xmm2
  0x00007f32dd0028ed:   vmovdqu 0x30(%rax),%xmm1
  0x00007f32dd0028f2:   vaddpd %xmm7,%xmm2,%xmm2
  0x00007f32dd0028f6:   vmovdqu 0x10(%rax),%xmm7
  0x00007f32dd0028fb:   vmulpd %xmm0,%xmm7,%xmm7
  0x00007f32dd0028ff:   vmovdqu 0x60(%rax),%xmm4
  0x00007f32dd002904:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f32dd002908:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007f32dd00290c:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f32dd002910:   vmovdqu %xmm0,%xmm3
  0x00007f32dd002914:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd002918:   vaddpd (%rax),%xmm7,%xmm7
  0x00007f32dd00291c:   vaddpd 0x20(%rax),%xmm1,%xmm1
  0x00007f32dd002921:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f32dd002925:   vaddpd 0x50(%rax),%xmm4,%xmm4
  0x00007f32dd00292a:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007f32dd00292e:   vmovdqu 0x70(%rax),%xmm1
  0x00007f32dd002933:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f32dd002937:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd00293b:   vaddpd %xmm1,%xmm4,%xmm4
  0x00007f32dd00293f:   vmovdqu 0x40(%rax),%xmm1
  0x00007f32dd002944:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f32dd002948:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007f32dd00294c:   vmovdqu %xmm3,%xmm1
  0x00007f32dd002950:   vmulpd %xmm0,%xmm3,%xmm3
  0x00007f32dd002954:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f32dd002958:   vmulpd 0x90(%rax),%xmm1,%xmm1
  0x00007f32dd002960:   vmulpd %xmm3,%xmm4,%xmm4
  0x00007f32dd002964:   vmovdqu %xmm1,%xmm3
  0x00007f32dd002968:   vaddpd %xmm4,%xmm7,%xmm7
  0x00007f32dd00296c:   vmovdqu %xmm1,%xmm4
  0x00007f32dd002970:   vmulsd %xmm7,%xmm0,%xmm0
  0x00007f32dd002974:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007f32dd002978:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f32dd00297c:   vunpckhpd %xmm1,%xmm1,%xmm1
  0x00007f32dd002980:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007f32dd002984:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f32dd002988:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f32dd00298c:   vmovdqu %xmm2,%xmm4
  0x00007f32dd002990:   vmovq  0x90(%rax),%xmm7
  0x00007f32dd002998:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007f32dd00299c:   vaddsd 0x98(%rax),%xmm7,%xmm7
  0x00007f32dd0029a4:   vmulsd %xmm2,%xmm7,%xmm7
  0x00007f32dd0029a8:   vaddsd 0x88(%rax),%xmm7,%xmm7
  0x00007f32dd0029b0:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007f32dd0029b4:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f32dd0029b8:   vmovq  0x9e57730(%rip),%xmm7        # 0x00007f32e6e5a0f0
  0x00007f32dd0029c0:   vmulsd %xmm6,%xmm4,%xmm4
  0x00007f32dd0029c4:   vmovq  0xa8(%rax),%xmm2
  0x00007f32dd0029cc:   vandpd %xmm6,%xmm2,%xmm2
  0x00007f32dd0029d0:   vmulsd %xmm2,%xmm5,%xmm5
  0x00007f32dd0029d4:   vmulsd 0xa0(%rax),%xmm6,%xmm6
  0x00007f32dd0029dc:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007f32dd0029e0:   vsubsd 0x80(%rax),%xmm2,%xmm2
  0x00007f32dd0029e8:   vsubsd %xmm4,%xmm7,%xmm7
  0x00007f32dd0029ec:   vmulsd %xmm6,%xmm7,%xmm7
  0x00007f32dd0029f0:   vmovdqu %xmm3,%xmm4
  0x00007f32dd0029f4:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f32dd0029f8:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f32dd0029fc:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f32dd002a00:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f32dd002a04:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007f32dd002a08:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f32dd002a0c:   jmpq   0x00007f32dd002b28
  0x00007f32dd002a11:   add    $0x40,%edx
  0x00007f32dd002a14:   mov    %r10,%r9
  0x00007f32dd002a17:   mov    %r8,%r10
  0x00007f32dd002a1a:   mov    $0x0,%r8d
  0x00007f32dd002a20:   cmp    $0x0,%r9
  0x00007f32dd002a24:   jne    0x00007f32dd00275a
  0x00007f32dd002a2a:   add    $0x40,%edx
  0x00007f32dd002a2d:   mov    %r10,%r9
  0x00007f32dd002a30:   mov    %r8,%r10
  0x00007f32dd002a33:   cmp    $0x0,%r9
  0x00007f32dd002a37:   jne    0x00007f32dd00275a
  0x00007f32dd002a3d:   jmpq   0x00007f32dd002788
  0x00007f32dd002a42:   je     0x00007f32dd002788
  0x00007f32dd002a48:   neg    %ecx
  0x00007f32dd002a4a:   shr    %cl,%r10
  0x00007f32dd002a4d:   mov    %r9,%rax
  0x00007f32dd002a50:   shr    %cl,%r9
  0x00007f32dd002a53:   sub    %ecx,%edx
  0x00007f32dd002a55:   neg    %ecx
  0x00007f32dd002a57:   add    $0x40,%ecx
  0x00007f32dd002a5a:   shl    %cl,%rax
  0x00007f32dd002a5d:   or     %rax,%r10
  0x00007f32dd002a60:   jmpq   0x00007f32dd002788
  0x00007f32dd002a65:   not    %ecx
  0x00007f32dd002a67:   shl    $0x20,%r9
  0x00007f32dd002a6b:   or     %r11,%r9
  0x00007f32dd002a6e:   shl    %cl,%r9
  0x00007f32dd002a71:   mov    %r9,%rdi
  0x00007f32dd002a74:   test   $0x80000000,%r9d
  0x00007f32dd002a7b:   jne    0x00007f32dd002ad4
  0x00007f32dd002a81:   shr    %cl,%r9d
  0x00007f32dd002a84:   mov    $0x0,%ebx
  0x00007f32dd002a89:   shr    $0x2,%rdi
  0x00007f32dd002a8d:   jmpq   0x00007f32dd002750
  0x00007f32dd002a92:   shr    %cl,%r9d
  0x00007f32dd002a95:   mov    $0x40000000,%ebx
  0x00007f32dd002a9a:   shr    %cl,%ebx
  0x00007f32dd002a9c:   shl    $0x20,%r9
  0x00007f32dd002aa0:   or     %r11,%r9
  0x00007f32dd002aa3:   shl    $0x20,%rbx
  0x00007f32dd002aa7:   add    $0x40000000,%edi
  0x00007f32dd002aad:   mov    $0x0,%ecx
  0x00007f32dd002ab2:   mov    $0x0,%r11d
  0x00007f32dd002ab8:   sub    %r8,%rcx
  0x00007f32dd002abb:   sbb    %r10,%r11
  0x00007f32dd002abe:   sbb    %r9,%rbx
  0x00007f32dd002ac1:   mov    %rcx,%r8
  0x00007f32dd002ac4:   mov    %r11,%r10
  0x00007f32dd002ac7:   mov    %rbx,%r9
  0x00007f32dd002aca:   mov    $0x8000,%ebx
  0x00007f32dd002acf:   jmpq   0x00007f32dd002750
  0x00007f32dd002ad4:   shr    %cl,%r9d
  0x00007f32dd002ad7:   movabs $0x100000000,%rbx
  0x00007f32dd002ae1:   shr    %cl,%rbx
  0x00007f32dd002ae4:   mov    $0x0,%ecx
  0x00007f32dd002ae9:   mov    $0x0,%r11d
  0x00007f32dd002aef:   sub    %r8,%rcx
  0x00007f32dd002af2:   sbb    %r10,%r11
  0x00007f32dd002af5:   sbb    %r9,%rbx
  0x00007f32dd002af8:   mov    %rcx,%r8
  0x00007f32dd002afb:   mov    %r11,%r10
  0x00007f32dd002afe:   mov    %rbx,%r9
  0x00007f32dd002b01:   mov    $0x8000,%ebx
  0x00007f32dd002b06:   shr    $0x2,%rdi
  0x00007f32dd002b0a:   add    $0x40000000,%edi
  0x00007f32dd002b10:   jmpq   0x00007f32dd002750
  0x00007f32dd002b15:   vmovq  0x8(%rsp),%xmm0
  0x00007f32dd002b1b:   vmulsd 0x9e57525(%rip),%xmm0,%xmm0        # 0x00007f32e6e5a048
  0x00007f32dd002b23:   vmovq  %xmm0,(%rsp)
  0x00007f32dd002b28:   add    $0x10,%rsp
  0x00007f32dd002b2c:   pop    %rbx
  0x00007f32dd002b2d:   leaveq 
  0x00007f32dd002b2e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmExp [0x00007f32dd002b2f, 0x00007f32dd002e4f] (800 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd002b2f:   push   %rbp
  0x00007f32dd002b30:   mov    %rsp,%rbp
  0x00007f32dd002b33:   sub    $0x18,%rsp
  0x00007f32dd002b37:   vmovsd %xmm0,0x8(%rsp)
  0x00007f32dd002b3d:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f32dd002b41:   vmovdqu 0x9e57aa7(%rip),%xmm1        # 0x00007f32e6e5a5f0
  0x00007f32dd002b49:   vmovdqu 0x9e57aaf(%rip),%xmm2        # 0x00007f32e6e5a600
  0x00007f32dd002b51:   vmovdqu 0x9e57ab7(%rip),%xmm3        # 0x00007f32e6e5a610
  0x00007f32dd002b59:   vmovdqu 0x9e5754f(%rip),%xmm6        # 0x00007f32e6e5a0b0
  0x00007f32dd002b61:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd002b66:   and    $0x7fff,%eax
  0x00007f32dd002b6b:   mov    $0x408f,%edx
  0x00007f32dd002b70:   sub    %eax,%edx
  0x00007f32dd002b72:   sub    $0x3c90,%eax
  0x00007f32dd002b77:   or     %eax,%edx
  0x00007f32dd002b79:   cmp    $0x80000000,%edx
  0x00007f32dd002b7f:   jae    0x00007f32dd002e16
  0x00007f32dd002b85:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f32dd002b89:   vaddpd %xmm6,%xmm1,%xmm1
  0x00007f32dd002b8d:   vmovapd %xmm1,%xmm7
  0x00007f32dd002b91:   vsubpd %xmm6,%xmm1,%xmm1
  0x00007f32dd002b95:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007f32dd002b99:   vmovdqu 0x9e57a8f(%rip),%xmm4        # 0x00007f32e6e5a630
  0x00007f32dd002ba1:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007f32dd002ba5:   vmovdqu 0x9e57a93(%rip),%xmm5        # 0x00007f32e6e5a640
  0x00007f32dd002bad:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007f32dd002bb1:   vmovd  %xmm7,%eax
  0x00007f32dd002bb5:   mov    %eax,%ecx
  0x00007f32dd002bb7:   and    $0x3f,%ecx
  0x00007f32dd002bba:   shl    $0x4,%ecx
  0x00007f32dd002bbd:   sar    $0x6,%eax
  0x00007f32dd002bc0:   mov    %eax,%edx
  0x00007f32dd002bc2:   vmovdqu 0x9e57a16(%rip),%xmm6        # 0x00007f32e6e5a5e0
  0x00007f32dd002bca:   vpand  %xmm6,%xmm7,%xmm7
  0x00007f32dd002bce:   vmovdqu 0x9e579fa(%rip),%xmm6        # 0x00007f32e6e5a5d0
  0x00007f32dd002bd6:   vpaddq %xmm6,%xmm7,%xmm7
  0x00007f32dd002bda:   (bad)  
  0x00007f32dd002bde:   imull  (%rsi)
  0x00007f32dd002be0:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007f32dd002be4:   movabs $0x7f32e6e5a1d0,%r11
  0x00007f32dd002bee:   vmovdqu (%rcx,%r11,1),%xmm2
  0x00007f32dd002bf4:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007f32dd002bf8:   vmovapd %xmm0,%xmm6
  0x00007f32dd002bfc:   vmovapd %xmm0,%xmm1
  0x00007f32dd002c00:   vmulpd %xmm6,%xmm6,%xmm6
  0x00007f32dd002c04:   vmulpd %xmm6,%xmm0,%xmm0
  0x00007f32dd002c08:   vaddpd %xmm4,%xmm5,%xmm5
  0x00007f32dd002c0c:   vmulsd %xmm6,%xmm0,%xmm0
  0x00007f32dd002c10:   vmulpd 0x9e57a08(%rip),%xmm6,%xmm6        # 0x00007f32e6e5a620
  0x00007f32dd002c18:   vaddsd %xmm2,%xmm1,%xmm1
  0x00007f32dd002c1c:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007f32dd002c20:   vmulpd %xmm5,%xmm0,%xmm0
  0x00007f32dd002c24:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007f32dd002c28:   vpor   %xmm7,%xmm2,%xmm2
  0x00007f32dd002c2c:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007f32dd002c30:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f32dd002c34:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f32dd002c38:   add    $0x37e,%edx
  0x00007f32dd002c3e:   cmp    $0x77c,%edx
  0x00007f32dd002c44:   ja     0x00007f32dd002c57
  0x00007f32dd002c4a:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007f32dd002c4e:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007f32dd002c52:   jmpq   0x00007f32dd002e49
  0x00007f32dd002c57:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f32dd002c5b:   vmovdqu 0x9e5755d(%rip),%xmm4        # 0x00007f32e6e5a1c0
  0x00007f32dd002c63:   mov    $0xfffffc02,%edx
  0x00007f32dd002c68:   sub    %eax,%edx
  0x00007f32dd002c6a:   vmovd  %edx,%xmm5
  0x00007f32dd002c6e:   vpsllq %xmm5,%xmm4,%xmm4
  0x00007f32dd002c72:   mov    %eax,%ecx
  0x00007f32dd002c74:   sar    %eax
  0x00007f32dd002c76:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f32dd002c7b:   vmovdqu 0x9e5752d(%rip),%xmm6        # 0x00007f32e6e5a1b0
  0x00007f32dd002c83:   (bad)  
  0x00007f32dd002c87:   repz add $0xc5,%al
  0x00007f32dd002c8a:   jmpq   0x00007f32d8c60089
  0x00007f32dd002c8f:   pop    %rcx
  0x00007f32dd002c90:   retq   $0xfa83
  0x00007f32dd002c93:   xor    $0xf,%al
  0x00007f32dd002c95:   (bad)  
  0x00007f32dd002c99:   add    %al,%ch
  0x00007f32dd002c9b:   (bad)  
  0x00007f32dd002c9d:   loop   0x00007f32dd002c64
  0x00007f32dd002c9f:   loope  0x00007f32dd002c9f
  0x00007f32dd002ca1:   faddp  %st,%st(5)
  0x00007f32dd002ca3:   jmp    0x00007f32dd002d01
  0x00007f32dd002ca5:   (bad)  
  0x00007f32dd002ca6:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007f32dd002caa:   cmp    $0x3ff,%ecx
  0x00007f32dd002cb0:   jge    0x00007f32dd002d40
  0x00007f32dd002cb6:   vpextrw $0x3,%xmm0,%ecx
  0x00007f32dd002cbb:   and    $0x8000,%ecx
  0x00007f32dd002cc1:   or     %ecx,%edx
  0x00007f32dd002cc3:   cmp    $0x0,%edx
  0x00007f32dd002cc6:   je     0x00007f32dd002d33
  0x00007f32dd002ccc:   vmovapd %xmm0,%xmm6
  0x00007f32dd002cd0:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f32dd002cd4:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f32dd002cd8:   vpextrw $0x3,%xmm0,%ecx
  0x00007f32dd002cdd:   and    $0x7ff0,%ecx
  0x00007f32dd002ce3:   cmp    $0x0,%ecx
  0x00007f32dd002ce6:   je     0x00007f32dd002cf1
  0x00007f32dd002cec:   jmpq   0x00007f32dd002e49
  0x00007f32dd002cf1:   vmulsd %xmm3,%xmm6,%xmm6
  0x00007f32dd002cf5:   vmulsd %xmm3,%xmm4,%xmm4
  0x00007f32dd002cf9:   vmovdqu %xmm6,%xmm0
  0x00007f32dd002cfd:   vpxor  %xmm4,%xmm6,%xmm6
  0x00007f32dd002d01:   vpsrad $0x1f,%xmm6,%xmm6
  0x00007f32dd002d06:   vpshufd $0x55,%xmm6,%xmm6
  0x00007f32dd002d0b:   (bad)  
  0x00007f32dd002d0f:   lock add %eax,%ebp
  0x00007f32dd002d12:   stc    
  0x00007f32dd002d13:   jae    0x00007f32dd002ce5
  0x00007f32dd002d15:   add    %eax,%ebp
  0x00007f32dd002d17:   stc    
  0x00007f32dd002d18:   out    %eax,(%dx)
  0x00007f32dd002d19:   mov    $0xc9,%ch
  0x00007f32dd002d1c:   jae    0x00007f32dd002cf4
  0x00007f32dd002d1e:   (bad)  
  0x00007f32dd002d1f:   vpaddq %xmm6,%xmm0,%xmm0
  0x00007f32dd002d23:   vpaddq %xmm4,%xmm0,%xmm0
  0x00007f32dd002d27:   movl   $0xf,(%rsp)
  0x00007f32dd002d2e:   jmpq   0x00007f32dd002e3d
  0x00007f32dd002d33:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f32dd002d37:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f32dd002d3b:   jmpq   0x00007f32dd002e49
  0x00007f32dd002d40:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f32dd002d44:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f32dd002d48:   vpextrw $0x3,%xmm0,%ecx
  0x00007f32dd002d4d:   and    $0x7ff0,%ecx
  0x00007f32dd002d53:   cmp    $0x7ff0,%ecx
  0x00007f32dd002d59:   jae    0x00007f32dd002da2
  0x00007f32dd002d5f:   jmpq   0x00007f32dd002e49
  0x00007f32dd002d64:   vpaddd %xmm6,%xmm3,%xmm3
  0x00007f32dd002d68:   vaddpd %xmm2,%xmm0,%xmm0
  0x00007f32dd002d6c:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f32dd002d70:   movl   $0xf,(%rsp)
  0x00007f32dd002d77:   jmpq   0x00007f32dd002e3d
  0x00007f32dd002d7c:   cmp    $0x7ff00000,%eax
  0x00007f32dd002d81:   jae    0x00007f32dd002dc6
  0x00007f32dd002d87:   mov    0xc(%rsp),%eax
  0x00007f32dd002d8b:   cmp    $0x80000000,%eax
  0x00007f32dd002d90:   jae    0x00007f32dd002dae
  0x00007f32dd002d96:   vmovsd 0x9e57402(%rip),%xmm0        # 0x00007f32e6e5a1a0
  0x00007f32dd002d9e:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f32dd002da2:   movl   $0xe,(%rsp)
  0x00007f32dd002da9:   jmpq   0x00007f32dd002e3d
  0x00007f32dd002dae:   vmovsd 0x9e573e2(%rip),%xmm0        # 0x00007f32e6e5a198
  0x00007f32dd002db6:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f32dd002dba:   movl   $0xf,(%rsp)
  0x00007f32dd002dc1:   jmpq   0x00007f32dd002e3d
  0x00007f32dd002dc6:   mov    0x8(%rsp),%edx
  0x00007f32dd002dca:   cmp    $0x7ff00000,%eax
  0x00007f32dd002dcf:   ja     0x00007f32dd002e07
  0x00007f32dd002dd5:   cmp    $0x0,%edx
  0x00007f32dd002dd8:   jne    0x00007f32dd002e07
  0x00007f32dd002dde:   mov    0xc(%rsp),%eax
  0x00007f32dd002de2:   cmp    $0x7ff00000,%eax
  0x00007f32dd002de7:   jne    0x00007f32dd002dfa
  0x00007f32dd002ded:   vmovsd 0x9e5739b(%rip),%xmm0        # 0x00007f32e6e5a190
  0x00007f32dd002df5:   jmpq   0x00007f32dd002e49
  0x00007f32dd002dfa:   vmovsd 0x9eb1f3e(%rip),%xmm0        # 0x00007f32e6eb4d40
  0x00007f32dd002e02:   jmpq   0x00007f32dd002e49
  0x00007f32dd002e07:   vmovsd 0x8(%rsp),%xmm0
  0x00007f32dd002e0d:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f32dd002e11:   jmpq   0x00007f32dd002e49
  0x00007f32dd002e16:   mov    0xc(%rsp),%eax
  0x00007f32dd002e1a:   and    $0x7fffffff,%eax
  0x00007f32dd002e1f:   cmp    $0x40900000,%eax
  0x00007f32dd002e24:   jae    0x00007f32dd002d7c
  0x00007f32dd002e2a:   vmovsd %xmm0,0x8(%rsp)
  0x00007f32dd002e30:   vaddsd 0x9e572b8(%rip),%xmm0,%xmm0        # 0x00007f32e6e5a0f0
  0x00007f32dd002e38:   jmpq   0x00007f32dd002e49
  0x00007f32dd002e3d:   vmovq  %xmm0,0x10(%rsp)
  0x00007f32dd002e43:   vmovq  0x10(%rsp),%xmm0
  0x00007f32dd002e49:   add    $0x18,%rsp
  0x00007f32dd002e4d:   leaveq 
  0x00007f32dd002e4e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmPow [0x00007f32dd002e4f, 0x00007f32dd003f43] (4340 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd002e4f:   push   %rbp
  0x00007f32dd002e50:   mov    %rsp,%rbp
  0x00007f32dd002e53:   sub    $0x28,%rsp
  0x00007f32dd002e57:   vmovsd %xmm0,0x8(%rsp)
  0x00007f32dd002e5d:   vmovsd %xmm1,0x10(%rsp)
  0x00007f32dd002e63:   vmovq  %xmm1,%r8
  0x00007f32dd002e68:   cmp    0x9e589d9(%rip),%r8        # 0x00007f32e6e5b848
  0x00007f32dd002e6f:   jne    0x00007f32dd002e7a
  0x00007f32dd002e71:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f32dd002e75:   jmpq   0x00007f32dd003f3d
  0x00007f32dd002e7a:   cmp    0x9e589bf(%rip),%r8        # 0x00007f32e6e5b840
  0x00007f32dd002e81:   jne    0x00007f32dd002e9a
  0x00007f32dd002e83:   vmovq  %xmm0,%r9
  0x00007f32dd002e88:   cmp    0x9eb1eb9(%rip),%r9        # 0x00007f32e6eb4d48
  0x00007f32dd002e8f:   jl     0x00007f32dd002e9a
  0x00007f32dd002e91:   vsqrtsd %xmm0,%xmm0,%xmm0
  0x00007f32dd002e95:   jmpq   0x00007f32dd003f3d
  0x00007f32dd002e9a:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd002e9f:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f32dd002ea3:   movabs $0x3ff0000000000000,%r9
  0x00007f32dd002ead:   vmovq  %r9,%xmm2
  0x00007f32dd002eb2:   mov    $0x3fb90000,%r8d
  0x00007f32dd002eb8:   vmovq  %r8,%xmm7
  0x00007f32dd002ebd:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd002ec1:   movabs $0x77f0000000000000,%r10
  0x00007f32dd002ecb:   vmovq  %r10,%xmm1
  0x00007f32dd002ed0:   vmovdqu %xmm0,%xmm3
  0x00007f32dd002ed4:   mov    $0x7ff0,%edx
  0x00007f32dd002ed9:   and    %eax,%edx
  0x00007f32dd002edb:   sub    $0x3ff0,%edx
  0x00007f32dd002ee1:   mov    %edx,%ecx
  0x00007f32dd002ee3:   sar    $0x1f,%edx
  0x00007f32dd002ee6:   add    %edx,%ecx
  0x00007f32dd002ee8:   xor    %edx,%ecx
  0x00007f32dd002eea:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f32dd002eee:   vmovdqu 0x9e5ba5a(%rip),%xmm6        # 0x00007f32e6e5e950
  0x00007f32dd002ef6:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f32dd002efb:   vmovq  0x9e5ba3d(%rip),%xmm2        # 0x00007f32e6e5e940
  0x00007f32dd002f03:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f32dd002f08:   add    $0x10,%ecx
  0x00007f32dd002f0b:   bsr    %ecx,%ecx
  0x00007f32dd002f0e:   vrcpps %xmm0,%xmm0
  0x00007f32dd002f12:   (bad)  
  0x00007f32dd002f16:   repz or $0x41,%al
  0x00007f32dd002f19:   mov    $0x2000,%ebx
  0x00007f32dd002f1e:   vmovq  %r11,%xmm4
  0x00007f32dd002f23:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007f32dd002f28:   sub    $0x10,%eax
  0x00007f32dd002f2b:   cmp    $0x7fe0,%eax
  0x00007f32dd002f30:   jae    0x00007f32dd003145
  0x00007f32dd002f36:   mov    $0x0,%r8d
  0x00007f32dd002f3c:   vmulss %xmm7,%xmm0,%xmm0
  0x00007f32dd002f40:   mov    $0xffffffff,%edx
  0x00007f32dd002f45:   sub    $0x4,%ecx
  0x00007f32dd002f48:   shl    %cl,%edx
  0x00007f32dd002f4a:   shl    $0x20,%rdx
  0x00007f32dd002f4e:   vmovq  %rdx,%xmm5
  0x00007f32dd002f53:   vpor   %xmm1,%xmm3,%xmm3
  0x00007f32dd002f57:   sub    $0x3fdf,%eax
  0x00007f32dd002f5c:   cmp    $0x1,%eax
  0x00007f32dd002f5f:   jbe    0x00007f32dd003b5a
  0x00007f32dd002f65:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f32dd002f69:   vpand  %xmm3,%xmm5,%xmm5
  0x00007f32dd002f6d:   vmovd  %xmm0,%edx
  0x00007f32dd002f71:   (bad)  
  0x00007f32dd002f75:   lock sbb $0xdd5ce3c5,%eax
  0x00007f32dd002f7b:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f32dd002f7f:   sub    $0x1,%eax
  0x00007f32dd002f82:   sar    $0x4,%eax
  0x00007f32dd002f85:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f32dd002f89:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd002f8d:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007f32dd002f91:   vmovdqu 0x9e5a8d7(%rip),%xmm1        # 0x00007f32e6e5d870
  0x00007f32dd002f99:   movabs $0x7f32e6e5b860,%r11
  0x00007f32dd002fa3:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007f32dd002fa7:   vmovdqu 0x9e5a8d1(%rip),%xmm4        # 0x00007f32e6e5d880
  0x00007f32dd002faf:   mov    %eax,%ecx
  0x00007f32dd002fb1:   sar    $0x1f,%eax
  0x00007f32dd002fb4:   add    %eax,%ecx
  0x00007f32dd002fb6:   xor    %ecx,%eax
  0x00007f32dd002fb8:   add    $0x1,%eax
  0x00007f32dd002fbb:   bsr    %eax,%eax
  0x00007f32dd002fbe:   vunpcklpd %xmm3,%xmm5,%xmm5
  0x00007f32dd002fc2:   vmovdqu 0x9e5a8c6(%rip),%xmm6        # 0x00007f32e6e5d890
  0x00007f32dd002fca:   vaddsd %xmm5,%xmm3,%xmm3
  0x00007f32dd002fce:   and    $0xffc000,%edx
  0x00007f32dd002fd4:   shr    $0xa,%edx
  0x00007f32dd002fd7:   vaddpd -0xe40(%r11,%rdx,1),%xmm5,%xmm5
  0x00007f32dd002fe1:   vmovdqu 0x9e5a8b7(%rip),%xmm0        # 0x00007f32e6e5d8a0
  0x00007f32dd002fe9:   vpshufd $0x44,%xmm3,%xmm2
  0x00007f32dd002fee:   vmulsd %xmm3,%xmm3,%xmm3
  0x00007f32dd002ff2:   vmulpd %xmm2,%xmm1,%xmm1
  0x00007f32dd002ff6:   vmulpd %xmm2,%xmm4,%xmm4
  0x00007f32dd002ffa:   vaddsd %xmm7,%xmm5,%xmm5
  0x00007f32dd002ffe:   vmulsd %xmm3,%xmm2,%xmm2
  0x00007f32dd003002:   vaddpd %xmm1,%xmm6,%xmm6
  0x00007f32dd003006:   vmulsd %xmm3,%xmm3,%xmm3
  0x00007f32dd00300a:   vaddpd %xmm4,%xmm0,%xmm0
  0x00007f32dd00300e:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd003014:   mov    0x16(%rsp),%cx
  0x00007f32dd003019:   vpshufd $0xee,%xmm5,%xmm7
  0x00007f32dd00301e:   vmovq  0x9e5b90a(%rip),%xmm4        # 0x00007f32e6e5e930
  0x00007f32dd003026:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f32dd00302a:   vpshufd $0x44,%xmm3,%xmm3
  0x00007f32dd00302f:   vmulpd %xmm2,%xmm0,%xmm0
  0x00007f32dd003033:   shl    $0x4,%eax
  0x00007f32dd003036:   sub    $0x3e00,%eax
  0x00007f32dd00303b:   and    $0x7ff0,%ecx
  0x00007f32dd003041:   add    %ecx,%eax
  0x00007f32dd003043:   vmulpd %xmm6,%xmm3,%xmm3
  0x00007f32dd003047:   cmp    $0x270,%eax
  0x00007f32dd00304c:   jae    0x00007f32dd003306
  0x00007f32dd003052:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f32dd003056:   mov    $0x42b8,%edx
  0x00007f32dd00305b:   vpinsrw $0x3,%edx,%xmm6,%xmm6
  0x00007f32dd003060:   vmovdqu %xmm1,%xmm2
  0x00007f32dd003064:   vpand  %xmm1,%xmm4,%xmm4
  0x00007f32dd003068:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007f32dd00306c:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007f32dd003070:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f32dd003074:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007f32dd003078:   vmovdqu %xmm6,%xmm7
  0x00007f32dd00307c:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f32dd003080:   movabs $0x7f32e6e5d930,%r11
  0x00007f32dd00308a:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007f32dd00308e:   vmovd  %xmm6,%edx
  0x00007f32dd003092:   vsubsd %xmm7,%xmm6,%xmm6
  0x00007f32dd003096:   vpshufd $0xee,%xmm3,%xmm0
  0x00007f32dd00309b:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007f32dd00309f:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f32dd0030a3:   mov    %edx,%ecx
  0x00007f32dd0030a5:   and    $0xff,%edx
  0x00007f32dd0030ab:   add    %edx,%edx
  0x00007f32dd0030ad:   vmovdqu (%r11,%rdx,8),%xmm5
  0x00007f32dd0030b3:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007f32dd0030b7:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007f32dd0030bb:   vmovdqu 0x9e5a83d(%rip),%xmm7        # 0x00007f32e6e5d900
  0x00007f32dd0030c3:   vmovdqu 0x9e5a845(%rip),%xmm3        # 0x00007f32e6e5d910
  0x00007f32dd0030cb:   shl    $0xc,%ecx
  0x00007f32dd0030ce:   xor    %r8d,%ecx
  0x00007f32dd0030d1:   and    $0xfff00000,%ecx
  0x00007f32dd0030d7:   vmovq  %rcx,%xmm6
  0x00007f32dd0030dc:   vaddsd %xmm4,%xmm2,%xmm2
  0x00007f32dd0030e0:   movabs $0x3fe62e42fefa39ef,%r9
  0x00007f32dd0030ea:   vmovq  %r9,%xmm1
  0x00007f32dd0030ef:   vpshufd $0x44,%xmm2,%xmm0
  0x00007f32dd0030f4:   vpshufd $0x44,%xmm2,%xmm4
  0x00007f32dd0030f9:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f32dd0030fd:   vpshufd $0x11,%xmm6,%xmm6
  0x00007f32dd003102:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd003106:   vmulpd %xmm4,%xmm7,%xmm7
  0x00007f32dd00310a:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007f32dd00310e:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007f32dd003112:   vpshufd $0xee,%xmm5,%xmm6
  0x00007f32dd003117:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f32dd00311b:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007f32dd00311f:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f32dd003123:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f32dd003127:   vpshufd $0xee,%xmm0,%xmm3
  0x00007f32dd00312c:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007f32dd003130:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f32dd003134:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f32dd003138:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f32dd00313c:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f32dd003140:   jmpq   0x00007f32dd003f3d
  0x00007f32dd003145:   add    $0x10,%eax
  0x00007f32dd003148:   mov    $0x7ff0,%edx
  0x00007f32dd00314d:   and    %eax,%edx
  0x00007f32dd00314f:   cmp    $0x7ff0,%edx
  0x00007f32dd003155:   je     0x00007f32dd00347e
  0x00007f32dd00315b:   test   $0x8000,%eax
  0x00007f32dd003160:   jne    0x00007f32dd003717
  0x00007f32dd003166:   vmovq  0x8(%rsp),%xmm0
  0x00007f32dd00316c:   vmovq  0x8(%rsp),%xmm3
  0x00007f32dd003172:   vmovd  %xmm3,%edx
  0x00007f32dd003176:   vpsrlq $0x20,%xmm3,%xmm3
  0x00007f32dd00317b:   vmovd  %xmm3,%ecx
  0x00007f32dd00317f:   or     %ecx,%edx
  0x00007f32dd003181:   cmp    $0x0,%edx
  0x00007f32dd003184:   je     0x00007f32dd003955
  0x00007f32dd00318a:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f32dd00318e:   mov    $0x47f0,%eax
  0x00007f32dd003193:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f32dd003198:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f32dd00319c:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f32dd0031a0:   mov    $0x3ff0,%eax
  0x00007f32dd0031a5:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f32dd0031aa:   vmovdqu %xmm0,%xmm3
  0x00007f32dd0031ae:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd0031b3:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f32dd0031b7:   mov    $0x47f0,%ecx
  0x00007f32dd0031bc:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f32dd0031c1:   vmovq  0x9e5b777(%rip),%xmm2        # 0x00007f32e6e5e940
  0x00007f32dd0031c9:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f32dd0031ce:   vrcpps %xmm0,%xmm0
  0x00007f32dd0031d2:   (bad)  
  0x00007f32dd0031d6:   repz or $0xc5,%al
  0x00007f32dd0031d9:   cli    
  0x00007f32dd0031da:   outsl  %ds:(%rsi),(%dx)
  0x00007f32dd0031db:   xor    $0x9e5b770,%eax
  0x00007f32dd0031e0:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007f32dd0031e5:   vmulss %xmm7,%xmm0,%xmm0
  0x00007f32dd0031e9:   mov    $0xfffffc00,%edx
  0x00007f32dd0031ee:   vmovd  %edx,%xmm5
  0x00007f32dd0031f2:   vpor   %xmm1,%xmm3,%xmm3
  0x00007f32dd0031f6:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f32dd0031fa:   (bad)  
  0x00007f32dd0031fe:   cmc    
  0x00007f32dd0031ff:   and    %al,%ch
  0x00007f32dd003201:   stc    
  0x00007f32dd003202:   jle    0x00007f32dd0031c6
  0x00007f32dd003204:   (bad)  
  0x00007f32dd003208:   lock sbb $0xebdbd1c5,%eax
  0x00007f32dd00320e:   mov    $0x0,%r8d
  0x00007f32dd003214:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f32dd003218:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f32dd00321c:   and    $0x7ff0,%eax
  0x00007f32dd003221:   sub    $0x47f0,%eax
  0x00007f32dd003226:   sar    $0x4,%eax
  0x00007f32dd003229:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f32dd00322d:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd003231:   jmpq   0x00007f32dd002f8d
  0x00007f32dd003236:   vmovq  0x8(%rsp),%xmm0
  0x00007f32dd00323c:   vmovq  0x8(%rsp),%xmm3
  0x00007f32dd003242:   vmovd  %xmm3,%edx
  0x00007f32dd003246:   vpsrlq $0x20,%xmm3,%xmm3
  0x00007f32dd00324b:   vmovd  %xmm3,%ecx
  0x00007f32dd00324f:   or     %ecx,%edx
  0x00007f32dd003251:   cmp    $0x0,%edx
  0x00007f32dd003254:   je     0x00007f32dd003955
  0x00007f32dd00325a:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f32dd00325e:   mov    $0x47f0,%eax
  0x00007f32dd003263:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f32dd003268:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f32dd00326c:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f32dd003270:   mov    $0x3ff0,%eax
  0x00007f32dd003275:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f32dd00327a:   vmovdqu %xmm0,%xmm3
  0x00007f32dd00327e:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd003283:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f32dd003287:   mov    $0x47f0,%ecx
  0x00007f32dd00328c:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f32dd003291:   vmovq  0x9e5b6a7(%rip),%xmm2        # 0x00007f32e6e5e940
  0x00007f32dd003299:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f32dd00329e:   vrcpps %xmm0,%xmm0
  0x00007f32dd0032a2:   (bad)  
  0x00007f32dd0032a6:   repz or $0xc5,%al
  0x00007f32dd0032a9:   cli    
  0x00007f32dd0032aa:   outsl  %ds:(%rsi),(%dx)
  0x00007f32dd0032ab:   xor    $0x9e5b6a0,%eax
  0x00007f32dd0032b0:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007f32dd0032b5:   vmulss %xmm7,%xmm0,%xmm0
  0x00007f32dd0032b9:   mov    $0xfffffc00,%edx
  0x00007f32dd0032be:   vmovd  %edx,%xmm5
  0x00007f32dd0032c2:   vpor   %xmm1,%xmm3,%xmm3
  0x00007f32dd0032c6:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f32dd0032ca:   (bad)  
  0x00007f32dd0032ce:   cmc    
  0x00007f32dd0032cf:   and    %al,%ch
  0x00007f32dd0032d1:   stc    
  0x00007f32dd0032d2:   jle    0x00007f32dd003296
  0x00007f32dd0032d4:   (bad)  
  0x00007f32dd0032d8:   lock sbb $0xebdbd1c5,%eax
  0x00007f32dd0032de:   mov    $0x80000000,%r8d
  0x00007f32dd0032e4:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f32dd0032e8:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f32dd0032ec:   and    $0x7ff0,%eax
  0x00007f32dd0032f1:   sub    $0x47f0,%eax
  0x00007f32dd0032f6:   sar    $0x4,%eax
  0x00007f32dd0032f9:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f32dd0032fd:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd003301:   jmpq   0x00007f32dd002f8d
  0x00007f32dd003306:   cmp    $0x0,%eax
  0x00007f32dd003309:   jl     0x00007f32dd0038c7
  0x00007f32dd00330f:   cmp    $0x2f0,%eax
  0x00007f32dd003314:   jae    0x00007f32dd003a57
  0x00007f32dd00331a:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f32dd00331e:   vmovq  0x9e5a5aa(%rip),%xmm2        # 0x00007f32e6e5d8d0
  0x00007f32dd003326:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007f32dd00332a:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f32dd00332e:   mov    $0x42b8,%eax
  0x00007f32dd003333:   vpinsrw $0x3,%eax,%xmm6,%xmm6
  0x00007f32dd003338:   vpshufd $0xee,%xmm3,%xmm0
  0x00007f32dd00333d:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f32dd003341:   vmovdqu %xmm5,%xmm3
  0x00007f32dd003345:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f32dd003349:   vmovdqu %xmm2,%xmm4
  0x00007f32dd00334d:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f32dd003351:   vmovdqu %xmm5,%xmm7
  0x00007f32dd003355:   vpand  %xmm2,%xmm5,%xmm5
  0x00007f32dd003359:   vmovdqu %xmm1,%xmm2
  0x00007f32dd00335d:   vpand  %xmm1,%xmm4,%xmm4
  0x00007f32dd003361:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007f32dd003365:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f32dd003369:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007f32dd00336d:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007f32dd003371:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f32dd003375:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007f32dd003379:   vmovdqu %xmm6,%xmm7
  0x00007f32dd00337d:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007f32dd003381:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f32dd003385:   vmovd  %xmm6,%eax
  0x00007f32dd003389:   vsubsd %xmm7,%xmm6,%xmm6
  0x00007f32dd00338d:   movabs $0x7f32e6e5d930,%r11
  0x00007f32dd003397:   vaddsd %xmm1,%xmm2,%xmm2
  0x00007f32dd00339b:   vmovdqu 0x9e5a55d(%rip),%xmm7        # 0x00007f32e6e5d900
  0x00007f32dd0033a3:   vmovdqu 0x9e5a565(%rip),%xmm3        # 0x00007f32e6e5d910
  0x00007f32dd0033ab:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007f32dd0033af:   vpextrw $0x3,%xmm6,%edx
  0x00007f32dd0033b4:   mov    %eax,%ecx
  0x00007f32dd0033b6:   and    $0xff,%eax
  0x00007f32dd0033bb:   add    %eax,%eax
  0x00007f32dd0033bd:   vmovdqu (%r11,%rax,8),%xmm5
  0x00007f32dd0033c3:   vaddsd %xmm4,%xmm2,%xmm2
  0x00007f32dd0033c7:   sar    $0x8,%ecx
  0x00007f32dd0033ca:   mov    %ecx,%eax
  0x00007f32dd0033cc:   sar    %ecx
  0x00007f32dd0033ce:   sub    %ecx,%eax
  0x00007f32dd0033d0:   shl    $0x14,%ecx
  0x00007f32dd0033d3:   xor    %r8d,%ecx
  0x00007f32dd0033d6:   vmovd  %ecx,%xmm6
  0x00007f32dd0033da:   vmovq  0x9e5a53e(%rip),%xmm1        # 0x00007f32e6e5d920
  0x00007f32dd0033e2:   and    $0x7fff,%edx
  0x00007f32dd0033e8:   cmp    $0x4091,%edx
  0x00007f32dd0033ee:   ja     0x00007f32dd003a57
  0x00007f32dd0033f4:   vpshufd $0x44,%xmm2,%xmm0
  0x00007f32dd0033f9:   vpshufd $0x44,%xmm2,%xmm4
  0x00007f32dd0033fe:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd003402:   vmulpd %xmm4,%xmm7,%xmm7
  0x00007f32dd003406:   vpshufd $0x11,%xmm6,%xmm6
  0x00007f32dd00340b:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f32dd00340f:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f32dd003413:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007f32dd003417:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007f32dd00341b:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007f32dd00341f:   vpshufd $0xee,%xmm5,%xmm6
  0x00007f32dd003424:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f32dd003428:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f32dd00342c:   vpshufd $0xee,%xmm0,%xmm3
  0x00007f32dd003431:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007f32dd003435:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f32dd003439:   shl    $0x4,%eax
  0x00007f32dd00343c:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007f32dd003440:   add    $0x3ff0,%eax
  0x00007f32dd003445:   vpinsrw $0x3,%eax,%xmm4,%xmm4
  0x00007f32dd00344a:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f32dd00344e:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f32dd003452:   vmovdqu %xmm0,%xmm1
  0x00007f32dd003456:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f32dd00345a:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f32dd00345e:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd003463:   and    $0x7ff0,%eax
  0x00007f32dd003468:   je     0x00007f32dd003af8
  0x00007f32dd00346e:   cmp    $0x7ff0,%eax
  0x00007f32dd003473:   je     0x00007f32dd003ab2
  0x00007f32dd003479:   jmpq   0x00007f32dd003f3d
  0x00007f32dd00347e:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd003484:   vmovq  0x8(%rsp),%xmm0
  0x00007f32dd00348a:   vmovdqu %xmm0,%xmm2
  0x00007f32dd00348e:   vmovd  %xmm2,%eax
  0x00007f32dd003492:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007f32dd003497:   vmovd  %xmm2,%edx
  0x00007f32dd00349b:   or     %edx,%eax
  0x00007f32dd00349d:   je     0x00007f32dd0034ee
  0x00007f32dd0034a3:   vmovd  %xmm1,%eax
  0x00007f32dd0034a7:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f32dd0034ac:   vmovd  %xmm1,%edx
  0x00007f32dd0034b0:   mov    %edx,%ecx
  0x00007f32dd0034b2:   add    %edx,%edx
  0x00007f32dd0034b4:   or     %edx,%eax
  0x00007f32dd0034b6:   je     0x00007f32dd0034c5
  0x00007f32dd0034bc:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f32dd0034c0:   jmpq   0x00007f32dd003f3d
  0x00007f32dd0034c5:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd0034c9:   mov    $0x3ff0,%eax
  0x00007f32dd0034ce:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd0034d3:   movl   $0x1d,(%rsp)
  0x00007f32dd0034da:   jmpq   0x00007f32dd003f31
  0x00007f32dd0034df:   vmovq  0x10(%rsp),%xmm0
  0x00007f32dd0034e5:   vaddpd %xmm0,%xmm0,%xmm0
  0x00007f32dd0034e9:   jmpq   0x00007f32dd003f3d
  0x00007f32dd0034ee:   vmovd  %xmm1,%eax
  0x00007f32dd0034f2:   vmovdqu %xmm1,%xmm2
  0x00007f32dd0034f6:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f32dd0034fb:   vmovd  %xmm1,%edx
  0x00007f32dd0034ff:   mov    %edx,%ecx
  0x00007f32dd003501:   add    %edx,%edx
  0x00007f32dd003503:   or     %edx,%eax
  0x00007f32dd003505:   je     0x00007f32dd0038ab
  0x00007f32dd00350b:   vpextrw $0x3,%xmm2,%eax
  0x00007f32dd003510:   and    $0x7ff0,%eax
  0x00007f32dd003515:   cmp    $0x7ff0,%eax
  0x00007f32dd00351a:   jne    0x00007f32dd003531
  0x00007f32dd003520:   vmovd  %xmm2,%eax
  0x00007f32dd003524:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007f32dd003529:   vmovd  %xmm2,%edx
  0x00007f32dd00352d:   or     %edx,%eax
  0x00007f32dd00352f:   jne    0x00007f32dd0034df
  0x00007f32dd003531:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd003536:   test   $0x8000,%eax
  0x00007f32dd00353b:   jne    0x00007f32dd003571
  0x00007f32dd003541:   test   $0x80000000,%ecx
  0x00007f32dd003547:   jne    0x00007f32dd0038be
  0x00007f32dd00354d:   jmpq   0x00007f32dd003f3d
  0x00007f32dd003552:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd003558:   vmovd  %xmm1,%eax
  0x00007f32dd00355c:   test   $0x1,%al
  0x00007f32dd00355e:   jne    0x00007f32dd00360f
  0x00007f32dd003564:   test   $0x2,%al
  0x00007f32dd003566:   jne    0x00007f32dd0035e1
  0x00007f32dd00356c:   jmpq   0x00007f32dd00360f
  0x00007f32dd003571:   shr    $0x14,%ecx
  0x00007f32dd003574:   and    $0x7ff,%ecx
  0x00007f32dd00357a:   cmp    $0x433,%ecx
  0x00007f32dd003580:   ja     0x00007f32dd00360f
  0x00007f32dd003586:   je     0x00007f32dd003638
  0x00007f32dd00358c:   cmp    $0x432,%ecx
  0x00007f32dd003592:   ja     0x00007f32dd003552
  0x00007f32dd003594:   cmp    $0x3ff,%ecx
  0x00007f32dd00359a:   jb     0x00007f32dd00360f
  0x00007f32dd0035a0:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd0035a6:   mov    $0x4338,%eax
  0x00007f32dd0035ab:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f32dd0035af:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f32dd0035b4:   vmovdqu %xmm3,%xmm4
  0x00007f32dd0035b8:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007f32dd0035bc:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f32dd0035c0:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f32dd0035c4:   vpextrw $0x3,%xmm1,%eax
  0x00007f32dd0035c9:   and    $0x7ff0,%eax
  0x00007f32dd0035ce:   jne    0x00007f32dd00360f
  0x00007f32dd0035d4:   vmovd  %xmm3,%eax
  0x00007f32dd0035d8:   and    $0x1,%eax
  0x00007f32dd0035db:   je     0x00007f32dd00360f
  0x00007f32dd0035e1:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd0035e7:   vpextrw $0x3,%xmm1,%eax
  0x00007f32dd0035ec:   and    $0x8000,%eax
  0x00007f32dd0035f1:   jne    0x00007f32dd0035fc
  0x00007f32dd0035f7:   jmpq   0x00007f32dd003f3d
  0x00007f32dd0035fc:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd003600:   mov    $0x8000,%eax
  0x00007f32dd003605:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd00360a:   jmpq   0x00007f32dd003f3d
  0x00007f32dd00360f:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd003615:   vpextrw $0x3,%xmm1,%eax
  0x00007f32dd00361a:   and    $0x8000,%eax
  0x00007f32dd00361f:   jne    0x00007f32dd0038be
  0x00007f32dd003625:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd003629:   mov    $0x7ff0,%eax
  0x00007f32dd00362e:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd003633:   jmpq   0x00007f32dd003f3d
  0x00007f32dd003638:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd00363e:   vmovd  %xmm1,%eax
  0x00007f32dd003642:   and    $0x1,%eax
  0x00007f32dd003645:   je     0x00007f32dd00360f
  0x00007f32dd003647:   jmp    0x00007f32dd0035e1
  0x00007f32dd003649:   vmovd  %xmm1,%eax
  0x00007f32dd00364d:   vpsrlq $0x14,%xmm1,%xmm1
  0x00007f32dd003652:   vmovd  %xmm1,%edx
  0x00007f32dd003656:   or     %edx,%eax
  0x00007f32dd003658:   je     0x00007f32dd00366d
  0x00007f32dd00365e:   vmovq  0x10(%rsp),%xmm0
  0x00007f32dd003664:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f32dd003668:   jmpq   0x00007f32dd003f3d
  0x00007f32dd00366d:   vmovq  0x8(%rsp),%xmm0
  0x00007f32dd003673:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd003678:   cmp    $0xbff0,%eax
  0x00007f32dd00367d:   jne    0x00007f32dd0036ab
  0x00007f32dd003683:   vmovd  %xmm0,%ecx
  0x00007f32dd003687:   vpsrlq $0x14,%xmm0,%xmm0
  0x00007f32dd00368c:   vmovd  %xmm0,%edx
  0x00007f32dd003690:   or     %edx,%ecx
  0x00007f32dd003692:   jne    0x00007f32dd0036ab
  0x00007f32dd003698:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd00369c:   mov    $0x7ff8,%eax
  0x00007f32dd0036a1:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd0036a6:   jmpq   0x00007f32dd003f3d
  0x00007f32dd0036ab:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd0036b1:   and    $0x7ff0,%eax
  0x00007f32dd0036b6:   sub    $0x3ff0,%eax
  0x00007f32dd0036bb:   vpextrw $0x3,%xmm1,%edx
  0x00007f32dd0036c0:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd0036c4:   xor    %edx,%eax
  0x00007f32dd0036c6:   and    $0x8000,%eax
  0x00007f32dd0036cb:   je     0x00007f32dd0036d6
  0x00007f32dd0036d1:   jmpq   0x00007f32dd003f3d
  0x00007f32dd0036d6:   mov    $0x7ff0,%ecx
  0x00007f32dd0036db:   vpinsrw $0x3,%ecx,%xmm0,%xmm0
  0x00007f32dd0036e0:   jmpq   0x00007f32dd003f3d
  0x00007f32dd0036e5:   vmovd  %xmm1,%eax
  0x00007f32dd0036e9:   cmp    $0x4320,%edx
  0x00007f32dd0036ef:   ja     0x00007f32dd00370a
  0x00007f32dd0036f5:   test   $0x1,%al
  0x00007f32dd0036f7:   jne    0x00007f32dd003829
  0x00007f32dd0036fd:   test   $0x2,%al
  0x00007f32dd0036ff:   je     0x00007f32dd00384b
  0x00007f32dd003705:   jmpq   0x00007f32dd0037c9
  0x00007f32dd00370a:   test   $0x1,%al
  0x00007f32dd00370c:   je     0x00007f32dd00384b
  0x00007f32dd003712:   jmpq   0x00007f32dd0037c9
  0x00007f32dd003717:   vmovq  0x8(%rsp),%xmm2
  0x00007f32dd00371d:   vmovd  %xmm2,%eax
  0x00007f32dd003721:   vpsrlq $0x1f,%xmm2,%xmm2
  0x00007f32dd003726:   vmovd  %xmm2,%ecx
  0x00007f32dd00372a:   or     %ecx,%eax
  0x00007f32dd00372c:   je     0x00007f32dd003955
  0x00007f32dd003732:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd003738:   vpextrw $0x3,%xmm1,%edx
  0x00007f32dd00373d:   vmovd  %xmm1,%eax
  0x00007f32dd003741:   vmovdqu %xmm1,%xmm2
  0x00007f32dd003745:   vpsrlq $0x20,%xmm2,%xmm2
  0x00007f32dd00374a:   vmovd  %xmm2,%ecx
  0x00007f32dd00374e:   add    %ecx,%ecx
  0x00007f32dd003750:   or     %eax,%ecx
  0x00007f32dd003752:   je     0x00007f32dd003928
  0x00007f32dd003758:   and    $0x7ff0,%edx
  0x00007f32dd00375e:   cmp    $0x7ff0,%edx
  0x00007f32dd003764:   je     0x00007f32dd003649
  0x00007f32dd00376a:   cmp    $0x4330,%edx
  0x00007f32dd003770:   ja     0x00007f32dd00384b
  0x00007f32dd003776:   cmp    $0x4320,%edx
  0x00007f32dd00377c:   jae    0x00007f32dd0036e5
  0x00007f32dd003782:   cmp    $0x3ff0,%edx
  0x00007f32dd003788:   jb     0x00007f32dd003829
  0x00007f32dd00378e:   mov    $0x4338,%eax
  0x00007f32dd003793:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f32dd003797:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f32dd00379c:   vmovdqu %xmm2,%xmm4
  0x00007f32dd0037a0:   vaddsd %xmm1,%xmm2,%xmm2
  0x00007f32dd0037a4:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f32dd0037a8:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f32dd0037ac:   vpextrw $0x3,%xmm1,%eax
  0x00007f32dd0037b1:   and    $0x7fff,%eax
  0x00007f32dd0037b6:   jne    0x00007f32dd003829
  0x00007f32dd0037bc:   vmovd  %xmm2,%eax
  0x00007f32dd0037c0:   and    $0x1,%eax
  0x00007f32dd0037c3:   je     0x00007f32dd00384b
  0x00007f32dd0037c9:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd0037cd:   mov    $0x77f0,%edx
  0x00007f32dd0037d2:   vpinsrw $0x3,%edx,%xmm1,%xmm1
  0x00007f32dd0037d7:   vmovq  0x9e5b161(%rip),%xmm2        # 0x00007f32e6e5e940
  0x00007f32dd0037df:   vmovq  0x8(%rsp),%xmm4
  0x00007f32dd0037e5:   vpextrw $0x3,%xmm4,%eax
  0x00007f32dd0037ea:   mov    $0x2000,%edx
  0x00007f32dd0037ef:   vmovd  %edx,%xmm4
  0x00007f32dd0037f3:   and    $0x7fff,%eax
  0x00007f32dd0037f8:   sub    $0x10,%eax
  0x00007f32dd0037fb:   jl     0x00007f32dd003236
  0x00007f32dd003801:   mov    %eax,%edx
  0x00007f32dd003803:   and    $0x7ff0,%edx
  0x00007f32dd003809:   sub    $0x3ff0,%edx
  0x00007f32dd00380f:   mov    %edx,%ecx
  0x00007f32dd003811:   sar    $0x1f,%edx
  0x00007f32dd003814:   add    %edx,%ecx
  0x00007f32dd003816:   xor    %edx,%ecx
  0x00007f32dd003818:   add    $0x10,%ecx
  0x00007f32dd00381b:   bsr    %ecx,%ecx
  0x00007f32dd00381e:   mov    $0x80000000,%r8d
  0x00007f32dd003824:   jmpq   0x00007f32dd002f3c
  0x00007f32dd003829:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd00382d:   mov    $0x7ff0,%eax
  0x00007f32dd003832:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f32dd003837:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd00383b:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f32dd00383f:   movl   $0x1c,(%rsp)
  0x00007f32dd003846:   jmpq   0x00007f32dd003f31
  0x00007f32dd00384b:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd00384f:   mov    $0x77f0,%edx
  0x00007f32dd003854:   vpinsrw $0x3,%edx,%xmm1,%xmm1
  0x00007f32dd003859:   vmovq  0x9e5b0df(%rip),%xmm2        # 0x00007f32e6e5e940
  0x00007f32dd003861:   vmovq  0x8(%rsp),%xmm4
  0x00007f32dd003867:   vpextrw $0x3,%xmm4,%eax
  0x00007f32dd00386c:   mov    $0x2000,%edx
  0x00007f32dd003871:   vmovd  %edx,%xmm4
  0x00007f32dd003875:   and    $0x7fff,%eax
  0x00007f32dd00387a:   sub    $0x10,%eax
  0x00007f32dd00387d:   jl     0x00007f32dd003166
  0x00007f32dd003883:   mov    %eax,%edx
  0x00007f32dd003885:   and    $0x7ff0,%edx
  0x00007f32dd00388b:   sub    $0x3ff0,%edx
  0x00007f32dd003891:   mov    %edx,%ecx
  0x00007f32dd003893:   sar    $0x1f,%edx
  0x00007f32dd003896:   add    %edx,%ecx
  0x00007f32dd003898:   xor    %edx,%ecx
  0x00007f32dd00389a:   add    $0x10,%ecx
  0x00007f32dd00389d:   bsr    %ecx,%ecx
  0x00007f32dd0038a0:   mov    $0x0,%r8d
  0x00007f32dd0038a6:   jmpq   0x00007f32dd002f3c
  0x00007f32dd0038ab:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd0038af:   mov    $0x3ff0,%eax
  0x00007f32dd0038b4:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd0038b9:   jmpq   0x00007f32dd003f3d
  0x00007f32dd0038be:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd0038c2:   jmpq   0x00007f32dd003f3d
  0x00007f32dd0038c7:   add    $0x180,%eax
  0x00007f32dd0038cc:   cmp    $0x0,%eax
  0x00007f32dd0038cf:   jl     0x00007f32dd003928
  0x00007f32dd0038d5:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007f32dd0038d9:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f32dd0038dd:   shr    $0x1f,%r8d
  0x00007f32dd0038e1:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007f32dd0038e5:   vpshufd $0xee,%xmm3,%xmm0
  0x00007f32dd0038ea:   vaddsd %xmm0,%xmm3,%xmm3
  0x00007f32dd0038ee:   movabs $0x7f32e6e5b850,%r11
  0x00007f32dd0038f8:   vmovq  (%r11,%r8,8),%xmm4
  0x00007f32dd0038fe:   vmulsd %xmm3,%xmm1,%xmm1
  0x00007f32dd003902:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd003906:   mov    $0x3ff0,%eax
  0x00007f32dd00390b:   shl    $0xf,%r8d
  0x00007f32dd00390f:   or     %r8d,%eax
  0x00007f32dd003912:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd003917:   vaddsd %xmm1,%xmm5,%xmm5
  0x00007f32dd00391b:   vmulsd %xmm4,%xmm5,%xmm5
  0x00007f32dd00391f:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f32dd003923:   jmpq   0x00007f32dd003f3d
  0x00007f32dd003928:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd00392c:   mov    $0x3ff0,%eax
  0x00007f32dd003931:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd003936:   jmpq   0x00007f32dd003f3d
  0x00007f32dd00393b:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd00393f:   mov    $0x3ff0,%eax
  0x00007f32dd003944:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd003949:   movl   $0x1a,(%rsp)
  0x00007f32dd003950:   jmpq   0x00007f32dd003f31
  0x00007f32dd003955:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd00395b:   vmovdqu %xmm1,%xmm2
  0x00007f32dd00395f:   vpextrw $0x3,%xmm1,%eax
  0x00007f32dd003964:   and    $0x7ff0,%eax
  0x00007f32dd003969:   cmp    $0x7ff0,%eax
  0x00007f32dd00396e:   jne    0x00007f32dd003989
  0x00007f32dd003974:   vmovd  %xmm2,%eax
  0x00007f32dd003978:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007f32dd00397d:   vmovd  %xmm2,%edx
  0x00007f32dd003981:   or     %edx,%eax
  0x00007f32dd003983:   jne    0x00007f32dd0034df
  0x00007f32dd003989:   vmovd  %xmm1,%eax
  0x00007f32dd00398d:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f32dd003992:   vmovd  %xmm1,%edx
  0x00007f32dd003996:   mov    %edx,%ecx
  0x00007f32dd003998:   add    %edx,%edx
  0x00007f32dd00399a:   or     %edx,%eax
  0x00007f32dd00399c:   je     0x00007f32dd00393b
  0x00007f32dd00399e:   shr    $0x15,%edx
  0x00007f32dd0039a1:   cmp    $0x433,%edx
  0x00007f32dd0039a7:   ja     0x00007f32dd003a25
  0x00007f32dd0039ad:   je     0x00007f32dd003a17
  0x00007f32dd0039b3:   cmp    $0x3ff,%edx
  0x00007f32dd0039b9:   jb     0x00007f32dd003a25
  0x00007f32dd0039bf:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd0039c5:   mov    $0x4338,%eax
  0x00007f32dd0039ca:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f32dd0039ce:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f32dd0039d3:   vmovdqu %xmm3,%xmm4
  0x00007f32dd0039d7:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007f32dd0039db:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f32dd0039df:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f32dd0039e3:   vpextrw $0x3,%xmm1,%eax
  0x00007f32dd0039e8:   and    $0x7ff0,%eax
  0x00007f32dd0039ed:   jne    0x00007f32dd003a25
  0x00007f32dd0039f3:   vmovd  %xmm3,%eax
  0x00007f32dd0039f7:   and    $0x1,%eax
  0x00007f32dd0039fa:   je     0x00007f32dd003a25
  0x00007f32dd003a00:   vmovq  0x8(%rsp),%xmm0
  0x00007f32dd003a06:   test   $0x80000000,%ecx
  0x00007f32dd003a0c:   jne    0x00007f32dd003a35
  0x00007f32dd003a12:   jmpq   0x00007f32dd003f3d
  0x00007f32dd003a17:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd003a1d:   vmovd  %xmm1,%eax
  0x00007f32dd003a21:   test   $0x1,%al
  0x00007f32dd003a23:   jne    0x00007f32dd003a00
  0x00007f32dd003a25:   test   $0x80000000,%ecx
  0x00007f32dd003a2b:   je     0x00007f32dd0038be
  0x00007f32dd003a31:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd003a35:   mov    $0x3ff0,%eax
  0x00007f32dd003a3a:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd003a3e:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f32dd003a43:   vdivsd %xmm0,%xmm1,%xmm1
  0x00007f32dd003a47:   vmovdqu %xmm1,%xmm0
  0x00007f32dd003a4b:   movl   $0x1b,(%rsp)
  0x00007f32dd003a52:   jmpq   0x00007f32dd003f31
  0x00007f32dd003a57:   vmovq  0x8(%rsp),%xmm2
  0x00007f32dd003a5d:   vmovq  0x10(%rsp),%xmm6
  0x00007f32dd003a63:   vpextrw $0x3,%xmm2,%eax
  0x00007f32dd003a68:   vpextrw $0x3,%xmm6,%edx
  0x00007f32dd003a6d:   mov    $0x7ff0,%ecx
  0x00007f32dd003a72:   and    %edx,%ecx
  0x00007f32dd003a74:   cmp    $0x7ff0,%ecx
  0x00007f32dd003a7a:   je     0x00007f32dd003e77
  0x00007f32dd003a80:   and    $0x7ff0,%eax
  0x00007f32dd003a85:   sub    $0x3ff0,%eax
  0x00007f32dd003a8a:   xor    %eax,%edx
  0x00007f32dd003a8c:   test   $0x8000,%edx
  0x00007f32dd003a92:   jne    0x00007f32dd003abe
  0x00007f32dd003a98:   mov    $0x7fe0,%eax
  0x00007f32dd003a9d:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd003aa2:   shr    $0x10,%r8d
  0x00007f32dd003aa6:   or     %r8d,%eax
  0x00007f32dd003aa9:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f32dd003aae:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f32dd003ab2:   movl   $0x18,(%rsp)
  0x00007f32dd003ab9:   jmpq   0x00007f32dd003f31
  0x00007f32dd003abe:   mov    $0x10,%eax
  0x00007f32dd003ac3:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd003ac8:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f32dd003acc:   test   $0x80000000,%r8d
  0x00007f32dd003ad3:   je     0x00007f32dd003aec
  0x00007f32dd003ad9:   movabs $0x8000000000000000,%r9
  0x00007f32dd003ae3:   vmovq  %r9,%xmm2
  0x00007f32dd003ae8:   vxorpd %xmm2,%xmm0,%xmm0
  0x00007f32dd003aec:   movl   $0x19,(%rsp)
  0x00007f32dd003af3:   jmpq   0x00007f32dd003f31
  0x00007f32dd003af8:   vpextrw $0x3,%xmm5,%ecx
  0x00007f32dd003afd:   vpextrw $0x3,%xmm4,%edx
  0x00007f32dd003b02:   mov    $0xffffffff,%eax
  0x00007f32dd003b07:   and    $0x7ff0,%ecx
  0x00007f32dd003b0d:   sub    $0x3ff0,%ecx
  0x00007f32dd003b13:   and    $0x7ff0,%edx
  0x00007f32dd003b19:   add    %ecx,%edx
  0x00007f32dd003b1b:   mov    $0xffffffe1,%ecx
  0x00007f32dd003b20:   sar    $0x4,%edx
  0x00007f32dd003b23:   sub    %edx,%ecx
  0x00007f32dd003b25:   jle    0x00007f32dd003b36
  0x00007f32dd003b2b:   cmp    $0x14,%ecx
  0x00007f32dd003b2e:   ja     0x00007f32dd003b58
  0x00007f32dd003b34:   shl    %cl,%eax
  0x00007f32dd003b36:   vmovd  %eax,%xmm0
  0x00007f32dd003b3a:   (bad)  
  0x00007f32dd003b3e:   lock and %al,%ch
  0x00007f32dd003b41:   stc    
  0x00007f32dd003b42:   fcmovnb %st(5),%st
  0x00007f32dd003b44:   vsubsd %xmm0,%xmm5,%xmm5
  0x00007f32dd003b48:   vaddsd %xmm1,%xmm5,%xmm5
  0x00007f32dd003b4c:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f32dd003b50:   vmulsd %xmm4,%xmm5,%xmm5
  0x00007f32dd003b54:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f32dd003b58:   jmp    0x00007f32dd003aec
  0x00007f32dd003b5a:   mov    0x16(%rsp),%cx
  0x00007f32dd003b5f:   mov    $0x80000000,%edx
  0x00007f32dd003b64:   vmovd  %edx,%xmm1
  0x00007f32dd003b68:   vxorpd %xmm7,%xmm7,%xmm7
  0x00007f32dd003b6c:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f32dd003b70:   vmovd  %xmm0,%edx
  0x00007f32dd003b74:   (bad)  
  0x00007f32dd003b78:   lock sbb $0xcbd4f1c5,%eax
  0x00007f32dd003b7e:   vpand  %xmm1,%xmm5,%xmm5
  0x00007f32dd003b82:   and    $0x7ff0,%ecx
  0x00007f32dd003b88:   cmp    $0x40b0,%ecx
  0x00007f32dd003b8e:   jl     0x00007f32dd002f77
  0x00007f32dd003b94:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f32dd003b98:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f32dd003b9c:   add    $0x3fdf,%eax
  0x00007f32dd003ba1:   shr    $0x4,%eax
  0x00007f32dd003ba4:   sub    $0x3fe,%eax
  0x00007f32dd003ba9:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f32dd003bad:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd003bb1:   movabs $0x7f32e6e5b860,%r11
  0x00007f32dd003bbb:   vmovq  0x9e59d2d(%rip),%xmm4        # 0x00007f32e6e5d8f0
  0x00007f32dd003bc3:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007f32dd003bc7:   vmovq  0x9e59d21(%rip),%xmm6        # 0x00007f32e6e5d8f0
  0x00007f32dd003bcf:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007f32dd003bd3:   vmovq  0x9e59d1d(%rip),%xmm1        # 0x00007f32e6e5d8f8
  0x00007f32dd003bdb:   vpshufd $0x44,%xmm3,%xmm2
  0x00007f32dd003be0:   vunpcklpd %xmm3,%xmm5,%xmm5
  0x00007f32dd003be4:   vaddsd %xmm5,%xmm3,%xmm3
  0x00007f32dd003be8:   vmovq  0x9e59d08(%rip),%xmm0        # 0x00007f32e6e5d8f8
  0x00007f32dd003bf0:   and    $0xffc000,%edx
  0x00007f32dd003bf6:   shr    $0xa,%edx
  0x00007f32dd003bf9:   vaddpd -0xe40(%r11,%rdx,1),%xmm7,%xmm7
  0x00007f32dd003c03:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007f32dd003c07:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007f32dd003c0b:   vmulsd %xmm2,%xmm6,%xmm6
  0x00007f32dd003c0f:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f32dd003c13:   vmovdqu %xmm5,%xmm2
  0x00007f32dd003c17:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007f32dd003c1b:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f32dd003c1f:   vmovdqu %xmm7,%xmm0
  0x00007f32dd003c23:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f32dd003c27:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007f32dd003c2b:   vmulsd %xmm2,%xmm6,%xmm6
  0x00007f32dd003c2f:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007f32dd003c33:   vmovdqu %xmm7,%xmm2
  0x00007f32dd003c37:   vaddsd %xmm4,%xmm7,%xmm7
  0x00007f32dd003c3b:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f32dd003c3f:   vsubsd %xmm7,%xmm2,%xmm2
  0x00007f32dd003c43:   vaddsd %xmm2,%xmm4,%xmm4
  0x00007f32dd003c47:   vpshufd $0xee,%xmm5,%xmm2
  0x00007f32dd003c4c:   vmovdqu %xmm7,%xmm5
  0x00007f32dd003c50:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007f32dd003c54:   vaddsd %xmm0,%xmm4,%xmm4
  0x00007f32dd003c58:   vmovdqu 0x9e59c10(%rip),%xmm0        # 0x00007f32e6e5d870
  0x00007f32dd003c60:   vsubsd %xmm7,%xmm5,%xmm5
  0x00007f32dd003c64:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f32dd003c68:   vmovdqu %xmm7,%xmm4
  0x00007f32dd003c6c:   vaddsd %xmm2,%xmm5,%xmm5
  0x00007f32dd003c70:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007f32dd003c74:   vmovdqu 0x9e59c34(%rip),%xmm2        # 0x00007f32e6e5d8b0
  0x00007f32dd003c7c:   vsubsd %xmm7,%xmm4,%xmm4
  0x00007f32dd003c80:   vaddsd %xmm5,%xmm6,%xmm6
  0x00007f32dd003c84:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007f32dd003c88:   vpshufd $0xee,%xmm7,%xmm5
  0x00007f32dd003c8d:   vmovapd %xmm7,%xmm1
  0x00007f32dd003c91:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007f32dd003c95:   vsubsd %xmm7,%xmm1,%xmm1
  0x00007f32dd003c99:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f32dd003c9d:   vmovdqu 0x9e59c1b(%rip),%xmm5        # 0x00007f32e6e5d8c0
  0x00007f32dd003ca5:   vpshufd $0x44,%xmm3,%xmm3
  0x00007f32dd003caa:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f32dd003cae:   vaddsd %xmm1,%xmm6,%xmm6
  0x00007f32dd003cb2:   vmovdqu 0x9e59bd6(%rip),%xmm1        # 0x00007f32e6e5d890
  0x00007f32dd003cba:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f32dd003cbe:   vmulpd %xmm3,%xmm2,%xmm2
  0x00007f32dd003cc2:   vpshufd $0x44,%xmm3,%xmm4
  0x00007f32dd003cc7:   vmulpd %xmm3,%xmm3,%xmm3
  0x00007f32dd003ccb:   vaddpd %xmm1,%xmm0,%xmm0
  0x00007f32dd003ccf:   vaddpd %xmm2,%xmm5,%xmm5
  0x00007f32dd003cd3:   vmulsd %xmm3,%xmm4,%xmm4
  0x00007f32dd003cd7:   vmovq  0x9e59c01(%rip),%xmm2        # 0x00007f32e6e5d8e0
  0x00007f32dd003cdf:   vmulpd %xmm3,%xmm3,%xmm3
  0x00007f32dd003ce3:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd003ce9:   mov    0x16(%rsp),%cx
  0x00007f32dd003cee:   vmulpd %xmm4,%xmm0,%xmm0
  0x00007f32dd003cf2:   vpextrw $0x3,%xmm7,%eax
  0x00007f32dd003cf7:   vmulpd %xmm4,%xmm5,%xmm5
  0x00007f32dd003cfb:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f32dd003cff:   vmovq  0x9e5ac31(%rip),%xmm4        # 0x00007f32e6e5e938
  0x00007f32dd003d07:   vpand  %xmm7,%xmm2,%xmm2
  0x00007f32dd003d0b:   vaddsd %xmm6,%xmm5,%xmm5
  0x00007f32dd003d0f:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f32dd003d13:   vaddpd %xmm0,%xmm5,%xmm5
  0x00007f32dd003d17:   and    $0x7ff0,%eax
  0x00007f32dd003d1c:   sub    $0x3ff0,%eax
  0x00007f32dd003d21:   and    $0x7ff0,%ecx
  0x00007f32dd003d27:   cmp    $0x7ff0,%ecx
  0x00007f32dd003d2d:   je     0x00007f32dd003e77
  0x00007f32dd003d33:   add    %eax,%ecx
  0x00007f32dd003d35:   cmp    $0x40c0,%ecx
  0x00007f32dd003d3b:   jae    0x00007f32dd003edc
  0x00007f32dd003d41:   vpshufd $0xee,%xmm5,%xmm0
  0x00007f32dd003d46:   vpand  %xmm1,%xmm4,%xmm4
  0x00007f32dd003d4a:   vmovdqu %xmm1,%xmm3
  0x00007f32dd003d4e:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f32dd003d52:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007f32dd003d56:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f32dd003d5a:   mov    $0x42b8,%edx
  0x00007f32dd003d5f:   vpinsrw $0x3,%edx,%xmm6,%xmm6
  0x00007f32dd003d64:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007f32dd003d68:   vmulsd %xmm2,%xmm4,%xmm4
  0x00007f32dd003d6c:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f32dd003d70:   vmovdqu %xmm6,%xmm5
  0x00007f32dd003d74:   vmulsd %xmm7,%xmm3,%xmm3
  0x00007f32dd003d78:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f32dd003d7c:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f32dd003d80:   vmovdqu 0x9e59b78(%rip),%xmm7        # 0x00007f32e6e5d900
  0x00007f32dd003d88:   vmovd  %xmm6,%edx
  0x00007f32dd003d8c:   vsubsd %xmm5,%xmm6,%xmm6
  0x00007f32dd003d90:   movabs $0x7f32e6e5d930,%r11
  0x00007f32dd003d9a:   vmovdqu 0x9e59b6e(%rip),%xmm3        # 0x00007f32e6e5d910
  0x00007f32dd003da2:   vmovq  0x9e59b76(%rip),%xmm2        # 0x00007f32e6e5d920
  0x00007f32dd003daa:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007f32dd003dae:   mov    %edx,%ecx
  0x00007f32dd003db0:   and    $0xff,%edx
  0x00007f32dd003db6:   add    %edx,%edx
  0x00007f32dd003db8:   vmovdqu (%r11,%rdx,8),%xmm5
  0x00007f32dd003dbe:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007f32dd003dc2:   vpextrw $0x3,%xmm6,%edx
  0x00007f32dd003dc7:   shr    $0x8,%ecx
  0x00007f32dd003dca:   mov    %ecx,%eax
  0x00007f32dd003dcc:   shr    %ecx
  0x00007f32dd003dce:   sub    %ecx,%eax
  0x00007f32dd003dd0:   shl    $0x14,%ecx
  0x00007f32dd003dd3:   vmovd  %ecx,%xmm6
  0x00007f32dd003dd7:   vpshufd $0x44,%xmm4,%xmm0
  0x00007f32dd003ddc:   vpshufd $0x44,%xmm4,%xmm1
  0x00007f32dd003de1:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f32dd003de5:   vmulpd %xmm1,%xmm7,%xmm7
  0x00007f32dd003de9:   vpshufd $0x11,%xmm6,%xmm6
  0x00007f32dd003dee:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f32dd003df2:   and    $0x7fff,%edx
  0x00007f32dd003df8:   cmp    $0x4091,%edx
  0x00007f32dd003dfe:   ja     0x00007f32dd003a57
  0x00007f32dd003e04:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f32dd003e08:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007f32dd003e0c:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007f32dd003e10:   vmulsd %xmm5,%xmm2,%xmm2
  0x00007f32dd003e14:   vpshufd $0xee,%xmm5,%xmm6
  0x00007f32dd003e19:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f32dd003e1d:   vaddsd %xmm6,%xmm2,%xmm2
  0x00007f32dd003e21:   vpshufd $0xee,%xmm0,%xmm3
  0x00007f32dd003e26:   add    $0x3ff,%eax
  0x00007f32dd003e2b:   shl    $0x14,%eax
  0x00007f32dd003e2e:   or     %r8d,%eax
  0x00007f32dd003e31:   vmovd  %eax,%xmm4
  0x00007f32dd003e35:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007f32dd003e39:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f32dd003e3d:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007f32dd003e41:   (bad)  
  0x00007f32dd003e45:   hlt    
  0x00007f32dd003e46:   and    %al,%ch
  0x00007f32dd003e48:   sti    
  0x00007f32dd003e49:   pop    %rax
  0x00007f32dd003e4a:   retq   
  0x00007f32dd003e4b:   vmovdqu %xmm0,%xmm1
  0x00007f32dd003e4f:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f32dd003e53:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f32dd003e57:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd003e5c:   and    $0x7ff0,%eax
  0x00007f32dd003e61:   je     0x00007f32dd003af8
  0x00007f32dd003e67:   cmp    $0x7ff0,%eax
  0x00007f32dd003e6c:   je     0x00007f32dd003ab2
  0x00007f32dd003e72:   jmpq   0x00007f32dd003f3d
  0x00007f32dd003e77:   vmovq  0x8(%rsp),%xmm0
  0x00007f32dd003e7d:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f32dd003e81:   mov    $0xbff0,%eax
  0x00007f32dd003e86:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f32dd003e8b:   vaddsd %xmm0,%xmm2,%xmm2
  0x00007f32dd003e8f:   vpextrw $0x3,%xmm2,%eax
  0x00007f32dd003e94:   cmp    $0x0,%eax
  0x00007f32dd003e97:   jne    0x00007f32dd003eb0
  0x00007f32dd003e9d:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd003ea1:   mov    $0x7ff8,%eax
  0x00007f32dd003ea6:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd003eab:   jmpq   0x00007f32dd003f3d
  0x00007f32dd003eb0:   vmovq  0x10(%rsp),%xmm1
  0x00007f32dd003eb6:   vmovd  %xmm1,%edx
  0x00007f32dd003eba:   vmovdqu %xmm1,%xmm3
  0x00007f32dd003ebe:   vpsrlq $0x14,%xmm3,%xmm3
  0x00007f32dd003ec3:   vmovd  %xmm3,%ecx
  0x00007f32dd003ec7:   or     %edx,%ecx
  0x00007f32dd003ec9:   je     0x00007f32dd003ef8
  0x00007f32dd003ecf:   vaddsd %xmm1,%xmm1,%xmm1
  0x00007f32dd003ed3:   vmovdqu %xmm1,%xmm0
  0x00007f32dd003ed7:   jmpq   0x00007f32dd003f3d
  0x00007f32dd003edc:   vpextrw $0x3,%xmm1,%eax
  0x00007f32dd003ee1:   vpextrw $0x3,%xmm2,%ecx
  0x00007f32dd003ee6:   xor    %ecx,%eax
  0x00007f32dd003ee8:   test   $0x8000,%eax
  0x00007f32dd003eed:   je     0x00007f32dd003a98
  0x00007f32dd003ef3:   jmpq   0x00007f32dd003abe
  0x00007f32dd003ef8:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd003efd:   and    $0x7ff0,%eax
  0x00007f32dd003f02:   vpextrw $0x3,%xmm1,%edx
  0x00007f32dd003f07:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd003f0b:   sub    $0x3ff0,%eax
  0x00007f32dd003f10:   xor    %edx,%eax
  0x00007f32dd003f12:   test   $0x8000,%eax
  0x00007f32dd003f17:   je     0x00007f32dd003f22
  0x00007f32dd003f1d:   jmpq   0x00007f32dd003f3d
  0x00007f32dd003f22:   mov    $0x7ff0,%edx
  0x00007f32dd003f27:   vpinsrw $0x3,%edx,%xmm0,%xmm0
  0x00007f32dd003f2c:   jmpq   0x00007f32dd003f3d
  0x00007f32dd003f31:   vmovq  %xmm0,0x18(%rsp)
  0x00007f32dd003f37:   vmovq  0x18(%rsp),%xmm0
  0x00007f32dd003f3d:   add    $0x28,%rsp
  0x00007f32dd003f41:   leaveq 
  0x00007f32dd003f42:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmLog [0x00007f32dd003f43, 0x00007f32dd0041b7] (628 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd003f43:   push   %rbp
  0x00007f32dd003f44:   mov    %rsp,%rbp
  0x00007f32dd003f47:   sub    $0x18,%rsp
  0x00007f32dd003f4b:   vmovsd %xmm0,(%rsp)
  0x00007f32dd003f50:   movabs $0x3ff0000000000000,%rax
  0x00007f32dd003f5a:   vmovq  %rax,%xmm2
  0x00007f32dd003f5f:   movabs $0x77f0000000000000,%rdx
  0x00007f32dd003f69:   vmovq  %rdx,%xmm3
  0x00007f32dd003f6e:   mov    $0x8000,%ecx
  0x00007f32dd003f73:   vmovd  %ecx,%xmm4
  0x00007f32dd003f77:   movabs $0xffffe00000000000,%r11
  0x00007f32dd003f81:   vmovq  %r11,%xmm5
  0x00007f32dd003f86:   vmovdqu %xmm0,%xmm1
  0x00007f32dd003f8a:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd003f8f:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f32dd003f93:   mov    $0x3fe0,%ecx
  0x00007f32dd003f98:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f32dd003f9d:   movabs $0x7f32e6e5af40,%r8
  0x00007f32dd003fa7:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f32dd003fac:   vrcpps %xmm0,%xmm0
  0x00007f32dd003fb0:   (bad)  
  0x00007f32dd003fb4:   icebp  
  0x00007f32dd003fb5:   or     $0xc5,%al
  0x00007f32dd003fb7:   stc    
  0x00007f32dd003fb8:   jo     0x00007f32dd003faf
  0x00007f32dd003fba:   in     $0xc5,%al
  0x00007f32dd003fbc:   icebp  
  0x00007f32dd003fbd:   jae    0x00007f32dd003f90
  0x00007f32dd003fbf:   or     $0x83,%al
  0x00007f32dd003fc1:   callq  0x00007f335ce07cd6
  0x00007f32dd003fc6:   add    %al,(%rax)
  0x00007f32dd003fc8:   jae    0x00007f32dd0040a1
  0x00007f32dd003fce:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f32dd003fd2:   vpor   %xmm3,%xmm1,%xmm1
  0x00007f32dd003fd6:   vmovd  %xmm0,%edx
  0x00007f32dd003fda:   (bad)  
  0x00007f32dd003fde:   lock sbb $0xe9dbd1c5,%eax
  0x00007f32dd003fe4:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f32dd003fe8:   vsubsd %xmm5,%xmm1,%xmm1
  0x00007f32dd003fec:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd003ff0:   and    $0x7ff0,%eax
  0x00007f32dd003ff5:   sub    %ecx,%eax
  0x00007f32dd003ff7:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f32dd003ffb:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f32dd003fff:   vmovq  0x9e56f29(%rip),%xmm6        # 0x00007f32e6e5af30
  0x00007f32dd004007:   vmovdqu 0x9e56ef1(%rip),%xmm3        # 0x00007f32e6e5af00
  0x00007f32dd00400f:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007f32dd004013:   and    $0xff0000,%edx
  0x00007f32dd004019:   shr    $0xc,%edx
  0x00007f32dd00401c:   vmovdqu (%r8,%rdx,1),%xmm0
  0x00007f32dd004022:   vmovdqu 0x9e56ee6(%rip),%xmm4        # 0x00007f32e6e5af10
  0x00007f32dd00402a:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f32dd00402e:   vmovdqu 0x9e56eea(%rip),%xmm2        # 0x00007f32e6e5af20
  0x00007f32dd004036:   vmulsd %xmm7,%xmm6,%xmm6
  0x00007f32dd00403a:   vmovddup %xmm1,%xmm5
  0x00007f32dd00403e:   vmulsd 0x9e56ef2(%rip),%xmm7,%xmm7        # 0x00007f32e6e5af38
  0x00007f32dd004046:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f32dd00404a:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f32dd00404e:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007f32dd004052:   vmulpd %xmm5,%xmm5,%xmm5
  0x00007f32dd004056:   vmovddup %xmm0,%xmm6
  0x00007f32dd00405a:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f32dd00405e:   vaddpd %xmm2,%xmm4,%xmm4
  0x00007f32dd004062:   vmulpd %xmm5,%xmm3,%xmm3
  0x00007f32dd004066:   vsubsd %xmm0,%xmm6,%xmm6
  0x00007f32dd00406a:   vmulsd %xmm1,%xmm4,%xmm4
  0x00007f32dd00406e:   vpshufd $0xee,%xmm0,%xmm2
  0x00007f32dd004073:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f32dd004077:   vmulsd %xmm5,%xmm5,%xmm5
  0x00007f32dd00407b:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007f32dd00407f:   vaddpd %xmm3,%xmm4,%xmm4
  0x00007f32dd004083:   vaddsd %xmm7,%xmm1,%xmm1
  0x00007f32dd004087:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007f32dd00408b:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f32dd00408f:   vpshufd $0xee,%xmm4,%xmm5
  0x00007f32dd004094:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f32dd004098:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f32dd00409c:   jmpq   0x00007f32dd0041b1
  0x00007f32dd0040a1:   vmovq  (%rsp),%xmm0
  0x00007f32dd0040a6:   vmovq  (%rsp),%xmm1
  0x00007f32dd0040ab:   add    $0x10,%eax
  0x00007f32dd0040ae:   cmp    $0x8000,%eax
  0x00007f32dd0040b3:   jae    0x00007f32dd00413e
  0x00007f32dd0040b9:   cmp    $0x10,%eax
  0x00007f32dd0040bc:   jb     0x00007f32dd0040d7
  0x00007f32dd0040c2:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f32dd0040c6:   jmpq   0x00007f32dd0041b1
  0x00007f32dd0040cb:   ja     0x00007f32dd0040c2
  0x00007f32dd0040cd:   cmp    $0x0,%edx
  0x00007f32dd0040d0:   ja     0x00007f32dd0040c2
  0x00007f32dd0040d2:   jmpq   0x00007f32dd004164
  0x00007f32dd0040d7:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd0040db:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007f32dd0040df:   vmovd  %xmm1,%edx
  0x00007f32dd0040e3:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f32dd0040e8:   vmovd  %xmm1,%ecx
  0x00007f32dd0040ec:   or     %ecx,%edx
  0x00007f32dd0040ee:   cmp    $0x0,%edx
  0x00007f32dd0040f1:   je     0x00007f32dd004187
  0x00007f32dd0040f7:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd0040fb:   mov    $0x47f0,%eax
  0x00007f32dd004100:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f32dd004105:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f32dd004109:   vmovdqu %xmm0,%xmm1
  0x00007f32dd00410d:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd004112:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f32dd004116:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f32dd00411b:   mov    $0x47f0,%ecx
  0x00007f32dd004120:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f32dd004125:   vrcpps %xmm0,%xmm0
  0x00007f32dd004129:   (bad)  
  0x00007f32dd00412d:   icebp  
  0x00007f32dd00412e:   or     $0xc5,%al
  0x00007f32dd004130:   stc    
  0x00007f32dd004131:   jo     0x00007f32dd004128
  0x00007f32dd004133:   in     $0xc5,%al
  0x00007f32dd004135:   icebp  
  0x00007f32dd004136:   jae    0x00007f32dd004109
  0x00007f32dd004138:   or     $0xe9,%al
  0x00007f32dd00413a:   nop
  0x00007f32dd00413b:   (bad)  
  0x00007f32dd00413c:   (bad)  
  0x00007f32dd00413d:   inc    %ebp
  0x00007f32dd00413f:   stc    
  0x00007f32dd004140:   jle    0x00007f32dd00410c
  0x00007f32dd004142:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f32dd004147:   vmovd  %xmm1,%ecx
  0x00007f32dd00414b:   add    %ecx,%ecx
  0x00007f32dd00414d:   cmp    $0xffe00000,%ecx
  0x00007f32dd004153:   jae    0x00007f32dd0040cb
  0x00007f32dd004159:   or     %ecx,%edx
  0x00007f32dd00415b:   cmp    $0x0,%edx
  0x00007f32dd00415e:   je     0x00007f32dd004187
  0x00007f32dd004164:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd004168:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd00416c:   mov    $0x7ff0,%eax
  0x00007f32dd004171:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f32dd004176:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f32dd00417a:   movl   $0x3,0x10(%rsp)
  0x00007f32dd004182:   jmpq   0x00007f32dd0041a5
  0x00007f32dd004187:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd00418b:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd00418f:   mov    $0xbff0,%eax
  0x00007f32dd004194:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd004199:   vdivsd %xmm1,%xmm0,%xmm0
  0x00007f32dd00419d:   movl   $0x2,0x10(%rsp)
  0x00007f32dd0041a5:   vmovq  %xmm0,0x8(%rsp)
  0x00007f32dd0041ab:   vmovq  0x8(%rsp),%xmm0
  0x00007f32dd0041b1:   add    $0x18,%rsp
  0x00007f32dd0041b5:   leaveq 
  0x00007f32dd0041b6:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmLog10 [0x00007f32dd0041b7, 0x00007f32dd004463] (684 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0041b7:   push   %rbp
  0x00007f32dd0041b8:   mov    %rsp,%rbp
  0x00007f32dd0041bb:   sub    $0x18,%rsp
  0x00007f32dd0041bf:   vmovsd %xmm0,(%rsp)
  0x00007f32dd0041c4:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f32dd0041c8:   mov    $0x3ff0,%eax
  0x00007f32dd0041cd:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f32dd0041d2:   mov    $0x3ede0000,%ecx
  0x00007f32dd0041d7:   vmovd  %ecx,%xmm7
  0x00007f32dd0041db:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f32dd0041df:   mov    $0x77f0,%edx
  0x00007f32dd0041e4:   vpinsrw $0x3,%edx,%xmm3,%xmm3
  0x00007f32dd0041e9:   vmovdqu %xmm0,%xmm1
  0x00007f32dd0041ed:   mov    $0x8000,%edx
  0x00007f32dd0041f2:   vmovd  %edx,%xmm4
  0x00007f32dd0041f6:   vmovdqu 0x9e56cf2(%rip),%xmm5        # 0x00007f32e6e5aef0
  0x00007f32dd0041fe:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd004203:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f32dd004207:   mov    $0x3fe0,%ecx
  0x00007f32dd00420c:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f32dd004211:   vmovdqu 0x9e56cc7(%rip),%xmm2        # 0x00007f32e6e5aee0
  0x00007f32dd004219:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f32dd00421e:   vrcpps %xmm0,%xmm0
  0x00007f32dd004222:   (bad)  
  0x00007f32dd004226:   icebp  
  0x00007f32dd004227:   or     $0xc5,%al
  0x00007f32dd004229:   stc    
  0x00007f32dd00422a:   jo     0x00007f32dd004221
  0x00007f32dd00422c:   rex.WRX vpsrlq $0xc,%xmm1,%xmm1
  0x00007f32dd004232:   sub    $0x10,%eax
  0x00007f32dd004235:   cmp    $0x7fe0,%eax
  0x00007f32dd00423a:   jae    0x00007f32dd004337
  0x00007f32dd004240:   vmulss %xmm7,%xmm0,%xmm0
  0x00007f32dd004244:   vpor   %xmm3,%xmm1,%xmm1
  0x00007f32dd004248:   movabs $0x7f32e6e5a6d0,%r11
  0x00007f32dd004252:   vandpd %xmm1,%xmm5,%xmm5
  0x00007f32dd004256:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f32dd00425a:   vsubsd %xmm5,%xmm1,%xmm1
  0x00007f32dd00425e:   vmovd  %xmm0,%edx
  0x00007f32dd004262:   (bad)  
  0x00007f32dd004266:   lock sbb $0xc654f9c5,%eax
  0x00007f32dd00426c:   and    $0x7ff0,%eax
  0x00007f32dd004271:   sub    %ecx,%eax
  0x00007f32dd004273:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f32dd004277:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f32dd00427b:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f32dd00427f:   vmovq  0x9e56439(%rip),%xmm6        # 0x00007f32e6e5a6c0
  0x00007f32dd004287:   vmovdqu 0x9e56401(%rip),%xmm3        # 0x00007f32e6e5a690
  0x00007f32dd00428f:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007f32dd004293:   and    $0xff0000,%edx
  0x00007f32dd004299:   shr    $0xc,%edx
  0x00007f32dd00429c:   vmovdqu -0x5e0(%r11,%rdx,1),%xmm0
  0x00007f32dd0042a6:   vmovdqu 0x9e563f2(%rip),%xmm4        # 0x00007f32e6e5a6a0
  0x00007f32dd0042ae:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f32dd0042b2:   vmovdqu 0x9e563f6(%rip),%xmm2        # 0x00007f32e6e5a6b0
  0x00007f32dd0042ba:   vmulsd %xmm7,%xmm6,%xmm6
  0x00007f32dd0042be:   vpshufd $0x44,%xmm1,%xmm5
  0x00007f32dd0042c3:   vmulsd 0x9e563fd(%rip),%xmm7,%xmm7        # 0x00007f32e6e5a6c8
  0x00007f32dd0042cb:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f32dd0042cf:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f32dd0042d3:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007f32dd0042d7:   vmovq  0x9e56c09(%rip),%xmm6        # 0x00007f32e6e5aee8
  0x00007f32dd0042df:   vmulpd %xmm5,%xmm5,%xmm5
  0x00007f32dd0042e3:   vaddpd %xmm2,%xmm4,%xmm4
  0x00007f32dd0042e7:   vmulpd %xmm5,%xmm3,%xmm3
  0x00007f32dd0042eb:   vpshufd $0xe4,%xmm0,%xmm2
  0x00007f32dd0042f0:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f32dd0042f4:   vmulsd %xmm1,%xmm4,%xmm4
  0x00007f32dd0042f8:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007f32dd0042fc:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007f32dd004300:   vaddsd %xmm2,%xmm1,%xmm1
  0x00007f32dd004304:   vpshufd $0xee,%xmm0,%xmm2
  0x00007f32dd004309:   vmulsd %xmm5,%xmm5,%xmm5
  0x00007f32dd00430d:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007f32dd004311:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f32dd004315:   vaddpd %xmm3,%xmm4,%xmm4
  0x00007f32dd004319:   vaddsd %xmm7,%xmm1,%xmm1
  0x00007f32dd00431d:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007f32dd004321:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f32dd004325:   vpshufd $0xee,%xmm4,%xmm5
  0x00007f32dd00432a:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f32dd00432e:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f32dd004332:   jmpq   0x00007f32dd00445d
  0x00007f32dd004337:   vmovq  (%rsp),%xmm0
  0x00007f32dd00433c:   vmovq  (%rsp),%xmm1
  0x00007f32dd004341:   add    $0x10,%eax
  0x00007f32dd004344:   cmp    $0x8000,%eax
  0x00007f32dd004349:   jae    0x00007f32dd0043ea
  0x00007f32dd00434f:   cmp    $0x10,%eax
  0x00007f32dd004352:   jb     0x00007f32dd00436d
  0x00007f32dd004358:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f32dd00435c:   jmpq   0x00007f32dd00445d
  0x00007f32dd004361:   ja     0x00007f32dd004358
  0x00007f32dd004363:   cmp    $0x0,%edx
  0x00007f32dd004366:   ja     0x00007f32dd004358
  0x00007f32dd004368:   jmpq   0x00007f32dd004410
  0x00007f32dd00436d:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd004371:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007f32dd004375:   vmovd  %xmm1,%edx
  0x00007f32dd004379:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f32dd00437e:   vmovd  %xmm1,%ecx
  0x00007f32dd004382:   or     %ecx,%edx
  0x00007f32dd004384:   cmp    $0x0,%edx
  0x00007f32dd004387:   je     0x00007f32dd004433
  0x00007f32dd00438d:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd004391:   mov    $0x47f0,%eax
  0x00007f32dd004396:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f32dd00439b:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f32dd00439f:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f32dd0043a3:   mov    $0x3ff0,%eax
  0x00007f32dd0043a8:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f32dd0043ad:   vmovdqu %xmm0,%xmm1
  0x00007f32dd0043b1:   vpextrw $0x3,%xmm0,%eax
  0x00007f32dd0043b6:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f32dd0043ba:   mov    $0x47f0,%ecx
  0x00007f32dd0043bf:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f32dd0043c4:   vmovdqu 0x9e56b14(%rip),%xmm2        # 0x00007f32e6e5aee0
  0x00007f32dd0043cc:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f32dd0043d1:   vrcpps %xmm0,%xmm0
  0x00007f32dd0043d5:   (bad)  
  0x00007f32dd0043d9:   icebp  
  0x00007f32dd0043da:   or     $0xc5,%al
  0x00007f32dd0043dc:   stc    
  0x00007f32dd0043dd:   jo     0x00007f32dd0043d4
  0x00007f32dd0043df:   rex.WRX vpsrlq $0xc,%xmm1,%xmm1
  0x00007f32dd0043e5:   jmpq   0x00007f32dd004240
  0x00007f32dd0043ea:   vmovd  %xmm1,%edx
  0x00007f32dd0043ee:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f32dd0043f3:   vmovd  %xmm1,%ecx
  0x00007f32dd0043f7:   add    %ecx,%ecx
  0x00007f32dd0043f9:   cmp    $0xffe00000,%ecx
  0x00007f32dd0043ff:   jae    0x00007f32dd004361
  0x00007f32dd004405:   or     %ecx,%edx
  0x00007f32dd004407:   cmp    $0x0,%edx
  0x00007f32dd00440a:   je     0x00007f32dd004433
  0x00007f32dd004410:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd004414:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd004418:   mov    $0x7ff0,%eax
  0x00007f32dd00441d:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f32dd004422:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f32dd004426:   movl   $0x9,0x10(%rsp)
  0x00007f32dd00442e:   jmpq   0x00007f32dd004451
  0x00007f32dd004433:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f32dd004437:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f32dd00443b:   mov    $0xbff0,%eax
  0x00007f32dd004440:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f32dd004445:   vdivsd %xmm1,%xmm0,%xmm0
  0x00007f32dd004449:   movl   $0x8,0x10(%rsp)
  0x00007f32dd004451:   vmovq  %xmm0,0x8(%rsp)
  0x00007f32dd004457:   vmovq  0x8(%rsp),%xmm0
  0x00007f32dd00445d:   add    $0x18,%rsp
  0x00007f32dd004461:   leaveq 
  0x00007f32dd004462:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::getCPUIDNameInfo_stub [0x00007f32dd008300, 0x00007f32dd0083df] (223 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd008300:   push   %rbp
  0x00007f32dd008301:   mov    %rdi,%rbp
  0x00007f32dd008304:   push   %rbx
  0x00007f32dd008305:   push   %rsi
  0x00007f32dd008306:   pushfq 
  0x00007f32dd008307:   pop    %rax
  0x00007f32dd008308:   push   %rax
  0x00007f32dd008309:   mov    %rax,%rcx
  0x00007f32dd00830c:   xor    $0x40000,%eax
  0x00007f32dd008311:   push   %rax
  0x00007f32dd008312:   popfq  
  0x00007f32dd008313:   pushfq 
  0x00007f32dd008314:   pop    %rax
  0x00007f32dd008315:   cmp    %rcx,%rax
  0x00007f32dd008318:   jne    0x00007f32dd008324
  0x00007f32dd00831a:   mov    $0x300,%eax
  0x00007f32dd00831f:   jmpq   0x00007f32dd0083da
  0x00007f32dd008324:   mov    %rcx,%rax
  0x00007f32dd008327:   xor    $0x200000,%eax
  0x00007f32dd00832c:   push   %rax
  0x00007f32dd00832d:   popfq  
  0x00007f32dd00832e:   pushfq 
  0x00007f32dd00832f:   pop    %rax
  0x00007f32dd008330:   cmp    %rax,%rcx
  0x00007f32dd008333:   jne    0x00007f32dd00833f
  0x00007f32dd008335:   mov    $0x400,%eax
  0x00007f32dd00833a:   jmpq   0x00007f32dd0083da
  0x00007f32dd00833f:   xor    %eax,%eax
  0x00007f32dd008341:   cpuid  
  0x00007f32dd008343:   or     %eax,%eax
  0x00007f32dd008345:   je     0x00007f32dd008335
  0x00007f32dd008347:   mov    $0x80000000,%eax
  0x00007f32dd00834c:   cpuid  
  0x00007f32dd00834e:   cmp    $0x80000004,%eax
  0x00007f32dd008353:   jb     0x00007f32dd0083da
  0x00007f32dd008359:   mov    $0x80000002,%eax
  0x00007f32dd00835e:   cpuid  
  0x00007f32dd008360:   lea    0x90(%rbp),%rsi
  0x00007f32dd008367:   mov    %eax,(%rsi)
  0x00007f32dd008369:   lea    0x94(%rbp),%rsi
  0x00007f32dd008370:   mov    %ebx,(%rsi)
  0x00007f32dd008372:   lea    0x98(%rbp),%rsi
  0x00007f32dd008379:   mov    %ecx,(%rsi)
  0x00007f32dd00837b:   lea    0x9c(%rbp),%rsi
  0x00007f32dd008382:   mov    %edx,(%rsi)
  0x00007f32dd008384:   mov    $0x80000003,%eax
  0x00007f32dd008389:   cpuid  
  0x00007f32dd00838b:   lea    0xa0(%rbp),%rsi
  0x00007f32dd008392:   mov    %eax,(%rsi)
  0x00007f32dd008394:   lea    0xa4(%rbp),%rsi
  0x00007f32dd00839b:   mov    %ebx,(%rsi)
  0x00007f32dd00839d:   lea    0xa8(%rbp),%rsi
  0x00007f32dd0083a4:   mov    %ecx,(%rsi)
  0x00007f32dd0083a6:   lea    0xac(%rbp),%rsi
  0x00007f32dd0083ad:   mov    %edx,(%rsi)
  0x00007f32dd0083af:   mov    $0x80000004,%eax
  0x00007f32dd0083b4:   cpuid  
  0x00007f32dd0083b6:   lea    0xb0(%rbp),%rsi
  0x00007f32dd0083bd:   mov    %eax,(%rsi)
  0x00007f32dd0083bf:   lea    0xb4(%rbp),%rsi
  0x00007f32dd0083c6:   mov    %ebx,(%rsi)
  0x00007f32dd0083c8:   lea    0xb8(%rbp),%rsi
  0x00007f32dd0083cf:   mov    %ecx,(%rsi)
  0x00007f32dd0083d1:   lea    0xbc(%rbp),%rsi
  0x00007f32dd0083d8:   mov    %edx,(%rsi)
  0x00007f32dd0083da:   popfq  
  0x00007f32dd0083db:   pop    %rsi
  0x00007f32dd0083dc:   pop    %rbx
  0x00007f32dd0083dd:   pop    %rbp
  0x00007f32dd0083de:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - jfr_write_checkpoint 0x00007f32dd01cc10
--------------------------------------------------------------------------------
  0x00007f32dd01cc80:   push   %rbp
  0x00007f32dd01cc81:   mov    %rsp,%rbp
  0x00007f32dd01cc84:   vzeroupper 
  0x00007f32dd01cc87:   mov    %rbp,0x2d0(%r15)
  0x00007f32dd01cc8e:   movabs $0x7f32dd01cc84,%r10
  0x00007f32dd01cc98:   mov    %r10,0x2c8(%r15)
  0x00007f32dd01cc9f:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd01cca6:   mov    %r15,%rdi
  0x00007f32dd01cca9:   test   $0xf,%spl
  0x00007f32dd01ccad:   je     0x00007f32dd01ccc5
  0x00007f32dd01ccb3:   sub    $0x8,%rsp
  0x00007f32dd01ccb7:   callq  0x00007f32e6385420 = JfrIntrinsicSupport::write_checkpoint(JavaThread*)
  0x00007f32dd01ccbc:   add    $0x8,%rsp
  0x00007f32dd01ccc0:   jmpq   0x00007f32dd01ccca
  0x00007f32dd01ccc5:   callq  0x00007f32e6385420 = JfrIntrinsicSupport::write_checkpoint(JavaThread*)
  0x00007f32dd01ccca:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd01ccd5:   movq   $0x0,0x2d0(%r15)
  0x00007f32dd01cce0:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd01cceb:   vzeroupper 
  0x00007f32dd01ccee:   test   %rax,%rax
  0x00007f32dd01ccf1:   je     0x00007f32dd01ccfb
  0x00007f32dd01ccf7:   mov    -0x2(%rax),%rax
  0x00007f32dd01ccfb:   leaveq 
  0x00007f32dd01ccfc:   retq   
  0x00007f32dd01ccfd:   hlt    
  0x00007f32dd01ccfe:   hlt    
  0x00007f32dd01ccff:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 4 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - wrong_method_stub 0x00007f32dd01c690
--------------------------------------------------------------------------------
  0x00007f32dd01c700:   push   %rbp
  0x00007f32dd01c701:   mov    %rsp,%rbp
  0x00007f32dd01c704:   pushfq 
  0x00007f32dd01c705:   sub    $0x8,%rsp
  0x00007f32dd01c709:   sub    $0x80,%rsp
  0x00007f32dd01c710:   mov    %rax,0x78(%rsp)
  0x00007f32dd01c715:   mov    %rcx,0x70(%rsp)
  0x00007f32dd01c71a:   mov    %rdx,0x68(%rsp)
  0x00007f32dd01c71f:   mov    %rbx,0x60(%rsp)
  0x00007f32dd01c724:   mov    %rbp,0x50(%rsp)
  0x00007f32dd01c729:   mov    %rsi,0x48(%rsp)
  0x00007f32dd01c72e:   mov    %rdi,0x40(%rsp)
  0x00007f32dd01c733:   mov    %r8,0x38(%rsp)
  0x00007f32dd01c738:   mov    %r9,0x30(%rsp)
  0x00007f32dd01c73d:   mov    %r10,0x28(%rsp)
  0x00007f32dd01c742:   mov    %r11,0x20(%rsp)
  0x00007f32dd01c747:   mov    %r12,0x18(%rsp)
  0x00007f32dd01c74c:   mov    %r13,0x10(%rsp)
  0x00007f32dd01c751:   mov    %r14,0x8(%rsp)
  0x00007f32dd01c756:   mov    %r15,(%rsp)
  0x00007f32dd01c75a:   sub    $0xa80,%rsp
  0x00007f32dd01c761:   fxsave64 (%rsp)
  0x00007f32dd01c766:   vzeroupper 
  0x00007f32dd01c769:   vzeroupper 
  0x00007f32dd01c76c:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd01c773:   mov    %r15,%rdi
  0x00007f32dd01c776:   callq  0x00007f32e67e3b00 = SharedRuntime::handle_wrong_method(JavaThread*)
  0x00007f32dd01c77b:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd01c786:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd01c791:   vzeroupper 
  0x00007f32dd01c794:   cmpq   $0x0,0x8(%r15)
  0x00007f32dd01c799:   jne    0x00007f32dd01c829
  0x00007f32dd01c79f:   mov    0x320(%r15),%rbx
  0x00007f32dd01c7a6:   movq   $0x0,0x320(%r15)
  0x00007f32dd01c7b1:   mov    %rbx,0xae0(%rsp)
  0x00007f32dd01c7b9:   mov    %rax,0xaf8(%rsp)
  0x00007f32dd01c7c1:   vzeroupper 
  0x00007f32dd01c7c4:   fxrstor64 (%rsp)
  0x00007f32dd01c7c9:   add    $0xa80,%rsp
  0x00007f32dd01c7d0:   mov    (%rsp),%r15
  0x00007f32dd01c7d4:   mov    0x8(%rsp),%r14
  0x00007f32dd01c7d9:   mov    0x10(%rsp),%r13
  0x00007f32dd01c7de:   mov    0x18(%rsp),%r12
  0x00007f32dd01c7e3:   mov    0x20(%rsp),%r11
  0x00007f32dd01c7e8:   mov    0x28(%rsp),%r10
  0x00007f32dd01c7ed:   mov    0x30(%rsp),%r9
  0x00007f32dd01c7f2:   mov    0x38(%rsp),%r8
  0x00007f32dd01c7f7:   mov    0x40(%rsp),%rdi
  0x00007f32dd01c7fc:   mov    0x48(%rsp),%rsi
  0x00007f32dd01c801:   mov    0x50(%rsp),%rbp
  0x00007f32dd01c806:   mov    0x60(%rsp),%rbx
  0x00007f32dd01c80b:   mov    0x68(%rsp),%rdx
  0x00007f32dd01c810:   mov    0x70(%rsp),%rcx
  0x00007f32dd01c815:   mov    0x78(%rsp),%rax
  0x00007f32dd01c81a:   add    $0x80,%rsp
  0x00007f32dd01c821:   add    $0x8,%rsp
  0x00007f32dd01c825:   popfq  
  0x00007f32dd01c826:   pop    %rbp
  0x00007f32dd01c827:   jmpq   *%rax
  0x00007f32dd01c829:   vzeroupper 
  0x00007f32dd01c82c:   fxrstor64 (%rsp)
  0x00007f32dd01c831:   add    $0xa80,%rsp
  0x00007f32dd01c838:   mov    (%rsp),%r15
  0x00007f32dd01c83c:   mov    0x8(%rsp),%r14
  0x00007f32dd01c841:   mov    0x10(%rsp),%r13
  0x00007f32dd01c846:   mov    0x18(%rsp),%r12
  0x00007f32dd01c84b:   mov    0x20(%rsp),%r11
  0x00007f32dd01c850:   mov    0x28(%rsp),%r10
  0x00007f32dd01c855:   mov    0x30(%rsp),%r9
  0x00007f32dd01c85a:   mov    0x38(%rsp),%r8
  0x00007f32dd01c85f:   mov    0x40(%rsp),%rdi
  0x00007f32dd01c864:   mov    0x48(%rsp),%rsi
  0x00007f32dd01c869:   mov    0x50(%rsp),%rbp
  0x00007f32dd01c86e:   mov    0x60(%rsp),%rbx
  0x00007f32dd01c873:   mov    0x68(%rsp),%rdx
  0x00007f32dd01c878:   mov    0x70(%rsp),%rcx
  0x00007f32dd01c87d:   mov    0x78(%rsp),%rax
  0x00007f32dd01c882:   add    $0x80,%rsp
  0x00007f32dd01c889:   add    $0x8,%rsp
  0x00007f32dd01c88d:   popfq  
  0x00007f32dd01c88e:   pop    %rbp
  0x00007f32dd01c88f:   movq   $0x0,0x318(%r15)
  0x00007f32dd01c89a:   mov    0x8(%r15),%rax
  0x00007f32dd01c89e:   jmpq   0x00007f32dd000c00
  0x00007f32dd01c8a3:   hlt    
  0x00007f32dd01c8a4:   hlt    
  0x00007f32dd01c8a5:   hlt    
  0x00007f32dd01c8a6:   hlt    
  0x00007f32dd01c8a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - wrong_method_abstract_stub 0x00007f32dd063190
--------------------------------------------------------------------------------
  0x00007f32dd063200:   push   %rbp
  0x00007f32dd063201:   mov    %rsp,%rbp
  0x00007f32dd063204:   pushfq 
  0x00007f32dd063205:   sub    $0x8,%rsp
  0x00007f32dd063209:   sub    $0x80,%rsp
  0x00007f32dd063210:   mov    %rax,0x78(%rsp)
  0x00007f32dd063215:   mov    %rcx,0x70(%rsp)
  0x00007f32dd06321a:   mov    %rdx,0x68(%rsp)
  0x00007f32dd06321f:   mov    %rbx,0x60(%rsp)
  0x00007f32dd063224:   mov    %rbp,0x50(%rsp)
  0x00007f32dd063229:   mov    %rsi,0x48(%rsp)
  0x00007f32dd06322e:   mov    %rdi,0x40(%rsp)
  0x00007f32dd063233:   mov    %r8,0x38(%rsp)
  0x00007f32dd063238:   mov    %r9,0x30(%rsp)
  0x00007f32dd06323d:   mov    %r10,0x28(%rsp)
  0x00007f32dd063242:   mov    %r11,0x20(%rsp)
  0x00007f32dd063247:   mov    %r12,0x18(%rsp)
  0x00007f32dd06324c:   mov    %r13,0x10(%rsp)
  0x00007f32dd063251:   mov    %r14,0x8(%rsp)
  0x00007f32dd063256:   mov    %r15,(%rsp)
  0x00007f32dd06325a:   sub    $0xa80,%rsp
  0x00007f32dd063261:   fxsave64 (%rsp)
  0x00007f32dd063266:   vzeroupper 
  0x00007f32dd063269:   vzeroupper 
  0x00007f32dd06326c:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd063273:   mov    %r15,%rdi
  0x00007f32dd063276:   callq  0x00007f32e67e26e0 = SharedRuntime::handle_wrong_method_abstract(JavaThread*)
  0x00007f32dd06327b:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd063286:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd063291:   vzeroupper 
  0x00007f32dd063294:   cmpq   $0x0,0x8(%r15)
  0x00007f32dd063299:   jne    0x00007f32dd063329
  0x00007f32dd06329f:   mov    0x320(%r15),%rbx
  0x00007f32dd0632a6:   movq   $0x0,0x320(%r15)
  0x00007f32dd0632b1:   mov    %rbx,0xae0(%rsp)
  0x00007f32dd0632b9:   mov    %rax,0xaf8(%rsp)
  0x00007f32dd0632c1:   vzeroupper 
  0x00007f32dd0632c4:   fxrstor64 (%rsp)
  0x00007f32dd0632c9:   add    $0xa80,%rsp
  0x00007f32dd0632d0:   mov    (%rsp),%r15
  0x00007f32dd0632d4:   mov    0x8(%rsp),%r14
  0x00007f32dd0632d9:   mov    0x10(%rsp),%r13
  0x00007f32dd0632de:   mov    0x18(%rsp),%r12
  0x00007f32dd0632e3:   mov    0x20(%rsp),%r11
  0x00007f32dd0632e8:   mov    0x28(%rsp),%r10
  0x00007f32dd0632ed:   mov    0x30(%rsp),%r9
  0x00007f32dd0632f2:   mov    0x38(%rsp),%r8
  0x00007f32dd0632f7:   mov    0x40(%rsp),%rdi
  0x00007f32dd0632fc:   mov    0x48(%rsp),%rsi
  0x00007f32dd063301:   mov    0x50(%rsp),%rbp
  0x00007f32dd063306:   mov    0x60(%rsp),%rbx
  0x00007f32dd06330b:   mov    0x68(%rsp),%rdx
  0x00007f32dd063310:   mov    0x70(%rsp),%rcx
  0x00007f32dd063315:   mov    0x78(%rsp),%rax
  0x00007f32dd06331a:   add    $0x80,%rsp
  0x00007f32dd063321:   add    $0x8,%rsp
  0x00007f32dd063325:   popfq  
  0x00007f32dd063326:   pop    %rbp
  0x00007f32dd063327:   jmpq   *%rax
  0x00007f32dd063329:   vzeroupper 
  0x00007f32dd06332c:   fxrstor64 (%rsp)
  0x00007f32dd063331:   add    $0xa80,%rsp
  0x00007f32dd063338:   mov    (%rsp),%r15
  0x00007f32dd06333c:   mov    0x8(%rsp),%r14
  0x00007f32dd063341:   mov    0x10(%rsp),%r13
  0x00007f32dd063346:   mov    0x18(%rsp),%r12
  0x00007f32dd06334b:   mov    0x20(%rsp),%r11
  0x00007f32dd063350:   mov    0x28(%rsp),%r10
  0x00007f32dd063355:   mov    0x30(%rsp),%r9
  0x00007f32dd06335a:   mov    0x38(%rsp),%r8
  0x00007f32dd06335f:   mov    0x40(%rsp),%rdi
  0x00007f32dd063364:   mov    0x48(%rsp),%rsi
  0x00007f32dd063369:   mov    0x50(%rsp),%rbp
  0x00007f32dd06336e:   mov    0x60(%rsp),%rbx
  0x00007f32dd063373:   mov    0x68(%rsp),%rdx
  0x00007f32dd063378:   mov    0x70(%rsp),%rcx
  0x00007f32dd06337d:   mov    0x78(%rsp),%rax
  0x00007f32dd063382:   add    $0x80,%rsp
  0x00007f32dd063389:   add    $0x8,%rsp
  0x00007f32dd06338d:   popfq  
  0x00007f32dd06338e:   pop    %rbp
  0x00007f32dd06338f:   movq   $0x0,0x318(%r15)
  0x00007f32dd06339a:   mov    0x8(%r15),%rax
  0x00007f32dd06339e:   jmpq   0x00007f32dd000c00
  0x00007f32dd0633a3:   hlt    
  0x00007f32dd0633a4:   hlt    
  0x00007f32dd0633a5:   hlt    
  0x00007f32dd0633a6:   hlt    
  0x00007f32dd0633a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - ic_miss_stub 0x00007f32dd063490
--------------------------------------------------------------------------------
  0x00007f32dd063500:   push   %rbp
  0x00007f32dd063501:   mov    %rsp,%rbp
  0x00007f32dd063504:   pushfq 
  0x00007f32dd063505:   sub    $0x8,%rsp
  0x00007f32dd063509:   sub    $0x80,%rsp
  0x00007f32dd063510:   mov    %rax,0x78(%rsp)
  0x00007f32dd063515:   mov    %rcx,0x70(%rsp)
  0x00007f32dd06351a:   mov    %rdx,0x68(%rsp)
  0x00007f32dd06351f:   mov    %rbx,0x60(%rsp)
  0x00007f32dd063524:   mov    %rbp,0x50(%rsp)
  0x00007f32dd063529:   mov    %rsi,0x48(%rsp)
  0x00007f32dd06352e:   mov    %rdi,0x40(%rsp)
  0x00007f32dd063533:   mov    %r8,0x38(%rsp)
  0x00007f32dd063538:   mov    %r9,0x30(%rsp)
  0x00007f32dd06353d:   mov    %r10,0x28(%rsp)
  0x00007f32dd063542:   mov    %r11,0x20(%rsp)
  0x00007f32dd063547:   mov    %r12,0x18(%rsp)
  0x00007f32dd06354c:   mov    %r13,0x10(%rsp)
  0x00007f32dd063551:   mov    %r14,0x8(%rsp)
  0x00007f32dd063556:   mov    %r15,(%rsp)
  0x00007f32dd06355a:   sub    $0xa80,%rsp
  0x00007f32dd063561:   fxsave64 (%rsp)
  0x00007f32dd063566:   vzeroupper 
  0x00007f32dd063569:   vzeroupper 
  0x00007f32dd06356c:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd063573:   mov    %r15,%rdi
  0x00007f32dd063576:   callq  0x00007f32e67e59a0 = SharedRuntime::handle_wrong_method_ic_miss(JavaThread*)
  0x00007f32dd06357b:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd063586:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd063591:   vzeroupper 
  0x00007f32dd063594:   cmpq   $0x0,0x8(%r15)
  0x00007f32dd063599:   jne    0x00007f32dd063629
  0x00007f32dd06359f:   mov    0x320(%r15),%rbx
  0x00007f32dd0635a6:   movq   $0x0,0x320(%r15)
  0x00007f32dd0635b1:   mov    %rbx,0xae0(%rsp)
  0x00007f32dd0635b9:   mov    %rax,0xaf8(%rsp)
  0x00007f32dd0635c1:   vzeroupper 
  0x00007f32dd0635c4:   fxrstor64 (%rsp)
  0x00007f32dd0635c9:   add    $0xa80,%rsp
  0x00007f32dd0635d0:   mov    (%rsp),%r15
  0x00007f32dd0635d4:   mov    0x8(%rsp),%r14
  0x00007f32dd0635d9:   mov    0x10(%rsp),%r13
  0x00007f32dd0635de:   mov    0x18(%rsp),%r12
  0x00007f32dd0635e3:   mov    0x20(%rsp),%r11
  0x00007f32dd0635e8:   mov    0x28(%rsp),%r10
  0x00007f32dd0635ed:   mov    0x30(%rsp),%r9
  0x00007f32dd0635f2:   mov    0x38(%rsp),%r8
  0x00007f32dd0635f7:   mov    0x40(%rsp),%rdi
  0x00007f32dd0635fc:   mov    0x48(%rsp),%rsi
  0x00007f32dd063601:   mov    0x50(%rsp),%rbp
  0x00007f32dd063606:   mov    0x60(%rsp),%rbx
  0x00007f32dd06360b:   mov    0x68(%rsp),%rdx
  0x00007f32dd063610:   mov    0x70(%rsp),%rcx
  0x00007f32dd063615:   mov    0x78(%rsp),%rax
  0x00007f32dd06361a:   add    $0x80,%rsp
  0x00007f32dd063621:   add    $0x8,%rsp
  0x00007f32dd063625:   popfq  
  0x00007f32dd063626:   pop    %rbp
  0x00007f32dd063627:   jmpq   *%rax
  0x00007f32dd063629:   vzeroupper 
  0x00007f32dd06362c:   fxrstor64 (%rsp)
  0x00007f32dd063631:   add    $0xa80,%rsp
  0x00007f32dd063638:   mov    (%rsp),%r15
  0x00007f32dd06363c:   mov    0x8(%rsp),%r14
  0x00007f32dd063641:   mov    0x10(%rsp),%r13
  0x00007f32dd063646:   mov    0x18(%rsp),%r12
  0x00007f32dd06364b:   mov    0x20(%rsp),%r11
  0x00007f32dd063650:   mov    0x28(%rsp),%r10
  0x00007f32dd063655:   mov    0x30(%rsp),%r9
  0x00007f32dd06365a:   mov    0x38(%rsp),%r8
  0x00007f32dd06365f:   mov    0x40(%rsp),%rdi
  0x00007f32dd063664:   mov    0x48(%rsp),%rsi
  0x00007f32dd063669:   mov    0x50(%rsp),%rbp
  0x00007f32dd06366e:   mov    0x60(%rsp),%rbx
  0x00007f32dd063673:   mov    0x68(%rsp),%rdx
  0x00007f32dd063678:   mov    0x70(%rsp),%rcx
  0x00007f32dd06367d:   mov    0x78(%rsp),%rax
  0x00007f32dd063682:   add    $0x80,%rsp
  0x00007f32dd063689:   add    $0x8,%rsp
  0x00007f32dd06368d:   popfq  
  0x00007f32dd06368e:   pop    %rbp
  0x00007f32dd06368f:   movq   $0x0,0x318(%r15)
  0x00007f32dd06369a:   mov    0x8(%r15),%rax
  0x00007f32dd06369e:   jmpq   0x00007f32dd000c00
  0x00007f32dd0636a3:   hlt    
  0x00007f32dd0636a4:   hlt    
  0x00007f32dd0636a5:   hlt    
  0x00007f32dd0636a6:   hlt    
  0x00007f32dd0636a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_opt_virtual_call 0x00007f32dd063790
--------------------------------------------------------------------------------
  0x00007f32dd063800:   push   %rbp
  0x00007f32dd063801:   mov    %rsp,%rbp
  0x00007f32dd063804:   pushfq 
  0x00007f32dd063805:   sub    $0x8,%rsp
  0x00007f32dd063809:   sub    $0x80,%rsp
  0x00007f32dd063810:   mov    %rax,0x78(%rsp)
  0x00007f32dd063815:   mov    %rcx,0x70(%rsp)
  0x00007f32dd06381a:   mov    %rdx,0x68(%rsp)
  0x00007f32dd06381f:   mov    %rbx,0x60(%rsp)
  0x00007f32dd063824:   mov    %rbp,0x50(%rsp)
  0x00007f32dd063829:   mov    %rsi,0x48(%rsp)
  0x00007f32dd06382e:   mov    %rdi,0x40(%rsp)
  0x00007f32dd063833:   mov    %r8,0x38(%rsp)
  0x00007f32dd063838:   mov    %r9,0x30(%rsp)
  0x00007f32dd06383d:   mov    %r10,0x28(%rsp)
  0x00007f32dd063842:   mov    %r11,0x20(%rsp)
  0x00007f32dd063847:   mov    %r12,0x18(%rsp)
  0x00007f32dd06384c:   mov    %r13,0x10(%rsp)
  0x00007f32dd063851:   mov    %r14,0x8(%rsp)
  0x00007f32dd063856:   mov    %r15,(%rsp)
  0x00007f32dd06385a:   sub    $0xa80,%rsp
  0x00007f32dd063861:   fxsave64 (%rsp)
  0x00007f32dd063866:   vzeroupper 
  0x00007f32dd063869:   vzeroupper 
  0x00007f32dd06386c:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd063873:   mov    %r15,%rdi
  0x00007f32dd063876:   callq  0x00007f32e67e4730 = SharedRuntime::resolve_opt_virtual_call_C(JavaThread*)
  0x00007f32dd06387b:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd063886:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd063891:   vzeroupper 
  0x00007f32dd063894:   cmpq   $0x0,0x8(%r15)
  0x00007f32dd063899:   jne    0x00007f32dd063929
  0x00007f32dd06389f:   mov    0x320(%r15),%rbx
  0x00007f32dd0638a6:   movq   $0x0,0x320(%r15)
  0x00007f32dd0638b1:   mov    %rbx,0xae0(%rsp)
  0x00007f32dd0638b9:   mov    %rax,0xaf8(%rsp)
  0x00007f32dd0638c1:   vzeroupper 
  0x00007f32dd0638c4:   fxrstor64 (%rsp)
  0x00007f32dd0638c9:   add    $0xa80,%rsp
  0x00007f32dd0638d0:   mov    (%rsp),%r15
  0x00007f32dd0638d4:   mov    0x8(%rsp),%r14
  0x00007f32dd0638d9:   mov    0x10(%rsp),%r13
  0x00007f32dd0638de:   mov    0x18(%rsp),%r12
  0x00007f32dd0638e3:   mov    0x20(%rsp),%r11
  0x00007f32dd0638e8:   mov    0x28(%rsp),%r10
  0x00007f32dd0638ed:   mov    0x30(%rsp),%r9
  0x00007f32dd0638f2:   mov    0x38(%rsp),%r8
  0x00007f32dd0638f7:   mov    0x40(%rsp),%rdi
  0x00007f32dd0638fc:   mov    0x48(%rsp),%rsi
  0x00007f32dd063901:   mov    0x50(%rsp),%rbp
  0x00007f32dd063906:   mov    0x60(%rsp),%rbx
  0x00007f32dd06390b:   mov    0x68(%rsp),%rdx
  0x00007f32dd063910:   mov    0x70(%rsp),%rcx
  0x00007f32dd063915:   mov    0x78(%rsp),%rax
  0x00007f32dd06391a:   add    $0x80,%rsp
  0x00007f32dd063921:   add    $0x8,%rsp
  0x00007f32dd063925:   popfq  
  0x00007f32dd063926:   pop    %rbp
  0x00007f32dd063927:   jmpq   *%rax
  0x00007f32dd063929:   vzeroupper 
  0x00007f32dd06392c:   fxrstor64 (%rsp)
  0x00007f32dd063931:   add    $0xa80,%rsp
  0x00007f32dd063938:   mov    (%rsp),%r15
  0x00007f32dd06393c:   mov    0x8(%rsp),%r14
  0x00007f32dd063941:   mov    0x10(%rsp),%r13
  0x00007f32dd063946:   mov    0x18(%rsp),%r12
  0x00007f32dd06394b:   mov    0x20(%rsp),%r11
  0x00007f32dd063950:   mov    0x28(%rsp),%r10
  0x00007f32dd063955:   mov    0x30(%rsp),%r9
  0x00007f32dd06395a:   mov    0x38(%rsp),%r8
  0x00007f32dd06395f:   mov    0x40(%rsp),%rdi
  0x00007f32dd063964:   mov    0x48(%rsp),%rsi
  0x00007f32dd063969:   mov    0x50(%rsp),%rbp
  0x00007f32dd06396e:   mov    0x60(%rsp),%rbx
  0x00007f32dd063973:   mov    0x68(%rsp),%rdx
  0x00007f32dd063978:   mov    0x70(%rsp),%rcx
  0x00007f32dd06397d:   mov    0x78(%rsp),%rax
  0x00007f32dd063982:   add    $0x80,%rsp
  0x00007f32dd063989:   add    $0x8,%rsp
  0x00007f32dd06398d:   popfq  
  0x00007f32dd06398e:   pop    %rbp
  0x00007f32dd06398f:   movq   $0x0,0x318(%r15)
  0x00007f32dd06399a:   mov    0x8(%r15),%rax
  0x00007f32dd06399e:   jmpq   0x00007f32dd000c00
  0x00007f32dd0639a3:   hlt    
  0x00007f32dd0639a4:   hlt    
  0x00007f32dd0639a5:   hlt    
  0x00007f32dd0639a6:   hlt    
  0x00007f32dd0639a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_virtual_call 0x00007f32dd063a90
--------------------------------------------------------------------------------
  0x00007f32dd063b00:   push   %rbp
  0x00007f32dd063b01:   mov    %rsp,%rbp
  0x00007f32dd063b04:   pushfq 
  0x00007f32dd063b05:   sub    $0x8,%rsp
  0x00007f32dd063b09:   sub    $0x80,%rsp
  0x00007f32dd063b10:   mov    %rax,0x78(%rsp)
  0x00007f32dd063b15:   mov    %rcx,0x70(%rsp)
  0x00007f32dd063b1a:   mov    %rdx,0x68(%rsp)
  0x00007f32dd063b1f:   mov    %rbx,0x60(%rsp)
  0x00007f32dd063b24:   mov    %rbp,0x50(%rsp)
  0x00007f32dd063b29:   mov    %rsi,0x48(%rsp)
  0x00007f32dd063b2e:   mov    %rdi,0x40(%rsp)
  0x00007f32dd063b33:   mov    %r8,0x38(%rsp)
  0x00007f32dd063b38:   mov    %r9,0x30(%rsp)
  0x00007f32dd063b3d:   mov    %r10,0x28(%rsp)
  0x00007f32dd063b42:   mov    %r11,0x20(%rsp)
  0x00007f32dd063b47:   mov    %r12,0x18(%rsp)
  0x00007f32dd063b4c:   mov    %r13,0x10(%rsp)
  0x00007f32dd063b51:   mov    %r14,0x8(%rsp)
  0x00007f32dd063b56:   mov    %r15,(%rsp)
  0x00007f32dd063b5a:   sub    $0xa80,%rsp
  0x00007f32dd063b61:   fxsave64 (%rsp)
  0x00007f32dd063b66:   vzeroupper 
  0x00007f32dd063b69:   vzeroupper 
  0x00007f32dd063b6c:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd063b73:   mov    %r15,%rdi
  0x00007f32dd063b76:   callq  0x00007f32e67e4570 = SharedRuntime::resolve_virtual_call_C(JavaThread*)
  0x00007f32dd063b7b:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd063b86:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd063b91:   vzeroupper 
  0x00007f32dd063b94:   cmpq   $0x0,0x8(%r15)
  0x00007f32dd063b99:   jne    0x00007f32dd063c29
  0x00007f32dd063b9f:   mov    0x320(%r15),%rbx
  0x00007f32dd063ba6:   movq   $0x0,0x320(%r15)
  0x00007f32dd063bb1:   mov    %rbx,0xae0(%rsp)
  0x00007f32dd063bb9:   mov    %rax,0xaf8(%rsp)
  0x00007f32dd063bc1:   vzeroupper 
  0x00007f32dd063bc4:   fxrstor64 (%rsp)
  0x00007f32dd063bc9:   add    $0xa80,%rsp
  0x00007f32dd063bd0:   mov    (%rsp),%r15
  0x00007f32dd063bd4:   mov    0x8(%rsp),%r14
  0x00007f32dd063bd9:   mov    0x10(%rsp),%r13
  0x00007f32dd063bde:   mov    0x18(%rsp),%r12
  0x00007f32dd063be3:   mov    0x20(%rsp),%r11
  0x00007f32dd063be8:   mov    0x28(%rsp),%r10
  0x00007f32dd063bed:   mov    0x30(%rsp),%r9
  0x00007f32dd063bf2:   mov    0x38(%rsp),%r8
  0x00007f32dd063bf7:   mov    0x40(%rsp),%rdi
  0x00007f32dd063bfc:   mov    0x48(%rsp),%rsi
  0x00007f32dd063c01:   mov    0x50(%rsp),%rbp
  0x00007f32dd063c06:   mov    0x60(%rsp),%rbx
  0x00007f32dd063c0b:   mov    0x68(%rsp),%rdx
  0x00007f32dd063c10:   mov    0x70(%rsp),%rcx
  0x00007f32dd063c15:   mov    0x78(%rsp),%rax
  0x00007f32dd063c1a:   add    $0x80,%rsp
  0x00007f32dd063c21:   add    $0x8,%rsp
  0x00007f32dd063c25:   popfq  
  0x00007f32dd063c26:   pop    %rbp
  0x00007f32dd063c27:   jmpq   *%rax
  0x00007f32dd063c29:   vzeroupper 
  0x00007f32dd063c2c:   fxrstor64 (%rsp)
  0x00007f32dd063c31:   add    $0xa80,%rsp
  0x00007f32dd063c38:   mov    (%rsp),%r15
  0x00007f32dd063c3c:   mov    0x8(%rsp),%r14
  0x00007f32dd063c41:   mov    0x10(%rsp),%r13
  0x00007f32dd063c46:   mov    0x18(%rsp),%r12
  0x00007f32dd063c4b:   mov    0x20(%rsp),%r11
  0x00007f32dd063c50:   mov    0x28(%rsp),%r10
  0x00007f32dd063c55:   mov    0x30(%rsp),%r9
  0x00007f32dd063c5a:   mov    0x38(%rsp),%r8
  0x00007f32dd063c5f:   mov    0x40(%rsp),%rdi
  0x00007f32dd063c64:   mov    0x48(%rsp),%rsi
  0x00007f32dd063c69:   mov    0x50(%rsp),%rbp
  0x00007f32dd063c6e:   mov    0x60(%rsp),%rbx
  0x00007f32dd063c73:   mov    0x68(%rsp),%rdx
  0x00007f32dd063c78:   mov    0x70(%rsp),%rcx
  0x00007f32dd063c7d:   mov    0x78(%rsp),%rax
  0x00007f32dd063c82:   add    $0x80,%rsp
  0x00007f32dd063c89:   add    $0x8,%rsp
  0x00007f32dd063c8d:   popfq  
  0x00007f32dd063c8e:   pop    %rbp
  0x00007f32dd063c8f:   movq   $0x0,0x318(%r15)
  0x00007f32dd063c9a:   mov    0x8(%r15),%rax
  0x00007f32dd063c9e:   jmpq   0x00007f32dd000c00
  0x00007f32dd063ca3:   hlt    
  0x00007f32dd063ca4:   hlt    
  0x00007f32dd063ca5:   hlt    
  0x00007f32dd063ca6:   hlt    
  0x00007f32dd063ca7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_static_call 0x00007f32dd063d90
--------------------------------------------------------------------------------
  0x00007f32dd063e00:   push   %rbp
  0x00007f32dd063e01:   mov    %rsp,%rbp
  0x00007f32dd063e04:   pushfq 
  0x00007f32dd063e05:   sub    $0x8,%rsp
  0x00007f32dd063e09:   sub    $0x80,%rsp
  0x00007f32dd063e10:   mov    %rax,0x78(%rsp)
  0x00007f32dd063e15:   mov    %rcx,0x70(%rsp)
  0x00007f32dd063e1a:   mov    %rdx,0x68(%rsp)
  0x00007f32dd063e1f:   mov    %rbx,0x60(%rsp)
  0x00007f32dd063e24:   mov    %rbp,0x50(%rsp)
  0x00007f32dd063e29:   mov    %rsi,0x48(%rsp)
  0x00007f32dd063e2e:   mov    %rdi,0x40(%rsp)
  0x00007f32dd063e33:   mov    %r8,0x38(%rsp)
  0x00007f32dd063e38:   mov    %r9,0x30(%rsp)
  0x00007f32dd063e3d:   mov    %r10,0x28(%rsp)
  0x00007f32dd063e42:   mov    %r11,0x20(%rsp)
  0x00007f32dd063e47:   mov    %r12,0x18(%rsp)
  0x00007f32dd063e4c:   mov    %r13,0x10(%rsp)
  0x00007f32dd063e51:   mov    %r14,0x8(%rsp)
  0x00007f32dd063e56:   mov    %r15,(%rsp)
  0x00007f32dd063e5a:   sub    $0xa80,%rsp
  0x00007f32dd063e61:   fxsave64 (%rsp)
  0x00007f32dd063e66:   vzeroupper 
  0x00007f32dd063e69:   vzeroupper 
  0x00007f32dd063e6c:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd063e73:   mov    %r15,%rdi
  0x00007f32dd063e76:   callq  0x00007f32e67e42e0 = SharedRuntime::resolve_static_call_C(JavaThread*)
  0x00007f32dd063e7b:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd063e86:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd063e91:   vzeroupper 
  0x00007f32dd063e94:   cmpq   $0x0,0x8(%r15)
  0x00007f32dd063e99:   jne    0x00007f32dd063f29
  0x00007f32dd063e9f:   mov    0x320(%r15),%rbx
  0x00007f32dd063ea6:   movq   $0x0,0x320(%r15)
  0x00007f32dd063eb1:   mov    %rbx,0xae0(%rsp)
  0x00007f32dd063eb9:   mov    %rax,0xaf8(%rsp)
  0x00007f32dd063ec1:   vzeroupper 
  0x00007f32dd063ec4:   fxrstor64 (%rsp)
  0x00007f32dd063ec9:   add    $0xa80,%rsp
  0x00007f32dd063ed0:   mov    (%rsp),%r15
  0x00007f32dd063ed4:   mov    0x8(%rsp),%r14
  0x00007f32dd063ed9:   mov    0x10(%rsp),%r13
  0x00007f32dd063ede:   mov    0x18(%rsp),%r12
  0x00007f32dd063ee3:   mov    0x20(%rsp),%r11
  0x00007f32dd063ee8:   mov    0x28(%rsp),%r10
  0x00007f32dd063eed:   mov    0x30(%rsp),%r9
  0x00007f32dd063ef2:   mov    0x38(%rsp),%r8
  0x00007f32dd063ef7:   mov    0x40(%rsp),%rdi
  0x00007f32dd063efc:   mov    0x48(%rsp),%rsi
  0x00007f32dd063f01:   mov    0x50(%rsp),%rbp
  0x00007f32dd063f06:   mov    0x60(%rsp),%rbx
  0x00007f32dd063f0b:   mov    0x68(%rsp),%rdx
  0x00007f32dd063f10:   mov    0x70(%rsp),%rcx
  0x00007f32dd063f15:   mov    0x78(%rsp),%rax
  0x00007f32dd063f1a:   add    $0x80,%rsp
  0x00007f32dd063f21:   add    $0x8,%rsp
  0x00007f32dd063f25:   popfq  
  0x00007f32dd063f26:   pop    %rbp
  0x00007f32dd063f27:   jmpq   *%rax
  0x00007f32dd063f29:   vzeroupper 
  0x00007f32dd063f2c:   fxrstor64 (%rsp)
  0x00007f32dd063f31:   add    $0xa80,%rsp
  0x00007f32dd063f38:   mov    (%rsp),%r15
  0x00007f32dd063f3c:   mov    0x8(%rsp),%r14
  0x00007f32dd063f41:   mov    0x10(%rsp),%r13
  0x00007f32dd063f46:   mov    0x18(%rsp),%r12
  0x00007f32dd063f4b:   mov    0x20(%rsp),%r11
  0x00007f32dd063f50:   mov    0x28(%rsp),%r10
  0x00007f32dd063f55:   mov    0x30(%rsp),%r9
  0x00007f32dd063f5a:   mov    0x38(%rsp),%r8
  0x00007f32dd063f5f:   mov    0x40(%rsp),%rdi
  0x00007f32dd063f64:   mov    0x48(%rsp),%rsi
  0x00007f32dd063f69:   mov    0x50(%rsp),%rbp
  0x00007f32dd063f6e:   mov    0x60(%rsp),%rbx
  0x00007f32dd063f73:   mov    0x68(%rsp),%rdx
  0x00007f32dd063f78:   mov    0x70(%rsp),%rcx
  0x00007f32dd063f7d:   mov    0x78(%rsp),%rax
  0x00007f32dd063f82:   add    $0x80,%rsp
  0x00007f32dd063f89:   add    $0x8,%rsp
  0x00007f32dd063f8d:   popfq  
  0x00007f32dd063f8e:   pop    %rbp
  0x00007f32dd063f8f:   movq   $0x0,0x318(%r15)
  0x00007f32dd063f9a:   mov    0x8(%r15),%rax
  0x00007f32dd063f9e:   jmpq   0x00007f32dd000c00
  0x00007f32dd063fa3:   hlt    
  0x00007f32dd063fa4:   hlt    
  0x00007f32dd063fa5:   hlt    
  0x00007f32dd063fa6:   hlt    
  0x00007f32dd063fa7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007f32dd069c90
--------------------------------------------------------------------------------
  0x00007f32dd069d00:   push   %rbx
  0x00007f32dd069d01:   push   %rbp
  0x00007f32dd069d02:   mov    %rsp,%rbp
  0x00007f32dd069d05:   pushfq 
  0x00007f32dd069d06:   sub    $0x8,%rsp
  0x00007f32dd069d0a:   sub    $0x80,%rsp
  0x00007f32dd069d11:   mov    %rax,0x78(%rsp)
  0x00007f32dd069d16:   mov    %rcx,0x70(%rsp)
  0x00007f32dd069d1b:   mov    %rdx,0x68(%rsp)
  0x00007f32dd069d20:   mov    %rbx,0x60(%rsp)
  0x00007f32dd069d25:   mov    %rbp,0x50(%rsp)
  0x00007f32dd069d2a:   mov    %rsi,0x48(%rsp)
  0x00007f32dd069d2f:   mov    %rdi,0x40(%rsp)
  0x00007f32dd069d34:   mov    %r8,0x38(%rsp)
  0x00007f32dd069d39:   mov    %r9,0x30(%rsp)
  0x00007f32dd069d3e:   mov    %r10,0x28(%rsp)
  0x00007f32dd069d43:   mov    %r11,0x20(%rsp)
  0x00007f32dd069d48:   mov    %r12,0x18(%rsp)
  0x00007f32dd069d4d:   mov    %r13,0x10(%rsp)
  0x00007f32dd069d52:   mov    %r14,0x8(%rsp)
  0x00007f32dd069d57:   mov    %r15,(%rsp)
  0x00007f32dd069d5b:   sub    $0xa80,%rsp
  0x00007f32dd069d62:   fxsave64 (%rsp)
  0x00007f32dd069d67:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007f32dd069d72:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007f32dd069d7d:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007f32dd069d88:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007f32dd069d93:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007f32dd069d9e:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007f32dd069da9:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007f32dd069db4:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007f32dd069dbf:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007f32dd069dca:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007f32dd069dd5:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007f32dd069de0:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007f32dd069deb:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007f32dd069df6:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007f32dd069e01:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007f32dd069e0c:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007f32dd069e17:   vzeroupper 
  0x00007f32dd069e1a:   vzeroupper 
  0x00007f32dd069e1d:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd069e24:   mov    0x390(%r15),%rbx
  0x00007f32dd069e2b:   mov    %rbx,0x8(%rbp)
  0x00007f32dd069e2f:   mov    %r15,%rdi
  0x00007f32dd069e32:   callq  0x00007f32e67d12e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007f32dd069e37:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd069e42:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd069e4d:   vzeroupper 
  0x00007f32dd069e50:   cmpq   $0x0,0x8(%r15)
  0x00007f32dd069e55:   je     0x00007f32dd069f76
  0x00007f32dd069e5b:   vzeroupper 
  0x00007f32dd069e5e:   vinsertf128 $0x1,0x240(%rsp),%ymm0,%ymm0
  0x00007f32dd069e69:   vinsertf128 $0x1,0x250(%rsp),%ymm1,%ymm1
  0x00007f32dd069e74:   vinsertf128 $0x1,0x260(%rsp),%ymm2,%ymm2
  0x00007f32dd069e7f:   vinsertf128 $0x1,0x270(%rsp),%ymm3,%ymm3
  0x00007f32dd069e8a:   vinsertf128 $0x1,0x280(%rsp),%ymm4,%ymm4
  0x00007f32dd069e95:   vinsertf128 $0x1,0x290(%rsp),%ymm5,%ymm5
  0x00007f32dd069ea0:   vinsertf128 $0x1,0x2a0(%rsp),%ymm6,%ymm6
  0x00007f32dd069eab:   vinsertf128 $0x1,0x2b0(%rsp),%ymm7,%ymm7
  0x00007f32dd069eb6:   vinsertf128 $0x1,0x2c0(%rsp),%ymm8,%ymm8
  0x00007f32dd069ec1:   vinsertf128 $0x1,0x2d0(%rsp),%ymm9,%ymm9
  0x00007f32dd069ecc:   vinsertf128 $0x1,0x2e0(%rsp),%ymm10,%ymm10
  0x00007f32dd069ed7:   vinsertf128 $0x1,0x2f0(%rsp),%ymm11,%ymm11
  0x00007f32dd069ee2:   vinsertf128 $0x1,0x300(%rsp),%ymm12,%ymm12
  0x00007f32dd069eed:   vinsertf128 $0x1,0x310(%rsp),%ymm13,%ymm13
  0x00007f32dd069ef8:   vinsertf128 $0x1,0x320(%rsp),%ymm14,%ymm14
  0x00007f32dd069f03:   vinsertf128 $0x1,0x330(%rsp),%ymm15,%ymm15
  0x00007f32dd069f0e:   fxrstor64 (%rsp)
  0x00007f32dd069f13:   add    $0xa80,%rsp
  0x00007f32dd069f1a:   mov    (%rsp),%r15
  0x00007f32dd069f1e:   mov    0x8(%rsp),%r14
  0x00007f32dd069f23:   mov    0x10(%rsp),%r13
  0x00007f32dd069f28:   mov    0x18(%rsp),%r12
  0x00007f32dd069f2d:   mov    0x20(%rsp),%r11
  0x00007f32dd069f32:   mov    0x28(%rsp),%r10
  0x00007f32dd069f37:   mov    0x30(%rsp),%r9
  0x00007f32dd069f3c:   mov    0x38(%rsp),%r8
  0x00007f32dd069f41:   mov    0x40(%rsp),%rdi
  0x00007f32dd069f46:   mov    0x48(%rsp),%rsi
  0x00007f32dd069f4b:   mov    0x50(%rsp),%rbp
  0x00007f32dd069f50:   mov    0x60(%rsp),%rbx
  0x00007f32dd069f55:   mov    0x68(%rsp),%rdx
  0x00007f32dd069f5a:   mov    0x70(%rsp),%rcx
  0x00007f32dd069f5f:   mov    0x78(%rsp),%rax
  0x00007f32dd069f64:   add    $0x80,%rsp
  0x00007f32dd069f6b:   add    $0x8,%rsp
  0x00007f32dd069f6f:   popfq  
  0x00007f32dd069f70:   pop    %rbp
  0x00007f32dd069f71:   jmpq   0x00007f32dd000c00
  0x00007f32dd069f76:   cmp    0x8(%rbp),%rbx
  0x00007f32dd069f7a:   jne    0x00007f32dd069fac
  0x00007f32dd069f7c:   cmpb   $0x41,(%rbx)
  0x00007f32dd069f7f:   jne    0x00007f32dd069f89
  0x00007f32dd069f85:   add    $0x1,%rbx
  0x00007f32dd069f89:   movzbq 0x1(%rbx),%rcx
  0x00007f32dd069f8e:   and    $0x7,%rcx
  0x00007f32dd069f92:   sub    $0x4,%rcx
  0x00007f32dd069f96:   cmp    $0x1,%rcx
  0x00007f32dd069f9a:   ja     0x00007f32dd069fa4
  0x00007f32dd069fa0:   add    $0x1,%rbx
  0x00007f32dd069fa4:   add    $0x2,%rbx
  0x00007f32dd069fa8:   mov    %rbx,0x8(%rbp)
  0x00007f32dd069fac:   vzeroupper 
  0x00007f32dd069faf:   vinsertf128 $0x1,0x240(%rsp),%ymm0,%ymm0
  0x00007f32dd069fba:   vinsertf128 $0x1,0x250(%rsp),%ymm1,%ymm1
  0x00007f32dd069fc5:   vinsertf128 $0x1,0x260(%rsp),%ymm2,%ymm2
  0x00007f32dd069fd0:   vinsertf128 $0x1,0x270(%rsp),%ymm3,%ymm3
  0x00007f32dd069fdb:   vinsertf128 $0x1,0x280(%rsp),%ymm4,%ymm4
  0x00007f32dd069fe6:   vinsertf128 $0x1,0x290(%rsp),%ymm5,%ymm5
  0x00007f32dd069ff1:   vinsertf128 $0x1,0x2a0(%rsp),%ymm6,%ymm6
  0x00007f32dd069ffc:   vinsertf128 $0x1,0x2b0(%rsp),%ymm7,%ymm7
  0x00007f32dd06a007:   vinsertf128 $0x1,0x2c0(%rsp),%ymm8,%ymm8
  0x00007f32dd06a012:   vinsertf128 $0x1,0x2d0(%rsp),%ymm9,%ymm9
  0x00007f32dd06a01d:   vinsertf128 $0x1,0x2e0(%rsp),%ymm10,%ymm10
  0x00007f32dd06a028:   vinsertf128 $0x1,0x2f0(%rsp),%ymm11,%ymm11
  0x00007f32dd06a033:   vinsertf128 $0x1,0x300(%rsp),%ymm12,%ymm12
  0x00007f32dd06a03e:   vinsertf128 $0x1,0x310(%rsp),%ymm13,%ymm13
  0x00007f32dd06a049:   vinsertf128 $0x1,0x320(%rsp),%ymm14,%ymm14
  0x00007f32dd06a054:   vinsertf128 $0x1,0x330(%rsp),%ymm15,%ymm15
  0x00007f32dd06a05f:   fxrstor64 (%rsp)
  0x00007f32dd06a064:   add    $0xa80,%rsp
  0x00007f32dd06a06b:   mov    (%rsp),%r15
  0x00007f32dd06a06f:   mov    0x8(%rsp),%r14
  0x00007f32dd06a074:   mov    0x10(%rsp),%r13
  0x00007f32dd06a079:   mov    0x18(%rsp),%r12
  0x00007f32dd06a07e:   mov    0x20(%rsp),%r11
  0x00007f32dd06a083:   mov    0x28(%rsp),%r10
  0x00007f32dd06a088:   mov    0x30(%rsp),%r9
  0x00007f32dd06a08d:   mov    0x38(%rsp),%r8
  0x00007f32dd06a092:   mov    0x40(%rsp),%rdi
  0x00007f32dd06a097:   mov    0x48(%rsp),%rsi
  0x00007f32dd06a09c:   mov    0x50(%rsp),%rbp
  0x00007f32dd06a0a1:   mov    0x60(%rsp),%rbx
  0x00007f32dd06a0a6:   mov    0x68(%rsp),%rdx
  0x00007f32dd06a0ab:   mov    0x70(%rsp),%rcx
  0x00007f32dd06a0b0:   mov    0x78(%rsp),%rax
  0x00007f32dd06a0b5:   add    $0x80,%rsp
  0x00007f32dd06a0bc:   add    $0x8,%rsp
  0x00007f32dd06a0c0:   popfq  
  0x00007f32dd06a0c1:   pop    %rbp
  0x00007f32dd06a0c2:   retq   
  0x00007f32dd06a0c3:   hlt    
  0x00007f32dd06a0c4:   hlt    
  0x00007f32dd06a0c5:   hlt    
  0x00007f32dd06a0c6:   hlt    
  0x00007f32dd06a0c7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [576]=Callers_xmm0 [592]=Callers_xmm1 [608]=Callers_xmm2 [624]=Callers_xmm3 [640]=Callers_xmm4 [656]=Callers_xmm5 [672]=Callers_xmm6 [688]=Callers_xmm7 [704]=Callers_xmm8 [720]=Callers_xmm9 [736]=Callers_xmm10 [752]=Callers_xmm11 [768]=Callers_xmm12 [784]=Callers_xmm13 [800]=Callers_xmm14 [816]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 311 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007f32dd06a110
--------------------------------------------------------------------------------
  0x00007f32dd06a180:   push   %rbx
  0x00007f32dd06a181:   push   %rbp
  0x00007f32dd06a182:   mov    %rsp,%rbp
  0x00007f32dd06a185:   pushfq 
  0x00007f32dd06a186:   sub    $0x8,%rsp
  0x00007f32dd06a18a:   sub    $0x80,%rsp
  0x00007f32dd06a191:   mov    %rax,0x78(%rsp)
  0x00007f32dd06a196:   mov    %rcx,0x70(%rsp)
  0x00007f32dd06a19b:   mov    %rdx,0x68(%rsp)
  0x00007f32dd06a1a0:   mov    %rbx,0x60(%rsp)
  0x00007f32dd06a1a5:   mov    %rbp,0x50(%rsp)
  0x00007f32dd06a1aa:   mov    %rsi,0x48(%rsp)
  0x00007f32dd06a1af:   mov    %rdi,0x40(%rsp)
  0x00007f32dd06a1b4:   mov    %r8,0x38(%rsp)
  0x00007f32dd06a1b9:   mov    %r9,0x30(%rsp)
  0x00007f32dd06a1be:   mov    %r10,0x28(%rsp)
  0x00007f32dd06a1c3:   mov    %r11,0x20(%rsp)
  0x00007f32dd06a1c8:   mov    %r12,0x18(%rsp)
  0x00007f32dd06a1cd:   mov    %r13,0x10(%rsp)
  0x00007f32dd06a1d2:   mov    %r14,0x8(%rsp)
  0x00007f32dd06a1d7:   mov    %r15,(%rsp)
  0x00007f32dd06a1db:   sub    $0xa80,%rsp
  0x00007f32dd06a1e2:   fxsave64 (%rsp)
  0x00007f32dd06a1e7:   vzeroupper 
  0x00007f32dd06a1ea:   vzeroupper 
  0x00007f32dd06a1ed:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd06a1f4:   mov    0x390(%r15),%rbx
  0x00007f32dd06a1fb:   mov    %rbx,0x8(%rbp)
  0x00007f32dd06a1ff:   mov    %r15,%rdi
  0x00007f32dd06a202:   callq  0x00007f32e67d12e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007f32dd06a207:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd06a212:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd06a21d:   vzeroupper 
  0x00007f32dd06a220:   cmpq   $0x0,0x8(%r15)
  0x00007f32dd06a225:   je     0x00007f32dd06a296
  0x00007f32dd06a22b:   vzeroupper 
  0x00007f32dd06a22e:   fxrstor64 (%rsp)
  0x00007f32dd06a233:   add    $0xa80,%rsp
  0x00007f32dd06a23a:   mov    (%rsp),%r15
  0x00007f32dd06a23e:   mov    0x8(%rsp),%r14
  0x00007f32dd06a243:   mov    0x10(%rsp),%r13
  0x00007f32dd06a248:   mov    0x18(%rsp),%r12
  0x00007f32dd06a24d:   mov    0x20(%rsp),%r11
  0x00007f32dd06a252:   mov    0x28(%rsp),%r10
  0x00007f32dd06a257:   mov    0x30(%rsp),%r9
  0x00007f32dd06a25c:   mov    0x38(%rsp),%r8
  0x00007f32dd06a261:   mov    0x40(%rsp),%rdi
  0x00007f32dd06a266:   mov    0x48(%rsp),%rsi
  0x00007f32dd06a26b:   mov    0x50(%rsp),%rbp
  0x00007f32dd06a270:   mov    0x60(%rsp),%rbx
  0x00007f32dd06a275:   mov    0x68(%rsp),%rdx
  0x00007f32dd06a27a:   mov    0x70(%rsp),%rcx
  0x00007f32dd06a27f:   mov    0x78(%rsp),%rax
  0x00007f32dd06a284:   add    $0x80,%rsp
  0x00007f32dd06a28b:   add    $0x8,%rsp
  0x00007f32dd06a28f:   popfq  
  0x00007f32dd06a290:   pop    %rbp
  0x00007f32dd06a291:   jmpq   0x00007f32dd000c00
  0x00007f32dd06a296:   cmp    0x8(%rbp),%rbx
  0x00007f32dd06a29a:   jne    0x00007f32dd06a2cc
  0x00007f32dd06a29c:   cmpb   $0x41,(%rbx)
  0x00007f32dd06a29f:   jne    0x00007f32dd06a2a9
  0x00007f32dd06a2a5:   add    $0x1,%rbx
  0x00007f32dd06a2a9:   movzbq 0x1(%rbx),%rcx
  0x00007f32dd06a2ae:   and    $0x7,%rcx
  0x00007f32dd06a2b2:   sub    $0x4,%rcx
  0x00007f32dd06a2b6:   cmp    $0x1,%rcx
  0x00007f32dd06a2ba:   ja     0x00007f32dd06a2c4
  0x00007f32dd06a2c0:   add    $0x1,%rbx
  0x00007f32dd06a2c4:   add    $0x2,%rbx
  0x00007f32dd06a2c8:   mov    %rbx,0x8(%rbp)
  0x00007f32dd06a2cc:   vzeroupper 
  0x00007f32dd06a2cf:   fxrstor64 (%rsp)
  0x00007f32dd06a2d4:   add    $0xa80,%rsp
  0x00007f32dd06a2db:   mov    (%rsp),%r15
  0x00007f32dd06a2df:   mov    0x8(%rsp),%r14
  0x00007f32dd06a2e4:   mov    0x10(%rsp),%r13
  0x00007f32dd06a2e9:   mov    0x18(%rsp),%r12
  0x00007f32dd06a2ee:   mov    0x20(%rsp),%r11
  0x00007f32dd06a2f3:   mov    0x28(%rsp),%r10
  0x00007f32dd06a2f8:   mov    0x30(%rsp),%r9
  0x00007f32dd06a2fd:   mov    0x38(%rsp),%r8
  0x00007f32dd06a302:   mov    0x40(%rsp),%rdi
  0x00007f32dd06a307:   mov    0x48(%rsp),%rsi
  0x00007f32dd06a30c:   mov    0x50(%rsp),%rbp
  0x00007f32dd06a311:   mov    0x60(%rsp),%rbx
  0x00007f32dd06a316:   mov    0x68(%rsp),%rdx
  0x00007f32dd06a31b:   mov    0x70(%rsp),%rcx
  0x00007f32dd06a320:   mov    0x78(%rsp),%rax
  0x00007f32dd06a325:   add    $0x80,%rsp
  0x00007f32dd06a32c:   add    $0x8,%rsp
  0x00007f32dd06a330:   popfq  
  0x00007f32dd06a331:   pop    %rbp
  0x00007f32dd06a332:   retq   
  0x00007f32dd06a333:   hlt    
  0x00007f32dd06a334:   hlt    
  0x00007f32dd06a335:   hlt    
  0x00007f32dd06a336:   hlt    
  0x00007f32dd06a337:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 135 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007f32dd06a410
--------------------------------------------------------------------------------
  0x00007f32dd06a480:   push   %rbp
  0x00007f32dd06a481:   mov    %rsp,%rbp
  0x00007f32dd06a484:   pushfq 
  0x00007f32dd06a485:   sub    $0x8,%rsp
  0x00007f32dd06a489:   sub    $0x80,%rsp
  0x00007f32dd06a490:   mov    %rax,0x78(%rsp)
  0x00007f32dd06a495:   mov    %rcx,0x70(%rsp)
  0x00007f32dd06a49a:   mov    %rdx,0x68(%rsp)
  0x00007f32dd06a49f:   mov    %rbx,0x60(%rsp)
  0x00007f32dd06a4a4:   mov    %rbp,0x50(%rsp)
  0x00007f32dd06a4a9:   mov    %rsi,0x48(%rsp)
  0x00007f32dd06a4ae:   mov    %rdi,0x40(%rsp)
  0x00007f32dd06a4b3:   mov    %r8,0x38(%rsp)
  0x00007f32dd06a4b8:   mov    %r9,0x30(%rsp)
  0x00007f32dd06a4bd:   mov    %r10,0x28(%rsp)
  0x00007f32dd06a4c2:   mov    %r11,0x20(%rsp)
  0x00007f32dd06a4c7:   mov    %r12,0x18(%rsp)
  0x00007f32dd06a4cc:   mov    %r13,0x10(%rsp)
  0x00007f32dd06a4d1:   mov    %r14,0x8(%rsp)
  0x00007f32dd06a4d6:   mov    %r15,(%rsp)
  0x00007f32dd06a4da:   sub    $0xa80,%rsp
  0x00007f32dd06a4e1:   fxsave64 (%rsp)
  0x00007f32dd06a4e6:   vzeroupper 
  0x00007f32dd06a4e9:   vzeroupper 
  0x00007f32dd06a4ec:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd06a4f3:   mov    %r15,%rdi
  0x00007f32dd06a4f6:   callq  0x00007f32e67d12e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007f32dd06a4fb:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd06a506:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd06a511:   vzeroupper 
  0x00007f32dd06a514:   cmpq   $0x0,0x8(%r15)
  0x00007f32dd06a519:   je     0x00007f32dd06a58a
  0x00007f32dd06a51f:   vzeroupper 
  0x00007f32dd06a522:   fxrstor64 (%rsp)
  0x00007f32dd06a527:   add    $0xa80,%rsp
  0x00007f32dd06a52e:   mov    (%rsp),%r15
  0x00007f32dd06a532:   mov    0x8(%rsp),%r14
  0x00007f32dd06a537:   mov    0x10(%rsp),%r13
  0x00007f32dd06a53c:   mov    0x18(%rsp),%r12
  0x00007f32dd06a541:   mov    0x20(%rsp),%r11
  0x00007f32dd06a546:   mov    0x28(%rsp),%r10
  0x00007f32dd06a54b:   mov    0x30(%rsp),%r9
  0x00007f32dd06a550:   mov    0x38(%rsp),%r8
  0x00007f32dd06a555:   mov    0x40(%rsp),%rdi
  0x00007f32dd06a55a:   mov    0x48(%rsp),%rsi
  0x00007f32dd06a55f:   mov    0x50(%rsp),%rbp
  0x00007f32dd06a564:   mov    0x60(%rsp),%rbx
  0x00007f32dd06a569:   mov    0x68(%rsp),%rdx
  0x00007f32dd06a56e:   mov    0x70(%rsp),%rcx
  0x00007f32dd06a573:   mov    0x78(%rsp),%rax
  0x00007f32dd06a578:   add    $0x80,%rsp
  0x00007f32dd06a57f:   add    $0x8,%rsp
  0x00007f32dd06a583:   popfq  
  0x00007f32dd06a584:   pop    %rbp
  0x00007f32dd06a585:   jmpq   0x00007f32dd000c00
  0x00007f32dd06a58a:   vzeroupper 
  0x00007f32dd06a58d:   fxrstor64 (%rsp)
  0x00007f32dd06a592:   add    $0xa80,%rsp
  0x00007f32dd06a599:   mov    (%rsp),%r15
  0x00007f32dd06a59d:   mov    0x8(%rsp),%r14
  0x00007f32dd06a5a2:   mov    0x10(%rsp),%r13
  0x00007f32dd06a5a7:   mov    0x18(%rsp),%r12
  0x00007f32dd06a5ac:   mov    0x20(%rsp),%r11
  0x00007f32dd06a5b1:   mov    0x28(%rsp),%r10
  0x00007f32dd06a5b6:   mov    0x30(%rsp),%r9
  0x00007f32dd06a5bb:   mov    0x38(%rsp),%r8
  0x00007f32dd06a5c0:   mov    0x40(%rsp),%rdi
  0x00007f32dd06a5c5:   mov    0x48(%rsp),%rsi
  0x00007f32dd06a5ca:   mov    0x50(%rsp),%rbp
  0x00007f32dd06a5cf:   mov    0x60(%rsp),%rbx
  0x00007f32dd06a5d4:   mov    0x68(%rsp),%rdx
  0x00007f32dd06a5d9:   mov    0x70(%rsp),%rcx
  0x00007f32dd06a5de:   mov    0x78(%rsp),%rax
  0x00007f32dd06a5e3:   add    $0x80,%rsp
  0x00007f32dd06a5ea:   add    $0x8,%rsp
  0x00007f32dd06a5ee:   popfq  
  0x00007f32dd06a5ef:   pop    %rbp
  0x00007f32dd06a5f0:   retq   
  0x00007f32dd06a5f1:   hlt    
  0x00007f32dd06a5f2:   hlt    
  0x00007f32dd06a5f3:   hlt    
  0x00007f32dd06a5f4:   hlt    
  0x00007f32dd06a5f5:   hlt    
  0x00007f32dd06a5f6:   hlt    
  0x00007f32dd06a5f7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding DeoptimizationBlob 0x00007f32dd069690
--------------------------------------------------------------------------------
  0x00007f32dd069720:   push   %rbp
  0x00007f32dd069721:   mov    %rsp,%rbp
  0x00007f32dd069724:   pushfq 
  0x00007f32dd069725:   sub    $0x8,%rsp
  0x00007f32dd069729:   sub    $0x80,%rsp
  0x00007f32dd069730:   mov    %rax,0x78(%rsp)
  0x00007f32dd069735:   mov    %rcx,0x70(%rsp)
  0x00007f32dd06973a:   mov    %rdx,0x68(%rsp)
  0x00007f32dd06973f:   mov    %rbx,0x60(%rsp)
  0x00007f32dd069744:   mov    %rbp,0x50(%rsp)
  0x00007f32dd069749:   mov    %rsi,0x48(%rsp)
  0x00007f32dd06974e:   mov    %rdi,0x40(%rsp)
  0x00007f32dd069753:   mov    %r8,0x38(%rsp)
  0x00007f32dd069758:   mov    %r9,0x30(%rsp)
  0x00007f32dd06975d:   mov    %r10,0x28(%rsp)
  0x00007f32dd069762:   mov    %r11,0x20(%rsp)
  0x00007f32dd069767:   mov    %r12,0x18(%rsp)
  0x00007f32dd06976c:   mov    %r13,0x10(%rsp)
  0x00007f32dd069771:   mov    %r14,0x8(%rsp)
  0x00007f32dd069776:   mov    %r15,(%rsp)
  0x00007f32dd06977a:   sub    $0xa80,%rsp
  0x00007f32dd069781:   fxsave64 (%rsp)
  0x00007f32dd069786:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007f32dd069791:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007f32dd06979c:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007f32dd0697a7:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007f32dd0697b2:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007f32dd0697bd:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007f32dd0697c8:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007f32dd0697d3:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007f32dd0697de:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007f32dd0697e9:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007f32dd0697f4:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007f32dd0697ff:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007f32dd06980a:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007f32dd069815:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007f32dd069820:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007f32dd06982b:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007f32dd069836:   vzeroupper 
  0x00007f32dd069839:   mov    $0x0,%r14d
  0x00007f32dd06983f:   jmpq   0x00007f32dd069ab0
  0x00007f32dd069844:   push   %rbp
  0x00007f32dd069845:   mov    %rsp,%rbp
  0x00007f32dd069848:   pushfq 
  0x00007f32dd069849:   sub    $0x8,%rsp
  0x00007f32dd06984d:   sub    $0x80,%rsp
  0x00007f32dd069854:   mov    %rax,0x78(%rsp)
  0x00007f32dd069859:   mov    %rcx,0x70(%rsp)
  0x00007f32dd06985e:   mov    %rdx,0x68(%rsp)
  0x00007f32dd069863:   mov    %rbx,0x60(%rsp)
  0x00007f32dd069868:   mov    %rbp,0x50(%rsp)
  0x00007f32dd06986d:   mov    %rsi,0x48(%rsp)
  0x00007f32dd069872:   mov    %rdi,0x40(%rsp)
  0x00007f32dd069877:   mov    %r8,0x38(%rsp)
  0x00007f32dd06987c:   mov    %r9,0x30(%rsp)
  0x00007f32dd069881:   mov    %r10,0x28(%rsp)
  0x00007f32dd069886:   mov    %r11,0x20(%rsp)
  0x00007f32dd06988b:   mov    %r12,0x18(%rsp)
  0x00007f32dd069890:   mov    %r13,0x10(%rsp)
  0x00007f32dd069895:   mov    %r14,0x8(%rsp)
  0x00007f32dd06989a:   mov    %r15,(%rsp)
  0x00007f32dd06989e:   sub    $0xa80,%rsp
  0x00007f32dd0698a5:   fxsave64 (%rsp)
  0x00007f32dd0698aa:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007f32dd0698b5:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007f32dd0698c0:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007f32dd0698cb:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007f32dd0698d6:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007f32dd0698e1:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007f32dd0698ec:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007f32dd0698f7:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007f32dd069902:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007f32dd06990d:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007f32dd069918:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007f32dd069923:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007f32dd06992e:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007f32dd069939:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007f32dd069944:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007f32dd06994f:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007f32dd06995a:   vzeroupper 
  0x00007f32dd06995d:   mov    $0x3,%r14d
  0x00007f32dd069963:   jmpq   0x00007f32dd069ab0
  0x00007f32dd069968:   mov    %rdx,0x430(%r15)
  0x00007f32dd06996f:   mov    %rax,0x428(%r15)
  0x00007f32dd069976:   pushq  $0x0
  0x00007f32dd06997b:   push   %rbp
  0x00007f32dd06997c:   mov    %rsp,%rbp
  0x00007f32dd06997f:   pushfq 
  0x00007f32dd069980:   sub    $0x8,%rsp
  0x00007f32dd069984:   sub    $0x80,%rsp
  0x00007f32dd06998b:   mov    %rax,0x78(%rsp)
  0x00007f32dd069990:   mov    %rcx,0x70(%rsp)
  0x00007f32dd069995:   mov    %rdx,0x68(%rsp)
  0x00007f32dd06999a:   mov    %rbx,0x60(%rsp)
  0x00007f32dd06999f:   mov    %rbp,0x50(%rsp)
  0x00007f32dd0699a4:   mov    %rsi,0x48(%rsp)
  0x00007f32dd0699a9:   mov    %rdi,0x40(%rsp)
  0x00007f32dd0699ae:   mov    %r8,0x38(%rsp)
  0x00007f32dd0699b3:   mov    %r9,0x30(%rsp)
  0x00007f32dd0699b8:   mov    %r10,0x28(%rsp)
  0x00007f32dd0699bd:   mov    %r11,0x20(%rsp)
  0x00007f32dd0699c2:   mov    %r12,0x18(%rsp)
  0x00007f32dd0699c7:   mov    %r13,0x10(%rsp)
  0x00007f32dd0699cc:   mov    %r14,0x8(%rsp)
  0x00007f32dd0699d1:   mov    %r15,(%rsp)
  0x00007f32dd0699d5:   sub    $0xa80,%rsp
  0x00007f32dd0699dc:   fxsave64 (%rsp)
  0x00007f32dd0699e1:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007f32dd0699ec:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007f32dd0699f7:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007f32dd069a02:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007f32dd069a0d:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007f32dd069a18:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007f32dd069a23:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007f32dd069a2e:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007f32dd069a39:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007f32dd069a44:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007f32dd069a4f:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007f32dd069a5a:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007f32dd069a65:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007f32dd069a70:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007f32dd069a7b:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007f32dd069a86:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007f32dd069a91:   vzeroupper 
  0x00007f32dd069a94:   mov    $0x1,%r14d
  0x00007f32dd069a9a:   mov    0x430(%r15),%rdx
  0x00007f32dd069aa1:   mov    %rdx,0x8(%rbp)
  0x00007f32dd069aa5:   movq   $0x0,0x430(%r15)
  0x00007f32dd069ab0:   vzeroupper 
  0x00007f32dd069ab3:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd069aba:   mov    %r15,%rdi
  0x00007f32dd069abd:   mov    %r14d,%esi
  0x00007f32dd069ac0:   callq  0x00007f32e611f170 = Deoptimization::fetch_unroll_info(JavaThread*, int)
  0x00007f32dd069ac5:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd069ad0:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd069adb:   vzeroupper 
  0x00007f32dd069ade:   mov    %rax,%rdi
  0x00007f32dd069ae1:   mov    0x3c(%rdi),%r14d
  0x00007f32dd069ae5:   cmp    $0x1,%r14d
  0x00007f32dd069ae9:   jne    0x00007f32dd069b23
  0x00007f32dd069aef:   mov    0x428(%r15),%rax
  0x00007f32dd069af6:   mov    0x430(%r15),%rdx
  0x00007f32dd069afd:   movq   $0x0,0x428(%r15)
  0x00007f32dd069b08:   movq   $0x0,0x430(%r15)
  0x00007f32dd069b13:   mov    %rax,0xaf8(%rsp)
  0x00007f32dd069b1b:   mov    %rdx,0xae8(%rsp)
  0x00007f32dd069b23:   vmovsd 0xa0(%rsp),%xmm0
  0x00007f32dd069b2c:   mov    0xaf8(%rsp),%rax
  0x00007f32dd069b34:   mov    0xae8(%rsp),%rdx
  0x00007f32dd069b3c:   add    $0xb18,%rsp
  0x00007f32dd069b43:   mov    (%rdi),%ecx
  0x00007f32dd069b45:   add    %rcx,%rsp
  0x00007f32dd069b48:   mov    0x30(%rdi),%rbp
  0x00007f32dd069b4c:   mov    0x18(%rdi),%rcx
  0x00007f32dd069b50:   add    $0x8,%rsp
  0x00007f32dd069b54:   mov    0x10(%rdi),%rsi
  0x00007f32dd069b58:   mov    0x8(%rdi),%edx
  0x00007f32dd069b5b:   mov    %rsp,%r8
  0x00007f32dd069b5e:   mov    0x4(%rdi),%ebx
  0x00007f32dd069b61:   sub    %rbx,%rsp
  0x00007f32dd069b64:   mov    (%rsi),%rbx
  0x00007f32dd069b67:   sub    $0x10,%rbx
  0x00007f32dd069b6b:   rex.W pushq (%rcx)
  0x00007f32dd069b6e:   push   %rbp
  0x00007f32dd069b6f:   mov    %rsp,%rbp
  0x00007f32dd069b72:   sub    %rbx,%rsp
  0x00007f32dd069b75:   movq   $0x0,-0x10(%rbp)
  0x00007f32dd069b7d:   mov    %r8,-0x8(%rbp)
  0x00007f32dd069b81:   mov    %rsp,%r8
  0x00007f32dd069b84:   add    $0x8,%rsi
  0x00007f32dd069b88:   add    $0x8,%rcx
  0x00007f32dd069b8c:   dec    %edx
  0x00007f32dd069b8e:   jne    0x00007f32dd069b64
  0x00007f32dd069b90:   rex.W pushq (%rcx)
  0x00007f32dd069b93:   push   %rbp
  0x00007f32dd069b94:   mov    %rsp,%rbp
  0x00007f32dd069b97:   sub    $0xb10,%rsp
  0x00007f32dd069b9e:   vmovsd %xmm0,0xa0(%rsp)
  0x00007f32dd069ba7:   mov    %rax,0xaf8(%rsp)
  0x00007f32dd069baf:   vzeroupper 
  0x00007f32dd069bb2:   mov    %rbp,0x2d0(%r15)
  0x00007f32dd069bb9:   movabs $0x7f32dd069baf,%r10
  0x00007f32dd069bc3:   mov    %r10,0x2c8(%r15)
  0x00007f32dd069bca:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd069bd1:   and    $0xfffffffffffffff0,%rsp
  0x00007f32dd069bd5:   mov    %r15,%rdi
  0x00007f32dd069bd8:   mov    %r14d,%esi
  0x00007f32dd069bdb:   callq  0x00007f32e6117710 = Deoptimization::unpack_frames(JavaThread*, int)
  0x00007f32dd069be0:   mov    0x2c0(%r15),%rsp
  0x00007f32dd069be7:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd069bf2:   movq   $0x0,0x2d0(%r15)
  0x00007f32dd069bfd:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd069c08:   vzeroupper 
  0x00007f32dd069c0b:   vmovsd 0xa0(%rsp),%xmm0
  0x00007f32dd069c14:   mov    0xaf8(%rsp),%rax
  0x00007f32dd069c1c:   mov    0xae8(%rsp),%rdx
  0x00007f32dd069c24:   leaveq 
  0x00007f32dd069c25:   retq   
  0x00007f32dd069c26:   hlt    
  0x00007f32dd069c27:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 2 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [576]=Callers_xmm0 [592]=Callers_xmm1 [608]=Callers_xmm2 [624]=Callers_xmm3 [640]=Callers_xmm4 [656]=Callers_xmm5 [672]=Callers_xmm6 [688]=Callers_xmm7 [704]=Callers_xmm8 [720]=Callers_xmm9 [736]=Callers_xmm10 [752]=Callers_xmm11 [768]=Callers_xmm12 [784]=Callers_xmm13 [800]=Callers_xmm14 [816]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 933 
ImmutableOopMap {} pc offsets: 1167 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding UncommonTrapBlob 0x00007f32dd069310
--------------------------------------------------------------------------------
  0x00007f32dd069380:   sub    $0x8,%rsp
  0x00007f32dd069384:   mov    %rbp,(%rsp)
  0x00007f32dd069388:   mov    %esi,%esi
  0x00007f32dd06938a:   vzeroupper 
  0x00007f32dd06938d:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd069394:   mov    %r15,%rdi
  0x00007f32dd069397:   mov    $0x2,%edx
  0x00007f32dd06939c:   callq  0x00007f32e611f200 = Deoptimization::uncommon_trap(JavaThread*, int, int)
  0x00007f32dd0693a1:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd0693ac:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd0693b7:   vzeroupper 
  0x00007f32dd0693ba:   mov    %rax,%rdi
  0x00007f32dd0693bd:   add    $0x8,%rsp
  0x00007f32dd0693c1:   mov    (%rdi),%ecx
  0x00007f32dd0693c3:   add    %rcx,%rsp
  0x00007f32dd0693c6:   mov    0x30(%rdi),%rbp
  0x00007f32dd0693ca:   mov    0x18(%rdi),%rcx
  0x00007f32dd0693ce:   add    $0x8,%rsp
  0x00007f32dd0693d2:   mov    0x10(%rdi),%rsi
  0x00007f32dd0693d6:   mov    0x8(%rdi),%edx
  0x00007f32dd0693d9:   mov    %rsp,%r8
  0x00007f32dd0693dc:   mov    0x4(%rdi),%ebx
  0x00007f32dd0693df:   sub    %rbx,%rsp
  0x00007f32dd0693e2:   mov    (%rsi),%rbx
  0x00007f32dd0693e5:   sub    $0x10,%rbx
  0x00007f32dd0693e9:   rex.W pushq (%rcx)
  0x00007f32dd0693ec:   push   %rbp
  0x00007f32dd0693ed:   mov    %rsp,%rbp
  0x00007f32dd0693f0:   sub    %rbx,%rsp
  0x00007f32dd0693f3:   mov    %r8,-0x8(%rbp)
  0x00007f32dd0693f7:   movq   $0x0,-0x10(%rbp)
  0x00007f32dd0693ff:   mov    %rsp,%r8
  0x00007f32dd069402:   add    $0x8,%rsi
  0x00007f32dd069406:   add    $0x8,%rcx
  0x00007f32dd06940a:   dec    %edx
  0x00007f32dd06940c:   jne    0x00007f32dd0693e2
  0x00007f32dd06940e:   rex.W pushq (%rcx)
  0x00007f32dd069411:   push   %rbp
  0x00007f32dd069412:   mov    %rsp,%rbp
  0x00007f32dd069415:   sub    $0x0,%rsp
  0x00007f32dd069419:   vzeroupper 
  0x00007f32dd06941c:   mov    %rbp,0x2d0(%r15)
  0x00007f32dd069423:   movabs $0x7f32dd069419,%r10
  0x00007f32dd06942d:   mov    %r10,0x2c8(%r15)
  0x00007f32dd069434:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd06943b:   and    $0xfffffffffffffff0,%rsp
  0x00007f32dd06943f:   mov    %r15,%rdi
  0x00007f32dd069442:   mov    $0x2,%esi
  0x00007f32dd069447:   callq  0x00007f32e6117710 = Deoptimization::unpack_frames(JavaThread*, int)
  0x00007f32dd06944c:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd069457:   movq   $0x0,0x2d0(%r15)
  0x00007f32dd069462:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd06946d:   vzeroupper 
  0x00007f32dd069470:   leaveq 
  0x00007f32dd069471:   retq   
  0x00007f32dd069472:   hlt    
  0x00007f32dd069473:   hlt    
  0x00007f32dd069474:   hlt    
  0x00007f32dd069475:   hlt    
  0x00007f32dd069476:   hlt    
  0x00007f32dd069477:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 2 OopMaps

ImmutableOopMap {} pc offsets: 33 153 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - AbstractMethodError throw_exception 0x00007f32dd03fb90
--------------------------------------------------------------------------------
  0x00007f32dd03fc00:   push   %rbp
  0x00007f32dd03fc01:   mov    %rsp,%rbp
  0x00007f32dd03fc04:   sub    $0x0,%rsp
  0x00007f32dd03fc08:   vzeroupper 
  0x00007f32dd03fc0b:   mov    %rbp,0x2d0(%r15)
  0x00007f32dd03fc12:   movabs $0x7f32dd03fc08,%r10
  0x00007f32dd03fc1c:   mov    %r10,0x2c8(%r15)
  0x00007f32dd03fc23:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd03fc2a:   and    $0xfffffffffffffff0,%rsp
  0x00007f32dd03fc2e:   mov    %r15,%rdi
  0x00007f32dd03fc31:   callq  0x00007f32e67e4ea0 = SharedRuntime::throw_AbstractMethodError(JavaThread*)
  0x00007f32dd03fc36:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd03fc41:   movq   $0x0,0x2d0(%r15)
  0x00007f32dd03fc4c:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd03fc57:   vzeroupper 
  0x00007f32dd03fc5a:   leaveq 
  0x00007f32dd03fc5b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - IncompatibleClassChangeError throw_exception 0x00007f32dd03f890
--------------------------------------------------------------------------------
  0x00007f32dd03f900:   push   %rbp
  0x00007f32dd03f901:   mov    %rsp,%rbp
  0x00007f32dd03f904:   sub    $0x0,%rsp
  0x00007f32dd03f908:   vzeroupper 
  0x00007f32dd03f90b:   mov    %rbp,0x2d0(%r15)
  0x00007f32dd03f912:   movabs $0x7f32dd03f908,%r10
  0x00007f32dd03f91c:   mov    %r10,0x2c8(%r15)
  0x00007f32dd03f923:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd03f92a:   and    $0xfffffffffffffff0,%rsp
  0x00007f32dd03f92e:   mov    %r15,%rdi
  0x00007f32dd03f931:   callq  0x00007f32e67e50a0 = SharedRuntime::throw_IncompatibleClassChangeError(JavaThread*)
  0x00007f32dd03f936:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd03f941:   movq   $0x0,0x2d0(%r15)
  0x00007f32dd03f94c:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd03f957:   vzeroupper 
  0x00007f32dd03f95a:   leaveq 
  0x00007f32dd03f95b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - NullPointerException at call throw_exception 0x00007f32dd03f590
--------------------------------------------------------------------------------
  0x00007f32dd03f600:   push   %rbp
  0x00007f32dd03f601:   mov    %rsp,%rbp
  0x00007f32dd03f604:   sub    $0x0,%rsp
  0x00007f32dd03f608:   vzeroupper 
  0x00007f32dd03f60b:   mov    %rbp,0x2d0(%r15)
  0x00007f32dd03f612:   movabs $0x7f32dd03f608,%r10
  0x00007f32dd03f61c:   mov    %r10,0x2c8(%r15)
  0x00007f32dd03f623:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd03f62a:   and    $0xfffffffffffffff0,%rsp
  0x00007f32dd03f62e:   mov    %r15,%rdi
  0x00007f32dd03f631:   callq  0x00007f32e67e4da0 = SharedRuntime::throw_NullPointerException_at_call(JavaThread*)
  0x00007f32dd03f636:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd03f641:   movq   $0x0,0x2d0(%r15)
  0x00007f32dd03f64c:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd03f657:   vzeroupper 
  0x00007f32dd03f65a:   leaveq 
  0x00007f32dd03f65b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_float_sign_mask [0x00007f32dd040280, 0x00007f32dd0402c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040280:   (bad)  
  0x00007f32dd040281:   (bad)  
  0x00007f32dd040282:   (bad)  
  0x00007f32dd040283:   jg     Stub::vector_float_sign_mask+4 0x00007f32dd040284
  0x00007f32dd040285:   (bad)  
  0x00007f32dd040286:   (bad)  
  0x00007f32dd040287:   jg     Stub::vector_float_sign_mask+8 0x00007f32dd040288
  0x00007f32dd040289:   (bad)  
  0x00007f32dd04028a:   (bad)  
  0x00007f32dd04028b:   jg     Stub::vector_float_sign_mask+12 0x00007f32dd04028c
  0x00007f32dd04028d:   (bad)  
  0x00007f32dd04028e:   (bad)  
  0x00007f32dd04028f:   jg     Stub::vector_float_sign_mask+16 0x00007f32dd040290
  0x00007f32dd040291:   (bad)  
  0x00007f32dd040292:   (bad)  
  0x00007f32dd040293:   jg     Stub::vector_float_sign_mask+20 0x00007f32dd040294
  0x00007f32dd040295:   (bad)  
  0x00007f32dd040296:   (bad)  
  0x00007f32dd040297:   jg     Stub::vector_float_sign_mask+24 0x00007f32dd040298
  0x00007f32dd040299:   (bad)  
  0x00007f32dd04029a:   (bad)  
  0x00007f32dd04029b:   jg     Stub::vector_float_sign_mask+28 0x00007f32dd04029c
  0x00007f32dd04029d:   (bad)  
  0x00007f32dd04029e:   (bad)  
  0x00007f32dd04029f:   jg     Stub::vector_float_sign_mask+32 0x00007f32dd0402a0
  0x00007f32dd0402a1:   (bad)  
  0x00007f32dd0402a2:   (bad)  
  0x00007f32dd0402a3:   jg     Stub::vector_float_sign_mask+36 0x00007f32dd0402a4
  0x00007f32dd0402a5:   (bad)  
  0x00007f32dd0402a6:   (bad)  
  0x00007f32dd0402a7:   jg     Stub::vector_float_sign_mask+40 0x00007f32dd0402a8
  0x00007f32dd0402a9:   (bad)  
  0x00007f32dd0402aa:   (bad)  
  0x00007f32dd0402ab:   jg     Stub::vector_float_sign_mask+44 0x00007f32dd0402ac
  0x00007f32dd0402ad:   (bad)  
  0x00007f32dd0402ae:   (bad)  
  0x00007f32dd0402af:   jg     Stub::vector_float_sign_mask+48 0x00007f32dd0402b0
  0x00007f32dd0402b1:   (bad)  
  0x00007f32dd0402b2:   (bad)  
  0x00007f32dd0402b3:   jg     Stub::vector_float_sign_mask+52 0x00007f32dd0402b4
  0x00007f32dd0402b5:   (bad)  
  0x00007f32dd0402b6:   (bad)  
  0x00007f32dd0402b7:   jg     Stub::vector_float_sign_mask+56 0x00007f32dd0402b8
  0x00007f32dd0402b9:   (bad)  
  0x00007f32dd0402ba:   (bad)  
  0x00007f32dd0402bb:   jg     Stub::vector_float_sign_mask+60 0x00007f32dd0402bc
  0x00007f32dd0402bd:   (bad)  
  0x00007f32dd0402be:   (bad)  
  0x00007f32dd0402bf:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_float_sign_flip [0x00007f32dd0402c0, 0x00007f32dd040300] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0402c0:   add    %al,(%rax)
  0x00007f32dd0402c2:   add    %al,-0x80000000(%rax)
  0x00007f32dd0402c8:   add    %al,(%rax)
  0x00007f32dd0402ca:   add    %al,-0x80000000(%rax)
  0x00007f32dd0402d0:   add    %al,(%rax)
  0x00007f32dd0402d2:   add    %al,-0x80000000(%rax)
  0x00007f32dd0402d8:   add    %al,(%rax)
  0x00007f32dd0402da:   add    %al,-0x80000000(%rax)
  0x00007f32dd0402e0:   add    %al,(%rax)
  0x00007f32dd0402e2:   add    %al,-0x80000000(%rax)
  0x00007f32dd0402e8:   add    %al,(%rax)
  0x00007f32dd0402ea:   add    %al,-0x80000000(%rax)
  0x00007f32dd0402f0:   add    %al,(%rax)
  0x00007f32dd0402f2:   add    %al,-0x80000000(%rax)
  0x00007f32dd0402f8:   add    %al,(%rax)
  0x00007f32dd0402fa:   add    %al,-0x80000000(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_double_sign_mask [0x00007f32dd040300, 0x00007f32dd040340] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040300:   (bad)  
  0x00007f32dd040301:   (bad)  
  0x00007f32dd040302:   (bad)  
  0x00007f32dd040303:   (bad)  
  0x00007f32dd040304:   (bad)  
  0x00007f32dd040305:   (bad)  
  0x00007f32dd040306:   (bad)  
  0x00007f32dd040307:   jg     Stub::vector_double_sign_mask+8 0x00007f32dd040308
  0x00007f32dd040309:   (bad)  
  0x00007f32dd04030a:   (bad)  
  0x00007f32dd04030b:   (bad)  
  0x00007f32dd04030c:   (bad)  
  0x00007f32dd04030d:   (bad)  
  0x00007f32dd04030e:   (bad)  
  0x00007f32dd04030f:   jg     Stub::vector_double_sign_mask+16 0x00007f32dd040310
  0x00007f32dd040311:   (bad)  
  0x00007f32dd040312:   (bad)  
  0x00007f32dd040313:   (bad)  
  0x00007f32dd040314:   (bad)  
  0x00007f32dd040315:   (bad)  
  0x00007f32dd040316:   (bad)  
  0x00007f32dd040317:   jg     Stub::vector_double_sign_mask+24 0x00007f32dd040318
  0x00007f32dd040319:   (bad)  
  0x00007f32dd04031a:   (bad)  
  0x00007f32dd04031b:   (bad)  
  0x00007f32dd04031c:   (bad)  
  0x00007f32dd04031d:   (bad)  
  0x00007f32dd04031e:   (bad)  
  0x00007f32dd04031f:   jg     Stub::vector_double_sign_mask+32 0x00007f32dd040320
  0x00007f32dd040321:   (bad)  
  0x00007f32dd040322:   (bad)  
  0x00007f32dd040323:   (bad)  
  0x00007f32dd040324:   (bad)  
  0x00007f32dd040325:   (bad)  
  0x00007f32dd040326:   (bad)  
  0x00007f32dd040327:   jg     Stub::vector_double_sign_mask+40 0x00007f32dd040328
  0x00007f32dd040329:   (bad)  
  0x00007f32dd04032a:   (bad)  
  0x00007f32dd04032b:   (bad)  
  0x00007f32dd04032c:   (bad)  
  0x00007f32dd04032d:   (bad)  
  0x00007f32dd04032e:   (bad)  
  0x00007f32dd04032f:   jg     Stub::vector_double_sign_mask+48 0x00007f32dd040330
  0x00007f32dd040331:   (bad)  
  0x00007f32dd040332:   (bad)  
  0x00007f32dd040333:   (bad)  
  0x00007f32dd040334:   (bad)  
  0x00007f32dd040335:   (bad)  
  0x00007f32dd040336:   (bad)  
  0x00007f32dd040337:   jg     Stub::vector_double_sign_mask+56 0x00007f32dd040338
  0x00007f32dd040339:   (bad)  
  0x00007f32dd04033a:   (bad)  
  0x00007f32dd04033b:   (bad)  
  0x00007f32dd04033c:   (bad)  
  0x00007f32dd04033d:   (bad)  
  0x00007f32dd04033e:   (bad)  
  0x00007f32dd04033f:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_double_sign_flip [0x00007f32dd040340, 0x00007f32dd040380] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040340:   add    %al,(%rax)
  0x00007f32dd040342:   add    %al,(%rax)
  0x00007f32dd040344:   add    %al,(%rax)
  0x00007f32dd040346:   add    %al,0x0(%rax)
  0x00007f32dd04034c:   add    %al,(%rax)
  0x00007f32dd04034e:   add    %al,0x0(%rax)
  0x00007f32dd040354:   add    %al,(%rax)
  0x00007f32dd040356:   add    %al,0x0(%rax)
  0x00007f32dd04035c:   add    %al,(%rax)
  0x00007f32dd04035e:   add    %al,0x0(%rax)
  0x00007f32dd040364:   add    %al,(%rax)
  0x00007f32dd040366:   add    %al,0x0(%rax)
  0x00007f32dd04036c:   add    %al,(%rax)
  0x00007f32dd04036e:   add    %al,0x0(%rax)
  0x00007f32dd040374:   add    %al,(%rax)
  0x00007f32dd040376:   add    %al,0x0(%rax)
  0x00007f32dd04037c:   add    %al,(%rax)
  0x00007f32dd04037e:   .byte 0x0
  0x00007f32dd04037f:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_all_bits_set [0x00007f32dd040380, 0x00007f32dd0403c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040380:   (bad)  
  0x00007f32dd040381:   (bad)  
  0x00007f32dd040382:   (bad)  
  0x00007f32dd040383:   (bad)  
  0x00007f32dd040384:   (bad)  
  0x00007f32dd040385:   (bad)  
  0x00007f32dd040386:   (bad)  
  0x00007f32dd040387:   (bad)  
  0x00007f32dd040388:   (bad)  
  0x00007f32dd040389:   (bad)  
  0x00007f32dd04038a:   (bad)  
  0x00007f32dd04038b:   (bad)  
  0x00007f32dd04038c:   (bad)  
  0x00007f32dd04038d:   (bad)  
  0x00007f32dd04038e:   (bad)  
  0x00007f32dd04038f:   (bad)  
  0x00007f32dd040390:   (bad)  
  0x00007f32dd040391:   (bad)  
  0x00007f32dd040392:   (bad)  
  0x00007f32dd040393:   (bad)  
  0x00007f32dd040394:   (bad)  
  0x00007f32dd040395:   (bad)  
  0x00007f32dd040396:   (bad)  
  0x00007f32dd040397:   (bad)  
  0x00007f32dd040398:   (bad)  
  0x00007f32dd040399:   (bad)  
  0x00007f32dd04039a:   (bad)  
  0x00007f32dd04039b:   (bad)  
  0x00007f32dd04039c:   (bad)  
  0x00007f32dd04039d:   (bad)  
  0x00007f32dd04039e:   (bad)  
  0x00007f32dd04039f:   (bad)  
  0x00007f32dd0403a0:   (bad)  
  0x00007f32dd0403a1:   (bad)  
  0x00007f32dd0403a2:   (bad)  
  0x00007f32dd0403a3:   (bad)  
  0x00007f32dd0403a4:   (bad)  
  0x00007f32dd0403a5:   (bad)  
  0x00007f32dd0403a6:   (bad)  
  0x00007f32dd0403a7:   (bad)  
  0x00007f32dd0403a8:   (bad)  
  0x00007f32dd0403a9:   (bad)  
  0x00007f32dd0403aa:   (bad)  
  0x00007f32dd0403ab:   (bad)  
  0x00007f32dd0403ac:   (bad)  
  0x00007f32dd0403ad:   (bad)  
  0x00007f32dd0403ae:   (bad)  
  0x00007f32dd0403af:   (bad)  
  0x00007f32dd0403b0:   (bad)  
  0x00007f32dd0403b1:   (bad)  
  0x00007f32dd0403b2:   (bad)  
  0x00007f32dd0403b3:   (bad)  
  0x00007f32dd0403b4:   (bad)  
  0x00007f32dd0403b5:   (bad)  
  0x00007f32dd0403b6:   (bad)  
  0x00007f32dd0403b7:   (bad)  
  0x00007f32dd0403b8:   (bad)  
  0x00007f32dd0403b9:   (bad)  
  0x00007f32dd0403ba:   (bad)  
  0x00007f32dd0403bb:   (bad)  
  0x00007f32dd0403bc:   (bad)  
  0x00007f32dd0403bd:   (bad)  
  0x00007f32dd0403be:   (bad)  
  0x00007f32dd0403bf:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_mask_cmp_bits [0x00007f32dd0403c0, 0x00007f32dd040400] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0403c0:   add    %eax,(%rax)
  0x00007f32dd0403c2:   add    %al,(%rax)
  0x00007f32dd0403c4:   add    %eax,(%rax)
  0x00007f32dd0403c6:   add    %al,(%rax)
  0x00007f32dd0403c8:   add    %eax,(%rax)
  0x00007f32dd0403ca:   add    %al,(%rax)
  0x00007f32dd0403cc:   add    %eax,(%rax)
  0x00007f32dd0403ce:   add    %al,(%rax)
  0x00007f32dd0403d0:   add    %eax,(%rax)
  0x00007f32dd0403d2:   add    %al,(%rax)
  0x00007f32dd0403d4:   add    %eax,(%rax)
  0x00007f32dd0403d6:   add    %al,(%rax)
  0x00007f32dd0403d8:   add    %eax,(%rax)
  0x00007f32dd0403da:   add    %al,(%rax)
  0x00007f32dd0403dc:   add    %eax,(%rax)
  0x00007f32dd0403de:   add    %al,(%rax)
  0x00007f32dd0403e0:   add    %eax,(%rax)
  0x00007f32dd0403e2:   add    %al,(%rax)
  0x00007f32dd0403e4:   add    %eax,(%rax)
  0x00007f32dd0403e6:   add    %al,(%rax)
  0x00007f32dd0403e8:   add    %eax,(%rax)
  0x00007f32dd0403ea:   add    %al,(%rax)
  0x00007f32dd0403ec:   add    %eax,(%rax)
  0x00007f32dd0403ee:   add    %al,(%rax)
  0x00007f32dd0403f0:   add    %eax,(%rax)
  0x00007f32dd0403f2:   add    %al,(%rax)
  0x00007f32dd0403f4:   add    %eax,(%rax)
  0x00007f32dd0403f6:   add    %al,(%rax)
  0x00007f32dd0403f8:   add    %eax,(%rax)
  0x00007f32dd0403fa:   add    %al,(%rax)
  0x00007f32dd0403fc:   add    %eax,(%rax)
  0x00007f32dd0403fe:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_short_to_byte_mask [0x00007f32dd040400, 0x00007f32dd040440] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040400:   incl   (%rax)
  0x00007f32dd040402:   incl   (%rax)
  0x00007f32dd040404:   incl   (%rax)
  0x00007f32dd040406:   incl   (%rax)
  0x00007f32dd040408:   incl   (%rax)
  0x00007f32dd04040a:   incl   (%rax)
  0x00007f32dd04040c:   incl   (%rax)
  0x00007f32dd04040e:   incl   (%rax)
  0x00007f32dd040410:   incl   (%rax)
  0x00007f32dd040412:   incl   (%rax)
  0x00007f32dd040414:   incl   (%rax)
  0x00007f32dd040416:   incl   (%rax)
  0x00007f32dd040418:   incl   (%rax)
  0x00007f32dd04041a:   incl   (%rax)
  0x00007f32dd04041c:   incl   (%rax)
  0x00007f32dd04041e:   incl   (%rax)
  0x00007f32dd040420:   incl   (%rax)
  0x00007f32dd040422:   incl   (%rax)
  0x00007f32dd040424:   incl   (%rax)
  0x00007f32dd040426:   incl   (%rax)
  0x00007f32dd040428:   incl   (%rax)
  0x00007f32dd04042a:   incl   (%rax)
  0x00007f32dd04042c:   incl   (%rax)
  0x00007f32dd04042e:   incl   (%rax)
  0x00007f32dd040430:   incl   (%rax)
  0x00007f32dd040432:   incl   (%rax)
  0x00007f32dd040434:   incl   (%rax)
  0x00007f32dd040436:   incl   (%rax)
  0x00007f32dd040438:   incl   (%rax)
  0x00007f32dd04043a:   incl   (%rax)
  0x00007f32dd04043c:   incl   (%rax)
  0x00007f32dd04043e:   incl   (%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_byte_perm_mask [0x00007f32dd040440, 0x00007f32dd040480] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040440:   add    %eax,(%rax)
  0x00007f32dd040442:   add    %al,(%rax)
  0x00007f32dd040444:   add    %al,(%rax)
  0x00007f32dd040446:   add    %al,(%rax)
  0x00007f32dd040448:   add    (%rax),%eax
  0x00007f32dd04044a:   add    %al,(%rax)
  0x00007f32dd04044c:   add    %al,(%rax)
  0x00007f32dd04044e:   add    %al,(%rax)
  0x00007f32dd040450:   add    $0x0,%eax
  0x00007f32dd040455:   add    %al,(%rax)
  0x00007f32dd040457:   add    %al,(%rdi)
  0x00007f32dd040459:   add    %al,(%rax)
  0x00007f32dd04045b:   add    %al,(%rax)
  0x00007f32dd04045d:   add    %al,(%rax)
  0x00007f32dd04045f:   add    %al,(%rax)
  0x00007f32dd040461:   add    %al,(%rax)
  0x00007f32dd040463:   add    %al,(%rax)
  0x00007f32dd040465:   add    %al,(%rax)
  0x00007f32dd040467:   add    %al,(%rdx)
  0x00007f32dd040469:   add    %al,(%rax)
  0x00007f32dd04046b:   add    %al,(%rax)
  0x00007f32dd04046d:   add    %al,(%rax)
  0x00007f32dd04046f:   add    %al,(%rax,%rax,1)
  0x00007f32dd040472:   add    %al,(%rax)
  0x00007f32dd040474:   add    %al,(%rax)
  0x00007f32dd040476:   add    %al,(%rax)
  0x00007f32dd040478:   (bad)  
  0x00007f32dd040479:   add    %al,(%rax)
  0x00007f32dd04047b:   add    %al,(%rax)
  0x00007f32dd04047d:   add    %al,(%rax)
  0x00007f32dd04047f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_to_byte_mask [0x00007f32dd040480, 0x00007f32dd0404c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040480:   incl   (%rax)
  0x00007f32dd040482:   add    %al,(%rax)
  0x00007f32dd040484:   incl   (%rax)
  0x00007f32dd040486:   add    %al,(%rax)
  0x00007f32dd040488:   incl   (%rax)
  0x00007f32dd04048a:   add    %al,(%rax)
  0x00007f32dd04048c:   incl   (%rax)
  0x00007f32dd04048e:   add    %al,(%rax)
  0x00007f32dd040490:   incl   (%rax)
  0x00007f32dd040492:   add    %al,(%rax)
  0x00007f32dd040494:   incl   (%rax)
  0x00007f32dd040496:   add    %al,(%rax)
  0x00007f32dd040498:   incl   (%rax)
  0x00007f32dd04049a:   add    %al,(%rax)
  0x00007f32dd04049c:   incl   (%rax)
  0x00007f32dd04049e:   add    %al,(%rax)
  0x00007f32dd0404a0:   incl   (%rax)
  0x00007f32dd0404a2:   add    %al,(%rax)
  0x00007f32dd0404a4:   incl   (%rax)
  0x00007f32dd0404a6:   add    %al,(%rax)
  0x00007f32dd0404a8:   incl   (%rax)
  0x00007f32dd0404aa:   add    %al,(%rax)
  0x00007f32dd0404ac:   incl   (%rax)
  0x00007f32dd0404ae:   add    %al,(%rax)
  0x00007f32dd0404b0:   incl   (%rax)
  0x00007f32dd0404b2:   add    %al,(%rax)
  0x00007f32dd0404b4:   incl   (%rax)
  0x00007f32dd0404b6:   add    %al,(%rax)
  0x00007f32dd0404b8:   incl   (%rax)
  0x00007f32dd0404ba:   add    %al,(%rax)
  0x00007f32dd0404bc:   incl   (%rax)
  0x00007f32dd0404be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_to_short_mask [0x00007f32dd0404c0, 0x00007f32dd040500] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0404c0:   (bad)  
  0x00007f32dd0404c1:   incl   (%rax)
  0x00007f32dd0404c3:   add    %bh,%bh
  0x00007f32dd0404c5:   incl   (%rax)
  0x00007f32dd0404c7:   add    %bh,%bh
  0x00007f32dd0404c9:   incl   (%rax)
  0x00007f32dd0404cb:   add    %bh,%bh
  0x00007f32dd0404cd:   incl   (%rax)
  0x00007f32dd0404cf:   add    %bh,%bh
  0x00007f32dd0404d1:   incl   (%rax)
  0x00007f32dd0404d3:   add    %bh,%bh
  0x00007f32dd0404d5:   incl   (%rax)
  0x00007f32dd0404d7:   add    %bh,%bh
  0x00007f32dd0404d9:   incl   (%rax)
  0x00007f32dd0404db:   add    %bh,%bh
  0x00007f32dd0404dd:   incl   (%rax)
  0x00007f32dd0404df:   add    %bh,%bh
  0x00007f32dd0404e1:   incl   (%rax)
  0x00007f32dd0404e3:   add    %bh,%bh
  0x00007f32dd0404e5:   incl   (%rax)
  0x00007f32dd0404e7:   add    %bh,%bh
  0x00007f32dd0404e9:   incl   (%rax)
  0x00007f32dd0404eb:   add    %bh,%bh
  0x00007f32dd0404ed:   incl   (%rax)
  0x00007f32dd0404ef:   add    %bh,%bh
  0x00007f32dd0404f1:   incl   (%rax)
  0x00007f32dd0404f3:   add    %bh,%bh
  0x00007f32dd0404f5:   incl   (%rax)
  0x00007f32dd0404f7:   add    %bh,%bh
  0x00007f32dd0404f9:   incl   (%rax)
  0x00007f32dd0404fb:   add    %bh,%bh
  0x00007f32dd0404fd:   incl   (%rax)
  0x00007f32dd0404ff:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_32_bit_mask [0x00007f32dd040500, 0x00007f32dd040540] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040500:   (bad)  
  0x00007f32dd040501:   (bad)  
  0x00007f32dd040502:   (bad)  
  0x00007f32dd040503:   incl   (%rax)
  0x00007f32dd040505:   add    %al,(%rax)
  0x00007f32dd040507:   add    %al,(%rax)
  0x00007f32dd040509:   add    %al,(%rax)
  0x00007f32dd04050b:   add    %al,(%rax)
  0x00007f32dd04050d:   add    %al,(%rax)
  0x00007f32dd04050f:   add    %al,(%rax)
  0x00007f32dd040511:   add    %al,(%rax)
  0x00007f32dd040513:   add    %al,(%rax)
  0x00007f32dd040515:   add    %al,(%rax)
  0x00007f32dd040517:   add    %al,(%rax)
  0x00007f32dd040519:   add    %al,(%rax)
  0x00007f32dd04051b:   add    %al,(%rax)
  0x00007f32dd04051d:   add    %al,(%rax)
  0x00007f32dd04051f:   add    %al,(%rax)
  0x00007f32dd040521:   add    %al,(%rax)
  0x00007f32dd040523:   add    %al,(%rax)
  0x00007f32dd040525:   add    %al,(%rax)
  0x00007f32dd040527:   add    %al,(%rax)
  0x00007f32dd040529:   add    %al,(%rax)
  0x00007f32dd04052b:   add    %al,(%rax)
  0x00007f32dd04052d:   add    %al,(%rax)
  0x00007f32dd04052f:   add    %al,(%rax)
  0x00007f32dd040531:   add    %al,(%rax)
  0x00007f32dd040533:   add    %al,(%rax)
  0x00007f32dd040535:   add    %al,(%rax)
  0x00007f32dd040537:   add    %al,(%rax)
  0x00007f32dd040539:   add    %al,(%rax)
  0x00007f32dd04053b:   add    %al,(%rax)
  0x00007f32dd04053d:   add    %al,(%rax)
  0x00007f32dd04053f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_64_bit_mask [0x00007f32dd040540, 0x00007f32dd040580] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040540:   (bad)  
  0x00007f32dd040541:   (bad)  
  0x00007f32dd040542:   (bad)  
  0x00007f32dd040543:   (bad)  
  0x00007f32dd040544:   (bad)  
  0x00007f32dd040545:   (bad)  
  0x00007f32dd040546:   (bad)  
  0x00007f32dd040547:   incl   (%rax)
  0x00007f32dd040549:   add    %al,(%rax)
  0x00007f32dd04054b:   add    %al,(%rax)
  0x00007f32dd04054d:   add    %al,(%rax)
  0x00007f32dd04054f:   add    %al,(%rax)
  0x00007f32dd040551:   add    %al,(%rax)
  0x00007f32dd040553:   add    %al,(%rax)
  0x00007f32dd040555:   add    %al,(%rax)
  0x00007f32dd040557:   add    %al,(%rax)
  0x00007f32dd040559:   add    %al,(%rax)
  0x00007f32dd04055b:   add    %al,(%rax)
  0x00007f32dd04055d:   add    %al,(%rax)
  0x00007f32dd04055f:   add    %al,(%rax)
  0x00007f32dd040561:   add    %al,(%rax)
  0x00007f32dd040563:   add    %al,(%rax)
  0x00007f32dd040565:   add    %al,(%rax)
  0x00007f32dd040567:   add    %al,(%rax)
  0x00007f32dd040569:   add    %al,(%rax)
  0x00007f32dd04056b:   add    %al,(%rax)
  0x00007f32dd04056d:   add    %al,(%rax)
  0x00007f32dd04056f:   add    %al,(%rax)
  0x00007f32dd040571:   add    %al,(%rax)
  0x00007f32dd040573:   add    %al,(%rax)
  0x00007f32dd040575:   add    %al,(%rax)
  0x00007f32dd040577:   add    %al,(%rax)
  0x00007f32dd040579:   add    %al,(%rax)
  0x00007f32dd04057b:   add    %al,(%rax)
  0x00007f32dd04057d:   add    %al,(%rax)
  0x00007f32dd04057f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_shuffle_mask [0x00007f32dd040580, 0x00007f32dd0405c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040580:   add    %al,(%rcx)
  0x00007f32dd040582:   add    (%rbx),%al
  0x00007f32dd040584:   add    %al,(%rcx)
  0x00007f32dd040586:   add    (%rbx),%al
  0x00007f32dd040588:   add    %al,(%rcx)
  0x00007f32dd04058a:   add    (%rbx),%al
  0x00007f32dd04058c:   add    %al,(%rcx)
  0x00007f32dd04058e:   add    (%rbx),%al
  0x00007f32dd040590:   add    %al,(%rcx)
  0x00007f32dd040592:   add    (%rbx),%al
  0x00007f32dd040594:   add    %al,(%rcx)
  0x00007f32dd040596:   add    (%rbx),%al
  0x00007f32dd040598:   add    %al,(%rcx)
  0x00007f32dd04059a:   add    (%rbx),%al
  0x00007f32dd04059c:   add    %al,(%rcx)
  0x00007f32dd04059e:   add    (%rbx),%al
  0x00007f32dd0405a0:   add    %al,(%rcx)
  0x00007f32dd0405a2:   add    (%rbx),%al
  0x00007f32dd0405a4:   add    %al,(%rcx)
  0x00007f32dd0405a6:   add    (%rbx),%al
  0x00007f32dd0405a8:   add    %al,(%rcx)
  0x00007f32dd0405aa:   add    (%rbx),%al
  0x00007f32dd0405ac:   add    %al,(%rcx)
  0x00007f32dd0405ae:   add    (%rbx),%al
  0x00007f32dd0405b0:   add    %al,(%rcx)
  0x00007f32dd0405b2:   add    (%rbx),%al
  0x00007f32dd0405b4:   add    %al,(%rcx)
  0x00007f32dd0405b6:   add    (%rbx),%al
  0x00007f32dd0405b8:   add    %al,(%rcx)
  0x00007f32dd0405ba:   add    (%rbx),%al
  0x00007f32dd0405bc:   add    %al,(%rcx)
  0x00007f32dd0405be:   add    (%rbx),%al
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_byte_shuffle_mask [0x00007f32dd0405c0, 0x00007f32dd0405e0] (32 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0405c0:   jo     Stub::<unknown> 0x00007f32dd040632
  0x00007f32dd0405c2:   jo     Stub::<unknown> 0x00007f32dd040634
  0x00007f32dd0405c4:   jo     Stub::<unknown> 0x00007f32dd040636
  0x00007f32dd0405c6:   jo     Stub::<unknown> 0x00007f32dd040638
  0x00007f32dd0405c8:   jo     Stub::<unknown> 0x00007f32dd04063a
  0x00007f32dd0405ca:   jo     Stub::<unknown> 0x00007f32dd04063c
  0x00007f32dd0405cc:   jo     Stub::<unknown> 0x00007f32dd04063e
  0x00007f32dd0405ce:   jo     Stub::<unknown> 0x00007f32dd040640
  0x00007f32dd0405d0:   lock lock lock lock lock lock lock lock lock lock lock lock lock lock
  0x00007f32dd0405de:   lock
  0x00007f32dd0405df:   lock
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_short_shuffle_mask [0x00007f32dd0405e0, 0x00007f32dd040620] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0405e0:   add    %al,(%rcx)
  0x00007f32dd0405e2:   add    %al,(%rcx)
  0x00007f32dd0405e4:   add    %al,(%rcx)
  0x00007f32dd0405e6:   add    %al,(%rcx)
  0x00007f32dd0405e8:   add    %al,(%rcx)
  0x00007f32dd0405ea:   add    %al,(%rcx)
  0x00007f32dd0405ec:   add    %al,(%rcx)
  0x00007f32dd0405ee:   add    %al,(%rcx)
  0x00007f32dd0405f0:   add    %al,(%rcx)
  0x00007f32dd0405f2:   add    %al,(%rcx)
  0x00007f32dd0405f4:   add    %al,(%rcx)
  0x00007f32dd0405f6:   add    %al,(%rcx)
  0x00007f32dd0405f8:   add    %al,(%rcx)
  0x00007f32dd0405fa:   add    %al,(%rcx)
  0x00007f32dd0405fc:   add    %al,(%rcx)
  0x00007f32dd0405fe:   add    %al,(%rcx)
  0x00007f32dd040600:   add    %al,(%rcx)
  0x00007f32dd040602:   add    %al,(%rcx)
  0x00007f32dd040604:   add    %al,(%rcx)
  0x00007f32dd040606:   add    %al,(%rcx)
  0x00007f32dd040608:   add    %al,(%rcx)
  0x00007f32dd04060a:   add    %al,(%rcx)
  0x00007f32dd04060c:   add    %al,(%rcx)
  0x00007f32dd04060e:   add    %al,(%rcx)
  0x00007f32dd040610:   add    %al,(%rcx)
  0x00007f32dd040612:   add    %al,(%rcx)
  0x00007f32dd040614:   add    %al,(%rcx)
  0x00007f32dd040616:   add    %al,(%rcx)
  0x00007f32dd040618:   add    %al,(%rcx)
  0x00007f32dd04061a:   add    %al,(%rcx)
  0x00007f32dd04061c:   add    %al,(%rcx)
  0x00007f32dd04061e:   add    %al,(%rcx)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_long_shuffle_mask [0x00007f32dd040620, 0x00007f32dd040660] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040620:   add    %al,(%rax)
  0x00007f32dd040622:   add    %al,(%rax)
  0x00007f32dd040624:   add    %eax,(%rax)
  0x00007f32dd040626:   add    %al,(%rax)
  0x00007f32dd040628:   add    %al,(%rax)
  0x00007f32dd04062a:   add    %al,(%rax)
  0x00007f32dd04062c:   add    %eax,(%rax)
  0x00007f32dd04062e:   add    %al,(%rax)
  0x00007f32dd040630:   add    %al,(%rax)
  0x00007f32dd040632:   add    %al,(%rax)
  0x00007f32dd040634:   add    %eax,(%rax)
  0x00007f32dd040636:   add    %al,(%rax)
  0x00007f32dd040638:   add    %al,(%rax)
  0x00007f32dd04063a:   add    %al,(%rax)
  0x00007f32dd04063c:   add    %eax,(%rax)
  0x00007f32dd04063e:   add    %al,(%rax)
  0x00007f32dd040640:   add    %al,(%rax)
  0x00007f32dd040642:   add    %al,(%rax)
  0x00007f32dd040644:   add    %eax,(%rax)
  0x00007f32dd040646:   add    %al,(%rax)
  0x00007f32dd040648:   add    %al,(%rax)
  0x00007f32dd04064a:   add    %al,(%rax)
  0x00007f32dd04064c:   add    %eax,(%rax)
  0x00007f32dd04064e:   add    %al,(%rax)
  0x00007f32dd040650:   add    %al,(%rax)
  0x00007f32dd040652:   add    %al,(%rax)
  0x00007f32dd040654:   add    %eax,(%rax)
  0x00007f32dd040656:   add    %al,(%rax)
  0x00007f32dd040658:   add    %al,(%rax)
  0x00007f32dd04065a:   add    %al,(%rax)
  0x00007f32dd04065c:   add    %eax,(%rax)
  0x00007f32dd04065e:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_long_sign_mask [0x00007f32dd040660, 0x00007f32dd0406a0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040660:   add    %al,(%rax)
  0x00007f32dd040662:   add    %al,(%rax)
  0x00007f32dd040664:   add    %al,(%rax)
  0x00007f32dd040666:   add    %al,0x0(%rax)
  0x00007f32dd04066c:   add    %al,(%rax)
  0x00007f32dd04066e:   add    %al,0x0(%rax)
  0x00007f32dd040674:   add    %al,(%rax)
  0x00007f32dd040676:   add    %al,0x0(%rax)
  0x00007f32dd04067c:   add    %al,(%rax)
  0x00007f32dd04067e:   add    %al,0x0(%rax)
  0x00007f32dd040684:   add    %al,(%rax)
  0x00007f32dd040686:   add    %al,0x0(%rax)
  0x00007f32dd04068c:   add    %al,(%rax)
  0x00007f32dd04068e:   add    %al,0x0(%rax)
  0x00007f32dd040694:   add    %al,(%rax)
  0x00007f32dd040696:   add    %al,0x0(%rax)
  0x00007f32dd04069c:   add    %al,(%rax)
  0x00007f32dd04069e:   .byte 0x0
  0x00007f32dd04069f:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::iota_indices [0x00007f32dd0406a0, 0x00007f32dd040820] (384 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0406a0:   add    %al,(%rcx)
  0x00007f32dd0406a2:   add    (%rbx),%al
  0x00007f32dd0406a4:   add    $0x5,%al
  0x00007f32dd0406a6:   (bad)  
  0x00007f32dd0406a7:   (bad)  
  0x00007f32dd0406a8:   or     %cl,(%rcx)
  0x00007f32dd0406aa:   or     (%rbx),%cl
  0x00007f32dd0406ac:   or     $0xd,%al
  0x00007f32dd0406ae:   (bad)  
  0x00007f32dd0406af:   movups (%rcx),%xmm2
  0x00007f32dd0406b2:   adc    (%rbx),%dl
  0x00007f32dd0406b4:   adc    $0x15,%al
  0x00007f32dd0406b6:   (bad)  
  0x00007f32dd0406b7:   (bad)  
  0x00007f32dd0406b8:   sbb    %bl,(%rcx)
  0x00007f32dd0406ba:   sbb    (%rbx),%bl
  0x00007f32dd0406bc:   sbb    $0x1d,%al
  0x00007f32dd0406be:   (bad)  
  0x00007f32dd0406bf:   (bad)  
  0x00007f32dd0406c0:   and    %ah,(%rcx)
  0x00007f32dd0406c2:   and    (%rbx),%ah
  0x00007f32dd0406c4:   and    $0x25,%al
  0x00007f32dd0406c6:   es (bad) 
  0x00007f32dd0406c8:   sub    %ch,(%rcx)
  0x00007f32dd0406ca:   sub    (%rbx),%ch
  0x00007f32dd0406cc:   sub    $0x2d,%al
  0x00007f32dd0406ce:   cs (bad) 
  0x00007f32dd0406d0:   xor    %dh,(%rcx)
  0x00007f32dd0406d2:   xor    (%rbx),%dh
  0x00007f32dd0406d4:   xor    $0x35,%al
  0x00007f32dd0406d6:   ss (bad) 
  0x00007f32dd0406d8:   cmp    %bh,(%rcx)
  0x00007f32dd0406da:   cmp    (%rbx),%bh
  0x00007f32dd0406dc:   cmp    $0x3d,%al
  0x00007f32dd0406de:   ds (bad) 
  0x00007f32dd0406e0:   add    %al,(%rax)
  0x00007f32dd0406e2:   add    %eax,(%rax)
  0x00007f32dd0406e4:   add    (%rax),%al
  0x00007f32dd0406e6:   add    (%rax),%eax
  0x00007f32dd0406e8:   add    $0x0,%al
  0x00007f32dd0406ea:   add    $0x7000600,%eax
  0x00007f32dd0406ef:   add    %cl,(%rax)
  0x00007f32dd0406f1:   add    %cl,(%rcx)
  0x00007f32dd0406f3:   add    %cl,(%rdx)
  0x00007f32dd0406f5:   add    %cl,(%rbx)
  0x00007f32dd0406f7:   add    %cl,(%rax,%rax,1)
  0x00007f32dd0406fa:   or     $0xf000e00,%eax
  0x00007f32dd0406ff:   add    %dl,(%rax)
  0x00007f32dd040701:   add    %dl,(%rcx)
  0x00007f32dd040703:   add    %dl,(%rdx)
  0x00007f32dd040705:   add    %dl,(%rbx)
  0x00007f32dd040707:   add    %dl,(%rax,%rax,1)
  0x00007f32dd04070a:   adc    $0x17001600,%eax
  0x00007f32dd04070f:   add    %bl,(%rax)
  0x00007f32dd040711:   add    %bl,(%rcx)
  0x00007f32dd040713:   add    %bl,(%rdx)
  0x00007f32dd040715:   add    %bl,(%rbx)
  0x00007f32dd040717:   add    %bl,(%rax,%rax,1)
  0x00007f32dd04071a:   sbb    $0x1f001e00,%eax
  0x00007f32dd04071f:   add    %al,(%rax)
  0x00007f32dd040721:   add    %al,(%rax)
  0x00007f32dd040723:   add    %al,(%rcx)
  0x00007f32dd040725:   add    %al,(%rax)
  0x00007f32dd040727:   add    %al,(%rdx)
  0x00007f32dd040729:   add    %al,(%rax)
  0x00007f32dd04072b:   add    %al,(%rbx)
  0x00007f32dd04072d:   add    %al,(%rax)
  0x00007f32dd04072f:   add    %al,(%rax,%rax,1)
  0x00007f32dd040732:   add    %al,(%rax)
  0x00007f32dd040734:   add    $0x6000000,%eax
  0x00007f32dd040739:   add    %al,(%rax)
  0x00007f32dd04073b:   add    %al,(%rdi)
  0x00007f32dd04073d:   add    %al,(%rax)
  0x00007f32dd04073f:   add    %cl,(%rax)
  0x00007f32dd040741:   add    %al,(%rax)
  0x00007f32dd040743:   add    %cl,(%rcx)
  0x00007f32dd040745:   add    %al,(%rax)
  0x00007f32dd040747:   add    %cl,(%rdx)
  0x00007f32dd040749:   add    %al,(%rax)
  0x00007f32dd04074b:   add    %cl,(%rbx)
  0x00007f32dd04074d:   add    %al,(%rax)
  0x00007f32dd04074f:   add    %cl,(%rax,%rax,1)
  0x00007f32dd040752:   add    %al,(%rax)
  0x00007f32dd040754:   or     $0xe000000,%eax
  0x00007f32dd040759:   add    %al,(%rax)
  0x00007f32dd04075b:   add    %cl,(%rdi)
  0x00007f32dd04075d:   add    %al,(%rax)
  0x00007f32dd04075f:   add    %al,(%rax)
  0x00007f32dd040761:   add    %al,(%rax)
  0x00007f32dd040763:   add    %al,(%rax)
  0x00007f32dd040765:   add    %al,(%rax)
  0x00007f32dd040767:   add    %al,(%rcx)
  0x00007f32dd040769:   add    %al,(%rax)
  0x00007f32dd04076b:   add    %al,(%rax)
  0x00007f32dd04076d:   add    %al,(%rax)
  0x00007f32dd04076f:   add    %al,(%rdx)
  0x00007f32dd040771:   add    %al,(%rax)
  0x00007f32dd040773:   add    %al,(%rax)
  0x00007f32dd040775:   add    %al,(%rax)
  0x00007f32dd040777:   add    %al,(%rbx)
  0x00007f32dd040779:   add    %al,(%rax)
  0x00007f32dd04077b:   add    %al,(%rax)
  0x00007f32dd04077d:   add    %al,(%rax)
  0x00007f32dd04077f:   add    %al,(%rax,%rax,1)
  0x00007f32dd040782:   add    %al,(%rax)
  0x00007f32dd040784:   add    %al,(%rax)
  0x00007f32dd040786:   add    %al,(%rax)
  0x00007f32dd040788:   add    $0x0,%eax
  0x00007f32dd04078d:   add    %al,(%rax)
  0x00007f32dd04078f:   add    %al,(%rsi)
  0x00007f32dd040791:   add    %al,(%rax)
  0x00007f32dd040793:   add    %al,(%rax)
  0x00007f32dd040795:   add    %al,(%rax)
  0x00007f32dd040797:   add    %al,(%rdi)
  0x00007f32dd040799:   add    %al,(%rax)
  0x00007f32dd04079b:   add    %al,(%rax)
  0x00007f32dd04079d:   add    %al,(%rax)
  0x00007f32dd04079f:   add    %al,(%rax)
  0x00007f32dd0407a1:   add    %al,(%rax)
  0x00007f32dd0407a3:   add    %al,(%rax)
  0x00007f32dd0407a5:   add    %al,0x3f(%rax)
  0x00007f32dd0407ab:   add    %al,(%rax)
  0x00007f32dd0407ae:   rex
  0x00007f32dd0407af:   add    %al,(%rax)
  0x00007f32dd0407b2:   addb   $0x0,0x0(%rax)
  0x00007f32dd0407b6:   movabs 0xe0000040c0000040,%al
  0x00007f32dd0407bf:   add    %al,(%rax)
  0x00007f32dd0407c2:   add    %al,0x0(%rcx)
  0x00007f32dd0407c5:   add    %dl,(%rax)
  0x00007f32dd0407c7:   add    %al,(%r8)
  0x00007f32dd0407ca:   and    %al,0x0(%rcx)
  0x00007f32dd0407cd:   add    %dh,(%rax)
  0x00007f32dd0407cf:   add    %al,(%r8)
  0x00007f32dd0407d2:   rex
  0x00007f32dd0407d3:   add    %al,(%r8)
  0x00007f32dd0407d6:   push   %rax
  0x00007f32dd0407d7:   add    %al,(%r8)
  0x00007f32dd0407da:   (bad)  
  0x00007f32dd0407db:   add    %al,(%r8)
  0x00007f32dd0407de:   jo     Stub::<unknown> 0x00007f32dd040821
  0x00007f32dd0407e0:   add    %al,(%rax)
  0x00007f32dd0407e2:   add    %al,(%rax)
  0x00007f32dd0407e4:   add    %al,(%rax)
  0x00007f32dd0407e6:   add    %al,(%rax)
  0x00007f32dd0407e8:   add    %al,(%rax)
  0x00007f32dd0407ea:   add    %al,(%rax)
  0x00007f32dd0407ec:   add    %al,(%rax)
  0x00007f32dd0407ee:   lock (bad) 
  0x00007f32dd0407f0:   add    %al,(%rax)
  0x00007f32dd0407f2:   add    %al,(%rax)
  0x00007f32dd0407f4:   add    %al,(%rax)
  0x00007f32dd0407f6:   add    %al,0x0(%rax)
  0x00007f32dd0407f9:   add    %al,(%rax)
  0x00007f32dd0407fb:   add    %al,(%rax)
  0x00007f32dd0407fd:   add    %cl,(%rax)
  0x00007f32dd0407ff:   add    %al,(%rax)
  0x00007f32dd040802:   add    %al,(%rax)
  0x00007f32dd040804:   add    %al,(%rax)
  0x00007f32dd040806:   adc    %al,0x0(%rax)
  0x00007f32dd040809:   add    %al,(%rax)
  0x00007f32dd04080b:   add    %al,(%rax)
  0x00007f32dd04080d:   add    %dl,(%rax,%rax,2)
  0x00007f32dd040810:   add    %al,(%rax)
  0x00007f32dd040812:   add    %al,(%rax)
  0x00007f32dd040814:   add    %al,(%rax)
  0x00007f32dd040816:   sbb    %al,0x0(%rax)
  0x00007f32dd040819:   add    %al,(%rax)
  0x00007f32dd04081b:   add    %al,(%rax)
  0x00007f32dd04081d:   add    %bl,(%rax,%rax,2)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::count_leading_zeros_lut [0x00007f32dd040880, 0x00007f32dd0408c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040880:   add    $0x3,%al
  0x00007f32dd040882:   add    (%rdx),%al
  0x00007f32dd040884:   add    %eax,(%rcx)
  0x00007f32dd040886:   add    %eax,(%rcx)
  0x00007f32dd040888:   add    %al,(%rax)
  0x00007f32dd04088a:   add    %al,(%rax)
  0x00007f32dd04088c:   add    %al,(%rax)
  0x00007f32dd04088e:   add    %al,(%rax)
  0x00007f32dd040890:   add    $0x3,%al
  0x00007f32dd040892:   add    (%rdx),%al
  0x00007f32dd040894:   add    %eax,(%rcx)
  0x00007f32dd040896:   add    %eax,(%rcx)
  0x00007f32dd040898:   add    %al,(%rax)
  0x00007f32dd04089a:   add    %al,(%rax)
  0x00007f32dd04089c:   add    %al,(%rax)
  0x00007f32dd04089e:   add    %al,(%rax)
  0x00007f32dd0408a0:   add    $0x3,%al
  0x00007f32dd0408a2:   add    (%rdx),%al
  0x00007f32dd0408a4:   add    %eax,(%rcx)
  0x00007f32dd0408a6:   add    %eax,(%rcx)
  0x00007f32dd0408a8:   add    %al,(%rax)
  0x00007f32dd0408aa:   add    %al,(%rax)
  0x00007f32dd0408ac:   add    %al,(%rax)
  0x00007f32dd0408ae:   add    %al,(%rax)
  0x00007f32dd0408b0:   add    $0x3,%al
  0x00007f32dd0408b2:   add    (%rdx),%al
  0x00007f32dd0408b4:   add    %eax,(%rcx)
  0x00007f32dd0408b6:   add    %eax,(%rcx)
  0x00007f32dd0408b8:   add    %al,(%rax)
  0x00007f32dd0408ba:   add    %al,(%rax)
  0x00007f32dd0408bc:   add    %al,(%rax)
  0x00007f32dd0408be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::reverse_bit_lut [0x00007f32dd0408c0, 0x00007f32dd040900] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0408c0:   add    %cl,(%rax)
  0x00007f32dd0408c2:   add    $0xc,%al
  0x00007f32dd0408c4:   add    (%rdx),%cl
  0x00007f32dd0408c6:   (bad)  
  0x00007f32dd0408c7:   (bad)  
  0x00007f32dd0408c8:   add    %ecx,(%rcx)
  0x00007f32dd0408ca:   add    $0x70b030d,%eax
  0x00007f32dd0408cf:   str    (%rax)
  0x00007f32dd0408d2:   add    $0xc,%al
  0x00007f32dd0408d4:   add    (%rdx),%cl
  0x00007f32dd0408d6:   (bad)  
  0x00007f32dd0408d7:   (bad)  
  0x00007f32dd0408d8:   add    %ecx,(%rcx)
  0x00007f32dd0408da:   add    $0x70b030d,%eax
  0x00007f32dd0408df:   str    (%rax)
  0x00007f32dd0408e2:   add    $0xc,%al
  0x00007f32dd0408e4:   add    (%rdx),%cl
  0x00007f32dd0408e6:   (bad)  
  0x00007f32dd0408e7:   (bad)  
  0x00007f32dd0408e8:   add    %ecx,(%rcx)
  0x00007f32dd0408ea:   add    $0x70b030d,%eax
  0x00007f32dd0408ef:   str    (%rax)
  0x00007f32dd0408f2:   add    $0xc,%al
  0x00007f32dd0408f4:   add    (%rdx),%cl
  0x00007f32dd0408f6:   (bad)  
  0x00007f32dd0408f7:   (bad)  
  0x00007f32dd0408f8:   add    %ecx,(%rcx)
  0x00007f32dd0408fa:   add    $0x70b030d,%eax
  0x00007f32dd0408ff:   .byte 0xf
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_long [0x00007f32dd040900, 0x00007f32dd040940] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040900:   (bad)  
  0x00007f32dd040901:   (bad)  
  0x00007f32dd040902:   add    $0x1020304,%eax
  0x00007f32dd040907:   add    %cl,(%rdi)
  0x00007f32dd040909:   (bad)  
  0x00007f32dd04090a:   or     $0x90a0b0c,%eax
  0x00007f32dd04090f:   or     %al,(%rdi)
  0x00007f32dd040911:   (bad)  
  0x00007f32dd040912:   add    $0x1020304,%eax
  0x00007f32dd040917:   add    %cl,(%rdi)
  0x00007f32dd040919:   (bad)  
  0x00007f32dd04091a:   or     $0x90a0b0c,%eax
  0x00007f32dd04091f:   or     %al,(%rdi)
  0x00007f32dd040921:   (bad)  
  0x00007f32dd040922:   add    $0x1020304,%eax
  0x00007f32dd040927:   add    %cl,(%rdi)
  0x00007f32dd040929:   (bad)  
  0x00007f32dd04092a:   or     $0x90a0b0c,%eax
  0x00007f32dd04092f:   or     %al,(%rdi)
  0x00007f32dd040931:   (bad)  
  0x00007f32dd040932:   add    $0x1020304,%eax
  0x00007f32dd040937:   add    %cl,(%rdi)
  0x00007f32dd040939:   (bad)  
  0x00007f32dd04093a:   or     $0x90a0b0c,%eax
  0x00007f32dd04093f:   .byte 0x8
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_int [0x00007f32dd040940, 0x00007f32dd040980] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040940:   add    (%rdx),%eax
  0x00007f32dd040942:   add    %eax,(%rax)
  0x00007f32dd040944:   (bad)  
  0x00007f32dd040945:   (bad)  
  0x00007f32dd040946:   add    $0x90a0b04,%eax
  0x00007f32dd04094b:   or     %cl,(%rdi)
  0x00007f32dd04094d:   (bad)  
  0x00007f32dd04094e:   or     $0x102030c,%eax
  0x00007f32dd040953:   add    %al,(%rdi)
  0x00007f32dd040955:   (bad)  
  0x00007f32dd040956:   add    $0x90a0b04,%eax
  0x00007f32dd04095b:   or     %cl,(%rdi)
  0x00007f32dd04095d:   (bad)  
  0x00007f32dd04095e:   or     $0x102030c,%eax
  0x00007f32dd040963:   add    %al,(%rdi)
  0x00007f32dd040965:   (bad)  
  0x00007f32dd040966:   add    $0x90a0b04,%eax
  0x00007f32dd04096b:   or     %cl,(%rdi)
  0x00007f32dd04096d:   (bad)  
  0x00007f32dd04096e:   or     $0x102030c,%eax
  0x00007f32dd040973:   add    %al,(%rdi)
  0x00007f32dd040975:   (bad)  
  0x00007f32dd040976:   add    $0x90a0b04,%eax
  0x00007f32dd04097b:   or     %cl,(%rdi)
  0x00007f32dd04097d:   (bad)  
  0x00007f32dd04097e:   .byte 0xd
  0x00007f32dd04097f:   .byte 0xc
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_short [0x00007f32dd040980, 0x00007f32dd0409c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040980:   add    %eax,(%rax)
  0x00007f32dd040982:   add    (%rdx),%eax
  0x00007f32dd040984:   add    $0x9060704,%eax
  0x00007f32dd040989:   or     %cl,(%rbx)
  0x00007f32dd04098b:   or     0x10e0f0c(%rip),%cl        # 0x00007f32de12189d
  0x00007f32dd040991:   add    %al,(%rbx)
  0x00007f32dd040993:   add    0x9060704(%rip),%al        # 0x00007f32e60a109d = HashtableTextDump::put_utf8(outputStream*, char const*, int)+205
  0x00007f32dd040999:   or     %cl,(%rbx)
  0x00007f32dd04099b:   or     0x10e0f0c(%rip),%cl        # 0x00007f32de1218ad
  0x00007f32dd0409a1:   add    %al,(%rbx)
  0x00007f32dd0409a3:   add    0x9060704(%rip),%al        # 0x00007f32e60a10ad = HashtableTextDump::put_utf8(outputStream*, char const*, int)+221
  0x00007f32dd0409a9:   or     %cl,(%rbx)
  0x00007f32dd0409ab:   or     0x10e0f0c(%rip),%cl        # 0x00007f32de1218bd
  0x00007f32dd0409b1:   add    %al,(%rbx)
  0x00007f32dd0409b3:   add    0x9060704(%rip),%al        # 0x00007f32e60a10bd = HashtableTextDump::put_utf8(outputStream*, char const*, int)+237
  0x00007f32dd0409b9:   or     %cl,(%rbx)
  0x00007f32dd0409bb:   .byte 0xa
  0x00007f32dd0409bc:   .byte 0xd
  0x00007f32dd0409bd:   or     $0xf,%al
  0x00007f32dd0409bf:   (bad)  
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::popcount_lut [0x00007f32dd0409c0, 0x00007f32dd040a00] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0409c0:   add    %al,(%rcx)
  0x00007f32dd0409c2:   add    %eax,(%rdx)
  0x00007f32dd0409c4:   add    %eax,(%rdx)
  0x00007f32dd0409c6:   add    (%rbx),%al
  0x00007f32dd0409c8:   add    %eax,(%rdx)
  0x00007f32dd0409ca:   add    (%rbx),%al
  0x00007f32dd0409cc:   add    (%rbx),%al
  0x00007f32dd0409ce:   add    (%rax,%rax,1),%eax
  0x00007f32dd0409d1:   add    %eax,(%rcx)
  0x00007f32dd0409d3:   add    (%rcx),%al
  0x00007f32dd0409d5:   add    (%rdx),%al
  0x00007f32dd0409d7:   add    (%rcx),%eax
  0x00007f32dd0409d9:   add    (%rdx),%al
  0x00007f32dd0409db:   add    (%rdx),%eax
  0x00007f32dd0409dd:   add    (%rbx),%eax
  0x00007f32dd0409df:   add    $0x0,%al
  0x00007f32dd0409e1:   add    %eax,(%rcx)
  0x00007f32dd0409e3:   add    (%rcx),%al
  0x00007f32dd0409e5:   add    (%rdx),%al
  0x00007f32dd0409e7:   add    (%rcx),%eax
  0x00007f32dd0409e9:   add    (%rdx),%al
  0x00007f32dd0409eb:   add    (%rdx),%eax
  0x00007f32dd0409ed:   add    (%rbx),%eax
  0x00007f32dd0409ef:   add    $0x0,%al
  0x00007f32dd0409f1:   add    %eax,(%rcx)
  0x00007f32dd0409f3:   add    (%rcx),%al
  0x00007f32dd0409f5:   add    (%rdx),%al
  0x00007f32dd0409f7:   add    (%rcx),%eax
  0x00007f32dd0409f9:   add    (%rdx),%al
  0x00007f32dd0409fb:   add    (%rdx),%eax
  0x00007f32dd0409fd:   add    (%rbx),%eax
  0x00007f32dd0409ff:   .byte 0x4
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::_data_cache_writeback [0x00007f32dd040a00, 0x00007f32dd040a0a] (10 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040a00:   push   %rbp
  0x00007f32dd040a01:   mov    %rsp,%rbp
  0x00007f32dd040a04:   clwb   (%rdi)
  0x00007f32dd040a08:   leaveq 
  0x00007f32dd040a09:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::_data_cache_writeback_sync [0x00007f32dd040a20, 0x00007f32dd040a32] (18 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040a20:   push   %rbp
  0x00007f32dd040a21:   mov    %rsp,%rbp
  0x00007f32dd040a24:   cmp    $0x0,%edi
  0x00007f32dd040a27:   jne    Stub::_data_cache_writeback_sync+16 0x00007f32dd040a30
  0x00007f32dd040a2d:   sfence 
  0x00007f32dd040a30:   leaveq 
  0x00007f32dd040a31:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_disjoint_arraycopy [0x00007f32dd040a40, 0x00007f32dd040af3] (179 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040a40:   push   %rbp
  0x00007f32dd040a41:   mov    %rsp,%rbp
  0x00007f32dd040a44:   mov    %rdx,%rcx
  0x00007f32dd040a47:   shr    $0x3,%rdx
  0x00007f32dd040a4b:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f32dd040a50:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f32dd040a55:   neg    %rdx
  0x00007f32dd040a58:   jmpq   Stub::jbyte_disjoint_arraycopy+136 0x00007f32dd040ac8
  0x00007f32dd040a5d:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f32dd040a62:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f32dd040a67:   inc    %rdx
  0x00007f32dd040a6a:   jne    Stub::jbyte_disjoint_arraycopy+29 0x00007f32dd040a5d
  0x00007f32dd040a6c:   test   $0x4,%cl
  0x00007f32dd040a6f:   je     Stub::jbyte_disjoint_arraycopy+63 0x00007f32dd040a7f
  0x00007f32dd040a71:   mov    0x8(%rdi),%eax
  0x00007f32dd040a74:   mov    %eax,0x8(%rsi)
  0x00007f32dd040a77:   add    $0x4,%rdi
  0x00007f32dd040a7b:   add    $0x4,%rsi
  0x00007f32dd040a7f:   test   $0x2,%cl
  0x00007f32dd040a82:   je     Stub::jbyte_disjoint_arraycopy+84 0x00007f32dd040a94
  0x00007f32dd040a84:   mov    0x8(%rdi),%ax
  0x00007f32dd040a88:   mov    %ax,0x8(%rsi)
  0x00007f32dd040a8c:   add    $0x2,%rdi
  0x00007f32dd040a90:   add    $0x2,%rsi
  0x00007f32dd040a94:   test   $0x1,%cl
  0x00007f32dd040a97:   je     Stub::jbyte_disjoint_arraycopy+95 0x00007f32dd040a9f
  0x00007f32dd040a99:   mov    0x8(%rdi),%al
  0x00007f32dd040a9c:   mov    %al,0x8(%rsi)
  0x00007f32dd040a9f:   xor    %rax,%rax
  0x00007f32dd040aa2:   vzeroupper 
  0x00007f32dd040aa5:   leaveq 
  0x00007f32dd040aa6:   retq   
  0x00007f32dd040aa7:   nopw   0x0(%rax,%rax,1)
  0x00007f32dd040ab0:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f32dd040ab6:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f32dd040abc:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f32dd040ac2:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f32dd040ac8:   add    $0x8,%rdx
  0x00007f32dd040acc:   jle    Stub::jbyte_disjoint_arraycopy+112 0x00007f32dd040ab0
  0x00007f32dd040ace:   sub    $0x4,%rdx
  0x00007f32dd040ad2:   jg     Stub::jbyte_disjoint_arraycopy+164 0x00007f32dd040ae4
  0x00007f32dd040ad4:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f32dd040ada:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f32dd040ae0:   add    $0x4,%rdx
  0x00007f32dd040ae4:   sub    $0x4,%rdx
  0x00007f32dd040ae8:   jl     Stub::jbyte_disjoint_arraycopy+29 0x00007f32dd040a5d
  0x00007f32dd040aee:   jmpq   Stub::jbyte_disjoint_arraycopy+44 0x00007f32dd040a6c
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_arraycopy [0x00007f32dd040b00, 0x00007f32dd040bbe] (190 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040b00:   push   %rbp
  0x00007f32dd040b01:   mov    %rsp,%rbp
  0x00007f32dd040b04:   cmp    %rdi,%rsi
  0x00007f32dd040b07:   lea    (%rdi,%rdx,1),%rax
  0x00007f32dd040b0b:   jbe    Stub::jbyte_disjoint_arraycopy+4 0x00007f32dd040a44
  0x00007f32dd040b11:   cmp    %rax,%rsi
  0x00007f32dd040b14:   jae    Stub::jbyte_disjoint_arraycopy+4 0x00007f32dd040a44
  0x00007f32dd040b1a:   mov    %rdx,%rcx
  0x00007f32dd040b1d:   shr    $0x3,%rdx
  0x00007f32dd040b21:   test   $0x1,%cl
  0x00007f32dd040b24:   je     Stub::jbyte_arraycopy+53 0x00007f32dd040b35
  0x00007f32dd040b2a:   mov    -0x1(%rdi,%rcx,1),%al
  0x00007f32dd040b2e:   mov    %al,-0x1(%rsi,%rcx,1)
  0x00007f32dd040b32:   dec    %rcx
  0x00007f32dd040b35:   test   $0x2,%cl
  0x00007f32dd040b38:   je     Stub::jbyte_arraycopy+72 0x00007f32dd040b48
  0x00007f32dd040b3e:   mov    -0x2(%rdi,%rcx,1),%ax
  0x00007f32dd040b43:   mov    %ax,-0x2(%rsi,%rcx,1)
  0x00007f32dd040b48:   test   $0x4,%cl
  0x00007f32dd040b4b:   je     Stub::jbyte_arraycopy+150 0x00007f32dd040b96
  0x00007f32dd040b51:   mov    (%rdi,%rdx,8),%eax
  0x00007f32dd040b54:   mov    %eax,(%rsi,%rdx,8)
  0x00007f32dd040b57:   jmpq   Stub::jbyte_arraycopy+150 0x00007f32dd040b96
  0x00007f32dd040b5c:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f32dd040b61:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f32dd040b66:   dec    %rdx
  0x00007f32dd040b69:   jne    Stub::jbyte_arraycopy+92 0x00007f32dd040b5c
  0x00007f32dd040b6b:   xor    %rax,%rax
  0x00007f32dd040b6e:   vzeroupper 
  0x00007f32dd040b71:   leaveq 
  0x00007f32dd040b72:   retq   
  0x00007f32dd040b73:   nopw   0x0(%rax,%rax,1)
  0x00007f32dd040b7c:   data16 data16 xchg %ax,%ax
  0x00007f32dd040b80:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f32dd040b86:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f32dd040b8c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f32dd040b91:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f32dd040b96:   sub    $0x8,%rdx
  0x00007f32dd040b9a:   jge    Stub::jbyte_arraycopy+128 0x00007f32dd040b80
  0x00007f32dd040b9c:   add    $0x4,%rdx
  0x00007f32dd040ba0:   jl     Stub::jbyte_arraycopy+176 0x00007f32dd040bb0
  0x00007f32dd040ba2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f32dd040ba7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f32dd040bac:   sub    $0x4,%rdx
  0x00007f32dd040bb0:   add    $0x4,%rdx
  0x00007f32dd040bb4:   jg     Stub::jbyte_arraycopy+92 0x00007f32dd040b5c
  0x00007f32dd040bb6:   xor    %rax,%rax
  0x00007f32dd040bb9:   vzeroupper 
  0x00007f32dd040bbc:   leaveq 
  0x00007f32dd040bbd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_disjoint_arraycopy [0x00007f32dd040bc0, 0x00007f32dd040c5c] (156 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040bc0:   push   %rbp
  0x00007f32dd040bc1:   mov    %rsp,%rbp
  0x00007f32dd040bc4:   mov    %rdx,%rcx
  0x00007f32dd040bc7:   shr    $0x2,%rdx
  0x00007f32dd040bcb:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f32dd040bd0:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f32dd040bd5:   neg    %rdx
  0x00007f32dd040bd8:   jmpq   Stub::jshort_disjoint_arraycopy+120 0x00007f32dd040c38
  0x00007f32dd040bdd:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f32dd040be2:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f32dd040be7:   inc    %rdx
  0x00007f32dd040bea:   jne    Stub::jshort_disjoint_arraycopy+29 0x00007f32dd040bdd
  0x00007f32dd040bec:   test   $0x2,%cl
  0x00007f32dd040bef:   je     Stub::jshort_disjoint_arraycopy+63 0x00007f32dd040bff
  0x00007f32dd040bf1:   mov    0x8(%rdi),%eax
  0x00007f32dd040bf4:   mov    %eax,0x8(%rsi)
  0x00007f32dd040bf7:   add    $0x4,%rdi
  0x00007f32dd040bfb:   add    $0x4,%rsi
  0x00007f32dd040bff:   test   $0x1,%cl
  0x00007f32dd040c02:   je     Stub::jshort_disjoint_arraycopy+76 0x00007f32dd040c0c
  0x00007f32dd040c04:   mov    0x8(%rdi),%ax
  0x00007f32dd040c08:   mov    %ax,0x8(%rsi)
  0x00007f32dd040c0c:   xor    %rax,%rax
  0x00007f32dd040c0f:   vzeroupper 
  0x00007f32dd040c12:   leaveq 
  0x00007f32dd040c13:   retq   
  0x00007f32dd040c14:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd040c1c:   data16 data16 xchg %ax,%ax
  0x00007f32dd040c20:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f32dd040c26:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f32dd040c2c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f32dd040c32:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f32dd040c38:   add    $0x8,%rdx
  0x00007f32dd040c3c:   jle    Stub::jshort_disjoint_arraycopy+96 0x00007f32dd040c20
  0x00007f32dd040c3e:   sub    $0x4,%rdx
  0x00007f32dd040c42:   jg     Stub::jshort_disjoint_arraycopy+148 0x00007f32dd040c54
  0x00007f32dd040c44:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f32dd040c4a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f32dd040c50:   add    $0x4,%rdx
  0x00007f32dd040c54:   sub    $0x4,%rdx
  0x00007f32dd040c58:   jl     Stub::jshort_disjoint_arraycopy+29 0x00007f32dd040bdd
  0x00007f32dd040c5a:   jmp    Stub::jshort_disjoint_arraycopy+44 0x00007f32dd040bec
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_arraycopy [0x00007f32dd040c60, 0x00007f32dd040cfe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040c60:   push   %rbp
  0x00007f32dd040c61:   mov    %rsp,%rbp
  0x00007f32dd040c64:   cmp    %rdi,%rsi
  0x00007f32dd040c67:   lea    (%rdi,%rdx,2),%rax
  0x00007f32dd040c6b:   jbe    Stub::jshort_disjoint_arraycopy+4 0x00007f32dd040bc4
  0x00007f32dd040c71:   cmp    %rax,%rsi
  0x00007f32dd040c74:   jae    Stub::jshort_disjoint_arraycopy+4 0x00007f32dd040bc4
  0x00007f32dd040c7a:   mov    %rdx,%rcx
  0x00007f32dd040c7d:   shr    $0x2,%rdx
  0x00007f32dd040c81:   test   $0x1,%cl
  0x00007f32dd040c84:   je     Stub::jshort_arraycopy+48 0x00007f32dd040c90
  0x00007f32dd040c86:   mov    -0x2(%rdi,%rcx,2),%ax
  0x00007f32dd040c8b:   mov    %ax,-0x2(%rsi,%rcx,2)
  0x00007f32dd040c90:   test   $0x2,%cl
  0x00007f32dd040c93:   je     Stub::jshort_arraycopy+118 0x00007f32dd040cd6
  0x00007f32dd040c99:   mov    (%rdi,%rdx,8),%eax
  0x00007f32dd040c9c:   mov    %eax,(%rsi,%rdx,8)
  0x00007f32dd040c9f:   jmpq   Stub::jshort_arraycopy+118 0x00007f32dd040cd6
  0x00007f32dd040ca4:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f32dd040ca9:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f32dd040cae:   dec    %rdx
  0x00007f32dd040cb1:   jne    Stub::jshort_arraycopy+68 0x00007f32dd040ca4
  0x00007f32dd040cb3:   xor    %rax,%rax
  0x00007f32dd040cb6:   vzeroupper 
  0x00007f32dd040cb9:   leaveq 
  0x00007f32dd040cba:   retq   
  0x00007f32dd040cbb:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd040cc0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f32dd040cc6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f32dd040ccc:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f32dd040cd1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f32dd040cd6:   sub    $0x8,%rdx
  0x00007f32dd040cda:   jge    Stub::jshort_arraycopy+96 0x00007f32dd040cc0
  0x00007f32dd040cdc:   add    $0x4,%rdx
  0x00007f32dd040ce0:   jl     Stub::jshort_arraycopy+144 0x00007f32dd040cf0
  0x00007f32dd040ce2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f32dd040ce7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f32dd040cec:   sub    $0x4,%rdx
  0x00007f32dd040cf0:   add    $0x4,%rdx
  0x00007f32dd040cf4:   jg     Stub::jshort_arraycopy+68 0x00007f32dd040ca4
  0x00007f32dd040cf6:   xor    %rax,%rax
  0x00007f32dd040cf9:   vzeroupper 
  0x00007f32dd040cfc:   leaveq 
  0x00007f32dd040cfd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_disjoint_arraycopy [0x00007f32dd040d00, 0x00007f32dd040d7c] (124 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040d00:   push   %rbp
  0x00007f32dd040d01:   mov    %rsp,%rbp
  0x00007f32dd040d04:   mov    %rdx,%rcx
  0x00007f32dd040d07:   shr    %rdx
  0x00007f32dd040d0a:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f32dd040d0f:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f32dd040d14:   neg    %rdx
  0x00007f32dd040d17:   jmpq   Stub::jint_disjoint_arraycopy+88 0x00007f32dd040d58
  0x00007f32dd040d1c:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f32dd040d21:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f32dd040d26:   inc    %rdx
  0x00007f32dd040d29:   jne    Stub::jint_disjoint_arraycopy+28 0x00007f32dd040d1c
  0x00007f32dd040d2b:   test   $0x1,%cl
  0x00007f32dd040d2e:   je     Stub::jint_disjoint_arraycopy+54 0x00007f32dd040d36
  0x00007f32dd040d30:   mov    0x8(%rdi),%eax
  0x00007f32dd040d33:   mov    %eax,0x8(%rsi)
  0x00007f32dd040d36:   vzeroupper 
  0x00007f32dd040d39:   xor    %rax,%rax
  0x00007f32dd040d3c:   leaveq 
  0x00007f32dd040d3d:   retq   
  0x00007f32dd040d3e:   xchg   %ax,%ax
  0x00007f32dd040d40:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f32dd040d46:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f32dd040d4c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f32dd040d52:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f32dd040d58:   add    $0x8,%rdx
  0x00007f32dd040d5c:   jle    Stub::jint_disjoint_arraycopy+64 0x00007f32dd040d40
  0x00007f32dd040d5e:   sub    $0x4,%rdx
  0x00007f32dd040d62:   jg     Stub::jint_disjoint_arraycopy+116 0x00007f32dd040d74
  0x00007f32dd040d64:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f32dd040d6a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f32dd040d70:   add    $0x4,%rdx
  0x00007f32dd040d74:   sub    $0x4,%rdx
  0x00007f32dd040d78:   jl     Stub::jint_disjoint_arraycopy+28 0x00007f32dd040d1c
  0x00007f32dd040d7a:   jmp    Stub::jint_disjoint_arraycopy+43 0x00007f32dd040d2b
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_arraycopy [0x00007f32dd040d80, 0x00007f32dd040e0e] (142 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040d80:   push   %rbp
  0x00007f32dd040d81:   mov    %rsp,%rbp
  0x00007f32dd040d84:   cmp    %rdi,%rsi
  0x00007f32dd040d87:   lea    (%rdi,%rdx,4),%rax
  0x00007f32dd040d8b:   jbe    Stub::jint_disjoint_arraycopy+4 0x00007f32dd040d04
  0x00007f32dd040d91:   cmp    %rax,%rsi
  0x00007f32dd040d94:   jae    Stub::jint_disjoint_arraycopy+4 0x00007f32dd040d04
  0x00007f32dd040d9a:   mov    %rdx,%rcx
  0x00007f32dd040d9d:   shr    %rdx
  0x00007f32dd040da0:   test   $0x1,%cl
  0x00007f32dd040da3:   je     Stub::jint_arraycopy+102 0x00007f32dd040de6
  0x00007f32dd040da9:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f32dd040dad:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f32dd040db1:   jmpq   Stub::jint_arraycopy+102 0x00007f32dd040de6
  0x00007f32dd040db6:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f32dd040dbb:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f32dd040dc0:   dec    %rdx
  0x00007f32dd040dc3:   jne    Stub::jint_arraycopy+54 0x00007f32dd040db6
  0x00007f32dd040dc5:   xor    %rax,%rax
  0x00007f32dd040dc8:   vzeroupper 
  0x00007f32dd040dcb:   leaveq 
  0x00007f32dd040dcc:   retq   
  0x00007f32dd040dcd:   data16 xchg %ax,%ax
  0x00007f32dd040dd0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f32dd040dd6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f32dd040ddc:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f32dd040de1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f32dd040de6:   sub    $0x8,%rdx
  0x00007f32dd040dea:   jge    Stub::jint_arraycopy+80 0x00007f32dd040dd0
  0x00007f32dd040dec:   add    $0x4,%rdx
  0x00007f32dd040df0:   jl     Stub::jint_arraycopy+128 0x00007f32dd040e00
  0x00007f32dd040df2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f32dd040df7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f32dd040dfc:   sub    $0x4,%rdx
  0x00007f32dd040e00:   add    $0x4,%rdx
  0x00007f32dd040e04:   jg     Stub::jint_arraycopy+54 0x00007f32dd040db6
  0x00007f32dd040e06:   xor    %rax,%rax
  0x00007f32dd040e09:   vzeroupper 
  0x00007f32dd040e0c:   leaveq 
  0x00007f32dd040e0d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jlong_disjoint_arraycopy [0x00007f32dd040e20, 0x00007f32dd040e92] (114 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040e20:   push   %rbp
  0x00007f32dd040e21:   mov    %rsp,%rbp
  0x00007f32dd040e24:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f32dd040e29:   lea    -0x8(%rsi,%rdx,8),%rcx
  0x00007f32dd040e2e:   neg    %rdx
  0x00007f32dd040e31:   jmpq   Stub::jlong_disjoint_arraycopy+72 0x00007f32dd040e68
  0x00007f32dd040e36:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f32dd040e3b:   mov    %rax,0x8(%rcx,%rdx,8)
  0x00007f32dd040e40:   inc    %rdx
  0x00007f32dd040e43:   jne    Stub::jlong_disjoint_arraycopy+22 0x00007f32dd040e36
  0x00007f32dd040e45:   xor    %rax,%rax
  0x00007f32dd040e48:   vzeroupper 
  0x00007f32dd040e4b:   leaveq 
  0x00007f32dd040e4c:   retq   
  0x00007f32dd040e4d:   data16 xchg %ax,%ax
  0x00007f32dd040e50:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f32dd040e56:   vmovdqu %ymm0,-0x38(%rcx,%rdx,8)
  0x00007f32dd040e5c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f32dd040e62:   vmovdqu %ymm1,-0x18(%rcx,%rdx,8)
  0x00007f32dd040e68:   add    $0x8,%rdx
  0x00007f32dd040e6c:   jle    Stub::jlong_disjoint_arraycopy+48 0x00007f32dd040e50
  0x00007f32dd040e6e:   sub    $0x4,%rdx
  0x00007f32dd040e72:   jg     Stub::jlong_disjoint_arraycopy+100 0x00007f32dd040e84
  0x00007f32dd040e74:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f32dd040e7a:   vmovdqu %ymm0,-0x18(%rcx,%rdx,8)
  0x00007f32dd040e80:   add    $0x4,%rdx
  0x00007f32dd040e84:   sub    $0x4,%rdx
  0x00007f32dd040e88:   jl     Stub::jlong_disjoint_arraycopy+22 0x00007f32dd040e36
  0x00007f32dd040e8a:   vzeroupper 
  0x00007f32dd040e8d:   xor    %rax,%rax
  0x00007f32dd040e90:   leaveq 
  0x00007f32dd040e91:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jlong_arraycopy [0x00007f32dd040ea0, 0x00007f32dd040f1e] (126 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040ea0:   push   %rbp
  0x00007f32dd040ea1:   mov    %rsp,%rbp
  0x00007f32dd040ea4:   cmp    %rdi,%rsi
  0x00007f32dd040ea7:   lea    (%rdi,%rdx,8),%rax
  0x00007f32dd040eab:   jbe    Stub::jlong_disjoint_arraycopy+4 0x00007f32dd040e24
  0x00007f32dd040eb1:   cmp    %rax,%rsi
  0x00007f32dd040eb4:   jae    Stub::jlong_disjoint_arraycopy+4 0x00007f32dd040e24
  0x00007f32dd040eba:   jmpq   Stub::jlong_arraycopy+86 0x00007f32dd040ef6
  0x00007f32dd040ebf:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f32dd040ec4:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f32dd040ec9:   dec    %rdx
  0x00007f32dd040ecc:   jne    Stub::jlong_arraycopy+31 0x00007f32dd040ebf
  0x00007f32dd040ece:   xor    %rax,%rax
  0x00007f32dd040ed1:   vzeroupper 
  0x00007f32dd040ed4:   leaveq 
  0x00007f32dd040ed5:   retq   
  0x00007f32dd040ed6:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd040ee0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f32dd040ee6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f32dd040eec:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f32dd040ef1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f32dd040ef6:   sub    $0x8,%rdx
  0x00007f32dd040efa:   jge    Stub::jlong_arraycopy+64 0x00007f32dd040ee0
  0x00007f32dd040efc:   add    $0x4,%rdx
  0x00007f32dd040f00:   jl     Stub::jlong_arraycopy+112 0x00007f32dd040f10
  0x00007f32dd040f02:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f32dd040f07:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f32dd040f0c:   sub    $0x4,%rdx
  0x00007f32dd040f10:   add    $0x4,%rdx
  0x00007f32dd040f14:   jg     Stub::jlong_arraycopy+31 0x00007f32dd040ebf
  0x00007f32dd040f16:   vzeroupper 
  0x00007f32dd040f19:   xor    %rax,%rax
  0x00007f32dd040f1c:   leaveq 
  0x00007f32dd040f1d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_disjoint_arraycopy [0x00007f32dd040f20, 0x00007f32dd0410c3] (419 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd040f20:   push   %rbp
  0x00007f32dd040f21:   mov    %rsp,%rbp
  0x00007f32dd040f24:   mov    %rsi,%r11
  0x00007f32dd040f27:   cmpb   $0x0,0x40(%r15)
  0x00007f32dd040f2c:   je     Stub::oop_disjoint_arraycopy+156 0x00007f32dd040fbc
  0x00007f32dd040f32:   sub    $0x50,%rsp
  0x00007f32dd040f36:   mov    %rax,(%rsp)
  0x00007f32dd040f3a:   mov    %rcx,0x8(%rsp)
  0x00007f32dd040f3f:   mov    %rdx,0x10(%rsp)
  0x00007f32dd040f44:   mov    %rsi,0x18(%rsp)
  0x00007f32dd040f49:   mov    %rdi,0x20(%rsp)
  0x00007f32dd040f4e:   mov    %r8,0x28(%rsp)
  0x00007f32dd040f53:   mov    %r9,0x30(%rsp)
  0x00007f32dd040f58:   mov    %r10,0x38(%rsp)
  0x00007f32dd040f5d:   mov    %r11,0x40(%rsp)
  0x00007f32dd040f62:   mov    %rsi,%rdi
  0x00007f32dd040f65:   mov    %rdx,%rsi
  0x00007f32dd040f68:   test   $0xf,%spl
  0x00007f32dd040f6c:   je     Stub::oop_disjoint_arraycopy+100 0x00007f32dd040f84
  0x00007f32dd040f72:   sub    $0x8,%rsp
  0x00007f32dd040f76:   callq  0x00007f32e6202d00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f32dd040f7b:   add    $0x8,%rsp
  0x00007f32dd040f7f:   jmpq   Stub::oop_disjoint_arraycopy+105 0x00007f32dd040f89
  0x00007f32dd040f84:   callq  0x00007f32e6202d00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f32dd040f89:   mov    0x40(%rsp),%r11
  0x00007f32dd040f8e:   mov    0x38(%rsp),%r10
  0x00007f32dd040f93:   mov    0x30(%rsp),%r9
  0x00007f32dd040f98:   mov    0x28(%rsp),%r8
  0x00007f32dd040f9d:   mov    0x20(%rsp),%rdi
  0x00007f32dd040fa2:   mov    0x18(%rsp),%rsi
  0x00007f32dd040fa7:   mov    0x10(%rsp),%rdx
  0x00007f32dd040fac:   mov    0x8(%rsp),%rcx
  0x00007f32dd040fb1:   mov    (%rsp),%rax
  0x00007f32dd040fb5:   add    $0x50,%rsp
  0x00007f32dd040fb9:   vzeroupper 
  0x00007f32dd040fbc:   mov    %rdx,%rcx
  0x00007f32dd040fbf:   shr    %rdx
  0x00007f32dd040fc2:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f32dd040fc7:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f32dd040fcc:   neg    %rdx
  0x00007f32dd040fcf:   jmpq   Stub::oop_disjoint_arraycopy+376 0x00007f32dd041098
  0x00007f32dd040fd4:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f32dd040fd9:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f32dd040fde:   inc    %rdx
  0x00007f32dd040fe1:   jne    Stub::oop_disjoint_arraycopy+180 0x00007f32dd040fd4
  0x00007f32dd040fe3:   test   $0x1,%cl
  0x00007f32dd040fe6:   je     Stub::oop_disjoint_arraycopy+206 0x00007f32dd040fee
  0x00007f32dd040fe8:   mov    0x8(%rdi),%eax
  0x00007f32dd040feb:   mov    %eax,0x8(%rsi)
  0x00007f32dd040fee:   sub    $0x50,%rsp
  0x00007f32dd040ff2:   mov    %rax,(%rsp)
  0x00007f32dd040ff6:   mov    %rcx,0x8(%rsp)
  0x00007f32dd040ffb:   mov    %rdx,0x10(%rsp)
  0x00007f32dd041000:   mov    %rsi,0x18(%rsp)
  0x00007f32dd041005:   mov    %rdi,0x20(%rsp)
  0x00007f32dd04100a:   mov    %r8,0x28(%rsp)
  0x00007f32dd04100f:   mov    %r9,0x30(%rsp)
  0x00007f32dd041014:   mov    %r10,0x38(%rsp)
  0x00007f32dd041019:   mov    %r11,0x40(%rsp)
  0x00007f32dd04101e:   mov    %r11,%rdi
  0x00007f32dd041021:   mov    %rcx,%rsi
  0x00007f32dd041024:   test   $0xf,%spl
  0x00007f32dd041028:   je     Stub::oop_disjoint_arraycopy+288 0x00007f32dd041040
  0x00007f32dd04102e:   sub    $0x8,%rsp
  0x00007f32dd041032:   callq  0x00007f32e6202d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f32dd041037:   add    $0x8,%rsp
  0x00007f32dd04103b:   jmpq   Stub::oop_disjoint_arraycopy+293 0x00007f32dd041045
  0x00007f32dd041040:   callq  0x00007f32e6202d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f32dd041045:   mov    0x40(%rsp),%r11
  0x00007f32dd04104a:   mov    0x38(%rsp),%r10
  0x00007f32dd04104f:   mov    0x30(%rsp),%r9
  0x00007f32dd041054:   mov    0x28(%rsp),%r8
  0x00007f32dd041059:   mov    0x20(%rsp),%rdi
  0x00007f32dd04105e:   mov    0x18(%rsp),%rsi
  0x00007f32dd041063:   mov    0x10(%rsp),%rdx
  0x00007f32dd041068:   mov    0x8(%rsp),%rcx
  0x00007f32dd04106d:   mov    (%rsp),%rax
  0x00007f32dd041071:   add    $0x50,%rsp
  0x00007f32dd041075:   vzeroupper 
  0x00007f32dd041078:   vzeroupper 
  0x00007f32dd04107b:   xor    %rax,%rax
  0x00007f32dd04107e:   leaveq 
  0x00007f32dd04107f:   retq   
  0x00007f32dd041080:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f32dd041086:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f32dd04108c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f32dd041092:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f32dd041098:   add    $0x8,%rdx
  0x00007f32dd04109c:   jle    Stub::oop_disjoint_arraycopy+352 0x00007f32dd041080
  0x00007f32dd04109e:   sub    $0x4,%rdx
  0x00007f32dd0410a2:   jg     Stub::oop_disjoint_arraycopy+404 0x00007f32dd0410b4
  0x00007f32dd0410a4:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f32dd0410aa:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f32dd0410b0:   add    $0x4,%rdx
  0x00007f32dd0410b4:   sub    $0x4,%rdx
  0x00007f32dd0410b8:   jl     Stub::oop_disjoint_arraycopy+180 0x00007f32dd040fd4
  0x00007f32dd0410be:   jmpq   Stub::oop_disjoint_arraycopy+195 0x00007f32dd040fe3
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_arraycopy [0x00007f32dd0410e0, 0x00007f32dd041298] (440 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0410e0:   push   %rbp
  0x00007f32dd0410e1:   mov    %rsp,%rbp
  0x00007f32dd0410e4:   cmp    %rdi,%rsi
  0x00007f32dd0410e7:   lea    (%rdi,%rdx,4),%rax
  0x00007f32dd0410eb:   jbe    Stub::oop_disjoint_arraycopy+4 0x00007f32dd040f24
  0x00007f32dd0410f1:   cmp    %rax,%rsi
  0x00007f32dd0410f4:   jae    Stub::oop_disjoint_arraycopy+4 0x00007f32dd040f24
  0x00007f32dd0410fa:   cmpb   $0x0,0x40(%r15)
  0x00007f32dd0410ff:   je     Stub::oop_arraycopy+175 0x00007f32dd04118f
  0x00007f32dd041105:   sub    $0x50,%rsp
  0x00007f32dd041109:   mov    %rax,(%rsp)
  0x00007f32dd04110d:   mov    %rcx,0x8(%rsp)
  0x00007f32dd041112:   mov    %rdx,0x10(%rsp)
  0x00007f32dd041117:   mov    %rsi,0x18(%rsp)
  0x00007f32dd04111c:   mov    %rdi,0x20(%rsp)
  0x00007f32dd041121:   mov    %r8,0x28(%rsp)
  0x00007f32dd041126:   mov    %r9,0x30(%rsp)
  0x00007f32dd04112b:   mov    %r10,0x38(%rsp)
  0x00007f32dd041130:   mov    %r11,0x40(%rsp)
  0x00007f32dd041135:   mov    %rsi,%rdi
  0x00007f32dd041138:   mov    %rdx,%rsi
  0x00007f32dd04113b:   test   $0xf,%spl
  0x00007f32dd04113f:   je     Stub::oop_arraycopy+119 0x00007f32dd041157
  0x00007f32dd041145:   sub    $0x8,%rsp
  0x00007f32dd041149:   callq  0x00007f32e6202d00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f32dd04114e:   add    $0x8,%rsp
  0x00007f32dd041152:   jmpq   Stub::oop_arraycopy+124 0x00007f32dd04115c
  0x00007f32dd041157:   callq  0x00007f32e6202d00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f32dd04115c:   mov    0x40(%rsp),%r11
  0x00007f32dd041161:   mov    0x38(%rsp),%r10
  0x00007f32dd041166:   mov    0x30(%rsp),%r9
  0x00007f32dd04116b:   mov    0x28(%rsp),%r8
  0x00007f32dd041170:   mov    0x20(%rsp),%rdi
  0x00007f32dd041175:   mov    0x18(%rsp),%rsi
  0x00007f32dd04117a:   mov    0x10(%rsp),%rdx
  0x00007f32dd04117f:   mov    0x8(%rsp),%rcx
  0x00007f32dd041184:   mov    (%rsp),%rax
  0x00007f32dd041188:   add    $0x50,%rsp
  0x00007f32dd04118c:   vzeroupper 
  0x00007f32dd04118f:   mov    %rdx,%rcx
  0x00007f32dd041192:   shr    %rdx
  0x00007f32dd041195:   test   $0x1,%cl
  0x00007f32dd041198:   je     Stub::oop_arraycopy+262 0x00007f32dd0411e6
  0x00007f32dd04119e:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f32dd0411a2:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f32dd0411a6:   jmpq   Stub::oop_arraycopy+262 0x00007f32dd0411e6
  0x00007f32dd0411ab:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f32dd0411b0:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f32dd0411b5:   dec    %rdx
  0x00007f32dd0411b8:   jne    Stub::oop_arraycopy+203 0x00007f32dd0411ab
  0x00007f32dd0411ba:   jmpq   Stub::oop_arraycopy+294 0x00007f32dd041206
  0x00007f32dd0411bf:   xor    %rax,%rax
  0x00007f32dd0411c2:   vzeroupper 
  0x00007f32dd0411c5:   leaveq 
  0x00007f32dd0411c6:   retq   
  0x00007f32dd0411c7:   nopw   0x0(%rax,%rax,1)
  0x00007f32dd0411d0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f32dd0411d6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f32dd0411dc:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f32dd0411e1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f32dd0411e6:   sub    $0x8,%rdx
  0x00007f32dd0411ea:   jge    Stub::oop_arraycopy+240 0x00007f32dd0411d0
  0x00007f32dd0411ec:   add    $0x4,%rdx
  0x00007f32dd0411f0:   jl     Stub::oop_arraycopy+288 0x00007f32dd041200
  0x00007f32dd0411f2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f32dd0411f7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f32dd0411fc:   sub    $0x4,%rdx
  0x00007f32dd041200:   add    $0x4,%rdx
  0x00007f32dd041204:   jg     Stub::oop_arraycopy+203 0x00007f32dd0411ab
  0x00007f32dd041206:   sub    $0x50,%rsp
  0x00007f32dd04120a:   mov    %rax,(%rsp)
  0x00007f32dd04120e:   mov    %rcx,0x8(%rsp)
  0x00007f32dd041213:   mov    %rdx,0x10(%rsp)
  0x00007f32dd041218:   mov    %rsi,0x18(%rsp)
  0x00007f32dd04121d:   mov    %rdi,0x20(%rsp)
  0x00007f32dd041222:   mov    %r8,0x28(%rsp)
  0x00007f32dd041227:   mov    %r9,0x30(%rsp)
  0x00007f32dd04122c:   mov    %r10,0x38(%rsp)
  0x00007f32dd041231:   mov    %r11,0x40(%rsp)
  0x00007f32dd041236:   mov    %rsi,%rdi
  0x00007f32dd041239:   mov    %rcx,%rsi
  0x00007f32dd04123c:   test   $0xf,%spl
  0x00007f32dd041240:   je     Stub::oop_arraycopy+376 0x00007f32dd041258
  0x00007f32dd041246:   sub    $0x8,%rsp
  0x00007f32dd04124a:   callq  0x00007f32e6202d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f32dd04124f:   add    $0x8,%rsp
  0x00007f32dd041253:   jmpq   Stub::oop_arraycopy+381 0x00007f32dd04125d
  0x00007f32dd041258:   callq  0x00007f32e6202d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f32dd04125d:   mov    0x40(%rsp),%r11
  0x00007f32dd041262:   mov    0x38(%rsp),%r10
  0x00007f32dd041267:   mov    0x30(%rsp),%r9
  0x00007f32dd04126c:   mov    0x28(%rsp),%r8
  0x00007f32dd041271:   mov    0x20(%rsp),%rdi
  0x00007f32dd041276:   mov    0x18(%rsp),%rsi
  0x00007f32dd04127b:   mov    0x10(%rsp),%rdx
  0x00007f32dd041280:   mov    0x8(%rsp),%rcx
  0x00007f32dd041285:   mov    (%rsp),%rax
  0x00007f32dd041289:   add    $0x50,%rsp
  0x00007f32dd04128d:   vzeroupper 
  0x00007f32dd041290:   xor    %rax,%rax
  0x00007f32dd041293:   vzeroupper 
  0x00007f32dd041296:   leaveq 
  0x00007f32dd041297:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_disjoint_arraycopy_uninit [0x00007f32dd0412a0, 0x00007f32dd0413b3] (275 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0412a0:   push   %rbp
  0x00007f32dd0412a1:   mov    %rsp,%rbp
  0x00007f32dd0412a4:   mov    %rsi,%r11
  0x00007f32dd0412a7:   mov    %rdx,%rcx
  0x00007f32dd0412aa:   shr    %rdx
  0x00007f32dd0412ad:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f32dd0412b2:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f32dd0412b7:   neg    %rdx
  0x00007f32dd0412ba:   jmpq   Stub::oop_disjoint_arraycopy_uninit+232 0x00007f32dd041388
  0x00007f32dd0412bf:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f32dd0412c4:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f32dd0412c9:   inc    %rdx
  0x00007f32dd0412cc:   jne    Stub::oop_disjoint_arraycopy_uninit+31 0x00007f32dd0412bf
  0x00007f32dd0412ce:   test   $0x1,%cl
  0x00007f32dd0412d1:   je     Stub::oop_disjoint_arraycopy_uninit+57 0x00007f32dd0412d9
  0x00007f32dd0412d3:   mov    0x8(%rdi),%eax
  0x00007f32dd0412d6:   mov    %eax,0x8(%rsi)
  0x00007f32dd0412d9:   sub    $0x50,%rsp
  0x00007f32dd0412dd:   mov    %rax,(%rsp)
  0x00007f32dd0412e1:   mov    %rcx,0x8(%rsp)
  0x00007f32dd0412e6:   mov    %rdx,0x10(%rsp)
  0x00007f32dd0412eb:   mov    %rsi,0x18(%rsp)
  0x00007f32dd0412f0:   mov    %rdi,0x20(%rsp)
  0x00007f32dd0412f5:   mov    %r8,0x28(%rsp)
  0x00007f32dd0412fa:   mov    %r9,0x30(%rsp)
  0x00007f32dd0412ff:   mov    %r10,0x38(%rsp)
  0x00007f32dd041304:   mov    %r11,0x40(%rsp)
  0x00007f32dd041309:   mov    %r11,%rdi
  0x00007f32dd04130c:   mov    %rcx,%rsi
  0x00007f32dd04130f:   test   $0xf,%spl
  0x00007f32dd041313:   je     Stub::oop_disjoint_arraycopy_uninit+139 0x00007f32dd04132b
  0x00007f32dd041319:   sub    $0x8,%rsp
  0x00007f32dd04131d:   callq  0x00007f32e6202d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f32dd041322:   add    $0x8,%rsp
  0x00007f32dd041326:   jmpq   Stub::oop_disjoint_arraycopy_uninit+144 0x00007f32dd041330
  0x00007f32dd04132b:   callq  0x00007f32e6202d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f32dd041330:   mov    0x40(%rsp),%r11
  0x00007f32dd041335:   mov    0x38(%rsp),%r10
  0x00007f32dd04133a:   mov    0x30(%rsp),%r9
  0x00007f32dd04133f:   mov    0x28(%rsp),%r8
  0x00007f32dd041344:   mov    0x20(%rsp),%rdi
  0x00007f32dd041349:   mov    0x18(%rsp),%rsi
  0x00007f32dd04134e:   mov    0x10(%rsp),%rdx
  0x00007f32dd041353:   mov    0x8(%rsp),%rcx
  0x00007f32dd041358:   mov    (%rsp),%rax
  0x00007f32dd04135c:   add    $0x50,%rsp
  0x00007f32dd041360:   vzeroupper 
  0x00007f32dd041363:   vzeroupper 
  0x00007f32dd041366:   xor    %rax,%rax
  0x00007f32dd041369:   leaveq 
  0x00007f32dd04136a:   retq   
  0x00007f32dd04136b:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd041370:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f32dd041376:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f32dd04137c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f32dd041382:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f32dd041388:   add    $0x8,%rdx
  0x00007f32dd04138c:   jle    Stub::oop_disjoint_arraycopy_uninit+208 0x00007f32dd041370
  0x00007f32dd04138e:   sub    $0x4,%rdx
  0x00007f32dd041392:   jg     Stub::oop_disjoint_arraycopy_uninit+260 0x00007f32dd0413a4
  0x00007f32dd041394:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f32dd04139a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f32dd0413a0:   add    $0x4,%rdx
  0x00007f32dd0413a4:   sub    $0x4,%rdx
  0x00007f32dd0413a8:   jl     Stub::oop_disjoint_arraycopy_uninit+31 0x00007f32dd0412bf
  0x00007f32dd0413ae:   jmpq   Stub::oop_disjoint_arraycopy_uninit+46 0x00007f32dd0412ce
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_arraycopy_uninit [0x00007f32dd0413c0, 0x00007f32dd0414e8] (296 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0413c0:   push   %rbp
  0x00007f32dd0413c1:   mov    %rsp,%rbp
  0x00007f32dd0413c4:   cmp    %rdi,%rsi
  0x00007f32dd0413c7:   lea    (%rdi,%rdx,4),%rax
  0x00007f32dd0413cb:   jbe    Stub::oop_disjoint_arraycopy_uninit+4 0x00007f32dd0412a4
  0x00007f32dd0413d1:   cmp    %rax,%rsi
  0x00007f32dd0413d4:   jae    Stub::oop_disjoint_arraycopy_uninit+4 0x00007f32dd0412a4
  0x00007f32dd0413da:   mov    %rdx,%rcx
  0x00007f32dd0413dd:   shr    %rdx
  0x00007f32dd0413e0:   test   $0x1,%cl
  0x00007f32dd0413e3:   je     Stub::oop_arraycopy_uninit+118 0x00007f32dd041436
  0x00007f32dd0413e9:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f32dd0413ed:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f32dd0413f1:   jmpq   Stub::oop_arraycopy_uninit+118 0x00007f32dd041436
  0x00007f32dd0413f6:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f32dd0413fb:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f32dd041400:   dec    %rdx
  0x00007f32dd041403:   jne    Stub::oop_arraycopy_uninit+54 0x00007f32dd0413f6
  0x00007f32dd041405:   jmpq   Stub::oop_arraycopy_uninit+150 0x00007f32dd041456
  0x00007f32dd04140a:   xor    %rax,%rax
  0x00007f32dd04140d:   vzeroupper 
  0x00007f32dd041410:   leaveq 
  0x00007f32dd041411:   retq   
  0x00007f32dd041412:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd04141c:   data16 data16 xchg %ax,%ax
  0x00007f32dd041420:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f32dd041426:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f32dd04142c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f32dd041431:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f32dd041436:   sub    $0x8,%rdx
  0x00007f32dd04143a:   jge    Stub::oop_arraycopy_uninit+96 0x00007f32dd041420
  0x00007f32dd04143c:   add    $0x4,%rdx
  0x00007f32dd041440:   jl     Stub::oop_arraycopy_uninit+144 0x00007f32dd041450
  0x00007f32dd041442:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f32dd041447:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f32dd04144c:   sub    $0x4,%rdx
  0x00007f32dd041450:   add    $0x4,%rdx
  0x00007f32dd041454:   jg     Stub::oop_arraycopy_uninit+54 0x00007f32dd0413f6
  0x00007f32dd041456:   sub    $0x50,%rsp
  0x00007f32dd04145a:   mov    %rax,(%rsp)
  0x00007f32dd04145e:   mov    %rcx,0x8(%rsp)
  0x00007f32dd041463:   mov    %rdx,0x10(%rsp)
  0x00007f32dd041468:   mov    %rsi,0x18(%rsp)
  0x00007f32dd04146d:   mov    %rdi,0x20(%rsp)
  0x00007f32dd041472:   mov    %r8,0x28(%rsp)
  0x00007f32dd041477:   mov    %r9,0x30(%rsp)
  0x00007f32dd04147c:   mov    %r10,0x38(%rsp)
  0x00007f32dd041481:   mov    %r11,0x40(%rsp)
  0x00007f32dd041486:   mov    %rsi,%rdi
  0x00007f32dd041489:   mov    %rcx,%rsi
  0x00007f32dd04148c:   test   $0xf,%spl
  0x00007f32dd041490:   je     Stub::oop_arraycopy_uninit+232 0x00007f32dd0414a8
  0x00007f32dd041496:   sub    $0x8,%rsp
  0x00007f32dd04149a:   callq  0x00007f32e6202d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f32dd04149f:   add    $0x8,%rsp
  0x00007f32dd0414a3:   jmpq   Stub::oop_arraycopy_uninit+237 0x00007f32dd0414ad
  0x00007f32dd0414a8:   callq  0x00007f32e6202d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f32dd0414ad:   mov    0x40(%rsp),%r11
  0x00007f32dd0414b2:   mov    0x38(%rsp),%r10
  0x00007f32dd0414b7:   mov    0x30(%rsp),%r9
  0x00007f32dd0414bc:   mov    0x28(%rsp),%r8
  0x00007f32dd0414c1:   mov    0x20(%rsp),%rdi
  0x00007f32dd0414c6:   mov    0x18(%rsp),%rsi
  0x00007f32dd0414cb:   mov    0x10(%rsp),%rdx
  0x00007f32dd0414d0:   mov    0x8(%rsp),%rcx
  0x00007f32dd0414d5:   mov    (%rsp),%rax
  0x00007f32dd0414d9:   add    $0x50,%rsp
  0x00007f32dd0414dd:   vzeroupper 
  0x00007f32dd0414e0:   xor    %rax,%rax
  0x00007f32dd0414e3:   vzeroupper 
  0x00007f32dd0414e6:   leaveq 
  0x00007f32dd0414e7:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::checkcast_arraycopy [0x00007f32dd041500, 0x00007f32dd0416e1] (481 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd041500:   push   %rbp
  0x00007f32dd041501:   mov    %rsp,%rbp
  0x00007f32dd041504:   sub    $0x18,%rsp
  0x00007f32dd041508:   mov    %r13,(%rsp)
  0x00007f32dd04150c:   mov    %r14,0x8(%rsp)
  0x00007f32dd041511:   mov    %r10,0x10(%rsp)
  0x00007f32dd041516:   cmpb   $0x0,0x40(%r15)
  0x00007f32dd04151b:   je     Stub::checkcast_arraycopy+171 0x00007f32dd0415ab
  0x00007f32dd041521:   sub    $0x50,%rsp
  0x00007f32dd041525:   mov    %rax,(%rsp)
  0x00007f32dd041529:   mov    %rcx,0x8(%rsp)
  0x00007f32dd04152e:   mov    %rdx,0x10(%rsp)
  0x00007f32dd041533:   mov    %rsi,0x18(%rsp)
  0x00007f32dd041538:   mov    %rdi,0x20(%rsp)
  0x00007f32dd04153d:   mov    %r8,0x28(%rsp)
  0x00007f32dd041542:   mov    %r9,0x30(%rsp)
  0x00007f32dd041547:   mov    %r10,0x38(%rsp)
  0x00007f32dd04154c:   mov    %r11,0x40(%rsp)
  0x00007f32dd041551:   mov    %rsi,%rdi
  0x00007f32dd041554:   mov    %rdx,%rsi
  0x00007f32dd041557:   test   $0xf,%spl
  0x00007f32dd04155b:   je     Stub::checkcast_arraycopy+115 0x00007f32dd041573
  0x00007f32dd041561:   sub    $0x8,%rsp
  0x00007f32dd041565:   callq  0x00007f32e6202d00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f32dd04156a:   add    $0x8,%rsp
  0x00007f32dd04156e:   jmpq   Stub::checkcast_arraycopy+120 0x00007f32dd041578
  0x00007f32dd041573:   callq  0x00007f32e6202d00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f32dd041578:   mov    0x40(%rsp),%r11
  0x00007f32dd04157d:   mov    0x38(%rsp),%r10
  0x00007f32dd041582:   mov    0x30(%rsp),%r9
  0x00007f32dd041587:   mov    0x28(%rsp),%r8
  0x00007f32dd04158c:   mov    0x20(%rsp),%rdi
  0x00007f32dd041591:   mov    0x18(%rsp),%rsi
  0x00007f32dd041596:   mov    0x10(%rsp),%rdx
  0x00007f32dd04159b:   mov    0x8(%rsp),%rcx
  0x00007f32dd0415a0:   mov    (%rsp),%rax
  0x00007f32dd0415a4:   add    $0x50,%rsp
  0x00007f32dd0415a8:   vzeroupper 
  0x00007f32dd0415ab:   lea    (%rdi,%rdx,4),%rdi
  0x00007f32dd0415af:   lea    (%rsi,%rdx,4),%r13
  0x00007f32dd0415b3:   mov    %rdx,%r14
  0x00007f32dd0415b6:   neg    %rdx
  0x00007f32dd0415b9:   jne    Stub::checkcast_arraycopy+226 0x00007f32dd0415e2
  0x00007f32dd0415bf:   xor    %rax,%rax
  0x00007f32dd0415c2:   jmpq   Stub::checkcast_arraycopy+465 0x00007f32dd0416d1
  0x00007f32dd0415c7:   nopw   0x0(%rax,%rax,1)
  0x00007f32dd0415d0:   shr    $0x3,%rax
  0x00007f32dd0415d4:   mov    %eax,0x0(%r13,%rdx,4)
  0x00007f32dd0415d9:   inc    %rdx
  0x00007f32dd0415dc:   je     Stub::checkcast_arraycopy+324 0x00007f32dd041644
  0x00007f32dd0415e2:   mov    (%rdi,%rdx,4),%eax
  0x00007f32dd0415e5:   shl    $0x3,%rax
  0x00007f32dd0415e9:   test   %rax,%rax
  0x00007f32dd0415ec:   je     Stub::checkcast_arraycopy+208 0x00007f32dd0415d0
  0x00007f32dd0415ee:   mov    0x8(%rax),%r11d
  0x00007f32dd0415f2:   movabs $0x800000000,%r10
  0x00007f32dd0415fc:   add    %r10,%r11
  0x00007f32dd0415ff:   cmp    %r8,%r11
  0x00007f32dd041602:   je     Stub::checkcast_arraycopy+208 0x00007f32dd0415d0
  0x00007f32dd041604:   cmp    (%r11,%rcx,1),%r8
  0x00007f32dd041608:   je     Stub::checkcast_arraycopy+208 0x00007f32dd0415d0
  0x00007f32dd04160a:   cmp    $0x20,%ecx
  0x00007f32dd04160d:   jne    Stub::checkcast_arraycopy+308 0x00007f32dd041634
  0x00007f32dd041613:   push   %rax
  0x00007f32dd041614:   mov    %r8,%rax
  0x00007f32dd041617:   push   %rcx
  0x00007f32dd041618:   push   %rdi
  0x00007f32dd041619:   mov    0x28(%r11),%rdi
  0x00007f32dd04161d:   mov    (%rdi),%ecx
  0x00007f32dd04161f:   add    $0x8,%rdi
  0x00007f32dd041623:   test   %rax,%rax
  0x00007f32dd041626:   repnz scas %es:(%rdi),%rax
  0x00007f32dd041629:   pop    %rdi
  0x00007f32dd04162a:   pop    %rcx
  0x00007f32dd04162b:   pop    %rax
  0x00007f32dd04162c:   jne    Stub::checkcast_arraycopy+308 0x00007f32dd041634
  0x00007f32dd04162e:   mov    %r8,0x20(%r11)
  0x00007f32dd041632:   jmp    Stub::checkcast_arraycopy+208 0x00007f32dd0415d0
  0x00007f32dd041634:   add    %rdx,%r14
  0x00007f32dd041637:   mov    %r14,%rax
  0x00007f32dd04163a:   not    %rax
  0x00007f32dd04163d:   jne    Stub::checkcast_arraycopy+327 0x00007f32dd041647
  0x00007f32dd04163f:   jmpq   Stub::checkcast_arraycopy+465 0x00007f32dd0416d1
  0x00007f32dd041644:   xor    %rax,%rax
  0x00007f32dd041647:   sub    $0x50,%rsp
  0x00007f32dd04164b:   mov    %rax,(%rsp)
  0x00007f32dd04164f:   mov    %rcx,0x8(%rsp)
  0x00007f32dd041654:   mov    %rdx,0x10(%rsp)
  0x00007f32dd041659:   mov    %rsi,0x18(%rsp)
  0x00007f32dd04165e:   mov    %rdi,0x20(%rsp)
  0x00007f32dd041663:   mov    %r8,0x28(%rsp)
  0x00007f32dd041668:   mov    %r9,0x30(%rsp)
  0x00007f32dd04166d:   mov    %r10,0x38(%rsp)
  0x00007f32dd041672:   mov    %r11,0x40(%rsp)
  0x00007f32dd041677:   mov    %rsi,%rdi
  0x00007f32dd04167a:   mov    %r14,%rsi
  0x00007f32dd04167d:   test   $0xf,%spl
  0x00007f32dd041681:   je     Stub::checkcast_arraycopy+409 0x00007f32dd041699
  0x00007f32dd041687:   sub    $0x8,%rsp
  0x00007f32dd04168b:   callq  0x00007f32e6202d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f32dd041690:   add    $0x8,%rsp
  0x00007f32dd041694:   jmpq   Stub::checkcast_arraycopy+414 0x00007f32dd04169e
  0x00007f32dd041699:   callq  0x00007f32e6202d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f32dd04169e:   mov    0x40(%rsp),%r11
  0x00007f32dd0416a3:   mov    0x38(%rsp),%r10
  0x00007f32dd0416a8:   mov    0x30(%rsp),%r9
  0x00007f32dd0416ad:   mov    0x28(%rsp),%r8
  0x00007f32dd0416b2:   mov    0x20(%rsp),%rdi
  0x00007f32dd0416b7:   mov    0x18(%rsp),%rsi
  0x00007f32dd0416bc:   mov    0x10(%rsp),%rdx
  0x00007f32dd0416c1:   mov    0x8(%rsp),%rcx
  0x00007f32dd0416c6:   mov    (%rsp),%rax
  0x00007f32dd0416ca:   add    $0x50,%rsp
  0x00007f32dd0416ce:   vzeroupper 
  0x00007f32dd0416d1:   mov    (%rsp),%r13
  0x00007f32dd0416d5:   mov    0x8(%rsp),%r14
  0x00007f32dd0416da:   mov    0x10(%rsp),%r10
  0x00007f32dd0416df:   leaveq 
  0x00007f32dd0416e0:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::checkcast_arraycopy_uninit [0x00007f32dd041700, 0x00007f32dd041851] (337 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd041700:   push   %rbp
  0x00007f32dd041701:   mov    %rsp,%rbp
  0x00007f32dd041704:   sub    $0x18,%rsp
  0x00007f32dd041708:   mov    %r13,(%rsp)
  0x00007f32dd04170c:   mov    %r14,0x8(%rsp)
  0x00007f32dd041711:   mov    %r10,0x10(%rsp)
  0x00007f32dd041716:   lea    (%rdi,%rdx,4),%rdi
  0x00007f32dd04171a:   lea    (%rsi,%rdx,4),%r13
  0x00007f32dd04171e:   mov    %rdx,%r14
  0x00007f32dd041721:   neg    %rdx
  0x00007f32dd041724:   jne    Stub::checkcast_arraycopy_uninit+82 0x00007f32dd041752
  0x00007f32dd04172a:   xor    %rax,%rax
  0x00007f32dd04172d:   jmpq   Stub::checkcast_arraycopy_uninit+321 0x00007f32dd041841
  0x00007f32dd041732:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd04173c:   data16 data16 xchg %ax,%ax
  0x00007f32dd041740:   shr    $0x3,%rax
  0x00007f32dd041744:   mov    %eax,0x0(%r13,%rdx,4)
  0x00007f32dd041749:   inc    %rdx
  0x00007f32dd04174c:   je     Stub::checkcast_arraycopy_uninit+180 0x00007f32dd0417b4
  0x00007f32dd041752:   mov    (%rdi,%rdx,4),%eax
  0x00007f32dd041755:   shl    $0x3,%rax
  0x00007f32dd041759:   test   %rax,%rax
  0x00007f32dd04175c:   je     Stub::checkcast_arraycopy_uninit+64 0x00007f32dd041740
  0x00007f32dd04175e:   mov    0x8(%rax),%r11d
  0x00007f32dd041762:   movabs $0x800000000,%r10
  0x00007f32dd04176c:   add    %r10,%r11
  0x00007f32dd04176f:   cmp    %r8,%r11
  0x00007f32dd041772:   je     Stub::checkcast_arraycopy_uninit+64 0x00007f32dd041740
  0x00007f32dd041774:   cmp    (%r11,%rcx,1),%r8
  0x00007f32dd041778:   je     Stub::checkcast_arraycopy_uninit+64 0x00007f32dd041740
  0x00007f32dd04177a:   cmp    $0x20,%ecx
  0x00007f32dd04177d:   jne    Stub::checkcast_arraycopy_uninit+164 0x00007f32dd0417a4
  0x00007f32dd041783:   push   %rax
  0x00007f32dd041784:   mov    %r8,%rax
  0x00007f32dd041787:   push   %rcx
  0x00007f32dd041788:   push   %rdi
  0x00007f32dd041789:   mov    0x28(%r11),%rdi
  0x00007f32dd04178d:   mov    (%rdi),%ecx
  0x00007f32dd04178f:   add    $0x8,%rdi
  0x00007f32dd041793:   test   %rax,%rax
  0x00007f32dd041796:   repnz scas %es:(%rdi),%rax
  0x00007f32dd041799:   pop    %rdi
  0x00007f32dd04179a:   pop    %rcx
  0x00007f32dd04179b:   pop    %rax
  0x00007f32dd04179c:   jne    Stub::checkcast_arraycopy_uninit+164 0x00007f32dd0417a4
  0x00007f32dd04179e:   mov    %r8,0x20(%r11)
  0x00007f32dd0417a2:   jmp    Stub::checkcast_arraycopy_uninit+64 0x00007f32dd041740
  0x00007f32dd0417a4:   add    %rdx,%r14
  0x00007f32dd0417a7:   mov    %r14,%rax
  0x00007f32dd0417aa:   not    %rax
  0x00007f32dd0417ad:   jne    Stub::checkcast_arraycopy_uninit+183 0x00007f32dd0417b7
  0x00007f32dd0417af:   jmpq   Stub::checkcast_arraycopy_uninit+321 0x00007f32dd041841
  0x00007f32dd0417b4:   xor    %rax,%rax
  0x00007f32dd0417b7:   sub    $0x50,%rsp
  0x00007f32dd0417bb:   mov    %rax,(%rsp)
  0x00007f32dd0417bf:   mov    %rcx,0x8(%rsp)
  0x00007f32dd0417c4:   mov    %rdx,0x10(%rsp)
  0x00007f32dd0417c9:   mov    %rsi,0x18(%rsp)
  0x00007f32dd0417ce:   mov    %rdi,0x20(%rsp)
  0x00007f32dd0417d3:   mov    %r8,0x28(%rsp)
  0x00007f32dd0417d8:   mov    %r9,0x30(%rsp)
  0x00007f32dd0417dd:   mov    %r10,0x38(%rsp)
  0x00007f32dd0417e2:   mov    %r11,0x40(%rsp)
  0x00007f32dd0417e7:   mov    %rsi,%rdi
  0x00007f32dd0417ea:   mov    %r14,%rsi
  0x00007f32dd0417ed:   test   $0xf,%spl
  0x00007f32dd0417f1:   je     Stub::checkcast_arraycopy_uninit+265 0x00007f32dd041809
  0x00007f32dd0417f7:   sub    $0x8,%rsp
  0x00007f32dd0417fb:   callq  0x00007f32e6202d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f32dd041800:   add    $0x8,%rsp
  0x00007f32dd041804:   jmpq   Stub::checkcast_arraycopy_uninit+270 0x00007f32dd04180e
  0x00007f32dd041809:   callq  0x00007f32e6202d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f32dd04180e:   mov    0x40(%rsp),%r11
  0x00007f32dd041813:   mov    0x38(%rsp),%r10
  0x00007f32dd041818:   mov    0x30(%rsp),%r9
  0x00007f32dd04181d:   mov    0x28(%rsp),%r8
  0x00007f32dd041822:   mov    0x20(%rsp),%rdi
  0x00007f32dd041827:   mov    0x18(%rsp),%rsi
  0x00007f32dd04182c:   mov    0x10(%rsp),%rdx
  0x00007f32dd041831:   mov    0x8(%rsp),%rcx
  0x00007f32dd041836:   mov    (%rsp),%rax
  0x00007f32dd04183a:   add    $0x50,%rsp
  0x00007f32dd04183e:   vzeroupper 
  0x00007f32dd041841:   mov    (%rsp),%r13
  0x00007f32dd041845:   mov    0x8(%rsp),%r14
  0x00007f32dd04184a:   mov    0x10(%rsp),%r10
  0x00007f32dd04184f:   leaveq 
  0x00007f32dd041850:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::unsafe_arraycopy [0x00007f32dd041860, 0x00007f32dd041897] (55 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd041860:   push   %rbp
  0x00007f32dd041861:   mov    %rsp,%rbp
  0x00007f32dd041864:   mov    %rdi,%rax
  0x00007f32dd041867:   or     %rsi,%rax
  0x00007f32dd04186a:   or     %rdx,%rax
  0x00007f32dd04186d:   test   $0x7,%al
  0x00007f32dd04186f:   je     Stub::unsafe_arraycopy+46 0x00007f32dd04188e
  0x00007f32dd041871:   test   $0x3,%al
  0x00007f32dd041873:   je     Stub::unsafe_arraycopy+37 0x00007f32dd041885
  0x00007f32dd041875:   test   $0x1,%al
  0x00007f32dd041877:   jne    Stub::jbyte_arraycopy+4 0x00007f32dd040b04
  0x00007f32dd04187d:   shr    %rdx
  0x00007f32dd041880:   jmpq   Stub::jshort_arraycopy+4 0x00007f32dd040c64
  0x00007f32dd041885:   shr    $0x2,%rdx
  0x00007f32dd041889:   jmpq   Stub::jint_arraycopy+4 0x00007f32dd040d84
  0x00007f32dd04188e:   shr    $0x3,%rdx
  0x00007f32dd041892:   jmpq   Stub::jlong_arraycopy+4 0x00007f32dd040ea4
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::generic_arraycopy [0x00007f32dd04189b, 0x00007f32dd041a84] (489 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd04189b:   jmpq   Stub::generic_arraycopy+481 0x00007f32dd041a7c
  0x00007f32dd0418a0:   push   %rbp
  0x00007f32dd0418a1:   mov    %rsp,%rbp
  0x00007f32dd0418a4:   test   %rdi,%rdi
  0x00007f32dd0418a7:   je     Stub::generic_arraycopy
  0x00007f32dd0418a9:   test   %esi,%esi
  0x00007f32dd0418ab:   js     Stub::generic_arraycopy
  0x00007f32dd0418ad:   test   %rdx,%rdx
  0x00007f32dd0418b0:   je     Stub::generic_arraycopy
  0x00007f32dd0418b2:   test   %ecx,%ecx
  0x00007f32dd0418b4:   js     Stub::generic_arraycopy
  0x00007f32dd0418b6:   mov    %r8d,%r11d
  0x00007f32dd0418b9:   test   %r11d,%r11d
  0x00007f32dd0418bc:   js     Stub::generic_arraycopy
  0x00007f32dd0418be:   mov    0x8(%rdi),%r10d
  0x00007f32dd0418c2:   movabs $0x800000000,%r9
  0x00007f32dd0418cc:   add    %r9,%r10
  0x00007f32dd0418cf:   cmpl   $0x80100c02,0x8(%r10)
  0x00007f32dd0418d7:   je     Stub::generic_arraycopy+244 0x00007f32dd04198f
  0x00007f32dd0418dd:   mov    0x8(%rdx),%eax
  0x00007f32dd0418e0:   movabs $0x800000000,%r9
  0x00007f32dd0418ea:   add    %r9,%rax
  0x00007f32dd0418ed:   cmp    %rax,%r10
  0x00007f32dd0418f0:   jne    Stub::generic_arraycopy+481 0x00007f32dd041a7c
  0x00007f32dd0418f6:   mov    0x8(%r10),%eax
  0x00007f32dd0418fa:   cmp    $0x0,%eax
  0x00007f32dd0418fd:   jge    Stub::generic_arraycopy+481 0x00007f32dd041a7c
  0x00007f32dd041903:   mov    %r11d,%r10d
  0x00007f32dd041906:   add    %esi,%r10d
  0x00007f32dd041909:   cmp    0xc(%rdi),%r10d
  0x00007f32dd04190d:   ja     Stub::generic_arraycopy+481 0x00007f32dd041a7c
  0x00007f32dd041913:   mov    %r11d,%r10d
  0x00007f32dd041916:   add    %ecx,%r10d
  0x00007f32dd041919:   cmp    0xc(%rdx),%r10d
  0x00007f32dd04191d:   ja     Stub::generic_arraycopy+481 0x00007f32dd041a7c
  0x00007f32dd041923:   movslq %esi,%rsi
  0x00007f32dd041926:   movslq %ecx,%rcx
  0x00007f32dd041929:   mov    %eax,%r10d
  0x00007f32dd04192c:   shr    $0x10,%r10d
  0x00007f32dd041930:   and    $0xff,%r10
  0x00007f32dd041937:   add    %r10,%rdi
  0x00007f32dd04193a:   add    %r10,%rdx
  0x00007f32dd04193d:   and    $0x3f,%eax
  0x00007f32dd041940:   cmp    $0x0,%eax
  0x00007f32dd041943:   jne    Stub::generic_arraycopy+186 0x00007f32dd041955
  0x00007f32dd041945:   lea    (%rdi,%rsi,1),%rdi
  0x00007f32dd041949:   lea    (%rdx,%rcx,1),%rsi
  0x00007f32dd04194d:   movslq %r11d,%rdx
  0x00007f32dd041950:   jmpq   Stub::jbyte_arraycopy+4 0x00007f32dd040b04
  0x00007f32dd041955:   cmp    $0x1,%eax
  0x00007f32dd041958:   jne    Stub::generic_arraycopy+207 0x00007f32dd04196a
  0x00007f32dd04195a:   lea    (%rdi,%rsi,2),%rdi
  0x00007f32dd04195e:   lea    (%rdx,%rcx,2),%rsi
  0x00007f32dd041962:   movslq %r11d,%rdx
  0x00007f32dd041965:   jmpq   Stub::jshort_arraycopy+4 0x00007f32dd040c64
  0x00007f32dd04196a:   cmp    $0x2,%eax
  0x00007f32dd04196d:   jne    Stub::generic_arraycopy+228 0x00007f32dd04197f
  0x00007f32dd04196f:   lea    (%rdi,%rsi,4),%rdi
  0x00007f32dd041973:   lea    (%rdx,%rcx,4),%rsi
  0x00007f32dd041977:   movslq %r11d,%rdx
  0x00007f32dd04197a:   jmpq   Stub::jint_arraycopy+4 0x00007f32dd040d84
  0x00007f32dd04197f:   lea    (%rdi,%rsi,8),%rdi
  0x00007f32dd041983:   lea    (%rdx,%rcx,8),%rsi
  0x00007f32dd041987:   movslq %r11d,%rdx
  0x00007f32dd04198a:   jmpq   Stub::jlong_arraycopy+4 0x00007f32dd040ea4
  0x00007f32dd04198f:   mov    0x8(%rdx),%eax
  0x00007f32dd041992:   movabs $0x800000000,%r9
  0x00007f32dd04199c:   add    %r9,%rax
  0x00007f32dd04199f:   cmp    %rax,%r10
  0x00007f32dd0419a2:   jne    Stub::generic_arraycopy+325 0x00007f32dd0419e0
  0x00007f32dd0419a8:   mov    %r11d,%r10d
  0x00007f32dd0419ab:   add    %esi,%r10d
  0x00007f32dd0419ae:   cmp    0xc(%rdi),%r10d
  0x00007f32dd0419b2:   ja     Stub::generic_arraycopy+481 0x00007f32dd041a7c
  0x00007f32dd0419b8:   mov    %r11d,%r10d
  0x00007f32dd0419bb:   add    %ecx,%r10d
  0x00007f32dd0419be:   cmp    0xc(%rdx),%r10d
  0x00007f32dd0419c2:   ja     Stub::generic_arraycopy+481 0x00007f32dd041a7c
  0x00007f32dd0419c8:   movslq %esi,%rsi
  0x00007f32dd0419cb:   movslq %ecx,%rcx
  0x00007f32dd0419ce:   lea    0x10(%rdi,%rsi,4),%rdi
  0x00007f32dd0419d3:   lea    0x10(%rdx,%rcx,4),%rsi
  0x00007f32dd0419d8:   movslq %r11d,%rdx
  0x00007f32dd0419db:   jmpq   Stub::oop_arraycopy+4 0x00007f32dd0410e4
  0x00007f32dd0419e0:   cmpl   $0x80100c02,0x8(%rax)
  0x00007f32dd0419e7:   jne    Stub::generic_arraycopy+481 0x00007f32dd041a7c
  0x00007f32dd0419ed:   mov    %r11d,%eax
  0x00007f32dd0419f0:   add    %esi,%eax
  0x00007f32dd0419f2:   cmp    0xc(%rdi),%eax
  0x00007f32dd0419f5:   ja     Stub::generic_arraycopy+481 0x00007f32dd041a7c
  0x00007f32dd0419fb:   mov    %r11d,%eax
  0x00007f32dd0419fe:   add    %ecx,%eax
  0x00007f32dd041a00:   cmp    0xc(%rdx),%eax
  0x00007f32dd041a03:   ja     Stub::generic_arraycopy+481 0x00007f32dd041a7c
  0x00007f32dd041a09:   movslq %esi,%rsi
  0x00007f32dd041a0c:   movslq %ecx,%rcx
  0x00007f32dd041a0f:   mov    0x8(%rdx),%r11d
  0x00007f32dd041a13:   movabs $0x800000000,%r9
  0x00007f32dd041a1d:   add    %r9,%r11
  0x00007f32dd041a20:   lea    0x10(%rdi,%rsi,4),%rdi
  0x00007f32dd041a25:   lea    0x10(%rdx,%rcx,4),%rsi
  0x00007f32dd041a2a:   mov    %r8d,%edx
  0x00007f32dd041a2d:   mov    0x14(%r11),%ecx
  0x00007f32dd041a31:   cmp    %r11,%r10
  0x00007f32dd041a34:   je     Stub::generic_arraycopy+320 0x00007f32dd0419db
  0x00007f32dd041a36:   cmp    (%r10,%rcx,1),%r11
  0x00007f32dd041a3a:   je     Stub::generic_arraycopy+320 0x00007f32dd0419db
  0x00007f32dd041a3c:   cmp    $0x20,%ecx
  0x00007f32dd041a3f:   jne    Stub::generic_arraycopy+462 0x00007f32dd041a69
  0x00007f32dd041a45:   push   %rax
  0x00007f32dd041a46:   mov    %r11,%rax
  0x00007f32dd041a49:   push   %rcx
  0x00007f32dd041a4a:   push   %rdi
  0x00007f32dd041a4b:   mov    0x28(%r10),%rdi
  0x00007f32dd041a4f:   mov    (%rdi),%ecx
  0x00007f32dd041a51:   add    $0x8,%rdi
  0x00007f32dd041a55:   test   %rax,%rax
  0x00007f32dd041a58:   repnz scas %es:(%rdi),%rax
  0x00007f32dd041a5b:   pop    %rdi
  0x00007f32dd041a5c:   pop    %rcx
  0x00007f32dd041a5d:   pop    %rax
  0x00007f32dd041a5e:   jne    Stub::generic_arraycopy+462 0x00007f32dd041a69
  0x00007f32dd041a60:   mov    %r11,0x20(%r10)
  0x00007f32dd041a64:   jmpq   Stub::generic_arraycopy+320 0x00007f32dd0419db
  0x00007f32dd041a69:   mov    0xd0(%r11),%r11
  0x00007f32dd041a70:   mov    0x14(%r11),%ecx
  0x00007f32dd041a74:   mov    %r11,%r8
  0x00007f32dd041a77:   jmpq   Stub::checkcast_arraycopy+4 0x00007f32dd041504
  0x00007f32dd041a7c:   xor    %rax,%rax
  0x00007f32dd041a7f:   not    %rax
  0x00007f32dd041a82:   leaveq 
  0x00007f32dd041a83:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_fill [0x00007f32dd041aa0, 0x00007f32dd041b4b] (171 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd041aa0:   mov    %rdx,%r11
  0x00007f32dd041aa3:   push   %rbp
  0x00007f32dd041aa4:   mov    %rsp,%rbp
  0x00007f32dd041aa7:   and    $0xff,%esi
  0x00007f32dd041aad:   mov    %esi,%eax
  0x00007f32dd041aaf:   shl    $0x8,%eax
  0x00007f32dd041ab2:   or     %eax,%esi
  0x00007f32dd041ab4:   mov    %esi,%eax
  0x00007f32dd041ab6:   shl    $0x10,%eax
  0x00007f32dd041ab9:   or     %eax,%esi
  0x00007f32dd041abb:   cmp    $0x8,%r11d
  0x00007f32dd041abf:   jb     Stub::jbyte_fill+132 0x00007f32dd041b24
  0x00007f32dd041ac5:   vmovd  %esi,%xmm0
  0x00007f32dd041ac9:   vpbroadcastd %xmm0,%ymm0
  0x00007f32dd041ace:   sub    $0x40,%r11d
  0x00007f32dd041ad2:   jl     Stub::jbyte_fill+83 0x00007f32dd041af3
  0x00007f32dd041ad8:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd041ae0:   vmovdqu %ymm0,(%rdi)
  0x00007f32dd041ae4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f32dd041ae9:   add    $0x40,%rdi
  0x00007f32dd041aed:   sub    $0x40,%r11d
  0x00007f32dd041af1:   jge    Stub::jbyte_fill+64 0x00007f32dd041ae0
  0x00007f32dd041af3:   add    $0x20,%r11d
  0x00007f32dd041af7:   jl     Stub::jbyte_fill+101 0x00007f32dd041b05
  0x00007f32dd041af9:   vmovdqu %ymm0,(%rdi)
  0x00007f32dd041afd:   add    $0x20,%rdi
  0x00007f32dd041b01:   sub    $0x20,%r11d
  0x00007f32dd041b05:   vmovd  %esi,%xmm0
  0x00007f32dd041b09:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f32dd041b0e:   add    $0x20,%r11d
  0x00007f32dd041b12:   je     Stub::jbyte_fill+166 0x00007f32dd041b46
  0x00007f32dd041b14:   jmp    Stub::jbyte_fill+126 0x00007f32dd041b1e
  0x00007f32dd041b16:   vmovq  %xmm0,(%rdi)
  0x00007f32dd041b1a:   add    $0x8,%rdi
  0x00007f32dd041b1e:   sub    $0x8,%r11d
  0x00007f32dd041b22:   jge    Stub::jbyte_fill+118 0x00007f32dd041b16
  0x00007f32dd041b24:   test   $0x4,%r11b
  0x00007f32dd041b28:   je     Stub::jbyte_fill+144 0x00007f32dd041b30
  0x00007f32dd041b2a:   mov    %esi,(%rdi)
  0x00007f32dd041b2c:   add    $0x4,%rdi
  0x00007f32dd041b30:   test   $0x2,%r11b
  0x00007f32dd041b34:   je     Stub::jbyte_fill+157 0x00007f32dd041b3d
  0x00007f32dd041b36:   mov    %si,(%rdi)
  0x00007f32dd041b39:   add    $0x2,%rdi
  0x00007f32dd041b3d:   test   $0x1,%r11b
  0x00007f32dd041b41:   je     Stub::jbyte_fill+166 0x00007f32dd041b46
  0x00007f32dd041b43:   mov    %sil,(%rdi)
  0x00007f32dd041b46:   vzeroupper 
  0x00007f32dd041b49:   leaveq 
  0x00007f32dd041b4a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_fill [0x00007f32dd041b60, 0x00007f32dd041bfe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd041b60:   mov    %rdx,%r11
  0x00007f32dd041b63:   push   %rbp
  0x00007f32dd041b64:   mov    %rsp,%rbp
  0x00007f32dd041b67:   and    $0xffff,%esi
  0x00007f32dd041b6d:   mov    %esi,%eax
  0x00007f32dd041b6f:   shl    $0x10,%eax
  0x00007f32dd041b72:   or     %eax,%esi
  0x00007f32dd041b74:   cmp    $0x4,%r11d
  0x00007f32dd041b78:   jb     Stub::jshort_fill+132 0x00007f32dd041be4
  0x00007f32dd041b7e:   vmovd  %esi,%xmm0
  0x00007f32dd041b82:   vpbroadcastd %xmm0,%ymm0
  0x00007f32dd041b87:   sub    $0x20,%r11d
  0x00007f32dd041b8b:   jl     Stub::jshort_fill+83 0x00007f32dd041bb3
  0x00007f32dd041b91:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd041b9c:   data16 data16 xchg %ax,%ax
  0x00007f32dd041ba0:   vmovdqu %ymm0,(%rdi)
  0x00007f32dd041ba4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f32dd041ba9:   add    $0x40,%rdi
  0x00007f32dd041bad:   sub    $0x20,%r11d
  0x00007f32dd041bb1:   jge    Stub::jshort_fill+64 0x00007f32dd041ba0
  0x00007f32dd041bb3:   add    $0x10,%r11d
  0x00007f32dd041bb7:   jl     Stub::jshort_fill+101 0x00007f32dd041bc5
  0x00007f32dd041bb9:   vmovdqu %ymm0,(%rdi)
  0x00007f32dd041bbd:   add    $0x20,%rdi
  0x00007f32dd041bc1:   sub    $0x10,%r11d
  0x00007f32dd041bc5:   vmovd  %esi,%xmm0
  0x00007f32dd041bc9:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f32dd041bce:   add    $0x10,%r11d
  0x00007f32dd041bd2:   je     Stub::jshort_fill+153 0x00007f32dd041bf9
  0x00007f32dd041bd4:   jmp    Stub::jshort_fill+126 0x00007f32dd041bde
  0x00007f32dd041bd6:   vmovq  %xmm0,(%rdi)
  0x00007f32dd041bda:   add    $0x8,%rdi
  0x00007f32dd041bde:   sub    $0x4,%r11d
  0x00007f32dd041be2:   jge    Stub::jshort_fill+118 0x00007f32dd041bd6
  0x00007f32dd041be4:   test   $0x2,%r11b
  0x00007f32dd041be8:   je     Stub::jshort_fill+144 0x00007f32dd041bf0
  0x00007f32dd041bea:   mov    %esi,(%rdi)
  0x00007f32dd041bec:   add    $0x4,%rdi
  0x00007f32dd041bf0:   test   $0x1,%r11b
  0x00007f32dd041bf4:   je     Stub::jshort_fill+153 0x00007f32dd041bf9
  0x00007f32dd041bf6:   mov    %si,(%rdi)
  0x00007f32dd041bf9:   vzeroupper 
  0x00007f32dd041bfc:   leaveq 
  0x00007f32dd041bfd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_fill [0x00007f32dd041c00, 0x00007f32dd041c81] (129 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd041c00:   mov    %rdx,%r11
  0x00007f32dd041c03:   push   %rbp
  0x00007f32dd041c04:   mov    %rsp,%rbp
  0x00007f32dd041c07:   cmp    $0x2,%r11d
  0x00007f32dd041c0b:   jb     Stub::jint_fill+116 0x00007f32dd041c74
  0x00007f32dd041c11:   vmovd  %esi,%xmm0
  0x00007f32dd041c15:   vpbroadcastd %xmm0,%ymm0
  0x00007f32dd041c1a:   sub    $0x10,%r11d
  0x00007f32dd041c1e:   jl     Stub::jint_fill+67 0x00007f32dd041c43
  0x00007f32dd041c24:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd041c2c:   data16 data16 xchg %ax,%ax
  0x00007f32dd041c30:   vmovdqu %ymm0,(%rdi)
  0x00007f32dd041c34:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f32dd041c39:   add    $0x40,%rdi
  0x00007f32dd041c3d:   sub    $0x10,%r11d
  0x00007f32dd041c41:   jge    Stub::jint_fill+48 0x00007f32dd041c30
  0x00007f32dd041c43:   add    $0x8,%r11d
  0x00007f32dd041c47:   jl     Stub::jint_fill+85 0x00007f32dd041c55
  0x00007f32dd041c49:   vmovdqu %ymm0,(%rdi)
  0x00007f32dd041c4d:   add    $0x20,%rdi
  0x00007f32dd041c51:   sub    $0x8,%r11d
  0x00007f32dd041c55:   vmovd  %esi,%xmm0
  0x00007f32dd041c59:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f32dd041c5e:   add    $0x8,%r11d
  0x00007f32dd041c62:   je     Stub::jint_fill+124 0x00007f32dd041c7c
  0x00007f32dd041c64:   jmp    Stub::jint_fill+110 0x00007f32dd041c6e
  0x00007f32dd041c66:   vmovq  %xmm0,(%rdi)
  0x00007f32dd041c6a:   add    $0x8,%rdi
  0x00007f32dd041c6e:   sub    $0x2,%r11d
  0x00007f32dd041c72:   jge    Stub::jint_fill+102 0x00007f32dd041c66
  0x00007f32dd041c74:   test   $0x1,%r11b
  0x00007f32dd041c78:   je     Stub::jint_fill+124 0x00007f32dd041c7c
  0x00007f32dd041c7a:   mov    %esi,(%rdi)
  0x00007f32dd041c7c:   vzeroupper 
  0x00007f32dd041c7f:   leaveq 
  0x00007f32dd041c80:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jbyte_fill [0x00007f32dd041ca0, 0x00007f32dd041d4b] (171 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd041ca0:   mov    %rdx,%r11
  0x00007f32dd041ca3:   push   %rbp
  0x00007f32dd041ca4:   mov    %rsp,%rbp
  0x00007f32dd041ca7:   and    $0xff,%esi
  0x00007f32dd041cad:   mov    %esi,%eax
  0x00007f32dd041caf:   shl    $0x8,%eax
  0x00007f32dd041cb2:   or     %eax,%esi
  0x00007f32dd041cb4:   mov    %esi,%eax
  0x00007f32dd041cb6:   shl    $0x10,%eax
  0x00007f32dd041cb9:   or     %eax,%esi
  0x00007f32dd041cbb:   cmp    $0x8,%r11d
  0x00007f32dd041cbf:   jb     Stub::arrayof_jbyte_fill+132 0x00007f32dd041d24
  0x00007f32dd041cc5:   vmovd  %esi,%xmm0
  0x00007f32dd041cc9:   vpbroadcastd %xmm0,%ymm0
  0x00007f32dd041cce:   sub    $0x40,%r11d
  0x00007f32dd041cd2:   jl     Stub::arrayof_jbyte_fill+83 0x00007f32dd041cf3
  0x00007f32dd041cd8:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd041ce0:   vmovdqu %ymm0,(%rdi)
  0x00007f32dd041ce4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f32dd041ce9:   add    $0x40,%rdi
  0x00007f32dd041ced:   sub    $0x40,%r11d
  0x00007f32dd041cf1:   jge    Stub::arrayof_jbyte_fill+64 0x00007f32dd041ce0
  0x00007f32dd041cf3:   add    $0x20,%r11d
  0x00007f32dd041cf7:   jl     Stub::arrayof_jbyte_fill+101 0x00007f32dd041d05
  0x00007f32dd041cf9:   vmovdqu %ymm0,(%rdi)
  0x00007f32dd041cfd:   add    $0x20,%rdi
  0x00007f32dd041d01:   sub    $0x20,%r11d
  0x00007f32dd041d05:   vmovd  %esi,%xmm0
  0x00007f32dd041d09:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f32dd041d0e:   add    $0x20,%r11d
  0x00007f32dd041d12:   je     Stub::arrayof_jbyte_fill+166 0x00007f32dd041d46
  0x00007f32dd041d14:   jmp    Stub::arrayof_jbyte_fill+126 0x00007f32dd041d1e
  0x00007f32dd041d16:   vmovq  %xmm0,(%rdi)
  0x00007f32dd041d1a:   add    $0x8,%rdi
  0x00007f32dd041d1e:   sub    $0x8,%r11d
  0x00007f32dd041d22:   jge    Stub::arrayof_jbyte_fill+118 0x00007f32dd041d16
  0x00007f32dd041d24:   test   $0x4,%r11b
  0x00007f32dd041d28:   je     Stub::arrayof_jbyte_fill+144 0x00007f32dd041d30
  0x00007f32dd041d2a:   mov    %esi,(%rdi)
  0x00007f32dd041d2c:   add    $0x4,%rdi
  0x00007f32dd041d30:   test   $0x2,%r11b
  0x00007f32dd041d34:   je     Stub::arrayof_jbyte_fill+157 0x00007f32dd041d3d
  0x00007f32dd041d36:   mov    %si,(%rdi)
  0x00007f32dd041d39:   add    $0x2,%rdi
  0x00007f32dd041d3d:   test   $0x1,%r11b
  0x00007f32dd041d41:   je     Stub::arrayof_jbyte_fill+166 0x00007f32dd041d46
  0x00007f32dd041d43:   mov    %sil,(%rdi)
  0x00007f32dd041d46:   vzeroupper 
  0x00007f32dd041d49:   leaveq 
  0x00007f32dd041d4a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jshort_fill [0x00007f32dd041d60, 0x00007f32dd041dfe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd041d60:   mov    %rdx,%r11
  0x00007f32dd041d63:   push   %rbp
  0x00007f32dd041d64:   mov    %rsp,%rbp
  0x00007f32dd041d67:   and    $0xffff,%esi
  0x00007f32dd041d6d:   mov    %esi,%eax
  0x00007f32dd041d6f:   shl    $0x10,%eax
  0x00007f32dd041d72:   or     %eax,%esi
  0x00007f32dd041d74:   cmp    $0x4,%r11d
  0x00007f32dd041d78:   jb     Stub::arrayof_jshort_fill+132 0x00007f32dd041de4
  0x00007f32dd041d7e:   vmovd  %esi,%xmm0
  0x00007f32dd041d82:   vpbroadcastd %xmm0,%ymm0
  0x00007f32dd041d87:   sub    $0x20,%r11d
  0x00007f32dd041d8b:   jl     Stub::arrayof_jshort_fill+83 0x00007f32dd041db3
  0x00007f32dd041d91:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd041d9c:   data16 data16 xchg %ax,%ax
  0x00007f32dd041da0:   vmovdqu %ymm0,(%rdi)
  0x00007f32dd041da4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f32dd041da9:   add    $0x40,%rdi
  0x00007f32dd041dad:   sub    $0x20,%r11d
  0x00007f32dd041db1:   jge    Stub::arrayof_jshort_fill+64 0x00007f32dd041da0
  0x00007f32dd041db3:   add    $0x10,%r11d
  0x00007f32dd041db7:   jl     Stub::arrayof_jshort_fill+101 0x00007f32dd041dc5
  0x00007f32dd041db9:   vmovdqu %ymm0,(%rdi)
  0x00007f32dd041dbd:   add    $0x20,%rdi
  0x00007f32dd041dc1:   sub    $0x10,%r11d
  0x00007f32dd041dc5:   vmovd  %esi,%xmm0
  0x00007f32dd041dc9:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f32dd041dce:   add    $0x10,%r11d
  0x00007f32dd041dd2:   je     Stub::arrayof_jshort_fill+153 0x00007f32dd041df9
  0x00007f32dd041dd4:   jmp    Stub::arrayof_jshort_fill+126 0x00007f32dd041dde
  0x00007f32dd041dd6:   vmovq  %xmm0,(%rdi)
  0x00007f32dd041dda:   add    $0x8,%rdi
  0x00007f32dd041dde:   sub    $0x4,%r11d
  0x00007f32dd041de2:   jge    Stub::arrayof_jshort_fill+118 0x00007f32dd041dd6
  0x00007f32dd041de4:   test   $0x2,%r11b
  0x00007f32dd041de8:   je     Stub::arrayof_jshort_fill+144 0x00007f32dd041df0
  0x00007f32dd041dea:   mov    %esi,(%rdi)
  0x00007f32dd041dec:   add    $0x4,%rdi
  0x00007f32dd041df0:   test   $0x1,%r11b
  0x00007f32dd041df4:   je     Stub::arrayof_jshort_fill+153 0x00007f32dd041df9
  0x00007f32dd041df6:   mov    %si,(%rdi)
  0x00007f32dd041df9:   vzeroupper 
  0x00007f32dd041dfc:   leaveq 
  0x00007f32dd041dfd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jint_fill [0x00007f32dd041e00, 0x00007f32dd041e81] (129 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd041e00:   mov    %rdx,%r11
  0x00007f32dd041e03:   push   %rbp
  0x00007f32dd041e04:   mov    %rsp,%rbp
  0x00007f32dd041e07:   cmp    $0x2,%r11d
  0x00007f32dd041e0b:   jb     Stub::arrayof_jint_fill+116 0x00007f32dd041e74
  0x00007f32dd041e11:   vmovd  %esi,%xmm0
  0x00007f32dd041e15:   vpbroadcastd %xmm0,%ymm0
  0x00007f32dd041e1a:   sub    $0x10,%r11d
  0x00007f32dd041e1e:   jl     Stub::arrayof_jint_fill+67 0x00007f32dd041e43
  0x00007f32dd041e24:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd041e2c:   data16 data16 xchg %ax,%ax
  0x00007f32dd041e30:   vmovdqu %ymm0,(%rdi)
  0x00007f32dd041e34:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f32dd041e39:   add    $0x40,%rdi
  0x00007f32dd041e3d:   sub    $0x10,%r11d
  0x00007f32dd041e41:   jge    Stub::arrayof_jint_fill+48 0x00007f32dd041e30
  0x00007f32dd041e43:   add    $0x8,%r11d
  0x00007f32dd041e47:   jl     Stub::arrayof_jint_fill+85 0x00007f32dd041e55
  0x00007f32dd041e49:   vmovdqu %ymm0,(%rdi)
  0x00007f32dd041e4d:   add    $0x20,%rdi
  0x00007f32dd041e51:   sub    $0x8,%r11d
  0x00007f32dd041e55:   vmovd  %esi,%xmm0
  0x00007f32dd041e59:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f32dd041e5e:   add    $0x8,%r11d
  0x00007f32dd041e62:   je     Stub::arrayof_jint_fill+124 0x00007f32dd041e7c
  0x00007f32dd041e64:   jmp    Stub::arrayof_jint_fill+110 0x00007f32dd041e6e
  0x00007f32dd041e66:   vmovq  %xmm0,(%rdi)
  0x00007f32dd041e6a:   add    $0x8,%rdi
  0x00007f32dd041e6e:   sub    $0x2,%r11d
  0x00007f32dd041e72:   jge    Stub::arrayof_jint_fill+102 0x00007f32dd041e66
  0x00007f32dd041e74:   test   $0x1,%r11b
  0x00007f32dd041e78:   je     Stub::arrayof_jint_fill+124 0x00007f32dd041e7c
  0x00007f32dd041e7a:   mov    %esi,(%rdi)
  0x00007f32dd041e7c:   vzeroupper 
  0x00007f32dd041e7f:   leaveq 
  0x00007f32dd041e80:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::aescrypt_encryptBlock [0x00007f32dd041ea0, 0x00007f32dd041fba] (282 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd041ea0:   push   %rbp
  0x00007f32dd041ea1:   mov    %rsp,%rbp
  0x00007f32dd041ea4:   mov    -0x4(%rdx),%eax
  0x00007f32dd041ea7:   vmovdqu 0x9e17791(%rip),%xmm1        # 0x00007f32e6e59640
  0x00007f32dd041eaf:   vmovdqu (%rdi),%xmm0
  0x00007f32dd041eb3:   vmovdqu (%rdx),%xmm2
  0x00007f32dd041eb7:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f32dd041ebc:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f32dd041ec0:   vmovdqu 0x10(%rdx),%xmm2
  0x00007f32dd041ec5:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f32dd041eca:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f32dd041ecf:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd041ed4:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f32dd041ed9:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd041ede:   vmovdqu 0x40(%rdx),%xmm5
  0x00007f32dd041ee3:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f32dd041ee8:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f32dd041eed:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f32dd041ef2:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f32dd041ef7:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f32dd041efc:   vmovdqu 0x50(%rdx),%xmm2
  0x00007f32dd041f01:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f32dd041f06:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f32dd041f0b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd041f10:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f32dd041f15:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd041f1a:   vmovdqu 0x80(%rdx),%xmm5
  0x00007f32dd041f22:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f32dd041f27:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f32dd041f2c:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f32dd041f31:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f32dd041f36:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f32dd041f3b:   vmovdqu 0x90(%rdx),%xmm2
  0x00007f32dd041f43:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f32dd041f48:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f32dd041f50:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd041f55:   cmp    $0x2c,%eax
  0x00007f32dd041f58:   je     Stub::aescrypt_encryptBlock+263 0x00007f32dd041fa7
  0x00007f32dd041f5a:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f32dd041f5f:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f32dd041f64:   vmovdqu 0xb0(%rdx),%xmm2
  0x00007f32dd041f6c:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f32dd041f71:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f32dd041f79:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd041f7e:   cmp    $0x34,%eax
  0x00007f32dd041f81:   je     Stub::aescrypt_encryptBlock+263 0x00007f32dd041fa7
  0x00007f32dd041f83:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f32dd041f88:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f32dd041f8d:   vmovdqu 0xd0(%rdx),%xmm2
  0x00007f32dd041f95:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f32dd041f9a:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007f32dd041fa2:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd041fa7:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f32dd041fac:   vaesenclast %xmm3,%xmm0,%xmm0
  0x00007f32dd041fb1:   vmovdqu %xmm0,(%rsi)
  0x00007f32dd041fb5:   xor    %rax,%rax
  0x00007f32dd041fb8:   leaveq 
  0x00007f32dd041fb9:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::aescrypt_decryptBlock [0x00007f32dd041fc0, 0x00007f32dd0420da] (282 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd041fc0:   push   %rbp
  0x00007f32dd041fc1:   mov    %rsp,%rbp
  0x00007f32dd041fc4:   mov    -0x4(%rdx),%eax
  0x00007f32dd041fc7:   vmovdqu 0x9e17671(%rip),%xmm1        # 0x00007f32e6e59640
  0x00007f32dd041fcf:   vmovdqu (%rdi),%xmm0
  0x00007f32dd041fd3:   vmovdqu 0x10(%rdx),%xmm2
  0x00007f32dd041fd8:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f32dd041fdd:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f32dd041fe2:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd041fe7:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f32dd041fec:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd041ff1:   vmovdqu 0x40(%rdx),%xmm5
  0x00007f32dd041ff6:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f32dd041ffb:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f32dd041fff:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f32dd042004:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f32dd042009:   vaesdec %xmm5,%xmm0,%xmm0
  0x00007f32dd04200e:   vmovdqu 0x50(%rdx),%xmm2
  0x00007f32dd042013:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f32dd042018:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f32dd04201d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042022:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f32dd042027:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd04202c:   vmovdqu 0x80(%rdx),%xmm5
  0x00007f32dd042034:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f32dd042039:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007f32dd04203e:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f32dd042043:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f32dd042048:   vaesdec %xmm5,%xmm0,%xmm0
  0x00007f32dd04204d:   vmovdqu 0x90(%rdx),%xmm2
  0x00007f32dd042055:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f32dd04205a:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f32dd042062:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042067:   vmovdqu (%rdx),%xmm4
  0x00007f32dd04206b:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd042070:   cmp    $0x2c,%eax
  0x00007f32dd042073:   je     Stub::aescrypt_decryptBlock+258 0x00007f32dd0420c2
  0x00007f32dd042075:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007f32dd04207a:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f32dd04207f:   vmovdqu 0xb0(%rdx),%xmm2
  0x00007f32dd042087:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f32dd04208c:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f32dd042094:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042099:   cmp    $0x34,%eax
  0x00007f32dd04209c:   je     Stub::aescrypt_decryptBlock+258 0x00007f32dd0420c2
  0x00007f32dd04209e:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007f32dd0420a3:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f32dd0420a8:   vmovdqu 0xd0(%rdx),%xmm2
  0x00007f32dd0420b0:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f32dd0420b5:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007f32dd0420bd:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd0420c2:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007f32dd0420c7:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f32dd0420cc:   vaesdeclast %xmm4,%xmm0,%xmm0
  0x00007f32dd0420d1:   vmovdqu %xmm0,(%rsi)
  0x00007f32dd0420d5:   xor    %rax,%rax
  0x00007f32dd0420d8:   leaveq 
  0x00007f32dd0420d9:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::cipherBlockChaining_encryptAESCrypt [0x00007f32dd0420e0, 0x00007f32dd042308] (552 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0420e0:   push   %rbp
  0x00007f32dd0420e1:   mov    %rsp,%rbp
  0x00007f32dd0420e4:   push   %r8
  0x00007f32dd0420e6:   vmovdqu 0x9e17552(%rip),%xmm1        # 0x00007f32e6e59640
  0x00007f32dd0420ee:   vmovdqu (%rdx),%xmm2
  0x00007f32dd0420f2:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f32dd0420f7:   vmovdqu 0x10(%rdx),%xmm3
  0x00007f32dd0420fc:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042101:   vmovdqu 0x20(%rdx),%xmm4
  0x00007f32dd042106:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd04210b:   vmovdqu 0x30(%rdx),%xmm5
  0x00007f32dd042110:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f32dd042115:   vmovdqu 0x40(%rdx),%xmm6
  0x00007f32dd04211a:   vpshufb %xmm1,%xmm6,%xmm6
  0x00007f32dd04211f:   vmovdqu 0x50(%rdx),%xmm7
  0x00007f32dd042124:   vpshufb %xmm1,%xmm7,%xmm7
  0x00007f32dd042129:   vmovdqu 0x60(%rdx),%xmm8
  0x00007f32dd04212e:   vpshufb %xmm1,%xmm8,%xmm8
  0x00007f32dd042133:   vmovdqu 0x70(%rdx),%xmm9
  0x00007f32dd042138:   vpshufb %xmm1,%xmm9,%xmm9
  0x00007f32dd04213d:   vmovdqu 0x80(%rdx),%xmm10
  0x00007f32dd042145:   vpshufb %xmm1,%xmm10,%xmm10
  0x00007f32dd04214a:   vmovdqu 0x90(%rdx),%xmm11
  0x00007f32dd042152:   vpshufb %xmm1,%xmm11,%xmm11
  0x00007f32dd042157:   vmovdqu 0xa0(%rdx),%xmm12
  0x00007f32dd04215f:   vpshufb %xmm1,%xmm12,%xmm12
  0x00007f32dd042164:   vmovdqu (%rcx),%xmm0
  0x00007f32dd042168:   mov    -0x4(%rdx),%eax
  0x00007f32dd04216b:   cmp    $0x2c,%eax
  0x00007f32dd04216e:   jne    Stub::cipherBlockChaining_encryptAESCrypt+245 0x00007f32dd0421d5
  0x00007f32dd042174:   movabs $0x0,%rax
  0x00007f32dd04217e:   xchg   %ax,%ax
  0x00007f32dd042180:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f32dd042185:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd042189:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f32dd04218d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f32dd042192:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f32dd042197:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f32dd04219c:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007f32dd0421a1:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007f32dd0421a6:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007f32dd0421ab:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007f32dd0421b0:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007f32dd0421b5:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007f32dd0421ba:   vaesenclast %xmm12,%xmm0,%xmm0
  0x00007f32dd0421bf:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f32dd0421c4:   add    $0x10,%rax
  0x00007f32dd0421c8:   sub    $0x10,%r8
  0x00007f32dd0421cc:   jne    Stub::cipherBlockChaining_encryptAESCrypt+160 0x00007f32dd042180
  0x00007f32dd0421ce:   vmovdqu %xmm0,(%rcx)
  0x00007f32dd0421d2:   pop    %rax
  0x00007f32dd0421d3:   leaveq 
  0x00007f32dd0421d4:   retq   
  0x00007f32dd0421d5:   vmovdqu 0xb0(%rdx),%xmm13
  0x00007f32dd0421dd:   vpshufb %xmm1,%xmm13,%xmm13
  0x00007f32dd0421e2:   vmovdqu 0xc0(%rdx),%xmm14
  0x00007f32dd0421ea:   vpshufb %xmm1,%xmm14,%xmm14
  0x00007f32dd0421ef:   cmp    $0x34,%eax
  0x00007f32dd0421f2:   jne    Stub::cipherBlockChaining_encryptAESCrypt+397 0x00007f32dd04226d
  0x00007f32dd0421f8:   movabs $0x0,%rax
  0x00007f32dd042202:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd04220c:   data16 data16 xchg %ax,%ax
  0x00007f32dd042210:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f32dd042215:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd042219:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f32dd04221d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f32dd042222:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f32dd042227:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f32dd04222c:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007f32dd042231:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007f32dd042236:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007f32dd04223b:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007f32dd042240:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007f32dd042245:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007f32dd04224a:   vaesenc %xmm12,%xmm0,%xmm0
  0x00007f32dd04224f:   vaesenc %xmm13,%xmm0,%xmm0
  0x00007f32dd042254:   vaesenclast %xmm14,%xmm0,%xmm0
  0x00007f32dd042259:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f32dd04225e:   add    $0x10,%rax
  0x00007f32dd042262:   sub    $0x10,%r8
  0x00007f32dd042266:   jne    Stub::cipherBlockChaining_encryptAESCrypt+304 0x00007f32dd042210
  0x00007f32dd042268:   jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x00007f32dd0421ce
  0x00007f32dd04226d:   vmovdqu 0xd0(%rdx),%xmm15
  0x00007f32dd042275:   vpshufb %xmm1,%xmm15,%xmm15
  0x00007f32dd04227a:   movabs $0x0,%rax
  0x00007f32dd042284:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd04228c:   data16 data16 xchg %ax,%ax
  0x00007f32dd042290:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f32dd042295:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd042299:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f32dd04229d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f32dd0422a2:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f32dd0422a7:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f32dd0422ac:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007f32dd0422b1:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007f32dd0422b6:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007f32dd0422bb:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007f32dd0422c0:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007f32dd0422c5:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007f32dd0422ca:   vaesenc %xmm12,%xmm0,%xmm0
  0x00007f32dd0422cf:   vaesenc %xmm13,%xmm0,%xmm0
  0x00007f32dd0422d4:   vaesenc %xmm14,%xmm0,%xmm0
  0x00007f32dd0422d9:   vaesenc %xmm15,%xmm0,%xmm0
  0x00007f32dd0422de:   vmovdqu 0xe0(%rdx),%xmm1
  0x00007f32dd0422e6:   vpshufb 0x9e17351(%rip),%xmm1,%xmm1        # 0x00007f32e6e59640
  0x00007f32dd0422ef:   vaesenclast %xmm1,%xmm0,%xmm0
  0x00007f32dd0422f4:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f32dd0422f9:   add    $0x10,%rax
  0x00007f32dd0422fd:   sub    $0x10,%r8
  0x00007f32dd042301:   jne    Stub::cipherBlockChaining_encryptAESCrypt+432 0x00007f32dd042290
  0x00007f32dd042303:   jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x00007f32dd0421ce
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::cipherBlockChaining_decryptAESCrypt [0x00007f32dd042320, 0x00007f32dd042ae9] (1993 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd042320:   push   %rbp
  0x00007f32dd042321:   mov    %rsp,%rbp
  0x00007f32dd042324:   push   %r8
  0x00007f32dd042326:   push   %rbx
  0x00007f32dd042327:   vmovdqu 0x9e17311(%rip),%xmm1        # 0x00007f32e6e59640
  0x00007f32dd04232f:   vmovdqu 0x10(%rdx),%xmm5
  0x00007f32dd042334:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f32dd042339:   vmovdqu 0x20(%rdx),%xmm6
  0x00007f32dd04233e:   vpshufb %xmm1,%xmm6,%xmm6
  0x00007f32dd042343:   vmovdqu 0x30(%rdx),%xmm7
  0x00007f32dd042348:   vpshufb %xmm1,%xmm7,%xmm7
  0x00007f32dd04234d:   vmovdqu 0x40(%rdx),%xmm8
  0x00007f32dd042352:   vpshufb %xmm1,%xmm8,%xmm8
  0x00007f32dd042357:   vmovdqu 0x50(%rdx),%xmm9
  0x00007f32dd04235c:   vpshufb %xmm1,%xmm9,%xmm9
  0x00007f32dd042361:   vmovdqu 0x60(%rdx),%xmm10
  0x00007f32dd042366:   vpshufb %xmm1,%xmm10,%xmm10
  0x00007f32dd04236b:   vmovdqu 0x70(%rdx),%xmm11
  0x00007f32dd042370:   vpshufb %xmm1,%xmm11,%xmm11
  0x00007f32dd042375:   vmovdqu 0x80(%rdx),%xmm12
  0x00007f32dd04237d:   vpshufb %xmm1,%xmm12,%xmm12
  0x00007f32dd042382:   vmovdqu 0x90(%rdx),%xmm13
  0x00007f32dd04238a:   vpshufb %xmm1,%xmm13,%xmm13
  0x00007f32dd04238f:   vmovdqu 0xa0(%rdx),%xmm14
  0x00007f32dd042397:   vpshufb %xmm1,%xmm14,%xmm14
  0x00007f32dd04239c:   vmovdqu (%rdx),%xmm15
  0x00007f32dd0423a0:   vpshufb %xmm1,%xmm15,%xmm15
  0x00007f32dd0423a5:   vmovdqu (%rcx),%xmm1
  0x00007f32dd0423a9:   xor    %rax,%rax
  0x00007f32dd0423ac:   mov    -0x4(%rdx),%ebx
  0x00007f32dd0423af:   cmp    $0x34,%ebx
  0x00007f32dd0423b2:   je     Stub::cipherBlockChaining_decryptAESCrypt+603 0x00007f32dd04257b
  0x00007f32dd0423b8:   cmp    $0x3c,%ebx
  0x00007f32dd0423bb:   je     Stub::cipherBlockChaining_decryptAESCrypt+1221 0x00007f32dd0427e5
  0x00007f32dd0423c1:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd0423cc:   data16 data16 xchg %ax,%ax
  0x00007f32dd0423d0:   cmp    $0x40,%r8
  0x00007f32dd0423d4:   jl     Stub::cipherBlockChaining_decryptAESCrypt+500 0x00007f32dd042514
  0x00007f32dd0423da:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f32dd0423df:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007f32dd0423e5:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007f32dd0423eb:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007f32dd0423f1:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f32dd0423f5:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007f32dd0423f9:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007f32dd0423fd:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f32dd042401:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f32dd042406:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007f32dd04240b:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007f32dd042410:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007f32dd042415:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f32dd04241a:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007f32dd04241f:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007f32dd042424:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007f32dd042429:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f32dd04242e:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007f32dd042433:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007f32dd042438:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007f32dd04243d:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f32dd042442:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007f32dd042447:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007f32dd04244c:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007f32dd042451:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f32dd042456:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007f32dd04245b:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007f32dd042460:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007f32dd042465:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f32dd04246a:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007f32dd04246f:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007f32dd042474:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007f32dd042479:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f32dd04247e:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007f32dd042483:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007f32dd042488:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007f32dd04248d:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f32dd042492:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007f32dd042497:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007f32dd04249c:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007f32dd0424a1:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f32dd0424a6:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007f32dd0424ab:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007f32dd0424b0:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007f32dd0424b5:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f32dd0424ba:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007f32dd0424bf:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007f32dd0424c4:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007f32dd0424c9:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd0424cd:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f32dd0424d2:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007f32dd0424d6:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007f32dd0424dc:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007f32dd0424e0:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007f32dd0424e6:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007f32dd0424ea:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007f32dd0424f0:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f32dd0424f5:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007f32dd0424fb:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007f32dd042501:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007f32dd042507:   add    $0x40,%rax
  0x00007f32dd04250b:   sub    $0x40,%r8
  0x00007f32dd04250f:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+176 0x00007f32dd0423d0
  0x00007f32dd042514:   cmp    $0x0,%r8
  0x00007f32dd042518:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f32dd042ae1
  0x00007f32dd04251e:   xchg   %ax,%ax
  0x00007f32dd042520:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f32dd042525:   vmovdqa %xmm0,%xmm2
  0x00007f32dd042529:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f32dd04252d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f32dd042532:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f32dd042537:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f32dd04253c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f32dd042541:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f32dd042546:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f32dd04254b:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f32dd042550:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f32dd042555:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f32dd04255a:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f32dd04255f:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd042563:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f32dd042568:   vmovdqa %xmm2,%xmm1
  0x00007f32dd04256c:   add    $0x10,%rax
  0x00007f32dd042570:   sub    $0x10,%r8
  0x00007f32dd042574:   jne    Stub::cipherBlockChaining_decryptAESCrypt+512 0x00007f32dd042520
  0x00007f32dd042576:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f32dd042ae1
  0x00007f32dd04257b:   cmp    $0x40,%r8
  0x00007f32dd04257f:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1075 0x00007f32dd042753
  0x00007f32dd042585:   sub    $0x30,%rsp
  0x00007f32dd042589:   vmovdqu %xmm15,(%rsp)
  0x00007f32dd04258e:   vmovdqu 0xb0(%rdx),%xmm15
  0x00007f32dd042596:   vpshufb 0x9e170a1(%rip),%xmm15,%xmm15        # 0x00007f32e6e59640
  0x00007f32dd04259f:   vmovdqu %xmm15,0x10(%rsp)
  0x00007f32dd0425a5:   vmovdqu 0xc0(%rdx),%xmm1
  0x00007f32dd0425ad:   vpshufb 0x9e1708a(%rip),%xmm1,%xmm1        # 0x00007f32e6e59640
  0x00007f32dd0425b6:   vmovdqu %xmm1,0x20(%rsp)
  0x00007f32dd0425bc:   nopl   0x0(%rax)
  0x00007f32dd0425c0:   cmp    $0x40,%r8
  0x00007f32dd0425c4:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1061 0x00007f32dd042745
  0x00007f32dd0425ca:   vmovdqu 0x10(%rsp),%xmm15
  0x00007f32dd0425d0:   vmovdqu 0x20(%rsp),%xmm1
  0x00007f32dd0425d6:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f32dd0425db:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007f32dd0425e1:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007f32dd0425e7:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007f32dd0425ed:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f32dd0425f1:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007f32dd0425f5:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007f32dd0425f9:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f32dd0425fd:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f32dd042602:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007f32dd042607:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007f32dd04260c:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007f32dd042611:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f32dd042616:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007f32dd04261b:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007f32dd042620:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007f32dd042625:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f32dd04262a:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007f32dd04262f:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007f32dd042634:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007f32dd042639:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f32dd04263e:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007f32dd042643:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007f32dd042648:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007f32dd04264d:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f32dd042652:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007f32dd042657:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007f32dd04265c:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007f32dd042661:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f32dd042666:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007f32dd04266b:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007f32dd042670:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007f32dd042675:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f32dd04267a:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007f32dd04267f:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007f32dd042684:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007f32dd042689:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f32dd04268e:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007f32dd042693:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007f32dd042698:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007f32dd04269d:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f32dd0426a2:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007f32dd0426a7:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007f32dd0426ac:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007f32dd0426b1:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007f32dd0426b6:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007f32dd0426bb:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007f32dd0426c0:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007f32dd0426c5:   vmovdqu (%rsp),%xmm15
  0x00007f32dd0426ca:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007f32dd0426cf:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007f32dd0426d4:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007f32dd0426d9:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007f32dd0426de:   vmovdqu (%rcx),%xmm1
  0x00007f32dd0426e2:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f32dd0426e7:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007f32dd0426ec:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007f32dd0426f1:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007f32dd0426f6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd0426fa:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f32dd0426ff:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007f32dd042703:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007f32dd042709:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007f32dd04270d:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007f32dd042713:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007f32dd042717:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007f32dd04271d:   vmovdqu %xmm1,(%rcx)
  0x00007f32dd042721:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f32dd042726:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007f32dd04272c:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007f32dd042732:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007f32dd042738:   add    $0x40,%rax
  0x00007f32dd04273c:   sub    $0x40,%r8
  0x00007f32dd042740:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+672 0x00007f32dd0425c0
  0x00007f32dd042745:   add    $0x30,%rsp
  0x00007f32dd042749:   cmp    $0x0,%r8
  0x00007f32dd04274d:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f32dd042ae1
  0x00007f32dd042753:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007f32dd04275b:   vpshufb 0x9e16edc(%rip),%xmm3,%xmm3        # 0x00007f32e6e59640
  0x00007f32dd042764:   vmovdqu 0xc0(%rdx),%xmm4
  0x00007f32dd04276c:   vpshufb 0x9e16ecb(%rip),%xmm4,%xmm4        # 0x00007f32e6e59640
  0x00007f32dd042775:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd042780:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f32dd042785:   vmovdqa %xmm0,%xmm2
  0x00007f32dd042789:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f32dd04278d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f32dd042792:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f32dd042797:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f32dd04279c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f32dd0427a1:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f32dd0427a6:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f32dd0427ab:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f32dd0427b0:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f32dd0427b5:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f32dd0427ba:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f32dd0427bf:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f32dd0427c4:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f32dd0427c9:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd0427cd:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f32dd0427d2:   vmovdqa %xmm2,%xmm1
  0x00007f32dd0427d6:   add    $0x10,%rax
  0x00007f32dd0427da:   sub    $0x10,%r8
  0x00007f32dd0427de:   jne    Stub::cipherBlockChaining_decryptAESCrypt+1120 0x00007f32dd042780
  0x00007f32dd0427e0:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f32dd042ae1
  0x00007f32dd0427e5:   cmp    $0x40,%r8
  0x00007f32dd0427e9:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1799 0x00007f32dd042a27
  0x00007f32dd0427ef:   sub    $0x50,%rsp
  0x00007f32dd0427f3:   vmovdqu %xmm15,(%rsp)
  0x00007f32dd0427f8:   vmovdqu 0xd0(%rdx),%xmm15
  0x00007f32dd042800:   vpshufb 0x9e16e37(%rip),%xmm15,%xmm15        # 0x00007f32e6e59640
  0x00007f32dd042809:   vmovdqu %xmm15,0x30(%rsp)
  0x00007f32dd04280f:   vmovdqu 0xe0(%rdx),%xmm1
  0x00007f32dd042817:   vpshufb 0x9e16e20(%rip),%xmm1,%xmm1        # 0x00007f32e6e59640
  0x00007f32dd042820:   vmovdqu %xmm1,0x40(%rsp)
  0x00007f32dd042826:   vmovdqu 0xb0(%rdx),%xmm15
  0x00007f32dd04282e:   vpshufb 0x9e16e09(%rip),%xmm15,%xmm15        # 0x00007f32e6e59640
  0x00007f32dd042837:   vmovdqu %xmm15,0x10(%rsp)
  0x00007f32dd04283d:   vmovdqu 0xc0(%rdx),%xmm1
  0x00007f32dd042845:   vpshufb 0x9e16df2(%rip),%xmm1,%xmm1        # 0x00007f32e6e59640
  0x00007f32dd04284e:   vmovdqu %xmm1,0x20(%rsp)
  0x00007f32dd042854:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd04285c:   data16 data16 xchg %ax,%ax
  0x00007f32dd042860:   cmp    $0x40,%r8
  0x00007f32dd042864:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1785 0x00007f32dd042a19
  0x00007f32dd04286a:   vmovdqu 0x10(%rsp),%xmm15
  0x00007f32dd042870:   vmovdqu 0x20(%rsp),%xmm1
  0x00007f32dd042876:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f32dd04287b:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007f32dd042881:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007f32dd042887:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007f32dd04288d:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f32dd042891:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007f32dd042895:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007f32dd042899:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f32dd04289d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f32dd0428a2:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007f32dd0428a7:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007f32dd0428ac:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007f32dd0428b1:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f32dd0428b6:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007f32dd0428bb:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007f32dd0428c0:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007f32dd0428c5:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f32dd0428ca:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007f32dd0428cf:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007f32dd0428d4:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007f32dd0428d9:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f32dd0428de:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007f32dd0428e3:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007f32dd0428e8:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007f32dd0428ed:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f32dd0428f2:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007f32dd0428f7:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007f32dd0428fc:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007f32dd042901:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f32dd042906:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007f32dd04290b:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007f32dd042910:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007f32dd042915:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f32dd04291a:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007f32dd04291f:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007f32dd042924:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007f32dd042929:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f32dd04292e:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007f32dd042933:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007f32dd042938:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007f32dd04293d:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f32dd042942:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007f32dd042947:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007f32dd04294c:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007f32dd042951:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007f32dd042956:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007f32dd04295b:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007f32dd042960:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007f32dd042965:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007f32dd04296a:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007f32dd04296f:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007f32dd042974:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007f32dd042979:   vmovdqu 0x30(%rsp),%xmm15
  0x00007f32dd04297f:   vmovdqu 0x40(%rsp),%xmm1
  0x00007f32dd042985:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007f32dd04298a:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007f32dd04298f:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007f32dd042994:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007f32dd042999:   vmovdqu (%rsp),%xmm15
  0x00007f32dd04299e:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007f32dd0429a3:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007f32dd0429a8:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007f32dd0429ad:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007f32dd0429b2:   vmovdqu (%rcx),%xmm1
  0x00007f32dd0429b6:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f32dd0429bb:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007f32dd0429c0:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007f32dd0429c5:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007f32dd0429ca:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd0429ce:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f32dd0429d3:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007f32dd0429d7:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007f32dd0429dd:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007f32dd0429e1:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007f32dd0429e7:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007f32dd0429eb:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007f32dd0429f1:   vmovdqu %xmm1,(%rcx)
  0x00007f32dd0429f5:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f32dd0429fa:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007f32dd042a00:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007f32dd042a06:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007f32dd042a0c:   add    $0x40,%rax
  0x00007f32dd042a10:   sub    $0x40,%r8
  0x00007f32dd042a14:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1344 0x00007f32dd042860
  0x00007f32dd042a19:   add    $0x50,%rsp
  0x00007f32dd042a1d:   cmp    $0x0,%r8
  0x00007f32dd042a21:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f32dd042ae1
  0x00007f32dd042a27:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007f32dd042a2f:   vpshufb 0x9e16c08(%rip),%xmm3,%xmm3        # 0x00007f32e6e59640
  0x00007f32dd042a38:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd042a40:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f32dd042a45:   vmovdqa %xmm0,%xmm2
  0x00007f32dd042a49:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f32dd042a4d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f32dd042a52:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f32dd042a57:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f32dd042a5c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f32dd042a61:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f32dd042a66:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f32dd042a6b:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f32dd042a70:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f32dd042a75:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f32dd042a7a:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f32dd042a7f:   vmovdqu 0xc0(%rdx),%xmm4
  0x00007f32dd042a87:   vpshufb 0x9e16bb0(%rip),%xmm4,%xmm4        # 0x00007f32e6e59640
  0x00007f32dd042a90:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f32dd042a95:   vmovdqu 0xd0(%rdx),%xmm4
  0x00007f32dd042a9d:   vpshufb 0x9e16b9a(%rip),%xmm4,%xmm4        # 0x00007f32e6e59640
  0x00007f32dd042aa6:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f32dd042aab:   vmovdqu 0xe0(%rdx),%xmm4
  0x00007f32dd042ab3:   vpshufb 0x9e16b84(%rip),%xmm4,%xmm4        # 0x00007f32e6e59640
  0x00007f32dd042abc:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f32dd042ac1:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f32dd042ac6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd042aca:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f32dd042acf:   vmovdqa %xmm2,%xmm1
  0x00007f32dd042ad3:   add    $0x10,%rax
  0x00007f32dd042ad7:   sub    $0x10,%r8
  0x00007f32dd042adb:   jne    Stub::cipherBlockChaining_decryptAESCrypt+1824 0x00007f32dd042a40
  0x00007f32dd042ae1:   vmovdqu %xmm1,(%rcx)
  0x00007f32dd042ae5:   pop    %rbx
  0x00007f32dd042ae6:   pop    %rax
  0x00007f32dd042ae7:   leaveq 
  0x00007f32dd042ae8:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::counterMode_AESCrypt [0x00007f32dd042b00, 0x00007f32dd043cb9] (4537 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd042b00:   push   %rbp
  0x00007f32dd042b01:   mov    %rsp,%rbp
  0x00007f32dd042b04:   push   %r8
  0x00007f32dd042b06:   mov    0x10(%rbp),%r10
  0x00007f32dd042b0a:   mov    (%r10),%r11d
  0x00007f32dd042b0d:   push   %rbx
  0x00007f32dd042b0e:   vmovdqu (%rcx),%xmm2
  0x00007f32dd042b12:   vmovdqu 0x9e16ae6(%rip),%xmm0        # 0x00007f32e6e59600
  0x00007f32dd042b1a:   vpshufb %xmm0,%xmm2,%xmm2
  0x00007f32dd042b1f:   movabs $0x0,%rax
  0x00007f32dd042b29:   cmp    $0x10,%r11
  0x00007f32dd042b2d:   jae    Stub::counterMode_AESCrypt+85 0x00007f32dd042b55
  0x00007f32dd042b33:   cmp    $0x0,%r8
  0x00007f32dd042b37:   jle    Stub::counterMode_AESCrypt+85 0x00007f32dd042b55
  0x00007f32dd042b3d:   mov    (%r9,%r11,1),%bl
  0x00007f32dd042b41:   xor    (%rdi,%rax,1),%bl
  0x00007f32dd042b44:   mov    %bl,(%rsi,%rax,1)
  0x00007f32dd042b47:   add    $0x1,%rax
  0x00007f32dd042b4b:   add    $0x1,%r11
  0x00007f32dd042b4f:   sub    $0x1,%r8
  0x00007f32dd042b53:   jmp    Stub::counterMode_AESCrypt+41 0x00007f32dd042b29
  0x00007f32dd042b55:   mov    %r11d,(%r10)
  0x00007f32dd042b58:   vmovdqu 0x9e16ae0(%rip),%xmm1        # 0x00007f32e6e59640
  0x00007f32dd042b60:   mov    -0x4(%rdx),%ebx
  0x00007f32dd042b63:   cmp    $0x34,%ebx
  0x00007f32dd042b66:   je     Stub::counterMode_AESCrypt+1472 0x00007f32dd0430c0
  0x00007f32dd042b6c:   cmp    $0x3c,%ebx
  0x00007f32dd042b6f:   je     Stub::counterMode_AESCrypt+2944 0x00007f32dd043680
  0x00007f32dd042b75:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd042b80:   cmp    $0x60,%r8
  0x00007f32dd042b84:   jl     Stub::counterMode_AESCrypt+976 0x00007f32dd042ed0
  0x00007f32dd042b8a:   vmovdqu (%rdx),%xmm3
  0x00007f32dd042b8e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042b93:   vmovdqa %xmm2,%xmm5
  0x00007f32dd042b97:   vmovdqa %xmm2,%xmm6
  0x00007f32dd042b9b:   vmovdqa %xmm2,%xmm7
  0x00007f32dd042b9f:   vmovdqa %xmm2,%xmm8
  0x00007f32dd042ba3:   vmovdqa %xmm2,%xmm9
  0x00007f32dd042ba7:   vmovdqa %xmm2,%xmm10
  0x00007f32dd042bab:   vpextrq $0x0,%xmm6,%rbx
  0x00007f32dd042bb1:   add    $0x1,%rbx
  0x00007f32dd042bb5:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007f32dd042bbb:   jae    Stub::counterMode_AESCrypt+209 0x00007f32dd042bd1
  0x00007f32dd042bc1:   vpextrq $0x1,%xmm6,%rbx
  0x00007f32dd042bc7:   add    $0x1,%rbx
  0x00007f32dd042bcb:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007f32dd042bd1:   vpextrq $0x0,%xmm7,%rbx
  0x00007f32dd042bd7:   add    $0x2,%rbx
  0x00007f32dd042bdb:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007f32dd042be1:   jae    Stub::counterMode_AESCrypt+247 0x00007f32dd042bf7
  0x00007f32dd042be7:   vpextrq $0x1,%xmm7,%rbx
  0x00007f32dd042bed:   add    $0x1,%rbx
  0x00007f32dd042bf1:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007f32dd042bf7:   vpextrq $0x0,%xmm8,%rbx
  0x00007f32dd042bfd:   add    $0x3,%rbx
  0x00007f32dd042c01:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007f32dd042c07:   jae    Stub::counterMode_AESCrypt+285 0x00007f32dd042c1d
  0x00007f32dd042c0d:   vpextrq $0x1,%xmm8,%rbx
  0x00007f32dd042c13:   add    $0x1,%rbx
  0x00007f32dd042c17:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007f32dd042c1d:   vpextrq $0x0,%xmm9,%rbx
  0x00007f32dd042c23:   add    $0x4,%rbx
  0x00007f32dd042c27:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007f32dd042c2d:   jae    Stub::counterMode_AESCrypt+323 0x00007f32dd042c43
  0x00007f32dd042c33:   vpextrq $0x1,%xmm9,%rbx
  0x00007f32dd042c39:   add    $0x1,%rbx
  0x00007f32dd042c3d:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007f32dd042c43:   vpextrq $0x0,%xmm10,%rbx
  0x00007f32dd042c49:   add    $0x5,%rbx
  0x00007f32dd042c4d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007f32dd042c53:   jae    Stub::counterMode_AESCrypt+361 0x00007f32dd042c69
  0x00007f32dd042c59:   vpextrq $0x1,%xmm10,%rbx
  0x00007f32dd042c5f:   add    $0x1,%rbx
  0x00007f32dd042c63:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007f32dd042c69:   vpextrq $0x0,%xmm2,%rbx
  0x00007f32dd042c6f:   add    $0x6,%rbx
  0x00007f32dd042c73:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f32dd042c79:   jae    Stub::counterMode_AESCrypt+399 0x00007f32dd042c8f
  0x00007f32dd042c7f:   vpextrq $0x1,%xmm2,%rbx
  0x00007f32dd042c85:   add    $0x1,%rbx
  0x00007f32dd042c89:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f32dd042c8f:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f32dd042c94:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007f32dd042c99:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007f32dd042c9e:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007f32dd042ca3:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007f32dd042ca8:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007f32dd042cad:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f32dd042cb1:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007f32dd042cb5:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007f32dd042cb9:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007f32dd042cbd:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f32dd042cc1:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007f32dd042cc5:   vmovdqu 0x10(%rdx),%xmm4
  0x00007f32dd042cca:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd042ccf:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f32dd042cd4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042cd9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd042cde:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd042ce3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd042ce8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd042ced:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd042cf2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd042cf7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042cfc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd042d01:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd042d06:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd042d0b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd042d10:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd042d15:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f32dd042d1a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd042d1f:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f32dd042d24:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042d29:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd042d2e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd042d33:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd042d38:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd042d3d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd042d42:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd042d47:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042d4c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd042d51:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd042d56:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd042d5b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd042d60:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd042d65:   vmovdqu 0x50(%rdx),%xmm4
  0x00007f32dd042d6a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd042d6f:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f32dd042d74:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042d79:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd042d7e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd042d83:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd042d88:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd042d8d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd042d92:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd042d97:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042d9c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd042da1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd042da6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd042dab:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd042db0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd042db5:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f32dd042dba:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd042dbf:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f32dd042dc7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042dcc:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd042dd1:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd042dd6:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd042ddb:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd042de0:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd042de5:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd042dea:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042def:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd042df4:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd042df9:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd042dfe:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd042e03:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd042e08:   vmovdqu 0x90(%rdx),%xmm4
  0x00007f32dd042e10:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd042e15:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f32dd042e1d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042e22:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd042e27:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd042e2c:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd042e31:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd042e36:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd042e3b:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd042e40:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f32dd042e45:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007f32dd042e4a:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007f32dd042e4f:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007f32dd042e54:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007f32dd042e59:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007f32dd042e5e:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f32dd042e63:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007f32dd042e69:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007f32dd042e6f:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007f32dd042e75:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007f32dd042e7b:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007f32dd042e81:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f32dd042e86:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007f32dd042e8b:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007f32dd042e90:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007f32dd042e95:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f32dd042e99:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007f32dd042e9d:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f32dd042ea2:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007f32dd042ea8:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007f32dd042eae:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007f32dd042eb4:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007f32dd042eba:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007f32dd042ec0:   add    $0x60,%rax
  0x00007f32dd042ec4:   sub    $0x60,%r8
  0x00007f32dd042ec8:   jmpq   Stub::counterMode_AESCrypt+128 0x00007f32dd042b80
  0x00007f32dd042ecd:   data16 xchg %ax,%ax
  0x00007f32dd042ed0:   cmp    $0x0,%r8
  0x00007f32dd042ed4:   jle    Stub::counterMode_AESCrypt+4524 0x00007f32dd043cac
  0x00007f32dd042eda:   vmovdqu (%rdx),%xmm3
  0x00007f32dd042ede:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042ee3:   vmovdqa %xmm2,%xmm5
  0x00007f32dd042ee7:   vpextrq $0x0,%xmm2,%rbx
  0x00007f32dd042eed:   add    $0x1,%rbx
  0x00007f32dd042ef1:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f32dd042ef7:   jae    Stub::counterMode_AESCrypt+1037 0x00007f32dd042f0d
  0x00007f32dd042efd:   vpextrq $0x1,%xmm2,%rbx
  0x00007f32dd042f03:   add    $0x1,%rbx
  0x00007f32dd042f07:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f32dd042f0d:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f32dd042f12:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f32dd042f16:   vmovdqu 0x10(%rdx),%xmm3
  0x00007f32dd042f1b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042f20:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042f25:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f32dd042f2a:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042f2f:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042f34:   vmovdqu 0x30(%rdx),%xmm3
  0x00007f32dd042f39:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042f3e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042f43:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f32dd042f48:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042f4d:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042f52:   vmovdqu 0x50(%rdx),%xmm3
  0x00007f32dd042f57:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042f5c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042f61:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f32dd042f66:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042f6b:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042f70:   vmovdqu 0x70(%rdx),%xmm3
  0x00007f32dd042f75:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042f7a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042f7f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f32dd042f87:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042f8c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042f91:   vmovdqu 0x90(%rdx),%xmm3
  0x00007f32dd042f99:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042f9e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd042fa3:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f32dd042fab:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd042fb0:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f32dd042fb5:   cmp    $0x10,%r8
  0x00007f32dd042fb9:   jl     Stub::counterMode_AESCrypt+1243 0x00007f32dd042fdb
  0x00007f32dd042fbf:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f32dd042fc4:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f32dd042fc9:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f32dd042fce:   add    $0x10,%rax
  0x00007f32dd042fd2:   sub    $0x10,%r8
  0x00007f32dd042fd6:   jmpq   Stub::counterMode_AESCrypt+976 0x00007f32dd042ed0
  0x00007f32dd042fdb:   add    %r8,%rax
  0x00007f32dd042fde:   test   $0x8,%r8b
  0x00007f32dd042fe2:   je     Stub::counterMode_AESCrypt+1267 0x00007f32dd042ff3
  0x00007f32dd042fe8:   sub    $0x8,%rax
  0x00007f32dd042fec:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f32dd042ff3:   test   $0x4,%r8b
  0x00007f32dd042ff7:   je     Stub::counterMode_AESCrypt+1294 0x00007f32dd04300e
  0x00007f32dd042ffd:   sub    $0x4,%rax
  0x00007f32dd043001:   vpslldq $0x4,%xmm11,%xmm11
  0x00007f32dd043007:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f32dd04300e:   test   $0x2,%r8b
  0x00007f32dd043012:   je     Stub::counterMode_AESCrypt+1320 0x00007f32dd043028
  0x00007f32dd043018:   sub    $0x2,%rax
  0x00007f32dd04301c:   vpslldq $0x2,%xmm11,%xmm11
  0x00007f32dd043022:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f32dd043028:   test   $0x1,%r8b
  0x00007f32dd04302c:   je     Stub::counterMode_AESCrypt+1347 0x00007f32dd043043
  0x00007f32dd043032:   sub    $0x1,%rax
  0x00007f32dd043036:   vpslldq $0x1,%xmm11,%xmm11
  0x00007f32dd04303c:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f32dd043043:   vmovdqu %xmm5,(%r9)
  0x00007f32dd043048:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f32dd04304d:   test   $0x8,%r8b
  0x00007f32dd043051:   je     Stub::counterMode_AESCrypt+1383 0x00007f32dd043067
  0x00007f32dd043057:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f32dd04305e:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f32dd043063:   add    $0x8,%rax
  0x00007f32dd043067:   test   $0x4,%r8b
  0x00007f32dd04306b:   je     Stub::counterMode_AESCrypt+1409 0x00007f32dd043081
  0x00007f32dd043071:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f32dd043078:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007f32dd04307d:   add    $0x4,%rax
  0x00007f32dd043081:   test   $0x2,%r8b
  0x00007f32dd043085:   je     Stub::counterMode_AESCrypt+1435 0x00007f32dd04309b
  0x00007f32dd04308b:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f32dd043092:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007f32dd043097:   add    $0x2,%rax
  0x00007f32dd04309b:   test   $0x1,%r8b
  0x00007f32dd04309f:   je     Stub::counterMode_AESCrypt+1452 0x00007f32dd0430ac
  0x00007f32dd0430a5:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f32dd0430ac:   mov    %r8d,(%r10)
  0x00007f32dd0430af:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007f32dd043cac
  0x00007f32dd0430b4:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd0430bc:   data16 data16 xchg %ax,%ax
  0x00007f32dd0430c0:   cmp    $0x60,%r8
  0x00007f32dd0430c4:   jl     Stub::counterMode_AESCrypt+2416 0x00007f32dd043470
  0x00007f32dd0430ca:   vmovdqu (%rdx),%xmm3
  0x00007f32dd0430ce:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd0430d3:   vmovdqa %xmm2,%xmm5
  0x00007f32dd0430d7:   vmovdqa %xmm2,%xmm6
  0x00007f32dd0430db:   vmovdqa %xmm2,%xmm7
  0x00007f32dd0430df:   vmovdqa %xmm2,%xmm8
  0x00007f32dd0430e3:   vmovdqa %xmm2,%xmm9
  0x00007f32dd0430e7:   vmovdqa %xmm2,%xmm10
  0x00007f32dd0430eb:   vpextrq $0x0,%xmm6,%rbx
  0x00007f32dd0430f1:   add    $0x1,%rbx
  0x00007f32dd0430f5:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007f32dd0430fb:   jae    Stub::counterMode_AESCrypt+1553 0x00007f32dd043111
  0x00007f32dd043101:   vpextrq $0x1,%xmm6,%rbx
  0x00007f32dd043107:   add    $0x1,%rbx
  0x00007f32dd04310b:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007f32dd043111:   vpextrq $0x0,%xmm7,%rbx
  0x00007f32dd043117:   add    $0x2,%rbx
  0x00007f32dd04311b:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007f32dd043121:   jae    Stub::counterMode_AESCrypt+1591 0x00007f32dd043137
  0x00007f32dd043127:   vpextrq $0x1,%xmm7,%rbx
  0x00007f32dd04312d:   add    $0x1,%rbx
  0x00007f32dd043131:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007f32dd043137:   vpextrq $0x0,%xmm8,%rbx
  0x00007f32dd04313d:   add    $0x3,%rbx
  0x00007f32dd043141:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007f32dd043147:   jae    Stub::counterMode_AESCrypt+1629 0x00007f32dd04315d
  0x00007f32dd04314d:   vpextrq $0x1,%xmm8,%rbx
  0x00007f32dd043153:   add    $0x1,%rbx
  0x00007f32dd043157:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007f32dd04315d:   vpextrq $0x0,%xmm9,%rbx
  0x00007f32dd043163:   add    $0x4,%rbx
  0x00007f32dd043167:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007f32dd04316d:   jae    Stub::counterMode_AESCrypt+1667 0x00007f32dd043183
  0x00007f32dd043173:   vpextrq $0x1,%xmm9,%rbx
  0x00007f32dd043179:   add    $0x1,%rbx
  0x00007f32dd04317d:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007f32dd043183:   vpextrq $0x0,%xmm10,%rbx
  0x00007f32dd043189:   add    $0x5,%rbx
  0x00007f32dd04318d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007f32dd043193:   jae    Stub::counterMode_AESCrypt+1705 0x00007f32dd0431a9
  0x00007f32dd043199:   vpextrq $0x1,%xmm10,%rbx
  0x00007f32dd04319f:   add    $0x1,%rbx
  0x00007f32dd0431a3:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007f32dd0431a9:   vpextrq $0x0,%xmm2,%rbx
  0x00007f32dd0431af:   add    $0x6,%rbx
  0x00007f32dd0431b3:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f32dd0431b9:   jae    Stub::counterMode_AESCrypt+1743 0x00007f32dd0431cf
  0x00007f32dd0431bf:   vpextrq $0x1,%xmm2,%rbx
  0x00007f32dd0431c5:   add    $0x1,%rbx
  0x00007f32dd0431c9:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f32dd0431cf:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f32dd0431d4:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007f32dd0431d9:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007f32dd0431de:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007f32dd0431e3:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007f32dd0431e8:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007f32dd0431ed:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f32dd0431f1:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007f32dd0431f5:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007f32dd0431f9:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007f32dd0431fd:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f32dd043201:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007f32dd043205:   vmovdqu 0x10(%rdx),%xmm4
  0x00007f32dd04320a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd04320f:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f32dd043214:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043219:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd04321e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd043223:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd043228:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd04322d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd043232:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd043237:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd04323c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd043241:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd043246:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd04324b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd043250:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd043255:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f32dd04325a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd04325f:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f32dd043264:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043269:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd04326e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd043273:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd043278:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd04327d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd043282:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd043287:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd04328c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd043291:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd043296:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd04329b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd0432a0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd0432a5:   vmovdqu 0x50(%rdx),%xmm4
  0x00007f32dd0432aa:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd0432af:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f32dd0432b4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd0432b9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd0432be:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd0432c3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd0432c8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd0432cd:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd0432d2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd0432d7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd0432dc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd0432e1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd0432e6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd0432eb:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd0432f0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd0432f5:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f32dd0432fa:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd0432ff:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f32dd043307:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd04330c:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd043311:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd043316:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd04331b:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd043320:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd043325:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd04332a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd04332f:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd043334:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd043339:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd04333e:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd043343:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd043348:   vmovdqu 0x90(%rdx),%xmm4
  0x00007f32dd043350:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd043355:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f32dd04335d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043362:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd043367:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd04336c:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd043371:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd043376:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd04337b:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd043380:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043385:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd04338a:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd04338f:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd043394:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd043399:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd04339e:   vmovdqu 0xb0(%rdx),%xmm4
  0x00007f32dd0433a6:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd0433ab:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f32dd0433b3:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd0433b8:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd0433bd:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd0433c2:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd0433c7:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd0433cc:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd0433d1:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd0433d6:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f32dd0433db:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007f32dd0433e0:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007f32dd0433e5:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007f32dd0433ea:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007f32dd0433ef:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007f32dd0433f4:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f32dd0433f9:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007f32dd0433ff:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007f32dd043405:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007f32dd04340b:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007f32dd043411:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007f32dd043417:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f32dd04341c:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007f32dd043421:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007f32dd043426:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007f32dd04342b:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f32dd04342f:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007f32dd043433:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f32dd043438:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007f32dd04343e:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007f32dd043444:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007f32dd04344a:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007f32dd043450:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007f32dd043456:   add    $0x60,%rax
  0x00007f32dd04345a:   sub    $0x60,%r8
  0x00007f32dd04345e:   jmpq   Stub::counterMode_AESCrypt+1472 0x00007f32dd0430c0
  0x00007f32dd043463:   nopw   0x0(%rax,%rax,1)
  0x00007f32dd04346c:   data16 data16 xchg %ax,%ax
  0x00007f32dd043470:   cmp    $0x0,%r8
  0x00007f32dd043474:   jle    Stub::counterMode_AESCrypt+4524 0x00007f32dd043cac
  0x00007f32dd04347a:   vmovdqu (%rdx),%xmm3
  0x00007f32dd04347e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043483:   vmovdqa %xmm2,%xmm5
  0x00007f32dd043487:   vpextrq $0x0,%xmm2,%rbx
  0x00007f32dd04348d:   add    $0x1,%rbx
  0x00007f32dd043491:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f32dd043497:   jae    Stub::counterMode_AESCrypt+2477 0x00007f32dd0434ad
  0x00007f32dd04349d:   vpextrq $0x1,%xmm2,%rbx
  0x00007f32dd0434a3:   add    $0x1,%rbx
  0x00007f32dd0434a7:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f32dd0434ad:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f32dd0434b2:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f32dd0434b6:   vmovdqu 0x10(%rdx),%xmm3
  0x00007f32dd0434bb:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd0434c0:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd0434c5:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f32dd0434ca:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd0434cf:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd0434d4:   vmovdqu 0x30(%rdx),%xmm3
  0x00007f32dd0434d9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd0434de:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd0434e3:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f32dd0434e8:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd0434ed:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd0434f2:   vmovdqu 0x50(%rdx),%xmm3
  0x00007f32dd0434f7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd0434fc:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043501:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f32dd043506:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd04350b:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043510:   vmovdqu 0x70(%rdx),%xmm3
  0x00007f32dd043515:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd04351a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd04351f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f32dd043527:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd04352c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043531:   vmovdqu 0x90(%rdx),%xmm3
  0x00007f32dd043539:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd04353e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043543:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f32dd04354b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043550:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043555:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007f32dd04355d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043562:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043567:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f32dd04356f:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043574:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f32dd043579:   cmp    $0x10,%r8
  0x00007f32dd04357d:   jl     Stub::counterMode_AESCrypt+2719 0x00007f32dd04359f
  0x00007f32dd043583:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f32dd043588:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f32dd04358d:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f32dd043592:   add    $0x10,%rax
  0x00007f32dd043596:   sub    $0x10,%r8
  0x00007f32dd04359a:   jmpq   Stub::counterMode_AESCrypt+2416 0x00007f32dd043470
  0x00007f32dd04359f:   add    %r8,%rax
  0x00007f32dd0435a2:   test   $0x8,%r8b
  0x00007f32dd0435a6:   je     Stub::counterMode_AESCrypt+2743 0x00007f32dd0435b7
  0x00007f32dd0435ac:   sub    $0x8,%rax
  0x00007f32dd0435b0:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f32dd0435b7:   test   $0x4,%r8b
  0x00007f32dd0435bb:   je     Stub::counterMode_AESCrypt+2770 0x00007f32dd0435d2
  0x00007f32dd0435c1:   sub    $0x4,%rax
  0x00007f32dd0435c5:   vpslldq $0x4,%xmm11,%xmm11
  0x00007f32dd0435cb:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f32dd0435d2:   test   $0x2,%r8b
  0x00007f32dd0435d6:   je     Stub::counterMode_AESCrypt+2796 0x00007f32dd0435ec
  0x00007f32dd0435dc:   sub    $0x2,%rax
  0x00007f32dd0435e0:   vpslldq $0x2,%xmm11,%xmm11
  0x00007f32dd0435e6:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f32dd0435ec:   test   $0x1,%r8b
  0x00007f32dd0435f0:   je     Stub::counterMode_AESCrypt+2823 0x00007f32dd043607
  0x00007f32dd0435f6:   sub    $0x1,%rax
  0x00007f32dd0435fa:   vpslldq $0x1,%xmm11,%xmm11
  0x00007f32dd043600:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f32dd043607:   vmovdqu %xmm5,(%r9)
  0x00007f32dd04360c:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f32dd043611:   test   $0x8,%r8b
  0x00007f32dd043615:   je     Stub::counterMode_AESCrypt+2859 0x00007f32dd04362b
  0x00007f32dd04361b:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f32dd043622:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f32dd043627:   add    $0x8,%rax
  0x00007f32dd04362b:   test   $0x4,%r8b
  0x00007f32dd04362f:   je     Stub::counterMode_AESCrypt+2885 0x00007f32dd043645
  0x00007f32dd043635:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f32dd04363c:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007f32dd043641:   add    $0x4,%rax
  0x00007f32dd043645:   test   $0x2,%r8b
  0x00007f32dd043649:   je     Stub::counterMode_AESCrypt+2911 0x00007f32dd04365f
  0x00007f32dd04364f:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f32dd043656:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007f32dd04365b:   add    $0x2,%rax
  0x00007f32dd04365f:   test   $0x1,%r8b
  0x00007f32dd043663:   je     Stub::counterMode_AESCrypt+2928 0x00007f32dd043670
  0x00007f32dd043669:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f32dd043670:   mov    %r8d,(%r10)
  0x00007f32dd043673:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007f32dd043cac
  0x00007f32dd043678:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd043680:   cmp    $0x60,%r8
  0x00007f32dd043684:   jl     Stub::counterMode_AESCrypt+3968 0x00007f32dd043a80
  0x00007f32dd04368a:   vmovdqu (%rdx),%xmm3
  0x00007f32dd04368e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043693:   vmovdqa %xmm2,%xmm5
  0x00007f32dd043697:   vmovdqa %xmm2,%xmm6
  0x00007f32dd04369b:   vmovdqa %xmm2,%xmm7
  0x00007f32dd04369f:   vmovdqa %xmm2,%xmm8
  0x00007f32dd0436a3:   vmovdqa %xmm2,%xmm9
  0x00007f32dd0436a7:   vmovdqa %xmm2,%xmm10
  0x00007f32dd0436ab:   vpextrq $0x0,%xmm6,%rbx
  0x00007f32dd0436b1:   add    $0x1,%rbx
  0x00007f32dd0436b5:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007f32dd0436bb:   jae    Stub::counterMode_AESCrypt+3025 0x00007f32dd0436d1
  0x00007f32dd0436c1:   vpextrq $0x1,%xmm6,%rbx
  0x00007f32dd0436c7:   add    $0x1,%rbx
  0x00007f32dd0436cb:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007f32dd0436d1:   vpextrq $0x0,%xmm7,%rbx
  0x00007f32dd0436d7:   add    $0x2,%rbx
  0x00007f32dd0436db:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007f32dd0436e1:   jae    Stub::counterMode_AESCrypt+3063 0x00007f32dd0436f7
  0x00007f32dd0436e7:   vpextrq $0x1,%xmm7,%rbx
  0x00007f32dd0436ed:   add    $0x1,%rbx
  0x00007f32dd0436f1:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007f32dd0436f7:   vpextrq $0x0,%xmm8,%rbx
  0x00007f32dd0436fd:   add    $0x3,%rbx
  0x00007f32dd043701:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007f32dd043707:   jae    Stub::counterMode_AESCrypt+3101 0x00007f32dd04371d
  0x00007f32dd04370d:   vpextrq $0x1,%xmm8,%rbx
  0x00007f32dd043713:   add    $0x1,%rbx
  0x00007f32dd043717:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007f32dd04371d:   vpextrq $0x0,%xmm9,%rbx
  0x00007f32dd043723:   add    $0x4,%rbx
  0x00007f32dd043727:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007f32dd04372d:   jae    Stub::counterMode_AESCrypt+3139 0x00007f32dd043743
  0x00007f32dd043733:   vpextrq $0x1,%xmm9,%rbx
  0x00007f32dd043739:   add    $0x1,%rbx
  0x00007f32dd04373d:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007f32dd043743:   vpextrq $0x0,%xmm10,%rbx
  0x00007f32dd043749:   add    $0x5,%rbx
  0x00007f32dd04374d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007f32dd043753:   jae    Stub::counterMode_AESCrypt+3177 0x00007f32dd043769
  0x00007f32dd043759:   vpextrq $0x1,%xmm10,%rbx
  0x00007f32dd04375f:   add    $0x1,%rbx
  0x00007f32dd043763:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007f32dd043769:   vpextrq $0x0,%xmm2,%rbx
  0x00007f32dd04376f:   add    $0x6,%rbx
  0x00007f32dd043773:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f32dd043779:   jae    Stub::counterMode_AESCrypt+3215 0x00007f32dd04378f
  0x00007f32dd04377f:   vpextrq $0x1,%xmm2,%rbx
  0x00007f32dd043785:   add    $0x1,%rbx
  0x00007f32dd043789:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f32dd04378f:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f32dd043794:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007f32dd043799:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007f32dd04379e:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007f32dd0437a3:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007f32dd0437a8:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007f32dd0437ad:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f32dd0437b1:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007f32dd0437b5:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007f32dd0437b9:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007f32dd0437bd:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f32dd0437c1:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007f32dd0437c5:   vmovdqu 0x10(%rdx),%xmm4
  0x00007f32dd0437ca:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd0437cf:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f32dd0437d4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd0437d9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd0437de:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd0437e3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd0437e8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd0437ed:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd0437f2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd0437f7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd0437fc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd043801:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd043806:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd04380b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd043810:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd043815:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f32dd04381a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd04381f:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f32dd043824:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043829:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd04382e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd043833:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd043838:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd04383d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd043842:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd043847:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd04384c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd043851:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd043856:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd04385b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd043860:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd043865:   vmovdqu 0x50(%rdx),%xmm4
  0x00007f32dd04386a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd04386f:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f32dd043874:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043879:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd04387e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd043883:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd043888:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd04388d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd043892:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd043897:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd04389c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd0438a1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd0438a6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd0438ab:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd0438b0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd0438b5:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f32dd0438ba:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd0438bf:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f32dd0438c7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd0438cc:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd0438d1:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd0438d6:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd0438db:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd0438e0:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd0438e5:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd0438ea:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd0438ef:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd0438f4:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd0438f9:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd0438fe:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd043903:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd043908:   vmovdqu 0x90(%rdx),%xmm4
  0x00007f32dd043910:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd043915:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f32dd04391d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043922:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd043927:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd04392c:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd043931:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd043936:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd04393b:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd043940:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043945:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd04394a:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd04394f:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd043954:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd043959:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd04395e:   vmovdqu 0xb0(%rdx),%xmm4
  0x00007f32dd043966:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd04396b:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f32dd043973:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043978:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd04397d:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd043982:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd043987:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd04398c:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd043991:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd043996:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd04399b:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f32dd0439a0:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f32dd0439a5:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f32dd0439aa:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f32dd0439af:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f32dd0439b4:   vmovdqu 0xd0(%rdx),%xmm4
  0x00007f32dd0439bc:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f32dd0439c1:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007f32dd0439c9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd0439ce:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f32dd0439d3:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f32dd0439d8:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f32dd0439dd:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f32dd0439e2:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f32dd0439e7:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f32dd0439ec:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f32dd0439f1:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007f32dd0439f6:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007f32dd0439fb:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007f32dd043a00:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007f32dd043a05:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007f32dd043a0a:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f32dd043a0f:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007f32dd043a15:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007f32dd043a1b:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007f32dd043a21:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007f32dd043a27:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007f32dd043a2d:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f32dd043a32:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007f32dd043a37:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007f32dd043a3c:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007f32dd043a41:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f32dd043a45:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007f32dd043a49:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f32dd043a4e:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007f32dd043a54:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007f32dd043a5a:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007f32dd043a60:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007f32dd043a66:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007f32dd043a6c:   add    $0x60,%rax
  0x00007f32dd043a70:   sub    $0x60,%r8
  0x00007f32dd043a74:   jmpq   Stub::counterMode_AESCrypt+2944 0x00007f32dd043680
  0x00007f32dd043a79:   nopl   0x0(%rax)
  0x00007f32dd043a80:   cmp    $0x0,%r8
  0x00007f32dd043a84:   jle    Stub::counterMode_AESCrypt+4524 0x00007f32dd043cac
  0x00007f32dd043a8a:   vmovdqu (%rdx),%xmm3
  0x00007f32dd043a8e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043a93:   vmovdqa %xmm2,%xmm5
  0x00007f32dd043a97:   vpextrq $0x0,%xmm2,%rbx
  0x00007f32dd043a9d:   add    $0x1,%rbx
  0x00007f32dd043aa1:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f32dd043aa7:   jae    Stub::counterMode_AESCrypt+4029 0x00007f32dd043abd
  0x00007f32dd043aad:   vpextrq $0x1,%xmm2,%rbx
  0x00007f32dd043ab3:   add    $0x1,%rbx
  0x00007f32dd043ab7:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f32dd043abd:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f32dd043ac2:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f32dd043ac6:   vmovdqu 0x10(%rdx),%xmm3
  0x00007f32dd043acb:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043ad0:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043ad5:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f32dd043ada:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043adf:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043ae4:   vmovdqu 0x30(%rdx),%xmm3
  0x00007f32dd043ae9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043aee:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043af3:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f32dd043af8:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043afd:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043b02:   vmovdqu 0x50(%rdx),%xmm3
  0x00007f32dd043b07:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043b0c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043b11:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f32dd043b16:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043b1b:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043b20:   vmovdqu 0x70(%rdx),%xmm3
  0x00007f32dd043b25:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043b2a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043b2f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f32dd043b37:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043b3c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043b41:   vmovdqu 0x90(%rdx),%xmm3
  0x00007f32dd043b49:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043b4e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043b53:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f32dd043b5b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043b60:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043b65:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007f32dd043b6d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043b72:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043b77:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f32dd043b7f:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043b84:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043b89:   vmovdqu 0xd0(%rdx),%xmm3
  0x00007f32dd043b91:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043b96:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f32dd043b9b:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007f32dd043ba3:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f32dd043ba8:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f32dd043bad:   cmp    $0x10,%r8
  0x00007f32dd043bb1:   jl     Stub::counterMode_AESCrypt+4307 0x00007f32dd043bd3
  0x00007f32dd043bb7:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f32dd043bbc:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f32dd043bc1:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f32dd043bc6:   add    $0x10,%rax
  0x00007f32dd043bca:   sub    $0x10,%r8
  0x00007f32dd043bce:   jmpq   Stub::counterMode_AESCrypt+3968 0x00007f32dd043a80
  0x00007f32dd043bd3:   add    %r8,%rax
  0x00007f32dd043bd6:   test   $0x8,%r8b
  0x00007f32dd043bda:   je     Stub::counterMode_AESCrypt+4331 0x00007f32dd043beb
  0x00007f32dd043be0:   sub    $0x8,%rax
  0x00007f32dd043be4:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f32dd043beb:   test   $0x4,%r8b
  0x00007f32dd043bef:   je     Stub::counterMode_AESCrypt+4358 0x00007f32dd043c06
  0x00007f32dd043bf5:   sub    $0x4,%rax
  0x00007f32dd043bf9:   vpslldq $0x4,%xmm11,%xmm11
  0x00007f32dd043bff:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f32dd043c06:   test   $0x2,%r8b
  0x00007f32dd043c0a:   je     Stub::counterMode_AESCrypt+4384 0x00007f32dd043c20
  0x00007f32dd043c10:   sub    $0x2,%rax
  0x00007f32dd043c14:   vpslldq $0x2,%xmm11,%xmm11
  0x00007f32dd043c1a:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f32dd043c20:   test   $0x1,%r8b
  0x00007f32dd043c24:   je     Stub::counterMode_AESCrypt+4411 0x00007f32dd043c3b
  0x00007f32dd043c2a:   sub    $0x1,%rax
  0x00007f32dd043c2e:   vpslldq $0x1,%xmm11,%xmm11
  0x00007f32dd043c34:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f32dd043c3b:   vmovdqu %xmm5,(%r9)
  0x00007f32dd043c40:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f32dd043c45:   test   $0x8,%r8b
  0x00007f32dd043c49:   je     Stub::counterMode_AESCrypt+4447 0x00007f32dd043c5f
  0x00007f32dd043c4f:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f32dd043c56:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f32dd043c5b:   add    $0x8,%rax
  0x00007f32dd043c5f:   test   $0x4,%r8b
  0x00007f32dd043c63:   je     Stub::counterMode_AESCrypt+4473 0x00007f32dd043c79
  0x00007f32dd043c69:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f32dd043c70:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007f32dd043c75:   add    $0x4,%rax
  0x00007f32dd043c79:   test   $0x2,%r8b
  0x00007f32dd043c7d:   je     Stub::counterMode_AESCrypt+4499 0x00007f32dd043c93
  0x00007f32dd043c83:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f32dd043c8a:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007f32dd043c8f:   add    $0x2,%rax
  0x00007f32dd043c93:   test   $0x1,%r8b
  0x00007f32dd043c97:   je     Stub::counterMode_AESCrypt+4516 0x00007f32dd043ca4
  0x00007f32dd043c9d:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f32dd043ca4:   mov    %r8d,(%r10)
  0x00007f32dd043ca7:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007f32dd043cac
  0x00007f32dd043cac:   vpshufb %xmm0,%xmm2,%xmm2
  0x00007f32dd043cb1:   vmovdqu %xmm2,(%rcx)
  0x00007f32dd043cb5:   pop    %rbx
  0x00007f32dd043cb6:   pop    %rax
  0x00007f32dd043cb7:   leaveq 
  0x00007f32dd043cb8:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::ghash_processBlocks [0x00007f32dd043cc0, 0x00007f32dd04414c] (1164 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd043cc0:   push   %rbp
  0x00007f32dd043cc1:   mov    %rsp,%rbp
  0x00007f32dd043cc4:   push   %rbx
  0x00007f32dd043cc5:   test   %rcx,%rcx
  0x00007f32dd043cc8:   je     Stub::ghash_processBlocks+1144 0x00007f32dd044138
  0x00007f32dd043cce:   vmovdqu 0x10(%rsi),%xmm5
  0x00007f32dd043cd3:   vptest %xmm5,%xmm5
  0x00007f32dd043cd8:   jne    Stub::ghash_processBlocks+35 0x00007f32dd043ce3
  0x00007f32dd043cde:   callq  Stub::ghash_processBlocks+839 0x00007f32dd044007
  0x00007f32dd043ce3:   vmovdqu 0x9e16985(%rip),%xmm14        # 0x00007f32e6e5a670
  0x00007f32dd043ceb:   vmovdqu (%rdi),%xmm0
  0x00007f32dd043cef:   vpshufb %xmm14,%xmm0,%xmm0
  0x00007f32dd043cf4:   cmp    $0x8,%ecx
  0x00007f32dd043cf7:   jb     Stub::ghash_processBlocks+648 0x00007f32dd043f48
  0x00007f32dd043cfd:   vmovdqu 0x80(%rsi),%xmm5
  0x00007f32dd043d05:   vptest %xmm5,%xmm5
  0x00007f32dd043d0a:   jne    Stub::ghash_processBlocks+85 0x00007f32dd043d15
  0x00007f32dd043d10:   callq  Stub::ghash_processBlocks+932 0x00007f32dd044064
  0x00007f32dd043d15:   sub    $0x8,%ecx
  0x00007f32dd043d18:   vmovdqu 0x9e16940(%rip),%xmm2        # 0x00007f32e6e5a660
  0x00007f32dd043d20:   vmovdqu 0x70(%rdx),%xmm1
  0x00007f32dd043d25:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f32dd043d2a:   vmovdqu 0x10(%rsi),%xmm15
  0x00007f32dd043d2f:   vpclmulhqlqdq %xmm15,%xmm1,%xmm5
  0x00007f32dd043d35:   vpclmullqlqdq %xmm15,%xmm1,%xmm3
  0x00007f32dd043d3b:   vpclmulhqhqdq %xmm15,%xmm1,%xmm4
  0x00007f32dd043d41:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043d47:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043d4b:   vmovdqu 0x60(%rdx),%xmm1
  0x00007f32dd043d50:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f32dd043d55:   vmovdqu 0x20(%rsi),%xmm15
  0x00007f32dd043d5a:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043d60:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043d64:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043d6a:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f32dd043d6e:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043d74:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f32dd043d78:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043d7e:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043d82:   vmovdqu 0x50(%rdx),%xmm1
  0x00007f32dd043d87:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f32dd043d8c:   vmovdqu 0x30(%rsi),%xmm15
  0x00007f32dd043d91:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043d97:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043d9b:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043da1:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f32dd043da5:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043dab:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f32dd043daf:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043db5:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043db9:   vmovdqu 0x40(%rdx),%xmm1
  0x00007f32dd043dbe:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f32dd043dc3:   vmovdqu 0x40(%rsi),%xmm15
  0x00007f32dd043dc8:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043dce:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043dd2:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043dd8:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f32dd043ddc:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043de2:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f32dd043de6:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043dec:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043df0:   vmovdqu 0x30(%rdx),%xmm1
  0x00007f32dd043df5:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f32dd043dfa:   vmovdqu 0x50(%rsi),%xmm15
  0x00007f32dd043dff:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043e05:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043e09:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043e0f:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f32dd043e13:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043e19:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f32dd043e1d:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043e23:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043e27:   vmovdqu 0x20(%rdx),%xmm1
  0x00007f32dd043e2c:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f32dd043e31:   vmovdqu 0x60(%rsi),%xmm15
  0x00007f32dd043e36:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043e3c:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043e40:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043e46:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f32dd043e4a:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043e50:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f32dd043e54:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043e5a:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043e5e:   vmovdqu 0x10(%rdx),%xmm1
  0x00007f32dd043e63:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f32dd043e68:   vmovdqu 0x70(%rsi),%xmm15
  0x00007f32dd043e6d:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043e73:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043e77:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043e7d:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f32dd043e81:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043e87:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f32dd043e8b:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043e91:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043e95:   vmovdqu (%rdx),%xmm1
  0x00007f32dd043e99:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f32dd043e9e:   vpxor  %xmm0,%xmm1,%xmm1
  0x00007f32dd043ea2:   vmovdqu 0x80(%rsi),%xmm15
  0x00007f32dd043eaa:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043eb0:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043eb4:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043eba:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f32dd043ebe:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043ec4:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f32dd043ec8:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f32dd043ece:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043ed2:   vpslldq $0x8,%xmm5,%xmm6
  0x00007f32dd043ed7:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f32dd043edc:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f32dd043ee0:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f32dd043ee4:   vpslld $0x1f,%xmm3,%xmm8
  0x00007f32dd043ee9:   vpslld $0x1e,%xmm3,%xmm9
  0x00007f32dd043eee:   vpslld $0x19,%xmm3,%xmm10
  0x00007f32dd043ef3:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007f32dd043ef8:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007f32dd043efd:   vpslldq $0xc,%xmm8,%xmm9
  0x00007f32dd043f03:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007f32dd043f09:   vpxor  %xmm9,%xmm3,%xmm3
  0x00007f32dd043f0e:   vpsrld $0x1,%xmm3,%xmm9
  0x00007f32dd043f13:   vpsrld $0x2,%xmm3,%xmm10
  0x00007f32dd043f18:   vpsrld $0x7,%xmm3,%xmm5
  0x00007f32dd043f1d:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007f32dd043f22:   vpxor  %xmm5,%xmm9,%xmm9
  0x00007f32dd043f26:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007f32dd043f2b:   vpxor  %xmm3,%xmm9,%xmm3
  0x00007f32dd043f2f:   vpxor  %xmm4,%xmm3,%xmm0
  0x00007f32dd043f33:   lea    0x80(%rdx),%rdx
  0x00007f32dd043f3a:   cmp    $0x8,%ecx
  0x00007f32dd043f3d:   jb     Stub::ghash_processBlocks+648 0x00007f32dd043f48
  0x00007f32dd043f43:   jmpq   Stub::ghash_processBlocks+85 0x00007f32dd043d15
  0x00007f32dd043f48:   vmovdqu 0x10(%rsi),%xmm3
  0x00007f32dd043f4d:   vmovdqu 0x9e1670b(%rip),%xmm2        # 0x00007f32e6e5a660
  0x00007f32dd043f55:   cmp    $0x0,%ecx
  0x00007f32dd043f58:   je     Stub::ghash_processBlocks+697 0x00007f32dd043f79
  0x00007f32dd043f5e:   sub    $0x1,%ecx
  0x00007f32dd043f61:   vmovdqu (%rdx),%xmm1
  0x00007f32dd043f65:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f32dd043f6a:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f32dd043f6e:   callq  Stub::ghash_processBlocks+711 0x00007f32dd043f87
  0x00007f32dd043f73:   add    $0x10,%rdx
  0x00007f32dd043f77:   jmp    Stub::ghash_processBlocks+661 0x00007f32dd043f55
  0x00007f32dd043f79:   vpshufb %xmm14,%xmm0,%xmm0
  0x00007f32dd043f7e:   vmovdqu %xmm0,(%rdi)
  0x00007f32dd043f82:   jmpq   Stub::ghash_processBlocks+1144 0x00007f32dd044138
  0x00007f32dd043f87:   vpclmullqlqdq %xmm3,%xmm0,%xmm4
  0x00007f32dd043f8d:   vpclmulhqhqdq %xmm3,%xmm0,%xmm7
  0x00007f32dd043f93:   vpclmullqhqdq %xmm3,%xmm0,%xmm5
  0x00007f32dd043f99:   vpclmulhqlqdq %xmm3,%xmm0,%xmm6
  0x00007f32dd043f9f:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd043fa3:   vpslldq $0x8,%xmm5,%xmm6
  0x00007f32dd043fa8:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f32dd043fad:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f32dd043fb1:   vpxor  %xmm5,%xmm7,%xmm7
  0x00007f32dd043fb5:   vpslld $0x1f,%xmm4,%xmm8
  0x00007f32dd043fba:   vpslld $0x1e,%xmm4,%xmm9
  0x00007f32dd043fbf:   vpslld $0x19,%xmm4,%xmm10
  0x00007f32dd043fc4:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007f32dd043fc9:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007f32dd043fce:   vpslldq $0xc,%xmm8,%xmm9
  0x00007f32dd043fd4:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007f32dd043fda:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007f32dd043fdf:   vpsrld $0x1,%xmm4,%xmm9
  0x00007f32dd043fe4:   vpsrld $0x2,%xmm4,%xmm10
  0x00007f32dd043fe9:   vpsrld $0x7,%xmm4,%xmm11
  0x00007f32dd043fee:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007f32dd043ff3:   vpxor  %xmm11,%xmm9,%xmm9
  0x00007f32dd043ff8:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007f32dd043ffd:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007f32dd044002:   vpxor  %xmm4,%xmm7,%xmm0
  0x00007f32dd044006:   retq   
  0x00007f32dd044007:   vmovdqu (%rsi),%xmm13
  0x00007f32dd04400b:   vmovdqu 0x9e1665d(%rip),%xmm10        # 0x00007f32e6e5a670
  0x00007f32dd044013:   vpshufb %xmm10,%xmm13,%xmm13
  0x00007f32dd044018:   vpsrld $0x7,%xmm13,%xmm3
  0x00007f32dd04401e:   vmovdqu 0x9e1665a(%rip),%xmm4        # 0x00007f32e6e5a680
  0x00007f32dd044026:   vpshufb %xmm4,%xmm3,%xmm3
  0x00007f32dd04402b:   mov    $0xff00,%eax
  0x00007f32dd044030:   vmovd  %eax,%xmm4
  0x00007f32dd044034:   vpshufb %xmm3,%xmm4,%xmm4
  0x00007f32dd044039:   vmovdqu 0x9e1660f(%rip),%xmm5        # 0x00007f32e6e5a650
  0x00007f32dd044041:   vpand  %xmm4,%xmm5,%xmm5
  0x00007f32dd044045:   vpsrld $0x1f,%xmm13,%xmm3
  0x00007f32dd04404b:   vpslld $0x1,%xmm13,%xmm4
  0x00007f32dd044051:   vpslldq $0x4,%xmm3,%xmm3
  0x00007f32dd044056:   vpxor  %xmm3,%xmm4,%xmm13
  0x00007f32dd04405a:   vpxor  %xmm5,%xmm13,%xmm13
  0x00007f32dd04405e:   vmovdqu %xmm13,0x10(%rsi)
  0x00007f32dd044063:   retq   
  0x00007f32dd044064:   vmovdqu 0x10(%rsi),%xmm13
  0x00007f32dd044069:   vmovdqu %xmm13,%xmm1
  0x00007f32dd04406e:   callq  Stub::ghash_processBlocks+1016 0x00007f32dd0440b8
  0x00007f32dd044073:   vmovdqu %xmm13,0x20(%rsi)
  0x00007f32dd044078:   callq  Stub::ghash_processBlocks+1016 0x00007f32dd0440b8
  0x00007f32dd04407d:   vmovdqu %xmm13,0x30(%rsi)
  0x00007f32dd044082:   callq  Stub::ghash_processBlocks+1016 0x00007f32dd0440b8
  0x00007f32dd044087:   vmovdqu %xmm13,0x40(%rsi)
  0x00007f32dd04408c:   callq  Stub::ghash_processBlocks+1016 0x00007f32dd0440b8
  0x00007f32dd044091:   vmovdqu %xmm13,0x50(%rsi)
  0x00007f32dd044096:   callq  Stub::ghash_processBlocks+1016 0x00007f32dd0440b8
  0x00007f32dd04409b:   vmovdqu %xmm13,0x60(%rsi)
  0x00007f32dd0440a0:   callq  Stub::ghash_processBlocks+1016 0x00007f32dd0440b8
  0x00007f32dd0440a5:   vmovdqu %xmm13,0x70(%rsi)
  0x00007f32dd0440aa:   callq  Stub::ghash_processBlocks+1016 0x00007f32dd0440b8
  0x00007f32dd0440af:   vmovdqu %xmm13,0x80(%rsi)
  0x00007f32dd0440b7:   retq   
  0x00007f32dd0440b8:   vpclmullqlqdq %xmm1,%xmm13,%xmm4
  0x00007f32dd0440be:   vpclmulhqhqdq %xmm1,%xmm13,%xmm7
  0x00007f32dd0440c4:   vpclmullqhqdq %xmm1,%xmm13,%xmm5
  0x00007f32dd0440ca:   vpclmulhqlqdq %xmm1,%xmm13,%xmm6
  0x00007f32dd0440d0:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f32dd0440d4:   vpslldq $0x8,%xmm5,%xmm6
  0x00007f32dd0440d9:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f32dd0440de:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f32dd0440e2:   vpxor  %xmm5,%xmm7,%xmm7
  0x00007f32dd0440e6:   vpslld $0x1f,%xmm4,%xmm8
  0x00007f32dd0440eb:   vpslld $0x1e,%xmm4,%xmm9
  0x00007f32dd0440f0:   vpslld $0x19,%xmm4,%xmm10
  0x00007f32dd0440f5:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007f32dd0440fa:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007f32dd0440ff:   vpslldq $0xc,%xmm8,%xmm9
  0x00007f32dd044105:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007f32dd04410b:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007f32dd044110:   vpsrld $0x1,%xmm4,%xmm9
  0x00007f32dd044115:   vpsrld $0x2,%xmm4,%xmm10
  0x00007f32dd04411a:   vpsrld $0x7,%xmm4,%xmm11
  0x00007f32dd04411f:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007f32dd044124:   vpxor  %xmm11,%xmm9,%xmm9
  0x00007f32dd044129:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007f32dd04412e:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007f32dd044133:   vpxor  %xmm4,%xmm7,%xmm13
  0x00007f32dd044137:   retq   
  0x00007f32dd044138:   vpxor  %xmm0,%xmm0,%xmm0
  0x00007f32dd04413c:   vpxor  %xmm1,%xmm1,%xmm1
  0x00007f32dd044140:   vpxor  %xmm3,%xmm3,%xmm3
  0x00007f32dd044144:   vpxor  %xmm15,%xmm15,%xmm15
  0x00007f32dd044149:   pop    %rbx
  0x00007f32dd04414a:   leaveq 
  0x00007f32dd04414b:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::chacha20Block [0x00007f32dd044160, 0x00007f32dd044401] (673 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd044160:   push   %rbp
  0x00007f32dd044161:   mov    %rsp,%rbp
  0x00007f32dd044164:   movabs $0x7f32e6e59680,%r9
  0x00007f32dd04416e:   movabs $0x7f32e6e59740,%rax
  0x00007f32dd044178:   vbroadcastf128 (%rdi),%ymm0
  0x00007f32dd04417d:   vbroadcastf128 0x10(%rdi),%ymm1
  0x00007f32dd044183:   vbroadcastf128 0x20(%rdi),%ymm2
  0x00007f32dd044189:   vbroadcastf128 0x30(%rdi),%ymm3
  0x00007f32dd04418f:   vpaddd (%rax),%ymm3,%ymm3
  0x00007f32dd044193:   vpaddd 0x20(%rax),%ymm3,%ymm13
  0x00007f32dd044198:   vmovdqu %ymm0,%ymm4
  0x00007f32dd04419c:   vmovdqu %ymm1,%ymm5
  0x00007f32dd0441a0:   vmovdqu %ymm2,%ymm6
  0x00007f32dd0441a4:   vmovdqu %ymm3,%ymm7
  0x00007f32dd0441a8:   vmovdqu %ymm0,%ymm8
  0x00007f32dd0441ac:   vmovdqu %ymm1,%ymm9
  0x00007f32dd0441b0:   vmovdqu %ymm2,%ymm10
  0x00007f32dd0441b4:   vmovdqu %ymm13,%ymm11
  0x00007f32dd0441b9:   vmovdqu (%r9),%ymm14
  0x00007f32dd0441be:   vmovdqu 0x20(%r9),%ymm15
  0x00007f32dd0441c4:   mov    $0xa,%r8d
  0x00007f32dd0441ca:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007f32dd0441ce:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007f32dd0441d2:   vpshufb %ymm15,%ymm7,%ymm7
  0x00007f32dd0441d7:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007f32dd0441db:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007f32dd0441df:   vpsrld $0x14,%ymm5,%ymm12
  0x00007f32dd0441e4:   vpslld $0xc,%ymm5,%ymm5
  0x00007f32dd0441e9:   vpor   %ymm12,%ymm5,%ymm5
  0x00007f32dd0441ee:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007f32dd0441f2:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007f32dd0441f6:   vpshufb %ymm14,%ymm7,%ymm7
  0x00007f32dd0441fb:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007f32dd0441ff:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007f32dd044203:   vpsrld $0x19,%ymm5,%ymm12
  0x00007f32dd044208:   vpslld $0x7,%ymm5,%ymm5
  0x00007f32dd04420d:   vpor   %ymm12,%ymm5,%ymm5
  0x00007f32dd044212:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007f32dd044217:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007f32dd04421c:   vpshufb %ymm15,%ymm11,%ymm11
  0x00007f32dd044221:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007f32dd044226:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007f32dd04422b:   vpsrld $0x14,%ymm9,%ymm12
  0x00007f32dd044231:   vpslld $0xc,%ymm9,%ymm9
  0x00007f32dd044237:   vpor   %ymm12,%ymm9,%ymm9
  0x00007f32dd04423c:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007f32dd044241:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007f32dd044246:   vpshufb %ymm14,%ymm11,%ymm11
  0x00007f32dd04424b:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007f32dd044250:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007f32dd044255:   vpsrld $0x19,%ymm9,%ymm12
  0x00007f32dd04425b:   vpslld $0x7,%ymm9,%ymm9
  0x00007f32dd044261:   vpor   %ymm12,%ymm9,%ymm9
  0x00007f32dd044266:   vpshufd $0x39,%ymm5,%ymm5
  0x00007f32dd04426b:   vpshufd $0x4e,%ymm6,%ymm6
  0x00007f32dd044270:   vpshufd $0x93,%ymm7,%ymm7
  0x00007f32dd044275:   vpshufd $0x39,%ymm9,%ymm9
  0x00007f32dd04427b:   vpshufd $0x4e,%ymm10,%ymm10
  0x00007f32dd044281:   vpshufd $0x93,%ymm11,%ymm11
  0x00007f32dd044287:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007f32dd04428b:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007f32dd04428f:   vpshufb %ymm15,%ymm7,%ymm7
  0x00007f32dd044294:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007f32dd044298:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007f32dd04429c:   vpsrld $0x14,%ymm5,%ymm12
  0x00007f32dd0442a1:   vpslld $0xc,%ymm5,%ymm5
  0x00007f32dd0442a6:   vpor   %ymm12,%ymm5,%ymm5
  0x00007f32dd0442ab:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007f32dd0442af:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007f32dd0442b3:   vpshufb %ymm14,%ymm7,%ymm7
  0x00007f32dd0442b8:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007f32dd0442bc:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007f32dd0442c0:   vpsrld $0x19,%ymm5,%ymm12
  0x00007f32dd0442c5:   vpslld $0x7,%ymm5,%ymm5
  0x00007f32dd0442ca:   vpor   %ymm12,%ymm5,%ymm5
  0x00007f32dd0442cf:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007f32dd0442d4:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007f32dd0442d9:   vpshufb %ymm15,%ymm11,%ymm11
  0x00007f32dd0442de:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007f32dd0442e3:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007f32dd0442e8:   vpsrld $0x14,%ymm9,%ymm12
  0x00007f32dd0442ee:   vpslld $0xc,%ymm9,%ymm9
  0x00007f32dd0442f4:   vpor   %ymm12,%ymm9,%ymm9
  0x00007f32dd0442f9:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007f32dd0442fe:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007f32dd044303:   vpshufb %ymm14,%ymm11,%ymm11
  0x00007f32dd044308:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007f32dd04430d:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007f32dd044312:   vpsrld $0x19,%ymm9,%ymm12
  0x00007f32dd044318:   vpslld $0x7,%ymm9,%ymm9
  0x00007f32dd04431e:   vpor   %ymm12,%ymm9,%ymm9
  0x00007f32dd044323:   vpshufd $0x93,%ymm5,%ymm5
  0x00007f32dd044328:   vpshufd $0x4e,%ymm6,%ymm6
  0x00007f32dd04432d:   vpshufd $0x39,%ymm7,%ymm7
  0x00007f32dd044332:   vpshufd $0x93,%ymm9,%ymm9
  0x00007f32dd044338:   vpshufd $0x4e,%ymm10,%ymm10
  0x00007f32dd04433e:   vpshufd $0x39,%ymm11,%ymm11
  0x00007f32dd044344:   dec    %r8
  0x00007f32dd044347:   jne    Stub::chacha20Block+106 0x00007f32dd0441ca
  0x00007f32dd04434d:   vpaddd %ymm0,%ymm4,%ymm4
  0x00007f32dd044351:   vpaddd %ymm1,%ymm5,%ymm5
  0x00007f32dd044355:   vpaddd %ymm2,%ymm6,%ymm6
  0x00007f32dd044359:   vpaddd %ymm3,%ymm7,%ymm7
  0x00007f32dd04435d:   vpaddd %ymm0,%ymm8,%ymm8
  0x00007f32dd044361:   vpaddd %ymm1,%ymm9,%ymm9
  0x00007f32dd044365:   vpaddd %ymm2,%ymm10,%ymm10
  0x00007f32dd044369:   vpaddd %ymm13,%ymm11,%ymm11
  0x00007f32dd04436e:   vextracti128 $0x0,%ymm4,(%rsi)
  0x00007f32dd044374:   vextracti128 $0x1,%ymm4,0x40(%rsi)
  0x00007f32dd04437b:   vextracti128 $0x0,%ymm5,0x10(%rsi)
  0x00007f32dd044382:   vextracti128 $0x1,%ymm5,0x50(%rsi)
  0x00007f32dd044389:   vextracti128 $0x0,%ymm6,0x20(%rsi)
  0x00007f32dd044390:   vextracti128 $0x1,%ymm6,0x60(%rsi)
  0x00007f32dd044397:   vextracti128 $0x0,%ymm7,0x30(%rsi)
  0x00007f32dd04439e:   vextracti128 $0x1,%ymm7,0x70(%rsi)
  0x00007f32dd0443a5:   vextracti128 $0x0,%ymm8,0x80(%rsi)
  0x00007f32dd0443af:   vextracti128 $0x1,%ymm8,0xc0(%rsi)
  0x00007f32dd0443b9:   vextracti128 $0x0,%ymm9,0x90(%rsi)
  0x00007f32dd0443c3:   vextracti128 $0x1,%ymm9,0xd0(%rsi)
  0x00007f32dd0443cd:   vextracti128 $0x0,%ymm10,0xa0(%rsi)
  0x00007f32dd0443d7:   vextracti128 $0x1,%ymm10,0xe0(%rsi)
  0x00007f32dd0443e1:   vextracti128 $0x0,%ymm11,0xb0(%rsi)
  0x00007f32dd0443eb:   vextracti128 $0x1,%ymm11,0xf0(%rsi)
  0x00007f32dd0443f5:   movabs $0x100,%rax
  0x00007f32dd0443ff:   leaveq 
  0x00007f32dd044400:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::md5_implCompress [0x00007f32dd044420, 0x00007f32dd044aa9] (1673 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd044420:   push   %rbp
  0x00007f32dd044421:   mov    %rsp,%rbp
  0x00007f32dd044424:   push   %rbx
  0x00007f32dd044425:   push   %rdi
  0x00007f32dd044426:   push   %rsi
  0x00007f32dd044427:   push   %r15
  0x00007f32dd044429:   sub    $0x10,%rsp
  0x00007f32dd04442d:   mov    %rdi,%r15
  0x00007f32dd044430:   mov    %rsi,(%rsp)
  0x00007f32dd044434:   mov    (%rsp),%rdi
  0x00007f32dd044438:   mov    (%rdi),%eax
  0x00007f32dd04443a:   mov    0x4(%rdi),%ebx
  0x00007f32dd04443d:   mov    0x8(%rdi),%ecx
  0x00007f32dd044440:   mov    0xc(%rdi),%edx
  0x00007f32dd044443:   add    $0xd76aa478,%eax
  0x00007f32dd044448:   mov    %ecx,%esi
  0x00007f32dd04444a:   add    (%r15),%eax
  0x00007f32dd04444d:   xor    %edx,%esi
  0x00007f32dd04444f:   and    %ebx,%esi
  0x00007f32dd044451:   xor    %edx,%esi
  0x00007f32dd044453:   add    %esi,%eax
  0x00007f32dd044455:   rol    $0x7,%eax
  0x00007f32dd044458:   add    %ebx,%eax
  0x00007f32dd04445a:   add    $0xe8c7b756,%edx
  0x00007f32dd044460:   mov    %ebx,%esi
  0x00007f32dd044462:   add    0x4(%r15),%edx
  0x00007f32dd044466:   xor    %ecx,%esi
  0x00007f32dd044468:   and    %eax,%esi
  0x00007f32dd04446a:   xor    %ecx,%esi
  0x00007f32dd04446c:   add    %esi,%edx
  0x00007f32dd04446e:   rol    $0xc,%edx
  0x00007f32dd044471:   add    %eax,%edx
  0x00007f32dd044473:   add    $0x242070db,%ecx
  0x00007f32dd044479:   mov    %eax,%esi
  0x00007f32dd04447b:   add    0x8(%r15),%ecx
  0x00007f32dd04447f:   xor    %ebx,%esi
  0x00007f32dd044481:   and    %edx,%esi
  0x00007f32dd044483:   xor    %ebx,%esi
  0x00007f32dd044485:   add    %esi,%ecx
  0x00007f32dd044487:   rol    $0x11,%ecx
  0x00007f32dd04448a:   add    %edx,%ecx
  0x00007f32dd04448c:   add    $0xc1bdceee,%ebx
  0x00007f32dd044492:   mov    %edx,%esi
  0x00007f32dd044494:   add    0xc(%r15),%ebx
  0x00007f32dd044498:   xor    %eax,%esi
  0x00007f32dd04449a:   and    %ecx,%esi
  0x00007f32dd04449c:   xor    %eax,%esi
  0x00007f32dd04449e:   add    %esi,%ebx
  0x00007f32dd0444a0:   rol    $0x16,%ebx
  0x00007f32dd0444a3:   add    %ecx,%ebx
  0x00007f32dd0444a5:   add    $0xf57c0faf,%eax
  0x00007f32dd0444aa:   mov    %ecx,%esi
  0x00007f32dd0444ac:   add    0x10(%r15),%eax
  0x00007f32dd0444b0:   xor    %edx,%esi
  0x00007f32dd0444b2:   and    %ebx,%esi
  0x00007f32dd0444b4:   xor    %edx,%esi
  0x00007f32dd0444b6:   add    %esi,%eax
  0x00007f32dd0444b8:   rol    $0x7,%eax
  0x00007f32dd0444bb:   add    %ebx,%eax
  0x00007f32dd0444bd:   add    $0x4787c62a,%edx
  0x00007f32dd0444c3:   mov    %ebx,%esi
  0x00007f32dd0444c5:   add    0x14(%r15),%edx
  0x00007f32dd0444c9:   xor    %ecx,%esi
  0x00007f32dd0444cb:   and    %eax,%esi
  0x00007f32dd0444cd:   xor    %ecx,%esi
  0x00007f32dd0444cf:   add    %esi,%edx
  0x00007f32dd0444d1:   rol    $0xc,%edx
  0x00007f32dd0444d4:   add    %eax,%edx
  0x00007f32dd0444d6:   add    $0xa8304613,%ecx
  0x00007f32dd0444dc:   mov    %eax,%esi
  0x00007f32dd0444de:   add    0x18(%r15),%ecx
  0x00007f32dd0444e2:   xor    %ebx,%esi
  0x00007f32dd0444e4:   and    %edx,%esi
  0x00007f32dd0444e6:   xor    %ebx,%esi
  0x00007f32dd0444e8:   add    %esi,%ecx
  0x00007f32dd0444ea:   rol    $0x11,%ecx
  0x00007f32dd0444ed:   add    %edx,%ecx
  0x00007f32dd0444ef:   add    $0xfd469501,%ebx
  0x00007f32dd0444f5:   mov    %edx,%esi
  0x00007f32dd0444f7:   add    0x1c(%r15),%ebx
  0x00007f32dd0444fb:   xor    %eax,%esi
  0x00007f32dd0444fd:   and    %ecx,%esi
  0x00007f32dd0444ff:   xor    %eax,%esi
  0x00007f32dd044501:   add    %esi,%ebx
  0x00007f32dd044503:   rol    $0x16,%ebx
  0x00007f32dd044506:   add    %ecx,%ebx
  0x00007f32dd044508:   add    $0x698098d8,%eax
  0x00007f32dd04450d:   mov    %ecx,%esi
  0x00007f32dd04450f:   add    0x20(%r15),%eax
  0x00007f32dd044513:   xor    %edx,%esi
  0x00007f32dd044515:   and    %ebx,%esi
  0x00007f32dd044517:   xor    %edx,%esi
  0x00007f32dd044519:   add    %esi,%eax
  0x00007f32dd04451b:   rol    $0x7,%eax
  0x00007f32dd04451e:   add    %ebx,%eax
  0x00007f32dd044520:   add    $0x8b44f7af,%edx
  0x00007f32dd044526:   mov    %ebx,%esi
  0x00007f32dd044528:   add    0x24(%r15),%edx
  0x00007f32dd04452c:   xor    %ecx,%esi
  0x00007f32dd04452e:   and    %eax,%esi
  0x00007f32dd044530:   xor    %ecx,%esi
  0x00007f32dd044532:   add    %esi,%edx
  0x00007f32dd044534:   rol    $0xc,%edx
  0x00007f32dd044537:   add    %eax,%edx
  0x00007f32dd044539:   add    $0xffff5bb1,%ecx
  0x00007f32dd04453f:   mov    %eax,%esi
  0x00007f32dd044541:   add    0x28(%r15),%ecx
  0x00007f32dd044545:   xor    %ebx,%esi
  0x00007f32dd044547:   and    %edx,%esi
  0x00007f32dd044549:   xor    %ebx,%esi
  0x00007f32dd04454b:   add    %esi,%ecx
  0x00007f32dd04454d:   rol    $0x11,%ecx
  0x00007f32dd044550:   add    %edx,%ecx
  0x00007f32dd044552:   add    $0x895cd7be,%ebx
  0x00007f32dd044558:   mov    %edx,%esi
  0x00007f32dd04455a:   add    0x2c(%r15),%ebx
  0x00007f32dd04455e:   xor    %eax,%esi
  0x00007f32dd044560:   and    %ecx,%esi
  0x00007f32dd044562:   xor    %eax,%esi
  0x00007f32dd044564:   add    %esi,%ebx
  0x00007f32dd044566:   rol    $0x16,%ebx
  0x00007f32dd044569:   add    %ecx,%ebx
  0x00007f32dd04456b:   add    $0x6b901122,%eax
  0x00007f32dd044570:   mov    %ecx,%esi
  0x00007f32dd044572:   add    0x30(%r15),%eax
  0x00007f32dd044576:   xor    %edx,%esi
  0x00007f32dd044578:   and    %ebx,%esi
  0x00007f32dd04457a:   xor    %edx,%esi
  0x00007f32dd04457c:   add    %esi,%eax
  0x00007f32dd04457e:   rol    $0x7,%eax
  0x00007f32dd044581:   add    %ebx,%eax
  0x00007f32dd044583:   add    $0xfd987193,%edx
  0x00007f32dd044589:   mov    %ebx,%esi
  0x00007f32dd04458b:   add    0x34(%r15),%edx
  0x00007f32dd04458f:   xor    %ecx,%esi
  0x00007f32dd044591:   and    %eax,%esi
  0x00007f32dd044593:   xor    %ecx,%esi
  0x00007f32dd044595:   add    %esi,%edx
  0x00007f32dd044597:   rol    $0xc,%edx
  0x00007f32dd04459a:   add    %eax,%edx
  0x00007f32dd04459c:   add    $0xa679438e,%ecx
  0x00007f32dd0445a2:   mov    %eax,%esi
  0x00007f32dd0445a4:   add    0x38(%r15),%ecx
  0x00007f32dd0445a8:   xor    %ebx,%esi
  0x00007f32dd0445aa:   and    %edx,%esi
  0x00007f32dd0445ac:   xor    %ebx,%esi
  0x00007f32dd0445ae:   add    %esi,%ecx
  0x00007f32dd0445b0:   rol    $0x11,%ecx
  0x00007f32dd0445b3:   add    %edx,%ecx
  0x00007f32dd0445b5:   add    $0x49b40821,%ebx
  0x00007f32dd0445bb:   mov    %edx,%esi
  0x00007f32dd0445bd:   add    0x3c(%r15),%ebx
  0x00007f32dd0445c1:   xor    %eax,%esi
  0x00007f32dd0445c3:   and    %ecx,%esi
  0x00007f32dd0445c5:   xor    %eax,%esi
  0x00007f32dd0445c7:   add    %esi,%ebx
  0x00007f32dd0445c9:   rol    $0x16,%ebx
  0x00007f32dd0445cc:   add    %ecx,%ebx
  0x00007f32dd0445ce:   add    $0xf61e2562,%eax
  0x00007f32dd0445d3:   mov    %edx,%esi
  0x00007f32dd0445d5:   mov    %edx,%edi
  0x00007f32dd0445d7:   add    0x4(%r15),%eax
  0x00007f32dd0445db:   not    %esi
  0x00007f32dd0445dd:   and    %ebx,%edi
  0x00007f32dd0445df:   and    %ecx,%esi
  0x00007f32dd0445e1:   or     %edi,%esi
  0x00007f32dd0445e3:   add    %esi,%eax
  0x00007f32dd0445e5:   rol    $0x5,%eax
  0x00007f32dd0445e8:   add    %ebx,%eax
  0x00007f32dd0445ea:   add    $0xc040b340,%edx
  0x00007f32dd0445f0:   mov    %ecx,%esi
  0x00007f32dd0445f2:   mov    %ecx,%edi
  0x00007f32dd0445f4:   add    0x18(%r15),%edx
  0x00007f32dd0445f8:   not    %esi
  0x00007f32dd0445fa:   and    %eax,%edi
  0x00007f32dd0445fc:   and    %ebx,%esi
  0x00007f32dd0445fe:   or     %edi,%esi
  0x00007f32dd044600:   add    %esi,%edx
  0x00007f32dd044602:   rol    $0x9,%edx
  0x00007f32dd044605:   add    %eax,%edx
  0x00007f32dd044607:   add    $0x265e5a51,%ecx
  0x00007f32dd04460d:   mov    %ebx,%esi
  0x00007f32dd04460f:   mov    %ebx,%edi
  0x00007f32dd044611:   add    0x2c(%r15),%ecx
  0x00007f32dd044615:   not    %esi
  0x00007f32dd044617:   and    %edx,%edi
  0x00007f32dd044619:   and    %eax,%esi
  0x00007f32dd04461b:   or     %edi,%esi
  0x00007f32dd04461d:   add    %esi,%ecx
  0x00007f32dd04461f:   rol    $0xe,%ecx
  0x00007f32dd044622:   add    %edx,%ecx
  0x00007f32dd044624:   add    $0xe9b6c7aa,%ebx
  0x00007f32dd04462a:   mov    %eax,%esi
  0x00007f32dd04462c:   mov    %eax,%edi
  0x00007f32dd04462e:   add    (%r15),%ebx
  0x00007f32dd044631:   not    %esi
  0x00007f32dd044633:   and    %ecx,%edi
  0x00007f32dd044635:   and    %edx,%esi
  0x00007f32dd044637:   or     %edi,%esi
  0x00007f32dd044639:   add    %esi,%ebx
  0x00007f32dd04463b:   rol    $0x14,%ebx
  0x00007f32dd04463e:   add    %ecx,%ebx
  0x00007f32dd044640:   add    $0xd62f105d,%eax
  0x00007f32dd044645:   mov    %edx,%esi
  0x00007f32dd044647:   mov    %edx,%edi
  0x00007f32dd044649:   add    0x14(%r15),%eax
  0x00007f32dd04464d:   not    %esi
  0x00007f32dd04464f:   and    %ebx,%edi
  0x00007f32dd044651:   and    %ecx,%esi
  0x00007f32dd044653:   or     %edi,%esi
  0x00007f32dd044655:   add    %esi,%eax
  0x00007f32dd044657:   rol    $0x5,%eax
  0x00007f32dd04465a:   add    %ebx,%eax
  0x00007f32dd04465c:   add    $0x2441453,%edx
  0x00007f32dd044662:   mov    %ecx,%esi
  0x00007f32dd044664:   mov    %ecx,%edi
  0x00007f32dd044666:   add    0x28(%r15),%edx
  0x00007f32dd04466a:   not    %esi
  0x00007f32dd04466c:   and    %eax,%edi
  0x00007f32dd04466e:   and    %ebx,%esi
  0x00007f32dd044670:   or     %edi,%esi
  0x00007f32dd044672:   add    %esi,%edx
  0x00007f32dd044674:   rol    $0x9,%edx
  0x00007f32dd044677:   add    %eax,%edx
  0x00007f32dd044679:   add    $0xd8a1e681,%ecx
  0x00007f32dd04467f:   mov    %ebx,%esi
  0x00007f32dd044681:   mov    %ebx,%edi
  0x00007f32dd044683:   add    0x3c(%r15),%ecx
  0x00007f32dd044687:   not    %esi
  0x00007f32dd044689:   and    %edx,%edi
  0x00007f32dd04468b:   and    %eax,%esi
  0x00007f32dd04468d:   or     %edi,%esi
  0x00007f32dd04468f:   add    %esi,%ecx
  0x00007f32dd044691:   rol    $0xe,%ecx
  0x00007f32dd044694:   add    %edx,%ecx
  0x00007f32dd044696:   add    $0xe7d3fbc8,%ebx
  0x00007f32dd04469c:   mov    %eax,%esi
  0x00007f32dd04469e:   mov    %eax,%edi
  0x00007f32dd0446a0:   add    0x10(%r15),%ebx
  0x00007f32dd0446a4:   not    %esi
  0x00007f32dd0446a6:   and    %ecx,%edi
  0x00007f32dd0446a8:   and    %edx,%esi
  0x00007f32dd0446aa:   or     %edi,%esi
  0x00007f32dd0446ac:   add    %esi,%ebx
  0x00007f32dd0446ae:   rol    $0x14,%ebx
  0x00007f32dd0446b1:   add    %ecx,%ebx
  0x00007f32dd0446b3:   add    $0x21e1cde6,%eax
  0x00007f32dd0446b8:   mov    %edx,%esi
  0x00007f32dd0446ba:   mov    %edx,%edi
  0x00007f32dd0446bc:   add    0x24(%r15),%eax
  0x00007f32dd0446c0:   not    %esi
  0x00007f32dd0446c2:   and    %ebx,%edi
  0x00007f32dd0446c4:   and    %ecx,%esi
  0x00007f32dd0446c6:   or     %edi,%esi
  0x00007f32dd0446c8:   add    %esi,%eax
  0x00007f32dd0446ca:   rol    $0x5,%eax
  0x00007f32dd0446cd:   add    %ebx,%eax
  0x00007f32dd0446cf:   add    $0xc33707d6,%edx
  0x00007f32dd0446d5:   mov    %ecx,%esi
  0x00007f32dd0446d7:   mov    %ecx,%edi
  0x00007f32dd0446d9:   add    0x38(%r15),%edx
  0x00007f32dd0446dd:   not    %esi
  0x00007f32dd0446df:   and    %eax,%edi
  0x00007f32dd0446e1:   and    %ebx,%esi
  0x00007f32dd0446e3:   or     %edi,%esi
  0x00007f32dd0446e5:   add    %esi,%edx
  0x00007f32dd0446e7:   rol    $0x9,%edx
  0x00007f32dd0446ea:   add    %eax,%edx
  0x00007f32dd0446ec:   add    $0xf4d50d87,%ecx
  0x00007f32dd0446f2:   mov    %ebx,%esi
  0x00007f32dd0446f4:   mov    %ebx,%edi
  0x00007f32dd0446f6:   add    0xc(%r15),%ecx
  0x00007f32dd0446fa:   not    %esi
  0x00007f32dd0446fc:   and    %edx,%edi
  0x00007f32dd0446fe:   and    %eax,%esi
  0x00007f32dd044700:   or     %edi,%esi
  0x00007f32dd044702:   add    %esi,%ecx
  0x00007f32dd044704:   rol    $0xe,%ecx
  0x00007f32dd044707:   add    %edx,%ecx
  0x00007f32dd044709:   add    $0x455a14ed,%ebx
  0x00007f32dd04470f:   mov    %eax,%esi
  0x00007f32dd044711:   mov    %eax,%edi
  0x00007f32dd044713:   add    0x20(%r15),%ebx
  0x00007f32dd044717:   not    %esi
  0x00007f32dd044719:   and    %ecx,%edi
  0x00007f32dd04471b:   and    %edx,%esi
  0x00007f32dd04471d:   or     %edi,%esi
  0x00007f32dd04471f:   add    %esi,%ebx
  0x00007f32dd044721:   rol    $0x14,%ebx
  0x00007f32dd044724:   add    %ecx,%ebx
  0x00007f32dd044726:   add    $0xa9e3e905,%eax
  0x00007f32dd04472b:   mov    %edx,%esi
  0x00007f32dd04472d:   mov    %edx,%edi
  0x00007f32dd04472f:   add    0x34(%r15),%eax
  0x00007f32dd044733:   not    %esi
  0x00007f32dd044735:   and    %ebx,%edi
  0x00007f32dd044737:   and    %ecx,%esi
  0x00007f32dd044739:   or     %edi,%esi
  0x00007f32dd04473b:   add    %esi,%eax
  0x00007f32dd04473d:   rol    $0x5,%eax
  0x00007f32dd044740:   add    %ebx,%eax
  0x00007f32dd044742:   add    $0xfcefa3f8,%edx
  0x00007f32dd044748:   mov    %ecx,%esi
  0x00007f32dd04474a:   mov    %ecx,%edi
  0x00007f32dd04474c:   add    0x8(%r15),%edx
  0x00007f32dd044750:   not    %esi
  0x00007f32dd044752:   and    %eax,%edi
  0x00007f32dd044754:   and    %ebx,%esi
  0x00007f32dd044756:   or     %edi,%esi
  0x00007f32dd044758:   add    %esi,%edx
  0x00007f32dd04475a:   rol    $0x9,%edx
  0x00007f32dd04475d:   add    %eax,%edx
  0x00007f32dd04475f:   add    $0x676f02d9,%ecx
  0x00007f32dd044765:   mov    %ebx,%esi
  0x00007f32dd044767:   mov    %ebx,%edi
  0x00007f32dd044769:   add    0x1c(%r15),%ecx
  0x00007f32dd04476d:   not    %esi
  0x00007f32dd04476f:   and    %edx,%edi
  0x00007f32dd044771:   and    %eax,%esi
  0x00007f32dd044773:   or     %edi,%esi
  0x00007f32dd044775:   add    %esi,%ecx
  0x00007f32dd044777:   rol    $0xe,%ecx
  0x00007f32dd04477a:   add    %edx,%ecx
  0x00007f32dd04477c:   add    $0x8d2a4c8a,%ebx
  0x00007f32dd044782:   mov    %eax,%esi
  0x00007f32dd044784:   mov    %eax,%edi
  0x00007f32dd044786:   add    0x30(%r15),%ebx
  0x00007f32dd04478a:   not    %esi
  0x00007f32dd04478c:   and    %ecx,%edi
  0x00007f32dd04478e:   and    %edx,%esi
  0x00007f32dd044790:   or     %edi,%esi
  0x00007f32dd044792:   add    %esi,%ebx
  0x00007f32dd044794:   rol    $0x14,%ebx
  0x00007f32dd044797:   add    %ecx,%ebx
  0x00007f32dd044799:   add    $0xfffa3942,%eax
  0x00007f32dd04479e:   mov    %ecx,%esi
  0x00007f32dd0447a0:   add    0x14(%r15),%eax
  0x00007f32dd0447a4:   xor    %edx,%esi
  0x00007f32dd0447a6:   xor    %ebx,%esi
  0x00007f32dd0447a8:   add    %esi,%eax
  0x00007f32dd0447aa:   rol    $0x4,%eax
  0x00007f32dd0447ad:   add    %ebx,%eax
  0x00007f32dd0447af:   add    $0x8771f681,%edx
  0x00007f32dd0447b5:   mov    %ebx,%esi
  0x00007f32dd0447b7:   add    0x20(%r15),%edx
  0x00007f32dd0447bb:   xor    %ecx,%esi
  0x00007f32dd0447bd:   xor    %eax,%esi
  0x00007f32dd0447bf:   add    %esi,%edx
  0x00007f32dd0447c1:   rol    $0xb,%edx
  0x00007f32dd0447c4:   add    %eax,%edx
  0x00007f32dd0447c6:   add    $0x6d9d6122,%ecx
  0x00007f32dd0447cc:   mov    %eax,%esi
  0x00007f32dd0447ce:   add    0x2c(%r15),%ecx
  0x00007f32dd0447d2:   xor    %ebx,%esi
  0x00007f32dd0447d4:   xor    %edx,%esi
  0x00007f32dd0447d6:   add    %esi,%ecx
  0x00007f32dd0447d8:   rol    $0x10,%ecx
  0x00007f32dd0447db:   add    %edx,%ecx
  0x00007f32dd0447dd:   add    $0xfde5380c,%ebx
  0x00007f32dd0447e3:   mov    %edx,%esi
  0x00007f32dd0447e5:   add    0x38(%r15),%ebx
  0x00007f32dd0447e9:   xor    %eax,%esi
  0x00007f32dd0447eb:   xor    %ecx,%esi
  0x00007f32dd0447ed:   add    %esi,%ebx
  0x00007f32dd0447ef:   rol    $0x17,%ebx
  0x00007f32dd0447f2:   add    %ecx,%ebx
  0x00007f32dd0447f4:   add    $0xa4beea44,%eax
  0x00007f32dd0447f9:   mov    %ecx,%esi
  0x00007f32dd0447fb:   add    0x4(%r15),%eax
  0x00007f32dd0447ff:   xor    %edx,%esi
  0x00007f32dd044801:   xor    %ebx,%esi
  0x00007f32dd044803:   add    %esi,%eax
  0x00007f32dd044805:   rol    $0x4,%eax
  0x00007f32dd044808:   add    %ebx,%eax
  0x00007f32dd04480a:   add    $0x4bdecfa9,%edx
  0x00007f32dd044810:   mov    %ebx,%esi
  0x00007f32dd044812:   add    0x10(%r15),%edx
  0x00007f32dd044816:   xor    %ecx,%esi
  0x00007f32dd044818:   xor    %eax,%esi
  0x00007f32dd04481a:   add    %esi,%edx
  0x00007f32dd04481c:   rol    $0xb,%edx
  0x00007f32dd04481f:   add    %eax,%edx
  0x00007f32dd044821:   add    $0xf6bb4b60,%ecx
  0x00007f32dd044827:   mov    %eax,%esi
  0x00007f32dd044829:   add    0x1c(%r15),%ecx
  0x00007f32dd04482d:   xor    %ebx,%esi
  0x00007f32dd04482f:   xor    %edx,%esi
  0x00007f32dd044831:   add    %esi,%ecx
  0x00007f32dd044833:   rol    $0x10,%ecx
  0x00007f32dd044836:   add    %edx,%ecx
  0x00007f32dd044838:   add    $0xbebfbc70,%ebx
  0x00007f32dd04483e:   mov    %edx,%esi
  0x00007f32dd044840:   add    0x28(%r15),%ebx
  0x00007f32dd044844:   xor    %eax,%esi
  0x00007f32dd044846:   xor    %ecx,%esi
  0x00007f32dd044848:   add    %esi,%ebx
  0x00007f32dd04484a:   rol    $0x17,%ebx
  0x00007f32dd04484d:   add    %ecx,%ebx
  0x00007f32dd04484f:   add    $0x289b7ec6,%eax
  0x00007f32dd044854:   mov    %ecx,%esi
  0x00007f32dd044856:   add    0x34(%r15),%eax
  0x00007f32dd04485a:   xor    %edx,%esi
  0x00007f32dd04485c:   xor    %ebx,%esi
  0x00007f32dd04485e:   add    %esi,%eax
  0x00007f32dd044860:   rol    $0x4,%eax
  0x00007f32dd044863:   add    %ebx,%eax
  0x00007f32dd044865:   add    $0xeaa127fa,%edx
  0x00007f32dd04486b:   mov    %ebx,%esi
  0x00007f32dd04486d:   add    (%r15),%edx
  0x00007f32dd044870:   xor    %ecx,%esi
  0x00007f32dd044872:   xor    %eax,%esi
  0x00007f32dd044874:   add    %esi,%edx
  0x00007f32dd044876:   rol    $0xb,%edx
  0x00007f32dd044879:   add    %eax,%edx
  0x00007f32dd04487b:   add    $0xd4ef3085,%ecx
  0x00007f32dd044881:   mov    %eax,%esi
  0x00007f32dd044883:   add    0xc(%r15),%ecx
  0x00007f32dd044887:   xor    %ebx,%esi
  0x00007f32dd044889:   xor    %edx,%esi
  0x00007f32dd04488b:   add    %esi,%ecx
  0x00007f32dd04488d:   rol    $0x10,%ecx
  0x00007f32dd044890:   add    %edx,%ecx
  0x00007f32dd044892:   add    $0x4881d05,%ebx
  0x00007f32dd044898:   mov    %edx,%esi
  0x00007f32dd04489a:   add    0x18(%r15),%ebx
  0x00007f32dd04489e:   xor    %eax,%esi
  0x00007f32dd0448a0:   xor    %ecx,%esi
  0x00007f32dd0448a2:   add    %esi,%ebx
  0x00007f32dd0448a4:   rol    $0x17,%ebx
  0x00007f32dd0448a7:   add    %ecx,%ebx
  0x00007f32dd0448a9:   add    $0xd9d4d039,%eax
  0x00007f32dd0448ae:   mov    %ecx,%esi
  0x00007f32dd0448b0:   add    0x24(%r15),%eax
  0x00007f32dd0448b4:   xor    %edx,%esi
  0x00007f32dd0448b6:   xor    %ebx,%esi
  0x00007f32dd0448b8:   add    %esi,%eax
  0x00007f32dd0448ba:   rol    $0x4,%eax
  0x00007f32dd0448bd:   add    %ebx,%eax
  0x00007f32dd0448bf:   add    $0xe6db99e5,%edx
  0x00007f32dd0448c5:   mov    %ebx,%esi
  0x00007f32dd0448c7:   add    0x30(%r15),%edx
  0x00007f32dd0448cb:   xor    %ecx,%esi
  0x00007f32dd0448cd:   xor    %eax,%esi
  0x00007f32dd0448cf:   add    %esi,%edx
  0x00007f32dd0448d1:   rol    $0xb,%edx
  0x00007f32dd0448d4:   add    %eax,%edx
  0x00007f32dd0448d6:   add    $0x1fa27cf8,%ecx
  0x00007f32dd0448dc:   mov    %eax,%esi
  0x00007f32dd0448de:   add    0x3c(%r15),%ecx
  0x00007f32dd0448e2:   xor    %ebx,%esi
  0x00007f32dd0448e4:   xor    %edx,%esi
  0x00007f32dd0448e6:   add    %esi,%ecx
  0x00007f32dd0448e8:   rol    $0x10,%ecx
  0x00007f32dd0448eb:   add    %edx,%ecx
  0x00007f32dd0448ed:   add    $0xc4ac5665,%ebx
  0x00007f32dd0448f3:   mov    %edx,%esi
  0x00007f32dd0448f5:   add    0x8(%r15),%ebx
  0x00007f32dd0448f9:   xor    %eax,%esi
  0x00007f32dd0448fb:   xor    %ecx,%esi
  0x00007f32dd0448fd:   add    %esi,%ebx
  0x00007f32dd0448ff:   rol    $0x17,%ebx
  0x00007f32dd044902:   add    %ecx,%ebx
  0x00007f32dd044904:   add    $0xf4292244,%eax
  0x00007f32dd044909:   mov    %edx,%esi
  0x00007f32dd04490b:   not    %esi
  0x00007f32dd04490d:   add    (%r15),%eax
  0x00007f32dd044910:   or     %ebx,%esi
  0x00007f32dd044912:   xor    %ecx,%esi
  0x00007f32dd044914:   add    %esi,%eax
  0x00007f32dd044916:   rol    $0x6,%eax
  0x00007f32dd044919:   add    %ebx,%eax
  0x00007f32dd04491b:   add    $0x432aff97,%edx
  0x00007f32dd044921:   mov    %ecx,%esi
  0x00007f32dd044923:   not    %esi
  0x00007f32dd044925:   add    0x1c(%r15),%edx
  0x00007f32dd044929:   or     %eax,%esi
  0x00007f32dd04492b:   xor    %ebx,%esi
  0x00007f32dd04492d:   add    %esi,%edx
  0x00007f32dd04492f:   rol    $0xa,%edx
  0x00007f32dd044932:   add    %eax,%edx
  0x00007f32dd044934:   add    $0xab9423a7,%ecx
  0x00007f32dd04493a:   mov    %ebx,%esi
  0x00007f32dd04493c:   not    %esi
  0x00007f32dd04493e:   add    0x38(%r15),%ecx
  0x00007f32dd044942:   or     %edx,%esi
  0x00007f32dd044944:   xor    %eax,%esi
  0x00007f32dd044946:   add    %esi,%ecx
  0x00007f32dd044948:   rol    $0xf,%ecx
  0x00007f32dd04494b:   add    %edx,%ecx
  0x00007f32dd04494d:   add    $0xfc93a039,%ebx
  0x00007f32dd044953:   mov    %eax,%esi
  0x00007f32dd044955:   not    %esi
  0x00007f32dd044957:   add    0x14(%r15),%ebx
  0x00007f32dd04495b:   or     %ecx,%esi
  0x00007f32dd04495d:   xor    %edx,%esi
  0x00007f32dd04495f:   add    %esi,%ebx
  0x00007f32dd044961:   rol    $0x15,%ebx
  0x00007f32dd044964:   add    %ecx,%ebx
  0x00007f32dd044966:   add    $0x655b59c3,%eax
  0x00007f32dd04496b:   mov    %edx,%esi
  0x00007f32dd04496d:   not    %esi
  0x00007f32dd04496f:   add    0x30(%r15),%eax
  0x00007f32dd044973:   or     %ebx,%esi
  0x00007f32dd044975:   xor    %ecx,%esi
  0x00007f32dd044977:   add    %esi,%eax
  0x00007f32dd044979:   rol    $0x6,%eax
  0x00007f32dd04497c:   add    %ebx,%eax
  0x00007f32dd04497e:   add    $0x8f0ccc92,%edx
  0x00007f32dd044984:   mov    %ecx,%esi
  0x00007f32dd044986:   not    %esi
  0x00007f32dd044988:   add    0xc(%r15),%edx
  0x00007f32dd04498c:   or     %eax,%esi
  0x00007f32dd04498e:   xor    %ebx,%esi
  0x00007f32dd044990:   add    %esi,%edx
  0x00007f32dd044992:   rol    $0xa,%edx
  0x00007f32dd044995:   add    %eax,%edx
  0x00007f32dd044997:   add    $0xffeff47d,%ecx
  0x00007f32dd04499d:   mov    %ebx,%esi
  0x00007f32dd04499f:   not    %esi
  0x00007f32dd0449a1:   add    0x28(%r15),%ecx
  0x00007f32dd0449a5:   or     %edx,%esi
  0x00007f32dd0449a7:   xor    %eax,%esi
  0x00007f32dd0449a9:   add    %esi,%ecx
  0x00007f32dd0449ab:   rol    $0xf,%ecx
  0x00007f32dd0449ae:   add    %edx,%ecx
  0x00007f32dd0449b0:   add    $0x85845dd1,%ebx
  0x00007f32dd0449b6:   mov    %eax,%esi
  0x00007f32dd0449b8:   not    %esi
  0x00007f32dd0449ba:   add    0x4(%r15),%ebx
  0x00007f32dd0449be:   or     %ecx,%esi
  0x00007f32dd0449c0:   xor    %edx,%esi
  0x00007f32dd0449c2:   add    %esi,%ebx
  0x00007f32dd0449c4:   rol    $0x15,%ebx
  0x00007f32dd0449c7:   add    %ecx,%ebx
  0x00007f32dd0449c9:   add    $0x6fa87e4f,%eax
  0x00007f32dd0449ce:   mov    %edx,%esi
  0x00007f32dd0449d0:   not    %esi
  0x00007f32dd0449d2:   add    0x20(%r15),%eax
  0x00007f32dd0449d6:   or     %ebx,%esi
  0x00007f32dd0449d8:   xor    %ecx,%esi
  0x00007f32dd0449da:   add    %esi,%eax
  0x00007f32dd0449dc:   rol    $0x6,%eax
  0x00007f32dd0449df:   add    %ebx,%eax
  0x00007f32dd0449e1:   add    $0xfe2ce6e0,%edx
  0x00007f32dd0449e7:   mov    %ecx,%esi
  0x00007f32dd0449e9:   not    %esi
  0x00007f32dd0449eb:   add    0x3c(%r15),%edx
  0x00007f32dd0449ef:   or     %eax,%esi
  0x00007f32dd0449f1:   xor    %ebx,%esi
  0x00007f32dd0449f3:   add    %esi,%edx
  0x00007f32dd0449f5:   rol    $0xa,%edx
  0x00007f32dd0449f8:   add    %eax,%edx
  0x00007f32dd0449fa:   add    $0xa3014314,%ecx
  0x00007f32dd044a00:   mov    %ebx,%esi
  0x00007f32dd044a02:   not    %esi
  0x00007f32dd044a04:   add    0x18(%r15),%ecx
  0x00007f32dd044a08:   or     %edx,%esi
  0x00007f32dd044a0a:   xor    %eax,%esi
  0x00007f32dd044a0c:   add    %esi,%ecx
  0x00007f32dd044a0e:   rol    $0xf,%ecx
  0x00007f32dd044a11:   add    %edx,%ecx
  0x00007f32dd044a13:   add    $0x4e0811a1,%ebx
  0x00007f32dd044a19:   mov    %eax,%esi
  0x00007f32dd044a1b:   not    %esi
  0x00007f32dd044a1d:   add    0x34(%r15),%ebx
  0x00007f32dd044a21:   or     %ecx,%esi
  0x00007f32dd044a23:   xor    %edx,%esi
  0x00007f32dd044a25:   add    %esi,%ebx
  0x00007f32dd044a27:   rol    $0x15,%ebx
  0x00007f32dd044a2a:   add    %ecx,%ebx
  0x00007f32dd044a2c:   add    $0xf7537e82,%eax
  0x00007f32dd044a31:   mov    %edx,%esi
  0x00007f32dd044a33:   not    %esi
  0x00007f32dd044a35:   add    0x10(%r15),%eax
  0x00007f32dd044a39:   or     %ebx,%esi
  0x00007f32dd044a3b:   xor    %ecx,%esi
  0x00007f32dd044a3d:   add    %esi,%eax
  0x00007f32dd044a3f:   rol    $0x6,%eax
  0x00007f32dd044a42:   add    %ebx,%eax
  0x00007f32dd044a44:   add    $0xbd3af235,%edx
  0x00007f32dd044a4a:   mov    %ecx,%esi
  0x00007f32dd044a4c:   not    %esi
  0x00007f32dd044a4e:   add    0x2c(%r15),%edx
  0x00007f32dd044a52:   or     %eax,%esi
  0x00007f32dd044a54:   xor    %ebx,%esi
  0x00007f32dd044a56:   add    %esi,%edx
  0x00007f32dd044a58:   rol    $0xa,%edx
  0x00007f32dd044a5b:   add    %eax,%edx
  0x00007f32dd044a5d:   add    $0x2ad7d2bb,%ecx
  0x00007f32dd044a63:   mov    %ebx,%esi
  0x00007f32dd044a65:   not    %esi
  0x00007f32dd044a67:   add    0x8(%r15),%ecx
  0x00007f32dd044a6b:   or     %edx,%esi
  0x00007f32dd044a6d:   xor    %eax,%esi
  0x00007f32dd044a6f:   add    %esi,%ecx
  0x00007f32dd044a71:   rol    $0xf,%ecx
  0x00007f32dd044a74:   add    %edx,%ecx
  0x00007f32dd044a76:   add    $0xeb86d391,%ebx
  0x00007f32dd044a7c:   mov    %eax,%esi
  0x00007f32dd044a7e:   not    %esi
  0x00007f32dd044a80:   add    0x24(%r15),%ebx
  0x00007f32dd044a84:   or     %ecx,%esi
  0x00007f32dd044a86:   xor    %edx,%esi
  0x00007f32dd044a88:   add    %esi,%ebx
  0x00007f32dd044a8a:   rol    $0x15,%ebx
  0x00007f32dd044a8d:   add    %ecx,%ebx
  0x00007f32dd044a8f:   mov    (%rsp),%rdi
  0x00007f32dd044a93:   add    %eax,(%rdi)
  0x00007f32dd044a95:   add    %ebx,0x4(%rdi)
  0x00007f32dd044a98:   add    %ecx,0x8(%rdi)
  0x00007f32dd044a9b:   add    %edx,0xc(%rdi)
  0x00007f32dd044a9e:   add    $0x10,%rsp
  0x00007f32dd044aa2:   pop    %r15
  0x00007f32dd044aa4:   pop    %rsi
  0x00007f32dd044aa5:   pop    %rdi
  0x00007f32dd044aa6:   pop    %rbx
  0x00007f32dd044aa7:   leaveq 
  0x00007f32dd044aa8:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::md5_implCompressMB [0x00007f32dd044ac0, 0x00007f32dd04516b] (1707 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd044ac0:   push   %rbp
  0x00007f32dd044ac1:   mov    %rsp,%rbp
  0x00007f32dd044ac4:   push   %rbx
  0x00007f32dd044ac5:   push   %rdi
  0x00007f32dd044ac6:   push   %rsi
  0x00007f32dd044ac7:   push   %r15
  0x00007f32dd044ac9:   sub    $0x10,%rsp
  0x00007f32dd044acd:   mov    %rdi,%r15
  0x00007f32dd044ad0:   mov    %rsi,(%rsp)
  0x00007f32dd044ad4:   mov    %edx,0x8(%rsp)
  0x00007f32dd044ad8:   mov    %ecx,0xc(%rsp)
  0x00007f32dd044adc:   mov    (%rsp),%rdi
  0x00007f32dd044ae0:   mov    (%rdi),%eax
  0x00007f32dd044ae2:   mov    0x4(%rdi),%ebx
  0x00007f32dd044ae5:   mov    0x8(%rdi),%ecx
  0x00007f32dd044ae8:   mov    0xc(%rdi),%edx
  0x00007f32dd044aeb:   add    $0xd76aa478,%eax
  0x00007f32dd044af0:   mov    %ecx,%esi
  0x00007f32dd044af2:   add    (%r15),%eax
  0x00007f32dd044af5:   xor    %edx,%esi
  0x00007f32dd044af7:   and    %ebx,%esi
  0x00007f32dd044af9:   xor    %edx,%esi
  0x00007f32dd044afb:   add    %esi,%eax
  0x00007f32dd044afd:   rol    $0x7,%eax
  0x00007f32dd044b00:   add    %ebx,%eax
  0x00007f32dd044b02:   add    $0xe8c7b756,%edx
  0x00007f32dd044b08:   mov    %ebx,%esi
  0x00007f32dd044b0a:   add    0x4(%r15),%edx
  0x00007f32dd044b0e:   xor    %ecx,%esi
  0x00007f32dd044b10:   and    %eax,%esi
  0x00007f32dd044b12:   xor    %ecx,%esi
  0x00007f32dd044b14:   add    %esi,%edx
  0x00007f32dd044b16:   rol    $0xc,%edx
  0x00007f32dd044b19:   add    %eax,%edx
  0x00007f32dd044b1b:   add    $0x242070db,%ecx
  0x00007f32dd044b21:   mov    %eax,%esi
  0x00007f32dd044b23:   add    0x8(%r15),%ecx
  0x00007f32dd044b27:   xor    %ebx,%esi
  0x00007f32dd044b29:   and    %edx,%esi
  0x00007f32dd044b2b:   xor    %ebx,%esi
  0x00007f32dd044b2d:   add    %esi,%ecx
  0x00007f32dd044b2f:   rol    $0x11,%ecx
  0x00007f32dd044b32:   add    %edx,%ecx
  0x00007f32dd044b34:   add    $0xc1bdceee,%ebx
  0x00007f32dd044b3a:   mov    %edx,%esi
  0x00007f32dd044b3c:   add    0xc(%r15),%ebx
  0x00007f32dd044b40:   xor    %eax,%esi
  0x00007f32dd044b42:   and    %ecx,%esi
  0x00007f32dd044b44:   xor    %eax,%esi
  0x00007f32dd044b46:   add    %esi,%ebx
  0x00007f32dd044b48:   rol    $0x16,%ebx
  0x00007f32dd044b4b:   add    %ecx,%ebx
  0x00007f32dd044b4d:   add    $0xf57c0faf,%eax
  0x00007f32dd044b52:   mov    %ecx,%esi
  0x00007f32dd044b54:   add    0x10(%r15),%eax
  0x00007f32dd044b58:   xor    %edx,%esi
  0x00007f32dd044b5a:   and    %ebx,%esi
  0x00007f32dd044b5c:   xor    %edx,%esi
  0x00007f32dd044b5e:   add    %esi,%eax
  0x00007f32dd044b60:   rol    $0x7,%eax
  0x00007f32dd044b63:   add    %ebx,%eax
  0x00007f32dd044b65:   add    $0x4787c62a,%edx
  0x00007f32dd044b6b:   mov    %ebx,%esi
  0x00007f32dd044b6d:   add    0x14(%r15),%edx
  0x00007f32dd044b71:   xor    %ecx,%esi
  0x00007f32dd044b73:   and    %eax,%esi
  0x00007f32dd044b75:   xor    %ecx,%esi
  0x00007f32dd044b77:   add    %esi,%edx
  0x00007f32dd044b79:   rol    $0xc,%edx
  0x00007f32dd044b7c:   add    %eax,%edx
  0x00007f32dd044b7e:   add    $0xa8304613,%ecx
  0x00007f32dd044b84:   mov    %eax,%esi
  0x00007f32dd044b86:   add    0x18(%r15),%ecx
  0x00007f32dd044b8a:   xor    %ebx,%esi
  0x00007f32dd044b8c:   and    %edx,%esi
  0x00007f32dd044b8e:   xor    %ebx,%esi
  0x00007f32dd044b90:   add    %esi,%ecx
  0x00007f32dd044b92:   rol    $0x11,%ecx
  0x00007f32dd044b95:   add    %edx,%ecx
  0x00007f32dd044b97:   add    $0xfd469501,%ebx
  0x00007f32dd044b9d:   mov    %edx,%esi
  0x00007f32dd044b9f:   add    0x1c(%r15),%ebx
  0x00007f32dd044ba3:   xor    %eax,%esi
  0x00007f32dd044ba5:   and    %ecx,%esi
  0x00007f32dd044ba7:   xor    %eax,%esi
  0x00007f32dd044ba9:   add    %esi,%ebx
  0x00007f32dd044bab:   rol    $0x16,%ebx
  0x00007f32dd044bae:   add    %ecx,%ebx
  0x00007f32dd044bb0:   add    $0x698098d8,%eax
  0x00007f32dd044bb5:   mov    %ecx,%esi
  0x00007f32dd044bb7:   add    0x20(%r15),%eax
  0x00007f32dd044bbb:   xor    %edx,%esi
  0x00007f32dd044bbd:   and    %ebx,%esi
  0x00007f32dd044bbf:   xor    %edx,%esi
  0x00007f32dd044bc1:   add    %esi,%eax
  0x00007f32dd044bc3:   rol    $0x7,%eax
  0x00007f32dd044bc6:   add    %ebx,%eax
  0x00007f32dd044bc8:   add    $0x8b44f7af,%edx
  0x00007f32dd044bce:   mov    %ebx,%esi
  0x00007f32dd044bd0:   add    0x24(%r15),%edx
  0x00007f32dd044bd4:   xor    %ecx,%esi
  0x00007f32dd044bd6:   and    %eax,%esi
  0x00007f32dd044bd8:   xor    %ecx,%esi
  0x00007f32dd044bda:   add    %esi,%edx
  0x00007f32dd044bdc:   rol    $0xc,%edx
  0x00007f32dd044bdf:   add    %eax,%edx
  0x00007f32dd044be1:   add    $0xffff5bb1,%ecx
  0x00007f32dd044be7:   mov    %eax,%esi
  0x00007f32dd044be9:   add    0x28(%r15),%ecx
  0x00007f32dd044bed:   xor    %ebx,%esi
  0x00007f32dd044bef:   and    %edx,%esi
  0x00007f32dd044bf1:   xor    %ebx,%esi
  0x00007f32dd044bf3:   add    %esi,%ecx
  0x00007f32dd044bf5:   rol    $0x11,%ecx
  0x00007f32dd044bf8:   add    %edx,%ecx
  0x00007f32dd044bfa:   add    $0x895cd7be,%ebx
  0x00007f32dd044c00:   mov    %edx,%esi
  0x00007f32dd044c02:   add    0x2c(%r15),%ebx
  0x00007f32dd044c06:   xor    %eax,%esi
  0x00007f32dd044c08:   and    %ecx,%esi
  0x00007f32dd044c0a:   xor    %eax,%esi
  0x00007f32dd044c0c:   add    %esi,%ebx
  0x00007f32dd044c0e:   rol    $0x16,%ebx
  0x00007f32dd044c11:   add    %ecx,%ebx
  0x00007f32dd044c13:   add    $0x6b901122,%eax
  0x00007f32dd044c18:   mov    %ecx,%esi
  0x00007f32dd044c1a:   add    0x30(%r15),%eax
  0x00007f32dd044c1e:   xor    %edx,%esi
  0x00007f32dd044c20:   and    %ebx,%esi
  0x00007f32dd044c22:   xor    %edx,%esi
  0x00007f32dd044c24:   add    %esi,%eax
  0x00007f32dd044c26:   rol    $0x7,%eax
  0x00007f32dd044c29:   add    %ebx,%eax
  0x00007f32dd044c2b:   add    $0xfd987193,%edx
  0x00007f32dd044c31:   mov    %ebx,%esi
  0x00007f32dd044c33:   add    0x34(%r15),%edx
  0x00007f32dd044c37:   xor    %ecx,%esi
  0x00007f32dd044c39:   and    %eax,%esi
  0x00007f32dd044c3b:   xor    %ecx,%esi
  0x00007f32dd044c3d:   add    %esi,%edx
  0x00007f32dd044c3f:   rol    $0xc,%edx
  0x00007f32dd044c42:   add    %eax,%edx
  0x00007f32dd044c44:   add    $0xa679438e,%ecx
  0x00007f32dd044c4a:   mov    %eax,%esi
  0x00007f32dd044c4c:   add    0x38(%r15),%ecx
  0x00007f32dd044c50:   xor    %ebx,%esi
  0x00007f32dd044c52:   and    %edx,%esi
  0x00007f32dd044c54:   xor    %ebx,%esi
  0x00007f32dd044c56:   add    %esi,%ecx
  0x00007f32dd044c58:   rol    $0x11,%ecx
  0x00007f32dd044c5b:   add    %edx,%ecx
  0x00007f32dd044c5d:   add    $0x49b40821,%ebx
  0x00007f32dd044c63:   mov    %edx,%esi
  0x00007f32dd044c65:   add    0x3c(%r15),%ebx
  0x00007f32dd044c69:   xor    %eax,%esi
  0x00007f32dd044c6b:   and    %ecx,%esi
  0x00007f32dd044c6d:   xor    %eax,%esi
  0x00007f32dd044c6f:   add    %esi,%ebx
  0x00007f32dd044c71:   rol    $0x16,%ebx
  0x00007f32dd044c74:   add    %ecx,%ebx
  0x00007f32dd044c76:   add    $0xf61e2562,%eax
  0x00007f32dd044c7b:   mov    %edx,%esi
  0x00007f32dd044c7d:   mov    %edx,%edi
  0x00007f32dd044c7f:   add    0x4(%r15),%eax
  0x00007f32dd044c83:   not    %esi
  0x00007f32dd044c85:   and    %ebx,%edi
  0x00007f32dd044c87:   and    %ecx,%esi
  0x00007f32dd044c89:   or     %edi,%esi
  0x00007f32dd044c8b:   add    %esi,%eax
  0x00007f32dd044c8d:   rol    $0x5,%eax
  0x00007f32dd044c90:   add    %ebx,%eax
  0x00007f32dd044c92:   add    $0xc040b340,%edx
  0x00007f32dd044c98:   mov    %ecx,%esi
  0x00007f32dd044c9a:   mov    %ecx,%edi
  0x00007f32dd044c9c:   add    0x18(%r15),%edx
  0x00007f32dd044ca0:   not    %esi
  0x00007f32dd044ca2:   and    %eax,%edi
  0x00007f32dd044ca4:   and    %ebx,%esi
  0x00007f32dd044ca6:   or     %edi,%esi
  0x00007f32dd044ca8:   add    %esi,%edx
  0x00007f32dd044caa:   rol    $0x9,%edx
  0x00007f32dd044cad:   add    %eax,%edx
  0x00007f32dd044caf:   add    $0x265e5a51,%ecx
  0x00007f32dd044cb5:   mov    %ebx,%esi
  0x00007f32dd044cb7:   mov    %ebx,%edi
  0x00007f32dd044cb9:   add    0x2c(%r15),%ecx
  0x00007f32dd044cbd:   not    %esi
  0x00007f32dd044cbf:   and    %edx,%edi
  0x00007f32dd044cc1:   and    %eax,%esi
  0x00007f32dd044cc3:   or     %edi,%esi
  0x00007f32dd044cc5:   add    %esi,%ecx
  0x00007f32dd044cc7:   rol    $0xe,%ecx
  0x00007f32dd044cca:   add    %edx,%ecx
  0x00007f32dd044ccc:   add    $0xe9b6c7aa,%ebx
  0x00007f32dd044cd2:   mov    %eax,%esi
  0x00007f32dd044cd4:   mov    %eax,%edi
  0x00007f32dd044cd6:   add    (%r15),%ebx
  0x00007f32dd044cd9:   not    %esi
  0x00007f32dd044cdb:   and    %ecx,%edi
  0x00007f32dd044cdd:   and    %edx,%esi
  0x00007f32dd044cdf:   or     %edi,%esi
  0x00007f32dd044ce1:   add    %esi,%ebx
  0x00007f32dd044ce3:   rol    $0x14,%ebx
  0x00007f32dd044ce6:   add    %ecx,%ebx
  0x00007f32dd044ce8:   add    $0xd62f105d,%eax
  0x00007f32dd044ced:   mov    %edx,%esi
  0x00007f32dd044cef:   mov    %edx,%edi
  0x00007f32dd044cf1:   add    0x14(%r15),%eax
  0x00007f32dd044cf5:   not    %esi
  0x00007f32dd044cf7:   and    %ebx,%edi
  0x00007f32dd044cf9:   and    %ecx,%esi
  0x00007f32dd044cfb:   or     %edi,%esi
  0x00007f32dd044cfd:   add    %esi,%eax
  0x00007f32dd044cff:   rol    $0x5,%eax
  0x00007f32dd044d02:   add    %ebx,%eax
  0x00007f32dd044d04:   add    $0x2441453,%edx
  0x00007f32dd044d0a:   mov    %ecx,%esi
  0x00007f32dd044d0c:   mov    %ecx,%edi
  0x00007f32dd044d0e:   add    0x28(%r15),%edx
  0x00007f32dd044d12:   not    %esi
  0x00007f32dd044d14:   and    %eax,%edi
  0x00007f32dd044d16:   and    %ebx,%esi
  0x00007f32dd044d18:   or     %edi,%esi
  0x00007f32dd044d1a:   add    %esi,%edx
  0x00007f32dd044d1c:   rol    $0x9,%edx
  0x00007f32dd044d1f:   add    %eax,%edx
  0x00007f32dd044d21:   add    $0xd8a1e681,%ecx
  0x00007f32dd044d27:   mov    %ebx,%esi
  0x00007f32dd044d29:   mov    %ebx,%edi
  0x00007f32dd044d2b:   add    0x3c(%r15),%ecx
  0x00007f32dd044d2f:   not    %esi
  0x00007f32dd044d31:   and    %edx,%edi
  0x00007f32dd044d33:   and    %eax,%esi
  0x00007f32dd044d35:   or     %edi,%esi
  0x00007f32dd044d37:   add    %esi,%ecx
  0x00007f32dd044d39:   rol    $0xe,%ecx
  0x00007f32dd044d3c:   add    %edx,%ecx
  0x00007f32dd044d3e:   add    $0xe7d3fbc8,%ebx
  0x00007f32dd044d44:   mov    %eax,%esi
  0x00007f32dd044d46:   mov    %eax,%edi
  0x00007f32dd044d48:   add    0x10(%r15),%ebx
  0x00007f32dd044d4c:   not    %esi
  0x00007f32dd044d4e:   and    %ecx,%edi
  0x00007f32dd044d50:   and    %edx,%esi
  0x00007f32dd044d52:   or     %edi,%esi
  0x00007f32dd044d54:   add    %esi,%ebx
  0x00007f32dd044d56:   rol    $0x14,%ebx
  0x00007f32dd044d59:   add    %ecx,%ebx
  0x00007f32dd044d5b:   add    $0x21e1cde6,%eax
  0x00007f32dd044d60:   mov    %edx,%esi
  0x00007f32dd044d62:   mov    %edx,%edi
  0x00007f32dd044d64:   add    0x24(%r15),%eax
  0x00007f32dd044d68:   not    %esi
  0x00007f32dd044d6a:   and    %ebx,%edi
  0x00007f32dd044d6c:   and    %ecx,%esi
  0x00007f32dd044d6e:   or     %edi,%esi
  0x00007f32dd044d70:   add    %esi,%eax
  0x00007f32dd044d72:   rol    $0x5,%eax
  0x00007f32dd044d75:   add    %ebx,%eax
  0x00007f32dd044d77:   add    $0xc33707d6,%edx
  0x00007f32dd044d7d:   mov    %ecx,%esi
  0x00007f32dd044d7f:   mov    %ecx,%edi
  0x00007f32dd044d81:   add    0x38(%r15),%edx
  0x00007f32dd044d85:   not    %esi
  0x00007f32dd044d87:   and    %eax,%edi
  0x00007f32dd044d89:   and    %ebx,%esi
  0x00007f32dd044d8b:   or     %edi,%esi
  0x00007f32dd044d8d:   add    %esi,%edx
  0x00007f32dd044d8f:   rol    $0x9,%edx
  0x00007f32dd044d92:   add    %eax,%edx
  0x00007f32dd044d94:   add    $0xf4d50d87,%ecx
  0x00007f32dd044d9a:   mov    %ebx,%esi
  0x00007f32dd044d9c:   mov    %ebx,%edi
  0x00007f32dd044d9e:   add    0xc(%r15),%ecx
  0x00007f32dd044da2:   not    %esi
  0x00007f32dd044da4:   and    %edx,%edi
  0x00007f32dd044da6:   and    %eax,%esi
  0x00007f32dd044da8:   or     %edi,%esi
  0x00007f32dd044daa:   add    %esi,%ecx
  0x00007f32dd044dac:   rol    $0xe,%ecx
  0x00007f32dd044daf:   add    %edx,%ecx
  0x00007f32dd044db1:   add    $0x455a14ed,%ebx
  0x00007f32dd044db7:   mov    %eax,%esi
  0x00007f32dd044db9:   mov    %eax,%edi
  0x00007f32dd044dbb:   add    0x20(%r15),%ebx
  0x00007f32dd044dbf:   not    %esi
  0x00007f32dd044dc1:   and    %ecx,%edi
  0x00007f32dd044dc3:   and    %edx,%esi
  0x00007f32dd044dc5:   or     %edi,%esi
  0x00007f32dd044dc7:   add    %esi,%ebx
  0x00007f32dd044dc9:   rol    $0x14,%ebx
  0x00007f32dd044dcc:   add    %ecx,%ebx
  0x00007f32dd044dce:   add    $0xa9e3e905,%eax
  0x00007f32dd044dd3:   mov    %edx,%esi
  0x00007f32dd044dd5:   mov    %edx,%edi
  0x00007f32dd044dd7:   add    0x34(%r15),%eax
  0x00007f32dd044ddb:   not    %esi
  0x00007f32dd044ddd:   and    %ebx,%edi
  0x00007f32dd044ddf:   and    %ecx,%esi
  0x00007f32dd044de1:   or     %edi,%esi
  0x00007f32dd044de3:   add    %esi,%eax
  0x00007f32dd044de5:   rol    $0x5,%eax
  0x00007f32dd044de8:   add    %ebx,%eax
  0x00007f32dd044dea:   add    $0xfcefa3f8,%edx
  0x00007f32dd044df0:   mov    %ecx,%esi
  0x00007f32dd044df2:   mov    %ecx,%edi
  0x00007f32dd044df4:   add    0x8(%r15),%edx
  0x00007f32dd044df8:   not    %esi
  0x00007f32dd044dfa:   and    %eax,%edi
  0x00007f32dd044dfc:   and    %ebx,%esi
  0x00007f32dd044dfe:   or     %edi,%esi
  0x00007f32dd044e00:   add    %esi,%edx
  0x00007f32dd044e02:   rol    $0x9,%edx
  0x00007f32dd044e05:   add    %eax,%edx
  0x00007f32dd044e07:   add    $0x676f02d9,%ecx
  0x00007f32dd044e0d:   mov    %ebx,%esi
  0x00007f32dd044e0f:   mov    %ebx,%edi
  0x00007f32dd044e11:   add    0x1c(%r15),%ecx
  0x00007f32dd044e15:   not    %esi
  0x00007f32dd044e17:   and    %edx,%edi
  0x00007f32dd044e19:   and    %eax,%esi
  0x00007f32dd044e1b:   or     %edi,%esi
  0x00007f32dd044e1d:   add    %esi,%ecx
  0x00007f32dd044e1f:   rol    $0xe,%ecx
  0x00007f32dd044e22:   add    %edx,%ecx
  0x00007f32dd044e24:   add    $0x8d2a4c8a,%ebx
  0x00007f32dd044e2a:   mov    %eax,%esi
  0x00007f32dd044e2c:   mov    %eax,%edi
  0x00007f32dd044e2e:   add    0x30(%r15),%ebx
  0x00007f32dd044e32:   not    %esi
  0x00007f32dd044e34:   and    %ecx,%edi
  0x00007f32dd044e36:   and    %edx,%esi
  0x00007f32dd044e38:   or     %edi,%esi
  0x00007f32dd044e3a:   add    %esi,%ebx
  0x00007f32dd044e3c:   rol    $0x14,%ebx
  0x00007f32dd044e3f:   add    %ecx,%ebx
  0x00007f32dd044e41:   add    $0xfffa3942,%eax
  0x00007f32dd044e46:   mov    %ecx,%esi
  0x00007f32dd044e48:   add    0x14(%r15),%eax
  0x00007f32dd044e4c:   xor    %edx,%esi
  0x00007f32dd044e4e:   xor    %ebx,%esi
  0x00007f32dd044e50:   add    %esi,%eax
  0x00007f32dd044e52:   rol    $0x4,%eax
  0x00007f32dd044e55:   add    %ebx,%eax
  0x00007f32dd044e57:   add    $0x8771f681,%edx
  0x00007f32dd044e5d:   mov    %ebx,%esi
  0x00007f32dd044e5f:   add    0x20(%r15),%edx
  0x00007f32dd044e63:   xor    %ecx,%esi
  0x00007f32dd044e65:   xor    %eax,%esi
  0x00007f32dd044e67:   add    %esi,%edx
  0x00007f32dd044e69:   rol    $0xb,%edx
  0x00007f32dd044e6c:   add    %eax,%edx
  0x00007f32dd044e6e:   add    $0x6d9d6122,%ecx
  0x00007f32dd044e74:   mov    %eax,%esi
  0x00007f32dd044e76:   add    0x2c(%r15),%ecx
  0x00007f32dd044e7a:   xor    %ebx,%esi
  0x00007f32dd044e7c:   xor    %edx,%esi
  0x00007f32dd044e7e:   add    %esi,%ecx
  0x00007f32dd044e80:   rol    $0x10,%ecx
  0x00007f32dd044e83:   add    %edx,%ecx
  0x00007f32dd044e85:   add    $0xfde5380c,%ebx
  0x00007f32dd044e8b:   mov    %edx,%esi
  0x00007f32dd044e8d:   add    0x38(%r15),%ebx
  0x00007f32dd044e91:   xor    %eax,%esi
  0x00007f32dd044e93:   xor    %ecx,%esi
  0x00007f32dd044e95:   add    %esi,%ebx
  0x00007f32dd044e97:   rol    $0x17,%ebx
  0x00007f32dd044e9a:   add    %ecx,%ebx
  0x00007f32dd044e9c:   add    $0xa4beea44,%eax
  0x00007f32dd044ea1:   mov    %ecx,%esi
  0x00007f32dd044ea3:   add    0x4(%r15),%eax
  0x00007f32dd044ea7:   xor    %edx,%esi
  0x00007f32dd044ea9:   xor    %ebx,%esi
  0x00007f32dd044eab:   add    %esi,%eax
  0x00007f32dd044ead:   rol    $0x4,%eax
  0x00007f32dd044eb0:   add    %ebx,%eax
  0x00007f32dd044eb2:   add    $0x4bdecfa9,%edx
  0x00007f32dd044eb8:   mov    %ebx,%esi
  0x00007f32dd044eba:   add    0x10(%r15),%edx
  0x00007f32dd044ebe:   xor    %ecx,%esi
  0x00007f32dd044ec0:   xor    %eax,%esi
  0x00007f32dd044ec2:   add    %esi,%edx
  0x00007f32dd044ec4:   rol    $0xb,%edx
  0x00007f32dd044ec7:   add    %eax,%edx
  0x00007f32dd044ec9:   add    $0xf6bb4b60,%ecx
  0x00007f32dd044ecf:   mov    %eax,%esi
  0x00007f32dd044ed1:   add    0x1c(%r15),%ecx
  0x00007f32dd044ed5:   xor    %ebx,%esi
  0x00007f32dd044ed7:   xor    %edx,%esi
  0x00007f32dd044ed9:   add    %esi,%ecx
  0x00007f32dd044edb:   rol    $0x10,%ecx
  0x00007f32dd044ede:   add    %edx,%ecx
  0x00007f32dd044ee0:   add    $0xbebfbc70,%ebx
  0x00007f32dd044ee6:   mov    %edx,%esi
  0x00007f32dd044ee8:   add    0x28(%r15),%ebx
  0x00007f32dd044eec:   xor    %eax,%esi
  0x00007f32dd044eee:   xor    %ecx,%esi
  0x00007f32dd044ef0:   add    %esi,%ebx
  0x00007f32dd044ef2:   rol    $0x17,%ebx
  0x00007f32dd044ef5:   add    %ecx,%ebx
  0x00007f32dd044ef7:   add    $0x289b7ec6,%eax
  0x00007f32dd044efc:   mov    %ecx,%esi
  0x00007f32dd044efe:   add    0x34(%r15),%eax
  0x00007f32dd044f02:   xor    %edx,%esi
  0x00007f32dd044f04:   xor    %ebx,%esi
  0x00007f32dd044f06:   add    %esi,%eax
  0x00007f32dd044f08:   rol    $0x4,%eax
  0x00007f32dd044f0b:   add    %ebx,%eax
  0x00007f32dd044f0d:   add    $0xeaa127fa,%edx
  0x00007f32dd044f13:   mov    %ebx,%esi
  0x00007f32dd044f15:   add    (%r15),%edx
  0x00007f32dd044f18:   xor    %ecx,%esi
  0x00007f32dd044f1a:   xor    %eax,%esi
  0x00007f32dd044f1c:   add    %esi,%edx
  0x00007f32dd044f1e:   rol    $0xb,%edx
  0x00007f32dd044f21:   add    %eax,%edx
  0x00007f32dd044f23:   add    $0xd4ef3085,%ecx
  0x00007f32dd044f29:   mov    %eax,%esi
  0x00007f32dd044f2b:   add    0xc(%r15),%ecx
  0x00007f32dd044f2f:   xor    %ebx,%esi
  0x00007f32dd044f31:   xor    %edx,%esi
  0x00007f32dd044f33:   add    %esi,%ecx
  0x00007f32dd044f35:   rol    $0x10,%ecx
  0x00007f32dd044f38:   add    %edx,%ecx
  0x00007f32dd044f3a:   add    $0x4881d05,%ebx
  0x00007f32dd044f40:   mov    %edx,%esi
  0x00007f32dd044f42:   add    0x18(%r15),%ebx
  0x00007f32dd044f46:   xor    %eax,%esi
  0x00007f32dd044f48:   xor    %ecx,%esi
  0x00007f32dd044f4a:   add    %esi,%ebx
  0x00007f32dd044f4c:   rol    $0x17,%ebx
  0x00007f32dd044f4f:   add    %ecx,%ebx
  0x00007f32dd044f51:   add    $0xd9d4d039,%eax
  0x00007f32dd044f56:   mov    %ecx,%esi
  0x00007f32dd044f58:   add    0x24(%r15),%eax
  0x00007f32dd044f5c:   xor    %edx,%esi
  0x00007f32dd044f5e:   xor    %ebx,%esi
  0x00007f32dd044f60:   add    %esi,%eax
  0x00007f32dd044f62:   rol    $0x4,%eax
  0x00007f32dd044f65:   add    %ebx,%eax
  0x00007f32dd044f67:   add    $0xe6db99e5,%edx
  0x00007f32dd044f6d:   mov    %ebx,%esi
  0x00007f32dd044f6f:   add    0x30(%r15),%edx
  0x00007f32dd044f73:   xor    %ecx,%esi
  0x00007f32dd044f75:   xor    %eax,%esi
  0x00007f32dd044f77:   add    %esi,%edx
  0x00007f32dd044f79:   rol    $0xb,%edx
  0x00007f32dd044f7c:   add    %eax,%edx
  0x00007f32dd044f7e:   add    $0x1fa27cf8,%ecx
  0x00007f32dd044f84:   mov    %eax,%esi
  0x00007f32dd044f86:   add    0x3c(%r15),%ecx
  0x00007f32dd044f8a:   xor    %ebx,%esi
  0x00007f32dd044f8c:   xor    %edx,%esi
  0x00007f32dd044f8e:   add    %esi,%ecx
  0x00007f32dd044f90:   rol    $0x10,%ecx
  0x00007f32dd044f93:   add    %edx,%ecx
  0x00007f32dd044f95:   add    $0xc4ac5665,%ebx
  0x00007f32dd044f9b:   mov    %edx,%esi
  0x00007f32dd044f9d:   add    0x8(%r15),%ebx
  0x00007f32dd044fa1:   xor    %eax,%esi
  0x00007f32dd044fa3:   xor    %ecx,%esi
  0x00007f32dd044fa5:   add    %esi,%ebx
  0x00007f32dd044fa7:   rol    $0x17,%ebx
  0x00007f32dd044faa:   add    %ecx,%ebx
  0x00007f32dd044fac:   add    $0xf4292244,%eax
  0x00007f32dd044fb1:   mov    %edx,%esi
  0x00007f32dd044fb3:   not    %esi
  0x00007f32dd044fb5:   add    (%r15),%eax
  0x00007f32dd044fb8:   or     %ebx,%esi
  0x00007f32dd044fba:   xor    %ecx,%esi
  0x00007f32dd044fbc:   add    %esi,%eax
  0x00007f32dd044fbe:   rol    $0x6,%eax
  0x00007f32dd044fc1:   add    %ebx,%eax
  0x00007f32dd044fc3:   add    $0x432aff97,%edx
  0x00007f32dd044fc9:   mov    %ecx,%esi
  0x00007f32dd044fcb:   not    %esi
  0x00007f32dd044fcd:   add    0x1c(%r15),%edx
  0x00007f32dd044fd1:   or     %eax,%esi
  0x00007f32dd044fd3:   xor    %ebx,%esi
  0x00007f32dd044fd5:   add    %esi,%edx
  0x00007f32dd044fd7:   rol    $0xa,%edx
  0x00007f32dd044fda:   add    %eax,%edx
  0x00007f32dd044fdc:   add    $0xab9423a7,%ecx
  0x00007f32dd044fe2:   mov    %ebx,%esi
  0x00007f32dd044fe4:   not    %esi
  0x00007f32dd044fe6:   add    0x38(%r15),%ecx
  0x00007f32dd044fea:   or     %edx,%esi
  0x00007f32dd044fec:   xor    %eax,%esi
  0x00007f32dd044fee:   add    %esi,%ecx
  0x00007f32dd044ff0:   rol    $0xf,%ecx
  0x00007f32dd044ff3:   add    %edx,%ecx
  0x00007f32dd044ff5:   add    $0xfc93a039,%ebx
  0x00007f32dd044ffb:   mov    %eax,%esi
  0x00007f32dd044ffd:   not    %esi
  0x00007f32dd044fff:   add    0x14(%r15),%ebx
  0x00007f32dd045003:   or     %ecx,%esi
  0x00007f32dd045005:   xor    %edx,%esi
  0x00007f32dd045007:   add    %esi,%ebx
  0x00007f32dd045009:   rol    $0x15,%ebx
  0x00007f32dd04500c:   add    %ecx,%ebx
  0x00007f32dd04500e:   add    $0x655b59c3,%eax
  0x00007f32dd045013:   mov    %edx,%esi
  0x00007f32dd045015:   not    %esi
  0x00007f32dd045017:   add    0x30(%r15),%eax
  0x00007f32dd04501b:   or     %ebx,%esi
  0x00007f32dd04501d:   xor    %ecx,%esi
  0x00007f32dd04501f:   add    %esi,%eax
  0x00007f32dd045021:   rol    $0x6,%eax
  0x00007f32dd045024:   add    %ebx,%eax
  0x00007f32dd045026:   add    $0x8f0ccc92,%edx
  0x00007f32dd04502c:   mov    %ecx,%esi
  0x00007f32dd04502e:   not    %esi
  0x00007f32dd045030:   add    0xc(%r15),%edx
  0x00007f32dd045034:   or     %eax,%esi
  0x00007f32dd045036:   xor    %ebx,%esi
  0x00007f32dd045038:   add    %esi,%edx
  0x00007f32dd04503a:   rol    $0xa,%edx
  0x00007f32dd04503d:   add    %eax,%edx
  0x00007f32dd04503f:   add    $0xffeff47d,%ecx
  0x00007f32dd045045:   mov    %ebx,%esi
  0x00007f32dd045047:   not    %esi
  0x00007f32dd045049:   add    0x28(%r15),%ecx
  0x00007f32dd04504d:   or     %edx,%esi
  0x00007f32dd04504f:   xor    %eax,%esi
  0x00007f32dd045051:   add    %esi,%ecx
  0x00007f32dd045053:   rol    $0xf,%ecx
  0x00007f32dd045056:   add    %edx,%ecx
  0x00007f32dd045058:   add    $0x85845dd1,%ebx
  0x00007f32dd04505e:   mov    %eax,%esi
  0x00007f32dd045060:   not    %esi
  0x00007f32dd045062:   add    0x4(%r15),%ebx
  0x00007f32dd045066:   or     %ecx,%esi
  0x00007f32dd045068:   xor    %edx,%esi
  0x00007f32dd04506a:   add    %esi,%ebx
  0x00007f32dd04506c:   rol    $0x15,%ebx
  0x00007f32dd04506f:   add    %ecx,%ebx
  0x00007f32dd045071:   add    $0x6fa87e4f,%eax
  0x00007f32dd045076:   mov    %edx,%esi
  0x00007f32dd045078:   not    %esi
  0x00007f32dd04507a:   add    0x20(%r15),%eax
  0x00007f32dd04507e:   or     %ebx,%esi
  0x00007f32dd045080:   xor    %ecx,%esi
  0x00007f32dd045082:   add    %esi,%eax
  0x00007f32dd045084:   rol    $0x6,%eax
  0x00007f32dd045087:   add    %ebx,%eax
  0x00007f32dd045089:   add    $0xfe2ce6e0,%edx
  0x00007f32dd04508f:   mov    %ecx,%esi
  0x00007f32dd045091:   not    %esi
  0x00007f32dd045093:   add    0x3c(%r15),%edx
  0x00007f32dd045097:   or     %eax,%esi
  0x00007f32dd045099:   xor    %ebx,%esi
  0x00007f32dd04509b:   add    %esi,%edx
  0x00007f32dd04509d:   rol    $0xa,%edx
  0x00007f32dd0450a0:   add    %eax,%edx
  0x00007f32dd0450a2:   add    $0xa3014314,%ecx
  0x00007f32dd0450a8:   mov    %ebx,%esi
  0x00007f32dd0450aa:   not    %esi
  0x00007f32dd0450ac:   add    0x18(%r15),%ecx
  0x00007f32dd0450b0:   or     %edx,%esi
  0x00007f32dd0450b2:   xor    %eax,%esi
  0x00007f32dd0450b4:   add    %esi,%ecx
  0x00007f32dd0450b6:   rol    $0xf,%ecx
  0x00007f32dd0450b9:   add    %edx,%ecx
  0x00007f32dd0450bb:   add    $0x4e0811a1,%ebx
  0x00007f32dd0450c1:   mov    %eax,%esi
  0x00007f32dd0450c3:   not    %esi
  0x00007f32dd0450c5:   add    0x34(%r15),%ebx
  0x00007f32dd0450c9:   or     %ecx,%esi
  0x00007f32dd0450cb:   xor    %edx,%esi
  0x00007f32dd0450cd:   add    %esi,%ebx
  0x00007f32dd0450cf:   rol    $0x15,%ebx
  0x00007f32dd0450d2:   add    %ecx,%ebx
  0x00007f32dd0450d4:   add    $0xf7537e82,%eax
  0x00007f32dd0450d9:   mov    %edx,%esi
  0x00007f32dd0450db:   not    %esi
  0x00007f32dd0450dd:   add    0x10(%r15),%eax
  0x00007f32dd0450e1:   or     %ebx,%esi
  0x00007f32dd0450e3:   xor    %ecx,%esi
  0x00007f32dd0450e5:   add    %esi,%eax
  0x00007f32dd0450e7:   rol    $0x6,%eax
  0x00007f32dd0450ea:   add    %ebx,%eax
  0x00007f32dd0450ec:   add    $0xbd3af235,%edx
  0x00007f32dd0450f2:   mov    %ecx,%esi
  0x00007f32dd0450f4:   not    %esi
  0x00007f32dd0450f6:   add    0x2c(%r15),%edx
  0x00007f32dd0450fa:   or     %eax,%esi
  0x00007f32dd0450fc:   xor    %ebx,%esi
  0x00007f32dd0450fe:   add    %esi,%edx
  0x00007f32dd045100:   rol    $0xa,%edx
  0x00007f32dd045103:   add    %eax,%edx
  0x00007f32dd045105:   add    $0x2ad7d2bb,%ecx
  0x00007f32dd04510b:   mov    %ebx,%esi
  0x00007f32dd04510d:   not    %esi
  0x00007f32dd04510f:   add    0x8(%r15),%ecx
  0x00007f32dd045113:   or     %edx,%esi
  0x00007f32dd045115:   xor    %eax,%esi
  0x00007f32dd045117:   add    %esi,%ecx
  0x00007f32dd045119:   rol    $0xf,%ecx
  0x00007f32dd04511c:   add    %edx,%ecx
  0x00007f32dd04511e:   add    $0xeb86d391,%ebx
  0x00007f32dd045124:   mov    %eax,%esi
  0x00007f32dd045126:   not    %esi
  0x00007f32dd045128:   add    0x24(%r15),%ebx
  0x00007f32dd04512c:   or     %ecx,%esi
  0x00007f32dd04512e:   xor    %edx,%esi
  0x00007f32dd045130:   add    %esi,%ebx
  0x00007f32dd045132:   rol    $0x15,%ebx
  0x00007f32dd045135:   add    %ecx,%ebx
  0x00007f32dd045137:   mov    (%rsp),%rdi
  0x00007f32dd04513b:   add    %eax,(%rdi)
  0x00007f32dd04513d:   add    %ebx,0x4(%rdi)
  0x00007f32dd045140:   add    %ecx,0x8(%rdi)
  0x00007f32dd045143:   add    %edx,0xc(%rdi)
  0x00007f32dd045146:   add    $0x40,%r15
  0x00007f32dd04514a:   addl   $0x40,0x8(%rsp)
  0x00007f32dd04514f:   mov    0x8(%rsp),%esi
  0x00007f32dd045153:   cmp    0xc(%rsp),%esi
  0x00007f32dd045157:   jbe    Stub::md5_implCompressMB+28 0x00007f32dd044adc
  0x00007f32dd04515d:   mov    %rsi,%rax
  0x00007f32dd045160:   add    $0x10,%rsp
  0x00007f32dd045164:   pop    %r15
  0x00007f32dd045166:   pop    %rsi
  0x00007f32dd045167:   pop    %rdi
  0x00007f32dd045168:   pop    %rbx
  0x00007f32dd045169:   leaveq 
  0x00007f32dd04516a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::pshuffle_byte_flip_mask [0x00007f32dd0451c0, 0x00007f32dd045220] (96 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0451c0:   add    (%rdx),%eax
  0x00007f32dd0451c2:   add    %eax,(%rax)
  0x00007f32dd0451c4:   (bad)  
  0x00007f32dd0451c5:   (bad)  
  0x00007f32dd0451c6:   add    $0x90a0b04,%eax
  0x00007f32dd0451cb:   or     %cl,(%rdi)
  0x00007f32dd0451cd:   (bad)  
  0x00007f32dd0451ce:   or     $0x102030c,%eax
  0x00007f32dd0451d3:   add    %al,(%rdi)
  0x00007f32dd0451d5:   (bad)  
  0x00007f32dd0451d6:   add    $0x90a0b04,%eax
  0x00007f32dd0451db:   or     %cl,(%rdi)
  0x00007f32dd0451dd:   (bad)  
  0x00007f32dd0451de:   or     $0x201000c,%eax
  0x00007f32dd0451e3:   add    (%rax),%ecx
  0x00007f32dd0451e5:   or     %ecx,(%rdx)
  0x00007f32dd0451e7:   or     %edi,%edi
  0x00007f32dd0451e9:   (bad)  
  0x00007f32dd0451ea:   (bad)  
  0x00007f32dd0451eb:   (bad)  
  0x00007f32dd0451ec:   (bad)  
  0x00007f32dd0451ed:   (bad)  
  0x00007f32dd0451ee:   (bad)  
  0x00007f32dd0451ef:   incl   (%rax)
  0x00007f32dd0451f1:   add    %eax,(%rdx)
  0x00007f32dd0451f3:   add    (%rax),%ecx
  0x00007f32dd0451f5:   or     %ecx,(%rdx)
  0x00007f32dd0451f7:   or     %edi,%edi
  0x00007f32dd0451f9:   (bad)  
  0x00007f32dd0451fa:   (bad)  
  0x00007f32dd0451fb:   (bad)  
  0x00007f32dd0451fc:   (bad)  
  0x00007f32dd0451fd:   (bad)  
  0x00007f32dd0451fe:   (bad)  
  0x00007f32dd0451ff:   (bad)  
  0x00007f32dd045200:   (bad)  
  0x00007f32dd045201:   (bad)  
  0x00007f32dd045202:   (bad)  
  0x00007f32dd045203:   (bad)  
  0x00007f32dd045204:   (bad)  
  0x00007f32dd045205:   (bad)  
  0x00007f32dd045206:   (bad)  
  0x00007f32dd045207:   incl   (%rax)
  0x00007f32dd045209:   add    %eax,(%rdx)
  0x00007f32dd04520b:   add    (%rax),%ecx
  0x00007f32dd04520d:   or     %ecx,(%rdx)
  0x00007f32dd04520f:   or     %edi,%edi
  0x00007f32dd045211:   (bad)  
  0x00007f32dd045212:   (bad)  
  0x00007f32dd045213:   (bad)  
  0x00007f32dd045214:   (bad)  
  0x00007f32dd045215:   (bad)  
  0x00007f32dd045216:   (bad)  
  0x00007f32dd045217:   incl   (%rax)
  0x00007f32dd045219:   add    %eax,(%rdx)
  0x00007f32dd04521b:   add    (%rax),%ecx
  0x00007f32dd04521d:   or     %ecx,(%rdx)
  0x00007f32dd04521f:   .byte 0xb
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha256_implCompress [0x00007f32dd045220, 0x00007f32dd04634f] (4399 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd045220:   push   %rbp
  0x00007f32dd045221:   mov    %rsp,%rbp
  0x00007f32dd045224:   sub    $0x20,%rsp
  0x00007f32dd045228:   push   %rcx
  0x00007f32dd045229:   push   %rdx
  0x00007f32dd04522a:   push   %rbx
  0x00007f32dd04522b:   push   %rbp
  0x00007f32dd04522c:   push   %r12
  0x00007f32dd04522e:   push   %r13
  0x00007f32dd045230:   push   %r14
  0x00007f32dd045232:   push   %r15
  0x00007f32dd045234:   mov    %rsp,%rax
  0x00007f32dd045237:   sub    $0x220,%rsp
  0x00007f32dd04523e:   and    $0xffffffffffffffe0,%rsp
  0x00007f32dd045242:   mov    %rax,0x218(%rsp)
  0x00007f32dd04524a:   mov    %rcx,%r9
  0x00007f32dd04524d:   mov    %rdx,%r8
  0x00007f32dd045250:   mov    %rsi,%rdx
  0x00007f32dd045253:   mov    %rdi,%rcx
  0x00007f32dd045256:   lea    (%rcx),%rcx
  0x00007f32dd045259:   mov    %rdx,%rdx
  0x00007f32dd04525c:   xor    %r8,%r8
  0x00007f32dd04525f:   add    $0x40,%r8
  0x00007f32dd045263:   lea    -0x40(%rcx,%r8,1),%r8
  0x00007f32dd045268:   mov    %r8,0x200(%rsp)
  0x00007f32dd045270:   cmp    %r8,%rcx
  0x00007f32dd045273:   je     Stub::sha256_implCompress+4309 0x00007f32dd0462f5
  0x00007f32dd045279:   mov    (%rdx),%eax
  0x00007f32dd04527b:   mov    0x4(%rdx),%ebx
  0x00007f32dd04527e:   mov    0x8(%rdx),%edi
  0x00007f32dd045281:   mov    0xc(%rdx),%esi
  0x00007f32dd045284:   mov    0x10(%rdx),%r8d
  0x00007f32dd045288:   mov    0x14(%rdx),%r9d
  0x00007f32dd04528c:   mov    0x1c(%rdx),%r11d
  0x00007f32dd045290:   vmovdqu -0xd8(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007f32dd045298:   vmovdqu -0xc0(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007f32dd0451e0
  0x00007f32dd0452a0:   vmovdqu -0xa8(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007f32dd045200
  0x00007f32dd0452a8:   mov    0x18(%rdx),%r10d
  0x00007f32dd0452ac:   mov    %rdx,0x210(%rsp)
  0x00007f32dd0452b4:   movabs $0x7f32e6eb54c0,%rbp
  0x00007f32dd0452be:   vmovdqu (%rcx),%ymm0
  0x00007f32dd0452c2:   vmovdqu 0x20(%rcx),%ymm1
  0x00007f32dd0452c7:   vmovdqu 0x40(%rcx),%ymm2
  0x00007f32dd0452cc:   vmovdqu 0x60(%rcx),%ymm3
  0x00007f32dd0452d1:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007f32dd0452d6:   vpshufb %ymm13,%ymm1,%ymm1
  0x00007f32dd0452db:   vpshufb %ymm13,%ymm2,%ymm2
  0x00007f32dd0452e0:   vpshufb %ymm13,%ymm3,%ymm3
  0x00007f32dd0452e5:   vperm2i128 $0x20,%ymm2,%ymm0,%ymm4
  0x00007f32dd0452eb:   vperm2i128 $0x31,%ymm2,%ymm0,%ymm5
  0x00007f32dd0452f1:   vperm2i128 $0x20,%ymm3,%ymm1,%ymm6
  0x00007f32dd0452f7:   vperm2i128 $0x31,%ymm3,%ymm1,%ymm7
  0x00007f32dd0452fd:   add    $0x40,%rcx
  0x00007f32dd045301:   mov    %rcx,0x208(%rsp)
  0x00007f32dd045309:   xor    %rdx,%rdx
  0x00007f32dd04530c:   nopl   0x0(%rax)
  0x00007f32dd045310:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007f32dd045316:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007f32dd04531b:   mov    %eax,%ecx
  0x00007f32dd04531d:   rorx   $0x19,%r8d,%r13d
  0x00007f32dd045323:   rorx   $0xb,%r8d,%r14d
  0x00007f32dd045329:   add    (%rsp,%rdx,1),%r11d
  0x00007f32dd04532d:   or     %edi,%ecx
  0x00007f32dd04532f:   mov    %r9d,%r15d
  0x00007f32dd045332:   rorx   $0xd,%eax,%r12d
  0x00007f32dd045338:   xor    %r14d,%r13d
  0x00007f32dd04533b:   xor    %r10d,%r15d
  0x00007f32dd04533e:   rorx   $0x6,%r8d,%r14d
  0x00007f32dd045344:   and    %r8d,%r15d
  0x00007f32dd045347:   xor    %r14d,%r13d
  0x00007f32dd04534a:   rorx   $0x16,%eax,%r14d
  0x00007f32dd045350:   add    %r11d,%esi
  0x00007f32dd045353:   and    %ebx,%ecx
  0x00007f32dd045355:   xor    %r12d,%r14d
  0x00007f32dd045358:   rorx   $0x2,%eax,%r12d
  0x00007f32dd04535e:   xor    %r10d,%r15d
  0x00007f32dd045361:   xor    %r12d,%r14d
  0x00007f32dd045364:   mov    %eax,%r12d
  0x00007f32dd045367:   and    %edi,%r12d
  0x00007f32dd04536a:   add    %r13d,%r15d
  0x00007f32dd04536d:   or     %r12d,%ecx
  0x00007f32dd045370:   add    %r14d,%r11d
  0x00007f32dd045373:   add    %r15d,%esi
  0x00007f32dd045376:   add    %r15d,%r11d
  0x00007f32dd045379:   add    %ecx,%r11d
  0x00007f32dd04537c:   vpalignr $0x4,%ymm6,%ymm7,%ymm0
  0x00007f32dd045382:   vpaddd %ymm4,%ymm0,%ymm0
  0x00007f32dd045386:   vpalignr $0x4,%ymm4,%ymm5,%ymm1
  0x00007f32dd04538c:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f32dd045391:   vpslld $0x19,%ymm1,%ymm3
  0x00007f32dd045396:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd04539a:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f32dd04539f:   mov    %r11d,%ecx
  0x00007f32dd0453a2:   rorx   $0x19,%esi,%r13d
  0x00007f32dd0453a8:   rorx   $0xb,%esi,%r14d
  0x00007f32dd0453ae:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007f32dd0453b3:   or     %ebx,%ecx
  0x00007f32dd0453b5:   mov    %r8d,%r15d
  0x00007f32dd0453b8:   rorx   $0xd,%r11d,%r12d
  0x00007f32dd0453be:   xor    %r14d,%r13d
  0x00007f32dd0453c1:   xor    %r9d,%r15d
  0x00007f32dd0453c4:   rorx   $0x6,%esi,%r14d
  0x00007f32dd0453ca:   and    %esi,%r15d
  0x00007f32dd0453cd:   xor    %r14d,%r13d
  0x00007f32dd0453d0:   rorx   $0x16,%r11d,%r14d
  0x00007f32dd0453d6:   add    %r10d,%edi
  0x00007f32dd0453d9:   and    %eax,%ecx
  0x00007f32dd0453db:   xor    %r12d,%r14d
  0x00007f32dd0453de:   rorx   $0x2,%r11d,%r12d
  0x00007f32dd0453e4:   xor    %r9d,%r15d
  0x00007f32dd0453e7:   xor    %r12d,%r14d
  0x00007f32dd0453ea:   mov    %r11d,%r12d
  0x00007f32dd0453ed:   and    %ebx,%r12d
  0x00007f32dd0453f0:   add    %r13d,%r15d
  0x00007f32dd0453f3:   or     %r12d,%ecx
  0x00007f32dd0453f6:   add    %r14d,%r10d
  0x00007f32dd0453f9:   add    %r15d,%edi
  0x00007f32dd0453fc:   add    %r15d,%r10d
  0x00007f32dd0453ff:   add    %ecx,%r10d
  0x00007f32dd045402:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f32dd045407:   vpslld $0xe,%ymm1,%ymm1
  0x00007f32dd04540c:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f32dd045410:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f32dd045414:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f32dd045419:   vpshufd $0xfa,%ymm7,%ymm2
  0x00007f32dd04541e:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f32dd045422:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f32dd045427:   mov    %r10d,%ecx
  0x00007f32dd04542a:   rorx   $0x19,%edi,%r13d
  0x00007f32dd045430:   rorx   $0xb,%edi,%r14d
  0x00007f32dd045436:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007f32dd04543b:   or     %eax,%ecx
  0x00007f32dd04543d:   mov    %esi,%r15d
  0x00007f32dd045440:   rorx   $0xd,%r10d,%r12d
  0x00007f32dd045446:   xor    %r14d,%r13d
  0x00007f32dd045449:   xor    %r8d,%r15d
  0x00007f32dd04544c:   rorx   $0x6,%edi,%r14d
  0x00007f32dd045452:   and    %edi,%r15d
  0x00007f32dd045455:   xor    %r14d,%r13d
  0x00007f32dd045458:   rorx   $0x16,%r10d,%r14d
  0x00007f32dd04545e:   add    %r9d,%ebx
  0x00007f32dd045461:   and    %r11d,%ecx
  0x00007f32dd045464:   xor    %r12d,%r14d
  0x00007f32dd045467:   rorx   $0x2,%r10d,%r12d
  0x00007f32dd04546d:   xor    %r8d,%r15d
  0x00007f32dd045470:   xor    %r12d,%r14d
  0x00007f32dd045473:   mov    %r10d,%r12d
  0x00007f32dd045476:   and    %eax,%r12d
  0x00007f32dd045479:   add    %r13d,%r15d
  0x00007f32dd04547c:   or     %r12d,%ecx
  0x00007f32dd04547f:   add    %r14d,%r9d
  0x00007f32dd045482:   add    %r15d,%ebx
  0x00007f32dd045485:   add    %r15d,%r9d
  0x00007f32dd045488:   add    %ecx,%r9d
  0x00007f32dd04548b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd045490:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd045495:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd045499:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f32dd04549d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f32dd0454a2:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f32dd0454a7:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f32dd0454ac:   mov    %r9d,%ecx
  0x00007f32dd0454af:   rorx   $0x19,%ebx,%r13d
  0x00007f32dd0454b5:   rorx   $0xb,%ebx,%r14d
  0x00007f32dd0454bb:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007f32dd0454c0:   or     %r11d,%ecx
  0x00007f32dd0454c3:   mov    %edi,%r15d
  0x00007f32dd0454c6:   rorx   $0xd,%r9d,%r12d
  0x00007f32dd0454cc:   xor    %r14d,%r13d
  0x00007f32dd0454cf:   xor    %esi,%r15d
  0x00007f32dd0454d2:   rorx   $0x6,%ebx,%r14d
  0x00007f32dd0454d8:   and    %ebx,%r15d
  0x00007f32dd0454db:   xor    %r14d,%r13d
  0x00007f32dd0454de:   rorx   $0x16,%r9d,%r14d
  0x00007f32dd0454e4:   add    %r8d,%eax
  0x00007f32dd0454e7:   and    %r10d,%ecx
  0x00007f32dd0454ea:   xor    %r12d,%r14d
  0x00007f32dd0454ed:   rorx   $0x2,%r9d,%r12d
  0x00007f32dd0454f3:   xor    %esi,%r15d
  0x00007f32dd0454f6:   xor    %r12d,%r14d
  0x00007f32dd0454f9:   mov    %r9d,%r12d
  0x00007f32dd0454fc:   and    %r11d,%r12d
  0x00007f32dd0454ff:   add    %r13d,%r15d
  0x00007f32dd045502:   or     %r12d,%ecx
  0x00007f32dd045505:   add    %r14d,%r8d
  0x00007f32dd045508:   add    %r15d,%eax
  0x00007f32dd04550b:   add    %r15d,%r8d
  0x00007f32dd04550e:   add    %ecx,%r8d
  0x00007f32dd045511:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f32dd045516:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd04551b:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd045520:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd045524:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f32dd045528:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f32dd04552d:   vpaddd %ymm0,%ymm11,%ymm4
  0x00007f32dd045531:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007f32dd045537:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007f32dd04553d:   mov    %r8d,%ecx
  0x00007f32dd045540:   rorx   $0x19,%eax,%r13d
  0x00007f32dd045546:   rorx   $0xb,%eax,%r14d
  0x00007f32dd04554c:   add    0x20(%rsp,%rdx,1),%esi
  0x00007f32dd045550:   or     %r10d,%ecx
  0x00007f32dd045553:   mov    %ebx,%r15d
  0x00007f32dd045556:   rorx   $0xd,%r8d,%r12d
  0x00007f32dd04555c:   xor    %r14d,%r13d
  0x00007f32dd04555f:   xor    %edi,%r15d
  0x00007f32dd045562:   rorx   $0x6,%eax,%r14d
  0x00007f32dd045568:   and    %eax,%r15d
  0x00007f32dd04556b:   xor    %r14d,%r13d
  0x00007f32dd04556e:   rorx   $0x16,%r8d,%r14d
  0x00007f32dd045574:   add    %esi,%r11d
  0x00007f32dd045577:   and    %r9d,%ecx
  0x00007f32dd04557a:   xor    %r12d,%r14d
  0x00007f32dd04557d:   rorx   $0x2,%r8d,%r12d
  0x00007f32dd045583:   xor    %edi,%r15d
  0x00007f32dd045586:   xor    %r12d,%r14d
  0x00007f32dd045589:   mov    %r8d,%r12d
  0x00007f32dd04558c:   and    %r10d,%r12d
  0x00007f32dd04558f:   add    %r13d,%r15d
  0x00007f32dd045592:   or     %r12d,%ecx
  0x00007f32dd045595:   add    %r14d,%esi
  0x00007f32dd045598:   add    %r15d,%r11d
  0x00007f32dd04559b:   add    %r15d,%esi
  0x00007f32dd04559e:   add    %ecx,%esi
  0x00007f32dd0455a0:   vpalignr $0x4,%ymm7,%ymm4,%ymm0
  0x00007f32dd0455a6:   vpaddd %ymm5,%ymm0,%ymm0
  0x00007f32dd0455aa:   vpalignr $0x4,%ymm5,%ymm6,%ymm1
  0x00007f32dd0455b0:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f32dd0455b5:   vpslld $0x19,%ymm1,%ymm3
  0x00007f32dd0455ba:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd0455be:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f32dd0455c3:   mov    %esi,%ecx
  0x00007f32dd0455c5:   rorx   $0x19,%r11d,%r13d
  0x00007f32dd0455cb:   rorx   $0xb,%r11d,%r14d
  0x00007f32dd0455d1:   add    0x24(%rsp,%rdx,1),%edi
  0x00007f32dd0455d5:   or     %r9d,%ecx
  0x00007f32dd0455d8:   mov    %eax,%r15d
  0x00007f32dd0455db:   rorx   $0xd,%esi,%r12d
  0x00007f32dd0455e1:   xor    %r14d,%r13d
  0x00007f32dd0455e4:   xor    %ebx,%r15d
  0x00007f32dd0455e7:   rorx   $0x6,%r11d,%r14d
  0x00007f32dd0455ed:   and    %r11d,%r15d
  0x00007f32dd0455f0:   xor    %r14d,%r13d
  0x00007f32dd0455f3:   rorx   $0x16,%esi,%r14d
  0x00007f32dd0455f9:   add    %edi,%r10d
  0x00007f32dd0455fc:   and    %r8d,%ecx
  0x00007f32dd0455ff:   xor    %r12d,%r14d
  0x00007f32dd045602:   rorx   $0x2,%esi,%r12d
  0x00007f32dd045608:   xor    %ebx,%r15d
  0x00007f32dd04560b:   xor    %r12d,%r14d
  0x00007f32dd04560e:   mov    %esi,%r12d
  0x00007f32dd045611:   and    %r9d,%r12d
  0x00007f32dd045614:   add    %r13d,%r15d
  0x00007f32dd045617:   or     %r12d,%ecx
  0x00007f32dd04561a:   add    %r14d,%edi
  0x00007f32dd04561d:   add    %r15d,%r10d
  0x00007f32dd045620:   add    %r15d,%edi
  0x00007f32dd045623:   add    %ecx,%edi
  0x00007f32dd045625:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f32dd04562a:   vpslld $0xe,%ymm1,%ymm1
  0x00007f32dd04562f:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f32dd045633:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f32dd045637:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f32dd04563c:   vpshufd $0xfa,%ymm4,%ymm2
  0x00007f32dd045641:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f32dd045645:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f32dd04564a:   mov    %edi,%ecx
  0x00007f32dd04564c:   rorx   $0x19,%r10d,%r13d
  0x00007f32dd045652:   rorx   $0xb,%r10d,%r14d
  0x00007f32dd045658:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007f32dd04565c:   or     %r8d,%ecx
  0x00007f32dd04565f:   mov    %r11d,%r15d
  0x00007f32dd045662:   rorx   $0xd,%edi,%r12d
  0x00007f32dd045668:   xor    %r14d,%r13d
  0x00007f32dd04566b:   xor    %eax,%r15d
  0x00007f32dd04566e:   rorx   $0x6,%r10d,%r14d
  0x00007f32dd045674:   and    %r10d,%r15d
  0x00007f32dd045677:   xor    %r14d,%r13d
  0x00007f32dd04567a:   rorx   $0x16,%edi,%r14d
  0x00007f32dd045680:   add    %ebx,%r9d
  0x00007f32dd045683:   and    %esi,%ecx
  0x00007f32dd045685:   xor    %r12d,%r14d
  0x00007f32dd045688:   rorx   $0x2,%edi,%r12d
  0x00007f32dd04568e:   xor    %eax,%r15d
  0x00007f32dd045691:   xor    %r12d,%r14d
  0x00007f32dd045694:   mov    %edi,%r12d
  0x00007f32dd045697:   and    %r8d,%r12d
  0x00007f32dd04569a:   add    %r13d,%r15d
  0x00007f32dd04569d:   or     %r12d,%ecx
  0x00007f32dd0456a0:   add    %r14d,%ebx
  0x00007f32dd0456a3:   add    %r15d,%r9d
  0x00007f32dd0456a6:   add    %r15d,%ebx
  0x00007f32dd0456a9:   add    %ecx,%ebx
  0x00007f32dd0456ab:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd0456b0:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd0456b5:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd0456b9:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f32dd0456bd:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f32dd0456c2:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f32dd0456c7:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f32dd0456cc:   mov    %ebx,%ecx
  0x00007f32dd0456ce:   rorx   $0x19,%r9d,%r13d
  0x00007f32dd0456d4:   rorx   $0xb,%r9d,%r14d
  0x00007f32dd0456da:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007f32dd0456de:   or     %esi,%ecx
  0x00007f32dd0456e0:   mov    %r10d,%r15d
  0x00007f32dd0456e3:   rorx   $0xd,%ebx,%r12d
  0x00007f32dd0456e9:   xor    %r14d,%r13d
  0x00007f32dd0456ec:   xor    %r11d,%r15d
  0x00007f32dd0456ef:   rorx   $0x6,%r9d,%r14d
  0x00007f32dd0456f5:   and    %r9d,%r15d
  0x00007f32dd0456f8:   xor    %r14d,%r13d
  0x00007f32dd0456fb:   rorx   $0x16,%ebx,%r14d
  0x00007f32dd045701:   add    %eax,%r8d
  0x00007f32dd045704:   and    %edi,%ecx
  0x00007f32dd045706:   xor    %r12d,%r14d
  0x00007f32dd045709:   rorx   $0x2,%ebx,%r12d
  0x00007f32dd04570f:   xor    %r11d,%r15d
  0x00007f32dd045712:   xor    %r12d,%r14d
  0x00007f32dd045715:   mov    %ebx,%r12d
  0x00007f32dd045718:   and    %esi,%r12d
  0x00007f32dd04571b:   add    %r13d,%r15d
  0x00007f32dd04571e:   or     %r12d,%ecx
  0x00007f32dd045721:   add    %r14d,%eax
  0x00007f32dd045724:   add    %r15d,%r8d
  0x00007f32dd045727:   add    %r15d,%eax
  0x00007f32dd04572a:   add    %ecx,%eax
  0x00007f32dd04572c:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f32dd045731:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd045736:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd04573b:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd04573f:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f32dd045743:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f32dd045748:   vpaddd %ymm0,%ymm11,%ymm5
  0x00007f32dd04574c:   vpaddd 0x40(%rbp,%rdx,1),%ymm6,%ymm9
  0x00007f32dd045752:   vmovdqu %ymm9,0x40(%rsp,%rdx,1)
  0x00007f32dd045758:   mov    %eax,%ecx
  0x00007f32dd04575a:   rorx   $0x19,%r8d,%r13d
  0x00007f32dd045760:   rorx   $0xb,%r8d,%r14d
  0x00007f32dd045766:   add    0x40(%rsp,%rdx,1),%r11d
  0x00007f32dd04576b:   or     %edi,%ecx
  0x00007f32dd04576d:   mov    %r9d,%r15d
  0x00007f32dd045770:   rorx   $0xd,%eax,%r12d
  0x00007f32dd045776:   xor    %r14d,%r13d
  0x00007f32dd045779:   xor    %r10d,%r15d
  0x00007f32dd04577c:   rorx   $0x6,%r8d,%r14d
  0x00007f32dd045782:   and    %r8d,%r15d
  0x00007f32dd045785:   xor    %r14d,%r13d
  0x00007f32dd045788:   rorx   $0x16,%eax,%r14d
  0x00007f32dd04578e:   add    %r11d,%esi
  0x00007f32dd045791:   and    %ebx,%ecx
  0x00007f32dd045793:   xor    %r12d,%r14d
  0x00007f32dd045796:   rorx   $0x2,%eax,%r12d
  0x00007f32dd04579c:   xor    %r10d,%r15d
  0x00007f32dd04579f:   xor    %r12d,%r14d
  0x00007f32dd0457a2:   mov    %eax,%r12d
  0x00007f32dd0457a5:   and    %edi,%r12d
  0x00007f32dd0457a8:   add    %r13d,%r15d
  0x00007f32dd0457ab:   or     %r12d,%ecx
  0x00007f32dd0457ae:   add    %r14d,%r11d
  0x00007f32dd0457b1:   add    %r15d,%esi
  0x00007f32dd0457b4:   add    %r15d,%r11d
  0x00007f32dd0457b7:   add    %ecx,%r11d
  0x00007f32dd0457ba:   vpalignr $0x4,%ymm4,%ymm5,%ymm0
  0x00007f32dd0457c0:   vpaddd %ymm6,%ymm0,%ymm0
  0x00007f32dd0457c4:   vpalignr $0x4,%ymm6,%ymm7,%ymm1
  0x00007f32dd0457ca:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f32dd0457cf:   vpslld $0x19,%ymm1,%ymm3
  0x00007f32dd0457d4:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd0457d8:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f32dd0457dd:   mov    %r11d,%ecx
  0x00007f32dd0457e0:   rorx   $0x19,%esi,%r13d
  0x00007f32dd0457e6:   rorx   $0xb,%esi,%r14d
  0x00007f32dd0457ec:   add    0x44(%rsp,%rdx,1),%r10d
  0x00007f32dd0457f1:   or     %ebx,%ecx
  0x00007f32dd0457f3:   mov    %r8d,%r15d
  0x00007f32dd0457f6:   rorx   $0xd,%r11d,%r12d
  0x00007f32dd0457fc:   xor    %r14d,%r13d
  0x00007f32dd0457ff:   xor    %r9d,%r15d
  0x00007f32dd045802:   rorx   $0x6,%esi,%r14d
  0x00007f32dd045808:   and    %esi,%r15d
  0x00007f32dd04580b:   xor    %r14d,%r13d
  0x00007f32dd04580e:   rorx   $0x16,%r11d,%r14d
  0x00007f32dd045814:   add    %r10d,%edi
  0x00007f32dd045817:   and    %eax,%ecx
  0x00007f32dd045819:   xor    %r12d,%r14d
  0x00007f32dd04581c:   rorx   $0x2,%r11d,%r12d
  0x00007f32dd045822:   xor    %r9d,%r15d
  0x00007f32dd045825:   xor    %r12d,%r14d
  0x00007f32dd045828:   mov    %r11d,%r12d
  0x00007f32dd04582b:   and    %ebx,%r12d
  0x00007f32dd04582e:   add    %r13d,%r15d
  0x00007f32dd045831:   or     %r12d,%ecx
  0x00007f32dd045834:   add    %r14d,%r10d
  0x00007f32dd045837:   add    %r15d,%edi
  0x00007f32dd04583a:   add    %r15d,%r10d
  0x00007f32dd04583d:   add    %ecx,%r10d
  0x00007f32dd045840:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f32dd045845:   vpslld $0xe,%ymm1,%ymm1
  0x00007f32dd04584a:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f32dd04584e:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f32dd045852:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f32dd045857:   vpshufd $0xfa,%ymm5,%ymm2
  0x00007f32dd04585c:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f32dd045860:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f32dd045865:   mov    %r10d,%ecx
  0x00007f32dd045868:   rorx   $0x19,%edi,%r13d
  0x00007f32dd04586e:   rorx   $0xb,%edi,%r14d
  0x00007f32dd045874:   add    0x48(%rsp,%rdx,1),%r9d
  0x00007f32dd045879:   or     %eax,%ecx
  0x00007f32dd04587b:   mov    %esi,%r15d
  0x00007f32dd04587e:   rorx   $0xd,%r10d,%r12d
  0x00007f32dd045884:   xor    %r14d,%r13d
  0x00007f32dd045887:   xor    %r8d,%r15d
  0x00007f32dd04588a:   rorx   $0x6,%edi,%r14d
  0x00007f32dd045890:   and    %edi,%r15d
  0x00007f32dd045893:   xor    %r14d,%r13d
  0x00007f32dd045896:   rorx   $0x16,%r10d,%r14d
  0x00007f32dd04589c:   add    %r9d,%ebx
  0x00007f32dd04589f:   and    %r11d,%ecx
  0x00007f32dd0458a2:   xor    %r12d,%r14d
  0x00007f32dd0458a5:   rorx   $0x2,%r10d,%r12d
  0x00007f32dd0458ab:   xor    %r8d,%r15d
  0x00007f32dd0458ae:   xor    %r12d,%r14d
  0x00007f32dd0458b1:   mov    %r10d,%r12d
  0x00007f32dd0458b4:   and    %eax,%r12d
  0x00007f32dd0458b7:   add    %r13d,%r15d
  0x00007f32dd0458ba:   or     %r12d,%ecx
  0x00007f32dd0458bd:   add    %r14d,%r9d
  0x00007f32dd0458c0:   add    %r15d,%ebx
  0x00007f32dd0458c3:   add    %r15d,%r9d
  0x00007f32dd0458c6:   add    %ecx,%r9d
  0x00007f32dd0458c9:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd0458ce:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd0458d3:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd0458d7:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f32dd0458db:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f32dd0458e0:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f32dd0458e5:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f32dd0458ea:   mov    %r9d,%ecx
  0x00007f32dd0458ed:   rorx   $0x19,%ebx,%r13d
  0x00007f32dd0458f3:   rorx   $0xb,%ebx,%r14d
  0x00007f32dd0458f9:   add    0x4c(%rsp,%rdx,1),%r8d
  0x00007f32dd0458fe:   or     %r11d,%ecx
  0x00007f32dd045901:   mov    %edi,%r15d
  0x00007f32dd045904:   rorx   $0xd,%r9d,%r12d
  0x00007f32dd04590a:   xor    %r14d,%r13d
  0x00007f32dd04590d:   xor    %esi,%r15d
  0x00007f32dd045910:   rorx   $0x6,%ebx,%r14d
  0x00007f32dd045916:   and    %ebx,%r15d
  0x00007f32dd045919:   xor    %r14d,%r13d
  0x00007f32dd04591c:   rorx   $0x16,%r9d,%r14d
  0x00007f32dd045922:   add    %r8d,%eax
  0x00007f32dd045925:   and    %r10d,%ecx
  0x00007f32dd045928:   xor    %r12d,%r14d
  0x00007f32dd04592b:   rorx   $0x2,%r9d,%r12d
  0x00007f32dd045931:   xor    %esi,%r15d
  0x00007f32dd045934:   xor    %r12d,%r14d
  0x00007f32dd045937:   mov    %r9d,%r12d
  0x00007f32dd04593a:   and    %r11d,%r12d
  0x00007f32dd04593d:   add    %r13d,%r15d
  0x00007f32dd045940:   or     %r12d,%ecx
  0x00007f32dd045943:   add    %r14d,%r8d
  0x00007f32dd045946:   add    %r15d,%eax
  0x00007f32dd045949:   add    %r15d,%r8d
  0x00007f32dd04594c:   add    %ecx,%r8d
  0x00007f32dd04594f:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f32dd045954:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd045959:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd04595e:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd045962:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f32dd045966:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f32dd04596b:   vpaddd %ymm0,%ymm11,%ymm6
  0x00007f32dd04596f:   vpaddd 0x60(%rbp,%rdx,1),%ymm7,%ymm9
  0x00007f32dd045975:   vmovdqu %ymm9,0x60(%rsp,%rdx,1)
  0x00007f32dd04597b:   mov    %r8d,%ecx
  0x00007f32dd04597e:   rorx   $0x19,%eax,%r13d
  0x00007f32dd045984:   rorx   $0xb,%eax,%r14d
  0x00007f32dd04598a:   add    0x60(%rsp,%rdx,1),%esi
  0x00007f32dd04598e:   or     %r10d,%ecx
  0x00007f32dd045991:   mov    %ebx,%r15d
  0x00007f32dd045994:   rorx   $0xd,%r8d,%r12d
  0x00007f32dd04599a:   xor    %r14d,%r13d
  0x00007f32dd04599d:   xor    %edi,%r15d
  0x00007f32dd0459a0:   rorx   $0x6,%eax,%r14d
  0x00007f32dd0459a6:   and    %eax,%r15d
  0x00007f32dd0459a9:   xor    %r14d,%r13d
  0x00007f32dd0459ac:   rorx   $0x16,%r8d,%r14d
  0x00007f32dd0459b2:   add    %esi,%r11d
  0x00007f32dd0459b5:   and    %r9d,%ecx
  0x00007f32dd0459b8:   xor    %r12d,%r14d
  0x00007f32dd0459bb:   rorx   $0x2,%r8d,%r12d
  0x00007f32dd0459c1:   xor    %edi,%r15d
  0x00007f32dd0459c4:   xor    %r12d,%r14d
  0x00007f32dd0459c7:   mov    %r8d,%r12d
  0x00007f32dd0459ca:   and    %r10d,%r12d
  0x00007f32dd0459cd:   add    %r13d,%r15d
  0x00007f32dd0459d0:   or     %r12d,%ecx
  0x00007f32dd0459d3:   add    %r14d,%esi
  0x00007f32dd0459d6:   add    %r15d,%r11d
  0x00007f32dd0459d9:   add    %r15d,%esi
  0x00007f32dd0459dc:   add    %ecx,%esi
  0x00007f32dd0459de:   vpalignr $0x4,%ymm5,%ymm6,%ymm0
  0x00007f32dd0459e4:   vpaddd %ymm7,%ymm0,%ymm0
  0x00007f32dd0459e8:   vpalignr $0x4,%ymm7,%ymm4,%ymm1
  0x00007f32dd0459ee:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f32dd0459f3:   vpslld $0x19,%ymm1,%ymm3
  0x00007f32dd0459f8:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd0459fc:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f32dd045a01:   mov    %esi,%ecx
  0x00007f32dd045a03:   rorx   $0x19,%r11d,%r13d
  0x00007f32dd045a09:   rorx   $0xb,%r11d,%r14d
  0x00007f32dd045a0f:   add    0x64(%rsp,%rdx,1),%edi
  0x00007f32dd045a13:   or     %r9d,%ecx
  0x00007f32dd045a16:   mov    %eax,%r15d
  0x00007f32dd045a19:   rorx   $0xd,%esi,%r12d
  0x00007f32dd045a1f:   xor    %r14d,%r13d
  0x00007f32dd045a22:   xor    %ebx,%r15d
  0x00007f32dd045a25:   rorx   $0x6,%r11d,%r14d
  0x00007f32dd045a2b:   and    %r11d,%r15d
  0x00007f32dd045a2e:   xor    %r14d,%r13d
  0x00007f32dd045a31:   rorx   $0x16,%esi,%r14d
  0x00007f32dd045a37:   add    %edi,%r10d
  0x00007f32dd045a3a:   and    %r8d,%ecx
  0x00007f32dd045a3d:   xor    %r12d,%r14d
  0x00007f32dd045a40:   rorx   $0x2,%esi,%r12d
  0x00007f32dd045a46:   xor    %ebx,%r15d
  0x00007f32dd045a49:   xor    %r12d,%r14d
  0x00007f32dd045a4c:   mov    %esi,%r12d
  0x00007f32dd045a4f:   and    %r9d,%r12d
  0x00007f32dd045a52:   add    %r13d,%r15d
  0x00007f32dd045a55:   or     %r12d,%ecx
  0x00007f32dd045a58:   add    %r14d,%edi
  0x00007f32dd045a5b:   add    %r15d,%r10d
  0x00007f32dd045a5e:   add    %r15d,%edi
  0x00007f32dd045a61:   add    %ecx,%edi
  0x00007f32dd045a63:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f32dd045a68:   vpslld $0xe,%ymm1,%ymm1
  0x00007f32dd045a6d:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f32dd045a71:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f32dd045a75:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f32dd045a7a:   vpshufd $0xfa,%ymm6,%ymm2
  0x00007f32dd045a7f:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f32dd045a83:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f32dd045a88:   mov    %edi,%ecx
  0x00007f32dd045a8a:   rorx   $0x19,%r10d,%r13d
  0x00007f32dd045a90:   rorx   $0xb,%r10d,%r14d
  0x00007f32dd045a96:   add    0x68(%rsp,%rdx,1),%ebx
  0x00007f32dd045a9a:   or     %r8d,%ecx
  0x00007f32dd045a9d:   mov    %r11d,%r15d
  0x00007f32dd045aa0:   rorx   $0xd,%edi,%r12d
  0x00007f32dd045aa6:   xor    %r14d,%r13d
  0x00007f32dd045aa9:   xor    %eax,%r15d
  0x00007f32dd045aac:   rorx   $0x6,%r10d,%r14d
  0x00007f32dd045ab2:   and    %r10d,%r15d
  0x00007f32dd045ab5:   xor    %r14d,%r13d
  0x00007f32dd045ab8:   rorx   $0x16,%edi,%r14d
  0x00007f32dd045abe:   add    %ebx,%r9d
  0x00007f32dd045ac1:   and    %esi,%ecx
  0x00007f32dd045ac3:   xor    %r12d,%r14d
  0x00007f32dd045ac6:   rorx   $0x2,%edi,%r12d
  0x00007f32dd045acc:   xor    %eax,%r15d
  0x00007f32dd045acf:   xor    %r12d,%r14d
  0x00007f32dd045ad2:   mov    %edi,%r12d
  0x00007f32dd045ad5:   and    %r8d,%r12d
  0x00007f32dd045ad8:   add    %r13d,%r15d
  0x00007f32dd045adb:   or     %r12d,%ecx
  0x00007f32dd045ade:   add    %r14d,%ebx
  0x00007f32dd045ae1:   add    %r15d,%r9d
  0x00007f32dd045ae4:   add    %r15d,%ebx
  0x00007f32dd045ae7:   add    %ecx,%ebx
  0x00007f32dd045ae9:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd045aee:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd045af3:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd045af7:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f32dd045afb:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f32dd045b00:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f32dd045b05:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f32dd045b0a:   mov    %ebx,%ecx
  0x00007f32dd045b0c:   rorx   $0x19,%r9d,%r13d
  0x00007f32dd045b12:   rorx   $0xb,%r9d,%r14d
  0x00007f32dd045b18:   add    0x6c(%rsp,%rdx,1),%eax
  0x00007f32dd045b1c:   or     %esi,%ecx
  0x00007f32dd045b1e:   mov    %r10d,%r15d
  0x00007f32dd045b21:   rorx   $0xd,%ebx,%r12d
  0x00007f32dd045b27:   xor    %r14d,%r13d
  0x00007f32dd045b2a:   xor    %r11d,%r15d
  0x00007f32dd045b2d:   rorx   $0x6,%r9d,%r14d
  0x00007f32dd045b33:   and    %r9d,%r15d
  0x00007f32dd045b36:   xor    %r14d,%r13d
  0x00007f32dd045b39:   rorx   $0x16,%ebx,%r14d
  0x00007f32dd045b3f:   add    %eax,%r8d
  0x00007f32dd045b42:   and    %edi,%ecx
  0x00007f32dd045b44:   xor    %r12d,%r14d
  0x00007f32dd045b47:   rorx   $0x2,%ebx,%r12d
  0x00007f32dd045b4d:   xor    %r11d,%r15d
  0x00007f32dd045b50:   xor    %r12d,%r14d
  0x00007f32dd045b53:   mov    %ebx,%r12d
  0x00007f32dd045b56:   and    %esi,%r12d
  0x00007f32dd045b59:   add    %r13d,%r15d
  0x00007f32dd045b5c:   or     %r12d,%ecx
  0x00007f32dd045b5f:   add    %r14d,%eax
  0x00007f32dd045b62:   add    %r15d,%r8d
  0x00007f32dd045b65:   add    %r15d,%eax
  0x00007f32dd045b68:   add    %ecx,%eax
  0x00007f32dd045b6a:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f32dd045b6f:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd045b74:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd045b79:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd045b7d:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f32dd045b81:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f32dd045b86:   vpaddd %ymm0,%ymm11,%ymm7
  0x00007f32dd045b8a:   add    $0x80,%rdx
  0x00007f32dd045b91:   cmp    $0x180,%rdx
  0x00007f32dd045b98:   jb     Stub::sha256_implCompress+240 0x00007f32dd045310
  0x00007f32dd045b9e:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007f32dd045ba4:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007f32dd045ba9:   mov    %r9d,%r15d
  0x00007f32dd045bac:   rorx   $0x19,%r8d,%r13d
  0x00007f32dd045bb2:   rorx   $0xb,%r8d,%r14d
  0x00007f32dd045bb8:   xor    %r10d,%r15d
  0x00007f32dd045bbb:   xor    %r14d,%r13d
  0x00007f32dd045bbe:   rorx   $0x6,%r8d,%r14d
  0x00007f32dd045bc4:   and    %r8d,%r15d
  0x00007f32dd045bc7:   xor    %r14d,%r13d
  0x00007f32dd045bca:   rorx   $0xd,%eax,%r12d
  0x00007f32dd045bd0:   xor    %r10d,%r15d
  0x00007f32dd045bd3:   rorx   $0x16,%eax,%r14d
  0x00007f32dd045bd9:   mov    %eax,%ecx
  0x00007f32dd045bdb:   xor    %r12d,%r14d
  0x00007f32dd045bde:   rorx   $0x2,%eax,%r12d
  0x00007f32dd045be4:   add    (%rsp,%rdx,1),%r11d
  0x00007f32dd045be8:   or     %edi,%ecx
  0x00007f32dd045bea:   xor    %r12d,%r14d
  0x00007f32dd045bed:   mov    %eax,%r12d
  0x00007f32dd045bf0:   and    %ebx,%ecx
  0x00007f32dd045bf2:   and    %edi,%r12d
  0x00007f32dd045bf5:   add    %r13d,%r15d
  0x00007f32dd045bf8:   add    %r11d,%esi
  0x00007f32dd045bfb:   or     %r12d,%ecx
  0x00007f32dd045bfe:   add    %r14d,%r11d
  0x00007f32dd045c01:   add    %r15d,%esi
  0x00007f32dd045c04:   add    %r15d,%r11d
  0x00007f32dd045c07:   mov    %r8d,%r15d
  0x00007f32dd045c0a:   rorx   $0x19,%esi,%r13d
  0x00007f32dd045c10:   rorx   $0xb,%esi,%r14d
  0x00007f32dd045c16:   xor    %r9d,%r15d
  0x00007f32dd045c19:   xor    %r14d,%r13d
  0x00007f32dd045c1c:   rorx   $0x6,%esi,%r14d
  0x00007f32dd045c22:   and    %esi,%r15d
  0x00007f32dd045c25:   add    %ecx,%r11d
  0x00007f32dd045c28:   xor    %r14d,%r13d
  0x00007f32dd045c2b:   rorx   $0xd,%r11d,%r12d
  0x00007f32dd045c31:   xor    %r9d,%r15d
  0x00007f32dd045c34:   rorx   $0x16,%r11d,%r14d
  0x00007f32dd045c3a:   mov    %r11d,%ecx
  0x00007f32dd045c3d:   xor    %r12d,%r14d
  0x00007f32dd045c40:   rorx   $0x2,%r11d,%r12d
  0x00007f32dd045c46:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007f32dd045c4b:   or     %ebx,%ecx
  0x00007f32dd045c4d:   xor    %r12d,%r14d
  0x00007f32dd045c50:   mov    %r11d,%r12d
  0x00007f32dd045c53:   and    %eax,%ecx
  0x00007f32dd045c55:   and    %ebx,%r12d
  0x00007f32dd045c58:   add    %r13d,%r15d
  0x00007f32dd045c5b:   add    %r10d,%edi
  0x00007f32dd045c5e:   or     %r12d,%ecx
  0x00007f32dd045c61:   add    %r14d,%r10d
  0x00007f32dd045c64:   add    %r15d,%edi
  0x00007f32dd045c67:   add    %r15d,%r10d
  0x00007f32dd045c6a:   mov    %esi,%r15d
  0x00007f32dd045c6d:   rorx   $0x19,%edi,%r13d
  0x00007f32dd045c73:   rorx   $0xb,%edi,%r14d
  0x00007f32dd045c79:   xor    %r8d,%r15d
  0x00007f32dd045c7c:   xor    %r14d,%r13d
  0x00007f32dd045c7f:   rorx   $0x6,%edi,%r14d
  0x00007f32dd045c85:   and    %edi,%r15d
  0x00007f32dd045c88:   add    %ecx,%r10d
  0x00007f32dd045c8b:   xor    %r14d,%r13d
  0x00007f32dd045c8e:   rorx   $0xd,%r10d,%r12d
  0x00007f32dd045c94:   xor    %r8d,%r15d
  0x00007f32dd045c97:   rorx   $0x16,%r10d,%r14d
  0x00007f32dd045c9d:   mov    %r10d,%ecx
  0x00007f32dd045ca0:   xor    %r12d,%r14d
  0x00007f32dd045ca3:   rorx   $0x2,%r10d,%r12d
  0x00007f32dd045ca9:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007f32dd045cae:   or     %eax,%ecx
  0x00007f32dd045cb0:   xor    %r12d,%r14d
  0x00007f32dd045cb3:   mov    %r10d,%r12d
  0x00007f32dd045cb6:   and    %r11d,%ecx
  0x00007f32dd045cb9:   and    %eax,%r12d
  0x00007f32dd045cbc:   add    %r13d,%r15d
  0x00007f32dd045cbf:   add    %r9d,%ebx
  0x00007f32dd045cc2:   or     %r12d,%ecx
  0x00007f32dd045cc5:   add    %r14d,%r9d
  0x00007f32dd045cc8:   add    %r15d,%ebx
  0x00007f32dd045ccb:   add    %r15d,%r9d
  0x00007f32dd045cce:   mov    %edi,%r15d
  0x00007f32dd045cd1:   rorx   $0x19,%ebx,%r13d
  0x00007f32dd045cd7:   rorx   $0xb,%ebx,%r14d
  0x00007f32dd045cdd:   xor    %esi,%r15d
  0x00007f32dd045ce0:   xor    %r14d,%r13d
  0x00007f32dd045ce3:   rorx   $0x6,%ebx,%r14d
  0x00007f32dd045ce9:   and    %ebx,%r15d
  0x00007f32dd045cec:   add    %ecx,%r9d
  0x00007f32dd045cef:   xor    %r14d,%r13d
  0x00007f32dd045cf2:   rorx   $0xd,%r9d,%r12d
  0x00007f32dd045cf8:   xor    %esi,%r15d
  0x00007f32dd045cfb:   rorx   $0x16,%r9d,%r14d
  0x00007f32dd045d01:   mov    %r9d,%ecx
  0x00007f32dd045d04:   xor    %r12d,%r14d
  0x00007f32dd045d07:   rorx   $0x2,%r9d,%r12d
  0x00007f32dd045d0d:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007f32dd045d12:   or     %r11d,%ecx
  0x00007f32dd045d15:   xor    %r12d,%r14d
  0x00007f32dd045d18:   mov    %r9d,%r12d
  0x00007f32dd045d1b:   and    %r10d,%ecx
  0x00007f32dd045d1e:   and    %r11d,%r12d
  0x00007f32dd045d21:   add    %r13d,%r15d
  0x00007f32dd045d24:   add    %r8d,%eax
  0x00007f32dd045d27:   or     %r12d,%ecx
  0x00007f32dd045d2a:   add    %r14d,%r8d
  0x00007f32dd045d2d:   add    %r15d,%eax
  0x00007f32dd045d30:   add    %r15d,%r8d
  0x00007f32dd045d33:   add    %ecx,%r8d
  0x00007f32dd045d36:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007f32dd045d3c:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007f32dd045d42:   mov    %ebx,%r15d
  0x00007f32dd045d45:   rorx   $0x19,%eax,%r13d
  0x00007f32dd045d4b:   rorx   $0xb,%eax,%r14d
  0x00007f32dd045d51:   xor    %edi,%r15d
  0x00007f32dd045d54:   xor    %r14d,%r13d
  0x00007f32dd045d57:   rorx   $0x6,%eax,%r14d
  0x00007f32dd045d5d:   and    %eax,%r15d
  0x00007f32dd045d60:   xor    %r14d,%r13d
  0x00007f32dd045d63:   rorx   $0xd,%r8d,%r12d
  0x00007f32dd045d69:   xor    %edi,%r15d
  0x00007f32dd045d6c:   rorx   $0x16,%r8d,%r14d
  0x00007f32dd045d72:   mov    %r8d,%ecx
  0x00007f32dd045d75:   xor    %r12d,%r14d
  0x00007f32dd045d78:   rorx   $0x2,%r8d,%r12d
  0x00007f32dd045d7e:   add    0x20(%rsp,%rdx,1),%esi
  0x00007f32dd045d82:   or     %r10d,%ecx
  0x00007f32dd045d85:   xor    %r12d,%r14d
  0x00007f32dd045d88:   mov    %r8d,%r12d
  0x00007f32dd045d8b:   and    %r9d,%ecx
  0x00007f32dd045d8e:   and    %r10d,%r12d
  0x00007f32dd045d91:   add    %r13d,%r15d
  0x00007f32dd045d94:   add    %esi,%r11d
  0x00007f32dd045d97:   or     %r12d,%ecx
  0x00007f32dd045d9a:   add    %r14d,%esi
  0x00007f32dd045d9d:   add    %r15d,%r11d
  0x00007f32dd045da0:   add    %r15d,%esi
  0x00007f32dd045da3:   mov    %eax,%r15d
  0x00007f32dd045da6:   rorx   $0x19,%r11d,%r13d
  0x00007f32dd045dac:   rorx   $0xb,%r11d,%r14d
  0x00007f32dd045db2:   xor    %ebx,%r15d
  0x00007f32dd045db5:   xor    %r14d,%r13d
  0x00007f32dd045db8:   rorx   $0x6,%r11d,%r14d
  0x00007f32dd045dbe:   and    %r11d,%r15d
  0x00007f32dd045dc1:   add    %ecx,%esi
  0x00007f32dd045dc3:   xor    %r14d,%r13d
  0x00007f32dd045dc6:   rorx   $0xd,%esi,%r12d
  0x00007f32dd045dcc:   xor    %ebx,%r15d
  0x00007f32dd045dcf:   rorx   $0x16,%esi,%r14d
  0x00007f32dd045dd5:   mov    %esi,%ecx
  0x00007f32dd045dd7:   xor    %r12d,%r14d
  0x00007f32dd045dda:   rorx   $0x2,%esi,%r12d
  0x00007f32dd045de0:   add    0x24(%rsp,%rdx,1),%edi
  0x00007f32dd045de4:   or     %r9d,%ecx
  0x00007f32dd045de7:   xor    %r12d,%r14d
  0x00007f32dd045dea:   mov    %esi,%r12d
  0x00007f32dd045ded:   and    %r8d,%ecx
  0x00007f32dd045df0:   and    %r9d,%r12d
  0x00007f32dd045df3:   add    %r13d,%r15d
  0x00007f32dd045df6:   add    %edi,%r10d
  0x00007f32dd045df9:   or     %r12d,%ecx
  0x00007f32dd045dfc:   add    %r14d,%edi
  0x00007f32dd045dff:   add    %r15d,%r10d
  0x00007f32dd045e02:   add    %r15d,%edi
  0x00007f32dd045e05:   mov    %r11d,%r15d
  0x00007f32dd045e08:   rorx   $0x19,%r10d,%r13d
  0x00007f32dd045e0e:   rorx   $0xb,%r10d,%r14d
  0x00007f32dd045e14:   xor    %eax,%r15d
  0x00007f32dd045e17:   xor    %r14d,%r13d
  0x00007f32dd045e1a:   rorx   $0x6,%r10d,%r14d
  0x00007f32dd045e20:   and    %r10d,%r15d
  0x00007f32dd045e23:   add    %ecx,%edi
  0x00007f32dd045e25:   xor    %r14d,%r13d
  0x00007f32dd045e28:   rorx   $0xd,%edi,%r12d
  0x00007f32dd045e2e:   xor    %eax,%r15d
  0x00007f32dd045e31:   rorx   $0x16,%edi,%r14d
  0x00007f32dd045e37:   mov    %edi,%ecx
  0x00007f32dd045e39:   xor    %r12d,%r14d
  0x00007f32dd045e3c:   rorx   $0x2,%edi,%r12d
  0x00007f32dd045e42:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007f32dd045e46:   or     %r8d,%ecx
  0x00007f32dd045e49:   xor    %r12d,%r14d
  0x00007f32dd045e4c:   mov    %edi,%r12d
  0x00007f32dd045e4f:   and    %esi,%ecx
  0x00007f32dd045e51:   and    %r8d,%r12d
  0x00007f32dd045e54:   add    %r13d,%r15d
  0x00007f32dd045e57:   add    %ebx,%r9d
  0x00007f32dd045e5a:   or     %r12d,%ecx
  0x00007f32dd045e5d:   add    %r14d,%ebx
  0x00007f32dd045e60:   add    %r15d,%r9d
  0x00007f32dd045e63:   add    %r15d,%ebx
  0x00007f32dd045e66:   mov    %r10d,%r15d
  0x00007f32dd045e69:   rorx   $0x19,%r9d,%r13d
  0x00007f32dd045e6f:   rorx   $0xb,%r9d,%r14d
  0x00007f32dd045e75:   xor    %r11d,%r15d
  0x00007f32dd045e78:   xor    %r14d,%r13d
  0x00007f32dd045e7b:   rorx   $0x6,%r9d,%r14d
  0x00007f32dd045e81:   and    %r9d,%r15d
  0x00007f32dd045e84:   add    %ecx,%ebx
  0x00007f32dd045e86:   xor    %r14d,%r13d
  0x00007f32dd045e89:   rorx   $0xd,%ebx,%r12d
  0x00007f32dd045e8f:   xor    %r11d,%r15d
  0x00007f32dd045e92:   rorx   $0x16,%ebx,%r14d
  0x00007f32dd045e98:   mov    %ebx,%ecx
  0x00007f32dd045e9a:   xor    %r12d,%r14d
  0x00007f32dd045e9d:   rorx   $0x2,%ebx,%r12d
  0x00007f32dd045ea3:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007f32dd045ea7:   or     %esi,%ecx
  0x00007f32dd045ea9:   xor    %r12d,%r14d
  0x00007f32dd045eac:   mov    %ebx,%r12d
  0x00007f32dd045eaf:   and    %edi,%ecx
  0x00007f32dd045eb1:   and    %esi,%r12d
  0x00007f32dd045eb4:   add    %r13d,%r15d
  0x00007f32dd045eb7:   add    %eax,%r8d
  0x00007f32dd045eba:   or     %r12d,%ecx
  0x00007f32dd045ebd:   add    %r14d,%eax
  0x00007f32dd045ec0:   add    %r15d,%r8d
  0x00007f32dd045ec3:   add    %r15d,%eax
  0x00007f32dd045ec6:   add    %ecx,%eax
  0x00007f32dd045ec8:   add    $0x40,%rdx
  0x00007f32dd045ecc:   vmovdqu %ymm6,%ymm4
  0x00007f32dd045ed0:   vmovdqu %ymm7,%ymm5
  0x00007f32dd045ed4:   cmp    $0x200,%rdx
  0x00007f32dd045edb:   jb     Stub::sha256_implCompress+2430 0x00007f32dd045b9e
  0x00007f32dd045ee1:   mov    0x210(%rsp),%rdx
  0x00007f32dd045ee9:   mov    0x208(%rsp),%rcx
  0x00007f32dd045ef1:   add    (%rdx),%eax
  0x00007f32dd045ef3:   mov    %eax,(%rdx)
  0x00007f32dd045ef5:   add    0x4(%rdx),%ebx
  0x00007f32dd045ef8:   mov    %ebx,0x4(%rdx)
  0x00007f32dd045efb:   add    0x8(%rdx),%edi
  0x00007f32dd045efe:   mov    %edi,0x8(%rdx)
  0x00007f32dd045f01:   add    0xc(%rdx),%esi
  0x00007f32dd045f04:   mov    %esi,0xc(%rdx)
  0x00007f32dd045f07:   add    0x10(%rdx),%r8d
  0x00007f32dd045f0b:   mov    %r8d,0x10(%rdx)
  0x00007f32dd045f0f:   add    0x14(%rdx),%r9d
  0x00007f32dd045f13:   mov    %r9d,0x14(%rdx)
  0x00007f32dd045f17:   add    0x18(%rdx),%r10d
  0x00007f32dd045f1b:   mov    %r10d,0x18(%rdx)
  0x00007f32dd045f1f:   add    0x1c(%rdx),%r11d
  0x00007f32dd045f23:   mov    %r11d,0x1c(%rdx)
  0x00007f32dd045f27:   cmp    0x200(%rsp),%rcx
  0x00007f32dd045f2f:   ja     Stub::sha256_implCompress+4370 0x00007f32dd046332
  0x00007f32dd045f35:   xor    %rdx,%rdx
  0x00007f32dd045f38:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd045f40:   mov    %r9d,%r15d
  0x00007f32dd045f43:   rorx   $0x19,%r8d,%r13d
  0x00007f32dd045f49:   rorx   $0xb,%r8d,%r14d
  0x00007f32dd045f4f:   xor    %r10d,%r15d
  0x00007f32dd045f52:   xor    %r14d,%r13d
  0x00007f32dd045f55:   rorx   $0x6,%r8d,%r14d
  0x00007f32dd045f5b:   and    %r8d,%r15d
  0x00007f32dd045f5e:   xor    %r14d,%r13d
  0x00007f32dd045f61:   rorx   $0xd,%eax,%r12d
  0x00007f32dd045f67:   xor    %r10d,%r15d
  0x00007f32dd045f6a:   rorx   $0x16,%eax,%r14d
  0x00007f32dd045f70:   mov    %eax,%ecx
  0x00007f32dd045f72:   xor    %r12d,%r14d
  0x00007f32dd045f75:   rorx   $0x2,%eax,%r12d
  0x00007f32dd045f7b:   add    0x10(%rsp,%rdx,1),%r11d
  0x00007f32dd045f80:   or     %edi,%ecx
  0x00007f32dd045f82:   xor    %r12d,%r14d
  0x00007f32dd045f85:   mov    %eax,%r12d
  0x00007f32dd045f88:   and    %ebx,%ecx
  0x00007f32dd045f8a:   and    %edi,%r12d
  0x00007f32dd045f8d:   add    %r13d,%r15d
  0x00007f32dd045f90:   add    %r11d,%esi
  0x00007f32dd045f93:   or     %r12d,%ecx
  0x00007f32dd045f96:   add    %r14d,%r11d
  0x00007f32dd045f99:   add    %r15d,%esi
  0x00007f32dd045f9c:   add    %r15d,%r11d
  0x00007f32dd045f9f:   mov    %r8d,%r15d
  0x00007f32dd045fa2:   rorx   $0x19,%esi,%r13d
  0x00007f32dd045fa8:   rorx   $0xb,%esi,%r14d
  0x00007f32dd045fae:   xor    %r9d,%r15d
  0x00007f32dd045fb1:   xor    %r14d,%r13d
  0x00007f32dd045fb4:   rorx   $0x6,%esi,%r14d
  0x00007f32dd045fba:   and    %esi,%r15d
  0x00007f32dd045fbd:   add    %ecx,%r11d
  0x00007f32dd045fc0:   xor    %r14d,%r13d
  0x00007f32dd045fc3:   rorx   $0xd,%r11d,%r12d
  0x00007f32dd045fc9:   xor    %r9d,%r15d
  0x00007f32dd045fcc:   rorx   $0x16,%r11d,%r14d
  0x00007f32dd045fd2:   mov    %r11d,%ecx
  0x00007f32dd045fd5:   xor    %r12d,%r14d
  0x00007f32dd045fd8:   rorx   $0x2,%r11d,%r12d
  0x00007f32dd045fde:   add    0x14(%rsp,%rdx,1),%r10d
  0x00007f32dd045fe3:   or     %ebx,%ecx
  0x00007f32dd045fe5:   xor    %r12d,%r14d
  0x00007f32dd045fe8:   mov    %r11d,%r12d
  0x00007f32dd045feb:   and    %eax,%ecx
  0x00007f32dd045fed:   and    %ebx,%r12d
  0x00007f32dd045ff0:   add    %r13d,%r15d
  0x00007f32dd045ff3:   add    %r10d,%edi
  0x00007f32dd045ff6:   or     %r12d,%ecx
  0x00007f32dd045ff9:   add    %r14d,%r10d
  0x00007f32dd045ffc:   add    %r15d,%edi
  0x00007f32dd045fff:   add    %r15d,%r10d
  0x00007f32dd046002:   mov    %esi,%r15d
  0x00007f32dd046005:   rorx   $0x19,%edi,%r13d
  0x00007f32dd04600b:   rorx   $0xb,%edi,%r14d
  0x00007f32dd046011:   xor    %r8d,%r15d
  0x00007f32dd046014:   xor    %r14d,%r13d
  0x00007f32dd046017:   rorx   $0x6,%edi,%r14d
  0x00007f32dd04601d:   and    %edi,%r15d
  0x00007f32dd046020:   add    %ecx,%r10d
  0x00007f32dd046023:   xor    %r14d,%r13d
  0x00007f32dd046026:   rorx   $0xd,%r10d,%r12d
  0x00007f32dd04602c:   xor    %r8d,%r15d
  0x00007f32dd04602f:   rorx   $0x16,%r10d,%r14d
  0x00007f32dd046035:   mov    %r10d,%ecx
  0x00007f32dd046038:   xor    %r12d,%r14d
  0x00007f32dd04603b:   rorx   $0x2,%r10d,%r12d
  0x00007f32dd046041:   add    0x18(%rsp,%rdx,1),%r9d
  0x00007f32dd046046:   or     %eax,%ecx
  0x00007f32dd046048:   xor    %r12d,%r14d
  0x00007f32dd04604b:   mov    %r10d,%r12d
  0x00007f32dd04604e:   and    %r11d,%ecx
  0x00007f32dd046051:   and    %eax,%r12d
  0x00007f32dd046054:   add    %r13d,%r15d
  0x00007f32dd046057:   add    %r9d,%ebx
  0x00007f32dd04605a:   or     %r12d,%ecx
  0x00007f32dd04605d:   add    %r14d,%r9d
  0x00007f32dd046060:   add    %r15d,%ebx
  0x00007f32dd046063:   add    %r15d,%r9d
  0x00007f32dd046066:   mov    %edi,%r15d
  0x00007f32dd046069:   rorx   $0x19,%ebx,%r13d
  0x00007f32dd04606f:   rorx   $0xb,%ebx,%r14d
  0x00007f32dd046075:   xor    %esi,%r15d
  0x00007f32dd046078:   xor    %r14d,%r13d
  0x00007f32dd04607b:   rorx   $0x6,%ebx,%r14d
  0x00007f32dd046081:   and    %ebx,%r15d
  0x00007f32dd046084:   add    %ecx,%r9d
  0x00007f32dd046087:   xor    %r14d,%r13d
  0x00007f32dd04608a:   rorx   $0xd,%r9d,%r12d
  0x00007f32dd046090:   xor    %esi,%r15d
  0x00007f32dd046093:   rorx   $0x16,%r9d,%r14d
  0x00007f32dd046099:   mov    %r9d,%ecx
  0x00007f32dd04609c:   xor    %r12d,%r14d
  0x00007f32dd04609f:   rorx   $0x2,%r9d,%r12d
  0x00007f32dd0460a5:   add    0x1c(%rsp,%rdx,1),%r8d
  0x00007f32dd0460aa:   or     %r11d,%ecx
  0x00007f32dd0460ad:   xor    %r12d,%r14d
  0x00007f32dd0460b0:   mov    %r9d,%r12d
  0x00007f32dd0460b3:   and    %r10d,%ecx
  0x00007f32dd0460b6:   and    %r11d,%r12d
  0x00007f32dd0460b9:   add    %r13d,%r15d
  0x00007f32dd0460bc:   add    %r8d,%eax
  0x00007f32dd0460bf:   or     %r12d,%ecx
  0x00007f32dd0460c2:   add    %r14d,%r8d
  0x00007f32dd0460c5:   add    %r15d,%eax
  0x00007f32dd0460c8:   add    %r15d,%r8d
  0x00007f32dd0460cb:   add    %ecx,%r8d
  0x00007f32dd0460ce:   mov    %ebx,%r15d
  0x00007f32dd0460d1:   rorx   $0x19,%eax,%r13d
  0x00007f32dd0460d7:   rorx   $0xb,%eax,%r14d
  0x00007f32dd0460dd:   xor    %edi,%r15d
  0x00007f32dd0460e0:   xor    %r14d,%r13d
  0x00007f32dd0460e3:   rorx   $0x6,%eax,%r14d
  0x00007f32dd0460e9:   and    %eax,%r15d
  0x00007f32dd0460ec:   xor    %r14d,%r13d
  0x00007f32dd0460ef:   rorx   $0xd,%r8d,%r12d
  0x00007f32dd0460f5:   xor    %edi,%r15d
  0x00007f32dd0460f8:   rorx   $0x16,%r8d,%r14d
  0x00007f32dd0460fe:   mov    %r8d,%ecx
  0x00007f32dd046101:   xor    %r12d,%r14d
  0x00007f32dd046104:   rorx   $0x2,%r8d,%r12d
  0x00007f32dd04610a:   add    0x30(%rsp,%rdx,1),%esi
  0x00007f32dd04610e:   or     %r10d,%ecx
  0x00007f32dd046111:   xor    %r12d,%r14d
  0x00007f32dd046114:   mov    %r8d,%r12d
  0x00007f32dd046117:   and    %r9d,%ecx
  0x00007f32dd04611a:   and    %r10d,%r12d
  0x00007f32dd04611d:   add    %r13d,%r15d
  0x00007f32dd046120:   add    %esi,%r11d
  0x00007f32dd046123:   or     %r12d,%ecx
  0x00007f32dd046126:   add    %r14d,%esi
  0x00007f32dd046129:   add    %r15d,%r11d
  0x00007f32dd04612c:   add    %r15d,%esi
  0x00007f32dd04612f:   mov    %eax,%r15d
  0x00007f32dd046132:   rorx   $0x19,%r11d,%r13d
  0x00007f32dd046138:   rorx   $0xb,%r11d,%r14d
  0x00007f32dd04613e:   xor    %ebx,%r15d
  0x00007f32dd046141:   xor    %r14d,%r13d
  0x00007f32dd046144:   rorx   $0x6,%r11d,%r14d
  0x00007f32dd04614a:   and    %r11d,%r15d
  0x00007f32dd04614d:   add    %ecx,%esi
  0x00007f32dd04614f:   xor    %r14d,%r13d
  0x00007f32dd046152:   rorx   $0xd,%esi,%r12d
  0x00007f32dd046158:   xor    %ebx,%r15d
  0x00007f32dd04615b:   rorx   $0x16,%esi,%r14d
  0x00007f32dd046161:   mov    %esi,%ecx
  0x00007f32dd046163:   xor    %r12d,%r14d
  0x00007f32dd046166:   rorx   $0x2,%esi,%r12d
  0x00007f32dd04616c:   add    0x34(%rsp,%rdx,1),%edi
  0x00007f32dd046170:   or     %r9d,%ecx
  0x00007f32dd046173:   xor    %r12d,%r14d
  0x00007f32dd046176:   mov    %esi,%r12d
  0x00007f32dd046179:   and    %r8d,%ecx
  0x00007f32dd04617c:   and    %r9d,%r12d
  0x00007f32dd04617f:   add    %r13d,%r15d
  0x00007f32dd046182:   add    %edi,%r10d
  0x00007f32dd046185:   or     %r12d,%ecx
  0x00007f32dd046188:   add    %r14d,%edi
  0x00007f32dd04618b:   add    %r15d,%r10d
  0x00007f32dd04618e:   add    %r15d,%edi
  0x00007f32dd046191:   mov    %r11d,%r15d
  0x00007f32dd046194:   rorx   $0x19,%r10d,%r13d
  0x00007f32dd04619a:   rorx   $0xb,%r10d,%r14d
  0x00007f32dd0461a0:   xor    %eax,%r15d
  0x00007f32dd0461a3:   xor    %r14d,%r13d
  0x00007f32dd0461a6:   rorx   $0x6,%r10d,%r14d
  0x00007f32dd0461ac:   and    %r10d,%r15d
  0x00007f32dd0461af:   add    %ecx,%edi
  0x00007f32dd0461b1:   xor    %r14d,%r13d
  0x00007f32dd0461b4:   rorx   $0xd,%edi,%r12d
  0x00007f32dd0461ba:   xor    %eax,%r15d
  0x00007f32dd0461bd:   rorx   $0x16,%edi,%r14d
  0x00007f32dd0461c3:   mov    %edi,%ecx
  0x00007f32dd0461c5:   xor    %r12d,%r14d
  0x00007f32dd0461c8:   rorx   $0x2,%edi,%r12d
  0x00007f32dd0461ce:   add    0x38(%rsp,%rdx,1),%ebx
  0x00007f32dd0461d2:   or     %r8d,%ecx
  0x00007f32dd0461d5:   xor    %r12d,%r14d
  0x00007f32dd0461d8:   mov    %edi,%r12d
  0x00007f32dd0461db:   and    %esi,%ecx
  0x00007f32dd0461dd:   and    %r8d,%r12d
  0x00007f32dd0461e0:   add    %r13d,%r15d
  0x00007f32dd0461e3:   add    %ebx,%r9d
  0x00007f32dd0461e6:   or     %r12d,%ecx
  0x00007f32dd0461e9:   add    %r14d,%ebx
  0x00007f32dd0461ec:   add    %r15d,%r9d
  0x00007f32dd0461ef:   add    %r15d,%ebx
  0x00007f32dd0461f2:   mov    %r10d,%r15d
  0x00007f32dd0461f5:   rorx   $0x19,%r9d,%r13d
  0x00007f32dd0461fb:   rorx   $0xb,%r9d,%r14d
  0x00007f32dd046201:   xor    %r11d,%r15d
  0x00007f32dd046204:   xor    %r14d,%r13d
  0x00007f32dd046207:   rorx   $0x6,%r9d,%r14d
  0x00007f32dd04620d:   and    %r9d,%r15d
  0x00007f32dd046210:   add    %ecx,%ebx
  0x00007f32dd046212:   xor    %r14d,%r13d
  0x00007f32dd046215:   rorx   $0xd,%ebx,%r12d
  0x00007f32dd04621b:   xor    %r11d,%r15d
  0x00007f32dd04621e:   rorx   $0x16,%ebx,%r14d
  0x00007f32dd046224:   mov    %ebx,%ecx
  0x00007f32dd046226:   xor    %r12d,%r14d
  0x00007f32dd046229:   rorx   $0x2,%ebx,%r12d
  0x00007f32dd04622f:   add    0x3c(%rsp,%rdx,1),%eax
  0x00007f32dd046233:   or     %esi,%ecx
  0x00007f32dd046235:   xor    %r12d,%r14d
  0x00007f32dd046238:   mov    %ebx,%r12d
  0x00007f32dd04623b:   and    %edi,%ecx
  0x00007f32dd04623d:   and    %esi,%r12d
  0x00007f32dd046240:   add    %r13d,%r15d
  0x00007f32dd046243:   add    %eax,%r8d
  0x00007f32dd046246:   or     %r12d,%ecx
  0x00007f32dd046249:   add    %r14d,%eax
  0x00007f32dd04624c:   add    %r15d,%r8d
  0x00007f32dd04624f:   add    %r15d,%eax
  0x00007f32dd046252:   add    %ecx,%eax
  0x00007f32dd046254:   add    $0x40,%rdx
  0x00007f32dd046258:   cmp    $0x200,%rdx
  0x00007f32dd04625f:   jb     Stub::sha256_implCompress+3360 0x00007f32dd045f40
  0x00007f32dd046265:   mov    0x210(%rsp),%rdx
  0x00007f32dd04626d:   mov    0x208(%rsp),%rcx
  0x00007f32dd046275:   add    $0x40,%rcx
  0x00007f32dd046279:   add    (%rdx),%eax
  0x00007f32dd04627b:   mov    %eax,(%rdx)
  0x00007f32dd04627d:   add    0x4(%rdx),%ebx
  0x00007f32dd046280:   mov    %ebx,0x4(%rdx)
  0x00007f32dd046283:   add    0x8(%rdx),%edi
  0x00007f32dd046286:   mov    %edi,0x8(%rdx)
  0x00007f32dd046289:   add    0xc(%rdx),%esi
  0x00007f32dd04628c:   mov    %esi,0xc(%rdx)
  0x00007f32dd04628f:   add    0x10(%rdx),%r8d
  0x00007f32dd046293:   mov    %r8d,0x10(%rdx)
  0x00007f32dd046297:   add    0x14(%rdx),%r9d
  0x00007f32dd04629b:   mov    %r9d,0x14(%rdx)
  0x00007f32dd04629f:   add    0x18(%rdx),%r10d
  0x00007f32dd0462a3:   mov    %r10d,0x18(%rdx)
  0x00007f32dd0462a7:   add    0x1c(%rdx),%r11d
  0x00007f32dd0462ab:   mov    %r11d,0x1c(%rdx)
  0x00007f32dd0462af:   cmp    0x200(%rsp),%rcx
  0x00007f32dd0462b7:   jb     Stub::sha256_implCompress+148 0x00007f32dd0452b4
  0x00007f32dd0462bd:   ja     Stub::sha256_implCompress+4370 0x00007f32dd046332
  0x00007f32dd0462bf:   movabs $0x7f32e6eb54c0,%rbp
  0x00007f32dd0462c9:   vmovdqu (%rcx),%xmm4
  0x00007f32dd0462cd:   vmovdqu 0x10(%rcx),%xmm5
  0x00007f32dd0462d2:   vmovdqu 0x20(%rcx),%xmm6
  0x00007f32dd0462d7:   vmovdqu 0x30(%rcx),%xmm7
  0x00007f32dd0462dc:   vpshufb %xmm13,%xmm4,%xmm4
  0x00007f32dd0462e1:   vpshufb %xmm13,%xmm5,%xmm5
  0x00007f32dd0462e6:   vpshufb %xmm13,%xmm6,%xmm6
  0x00007f32dd0462eb:   vpshufb %xmm13,%xmm7,%xmm7
  0x00007f32dd0462f0:   jmpq   Stub::sha256_implCompress+221 0x00007f32dd0452fd
  0x00007f32dd0462f5:   mov    (%rdx),%eax
  0x00007f32dd0462f7:   mov    0x4(%rdx),%ebx
  0x00007f32dd0462fa:   mov    0x8(%rdx),%edi
  0x00007f32dd0462fd:   mov    0xc(%rdx),%esi
  0x00007f32dd046300:   mov    0x10(%rdx),%r8d
  0x00007f32dd046304:   mov    0x14(%rdx),%r9d
  0x00007f32dd046308:   mov    0x1c(%rdx),%r11d
  0x00007f32dd04630c:   vmovdqu -0x1154(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007f32dd046314:   vmovdqu -0x113c(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007f32dd0451e0
  0x00007f32dd04631c:   vmovdqu -0x1124(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007f32dd045200
  0x00007f32dd046324:   mov    0x18(%rdx),%r10d
  0x00007f32dd046328:   mov    %rdx,0x210(%rsp)
  0x00007f32dd046330:   jmp    Stub::sha256_implCompress+4255 0x00007f32dd0462bf
  0x00007f32dd046332:   mov    0x218(%rsp),%rsp
  0x00007f32dd04633a:   pop    %r15
  0x00007f32dd04633c:   pop    %r14
  0x00007f32dd04633e:   pop    %r13
  0x00007f32dd046340:   pop    %r12
  0x00007f32dd046342:   pop    %rbp
  0x00007f32dd046343:   pop    %rbx
  0x00007f32dd046344:   pop    %rdx
  0x00007f32dd046345:   pop    %rcx
  0x00007f32dd046346:   add    $0x20,%rsp
  0x00007f32dd04634a:   vzeroupper 
  0x00007f32dd04634d:   leaveq 
  0x00007f32dd04634e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha256_implCompressMB [0x00007f32dd046360, 0x00007f32dd0474bd] (4445 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd046360:   push   %rbp
  0x00007f32dd046361:   mov    %rsp,%rbp
  0x00007f32dd046364:   sub    $0x20,%rsp
  0x00007f32dd046368:   push   %rcx
  0x00007f32dd046369:   push   %rdx
  0x00007f32dd04636a:   push   %rbx
  0x00007f32dd04636b:   push   %rbp
  0x00007f32dd04636c:   push   %r12
  0x00007f32dd04636e:   push   %r13
  0x00007f32dd046370:   push   %r14
  0x00007f32dd046372:   push   %r15
  0x00007f32dd046374:   mov    %rsp,%rax
  0x00007f32dd046377:   sub    $0x220,%rsp
  0x00007f32dd04637e:   and    $0xffffffffffffffe0,%rsp
  0x00007f32dd046382:   mov    %rax,0x218(%rsp)
  0x00007f32dd04638a:   mov    %rcx,%r9
  0x00007f32dd04638d:   mov    %rdx,%r8
  0x00007f32dd046390:   mov    %rsi,%rdx
  0x00007f32dd046393:   mov    %rdi,%rcx
  0x00007f32dd046396:   lea    (%rcx),%rcx
  0x00007f32dd046399:   mov    %rdx,%rdx
  0x00007f32dd04639c:   xor    %rax,%rax
  0x00007f32dd04639f:   cmp    %r9,%r8
  0x00007f32dd0463a2:   jae    Stub::sha256_implCompressMB+78 0x00007f32dd0463ae
  0x00007f32dd0463a4:   add    $0x40,%r8
  0x00007f32dd0463a8:   add    $0x40,%rax
  0x00007f32dd0463ac:   jmp    Stub::sha256_implCompressMB+63 0x00007f32dd04639f
  0x00007f32dd0463ae:   mov    %rax,%r8
  0x00007f32dd0463b1:   cmp    $0x0,%r8
  0x00007f32dd0463b5:   je     Stub::sha256_implCompressMB+4402 0x00007f32dd047492
  0x00007f32dd0463bb:   lea    -0x40(%rcx,%r8,1),%r8
  0x00007f32dd0463c0:   mov    %r8,0x200(%rsp)
  0x00007f32dd0463c8:   cmp    %r8,%rcx
  0x00007f32dd0463cb:   je     Stub::sha256_implCompressMB+4341 0x00007f32dd047455
  0x00007f32dd0463d1:   mov    (%rdx),%eax
  0x00007f32dd0463d3:   mov    0x4(%rdx),%ebx
  0x00007f32dd0463d6:   mov    0x8(%rdx),%edi
  0x00007f32dd0463d9:   mov    0xc(%rdx),%esi
  0x00007f32dd0463dc:   mov    0x10(%rdx),%r8d
  0x00007f32dd0463e0:   mov    0x14(%rdx),%r9d
  0x00007f32dd0463e4:   mov    0x1c(%rdx),%r11d
  0x00007f32dd0463e8:   vmovdqu -0x1230(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007f32dd0463f0:   vmovdqu -0x1218(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007f32dd0451e0
  0x00007f32dd0463f8:   vmovdqu -0x1200(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007f32dd045200
  0x00007f32dd046400:   mov    0x18(%rdx),%r10d
  0x00007f32dd046404:   mov    %rdx,0x210(%rsp)
  0x00007f32dd04640c:   movabs $0x7f32e6eb54c0,%rbp
  0x00007f32dd046416:   vmovdqu (%rcx),%ymm0
  0x00007f32dd04641a:   vmovdqu 0x20(%rcx),%ymm1
  0x00007f32dd04641f:   vmovdqu 0x40(%rcx),%ymm2
  0x00007f32dd046424:   vmovdqu 0x60(%rcx),%ymm3
  0x00007f32dd046429:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007f32dd04642e:   vpshufb %ymm13,%ymm1,%ymm1
  0x00007f32dd046433:   vpshufb %ymm13,%ymm2,%ymm2
  0x00007f32dd046438:   vpshufb %ymm13,%ymm3,%ymm3
  0x00007f32dd04643d:   vperm2i128 $0x20,%ymm2,%ymm0,%ymm4
  0x00007f32dd046443:   vperm2i128 $0x31,%ymm2,%ymm0,%ymm5
  0x00007f32dd046449:   vperm2i128 $0x20,%ymm3,%ymm1,%ymm6
  0x00007f32dd04644f:   vperm2i128 $0x31,%ymm3,%ymm1,%ymm7
  0x00007f32dd046455:   add    $0x40,%rcx
  0x00007f32dd046459:   mov    %rcx,0x208(%rsp)
  0x00007f32dd046461:   xor    %rdx,%rdx
  0x00007f32dd046464:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd04646c:   data16 data16 xchg %ax,%ax
  0x00007f32dd046470:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007f32dd046476:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007f32dd04647b:   mov    %eax,%ecx
  0x00007f32dd04647d:   rorx   $0x19,%r8d,%r13d
  0x00007f32dd046483:   rorx   $0xb,%r8d,%r14d
  0x00007f32dd046489:   add    (%rsp,%rdx,1),%r11d
  0x00007f32dd04648d:   or     %edi,%ecx
  0x00007f32dd04648f:   mov    %r9d,%r15d
  0x00007f32dd046492:   rorx   $0xd,%eax,%r12d
  0x00007f32dd046498:   xor    %r14d,%r13d
  0x00007f32dd04649b:   xor    %r10d,%r15d
  0x00007f32dd04649e:   rorx   $0x6,%r8d,%r14d
  0x00007f32dd0464a4:   and    %r8d,%r15d
  0x00007f32dd0464a7:   xor    %r14d,%r13d
  0x00007f32dd0464aa:   rorx   $0x16,%eax,%r14d
  0x00007f32dd0464b0:   add    %r11d,%esi
  0x00007f32dd0464b3:   and    %ebx,%ecx
  0x00007f32dd0464b5:   xor    %r12d,%r14d
  0x00007f32dd0464b8:   rorx   $0x2,%eax,%r12d
  0x00007f32dd0464be:   xor    %r10d,%r15d
  0x00007f32dd0464c1:   xor    %r12d,%r14d
  0x00007f32dd0464c4:   mov    %eax,%r12d
  0x00007f32dd0464c7:   and    %edi,%r12d
  0x00007f32dd0464ca:   add    %r13d,%r15d
  0x00007f32dd0464cd:   or     %r12d,%ecx
  0x00007f32dd0464d0:   add    %r14d,%r11d
  0x00007f32dd0464d3:   add    %r15d,%esi
  0x00007f32dd0464d6:   add    %r15d,%r11d
  0x00007f32dd0464d9:   add    %ecx,%r11d
  0x00007f32dd0464dc:   vpalignr $0x4,%ymm6,%ymm7,%ymm0
  0x00007f32dd0464e2:   vpaddd %ymm4,%ymm0,%ymm0
  0x00007f32dd0464e6:   vpalignr $0x4,%ymm4,%ymm5,%ymm1
  0x00007f32dd0464ec:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f32dd0464f1:   vpslld $0x19,%ymm1,%ymm3
  0x00007f32dd0464f6:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd0464fa:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f32dd0464ff:   mov    %r11d,%ecx
  0x00007f32dd046502:   rorx   $0x19,%esi,%r13d
  0x00007f32dd046508:   rorx   $0xb,%esi,%r14d
  0x00007f32dd04650e:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007f32dd046513:   or     %ebx,%ecx
  0x00007f32dd046515:   mov    %r8d,%r15d
  0x00007f32dd046518:   rorx   $0xd,%r11d,%r12d
  0x00007f32dd04651e:   xor    %r14d,%r13d
  0x00007f32dd046521:   xor    %r9d,%r15d
  0x00007f32dd046524:   rorx   $0x6,%esi,%r14d
  0x00007f32dd04652a:   and    %esi,%r15d
  0x00007f32dd04652d:   xor    %r14d,%r13d
  0x00007f32dd046530:   rorx   $0x16,%r11d,%r14d
  0x00007f32dd046536:   add    %r10d,%edi
  0x00007f32dd046539:   and    %eax,%ecx
  0x00007f32dd04653b:   xor    %r12d,%r14d
  0x00007f32dd04653e:   rorx   $0x2,%r11d,%r12d
  0x00007f32dd046544:   xor    %r9d,%r15d
  0x00007f32dd046547:   xor    %r12d,%r14d
  0x00007f32dd04654a:   mov    %r11d,%r12d
  0x00007f32dd04654d:   and    %ebx,%r12d
  0x00007f32dd046550:   add    %r13d,%r15d
  0x00007f32dd046553:   or     %r12d,%ecx
  0x00007f32dd046556:   add    %r14d,%r10d
  0x00007f32dd046559:   add    %r15d,%edi
  0x00007f32dd04655c:   add    %r15d,%r10d
  0x00007f32dd04655f:   add    %ecx,%r10d
  0x00007f32dd046562:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f32dd046567:   vpslld $0xe,%ymm1,%ymm1
  0x00007f32dd04656c:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f32dd046570:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f32dd046574:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f32dd046579:   vpshufd $0xfa,%ymm7,%ymm2
  0x00007f32dd04657e:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f32dd046582:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f32dd046587:   mov    %r10d,%ecx
  0x00007f32dd04658a:   rorx   $0x19,%edi,%r13d
  0x00007f32dd046590:   rorx   $0xb,%edi,%r14d
  0x00007f32dd046596:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007f32dd04659b:   or     %eax,%ecx
  0x00007f32dd04659d:   mov    %esi,%r15d
  0x00007f32dd0465a0:   rorx   $0xd,%r10d,%r12d
  0x00007f32dd0465a6:   xor    %r14d,%r13d
  0x00007f32dd0465a9:   xor    %r8d,%r15d
  0x00007f32dd0465ac:   rorx   $0x6,%edi,%r14d
  0x00007f32dd0465b2:   and    %edi,%r15d
  0x00007f32dd0465b5:   xor    %r14d,%r13d
  0x00007f32dd0465b8:   rorx   $0x16,%r10d,%r14d
  0x00007f32dd0465be:   add    %r9d,%ebx
  0x00007f32dd0465c1:   and    %r11d,%ecx
  0x00007f32dd0465c4:   xor    %r12d,%r14d
  0x00007f32dd0465c7:   rorx   $0x2,%r10d,%r12d
  0x00007f32dd0465cd:   xor    %r8d,%r15d
  0x00007f32dd0465d0:   xor    %r12d,%r14d
  0x00007f32dd0465d3:   mov    %r10d,%r12d
  0x00007f32dd0465d6:   and    %eax,%r12d
  0x00007f32dd0465d9:   add    %r13d,%r15d
  0x00007f32dd0465dc:   or     %r12d,%ecx
  0x00007f32dd0465df:   add    %r14d,%r9d
  0x00007f32dd0465e2:   add    %r15d,%ebx
  0x00007f32dd0465e5:   add    %r15d,%r9d
  0x00007f32dd0465e8:   add    %ecx,%r9d
  0x00007f32dd0465eb:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd0465f0:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd0465f5:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd0465f9:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f32dd0465fd:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f32dd046602:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f32dd046607:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f32dd04660c:   mov    %r9d,%ecx
  0x00007f32dd04660f:   rorx   $0x19,%ebx,%r13d
  0x00007f32dd046615:   rorx   $0xb,%ebx,%r14d
  0x00007f32dd04661b:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007f32dd046620:   or     %r11d,%ecx
  0x00007f32dd046623:   mov    %edi,%r15d
  0x00007f32dd046626:   rorx   $0xd,%r9d,%r12d
  0x00007f32dd04662c:   xor    %r14d,%r13d
  0x00007f32dd04662f:   xor    %esi,%r15d
  0x00007f32dd046632:   rorx   $0x6,%ebx,%r14d
  0x00007f32dd046638:   and    %ebx,%r15d
  0x00007f32dd04663b:   xor    %r14d,%r13d
  0x00007f32dd04663e:   rorx   $0x16,%r9d,%r14d
  0x00007f32dd046644:   add    %r8d,%eax
  0x00007f32dd046647:   and    %r10d,%ecx
  0x00007f32dd04664a:   xor    %r12d,%r14d
  0x00007f32dd04664d:   rorx   $0x2,%r9d,%r12d
  0x00007f32dd046653:   xor    %esi,%r15d
  0x00007f32dd046656:   xor    %r12d,%r14d
  0x00007f32dd046659:   mov    %r9d,%r12d
  0x00007f32dd04665c:   and    %r11d,%r12d
  0x00007f32dd04665f:   add    %r13d,%r15d
  0x00007f32dd046662:   or     %r12d,%ecx
  0x00007f32dd046665:   add    %r14d,%r8d
  0x00007f32dd046668:   add    %r15d,%eax
  0x00007f32dd04666b:   add    %r15d,%r8d
  0x00007f32dd04666e:   add    %ecx,%r8d
  0x00007f32dd046671:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f32dd046676:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd04667b:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd046680:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd046684:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f32dd046688:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f32dd04668d:   vpaddd %ymm0,%ymm11,%ymm4
  0x00007f32dd046691:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007f32dd046697:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007f32dd04669d:   mov    %r8d,%ecx
  0x00007f32dd0466a0:   rorx   $0x19,%eax,%r13d
  0x00007f32dd0466a6:   rorx   $0xb,%eax,%r14d
  0x00007f32dd0466ac:   add    0x20(%rsp,%rdx,1),%esi
  0x00007f32dd0466b0:   or     %r10d,%ecx
  0x00007f32dd0466b3:   mov    %ebx,%r15d
  0x00007f32dd0466b6:   rorx   $0xd,%r8d,%r12d
  0x00007f32dd0466bc:   xor    %r14d,%r13d
  0x00007f32dd0466bf:   xor    %edi,%r15d
  0x00007f32dd0466c2:   rorx   $0x6,%eax,%r14d
  0x00007f32dd0466c8:   and    %eax,%r15d
  0x00007f32dd0466cb:   xor    %r14d,%r13d
  0x00007f32dd0466ce:   rorx   $0x16,%r8d,%r14d
  0x00007f32dd0466d4:   add    %esi,%r11d
  0x00007f32dd0466d7:   and    %r9d,%ecx
  0x00007f32dd0466da:   xor    %r12d,%r14d
  0x00007f32dd0466dd:   rorx   $0x2,%r8d,%r12d
  0x00007f32dd0466e3:   xor    %edi,%r15d
  0x00007f32dd0466e6:   xor    %r12d,%r14d
  0x00007f32dd0466e9:   mov    %r8d,%r12d
  0x00007f32dd0466ec:   and    %r10d,%r12d
  0x00007f32dd0466ef:   add    %r13d,%r15d
  0x00007f32dd0466f2:   or     %r12d,%ecx
  0x00007f32dd0466f5:   add    %r14d,%esi
  0x00007f32dd0466f8:   add    %r15d,%r11d
  0x00007f32dd0466fb:   add    %r15d,%esi
  0x00007f32dd0466fe:   add    %ecx,%esi
  0x00007f32dd046700:   vpalignr $0x4,%ymm7,%ymm4,%ymm0
  0x00007f32dd046706:   vpaddd %ymm5,%ymm0,%ymm0
  0x00007f32dd04670a:   vpalignr $0x4,%ymm5,%ymm6,%ymm1
  0x00007f32dd046710:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f32dd046715:   vpslld $0x19,%ymm1,%ymm3
  0x00007f32dd04671a:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd04671e:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f32dd046723:   mov    %esi,%ecx
  0x00007f32dd046725:   rorx   $0x19,%r11d,%r13d
  0x00007f32dd04672b:   rorx   $0xb,%r11d,%r14d
  0x00007f32dd046731:   add    0x24(%rsp,%rdx,1),%edi
  0x00007f32dd046735:   or     %r9d,%ecx
  0x00007f32dd046738:   mov    %eax,%r15d
  0x00007f32dd04673b:   rorx   $0xd,%esi,%r12d
  0x00007f32dd046741:   xor    %r14d,%r13d
  0x00007f32dd046744:   xor    %ebx,%r15d
  0x00007f32dd046747:   rorx   $0x6,%r11d,%r14d
  0x00007f32dd04674d:   and    %r11d,%r15d
  0x00007f32dd046750:   xor    %r14d,%r13d
  0x00007f32dd046753:   rorx   $0x16,%esi,%r14d
  0x00007f32dd046759:   add    %edi,%r10d
  0x00007f32dd04675c:   and    %r8d,%ecx
  0x00007f32dd04675f:   xor    %r12d,%r14d
  0x00007f32dd046762:   rorx   $0x2,%esi,%r12d
  0x00007f32dd046768:   xor    %ebx,%r15d
  0x00007f32dd04676b:   xor    %r12d,%r14d
  0x00007f32dd04676e:   mov    %esi,%r12d
  0x00007f32dd046771:   and    %r9d,%r12d
  0x00007f32dd046774:   add    %r13d,%r15d
  0x00007f32dd046777:   or     %r12d,%ecx
  0x00007f32dd04677a:   add    %r14d,%edi
  0x00007f32dd04677d:   add    %r15d,%r10d
  0x00007f32dd046780:   add    %r15d,%edi
  0x00007f32dd046783:   add    %ecx,%edi
  0x00007f32dd046785:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f32dd04678a:   vpslld $0xe,%ymm1,%ymm1
  0x00007f32dd04678f:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f32dd046793:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f32dd046797:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f32dd04679c:   vpshufd $0xfa,%ymm4,%ymm2
  0x00007f32dd0467a1:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f32dd0467a5:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f32dd0467aa:   mov    %edi,%ecx
  0x00007f32dd0467ac:   rorx   $0x19,%r10d,%r13d
  0x00007f32dd0467b2:   rorx   $0xb,%r10d,%r14d
  0x00007f32dd0467b8:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007f32dd0467bc:   or     %r8d,%ecx
  0x00007f32dd0467bf:   mov    %r11d,%r15d
  0x00007f32dd0467c2:   rorx   $0xd,%edi,%r12d
  0x00007f32dd0467c8:   xor    %r14d,%r13d
  0x00007f32dd0467cb:   xor    %eax,%r15d
  0x00007f32dd0467ce:   rorx   $0x6,%r10d,%r14d
  0x00007f32dd0467d4:   and    %r10d,%r15d
  0x00007f32dd0467d7:   xor    %r14d,%r13d
  0x00007f32dd0467da:   rorx   $0x16,%edi,%r14d
  0x00007f32dd0467e0:   add    %ebx,%r9d
  0x00007f32dd0467e3:   and    %esi,%ecx
  0x00007f32dd0467e5:   xor    %r12d,%r14d
  0x00007f32dd0467e8:   rorx   $0x2,%edi,%r12d
  0x00007f32dd0467ee:   xor    %eax,%r15d
  0x00007f32dd0467f1:   xor    %r12d,%r14d
  0x00007f32dd0467f4:   mov    %edi,%r12d
  0x00007f32dd0467f7:   and    %r8d,%r12d
  0x00007f32dd0467fa:   add    %r13d,%r15d
  0x00007f32dd0467fd:   or     %r12d,%ecx
  0x00007f32dd046800:   add    %r14d,%ebx
  0x00007f32dd046803:   add    %r15d,%r9d
  0x00007f32dd046806:   add    %r15d,%ebx
  0x00007f32dd046809:   add    %ecx,%ebx
  0x00007f32dd04680b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd046810:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd046815:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd046819:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f32dd04681d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f32dd046822:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f32dd046827:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f32dd04682c:   mov    %ebx,%ecx
  0x00007f32dd04682e:   rorx   $0x19,%r9d,%r13d
  0x00007f32dd046834:   rorx   $0xb,%r9d,%r14d
  0x00007f32dd04683a:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007f32dd04683e:   or     %esi,%ecx
  0x00007f32dd046840:   mov    %r10d,%r15d
  0x00007f32dd046843:   rorx   $0xd,%ebx,%r12d
  0x00007f32dd046849:   xor    %r14d,%r13d
  0x00007f32dd04684c:   xor    %r11d,%r15d
  0x00007f32dd04684f:   rorx   $0x6,%r9d,%r14d
  0x00007f32dd046855:   and    %r9d,%r15d
  0x00007f32dd046858:   xor    %r14d,%r13d
  0x00007f32dd04685b:   rorx   $0x16,%ebx,%r14d
  0x00007f32dd046861:   add    %eax,%r8d
  0x00007f32dd046864:   and    %edi,%ecx
  0x00007f32dd046866:   xor    %r12d,%r14d
  0x00007f32dd046869:   rorx   $0x2,%ebx,%r12d
  0x00007f32dd04686f:   xor    %r11d,%r15d
  0x00007f32dd046872:   xor    %r12d,%r14d
  0x00007f32dd046875:   mov    %ebx,%r12d
  0x00007f32dd046878:   and    %esi,%r12d
  0x00007f32dd04687b:   add    %r13d,%r15d
  0x00007f32dd04687e:   or     %r12d,%ecx
  0x00007f32dd046881:   add    %r14d,%eax
  0x00007f32dd046884:   add    %r15d,%r8d
  0x00007f32dd046887:   add    %r15d,%eax
  0x00007f32dd04688a:   add    %ecx,%eax
  0x00007f32dd04688c:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f32dd046891:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd046896:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd04689b:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd04689f:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f32dd0468a3:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f32dd0468a8:   vpaddd %ymm0,%ymm11,%ymm5
  0x00007f32dd0468ac:   vpaddd 0x40(%rbp,%rdx,1),%ymm6,%ymm9
  0x00007f32dd0468b2:   vmovdqu %ymm9,0x40(%rsp,%rdx,1)
  0x00007f32dd0468b8:   mov    %eax,%ecx
  0x00007f32dd0468ba:   rorx   $0x19,%r8d,%r13d
  0x00007f32dd0468c0:   rorx   $0xb,%r8d,%r14d
  0x00007f32dd0468c6:   add    0x40(%rsp,%rdx,1),%r11d
  0x00007f32dd0468cb:   or     %edi,%ecx
  0x00007f32dd0468cd:   mov    %r9d,%r15d
  0x00007f32dd0468d0:   rorx   $0xd,%eax,%r12d
  0x00007f32dd0468d6:   xor    %r14d,%r13d
  0x00007f32dd0468d9:   xor    %r10d,%r15d
  0x00007f32dd0468dc:   rorx   $0x6,%r8d,%r14d
  0x00007f32dd0468e2:   and    %r8d,%r15d
  0x00007f32dd0468e5:   xor    %r14d,%r13d
  0x00007f32dd0468e8:   rorx   $0x16,%eax,%r14d
  0x00007f32dd0468ee:   add    %r11d,%esi
  0x00007f32dd0468f1:   and    %ebx,%ecx
  0x00007f32dd0468f3:   xor    %r12d,%r14d
  0x00007f32dd0468f6:   rorx   $0x2,%eax,%r12d
  0x00007f32dd0468fc:   xor    %r10d,%r15d
  0x00007f32dd0468ff:   xor    %r12d,%r14d
  0x00007f32dd046902:   mov    %eax,%r12d
  0x00007f32dd046905:   and    %edi,%r12d
  0x00007f32dd046908:   add    %r13d,%r15d
  0x00007f32dd04690b:   or     %r12d,%ecx
  0x00007f32dd04690e:   add    %r14d,%r11d
  0x00007f32dd046911:   add    %r15d,%esi
  0x00007f32dd046914:   add    %r15d,%r11d
  0x00007f32dd046917:   add    %ecx,%r11d
  0x00007f32dd04691a:   vpalignr $0x4,%ymm4,%ymm5,%ymm0
  0x00007f32dd046920:   vpaddd %ymm6,%ymm0,%ymm0
  0x00007f32dd046924:   vpalignr $0x4,%ymm6,%ymm7,%ymm1
  0x00007f32dd04692a:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f32dd04692f:   vpslld $0x19,%ymm1,%ymm3
  0x00007f32dd046934:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd046938:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f32dd04693d:   mov    %r11d,%ecx
  0x00007f32dd046940:   rorx   $0x19,%esi,%r13d
  0x00007f32dd046946:   rorx   $0xb,%esi,%r14d
  0x00007f32dd04694c:   add    0x44(%rsp,%rdx,1),%r10d
  0x00007f32dd046951:   or     %ebx,%ecx
  0x00007f32dd046953:   mov    %r8d,%r15d
  0x00007f32dd046956:   rorx   $0xd,%r11d,%r12d
  0x00007f32dd04695c:   xor    %r14d,%r13d
  0x00007f32dd04695f:   xor    %r9d,%r15d
  0x00007f32dd046962:   rorx   $0x6,%esi,%r14d
  0x00007f32dd046968:   and    %esi,%r15d
  0x00007f32dd04696b:   xor    %r14d,%r13d
  0x00007f32dd04696e:   rorx   $0x16,%r11d,%r14d
  0x00007f32dd046974:   add    %r10d,%edi
  0x00007f32dd046977:   and    %eax,%ecx
  0x00007f32dd046979:   xor    %r12d,%r14d
  0x00007f32dd04697c:   rorx   $0x2,%r11d,%r12d
  0x00007f32dd046982:   xor    %r9d,%r15d
  0x00007f32dd046985:   xor    %r12d,%r14d
  0x00007f32dd046988:   mov    %r11d,%r12d
  0x00007f32dd04698b:   and    %ebx,%r12d
  0x00007f32dd04698e:   add    %r13d,%r15d
  0x00007f32dd046991:   or     %r12d,%ecx
  0x00007f32dd046994:   add    %r14d,%r10d
  0x00007f32dd046997:   add    %r15d,%edi
  0x00007f32dd04699a:   add    %r15d,%r10d
  0x00007f32dd04699d:   add    %ecx,%r10d
  0x00007f32dd0469a0:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f32dd0469a5:   vpslld $0xe,%ymm1,%ymm1
  0x00007f32dd0469aa:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f32dd0469ae:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f32dd0469b2:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f32dd0469b7:   vpshufd $0xfa,%ymm5,%ymm2
  0x00007f32dd0469bc:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f32dd0469c0:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f32dd0469c5:   mov    %r10d,%ecx
  0x00007f32dd0469c8:   rorx   $0x19,%edi,%r13d
  0x00007f32dd0469ce:   rorx   $0xb,%edi,%r14d
  0x00007f32dd0469d4:   add    0x48(%rsp,%rdx,1),%r9d
  0x00007f32dd0469d9:   or     %eax,%ecx
  0x00007f32dd0469db:   mov    %esi,%r15d
  0x00007f32dd0469de:   rorx   $0xd,%r10d,%r12d
  0x00007f32dd0469e4:   xor    %r14d,%r13d
  0x00007f32dd0469e7:   xor    %r8d,%r15d
  0x00007f32dd0469ea:   rorx   $0x6,%edi,%r14d
  0x00007f32dd0469f0:   and    %edi,%r15d
  0x00007f32dd0469f3:   xor    %r14d,%r13d
  0x00007f32dd0469f6:   rorx   $0x16,%r10d,%r14d
  0x00007f32dd0469fc:   add    %r9d,%ebx
  0x00007f32dd0469ff:   and    %r11d,%ecx
  0x00007f32dd046a02:   xor    %r12d,%r14d
  0x00007f32dd046a05:   rorx   $0x2,%r10d,%r12d
  0x00007f32dd046a0b:   xor    %r8d,%r15d
  0x00007f32dd046a0e:   xor    %r12d,%r14d
  0x00007f32dd046a11:   mov    %r10d,%r12d
  0x00007f32dd046a14:   and    %eax,%r12d
  0x00007f32dd046a17:   add    %r13d,%r15d
  0x00007f32dd046a1a:   or     %r12d,%ecx
  0x00007f32dd046a1d:   add    %r14d,%r9d
  0x00007f32dd046a20:   add    %r15d,%ebx
  0x00007f32dd046a23:   add    %r15d,%r9d
  0x00007f32dd046a26:   add    %ecx,%r9d
  0x00007f32dd046a29:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd046a2e:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd046a33:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd046a37:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f32dd046a3b:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f32dd046a40:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f32dd046a45:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f32dd046a4a:   mov    %r9d,%ecx
  0x00007f32dd046a4d:   rorx   $0x19,%ebx,%r13d
  0x00007f32dd046a53:   rorx   $0xb,%ebx,%r14d
  0x00007f32dd046a59:   add    0x4c(%rsp,%rdx,1),%r8d
  0x00007f32dd046a5e:   or     %r11d,%ecx
  0x00007f32dd046a61:   mov    %edi,%r15d
  0x00007f32dd046a64:   rorx   $0xd,%r9d,%r12d
  0x00007f32dd046a6a:   xor    %r14d,%r13d
  0x00007f32dd046a6d:   xor    %esi,%r15d
  0x00007f32dd046a70:   rorx   $0x6,%ebx,%r14d
  0x00007f32dd046a76:   and    %ebx,%r15d
  0x00007f32dd046a79:   xor    %r14d,%r13d
  0x00007f32dd046a7c:   rorx   $0x16,%r9d,%r14d
  0x00007f32dd046a82:   add    %r8d,%eax
  0x00007f32dd046a85:   and    %r10d,%ecx
  0x00007f32dd046a88:   xor    %r12d,%r14d
  0x00007f32dd046a8b:   rorx   $0x2,%r9d,%r12d
  0x00007f32dd046a91:   xor    %esi,%r15d
  0x00007f32dd046a94:   xor    %r12d,%r14d
  0x00007f32dd046a97:   mov    %r9d,%r12d
  0x00007f32dd046a9a:   and    %r11d,%r12d
  0x00007f32dd046a9d:   add    %r13d,%r15d
  0x00007f32dd046aa0:   or     %r12d,%ecx
  0x00007f32dd046aa3:   add    %r14d,%r8d
  0x00007f32dd046aa6:   add    %r15d,%eax
  0x00007f32dd046aa9:   add    %r15d,%r8d
  0x00007f32dd046aac:   add    %ecx,%r8d
  0x00007f32dd046aaf:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f32dd046ab4:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd046ab9:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd046abe:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd046ac2:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f32dd046ac6:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f32dd046acb:   vpaddd %ymm0,%ymm11,%ymm6
  0x00007f32dd046acf:   vpaddd 0x60(%rbp,%rdx,1),%ymm7,%ymm9
  0x00007f32dd046ad5:   vmovdqu %ymm9,0x60(%rsp,%rdx,1)
  0x00007f32dd046adb:   mov    %r8d,%ecx
  0x00007f32dd046ade:   rorx   $0x19,%eax,%r13d
  0x00007f32dd046ae4:   rorx   $0xb,%eax,%r14d
  0x00007f32dd046aea:   add    0x60(%rsp,%rdx,1),%esi
  0x00007f32dd046aee:   or     %r10d,%ecx
  0x00007f32dd046af1:   mov    %ebx,%r15d
  0x00007f32dd046af4:   rorx   $0xd,%r8d,%r12d
  0x00007f32dd046afa:   xor    %r14d,%r13d
  0x00007f32dd046afd:   xor    %edi,%r15d
  0x00007f32dd046b00:   rorx   $0x6,%eax,%r14d
  0x00007f32dd046b06:   and    %eax,%r15d
  0x00007f32dd046b09:   xor    %r14d,%r13d
  0x00007f32dd046b0c:   rorx   $0x16,%r8d,%r14d
  0x00007f32dd046b12:   add    %esi,%r11d
  0x00007f32dd046b15:   and    %r9d,%ecx
  0x00007f32dd046b18:   xor    %r12d,%r14d
  0x00007f32dd046b1b:   rorx   $0x2,%r8d,%r12d
  0x00007f32dd046b21:   xor    %edi,%r15d
  0x00007f32dd046b24:   xor    %r12d,%r14d
  0x00007f32dd046b27:   mov    %r8d,%r12d
  0x00007f32dd046b2a:   and    %r10d,%r12d
  0x00007f32dd046b2d:   add    %r13d,%r15d
  0x00007f32dd046b30:   or     %r12d,%ecx
  0x00007f32dd046b33:   add    %r14d,%esi
  0x00007f32dd046b36:   add    %r15d,%r11d
  0x00007f32dd046b39:   add    %r15d,%esi
  0x00007f32dd046b3c:   add    %ecx,%esi
  0x00007f32dd046b3e:   vpalignr $0x4,%ymm5,%ymm6,%ymm0
  0x00007f32dd046b44:   vpaddd %ymm7,%ymm0,%ymm0
  0x00007f32dd046b48:   vpalignr $0x4,%ymm7,%ymm4,%ymm1
  0x00007f32dd046b4e:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f32dd046b53:   vpslld $0x19,%ymm1,%ymm3
  0x00007f32dd046b58:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd046b5c:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f32dd046b61:   mov    %esi,%ecx
  0x00007f32dd046b63:   rorx   $0x19,%r11d,%r13d
  0x00007f32dd046b69:   rorx   $0xb,%r11d,%r14d
  0x00007f32dd046b6f:   add    0x64(%rsp,%rdx,1),%edi
  0x00007f32dd046b73:   or     %r9d,%ecx
  0x00007f32dd046b76:   mov    %eax,%r15d
  0x00007f32dd046b79:   rorx   $0xd,%esi,%r12d
  0x00007f32dd046b7f:   xor    %r14d,%r13d
  0x00007f32dd046b82:   xor    %ebx,%r15d
  0x00007f32dd046b85:   rorx   $0x6,%r11d,%r14d
  0x00007f32dd046b8b:   and    %r11d,%r15d
  0x00007f32dd046b8e:   xor    %r14d,%r13d
  0x00007f32dd046b91:   rorx   $0x16,%esi,%r14d
  0x00007f32dd046b97:   add    %edi,%r10d
  0x00007f32dd046b9a:   and    %r8d,%ecx
  0x00007f32dd046b9d:   xor    %r12d,%r14d
  0x00007f32dd046ba0:   rorx   $0x2,%esi,%r12d
  0x00007f32dd046ba6:   xor    %ebx,%r15d
  0x00007f32dd046ba9:   xor    %r12d,%r14d
  0x00007f32dd046bac:   mov    %esi,%r12d
  0x00007f32dd046baf:   and    %r9d,%r12d
  0x00007f32dd046bb2:   add    %r13d,%r15d
  0x00007f32dd046bb5:   or     %r12d,%ecx
  0x00007f32dd046bb8:   add    %r14d,%edi
  0x00007f32dd046bbb:   add    %r15d,%r10d
  0x00007f32dd046bbe:   add    %r15d,%edi
  0x00007f32dd046bc1:   add    %ecx,%edi
  0x00007f32dd046bc3:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f32dd046bc8:   vpslld $0xe,%ymm1,%ymm1
  0x00007f32dd046bcd:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f32dd046bd1:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f32dd046bd5:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f32dd046bda:   vpshufd $0xfa,%ymm6,%ymm2
  0x00007f32dd046bdf:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f32dd046be3:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f32dd046be8:   mov    %edi,%ecx
  0x00007f32dd046bea:   rorx   $0x19,%r10d,%r13d
  0x00007f32dd046bf0:   rorx   $0xb,%r10d,%r14d
  0x00007f32dd046bf6:   add    0x68(%rsp,%rdx,1),%ebx
  0x00007f32dd046bfa:   or     %r8d,%ecx
  0x00007f32dd046bfd:   mov    %r11d,%r15d
  0x00007f32dd046c00:   rorx   $0xd,%edi,%r12d
  0x00007f32dd046c06:   xor    %r14d,%r13d
  0x00007f32dd046c09:   xor    %eax,%r15d
  0x00007f32dd046c0c:   rorx   $0x6,%r10d,%r14d
  0x00007f32dd046c12:   and    %r10d,%r15d
  0x00007f32dd046c15:   xor    %r14d,%r13d
  0x00007f32dd046c18:   rorx   $0x16,%edi,%r14d
  0x00007f32dd046c1e:   add    %ebx,%r9d
  0x00007f32dd046c21:   and    %esi,%ecx
  0x00007f32dd046c23:   xor    %r12d,%r14d
  0x00007f32dd046c26:   rorx   $0x2,%edi,%r12d
  0x00007f32dd046c2c:   xor    %eax,%r15d
  0x00007f32dd046c2f:   xor    %r12d,%r14d
  0x00007f32dd046c32:   mov    %edi,%r12d
  0x00007f32dd046c35:   and    %r8d,%r12d
  0x00007f32dd046c38:   add    %r13d,%r15d
  0x00007f32dd046c3b:   or     %r12d,%ecx
  0x00007f32dd046c3e:   add    %r14d,%ebx
  0x00007f32dd046c41:   add    %r15d,%r9d
  0x00007f32dd046c44:   add    %r15d,%ebx
  0x00007f32dd046c47:   add    %ecx,%ebx
  0x00007f32dd046c49:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd046c4e:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd046c53:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd046c57:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f32dd046c5b:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f32dd046c60:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f32dd046c65:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f32dd046c6a:   mov    %ebx,%ecx
  0x00007f32dd046c6c:   rorx   $0x19,%r9d,%r13d
  0x00007f32dd046c72:   rorx   $0xb,%r9d,%r14d
  0x00007f32dd046c78:   add    0x6c(%rsp,%rdx,1),%eax
  0x00007f32dd046c7c:   or     %esi,%ecx
  0x00007f32dd046c7e:   mov    %r10d,%r15d
  0x00007f32dd046c81:   rorx   $0xd,%ebx,%r12d
  0x00007f32dd046c87:   xor    %r14d,%r13d
  0x00007f32dd046c8a:   xor    %r11d,%r15d
  0x00007f32dd046c8d:   rorx   $0x6,%r9d,%r14d
  0x00007f32dd046c93:   and    %r9d,%r15d
  0x00007f32dd046c96:   xor    %r14d,%r13d
  0x00007f32dd046c99:   rorx   $0x16,%ebx,%r14d
  0x00007f32dd046c9f:   add    %eax,%r8d
  0x00007f32dd046ca2:   and    %edi,%ecx
  0x00007f32dd046ca4:   xor    %r12d,%r14d
  0x00007f32dd046ca7:   rorx   $0x2,%ebx,%r12d
  0x00007f32dd046cad:   xor    %r11d,%r15d
  0x00007f32dd046cb0:   xor    %r12d,%r14d
  0x00007f32dd046cb3:   mov    %ebx,%r12d
  0x00007f32dd046cb6:   and    %esi,%r12d
  0x00007f32dd046cb9:   add    %r13d,%r15d
  0x00007f32dd046cbc:   or     %r12d,%ecx
  0x00007f32dd046cbf:   add    %r14d,%eax
  0x00007f32dd046cc2:   add    %r15d,%r8d
  0x00007f32dd046cc5:   add    %r15d,%eax
  0x00007f32dd046cc8:   add    %ecx,%eax
  0x00007f32dd046cca:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f32dd046ccf:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd046cd4:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f32dd046cd9:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f32dd046cdd:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f32dd046ce1:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f32dd046ce6:   vpaddd %ymm0,%ymm11,%ymm7
  0x00007f32dd046cea:   add    $0x80,%rdx
  0x00007f32dd046cf1:   cmp    $0x180,%rdx
  0x00007f32dd046cf8:   jb     Stub::sha256_implCompressMB+272 0x00007f32dd046470
  0x00007f32dd046cfe:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007f32dd046d04:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007f32dd046d09:   mov    %r9d,%r15d
  0x00007f32dd046d0c:   rorx   $0x19,%r8d,%r13d
  0x00007f32dd046d12:   rorx   $0xb,%r8d,%r14d
  0x00007f32dd046d18:   xor    %r10d,%r15d
  0x00007f32dd046d1b:   xor    %r14d,%r13d
  0x00007f32dd046d1e:   rorx   $0x6,%r8d,%r14d
  0x00007f32dd046d24:   and    %r8d,%r15d
  0x00007f32dd046d27:   xor    %r14d,%r13d
  0x00007f32dd046d2a:   rorx   $0xd,%eax,%r12d
  0x00007f32dd046d30:   xor    %r10d,%r15d
  0x00007f32dd046d33:   rorx   $0x16,%eax,%r14d
  0x00007f32dd046d39:   mov    %eax,%ecx
  0x00007f32dd046d3b:   xor    %r12d,%r14d
  0x00007f32dd046d3e:   rorx   $0x2,%eax,%r12d
  0x00007f32dd046d44:   add    (%rsp,%rdx,1),%r11d
  0x00007f32dd046d48:   or     %edi,%ecx
  0x00007f32dd046d4a:   xor    %r12d,%r14d
  0x00007f32dd046d4d:   mov    %eax,%r12d
  0x00007f32dd046d50:   and    %ebx,%ecx
  0x00007f32dd046d52:   and    %edi,%r12d
  0x00007f32dd046d55:   add    %r13d,%r15d
  0x00007f32dd046d58:   add    %r11d,%esi
  0x00007f32dd046d5b:   or     %r12d,%ecx
  0x00007f32dd046d5e:   add    %r14d,%r11d
  0x00007f32dd046d61:   add    %r15d,%esi
  0x00007f32dd046d64:   add    %r15d,%r11d
  0x00007f32dd046d67:   mov    %r8d,%r15d
  0x00007f32dd046d6a:   rorx   $0x19,%esi,%r13d
  0x00007f32dd046d70:   rorx   $0xb,%esi,%r14d
  0x00007f32dd046d76:   xor    %r9d,%r15d
  0x00007f32dd046d79:   xor    %r14d,%r13d
  0x00007f32dd046d7c:   rorx   $0x6,%esi,%r14d
  0x00007f32dd046d82:   and    %esi,%r15d
  0x00007f32dd046d85:   add    %ecx,%r11d
  0x00007f32dd046d88:   xor    %r14d,%r13d
  0x00007f32dd046d8b:   rorx   $0xd,%r11d,%r12d
  0x00007f32dd046d91:   xor    %r9d,%r15d
  0x00007f32dd046d94:   rorx   $0x16,%r11d,%r14d
  0x00007f32dd046d9a:   mov    %r11d,%ecx
  0x00007f32dd046d9d:   xor    %r12d,%r14d
  0x00007f32dd046da0:   rorx   $0x2,%r11d,%r12d
  0x00007f32dd046da6:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007f32dd046dab:   or     %ebx,%ecx
  0x00007f32dd046dad:   xor    %r12d,%r14d
  0x00007f32dd046db0:   mov    %r11d,%r12d
  0x00007f32dd046db3:   and    %eax,%ecx
  0x00007f32dd046db5:   and    %ebx,%r12d
  0x00007f32dd046db8:   add    %r13d,%r15d
  0x00007f32dd046dbb:   add    %r10d,%edi
  0x00007f32dd046dbe:   or     %r12d,%ecx
  0x00007f32dd046dc1:   add    %r14d,%r10d
  0x00007f32dd046dc4:   add    %r15d,%edi
  0x00007f32dd046dc7:   add    %r15d,%r10d
  0x00007f32dd046dca:   mov    %esi,%r15d
  0x00007f32dd046dcd:   rorx   $0x19,%edi,%r13d
  0x00007f32dd046dd3:   rorx   $0xb,%edi,%r14d
  0x00007f32dd046dd9:   xor    %r8d,%r15d
  0x00007f32dd046ddc:   xor    %r14d,%r13d
  0x00007f32dd046ddf:   rorx   $0x6,%edi,%r14d
  0x00007f32dd046de5:   and    %edi,%r15d
  0x00007f32dd046de8:   add    %ecx,%r10d
  0x00007f32dd046deb:   xor    %r14d,%r13d
  0x00007f32dd046dee:   rorx   $0xd,%r10d,%r12d
  0x00007f32dd046df4:   xor    %r8d,%r15d
  0x00007f32dd046df7:   rorx   $0x16,%r10d,%r14d
  0x00007f32dd046dfd:   mov    %r10d,%ecx
  0x00007f32dd046e00:   xor    %r12d,%r14d
  0x00007f32dd046e03:   rorx   $0x2,%r10d,%r12d
  0x00007f32dd046e09:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007f32dd046e0e:   or     %eax,%ecx
  0x00007f32dd046e10:   xor    %r12d,%r14d
  0x00007f32dd046e13:   mov    %r10d,%r12d
  0x00007f32dd046e16:   and    %r11d,%ecx
  0x00007f32dd046e19:   and    %eax,%r12d
  0x00007f32dd046e1c:   add    %r13d,%r15d
  0x00007f32dd046e1f:   add    %r9d,%ebx
  0x00007f32dd046e22:   or     %r12d,%ecx
  0x00007f32dd046e25:   add    %r14d,%r9d
  0x00007f32dd046e28:   add    %r15d,%ebx
  0x00007f32dd046e2b:   add    %r15d,%r9d
  0x00007f32dd046e2e:   mov    %edi,%r15d
  0x00007f32dd046e31:   rorx   $0x19,%ebx,%r13d
  0x00007f32dd046e37:   rorx   $0xb,%ebx,%r14d
  0x00007f32dd046e3d:   xor    %esi,%r15d
  0x00007f32dd046e40:   xor    %r14d,%r13d
  0x00007f32dd046e43:   rorx   $0x6,%ebx,%r14d
  0x00007f32dd046e49:   and    %ebx,%r15d
  0x00007f32dd046e4c:   add    %ecx,%r9d
  0x00007f32dd046e4f:   xor    %r14d,%r13d
  0x00007f32dd046e52:   rorx   $0xd,%r9d,%r12d
  0x00007f32dd046e58:   xor    %esi,%r15d
  0x00007f32dd046e5b:   rorx   $0x16,%r9d,%r14d
  0x00007f32dd046e61:   mov    %r9d,%ecx
  0x00007f32dd046e64:   xor    %r12d,%r14d
  0x00007f32dd046e67:   rorx   $0x2,%r9d,%r12d
  0x00007f32dd046e6d:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007f32dd046e72:   or     %r11d,%ecx
  0x00007f32dd046e75:   xor    %r12d,%r14d
  0x00007f32dd046e78:   mov    %r9d,%r12d
  0x00007f32dd046e7b:   and    %r10d,%ecx
  0x00007f32dd046e7e:   and    %r11d,%r12d
  0x00007f32dd046e81:   add    %r13d,%r15d
  0x00007f32dd046e84:   add    %r8d,%eax
  0x00007f32dd046e87:   or     %r12d,%ecx
  0x00007f32dd046e8a:   add    %r14d,%r8d
  0x00007f32dd046e8d:   add    %r15d,%eax
  0x00007f32dd046e90:   add    %r15d,%r8d
  0x00007f32dd046e93:   add    %ecx,%r8d
  0x00007f32dd046e96:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007f32dd046e9c:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007f32dd046ea2:   mov    %ebx,%r15d
  0x00007f32dd046ea5:   rorx   $0x19,%eax,%r13d
  0x00007f32dd046eab:   rorx   $0xb,%eax,%r14d
  0x00007f32dd046eb1:   xor    %edi,%r15d
  0x00007f32dd046eb4:   xor    %r14d,%r13d
  0x00007f32dd046eb7:   rorx   $0x6,%eax,%r14d
  0x00007f32dd046ebd:   and    %eax,%r15d
  0x00007f32dd046ec0:   xor    %r14d,%r13d
  0x00007f32dd046ec3:   rorx   $0xd,%r8d,%r12d
  0x00007f32dd046ec9:   xor    %edi,%r15d
  0x00007f32dd046ecc:   rorx   $0x16,%r8d,%r14d
  0x00007f32dd046ed2:   mov    %r8d,%ecx
  0x00007f32dd046ed5:   xor    %r12d,%r14d
  0x00007f32dd046ed8:   rorx   $0x2,%r8d,%r12d
  0x00007f32dd046ede:   add    0x20(%rsp,%rdx,1),%esi
  0x00007f32dd046ee2:   or     %r10d,%ecx
  0x00007f32dd046ee5:   xor    %r12d,%r14d
  0x00007f32dd046ee8:   mov    %r8d,%r12d
  0x00007f32dd046eeb:   and    %r9d,%ecx
  0x00007f32dd046eee:   and    %r10d,%r12d
  0x00007f32dd046ef1:   add    %r13d,%r15d
  0x00007f32dd046ef4:   add    %esi,%r11d
  0x00007f32dd046ef7:   or     %r12d,%ecx
  0x00007f32dd046efa:   add    %r14d,%esi
  0x00007f32dd046efd:   add    %r15d,%r11d
  0x00007f32dd046f00:   add    %r15d,%esi
  0x00007f32dd046f03:   mov    %eax,%r15d
  0x00007f32dd046f06:   rorx   $0x19,%r11d,%r13d
  0x00007f32dd046f0c:   rorx   $0xb,%r11d,%r14d
  0x00007f32dd046f12:   xor    %ebx,%r15d
  0x00007f32dd046f15:   xor    %r14d,%r13d
  0x00007f32dd046f18:   rorx   $0x6,%r11d,%r14d
  0x00007f32dd046f1e:   and    %r11d,%r15d
  0x00007f32dd046f21:   add    %ecx,%esi
  0x00007f32dd046f23:   xor    %r14d,%r13d
  0x00007f32dd046f26:   rorx   $0xd,%esi,%r12d
  0x00007f32dd046f2c:   xor    %ebx,%r15d
  0x00007f32dd046f2f:   rorx   $0x16,%esi,%r14d
  0x00007f32dd046f35:   mov    %esi,%ecx
  0x00007f32dd046f37:   xor    %r12d,%r14d
  0x00007f32dd046f3a:   rorx   $0x2,%esi,%r12d
  0x00007f32dd046f40:   add    0x24(%rsp,%rdx,1),%edi
  0x00007f32dd046f44:   or     %r9d,%ecx
  0x00007f32dd046f47:   xor    %r12d,%r14d
  0x00007f32dd046f4a:   mov    %esi,%r12d
  0x00007f32dd046f4d:   and    %r8d,%ecx
  0x00007f32dd046f50:   and    %r9d,%r12d
  0x00007f32dd046f53:   add    %r13d,%r15d
  0x00007f32dd046f56:   add    %edi,%r10d
  0x00007f32dd046f59:   or     %r12d,%ecx
  0x00007f32dd046f5c:   add    %r14d,%edi
  0x00007f32dd046f5f:   add    %r15d,%r10d
  0x00007f32dd046f62:   add    %r15d,%edi
  0x00007f32dd046f65:   mov    %r11d,%r15d
  0x00007f32dd046f68:   rorx   $0x19,%r10d,%r13d
  0x00007f32dd046f6e:   rorx   $0xb,%r10d,%r14d
  0x00007f32dd046f74:   xor    %eax,%r15d
  0x00007f32dd046f77:   xor    %r14d,%r13d
  0x00007f32dd046f7a:   rorx   $0x6,%r10d,%r14d
  0x00007f32dd046f80:   and    %r10d,%r15d
  0x00007f32dd046f83:   add    %ecx,%edi
  0x00007f32dd046f85:   xor    %r14d,%r13d
  0x00007f32dd046f88:   rorx   $0xd,%edi,%r12d
  0x00007f32dd046f8e:   xor    %eax,%r15d
  0x00007f32dd046f91:   rorx   $0x16,%edi,%r14d
  0x00007f32dd046f97:   mov    %edi,%ecx
  0x00007f32dd046f99:   xor    %r12d,%r14d
  0x00007f32dd046f9c:   rorx   $0x2,%edi,%r12d
  0x00007f32dd046fa2:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007f32dd046fa6:   or     %r8d,%ecx
  0x00007f32dd046fa9:   xor    %r12d,%r14d
  0x00007f32dd046fac:   mov    %edi,%r12d
  0x00007f32dd046faf:   and    %esi,%ecx
  0x00007f32dd046fb1:   and    %r8d,%r12d
  0x00007f32dd046fb4:   add    %r13d,%r15d
  0x00007f32dd046fb7:   add    %ebx,%r9d
  0x00007f32dd046fba:   or     %r12d,%ecx
  0x00007f32dd046fbd:   add    %r14d,%ebx
  0x00007f32dd046fc0:   add    %r15d,%r9d
  0x00007f32dd046fc3:   add    %r15d,%ebx
  0x00007f32dd046fc6:   mov    %r10d,%r15d
  0x00007f32dd046fc9:   rorx   $0x19,%r9d,%r13d
  0x00007f32dd046fcf:   rorx   $0xb,%r9d,%r14d
  0x00007f32dd046fd5:   xor    %r11d,%r15d
  0x00007f32dd046fd8:   xor    %r14d,%r13d
  0x00007f32dd046fdb:   rorx   $0x6,%r9d,%r14d
  0x00007f32dd046fe1:   and    %r9d,%r15d
  0x00007f32dd046fe4:   add    %ecx,%ebx
  0x00007f32dd046fe6:   xor    %r14d,%r13d
  0x00007f32dd046fe9:   rorx   $0xd,%ebx,%r12d
  0x00007f32dd046fef:   xor    %r11d,%r15d
  0x00007f32dd046ff2:   rorx   $0x16,%ebx,%r14d
  0x00007f32dd046ff8:   mov    %ebx,%ecx
  0x00007f32dd046ffa:   xor    %r12d,%r14d
  0x00007f32dd046ffd:   rorx   $0x2,%ebx,%r12d
  0x00007f32dd047003:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007f32dd047007:   or     %esi,%ecx
  0x00007f32dd047009:   xor    %r12d,%r14d
  0x00007f32dd04700c:   mov    %ebx,%r12d
  0x00007f32dd04700f:   and    %edi,%ecx
  0x00007f32dd047011:   and    %esi,%r12d
  0x00007f32dd047014:   add    %r13d,%r15d
  0x00007f32dd047017:   add    %eax,%r8d
  0x00007f32dd04701a:   or     %r12d,%ecx
  0x00007f32dd04701d:   add    %r14d,%eax
  0x00007f32dd047020:   add    %r15d,%r8d
  0x00007f32dd047023:   add    %r15d,%eax
  0x00007f32dd047026:   add    %ecx,%eax
  0x00007f32dd047028:   add    $0x40,%rdx
  0x00007f32dd04702c:   vmovdqu %ymm6,%ymm4
  0x00007f32dd047030:   vmovdqu %ymm7,%ymm5
  0x00007f32dd047034:   cmp    $0x200,%rdx
  0x00007f32dd04703b:   jb     Stub::sha256_implCompressMB+2462 0x00007f32dd046cfe
  0x00007f32dd047041:   mov    0x210(%rsp),%rdx
  0x00007f32dd047049:   mov    0x208(%rsp),%rcx
  0x00007f32dd047051:   add    (%rdx),%eax
  0x00007f32dd047053:   mov    %eax,(%rdx)
  0x00007f32dd047055:   add    0x4(%rdx),%ebx
  0x00007f32dd047058:   mov    %ebx,0x4(%rdx)
  0x00007f32dd04705b:   add    0x8(%rdx),%edi
  0x00007f32dd04705e:   mov    %edi,0x8(%rdx)
  0x00007f32dd047061:   add    0xc(%rdx),%esi
  0x00007f32dd047064:   mov    %esi,0xc(%rdx)
  0x00007f32dd047067:   add    0x10(%rdx),%r8d
  0x00007f32dd04706b:   mov    %r8d,0x10(%rdx)
  0x00007f32dd04706f:   add    0x14(%rdx),%r9d
  0x00007f32dd047073:   mov    %r9d,0x14(%rdx)
  0x00007f32dd047077:   add    0x18(%rdx),%r10d
  0x00007f32dd04707b:   mov    %r10d,0x18(%rdx)
  0x00007f32dd04707f:   add    0x1c(%rdx),%r11d
  0x00007f32dd047083:   mov    %r11d,0x1c(%rdx)
  0x00007f32dd047087:   cmp    0x200(%rsp),%rcx
  0x00007f32dd04708f:   ja     Stub::sha256_implCompressMB+4402 0x00007f32dd047492
  0x00007f32dd047095:   xor    %rdx,%rdx
  0x00007f32dd047098:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd0470a0:   mov    %r9d,%r15d
  0x00007f32dd0470a3:   rorx   $0x19,%r8d,%r13d
  0x00007f32dd0470a9:   rorx   $0xb,%r8d,%r14d
  0x00007f32dd0470af:   xor    %r10d,%r15d
  0x00007f32dd0470b2:   xor    %r14d,%r13d
  0x00007f32dd0470b5:   rorx   $0x6,%r8d,%r14d
  0x00007f32dd0470bb:   and    %r8d,%r15d
  0x00007f32dd0470be:   xor    %r14d,%r13d
  0x00007f32dd0470c1:   rorx   $0xd,%eax,%r12d
  0x00007f32dd0470c7:   xor    %r10d,%r15d
  0x00007f32dd0470ca:   rorx   $0x16,%eax,%r14d
  0x00007f32dd0470d0:   mov    %eax,%ecx
  0x00007f32dd0470d2:   xor    %r12d,%r14d
  0x00007f32dd0470d5:   rorx   $0x2,%eax,%r12d
  0x00007f32dd0470db:   add    0x10(%rsp,%rdx,1),%r11d
  0x00007f32dd0470e0:   or     %edi,%ecx
  0x00007f32dd0470e2:   xor    %r12d,%r14d
  0x00007f32dd0470e5:   mov    %eax,%r12d
  0x00007f32dd0470e8:   and    %ebx,%ecx
  0x00007f32dd0470ea:   and    %edi,%r12d
  0x00007f32dd0470ed:   add    %r13d,%r15d
  0x00007f32dd0470f0:   add    %r11d,%esi
  0x00007f32dd0470f3:   or     %r12d,%ecx
  0x00007f32dd0470f6:   add    %r14d,%r11d
  0x00007f32dd0470f9:   add    %r15d,%esi
  0x00007f32dd0470fc:   add    %r15d,%r11d
  0x00007f32dd0470ff:   mov    %r8d,%r15d
  0x00007f32dd047102:   rorx   $0x19,%esi,%r13d
  0x00007f32dd047108:   rorx   $0xb,%esi,%r14d
  0x00007f32dd04710e:   xor    %r9d,%r15d
  0x00007f32dd047111:   xor    %r14d,%r13d
  0x00007f32dd047114:   rorx   $0x6,%esi,%r14d
  0x00007f32dd04711a:   and    %esi,%r15d
  0x00007f32dd04711d:   add    %ecx,%r11d
  0x00007f32dd047120:   xor    %r14d,%r13d
  0x00007f32dd047123:   rorx   $0xd,%r11d,%r12d
  0x00007f32dd047129:   xor    %r9d,%r15d
  0x00007f32dd04712c:   rorx   $0x16,%r11d,%r14d
  0x00007f32dd047132:   mov    %r11d,%ecx
  0x00007f32dd047135:   xor    %r12d,%r14d
  0x00007f32dd047138:   rorx   $0x2,%r11d,%r12d
  0x00007f32dd04713e:   add    0x14(%rsp,%rdx,1),%r10d
  0x00007f32dd047143:   or     %ebx,%ecx
  0x00007f32dd047145:   xor    %r12d,%r14d
  0x00007f32dd047148:   mov    %r11d,%r12d
  0x00007f32dd04714b:   and    %eax,%ecx
  0x00007f32dd04714d:   and    %ebx,%r12d
  0x00007f32dd047150:   add    %r13d,%r15d
  0x00007f32dd047153:   add    %r10d,%edi
  0x00007f32dd047156:   or     %r12d,%ecx
  0x00007f32dd047159:   add    %r14d,%r10d
  0x00007f32dd04715c:   add    %r15d,%edi
  0x00007f32dd04715f:   add    %r15d,%r10d
  0x00007f32dd047162:   mov    %esi,%r15d
  0x00007f32dd047165:   rorx   $0x19,%edi,%r13d
  0x00007f32dd04716b:   rorx   $0xb,%edi,%r14d
  0x00007f32dd047171:   xor    %r8d,%r15d
  0x00007f32dd047174:   xor    %r14d,%r13d
  0x00007f32dd047177:   rorx   $0x6,%edi,%r14d
  0x00007f32dd04717d:   and    %edi,%r15d
  0x00007f32dd047180:   add    %ecx,%r10d
  0x00007f32dd047183:   xor    %r14d,%r13d
  0x00007f32dd047186:   rorx   $0xd,%r10d,%r12d
  0x00007f32dd04718c:   xor    %r8d,%r15d
  0x00007f32dd04718f:   rorx   $0x16,%r10d,%r14d
  0x00007f32dd047195:   mov    %r10d,%ecx
  0x00007f32dd047198:   xor    %r12d,%r14d
  0x00007f32dd04719b:   rorx   $0x2,%r10d,%r12d
  0x00007f32dd0471a1:   add    0x18(%rsp,%rdx,1),%r9d
  0x00007f32dd0471a6:   or     %eax,%ecx
  0x00007f32dd0471a8:   xor    %r12d,%r14d
  0x00007f32dd0471ab:   mov    %r10d,%r12d
  0x00007f32dd0471ae:   and    %r11d,%ecx
  0x00007f32dd0471b1:   and    %eax,%r12d
  0x00007f32dd0471b4:   add    %r13d,%r15d
  0x00007f32dd0471b7:   add    %r9d,%ebx
  0x00007f32dd0471ba:   or     %r12d,%ecx
  0x00007f32dd0471bd:   add    %r14d,%r9d
  0x00007f32dd0471c0:   add    %r15d,%ebx
  0x00007f32dd0471c3:   add    %r15d,%r9d
  0x00007f32dd0471c6:   mov    %edi,%r15d
  0x00007f32dd0471c9:   rorx   $0x19,%ebx,%r13d
  0x00007f32dd0471cf:   rorx   $0xb,%ebx,%r14d
  0x00007f32dd0471d5:   xor    %esi,%r15d
  0x00007f32dd0471d8:   xor    %r14d,%r13d
  0x00007f32dd0471db:   rorx   $0x6,%ebx,%r14d
  0x00007f32dd0471e1:   and    %ebx,%r15d
  0x00007f32dd0471e4:   add    %ecx,%r9d
  0x00007f32dd0471e7:   xor    %r14d,%r13d
  0x00007f32dd0471ea:   rorx   $0xd,%r9d,%r12d
  0x00007f32dd0471f0:   xor    %esi,%r15d
  0x00007f32dd0471f3:   rorx   $0x16,%r9d,%r14d
  0x00007f32dd0471f9:   mov    %r9d,%ecx
  0x00007f32dd0471fc:   xor    %r12d,%r14d
  0x00007f32dd0471ff:   rorx   $0x2,%r9d,%r12d
  0x00007f32dd047205:   add    0x1c(%rsp,%rdx,1),%r8d
  0x00007f32dd04720a:   or     %r11d,%ecx
  0x00007f32dd04720d:   xor    %r12d,%r14d
  0x00007f32dd047210:   mov    %r9d,%r12d
  0x00007f32dd047213:   and    %r10d,%ecx
  0x00007f32dd047216:   and    %r11d,%r12d
  0x00007f32dd047219:   add    %r13d,%r15d
  0x00007f32dd04721c:   add    %r8d,%eax
  0x00007f32dd04721f:   or     %r12d,%ecx
  0x00007f32dd047222:   add    %r14d,%r8d
  0x00007f32dd047225:   add    %r15d,%eax
  0x00007f32dd047228:   add    %r15d,%r8d
  0x00007f32dd04722b:   add    %ecx,%r8d
  0x00007f32dd04722e:   mov    %ebx,%r15d
  0x00007f32dd047231:   rorx   $0x19,%eax,%r13d
  0x00007f32dd047237:   rorx   $0xb,%eax,%r14d
  0x00007f32dd04723d:   xor    %edi,%r15d
  0x00007f32dd047240:   xor    %r14d,%r13d
  0x00007f32dd047243:   rorx   $0x6,%eax,%r14d
  0x00007f32dd047249:   and    %eax,%r15d
  0x00007f32dd04724c:   xor    %r14d,%r13d
  0x00007f32dd04724f:   rorx   $0xd,%r8d,%r12d
  0x00007f32dd047255:   xor    %edi,%r15d
  0x00007f32dd047258:   rorx   $0x16,%r8d,%r14d
  0x00007f32dd04725e:   mov    %r8d,%ecx
  0x00007f32dd047261:   xor    %r12d,%r14d
  0x00007f32dd047264:   rorx   $0x2,%r8d,%r12d
  0x00007f32dd04726a:   add    0x30(%rsp,%rdx,1),%esi
  0x00007f32dd04726e:   or     %r10d,%ecx
  0x00007f32dd047271:   xor    %r12d,%r14d
  0x00007f32dd047274:   mov    %r8d,%r12d
  0x00007f32dd047277:   and    %r9d,%ecx
  0x00007f32dd04727a:   and    %r10d,%r12d
  0x00007f32dd04727d:   add    %r13d,%r15d
  0x00007f32dd047280:   add    %esi,%r11d
  0x00007f32dd047283:   or     %r12d,%ecx
  0x00007f32dd047286:   add    %r14d,%esi
  0x00007f32dd047289:   add    %r15d,%r11d
  0x00007f32dd04728c:   add    %r15d,%esi
  0x00007f32dd04728f:   mov    %eax,%r15d
  0x00007f32dd047292:   rorx   $0x19,%r11d,%r13d
  0x00007f32dd047298:   rorx   $0xb,%r11d,%r14d
  0x00007f32dd04729e:   xor    %ebx,%r15d
  0x00007f32dd0472a1:   xor    %r14d,%r13d
  0x00007f32dd0472a4:   rorx   $0x6,%r11d,%r14d
  0x00007f32dd0472aa:   and    %r11d,%r15d
  0x00007f32dd0472ad:   add    %ecx,%esi
  0x00007f32dd0472af:   xor    %r14d,%r13d
  0x00007f32dd0472b2:   rorx   $0xd,%esi,%r12d
  0x00007f32dd0472b8:   xor    %ebx,%r15d
  0x00007f32dd0472bb:   rorx   $0x16,%esi,%r14d
  0x00007f32dd0472c1:   mov    %esi,%ecx
  0x00007f32dd0472c3:   xor    %r12d,%r14d
  0x00007f32dd0472c6:   rorx   $0x2,%esi,%r12d
  0x00007f32dd0472cc:   add    0x34(%rsp,%rdx,1),%edi
  0x00007f32dd0472d0:   or     %r9d,%ecx
  0x00007f32dd0472d3:   xor    %r12d,%r14d
  0x00007f32dd0472d6:   mov    %esi,%r12d
  0x00007f32dd0472d9:   and    %r8d,%ecx
  0x00007f32dd0472dc:   and    %r9d,%r12d
  0x00007f32dd0472df:   add    %r13d,%r15d
  0x00007f32dd0472e2:   add    %edi,%r10d
  0x00007f32dd0472e5:   or     %r12d,%ecx
  0x00007f32dd0472e8:   add    %r14d,%edi
  0x00007f32dd0472eb:   add    %r15d,%r10d
  0x00007f32dd0472ee:   add    %r15d,%edi
  0x00007f32dd0472f1:   mov    %r11d,%r15d
  0x00007f32dd0472f4:   rorx   $0x19,%r10d,%r13d
  0x00007f32dd0472fa:   rorx   $0xb,%r10d,%r14d
  0x00007f32dd047300:   xor    %eax,%r15d
  0x00007f32dd047303:   xor    %r14d,%r13d
  0x00007f32dd047306:   rorx   $0x6,%r10d,%r14d
  0x00007f32dd04730c:   and    %r10d,%r15d
  0x00007f32dd04730f:   add    %ecx,%edi
  0x00007f32dd047311:   xor    %r14d,%r13d
  0x00007f32dd047314:   rorx   $0xd,%edi,%r12d
  0x00007f32dd04731a:   xor    %eax,%r15d
  0x00007f32dd04731d:   rorx   $0x16,%edi,%r14d
  0x00007f32dd047323:   mov    %edi,%ecx
  0x00007f32dd047325:   xor    %r12d,%r14d
  0x00007f32dd047328:   rorx   $0x2,%edi,%r12d
  0x00007f32dd04732e:   add    0x38(%rsp,%rdx,1),%ebx
  0x00007f32dd047332:   or     %r8d,%ecx
  0x00007f32dd047335:   xor    %r12d,%r14d
  0x00007f32dd047338:   mov    %edi,%r12d
  0x00007f32dd04733b:   and    %esi,%ecx
  0x00007f32dd04733d:   and    %r8d,%r12d
  0x00007f32dd047340:   add    %r13d,%r15d
  0x00007f32dd047343:   add    %ebx,%r9d
  0x00007f32dd047346:   or     %r12d,%ecx
  0x00007f32dd047349:   add    %r14d,%ebx
  0x00007f32dd04734c:   add    %r15d,%r9d
  0x00007f32dd04734f:   add    %r15d,%ebx
  0x00007f32dd047352:   mov    %r10d,%r15d
  0x00007f32dd047355:   rorx   $0x19,%r9d,%r13d
  0x00007f32dd04735b:   rorx   $0xb,%r9d,%r14d
  0x00007f32dd047361:   xor    %r11d,%r15d
  0x00007f32dd047364:   xor    %r14d,%r13d
  0x00007f32dd047367:   rorx   $0x6,%r9d,%r14d
  0x00007f32dd04736d:   and    %r9d,%r15d
  0x00007f32dd047370:   add    %ecx,%ebx
  0x00007f32dd047372:   xor    %r14d,%r13d
  0x00007f32dd047375:   rorx   $0xd,%ebx,%r12d
  0x00007f32dd04737b:   xor    %r11d,%r15d
  0x00007f32dd04737e:   rorx   $0x16,%ebx,%r14d
  0x00007f32dd047384:   mov    %ebx,%ecx
  0x00007f32dd047386:   xor    %r12d,%r14d
  0x00007f32dd047389:   rorx   $0x2,%ebx,%r12d
  0x00007f32dd04738f:   add    0x3c(%rsp,%rdx,1),%eax
  0x00007f32dd047393:   or     %esi,%ecx
  0x00007f32dd047395:   xor    %r12d,%r14d
  0x00007f32dd047398:   mov    %ebx,%r12d
  0x00007f32dd04739b:   and    %edi,%ecx
  0x00007f32dd04739d:   and    %esi,%r12d
  0x00007f32dd0473a0:   add    %r13d,%r15d
  0x00007f32dd0473a3:   add    %eax,%r8d
  0x00007f32dd0473a6:   or     %r12d,%ecx
  0x00007f32dd0473a9:   add    %r14d,%eax
  0x00007f32dd0473ac:   add    %r15d,%r8d
  0x00007f32dd0473af:   add    %r15d,%eax
  0x00007f32dd0473b2:   add    %ecx,%eax
  0x00007f32dd0473b4:   add    $0x40,%rdx
  0x00007f32dd0473b8:   cmp    $0x200,%rdx
  0x00007f32dd0473bf:   jb     Stub::sha256_implCompressMB+3392 0x00007f32dd0470a0
  0x00007f32dd0473c5:   mov    0x210(%rsp),%rdx
  0x00007f32dd0473cd:   mov    0x208(%rsp),%rcx
  0x00007f32dd0473d5:   add    $0x40,%rcx
  0x00007f32dd0473d9:   add    (%rdx),%eax
  0x00007f32dd0473db:   mov    %eax,(%rdx)
  0x00007f32dd0473dd:   add    0x4(%rdx),%ebx
  0x00007f32dd0473e0:   mov    %ebx,0x4(%rdx)
  0x00007f32dd0473e3:   add    0x8(%rdx),%edi
  0x00007f32dd0473e6:   mov    %edi,0x8(%rdx)
  0x00007f32dd0473e9:   add    0xc(%rdx),%esi
  0x00007f32dd0473ec:   mov    %esi,0xc(%rdx)
  0x00007f32dd0473ef:   add    0x10(%rdx),%r8d
  0x00007f32dd0473f3:   mov    %r8d,0x10(%rdx)
  0x00007f32dd0473f7:   add    0x14(%rdx),%r9d
  0x00007f32dd0473fb:   mov    %r9d,0x14(%rdx)
  0x00007f32dd0473ff:   add    0x18(%rdx),%r10d
  0x00007f32dd047403:   mov    %r10d,0x18(%rdx)
  0x00007f32dd047407:   add    0x1c(%rdx),%r11d
  0x00007f32dd04740b:   mov    %r11d,0x1c(%rdx)
  0x00007f32dd04740f:   cmp    0x200(%rsp),%rcx
  0x00007f32dd047417:   jb     Stub::sha256_implCompressMB+172 0x00007f32dd04640c
  0x00007f32dd04741d:   ja     Stub::sha256_implCompressMB+4402 0x00007f32dd047492
  0x00007f32dd04741f:   movabs $0x7f32e6eb54c0,%rbp
  0x00007f32dd047429:   vmovdqu (%rcx),%xmm4
  0x00007f32dd04742d:   vmovdqu 0x10(%rcx),%xmm5
  0x00007f32dd047432:   vmovdqu 0x20(%rcx),%xmm6
  0x00007f32dd047437:   vmovdqu 0x30(%rcx),%xmm7
  0x00007f32dd04743c:   vpshufb %xmm13,%xmm4,%xmm4
  0x00007f32dd047441:   vpshufb %xmm13,%xmm5,%xmm5
  0x00007f32dd047446:   vpshufb %xmm13,%xmm6,%xmm6
  0x00007f32dd04744b:   vpshufb %xmm13,%xmm7,%xmm7
  0x00007f32dd047450:   jmpq   Stub::sha256_implCompressMB+245 0x00007f32dd046455
  0x00007f32dd047455:   mov    (%rdx),%eax
  0x00007f32dd047457:   mov    0x4(%rdx),%ebx
  0x00007f32dd04745a:   mov    0x8(%rdx),%edi
  0x00007f32dd04745d:   mov    0xc(%rdx),%esi
  0x00007f32dd047460:   mov    0x10(%rdx),%r8d
  0x00007f32dd047464:   mov    0x14(%rdx),%r9d
  0x00007f32dd047468:   mov    0x1c(%rdx),%r11d
  0x00007f32dd04746c:   vmovdqu -0x22b4(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007f32dd047474:   vmovdqu -0x229c(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007f32dd0451e0
  0x00007f32dd04747c:   vmovdqu -0x2284(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007f32dd045200
  0x00007f32dd047484:   mov    0x18(%rdx),%r10d
  0x00007f32dd047488:   mov    %rdx,0x210(%rsp)
  0x00007f32dd047490:   jmp    Stub::sha256_implCompressMB+4287 0x00007f32dd04741f
  0x00007f32dd047492:   mov    0x218(%rsp),%rsp
  0x00007f32dd04749a:   pop    %r15
  0x00007f32dd04749c:   pop    %r14
  0x00007f32dd04749e:   pop    %r13
  0x00007f32dd0474a0:   pop    %r12
  0x00007f32dd0474a2:   pop    %rbp
  0x00007f32dd0474a3:   pop    %rbx
  0x00007f32dd0474a4:   pop    %rdx
  0x00007f32dd0474a5:   pop    %rcx
  0x00007f32dd0474a6:   mov    %rdx,%rax
  0x00007f32dd0474a9:   cmp    %rcx,%rax
  0x00007f32dd0474ac:   jae    Stub::sha256_implCompressMB+4436 0x00007f32dd0474b4
  0x00007f32dd0474ae:   add    $0x40,%rax
  0x00007f32dd0474b2:   jmp    Stub::sha256_implCompressMB+4425 0x00007f32dd0474a9
  0x00007f32dd0474b4:   add    $0x20,%rsp
  0x00007f32dd0474b8:   vzeroupper 
  0x00007f32dd0474bb:   leaveq 
  0x00007f32dd0474bc:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::pshuffle_byte_flip_mask_sha512 [0x00007f32dd0474e0, 0x00007f32dd047520] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0474e0:   (bad)  
  0x00007f32dd0474e1:   (bad)  
  0x00007f32dd0474e2:   add    $0x1020304,%eax
  0x00007f32dd0474e7:   add    %cl,(%rdi)
  0x00007f32dd0474e9:   (bad)  
  0x00007f32dd0474ea:   or     $0x90a0b0c,%eax
  0x00007f32dd0474ef:   or     %dl,(%rdi)
  0x00007f32dd0474f1:   (bad)  
  0x00007f32dd0474f2:   adc    $0x11121314,%eax
  0x00007f32dd0474f7:   adc    %bl,(%rdi)
  0x00007f32dd0474f9:   (bad)  
  0x00007f32dd0474fa:   sbb    $0x191a1b1c,%eax
  0x00007f32dd0474ff:   sbb    %al,(%rax)
  0x00007f32dd047501:   add    %al,(%rax)
  0x00007f32dd047503:   add    %al,(%rax)
  0x00007f32dd047505:   add    %al,(%rax)
  0x00007f32dd047507:   add    %al,(%rax)
  0x00007f32dd047509:   add    %al,(%rax)
  0x00007f32dd04750b:   add    %al,(%rax)
  0x00007f32dd04750d:   add    %al,(%rax)
  0x00007f32dd04750f:   add    %bh,%bh
  0x00007f32dd047511:   (bad)  
  0x00007f32dd047512:   (bad)  
  0x00007f32dd047513:   (bad)  
  0x00007f32dd047514:   (bad)  
  0x00007f32dd047515:   (bad)  
  0x00007f32dd047516:   (bad)  
  0x00007f32dd047517:   (bad)  
  0x00007f32dd047518:   (bad)  
  0x00007f32dd047519:   (bad)  
  0x00007f32dd04751a:   (bad)  
  0x00007f32dd04751b:   (bad)  
  0x00007f32dd04751c:   (bad)  
  0x00007f32dd04751d:   (bad)  
  0x00007f32dd04751e:   (bad)  
  0x00007f32dd04751f:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha512_implCompress [0x00007f32dd047520, 0x00007f32dd048335] (3605 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd047520:   push   %rbp
  0x00007f32dd047521:   mov    %rsp,%rbp
  0x00007f32dd047524:   push   %rdx
  0x00007f32dd047525:   push   %rcx
  0x00007f32dd047526:   mov    %rsp,%rax
  0x00007f32dd047529:   sub    $0x70,%rsp
  0x00007f32dd04752d:   and    $0xffffffffffffffe0,%rsp
  0x00007f32dd047531:   mov    %rax,0x38(%rsp)
  0x00007f32dd047536:   mov    %rbp,0x40(%rsp)
  0x00007f32dd04753b:   mov    %rbx,0x48(%rsp)
  0x00007f32dd047540:   mov    %r12,0x50(%rsp)
  0x00007f32dd047545:   mov    %r13,0x58(%rsp)
  0x00007f32dd04754a:   mov    %r14,0x60(%rsp)
  0x00007f32dd04754f:   mov    %r15,0x68(%rsp)
  0x00007f32dd047554:   vpblendd $0xf0,%xmm1,%xmm0,%xmm0
  0x00007f32dd04755a:   vpblendd $0xf0,%ymm1,%ymm0,%ymm0
  0x00007f32dd047560:   xor    %rdx,%rdx
  0x00007f32dd047563:   add    $0x80,%rdx
  0x00007f32dd04756a:   add    %rdi,%rdx
  0x00007f32dd04756d:   mov    %rdx,0x30(%rsp)
  0x00007f32dd047572:   mov    (%rsi),%rax
  0x00007f32dd047575:   mov    0x8(%rsi),%rbx
  0x00007f32dd047579:   mov    0x10(%rsi),%rcx
  0x00007f32dd04757d:   mov    0x18(%rsi),%r8
  0x00007f32dd047581:   mov    0x20(%rsi),%rdx
  0x00007f32dd047585:   mov    0x28(%rsi),%r9
  0x00007f32dd047589:   mov    0x38(%rsi),%r11
  0x00007f32dd04758d:   vmovdqu -0xb5(%rip),%ymm9        # Stub::pshuffle_byte_flip_mask_sha512
  0x00007f32dd047595:   vmovdqu -0x9d(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask_sha512+32 0x00007f32dd047500
  0x00007f32dd04759d:   mov    0x30(%rsi),%r10
  0x00007f32dd0475a1:   movabs $0x7f32e6e60140,%rbp
  0x00007f32dd0475ab:   vmovdqu (%rdi),%ymm4
  0x00007f32dd0475af:   vpshufb %ymm9,%ymm4,%ymm4
  0x00007f32dd0475b4:   vmovdqu 0x20(%rdi),%ymm5
  0x00007f32dd0475b9:   vpshufb %ymm9,%ymm5,%ymm5
  0x00007f32dd0475be:   vmovdqu 0x40(%rdi),%ymm6
  0x00007f32dd0475c3:   vpshufb %ymm9,%ymm6,%ymm6
  0x00007f32dd0475c8:   vmovdqu 0x60(%rdi),%ymm7
  0x00007f32dd0475cd:   vpshufb %ymm9,%ymm7,%ymm7
  0x00007f32dd0475d2:   mov    %rdi,0x28(%rsp)
  0x00007f32dd0475d7:   movq   $0x4,0x20(%rsp)
  0x00007f32dd0475e0:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007f32dd0475e5:   vmovdqu %ymm0,(%rsp)
  0x00007f32dd0475ea:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm0
  0x00007f32dd0475f0:   vpalignr $0x8,%ymm6,%ymm0,%ymm0
  0x00007f32dd0475f6:   vpaddq %ymm4,%ymm0,%ymm0
  0x00007f32dd0475fa:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm1
  0x00007f32dd047600:   vpalignr $0x8,%ymm4,%ymm1,%ymm1
  0x00007f32dd047606:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f32dd04760b:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f32dd047610:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd047614:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f32dd047619:   mov    %rax,%rdi
  0x00007f32dd04761c:   rorx   $0x29,%rdx,%r13
  0x00007f32dd047622:   rorx   $0x12,%rdx,%r14
  0x00007f32dd047628:   add    (%rsp),%r11
  0x00007f32dd04762c:   or     %rcx,%rdi
  0x00007f32dd04762f:   mov    %r9,%r15
  0x00007f32dd047632:   xor    %r10,%r15
  0x00007f32dd047635:   rorx   $0x22,%rax,%r12
  0x00007f32dd04763b:   xor    %r14,%r13
  0x00007f32dd04763e:   rorx   $0xe,%rdx,%r14
  0x00007f32dd047644:   and    %rdx,%r15
  0x00007f32dd047647:   add    %r11,%r8
  0x00007f32dd04764a:   and    %rbx,%rdi
  0x00007f32dd04764d:   xor    %r14,%r13
  0x00007f32dd047650:   rorx   $0x27,%rax,%r14
  0x00007f32dd047656:   xor    %r12,%r14
  0x00007f32dd047659:   rorx   $0x1c,%rax,%r12
  0x00007f32dd04765f:   xor    %r10,%r15
  0x00007f32dd047662:   xor    %r12,%r14
  0x00007f32dd047665:   mov    %rax,%r12
  0x00007f32dd047668:   and    %rcx,%r12
  0x00007f32dd04766b:   add    %r13,%r15
  0x00007f32dd04766e:   or     %r12,%rdi
  0x00007f32dd047671:   add    %r14,%r11
  0x00007f32dd047674:   add    %r15,%r8
  0x00007f32dd047677:   add    %r15,%r11
  0x00007f32dd04767a:   add    %rdi,%r11
  0x00007f32dd04767d:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f32dd047682:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f32dd047687:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f32dd04768b:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f32dd047690:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f32dd047694:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f32dd047698:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm4
  0x00007f32dd04769e:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f32dd0476a3:   vperm2f128 $0x11,%ymm7,%ymm7,%ymm2
  0x00007f32dd0476a9:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f32dd0476ae:   mov    %r11,%rdi
  0x00007f32dd0476b1:   rorx   $0x29,%r8,%r13
  0x00007f32dd0476b7:   rorx   $0x12,%r8,%r14
  0x00007f32dd0476bd:   add    0x8(%rsp),%r10
  0x00007f32dd0476c2:   or     %rbx,%rdi
  0x00007f32dd0476c5:   mov    %rdx,%r15
  0x00007f32dd0476c8:   xor    %r9,%r15
  0x00007f32dd0476cb:   rorx   $0x22,%r11,%r12
  0x00007f32dd0476d1:   xor    %r14,%r13
  0x00007f32dd0476d4:   rorx   $0xe,%r8,%r14
  0x00007f32dd0476da:   and    %r8,%r15
  0x00007f32dd0476dd:   add    %r10,%rcx
  0x00007f32dd0476e0:   and    %rax,%rdi
  0x00007f32dd0476e3:   xor    %r14,%r13
  0x00007f32dd0476e6:   rorx   $0x27,%r11,%r14
  0x00007f32dd0476ec:   xor    %r12,%r14
  0x00007f32dd0476ef:   rorx   $0x1c,%r11,%r12
  0x00007f32dd0476f5:   xor    %r9,%r15
  0x00007f32dd0476f8:   xor    %r12,%r14
  0x00007f32dd0476fb:   mov    %r11,%r12
  0x00007f32dd0476fe:   and    %rbx,%r12
  0x00007f32dd047701:   add    %r13,%r15
  0x00007f32dd047704:   or     %r12,%rdi
  0x00007f32dd047707:   add    %r14,%r10
  0x00007f32dd04770a:   add    %r15,%rcx
  0x00007f32dd04770d:   add    %r15,%r10
  0x00007f32dd047710:   add    %rdi,%r10
  0x00007f32dd047713:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd047718:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f32dd04771d:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd047721:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047725:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f32dd04772a:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f32dd04772f:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd047733:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047737:   vpaddq %ymm8,%ymm4,%ymm4
  0x00007f32dd04773c:   vpsrlq $0x6,%ymm4,%ymm8
  0x00007f32dd047741:   mov    %r10,%rdi
  0x00007f32dd047744:   rorx   $0x29,%rcx,%r13
  0x00007f32dd04774a:   rorx   $0x12,%rcx,%r14
  0x00007f32dd047750:   add    0x10(%rsp),%r9
  0x00007f32dd047755:   or     %rax,%rdi
  0x00007f32dd047758:   mov    %r8,%r15
  0x00007f32dd04775b:   xor    %rdx,%r15
  0x00007f32dd04775e:   rorx   $0x22,%r10,%r12
  0x00007f32dd047764:   xor    %r14,%r13
  0x00007f32dd047767:   rorx   $0xe,%rcx,%r14
  0x00007f32dd04776d:   and    %rcx,%r15
  0x00007f32dd047770:   add    %r9,%rbx
  0x00007f32dd047773:   and    %r11,%rdi
  0x00007f32dd047776:   xor    %r14,%r13
  0x00007f32dd047779:   rorx   $0x27,%r10,%r14
  0x00007f32dd04777f:   xor    %r12,%r14
  0x00007f32dd047782:   rorx   $0x1c,%r10,%r12
  0x00007f32dd047788:   xor    %rdx,%r15
  0x00007f32dd04778b:   xor    %r12,%r14
  0x00007f32dd04778e:   mov    %r10,%r12
  0x00007f32dd047791:   and    %rax,%r12
  0x00007f32dd047794:   add    %r13,%r15
  0x00007f32dd047797:   or     %r12,%rdi
  0x00007f32dd04779a:   add    %r14,%r9
  0x00007f32dd04779d:   add    %r15,%rbx
  0x00007f32dd0477a0:   add    %r15,%r9
  0x00007f32dd0477a3:   add    %rdi,%r9
  0x00007f32dd0477a6:   vpsrlq $0x13,%ymm4,%ymm3
  0x00007f32dd0477ab:   vpsllq $0x2d,%ymm4,%ymm1
  0x00007f32dd0477b0:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd0477b4:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd0477b8:   vpsrlq $0x3d,%ymm4,%ymm3
  0x00007f32dd0477bd:   vpsllq $0x3,%ymm4,%ymm1
  0x00007f32dd0477c2:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd0477c6:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd0477ca:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f32dd0477cf:   vpblendd $0xf0,%ymm2,%ymm4,%ymm4
  0x00007f32dd0477d5:   mov    %r9,%rdi
  0x00007f32dd0477d8:   rorx   $0x29,%rbx,%r13
  0x00007f32dd0477de:   rorx   $0x12,%rbx,%r14
  0x00007f32dd0477e4:   add    0x18(%rsp),%rdx
  0x00007f32dd0477e9:   or     %r11,%rdi
  0x00007f32dd0477ec:   mov    %rcx,%r15
  0x00007f32dd0477ef:   xor    %r8,%r15
  0x00007f32dd0477f2:   rorx   $0x22,%r9,%r12
  0x00007f32dd0477f8:   xor    %r14,%r13
  0x00007f32dd0477fb:   rorx   $0xe,%rbx,%r14
  0x00007f32dd047801:   and    %rbx,%r15
  0x00007f32dd047804:   add    %rdx,%rax
  0x00007f32dd047807:   and    %r10,%rdi
  0x00007f32dd04780a:   xor    %r14,%r13
  0x00007f32dd04780d:   rorx   $0x27,%r9,%r14
  0x00007f32dd047813:   xor    %r12,%r14
  0x00007f32dd047816:   rorx   $0x1c,%r9,%r12
  0x00007f32dd04781c:   xor    %r8,%r15
  0x00007f32dd04781f:   xor    %r12,%r14
  0x00007f32dd047822:   mov    %r9,%r12
  0x00007f32dd047825:   and    %r11,%r12
  0x00007f32dd047828:   add    %r13,%r15
  0x00007f32dd04782b:   or     %r12,%rdi
  0x00007f32dd04782e:   add    %r14,%rdx
  0x00007f32dd047831:   add    %r15,%rax
  0x00007f32dd047834:   add    %r15,%rdx
  0x00007f32dd047837:   add    %rdi,%rdx
  0x00007f32dd04783a:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007f32dd04783f:   vmovdqu %ymm0,(%rsp)
  0x00007f32dd047844:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm0
  0x00007f32dd04784a:   vpalignr $0x8,%ymm7,%ymm0,%ymm0
  0x00007f32dd047850:   vpaddq %ymm5,%ymm0,%ymm0
  0x00007f32dd047854:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm1
  0x00007f32dd04785a:   vpalignr $0x8,%ymm5,%ymm1,%ymm1
  0x00007f32dd047860:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f32dd047865:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f32dd04786a:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd04786e:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f32dd047873:   mov    %rdx,%rdi
  0x00007f32dd047876:   rorx   $0x29,%rax,%r13
  0x00007f32dd04787c:   rorx   $0x12,%rax,%r14
  0x00007f32dd047882:   add    (%rsp),%r8
  0x00007f32dd047886:   or     %r10,%rdi
  0x00007f32dd047889:   mov    %rbx,%r15
  0x00007f32dd04788c:   xor    %rcx,%r15
  0x00007f32dd04788f:   rorx   $0x22,%rdx,%r12
  0x00007f32dd047895:   xor    %r14,%r13
  0x00007f32dd047898:   rorx   $0xe,%rax,%r14
  0x00007f32dd04789e:   and    %rax,%r15
  0x00007f32dd0478a1:   add    %r8,%r11
  0x00007f32dd0478a4:   and    %r9,%rdi
  0x00007f32dd0478a7:   xor    %r14,%r13
  0x00007f32dd0478aa:   rorx   $0x27,%rdx,%r14
  0x00007f32dd0478b0:   xor    %r12,%r14
  0x00007f32dd0478b3:   rorx   $0x1c,%rdx,%r12
  0x00007f32dd0478b9:   xor    %rcx,%r15
  0x00007f32dd0478bc:   xor    %r12,%r14
  0x00007f32dd0478bf:   mov    %rdx,%r12
  0x00007f32dd0478c2:   and    %r10,%r12
  0x00007f32dd0478c5:   add    %r13,%r15
  0x00007f32dd0478c8:   or     %r12,%rdi
  0x00007f32dd0478cb:   add    %r14,%r8
  0x00007f32dd0478ce:   add    %r15,%r11
  0x00007f32dd0478d1:   add    %r15,%r8
  0x00007f32dd0478d4:   add    %rdi,%r8
  0x00007f32dd0478d7:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f32dd0478dc:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f32dd0478e1:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f32dd0478e5:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f32dd0478ea:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f32dd0478ee:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f32dd0478f2:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm5
  0x00007f32dd0478f8:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f32dd0478fd:   vperm2f128 $0x11,%ymm4,%ymm4,%ymm2
  0x00007f32dd047903:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f32dd047908:   mov    %r8,%rdi
  0x00007f32dd04790b:   rorx   $0x29,%r11,%r13
  0x00007f32dd047911:   rorx   $0x12,%r11,%r14
  0x00007f32dd047917:   add    0x8(%rsp),%rcx
  0x00007f32dd04791c:   or     %r9,%rdi
  0x00007f32dd04791f:   mov    %rax,%r15
  0x00007f32dd047922:   xor    %rbx,%r15
  0x00007f32dd047925:   rorx   $0x22,%r8,%r12
  0x00007f32dd04792b:   xor    %r14,%r13
  0x00007f32dd04792e:   rorx   $0xe,%r11,%r14
  0x00007f32dd047934:   and    %r11,%r15
  0x00007f32dd047937:   add    %rcx,%r10
  0x00007f32dd04793a:   and    %rdx,%rdi
  0x00007f32dd04793d:   xor    %r14,%r13
  0x00007f32dd047940:   rorx   $0x27,%r8,%r14
  0x00007f32dd047946:   xor    %r12,%r14
  0x00007f32dd047949:   rorx   $0x1c,%r8,%r12
  0x00007f32dd04794f:   xor    %rbx,%r15
  0x00007f32dd047952:   xor    %r12,%r14
  0x00007f32dd047955:   mov    %r8,%r12
  0x00007f32dd047958:   and    %r9,%r12
  0x00007f32dd04795b:   add    %r13,%r15
  0x00007f32dd04795e:   or     %r12,%rdi
  0x00007f32dd047961:   add    %r14,%rcx
  0x00007f32dd047964:   add    %r15,%r10
  0x00007f32dd047967:   add    %r15,%rcx
  0x00007f32dd04796a:   add    %rdi,%rcx
  0x00007f32dd04796d:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd047972:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f32dd047977:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd04797b:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd04797f:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f32dd047984:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f32dd047989:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd04798d:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047991:   vpaddq %ymm8,%ymm5,%ymm5
  0x00007f32dd047996:   vpsrlq $0x6,%ymm5,%ymm8
  0x00007f32dd04799b:   mov    %rcx,%rdi
  0x00007f32dd04799e:   rorx   $0x29,%r10,%r13
  0x00007f32dd0479a4:   rorx   $0x12,%r10,%r14
  0x00007f32dd0479aa:   add    0x10(%rsp),%rbx
  0x00007f32dd0479af:   or     %rdx,%rdi
  0x00007f32dd0479b2:   mov    %r11,%r15
  0x00007f32dd0479b5:   xor    %rax,%r15
  0x00007f32dd0479b8:   rorx   $0x22,%rcx,%r12
  0x00007f32dd0479be:   xor    %r14,%r13
  0x00007f32dd0479c1:   rorx   $0xe,%r10,%r14
  0x00007f32dd0479c7:   and    %r10,%r15
  0x00007f32dd0479ca:   add    %rbx,%r9
  0x00007f32dd0479cd:   and    %r8,%rdi
  0x00007f32dd0479d0:   xor    %r14,%r13
  0x00007f32dd0479d3:   rorx   $0x27,%rcx,%r14
  0x00007f32dd0479d9:   xor    %r12,%r14
  0x00007f32dd0479dc:   rorx   $0x1c,%rcx,%r12
  0x00007f32dd0479e2:   xor    %rax,%r15
  0x00007f32dd0479e5:   xor    %r12,%r14
  0x00007f32dd0479e8:   mov    %rcx,%r12
  0x00007f32dd0479eb:   and    %rdx,%r12
  0x00007f32dd0479ee:   add    %r13,%r15
  0x00007f32dd0479f1:   or     %r12,%rdi
  0x00007f32dd0479f4:   add    %r14,%rbx
  0x00007f32dd0479f7:   add    %r15,%r9
  0x00007f32dd0479fa:   add    %r15,%rbx
  0x00007f32dd0479fd:   add    %rdi,%rbx
  0x00007f32dd047a00:   vpsrlq $0x13,%ymm5,%ymm3
  0x00007f32dd047a05:   vpsllq $0x2d,%ymm5,%ymm1
  0x00007f32dd047a0a:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd047a0e:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047a12:   vpsrlq $0x3d,%ymm5,%ymm3
  0x00007f32dd047a17:   vpsllq $0x3,%ymm5,%ymm1
  0x00007f32dd047a1c:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd047a20:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047a24:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f32dd047a29:   vpblendd $0xf0,%ymm2,%ymm5,%ymm5
  0x00007f32dd047a2f:   mov    %rbx,%rdi
  0x00007f32dd047a32:   rorx   $0x29,%r9,%r13
  0x00007f32dd047a38:   rorx   $0x12,%r9,%r14
  0x00007f32dd047a3e:   add    0x18(%rsp),%rax
  0x00007f32dd047a43:   or     %r8,%rdi
  0x00007f32dd047a46:   mov    %r10,%r15
  0x00007f32dd047a49:   xor    %r11,%r15
  0x00007f32dd047a4c:   rorx   $0x22,%rbx,%r12
  0x00007f32dd047a52:   xor    %r14,%r13
  0x00007f32dd047a55:   rorx   $0xe,%r9,%r14
  0x00007f32dd047a5b:   and    %r9,%r15
  0x00007f32dd047a5e:   add    %rax,%rdx
  0x00007f32dd047a61:   and    %rcx,%rdi
  0x00007f32dd047a64:   xor    %r14,%r13
  0x00007f32dd047a67:   rorx   $0x27,%rbx,%r14
  0x00007f32dd047a6d:   xor    %r12,%r14
  0x00007f32dd047a70:   rorx   $0x1c,%rbx,%r12
  0x00007f32dd047a76:   xor    %r11,%r15
  0x00007f32dd047a79:   xor    %r12,%r14
  0x00007f32dd047a7c:   mov    %rbx,%r12
  0x00007f32dd047a7f:   and    %r8,%r12
  0x00007f32dd047a82:   add    %r13,%r15
  0x00007f32dd047a85:   or     %r12,%rdi
  0x00007f32dd047a88:   add    %r14,%rax
  0x00007f32dd047a8b:   add    %r15,%rdx
  0x00007f32dd047a8e:   add    %r15,%rax
  0x00007f32dd047a91:   add    %rdi,%rax
  0x00007f32dd047a94:   vpaddq 0x40(%rbp),%ymm6,%ymm0
  0x00007f32dd047a99:   vmovdqu %ymm0,(%rsp)
  0x00007f32dd047a9e:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm0
  0x00007f32dd047aa4:   vpalignr $0x8,%ymm4,%ymm0,%ymm0
  0x00007f32dd047aaa:   vpaddq %ymm6,%ymm0,%ymm0
  0x00007f32dd047aae:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm1
  0x00007f32dd047ab4:   vpalignr $0x8,%ymm6,%ymm1,%ymm1
  0x00007f32dd047aba:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f32dd047abf:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f32dd047ac4:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd047ac8:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f32dd047acd:   mov    %rax,%rdi
  0x00007f32dd047ad0:   rorx   $0x29,%rdx,%r13
  0x00007f32dd047ad6:   rorx   $0x12,%rdx,%r14
  0x00007f32dd047adc:   add    (%rsp),%r11
  0x00007f32dd047ae0:   or     %rcx,%rdi
  0x00007f32dd047ae3:   mov    %r9,%r15
  0x00007f32dd047ae6:   xor    %r10,%r15
  0x00007f32dd047ae9:   rorx   $0x22,%rax,%r12
  0x00007f32dd047aef:   xor    %r14,%r13
  0x00007f32dd047af2:   rorx   $0xe,%rdx,%r14
  0x00007f32dd047af8:   and    %rdx,%r15
  0x00007f32dd047afb:   add    %r11,%r8
  0x00007f32dd047afe:   and    %rbx,%rdi
  0x00007f32dd047b01:   xor    %r14,%r13
  0x00007f32dd047b04:   rorx   $0x27,%rax,%r14
  0x00007f32dd047b0a:   xor    %r12,%r14
  0x00007f32dd047b0d:   rorx   $0x1c,%rax,%r12
  0x00007f32dd047b13:   xor    %r10,%r15
  0x00007f32dd047b16:   xor    %r12,%r14
  0x00007f32dd047b19:   mov    %rax,%r12
  0x00007f32dd047b1c:   and    %rcx,%r12
  0x00007f32dd047b1f:   add    %r13,%r15
  0x00007f32dd047b22:   or     %r12,%rdi
  0x00007f32dd047b25:   add    %r14,%r11
  0x00007f32dd047b28:   add    %r15,%r8
  0x00007f32dd047b2b:   add    %r15,%r11
  0x00007f32dd047b2e:   add    %rdi,%r11
  0x00007f32dd047b31:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f32dd047b36:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f32dd047b3b:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f32dd047b3f:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f32dd047b44:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f32dd047b48:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f32dd047b4c:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm6
  0x00007f32dd047b52:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f32dd047b57:   vperm2f128 $0x11,%ymm5,%ymm5,%ymm2
  0x00007f32dd047b5d:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f32dd047b62:   mov    %r11,%rdi
  0x00007f32dd047b65:   rorx   $0x29,%r8,%r13
  0x00007f32dd047b6b:   rorx   $0x12,%r8,%r14
  0x00007f32dd047b71:   add    0x8(%rsp),%r10
  0x00007f32dd047b76:   or     %rbx,%rdi
  0x00007f32dd047b79:   mov    %rdx,%r15
  0x00007f32dd047b7c:   xor    %r9,%r15
  0x00007f32dd047b7f:   rorx   $0x22,%r11,%r12
  0x00007f32dd047b85:   xor    %r14,%r13
  0x00007f32dd047b88:   rorx   $0xe,%r8,%r14
  0x00007f32dd047b8e:   and    %r8,%r15
  0x00007f32dd047b91:   add    %r10,%rcx
  0x00007f32dd047b94:   and    %rax,%rdi
  0x00007f32dd047b97:   xor    %r14,%r13
  0x00007f32dd047b9a:   rorx   $0x27,%r11,%r14
  0x00007f32dd047ba0:   xor    %r12,%r14
  0x00007f32dd047ba3:   rorx   $0x1c,%r11,%r12
  0x00007f32dd047ba9:   xor    %r9,%r15
  0x00007f32dd047bac:   xor    %r12,%r14
  0x00007f32dd047baf:   mov    %r11,%r12
  0x00007f32dd047bb2:   and    %rbx,%r12
  0x00007f32dd047bb5:   add    %r13,%r15
  0x00007f32dd047bb8:   or     %r12,%rdi
  0x00007f32dd047bbb:   add    %r14,%r10
  0x00007f32dd047bbe:   add    %r15,%rcx
  0x00007f32dd047bc1:   add    %r15,%r10
  0x00007f32dd047bc4:   add    %rdi,%r10
  0x00007f32dd047bc7:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd047bcc:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f32dd047bd1:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd047bd5:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047bd9:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f32dd047bde:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f32dd047be3:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd047be7:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047beb:   vpaddq %ymm8,%ymm6,%ymm6
  0x00007f32dd047bf0:   vpsrlq $0x6,%ymm6,%ymm8
  0x00007f32dd047bf5:   mov    %r10,%rdi
  0x00007f32dd047bf8:   rorx   $0x29,%rcx,%r13
  0x00007f32dd047bfe:   rorx   $0x12,%rcx,%r14
  0x00007f32dd047c04:   add    0x10(%rsp),%r9
  0x00007f32dd047c09:   or     %rax,%rdi
  0x00007f32dd047c0c:   mov    %r8,%r15
  0x00007f32dd047c0f:   xor    %rdx,%r15
  0x00007f32dd047c12:   rorx   $0x22,%r10,%r12
  0x00007f32dd047c18:   xor    %r14,%r13
  0x00007f32dd047c1b:   rorx   $0xe,%rcx,%r14
  0x00007f32dd047c21:   and    %rcx,%r15
  0x00007f32dd047c24:   add    %r9,%rbx
  0x00007f32dd047c27:   and    %r11,%rdi
  0x00007f32dd047c2a:   xor    %r14,%r13
  0x00007f32dd047c2d:   rorx   $0x27,%r10,%r14
  0x00007f32dd047c33:   xor    %r12,%r14
  0x00007f32dd047c36:   rorx   $0x1c,%r10,%r12
  0x00007f32dd047c3c:   xor    %rdx,%r15
  0x00007f32dd047c3f:   xor    %r12,%r14
  0x00007f32dd047c42:   mov    %r10,%r12
  0x00007f32dd047c45:   and    %rax,%r12
  0x00007f32dd047c48:   add    %r13,%r15
  0x00007f32dd047c4b:   or     %r12,%rdi
  0x00007f32dd047c4e:   add    %r14,%r9
  0x00007f32dd047c51:   add    %r15,%rbx
  0x00007f32dd047c54:   add    %r15,%r9
  0x00007f32dd047c57:   add    %rdi,%r9
  0x00007f32dd047c5a:   vpsrlq $0x13,%ymm6,%ymm3
  0x00007f32dd047c5f:   vpsllq $0x2d,%ymm6,%ymm1
  0x00007f32dd047c64:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd047c68:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047c6c:   vpsrlq $0x3d,%ymm6,%ymm3
  0x00007f32dd047c71:   vpsllq $0x3,%ymm6,%ymm1
  0x00007f32dd047c76:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd047c7a:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047c7e:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f32dd047c83:   vpblendd $0xf0,%ymm2,%ymm6,%ymm6
  0x00007f32dd047c89:   mov    %r9,%rdi
  0x00007f32dd047c8c:   rorx   $0x29,%rbx,%r13
  0x00007f32dd047c92:   rorx   $0x12,%rbx,%r14
  0x00007f32dd047c98:   add    0x18(%rsp),%rdx
  0x00007f32dd047c9d:   or     %r11,%rdi
  0x00007f32dd047ca0:   mov    %rcx,%r15
  0x00007f32dd047ca3:   xor    %r8,%r15
  0x00007f32dd047ca6:   rorx   $0x22,%r9,%r12
  0x00007f32dd047cac:   xor    %r14,%r13
  0x00007f32dd047caf:   rorx   $0xe,%rbx,%r14
  0x00007f32dd047cb5:   and    %rbx,%r15
  0x00007f32dd047cb8:   add    %rdx,%rax
  0x00007f32dd047cbb:   and    %r10,%rdi
  0x00007f32dd047cbe:   xor    %r14,%r13
  0x00007f32dd047cc1:   rorx   $0x27,%r9,%r14
  0x00007f32dd047cc7:   xor    %r12,%r14
  0x00007f32dd047cca:   rorx   $0x1c,%r9,%r12
  0x00007f32dd047cd0:   xor    %r8,%r15
  0x00007f32dd047cd3:   xor    %r12,%r14
  0x00007f32dd047cd6:   mov    %r9,%r12
  0x00007f32dd047cd9:   and    %r11,%r12
  0x00007f32dd047cdc:   add    %r13,%r15
  0x00007f32dd047cdf:   or     %r12,%rdi
  0x00007f32dd047ce2:   add    %r14,%rdx
  0x00007f32dd047ce5:   add    %r15,%rax
  0x00007f32dd047ce8:   add    %r15,%rdx
  0x00007f32dd047ceb:   add    %rdi,%rdx
  0x00007f32dd047cee:   vpaddq 0x60(%rbp),%ymm7,%ymm0
  0x00007f32dd047cf3:   vmovdqu %ymm0,(%rsp)
  0x00007f32dd047cf8:   add    $0x80,%rbp
  0x00007f32dd047cff:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm0
  0x00007f32dd047d05:   vpalignr $0x8,%ymm5,%ymm0,%ymm0
  0x00007f32dd047d0b:   vpaddq %ymm7,%ymm0,%ymm0
  0x00007f32dd047d0f:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm1
  0x00007f32dd047d15:   vpalignr $0x8,%ymm7,%ymm1,%ymm1
  0x00007f32dd047d1b:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f32dd047d20:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f32dd047d25:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd047d29:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f32dd047d2e:   mov    %rdx,%rdi
  0x00007f32dd047d31:   rorx   $0x29,%rax,%r13
  0x00007f32dd047d37:   rorx   $0x12,%rax,%r14
  0x00007f32dd047d3d:   add    (%rsp),%r8
  0x00007f32dd047d41:   or     %r10,%rdi
  0x00007f32dd047d44:   mov    %rbx,%r15
  0x00007f32dd047d47:   xor    %rcx,%r15
  0x00007f32dd047d4a:   rorx   $0x22,%rdx,%r12
  0x00007f32dd047d50:   xor    %r14,%r13
  0x00007f32dd047d53:   rorx   $0xe,%rax,%r14
  0x00007f32dd047d59:   and    %rax,%r15
  0x00007f32dd047d5c:   add    %r8,%r11
  0x00007f32dd047d5f:   and    %r9,%rdi
  0x00007f32dd047d62:   xor    %r14,%r13
  0x00007f32dd047d65:   rorx   $0x27,%rdx,%r14
  0x00007f32dd047d6b:   xor    %r12,%r14
  0x00007f32dd047d6e:   rorx   $0x1c,%rdx,%r12
  0x00007f32dd047d74:   xor    %rcx,%r15
  0x00007f32dd047d77:   xor    %r12,%r14
  0x00007f32dd047d7a:   mov    %rdx,%r12
  0x00007f32dd047d7d:   and    %r10,%r12
  0x00007f32dd047d80:   add    %r13,%r15
  0x00007f32dd047d83:   or     %r12,%rdi
  0x00007f32dd047d86:   add    %r14,%r8
  0x00007f32dd047d89:   add    %r15,%r11
  0x00007f32dd047d8c:   add    %r15,%r8
  0x00007f32dd047d8f:   add    %rdi,%r8
  0x00007f32dd047d92:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f32dd047d97:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f32dd047d9c:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f32dd047da0:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f32dd047da5:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f32dd047da9:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f32dd047dad:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm7
  0x00007f32dd047db3:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f32dd047db8:   vperm2f128 $0x11,%ymm6,%ymm6,%ymm2
  0x00007f32dd047dbe:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f32dd047dc3:   mov    %r8,%rdi
  0x00007f32dd047dc6:   rorx   $0x29,%r11,%r13
  0x00007f32dd047dcc:   rorx   $0x12,%r11,%r14
  0x00007f32dd047dd2:   add    0x8(%rsp),%rcx
  0x00007f32dd047dd7:   or     %r9,%rdi
  0x00007f32dd047dda:   mov    %rax,%r15
  0x00007f32dd047ddd:   xor    %rbx,%r15
  0x00007f32dd047de0:   rorx   $0x22,%r8,%r12
  0x00007f32dd047de6:   xor    %r14,%r13
  0x00007f32dd047de9:   rorx   $0xe,%r11,%r14
  0x00007f32dd047def:   and    %r11,%r15
  0x00007f32dd047df2:   add    %rcx,%r10
  0x00007f32dd047df5:   and    %rdx,%rdi
  0x00007f32dd047df8:   xor    %r14,%r13
  0x00007f32dd047dfb:   rorx   $0x27,%r8,%r14
  0x00007f32dd047e01:   xor    %r12,%r14
  0x00007f32dd047e04:   rorx   $0x1c,%r8,%r12
  0x00007f32dd047e0a:   xor    %rbx,%r15
  0x00007f32dd047e0d:   xor    %r12,%r14
  0x00007f32dd047e10:   mov    %r8,%r12
  0x00007f32dd047e13:   and    %r9,%r12
  0x00007f32dd047e16:   add    %r13,%r15
  0x00007f32dd047e19:   or     %r12,%rdi
  0x00007f32dd047e1c:   add    %r14,%rcx
  0x00007f32dd047e1f:   add    %r15,%r10
  0x00007f32dd047e22:   add    %r15,%rcx
  0x00007f32dd047e25:   add    %rdi,%rcx
  0x00007f32dd047e28:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd047e2d:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f32dd047e32:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd047e36:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047e3a:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f32dd047e3f:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f32dd047e44:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd047e48:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047e4c:   vpaddq %ymm8,%ymm7,%ymm7
  0x00007f32dd047e51:   vpsrlq $0x6,%ymm7,%ymm8
  0x00007f32dd047e56:   mov    %rcx,%rdi
  0x00007f32dd047e59:   rorx   $0x29,%r10,%r13
  0x00007f32dd047e5f:   rorx   $0x12,%r10,%r14
  0x00007f32dd047e65:   add    0x10(%rsp),%rbx
  0x00007f32dd047e6a:   or     %rdx,%rdi
  0x00007f32dd047e6d:   mov    %r11,%r15
  0x00007f32dd047e70:   xor    %rax,%r15
  0x00007f32dd047e73:   rorx   $0x22,%rcx,%r12
  0x00007f32dd047e79:   xor    %r14,%r13
  0x00007f32dd047e7c:   rorx   $0xe,%r10,%r14
  0x00007f32dd047e82:   and    %r10,%r15
  0x00007f32dd047e85:   add    %rbx,%r9
  0x00007f32dd047e88:   and    %r8,%rdi
  0x00007f32dd047e8b:   xor    %r14,%r13
  0x00007f32dd047e8e:   rorx   $0x27,%rcx,%r14
  0x00007f32dd047e94:   xor    %r12,%r14
  0x00007f32dd047e97:   rorx   $0x1c,%rcx,%r12
  0x00007f32dd047e9d:   xor    %rax,%r15
  0x00007f32dd047ea0:   xor    %r12,%r14
  0x00007f32dd047ea3:   mov    %rcx,%r12
  0x00007f32dd047ea6:   and    %rdx,%r12
  0x00007f32dd047ea9:   add    %r13,%r15
  0x00007f32dd047eac:   or     %r12,%rdi
  0x00007f32dd047eaf:   add    %r14,%rbx
  0x00007f32dd047eb2:   add    %r15,%r9
  0x00007f32dd047eb5:   add    %r15,%rbx
  0x00007f32dd047eb8:   add    %rdi,%rbx
  0x00007f32dd047ebb:   vpsrlq $0x13,%ymm7,%ymm3
  0x00007f32dd047ec0:   vpsllq $0x2d,%ymm7,%ymm1
  0x00007f32dd047ec5:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd047ec9:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047ecd:   vpsrlq $0x3d,%ymm7,%ymm3
  0x00007f32dd047ed2:   vpsllq $0x3,%ymm7,%ymm1
  0x00007f32dd047ed7:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd047edb:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd047edf:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f32dd047ee4:   vpblendd $0xf0,%ymm2,%ymm7,%ymm7
  0x00007f32dd047eea:   mov    %rbx,%rdi
  0x00007f32dd047eed:   rorx   $0x29,%r9,%r13
  0x00007f32dd047ef3:   rorx   $0x12,%r9,%r14
  0x00007f32dd047ef9:   add    0x18(%rsp),%rax
  0x00007f32dd047efe:   or     %r8,%rdi
  0x00007f32dd047f01:   mov    %r10,%r15
  0x00007f32dd047f04:   xor    %r11,%r15
  0x00007f32dd047f07:   rorx   $0x22,%rbx,%r12
  0x00007f32dd047f0d:   xor    %r14,%r13
  0x00007f32dd047f10:   rorx   $0xe,%r9,%r14
  0x00007f32dd047f16:   and    %r9,%r15
  0x00007f32dd047f19:   add    %rax,%rdx
  0x00007f32dd047f1c:   and    %rcx,%rdi
  0x00007f32dd047f1f:   xor    %r14,%r13
  0x00007f32dd047f22:   rorx   $0x27,%rbx,%r14
  0x00007f32dd047f28:   xor    %r12,%r14
  0x00007f32dd047f2b:   rorx   $0x1c,%rbx,%r12
  0x00007f32dd047f31:   xor    %r11,%r15
  0x00007f32dd047f34:   xor    %r12,%r14
  0x00007f32dd047f37:   mov    %rbx,%r12
  0x00007f32dd047f3a:   and    %r8,%r12
  0x00007f32dd047f3d:   add    %r13,%r15
  0x00007f32dd047f40:   or     %r12,%rdi
  0x00007f32dd047f43:   add    %r14,%rax
  0x00007f32dd047f46:   add    %r15,%rdx
  0x00007f32dd047f49:   add    %r15,%rax
  0x00007f32dd047f4c:   add    %rdi,%rax
  0x00007f32dd047f4f:   subq   $0x1,0x20(%rsp)
  0x00007f32dd047f55:   jne    Stub::sha512_implCompress+192 0x00007f32dd0475e0
  0x00007f32dd047f5b:   movq   $0x2,0x20(%rsp)
  0x00007f32dd047f64:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007f32dd047f69:   vmovdqu %ymm0,(%rsp)
  0x00007f32dd047f6e:   mov    %r9,%r15
  0x00007f32dd047f71:   rorx   $0x29,%rdx,%r13
  0x00007f32dd047f77:   rorx   $0x12,%rdx,%r14
  0x00007f32dd047f7d:   xor    %r10,%r15
  0x00007f32dd047f80:   xor    %r14,%r13
  0x00007f32dd047f83:   rorx   $0xe,%rdx,%r14
  0x00007f32dd047f89:   and    %rdx,%r15
  0x00007f32dd047f8c:   xor    %r14,%r13
  0x00007f32dd047f8f:   rorx   $0x22,%rax,%r12
  0x00007f32dd047f95:   xor    %r10,%r15
  0x00007f32dd047f98:   rorx   $0x27,%rax,%r14
  0x00007f32dd047f9e:   mov    %rax,%rdi
  0x00007f32dd047fa1:   xor    %r12,%r14
  0x00007f32dd047fa4:   rorx   $0x1c,%rax,%r12
  0x00007f32dd047faa:   add    (%rsp),%r11
  0x00007f32dd047fae:   or     %rcx,%rdi
  0x00007f32dd047fb1:   xor    %r12,%r14
  0x00007f32dd047fb4:   mov    %rax,%r12
  0x00007f32dd047fb7:   and    %rbx,%rdi
  0x00007f32dd047fba:   and    %rcx,%r12
  0x00007f32dd047fbd:   add    %r13,%r15
  0x00007f32dd047fc0:   add    %r11,%r8
  0x00007f32dd047fc3:   or     %r12,%rdi
  0x00007f32dd047fc6:   add    %r14,%r11
  0x00007f32dd047fc9:   add    %r15,%r8
  0x00007f32dd047fcc:   add    %r15,%r11
  0x00007f32dd047fcf:   mov    %rdx,%r15
  0x00007f32dd047fd2:   rorx   $0x29,%r8,%r13
  0x00007f32dd047fd8:   rorx   $0x12,%r8,%r14
  0x00007f32dd047fde:   xor    %r9,%r15
  0x00007f32dd047fe1:   xor    %r14,%r13
  0x00007f32dd047fe4:   rorx   $0xe,%r8,%r14
  0x00007f32dd047fea:   and    %r8,%r15
  0x00007f32dd047fed:   add    %rdi,%r11
  0x00007f32dd047ff0:   xor    %r14,%r13
  0x00007f32dd047ff3:   rorx   $0x22,%r11,%r12
  0x00007f32dd047ff9:   xor    %r9,%r15
  0x00007f32dd047ffc:   rorx   $0x27,%r11,%r14
  0x00007f32dd048002:   mov    %r11,%rdi
  0x00007f32dd048005:   xor    %r12,%r14
  0x00007f32dd048008:   rorx   $0x1c,%r11,%r12
  0x00007f32dd04800e:   add    0x8(%rsp),%r10
  0x00007f32dd048013:   or     %rbx,%rdi
  0x00007f32dd048016:   xor    %r12,%r14
  0x00007f32dd048019:   mov    %r11,%r12
  0x00007f32dd04801c:   and    %rax,%rdi
  0x00007f32dd04801f:   and    %rbx,%r12
  0x00007f32dd048022:   add    %r13,%r15
  0x00007f32dd048025:   add    %r10,%rcx
  0x00007f32dd048028:   or     %r12,%rdi
  0x00007f32dd04802b:   add    %r14,%r10
  0x00007f32dd04802e:   add    %r15,%rcx
  0x00007f32dd048031:   add    %r15,%r10
  0x00007f32dd048034:   mov    %r8,%r15
  0x00007f32dd048037:   rorx   $0x29,%rcx,%r13
  0x00007f32dd04803d:   rorx   $0x12,%rcx,%r14
  0x00007f32dd048043:   xor    %rdx,%r15
  0x00007f32dd048046:   xor    %r14,%r13
  0x00007f32dd048049:   rorx   $0xe,%rcx,%r14
  0x00007f32dd04804f:   and    %rcx,%r15
  0x00007f32dd048052:   add    %rdi,%r10
  0x00007f32dd048055:   xor    %r14,%r13
  0x00007f32dd048058:   rorx   $0x22,%r10,%r12
  0x00007f32dd04805e:   xor    %rdx,%r15
  0x00007f32dd048061:   rorx   $0x27,%r10,%r14
  0x00007f32dd048067:   mov    %r10,%rdi
  0x00007f32dd04806a:   xor    %r12,%r14
  0x00007f32dd04806d:   rorx   $0x1c,%r10,%r12
  0x00007f32dd048073:   add    0x10(%rsp),%r9
  0x00007f32dd048078:   or     %rax,%rdi
  0x00007f32dd04807b:   xor    %r12,%r14
  0x00007f32dd04807e:   mov    %r10,%r12
  0x00007f32dd048081:   and    %r11,%rdi
  0x00007f32dd048084:   and    %rax,%r12
  0x00007f32dd048087:   add    %r13,%r15
  0x00007f32dd04808a:   add    %r9,%rbx
  0x00007f32dd04808d:   or     %r12,%rdi
  0x00007f32dd048090:   add    %r14,%r9
  0x00007f32dd048093:   add    %r15,%rbx
  0x00007f32dd048096:   add    %r15,%r9
  0x00007f32dd048099:   mov    %rcx,%r15
  0x00007f32dd04809c:   rorx   $0x29,%rbx,%r13
  0x00007f32dd0480a2:   rorx   $0x12,%rbx,%r14
  0x00007f32dd0480a8:   xor    %r8,%r15
  0x00007f32dd0480ab:   xor    %r14,%r13
  0x00007f32dd0480ae:   rorx   $0xe,%rbx,%r14
  0x00007f32dd0480b4:   and    %rbx,%r15
  0x00007f32dd0480b7:   add    %rdi,%r9
  0x00007f32dd0480ba:   xor    %r14,%r13
  0x00007f32dd0480bd:   rorx   $0x22,%r9,%r12
  0x00007f32dd0480c3:   xor    %r8,%r15
  0x00007f32dd0480c6:   rorx   $0x27,%r9,%r14
  0x00007f32dd0480cc:   mov    %r9,%rdi
  0x00007f32dd0480cf:   xor    %r12,%r14
  0x00007f32dd0480d2:   rorx   $0x1c,%r9,%r12
  0x00007f32dd0480d8:   add    0x18(%rsp),%rdx
  0x00007f32dd0480dd:   or     %r11,%rdi
  0x00007f32dd0480e0:   xor    %r12,%r14
  0x00007f32dd0480e3:   mov    %r9,%r12
  0x00007f32dd0480e6:   and    %r10,%rdi
  0x00007f32dd0480e9:   and    %r11,%r12
  0x00007f32dd0480ec:   add    %r13,%r15
  0x00007f32dd0480ef:   add    %rdx,%rax
  0x00007f32dd0480f2:   or     %r12,%rdi
  0x00007f32dd0480f5:   add    %r14,%rdx
  0x00007f32dd0480f8:   add    %r15,%rax
  0x00007f32dd0480fb:   add    %r15,%rdx
  0x00007f32dd0480fe:   add    %rdi,%rdx
  0x00007f32dd048101:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007f32dd048106:   vmovdqu %ymm0,(%rsp)
  0x00007f32dd04810b:   add    $0x40,%rbp
  0x00007f32dd04810f:   mov    %rbx,%r15
  0x00007f32dd048112:   rorx   $0x29,%rax,%r13
  0x00007f32dd048118:   rorx   $0x12,%rax,%r14
  0x00007f32dd04811e:   xor    %rcx,%r15
  0x00007f32dd048121:   xor    %r14,%r13
  0x00007f32dd048124:   rorx   $0xe,%rax,%r14
  0x00007f32dd04812a:   and    %rax,%r15
  0x00007f32dd04812d:   xor    %r14,%r13
  0x00007f32dd048130:   rorx   $0x22,%rdx,%r12
  0x00007f32dd048136:   xor    %rcx,%r15
  0x00007f32dd048139:   rorx   $0x27,%rdx,%r14
  0x00007f32dd04813f:   mov    %rdx,%rdi
  0x00007f32dd048142:   xor    %r12,%r14
  0x00007f32dd048145:   rorx   $0x1c,%rdx,%r12
  0x00007f32dd04814b:   add    (%rsp),%r8
  0x00007f32dd04814f:   or     %r10,%rdi
  0x00007f32dd048152:   xor    %r12,%r14
  0x00007f32dd048155:   mov    %rdx,%r12
  0x00007f32dd048158:   and    %r9,%rdi
  0x00007f32dd04815b:   and    %r10,%r12
  0x00007f32dd04815e:   add    %r13,%r15
  0x00007f32dd048161:   add    %r8,%r11
  0x00007f32dd048164:   or     %r12,%rdi
  0x00007f32dd048167:   add    %r14,%r8
  0x00007f32dd04816a:   add    %r15,%r11
  0x00007f32dd04816d:   add    %r15,%r8
  0x00007f32dd048170:   mov    %rax,%r15
  0x00007f32dd048173:   rorx   $0x29,%r11,%r13
  0x00007f32dd048179:   rorx   $0x12,%r11,%r14
  0x00007f32dd04817f:   xor    %rbx,%r15
  0x00007f32dd048182:   xor    %r14,%r13
  0x00007f32dd048185:   rorx   $0xe,%r11,%r14
  0x00007f32dd04818b:   and    %r11,%r15
  0x00007f32dd04818e:   add    %rdi,%r8
  0x00007f32dd048191:   xor    %r14,%r13
  0x00007f32dd048194:   rorx   $0x22,%r8,%r12
  0x00007f32dd04819a:   xor    %rbx,%r15
  0x00007f32dd04819d:   rorx   $0x27,%r8,%r14
  0x00007f32dd0481a3:   mov    %r8,%rdi
  0x00007f32dd0481a6:   xor    %r12,%r14
  0x00007f32dd0481a9:   rorx   $0x1c,%r8,%r12
  0x00007f32dd0481af:   add    0x8(%rsp),%rcx
  0x00007f32dd0481b4:   or     %r9,%rdi
  0x00007f32dd0481b7:   xor    %r12,%r14
  0x00007f32dd0481ba:   mov    %r8,%r12
  0x00007f32dd0481bd:   and    %rdx,%rdi
  0x00007f32dd0481c0:   and    %r9,%r12
  0x00007f32dd0481c3:   add    %r13,%r15
  0x00007f32dd0481c6:   add    %rcx,%r10
  0x00007f32dd0481c9:   or     %r12,%rdi
  0x00007f32dd0481cc:   add    %r14,%rcx
  0x00007f32dd0481cf:   add    %r15,%r10
  0x00007f32dd0481d2:   add    %r15,%rcx
  0x00007f32dd0481d5:   mov    %r11,%r15
  0x00007f32dd0481d8:   rorx   $0x29,%r10,%r13
  0x00007f32dd0481de:   rorx   $0x12,%r10,%r14
  0x00007f32dd0481e4:   xor    %rax,%r15
  0x00007f32dd0481e7:   xor    %r14,%r13
  0x00007f32dd0481ea:   rorx   $0xe,%r10,%r14
  0x00007f32dd0481f0:   and    %r10,%r15
  0x00007f32dd0481f3:   add    %rdi,%rcx
  0x00007f32dd0481f6:   xor    %r14,%r13
  0x00007f32dd0481f9:   rorx   $0x22,%rcx,%r12
  0x00007f32dd0481ff:   xor    %rax,%r15
  0x00007f32dd048202:   rorx   $0x27,%rcx,%r14
  0x00007f32dd048208:   mov    %rcx,%rdi
  0x00007f32dd04820b:   xor    %r12,%r14
  0x00007f32dd04820e:   rorx   $0x1c,%rcx,%r12
  0x00007f32dd048214:   add    0x10(%rsp),%rbx
  0x00007f32dd048219:   or     %rdx,%rdi
  0x00007f32dd04821c:   xor    %r12,%r14
  0x00007f32dd04821f:   mov    %rcx,%r12
  0x00007f32dd048222:   and    %r8,%rdi
  0x00007f32dd048225:   and    %rdx,%r12
  0x00007f32dd048228:   add    %r13,%r15
  0x00007f32dd04822b:   add    %rbx,%r9
  0x00007f32dd04822e:   or     %r12,%rdi
  0x00007f32dd048231:   add    %r14,%rbx
  0x00007f32dd048234:   add    %r15,%r9
  0x00007f32dd048237:   add    %r15,%rbx
  0x00007f32dd04823a:   mov    %r10,%r15
  0x00007f32dd04823d:   rorx   $0x29,%r9,%r13
  0x00007f32dd048243:   rorx   $0x12,%r9,%r14
  0x00007f32dd048249:   xor    %r11,%r15
  0x00007f32dd04824c:   xor    %r14,%r13
  0x00007f32dd04824f:   rorx   $0xe,%r9,%r14
  0x00007f32dd048255:   and    %r9,%r15
  0x00007f32dd048258:   add    %rdi,%rbx
  0x00007f32dd04825b:   xor    %r14,%r13
  0x00007f32dd04825e:   rorx   $0x22,%rbx,%r12
  0x00007f32dd048264:   xor    %r11,%r15
  0x00007f32dd048267:   rorx   $0x27,%rbx,%r14
  0x00007f32dd04826d:   mov    %rbx,%rdi
  0x00007f32dd048270:   xor    %r12,%r14
  0x00007f32dd048273:   rorx   $0x1c,%rbx,%r12
  0x00007f32dd048279:   add    0x18(%rsp),%rax
  0x00007f32dd04827e:   or     %r8,%rdi
  0x00007f32dd048281:   xor    %r12,%r14
  0x00007f32dd048284:   mov    %rbx,%r12
  0x00007f32dd048287:   and    %rcx,%rdi
  0x00007f32dd04828a:   and    %r8,%r12
  0x00007f32dd04828d:   add    %r13,%r15
  0x00007f32dd048290:   add    %rax,%rdx
  0x00007f32dd048293:   or     %r12,%rdi
  0x00007f32dd048296:   add    %r14,%rax
  0x00007f32dd048299:   add    %r15,%rdx
  0x00007f32dd04829c:   add    %r15,%rax
  0x00007f32dd04829f:   add    %rdi,%rax
  0x00007f32dd0482a2:   vmovdqu %ymm6,%ymm4
  0x00007f32dd0482a6:   vmovdqu %ymm7,%ymm5
  0x00007f32dd0482aa:   subq   $0x1,0x20(%rsp)
  0x00007f32dd0482b0:   jne    Stub::sha512_implCompress+2628 0x00007f32dd047f64
  0x00007f32dd0482b6:   add    (%rsi),%rax
  0x00007f32dd0482b9:   mov    %rax,(%rsi)
  0x00007f32dd0482bc:   add    0x8(%rsi),%rbx
  0x00007f32dd0482c0:   mov    %rbx,0x8(%rsi)
  0x00007f32dd0482c4:   add    0x10(%rsi),%rcx
  0x00007f32dd0482c8:   mov    %rcx,0x10(%rsi)
  0x00007f32dd0482cc:   add    0x18(%rsi),%r8
  0x00007f32dd0482d0:   mov    %r8,0x18(%rsi)
  0x00007f32dd0482d4:   add    0x20(%rsi),%rdx
  0x00007f32dd0482d8:   mov    %rdx,0x20(%rsi)
  0x00007f32dd0482dc:   add    0x28(%rsi),%r9
  0x00007f32dd0482e0:   mov    %r9,0x28(%rsi)
  0x00007f32dd0482e4:   add    0x30(%rsi),%r10
  0x00007f32dd0482e8:   mov    %r10,0x30(%rsi)
  0x00007f32dd0482ec:   add    0x38(%rsi),%r11
  0x00007f32dd0482f0:   mov    %r11,0x38(%rsi)
  0x00007f32dd0482f4:   mov    0x28(%rsp),%rdi
  0x00007f32dd0482f9:   add    $0x80,%rdi
  0x00007f32dd048300:   cmp    0x30(%rsp),%rdi
  0x00007f32dd048305:   jne    Stub::sha512_implCompress+129 0x00007f32dd0475a1
  0x00007f32dd04830b:   mov    0x40(%rsp),%rbp
  0x00007f32dd048310:   mov    0x48(%rsp),%rbx
  0x00007f32dd048315:   mov    0x50(%rsp),%r12
  0x00007f32dd04831a:   mov    0x58(%rsp),%r13
  0x00007f32dd04831f:   mov    0x60(%rsp),%r14
  0x00007f32dd048324:   mov    0x68(%rsp),%r15
  0x00007f32dd048329:   mov    0x38(%rsp),%rsp
  0x00007f32dd04832e:   pop    %rcx
  0x00007f32dd04832f:   pop    %rdx
  0x00007f32dd048330:   vzeroupper 
  0x00007f32dd048333:   leaveq 
  0x00007f32dd048334:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha512_implCompressMB [0x00007f32dd048340, 0x00007f32dd049185] (3653 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd048340:   push   %rbp
  0x00007f32dd048341:   mov    %rsp,%rbp
  0x00007f32dd048344:   push   %rdx
  0x00007f32dd048345:   push   %rcx
  0x00007f32dd048346:   mov    %rsp,%rax
  0x00007f32dd048349:   sub    $0x70,%rsp
  0x00007f32dd04834d:   and    $0xffffffffffffffe0,%rsp
  0x00007f32dd048351:   mov    %rax,0x38(%rsp)
  0x00007f32dd048356:   mov    %rbp,0x40(%rsp)
  0x00007f32dd04835b:   mov    %rbx,0x48(%rsp)
  0x00007f32dd048360:   mov    %r12,0x50(%rsp)
  0x00007f32dd048365:   mov    %r13,0x58(%rsp)
  0x00007f32dd04836a:   mov    %r14,0x60(%rsp)
  0x00007f32dd04836f:   mov    %r15,0x68(%rsp)
  0x00007f32dd048374:   vpblendd $0xf0,%xmm1,%xmm0,%xmm0
  0x00007f32dd04837a:   vpblendd $0xf0,%ymm1,%ymm0,%ymm0
  0x00007f32dd048380:   xor    %rax,%rax
  0x00007f32dd048383:   cmp    %rcx,%rdx
  0x00007f32dd048386:   jae    Stub::sha512_implCompressMB+87 0x00007f32dd048397
  0x00007f32dd048388:   add    $0x80,%rdx
  0x00007f32dd04838f:   add    $0x80,%rax
  0x00007f32dd048395:   jmp    Stub::sha512_implCompressMB+67 0x00007f32dd048383
  0x00007f32dd048397:   mov    %rax,%rdx
  0x00007f32dd04839a:   cmp    $0x0,%rdx
  0x00007f32dd04839e:   je     Stub::sha512_implCompressMB+3595 0x00007f32dd04914b
  0x00007f32dd0483a4:   add    %rdi,%rdx
  0x00007f32dd0483a7:   mov    %rdx,0x30(%rsp)
  0x00007f32dd0483ac:   mov    (%rsi),%rax
  0x00007f32dd0483af:   mov    0x8(%rsi),%rbx
  0x00007f32dd0483b3:   mov    0x10(%rsi),%rcx
  0x00007f32dd0483b7:   mov    0x18(%rsi),%r8
  0x00007f32dd0483bb:   mov    0x20(%rsi),%rdx
  0x00007f32dd0483bf:   mov    0x28(%rsi),%r9
  0x00007f32dd0483c3:   mov    0x38(%rsi),%r11
  0x00007f32dd0483c7:   vmovdqu -0xeef(%rip),%ymm9        # Stub::pshuffle_byte_flip_mask_sha512
  0x00007f32dd0483cf:   vmovdqu -0xed7(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask_sha512+32 0x00007f32dd047500
  0x00007f32dd0483d7:   mov    0x30(%rsi),%r10
  0x00007f32dd0483db:   movabs $0x7f32e6e60140,%rbp
  0x00007f32dd0483e5:   vmovdqu (%rdi),%ymm4
  0x00007f32dd0483e9:   vpshufb %ymm9,%ymm4,%ymm4
  0x00007f32dd0483ee:   vmovdqu 0x20(%rdi),%ymm5
  0x00007f32dd0483f3:   vpshufb %ymm9,%ymm5,%ymm5
  0x00007f32dd0483f8:   vmovdqu 0x40(%rdi),%ymm6
  0x00007f32dd0483fd:   vpshufb %ymm9,%ymm6,%ymm6
  0x00007f32dd048402:   vmovdqu 0x60(%rdi),%ymm7
  0x00007f32dd048407:   vpshufb %ymm9,%ymm7,%ymm7
  0x00007f32dd04840c:   mov    %rdi,0x28(%rsp)
  0x00007f32dd048411:   movq   $0x4,0x20(%rsp)
  0x00007f32dd04841a:   nopw   0x0(%rax,%rax,1)
  0x00007f32dd048420:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007f32dd048425:   vmovdqu %ymm0,(%rsp)
  0x00007f32dd04842a:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm0
  0x00007f32dd048430:   vpalignr $0x8,%ymm6,%ymm0,%ymm0
  0x00007f32dd048436:   vpaddq %ymm4,%ymm0,%ymm0
  0x00007f32dd04843a:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm1
  0x00007f32dd048440:   vpalignr $0x8,%ymm4,%ymm1,%ymm1
  0x00007f32dd048446:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f32dd04844b:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f32dd048450:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd048454:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f32dd048459:   mov    %rax,%rdi
  0x00007f32dd04845c:   rorx   $0x29,%rdx,%r13
  0x00007f32dd048462:   rorx   $0x12,%rdx,%r14
  0x00007f32dd048468:   add    (%rsp),%r11
  0x00007f32dd04846c:   or     %rcx,%rdi
  0x00007f32dd04846f:   mov    %r9,%r15
  0x00007f32dd048472:   xor    %r10,%r15
  0x00007f32dd048475:   rorx   $0x22,%rax,%r12
  0x00007f32dd04847b:   xor    %r14,%r13
  0x00007f32dd04847e:   rorx   $0xe,%rdx,%r14
  0x00007f32dd048484:   and    %rdx,%r15
  0x00007f32dd048487:   add    %r11,%r8
  0x00007f32dd04848a:   and    %rbx,%rdi
  0x00007f32dd04848d:   xor    %r14,%r13
  0x00007f32dd048490:   rorx   $0x27,%rax,%r14
  0x00007f32dd048496:   xor    %r12,%r14
  0x00007f32dd048499:   rorx   $0x1c,%rax,%r12
  0x00007f32dd04849f:   xor    %r10,%r15
  0x00007f32dd0484a2:   xor    %r12,%r14
  0x00007f32dd0484a5:   mov    %rax,%r12
  0x00007f32dd0484a8:   and    %rcx,%r12
  0x00007f32dd0484ab:   add    %r13,%r15
  0x00007f32dd0484ae:   or     %r12,%rdi
  0x00007f32dd0484b1:   add    %r14,%r11
  0x00007f32dd0484b4:   add    %r15,%r8
  0x00007f32dd0484b7:   add    %r15,%r11
  0x00007f32dd0484ba:   add    %rdi,%r11
  0x00007f32dd0484bd:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f32dd0484c2:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f32dd0484c7:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f32dd0484cb:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f32dd0484d0:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f32dd0484d4:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f32dd0484d8:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm4
  0x00007f32dd0484de:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f32dd0484e3:   vperm2f128 $0x11,%ymm7,%ymm7,%ymm2
  0x00007f32dd0484e9:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f32dd0484ee:   mov    %r11,%rdi
  0x00007f32dd0484f1:   rorx   $0x29,%r8,%r13
  0x00007f32dd0484f7:   rorx   $0x12,%r8,%r14
  0x00007f32dd0484fd:   add    0x8(%rsp),%r10
  0x00007f32dd048502:   or     %rbx,%rdi
  0x00007f32dd048505:   mov    %rdx,%r15
  0x00007f32dd048508:   xor    %r9,%r15
  0x00007f32dd04850b:   rorx   $0x22,%r11,%r12
  0x00007f32dd048511:   xor    %r14,%r13
  0x00007f32dd048514:   rorx   $0xe,%r8,%r14
  0x00007f32dd04851a:   and    %r8,%r15
  0x00007f32dd04851d:   add    %r10,%rcx
  0x00007f32dd048520:   and    %rax,%rdi
  0x00007f32dd048523:   xor    %r14,%r13
  0x00007f32dd048526:   rorx   $0x27,%r11,%r14
  0x00007f32dd04852c:   xor    %r12,%r14
  0x00007f32dd04852f:   rorx   $0x1c,%r11,%r12
  0x00007f32dd048535:   xor    %r9,%r15
  0x00007f32dd048538:   xor    %r12,%r14
  0x00007f32dd04853b:   mov    %r11,%r12
  0x00007f32dd04853e:   and    %rbx,%r12
  0x00007f32dd048541:   add    %r13,%r15
  0x00007f32dd048544:   or     %r12,%rdi
  0x00007f32dd048547:   add    %r14,%r10
  0x00007f32dd04854a:   add    %r15,%rcx
  0x00007f32dd04854d:   add    %r15,%r10
  0x00007f32dd048550:   add    %rdi,%r10
  0x00007f32dd048553:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd048558:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f32dd04855d:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd048561:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd048565:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f32dd04856a:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f32dd04856f:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd048573:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd048577:   vpaddq %ymm8,%ymm4,%ymm4
  0x00007f32dd04857c:   vpsrlq $0x6,%ymm4,%ymm8
  0x00007f32dd048581:   mov    %r10,%rdi
  0x00007f32dd048584:   rorx   $0x29,%rcx,%r13
  0x00007f32dd04858a:   rorx   $0x12,%rcx,%r14
  0x00007f32dd048590:   add    0x10(%rsp),%r9
  0x00007f32dd048595:   or     %rax,%rdi
  0x00007f32dd048598:   mov    %r8,%r15
  0x00007f32dd04859b:   xor    %rdx,%r15
  0x00007f32dd04859e:   rorx   $0x22,%r10,%r12
  0x00007f32dd0485a4:   xor    %r14,%r13
  0x00007f32dd0485a7:   rorx   $0xe,%rcx,%r14
  0x00007f32dd0485ad:   and    %rcx,%r15
  0x00007f32dd0485b0:   add    %r9,%rbx
  0x00007f32dd0485b3:   and    %r11,%rdi
  0x00007f32dd0485b6:   xor    %r14,%r13
  0x00007f32dd0485b9:   rorx   $0x27,%r10,%r14
  0x00007f32dd0485bf:   xor    %r12,%r14
  0x00007f32dd0485c2:   rorx   $0x1c,%r10,%r12
  0x00007f32dd0485c8:   xor    %rdx,%r15
  0x00007f32dd0485cb:   xor    %r12,%r14
  0x00007f32dd0485ce:   mov    %r10,%r12
  0x00007f32dd0485d1:   and    %rax,%r12
  0x00007f32dd0485d4:   add    %r13,%r15
  0x00007f32dd0485d7:   or     %r12,%rdi
  0x00007f32dd0485da:   add    %r14,%r9
  0x00007f32dd0485dd:   add    %r15,%rbx
  0x00007f32dd0485e0:   add    %r15,%r9
  0x00007f32dd0485e3:   add    %rdi,%r9
  0x00007f32dd0485e6:   vpsrlq $0x13,%ymm4,%ymm3
  0x00007f32dd0485eb:   vpsllq $0x2d,%ymm4,%ymm1
  0x00007f32dd0485f0:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd0485f4:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd0485f8:   vpsrlq $0x3d,%ymm4,%ymm3
  0x00007f32dd0485fd:   vpsllq $0x3,%ymm4,%ymm1
  0x00007f32dd048602:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd048606:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd04860a:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f32dd04860f:   vpblendd $0xf0,%ymm2,%ymm4,%ymm4
  0x00007f32dd048615:   mov    %r9,%rdi
  0x00007f32dd048618:   rorx   $0x29,%rbx,%r13
  0x00007f32dd04861e:   rorx   $0x12,%rbx,%r14
  0x00007f32dd048624:   add    0x18(%rsp),%rdx
  0x00007f32dd048629:   or     %r11,%rdi
  0x00007f32dd04862c:   mov    %rcx,%r15
  0x00007f32dd04862f:   xor    %r8,%r15
  0x00007f32dd048632:   rorx   $0x22,%r9,%r12
  0x00007f32dd048638:   xor    %r14,%r13
  0x00007f32dd04863b:   rorx   $0xe,%rbx,%r14
  0x00007f32dd048641:   and    %rbx,%r15
  0x00007f32dd048644:   add    %rdx,%rax
  0x00007f32dd048647:   and    %r10,%rdi
  0x00007f32dd04864a:   xor    %r14,%r13
  0x00007f32dd04864d:   rorx   $0x27,%r9,%r14
  0x00007f32dd048653:   xor    %r12,%r14
  0x00007f32dd048656:   rorx   $0x1c,%r9,%r12
  0x00007f32dd04865c:   xor    %r8,%r15
  0x00007f32dd04865f:   xor    %r12,%r14
  0x00007f32dd048662:   mov    %r9,%r12
  0x00007f32dd048665:   and    %r11,%r12
  0x00007f32dd048668:   add    %r13,%r15
  0x00007f32dd04866b:   or     %r12,%rdi
  0x00007f32dd04866e:   add    %r14,%rdx
  0x00007f32dd048671:   add    %r15,%rax
  0x00007f32dd048674:   add    %r15,%rdx
  0x00007f32dd048677:   add    %rdi,%rdx
  0x00007f32dd04867a:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007f32dd04867f:   vmovdqu %ymm0,(%rsp)
  0x00007f32dd048684:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm0
  0x00007f32dd04868a:   vpalignr $0x8,%ymm7,%ymm0,%ymm0
  0x00007f32dd048690:   vpaddq %ymm5,%ymm0,%ymm0
  0x00007f32dd048694:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm1
  0x00007f32dd04869a:   vpalignr $0x8,%ymm5,%ymm1,%ymm1
  0x00007f32dd0486a0:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f32dd0486a5:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f32dd0486aa:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd0486ae:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f32dd0486b3:   mov    %rdx,%rdi
  0x00007f32dd0486b6:   rorx   $0x29,%rax,%r13
  0x00007f32dd0486bc:   rorx   $0x12,%rax,%r14
  0x00007f32dd0486c2:   add    (%rsp),%r8
  0x00007f32dd0486c6:   or     %r10,%rdi
  0x00007f32dd0486c9:   mov    %rbx,%r15
  0x00007f32dd0486cc:   xor    %rcx,%r15
  0x00007f32dd0486cf:   rorx   $0x22,%rdx,%r12
  0x00007f32dd0486d5:   xor    %r14,%r13
  0x00007f32dd0486d8:   rorx   $0xe,%rax,%r14
  0x00007f32dd0486de:   and    %rax,%r15
  0x00007f32dd0486e1:   add    %r8,%r11
  0x00007f32dd0486e4:   and    %r9,%rdi
  0x00007f32dd0486e7:   xor    %r14,%r13
  0x00007f32dd0486ea:   rorx   $0x27,%rdx,%r14
  0x00007f32dd0486f0:   xor    %r12,%r14
  0x00007f32dd0486f3:   rorx   $0x1c,%rdx,%r12
  0x00007f32dd0486f9:   xor    %rcx,%r15
  0x00007f32dd0486fc:   xor    %r12,%r14
  0x00007f32dd0486ff:   mov    %rdx,%r12
  0x00007f32dd048702:   and    %r10,%r12
  0x00007f32dd048705:   add    %r13,%r15
  0x00007f32dd048708:   or     %r12,%rdi
  0x00007f32dd04870b:   add    %r14,%r8
  0x00007f32dd04870e:   add    %r15,%r11
  0x00007f32dd048711:   add    %r15,%r8
  0x00007f32dd048714:   add    %rdi,%r8
  0x00007f32dd048717:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f32dd04871c:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f32dd048721:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f32dd048725:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f32dd04872a:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f32dd04872e:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f32dd048732:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm5
  0x00007f32dd048738:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f32dd04873d:   vperm2f128 $0x11,%ymm4,%ymm4,%ymm2
  0x00007f32dd048743:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f32dd048748:   mov    %r8,%rdi
  0x00007f32dd04874b:   rorx   $0x29,%r11,%r13
  0x00007f32dd048751:   rorx   $0x12,%r11,%r14
  0x00007f32dd048757:   add    0x8(%rsp),%rcx
  0x00007f32dd04875c:   or     %r9,%rdi
  0x00007f32dd04875f:   mov    %rax,%r15
  0x00007f32dd048762:   xor    %rbx,%r15
  0x00007f32dd048765:   rorx   $0x22,%r8,%r12
  0x00007f32dd04876b:   xor    %r14,%r13
  0x00007f32dd04876e:   rorx   $0xe,%r11,%r14
  0x00007f32dd048774:   and    %r11,%r15
  0x00007f32dd048777:   add    %rcx,%r10
  0x00007f32dd04877a:   and    %rdx,%rdi
  0x00007f32dd04877d:   xor    %r14,%r13
  0x00007f32dd048780:   rorx   $0x27,%r8,%r14
  0x00007f32dd048786:   xor    %r12,%r14
  0x00007f32dd048789:   rorx   $0x1c,%r8,%r12
  0x00007f32dd04878f:   xor    %rbx,%r15
  0x00007f32dd048792:   xor    %r12,%r14
  0x00007f32dd048795:   mov    %r8,%r12
  0x00007f32dd048798:   and    %r9,%r12
  0x00007f32dd04879b:   add    %r13,%r15
  0x00007f32dd04879e:   or     %r12,%rdi
  0x00007f32dd0487a1:   add    %r14,%rcx
  0x00007f32dd0487a4:   add    %r15,%r10
  0x00007f32dd0487a7:   add    %r15,%rcx
  0x00007f32dd0487aa:   add    %rdi,%rcx
  0x00007f32dd0487ad:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd0487b2:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f32dd0487b7:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd0487bb:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd0487bf:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f32dd0487c4:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f32dd0487c9:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd0487cd:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd0487d1:   vpaddq %ymm8,%ymm5,%ymm5
  0x00007f32dd0487d6:   vpsrlq $0x6,%ymm5,%ymm8
  0x00007f32dd0487db:   mov    %rcx,%rdi
  0x00007f32dd0487de:   rorx   $0x29,%r10,%r13
  0x00007f32dd0487e4:   rorx   $0x12,%r10,%r14
  0x00007f32dd0487ea:   add    0x10(%rsp),%rbx
  0x00007f32dd0487ef:   or     %rdx,%rdi
  0x00007f32dd0487f2:   mov    %r11,%r15
  0x00007f32dd0487f5:   xor    %rax,%r15
  0x00007f32dd0487f8:   rorx   $0x22,%rcx,%r12
  0x00007f32dd0487fe:   xor    %r14,%r13
  0x00007f32dd048801:   rorx   $0xe,%r10,%r14
  0x00007f32dd048807:   and    %r10,%r15
  0x00007f32dd04880a:   add    %rbx,%r9
  0x00007f32dd04880d:   and    %r8,%rdi
  0x00007f32dd048810:   xor    %r14,%r13
  0x00007f32dd048813:   rorx   $0x27,%rcx,%r14
  0x00007f32dd048819:   xor    %r12,%r14
  0x00007f32dd04881c:   rorx   $0x1c,%rcx,%r12
  0x00007f32dd048822:   xor    %rax,%r15
  0x00007f32dd048825:   xor    %r12,%r14
  0x00007f32dd048828:   mov    %rcx,%r12
  0x00007f32dd04882b:   and    %rdx,%r12
  0x00007f32dd04882e:   add    %r13,%r15
  0x00007f32dd048831:   or     %r12,%rdi
  0x00007f32dd048834:   add    %r14,%rbx
  0x00007f32dd048837:   add    %r15,%r9
  0x00007f32dd04883a:   add    %r15,%rbx
  0x00007f32dd04883d:   add    %rdi,%rbx
  0x00007f32dd048840:   vpsrlq $0x13,%ymm5,%ymm3
  0x00007f32dd048845:   vpsllq $0x2d,%ymm5,%ymm1
  0x00007f32dd04884a:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd04884e:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd048852:   vpsrlq $0x3d,%ymm5,%ymm3
  0x00007f32dd048857:   vpsllq $0x3,%ymm5,%ymm1
  0x00007f32dd04885c:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd048860:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd048864:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f32dd048869:   vpblendd $0xf0,%ymm2,%ymm5,%ymm5
  0x00007f32dd04886f:   mov    %rbx,%rdi
  0x00007f32dd048872:   rorx   $0x29,%r9,%r13
  0x00007f32dd048878:   rorx   $0x12,%r9,%r14
  0x00007f32dd04887e:   add    0x18(%rsp),%rax
  0x00007f32dd048883:   or     %r8,%rdi
  0x00007f32dd048886:   mov    %r10,%r15
  0x00007f32dd048889:   xor    %r11,%r15
  0x00007f32dd04888c:   rorx   $0x22,%rbx,%r12
  0x00007f32dd048892:   xor    %r14,%r13
  0x00007f32dd048895:   rorx   $0xe,%r9,%r14
  0x00007f32dd04889b:   and    %r9,%r15
  0x00007f32dd04889e:   add    %rax,%rdx
  0x00007f32dd0488a1:   and    %rcx,%rdi
  0x00007f32dd0488a4:   xor    %r14,%r13
  0x00007f32dd0488a7:   rorx   $0x27,%rbx,%r14
  0x00007f32dd0488ad:   xor    %r12,%r14
  0x00007f32dd0488b0:   rorx   $0x1c,%rbx,%r12
  0x00007f32dd0488b6:   xor    %r11,%r15
  0x00007f32dd0488b9:   xor    %r12,%r14
  0x00007f32dd0488bc:   mov    %rbx,%r12
  0x00007f32dd0488bf:   and    %r8,%r12
  0x00007f32dd0488c2:   add    %r13,%r15
  0x00007f32dd0488c5:   or     %r12,%rdi
  0x00007f32dd0488c8:   add    %r14,%rax
  0x00007f32dd0488cb:   add    %r15,%rdx
  0x00007f32dd0488ce:   add    %r15,%rax
  0x00007f32dd0488d1:   add    %rdi,%rax
  0x00007f32dd0488d4:   vpaddq 0x40(%rbp),%ymm6,%ymm0
  0x00007f32dd0488d9:   vmovdqu %ymm0,(%rsp)
  0x00007f32dd0488de:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm0
  0x00007f32dd0488e4:   vpalignr $0x8,%ymm4,%ymm0,%ymm0
  0x00007f32dd0488ea:   vpaddq %ymm6,%ymm0,%ymm0
  0x00007f32dd0488ee:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm1
  0x00007f32dd0488f4:   vpalignr $0x8,%ymm6,%ymm1,%ymm1
  0x00007f32dd0488fa:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f32dd0488ff:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f32dd048904:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd048908:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f32dd04890d:   mov    %rax,%rdi
  0x00007f32dd048910:   rorx   $0x29,%rdx,%r13
  0x00007f32dd048916:   rorx   $0x12,%rdx,%r14
  0x00007f32dd04891c:   add    (%rsp),%r11
  0x00007f32dd048920:   or     %rcx,%rdi
  0x00007f32dd048923:   mov    %r9,%r15
  0x00007f32dd048926:   xor    %r10,%r15
  0x00007f32dd048929:   rorx   $0x22,%rax,%r12
  0x00007f32dd04892f:   xor    %r14,%r13
  0x00007f32dd048932:   rorx   $0xe,%rdx,%r14
  0x00007f32dd048938:   and    %rdx,%r15
  0x00007f32dd04893b:   add    %r11,%r8
  0x00007f32dd04893e:   and    %rbx,%rdi
  0x00007f32dd048941:   xor    %r14,%r13
  0x00007f32dd048944:   rorx   $0x27,%rax,%r14
  0x00007f32dd04894a:   xor    %r12,%r14
  0x00007f32dd04894d:   rorx   $0x1c,%rax,%r12
  0x00007f32dd048953:   xor    %r10,%r15
  0x00007f32dd048956:   xor    %r12,%r14
  0x00007f32dd048959:   mov    %rax,%r12
  0x00007f32dd04895c:   and    %rcx,%r12
  0x00007f32dd04895f:   add    %r13,%r15
  0x00007f32dd048962:   or     %r12,%rdi
  0x00007f32dd048965:   add    %r14,%r11
  0x00007f32dd048968:   add    %r15,%r8
  0x00007f32dd04896b:   add    %r15,%r11
  0x00007f32dd04896e:   add    %rdi,%r11
  0x00007f32dd048971:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f32dd048976:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f32dd04897b:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f32dd04897f:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f32dd048984:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f32dd048988:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f32dd04898c:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm6
  0x00007f32dd048992:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f32dd048997:   vperm2f128 $0x11,%ymm5,%ymm5,%ymm2
  0x00007f32dd04899d:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f32dd0489a2:   mov    %r11,%rdi
  0x00007f32dd0489a5:   rorx   $0x29,%r8,%r13
  0x00007f32dd0489ab:   rorx   $0x12,%r8,%r14
  0x00007f32dd0489b1:   add    0x8(%rsp),%r10
  0x00007f32dd0489b6:   or     %rbx,%rdi
  0x00007f32dd0489b9:   mov    %rdx,%r15
  0x00007f32dd0489bc:   xor    %r9,%r15
  0x00007f32dd0489bf:   rorx   $0x22,%r11,%r12
  0x00007f32dd0489c5:   xor    %r14,%r13
  0x00007f32dd0489c8:   rorx   $0xe,%r8,%r14
  0x00007f32dd0489ce:   and    %r8,%r15
  0x00007f32dd0489d1:   add    %r10,%rcx
  0x00007f32dd0489d4:   and    %rax,%rdi
  0x00007f32dd0489d7:   xor    %r14,%r13
  0x00007f32dd0489da:   rorx   $0x27,%r11,%r14
  0x00007f32dd0489e0:   xor    %r12,%r14
  0x00007f32dd0489e3:   rorx   $0x1c,%r11,%r12
  0x00007f32dd0489e9:   xor    %r9,%r15
  0x00007f32dd0489ec:   xor    %r12,%r14
  0x00007f32dd0489ef:   mov    %r11,%r12
  0x00007f32dd0489f2:   and    %rbx,%r12
  0x00007f32dd0489f5:   add    %r13,%r15
  0x00007f32dd0489f8:   or     %r12,%rdi
  0x00007f32dd0489fb:   add    %r14,%r10
  0x00007f32dd0489fe:   add    %r15,%rcx
  0x00007f32dd048a01:   add    %r15,%r10
  0x00007f32dd048a04:   add    %rdi,%r10
  0x00007f32dd048a07:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd048a0c:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f32dd048a11:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd048a15:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd048a19:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f32dd048a1e:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f32dd048a23:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd048a27:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd048a2b:   vpaddq %ymm8,%ymm6,%ymm6
  0x00007f32dd048a30:   vpsrlq $0x6,%ymm6,%ymm8
  0x00007f32dd048a35:   mov    %r10,%rdi
  0x00007f32dd048a38:   rorx   $0x29,%rcx,%r13
  0x00007f32dd048a3e:   rorx   $0x12,%rcx,%r14
  0x00007f32dd048a44:   add    0x10(%rsp),%r9
  0x00007f32dd048a49:   or     %rax,%rdi
  0x00007f32dd048a4c:   mov    %r8,%r15
  0x00007f32dd048a4f:   xor    %rdx,%r15
  0x00007f32dd048a52:   rorx   $0x22,%r10,%r12
  0x00007f32dd048a58:   xor    %r14,%r13
  0x00007f32dd048a5b:   rorx   $0xe,%rcx,%r14
  0x00007f32dd048a61:   and    %rcx,%r15
  0x00007f32dd048a64:   add    %r9,%rbx
  0x00007f32dd048a67:   and    %r11,%rdi
  0x00007f32dd048a6a:   xor    %r14,%r13
  0x00007f32dd048a6d:   rorx   $0x27,%r10,%r14
  0x00007f32dd048a73:   xor    %r12,%r14
  0x00007f32dd048a76:   rorx   $0x1c,%r10,%r12
  0x00007f32dd048a7c:   xor    %rdx,%r15
  0x00007f32dd048a7f:   xor    %r12,%r14
  0x00007f32dd048a82:   mov    %r10,%r12
  0x00007f32dd048a85:   and    %rax,%r12
  0x00007f32dd048a88:   add    %r13,%r15
  0x00007f32dd048a8b:   or     %r12,%rdi
  0x00007f32dd048a8e:   add    %r14,%r9
  0x00007f32dd048a91:   add    %r15,%rbx
  0x00007f32dd048a94:   add    %r15,%r9
  0x00007f32dd048a97:   add    %rdi,%r9
  0x00007f32dd048a9a:   vpsrlq $0x13,%ymm6,%ymm3
  0x00007f32dd048a9f:   vpsllq $0x2d,%ymm6,%ymm1
  0x00007f32dd048aa4:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd048aa8:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd048aac:   vpsrlq $0x3d,%ymm6,%ymm3
  0x00007f32dd048ab1:   vpsllq $0x3,%ymm6,%ymm1
  0x00007f32dd048ab6:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd048aba:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd048abe:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f32dd048ac3:   vpblendd $0xf0,%ymm2,%ymm6,%ymm6
  0x00007f32dd048ac9:   mov    %r9,%rdi
  0x00007f32dd048acc:   rorx   $0x29,%rbx,%r13
  0x00007f32dd048ad2:   rorx   $0x12,%rbx,%r14
  0x00007f32dd048ad8:   add    0x18(%rsp),%rdx
  0x00007f32dd048add:   or     %r11,%rdi
  0x00007f32dd048ae0:   mov    %rcx,%r15
  0x00007f32dd048ae3:   xor    %r8,%r15
  0x00007f32dd048ae6:   rorx   $0x22,%r9,%r12
  0x00007f32dd048aec:   xor    %r14,%r13
  0x00007f32dd048aef:   rorx   $0xe,%rbx,%r14
  0x00007f32dd048af5:   and    %rbx,%r15
  0x00007f32dd048af8:   add    %rdx,%rax
  0x00007f32dd048afb:   and    %r10,%rdi
  0x00007f32dd048afe:   xor    %r14,%r13
  0x00007f32dd048b01:   rorx   $0x27,%r9,%r14
  0x00007f32dd048b07:   xor    %r12,%r14
  0x00007f32dd048b0a:   rorx   $0x1c,%r9,%r12
  0x00007f32dd048b10:   xor    %r8,%r15
  0x00007f32dd048b13:   xor    %r12,%r14
  0x00007f32dd048b16:   mov    %r9,%r12
  0x00007f32dd048b19:   and    %r11,%r12
  0x00007f32dd048b1c:   add    %r13,%r15
  0x00007f32dd048b1f:   or     %r12,%rdi
  0x00007f32dd048b22:   add    %r14,%rdx
  0x00007f32dd048b25:   add    %r15,%rax
  0x00007f32dd048b28:   add    %r15,%rdx
  0x00007f32dd048b2b:   add    %rdi,%rdx
  0x00007f32dd048b2e:   vpaddq 0x60(%rbp),%ymm7,%ymm0
  0x00007f32dd048b33:   vmovdqu %ymm0,(%rsp)
  0x00007f32dd048b38:   add    $0x80,%rbp
  0x00007f32dd048b3f:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm0
  0x00007f32dd048b45:   vpalignr $0x8,%ymm5,%ymm0,%ymm0
  0x00007f32dd048b4b:   vpaddq %ymm7,%ymm0,%ymm0
  0x00007f32dd048b4f:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm1
  0x00007f32dd048b55:   vpalignr $0x8,%ymm7,%ymm1,%ymm1
  0x00007f32dd048b5b:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f32dd048b60:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f32dd048b65:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f32dd048b69:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f32dd048b6e:   mov    %rdx,%rdi
  0x00007f32dd048b71:   rorx   $0x29,%rax,%r13
  0x00007f32dd048b77:   rorx   $0x12,%rax,%r14
  0x00007f32dd048b7d:   add    (%rsp),%r8
  0x00007f32dd048b81:   or     %r10,%rdi
  0x00007f32dd048b84:   mov    %rbx,%r15
  0x00007f32dd048b87:   xor    %rcx,%r15
  0x00007f32dd048b8a:   rorx   $0x22,%rdx,%r12
  0x00007f32dd048b90:   xor    %r14,%r13
  0x00007f32dd048b93:   rorx   $0xe,%rax,%r14
  0x00007f32dd048b99:   and    %rax,%r15
  0x00007f32dd048b9c:   add    %r8,%r11
  0x00007f32dd048b9f:   and    %r9,%rdi
  0x00007f32dd048ba2:   xor    %r14,%r13
  0x00007f32dd048ba5:   rorx   $0x27,%rdx,%r14
  0x00007f32dd048bab:   xor    %r12,%r14
  0x00007f32dd048bae:   rorx   $0x1c,%rdx,%r12
  0x00007f32dd048bb4:   xor    %rcx,%r15
  0x00007f32dd048bb7:   xor    %r12,%r14
  0x00007f32dd048bba:   mov    %rdx,%r12
  0x00007f32dd048bbd:   and    %r10,%r12
  0x00007f32dd048bc0:   add    %r13,%r15
  0x00007f32dd048bc3:   or     %r12,%rdi
  0x00007f32dd048bc6:   add    %r14,%r8
  0x00007f32dd048bc9:   add    %r15,%r11
  0x00007f32dd048bcc:   add    %r15,%r8
  0x00007f32dd048bcf:   add    %rdi,%r8
  0x00007f32dd048bd2:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f32dd048bd7:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f32dd048bdc:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f32dd048be0:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f32dd048be5:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f32dd048be9:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f32dd048bed:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm7
  0x00007f32dd048bf3:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f32dd048bf8:   vperm2f128 $0x11,%ymm6,%ymm6,%ymm2
  0x00007f32dd048bfe:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f32dd048c03:   mov    %r8,%rdi
  0x00007f32dd048c06:   rorx   $0x29,%r11,%r13
  0x00007f32dd048c0c:   rorx   $0x12,%r11,%r14
  0x00007f32dd048c12:   add    0x8(%rsp),%rcx
  0x00007f32dd048c17:   or     %r9,%rdi
  0x00007f32dd048c1a:   mov    %rax,%r15
  0x00007f32dd048c1d:   xor    %rbx,%r15
  0x00007f32dd048c20:   rorx   $0x22,%r8,%r12
  0x00007f32dd048c26:   xor    %r14,%r13
  0x00007f32dd048c29:   rorx   $0xe,%r11,%r14
  0x00007f32dd048c2f:   and    %r11,%r15
  0x00007f32dd048c32:   add    %rcx,%r10
  0x00007f32dd048c35:   and    %rdx,%rdi
  0x00007f32dd048c38:   xor    %r14,%r13
  0x00007f32dd048c3b:   rorx   $0x27,%r8,%r14
  0x00007f32dd048c41:   xor    %r12,%r14
  0x00007f32dd048c44:   rorx   $0x1c,%r8,%r12
  0x00007f32dd048c4a:   xor    %rbx,%r15
  0x00007f32dd048c4d:   xor    %r12,%r14
  0x00007f32dd048c50:   mov    %r8,%r12
  0x00007f32dd048c53:   and    %r9,%r12
  0x00007f32dd048c56:   add    %r13,%r15
  0x00007f32dd048c59:   or     %r12,%rdi
  0x00007f32dd048c5c:   add    %r14,%rcx
  0x00007f32dd048c5f:   add    %r15,%r10
  0x00007f32dd048c62:   add    %r15,%rcx
  0x00007f32dd048c65:   add    %rdi,%rcx
  0x00007f32dd048c68:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f32dd048c6d:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f32dd048c72:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd048c76:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd048c7a:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f32dd048c7f:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f32dd048c84:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd048c88:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd048c8c:   vpaddq %ymm8,%ymm7,%ymm7
  0x00007f32dd048c91:   vpsrlq $0x6,%ymm7,%ymm8
  0x00007f32dd048c96:   mov    %rcx,%rdi
  0x00007f32dd048c99:   rorx   $0x29,%r10,%r13
  0x00007f32dd048c9f:   rorx   $0x12,%r10,%r14
  0x00007f32dd048ca5:   add    0x10(%rsp),%rbx
  0x00007f32dd048caa:   or     %rdx,%rdi
  0x00007f32dd048cad:   mov    %r11,%r15
  0x00007f32dd048cb0:   xor    %rax,%r15
  0x00007f32dd048cb3:   rorx   $0x22,%rcx,%r12
  0x00007f32dd048cb9:   xor    %r14,%r13
  0x00007f32dd048cbc:   rorx   $0xe,%r10,%r14
  0x00007f32dd048cc2:   and    %r10,%r15
  0x00007f32dd048cc5:   add    %rbx,%r9
  0x00007f32dd048cc8:   and    %r8,%rdi
  0x00007f32dd048ccb:   xor    %r14,%r13
  0x00007f32dd048cce:   rorx   $0x27,%rcx,%r14
  0x00007f32dd048cd4:   xor    %r12,%r14
  0x00007f32dd048cd7:   rorx   $0x1c,%rcx,%r12
  0x00007f32dd048cdd:   xor    %rax,%r15
  0x00007f32dd048ce0:   xor    %r12,%r14
  0x00007f32dd048ce3:   mov    %rcx,%r12
  0x00007f32dd048ce6:   and    %rdx,%r12
  0x00007f32dd048ce9:   add    %r13,%r15
  0x00007f32dd048cec:   or     %r12,%rdi
  0x00007f32dd048cef:   add    %r14,%rbx
  0x00007f32dd048cf2:   add    %r15,%r9
  0x00007f32dd048cf5:   add    %r15,%rbx
  0x00007f32dd048cf8:   add    %rdi,%rbx
  0x00007f32dd048cfb:   vpsrlq $0x13,%ymm7,%ymm3
  0x00007f32dd048d00:   vpsllq $0x2d,%ymm7,%ymm1
  0x00007f32dd048d05:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd048d09:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd048d0d:   vpsrlq $0x3d,%ymm7,%ymm3
  0x00007f32dd048d12:   vpsllq $0x3,%ymm7,%ymm1
  0x00007f32dd048d17:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f32dd048d1b:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f32dd048d1f:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f32dd048d24:   vpblendd $0xf0,%ymm2,%ymm7,%ymm7
  0x00007f32dd048d2a:   mov    %rbx,%rdi
  0x00007f32dd048d2d:   rorx   $0x29,%r9,%r13
  0x00007f32dd048d33:   rorx   $0x12,%r9,%r14
  0x00007f32dd048d39:   add    0x18(%rsp),%rax
  0x00007f32dd048d3e:   or     %r8,%rdi
  0x00007f32dd048d41:   mov    %r10,%r15
  0x00007f32dd048d44:   xor    %r11,%r15
  0x00007f32dd048d47:   rorx   $0x22,%rbx,%r12
  0x00007f32dd048d4d:   xor    %r14,%r13
  0x00007f32dd048d50:   rorx   $0xe,%r9,%r14
  0x00007f32dd048d56:   and    %r9,%r15
  0x00007f32dd048d59:   add    %rax,%rdx
  0x00007f32dd048d5c:   and    %rcx,%rdi
  0x00007f32dd048d5f:   xor    %r14,%r13
  0x00007f32dd048d62:   rorx   $0x27,%rbx,%r14
  0x00007f32dd048d68:   xor    %r12,%r14
  0x00007f32dd048d6b:   rorx   $0x1c,%rbx,%r12
  0x00007f32dd048d71:   xor    %r11,%r15
  0x00007f32dd048d74:   xor    %r12,%r14
  0x00007f32dd048d77:   mov    %rbx,%r12
  0x00007f32dd048d7a:   and    %r8,%r12
  0x00007f32dd048d7d:   add    %r13,%r15
  0x00007f32dd048d80:   or     %r12,%rdi
  0x00007f32dd048d83:   add    %r14,%rax
  0x00007f32dd048d86:   add    %r15,%rdx
  0x00007f32dd048d89:   add    %r15,%rax
  0x00007f32dd048d8c:   add    %rdi,%rax
  0x00007f32dd048d8f:   subq   $0x1,0x20(%rsp)
  0x00007f32dd048d95:   jne    Stub::sha512_implCompressMB+224 0x00007f32dd048420
  0x00007f32dd048d9b:   movq   $0x2,0x20(%rsp)
  0x00007f32dd048da4:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007f32dd048da9:   vmovdqu %ymm0,(%rsp)
  0x00007f32dd048dae:   mov    %r9,%r15
  0x00007f32dd048db1:   rorx   $0x29,%rdx,%r13
  0x00007f32dd048db7:   rorx   $0x12,%rdx,%r14
  0x00007f32dd048dbd:   xor    %r10,%r15
  0x00007f32dd048dc0:   xor    %r14,%r13
  0x00007f32dd048dc3:   rorx   $0xe,%rdx,%r14
  0x00007f32dd048dc9:   and    %rdx,%r15
  0x00007f32dd048dcc:   xor    %r14,%r13
  0x00007f32dd048dcf:   rorx   $0x22,%rax,%r12
  0x00007f32dd048dd5:   xor    %r10,%r15
  0x00007f32dd048dd8:   rorx   $0x27,%rax,%r14
  0x00007f32dd048dde:   mov    %rax,%rdi
  0x00007f32dd048de1:   xor    %r12,%r14
  0x00007f32dd048de4:   rorx   $0x1c,%rax,%r12
  0x00007f32dd048dea:   add    (%rsp),%r11
  0x00007f32dd048dee:   or     %rcx,%rdi
  0x00007f32dd048df1:   xor    %r12,%r14
  0x00007f32dd048df4:   mov    %rax,%r12
  0x00007f32dd048df7:   and    %rbx,%rdi
  0x00007f32dd048dfa:   and    %rcx,%r12
  0x00007f32dd048dfd:   add    %r13,%r15
  0x00007f32dd048e00:   add    %r11,%r8
  0x00007f32dd048e03:   or     %r12,%rdi
  0x00007f32dd048e06:   add    %r14,%r11
  0x00007f32dd048e09:   add    %r15,%r8
  0x00007f32dd048e0c:   add    %r15,%r11
  0x00007f32dd048e0f:   mov    %rdx,%r15
  0x00007f32dd048e12:   rorx   $0x29,%r8,%r13
  0x00007f32dd048e18:   rorx   $0x12,%r8,%r14
  0x00007f32dd048e1e:   xor    %r9,%r15
  0x00007f32dd048e21:   xor    %r14,%r13
  0x00007f32dd048e24:   rorx   $0xe,%r8,%r14
  0x00007f32dd048e2a:   and    %r8,%r15
  0x00007f32dd048e2d:   add    %rdi,%r11
  0x00007f32dd048e30:   xor    %r14,%r13
  0x00007f32dd048e33:   rorx   $0x22,%r11,%r12
  0x00007f32dd048e39:   xor    %r9,%r15
  0x00007f32dd048e3c:   rorx   $0x27,%r11,%r14
  0x00007f32dd048e42:   mov    %r11,%rdi
  0x00007f32dd048e45:   xor    %r12,%r14
  0x00007f32dd048e48:   rorx   $0x1c,%r11,%r12
  0x00007f32dd048e4e:   add    0x8(%rsp),%r10
  0x00007f32dd048e53:   or     %rbx,%rdi
  0x00007f32dd048e56:   xor    %r12,%r14
  0x00007f32dd048e59:   mov    %r11,%r12
  0x00007f32dd048e5c:   and    %rax,%rdi
  0x00007f32dd048e5f:   and    %rbx,%r12
  0x00007f32dd048e62:   add    %r13,%r15
  0x00007f32dd048e65:   add    %r10,%rcx
  0x00007f32dd048e68:   or     %r12,%rdi
  0x00007f32dd048e6b:   add    %r14,%r10
  0x00007f32dd048e6e:   add    %r15,%rcx
  0x00007f32dd048e71:   add    %r15,%r10
  0x00007f32dd048e74:   mov    %r8,%r15
  0x00007f32dd048e77:   rorx   $0x29,%rcx,%r13
  0x00007f32dd048e7d:   rorx   $0x12,%rcx,%r14
  0x00007f32dd048e83:   xor    %rdx,%r15
  0x00007f32dd048e86:   xor    %r14,%r13
  0x00007f32dd048e89:   rorx   $0xe,%rcx,%r14
  0x00007f32dd048e8f:   and    %rcx,%r15
  0x00007f32dd048e92:   add    %rdi,%r10
  0x00007f32dd048e95:   xor    %r14,%r13
  0x00007f32dd048e98:   rorx   $0x22,%r10,%r12
  0x00007f32dd048e9e:   xor    %rdx,%r15
  0x00007f32dd048ea1:   rorx   $0x27,%r10,%r14
  0x00007f32dd048ea7:   mov    %r10,%rdi
  0x00007f32dd048eaa:   xor    %r12,%r14
  0x00007f32dd048ead:   rorx   $0x1c,%r10,%r12
  0x00007f32dd048eb3:   add    0x10(%rsp),%r9
  0x00007f32dd048eb8:   or     %rax,%rdi
  0x00007f32dd048ebb:   xor    %r12,%r14
  0x00007f32dd048ebe:   mov    %r10,%r12
  0x00007f32dd048ec1:   and    %r11,%rdi
  0x00007f32dd048ec4:   and    %rax,%r12
  0x00007f32dd048ec7:   add    %r13,%r15
  0x00007f32dd048eca:   add    %r9,%rbx
  0x00007f32dd048ecd:   or     %r12,%rdi
  0x00007f32dd048ed0:   add    %r14,%r9
  0x00007f32dd048ed3:   add    %r15,%rbx
  0x00007f32dd048ed6:   add    %r15,%r9
  0x00007f32dd048ed9:   mov    %rcx,%r15
  0x00007f32dd048edc:   rorx   $0x29,%rbx,%r13
  0x00007f32dd048ee2:   rorx   $0x12,%rbx,%r14
  0x00007f32dd048ee8:   xor    %r8,%r15
  0x00007f32dd048eeb:   xor    %r14,%r13
  0x00007f32dd048eee:   rorx   $0xe,%rbx,%r14
  0x00007f32dd048ef4:   and    %rbx,%r15
  0x00007f32dd048ef7:   add    %rdi,%r9
  0x00007f32dd048efa:   xor    %r14,%r13
  0x00007f32dd048efd:   rorx   $0x22,%r9,%r12
  0x00007f32dd048f03:   xor    %r8,%r15
  0x00007f32dd048f06:   rorx   $0x27,%r9,%r14
  0x00007f32dd048f0c:   mov    %r9,%rdi
  0x00007f32dd048f0f:   xor    %r12,%r14
  0x00007f32dd048f12:   rorx   $0x1c,%r9,%r12
  0x00007f32dd048f18:   add    0x18(%rsp),%rdx
  0x00007f32dd048f1d:   or     %r11,%rdi
  0x00007f32dd048f20:   xor    %r12,%r14
  0x00007f32dd048f23:   mov    %r9,%r12
  0x00007f32dd048f26:   and    %r10,%rdi
  0x00007f32dd048f29:   and    %r11,%r12
  0x00007f32dd048f2c:   add    %r13,%r15
  0x00007f32dd048f2f:   add    %rdx,%rax
  0x00007f32dd048f32:   or     %r12,%rdi
  0x00007f32dd048f35:   add    %r14,%rdx
  0x00007f32dd048f38:   add    %r15,%rax
  0x00007f32dd048f3b:   add    %r15,%rdx
  0x00007f32dd048f3e:   add    %rdi,%rdx
  0x00007f32dd048f41:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007f32dd048f46:   vmovdqu %ymm0,(%rsp)
  0x00007f32dd048f4b:   add    $0x40,%rbp
  0x00007f32dd048f4f:   mov    %rbx,%r15
  0x00007f32dd048f52:   rorx   $0x29,%rax,%r13
  0x00007f32dd048f58:   rorx   $0x12,%rax,%r14
  0x00007f32dd048f5e:   xor    %rcx,%r15
  0x00007f32dd048f61:   xor    %r14,%r13
  0x00007f32dd048f64:   rorx   $0xe,%rax,%r14
  0x00007f32dd048f6a:   and    %rax,%r15
  0x00007f32dd048f6d:   xor    %r14,%r13
  0x00007f32dd048f70:   rorx   $0x22,%rdx,%r12
  0x00007f32dd048f76:   xor    %rcx,%r15
  0x00007f32dd048f79:   rorx   $0x27,%rdx,%r14
  0x00007f32dd048f7f:   mov    %rdx,%rdi
  0x00007f32dd048f82:   xor    %r12,%r14
  0x00007f32dd048f85:   rorx   $0x1c,%rdx,%r12
  0x00007f32dd048f8b:   add    (%rsp),%r8
  0x00007f32dd048f8f:   or     %r10,%rdi
  0x00007f32dd048f92:   xor    %r12,%r14
  0x00007f32dd048f95:   mov    %rdx,%r12
  0x00007f32dd048f98:   and    %r9,%rdi
  0x00007f32dd048f9b:   and    %r10,%r12
  0x00007f32dd048f9e:   add    %r13,%r15
  0x00007f32dd048fa1:   add    %r8,%r11
  0x00007f32dd048fa4:   or     %r12,%rdi
  0x00007f32dd048fa7:   add    %r14,%r8
  0x00007f32dd048faa:   add    %r15,%r11
  0x00007f32dd048fad:   add    %r15,%r8
  0x00007f32dd048fb0:   mov    %rax,%r15
  0x00007f32dd048fb3:   rorx   $0x29,%r11,%r13
  0x00007f32dd048fb9:   rorx   $0x12,%r11,%r14
  0x00007f32dd048fbf:   xor    %rbx,%r15
  0x00007f32dd048fc2:   xor    %r14,%r13
  0x00007f32dd048fc5:   rorx   $0xe,%r11,%r14
  0x00007f32dd048fcb:   and    %r11,%r15
  0x00007f32dd048fce:   add    %rdi,%r8
  0x00007f32dd048fd1:   xor    %r14,%r13
  0x00007f32dd048fd4:   rorx   $0x22,%r8,%r12
  0x00007f32dd048fda:   xor    %rbx,%r15
  0x00007f32dd048fdd:   rorx   $0x27,%r8,%r14
  0x00007f32dd048fe3:   mov    %r8,%rdi
  0x00007f32dd048fe6:   xor    %r12,%r14
  0x00007f32dd048fe9:   rorx   $0x1c,%r8,%r12
  0x00007f32dd048fef:   add    0x8(%rsp),%rcx
  0x00007f32dd048ff4:   or     %r9,%rdi
  0x00007f32dd048ff7:   xor    %r12,%r14
  0x00007f32dd048ffa:   mov    %r8,%r12
  0x00007f32dd048ffd:   and    %rdx,%rdi
  0x00007f32dd049000:   and    %r9,%r12
  0x00007f32dd049003:   add    %r13,%r15
  0x00007f32dd049006:   add    %rcx,%r10
  0x00007f32dd049009:   or     %r12,%rdi
  0x00007f32dd04900c:   add    %r14,%rcx
  0x00007f32dd04900f:   add    %r15,%r10
  0x00007f32dd049012:   add    %r15,%rcx
  0x00007f32dd049015:   mov    %r11,%r15
  0x00007f32dd049018:   rorx   $0x29,%r10,%r13
  0x00007f32dd04901e:   rorx   $0x12,%r10,%r14
  0x00007f32dd049024:   xor    %rax,%r15
  0x00007f32dd049027:   xor    %r14,%r13
  0x00007f32dd04902a:   rorx   $0xe,%r10,%r14
  0x00007f32dd049030:   and    %r10,%r15
  0x00007f32dd049033:   add    %rdi,%rcx
  0x00007f32dd049036:   xor    %r14,%r13
  0x00007f32dd049039:   rorx   $0x22,%rcx,%r12
  0x00007f32dd04903f:   xor    %rax,%r15
  0x00007f32dd049042:   rorx   $0x27,%rcx,%r14
  0x00007f32dd049048:   mov    %rcx,%rdi
  0x00007f32dd04904b:   xor    %r12,%r14
  0x00007f32dd04904e:   rorx   $0x1c,%rcx,%r12
  0x00007f32dd049054:   add    0x10(%rsp),%rbx
  0x00007f32dd049059:   or     %rdx,%rdi
  0x00007f32dd04905c:   xor    %r12,%r14
  0x00007f32dd04905f:   mov    %rcx,%r12
  0x00007f32dd049062:   and    %r8,%rdi
  0x00007f32dd049065:   and    %rdx,%r12
  0x00007f32dd049068:   add    %r13,%r15
  0x00007f32dd04906b:   add    %rbx,%r9
  0x00007f32dd04906e:   or     %r12,%rdi
  0x00007f32dd049071:   add    %r14,%rbx
  0x00007f32dd049074:   add    %r15,%r9
  0x00007f32dd049077:   add    %r15,%rbx
  0x00007f32dd04907a:   mov    %r10,%r15
  0x00007f32dd04907d:   rorx   $0x29,%r9,%r13
  0x00007f32dd049083:   rorx   $0x12,%r9,%r14
  0x00007f32dd049089:   xor    %r11,%r15
  0x00007f32dd04908c:   xor    %r14,%r13
  0x00007f32dd04908f:   rorx   $0xe,%r9,%r14
  0x00007f32dd049095:   and    %r9,%r15
  0x00007f32dd049098:   add    %rdi,%rbx
  0x00007f32dd04909b:   xor    %r14,%r13
  0x00007f32dd04909e:   rorx   $0x22,%rbx,%r12
  0x00007f32dd0490a4:   xor    %r11,%r15
  0x00007f32dd0490a7:   rorx   $0x27,%rbx,%r14
  0x00007f32dd0490ad:   mov    %rbx,%rdi
  0x00007f32dd0490b0:   xor    %r12,%r14
  0x00007f32dd0490b3:   rorx   $0x1c,%rbx,%r12
  0x00007f32dd0490b9:   add    0x18(%rsp),%rax
  0x00007f32dd0490be:   or     %r8,%rdi
  0x00007f32dd0490c1:   xor    %r12,%r14
  0x00007f32dd0490c4:   mov    %rbx,%r12
  0x00007f32dd0490c7:   and    %rcx,%rdi
  0x00007f32dd0490ca:   and    %r8,%r12
  0x00007f32dd0490cd:   add    %r13,%r15
  0x00007f32dd0490d0:   add    %rax,%rdx
  0x00007f32dd0490d3:   or     %r12,%rdi
  0x00007f32dd0490d6:   add    %r14,%rax
  0x00007f32dd0490d9:   add    %r15,%rdx
  0x00007f32dd0490dc:   add    %r15,%rax
  0x00007f32dd0490df:   add    %rdi,%rax
  0x00007f32dd0490e2:   vmovdqu %ymm6,%ymm4
  0x00007f32dd0490e6:   vmovdqu %ymm7,%ymm5
  0x00007f32dd0490ea:   subq   $0x1,0x20(%rsp)
  0x00007f32dd0490f0:   jne    Stub::sha512_implCompressMB+2660 0x00007f32dd048da4
  0x00007f32dd0490f6:   add    (%rsi),%rax
  0x00007f32dd0490f9:   mov    %rax,(%rsi)
  0x00007f32dd0490fc:   add    0x8(%rsi),%rbx
  0x00007f32dd049100:   mov    %rbx,0x8(%rsi)
  0x00007f32dd049104:   add    0x10(%rsi),%rcx
  0x00007f32dd049108:   mov    %rcx,0x10(%rsi)
  0x00007f32dd04910c:   add    0x18(%rsi),%r8
  0x00007f32dd049110:   mov    %r8,0x18(%rsi)
  0x00007f32dd049114:   add    0x20(%rsi),%rdx
  0x00007f32dd049118:   mov    %rdx,0x20(%rsi)
  0x00007f32dd04911c:   add    0x28(%rsi),%r9
  0x00007f32dd049120:   mov    %r9,0x28(%rsi)
  0x00007f32dd049124:   add    0x30(%rsi),%r10
  0x00007f32dd049128:   mov    %r10,0x30(%rsi)
  0x00007f32dd04912c:   add    0x38(%rsi),%r11
  0x00007f32dd049130:   mov    %r11,0x38(%rsi)
  0x00007f32dd049134:   mov    0x28(%rsp),%rdi
  0x00007f32dd049139:   add    $0x80,%rdi
  0x00007f32dd049140:   cmp    0x30(%rsp),%rdi
  0x00007f32dd049145:   jne    Stub::sha512_implCompressMB+155 0x00007f32dd0483db
  0x00007f32dd04914b:   mov    0x40(%rsp),%rbp
  0x00007f32dd049150:   mov    0x48(%rsp),%rbx
  0x00007f32dd049155:   mov    0x50(%rsp),%r12
  0x00007f32dd04915a:   mov    0x58(%rsp),%r13
  0x00007f32dd04915f:   mov    0x60(%rsp),%r14
  0x00007f32dd049164:   mov    0x68(%rsp),%r15
  0x00007f32dd049169:   mov    0x38(%rsp),%rsp
  0x00007f32dd04916e:   pop    %rcx
  0x00007f32dd04916f:   pop    %rdx
  0x00007f32dd049170:   mov    %rdx,%rax
  0x00007f32dd049173:   cmp    %rcx,%rax
  0x00007f32dd049176:   jae    Stub::sha512_implCompressMB+3648 0x00007f32dd049180
  0x00007f32dd049178:   add    $0x80,%rax
  0x00007f32dd04917e:   jmp    Stub::sha512_implCompressMB+3635 0x00007f32dd049173
  0x00007f32dd049180:   vzeroupper 
  0x00007f32dd049183:   leaveq 
  0x00007f32dd049184:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_shuffle_base64 [0x00007f32dd0491c0, 0x00007f32dd0491e0] (32 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0491c0:   add    $0x8050604,%eax
  0x00007f32dd0491c5:   (bad)  
  0x00007f32dd0491c6:   or     %ecx,(%rax)
  0x00007f32dd0491c8:   or     (%rdx),%ecx
  0x00007f32dd0491ca:   or     $0xb,%al
  0x00007f32dd0491cc:   (bad)  
  0x00007f32dd0491cd:   or     $0x10e0f,%eax
  0x00007f32dd0491d2:   add    (%rcx),%al
  0x00007f32dd0491d4:   add    $0x3,%al
  0x00007f32dd0491d6:   add    $0x8060704,%eax
  0x00007f32dd0491db:   (bad)  
  0x00007f32dd0491dc:   or     (%rcx),%cl
  0x00007f32dd0491de:   or     (%rdx),%ecx
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_input_mask_base64 [0x00007f32dd0491e0, 0x00007f32dd049200] (32 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0491e0:   add    %al,(%rax)
  0x00007f32dd0491e2:   add    %al,(%rax)
  0x00007f32dd0491e4:   add    %al,(%rax)
  0x00007f32dd0491e6:   add    %al,-0x80000000(%rax)
  0x00007f32dd0491ec:   add    %al,(%rax)
  0x00007f32dd0491ee:   add    %al,-0x80000000(%rax)
  0x00007f32dd0491f4:   add    %al,(%rax)
  0x00007f32dd0491f6:   add    %al,-0x80000000(%rax)
  0x00007f32dd0491fc:   add    %al,(%rax)
  0x00007f32dd0491fe:   .byte 0x0
  0x00007f32dd0491ff:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_lut_base64 [0x00007f32dd049200, 0x00007f32dd049240] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd049200:   rex.B
  0x00007f32dd049201:   rex.RXB cld 
  0x00007f32dd049203:   cld    
  0x00007f32dd049204:   cld    
  0x00007f32dd049205:   cld    
  0x00007f32dd049206:   cld    
  0x00007f32dd049207:   cld    
  0x00007f32dd049208:   cld    
  0x00007f32dd049209:   cld    
  0x00007f32dd04920a:   cld    
  0x00007f32dd04920b:   cld    
  0x00007f32dd04920c:   in     (%dx),%eax
  0x00007f32dd04920d:   lock add %al,(%rax)
  0x00007f32dd049210:   rex.B
  0x00007f32dd049211:   rex.RXB cld 
  0x00007f32dd049213:   cld    
  0x00007f32dd049214:   cld    
  0x00007f32dd049215:   cld    
  0x00007f32dd049216:   cld    
  0x00007f32dd049217:   cld    
  0x00007f32dd049218:   cld    
  0x00007f32dd049219:   cld    
  0x00007f32dd04921a:   cld    
  0x00007f32dd04921b:   cld    
  0x00007f32dd04921c:   in     (%dx),%eax
  0x00007f32dd04921d:   lock add %al,(%rax)
  0x00007f32dd049220:   rex.B
  0x00007f32dd049221:   rex.RXB cld 
  0x00007f32dd049223:   cld    
  0x00007f32dd049224:   cld    
  0x00007f32dd049225:   cld    
  0x00007f32dd049226:   cld    
  0x00007f32dd049227:   cld    
  0x00007f32dd049228:   cld    
  0x00007f32dd049229:   cld    
  0x00007f32dd04922a:   cld    
  0x00007f32dd04922b:   cld    
  0x00007f32dd04922c:   out    %eax,(%dx)
  0x00007f32dd04922d:   and    %al,(%rax)
  0x00007f32dd04922f:   add    %al,0x47(%rcx)
  0x00007f32dd049232:   cld    
  0x00007f32dd049233:   cld    
  0x00007f32dd049234:   cld    
  0x00007f32dd049235:   cld    
  0x00007f32dd049236:   cld    
  0x00007f32dd049237:   cld    
  0x00007f32dd049238:   cld    
  0x00007f32dd049239:   cld    
  0x00007f32dd04923a:   cld    
  0x00007f32dd04923b:   cld    
  0x00007f32dd04923c:   out    %eax,(%dx)
  0x00007f32dd04923d:   and    %al,(%rax)
  0x00007f32dd04923f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::AVX2_tables_base64 [0x00007f32dd049240, 0x00007f32dd0492f0] (176 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd049240:   (bad)  
  0x00007f32dd049241:   (bad)  
  0x00007f32dd049242:   (bad)  
  0x00007f32dd049243:   (bad)  
  0x00007f32dd049244:   (bad)  
  0x00007f32dd049245:   (bad)  
  0x00007f32dd049246:   (bad)  
  0x00007f32dd049247:   (bad)  
  0x00007f32dd049248:   pop    %rdi
  0x00007f32dd049249:   pop    %rdi
  0x00007f32dd04924a:   pop    %rdi
  0x00007f32dd04924b:   pop    %rdi
  0x00007f32dd04924c:   pop    %rdi
  0x00007f32dd04924d:   pop    %rdi
  0x00007f32dd04924e:   pop    %rdi
  0x00007f32dd04924f:   pop    %rdi
  0x00007f32dd049250:   add    %al,(%rax)
  0x00007f32dd049252:   add    %al,(%rax)
  0x00007f32dd049254:   add    %eax,(%rax)
  0x00007f32dd049256:   add    %al,(%rax)
  0x00007f32dd049258:   add    (%rax),%al
  0x00007f32dd04925a:   add    %al,(%rax)
  0x00007f32dd04925c:   add    $0x0,%al
  0x00007f32dd04925e:   add    %al,(%rax)
  0x00007f32dd049260:   add    $0x6000000,%eax
  0x00007f32dd049265:   add    %al,(%rax)
  0x00007f32dd049267:   add    %bh,%bh
  0x00007f32dd049269:   (bad)  
  0x00007f32dd04926a:   (bad)  
  0x00007f32dd04926b:   (bad)  
  0x00007f32dd04926c:   (bad)  
  0x00007f32dd04926d:   (bad)  
  0x00007f32dd04926e:   (bad)  
  0x00007f32dd04926f:   callq  *(%rax)
  0x00007f32dd049271:   adc    %al,(%rcx)
  0x00007f32dd049273:   add    (%rax,%rcx,1),%al
  0x00007f32dd049276:   add    $0x8,%al
  0x00007f32dd049278:   adc    %dl,(%rax)
  0x00007f32dd04927a:   adc    %dl,(%rax)
  0x00007f32dd04927c:   adc    %dl,(%rax)
  0x00007f32dd04927e:   adc    %dl,(%rax)
  0x00007f32dd049280:   adc    %dl,(%rax)
  0x00007f32dd049282:   add    %eax,(%rdx)
  0x00007f32dd049284:   add    $0x8,%al
  0x00007f32dd049286:   add    $0x8,%al
  0x00007f32dd049288:   adc    %dl,(%rax)
  0x00007f32dd04928a:   adc    %dl,(%rax)
  0x00007f32dd04928c:   adc    %dl,(%rax)
  0x00007f32dd04928e:   adc    %dl,(%rax)
  0x00007f32dd049290:   rex add %eax,0x1(%rax)
  0x00007f32dd049294:   rex add %eax,0x1(%rax)
  0x00007f32dd049298:   rex add %eax,0x1(%rax)
  0x00007f32dd04929c:   rex add %eax,0x1(%rax)
  0x00007f32dd0492a0:   rex add %eax,0x1(%rax)
  0x00007f32dd0492a4:   rex add %eax,0x1(%rax)
  0x00007f32dd0492a8:   rex add %eax,0x1(%rax)
  0x00007f32dd0492ac:   rex add %eax,0x1(%rax)
  0x00007f32dd0492b0:   add    %dl,(%rax)
  0x00007f32dd0492b2:   add    %eax,(%rax)
  0x00007f32dd0492b4:   add    %dl,(%rax)
  0x00007f32dd0492b6:   add    %eax,(%rax)
  0x00007f32dd0492b8:   add    %dl,(%rax)
  0x00007f32dd0492ba:   add    %eax,(%rax)
  0x00007f32dd0492bc:   add    %dl,(%rax)
  0x00007f32dd0492be:   add    %eax,(%rax)
  0x00007f32dd0492c0:   add    %dl,(%rax)
  0x00007f32dd0492c2:   add    %eax,(%rax)
  0x00007f32dd0492c4:   add    %dl,(%rax)
  0x00007f32dd0492c6:   add    %eax,(%rax)
  0x00007f32dd0492c8:   add    %dl,(%rax)
  0x00007f32dd0492ca:   add    %eax,(%rax)
  0x00007f32dd0492cc:   add    %dl,(%rax)
  0x00007f32dd0492ce:   add    %eax,(%rax)
  0x00007f32dd0492d0:   add    (%rcx),%al
  0x00007f32dd0492d2:   add    %al,(%rsi)
  0x00007f32dd0492d4:   add    $0x8090a04,%eax
  0x00007f32dd0492d9:   (bad)  
  0x00007f32dd0492da:   or     $0xffffff0c,%eax
  0x00007f32dd0492df:   incl   (%rdx)
  0x00007f32dd0492e1:   add    %eax,(%rax)
  0x00007f32dd0492e3:   (bad)  
  0x00007f32dd0492e4:   add    $0x8090a04,%eax
  0x00007f32dd0492e9:   (bad)  
  0x00007f32dd0492ea:   or     $0xffffff0c,%eax
  0x00007f32dd0492ef:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::AVX2_tables_URL_base64 [0x00007f32dd049340, 0x00007f32dd0493c0] (128 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd049340:   adc    $0x11111111,%eax
  0x00007f32dd049345:   adc    %edx,(%rcx)
  0x00007f32dd049347:   adc    %edx,(%rcx)
  0x00007f32dd049349:   adc    %edx,(%rbx)
  0x00007f32dd04934b:   sbb    (%rbx),%bl
  0x00007f32dd04934d:   sbb    (%rbx),%ebx
  0x00007f32dd04934f:   sbb    0x11111111(%rip),%dl        # 0x00007f32ee15a466
  0x00007f32dd049355:   adc    %edx,(%rcx)
  0x00007f32dd049357:   adc    %edx,(%rcx)
  0x00007f32dd049359:   adc    %edx,(%rbx)
  0x00007f32dd04935b:   sbb    (%rbx),%bl
  0x00007f32dd04935d:   sbb    (%rbx),%ebx
  0x00007f32dd04935f:   sbb    (%rax),%al
  0x00007f32dd049361:   adc    %dl,(%rbx)
  0x00007f32dd049363:   add    $0xbf,%al
  0x00007f32dd049365:   mov    $0xb9b9,%edi
  0x00007f32dd04936a:   add    %al,(%rax)
  0x00007f32dd04936c:   add    %al,(%rax)
  0x00007f32dd04936e:   add    %al,(%rax)
  0x00007f32dd049370:   add    %dl,(%rax)
  0x00007f32dd049372:   adc    (%rdi,%rdi,4),%eax
  0x00007f32dd049375:   mov    $0xb9b9,%edi
  0x00007f32dd04937a:   add    %al,(%rax)
  0x00007f32dd04937c:   add    %al,(%rax)
  0x00007f32dd04937e:   add    %al,(%rax)
  0x00007f32dd049380:   adc    $0x11111111,%eax
  0x00007f32dd049385:   adc    %edx,(%rcx)
  0x00007f32dd049387:   adc    %edx,(%rcx)
  0x00007f32dd049389:   adc    %edx,(%rbx)
  0x00007f32dd04938b:   sbb    (%rbx),%ebx
  0x00007f32dd04938d:   sbb    (%rbx),%bl
  0x00007f32dd04938f:   sbb    0x11111111(%rip),%edx        # 0x00007f32ee15a4a6
  0x00007f32dd049395:   adc    %edx,(%rcx)
  0x00007f32dd049397:   adc    %edx,(%rcx)
  0x00007f32dd049399:   adc    %edx,(%rbx)
  0x00007f32dd04939b:   sbb    (%rbx),%ebx
  0x00007f32dd04939d:   sbb    (%rbx),%bl
  0x00007f32dd04939f:   sbb    (%rax),%eax
  0x00007f32dd0493a1:   adc    %dl,(%rcx)
  0x00007f32dd0493a3:   add    $0xbf,%al
  0x00007f32dd0493a5:   mov    $0xb9b9,%edi
  0x00007f32dd0493aa:   add    %al,(%rax)
  0x00007f32dd0493ac:   add    %al,(%rax)
  0x00007f32dd0493ae:   add    %al,(%rax)
  0x00007f32dd0493b0:   add    %dl,(%rax)
  0x00007f32dd0493b2:   adc    %eax,(%rdi,%rdi,4)
  0x00007f32dd0493b5:   mov    $0xb9b9,%edi
  0x00007f32dd0493ba:   add    %al,(%rax)
  0x00007f32dd0493bc:   add    %al,(%rax)
  0x00007f32dd0493be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::encoding_table_base64 [0x00007f32dd0493c0, 0x00007f32dd049440] (128 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd0493c0:   rex.B
  0x00007f32dd0493c1:   rex.X
  0x00007f32dd0493c2:   rex.XB
  0x00007f32dd0493c3:   rex.R
  0x00007f32dd0493c4:   rex.RB
  0x00007f32dd0493c5:   rex.RX
  0x00007f32dd0493c6:   rex.RXB
  0x00007f32dd0493c7:   rex.W
  0x00007f32dd0493c8:   rex.WB
  0x00007f32dd0493c9:   rex.WX
  0x00007f32dd0493ca:   rex.WXB
  0x00007f32dd0493cb:   rex.WR
  0x00007f32dd0493cc:   rex.WRB
  0x00007f32dd0493cd:   rex.WRX
  0x00007f32dd0493ce:   rex.WRXB push %r8
  0x00007f32dd0493d0:   push   %rcx
  0x00007f32dd0493d1:   push   %rdx
  0x00007f32dd0493d2:   push   %rbx
  0x00007f32dd0493d3:   push   %rsp
  0x00007f32dd0493d4:   push   %rbp
  0x00007f32dd0493d5:   push   %rsi
  0x00007f32dd0493d6:   push   %rdi
  0x00007f32dd0493d7:   pop    %rax
  0x00007f32dd0493d8:   pop    %rcx
  0x00007f32dd0493d9:   pop    %rdx
  0x00007f32dd0493da:   (bad)  
  0x00007f32dd0493db:   (bad)  {%k5}
  0x00007f32dd0493e0:   addr32 pushq $0x6c6b6a69
  0x00007f32dd0493e6:   insl   (%dx),%es:(%rdi)
  0x00007f32dd0493e7:   outsb  %ds:(%rsi),(%dx)
  0x00007f32dd0493e8:   outsl  %ds:(%rsi),(%dx)
  0x00007f32dd0493e9:   jo     Stub::<unknown> 0x00007f32dd04945c
  0x00007f32dd0493eb:   jb     Stub::<unknown> 0x00007f32dd049460
  0x00007f32dd0493ed:   je     Stub::<unknown> 0x00007f32dd049464
  0x00007f32dd0493ef:   jbe    Stub::<unknown> 0x00007f32dd049468
  0x00007f32dd0493f1:   js     Stub::<unknown> 0x00007f32dd04946c
  0x00007f32dd0493f3:   jp     Stub::encoding_table_base64+101 0x00007f32dd049425
  0x00007f32dd0493f5:   xor    %esi,(%rdx)
  0x00007f32dd0493f7:   xor    0x39383736(,%rsi,1),%esi
  0x00007f32dd0493fe:   sub    (%rdi),%ebp
  0x00007f32dd049400:   rex.B
  0x00007f32dd049401:   rex.X
  0x00007f32dd049402:   rex.XB
  0x00007f32dd049403:   rex.R
  0x00007f32dd049404:   rex.RB
  0x00007f32dd049405:   rex.RX
  0x00007f32dd049406:   rex.RXB
  0x00007f32dd049407:   rex.W
  0x00007f32dd049408:   rex.WB
  0x00007f32dd049409:   rex.WX
  0x00007f32dd04940a:   rex.WXB
  0x00007f32dd04940b:   rex.WR
  0x00007f32dd04940c:   rex.WRB
  0x00007f32dd04940d:   rex.WRX
  0x00007f32dd04940e:   rex.WRXB push %r8
  0x00007f32dd049410:   push   %rcx
  0x00007f32dd049411:   push   %rdx
  0x00007f32dd049412:   push   %rbx
  0x00007f32dd049413:   push   %rsp
  0x00007f32dd049414:   push   %rbp
  0x00007f32dd049415:   push   %rsi
  0x00007f32dd049416:   push   %rdi
  0x00007f32dd049417:   pop    %rax
  0x00007f32dd049418:   pop    %rcx
  0x00007f32dd049419:   pop    %rdx
  0x00007f32dd04941a:   (bad)  
  0x00007f32dd04941b:   (bad)  {%k5}
  0x00007f32dd049420:   addr32 pushq $0x6c6b6a69
  0x00007f32dd049426:   insl   (%dx),%es:(%rdi)
  0x00007f32dd049427:   outsb  %ds:(%rsi),(%dx)
  0x00007f32dd049428:   outsl  %ds:(%rsi),(%dx)
  0x00007f32dd049429:   jo     Stub::<unknown> 0x00007f32dd04949c
  0x00007f32dd04942b:   jb     Stub::<unknown> 0x00007f32dd0494a0
  0x00007f32dd04942d:   je     Stub::<unknown> 0x00007f32dd0494a4
  0x00007f32dd04942f:   jbe    Stub::<unknown> 0x00007f32dd0494a8
  0x00007f32dd049431:   js     Stub::<unknown> 0x00007f32dd0494ac
  0x00007f32dd049433:   jp     Stub::<unknown> 0x00007f32dd049465
  0x00007f32dd049435:   xor    %esi,(%rdx)
  0x00007f32dd049437:   xor    0x39383736(,%rsi,1),%esi
  0x00007f32dd04943e:   .byte 0x2d
  0x00007f32dd04943f:   pop    %rdi
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::decoding_table_base64 [0x00007f32dd049440, 0x00007f32dd049640] (512 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd049440:   (bad)  
  0x00007f32dd049441:   (bad)  
  0x00007f32dd049442:   (bad)  
  0x00007f32dd049443:   (bad)  
  0x00007f32dd049444:   (bad)  
  0x00007f32dd049445:   (bad)  
  0x00007f32dd049446:   (bad)  
  0x00007f32dd049447:   (bad)  
  0x00007f32dd049448:   (bad)  
  0x00007f32dd049449:   (bad)  
  0x00007f32dd04944a:   (bad)  
  0x00007f32dd04944b:   (bad)  
  0x00007f32dd04944c:   (bad)  
  0x00007f32dd04944d:   (bad)  
  0x00007f32dd04944e:   (bad)  
  0x00007f32dd04944f:   (bad)  
  0x00007f32dd049450:   (bad)  
  0x00007f32dd049451:   (bad)  
  0x00007f32dd049452:   (bad)  
  0x00007f32dd049453:   (bad)  
  0x00007f32dd049454:   (bad)  
  0x00007f32dd049455:   (bad)  
  0x00007f32dd049456:   (bad)  
  0x00007f32dd049457:   (bad)  
  0x00007f32dd049458:   (bad)  
  0x00007f32dd049459:   (bad)  
  0x00007f32dd04945a:   (bad)  
  0x00007f32dd04945b:   (bad)  
  0x00007f32dd04945c:   (bad)  
  0x00007f32dd04945d:   (bad)  
  0x00007f32dd04945e:   (bad)  
  0x00007f32dd04945f:   (bad)  
  0x00007f32dd049460:   (bad)  
  0x00007f32dd049461:   (bad)  
  0x00007f32dd049462:   (bad)  
  0x00007f32dd049463:   (bad)  
  0x00007f32dd049464:   (bad)  
  0x00007f32dd049465:   (bad)  
  0x00007f32dd049466:   (bad)  
  0x00007f32dd049467:   (bad)  
  0x00007f32dd049468:   (bad)  
  0x00007f32dd049469:   (bad)  
  0x00007f32dd04946a:   (bad)  
  0x00007f32dd04946b:   ds (bad) 
  0x00007f32dd04946d:   (bad)  
  0x00007f32dd04946e:   (bad)  
  0x00007f32dd04946f:   (bad)  
  0x00007f32dd049470:   xor    $0x35,%al
  0x00007f32dd049472:   ss (bad) 
  0x00007f32dd049474:   cmp    %bh,(%rcx)
  0x00007f32dd049476:   cmp    (%rbx),%bh
  0x00007f32dd049478:   cmp    $0x3d,%al
  0x00007f32dd04947a:   (bad)  
  0x00007f32dd04947b:   (bad)  
  0x00007f32dd04947c:   (bad)  
  0x00007f32dd04947d:   (bad)  
  0x00007f32dd04947e:   (bad)  
  0x00007f32dd04947f:   (bad)  
  0x00007f32dd049480:   incl   (%rax)
  0x00007f32dd049482:   add    %eax,(%rdx)
  0x00007f32dd049484:   add    0x9080706(,%rax,1),%eax
  0x00007f32dd04948b:   or     (%rbx),%cl
  0x00007f32dd04948d:   or     $0xd,%al
  0x00007f32dd04948f:   (bad)  
  0x00007f32dd049490:   movups (%rcx),%xmm2
  0x00007f32dd049493:   adc    (%rbx),%dl
  0x00007f32dd049495:   adc    $0x15,%al
  0x00007f32dd049497:   (bad)  
  0x00007f32dd049498:   (bad)  
  0x00007f32dd049499:   sbb    %bl,(%rcx)
  0x00007f32dd04949b:   (bad)  
  0x00007f32dd04949c:   (bad)  
  0x00007f32dd04949d:   (bad)  
  0x00007f32dd04949e:   (bad)  
  0x00007f32dd04949f:   (bad)  
  0x00007f32dd0494a0:   lcall  *(%rdx)
  0x00007f32dd0494a2:   sbb    0x21201f1e(,%rbx,1),%ebx
  0x00007f32dd0494a9:   and    (%rbx),%ah
  0x00007f32dd0494ab:   and    $0x25,%al
  0x00007f32dd0494ad:   es (bad) 
  0x00007f32dd0494af:   sub    %ch,(%rcx)
  0x00007f32dd0494b1:   sub    (%rbx),%ch
  0x00007f32dd0494b3:   sub    $0x2d,%al
  0x00007f32dd0494b5:   cs (bad) 
  0x00007f32dd0494b7:   xor    %dh,(%rcx)
  0x00007f32dd0494b9:   xor    (%rbx),%dh
  0x00007f32dd0494bb:   (bad)  
  0x00007f32dd0494bc:   (bad)  
  0x00007f32dd0494bd:   (bad)  
  0x00007f32dd0494be:   (bad)  
  0x00007f32dd0494bf:   (bad)  
  0x00007f32dd0494c0:   (bad)  
  0x00007f32dd0494c1:   (bad)  
  0x00007f32dd0494c2:   (bad)  
  0x00007f32dd0494c3:   (bad)  
  0x00007f32dd0494c4:   (bad)  
  0x00007f32dd0494c5:   (bad)  
  0x00007f32dd0494c6:   (bad)  
  0x00007f32dd0494c7:   (bad)  
  0x00007f32dd0494c8:   (bad)  
  0x00007f32dd0494c9:   (bad)  
  0x00007f32dd0494ca:   (bad)  
  0x00007f32dd0494cb:   (bad)  
  0x00007f32dd0494cc:   (bad)  
  0x00007f32dd0494cd:   (bad)  
  0x00007f32dd0494ce:   (bad)  
  0x00007f32dd0494cf:   (bad)  
  0x00007f32dd0494d0:   (bad)  
  0x00007f32dd0494d1:   (bad)  
  0x00007f32dd0494d2:   (bad)  
  0x00007f32dd0494d3:   (bad)  
  0x00007f32dd0494d4:   (bad)  
  0x00007f32dd0494d5:   (bad)  
  0x00007f32dd0494d6:   (bad)  
  0x00007f32dd0494d7:   (bad)  
  0x00007f32dd0494d8:   (bad)  
  0x00007f32dd0494d9:   (bad)  
  0x00007f32dd0494da:   (bad)  
  0x00007f32dd0494db:   (bad)  
  0x00007f32dd0494dc:   (bad)  
  0x00007f32dd0494dd:   (bad)  
  0x00007f32dd0494de:   (bad)  
  0x00007f32dd0494df:   (bad)  
  0x00007f32dd0494e0:   (bad)  
  0x00007f32dd0494e1:   (bad)  
  0x00007f32dd0494e2:   (bad)  
  0x00007f32dd0494e3:   (bad)  
  0x00007f32dd0494e4:   (bad)  
  0x00007f32dd0494e5:   (bad)  
  0x00007f32dd0494e6:   (bad)  
  0x00007f32dd0494e7:   (bad)  
  0x00007f32dd0494e8:   (bad)  
  0x00007f32dd0494e9:   (bad)  
  0x00007f32dd0494ea:   (bad)  
  0x00007f32dd0494eb:   (bad)  
  0x00007f32dd0494ec:   (bad)  
  0x00007f32dd0494ed:   (bad)  
  0x00007f32dd0494ee:   (bad)  
  0x00007f32dd0494ef:   (bad)  
  0x00007f32dd0494f0:   (bad)  
  0x00007f32dd0494f1:   (bad)  
  0x00007f32dd0494f2:   (bad)  
  0x00007f32dd0494f3:   (bad)  
  0x00007f32dd0494f4:   (bad)  
  0x00007f32dd0494f5:   (bad)  
  0x00007f32dd0494f6:   (bad)  
  0x00007f32dd0494f7:   (bad)  
  0x00007f32dd0494f8:   (bad)  
  0x00007f32dd0494f9:   (bad)  
  0x00007f32dd0494fa:   (bad)  
  0x00007f32dd0494fb:   (bad)  
  0x00007f32dd0494fc:   (bad)  
  0x00007f32dd0494fd:   (bad)  
  0x00007f32dd0494fe:   (bad)  
  0x00007f32dd0494ff:   (bad)  
  0x00007f32dd049500:   (bad)  
  0x00007f32dd049501:   (bad)  
  0x00007f32dd049502:   (bad)  
  0x00007f32dd049503:   (bad)  
  0x00007f32dd049504:   (bad)  
  0x00007f32dd049505:   (bad)  
  0x00007f32dd049506:   (bad)  
  0x00007f32dd049507:   (bad)  
  0x00007f32dd049508:   (bad)  
  0x00007f32dd049509:   (bad)  
  0x00007f32dd04950a:   (bad)  
  0x00007f32dd04950b:   (bad)  
  0x00007f32dd04950c:   (bad)  
  0x00007f32dd04950d:   (bad)  
  0x00007f32dd04950e:   (bad)  
  0x00007f32dd04950f:   (bad)  
  0x00007f32dd049510:   (bad)  
  0x00007f32dd049511:   (bad)  
  0x00007f32dd049512:   (bad)  
  0x00007f32dd049513:   (bad)  
  0x00007f32dd049514:   (bad)  
  0x00007f32dd049515:   (bad)  
  0x00007f32dd049516:   (bad)  
  0x00007f32dd049517:   (bad)  
  0x00007f32dd049518:   (bad)  
  0x00007f32dd049519:   (bad)  
  0x00007f32dd04951a:   (bad)  
  0x00007f32dd04951b:   (bad)  
  0x00007f32dd04951c:   (bad)  
  0x00007f32dd04951d:   (bad)  
  0x00007f32dd04951e:   (bad)  
  0x00007f32dd04951f:   (bad)  
  0x00007f32dd049520:   (bad)  
  0x00007f32dd049521:   (bad)  
  0x00007f32dd049522:   (bad)  
  0x00007f32dd049523:   (bad)  
  0x00007f32dd049524:   (bad)  
  0x00007f32dd049525:   (bad)  
  0x00007f32dd049526:   (bad)  
  0x00007f32dd049527:   (bad)  
  0x00007f32dd049528:   (bad)  
  0x00007f32dd049529:   (bad)  
  0x00007f32dd04952a:   (bad)  
  0x00007f32dd04952b:   (bad)  
  0x00007f32dd04952c:   (bad)  
  0x00007f32dd04952d:   (bad)  
  0x00007f32dd04952e:   (bad)  
  0x00007f32dd04952f:   (bad)  
  0x00007f32dd049530:   (bad)  
  0x00007f32dd049531:   (bad)  
  0x00007f32dd049532:   (bad)  
  0x00007f32dd049533:   (bad)  
  0x00007f32dd049534:   (bad)  
  0x00007f32dd049535:   (bad)  
  0x00007f32dd049536:   (bad)  
  0x00007f32dd049537:   (bad)  
  0x00007f32dd049538:   (bad)  
  0x00007f32dd049539:   (bad)  
  0x00007f32dd04953a:   (bad)  
  0x00007f32dd04953b:   (bad)  
  0x00007f32dd04953c:   (bad)  
  0x00007f32dd04953d:   (bad)  
  0x00007f32dd04953e:   (bad)  
  0x00007f32dd04953f:   (bad)  
  0x00007f32dd049540:   (bad)  
  0x00007f32dd049541:   (bad)  
  0x00007f32dd049542:   (bad)  
  0x00007f32dd049543:   (bad)  
  0x00007f32dd049544:   (bad)  
  0x00007f32dd049545:   (bad)  
  0x00007f32dd049546:   (bad)  
  0x00007f32dd049547:   (bad)  
  0x00007f32dd049548:   (bad)  
  0x00007f32dd049549:   (bad)  
  0x00007f32dd04954a:   (bad)  
  0x00007f32dd04954b:   (bad)  
  0x00007f32dd04954c:   (bad)  
  0x00007f32dd04954d:   (bad)  
  0x00007f32dd04954e:   (bad)  
  0x00007f32dd04954f:   (bad)  
  0x00007f32dd049550:   (bad)  
  0x00007f32dd049551:   (bad)  
  0x00007f32dd049552:   (bad)  
  0x00007f32dd049553:   (bad)  
  0x00007f32dd049554:   (bad)  
  0x00007f32dd049555:   (bad)  
  0x00007f32dd049556:   (bad)  
  0x00007f32dd049557:   (bad)  
  0x00007f32dd049558:   (bad)  
  0x00007f32dd049559:   (bad)  
  0x00007f32dd04955a:   (bad)  
  0x00007f32dd04955b:   (bad)  
  0x00007f32dd04955c:   (bad)  
  0x00007f32dd04955d:   (bad)  
  0x00007f32dd04955e:   (bad)  
  0x00007f32dd04955f:   (bad)  
  0x00007f32dd049560:   (bad)  
  0x00007f32dd049561:   (bad)  
  0x00007f32dd049562:   (bad)  
  0x00007f32dd049563:   (bad)  
  0x00007f32dd049564:   (bad)  
  0x00007f32dd049565:   (bad)  
  0x00007f32dd049566:   (bad)  
  0x00007f32dd049567:   (bad)  
  0x00007f32dd049568:   (bad)  
  0x00007f32dd049569:   (bad)  
  0x00007f32dd04956a:   (bad)  
  0x00007f32dd04956b:   (bad)  
  0x00007f32dd04956c:   (bad)  
  0x00007f32dd04956d:   ds (bad) 
  0x00007f32dd04956f:   pushq  0x39383736(,%rsi,1)
  0x00007f32dd049576:   cmp    (%rbx),%bh
  0x00007f32dd049578:   cmp    $0x3d,%al
  0x00007f32dd04957a:   (bad)  
  0x00007f32dd04957b:   (bad)  
  0x00007f32dd04957c:   (bad)  
  0x00007f32dd04957d:   (bad)  
  0x00007f32dd04957e:   (bad)  
  0x00007f32dd04957f:   (bad)  
  0x00007f32dd049580:   incl   (%rax)
  0x00007f32dd049582:   add    %eax,(%rdx)
  0x00007f32dd049584:   add    0x9080706(,%rax,1),%eax
  0x00007f32dd04958b:   or     (%rbx),%cl
  0x00007f32dd04958d:   or     $0xd,%al
  0x00007f32dd04958f:   (bad)  
  0x00007f32dd049590:   movups (%rcx),%xmm2
  0x00007f32dd049593:   adc    (%rbx),%dl
  0x00007f32dd049595:   adc    $0x15,%al
  0x00007f32dd049597:   (bad)  
  0x00007f32dd049598:   (bad)  
  0x00007f32dd049599:   sbb    %bl,(%rcx)
  0x00007f32dd04959b:   (bad)  
  0x00007f32dd04959c:   (bad)  
  0x00007f32dd04959d:   (bad)  
  0x00007f32dd04959e:   (bad)  
  0x00007f32dd04959f:   (bad)  
  0x00007f32dd0495a0:   lcall  *(%rdx)
  0x00007f32dd0495a2:   sbb    0x21201f1e(,%rbx,1),%ebx
  0x00007f32dd0495a9:   and    (%rbx),%ah
  0x00007f32dd0495ab:   and    $0x25,%al
  0x00007f32dd0495ad:   es (bad) 
  0x00007f32dd0495af:   sub    %ch,(%rcx)
  0x00007f32dd0495b1:   sub    (%rbx),%ch
  0x00007f32dd0495b3:   sub    $0x2d,%al
  0x00007f32dd0495b5:   cs (bad) 
  0x00007f32dd0495b7:   xor    %dh,(%rcx)
  0x00007f32dd0495b9:   xor    (%rbx),%dh
  0x00007f32dd0495bb:   (bad)  
  0x00007f32dd0495bc:   (bad)  
  0x00007f32dd0495bd:   (bad)  
  0x00007f32dd0495be:   (bad)  
  0x00007f32dd0495bf:   (bad)  
  0x00007f32dd0495c0:   (bad)  
  0x00007f32dd0495c1:   (bad)  
  0x00007f32dd0495c2:   (bad)  
  0x00007f32dd0495c3:   (bad)  
  0x00007f32dd0495c4:   (bad)  
  0x00007f32dd0495c5:   (bad)  
  0x00007f32dd0495c6:   (bad)  
  0x00007f32dd0495c7:   (bad)  
  0x00007f32dd0495c8:   (bad)  
  0x00007f32dd0495c9:   (bad)  
  0x00007f32dd0495ca:   (bad)  
  0x00007f32dd0495cb:   (bad)  
  0x00007f32dd0495cc:   (bad)  
  0x00007f32dd0495cd:   (bad)  
  0x00007f32dd0495ce:   (bad)  
  0x00007f32dd0495cf:   (bad)  
  0x00007f32dd0495d0:   (bad)  
  0x00007f32dd0495d1:   (bad)  
  0x00007f32dd0495d2:   (bad)  
  0x00007f32dd0495d3:   (bad)  
  0x00007f32dd0495d4:   (bad)  
  0x00007f32dd0495d5:   (bad)  
  0x00007f32dd0495d6:   (bad)  
  0x00007f32dd0495d7:   (bad)  
  0x00007f32dd0495d8:   (bad)  
  0x00007f32dd0495d9:   (bad)  
  0x00007f32dd0495da:   (bad)  
  0x00007f32dd0495db:   (bad)  
  0x00007f32dd0495dc:   (bad)  
  0x00007f32dd0495dd:   (bad)  
  0x00007f32dd0495de:   (bad)  
  0x00007f32dd0495df:   (bad)  
  0x00007f32dd0495e0:   (bad)  
  0x00007f32dd0495e1:   (bad)  
  0x00007f32dd0495e2:   (bad)  
  0x00007f32dd0495e3:   (bad)  
  0x00007f32dd0495e4:   (bad)  
  0x00007f32dd0495e5:   (bad)  
  0x00007f32dd0495e6:   (bad)  
  0x00007f32dd0495e7:   (bad)  
  0x00007f32dd0495e8:   (bad)  
  0x00007f32dd0495e9:   (bad)  
  0x00007f32dd0495ea:   (bad)  
  0x00007f32dd0495eb:   (bad)  
  0x00007f32dd0495ec:   (bad)  
  0x00007f32dd0495ed:   (bad)  
  0x00007f32dd0495ee:   (bad)  
  0x00007f32dd0495ef:   (bad)  
  0x00007f32dd0495f0:   (bad)  
  0x00007f32dd0495f1:   (bad)  
  0x00007f32dd0495f2:   (bad)  
  0x00007f32dd0495f3:   (bad)  
  0x00007f32dd0495f4:   (bad)  
  0x00007f32dd0495f5:   (bad)  
  0x00007f32dd0495f6:   (bad)  
  0x00007f32dd0495f7:   (bad)  
  0x00007f32dd0495f8:   (bad)  
  0x00007f32dd0495f9:   (bad)  
  0x00007f32dd0495fa:   (bad)  
  0x00007f32dd0495fb:   (bad)  
  0x00007f32dd0495fc:   (bad)  
  0x00007f32dd0495fd:   (bad)  
  0x00007f32dd0495fe:   (bad)  
  0x00007f32dd0495ff:   (bad)  
  0x00007f32dd049600:   (bad)  
  0x00007f32dd049601:   (bad)  
  0x00007f32dd049602:   (bad)  
  0x00007f32dd049603:   (bad)  
  0x00007f32dd049604:   (bad)  
  0x00007f32dd049605:   (bad)  
  0x00007f32dd049606:   (bad)  
  0x00007f32dd049607:   (bad)  
  0x00007f32dd049608:   (bad)  
  0x00007f32dd049609:   (bad)  
  0x00007f32dd04960a:   (bad)  
  0x00007f32dd04960b:   (bad)  
  0x00007f32dd04960c:   (bad)  
  0x00007f32dd04960d:   (bad)  
  0x00007f32dd04960e:   (bad)  
  0x00007f32dd04960f:   (bad)  
  0x00007f32dd049610:   (bad)  
  0x00007f32dd049611:   (bad)  
  0x00007f32dd049612:   (bad)  
  0x00007f32dd049613:   (bad)  
  0x00007f32dd049614:   (bad)  
  0x00007f32dd049615:   (bad)  
  0x00007f32dd049616:   (bad)  
  0x00007f32dd049617:   (bad)  
  0x00007f32dd049618:   (bad)  
  0x00007f32dd049619:   (bad)  
  0x00007f32dd04961a:   (bad)  
  0x00007f32dd04961b:   (bad)  
  0x00007f32dd04961c:   (bad)  
  0x00007f32dd04961d:   (bad)  
  0x00007f32dd04961e:   (bad)  
  0x00007f32dd04961f:   (bad)  
  0x00007f32dd049620:   (bad)  
  0x00007f32dd049621:   (bad)  
  0x00007f32dd049622:   (bad)  
  0x00007f32dd049623:   (bad)  
  0x00007f32dd049624:   (bad)  
  0x00007f32dd049625:   (bad)  
  0x00007f32dd049626:   (bad)  
  0x00007f32dd049627:   (bad)  
  0x00007f32dd049628:   (bad)  
  0x00007f32dd049629:   (bad)  
  0x00007f32dd04962a:   (bad)  
  0x00007f32dd04962b:   (bad)  
  0x00007f32dd04962c:   (bad)  
  0x00007f32dd04962d:   (bad)  
  0x00007f32dd04962e:   (bad)  
  0x00007f32dd04962f:   (bad)  
  0x00007f32dd049630:   (bad)  
  0x00007f32dd049631:   (bad)  
  0x00007f32dd049632:   (bad)  
  0x00007f32dd049633:   (bad)  
  0x00007f32dd049634:   (bad)  
  0x00007f32dd049635:   (bad)  
  0x00007f32dd049636:   (bad)  
  0x00007f32dd049637:   (bad)  
  0x00007f32dd049638:   (bad)  
  0x00007f32dd049639:   (bad)  
  0x00007f32dd04963a:   (bad)  
  0x00007f32dd04963b:   (bad)  
  0x00007f32dd04963c:   (bad)  
  0x00007f32dd04963d:   (bad)  
  0x00007f32dd04963e:   (bad)  
  0x00007f32dd04963f:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::implEncode [0x00007f32dd049640, 0x00007f32dd049856] (534 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd049640:   push   %rbp
  0x00007f32dd049641:   mov    %rsp,%rbp
  0x00007f32dd049644:   push   %r12
  0x00007f32dd049646:   push   %r13
  0x00007f32dd049648:   push   %r14
  0x00007f32dd04964a:   push   %r15
  0x00007f32dd04964c:   mov    %edx,%r14d
  0x00007f32dd04964f:   sub    %esi,%r14d
  0x00007f32dd049652:   cmp    $0x0,%r14d
  0x00007f32dd049656:   jle    Stub::implEncode+524 0x00007f32dd04984c
  0x00007f32dd04965c:   cmp    $0x1f,%r14d
  0x00007f32dd049660:   jbe    Stub::implEncode+365 0x00007f32dd0497ad
  0x00007f32dd049666:   vmovdqu -0x4ae(%rip),%ymm9        # Stub::avx2_shuffle_base64
  0x00007f32dd04966e:   mov    $0xfc0fc00,%eax
  0x00007f32dd049673:   vmovd  %eax,%xmm8
  0x00007f32dd049677:   vmovdqu -0x49f(%rip),%ymm1        # Stub::avx2_input_mask_base64
  0x00007f32dd04967f:   vpbroadcastd %xmm8,%ymm8
  0x00007f32dd049684:   mov    $0x4000040,%eax
  0x00007f32dd049689:   sub    $0x18,%r14d
  0x00007f32dd04968d:   vmovd  %eax,%xmm7
  0x00007f32dd049691:   vpbroadcastd %xmm7,%ymm7
  0x00007f32dd049696:   vpmaskmovd -0x4(%rdi,%rsi,1),%ymm1,%ymm1
  0x00007f32dd04969d:   vpshufb %ymm9,%ymm1,%ymm1
  0x00007f32dd0496a2:   add    $0x18,%esi
  0x00007f32dd0496a5:   mov    $0x3f03f0,%eax
  0x00007f32dd0496aa:   vmovd  %eax,%xmm6
  0x00007f32dd0496ae:   vpbroadcastd %xmm6,%ymm6
  0x00007f32dd0496b3:   mov    $0x1000010,%eax
  0x00007f32dd0496b8:   vmovd  %eax,%xmm5
  0x00007f32dd0496bc:   vpbroadcastd %xmm5,%ymm5
  0x00007f32dd0496c1:   vpand  %ymm1,%ymm8,%ymm0
  0x00007f32dd0496c5:   mov    $0x19191919,%eax
  0x00007f32dd0496ca:   vmovd  %eax,%xmm3
  0x00007f32dd0496ce:   vpbroadcastd %xmm3,%ymm3
  0x00007f32dd0496d3:   mov    $0x33333333,%eax
  0x00007f32dd0496d8:   vmovd  %eax,%xmm4
  0x00007f32dd0496dc:   vpbroadcastd %xmm4,%ymm4
  0x00007f32dd0496e1:   vpmulhuw %ymm7,%ymm0,%ymm2
  0x00007f32dd0496e5:   vpand  %ymm1,%ymm6,%ymm0
  0x00007f32dd0496e9:   vpmullw %ymm0,%ymm5,%ymm0
  0x00007f32dd0496ed:   vpor   %ymm2,%ymm0,%ymm0
  0x00007f32dd0496f1:   vpcmpgtb %ymm3,%ymm0,%ymm2
  0x00007f32dd0496f5:   vpsubusb %ymm4,%ymm0,%ymm1
  0x00007f32dd0496f9:   vpsubb %ymm2,%ymm1,%ymm1
  0x00007f32dd0496fd:   movabs $0x7f32dd049200,%r11
  0x00007f32dd049707:   mov    %r9d,%r15d
  0x00007f32dd04970a:   shl    $0x5,%r15d
  0x00007f32dd04970e:   vmovdqu (%r11,%r15,1),%ymm2
  0x00007f32dd049714:   vpshufb %ymm1,%ymm2,%ymm1
  0x00007f32dd049719:   vpaddb %ymm0,%ymm1,%ymm0
  0x00007f32dd04971d:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007f32dd049723:   add    $0x20,%r8d
  0x00007f32dd049727:   cmp    $0x1f,%r14d
  0x00007f32dd04972b:   jbe    Stub::implEncode+365 0x00007f32dd0497ad
  0x00007f32dd049731:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd04973c:   data16 data16 xchg %ax,%ax
  0x00007f32dd049740:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd04974b:   data16 data16 xchg %ax,%ax
  0x00007f32dd04974f:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd04975a:   data16 data16 xchg %ax,%ax
  0x00007f32dd04975e:   xchg   %ax,%ax
  0x00007f32dd049760:   vmovdqu -0x4(%rdi,%rsi,1),%ymm1
  0x00007f32dd049766:   sub    $0x18,%r14d
  0x00007f32dd04976a:   add    $0x18,%esi
  0x00007f32dd04976d:   vpshufb %ymm9,%ymm1,%ymm1
  0x00007f32dd049772:   vpand  %ymm1,%ymm8,%ymm0
  0x00007f32dd049776:   vpmulhuw %ymm7,%ymm0,%ymm10
  0x00007f32dd04977a:   vpand  %ymm1,%ymm6,%ymm0
  0x00007f32dd04977e:   vpmullw %ymm0,%ymm5,%ymm0
  0x00007f32dd049782:   vpor   %ymm10,%ymm0,%ymm0
  0x00007f32dd049787:   vpcmpgtb %ymm3,%ymm0,%ymm10
  0x00007f32dd04978b:   vpsubusb %ymm4,%ymm0,%ymm1
  0x00007f32dd04978f:   vpsubb %ymm10,%ymm1,%ymm1
  0x00007f32dd049794:   vpshufb %ymm1,%ymm2,%ymm1
  0x00007f32dd049799:   vpaddb %ymm0,%ymm1,%ymm0
  0x00007f32dd04979d:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007f32dd0497a3:   add    $0x20,%r8d
  0x00007f32dd0497a7:   cmp    $0x1f,%r14d
  0x00007f32dd0497ab:   ja     Stub::implEncode+288 0x00007f32dd049760
  0x00007f32dd0497ad:   vzeroupper 
  0x00007f32dd0497b0:   cmp    $0x3,%r14d
  0x00007f32dd0497b4:   jb     Stub::implEncode+524 0x00007f32dd04984c
  0x00007f32dd0497ba:   movabs $0x7f32dd0493c0,%r11
  0x00007f32dd0497c4:   mov    %r9d,%r15d
  0x00007f32dd0497c7:   shl    $0x6,%r15d
  0x00007f32dd0497cb:   add    %r15,%r11
  0x00007f32dd0497ce:   movzbl (%rdi,%rsi,1),%r15d
  0x00007f32dd0497d3:   movzbl 0x1(%rdi,%rsi,1),%r10d
  0x00007f32dd0497d9:   movzbl 0x2(%rdi,%rsi,1),%r13d
  0x00007f32dd0497df:   mov    %r10d,%eax
  0x00007f32dd0497e2:   shl    $0x18,%r10d
  0x00007f32dd0497e6:   or     %r10d,%eax
  0x00007f32dd0497e9:   sub    $0x3,%r14d
  0x00007f32dd0497ed:   shl    $0x8,%r15d
  0x00007f32dd0497f1:   shl    $0x10,%r13d
  0x00007f32dd0497f5:   or     %r15d,%eax
  0x00007f32dd0497f8:   add    $0x3,%esi
  0x00007f32dd0497fb:   or     %r13d,%eax
  0x00007f32dd0497fe:   shr    $0x10,%r13d
  0x00007f32dd049802:   and    $0x3f,%r13d
  0x00007f32dd049806:   shr    $0xa,%r15d
  0x00007f32dd04980a:   movzbl (%r11,%r13,1),%r13d
  0x00007f32dd04980f:   movzbl (%r11,%r15,1),%r15d
  0x00007f32dd049814:   mov    %r13b,0x3(%rcx,%r8,1)
  0x00007f32dd049819:   shr    $0x4,%eax
  0x00007f32dd04981c:   mov    %eax,%r10d
  0x00007f32dd04981f:   and    $0x3f,%eax
  0x00007f32dd049822:   mov    %r15b,(%rcx,%r8,1)
  0x00007f32dd049826:   movzbl (%r11,%rax,1),%eax
  0x00007f32dd04982b:   shr    $0x12,%r10d
  0x00007f32dd04982f:   and    $0x3f,%r10d
  0x00007f32dd049833:   movzbl (%r11,%r10,1),%r10d
  0x00007f32dd049838:   mov    %al,0x1(%rcx,%r8,1)
  0x00007f32dd04983d:   mov    %r10b,0x2(%rcx,%r8,1)
  0x00007f32dd049842:   add    $0x4,%r8d
  0x00007f32dd049846:   cmp    $0x3,%r14d
  0x00007f32dd04984a:   jae    Stub::implEncode+398 0x00007f32dd0497ce
  0x00007f32dd04984c:   pop    %r15
  0x00007f32dd04984e:   pop    %r14
  0x00007f32dd049850:   pop    %r13
  0x00007f32dd049852:   pop    %r12
  0x00007f32dd049854:   leaveq 
  0x00007f32dd049855:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::implDecode [0x00007f32dd049860, 0x00007f32dd049a64] (516 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd049860:   push   %rbp
  0x00007f32dd049861:   mov    %rsp,%rbp
  0x00007f32dd049864:   push   %r12
  0x00007f32dd049866:   push   %r13
  0x00007f32dd049868:   push   %r14
  0x00007f32dd04986a:   push   %r15
  0x00007f32dd04986c:   push   %rbx
  0x00007f32dd04986d:   mov    0x10(%rbp),%ebx
  0x00007f32dd049870:   mov    %edx,%r14d
  0x00007f32dd049873:   sub    %esi,%r14d
  0x00007f32dd049876:   push   %rcx
  0x00007f32dd049877:   sub    $0x2c,%r14d
  0x00007f32dd04987b:   cmp    $0x0,%r14d
  0x00007f32dd04987f:   jbe    Stub::implDecode+287 0x00007f32dd04997f
  0x00007f32dd049885:   cmp    $0x0,%ebx
  0x00007f32dd049888:   jne    Stub::implDecode+287 0x00007f32dd04997f
  0x00007f32dd04988e:   shl    $0x3,%r9d
  0x00007f32dd049892:   movabs $0x7f32dd049240,%r13
  0x00007f32dd04989c:   vpbroadcastq 0x0(%r13,%r9,1),%ymm4
  0x00007f32dd0498a3:   vmovdqu %ymm4,%ymm10
  0x00007f32dd0498a7:   vmovdqu 0x10(%r13),%ymm12
  0x00007f32dd0498ad:   vmovdqu 0x30(%r13),%ymm9
  0x00007f32dd0498b3:   vmovdqu 0x50(%r13),%ymm7
  0x00007f32dd0498b9:   vmovdqu 0x70(%r13),%ymm6
  0x00007f32dd0498bf:   vmovdqu 0x90(%r13),%ymm13
  0x00007f32dd0498c8:   movabs $0x7f32dd049340,%r13
  0x00007f32dd0498d2:   shl    $0x2,%r9d
  0x00007f32dd0498d6:   vmovdqu 0x0(%r13,%r9,1),%ymm11
  0x00007f32dd0498dd:   vmovdqu 0x20(%r13,%r9,1),%ymm8
  0x00007f32dd0498e4:   shr    $0x5,%r9d
  0x00007f32dd0498e8:   jmpq   Stub::implDecode+239 0x00007f32dd04994f
  0x00007f32dd0498ed:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd0498f8:   data16 data16 xchg %ax,%ax
  0x00007f32dd0498fc:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd049907:   data16 data16 xchg %ax,%ax
  0x00007f32dd04990b:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd049916:   data16 data16 xchg %ax,%ax
  0x00007f32dd04991a:   nopw   0x0(%rax,%rax,1)
  0x00007f32dd049920:   vpaddb %ymm2,%ymm0,%ymm0
  0x00007f32dd049924:   vpmaddubsw %ymm7,%ymm0,%ymm0
  0x00007f32dd049929:   vpmaddwd %ymm6,%ymm0,%ymm0
  0x00007f32dd04992d:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007f32dd049932:   vpermd %ymm0,%ymm12,%ymm0
  0x00007f32dd049937:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007f32dd04993d:   add    $0x20,%rdi
  0x00007f32dd049941:   add    $0x18,%rcx
  0x00007f32dd049945:   sub    $0x20,%r14d
  0x00007f32dd049949:   jbe    Stub::implDecode+287 0x00007f32dd04997f
  0x00007f32dd04994f:   vmovdqu (%rdi,%rsi,1),%ymm2
  0x00007f32dd049954:   vpsrld $0x4,%ymm2,%ymm1
  0x00007f32dd049959:   vpand  %ymm1,%ymm4,%ymm1
  0x00007f32dd04995d:   vpand  %ymm4,%ymm2,%ymm3
  0x00007f32dd049961:   vpcmpeqb %ymm2,%ymm10,%ymm0
  0x00007f32dd049965:   vpshufb %ymm3,%ymm11,%ymm3
  0x00007f32dd04996a:   vpshufb %ymm1,%ymm9,%ymm5
  0x00007f32dd04996f:   vptest %ymm5,%ymm3
  0x00007f32dd049974:   vpaddb %ymm1,%ymm0,%ymm0
  0x00007f32dd049978:   vpshufb %ymm0,%ymm8,%ymm0
  0x00007f32dd04997d:   je     Stub::implDecode+192 0x00007f32dd049920
  0x00007f32dd04997f:   add    $0x2c,%r14d
  0x00007f32dd049983:   vzeroupper 
  0x00007f32dd049986:   shr    $0x2,%r14d
  0x00007f32dd04998a:   cmp    $0x0,%r14d
  0x00007f32dd04998e:   jle    Stub::implDecode+498 0x00007f32dd049a52
  0x00007f32dd049994:   shl    $0x8,%r9d
  0x00007f32dd049998:   movabs $0x7f32dd049440,%r11
  0x00007f32dd0499a2:   add    %r9,%r11
  0x00007f32dd0499a5:   jmpq   Stub::implDecode+443 0x00007f32dd049a1b
  0x00007f32dd0499aa:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd0499b5:   data16 data16 xchg %ax,%ax
  0x00007f32dd0499b9:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd0499c4:   data16 data16 xchg %ax,%ax
  0x00007f32dd0499c8:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd0499d3:   data16 data16 xchg %ax,%ax
  0x00007f32dd0499d7:   nopw   0x0(%rax,%rax,1)
  0x00007f32dd0499e0:   shl    $0x12,%r13d
  0x00007f32dd0499e4:   shl    $0xc,%r15d
  0x00007f32dd0499e8:   shl    $0x6,%edx
  0x00007f32dd0499eb:   or     %r15d,%r13d
  0x00007f32dd0499ee:   or     %edx,%r13d
  0x00007f32dd0499f1:   or     %r9d,%r13d
  0x00007f32dd0499f4:   add    $0x4,%rdi
  0x00007f32dd0499f8:   mov    %r13b,0x2(%rcx,%r8,1)
  0x00007f32dd0499fd:   shr    $0x8,%r13d
  0x00007f32dd049a01:   mov    %r13b,0x1(%rcx,%r8,1)
  0x00007f32dd049a06:   shr    $0x8,%r13d
  0x00007f32dd049a0a:   mov    %r13b,(%rcx,%r8,1)
  0x00007f32dd049a0e:   add    $0x3,%rcx
  0x00007f32dd049a12:   dec    %r14d
  0x00007f32dd049a15:   je     Stub::implDecode+498 0x00007f32dd049a52
  0x00007f32dd049a1b:   movzbl (%rdi,%rsi,1),%r13d
  0x00007f32dd049a20:   movzbl 0x1(%rdi,%rsi,1),%r15d
  0x00007f32dd049a26:   movsbl (%r11,%r13,1),%r13d
  0x00007f32dd049a2b:   movsbl (%r11,%r15,1),%r15d
  0x00007f32dd049a30:   movzbl 0x2(%rdi,%rsi,1),%edx
  0x00007f32dd049a35:   movzbl 0x3(%rdi,%rsi,1),%r9d
  0x00007f32dd049a3b:   movsbl (%r11,%rdx,1),%edx
  0x00007f32dd049a40:   movsbl (%r11,%r9,1),%r9d
  0x00007f32dd049a45:   mov    %r13,%rax
  0x00007f32dd049a48:   or     %r15d,%eax
  0x00007f32dd049a4b:   or     %edx,%eax
  0x00007f32dd049a4d:   or     %r9d,%eax
  0x00007f32dd049a50:   jns    Stub::implDecode+384 0x00007f32dd0499e0
  0x00007f32dd049a52:   pop    %rax
  0x00007f32dd049a53:   sub    %rax,%rcx
  0x00007f32dd049a56:   mov    %rcx,%rax
  0x00007f32dd049a59:   pop    %rbx
  0x00007f32dd049a5a:   pop    %r15
  0x00007f32dd049a5c:   pop    %r14
  0x00007f32dd049a5e:   pop    %r13
  0x00007f32dd049a60:   pop    %r12
  0x00007f32dd049a62:   leaveq 
  0x00007f32dd049a63:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::nmethod_entry_barrier [0x00007f32dd049a80, 0x00007f32dd049c2d] (429 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd049a80:   pushq  $0xffffffffffffffff
  0x00007f32dd049a85:   push   %rbp
  0x00007f32dd049a86:   mov    %rsp,%rbp
  0x00007f32dd049a89:   push   %rdi
  0x00007f32dd049a8a:   lea    0x18(%rsp),%rdi
  0x00007f32dd049a8f:   sub    $0x80,%rsp
  0x00007f32dd049a96:   mov    %rax,0x78(%rsp)
  0x00007f32dd049a9b:   mov    %rcx,0x70(%rsp)
  0x00007f32dd049aa0:   mov    %rdx,0x68(%rsp)
  0x00007f32dd049aa5:   mov    %rbx,0x60(%rsp)
  0x00007f32dd049aaa:   mov    %rbp,0x50(%rsp)
  0x00007f32dd049aaf:   mov    %rsi,0x48(%rsp)
  0x00007f32dd049ab4:   mov    %rdi,0x40(%rsp)
  0x00007f32dd049ab9:   mov    %r8,0x38(%rsp)
  0x00007f32dd049abe:   mov    %r9,0x30(%rsp)
  0x00007f32dd049ac3:   mov    %r10,0x28(%rsp)
  0x00007f32dd049ac8:   mov    %r11,0x20(%rsp)
  0x00007f32dd049acd:   mov    %r12,0x18(%rsp)
  0x00007f32dd049ad2:   mov    %r13,0x10(%rsp)
  0x00007f32dd049ad7:   mov    %r14,0x8(%rsp)
  0x00007f32dd049adc:   mov    %r15,(%rsp)
  0x00007f32dd049ae0:   sub    $0x80,%rsp
  0x00007f32dd049ae7:   vmovdqu %xmm7,0x70(%rsp)
  0x00007f32dd049aed:   vmovdqu %xmm6,0x60(%rsp)
  0x00007f32dd049af3:   vmovdqu %xmm5,0x50(%rsp)
  0x00007f32dd049af9:   vmovdqu %xmm4,0x40(%rsp)
  0x00007f32dd049aff:   vmovdqu %xmm3,0x30(%rsp)
  0x00007f32dd049b05:   vmovdqu %xmm2,0x20(%rsp)
  0x00007f32dd049b0b:   vmovdqu %xmm1,0x10(%rsp)
  0x00007f32dd049b11:   vmovdqu %xmm0,(%rsp)
  0x00007f32dd049b16:   test   $0xf,%spl
  0x00007f32dd049b1a:   je     Stub::nmethod_entry_barrier+178 0x00007f32dd049b32
  0x00007f32dd049b20:   sub    $0x8,%rsp
  0x00007f32dd049b24:   callq  0x00007f32e5f002e0 = BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)
  0x00007f32dd049b29:   add    $0x8,%rsp
  0x00007f32dd049b2d:   jmpq   Stub::nmethod_entry_barrier+183 0x00007f32dd049b37
  0x00007f32dd049b32:   callq  0x00007f32e5f002e0 = BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)
  0x00007f32dd049b37:   vmovdqu (%rsp),%xmm0
  0x00007f32dd049b3c:   vmovdqu 0x10(%rsp),%xmm1
  0x00007f32dd049b42:   vmovdqu 0x20(%rsp),%xmm2
  0x00007f32dd049b48:   vmovdqu 0x30(%rsp),%xmm3
  0x00007f32dd049b4e:   vmovdqu 0x40(%rsp),%xmm4
  0x00007f32dd049b54:   vmovdqu 0x50(%rsp),%xmm5
  0x00007f32dd049b5a:   vmovdqu 0x60(%rsp),%xmm6
  0x00007f32dd049b60:   vmovdqu 0x70(%rsp),%xmm7
  0x00007f32dd049b66:   add    $0x80,%rsp
  0x00007f32dd049b6d:   cmp    $0x1,%eax
  0x00007f32dd049b70:   je     Stub::nmethod_entry_barrier+334 0x00007f32dd049bce
  0x00007f32dd049b76:   mov    (%rsp),%r15
  0x00007f32dd049b7a:   mov    0x8(%rsp),%r14
  0x00007f32dd049b7f:   mov    0x10(%rsp),%r13
  0x00007f32dd049b84:   mov    0x18(%rsp),%r12
  0x00007f32dd049b89:   mov    0x20(%rsp),%r11
  0x00007f32dd049b8e:   mov    0x28(%rsp),%r10
  0x00007f32dd049b93:   mov    0x30(%rsp),%r9
  0x00007f32dd049b98:   mov    0x38(%rsp),%r8
  0x00007f32dd049b9d:   mov    0x40(%rsp),%rdi
  0x00007f32dd049ba2:   mov    0x48(%rsp),%rsi
  0x00007f32dd049ba7:   mov    0x50(%rsp),%rbp
  0x00007f32dd049bac:   mov    0x60(%rsp),%rbx
  0x00007f32dd049bb1:   mov    0x68(%rsp),%rdx
  0x00007f32dd049bb6:   mov    0x70(%rsp),%rcx
  0x00007f32dd049bbb:   mov    0x78(%rsp),%rax
  0x00007f32dd049bc0:   add    $0x80,%rsp
  0x00007f32dd049bc7:   pop    %rdi
  0x00007f32dd049bc8:   leaveq 
  0x00007f32dd049bc9:   add    $0x8,%rsp
  0x00007f32dd049bcd:   retq   
  0x00007f32dd049bce:   mov    (%rsp),%r15
  0x00007f32dd049bd2:   mov    0x8(%rsp),%r14
  0x00007f32dd049bd7:   mov    0x10(%rsp),%r13
  0x00007f32dd049bdc:   mov    0x18(%rsp),%r12
  0x00007f32dd049be1:   mov    0x20(%rsp),%r11
  0x00007f32dd049be6:   mov    0x28(%rsp),%r10
  0x00007f32dd049beb:   mov    0x30(%rsp),%r9
  0x00007f32dd049bf0:   mov    0x38(%rsp),%r8
  0x00007f32dd049bf5:   mov    0x40(%rsp),%rdi
  0x00007f32dd049bfa:   mov    0x48(%rsp),%rsi
  0x00007f32dd049bff:   mov    0x50(%rsp),%rbp
  0x00007f32dd049c04:   mov    0x60(%rsp),%rbx
  0x00007f32dd049c09:   mov    0x68(%rsp),%rdx
  0x00007f32dd049c0e:   mov    0x70(%rsp),%rcx
  0x00007f32dd049c13:   mov    0x78(%rsp),%rax
  0x00007f32dd049c18:   add    $0x80,%rsp
  0x00007f32dd049c1f:   pop    %rdi
  0x00007f32dd049c20:   leaveq 
  0x00007f32dd049c21:   test   %rsp,(%rsp)
  0x00007f32dd049c25:   mov    (%rsp),%rsp
  0x00007f32dd049c29:   jmpq   *-0x8(%rsp)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::multiplyToLen [0x00007f32dd049c40, 0x00007f32dd049e6f] (559 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd049c40:   push   %rbp
  0x00007f32dd049c41:   mov    %rsp,%rbp
  0x00007f32dd049c44:   mov    %r9,%r11
  0x00007f32dd049c47:   mov    %rsi,%rax
  0x00007f32dd049c4a:   mov    %rdx,%rsi
  0x00007f32dd049c4d:   push   %r12
  0x00007f32dd049c4f:   push   %r13
  0x00007f32dd049c51:   push   %r14
  0x00007f32dd049c53:   push   %r15
  0x00007f32dd049c55:   push   %rbx
  0x00007f32dd049c56:   push   %rax
  0x00007f32dd049c57:   push   %r11
  0x00007f32dd049c59:   mov    %ecx,%r12d
  0x00007f32dd049c5c:   mov    %r11d,%r13d
  0x00007f32dd049c5f:   xor    %rbx,%rbx
  0x00007f32dd049c62:   mov    %eax,%r14d
  0x00007f32dd049c65:   dec    %r14d
  0x00007f32dd049c68:   js     Stub::multiplyToLen+545 0x00007f32dd049e61
  0x00007f32dd049c6e:   dec    %r14d
  0x00007f32dd049c71:   js     Stub::multiplyToLen+129 0x00007f32dd049cc1
  0x00007f32dd049c77:   mov    (%rdi,%r14,4),%r11
  0x00007f32dd049c7b:   ror    $0x20,%r11
  0x00007f32dd049c7f:   dec    %r12d
  0x00007f32dd049c82:   js     Stub::multiplyToLen+134 0x00007f32dd049cc6
  0x00007f32dd049c88:   dec    %r12d
  0x00007f32dd049c8b:   js     Stub::multiplyToLen+124 0x00007f32dd049cbc
  0x00007f32dd049c91:   mov    (%rsi,%r12,4),%r15
  0x00007f32dd049c95:   ror    $0x20,%r15
  0x00007f32dd049c99:   mov    %r11,%rax
  0x00007f32dd049c9c:   mul    %r15
  0x00007f32dd049c9f:   add    %rbx,%rax
  0x00007f32dd049ca2:   adc    $0x0,%rdx
  0x00007f32dd049ca6:   sub    $0x2,%r13d
  0x00007f32dd049caa:   mov    %eax,0x4(%r8,%r13,4)
  0x00007f32dd049caf:   shr    $0x20,%rax
  0x00007f32dd049cb3:   mov    %eax,(%r8,%r13,4)
  0x00007f32dd049cb7:   mov    %rdx,%rbx
  0x00007f32dd049cba:   jmp    Stub::multiplyToLen+63 0x00007f32dd049c7f
  0x00007f32dd049cbc:   mov    (%rsi),%r15d
  0x00007f32dd049cbf:   jmp    Stub::multiplyToLen+89 0x00007f32dd049c99
  0x00007f32dd049cc1:   mov    (%rdi),%r11d
  0x00007f32dd049cc4:   jmp    Stub::multiplyToLen+63 0x00007f32dd049c7f
  0x00007f32dd049cc6:   test   %r13d,%r13d
  0x00007f32dd049cc9:   je     Stub::multiplyToLen+169 0x00007f32dd049ce9
  0x00007f32dd049ccf:   sub    $0x1,%r13d
  0x00007f32dd049cd3:   je     Stub::multiplyToLen+165 0x00007f32dd049ce5
  0x00007f32dd049cd9:   mov    %ebx,(%r8,%r13,4)
  0x00007f32dd049cdd:   shr    $0x20,%rbx
  0x00007f32dd049ce1:   sub    $0x1,%r13d
  0x00007f32dd049ce5:   mov    %ebx,(%r8,%r13,4)
  0x00007f32dd049ce9:   xor    %ebx,%ebx
  0x00007f32dd049ceb:   mov    %ecx,%r12d
  0x00007f32dd049cee:   sub    $0x1,%r14d
  0x00007f32dd049cf2:   js     Stub::multiplyToLen+545 0x00007f32dd049e61
  0x00007f32dd049cf8:   push   %r8
  0x00007f32dd049cfa:   lea    0x4(%r8,%r14,4),%r8
  0x00007f32dd049cff:   sub    $0x1,%r14d
  0x00007f32dd049d03:   js     Stub::multiplyToLen+538 0x00007f32dd049e5a
  0x00007f32dd049d09:   mov    (%rdi,%r14,4),%rdx
  0x00007f32dd049d0d:   rorx   $0x20,%rdx,%rdx
  0x00007f32dd049d13:   push   %rdi
  0x00007f32dd049d14:   push   %r14
  0x00007f32dd049d16:   push   %rcx
  0x00007f32dd049d17:   mov    %r12d,%ecx
  0x00007f32dd049d1a:   and    $0xfffffffc,%ecx
  0x00007f32dd049d1d:   shr    $0x2,%ecx
  0x00007f32dd049d20:   sub    $0x1,%ecx
  0x00007f32dd049d23:   js     Stub::multiplyToLen+365 0x00007f32dd049dad
  0x00007f32dd049d29:   sub    $0x4,%r12d
  0x00007f32dd049d2d:   mov    0x8(%rsi,%r12,4),%rax
  0x00007f32dd049d32:   rorx   $0x20,%rax,%rax
  0x00007f32dd049d38:   mov    (%rsi,%r12,4),%r13
  0x00007f32dd049d3c:   rorx   $0x20,%r13,%r13
  0x00007f32dd049d42:   mulx   %rax,%r14,%r15
  0x00007f32dd049d47:   mulx   %r13,%r11,%rdi
  0x00007f32dd049d4c:   mov    0x8(%r8,%r12,4),%rax
  0x00007f32dd049d51:   rorx   $0x20,%rax,%rax
  0x00007f32dd049d57:   mov    (%r8,%r12,4),%r13
  0x00007f32dd049d5b:   rorx   $0x20,%r13,%r13
  0x00007f32dd049d61:   adcx   %rbx,%r14
  0x00007f32dd049d67:   adox   %rax,%r14
  0x00007f32dd049d6d:   adcx   %r11,%r15
  0x00007f32dd049d73:   adox   %r13,%r15
  0x00007f32dd049d79:   mov    $0x0,%ebx
  0x00007f32dd049d7e:   adcx   %rbx,%rdi
  0x00007f32dd049d84:   adox   %rbx,%rdi
  0x00007f32dd049d8a:   mov    %rdi,%rbx
  0x00007f32dd049d8d:   mov    %r14d,0xc(%r8,%r12,4)
  0x00007f32dd049d92:   shr    $0x20,%r14
  0x00007f32dd049d96:   mov    %r14d,0x8(%r8,%r12,4)
  0x00007f32dd049d9b:   mov    %r15d,0x4(%r8,%r12,4)
  0x00007f32dd049da0:   shr    $0x20,%r15
  0x00007f32dd049da4:   mov    %r15d,(%r8,%r12,4)
  0x00007f32dd049da8:   jmpq   Stub::multiplyToLen+224 0x00007f32dd049d20
  0x00007f32dd049dad:   and    $0x3,%r12d
  0x00007f32dd049db1:   je     Stub::multiplyToLen+503 0x00007f32dd049e37
  0x00007f32dd049db7:   sub    $0x2,%r12d
  0x00007f32dd049dbb:   js     Stub::multiplyToLen+440 0x00007f32dd049df8
  0x00007f32dd049dc1:   mov    (%rsi,%r12,4),%rax
  0x00007f32dd049dc5:   rorx   $0x20,%rax,%rax
  0x00007f32dd049dcb:   mulx   %rax,%r14,%r15
  0x00007f32dd049dd0:   mov    (%r8,%r12,4),%r13
  0x00007f32dd049dd4:   rorx   $0x20,%r13,%r13
  0x00007f32dd049dda:   add    %rbx,%r14
  0x00007f32dd049ddd:   adc    $0x0,%r15
  0x00007f32dd049de1:   add    %r13,%r14
  0x00007f32dd049de4:   adc    $0x0,%r15
  0x00007f32dd049de8:   mov    %r14d,0x4(%r8,%r12,4)
  0x00007f32dd049ded:   shr    $0x20,%r14
  0x00007f32dd049df1:   mov    %r14d,(%r8,%r12,4)
  0x00007f32dd049df5:   mov    %r15,%rbx
  0x00007f32dd049df8:   add    $0x2,%r12d
  0x00007f32dd049dfc:   and    $0x1,%r12d
  0x00007f32dd049e00:   sub    $0x1,%r12d
  0x00007f32dd049e04:   js     Stub::multiplyToLen+503 0x00007f32dd049e37
  0x00007f32dd049e0a:   mov    (%rsi,%r12,4),%r15d
  0x00007f32dd049e0e:   mulx   %r15,%r14,%rdi
  0x00007f32dd049e13:   mov    (%r8,%r12,4),%r15d
  0x00007f32dd049e17:   add    %r15,%r14
  0x00007f32dd049e1a:   adc    $0x0,%rdi
  0x00007f32dd049e1e:   add    %rbx,%r14
  0x00007f32dd049e21:   adc    $0x0,%rdi
  0x00007f32dd049e25:   mov    %r14d,(%r8,%r12,4)
  0x00007f32dd049e29:   shr    $0x20,%r14
  0x00007f32dd049e2d:   shl    $0x20,%rdi
  0x00007f32dd049e31:   or     %rdi,%r14
  0x00007f32dd049e34:   mov    %r14,%rbx
  0x00007f32dd049e37:   pop    %rcx
  0x00007f32dd049e38:   pop    %rax
  0x00007f32dd049e39:   pop    %rdi
  0x00007f32dd049e3a:   pop    %r8
  0x00007f32dd049e3c:   mov    %eax,%r14d
  0x00007f32dd049e3f:   add    $0x1,%r14d
  0x00007f32dd049e43:   mov    %ebx,(%r8,%r14,4)
  0x00007f32dd049e47:   sub    $0x1,%r14d
  0x00007f32dd049e4b:   js     Stub::multiplyToLen+545 0x00007f32dd049e61
  0x00007f32dd049e4d:   shr    $0x20,%rbx
  0x00007f32dd049e51:   mov    %ebx,(%r8,%r14,4)
  0x00007f32dd049e55:   jmpq   Stub::multiplyToLen+169 0x00007f32dd049ce9
  0x00007f32dd049e5a:   mov    (%rdi),%edx
  0x00007f32dd049e5c:   jmpq   Stub::multiplyToLen+211 0x00007f32dd049d13
  0x00007f32dd049e61:   pop    %r11
  0x00007f32dd049e63:   pop    %rax
  0x00007f32dd049e64:   pop    %rbx
  0x00007f32dd049e65:   pop    %r15
  0x00007f32dd049e67:   pop    %r14
  0x00007f32dd049e69:   pop    %r13
  0x00007f32dd049e6b:   pop    %r12
  0x00007f32dd049e6d:   leaveq 
  0x00007f32dd049e6e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::squareToLen [0x00007f32dd049e80, 0x00007f32dd049f9f] (287 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd049e80:   push   %rbp
  0x00007f32dd049e81:   mov    %rsp,%rbp
  0x00007f32dd049e84:   mov    %rdx,%r8
  0x00007f32dd049e87:   push   %r12
  0x00007f32dd049e89:   push   %r13
  0x00007f32dd049e8b:   push   %r14
  0x00007f32dd049e8d:   push   %r15
  0x00007f32dd049e8f:   push   %rbx
  0x00007f32dd049e90:   xor    %rbx,%rbx
  0x00007f32dd049e93:   xor    %rdx,%rdx
  0x00007f32dd049e96:   xor    %r12d,%r12d
  0x00007f32dd049e99:   xor    %r15d,%r15d
  0x00007f32dd049e9c:   test   $0x1,%sil
  0x00007f32dd049ea0:   je     Stub::squareToLen+60 0x00007f32dd049ebc
  0x00007f32dd049ea2:   mov    (%rdi,%r12,4),%eax
  0x00007f32dd049ea6:   imul   %rax,%rax
  0x00007f32dd049eaa:   shr    %rax
  0x00007f32dd049ead:   adc    $0x0,%rbx
  0x00007f32dd049eb1:   mov    %rax,(%r8,%r15,4)
  0x00007f32dd049eb5:   inc    %r12d
  0x00007f32dd049eb8:   add    $0x2,%r15d
  0x00007f32dd049ebc:   cmp    %rsi,%r12
  0x00007f32dd049ebf:   je     Stub::squareToLen+108 0x00007f32dd049eec
  0x00007f32dd049ec1:   mov    (%rdi,%r12,4),%rax
  0x00007f32dd049ec5:   ror    $0x20,%rax
  0x00007f32dd049ec9:   mul    %rax
  0x00007f32dd049ecc:   shr    %rbx
  0x00007f32dd049ecf:   rcr    %rdx
  0x00007f32dd049ed2:   rcr    %rax
  0x00007f32dd049ed5:   adc    $0x0,%rbx
  0x00007f32dd049ed9:   mov    %rdx,(%r8,%r15,4)
  0x00007f32dd049edd:   mov    %rax,0x8(%r8,%r15,4)
  0x00007f32dd049ee2:   add    $0x2,%r12d
  0x00007f32dd049ee6:   add    $0x4,%r15d
  0x00007f32dd049eea:   jmp    Stub::squareToLen+60 0x00007f32dd049ebc
  0x00007f32dd049eec:   push   %rcx
  0x00007f32dd049eed:   push   %rsi
  0x00007f32dd049eee:   add    $0x2,%ecx
  0x00007f32dd049ef1:   xor    %rbx,%rbx
  0x00007f32dd049ef4:   sub    $0x4,%ecx
  0x00007f32dd049ef7:   sub    $0x2,%esi
  0x00007f32dd049efa:   push   %rcx
  0x00007f32dd049efb:   push   %rsi
  0x00007f32dd049efc:   cmp    $0x0,%esi
  0x00007f32dd049eff:   jle    Stub::squareToLen+225 0x00007f32dd049f61
  0x00007f32dd049f01:   mov    (%rdi,%rsi,4),%rdx
  0x00007f32dd049f05:   rorx   $0x20,%rdx,%rdx
  0x00007f32dd049f0b:   dec    %esi
  0x00007f32dd049f0d:   js     Stub::squareToLen+190 0x00007f32dd049f3e
  0x00007f32dd049f0f:   dec    %esi
  0x00007f32dd049f11:   js     Stub::squareToLen+220 0x00007f32dd049f5c
  0x00007f32dd049f13:   mov    (%rdi,%rsi,4),%r15
  0x00007f32dd049f17:   ror    $0x20,%r15
  0x00007f32dd049f1b:   sub    $0x2,%ecx
  0x00007f32dd049f1e:   mov    (%r8,%rcx,4),%r14
  0x00007f32dd049f22:   mulx   %r15,%r15,%r13
  0x00007f32dd049f27:   add    %rbx,%r14
  0x00007f32dd049f2a:   adc    $0x0,%r13
  0x00007f32dd049f2e:   add    %r15,%r14
  0x00007f32dd049f31:   adc    $0x0,%r13
  0x00007f32dd049f35:   mov    %r13,%rbx
  0x00007f32dd049f38:   mov    %r14,(%r8,%rcx,4)
  0x00007f32dd049f3c:   jmp    Stub::squareToLen+139 0x00007f32dd049f0b
  0x00007f32dd049f3e:   mov    $0x1,%r12d
  0x00007f32dd049f44:   sub    $0x2,%ecx
  0x00007f32dd049f47:   add    %rbx,(%r8,%rcx,4)
  0x00007f32dd049f4b:   jae    Stub::squareToLen+216 0x00007f32dd049f58
  0x00007f32dd049f4d:   sub    $0x2,%ecx
  0x00007f32dd049f50:   js     Stub::squareToLen+216 0x00007f32dd049f58
  0x00007f32dd049f52:   add    %r12,(%r8,%rcx,4)
  0x00007f32dd049f56:   jmp    Stub::squareToLen+203 0x00007f32dd049f4b
  0x00007f32dd049f58:   pop    %rsi
  0x00007f32dd049f59:   pop    %rcx
  0x00007f32dd049f5a:   jmp    Stub::squareToLen+113 0x00007f32dd049ef1
  0x00007f32dd049f5c:   mov    (%rdi),%r15d
  0x00007f32dd049f5f:   jmp    Stub::squareToLen+155 0x00007f32dd049f1b
  0x00007f32dd049f61:   pop    %rsi
  0x00007f32dd049f62:   pop    %rcx
  0x00007f32dd049f63:   pop    %rsi
  0x00007f32dd049f64:   pop    %rcx
  0x00007f32dd049f65:   mov    %ecx,%r14d
  0x00007f32dd049f68:   xor    %r12d,%r12d
  0x00007f32dd049f6b:   dec    %r14d
  0x00007f32dd049f6e:   dec    %r14d
  0x00007f32dd049f71:   js     Stub::squareToLen+262 0x00007f32dd049f86
  0x00007f32dd049f73:   mov    (%r8,%r14,4),%r13
  0x00007f32dd049f77:   rcl    %r13
  0x00007f32dd049f7a:   rorx   $0x20,%r13,%r13
  0x00007f32dd049f80:   mov    %r13,(%r8,%r14,4)
  0x00007f32dd049f84:   jmp    Stub::squareToLen+235 0x00007f32dd049f6b
  0x00007f32dd049f86:   mov    -0x4(%rdi,%rsi,4),%r14d
  0x00007f32dd049f8b:   and    $0x1,%r14d
  0x00007f32dd049f8f:   or     %r14d,-0x4(%r8,%rcx,4)
  0x00007f32dd049f94:   pop    %rbx
  0x00007f32dd049f95:   pop    %r15
  0x00007f32dd049f97:   pop    %r14
  0x00007f32dd049f99:   pop    %r13
  0x00007f32dd049f9b:   pop    %r12
  0x00007f32dd049f9d:   leaveq 
  0x00007f32dd049f9e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::mulAdd [0x00007f32dd049fa0, 0x00007f32dd04a097] (247 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd049fa0:   push   %rbp
  0x00007f32dd049fa1:   mov    %rsp,%rbp
  0x00007f32dd049fa4:   mov    %rdx,%r11
  0x00007f32dd049fa7:   push   %r12
  0x00007f32dd049fa9:   push   %r13
  0x00007f32dd049fab:   push   %r14
  0x00007f32dd049fad:   push   %r15
  0x00007f32dd049faf:   push   %rbx
  0x00007f32dd049fb0:   mov    %r8d,%edx
  0x00007f32dd049fb3:   xor    %rbx,%rbx
  0x00007f32dd049fb6:   mov    %ecx,%r12d
  0x00007f32dd049fb9:   shr    $0x2,%r12d
  0x00007f32dd049fbd:   sub    $0x1,%r12d
  0x00007f32dd049fc1:   js     Stub::mulAdd+139 0x00007f32dd04a02b
  0x00007f32dd049fc3:   sub    $0x4,%ecx
  0x00007f32dd049fc6:   sub    $0x4,%r11d
  0x00007f32dd049fca:   mov    0x8(%rsi,%rcx,4),%r15
  0x00007f32dd049fcf:   ror    $0x20,%r15
  0x00007f32dd049fd3:   mov    0x8(%rdi,%r11,4),%r14
  0x00007f32dd049fd8:   ror    $0x20,%r14
  0x00007f32dd049fdc:   mulx   %r15,%r15,%rax
  0x00007f32dd049fe1:   add    %rbx,%r14
  0x00007f32dd049fe4:   adc    $0x0,%rax
  0x00007f32dd049fe8:   add    %r15,%r14
  0x00007f32dd049feb:   adc    $0x0,%rax
  0x00007f32dd049fef:   mov    %rax,%rbx
  0x00007f32dd049ff2:   ror    $0x20,%r14
  0x00007f32dd049ff6:   mov    %r14,0x8(%rdi,%r11,4)
  0x00007f32dd049ffb:   mov    (%rsi,%rcx,4),%r15
  0x00007f32dd049fff:   ror    $0x20,%r15
  0x00007f32dd04a003:   mov    (%rdi,%r11,4),%r14
  0x00007f32dd04a007:   ror    $0x20,%r14
  0x00007f32dd04a00b:   mulx   %r15,%r15,%rax
  0x00007f32dd04a010:   add    %rbx,%r14
  0x00007f32dd04a013:   adc    $0x0,%rax
  0x00007f32dd04a017:   add    %r15,%r14
  0x00007f32dd04a01a:   adc    $0x0,%rax
  0x00007f32dd04a01e:   mov    %rax,%rbx
  0x00007f32dd04a021:   ror    $0x20,%r14
  0x00007f32dd04a025:   mov    %r14,(%rdi,%r11,4)
  0x00007f32dd04a029:   jmp    Stub::mulAdd+29 0x00007f32dd049fbd
  0x00007f32dd04a02b:   dec    %ecx
  0x00007f32dd04a02d:   js     Stub::mulAdd+234 0x00007f32dd04a08a
  0x00007f32dd04a02f:   dec    %ecx
  0x00007f32dd04a031:   js     Stub::mulAdd+201 0x00007f32dd04a069
  0x00007f32dd04a033:   mov    (%rsi,%rcx,4),%r15
  0x00007f32dd04a037:   ror    $0x20,%r15
  0x00007f32dd04a03b:   sub    $0x2,%r11d
  0x00007f32dd04a03f:   mov    (%rdi,%r11,4),%r14
  0x00007f32dd04a043:   ror    $0x20,%r14
  0x00007f32dd04a047:   mulx   %r15,%r15,%rax
  0x00007f32dd04a04c:   add    %rbx,%r14
  0x00007f32dd04a04f:   adc    $0x0,%rax
  0x00007f32dd04a053:   add    %r15,%r14
  0x00007f32dd04a056:   adc    $0x0,%rax
  0x00007f32dd04a05a:   mov    %rax,%rbx
  0x00007f32dd04a05d:   ror    $0x20,%r14
  0x00007f32dd04a061:   mov    %r14,(%rdi,%r11,4)
  0x00007f32dd04a065:   test   %ecx,%ecx
  0x00007f32dd04a067:   je     Stub::mulAdd+234 0x00007f32dd04a08a
  0x00007f32dd04a069:   mov    (%rsi),%r15d
  0x00007f32dd04a06c:   mov    -0x4(%rdi,%r11,4),%r14d
  0x00007f32dd04a071:   mov    %r8d,%eax
  0x00007f32dd04a074:   mul    %r15d
  0x00007f32dd04a077:   add    %ebx,%r14d
  0x00007f32dd04a07a:   adc    $0x0,%edx
  0x00007f32dd04a07d:   add    %eax,%r14d
  0x00007f32dd04a080:   adc    $0x0,%edx
  0x00007f32dd04a083:   mov    %edx,%ebx
  0x00007f32dd04a085:   mov    %r14d,-0x4(%rdi,%r11,4)
  0x00007f32dd04a08a:   mov    %ebx,%eax
  0x00007f32dd04a08c:   pop    %rbx
  0x00007f32dd04a08d:   pop    %r15
  0x00007f32dd04a08f:   pop    %r14
  0x00007f32dd04a091:   pop    %r13
  0x00007f32dd04a093:   pop    %r12
  0x00007f32dd04a095:   leaveq 
  0x00007f32dd04a096:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vectorizedMismatch [0x00007f32dd04a0a0, 0x00007f32dd04a234] (404 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd04a0a0:   push   %rbp
  0x00007f32dd04a0a1:   mov    %rsp,%rbp
  0x00007f32dd04a0a4:   shl    %cl,%rdx
  0x00007f32dd04a0a7:   xor    %rax,%rax
  0x00007f32dd04a0aa:   cmp    $0x8,%rdx
  0x00007f32dd04a0ae:   je     Stub::vectorizedMismatch+148 0x00007f32dd04a134
  0x00007f32dd04a0b4:   jl     Stub::vectorizedMismatch+182 0x00007f32dd04a156
  0x00007f32dd04a0ba:   cmp    $0x10,%rdx
  0x00007f32dd04a0be:   je     Stub::vectorizedMismatch+103 0x00007f32dd04a107
  0x00007f32dd04a0c4:   jl     Stub::vectorizedMismatch+148 0x00007f32dd04a134
  0x00007f32dd04a0ca:   cmp    $0x20,%rdx
  0x00007f32dd04a0ce:   jl     Stub::vectorizedMismatch+97 0x00007f32dd04a101
  0x00007f32dd04a0d0:   sub    $0x20,%rdx
  0x00007f32dd04a0d4:   vmovdqu (%rdi,%rax,1),%ymm0
  0x00007f32dd04a0d9:   vmovdqu (%rsi,%rax,1),%ymm1
  0x00007f32dd04a0de:   vpxor  %ymm1,%ymm0,%ymm2
  0x00007f32dd04a0e2:   vptest %ymm2,%ymm2
  0x00007f32dd04a0e7:   jne    Stub::vectorizedMismatch+314 0x00007f32dd04a1da
  0x00007f32dd04a0ed:   add    $0x20,%rax
  0x00007f32dd04a0f1:   sub    $0x20,%rdx
  0x00007f32dd04a0f5:   jge    Stub::vectorizedMismatch+52 0x00007f32dd04a0d4
  0x00007f32dd04a0f7:   add    $0x20,%rdx
  0x00007f32dd04a0fb:   je     Stub::vectorizedMismatch+389 0x00007f32dd04a225
  0x00007f32dd04a101:   cmp    $0x10,%rdx
  0x00007f32dd04a105:   jl     Stub::vectorizedMismatch+142 0x00007f32dd04a12e
  0x00007f32dd04a107:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f32dd04a10c:   vmovdqu (%rsi,%rax,1),%xmm1
  0x00007f32dd04a111:   vpxor  %xmm1,%xmm0,%xmm2
  0x00007f32dd04a115:   vptest %xmm2,%xmm2
  0x00007f32dd04a11a:   jne    Stub::vectorizedMismatch+345 0x00007f32dd04a1f9
  0x00007f32dd04a120:   add    $0x10,%rax
  0x00007f32dd04a124:   sub    $0x10,%rdx
  0x00007f32dd04a128:   je     Stub::vectorizedMismatch+389 0x00007f32dd04a225
  0x00007f32dd04a12e:   cmp    $0x8,%rdx
  0x00007f32dd04a132:   jl     Stub::vectorizedMismatch+182 0x00007f32dd04a156
  0x00007f32dd04a134:   mov    (%rdi,%rax,1),%r8
  0x00007f32dd04a138:   mov    (%rsi,%rax,1),%r9
  0x00007f32dd04a13c:   xor    %r9,%r8
  0x00007f32dd04a13f:   test   %r8,%r8
  0x00007f32dd04a142:   jne    Stub::vectorizedMismatch+373 0x00007f32dd04a215
  0x00007f32dd04a148:   add    $0x8,%rax
  0x00007f32dd04a14c:   sub    $0x8,%rdx
  0x00007f32dd04a150:   je     Stub::vectorizedMismatch+389 0x00007f32dd04a225
  0x00007f32dd04a156:   cmp    $0x4,%rdx
  0x00007f32dd04a15a:   jl     Stub::vectorizedMismatch+219 0x00007f32dd04a17b
  0x00007f32dd04a15c:   mov    (%rdi,%rax,1),%r8d
  0x00007f32dd04a160:   xor    (%rsi,%rax,1),%r8d
  0x00007f32dd04a164:   test   %r8d,%r8d
  0x00007f32dd04a167:   jne    Stub::vectorizedMismatch+373 0x00007f32dd04a215
  0x00007f32dd04a16d:   add    $0x4,%rax
  0x00007f32dd04a171:   sub    $0x4,%rdx
  0x00007f32dd04a175:   je     Stub::vectorizedMismatch+389 0x00007f32dd04a225
  0x00007f32dd04a17b:   movzbl (%rdi,%rax,1),%r8d
  0x00007f32dd04a180:   movzbl (%rsi,%rax,1),%r9d
  0x00007f32dd04a185:   xor    %r9d,%r8d
  0x00007f32dd04a188:   test   %r8d,%r8d
  0x00007f32dd04a18b:   jne    Stub::vectorizedMismatch+384 0x00007f32dd04a220
  0x00007f32dd04a191:   dec    %rdx
  0x00007f32dd04a194:   je     Stub::vectorizedMismatch+389 0x00007f32dd04a225
  0x00007f32dd04a19a:   inc    %rax
  0x00007f32dd04a19d:   movzbl (%rdi,%rax,1),%r8d
  0x00007f32dd04a1a2:   movzbl (%rsi,%rax,1),%r9d
  0x00007f32dd04a1a7:   xor    %r9d,%r8d
  0x00007f32dd04a1aa:   test   %r8d,%r8d
  0x00007f32dd04a1ad:   jne    Stub::vectorizedMismatch+384 0x00007f32dd04a220
  0x00007f32dd04a1b3:   dec    %rdx
  0x00007f32dd04a1b6:   je     Stub::vectorizedMismatch+389 0x00007f32dd04a225
  0x00007f32dd04a1bc:   inc    %rax
  0x00007f32dd04a1bf:   movzbl (%rdi,%rax,1),%r8d
  0x00007f32dd04a1c4:   movzbl (%rsi,%rax,1),%r9d
  0x00007f32dd04a1c9:   xor    %r9d,%r8d
  0x00007f32dd04a1cc:   test   %r8d,%r8d
  0x00007f32dd04a1cf:   jne    Stub::vectorizedMismatch+384 0x00007f32dd04a220
  0x00007f32dd04a1d5:   jmpq   Stub::vectorizedMismatch+389 0x00007f32dd04a225
  0x00007f32dd04a1da:   vpcmpeqb %ymm2,%ymm2,%ymm2
  0x00007f32dd04a1de:   vpcmpeqb %ymm1,%ymm0,%ymm0
  0x00007f32dd04a1e2:   vpxor  %ymm2,%ymm0,%ymm0
  0x00007f32dd04a1e6:   vpmovmskb %ymm0,%r8d
  0x00007f32dd04a1ea:   bsf    %r8,%r8
  0x00007f32dd04a1ee:   add    %r8,%rax
  0x00007f32dd04a1f1:   shr    %cl,%rax
  0x00007f32dd04a1f4:   jmpq   Stub::vectorizedMismatch+399 0x00007f32dd04a22f
  0x00007f32dd04a1f9:   vpcmpeqb %xmm2,%xmm2,%xmm2
  0x00007f32dd04a1fd:   vpcmpeqb %xmm1,%xmm0,%xmm0
  0x00007f32dd04a201:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f32dd04a205:   vpmovmskb %xmm0,%r8d
  0x00007f32dd04a209:   bsf    %r8,%r8
  0x00007f32dd04a20d:   add    %r8,%rax
  0x00007f32dd04a210:   shr    %cl,%rax
  0x00007f32dd04a213:   jmp    Stub::vectorizedMismatch+399 0x00007f32dd04a22f
  0x00007f32dd04a215:   bsf    %r8,%r8
  0x00007f32dd04a219:   shr    $0x3,%r8
  0x00007f32dd04a21d:   add    %r8,%rax
  0x00007f32dd04a220:   shr    %cl,%rax
  0x00007f32dd04a223:   jmp    Stub::vectorizedMismatch+399 0x00007f32dd04a22f
  0x00007f32dd04a225:   movabs $0xffffffffffffffff,%rax
  0x00007f32dd04a22f:   vzeroupper 
  0x00007f32dd04a232:   leaveq 
  0x00007f32dd04a233:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_invokeGeneric [0x00007f32dd03e500, 0x00007f32dd03e501] (1 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd03e500:   hlt    
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_invokeBasic [0x00007f32dd03e501, 0x00007f32dd03e556] (85 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd03e501:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd03e50c:   data16 data16 xchg %ax,%ax
  0x00007f32dd03e510:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd03e51b:   data16 data16 xchg %ax,%ax
  0x00007f32dd03e51f:   nop
  0x00007f32dd03e520:   mov    0x8(%rbx),%rdx
  0x00007f32dd03e524:   movzwl 0x2c(%rdx),%edx
  0x00007f32dd03e528:   mov    (%rsp,%rdx,8),%rcx
  0x00007f32dd03e52c:   mov    0x14(%rcx),%ebx
  0x00007f32dd03e52f:   shl    $0x3,%rbx
  0x00007f32dd03e533:   mov    0x28(%rbx),%ebx
  0x00007f32dd03e536:   shl    $0x3,%rbx
  0x00007f32dd03e53a:   mov    0x24(%rbx),%ebx
  0x00007f32dd03e53d:   shl    $0x3,%rbx
  0x00007f32dd03e541:   mov    0x10(%rbx),%rbx
  0x00007f32dd03e545:   test   %rbx,%rbx
  0x00007f32dd03e548:   je     0x00007f32dd03e551
  0x00007f32dd03e54e:   jmpq   *0x50(%rbx)
  0x00007f32dd03e551:   jmpq   0x00007f32dd03fc00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToVirtual [0x00007f32dd03e556, 0x00007f32dd03e59d] (71 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd03e556:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd03e560:   mov    0x8(%rbx),%rdx
  0x00007f32dd03e564:   movzwl 0x2c(%rdx),%edx
  0x00007f32dd03e568:   mov    (%rsp,%rdx,8),%rcx
  0x00007f32dd03e56c:   pop    %rax
  0x00007f32dd03e56d:   pop    %rbx
  0x00007f32dd03e56e:   push   %rax
  0x00007f32dd03e56f:   mov    0x8(%rcx),%r10d
  0x00007f32dd03e573:   movabs $0x800000000,%r11
  0x00007f32dd03e57d:   add    %r11,%r10
  0x00007f32dd03e580:   mov    0x10(%rbx),%r11
  0x00007f32dd03e584:   mov    0x1c0(%r10,%r11,8),%rbx
  0x00007f32dd03e58c:   test   %rbx,%rbx
  0x00007f32dd03e58f:   je     0x00007f32dd03e598
  0x00007f32dd03e595:   jmpq   *0x50(%rbx)
  0x00007f32dd03e598:   jmpq   0x00007f32dd03fc00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToStatic [0x00007f32dd03e59d, 0x00007f32dd03e5bf] (34 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd03e59d:   data16 xchg %ax,%ax
  0x00007f32dd03e5a0:   pop    %rax
  0x00007f32dd03e5a1:   pop    %rbx
  0x00007f32dd03e5a2:   push   %rax
  0x00007f32dd03e5a3:   mov    0x24(%rbx),%ebx
  0x00007f32dd03e5a6:   shl    $0x3,%rbx
  0x00007f32dd03e5aa:   mov    0x10(%rbx),%rbx
  0x00007f32dd03e5ae:   test   %rbx,%rbx
  0x00007f32dd03e5b1:   je     0x00007f32dd03e5ba
  0x00007f32dd03e5b7:   jmpq   *0x50(%rbx)
  0x00007f32dd03e5ba:   jmpq   0x00007f32dd03fc00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToSpecial [0x00007f32dd03e5bf, 0x00007f32dd03e5ee] (47 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd03e5bf:   nop
  0x00007f32dd03e5c0:   mov    0x8(%rbx),%rdx
  0x00007f32dd03e5c4:   movzwl 0x2c(%rdx),%edx
  0x00007f32dd03e5c8:   mov    (%rsp,%rdx,8),%rcx
  0x00007f32dd03e5cc:   pop    %rax
  0x00007f32dd03e5cd:   pop    %rbx
  0x00007f32dd03e5ce:   push   %rax
  0x00007f32dd03e5cf:   cmp    (%rcx),%rax
  0x00007f32dd03e5d2:   mov    0x24(%rbx),%ebx
  0x00007f32dd03e5d5:   shl    $0x3,%rbx
  0x00007f32dd03e5d9:   mov    0x10(%rbx),%rbx
  0x00007f32dd03e5dd:   test   %rbx,%rbx
  0x00007f32dd03e5e0:   je     0x00007f32dd03e5e9
  0x00007f32dd03e5e6:   jmpq   *0x50(%rbx)
  0x00007f32dd03e5e9:   jmpq   0x00007f32dd03fc00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToInterface [0x00007f32dd03e5ee, 0x00007f32dd03e67d] (143 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd03e5ee:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f32dd03e5f9:   data16 data16 xchg %ax,%ax
  0x00007f32dd03e5fd:   data16 xchg %ax,%ax
  0x00007f32dd03e600:   mov    0x8(%rbx),%rdx
  0x00007f32dd03e604:   movzwl 0x2c(%rdx),%edx
  0x00007f32dd03e608:   mov    (%rsp,%rdx,8),%rcx
  0x00007f32dd03e60c:   pop    %rax
  0x00007f32dd03e60d:   pop    %rbx
  0x00007f32dd03e60e:   push   %rax
  0x00007f32dd03e60f:   mov    0x8(%rcx),%r10d
  0x00007f32dd03e613:   movabs $0x800000000,%r11
  0x00007f32dd03e61d:   add    %r11,%r10
  0x00007f32dd03e620:   mov    0x18(%rbx),%eax
  0x00007f32dd03e623:   shl    $0x3,%rax
  0x00007f32dd03e627:   mov    0x10(%rax),%rax
  0x00007f32dd03e62b:   mov    0x10(%rbx),%rbx
  0x00007f32dd03e62f:   mov    0xa0(%r10),%r11d
  0x00007f32dd03e636:   lea    0x1c0(%r10,%r11,8),%r11
  0x00007f32dd03e63e:   lea    (%r10,%rbx,8),%r10
  0x00007f32dd03e642:   mov    (%r11),%rbx
  0x00007f32dd03e645:   cmp    %rbx,%rax
  0x00007f32dd03e648:   je     0x00007f32dd03e65f
  0x00007f32dd03e64a:   test   %rbx,%rbx
  0x00007f32dd03e64d:   je     0x00007f32dd03e678
  0x00007f32dd03e653:   add    $0x10,%r11
  0x00007f32dd03e657:   mov    (%r11),%rbx
  0x00007f32dd03e65a:   cmp    %rbx,%rax
  0x00007f32dd03e65d:   jne    0x00007f32dd03e64a
  0x00007f32dd03e65f:   mov    0x8(%r11),%r11d
  0x00007f32dd03e663:   mov    (%r10,%r11,1),%rbx
  0x00007f32dd03e667:   test   %rbx,%rbx
  0x00007f32dd03e66a:   je     0x00007f32dd03e673
  0x00007f32dd03e670:   jmpq   *0x50(%rbx)
  0x00007f32dd03e673:   jmpq   0x00007f32dd03fc00
  0x00007f32dd03e678:   jmpq   0x00007f32dd03f900
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToNative [0x00007f32dd03e67d, 0x00007f32dd03e67e] (1 bytes)
--------------------------------------------------------------------------------
  0x00007f32dd03e67d:   hlt    
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding ExceptionBlob 0x00007f32dd08f910
--------------------------------------------------------------------------------
  0x00007f32dd08f980:   push   %rdx
  0x00007f32dd08f981:   sub    $0x8,%rsp
  0x00007f32dd08f985:   mov    %rbp,(%rsp)
  0x00007f32dd08f989:   mov    %rax,0x428(%r15)
  0x00007f32dd08f990:   mov    %rdx,0x430(%r15)
  0x00007f32dd08f997:   vzeroupper 
  0x00007f32dd08f99a:   movabs $0x7f32dd08f997,%r10
  0x00007f32dd08f9a4:   mov    %r10,0x2c8(%r15)
  0x00007f32dd08f9ab:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd08f9b2:   mov    %r15,%rdi
  0x00007f32dd08f9b5:   and    $0xfffffffffffffff0,%rsp
  0x00007f32dd08f9b9:   callq  0x00007f32e67cf550 = OptoRuntime::handle_exception_C(JavaThread*)
  0x00007f32dd08f9be:   movq   $0x0,0x2c0(%r15)
  0x00007f32dd08f9c9:   movq   $0x0,0x2c8(%r15)
  0x00007f32dd08f9d4:   vzeroupper 
  0x00007f32dd08f9d7:   mov    (%rsp),%rbp
  0x00007f32dd08f9db:   add    $0x8,%rsp
  0x00007f32dd08f9df:   pop    %rdx
  0x00007f32dd08f9e0:   mov    %rax,%r8
  0x00007f32dd08f9e3:   mov    0x428(%r15),%rax
  0x00007f32dd08f9ea:   mov    0x430(%r15),%rdx
  0x00007f32dd08f9f1:   movq   $0x0,0x428(%r15)
  0x00007f32dd08f9fc:   jmpq   *%r8
  0x00007f32dd08f9ff:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 23 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_instance_Java 0x00007f32dd096010
--------------------------------------------------------------------------------
  0x00007f32dd096080:   sub    $0x8,%rsp
  0x00007f32dd096087:   mov    %rbp,(%rsp)
  0x00007f32dd09608b:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd096092:   mov    %rsi,%rdi
  0x00007f32dd096095:   mov    %r15,%rsi
  0x00007f32dd096098:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd0960a0:   movabs $0x7f32e67cd020,%r10
  0x00007f32dd0960aa:   callq  *%r10
  0x00007f32dd0960ad:   mov    %r12,0x2c0(%r15)
  0x00007f32dd0960b4:   mov    %r12,0x2c8(%r15)
  0x00007f32dd0960bb:   mov    0x318(%r15),%rax
  0x00007f32dd0960c2:   mov    %r12,0x318(%r15)
  0x00007f32dd0960c9:   cmp    0x8(%r15),%r12
  0x00007f32dd0960cd:   jne    0x00007f32dd0960d1
  0x00007f32dd0960cf:   pop    %rbp
  0x00007f32dd0960d0:   retq   
  0x00007f32dd0960d1:   xor    %ebx,%ebx
  0x00007f32dd0960d3:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd0960dd:   pop    %rbp
  0x00007f32dd0960de:   jmpq   *%r10
  0x00007f32dd0960e1:   hlt    
  0x00007f32dd0960e2:   hlt    
  0x00007f32dd0960e3:   hlt    
  0x00007f32dd0960e4:   hlt    
  0x00007f32dd0960e5:   hlt    
  0x00007f32dd0960e6:   hlt    
  0x00007f32dd0960e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_array_Java 0x00007f32dd097610
--------------------------------------------------------------------------------
  0x00007f32dd097680:   sub    $0x8,%rsp
  0x00007f32dd097687:   mov    %rbp,(%rsp)
  0x00007f32dd09768b:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd097692:   mov    %rsi,%rdi
  0x00007f32dd097695:   mov    %edx,%esi
  0x00007f32dd097697:   mov    %r15,%rdx
  0x00007f32dd09769a:   nopw   0x0(%rax,%rax,1)
  0x00007f32dd0976a0:   movabs $0x7f32e67cd240,%r10
  0x00007f32dd0976aa:   callq  *%r10
  0x00007f32dd0976ad:   mov    %r12,0x2c0(%r15)
  0x00007f32dd0976b4:   mov    %r12,0x2c8(%r15)
  0x00007f32dd0976bb:   mov    0x318(%r15),%rax
  0x00007f32dd0976c2:   mov    %r12,0x318(%r15)
  0x00007f32dd0976c9:   cmp    0x8(%r15),%r12
  0x00007f32dd0976cd:   jne    0x00007f32dd0976d1
  0x00007f32dd0976cf:   pop    %rbp
  0x00007f32dd0976d0:   retq   
  0x00007f32dd0976d1:   xor    %ebx,%ebx
  0x00007f32dd0976d3:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd0976dd:   pop    %rbp
  0x00007f32dd0976de:   jmpq   *%r10
  0x00007f32dd0976e1:   hlt    
  0x00007f32dd0976e2:   hlt    
  0x00007f32dd0976e3:   hlt    
  0x00007f32dd0976e4:   hlt    
  0x00007f32dd0976e5:   hlt    
  0x00007f32dd0976e6:   hlt    
  0x00007f32dd0976e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_array_nozero_Java 0x00007f32dd09af10
--------------------------------------------------------------------------------
  0x00007f32dd09af80:   sub    $0x8,%rsp
  0x00007f32dd09af87:   mov    %rbp,(%rsp)
  0x00007f32dd09af8b:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd09af92:   mov    %rsi,%rdi
  0x00007f32dd09af95:   mov    %edx,%esi
  0x00007f32dd09af97:   mov    %r15,%rdx
  0x00007f32dd09af9a:   nopw   0x0(%rax,%rax,1)
  0x00007f32dd09afa0:   movabs $0x7f32e67ce110,%r10
  0x00007f32dd09afaa:   callq  *%r10
  0x00007f32dd09afad:   mov    %r12,0x2c0(%r15)
  0x00007f32dd09afb4:   mov    %r12,0x2c8(%r15)
  0x00007f32dd09afbb:   mov    0x318(%r15),%rax
  0x00007f32dd09afc2:   mov    %r12,0x318(%r15)
  0x00007f32dd09afc9:   cmp    0x8(%r15),%r12
  0x00007f32dd09afcd:   jne    0x00007f32dd09afd1
  0x00007f32dd09afcf:   pop    %rbp
  0x00007f32dd09afd0:   retq   
  0x00007f32dd09afd1:   xor    %ebx,%ebx
  0x00007f32dd09afd3:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd09afdd:   pop    %rbp
  0x00007f32dd09afde:   jmpq   *%r10
  0x00007f32dd09afe1:   hlt    
  0x00007f32dd09afe2:   hlt    
  0x00007f32dd09afe3:   hlt    
  0x00007f32dd09afe4:   hlt    
  0x00007f32dd09afe5:   hlt    
  0x00007f32dd09afe6:   hlt    
  0x00007f32dd09afe7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray2_Java 0x00007f32dd09b210
--------------------------------------------------------------------------------
  0x00007f32dd09b280:   sub    $0x8,%rsp
  0x00007f32dd09b287:   mov    %rbp,(%rsp)
  0x00007f32dd09b28b:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd09b292:   mov    %rsi,%rdi
  0x00007f32dd09b295:   mov    %edx,%esi
  0x00007f32dd09b297:   mov    %ecx,%edx
  0x00007f32dd09b299:   mov    %r15,%rcx
  0x00007f32dd09b29c:   nopl   0x0(%rax)
  0x00007f32dd09b2a0:   movabs $0x7f32e67cd3f0,%r10
  0x00007f32dd09b2aa:   callq  *%r10
  0x00007f32dd09b2ad:   mov    %r12,0x2c0(%r15)
  0x00007f32dd09b2b4:   mov    %r12,0x2c8(%r15)
  0x00007f32dd09b2bb:   mov    0x318(%r15),%rax
  0x00007f32dd09b2c2:   mov    %r12,0x318(%r15)
  0x00007f32dd09b2c9:   cmp    0x8(%r15),%r12
  0x00007f32dd09b2cd:   jne    0x00007f32dd09b2d1
  0x00007f32dd09b2cf:   pop    %rbp
  0x00007f32dd09b2d0:   retq   
  0x00007f32dd09b2d1:   xor    %ebx,%ebx
  0x00007f32dd09b2d3:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd09b2dd:   pop    %rbp
  0x00007f32dd09b2de:   jmpq   *%r10
  0x00007f32dd09b2e1:   hlt    
  0x00007f32dd09b2e2:   hlt    
  0x00007f32dd09b2e3:   hlt    
  0x00007f32dd09b2e4:   hlt    
  0x00007f32dd09b2e5:   hlt    
  0x00007f32dd09b2e6:   hlt    
  0x00007f32dd09b2e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray3_Java 0x00007f32dd09be10
--------------------------------------------------------------------------------
  0x00007f32dd09be80:   sub    $0x8,%rsp
  0x00007f32dd09be87:   mov    %rbp,(%rsp)
  0x00007f32dd09be8b:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd09be92:   mov    %rsi,%rdi
  0x00007f32dd09be95:   mov    %edx,%esi
  0x00007f32dd09be97:   mov    %ecx,%edx
  0x00007f32dd09be99:   mov    %r8d,%ecx
  0x00007f32dd09be9c:   mov    %r15,%r8
  0x00007f32dd09be9f:   nop
  0x00007f32dd09bea0:   movabs $0x7f32e67cd570,%r10
  0x00007f32dd09beaa:   callq  *%r10
  0x00007f32dd09bead:   mov    %r12,0x2c0(%r15)
  0x00007f32dd09beb4:   mov    %r12,0x2c8(%r15)
  0x00007f32dd09bebb:   mov    0x318(%r15),%rax
  0x00007f32dd09bec2:   mov    %r12,0x318(%r15)
  0x00007f32dd09bec9:   cmp    0x8(%r15),%r12
  0x00007f32dd09becd:   jne    0x00007f32dd09bed1
  0x00007f32dd09becf:   pop    %rbp
  0x00007f32dd09bed0:   retq   
  0x00007f32dd09bed1:   xor    %ebx,%ebx
  0x00007f32dd09bed3:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd09bedd:   pop    %rbp
  0x00007f32dd09bede:   jmpq   *%r10
  0x00007f32dd09bee1:   hlt    
  0x00007f32dd09bee2:   hlt    
  0x00007f32dd09bee3:   hlt    
  0x00007f32dd09bee4:   hlt    
  0x00007f32dd09bee5:   hlt    
  0x00007f32dd09bee6:   hlt    
  0x00007f32dd09bee7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray4_Java 0x00007f32dd09e590
--------------------------------------------------------------------------------
  0x00007f32dd09e600:   sub    $0x8,%rsp
  0x00007f32dd09e607:   mov    %rbp,(%rsp)
  0x00007f32dd09e60b:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd09e612:   mov    %rsi,%rdi
  0x00007f32dd09e615:   mov    %edx,%esi
  0x00007f32dd09e617:   mov    %ecx,%edx
  0x00007f32dd09e619:   mov    %r8d,%ecx
  0x00007f32dd09e61c:   mov    %r9d,%r8d
  0x00007f32dd09e61f:   mov    %r15,%r9
  0x00007f32dd09e622:   movabs $0x7f32e67cd6f0,%r10
  0x00007f32dd09e62c:   callq  *%r10
  0x00007f32dd09e62f:   mov    %r12,0x2c0(%r15)
  0x00007f32dd09e636:   mov    %r12,0x2c8(%r15)
  0x00007f32dd09e63d:   mov    0x318(%r15),%rax
  0x00007f32dd09e644:   mov    %r12,0x318(%r15)
  0x00007f32dd09e64b:   cmp    0x8(%r15),%r12
  0x00007f32dd09e64f:   jne    0x00007f32dd09e653
  0x00007f32dd09e651:   pop    %rbp
  0x00007f32dd09e652:   retq   
  0x00007f32dd09e653:   xor    %ebx,%ebx
  0x00007f32dd09e655:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd09e65f:   pop    %rbp
  0x00007f32dd09e660:   jmpq   *%r10
  0x00007f32dd09e663:   hlt    
  0x00007f32dd09e664:   hlt    
  0x00007f32dd09e665:   hlt    
  0x00007f32dd09e666:   hlt    
  0x00007f32dd09e667:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 47 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray5_Java 0x00007f32dd093910
--------------------------------------------------------------------------------
  0x00007f32dd093980:   sub    $0x18,%rsp
  0x00007f32dd093987:   mov    %rbp,0x10(%rsp)
  0x00007f32dd09398c:   mov    %edi,%r10d
  0x00007f32dd09398f:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd093996:   mov    %rsi,%rdi
  0x00007f32dd093999:   mov    %edx,%esi
  0x00007f32dd09399b:   mov    %ecx,%edx
  0x00007f32dd09399d:   mov    %r8d,%ecx
  0x00007f32dd0939a0:   mov    %r9d,%r8d
  0x00007f32dd0939a3:   mov    %r10d,%r9d
  0x00007f32dd0939a6:   mov    %r15,(%rsp)
  0x00007f32dd0939aa:   movabs $0x7f32e67cd880,%r10
  0x00007f32dd0939b4:   callq  *%r10
  0x00007f32dd0939b7:   mov    %r12,0x2c0(%r15)
  0x00007f32dd0939be:   mov    %r12,0x2c8(%r15)
  0x00007f32dd0939c5:   mov    0x318(%r15),%rax
  0x00007f32dd0939cc:   mov    %r12,0x318(%r15)
  0x00007f32dd0939d3:   cmp    0x8(%r15),%r12
  0x00007f32dd0939d7:   jne    0x00007f32dd0939df
  0x00007f32dd0939d9:   add    $0x10,%rsp
  0x00007f32dd0939dd:   pop    %rbp
  0x00007f32dd0939de:   retq   
  0x00007f32dd0939df:   xor    %ebx,%ebx
  0x00007f32dd0939e1:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd0939eb:   add    $0x10,%rsp
  0x00007f32dd0939ef:   pop    %rbp
  0x00007f32dd0939f0:   jmpq   *%r10
  0x00007f32dd0939f3:   hlt    
  0x00007f32dd0939f4:   hlt    
  0x00007f32dd0939f5:   hlt    
  0x00007f32dd0939f6:   hlt    
  0x00007f32dd0939f7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 55 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarrayN_Java 0x00007f32dd092a10
--------------------------------------------------------------------------------
  0x00007f32dd092a80:   sub    $0x8,%rsp
  0x00007f32dd092a87:   mov    %rbp,(%rsp)
  0x00007f32dd092a8b:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd092a92:   mov    %rsi,%rdi
  0x00007f32dd092a95:   mov    %rdx,%rsi
  0x00007f32dd092a98:   mov    %r15,%rdx
  0x00007f32dd092a9b:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd092aa0:   movabs $0x7f32e67cda20,%r10
  0x00007f32dd092aaa:   callq  *%r10
  0x00007f32dd092aad:   mov    %r12,0x2c0(%r15)
  0x00007f32dd092ab4:   mov    %r12,0x2c8(%r15)
  0x00007f32dd092abb:   mov    0x318(%r15),%rax
  0x00007f32dd092ac2:   mov    %r12,0x318(%r15)
  0x00007f32dd092ac9:   cmp    0x8(%r15),%r12
  0x00007f32dd092acd:   jne    0x00007f32dd092ad1
  0x00007f32dd092acf:   pop    %rbp
  0x00007f32dd092ad0:   retq   
  0x00007f32dd092ad1:   xor    %ebx,%ebx
  0x00007f32dd092ad3:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd092add:   pop    %rbp
  0x00007f32dd092ade:   jmpq   *%r10
  0x00007f32dd092ae1:   hlt    
  0x00007f32dd092ae2:   hlt    
  0x00007f32dd092ae3:   hlt    
  0x00007f32dd092ae4:   hlt    
  0x00007f32dd092ae5:   hlt    
  0x00007f32dd092ae6:   hlt    
  0x00007f32dd092ae7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _complete_monitor_locking_Java 0x00007f32dd093c10
--------------------------------------------------------------------------------
  0x00007f32dd093c80:   sub    $0x8,%rsp
  0x00007f32dd093c87:   mov    %rbp,(%rsp)
  0x00007f32dd093c8b:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd093c92:   mov    %rsi,%rdi
  0x00007f32dd093c95:   mov    %rdx,%rsi
  0x00007f32dd093c98:   mov    %r15,%rdx
  0x00007f32dd093c9b:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd093ca0:   movabs $0x7f32e67e0470,%r10
  0x00007f32dd093caa:   callq  *%r10
  0x00007f32dd093cad:   mov    %r12,0x2c0(%r15)
  0x00007f32dd093cb4:   mov    %r12,0x2c8(%r15)
  0x00007f32dd093cbb:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd093cc0:   cmp    0x8(%r15),%r12
  0x00007f32dd093cc4:   jne    0x00007f32dd093cc8
  0x00007f32dd093cc6:   pop    %rbp
  0x00007f32dd093cc7:   retq   
  0x00007f32dd093cc8:   xor    %ebx,%ebx
  0x00007f32dd093cca:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd093cd4:   pop    %rbp
  0x00007f32dd093cd5:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _monitor_notify_Java 0x00007f32dd09f490
--------------------------------------------------------------------------------
  0x00007f32dd09f500:   sub    $0x8,%rsp
  0x00007f32dd09f507:   mov    %rbp,(%rsp)
  0x00007f32dd09f50b:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd09f512:   mov    %rsi,%rdi
  0x00007f32dd09f515:   mov    %r15,%rsi
  0x00007f32dd09f518:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd09f520:   movabs $0x7f32e67cb360,%r10
  0x00007f32dd09f52a:   callq  *%r10
  0x00007f32dd09f52d:   mov    %r12,0x2c0(%r15)
  0x00007f32dd09f534:   mov    %r12,0x2c8(%r15)
  0x00007f32dd09f53b:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd09f540:   cmp    0x8(%r15),%r12
  0x00007f32dd09f544:   jne    0x00007f32dd09f548
  0x00007f32dd09f546:   pop    %rbp
  0x00007f32dd09f547:   retq   
  0x00007f32dd09f548:   xor    %ebx,%ebx
  0x00007f32dd09f54a:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd09f554:   pop    %rbp
  0x00007f32dd09f555:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _monitor_notifyAll_Java 0x00007f32dd09f190
--------------------------------------------------------------------------------
  0x00007f32dd09f200:   sub    $0x8,%rsp
  0x00007f32dd09f207:   mov    %rbp,(%rsp)
  0x00007f32dd09f20b:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd09f212:   mov    %rsi,%rdi
  0x00007f32dd09f215:   mov    %r15,%rsi
  0x00007f32dd09f218:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd09f220:   movabs $0x7f32e67cb160,%r10
  0x00007f32dd09f22a:   callq  *%r10
  0x00007f32dd09f22d:   mov    %r12,0x2c0(%r15)
  0x00007f32dd09f234:   mov    %r12,0x2c8(%r15)
  0x00007f32dd09f23b:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd09f240:   cmp    0x8(%r15),%r12
  0x00007f32dd09f244:   jne    0x00007f32dd09f248
  0x00007f32dd09f246:   pop    %rbp
  0x00007f32dd09f247:   retq   
  0x00007f32dd09f248:   xor    %ebx,%ebx
  0x00007f32dd09f24a:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd09f254:   pop    %rbp
  0x00007f32dd09f255:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _rethrow_Java 0x00007f32dd0a0190
--------------------------------------------------------------------------------
  0x00007f32dd0a0200:   sub    $0x18,%rsp
  0x00007f32dd0a0207:   mov    %rbp,0x10(%rsp)
  0x00007f32dd0a020c:   rex.W pushq 0x18(%rsp)
  0x00007f32dd0a0211:   rex.W popq (%rsp)
  0x00007f32dd0a0215:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd0a021c:   mov    %rsi,%rdi
  0x00007f32dd0a021f:   mov    %r15,%rsi
  0x00007f32dd0a0222:   mov    (%rsp),%rdx
  0x00007f32dd0a0226:   movabs $0x7f32e67cada0,%r10
  0x00007f32dd0a0230:   callq  *%r10
  0x00007f32dd0a0233:   mov    %rax,%r10
  0x00007f32dd0a0236:   mov    %r12,0x2c0(%r15)
  0x00007f32dd0a023d:   mov    %r12,0x2c8(%r15)
  0x00007f32dd0a0244:   mov    0x318(%r15),%rax
  0x00007f32dd0a024b:   mov    %r12,0x318(%r15)
  0x00007f32dd0a0252:   cmp    0x8(%r15),%r12
  0x00007f32dd0a0256:   jne    0x00007f32dd0a0261
  0x00007f32dd0a0258:   add    $0x10,%rsp
  0x00007f32dd0a025c:   pop    %rbp
  0x00007f32dd0a025d:   pop    %rdx
  0x00007f32dd0a025e:   jmpq   *%r10
  0x00007f32dd0a0261:   xor    %ebx,%ebx
  0x00007f32dd0a0263:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd0a026d:   add    $0x10,%rsp
  0x00007f32dd0a0271:   pop    %rbp
  0x00007f32dd0a0272:   jmpq   *%r10
  0x00007f32dd0a0275:   hlt    
  0x00007f32dd0a0276:   hlt    
  0x00007f32dd0a0277:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 51 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _slow_arraycopy_Java 0x00007f32dd09fb90
--------------------------------------------------------------------------------
  0x00007f32dd09fc00:   sub    $0x8,%rsp
  0x00007f32dd09fc07:   mov    %rbp,(%rsp)
  0x00007f32dd09fc0b:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd09fc12:   mov    %rsi,%rdi
  0x00007f32dd09fc15:   mov    %edx,%esi
  0x00007f32dd09fc17:   mov    %rcx,%rdx
  0x00007f32dd09fc1a:   mov    %r8d,%ecx
  0x00007f32dd09fc1d:   mov    %r9d,%r8d
  0x00007f32dd09fc20:   mov    %r15,%r9
  0x00007f32dd09fc23:   movabs $0x7f32e67dffa0,%r10
  0x00007f32dd09fc2d:   callq  *%r10
  0x00007f32dd09fc30:   mov    %r12,0x2c0(%r15)
  0x00007f32dd09fc37:   mov    %r12,0x2c8(%r15)
  0x00007f32dd09fc3e:   xchg   %ax,%ax
  0x00007f32dd09fc40:   cmp    0x8(%r15),%r12
  0x00007f32dd09fc44:   jne    0x00007f32dd09fc48
  0x00007f32dd09fc46:   pop    %rbp
  0x00007f32dd09fc47:   retq   
  0x00007f32dd09fc48:   xor    %ebx,%ebx
  0x00007f32dd09fc4a:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd09fc54:   pop    %rbp
  0x00007f32dd09fc55:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 48 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _register_finalizer_Java 0x00007f32dd0a8f90
--------------------------------------------------------------------------------
  0x00007f32dd0a9000:   sub    $0x8,%rsp
  0x00007f32dd0a9007:   mov    %rbp,(%rsp)
  0x00007f32dd0a900b:   mov    %rsp,0x2c0(%r15)
  0x00007f32dd0a9012:   mov    %rsi,%rdi
  0x00007f32dd0a9015:   mov    %r15,%rsi
  0x00007f32dd0a9018:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd0a9020:   movabs $0x7f32e67cb090,%r10
  0x00007f32dd0a902a:   callq  *%r10
  0x00007f32dd0a902d:   mov    %r12,0x2c0(%r15)
  0x00007f32dd0a9034:   mov    %r12,0x2c8(%r15)
  0x00007f32dd0a903b:   nopl   0x0(%rax,%rax,1)
  0x00007f32dd0a9040:   cmp    0x8(%r15),%r12
  0x00007f32dd0a9044:   jne    0x00007f32dd0a9048
  0x00007f32dd0a9046:   pop    %rbp
  0x00007f32dd0a9047:   retq   
  0x00007f32dd0a9048:   xor    %ebx,%ebx
  0x00007f32dd0a904a:   movabs $0x7f32dd000c00,%r10
  0x00007f32dd0a9054:   pop    %rbp
  0x00007f32dd0a9055:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

[Time]  32 ms  [Res] 20000
- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ICache::flush_icache_stub [0x00007f7748f7f080, 0x00007f7748f7f09d] (29 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7f080:   test   %esi,%esi
  0x00007f7748f7f082:   je     0x00007f7748f7f099
  0x00007f7748f7f088:   mfence 
  0x00007f7748f7f08b:   clflush (%rdi)
  0x00007f7748f7f08e:   add    $0x40,%rdi
  0x00007f7748f7f092:   dec    %esi
  0x00007f7748f7f094:   jne    0x00007f7748f7f08b
  0x00007f7748f7f096:   mfence 
  0x00007f7748f7f099:   mov    %rdx,%rax
  0x00007f7748f7f09c:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::get_cpu_info_stub [0x00007f7748f7f380, 0x00007f7748f7f61c] (668 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7f380:   push   %rbp
  0x00007f7748f7f381:   mov    %rdi,%rbp
  0x00007f7748f7f384:   push   %rbx
  0x00007f7748f7f385:   push   %rsi
  0x00007f7748f7f386:   pushfq 
  0x00007f7748f7f387:   pop    %rax
  0x00007f7748f7f388:   push   %rax
  0x00007f7748f7f389:   mov    %rax,%rcx
  0x00007f7748f7f38c:   xor    $0x40000,%eax
  0x00007f7748f7f391:   push   %rax
  0x00007f7748f7f392:   popfq  
  0x00007f7748f7f393:   pushfq 
  0x00007f7748f7f394:   pop    %rax
  0x00007f7748f7f395:   cmp    %rcx,%rax
  0x00007f7748f7f398:   jne    0x00007f7748f7f3a7
  0x00007f7748f7f39a:   mov    $0x300,%eax
  0x00007f7748f7f39f:   mov    %eax,0x10(%rbp)
  0x00007f7748f7f3a2:   jmpq   0x00007f7748f7f59d
  0x00007f7748f7f3a7:   mov    %rcx,%rax
  0x00007f7748f7f3aa:   xor    $0x200000,%eax
  0x00007f7748f7f3af:   push   %rax
  0x00007f7748f7f3b0:   popfq  
  0x00007f7748f7f3b1:   pushfq 
  0x00007f7748f7f3b2:   pop    %rax
  0x00007f7748f7f3b3:   cmp    %rax,%rcx
  0x00007f7748f7f3b6:   jne    0x00007f7748f7f3c5
  0x00007f7748f7f3b8:   mov    $0x400,%eax
  0x00007f7748f7f3bd:   mov    %eax,0x10(%rbp)
  0x00007f7748f7f3c0:   jmpq   0x00007f7748f7f59d
  0x00007f7748f7f3c5:   xor    %eax,%eax
  0x00007f7748f7f3c7:   cpuid  
  0x00007f7748f7f3c9:   or     %eax,%eax
  0x00007f7748f7f3cb:   je     0x00007f7748f7f3b8
  0x00007f7748f7f3cd:   lea    0x0(%rbp),%rsi
  0x00007f7748f7f3d1:   mov    %eax,(%rsi)
  0x00007f7748f7f3d3:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f3d6:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f3d9:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f3dc:   cmp    $0xa,%eax
  0x00007f7748f7f3df:   jbe    0x00007f7748f7f44b
  0x00007f7748f7f3e1:   mov    $0xb,%eax
  0x00007f7748f7f3e6:   xor    %ecx,%ecx
  0x00007f7748f7f3e8:   cpuid  
  0x00007f7748f7f3ea:   lea    0x40(%rbp),%rsi
  0x00007f7748f7f3ee:   mov    %eax,(%rsi)
  0x00007f7748f7f3f0:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f3f3:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f3f6:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f3f9:   mov    $0xb,%eax
  0x00007f7748f7f3fe:   mov    $0x1,%ecx
  0x00007f7748f7f403:   cpuid  
  0x00007f7748f7f405:   push   %rax
  0x00007f7748f7f406:   and    $0x1f,%eax
  0x00007f7748f7f409:   or     %ebx,%eax
  0x00007f7748f7f40b:   and    $0xffff,%eax
  0x00007f7748f7f410:   pop    %rax
  0x00007f7748f7f411:   je     0x00007f7748f7f44b
  0x00007f7748f7f413:   lea    0x50(%rbp),%rsi
  0x00007f7748f7f417:   mov    %eax,(%rsi)
  0x00007f7748f7f419:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f41c:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f41f:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f422:   mov    $0xb,%eax
  0x00007f7748f7f427:   mov    $0x2,%ecx
  0x00007f7748f7f42c:   cpuid  
  0x00007f7748f7f42e:   push   %rax
  0x00007f7748f7f42f:   and    $0x1f,%eax
  0x00007f7748f7f432:   or     %ebx,%eax
  0x00007f7748f7f434:   and    $0xffff,%eax
  0x00007f7748f7f439:   pop    %rax
  0x00007f7748f7f43a:   je     0x00007f7748f7f44b
  0x00007f7748f7f43c:   lea    0x60(%rbp),%rsi
  0x00007f7748f7f440:   mov    %eax,(%rsi)
  0x00007f7748f7f442:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f445:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f448:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f44b:   mov    $0x4,%eax
  0x00007f7748f7f450:   cmp    0x0(%rbp),%eax
  0x00007f7748f7f453:   jg     0x00007f7748f7f471
  0x00007f7748f7f455:   xor    %ecx,%ecx
  0x00007f7748f7f457:   cpuid  
  0x00007f7748f7f459:   push   %rax
  0x00007f7748f7f45a:   and    $0x1f,%eax
  0x00007f7748f7f45d:   or     %eax,%eax
  0x00007f7748f7f45f:   pop    %rax
  0x00007f7748f7f460:   je     0x00007f7748f7f471
  0x00007f7748f7f462:   lea    0x20(%rbp),%rsi
  0x00007f7748f7f466:   mov    %eax,(%rsi)
  0x00007f7748f7f468:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f46b:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f46e:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f471:   mov    $0x1,%eax
  0x00007f7748f7f476:   cpuid  
  0x00007f7748f7f478:   lea    0x10(%rbp),%rsi
  0x00007f7748f7f47c:   mov    %eax,(%rsi)
  0x00007f7748f7f47e:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f481:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f484:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f487:   and    $0x18000000,%ecx
  0x00007f7748f7f48d:   cmp    $0x18000000,%ecx
  0x00007f7748f7f493:   jne    0x00007f7748f7f4a6
  0x00007f7748f7f495:   xor    %ecx,%ecx
  0x00007f7748f7f497:   xgetbv 
  0x00007f7748f7f49a:   lea    0x100(%rbp),%rsi
  0x00007f7748f7f4a1:   mov    %eax,(%rsi)
  0x00007f7748f7f4a3:   mov    %edx,0x4(%rsi)
  0x00007f7748f7f4a6:   mov    $0x7,%eax
  0x00007f7748f7f4ab:   cmp    0x0(%rbp),%eax
  0x00007f7748f7f4ae:   jg     0x00007f7748f7f4c3
  0x00007f7748f7f4b0:   xor    %ecx,%ecx
  0x00007f7748f7f4b2:   cpuid  
  0x00007f7748f7f4b4:   lea    0x30(%rbp),%rsi
  0x00007f7748f7f4b8:   mov    %eax,(%rsi)
  0x00007f7748f7f4ba:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f4bd:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f4c0:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f4c3:   mov    $0x80000000,%eax
  0x00007f7748f7f4c8:   cpuid  
  0x00007f7748f7f4ca:   cmp    $0x80000000,%eax
  0x00007f7748f7f4cf:   jbe    0x00007f7748f7f59d
  0x00007f7748f7f4d5:   cmp    $0x80000004,%eax
  0x00007f7748f7f4da:   jbe    0x00007f7748f7f560
  0x00007f7748f7f4e0:   cmp    $0x80000006,%eax
  0x00007f7748f7f4e5:   jbe    0x00007f7748f7f547
  0x00007f7748f7f4e7:   cmp    $0x80000007,%eax
  0x00007f7748f7f4ec:   jbe    0x00007f7748f7f52e
  0x00007f7748f7f4ee:   cmp    $0x80000008,%eax
  0x00007f7748f7f4f3:   jbe    0x00007f7748f7f515
  0x00007f7748f7f4f5:   cmp    $0x8000001e,%eax
  0x00007f7748f7f4fa:   jb     0x00007f7748f7f515
  0x00007f7748f7f4fc:   mov    $0x8000001e,%eax
  0x00007f7748f7f501:   cpuid  
  0x00007f7748f7f503:   lea    0xf0(%rbp),%rsi
  0x00007f7748f7f50a:   mov    %eax,(%rsi)
  0x00007f7748f7f50c:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f50f:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f512:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f515:   mov    $0x80000008,%eax
  0x00007f7748f7f51a:   cpuid  
  0x00007f7748f7f51c:   lea    0xe0(%rbp),%rsi
  0x00007f7748f7f523:   mov    %eax,(%rsi)
  0x00007f7748f7f525:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f528:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f52b:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f52e:   mov    $0x80000007,%eax
  0x00007f7748f7f533:   cpuid  
  0x00007f7748f7f535:   lea    0xd0(%rbp),%rsi
  0x00007f7748f7f53c:   mov    %eax,(%rsi)
  0x00007f7748f7f53e:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f541:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f544:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f547:   mov    $0x80000005,%eax
  0x00007f7748f7f54c:   cpuid  
  0x00007f7748f7f54e:   lea    0xc0(%rbp),%rsi
  0x00007f7748f7f555:   mov    %eax,(%rsi)
  0x00007f7748f7f557:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f55a:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f55d:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f560:   mov    $0x80000001,%eax
  0x00007f7748f7f565:   cpuid  
  0x00007f7748f7f567:   lea    0x80(%rbp),%rsi
  0x00007f7748f7f56e:   mov    %eax,(%rsi)
  0x00007f7748f7f570:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f573:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f576:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f579:   lea    0x10(%rbp),%rsi
  0x00007f7748f7f57d:   mov    $0x18000000,%ecx
  0x00007f7748f7f582:   and    0x8(%rsi),%ecx
  0x00007f7748f7f585:   cmp    $0x18000000,%ecx
  0x00007f7748f7f58b:   jne    0x00007f7748f7f59d
  0x00007f7748f7f58d:   mov    $0x6,%eax
  0x00007f7748f7f592:   and    0x100(%rbp),%eax
  0x00007f7748f7f598:   cmp    $0x6,%eax
  0x00007f7748f7f59b:   je     0x00007f7748f7f5a2
  0x00007f7748f7f59d:   jmpq   0x00007f7748f7f617
  0x00007f7748f7f5a2:   mov    $0xcafebabe,%ecx
  0x00007f7748f7f5a7:   vmovd  %ecx,%xmm0
  0x00007f7748f7f5ab:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f7748f7f5b0:   vinsertf128 $0x1,%xmm0,%ymm0,%ymm0
  0x00007f7748f7f5b6:   vmovdqu %ymm0,%ymm7
  0x00007f7748f7f5ba:   vmovdqu %ymm0,%ymm8
  0x00007f7748f7f5be:   vmovdqu %ymm0,%ymm15
  0x00007f7748f7f5c2:   xor    %esi,%esi
  0x00007f7748f7f5c4:   mov    (%rsi),%eax
  0x00007f7748f7f5c6:   lea    0x108(%rbp),%rsi
  0x00007f7748f7f5cd:   vmovdqu %ymm0,(%rsi)
  0x00007f7748f7f5d1:   vmovdqu %ymm7,0x20(%rsi)
  0x00007f7748f7f5d6:   vmovdqu %ymm8,0x40(%rsi)
  0x00007f7748f7f5db:   vmovdqu %ymm15,0x60(%rsi)
  0x00007f7748f7f5e0:   lea    0x0(%rbp),%rsi
  0x00007f7748f7f5e4:   cmpl   $0x756e6547,0x4(%rsi)
  0x00007f7748f7f5eb:   jne    0x00007f7748f7f617
  0x00007f7748f7f5f1:   mov    $0xfff0ff0,%ecx
  0x00007f7748f7f5f6:   lea    0x10(%rbp),%rsi
  0x00007f7748f7f5fa:   and    (%rsi),%ecx
  0x00007f7748f7f5fc:   cmp    $0x50670,%ecx
  0x00007f7748f7f602:   je     0x00007f7748f7f617
  0x00007f7748f7f608:   cmp    $0x80650,%ecx
  0x00007f7748f7f60e:   je     0x00007f7748f7f617
  0x00007f7748f7f614:   vzeroupper 
  0x00007f7748f7f617:   popfq  
  0x00007f7748f7f618:   pop    %rsi
  0x00007f7748f7f619:   pop    %rbx
  0x00007f7748f7f61a:   pop    %rbp
  0x00007f7748f7f61b:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::detect_virt_stub [0x00007f7748f7f61c, 0x00007f7748f7f636] (26 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7f61c:   push   %rbp
  0x00007f7748f7f61d:   push   %rbx
  0x00007f7748f7f61e:   push   %rsi
  0x00007f7748f7f61f:   mov    %rdi,%rax
  0x00007f7748f7f622:   mov    %rsi,%rsi
  0x00007f7748f7f625:   cpuid  
  0x00007f7748f7f627:   mov    %eax,(%rsi)
  0x00007f7748f7f629:   mov    %ebx,0x4(%rsi)
  0x00007f7748f7f62c:   mov    %ecx,0x8(%rsi)
  0x00007f7748f7f62f:   mov    %edx,0xc(%rsi)
  0x00007f7748f7f632:   pop    %rsi
  0x00007f7748f7f633:   pop    %rbx
  0x00007f7748f7f634:   pop    %rbp
  0x00007f7748f7f635:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::forward exception [0x00007f7748f7fc00, 0x00007f7748f7fc3d] (61 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fc00:   mov    (%rsp),%rdi
  0x00007f7748f7fc04:   mov    %rdi,%rsi
  0x00007f7748f7fc07:   mov    %r15,%rdi
  0x00007f7748f7fc0a:   test   $0xf,%spl
  0x00007f7748f7fc0e:   je     0x00007f7748f7fc26
  0x00007f7748f7fc14:   sub    $0x8,%rsp
  0x00007f7748f7fc18:   callq  0x00007f774cfbbdb0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x00007f7748f7fc1d:   add    $0x8,%rsp
  0x00007f7748f7fc21:   jmpq   0x00007f7748f7fc2b
  0x00007f7748f7fc26:   callq  0x00007f774cfbbdb0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x00007f7748f7fc2b:   mov    %rax,%rbx
  0x00007f7748f7fc2e:   pop    %rdx
  0x00007f7748f7fc2f:   mov    0x8(%r15),%rax
  0x00007f7748f7fc33:   movq   $0x0,0x8(%r15)
  0x00007f7748f7fc3b:   jmpq   *%rbx
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::call_stub [0x00007f7748f7fc3d, 0x00007f7748f7fd2a] (237 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fc3d:   push   %rbp
  0x00007f7748f7fc3e:   mov    %rsp,%rbp
  0x00007f7748f7fc41:   sub    $0x60,%rsp
  0x00007f7748f7fc45:   mov    %r9,-0x8(%rbp)
  0x00007f7748f7fc49:   mov    %r8,-0x10(%rbp)
  0x00007f7748f7fc4d:   mov    %rcx,-0x18(%rbp)
  0x00007f7748f7fc51:   mov    %edx,-0x20(%rbp)
  0x00007f7748f7fc54:   mov    %rsi,-0x28(%rbp)
  0x00007f7748f7fc58:   mov    %rdi,-0x30(%rbp)
  0x00007f7748f7fc5c:   mov    %rbx,-0x38(%rbp)
  0x00007f7748f7fc60:   mov    %r12,-0x40(%rbp)
  0x00007f7748f7fc64:   mov    %r13,-0x48(%rbp)
  0x00007f7748f7fc68:   mov    %r14,-0x50(%rbp)
  0x00007f7748f7fc6c:   mov    %r15,-0x58(%rbp)
  0x00007f7748f7fc70:   vstmxcsr -0x60(%rbp)
  0x00007f7748f7fc75:   mov    -0x60(%rbp),%eax
  0x00007f7748f7fc78:   and    $0xffc0,%eax
  0x00007f7748f7fc7d:   cmp    0x47162e5(%rip),%eax        # 0x00007f774d695f68
  0x00007f7748f7fc83:   je     0x00007f7748f7fc91
  0x00007f7748f7fc89:   vldmxcsr 0x47162d7(%rip)        # 0x00007f774d695f68
  0x00007f7748f7fc91:   mov    0x18(%rbp),%r15
  0x00007f7748f7fc95:   mov    0x46a7374(%rip),%r12        # 0x00007f774d627010
  0x00007f7748f7fc9c:   mov    0x10(%rbp),%ecx
  0x00007f7748f7fc9f:   test   %ecx,%ecx
  0x00007f7748f7fca1:   je     0x00007f7748f7fcb9
  0x00007f7748f7fca7:   mov    -0x8(%rbp),%rdx
  0x00007f7748f7fcab:   mov    %ecx,%esi
  0x00007f7748f7fcad:   mov    (%rdx),%rax
  0x00007f7748f7fcb0:   add    $0x8,%rdx
  0x00007f7748f7fcb4:   dec    %esi
  0x00007f7748f7fcb6:   push   %rax
  0x00007f7748f7fcb7:   jne    0x00007f7748f7fcad
  0x00007f7748f7fcb9:   mov    -0x18(%rbp),%rbx
  0x00007f7748f7fcbd:   mov    -0x10(%rbp),%rsi
  0x00007f7748f7fcc1:   mov    %rsp,%r13
  0x00007f7748f7fcc4:   callq  *%rsi
  0x00007f7748f7fcc6:   mov    -0x28(%rbp),%rdi
  0x00007f7748f7fcca:   mov    -0x20(%rbp),%esi
  0x00007f7748f7fccd:   cmp    $0xc,%esi
  0x00007f7748f7fcd0:   je     0x00007f7748f7fd19
  0x00007f7748f7fcd6:   cmp    $0xb,%esi
  0x00007f7748f7fcd9:   je     0x00007f7748f7fd19
  0x00007f7748f7fcdf:   cmp    $0x6,%esi
  0x00007f7748f7fce2:   je     0x00007f7748f7fd1e
  0x00007f7748f7fce8:   cmp    $0x7,%esi
  0x00007f7748f7fceb:   je     0x00007f7748f7fd24
  0x00007f7748f7fcf1:   mov    %eax,(%rdi)
  0x00007f7748f7fcf3:   lea    -0x60(%rbp),%rsp
  0x00007f7748f7fcf7:   mov    -0x58(%rbp),%r15
  0x00007f7748f7fcfb:   mov    -0x50(%rbp),%r14
  0x00007f7748f7fcff:   mov    -0x48(%rbp),%r13
  0x00007f7748f7fd03:   mov    -0x40(%rbp),%r12
  0x00007f7748f7fd07:   mov    -0x38(%rbp),%rbx
  0x00007f7748f7fd0b:   vldmxcsr -0x60(%rbp)
  0x00007f7748f7fd10:   add    $0x60,%rsp
  0x00007f7748f7fd14:   vzeroupper 
  0x00007f7748f7fd17:   pop    %rbp
  0x00007f7748f7fd18:   retq   
  0x00007f7748f7fd19:   mov    %rax,(%rdi)
  0x00007f7748f7fd1c:   jmp    0x00007f7748f7fcf3
  0x00007f7748f7fd1e:   vmovss %xmm0,(%rdi)
  0x00007f7748f7fd22:   jmp    0x00007f7748f7fcf3
  0x00007f7748f7fd24:   vmovsd %xmm0,(%rdi)
  0x00007f7748f7fd28:   jmp    0x00007f7748f7fcf3
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::catch_exception [0x00007f7748f7fd2a, 0x00007f7748f7fd49] (31 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fd2a:   mov    %rax,0x8(%r15)
  0x00007f7748f7fd2e:   movabs $0x7f774d34aca0,%r10
  0x00007f7748f7fd38:   mov    %r10,0x10(%r15)
  0x00007f7748f7fd3c:   movl   $0x1cb,0x18(%r15)
  0x00007f7748f7fd44:   jmpq   0x00007f7748f7fcc6
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::orderaccess_fence [0x00007f7748f7fd49, 0x00007f7748f7fd50] (7 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fd49:   lock addl $0x0,-0x40(%rsp)
  0x00007f7748f7fd4f:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::get_previous_sp [0x00007f7748f7fd50, 0x00007f7748f7fd58] (8 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fd50:   mov    %rsp,%rax
  0x00007f7748f7fd53:   add    $0x8,%rax
  0x00007f7748f7fd57:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::verify_mxcsr [0x00007f7748f7fd58, 0x00007f7748f7fd59] (1 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fd58:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::f2i_fixup [0x00007f7748f7fd59, 0x00007f7748f7fd91] (56 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fd59:   push   %rax
  0x00007f7748f7fd5a:   push   %rcx
  0x00007f7748f7fd5b:   push   %rdx
  0x00007f7748f7fd5c:   push   %rsi
  0x00007f7748f7fd5d:   mov    $0x7f800000,%eax
  0x00007f7748f7fd62:   xor    %ecx,%ecx
  0x00007f7748f7fd64:   mov    0x28(%rsp),%edx
  0x00007f7748f7fd68:   mov    %edx,%esi
  0x00007f7748f7fd6a:   and    $0x7fffffff,%esi
  0x00007f7748f7fd70:   cmp    %esi,%eax
  0x00007f7748f7fd72:   js     0x00007f7748f7fd87
  0x00007f7748f7fd78:   test   %edx,%edx
  0x00007f7748f7fd7a:   mov    $0x80000000,%ecx
  0x00007f7748f7fd7f:   mov    $0x7fffffff,%eax
  0x00007f7748f7fd84:   cmovns %eax,%ecx
  0x00007f7748f7fd87:   mov    %rcx,0x28(%rsp)
  0x00007f7748f7fd8c:   pop    %rsi
  0x00007f7748f7fd8d:   pop    %rdx
  0x00007f7748f7fd8e:   pop    %rcx
  0x00007f7748f7fd8f:   pop    %rax
  0x00007f7748f7fd90:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::f2l_fixup [0x00007f7748f7fd91, 0x00007f7748f7fdd4] (67 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fd91:   push   %rax
  0x00007f7748f7fd92:   push   %rcx
  0x00007f7748f7fd93:   push   %rdx
  0x00007f7748f7fd94:   push   %rsi
  0x00007f7748f7fd95:   mov    $0x7f800000,%eax
  0x00007f7748f7fd9a:   xor    %ecx,%ecx
  0x00007f7748f7fd9c:   mov    0x28(%rsp),%edx
  0x00007f7748f7fda0:   mov    %edx,%esi
  0x00007f7748f7fda2:   and    $0x7fffffff,%esi
  0x00007f7748f7fda8:   cmp    %esi,%eax
  0x00007f7748f7fdaa:   js     0x00007f7748f7fdca
  0x00007f7748f7fdb0:   test   %edx,%edx
  0x00007f7748f7fdb2:   movabs $0x8000000000000000,%rcx
  0x00007f7748f7fdbc:   movabs $0x7fffffffffffffff,%rax
  0x00007f7748f7fdc6:   cmovns %rax,%rcx
  0x00007f7748f7fdca:   mov    %rcx,0x28(%rsp)
  0x00007f7748f7fdcf:   pop    %rsi
  0x00007f7748f7fdd0:   pop    %rdx
  0x00007f7748f7fdd1:   pop    %rcx
  0x00007f7748f7fdd2:   pop    %rax
  0x00007f7748f7fdd3:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::d2i_fixup [0x00007f7748f7fdd4, 0x00007f7748f7fe24] (80 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fdd4:   push   %rax
  0x00007f7748f7fdd5:   push   %rcx
  0x00007f7748f7fdd6:   push   %rdx
  0x00007f7748f7fdd7:   push   %rsi
  0x00007f7748f7fdd8:   push   %rdi
  0x00007f7748f7fdd9:   mov    $0x7ff00000,%eax
  0x00007f7748f7fdde:   mov    0x30(%rsp),%rdx
  0x00007f7748f7fde3:   mov    %edx,%ecx
  0x00007f7748f7fde5:   mov    %rdx,%rsi
  0x00007f7748f7fde8:   mov    %rdx,%rdi
  0x00007f7748f7fdeb:   neg    %ecx
  0x00007f7748f7fded:   shr    $0x20,%rsi
  0x00007f7748f7fdf1:   or     %edx,%ecx
  0x00007f7748f7fdf3:   and    $0x7fffffff,%esi
  0x00007f7748f7fdf9:   xor    %edx,%edx
  0x00007f7748f7fdfb:   shr    $0x1f,%ecx
  0x00007f7748f7fdfe:   or     %ecx,%esi
  0x00007f7748f7fe00:   cmp    %esi,%eax
  0x00007f7748f7fe02:   js     0x00007f7748f7fe19
  0x00007f7748f7fe08:   test   %rdi,%rdi
  0x00007f7748f7fe0b:   mov    $0x80000000,%edx
  0x00007f7748f7fe10:   mov    $0x7fffffff,%eax
  0x00007f7748f7fe15:   cmovns %rax,%rdx
  0x00007f7748f7fe19:   mov    %rdx,0x30(%rsp)
  0x00007f7748f7fe1e:   pop    %rdi
  0x00007f7748f7fe1f:   pop    %rsi
  0x00007f7748f7fe20:   pop    %rdx
  0x00007f7748f7fe21:   pop    %rcx
  0x00007f7748f7fe22:   pop    %rax
  0x00007f7748f7fe23:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::d2l_fixup [0x00007f7748f7fe24, 0x00007f7748f7fe7e] (90 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fe24:   push   %rax
  0x00007f7748f7fe25:   push   %rcx
  0x00007f7748f7fe26:   push   %rdx
  0x00007f7748f7fe27:   push   %rsi
  0x00007f7748f7fe28:   push   %rdi
  0x00007f7748f7fe29:   mov    $0x7ff00000,%eax
  0x00007f7748f7fe2e:   mov    0x30(%rsp),%rdx
  0x00007f7748f7fe33:   mov    %edx,%ecx
  0x00007f7748f7fe35:   mov    %rdx,%rsi
  0x00007f7748f7fe38:   mov    %rdx,%rdi
  0x00007f7748f7fe3b:   neg    %ecx
  0x00007f7748f7fe3d:   shr    $0x20,%rsi
  0x00007f7748f7fe41:   or     %edx,%ecx
  0x00007f7748f7fe43:   and    $0x7fffffff,%esi
  0x00007f7748f7fe49:   xor    %edx,%edx
  0x00007f7748f7fe4b:   shr    $0x1f,%ecx
  0x00007f7748f7fe4e:   or     %ecx,%esi
  0x00007f7748f7fe50:   cmp    %esi,%eax
  0x00007f7748f7fe52:   js     0x00007f7748f7fe73
  0x00007f7748f7fe58:   test   %rdi,%rdi
  0x00007f7748f7fe5b:   movabs $0x8000000000000000,%rdx
  0x00007f7748f7fe65:   movabs $0x7fffffffffffffff,%rax
  0x00007f7748f7fe6f:   cmovns %rax,%rdx
  0x00007f7748f7fe73:   mov    %rdx,0x30(%rsp)
  0x00007f7748f7fe78:   pop    %rdi
  0x00007f7748f7fe79:   pop    %rsi
  0x00007f7748f7fe7a:   pop    %rdx
  0x00007f7748f7fe7b:   pop    %rcx
  0x00007f7748f7fe7c:   pop    %rax
  0x00007f7748f7fe7d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::float_sign_mask [0x00007f7748f7fe80, 0x00007f7748f7fe90] (16 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fe80:   (bad)  
  0x00007f7748f7fe81:   (bad)  
  0x00007f7748f7fe82:   (bad)  
  0x00007f7748f7fe83:   jg     0x00007f7748f7fe84
  0x00007f7748f7fe85:   (bad)  
  0x00007f7748f7fe86:   (bad)  
  0x00007f7748f7fe87:   jg     0x00007f7748f7fe88
  0x00007f7748f7fe89:   (bad)  
  0x00007f7748f7fe8a:   (bad)  
  0x00007f7748f7fe8b:   jg     0x00007f7748f7fe8c
  0x00007f7748f7fe8d:   (bad)  
  0x00007f7748f7fe8e:   (bad)  
  0x00007f7748f7fe8f:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::float_sign_flip [0x00007f7748f7fea0, 0x00007f7748f7feb0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fea0:   add    %al,(%rax)
  0x00007f7748f7fea2:   add    %al,-0x80000000(%rax)
  0x00007f7748f7fea8:   add    %al,(%rax)
  0x00007f7748f7feaa:   add    %al,-0x80000000(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::double_sign_mask [0x00007f7748f7fec0, 0x00007f7748f7fed0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fec0:   (bad)  
  0x00007f7748f7fec1:   (bad)  
  0x00007f7748f7fec2:   (bad)  
  0x00007f7748f7fec3:   (bad)  
  0x00007f7748f7fec4:   (bad)  
  0x00007f7748f7fec5:   (bad)  
  0x00007f7748f7fec6:   (bad)  
  0x00007f7748f7fec7:   jg     0x00007f7748f7fec8
  0x00007f7748f7fec9:   (bad)  
  0x00007f7748f7feca:   (bad)  
  0x00007f7748f7fecb:   (bad)  
  0x00007f7748f7fecc:   (bad)  
  0x00007f7748f7fecd:   (bad)  
  0x00007f7748f7fece:   (bad)  
  0x00007f7748f7fecf:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::double_sign_flip [0x00007f7748f7fee0, 0x00007f7748f7fef0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7fee0:   add    %al,(%rax)
  0x00007f7748f7fee2:   add    %al,(%rax)
  0x00007f7748f7fee4:   add    %al,(%rax)
  0x00007f7748f7fee6:   add    %al,0x0(%rax)
  0x00007f7748f7feec:   add    %al,(%rax)
  0x00007f7748f7feee:   .byte 0x0
  0x00007f7748f7feef:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - StackOverflowError throw_exception 0x00007f7748f87610
--------------------------------------------------------------------------------
  0x00007f7748f87680:   push   %rbp
  0x00007f7748f87681:   mov    %rsp,%rbp
  0x00007f7748f87684:   sub    $0x0,%rsp
  0x00007f7748f87688:   vzeroupper 
  0x00007f7748f8768b:   mov    %rbp,0x2d0(%r15)
  0x00007f7748f87692:   movabs $0x7f7748f87688,%r10
  0x00007f7748f8769c:   mov    %r10,0x2c8(%r15)
  0x00007f7748f876a3:   mov    %rsp,0x2c0(%r15)
  0x00007f7748f876aa:   and    $0xfffffffffffffff0,%rsp
  0x00007f7748f876ae:   mov    %r15,%rdi
  0x00007f7748f876b1:   callq  0x00007f774cfc22a0 = SharedRuntime::throw_StackOverflowError(JavaThread*)
  0x00007f7748f876b6:   movq   $0x0,0x2c0(%r15)
  0x00007f7748f876c1:   movq   $0x0,0x2d0(%r15)
  0x00007f7748f876cc:   movq   $0x0,0x2c8(%r15)
  0x00007f7748f876d7:   vzeroupper 
  0x00007f7748f876da:   leaveq 
  0x00007f7748f876db:   jmpq   0x00007f7748f7fc00
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - delayed StackOverflowError throw_exception 0x00007f7748f87910
--------------------------------------------------------------------------------
  0x00007f7748f87980:   push   %rbp
  0x00007f7748f87981:   mov    %rsp,%rbp
  0x00007f7748f87984:   sub    $0x0,%rsp
  0x00007f7748f87988:   vzeroupper 
  0x00007f7748f8798b:   mov    %rbp,0x2d0(%r15)
  0x00007f7748f87992:   movabs $0x7f7748f87988,%r10
  0x00007f7748f8799c:   mov    %r10,0x2c8(%r15)
  0x00007f7748f879a3:   mov    %rsp,0x2c0(%r15)
  0x00007f7748f879aa:   and    $0xfffffffffffffff0,%rsp
  0x00007f7748f879ae:   mov    %r15,%rdi
  0x00007f7748f879b1:   callq  0x00007f774cfc2460 = SharedRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f7748f879b6:   movq   $0x0,0x2c0(%r15)
  0x00007f7748f879c1:   movq   $0x0,0x2d0(%r15)
  0x00007f7748f879cc:   movq   $0x0,0x2c8(%r15)
  0x00007f7748f879d7:   vzeroupper 
  0x00007f7748f879da:   leaveq 
  0x00007f7748f879db:   jmpq   0x00007f7748f7fc00
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesCRC32 [0x00007f7748f7ff00, 0x00007f7748f80150] (592 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f7ff00:   push   %rbp
  0x00007f7748f7ff01:   mov    %rsp,%rbp
  0x00007f7748f7ff04:   movabs $0x7f774d63d780,%rcx
  0x00007f7748f7ff0e:   not    %edi
  0x00007f7748f7ff10:   cmp    $0x10,%edx
  0x00007f7748f7ff13:   jl     0x00007f7748f8012a
  0x00007f7748f7ff19:   mov    %esi,%r11d
  0x00007f7748f7ff1c:   and    $0xf,%r11d
  0x00007f7748f7ff20:   je     0x00007f7748f7ff44
  0x00007f7748f7ff22:   sub    $0x10,%r11d
  0x00007f7748f7ff26:   add    %r11d,%edx
  0x00007f7748f7ff29:   data16 xchg %ax,%ax
  0x00007f7748f7ff2c:   movsbl (%rsi),%eax
  0x00007f7748f7ff2f:   xor    %edi,%eax
  0x00007f7748f7ff31:   and    $0xff,%eax
  0x00007f7748f7ff36:   shr    $0x8,%edi
  0x00007f7748f7ff39:   xor    (%rcx,%rax,4),%edi
  0x00007f7748f7ff3c:   inc    %rsi
  0x00007f7748f7ff3f:   inc    %r11d
  0x00007f7748f7ff42:   jl     0x00007f7748f7ff2c
  0x00007f7748f7ff44:   mov    %edx,%r11d
  0x00007f7748f7ff47:   shr    $0x4,%edx
  0x00007f7748f7ff4a:   je     0x00007f7748f80127
  0x00007f7748f7ff50:   vmovdqa (%rsi),%xmm1
  0x00007f7748f7ff54:   vmovd  %xmm1,%eax
  0x00007f7748f7ff58:   xor    %eax,%edi
  0x00007f7748f7ff5a:   vpinsrd $0x0,%edi,%xmm1,%xmm1
  0x00007f7748f7ff60:   add    $0x10,%rsi
  0x00007f7748f7ff64:   sub    $0x4,%edx
  0x00007f7748f7ff67:   jl     0x00007f7748f80040
  0x00007f7748f7ff6d:   vmovdqa (%rsi),%xmm2
  0x00007f7748f7ff71:   vmovdqa 0x10(%rsi),%xmm3
  0x00007f7748f7ff76:   vmovdqa 0x20(%rsi),%xmm4
  0x00007f7748f7ff7b:   add    $0x30,%rsi
  0x00007f7748f7ff7f:   sub    $0x3,%edx
  0x00007f7748f7ff82:   jle    0x00007f7748f7fffc
  0x00007f7748f7ff88:   vmovdqu 0x46bdc10(%rip),%xmm0        # 0x00007f774d63dba0
  0x00007f7748f7ff90:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748f7ff9b:   data16 data16 xchg %ax,%ax
  0x00007f7748f7ff9f:   nop
  0x00007f7748f7ffa0:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f7748f7ffa6:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f7748f7ffac:   vpxor  (%rsi),%xmm1,%xmm1
  0x00007f7748f7ffb0:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f7748f7ffb4:   vpclmulhqhqdq %xmm2,%xmm0,%xmm5
  0x00007f7748f7ffba:   vpclmullqlqdq %xmm2,%xmm0,%xmm2
  0x00007f7748f7ffc0:   vpxor  0x10(%rsi),%xmm2,%xmm2
  0x00007f7748f7ffc5:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007f7748f7ffc9:   vpclmulhqhqdq %xmm3,%xmm0,%xmm5
  0x00007f7748f7ffcf:   vpclmullqlqdq %xmm3,%xmm0,%xmm3
  0x00007f7748f7ffd5:   vpxor  0x20(%rsi),%xmm3,%xmm3
  0x00007f7748f7ffda:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007f7748f7ffde:   vpclmulhqhqdq %xmm4,%xmm0,%xmm5
  0x00007f7748f7ffe4:   vpclmullqlqdq %xmm4,%xmm0,%xmm4
  0x00007f7748f7ffea:   vpxor  0x30(%rsi),%xmm4,%xmm4
  0x00007f7748f7ffef:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f7748f7fff3:   add    $0x40,%rsi
  0x00007f7748f7fff7:   sub    $0x4,%edx
  0x00007f7748f7fffa:   jg     0x00007f7748f7ffa0
  0x00007f7748f7fffc:   vmovdqu 0x46bdb8c(%rip),%xmm0        # 0x00007f774d63db90
  0x00007f7748f80004:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f7748f8000a:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f7748f80010:   vpxor  %xmm2,%xmm1,%xmm1
  0x00007f7748f80014:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f7748f80018:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f7748f8001e:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f7748f80024:   vpxor  %xmm3,%xmm1,%xmm1
  0x00007f7748f80028:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f7748f8002c:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f7748f80032:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f7748f80038:   vpxor  %xmm4,%xmm1,%xmm1
  0x00007f7748f8003c:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f7748f80040:   add    $0x3,%edx
  0x00007f7748f80043:   jle    0x00007f7748f80069
  0x00007f7748f80045:   vmovdqu 0x46bdb43(%rip),%xmm0        # 0x00007f774d63db90
  0x00007f7748f8004d:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f7748f80053:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f7748f80059:   vpxor  (%rsi),%xmm1,%xmm1
  0x00007f7748f8005d:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007f7748f80061:   add    $0x10,%rsi
  0x00007f7748f80065:   dec    %edx
  0x00007f7748f80067:   jg     0x00007f7748f8004d
  0x00007f7748f80069:   vmovdqu 0x46bdb0f(%rip),%xmm0        # 0x00007f774d63db80
  0x00007f7748f80071:   vpclmulhqlqdq %xmm1,%xmm0,%xmm2
  0x00007f7748f80077:   vpand  %xmm2,%xmm0,%xmm3
  0x00007f7748f8007b:   vpclmulhqlqdq %xmm3,%xmm0,%xmm0
  0x00007f7748f80081:   vpsrldq $0x8,%xmm1,%xmm1
  0x00007f7748f80086:   vpsrldq $0x4,%xmm2,%xmm2
  0x00007f7748f8008b:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748f8008f:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f7748f80093:   vmovd  %xmm0,%eax
  0x00007f7748f80097:   and    $0xff,%eax
  0x00007f7748f8009c:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007f7748f800a1:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007f7748f800a6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748f800aa:   vmovd  %xmm0,%eax
  0x00007f7748f800ae:   and    $0xff,%eax
  0x00007f7748f800b3:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007f7748f800b8:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007f7748f800bd:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748f800c1:   vmovd  %xmm0,%eax
  0x00007f7748f800c5:   and    $0xff,%eax
  0x00007f7748f800ca:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007f7748f800cf:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007f7748f800d4:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748f800d8:   vmovd  %xmm0,%eax
  0x00007f7748f800dc:   and    $0xff,%eax
  0x00007f7748f800e1:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007f7748f800e6:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007f7748f800eb:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748f800ef:   vmovd  %xmm0,%edi
  0x00007f7748f800f3:   mov    %edi,%eax
  0x00007f7748f800f5:   and    $0xff,%eax
  0x00007f7748f800fa:   shr    $0x8,%edi
  0x00007f7748f800fd:   xor    (%rcx,%rax,4),%edi
  0x00007f7748f80100:   mov    %edi,%eax
  0x00007f7748f80102:   and    $0xff,%eax
  0x00007f7748f80107:   shr    $0x8,%edi
  0x00007f7748f8010a:   xor    (%rcx,%rax,4),%edi
  0x00007f7748f8010d:   mov    %edi,%eax
  0x00007f7748f8010f:   and    $0xff,%eax
  0x00007f7748f80114:   shr    $0x8,%edi
  0x00007f7748f80117:   xor    (%rcx,%rax,4),%edi
  0x00007f7748f8011a:   mov    %edi,%eax
  0x00007f7748f8011c:   and    $0xff,%eax
  0x00007f7748f80121:   shr    $0x8,%edi
  0x00007f7748f80124:   xor    (%rcx,%rax,4),%edi
  0x00007f7748f80127:   mov    %r11d,%edx
  0x00007f7748f8012a:   and    $0xf,%edx
  0x00007f7748f8012d:   je     0x00007f7748f80147
  0x00007f7748f8012f:   nop
  0x00007f7748f80130:   movsbl (%rsi),%eax
  0x00007f7748f80133:   xor    %edi,%eax
  0x00007f7748f80135:   and    $0xff,%eax
  0x00007f7748f8013a:   shr    $0x8,%edi
  0x00007f7748f8013d:   xor    (%rcx,%rax,4),%edi
  0x00007f7748f80140:   inc    %rsi
  0x00007f7748f80143:   dec    %edx
  0x00007f7748f80145:   jg     0x00007f7748f80130
  0x00007f7748f80147:   not    %edi
  0x00007f7748f80149:   mov    %edi,%eax
  0x00007f7748f8014b:   vzeroupper 
  0x00007f7748f8014e:   leaveq 
  0x00007f7748f8014f:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesCRC32C [0x00007f7748f80160, 0x00007f7748f803c4] (612 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f80160:   push   %rbp
  0x00007f7748f80161:   mov    %rsp,%rbp
  0x00007f7748f80164:   cmp    $0x1800,%edx
  0x00007f7748f8016a:   jl     0x00007f7748f80215
  0x00007f7748f80170:   xor    %eax,%eax
  0x00007f7748f80172:   xor    %r9d,%r9d
  0x00007f7748f80175:   mov    %rsi,%r10
  0x00007f7748f80178:   add    $0x800,%r10
  0x00007f7748f8017f:   crc32q (%rsi),%rdi
  0x00007f7748f80185:   crc32q 0x800(%rsi),%rax
  0x00007f7748f8018f:   crc32q 0x1000(%rsi),%r9
  0x00007f7748f80199:   add    $0x8,%rsi
  0x00007f7748f8019d:   cmp    %r10,%rsi
  0x00007f7748f801a0:   jl     0x00007f7748f8017f
  0x00007f7748f801a2:   vmovd  %edi,%xmm0
  0x00007f7748f801a6:   mov    $0x35d73a62,%r11d
  0x00007f7748f801ac:   vmovd  %r11d,%xmm2
  0x00007f7748f801b1:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007f7748f801b7:   vmovq  %xmm0,%rdi
  0x00007f7748f801bc:   vmovd  %eax,%xmm1
  0x00007f7748f801c0:   mov    $0xd65762a,%r11d
  0x00007f7748f801c6:   vmovd  %r11d,%xmm2
  0x00007f7748f801cb:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007f7748f801d1:   vmovq  %xmm1,%rax
  0x00007f7748f801d6:   shl    %rdi
  0x00007f7748f801d9:   mov    %edi,%r11d
  0x00007f7748f801dc:   shr    $0x20,%rdi
  0x00007f7748f801e0:   xor    %ecx,%ecx
  0x00007f7748f801e2:   crc32l %r11d,%ecx
  0x00007f7748f801e8:   xor    %ecx,%edi
  0x00007f7748f801ea:   shl    %rax
  0x00007f7748f801ed:   mov    %eax,%r11d
  0x00007f7748f801f0:   shr    $0x20,%rax
  0x00007f7748f801f4:   xor    %ecx,%ecx
  0x00007f7748f801f6:   crc32l %r11d,%ecx
  0x00007f7748f801fc:   xor    %ecx,%eax
  0x00007f7748f801fe:   xor    %eax,%edi
  0x00007f7748f80200:   xor    %r9d,%edi
  0x00007f7748f80203:   add    $0x1000,%rsi
  0x00007f7748f8020a:   sub    $0x1800,%edx
  0x00007f7748f80210:   jmpq   0x00007f7748f80164
  0x00007f7748f80215:   cmp    $0x6f0,%edx
  0x00007f7748f8021b:   jl     0x00007f7748f802c6
  0x00007f7748f80221:   xor    %eax,%eax
  0x00007f7748f80223:   xor    %r9d,%r9d
  0x00007f7748f80226:   mov    %rsi,%r10
  0x00007f7748f80229:   add    $0x250,%r10
  0x00007f7748f80230:   crc32q (%rsi),%rdi
  0x00007f7748f80236:   crc32q 0x250(%rsi),%rax
  0x00007f7748f80240:   crc32q 0x4a0(%rsi),%r9
  0x00007f7748f8024a:   add    $0x8,%rsi
  0x00007f7748f8024e:   cmp    %r10,%rsi
  0x00007f7748f80251:   jl     0x00007f7748f80230
  0x00007f7748f80253:   vmovd  %edi,%xmm0
  0x00007f7748f80257:   mov    $0x3babc3e6,%r11d
  0x00007f7748f8025d:   vmovd  %r11d,%xmm2
  0x00007f7748f80262:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007f7748f80268:   vmovq  %xmm0,%rdi
  0x00007f7748f8026d:   vmovd  %eax,%xmm1
  0x00007f7748f80271:   mov    $0x1230a27d,%r11d
  0x00007f7748f80277:   vmovd  %r11d,%xmm2
  0x00007f7748f8027c:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007f7748f80282:   vmovq  %xmm1,%rax
  0x00007f7748f80287:   shl    %rdi
  0x00007f7748f8028a:   mov    %edi,%r11d
  0x00007f7748f8028d:   shr    $0x20,%rdi
  0x00007f7748f80291:   xor    %ecx,%ecx
  0x00007f7748f80293:   crc32l %r11d,%ecx
  0x00007f7748f80299:   xor    %ecx,%edi
  0x00007f7748f8029b:   shl    %rax
  0x00007f7748f8029e:   mov    %eax,%r11d
  0x00007f7748f802a1:   shr    $0x20,%rax
  0x00007f7748f802a5:   xor    %ecx,%ecx
  0x00007f7748f802a7:   crc32l %r11d,%ecx
  0x00007f7748f802ad:   xor    %ecx,%eax
  0x00007f7748f802af:   xor    %eax,%edi
  0x00007f7748f802b1:   xor    %r9d,%edi
  0x00007f7748f802b4:   add    $0x4a0,%rsi
  0x00007f7748f802bb:   sub    $0x6f0,%edx
  0x00007f7748f802c1:   jmpq   0x00007f7748f80215
  0x00007f7748f802c6:   cmp    $0xd8,%edx
  0x00007f7748f802cc:   jl     0x00007f7748f80371
  0x00007f7748f802d2:   xor    %eax,%eax
  0x00007f7748f802d4:   xor    %r9d,%r9d
  0x00007f7748f802d7:   mov    %rsi,%r10
  0x00007f7748f802da:   add    $0x48,%r10
  0x00007f7748f802de:   crc32q (%rsi),%rdi
  0x00007f7748f802e4:   crc32q 0x48(%rsi),%rax
  0x00007f7748f802eb:   crc32q 0x90(%rsi),%r9
  0x00007f7748f802f5:   add    $0x8,%rsi
  0x00007f7748f802f9:   cmp    %r10,%rsi
  0x00007f7748f802fc:   jl     0x00007f7748f802de
  0x00007f7748f802fe:   vmovd  %edi,%xmm0
  0x00007f7748f80302:   mov    $0xe55ef1f3,%r11d
  0x00007f7748f80308:   vmovd  %r11d,%xmm2
  0x00007f7748f8030d:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007f7748f80313:   vmovq  %xmm0,%rdi
  0x00007f7748f80318:   vmovd  %eax,%xmm1
  0x00007f7748f8031c:   mov    $0x8cfaa965,%r11d
  0x00007f7748f80322:   vmovd  %r11d,%xmm2
  0x00007f7748f80327:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007f7748f8032d:   vmovq  %xmm1,%rax
  0x00007f7748f80332:   shl    %rdi
  0x00007f7748f80335:   mov    %edi,%r11d
  0x00007f7748f80338:   shr    $0x20,%rdi
  0x00007f7748f8033c:   xor    %ecx,%ecx
  0x00007f7748f8033e:   crc32l %r11d,%ecx
  0x00007f7748f80344:   xor    %ecx,%edi
  0x00007f7748f80346:   shl    %rax
  0x00007f7748f80349:   mov    %eax,%r11d
  0x00007f7748f8034c:   shr    $0x20,%rax
  0x00007f7748f80350:   xor    %ecx,%ecx
  0x00007f7748f80352:   crc32l %r11d,%ecx
  0x00007f7748f80358:   xor    %ecx,%eax
  0x00007f7748f8035a:   xor    %eax,%edi
  0x00007f7748f8035c:   xor    %r9d,%edi
  0x00007f7748f8035f:   add    $0x90,%rsi
  0x00007f7748f80366:   sub    $0xd8,%edx
  0x00007f7748f8036c:   jmpq   0x00007f7748f802c6
  0x00007f7748f80371:   mov    %edx,%eax
  0x00007f7748f80373:   and    $0x7,%eax
  0x00007f7748f80376:   neg    %eax
  0x00007f7748f80378:   add    %edx,%eax
  0x00007f7748f8037a:   add    %rsi,%rax
  0x00007f7748f8037d:   cmp    %rax,%rsi
  0x00007f7748f80380:   jge    0x00007f7748f8039f
  0x00007f7748f80382:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748f8038c:   data16 data16 xchg %ax,%ax
  0x00007f7748f80390:   crc32q (%rsi),%rdi
  0x00007f7748f80396:   add    $0x8,%rsi
  0x00007f7748f8039a:   cmp    %rax,%rsi
  0x00007f7748f8039d:   jl     0x00007f7748f80390
  0x00007f7748f8039f:   and    $0x7,%edx
  0x00007f7748f803a2:   mov    $0x1,%r9d
  0x00007f7748f803a8:   cmp    %edx,%r9d
  0x00007f7748f803ab:   jg     0x00007f7748f803bd
  0x00007f7748f803ad:   crc32b (%rsi),%edi
  0x00007f7748f803b2:   inc    %rsi
  0x00007f7748f803b5:   inc    %r9d
  0x00007f7748f803b8:   cmp    %edx,%r9d
  0x00007f7748f803bb:   jle    0x00007f7748f803ad
  0x00007f7748f803bd:   mov    %edi,%eax
  0x00007f7748f803bf:   vzeroupper 
  0x00007f7748f803c2:   leaveq 
  0x00007f7748f803c3:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesAdler32 [0x00007f7748f803e0, 0x00007f7748f80587] (423 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f803e0:   push   %rbp
  0x00007f7748f803e1:   mov    %rsp,%rbp
  0x00007f7748f803e4:   vmovq  %r12,%xmm8
  0x00007f7748f803e9:   vmovq  %r13,%xmm9
  0x00007f7748f803ee:   vmovq  %r14,%xmm10
  0x00007f7748f803f3:   vmovdqu 0x46b5fa5(%rip),%ymm6        # 0x00007f774d6363a0
  0x00007f7748f803fb:   vmovdqu 0x46b5f7d(%rip),%ymm7        # 0x00007f774d636380
  0x00007f7748f80403:   mov    %rsi,%r9
  0x00007f7748f80406:   mov    %edx,%r10d
  0x00007f7748f80409:   mov    %edi,%r8d
  0x00007f7748f8040c:   shr    $0x10,%r8d
  0x00007f7748f80410:   and    $0xffff,%edi
  0x00007f7748f80416:   cmp    $0x20,%r10d
  0x00007f7748f8041a:   jb     0x00007f7748f8050f
  0x00007f7748f80420:   vmovd  %edi,%xmm0
  0x00007f7748f80424:   mov    $0x15b0,%r11d
  0x00007f7748f8042a:   cmp    %r10d,%r11d
  0x00007f7748f8042d:   cmova  %r10d,%r11d
  0x00007f7748f80431:   lea    -0xf(%r11,%r9,1),%r13
  0x00007f7748f80436:   cmp    %r13,%r9
  0x00007f7748f80439:   jae    0x00007f7748f8046c
  0x00007f7748f8043f:   nop
  0x00007f7748f80440:   vpxor  %ymm1,%ymm1,%ymm1
  0x00007f7748f80444:   vbroadcastf128 (%r9),%ymm4
  0x00007f7748f80449:   add    $0x10,%r9
  0x00007f7748f8044d:   vpshufb %ymm6,%ymm4,%ymm2
  0x00007f7748f80452:   vpaddd %ymm2,%ymm0,%ymm0
  0x00007f7748f80456:   vpaddd %ymm0,%ymm1,%ymm1
  0x00007f7748f8045a:   vpshufb %ymm7,%ymm4,%ymm3
  0x00007f7748f8045f:   vpaddd %ymm3,%ymm0,%ymm0
  0x00007f7748f80463:   vpaddd %ymm0,%ymm1,%ymm1
  0x00007f7748f80467:   cmp    %r13,%r9
  0x00007f7748f8046a:   jb     0x00007f7748f80444
  0x00007f7748f8046c:   vpslld $0x3,%ymm1,%ymm1
  0x00007f7748f80471:   vpmulld 0x46b5f46(%rip),%ymm0,%ymm4        # 0x00007f774d6363c0
  0x00007f7748f8047a:   vextracti128 $0x1,%ymm0,%xmm2
  0x00007f7748f80480:   vextracti128 $0x1,%ymm1,%xmm3
  0x00007f7748f80486:   vextracti128 $0x1,%ymm4,%xmm5
  0x00007f7748f8048c:   vpaddd %xmm2,%xmm0,%xmm0
  0x00007f7748f80490:   vpaddd %xmm3,%xmm1,%xmm1
  0x00007f7748f80494:   vpaddd %xmm5,%xmm4,%xmm4
  0x00007f7748f80498:   vphaddd %xmm0,%xmm0,%xmm0
  0x00007f7748f8049d:   vphaddd %xmm1,%xmm1,%xmm1
  0x00007f7748f804a2:   vphaddd %xmm4,%xmm4,%xmm4
  0x00007f7748f804a7:   vphaddd %xmm0,%xmm0,%xmm0
  0x00007f7748f804ac:   vphaddd %xmm1,%xmm1,%xmm1
  0x00007f7748f804b1:   vphaddd %xmm4,%xmm4,%xmm4
  0x00007f7748f804b6:   vpsubd %xmm4,%xmm1,%xmm1
  0x00007f7748f804ba:   add    $0xf,%r13
  0x00007f7748f804be:   test   $0xf,%r11b
  0x00007f7748f804c2:   jne    0x00007f7748f80524
  0x00007f7748f804c8:   sub    %r11d,%r10d
  0x00007f7748f804cb:   vmovd  %xmm0,%eax
  0x00007f7748f804cf:   xor    %edx,%edx
  0x00007f7748f804d1:   mov    $0xfff1,%ecx
  0x00007f7748f804d6:   div    %ecx
  0x00007f7748f804d8:   mov    %edx,%r12d
  0x00007f7748f804db:   vmovd  %xmm1,%eax
  0x00007f7748f804df:   add    %r8d,%eax
  0x00007f7748f804e2:   xor    %edx,%edx
  0x00007f7748f804e4:   mov    $0xfff1,%ecx
  0x00007f7748f804e9:   div    %ecx
  0x00007f7748f804eb:   mov    %edx,%r8d
  0x00007f7748f804ee:   test   %r10d,%r10d
  0x00007f7748f804f1:   je     0x00007f7748f80501
  0x00007f7748f804f7:   vmovd  %r12d,%xmm0
  0x00007f7748f804fc:   jmpq   0x00007f7748f80424
  0x00007f7748f80501:   mov    %r8d,%eax
  0x00007f7748f80504:   shl    $0x10,%eax
  0x00007f7748f80507:   or     %r12d,%eax
  0x00007f7748f8050a:   jmpq   0x00007f7748f80576
  0x00007f7748f8050f:   mov    %edi,%r12d
  0x00007f7748f80512:   lea    (%r9,%r10,1),%r13
  0x00007f7748f80516:   test   %r10d,%r10d
  0x00007f7748f80519:   jne    0x00007f7748f80540
  0x00007f7748f8051f:   jmpq   0x00007f7748f80553
  0x00007f7748f80524:   vmovd  %xmm0,%r12d
  0x00007f7748f80529:   vmovd  %xmm1,%eax
  0x00007f7748f8052d:   add    %eax,%r8d
  0x00007f7748f80530:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748f8053b:   data16 data16 xchg %ax,%ax
  0x00007f7748f8053f:   nop
  0x00007f7748f80540:   movzbl (%r9),%eax
  0x00007f7748f80544:   add    %eax,%r12d
  0x00007f7748f80547:   add    $0x1,%r9
  0x00007f7748f8054b:   add    %r12d,%r8d
  0x00007f7748f8054e:   cmp    %r13,%r9
  0x00007f7748f80551:   jb     0x00007f7748f80540
  0x00007f7748f80553:   mov    %r12d,%eax
  0x00007f7748f80556:   xor    %edx,%edx
  0x00007f7748f80558:   mov    $0xfff1,%ecx
  0x00007f7748f8055d:   div    %ecx
  0x00007f7748f8055f:   mov    %edx,%r12d
  0x00007f7748f80562:   mov    %r8d,%eax
  0x00007f7748f80565:   xor    %edx,%edx
  0x00007f7748f80567:   mov    $0xfff1,%ecx
  0x00007f7748f8056c:   div    %ecx
  0x00007f7748f8056e:   shl    $0x10,%edx
  0x00007f7748f80571:   or     %r12d,%edx
  0x00007f7748f80574:   mov    %edx,%eax
  0x00007f7748f80576:   vmovq  %xmm10,%r14
  0x00007f7748f8057b:   vmovq  %xmm9,%r13
  0x00007f7748f80580:   vmovq  %xmm8,%r12
  0x00007f7748f80585:   leaveq 
  0x00007f7748f80586:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmSin [0x00007f7748f80587, 0x00007f7748f80c16] (1679 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f80587:   push   %rbp
  0x00007f7748f80588:   mov    %rsp,%rbp
  0x00007f7748f8058b:   push   %rbx
  0x00007f7748f8058c:   sub    $0x10,%rsp
  0x00007f7748f80590:   vmovsd %xmm0,0x8(%rsp)
  0x00007f7748f80596:   mov    0xc(%rsp),%eax
  0x00007f7748f8059a:   vmovq  0x46b6aae(%rip),%xmm1        # 0x00007f774d637050
  0x00007f7748f805a2:   vmovq  0x46b6b06(%rip),%xmm2        # 0x00007f774d6370b0
  0x00007f7748f805aa:   and    $0x7fff0000,%eax
  0x00007f7748f805af:   sub    $0x30300000,%eax
  0x00007f7748f805b4:   cmp    $0x10c50000,%eax
  0x00007f7748f805b9:   ja     0x00007f7748f80709
  0x00007f7748f805bf:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f7748f805c3:   vmovdqu 0x46b6b15(%rip),%xmm5        # 0x00007f774d6370e0
  0x00007f7748f805cb:   vmovq  0x46b6afd(%rip),%xmm4        # 0x00007f774d6370d0
  0x00007f7748f805d3:   vpand  %xmm0,%xmm4,%xmm4
  0x00007f7748f805d7:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f7748f805db:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f7748f805df:   vcvttsd2si %xmm1,%edx
  0x00007f7748f805e3:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007f7748f805e7:   vmovdqu 0x46b6a41(%rip),%xmm6        # 0x00007f774d637030
  0x00007f7748f805ef:   movabs $0x3fb921fb54400000,%r8
  0x00007f7748f805f9:   vmovq  %r8,%xmm3
  0x00007f7748f805fe:   vmovdqu 0x46b6a6a(%rip),%xmm5        # 0x00007f774d637070
  0x00007f7748f80606:   vpshufd $0x44,%xmm0,%xmm4
  0x00007f7748f8060b:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f7748f8060f:   vmovddup %xmm1,%xmm1
  0x00007f7748f80613:   and    $0x3f,%edx
  0x00007f7748f80616:   shl    $0x5,%edx
  0x00007f7748f80619:   movabs $0x7f774d636780,%rax
  0x00007f7748f80623:   add    %rdx,%rax
  0x00007f7748f80626:   vmulpd %xmm1,%xmm6,%xmm6
  0x00007f7748f8062a:   vmulsd 0x46b69f6(%rip),%xmm1,%xmm1        # 0x00007f774d637028
  0x00007f7748f80632:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f7748f80636:   vmovq  0x8(%rax),%xmm7
  0x00007f7748f8063b:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007f7748f8063f:   vmovddup %xmm4,%xmm3
  0x00007f7748f80643:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007f7748f80647:   vpshufd $0x44,%xmm0,%xmm0
  0x00007f7748f8064c:   vmovdqu (%rax),%xmm2
  0x00007f7748f80650:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f80654:   vsubpd %xmm6,%xmm0,%xmm0
  0x00007f7748f80658:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007f7748f8065c:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f7748f80660:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f80664:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f80668:   vsubsd %xmm6,%xmm3,%xmm3
  0x00007f7748f8066c:   vmovdqu 0x46b6a1c(%rip),%xmm6        # 0x00007f774d637090
  0x00007f7748f80674:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007f7748f80678:   vmovq  0x18(%rax),%xmm3
  0x00007f7748f8067d:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f7748f80681:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f7748f80685:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f7748f80689:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007f7748f8068d:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007f7748f80691:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007f7748f80695:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f80699:   vaddpd 0x46b69df(%rip),%xmm5,%xmm5        # 0x00007f774d637080
  0x00007f7748f806a1:   vmulsd (%rax),%xmm4,%xmm4
  0x00007f7748f806a5:   vaddpd 0x46b69f3(%rip),%xmm6,%xmm6        # 0x00007f774d6370a0
  0x00007f7748f806ad:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f806b1:   vmovdqu %xmm3,%xmm0
  0x00007f7748f806b5:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007f7748f806ba:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007f7748f806be:   vmovdqu %xmm4,%xmm7
  0x00007f7748f806c2:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007f7748f806c6:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007f7748f806ca:   vmovq  0x8(%rax),%xmm5
  0x00007f7748f806cf:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007f7748f806d3:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f7748f806d7:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007f7748f806dc:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f7748f806e0:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f7748f806e4:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007f7748f806e8:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f7748f806ec:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f7748f806f0:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f7748f806f4:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007f7748f806f8:   vmovdqu %xmm4,%xmm0
  0x00007f7748f806fc:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f7748f80700:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f7748f80704:   jmpq   0x00007f7748f80c0f
  0x00007f7748f80709:   jg     0x00007f7748f80747
  0x00007f7748f8070f:   shr    $0x14,%eax
  0x00007f7748f80712:   cmp    $0xcfd,%eax
  0x00007f7748f80717:   jne    0x00007f7748f8072a
  0x00007f7748f8071d:   vmulsd 0x46bb23b(%rip),%xmm0,%xmm0        # 0x00007f774d63b960
  0x00007f7748f80725:   jmpq   0x00007f7748f80c0f
  0x00007f7748f8072a:   vmovq  0x46b6996(%rip),%xmm3        # 0x00007f774d6370c8
  0x00007f7748f80732:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007f7748f80736:   vsubsd %xmm0,%xmm3,%xmm3
  0x00007f7748f8073a:   vmulsd 0x46b697e(%rip),%xmm3,%xmm3        # 0x00007f774d6370c0
  0x00007f7748f80742:   jmpq   0x00007f7748f80c0f
  0x00007f7748f80747:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f8074c:   and    $0x7ff0,%eax
  0x00007f7748f80751:   cmp    $0x7ff0,%eax
  0x00007f7748f80756:   je     0x00007f7748f80bfc
  0x00007f7748f8075c:   vpextrw $0x3,%xmm0,%ecx
  0x00007f7748f80761:   and    $0x7ff0,%ecx
  0x00007f7748f80767:   sub    $0x3f60,%ecx
  0x00007f7748f8076d:   shr    $0x7,%ecx
  0x00007f7748f80770:   and    $0xfffc,%ecx
  0x00007f7748f80776:   movabs $0x7f774d636f80,%r11
  0x00007f7748f80780:   add    %r11,%rcx
  0x00007f7748f80783:   vmovq  %xmm0,%rax
  0x00007f7748f80788:   mov    0x14(%rcx),%r10d
  0x00007f7748f8078c:   mov    0x18(%rcx),%r8d
  0x00007f7748f80790:   mov    %eax,%edx
  0x00007f7748f80792:   shr    $0x15,%rax
  0x00007f7748f80796:   or     $0x80000000,%eax
  0x00007f7748f8079b:   shr    $0xb,%eax
  0x00007f7748f8079e:   mov    %r10d,%r9d
  0x00007f7748f807a1:   imul   %rdx,%r10
  0x00007f7748f807a5:   imul   %rax,%r9
  0x00007f7748f807a9:   imul   %rax,%r8
  0x00007f7748f807ad:   mov    0x10(%rcx),%esi
  0x00007f7748f807b0:   mov    0xc(%rcx),%edi
  0x00007f7748f807b3:   mov    %r10d,%r11d
  0x00007f7748f807b6:   shr    $0x20,%r10
  0x00007f7748f807ba:   add    %r10,%r9
  0x00007f7748f807bd:   add    %r8,%r11
  0x00007f7748f807c0:   mov    %r11d,%r8d
  0x00007f7748f807c3:   shr    $0x20,%r11
  0x00007f7748f807c7:   add    %r11,%r9
  0x00007f7748f807ca:   mov    %esi,%r10d
  0x00007f7748f807cd:   imul   %rdx,%rsi
  0x00007f7748f807d1:   imul   %rax,%r10
  0x00007f7748f807d5:   mov    %edi,%r11d
  0x00007f7748f807d8:   imul   %rdx,%rdi
  0x00007f7748f807dc:   mov    %esi,%ebx
  0x00007f7748f807de:   shr    $0x20,%rsi
  0x00007f7748f807e2:   add    %rbx,%r9
  0x00007f7748f807e5:   mov    %r9d,%ebx
  0x00007f7748f807e8:   shr    $0x20,%r9
  0x00007f7748f807ec:   add    %rsi,%r10
  0x00007f7748f807ef:   add    %r9,%r10
  0x00007f7748f807f2:   shl    $0x20,%rbx
  0x00007f7748f807f6:   or     %rbx,%r8
  0x00007f7748f807f9:   imul   %rax,%r11
  0x00007f7748f807fd:   mov    0x8(%rcx),%r9d
  0x00007f7748f80801:   mov    0x4(%rcx),%esi
  0x00007f7748f80804:   mov    %edi,%ebx
  0x00007f7748f80806:   shr    $0x20,%rdi
  0x00007f7748f8080a:   add    %rbx,%r10
  0x00007f7748f8080d:   mov    %r10d,%ebx
  0x00007f7748f80810:   shr    $0x20,%r10
  0x00007f7748f80814:   add    %rdi,%r11
  0x00007f7748f80817:   add    %r10,%r11
  0x00007f7748f8081a:   mov    %r9,%rdi
  0x00007f7748f8081d:   imul   %rdx,%r9
  0x00007f7748f80821:   imul   %rax,%rdi
  0x00007f7748f80825:   mov    %r9d,%r10d
  0x00007f7748f80828:   shr    $0x20,%r9
  0x00007f7748f8082c:   add    %r10,%r11
  0x00007f7748f8082f:   mov    %r11d,%r10d
  0x00007f7748f80832:   shr    $0x20,%r11
  0x00007f7748f80836:   add    %r9,%rdi
  0x00007f7748f80839:   add    %r11,%rdi
  0x00007f7748f8083c:   mov    %rsi,%r9
  0x00007f7748f8083f:   imul   %rdx,%rsi
  0x00007f7748f80843:   imul   %rax,%r9
  0x00007f7748f80847:   shl    $0x20,%r10
  0x00007f7748f8084b:   or     %rbx,%r10
  0x00007f7748f8084e:   mov    (%rcx),%eax
  0x00007f7748f80850:   mov    %esi,%r11d
  0x00007f7748f80853:   shr    $0x20,%rsi
  0x00007f7748f80857:   add    %r11,%rdi
  0x00007f7748f8085a:   mov    %edi,%r11d
  0x00007f7748f8085d:   shr    $0x20,%rdi
  0x00007f7748f80861:   add    %rsi,%r9
  0x00007f7748f80864:   add    %rdi,%r9
  0x00007f7748f80867:   imul   %rax,%rdx
  0x00007f7748f8086b:   vpextrw $0x3,%xmm0,%ebx
  0x00007f7748f80870:   movabs $0x7f774d636f80,%rdi
  0x00007f7748f8087a:   sub    %rdi,%rcx
  0x00007f7748f8087d:   add    %ecx,%ecx
  0x00007f7748f8087f:   add    %ecx,%ecx
  0x00007f7748f80881:   add    %ecx,%ecx
  0x00007f7748f80883:   add    $0x13,%ecx
  0x00007f7748f80886:   mov    $0x8000,%esi
  0x00007f7748f8088b:   and    %ebx,%esi
  0x00007f7748f8088d:   shr    $0x4,%ebx
  0x00007f7748f80890:   and    $0x7ff,%ebx
  0x00007f7748f80896:   sub    $0x3ff,%ebx
  0x00007f7748f8089c:   sub    %ebx,%ecx
  0x00007f7748f8089e:   add    %rdx,%r9
  0x00007f7748f808a1:   mov    %ecx,%edx
  0x00007f7748f808a3:   add    $0x20,%edx
  0x00007f7748f808a6:   cmp    $0x1,%ecx
  0x00007f7748f808a9:   jl     0x00007f7748f80b4c
  0x00007f7748f808af:   neg    %ecx
  0x00007f7748f808b1:   add    $0x1d,%ecx
  0x00007f7748f808b4:   shl    %cl,%r9d
  0x00007f7748f808b7:   mov    %r9d,%edi
  0x00007f7748f808ba:   and    $0x1fffffff,%r9d
  0x00007f7748f808c1:   test   $0x10000000,%r9d
  0x00007f7748f808c8:   jne    0x00007f7748f80b79
  0x00007f7748f808ce:   shr    %cl,%r9d
  0x00007f7748f808d1:   mov    $0x0,%ebx
  0x00007f7748f808d6:   shl    $0x20,%r9
  0x00007f7748f808da:   or     %r11,%r9
  0x00007f7748f808dd:   cmp    $0x0,%r9
  0x00007f7748f808e1:   je     0x00007f7748f80af0
  0x00007f7748f808e7:   bsr    %r9,%r11
  0x00007f7748f808eb:   mov    $0x1d,%ecx
  0x00007f7748f808f0:   sub    %r11d,%ecx
  0x00007f7748f808f3:   jle    0x00007f7748f80b29
  0x00007f7748f808f9:   shl    %cl,%r9
  0x00007f7748f808fc:   mov    %r10,%rax
  0x00007f7748f808ff:   shl    %cl,%r10
  0x00007f7748f80902:   add    %ecx,%edx
  0x00007f7748f80904:   neg    %ecx
  0x00007f7748f80906:   add    $0x40,%ecx
  0x00007f7748f80909:   shr    %cl,%rax
  0x00007f7748f8090c:   shr    %cl,%r8
  0x00007f7748f8090f:   or     %rax,%r9
  0x00007f7748f80912:   or     %r8,%r10
  0x00007f7748f80915:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007f7748f8091a:   shr    %r10
  0x00007f7748f8091d:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007f7748f80922:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007f7748f80926:   shl    $0x4,%edx
  0x00007f7748f80929:   neg    %edx
  0x00007f7748f8092b:   add    $0x3ff0,%edx
  0x00007f7748f80931:   or     %esi,%edx
  0x00007f7748f80933:   xor    %ebx,%edx
  0x00007f7748f80935:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007f7748f8093a:   vmovq  0x46b6716(%rip),%xmm2        # 0x00007f774d637058
  0x00007f7748f80942:   vmovq  0x46b6716(%rip),%xmm6        # 0x00007f774d637060
  0x00007f7748f8094a:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007f7748f8094e:   sub    $0x3f0,%edx
  0x00007f7748f80954:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007f7748f80959:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f7748f8095d:   shl    $0x10,%esi
  0x00007f7748f80960:   sar    $0x1f,%esi
  0x00007f7748f80963:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f7748f80967:   vmovdqu %xmm0,%xmm1
  0x00007f7748f8096b:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007f7748f8096f:   shr    $0x1d,%edi
  0x00007f7748f80972:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f7748f80976:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007f7748f8097a:   add    %esi,%edi
  0x00007f7748f8097c:   xor    %esi,%edi
  0x00007f7748f8097e:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007f7748f80982:   mov    %edi,%eax
  0x00007f7748f80984:   vaddsd %xmm3,%xmm6,%xmm6
  0x00007f7748f80988:   vmovdqu %xmm0,%xmm2
  0x00007f7748f8098c:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f7748f80990:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007f7748f80994:   vaddsd %xmm2,%xmm6,%xmm6
  0x00007f7748f80998:   vmovq  0x46b66b0(%rip),%xmm1        # 0x00007f774d637050
  0x00007f7748f809a0:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f7748f809a4:   vmovq  0x46b6734(%rip),%xmm5        # 0x00007f774d6370e0
  0x00007f7748f809ac:   vmovq  0x46b671c(%rip),%xmm4        # 0x00007f774d6370d0
  0x00007f7748f809b4:   vpand  %xmm0,%xmm4,%xmm4
  0x00007f7748f809b8:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f7748f809bc:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f7748f809c0:   vcvttsd2si %xmm1,%edx
  0x00007f7748f809c4:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007f7748f809c8:   vmovq  0x46b6670(%rip),%xmm3        # 0x00007f774d637040
  0x00007f7748f809d0:   vmovdqu 0x46b6658(%rip),%xmm2        # 0x00007f774d637030
  0x00007f7748f809d8:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f7748f809dc:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007f7748f809e0:   shl    $0x3,%eax
  0x00007f7748f809e3:   add    $0x1c7600,%edx
  0x00007f7748f809e9:   vmovdqu %xmm0,%xmm4
  0x00007f7748f809ed:   add    %eax,%edx
  0x00007f7748f809ef:   and    $0x3f,%edx
  0x00007f7748f809f2:   vmovdqu 0x46b6676(%rip),%xmm5        # 0x00007f774d637070
  0x00007f7748f809fa:   movabs $0x7f774d636780,%rax
  0x00007f7748f80a04:   shl    $0x5,%edx
  0x00007f7748f80a07:   add    %rdx,%rax
  0x00007f7748f80a0a:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007f7748f80a0e:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007f7748f80a12:   vmulsd 0x46b660e(%rip),%xmm1,%xmm1        # 0x00007f774d637028
  0x00007f7748f80a1a:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f7748f80a1e:   vmovq  0x8(%rax),%xmm7
  0x00007f7748f80a23:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f7748f80a27:   vmovdqu %xmm4,%xmm3
  0x00007f7748f80a2b:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f7748f80a2f:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f80a33:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007f7748f80a37:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007f7748f80a3b:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f7748f80a3f:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f80a43:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f80a47:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f7748f80a4b:   vmovdqu (%rax),%xmm2
  0x00007f7748f80a4f:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007f7748f80a53:   vmovq  0x18(%rax),%xmm3
  0x00007f7748f80a58:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f7748f80a5c:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f7748f80a60:   vsubsd %xmm6,%xmm1,%xmm1
  0x00007f7748f80a64:   vmovdqu 0x46b6624(%rip),%xmm6        # 0x00007f774d637090
  0x00007f7748f80a6c:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f7748f80a70:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007f7748f80a74:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007f7748f80a78:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007f7748f80a7c:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f80a80:   vaddpd 0x46b65f8(%rip),%xmm5,%xmm5        # 0x00007f774d637080
  0x00007f7748f80a88:   vmulsd (%rax),%xmm4,%xmm4
  0x00007f7748f80a8c:   vaddpd 0x46b660c(%rip),%xmm6,%xmm6        # 0x00007f774d6370a0
  0x00007f7748f80a94:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f80a98:   vmovdqu %xmm3,%xmm0
  0x00007f7748f80a9c:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007f7748f80aa1:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007f7748f80aa5:   vmovdqu %xmm4,%xmm7
  0x00007f7748f80aa9:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007f7748f80aad:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007f7748f80ab1:   vmovq  0x8(%rax),%xmm5
  0x00007f7748f80ab6:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007f7748f80aba:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f7748f80abe:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007f7748f80ac3:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f7748f80ac7:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f7748f80acb:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007f7748f80acf:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f7748f80ad3:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f7748f80ad7:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f7748f80adb:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007f7748f80adf:   vmovdqu %xmm4,%xmm0
  0x00007f7748f80ae3:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f7748f80ae7:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f7748f80aeb:   jmpq   0x00007f7748f80c0f
  0x00007f7748f80af0:   add    $0x40,%edx
  0x00007f7748f80af3:   mov    %r10,%r9
  0x00007f7748f80af6:   mov    %r8,%r10
  0x00007f7748f80af9:   mov    $0x0,%r8d
  0x00007f7748f80aff:   cmp    $0x0,%r9
  0x00007f7748f80b03:   jne    0x00007f7748f808e7
  0x00007f7748f80b09:   add    $0x40,%edx
  0x00007f7748f80b0c:   mov    %r10,%r9
  0x00007f7748f80b0f:   mov    %r8,%r10
  0x00007f7748f80b12:   cmp    $0x0,%r9
  0x00007f7748f80b16:   jne    0x00007f7748f808e7
  0x00007f7748f80b1c:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f80b20:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f7748f80b24:   jmpq   0x00007f7748f80998
  0x00007f7748f80b29:   je     0x00007f7748f80915
  0x00007f7748f80b2f:   neg    %ecx
  0x00007f7748f80b31:   shr    %cl,%r10
  0x00007f7748f80b34:   mov    %r9,%rax
  0x00007f7748f80b37:   shr    %cl,%r9
  0x00007f7748f80b3a:   sub    %ecx,%edx
  0x00007f7748f80b3c:   neg    %ecx
  0x00007f7748f80b3e:   add    $0x40,%ecx
  0x00007f7748f80b41:   shl    %cl,%rax
  0x00007f7748f80b44:   or     %rax,%r10
  0x00007f7748f80b47:   jmpq   0x00007f7748f80915
  0x00007f7748f80b4c:   neg    %ecx
  0x00007f7748f80b4e:   shl    $0x20,%r9
  0x00007f7748f80b52:   or     %r11,%r9
  0x00007f7748f80b55:   shl    %cl,%r9
  0x00007f7748f80b58:   mov    %r9,%rdi
  0x00007f7748f80b5b:   test   $0x80000000,%r9d
  0x00007f7748f80b62:   jne    0x00007f7748f80bbb
  0x00007f7748f80b68:   shr    %cl,%r9d
  0x00007f7748f80b6b:   mov    $0x0,%ebx
  0x00007f7748f80b70:   shr    $0x3,%rdi
  0x00007f7748f80b74:   jmpq   0x00007f7748f808dd
  0x00007f7748f80b79:   shr    %cl,%r9d
  0x00007f7748f80b7c:   mov    $0x20000000,%ebx
  0x00007f7748f80b81:   shr    %cl,%ebx
  0x00007f7748f80b83:   shl    $0x20,%r9
  0x00007f7748f80b87:   or     %r11,%r9
  0x00007f7748f80b8a:   shl    $0x20,%rbx
  0x00007f7748f80b8e:   add    $0x20000000,%edi
  0x00007f7748f80b94:   mov    $0x0,%ecx
  0x00007f7748f80b99:   mov    $0x0,%r11d
  0x00007f7748f80b9f:   sub    %r8,%rcx
  0x00007f7748f80ba2:   sbb    %r10,%r11
  0x00007f7748f80ba5:   sbb    %r9,%rbx
  0x00007f7748f80ba8:   mov    %rcx,%r8
  0x00007f7748f80bab:   mov    %r11,%r10
  0x00007f7748f80bae:   mov    %rbx,%r9
  0x00007f7748f80bb1:   mov    $0x8000,%ebx
  0x00007f7748f80bb6:   jmpq   0x00007f7748f808dd
  0x00007f7748f80bbb:   shr    %cl,%r9d
  0x00007f7748f80bbe:   movabs $0x100000000,%rbx
  0x00007f7748f80bc8:   shr    %cl,%rbx
  0x00007f7748f80bcb:   mov    $0x0,%ecx
  0x00007f7748f80bd0:   mov    $0x0,%r11d
  0x00007f7748f80bd6:   sub    %r8,%rcx
  0x00007f7748f80bd9:   sbb    %r10,%r11
  0x00007f7748f80bdc:   sbb    %r9,%rbx
  0x00007f7748f80bdf:   mov    %rcx,%r8
  0x00007f7748f80be2:   mov    %r11,%r10
  0x00007f7748f80be5:   mov    %rbx,%r9
  0x00007f7748f80be8:   mov    $0x8000,%ebx
  0x00007f7748f80bed:   shr    $0x3,%rdi
  0x00007f7748f80bf1:   add    $0x20000000,%edi
  0x00007f7748f80bf7:   jmpq   0x00007f7748f808dd
  0x00007f7748f80bfc:   vmovq  0x8(%rsp),%xmm0
  0x00007f7748f80c02:   vmulsd 0x46b643e(%rip),%xmm0,%xmm0        # 0x00007f774d637048
  0x00007f7748f80c0a:   vmovq  %xmm0,(%rsp)
  0x00007f7748f80c0f:   add    $0x10,%rsp
  0x00007f7748f80c13:   pop    %rbx
  0x00007f7748f80c14:   leaveq 
  0x00007f7748f80c15:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmCos [0x00007f7748f80c16, 0x00007f7748f81287] (1649 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f80c16:   push   %rbp
  0x00007f7748f80c17:   mov    %rsp,%rbp
  0x00007f7748f80c1a:   push   %rbx
  0x00007f7748f80c1b:   sub    $0x10,%rsp
  0x00007f7748f80c1f:   vmovsd %xmm0,0x8(%rsp)
  0x00007f7748f80c25:   mov    0xc(%rsp),%eax
  0x00007f7748f80c29:   vmovq  0x46b641f(%rip),%xmm1        # 0x00007f774d637050
  0x00007f7748f80c31:   and    $0x7fff0000,%eax
  0x00007f7748f80c36:   sub    $0x30300000,%eax
  0x00007f7748f80c3b:   cmp    $0x10c50000,%eax
  0x00007f7748f80c40:   ja     0x00007f7748f80d8c
  0x00007f7748f80c46:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f7748f80c4a:   vmovdqu 0x46b648e(%rip),%xmm5        # 0x00007f774d6370e0
  0x00007f7748f80c52:   vmovq  0x46b6476(%rip),%xmm4        # 0x00007f774d6370d0
  0x00007f7748f80c5a:   vpand  %xmm0,%xmm4,%xmm4
  0x00007f7748f80c5e:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f7748f80c62:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f7748f80c66:   vcvttsd2si %xmm1,%edx
  0x00007f7748f80c6a:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007f7748f80c6e:   vmovdqu 0x46b63ba(%rip),%xmm2        # 0x00007f774d637030
  0x00007f7748f80c76:   vmovq  0x46b63c2(%rip),%xmm3        # 0x00007f774d637040
  0x00007f7748f80c7e:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f7748f80c82:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007f7748f80c86:   add    $0x1c7610,%rdx
  0x00007f7748f80c8d:   vmovdqu %xmm0,%xmm4
  0x00007f7748f80c91:   and    $0x3f,%rdx
  0x00007f7748f80c95:   vmovdqu 0x46b63d3(%rip),%xmm5        # 0x00007f774d637070
  0x00007f7748f80c9d:   movabs $0x7f774d636780,%rax
  0x00007f7748f80ca7:   shl    $0x5,%rdx
  0x00007f7748f80cab:   add    %rdx,%rax
  0x00007f7748f80cae:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007f7748f80cb2:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007f7748f80cb6:   vmulsd 0x46b636a(%rip),%xmm1,%xmm1        # 0x00007f774d637028
  0x00007f7748f80cbe:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f7748f80cc2:   vmovq  0x8(%rax),%xmm7
  0x00007f7748f80cc7:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f7748f80ccb:   vmovdqu %xmm4,%xmm3
  0x00007f7748f80ccf:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f7748f80cd3:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f80cd7:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007f7748f80cdb:   vmovdqu 0x46b63ad(%rip),%xmm6        # 0x00007f774d637090
  0x00007f7748f80ce3:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007f7748f80ce7:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f7748f80ceb:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f80cef:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f80cf3:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f7748f80cf7:   vmovdqu (%rax),%xmm2
  0x00007f7748f80cfb:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007f7748f80cff:   vmovq  0x18(%rax),%xmm3
  0x00007f7748f80d04:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f7748f80d08:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f7748f80d0c:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f7748f80d10:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007f7748f80d14:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007f7748f80d18:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007f7748f80d1c:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f80d20:   vaddpd 0x46b6358(%rip),%xmm5,%xmm5        # 0x00007f774d637080
  0x00007f7748f80d28:   vmulsd (%rax),%xmm4,%xmm4
  0x00007f7748f80d2c:   vaddpd 0x46b636c(%rip),%xmm6,%xmm6        # 0x00007f774d6370a0
  0x00007f7748f80d34:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f80d38:   vmovdqu %xmm3,%xmm0
  0x00007f7748f80d3c:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007f7748f80d41:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007f7748f80d45:   vmovdqu %xmm4,%xmm7
  0x00007f7748f80d49:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007f7748f80d4d:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007f7748f80d51:   vmovq  0x8(%rax),%xmm5
  0x00007f7748f80d56:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007f7748f80d5a:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f7748f80d5e:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007f7748f80d63:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f7748f80d67:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f7748f80d6b:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007f7748f80d6f:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f7748f80d73:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f7748f80d77:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f7748f80d7b:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007f7748f80d7f:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f7748f80d83:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f7748f80d87:   jmpq   0x00007f7748f81280
  0x00007f7748f80d8c:   jg     0x00007f7748f80db6
  0x00007f7748f80d92:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f80d97:   and    $0x7fff,%eax
  0x00007f7748f80d9c:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f80da1:   vmovq  0x46b6347(%rip),%xmm1        # 0x00007f774d6370f0
  0x00007f7748f80da9:   vsubsd %xmm0,%xmm1,%xmm1
  0x00007f7748f80dad:   vmovdqu %xmm1,%xmm0
  0x00007f7748f80db1:   jmpq   0x00007f7748f81280
  0x00007f7748f80db6:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f80dbb:   and    $0x7ff0,%eax
  0x00007f7748f80dc0:   cmp    $0x7ff0,%eax
  0x00007f7748f80dc5:   je     0x00007f7748f8126d
  0x00007f7748f80dcb:   vpextrw $0x3,%xmm0,%ecx
  0x00007f7748f80dd0:   and    $0x7ff0,%ecx
  0x00007f7748f80dd6:   sub    $0x3f60,%ecx
  0x00007f7748f80ddc:   shr    $0x7,%ecx
  0x00007f7748f80ddf:   and    $0xfffc,%ecx
  0x00007f7748f80de5:   movabs $0x7f774d636f80,%r11
  0x00007f7748f80def:   add    %r11,%rcx
  0x00007f7748f80df2:   vmovq  %xmm0,%rax
  0x00007f7748f80df7:   mov    0x14(%rcx),%r10d
  0x00007f7748f80dfb:   mov    0x18(%rcx),%r8d
  0x00007f7748f80dff:   mov    %eax,%edx
  0x00007f7748f80e01:   shr    $0x15,%rax
  0x00007f7748f80e05:   or     $0x80000000,%eax
  0x00007f7748f80e0a:   shr    $0xb,%eax
  0x00007f7748f80e0d:   mov    %r10d,%r9d
  0x00007f7748f80e10:   imul   %rdx,%r10
  0x00007f7748f80e14:   imul   %rax,%r9
  0x00007f7748f80e18:   imul   %rax,%r8
  0x00007f7748f80e1c:   mov    0x10(%rcx),%esi
  0x00007f7748f80e1f:   mov    0xc(%rcx),%edi
  0x00007f7748f80e22:   mov    %r10d,%r11d
  0x00007f7748f80e25:   shr    $0x20,%r10
  0x00007f7748f80e29:   add    %r10,%r9
  0x00007f7748f80e2c:   add    %r8,%r11
  0x00007f7748f80e2f:   mov    %r11d,%r8d
  0x00007f7748f80e32:   shr    $0x20,%r11
  0x00007f7748f80e36:   add    %r11,%r9
  0x00007f7748f80e39:   mov    %esi,%r10d
  0x00007f7748f80e3c:   imul   %rdx,%rsi
  0x00007f7748f80e40:   imul   %rax,%r10
  0x00007f7748f80e44:   mov    %edi,%r11d
  0x00007f7748f80e47:   imul   %rdx,%rdi
  0x00007f7748f80e4b:   mov    %esi,%ebx
  0x00007f7748f80e4d:   shr    $0x20,%rsi
  0x00007f7748f80e51:   add    %rbx,%r9
  0x00007f7748f80e54:   mov    %r9d,%ebx
  0x00007f7748f80e57:   shr    $0x20,%r9
  0x00007f7748f80e5b:   add    %rsi,%r10
  0x00007f7748f80e5e:   add    %r9,%r10
  0x00007f7748f80e61:   shl    $0x20,%rbx
  0x00007f7748f80e65:   or     %rbx,%r8
  0x00007f7748f80e68:   imul   %rax,%r11
  0x00007f7748f80e6c:   mov    0x8(%rcx),%r9d
  0x00007f7748f80e70:   mov    0x4(%rcx),%esi
  0x00007f7748f80e73:   mov    %edi,%ebx
  0x00007f7748f80e75:   shr    $0x20,%rdi
  0x00007f7748f80e79:   add    %rbx,%r10
  0x00007f7748f80e7c:   mov    %r10d,%ebx
  0x00007f7748f80e7f:   shr    $0x20,%r10
  0x00007f7748f80e83:   add    %rdi,%r11
  0x00007f7748f80e86:   add    %r10,%r11
  0x00007f7748f80e89:   mov    %r9,%rdi
  0x00007f7748f80e8c:   imul   %rdx,%r9
  0x00007f7748f80e90:   imul   %rax,%rdi
  0x00007f7748f80e94:   mov    %r9d,%r10d
  0x00007f7748f80e97:   shr    $0x20,%r9
  0x00007f7748f80e9b:   add    %r10,%r11
  0x00007f7748f80e9e:   mov    %r11d,%r10d
  0x00007f7748f80ea1:   shr    $0x20,%r11
  0x00007f7748f80ea5:   add    %r9,%rdi
  0x00007f7748f80ea8:   add    %r11,%rdi
  0x00007f7748f80eab:   mov    %rsi,%r9
  0x00007f7748f80eae:   imul   %rdx,%rsi
  0x00007f7748f80eb2:   imul   %rax,%r9
  0x00007f7748f80eb6:   shl    $0x20,%r10
  0x00007f7748f80eba:   or     %rbx,%r10
  0x00007f7748f80ebd:   mov    (%rcx),%eax
  0x00007f7748f80ebf:   mov    %esi,%r11d
  0x00007f7748f80ec2:   shr    $0x20,%rsi
  0x00007f7748f80ec6:   add    %r11,%rdi
  0x00007f7748f80ec9:   mov    %edi,%r11d
  0x00007f7748f80ecc:   shr    $0x20,%rdi
  0x00007f7748f80ed0:   add    %rsi,%r9
  0x00007f7748f80ed3:   add    %rdi,%r9
  0x00007f7748f80ed6:   imul   %rax,%rdx
  0x00007f7748f80eda:   vpextrw $0x3,%xmm0,%ebx
  0x00007f7748f80edf:   movabs $0x7f774d636f80,%rdi
  0x00007f7748f80ee9:   sub    %rdi,%rcx
  0x00007f7748f80eec:   add    %ecx,%ecx
  0x00007f7748f80eee:   add    %ecx,%ecx
  0x00007f7748f80ef0:   add    %ecx,%ecx
  0x00007f7748f80ef2:   add    $0x13,%ecx
  0x00007f7748f80ef5:   mov    $0x8000,%esi
  0x00007f7748f80efa:   and    %ebx,%esi
  0x00007f7748f80efc:   shr    $0x4,%ebx
  0x00007f7748f80eff:   and    $0x7ff,%ebx
  0x00007f7748f80f05:   sub    $0x3ff,%ebx
  0x00007f7748f80f0b:   sub    %ebx,%ecx
  0x00007f7748f80f0d:   add    %rdx,%r9
  0x00007f7748f80f10:   mov    %ecx,%edx
  0x00007f7748f80f12:   add    $0x20,%edx
  0x00007f7748f80f15:   cmp    $0x1,%ecx
  0x00007f7748f80f18:   jl     0x00007f7748f811bd
  0x00007f7748f80f1e:   neg    %ecx
  0x00007f7748f80f20:   add    $0x1d,%ecx
  0x00007f7748f80f23:   shl    %cl,%r9d
  0x00007f7748f80f26:   mov    %r9d,%edi
  0x00007f7748f80f29:   and    $0x1fffffff,%r9d
  0x00007f7748f80f30:   test   $0x10000000,%r9d
  0x00007f7748f80f37:   jne    0x00007f7748f811ea
  0x00007f7748f80f3d:   shr    %cl,%r9d
  0x00007f7748f80f40:   mov    $0x0,%ebx
  0x00007f7748f80f45:   shl    $0x20,%r9
  0x00007f7748f80f49:   or     %r11,%r9
  0x00007f7748f80f4c:   cmp    $0x0,%r9
  0x00007f7748f80f50:   je     0x00007f7748f81161
  0x00007f7748f80f56:   bsr    %r9,%r11
  0x00007f7748f80f5a:   mov    $0x1d,%ecx
  0x00007f7748f80f5f:   sub    %r11d,%ecx
  0x00007f7748f80f62:   jle    0x00007f7748f8119a
  0x00007f7748f80f68:   shl    %cl,%r9
  0x00007f7748f80f6b:   mov    %r10,%rax
  0x00007f7748f80f6e:   shl    %cl,%r10
  0x00007f7748f80f71:   add    %ecx,%edx
  0x00007f7748f80f73:   neg    %ecx
  0x00007f7748f80f75:   add    $0x40,%ecx
  0x00007f7748f80f78:   shr    %cl,%rax
  0x00007f7748f80f7b:   shr    %cl,%r8
  0x00007f7748f80f7e:   or     %rax,%r9
  0x00007f7748f80f81:   or     %r8,%r10
  0x00007f7748f80f84:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007f7748f80f89:   shr    %r10
  0x00007f7748f80f8c:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007f7748f80f91:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007f7748f80f95:   shl    $0x4,%edx
  0x00007f7748f80f98:   neg    %edx
  0x00007f7748f80f9a:   add    $0x3ff0,%edx
  0x00007f7748f80fa0:   or     %esi,%edx
  0x00007f7748f80fa2:   xor    %ebx,%edx
  0x00007f7748f80fa4:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007f7748f80fa9:   vmovq  0x46b60a7(%rip),%xmm2        # 0x00007f774d637058
  0x00007f7748f80fb1:   vmovq  0x46b60a7(%rip),%xmm6        # 0x00007f774d637060
  0x00007f7748f80fb9:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007f7748f80fbd:   sub    $0x3f0,%edx
  0x00007f7748f80fc3:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007f7748f80fc8:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f7748f80fcc:   shl    $0x10,%esi
  0x00007f7748f80fcf:   sar    $0x1f,%esi
  0x00007f7748f80fd2:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f7748f80fd6:   vmovdqu %xmm0,%xmm1
  0x00007f7748f80fda:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007f7748f80fde:   shr    $0x1d,%edi
  0x00007f7748f80fe1:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f7748f80fe5:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007f7748f80fe9:   add    %esi,%edi
  0x00007f7748f80feb:   xor    %esi,%edi
  0x00007f7748f80fed:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007f7748f80ff1:   mov    %edi,%eax
  0x00007f7748f80ff3:   vaddsd %xmm3,%xmm6,%xmm6
  0x00007f7748f80ff7:   vmovdqu %xmm0,%xmm2
  0x00007f7748f80ffb:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f7748f80fff:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007f7748f81003:   vaddsd %xmm2,%xmm6,%xmm6
  0x00007f7748f81007:   vmovq  0x46b6041(%rip),%xmm1        # 0x00007f774d637050
  0x00007f7748f8100f:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f7748f81013:   vmovq  0x46b60c5(%rip),%xmm5        # 0x00007f774d6370e0
  0x00007f7748f8101b:   vmovq  0x46b60ad(%rip),%xmm4        # 0x00007f774d6370d0
  0x00007f7748f81023:   vpand  %xmm0,%xmm4,%xmm4
  0x00007f7748f81027:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f7748f8102b:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f7748f8102f:   vcvttsd2si %xmm1,%rdx
  0x00007f7748f81034:   vcvtsi2sd %rdx,%xmm1,%xmm1
  0x00007f7748f81039:   vmovq  0x46b5fff(%rip),%xmm3        # 0x00007f774d637040
  0x00007f7748f81041:   vmovdqu 0x46b5fe7(%rip),%xmm2        # 0x00007f774d637030
  0x00007f7748f81049:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f7748f8104d:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007f7748f81051:   shl    $0x3,%eax
  0x00007f7748f81054:   add    $0x1c7610,%edx
  0x00007f7748f8105a:   vmovdqu %xmm0,%xmm4
  0x00007f7748f8105e:   add    %eax,%edx
  0x00007f7748f81060:   and    $0x3f,%edx
  0x00007f7748f81063:   vmovdqu 0x46b6005(%rip),%xmm5        # 0x00007f774d637070
  0x00007f7748f8106b:   movabs $0x7f774d636780,%rax
  0x00007f7748f81075:   shl    $0x5,%edx
  0x00007f7748f81078:   add    %rdx,%rax
  0x00007f7748f8107b:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007f7748f8107f:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007f7748f81083:   vmulsd 0x46b5f9d(%rip),%xmm1,%xmm1        # 0x00007f774d637028
  0x00007f7748f8108b:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f7748f8108f:   vmovq  0x8(%rax),%xmm7
  0x00007f7748f81094:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f7748f81098:   vmovdqu %xmm4,%xmm3
  0x00007f7748f8109c:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f7748f810a0:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f810a4:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007f7748f810a8:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007f7748f810ac:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f7748f810b0:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f810b4:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f810b8:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f7748f810bc:   vmovdqu (%rax),%xmm2
  0x00007f7748f810c0:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007f7748f810c4:   vmovq  0x18(%rax),%xmm3
  0x00007f7748f810c9:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f7748f810cd:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f7748f810d1:   vsubsd %xmm6,%xmm1,%xmm1
  0x00007f7748f810d5:   vmovdqu 0x46b5fb3(%rip),%xmm6        # 0x00007f774d637090
  0x00007f7748f810dd:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f7748f810e1:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007f7748f810e5:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007f7748f810e9:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007f7748f810ed:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f810f1:   vaddpd 0x46b5f87(%rip),%xmm5,%xmm5        # 0x00007f774d637080
  0x00007f7748f810f9:   vmulsd (%rax),%xmm4,%xmm4
  0x00007f7748f810fd:   vaddpd 0x46b5f9b(%rip),%xmm6,%xmm6        # 0x00007f774d6370a0
  0x00007f7748f81105:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f81109:   vmovdqu %xmm3,%xmm0
  0x00007f7748f8110d:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007f7748f81112:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007f7748f81116:   vmovdqu %xmm4,%xmm7
  0x00007f7748f8111a:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007f7748f8111e:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007f7748f81122:   vmovq  0x8(%rax),%xmm5
  0x00007f7748f81127:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007f7748f8112b:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007f7748f8112f:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007f7748f81134:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f7748f81138:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f7748f8113c:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007f7748f81140:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f7748f81144:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f7748f81148:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f7748f8114c:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007f7748f81150:   vmovdqu %xmm4,%xmm0
  0x00007f7748f81154:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f7748f81158:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f7748f8115c:   jmpq   0x00007f7748f81280
  0x00007f7748f81161:   add    $0x40,%edx
  0x00007f7748f81164:   mov    %r10,%r9
  0x00007f7748f81167:   mov    %r8,%r10
  0x00007f7748f8116a:   mov    $0x0,%r8d
  0x00007f7748f81170:   cmp    $0x0,%r9
  0x00007f7748f81174:   jne    0x00007f7748f80f56
  0x00007f7748f8117a:   add    $0x40,%edx
  0x00007f7748f8117d:   mov    %r10,%r9
  0x00007f7748f81180:   mov    %r8,%r10
  0x00007f7748f81183:   cmp    $0x0,%r9
  0x00007f7748f81187:   jne    0x00007f7748f80f56
  0x00007f7748f8118d:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f81191:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f7748f81195:   jmpq   0x00007f7748f81007
  0x00007f7748f8119a:   je     0x00007f7748f80f84
  0x00007f7748f811a0:   neg    %ecx
  0x00007f7748f811a2:   shr    %cl,%r10
  0x00007f7748f811a5:   mov    %r9,%rax
  0x00007f7748f811a8:   shr    %cl,%r9
  0x00007f7748f811ab:   sub    %ecx,%edx
  0x00007f7748f811ad:   neg    %ecx
  0x00007f7748f811af:   add    $0x40,%ecx
  0x00007f7748f811b2:   shl    %cl,%rax
  0x00007f7748f811b5:   or     %rax,%r10
  0x00007f7748f811b8:   jmpq   0x00007f7748f80f84
  0x00007f7748f811bd:   neg    %ecx
  0x00007f7748f811bf:   shl    $0x20,%r9
  0x00007f7748f811c3:   or     %r11,%r9
  0x00007f7748f811c6:   shl    %cl,%r9
  0x00007f7748f811c9:   mov    %r9,%rdi
  0x00007f7748f811cc:   test   $0x80000000,%r9d
  0x00007f7748f811d3:   jne    0x00007f7748f8122c
  0x00007f7748f811d9:   shr    %cl,%r9d
  0x00007f7748f811dc:   mov    $0x0,%ebx
  0x00007f7748f811e1:   shr    $0x3,%rdi
  0x00007f7748f811e5:   jmpq   0x00007f7748f80f4c
  0x00007f7748f811ea:   shr    %cl,%r9d
  0x00007f7748f811ed:   mov    $0x20000000,%ebx
  0x00007f7748f811f2:   shr    %cl,%ebx
  0x00007f7748f811f4:   shl    $0x20,%r9
  0x00007f7748f811f8:   or     %r11,%r9
  0x00007f7748f811fb:   shl    $0x20,%rbx
  0x00007f7748f811ff:   add    $0x20000000,%edi
  0x00007f7748f81205:   mov    $0x0,%ecx
  0x00007f7748f8120a:   mov    $0x0,%r11d
  0x00007f7748f81210:   sub    %r8,%rcx
  0x00007f7748f81213:   sbb    %r10,%r11
  0x00007f7748f81216:   sbb    %r9,%rbx
  0x00007f7748f81219:   mov    %rcx,%r8
  0x00007f7748f8121c:   mov    %r11,%r10
  0x00007f7748f8121f:   mov    %rbx,%r9
  0x00007f7748f81222:   mov    $0x8000,%ebx
  0x00007f7748f81227:   jmpq   0x00007f7748f80f4c
  0x00007f7748f8122c:   shr    %cl,%r9d
  0x00007f7748f8122f:   movabs $0x100000000,%rbx
  0x00007f7748f81239:   shr    %cl,%rbx
  0x00007f7748f8123c:   mov    $0x0,%ecx
  0x00007f7748f81241:   mov    $0x0,%r11d
  0x00007f7748f81247:   sub    %r8,%rcx
  0x00007f7748f8124a:   sbb    %r10,%r11
  0x00007f7748f8124d:   sbb    %r9,%rbx
  0x00007f7748f81250:   mov    %rcx,%r8
  0x00007f7748f81253:   mov    %r11,%r10
  0x00007f7748f81256:   mov    %rbx,%r9
  0x00007f7748f81259:   mov    $0x8000,%ebx
  0x00007f7748f8125e:   shr    $0x3,%rdi
  0x00007f7748f81262:   add    $0x20000000,%edi
  0x00007f7748f81268:   jmpq   0x00007f7748f80f4c
  0x00007f7748f8126d:   vmovsd 0x8(%rsp),%xmm0
  0x00007f7748f81273:   vmulsd 0x46b5dcd(%rip),%xmm0,%xmm0        # 0x00007f774d637048
  0x00007f7748f8127b:   vmovq  %xmm0,(%rsp)
  0x00007f7748f81280:   add    $0x10,%rsp
  0x00007f7748f81284:   pop    %rbx
  0x00007f7748f81285:   leaveq 
  0x00007f7748f81286:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmTan [0x00007f7748f81287, 0x00007f7748f81acf] (2120 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f81287:   push   %rbp
  0x00007f7748f81288:   mov    %rsp,%rbp
  0x00007f7748f8128b:   push   %rbx
  0x00007f7748f8128c:   sub    $0x10,%rsp
  0x00007f7748f81290:   vmovsd %xmm0,0x8(%rsp)
  0x00007f7748f81296:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f8129b:   and    $0x7fff,%eax
  0x00007f7748f812a0:   sub    $0x3fba,%eax
  0x00007f7748f812a5:   cmp    $0x10e,%eax
  0x00007f7748f812aa:   ja     0x00007f7748f814b1
  0x00007f7748f812b0:   vmovdqu 0x46b5e28(%rip),%xmm5        # 0x00007f774d6370e0
  0x00007f7748f812b8:   vmovdqu 0x46bbd80(%rip),%xmm6        # 0x00007f774d63d040
  0x00007f7748f812c0:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f7748f812c4:   vmovdqu 0x46bbd64(%rip),%xmm4        # 0x00007f774d63d030
  0x00007f7748f812cc:   vandpd %xmm0,%xmm4,%xmm4
  0x00007f7748f812d0:   vmovdqu 0x46bbd48(%rip),%xmm1        # 0x00007f774d63d020
  0x00007f7748f812d8:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f7748f812dc:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f7748f812e0:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f7748f812e4:   vmovdqu %xmm1,%xmm7
  0x00007f7748f812e8:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007f7748f812ec:   vcvttsd2si %xmm7,%edx
  0x00007f7748f812f0:   (bad)  
  0x00007f7748f812f4:   leaveq 
  0x00007f7748f812f5:   vcvtdq2pd %xmm1,%xmm1
  0x00007f7748f812f9:   vmulpd %xmm6,%xmm1,%xmm1
  0x00007f7748f812fd:   vmovdqu 0x46bbd0b(%rip),%xmm3        # 0x00007f774d63d010
  0x00007f7748f81305:   vmovq  0x46ba663(%rip),%xmm5        # 0x00007f774d63b970
  0x00007f7748f8130d:   add    $0x72900,%rdx
  0x00007f7748f81314:   vmovdqu 0x46bbce4(%rip),%xmm4        # 0x00007f774d63d000
  0x00007f7748f8131c:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007f7748f81320:   and    $0x1f,%rdx
  0x00007f7748f81324:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007f7748f81328:   mov    %rdx,%rcx
  0x00007f7748f8132b:   vmulpd %xmm1,%xmm4,%xmm4
  0x00007f7748f8132f:   shl    %rcx
  0x00007f7748f81332:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007f7748f81336:   vmulpd 0x46bbcb2(%rip),%xmm1,%xmm1        # 0x00007f774d63cff0
  0x00007f7748f8133e:   add    %rcx,%rdx
  0x00007f7748f81341:   shl    $0x2,%rcx
  0x00007f7748f81345:   add    %rcx,%rdx
  0x00007f7748f81348:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f7748f8134c:   vmovdqu %xmm0,%xmm2
  0x00007f7748f81350:   vsubpd %xmm4,%xmm0,%xmm0
  0x00007f7748f81354:   vmovq  0x46b5d94(%rip),%xmm6        # 0x00007f774d6370f0
  0x00007f7748f8135c:   shl    $0x4,%rdx
  0x00007f7748f81360:   movabs $0x7f774d63b9f0,%rax
  0x00007f7748f8136a:   vandpd 0x46ba66e(%rip),%xmm5,%xmm5        # 0x00007f774d63b9e0
  0x00007f7748f81372:   vmovdqu %xmm0,%xmm3
  0x00007f7748f81376:   add    %rdx,%rax
  0x00007f7748f81379:   vsubpd %xmm0,%xmm2,%xmm2
  0x00007f7748f8137d:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007f7748f81381:   vdivsd %xmm5,%xmm6,%xmm6
  0x00007f7748f81385:   vsubpd %xmm4,%xmm2,%xmm2
  0x00007f7748f81389:   vmovdqu 0x10(%rax),%xmm7
  0x00007f7748f8138e:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f7748f81392:   vmulpd %xmm0,%xmm7,%xmm7
  0x00007f7748f81396:   vsubpd %xmm1,%xmm2,%xmm2
  0x00007f7748f8139a:   vmovdqu 0x30(%rax),%xmm1
  0x00007f7748f8139f:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f7748f813a3:   vmovdqu 0x60(%rax),%xmm4
  0x00007f7748f813a8:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007f7748f813ac:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f7748f813b0:   vmovdqu %xmm0,%xmm3
  0x00007f7748f813b4:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f813b8:   vaddpd (%rax),%xmm7,%xmm7
  0x00007f7748f813bc:   vaddpd 0x20(%rax),%xmm1,%xmm1
  0x00007f7748f813c1:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f7748f813c5:   vaddpd 0x50(%rax),%xmm4,%xmm4
  0x00007f7748f813ca:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007f7748f813ce:   vmovdqu 0x70(%rax),%xmm1
  0x00007f7748f813d3:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f7748f813d7:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f813db:   vaddpd %xmm1,%xmm4,%xmm4
  0x00007f7748f813df:   vmovdqu 0x40(%rax),%xmm1
  0x00007f7748f813e4:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f7748f813e8:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007f7748f813ec:   vmovdqu %xmm3,%xmm1
  0x00007f7748f813f0:   vmulpd %xmm0,%xmm3,%xmm3
  0x00007f7748f813f4:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f7748f813f8:   vmulpd 0x90(%rax),%xmm1,%xmm1
  0x00007f7748f81400:   vmulpd %xmm3,%xmm4,%xmm4
  0x00007f7748f81404:   vmovdqu %xmm1,%xmm3
  0x00007f7748f81408:   vaddpd %xmm4,%xmm7,%xmm7
  0x00007f7748f8140c:   vmovdqu %xmm1,%xmm4
  0x00007f7748f81410:   vmulsd %xmm7,%xmm0,%xmm0
  0x00007f7748f81414:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007f7748f81418:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f7748f8141c:   vunpckhpd %xmm1,%xmm1,%xmm1
  0x00007f7748f81420:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007f7748f81424:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f7748f81428:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f7748f8142c:   vmovdqu %xmm2,%xmm4
  0x00007f7748f81430:   vmovq  0x90(%rax),%xmm7
  0x00007f7748f81438:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007f7748f8143c:   vaddsd 0x98(%rax),%xmm7,%xmm7
  0x00007f7748f81444:   vmulsd %xmm2,%xmm7,%xmm7
  0x00007f7748f81448:   vaddsd 0x88(%rax),%xmm7,%xmm7
  0x00007f7748f81450:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007f7748f81454:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f7748f81458:   vmovq  0x46b5c90(%rip),%xmm7        # 0x00007f774d6370f0
  0x00007f7748f81460:   vmulsd %xmm6,%xmm4,%xmm4
  0x00007f7748f81464:   vmovq  0xa8(%rax),%xmm2
  0x00007f7748f8146c:   vandpd %xmm6,%xmm2,%xmm2
  0x00007f7748f81470:   vmulsd %xmm2,%xmm5,%xmm5
  0x00007f7748f81474:   vmulsd 0xa0(%rax),%xmm6,%xmm6
  0x00007f7748f8147c:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007f7748f81480:   vsubsd 0x80(%rax),%xmm2,%xmm2
  0x00007f7748f81488:   vsubsd %xmm4,%xmm7,%xmm7
  0x00007f7748f8148c:   vmulsd %xmm6,%xmm7,%xmm7
  0x00007f7748f81490:   vmovdqu %xmm3,%xmm4
  0x00007f7748f81494:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f7748f81498:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f7748f8149c:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f7748f814a0:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f7748f814a4:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007f7748f814a8:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f7748f814ac:   jmpq   0x00007f7748f81ac8
  0x00007f7748f814b1:   jg     0x00007f7748f8155a
  0x00007f7748f814b7:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f814bc:   mov    %eax,%edx
  0x00007f7748f814be:   and    $0x7ff0,%eax
  0x00007f7748f814c3:   je     0x00007f7748f8154d
  0x00007f7748f814c9:   and    $0x7fff,%edx
  0x00007f7748f814cf:   cmp    $0x3e20,%edx
  0x00007f7748f814d5:   jb     0x00007f7748f81530
  0x00007f7748f814db:   vmovdqu %xmm0,%xmm2
  0x00007f7748f814df:   vmovdqu %xmm0,%xmm3
  0x00007f7748f814e3:   vmovq  0x46ba4e5(%rip),%xmm1        # 0x00007f774d63b9d0
  0x00007f7748f814eb:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007f7748f814ef:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007f7748f814f3:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f7748f814f7:   vaddsd 0x46ba4c1(%rip),%xmm1,%xmm1        # 0x00007f774d63b9c0
  0x00007f7748f814ff:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f7748f81503:   vaddsd 0x46ba4a5(%rip),%xmm1,%xmm1        # 0x00007f774d63b9b0
  0x00007f7748f8150b:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f7748f8150f:   vaddsd 0x46ba489(%rip),%xmm1,%xmm1        # 0x00007f774d63b9a0
  0x00007f7748f81517:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f7748f8151b:   vaddsd 0x46ba46d(%rip),%xmm1,%xmm1        # 0x00007f774d63b990
  0x00007f7748f81523:   vmulsd %xmm3,%xmm1,%xmm1
  0x00007f7748f81527:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f7748f8152b:   jmpq   0x00007f7748f81ac8
  0x00007f7748f81530:   vmovq  0x46b5b90(%rip),%xmm3        # 0x00007f774d6370c8
  0x00007f7748f81538:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007f7748f8153c:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f7748f81540:   vmulsd 0x46b5b78(%rip),%xmm0,%xmm0        # 0x00007f774d6370c0
  0x00007f7748f81548:   jmpq   0x00007f7748f81ac8
  0x00007f7748f8154d:   vmovdqu %xmm0,%xmm1
  0x00007f7748f81551:   vmulsd %xmm1,%xmm1,%xmm1
  0x00007f7748f81555:   jmpq   0x00007f7748f81ac8
  0x00007f7748f8155a:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f8155f:   and    $0x7ff0,%eax
  0x00007f7748f81564:   cmp    $0x7ff0,%eax
  0x00007f7748f81569:   je     0x00007f7748f81ab5
  0x00007f7748f8156f:   vpextrw $0x3,%xmm0,%ecx
  0x00007f7748f81574:   and    $0x7ff0,%ecx
  0x00007f7748f8157a:   sub    $0x3f60,%ecx
  0x00007f7748f81580:   shr    $0x7,%ecx
  0x00007f7748f81583:   and    $0xfffc,%ecx
  0x00007f7748f81589:   movabs $0x7f774d636f80,%r11
  0x00007f7748f81593:   add    %r11,%rcx
  0x00007f7748f81596:   vmovq  %xmm0,%rax
  0x00007f7748f8159b:   mov    0x14(%rcx),%r10d
  0x00007f7748f8159f:   mov    0x18(%rcx),%r8d
  0x00007f7748f815a3:   mov    %eax,%edx
  0x00007f7748f815a5:   shr    $0x15,%rax
  0x00007f7748f815a9:   or     $0x80000000,%eax
  0x00007f7748f815ae:   shr    $0xb,%eax
  0x00007f7748f815b1:   mov    %r10d,%r9d
  0x00007f7748f815b4:   imul   %rdx,%r10
  0x00007f7748f815b8:   imul   %rax,%r9
  0x00007f7748f815bc:   imul   %rax,%r8
  0x00007f7748f815c0:   mov    0x10(%rcx),%esi
  0x00007f7748f815c3:   mov    0xc(%rcx),%edi
  0x00007f7748f815c6:   mov    %r10d,%r11d
  0x00007f7748f815c9:   shr    $0x20,%r10
  0x00007f7748f815cd:   add    %r10,%r9
  0x00007f7748f815d0:   add    %r8,%r11
  0x00007f7748f815d3:   mov    %r11d,%r8d
  0x00007f7748f815d6:   shr    $0x20,%r11
  0x00007f7748f815da:   add    %r11,%r9
  0x00007f7748f815dd:   mov    %esi,%r10d
  0x00007f7748f815e0:   imul   %rdx,%rsi
  0x00007f7748f815e4:   imul   %rax,%r10
  0x00007f7748f815e8:   mov    %edi,%r11d
  0x00007f7748f815eb:   imul   %rdx,%rdi
  0x00007f7748f815ef:   mov    %esi,%ebx
  0x00007f7748f815f1:   shr    $0x20,%rsi
  0x00007f7748f815f5:   add    %rbx,%r9
  0x00007f7748f815f8:   mov    %r9d,%ebx
  0x00007f7748f815fb:   shr    $0x20,%r9
  0x00007f7748f815ff:   add    %rsi,%r10
  0x00007f7748f81602:   add    %r9,%r10
  0x00007f7748f81605:   shl    $0x20,%rbx
  0x00007f7748f81609:   or     %rbx,%r8
  0x00007f7748f8160c:   imul   %rax,%r11
  0x00007f7748f81610:   mov    0x8(%rcx),%r9d
  0x00007f7748f81614:   mov    0x4(%rcx),%esi
  0x00007f7748f81617:   mov    %edi,%ebx
  0x00007f7748f81619:   shr    $0x20,%rdi
  0x00007f7748f8161d:   add    %rbx,%r10
  0x00007f7748f81620:   mov    %r10d,%ebx
  0x00007f7748f81623:   shr    $0x20,%r10
  0x00007f7748f81627:   add    %rdi,%r11
  0x00007f7748f8162a:   add    %r10,%r11
  0x00007f7748f8162d:   mov    %r9,%rdi
  0x00007f7748f81630:   imul   %rdx,%r9
  0x00007f7748f81634:   imul   %rax,%rdi
  0x00007f7748f81638:   mov    %r9d,%r10d
  0x00007f7748f8163b:   shr    $0x20,%r9
  0x00007f7748f8163f:   add    %r10,%r11
  0x00007f7748f81642:   mov    %r11d,%r10d
  0x00007f7748f81645:   shr    $0x20,%r11
  0x00007f7748f81649:   add    %r9,%rdi
  0x00007f7748f8164c:   add    %r11,%rdi
  0x00007f7748f8164f:   mov    %rsi,%r9
  0x00007f7748f81652:   imul   %rdx,%rsi
  0x00007f7748f81656:   imul   %rax,%r9
  0x00007f7748f8165a:   shl    $0x20,%r10
  0x00007f7748f8165e:   or     %rbx,%r10
  0x00007f7748f81661:   mov    (%rcx),%eax
  0x00007f7748f81663:   mov    %esi,%r11d
  0x00007f7748f81666:   shr    $0x20,%rsi
  0x00007f7748f8166a:   add    %r11,%rdi
  0x00007f7748f8166d:   mov    %edi,%r11d
  0x00007f7748f81670:   shr    $0x20,%rdi
  0x00007f7748f81674:   add    %rsi,%r9
  0x00007f7748f81677:   add    %rdi,%r9
  0x00007f7748f8167a:   imul   %rax,%rdx
  0x00007f7748f8167e:   vpextrw $0x3,%xmm0,%ebx
  0x00007f7748f81683:   movabs $0x7f774d636f80,%rdi
  0x00007f7748f8168d:   sub    %rdi,%rcx
  0x00007f7748f81690:   add    %ecx,%ecx
  0x00007f7748f81692:   add    %ecx,%ecx
  0x00007f7748f81694:   add    %ecx,%ecx
  0x00007f7748f81696:   add    $0x13,%ecx
  0x00007f7748f81699:   mov    $0x8000,%esi
  0x00007f7748f8169e:   and    %ebx,%esi
  0x00007f7748f816a0:   shr    $0x4,%ebx
  0x00007f7748f816a3:   and    $0x7ff,%ebx
  0x00007f7748f816a9:   sub    $0x3ff,%ebx
  0x00007f7748f816af:   sub    %ebx,%ecx
  0x00007f7748f816b1:   add    %rdx,%r9
  0x00007f7748f816b4:   mov    %ecx,%edx
  0x00007f7748f816b6:   add    $0x20,%edx
  0x00007f7748f816b9:   cmp    $0x0,%ecx
  0x00007f7748f816bc:   jl     0x00007f7748f81a05
  0x00007f7748f816c2:   neg    %ecx
  0x00007f7748f816c4:   add    $0x1d,%ecx
  0x00007f7748f816c7:   shl    %cl,%r9d
  0x00007f7748f816ca:   mov    %r9d,%edi
  0x00007f7748f816cd:   and    $0x3fffffff,%r9d
  0x00007f7748f816d4:   test   $0x20000000,%r9d
  0x00007f7748f816db:   jne    0x00007f7748f81a32
  0x00007f7748f816e1:   shr    %cl,%r9d
  0x00007f7748f816e4:   mov    $0x0,%ebx
  0x00007f7748f816e9:   shl    $0x20,%r9
  0x00007f7748f816ed:   or     %r11,%r9
  0x00007f7748f816f0:   cmp    $0x0,%r9
  0x00007f7748f816f4:   je     0x00007f7748f819b1
  0x00007f7748f816fa:   bsr    %r9,%r11
  0x00007f7748f816fe:   mov    $0x1d,%ecx
  0x00007f7748f81703:   sub    %r11d,%ecx
  0x00007f7748f81706:   jle    0x00007f7748f819e2
  0x00007f7748f8170c:   shl    %cl,%r9
  0x00007f7748f8170f:   mov    %r10,%rax
  0x00007f7748f81712:   shl    %cl,%r10
  0x00007f7748f81715:   add    %ecx,%edx
  0x00007f7748f81717:   neg    %ecx
  0x00007f7748f81719:   add    $0x40,%ecx
  0x00007f7748f8171c:   shr    %cl,%rax
  0x00007f7748f8171f:   shr    %cl,%r8
  0x00007f7748f81722:   or     %rax,%r9
  0x00007f7748f81725:   or     %r8,%r10
  0x00007f7748f81728:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007f7748f8172d:   shr    %r10
  0x00007f7748f81730:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007f7748f81735:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007f7748f81739:   shl    $0x4,%edx
  0x00007f7748f8173c:   neg    %edx
  0x00007f7748f8173e:   add    $0x3ff0,%edx
  0x00007f7748f81744:   or     %esi,%edx
  0x00007f7748f81746:   xor    %ebx,%edx
  0x00007f7748f81748:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007f7748f8174d:   vmovq  0x46ba223(%rip),%xmm2        # 0x00007f774d63b978
  0x00007f7748f81755:   vmovq  0x46ba223(%rip),%xmm7        # 0x00007f774d63b980
  0x00007f7748f8175d:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007f7748f81761:   sub    $0x3f0,%edx
  0x00007f7748f81767:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007f7748f8176c:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f7748f81770:   shl    $0x10,%esi
  0x00007f7748f81773:   sar    $0x1f,%esi
  0x00007f7748f81776:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f7748f8177a:   vmovdqu %xmm0,%xmm1
  0x00007f7748f8177e:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007f7748f81782:   shr    $0x1e,%edi
  0x00007f7748f81785:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f7748f81789:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007f7748f8178d:   add    %esi,%edi
  0x00007f7748f8178f:   xor    %esi,%edi
  0x00007f7748f81791:   vmulsd %xmm1,%xmm7,%xmm7
  0x00007f7748f81795:   mov    %edi,%eax
  0x00007f7748f81797:   vaddsd %xmm3,%xmm7,%xmm7
  0x00007f7748f8179b:   vmovdqu %xmm0,%xmm2
  0x00007f7748f8179f:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f7748f817a3:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007f7748f817a7:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007f7748f817ab:   vmovdqu 0x46bb86d(%rip),%xmm1        # 0x00007f774d63d020
  0x00007f7748f817b3:   vmovddup %xmm0,%xmm0
  0x00007f7748f817b7:   vmovdqu 0x46bb871(%rip),%xmm4        # 0x00007f774d63d030
  0x00007f7748f817bf:   vandpd %xmm0,%xmm4,%xmm4
  0x00007f7748f817c3:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f7748f817c7:   vmovddup %xmm7,%xmm7
  0x00007f7748f817cb:   vmovdqu 0x46b590d(%rip),%xmm5        # 0x00007f774d6370e0
  0x00007f7748f817d3:   vmovdqu 0x46bb865(%rip),%xmm6        # 0x00007f774d63d040
  0x00007f7748f817db:   vpor   %xmm4,%xmm5,%xmm5
  0x00007f7748f817df:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007f7748f817e3:   vmovdqu %xmm1,%xmm5
  0x00007f7748f817e7:   vunpckhpd %xmm5,%xmm5,%xmm5
  0x00007f7748f817eb:   vcvttsd2si %xmm5,%edx
  0x00007f7748f817ef:   (bad)  
  0x00007f7748f817f3:   leaveq 
  0x00007f7748f817f4:   vcvtdq2pd %xmm1,%xmm1
  0x00007f7748f817f8:   vmulpd %xmm6,%xmm1,%xmm1
  0x00007f7748f817fc:   vmovdqu 0x46bb80c(%rip),%xmm3        # 0x00007f774d63d010
  0x00007f7748f81804:   vmovq  0x46ba164(%rip),%xmm5        # 0x00007f774d63b970
  0x00007f7748f8180c:   shl    $0x4,%eax
  0x00007f7748f8180f:   add    $0x72900,%edx
  0x00007f7748f81815:   vmovdqu 0x46bb7e3(%rip),%xmm4        # 0x00007f774d63d000
  0x00007f7748f8181d:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007f7748f81821:   add    %eax,%edx
  0x00007f7748f81823:   and    $0x1f,%edx
  0x00007f7748f81826:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007f7748f8182a:   mov    %edx,%ecx
  0x00007f7748f8182c:   vmulpd %xmm1,%xmm4,%xmm4
  0x00007f7748f81830:   shl    %ecx
  0x00007f7748f81832:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007f7748f81836:   vmulpd 0x46bb7b2(%rip),%xmm1,%xmm1        # 0x00007f774d63cff0
  0x00007f7748f8183e:   add    %ecx,%edx
  0x00007f7748f81840:   shl    $0x2,%ecx
  0x00007f7748f81843:   add    %ecx,%edx
  0x00007f7748f81845:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f7748f81849:   vmovdqu %xmm0,%xmm2
  0x00007f7748f8184d:   vsubpd %xmm4,%xmm0,%xmm0
  0x00007f7748f81851:   vmovq  0x46b5897(%rip),%xmm6        # 0x00007f774d6370f0
  0x00007f7748f81859:   shl    $0x4,%edx
  0x00007f7748f8185c:   movabs $0x7f774d63b9f0,%rax
  0x00007f7748f81866:   vandpd 0x46ba172(%rip),%xmm5,%xmm5        # 0x00007f774d63b9e0
  0x00007f7748f8186e:   vmovdqu %xmm0,%xmm3
  0x00007f7748f81872:   add    %rdx,%rax
  0x00007f7748f81875:   vsubpd %xmm0,%xmm2,%xmm2
  0x00007f7748f81879:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007f7748f8187d:   vdivsd %xmm5,%xmm6,%xmm6
  0x00007f7748f81881:   vsubpd %xmm4,%xmm2,%xmm2
  0x00007f7748f81885:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f7748f81889:   vsubpd %xmm1,%xmm2,%xmm2
  0x00007f7748f8188d:   vmovdqu 0x30(%rax),%xmm1
  0x00007f7748f81892:   vaddpd %xmm7,%xmm2,%xmm2
  0x00007f7748f81896:   vmovdqu 0x10(%rax),%xmm7
  0x00007f7748f8189b:   vmulpd %xmm0,%xmm7,%xmm7
  0x00007f7748f8189f:   vmovdqu 0x60(%rax),%xmm4
  0x00007f7748f818a4:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f7748f818a8:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007f7748f818ac:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f7748f818b0:   vmovdqu %xmm0,%xmm3
  0x00007f7748f818b4:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f818b8:   vaddpd (%rax),%xmm7,%xmm7
  0x00007f7748f818bc:   vaddpd 0x20(%rax),%xmm1,%xmm1
  0x00007f7748f818c1:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f7748f818c5:   vaddpd 0x50(%rax),%xmm4,%xmm4
  0x00007f7748f818ca:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007f7748f818ce:   vmovdqu 0x70(%rax),%xmm1
  0x00007f7748f818d3:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f7748f818d7:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f818db:   vaddpd %xmm1,%xmm4,%xmm4
  0x00007f7748f818df:   vmovdqu 0x40(%rax),%xmm1
  0x00007f7748f818e4:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f7748f818e8:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007f7748f818ec:   vmovdqu %xmm3,%xmm1
  0x00007f7748f818f0:   vmulpd %xmm0,%xmm3,%xmm3
  0x00007f7748f818f4:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f7748f818f8:   vmulpd 0x90(%rax),%xmm1,%xmm1
  0x00007f7748f81900:   vmulpd %xmm3,%xmm4,%xmm4
  0x00007f7748f81904:   vmovdqu %xmm1,%xmm3
  0x00007f7748f81908:   vaddpd %xmm4,%xmm7,%xmm7
  0x00007f7748f8190c:   vmovdqu %xmm1,%xmm4
  0x00007f7748f81910:   vmulsd %xmm7,%xmm0,%xmm0
  0x00007f7748f81914:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007f7748f81918:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f7748f8191c:   vunpckhpd %xmm1,%xmm1,%xmm1
  0x00007f7748f81920:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007f7748f81924:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f7748f81928:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f7748f8192c:   vmovdqu %xmm2,%xmm4
  0x00007f7748f81930:   vmovq  0x90(%rax),%xmm7
  0x00007f7748f81938:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007f7748f8193c:   vaddsd 0x98(%rax),%xmm7,%xmm7
  0x00007f7748f81944:   vmulsd %xmm2,%xmm7,%xmm7
  0x00007f7748f81948:   vaddsd 0x88(%rax),%xmm7,%xmm7
  0x00007f7748f81950:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007f7748f81954:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f7748f81958:   vmovq  0x46b5790(%rip),%xmm7        # 0x00007f774d6370f0
  0x00007f7748f81960:   vmulsd %xmm6,%xmm4,%xmm4
  0x00007f7748f81964:   vmovq  0xa8(%rax),%xmm2
  0x00007f7748f8196c:   vandpd %xmm6,%xmm2,%xmm2
  0x00007f7748f81970:   vmulsd %xmm2,%xmm5,%xmm5
  0x00007f7748f81974:   vmulsd 0xa0(%rax),%xmm6,%xmm6
  0x00007f7748f8197c:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007f7748f81980:   vsubsd 0x80(%rax),%xmm2,%xmm2
  0x00007f7748f81988:   vsubsd %xmm4,%xmm7,%xmm7
  0x00007f7748f8198c:   vmulsd %xmm6,%xmm7,%xmm7
  0x00007f7748f81990:   vmovdqu %xmm3,%xmm4
  0x00007f7748f81994:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007f7748f81998:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f7748f8199c:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f7748f819a0:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f7748f819a4:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007f7748f819a8:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f7748f819ac:   jmpq   0x00007f7748f81ac8
  0x00007f7748f819b1:   add    $0x40,%edx
  0x00007f7748f819b4:   mov    %r10,%r9
  0x00007f7748f819b7:   mov    %r8,%r10
  0x00007f7748f819ba:   mov    $0x0,%r8d
  0x00007f7748f819c0:   cmp    $0x0,%r9
  0x00007f7748f819c4:   jne    0x00007f7748f816fa
  0x00007f7748f819ca:   add    $0x40,%edx
  0x00007f7748f819cd:   mov    %r10,%r9
  0x00007f7748f819d0:   mov    %r8,%r10
  0x00007f7748f819d3:   cmp    $0x0,%r9
  0x00007f7748f819d7:   jne    0x00007f7748f816fa
  0x00007f7748f819dd:   jmpq   0x00007f7748f81728
  0x00007f7748f819e2:   je     0x00007f7748f81728
  0x00007f7748f819e8:   neg    %ecx
  0x00007f7748f819ea:   shr    %cl,%r10
  0x00007f7748f819ed:   mov    %r9,%rax
  0x00007f7748f819f0:   shr    %cl,%r9
  0x00007f7748f819f3:   sub    %ecx,%edx
  0x00007f7748f819f5:   neg    %ecx
  0x00007f7748f819f7:   add    $0x40,%ecx
  0x00007f7748f819fa:   shl    %cl,%rax
  0x00007f7748f819fd:   or     %rax,%r10
  0x00007f7748f81a00:   jmpq   0x00007f7748f81728
  0x00007f7748f81a05:   not    %ecx
  0x00007f7748f81a07:   shl    $0x20,%r9
  0x00007f7748f81a0b:   or     %r11,%r9
  0x00007f7748f81a0e:   shl    %cl,%r9
  0x00007f7748f81a11:   mov    %r9,%rdi
  0x00007f7748f81a14:   test   $0x80000000,%r9d
  0x00007f7748f81a1b:   jne    0x00007f7748f81a74
  0x00007f7748f81a21:   shr    %cl,%r9d
  0x00007f7748f81a24:   mov    $0x0,%ebx
  0x00007f7748f81a29:   shr    $0x2,%rdi
  0x00007f7748f81a2d:   jmpq   0x00007f7748f816f0
  0x00007f7748f81a32:   shr    %cl,%r9d
  0x00007f7748f81a35:   mov    $0x40000000,%ebx
  0x00007f7748f81a3a:   shr    %cl,%ebx
  0x00007f7748f81a3c:   shl    $0x20,%r9
  0x00007f7748f81a40:   or     %r11,%r9
  0x00007f7748f81a43:   shl    $0x20,%rbx
  0x00007f7748f81a47:   add    $0x40000000,%edi
  0x00007f7748f81a4d:   mov    $0x0,%ecx
  0x00007f7748f81a52:   mov    $0x0,%r11d
  0x00007f7748f81a58:   sub    %r8,%rcx
  0x00007f7748f81a5b:   sbb    %r10,%r11
  0x00007f7748f81a5e:   sbb    %r9,%rbx
  0x00007f7748f81a61:   mov    %rcx,%r8
  0x00007f7748f81a64:   mov    %r11,%r10
  0x00007f7748f81a67:   mov    %rbx,%r9
  0x00007f7748f81a6a:   mov    $0x8000,%ebx
  0x00007f7748f81a6f:   jmpq   0x00007f7748f816f0
  0x00007f7748f81a74:   shr    %cl,%r9d
  0x00007f7748f81a77:   movabs $0x100000000,%rbx
  0x00007f7748f81a81:   shr    %cl,%rbx
  0x00007f7748f81a84:   mov    $0x0,%ecx
  0x00007f7748f81a89:   mov    $0x0,%r11d
  0x00007f7748f81a8f:   sub    %r8,%rcx
  0x00007f7748f81a92:   sbb    %r10,%r11
  0x00007f7748f81a95:   sbb    %r9,%rbx
  0x00007f7748f81a98:   mov    %rcx,%r8
  0x00007f7748f81a9b:   mov    %r11,%r10
  0x00007f7748f81a9e:   mov    %rbx,%r9
  0x00007f7748f81aa1:   mov    $0x8000,%ebx
  0x00007f7748f81aa6:   shr    $0x2,%rdi
  0x00007f7748f81aaa:   add    $0x40000000,%edi
  0x00007f7748f81ab0:   jmpq   0x00007f7748f816f0
  0x00007f7748f81ab5:   vmovq  0x8(%rsp),%xmm0
  0x00007f7748f81abb:   vmulsd 0x46b5585(%rip),%xmm0,%xmm0        # 0x00007f774d637048
  0x00007f7748f81ac3:   vmovq  %xmm0,(%rsp)
  0x00007f7748f81ac8:   add    $0x10,%rsp
  0x00007f7748f81acc:   pop    %rbx
  0x00007f7748f81acd:   leaveq 
  0x00007f7748f81ace:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmExp [0x00007f7748f81acf, 0x00007f7748f81def] (800 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f81acf:   push   %rbp
  0x00007f7748f81ad0:   mov    %rsp,%rbp
  0x00007f7748f81ad3:   sub    $0x18,%rsp
  0x00007f7748f81ad7:   vmovsd %xmm0,0x8(%rsp)
  0x00007f7748f81add:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007f7748f81ae1:   vmovdqu 0x46b5b07(%rip),%xmm1        # 0x00007f774d6375f0
  0x00007f7748f81ae9:   vmovdqu 0x46b5b0f(%rip),%xmm2        # 0x00007f774d637600
  0x00007f7748f81af1:   vmovdqu 0x46b5b17(%rip),%xmm3        # 0x00007f774d637610
  0x00007f7748f81af9:   vmovdqu 0x46b55af(%rip),%xmm6        # 0x00007f774d6370b0
  0x00007f7748f81b01:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f81b06:   and    $0x7fff,%eax
  0x00007f7748f81b0b:   mov    $0x408f,%edx
  0x00007f7748f81b10:   sub    %eax,%edx
  0x00007f7748f81b12:   sub    $0x3c90,%eax
  0x00007f7748f81b17:   or     %eax,%edx
  0x00007f7748f81b19:   cmp    $0x80000000,%edx
  0x00007f7748f81b1f:   jae    0x00007f7748f81db6
  0x00007f7748f81b25:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007f7748f81b29:   vaddpd %xmm6,%xmm1,%xmm1
  0x00007f7748f81b2d:   vmovapd %xmm1,%xmm7
  0x00007f7748f81b31:   vsubpd %xmm6,%xmm1,%xmm1
  0x00007f7748f81b35:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007f7748f81b39:   vmovdqu 0x46b5aef(%rip),%xmm4        # 0x00007f774d637630
  0x00007f7748f81b41:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007f7748f81b45:   vmovdqu 0x46b5af3(%rip),%xmm5        # 0x00007f774d637640
  0x00007f7748f81b4d:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007f7748f81b51:   vmovd  %xmm7,%eax
  0x00007f7748f81b55:   mov    %eax,%ecx
  0x00007f7748f81b57:   and    $0x3f,%ecx
  0x00007f7748f81b5a:   shl    $0x4,%ecx
  0x00007f7748f81b5d:   sar    $0x6,%eax
  0x00007f7748f81b60:   mov    %eax,%edx
  0x00007f7748f81b62:   vmovdqu 0x46b5a76(%rip),%xmm6        # 0x00007f774d6375e0
  0x00007f7748f81b6a:   vpand  %xmm6,%xmm7,%xmm7
  0x00007f7748f81b6e:   vmovdqu 0x46b5a5a(%rip),%xmm6        # 0x00007f774d6375d0
  0x00007f7748f81b76:   vpaddq %xmm6,%xmm7,%xmm7
  0x00007f7748f81b7a:   (bad)  
  0x00007f7748f81b7e:   imull  (%rsi)
  0x00007f7748f81b80:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007f7748f81b84:   movabs $0x7f774d6371d0,%r11
  0x00007f7748f81b8e:   vmovdqu (%rcx,%r11,1),%xmm2
  0x00007f7748f81b94:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007f7748f81b98:   vmovapd %xmm0,%xmm6
  0x00007f7748f81b9c:   vmovapd %xmm0,%xmm1
  0x00007f7748f81ba0:   vmulpd %xmm6,%xmm6,%xmm6
  0x00007f7748f81ba4:   vmulpd %xmm6,%xmm0,%xmm0
  0x00007f7748f81ba8:   vaddpd %xmm4,%xmm5,%xmm5
  0x00007f7748f81bac:   vmulsd %xmm6,%xmm0,%xmm0
  0x00007f7748f81bb0:   vmulpd 0x46b5a68(%rip),%xmm6,%xmm6        # 0x00007f774d637620
  0x00007f7748f81bb8:   vaddsd %xmm2,%xmm1,%xmm1
  0x00007f7748f81bbc:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007f7748f81bc0:   vmulpd %xmm5,%xmm0,%xmm0
  0x00007f7748f81bc4:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007f7748f81bc8:   vpor   %xmm7,%xmm2,%xmm2
  0x00007f7748f81bcc:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007f7748f81bd0:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f7748f81bd4:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f7748f81bd8:   add    $0x37e,%edx
  0x00007f7748f81bde:   cmp    $0x77c,%edx
  0x00007f7748f81be4:   ja     0x00007f7748f81bf7
  0x00007f7748f81bea:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007f7748f81bee:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007f7748f81bf2:   jmpq   0x00007f7748f81de9
  0x00007f7748f81bf7:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f7748f81bfb:   vmovdqu 0x46b55bd(%rip),%xmm4        # 0x00007f774d6371c0
  0x00007f7748f81c03:   mov    $0xfffffc02,%edx
  0x00007f7748f81c08:   sub    %eax,%edx
  0x00007f7748f81c0a:   vmovd  %edx,%xmm5
  0x00007f7748f81c0e:   vpsllq %xmm5,%xmm4,%xmm4
  0x00007f7748f81c12:   mov    %eax,%ecx
  0x00007f7748f81c14:   sar    %eax
  0x00007f7748f81c16:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f7748f81c1b:   vmovdqu 0x46b558d(%rip),%xmm6        # 0x00007f774d6371b0
  0x00007f7748f81c23:   (bad)  
  0x00007f7748f81c27:   repz add $0xc5,%al
  0x00007f7748f81c2a:   jmpq   0x00007f7744bdf029
  0x00007f7748f81c2f:   pop    %rcx
  0x00007f7748f81c30:   retq   $0xfa83
  0x00007f7748f81c33:   xor    $0xf,%al
  0x00007f7748f81c35:   (bad)  
  0x00007f7748f81c39:   add    %al,%ch
  0x00007f7748f81c3b:   (bad)  
  0x00007f7748f81c3d:   loop   0x00007f7748f81c04
  0x00007f7748f81c3f:   loope  0x00007f7748f81c3f
  0x00007f7748f81c41:   faddp  %st,%st(5)
  0x00007f7748f81c43:   jmp    0x00007f7748f81ca1
  0x00007f7748f81c45:   (bad)  
  0x00007f7748f81c46:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007f7748f81c4a:   cmp    $0x3ff,%ecx
  0x00007f7748f81c50:   jge    0x00007f7748f81ce0
  0x00007f7748f81c56:   vpextrw $0x3,%xmm0,%ecx
  0x00007f7748f81c5b:   and    $0x8000,%ecx
  0x00007f7748f81c61:   or     %ecx,%edx
  0x00007f7748f81c63:   cmp    $0x0,%edx
  0x00007f7748f81c66:   je     0x00007f7748f81cd3
  0x00007f7748f81c6c:   vmovapd %xmm0,%xmm6
  0x00007f7748f81c70:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f7748f81c74:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f7748f81c78:   vpextrw $0x3,%xmm0,%ecx
  0x00007f7748f81c7d:   and    $0x7ff0,%ecx
  0x00007f7748f81c83:   cmp    $0x0,%ecx
  0x00007f7748f81c86:   je     0x00007f7748f81c91
  0x00007f7748f81c8c:   jmpq   0x00007f7748f81de9
  0x00007f7748f81c91:   vmulsd %xmm3,%xmm6,%xmm6
  0x00007f7748f81c95:   vmulsd %xmm3,%xmm4,%xmm4
  0x00007f7748f81c99:   vmovdqu %xmm6,%xmm0
  0x00007f7748f81c9d:   vpxor  %xmm4,%xmm6,%xmm6
  0x00007f7748f81ca1:   vpsrad $0x1f,%xmm6,%xmm6
  0x00007f7748f81ca6:   vpshufd $0x55,%xmm6,%xmm6
  0x00007f7748f81cab:   (bad)  
  0x00007f7748f81caf:   lock add %eax,%ebp
  0x00007f7748f81cb2:   stc    
  0x00007f7748f81cb3:   jae    0x00007f7748f81c85
  0x00007f7748f81cb5:   add    %eax,%ebp
  0x00007f7748f81cb7:   stc    
  0x00007f7748f81cb8:   out    %eax,(%dx)
  0x00007f7748f81cb9:   mov    $0xc9,%ch
  0x00007f7748f81cbc:   jae    0x00007f7748f81c94
  0x00007f7748f81cbe:   (bad)  
  0x00007f7748f81cbf:   vpaddq %xmm6,%xmm0,%xmm0
  0x00007f7748f81cc3:   vpaddq %xmm4,%xmm0,%xmm0
  0x00007f7748f81cc7:   movl   $0xf,(%rsp)
  0x00007f7748f81cce:   jmpq   0x00007f7748f81ddd
  0x00007f7748f81cd3:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f7748f81cd7:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f7748f81cdb:   jmpq   0x00007f7748f81de9
  0x00007f7748f81ce0:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007f7748f81ce4:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f7748f81ce8:   vpextrw $0x3,%xmm0,%ecx
  0x00007f7748f81ced:   and    $0x7ff0,%ecx
  0x00007f7748f81cf3:   cmp    $0x7ff0,%ecx
  0x00007f7748f81cf9:   jae    0x00007f7748f81d42
  0x00007f7748f81cff:   jmpq   0x00007f7748f81de9
  0x00007f7748f81d04:   vpaddd %xmm6,%xmm3,%xmm3
  0x00007f7748f81d08:   vaddpd %xmm2,%xmm0,%xmm0
  0x00007f7748f81d0c:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f7748f81d10:   movl   $0xf,(%rsp)
  0x00007f7748f81d17:   jmpq   0x00007f7748f81ddd
  0x00007f7748f81d1c:   cmp    $0x7ff00000,%eax
  0x00007f7748f81d21:   jae    0x00007f7748f81d66
  0x00007f7748f81d27:   mov    0xc(%rsp),%eax
  0x00007f7748f81d2b:   cmp    $0x80000000,%eax
  0x00007f7748f81d30:   jae    0x00007f7748f81d4e
  0x00007f7748f81d36:   vmovsd 0x46b5462(%rip),%xmm0        # 0x00007f774d6371a0
  0x00007f7748f81d3e:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f7748f81d42:   movl   $0xe,(%rsp)
  0x00007f7748f81d49:   jmpq   0x00007f7748f81ddd
  0x00007f7748f81d4e:   vmovsd 0x46b5442(%rip),%xmm0        # 0x00007f774d637198
  0x00007f7748f81d56:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f7748f81d5a:   movl   $0xf,(%rsp)
  0x00007f7748f81d61:   jmpq   0x00007f7748f81ddd
  0x00007f7748f81d66:   mov    0x8(%rsp),%edx
  0x00007f7748f81d6a:   cmp    $0x7ff00000,%eax
  0x00007f7748f81d6f:   ja     0x00007f7748f81da7
  0x00007f7748f81d75:   cmp    $0x0,%edx
  0x00007f7748f81d78:   jne    0x00007f7748f81da7
  0x00007f7748f81d7e:   mov    0xc(%rsp),%eax
  0x00007f7748f81d82:   cmp    $0x7ff00000,%eax
  0x00007f7748f81d87:   jne    0x00007f7748f81d9a
  0x00007f7748f81d8d:   vmovsd 0x46b53fb(%rip),%xmm0        # 0x00007f774d637190
  0x00007f7748f81d95:   jmpq   0x00007f7748f81de9
  0x00007f7748f81d9a:   vmovsd 0x470ff9e(%rip),%xmm0        # 0x00007f774d691d40
  0x00007f7748f81da2:   jmpq   0x00007f7748f81de9
  0x00007f7748f81da7:   vmovsd 0x8(%rsp),%xmm0
  0x00007f7748f81dad:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f7748f81db1:   jmpq   0x00007f7748f81de9
  0x00007f7748f81db6:   mov    0xc(%rsp),%eax
  0x00007f7748f81dba:   and    $0x7fffffff,%eax
  0x00007f7748f81dbf:   cmp    $0x40900000,%eax
  0x00007f7748f81dc4:   jae    0x00007f7748f81d1c
  0x00007f7748f81dca:   vmovsd %xmm0,0x8(%rsp)
  0x00007f7748f81dd0:   vaddsd 0x46b5318(%rip),%xmm0,%xmm0        # 0x00007f774d6370f0
  0x00007f7748f81dd8:   jmpq   0x00007f7748f81de9
  0x00007f7748f81ddd:   vmovq  %xmm0,0x10(%rsp)
  0x00007f7748f81de3:   vmovq  0x10(%rsp),%xmm0
  0x00007f7748f81de9:   add    $0x18,%rsp
  0x00007f7748f81ded:   leaveq 
  0x00007f7748f81dee:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmPow [0x00007f7748f81def, 0x00007f7748f82ee3] (4340 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f81def:   push   %rbp
  0x00007f7748f81df0:   mov    %rsp,%rbp
  0x00007f7748f81df3:   sub    $0x28,%rsp
  0x00007f7748f81df7:   vmovsd %xmm0,0x8(%rsp)
  0x00007f7748f81dfd:   vmovsd %xmm1,0x10(%rsp)
  0x00007f7748f81e03:   vmovq  %xmm1,%r8
  0x00007f7748f81e08:   cmp    0x46b6a39(%rip),%r8        # 0x00007f774d638848
  0x00007f7748f81e0f:   jne    0x00007f7748f81e1a
  0x00007f7748f81e11:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f7748f81e15:   jmpq   0x00007f7748f82edd
  0x00007f7748f81e1a:   cmp    0x46b6a1f(%rip),%r8        # 0x00007f774d638840
  0x00007f7748f81e21:   jne    0x00007f7748f81e3a
  0x00007f7748f81e23:   vmovq  %xmm0,%r9
  0x00007f7748f81e28:   cmp    0x470ff19(%rip),%r9        # 0x00007f774d691d48
  0x00007f7748f81e2f:   jl     0x00007f7748f81e3a
  0x00007f7748f81e31:   vsqrtsd %xmm0,%xmm0,%xmm0
  0x00007f7748f81e35:   jmpq   0x00007f7748f82edd
  0x00007f7748f81e3a:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f81e3f:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f7748f81e43:   movabs $0x3ff0000000000000,%r9
  0x00007f7748f81e4d:   vmovq  %r9,%xmm2
  0x00007f7748f81e52:   mov    $0x3fb90000,%r8d
  0x00007f7748f81e58:   vmovq  %r8,%xmm7
  0x00007f7748f81e5d:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f81e61:   movabs $0x77f0000000000000,%r10
  0x00007f7748f81e6b:   vmovq  %r10,%xmm1
  0x00007f7748f81e70:   vmovdqu %xmm0,%xmm3
  0x00007f7748f81e74:   mov    $0x7ff0,%edx
  0x00007f7748f81e79:   and    %eax,%edx
  0x00007f7748f81e7b:   sub    $0x3ff0,%edx
  0x00007f7748f81e81:   mov    %edx,%ecx
  0x00007f7748f81e83:   sar    $0x1f,%edx
  0x00007f7748f81e86:   add    %edx,%ecx
  0x00007f7748f81e88:   xor    %edx,%ecx
  0x00007f7748f81e8a:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f7748f81e8e:   vmovdqu 0x46b9aba(%rip),%xmm6        # 0x00007f774d63b950
  0x00007f7748f81e96:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f7748f81e9b:   vmovq  0x46b9a9d(%rip),%xmm2        # 0x00007f774d63b940
  0x00007f7748f81ea3:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f7748f81ea8:   add    $0x10,%ecx
  0x00007f7748f81eab:   bsr    %ecx,%ecx
  0x00007f7748f81eae:   vrcpps %xmm0,%xmm0
  0x00007f7748f81eb2:   (bad)  
  0x00007f7748f81eb6:   repz or $0x41,%al
  0x00007f7748f81eb9:   mov    $0x2000,%ebx
  0x00007f7748f81ebe:   vmovq  %r11,%xmm4
  0x00007f7748f81ec3:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007f7748f81ec8:   sub    $0x10,%eax
  0x00007f7748f81ecb:   cmp    $0x7fe0,%eax
  0x00007f7748f81ed0:   jae    0x00007f7748f820e5
  0x00007f7748f81ed6:   mov    $0x0,%r8d
  0x00007f7748f81edc:   vmulss %xmm7,%xmm0,%xmm0
  0x00007f7748f81ee0:   mov    $0xffffffff,%edx
  0x00007f7748f81ee5:   sub    $0x4,%ecx
  0x00007f7748f81ee8:   shl    %cl,%edx
  0x00007f7748f81eea:   shl    $0x20,%rdx
  0x00007f7748f81eee:   vmovq  %rdx,%xmm5
  0x00007f7748f81ef3:   vpor   %xmm1,%xmm3,%xmm3
  0x00007f7748f81ef7:   sub    $0x3fdf,%eax
  0x00007f7748f81efc:   cmp    $0x1,%eax
  0x00007f7748f81eff:   jbe    0x00007f7748f82afa
  0x00007f7748f81f05:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f7748f81f09:   vpand  %xmm3,%xmm5,%xmm5
  0x00007f7748f81f0d:   vmovd  %xmm0,%edx
  0x00007f7748f81f11:   (bad)  
  0x00007f7748f81f15:   lock sbb $0xdd5ce3c5,%eax
  0x00007f7748f81f1b:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f7748f81f1f:   sub    $0x1,%eax
  0x00007f7748f81f22:   sar    $0x4,%eax
  0x00007f7748f81f25:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f7748f81f29:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f81f2d:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007f7748f81f31:   vmovdqu 0x46b8937(%rip),%xmm1        # 0x00007f774d63a870
  0x00007f7748f81f39:   movabs $0x7f774d638860,%r11
  0x00007f7748f81f43:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007f7748f81f47:   vmovdqu 0x46b8931(%rip),%xmm4        # 0x00007f774d63a880
  0x00007f7748f81f4f:   mov    %eax,%ecx
  0x00007f7748f81f51:   sar    $0x1f,%eax
  0x00007f7748f81f54:   add    %eax,%ecx
  0x00007f7748f81f56:   xor    %ecx,%eax
  0x00007f7748f81f58:   add    $0x1,%eax
  0x00007f7748f81f5b:   bsr    %eax,%eax
  0x00007f7748f81f5e:   vunpcklpd %xmm3,%xmm5,%xmm5
  0x00007f7748f81f62:   vmovdqu 0x46b8926(%rip),%xmm6        # 0x00007f774d63a890
  0x00007f7748f81f6a:   vaddsd %xmm5,%xmm3,%xmm3
  0x00007f7748f81f6e:   and    $0xffc000,%edx
  0x00007f7748f81f74:   shr    $0xa,%edx
  0x00007f7748f81f77:   vaddpd -0xe40(%r11,%rdx,1),%xmm5,%xmm5
  0x00007f7748f81f81:   vmovdqu 0x46b8917(%rip),%xmm0        # 0x00007f774d63a8a0
  0x00007f7748f81f89:   vpshufd $0x44,%xmm3,%xmm2
  0x00007f7748f81f8e:   vmulsd %xmm3,%xmm3,%xmm3
  0x00007f7748f81f92:   vmulpd %xmm2,%xmm1,%xmm1
  0x00007f7748f81f96:   vmulpd %xmm2,%xmm4,%xmm4
  0x00007f7748f81f9a:   vaddsd %xmm7,%xmm5,%xmm5
  0x00007f7748f81f9e:   vmulsd %xmm3,%xmm2,%xmm2
  0x00007f7748f81fa2:   vaddpd %xmm1,%xmm6,%xmm6
  0x00007f7748f81fa6:   vmulsd %xmm3,%xmm3,%xmm3
  0x00007f7748f81faa:   vaddpd %xmm4,%xmm0,%xmm0
  0x00007f7748f81fae:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f81fb4:   mov    0x16(%rsp),%cx
  0x00007f7748f81fb9:   vpshufd $0xee,%xmm5,%xmm7
  0x00007f7748f81fbe:   vmovq  0x46b996a(%rip),%xmm4        # 0x00007f774d63b930
  0x00007f7748f81fc6:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007f7748f81fca:   vpshufd $0x44,%xmm3,%xmm3
  0x00007f7748f81fcf:   vmulpd %xmm2,%xmm0,%xmm0
  0x00007f7748f81fd3:   shl    $0x4,%eax
  0x00007f7748f81fd6:   sub    $0x3e00,%eax
  0x00007f7748f81fdb:   and    $0x7ff0,%ecx
  0x00007f7748f81fe1:   add    %ecx,%eax
  0x00007f7748f81fe3:   vmulpd %xmm6,%xmm3,%xmm3
  0x00007f7748f81fe7:   cmp    $0x270,%eax
  0x00007f7748f81fec:   jae    0x00007f7748f822a6
  0x00007f7748f81ff2:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f7748f81ff6:   mov    $0x42b8,%edx
  0x00007f7748f81ffb:   vpinsrw $0x3,%edx,%xmm6,%xmm6
  0x00007f7748f82000:   vmovdqu %xmm1,%xmm2
  0x00007f7748f82004:   vpand  %xmm1,%xmm4,%xmm4
  0x00007f7748f82008:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007f7748f8200c:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007f7748f82010:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f7748f82014:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007f7748f82018:   vmovdqu %xmm6,%xmm7
  0x00007f7748f8201c:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f7748f82020:   movabs $0x7f774d63a930,%r11
  0x00007f7748f8202a:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007f7748f8202e:   vmovd  %xmm6,%edx
  0x00007f7748f82032:   vsubsd %xmm7,%xmm6,%xmm6
  0x00007f7748f82036:   vpshufd $0xee,%xmm3,%xmm0
  0x00007f7748f8203b:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007f7748f8203f:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f7748f82043:   mov    %edx,%ecx
  0x00007f7748f82045:   and    $0xff,%edx
  0x00007f7748f8204b:   add    %edx,%edx
  0x00007f7748f8204d:   vmovdqu (%r11,%rdx,8),%xmm5
  0x00007f7748f82053:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007f7748f82057:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007f7748f8205b:   vmovdqu 0x46b889d(%rip),%xmm7        # 0x00007f774d63a900
  0x00007f7748f82063:   vmovdqu 0x46b88a5(%rip),%xmm3        # 0x00007f774d63a910
  0x00007f7748f8206b:   shl    $0xc,%ecx
  0x00007f7748f8206e:   xor    %r8d,%ecx
  0x00007f7748f82071:   and    $0xfff00000,%ecx
  0x00007f7748f82077:   vmovq  %rcx,%xmm6
  0x00007f7748f8207c:   vaddsd %xmm4,%xmm2,%xmm2
  0x00007f7748f82080:   movabs $0x3fe62e42fefa39ef,%r9
  0x00007f7748f8208a:   vmovq  %r9,%xmm1
  0x00007f7748f8208f:   vpshufd $0x44,%xmm2,%xmm0
  0x00007f7748f82094:   vpshufd $0x44,%xmm2,%xmm4
  0x00007f7748f82099:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f7748f8209d:   vpshufd $0x11,%xmm6,%xmm6
  0x00007f7748f820a2:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f820a6:   vmulpd %xmm4,%xmm7,%xmm7
  0x00007f7748f820aa:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007f7748f820ae:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007f7748f820b2:   vpshufd $0xee,%xmm5,%xmm6
  0x00007f7748f820b7:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f7748f820bb:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007f7748f820bf:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f7748f820c3:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f7748f820c7:   vpshufd $0xee,%xmm0,%xmm3
  0x00007f7748f820cc:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007f7748f820d0:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f7748f820d4:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f7748f820d8:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f7748f820dc:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f7748f820e0:   jmpq   0x00007f7748f82edd
  0x00007f7748f820e5:   add    $0x10,%eax
  0x00007f7748f820e8:   mov    $0x7ff0,%edx
  0x00007f7748f820ed:   and    %eax,%edx
  0x00007f7748f820ef:   cmp    $0x7ff0,%edx
  0x00007f7748f820f5:   je     0x00007f7748f8241e
  0x00007f7748f820fb:   test   $0x8000,%eax
  0x00007f7748f82100:   jne    0x00007f7748f826b7
  0x00007f7748f82106:   vmovq  0x8(%rsp),%xmm0
  0x00007f7748f8210c:   vmovq  0x8(%rsp),%xmm3
  0x00007f7748f82112:   vmovd  %xmm3,%edx
  0x00007f7748f82116:   vpsrlq $0x20,%xmm3,%xmm3
  0x00007f7748f8211b:   vmovd  %xmm3,%ecx
  0x00007f7748f8211f:   or     %ecx,%edx
  0x00007f7748f82121:   cmp    $0x0,%edx
  0x00007f7748f82124:   je     0x00007f7748f828f5
  0x00007f7748f8212a:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f7748f8212e:   mov    $0x47f0,%eax
  0x00007f7748f82133:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f7748f82138:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f7748f8213c:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f7748f82140:   mov    $0x3ff0,%eax
  0x00007f7748f82145:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f7748f8214a:   vmovdqu %xmm0,%xmm3
  0x00007f7748f8214e:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f82153:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f7748f82157:   mov    $0x47f0,%ecx
  0x00007f7748f8215c:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f7748f82161:   vmovq  0x46b97d7(%rip),%xmm2        # 0x00007f774d63b940
  0x00007f7748f82169:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f7748f8216e:   vrcpps %xmm0,%xmm0
  0x00007f7748f82172:   (bad)  
  0x00007f7748f82176:   repz or $0xc5,%al
  0x00007f7748f82179:   cli    
  0x00007f7748f8217a:   outsl  %ds:(%rsi),(%dx)
  0x00007f7748f8217b:   xor    $0x46b97d0,%eax
  0x00007f7748f82180:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007f7748f82185:   vmulss %xmm7,%xmm0,%xmm0
  0x00007f7748f82189:   mov    $0xfffffc00,%edx
  0x00007f7748f8218e:   vmovd  %edx,%xmm5
  0x00007f7748f82192:   vpor   %xmm1,%xmm3,%xmm3
  0x00007f7748f82196:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f7748f8219a:   (bad)  
  0x00007f7748f8219e:   cmc    
  0x00007f7748f8219f:   and    %al,%ch
  0x00007f7748f821a1:   stc    
  0x00007f7748f821a2:   jle    0x00007f7748f82166
  0x00007f7748f821a4:   (bad)  
  0x00007f7748f821a8:   lock sbb $0xebdbd1c5,%eax
  0x00007f7748f821ae:   mov    $0x0,%r8d
  0x00007f7748f821b4:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f7748f821b8:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f7748f821bc:   and    $0x7ff0,%eax
  0x00007f7748f821c1:   sub    $0x47f0,%eax
  0x00007f7748f821c6:   sar    $0x4,%eax
  0x00007f7748f821c9:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f7748f821cd:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f821d1:   jmpq   0x00007f7748f81f2d
  0x00007f7748f821d6:   vmovq  0x8(%rsp),%xmm0
  0x00007f7748f821dc:   vmovq  0x8(%rsp),%xmm3
  0x00007f7748f821e2:   vmovd  %xmm3,%edx
  0x00007f7748f821e6:   vpsrlq $0x20,%xmm3,%xmm3
  0x00007f7748f821eb:   vmovd  %xmm3,%ecx
  0x00007f7748f821ef:   or     %ecx,%edx
  0x00007f7748f821f1:   cmp    $0x0,%edx
  0x00007f7748f821f4:   je     0x00007f7748f828f5
  0x00007f7748f821fa:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f7748f821fe:   mov    $0x47f0,%eax
  0x00007f7748f82203:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f7748f82208:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007f7748f8220c:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f7748f82210:   mov    $0x3ff0,%eax
  0x00007f7748f82215:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f7748f8221a:   vmovdqu %xmm0,%xmm3
  0x00007f7748f8221e:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f82223:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f7748f82227:   mov    $0x47f0,%ecx
  0x00007f7748f8222c:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f7748f82231:   vmovq  0x46b9707(%rip),%xmm2        # 0x00007f774d63b940
  0x00007f7748f82239:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f7748f8223e:   vrcpps %xmm0,%xmm0
  0x00007f7748f82242:   (bad)  
  0x00007f7748f82246:   repz or $0xc5,%al
  0x00007f7748f82249:   cli    
  0x00007f7748f8224a:   outsl  %ds:(%rsi),(%dx)
  0x00007f7748f8224b:   xor    $0x46b9700,%eax
  0x00007f7748f82250:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007f7748f82255:   vmulss %xmm7,%xmm0,%xmm0
  0x00007f7748f82259:   mov    $0xfffffc00,%edx
  0x00007f7748f8225e:   vmovd  %edx,%xmm5
  0x00007f7748f82262:   vpor   %xmm1,%xmm3,%xmm3
  0x00007f7748f82266:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f7748f8226a:   (bad)  
  0x00007f7748f8226e:   cmc    
  0x00007f7748f8226f:   and    %al,%ch
  0x00007f7748f82271:   stc    
  0x00007f7748f82272:   jle    0x00007f7748f82236
  0x00007f7748f82274:   (bad)  
  0x00007f7748f82278:   lock sbb $0xebdbd1c5,%eax
  0x00007f7748f8227e:   mov    $0x80000000,%r8d
  0x00007f7748f82284:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f7748f82288:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f7748f8228c:   and    $0x7ff0,%eax
  0x00007f7748f82291:   sub    $0x47f0,%eax
  0x00007f7748f82296:   sar    $0x4,%eax
  0x00007f7748f82299:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f7748f8229d:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f822a1:   jmpq   0x00007f7748f81f2d
  0x00007f7748f822a6:   cmp    $0x0,%eax
  0x00007f7748f822a9:   jl     0x00007f7748f82867
  0x00007f7748f822af:   cmp    $0x2f0,%eax
  0x00007f7748f822b4:   jae    0x00007f7748f829f7
  0x00007f7748f822ba:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f7748f822be:   vmovq  0x46b860a(%rip),%xmm2        # 0x00007f774d63a8d0
  0x00007f7748f822c6:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007f7748f822ca:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f7748f822ce:   mov    $0x42b8,%eax
  0x00007f7748f822d3:   vpinsrw $0x3,%eax,%xmm6,%xmm6
  0x00007f7748f822d8:   vpshufd $0xee,%xmm3,%xmm0
  0x00007f7748f822dd:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f7748f822e1:   vmovdqu %xmm5,%xmm3
  0x00007f7748f822e5:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f7748f822e9:   vmovdqu %xmm2,%xmm4
  0x00007f7748f822ed:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f7748f822f1:   vmovdqu %xmm5,%xmm7
  0x00007f7748f822f5:   vpand  %xmm2,%xmm5,%xmm5
  0x00007f7748f822f9:   vmovdqu %xmm1,%xmm2
  0x00007f7748f822fd:   vpand  %xmm1,%xmm4,%xmm4
  0x00007f7748f82301:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007f7748f82305:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f7748f82309:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007f7748f8230d:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007f7748f82311:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f7748f82315:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007f7748f82319:   vmovdqu %xmm6,%xmm7
  0x00007f7748f8231d:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007f7748f82321:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f7748f82325:   vmovd  %xmm6,%eax
  0x00007f7748f82329:   vsubsd %xmm7,%xmm6,%xmm6
  0x00007f7748f8232d:   movabs $0x7f774d63a930,%r11
  0x00007f7748f82337:   vaddsd %xmm1,%xmm2,%xmm2
  0x00007f7748f8233b:   vmovdqu 0x46b85bd(%rip),%xmm7        # 0x00007f774d63a900
  0x00007f7748f82343:   vmovdqu 0x46b85c5(%rip),%xmm3        # 0x00007f774d63a910
  0x00007f7748f8234b:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007f7748f8234f:   vpextrw $0x3,%xmm6,%edx
  0x00007f7748f82354:   mov    %eax,%ecx
  0x00007f7748f82356:   and    $0xff,%eax
  0x00007f7748f8235b:   add    %eax,%eax
  0x00007f7748f8235d:   vmovdqu (%r11,%rax,8),%xmm5
  0x00007f7748f82363:   vaddsd %xmm4,%xmm2,%xmm2
  0x00007f7748f82367:   sar    $0x8,%ecx
  0x00007f7748f8236a:   mov    %ecx,%eax
  0x00007f7748f8236c:   sar    %ecx
  0x00007f7748f8236e:   sub    %ecx,%eax
  0x00007f7748f82370:   shl    $0x14,%ecx
  0x00007f7748f82373:   xor    %r8d,%ecx
  0x00007f7748f82376:   vmovd  %ecx,%xmm6
  0x00007f7748f8237a:   vmovq  0x46b859e(%rip),%xmm1        # 0x00007f774d63a920
  0x00007f7748f82382:   and    $0x7fff,%edx
  0x00007f7748f82388:   cmp    $0x4091,%edx
  0x00007f7748f8238e:   ja     0x00007f7748f829f7
  0x00007f7748f82394:   vpshufd $0x44,%xmm2,%xmm0
  0x00007f7748f82399:   vpshufd $0x44,%xmm2,%xmm4
  0x00007f7748f8239e:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f823a2:   vmulpd %xmm4,%xmm7,%xmm7
  0x00007f7748f823a6:   vpshufd $0x11,%xmm6,%xmm6
  0x00007f7748f823ab:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f7748f823af:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f7748f823b3:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007f7748f823b7:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007f7748f823bb:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007f7748f823bf:   vpshufd $0xee,%xmm5,%xmm6
  0x00007f7748f823c4:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f7748f823c8:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f7748f823cc:   vpshufd $0xee,%xmm0,%xmm3
  0x00007f7748f823d1:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007f7748f823d5:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f7748f823d9:   shl    $0x4,%eax
  0x00007f7748f823dc:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007f7748f823e0:   add    $0x3ff0,%eax
  0x00007f7748f823e5:   vpinsrw $0x3,%eax,%xmm4,%xmm4
  0x00007f7748f823ea:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f7748f823ee:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007f7748f823f2:   vmovdqu %xmm0,%xmm1
  0x00007f7748f823f6:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f7748f823fa:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f7748f823fe:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f82403:   and    $0x7ff0,%eax
  0x00007f7748f82408:   je     0x00007f7748f82a98
  0x00007f7748f8240e:   cmp    $0x7ff0,%eax
  0x00007f7748f82413:   je     0x00007f7748f82a52
  0x00007f7748f82419:   jmpq   0x00007f7748f82edd
  0x00007f7748f8241e:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f82424:   vmovq  0x8(%rsp),%xmm0
  0x00007f7748f8242a:   vmovdqu %xmm0,%xmm2
  0x00007f7748f8242e:   vmovd  %xmm2,%eax
  0x00007f7748f82432:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007f7748f82437:   vmovd  %xmm2,%edx
  0x00007f7748f8243b:   or     %edx,%eax
  0x00007f7748f8243d:   je     0x00007f7748f8248e
  0x00007f7748f82443:   vmovd  %xmm1,%eax
  0x00007f7748f82447:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f7748f8244c:   vmovd  %xmm1,%edx
  0x00007f7748f82450:   mov    %edx,%ecx
  0x00007f7748f82452:   add    %edx,%edx
  0x00007f7748f82454:   or     %edx,%eax
  0x00007f7748f82456:   je     0x00007f7748f82465
  0x00007f7748f8245c:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f7748f82460:   jmpq   0x00007f7748f82edd
  0x00007f7748f82465:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f82469:   mov    $0x3ff0,%eax
  0x00007f7748f8246e:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f82473:   movl   $0x1d,(%rsp)
  0x00007f7748f8247a:   jmpq   0x00007f7748f82ed1
  0x00007f7748f8247f:   vmovq  0x10(%rsp),%xmm0
  0x00007f7748f82485:   vaddpd %xmm0,%xmm0,%xmm0
  0x00007f7748f82489:   jmpq   0x00007f7748f82edd
  0x00007f7748f8248e:   vmovd  %xmm1,%eax
  0x00007f7748f82492:   vmovdqu %xmm1,%xmm2
  0x00007f7748f82496:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f7748f8249b:   vmovd  %xmm1,%edx
  0x00007f7748f8249f:   mov    %edx,%ecx
  0x00007f7748f824a1:   add    %edx,%edx
  0x00007f7748f824a3:   or     %edx,%eax
  0x00007f7748f824a5:   je     0x00007f7748f8284b
  0x00007f7748f824ab:   vpextrw $0x3,%xmm2,%eax
  0x00007f7748f824b0:   and    $0x7ff0,%eax
  0x00007f7748f824b5:   cmp    $0x7ff0,%eax
  0x00007f7748f824ba:   jne    0x00007f7748f824d1
  0x00007f7748f824c0:   vmovd  %xmm2,%eax
  0x00007f7748f824c4:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007f7748f824c9:   vmovd  %xmm2,%edx
  0x00007f7748f824cd:   or     %edx,%eax
  0x00007f7748f824cf:   jne    0x00007f7748f8247f
  0x00007f7748f824d1:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f824d6:   test   $0x8000,%eax
  0x00007f7748f824db:   jne    0x00007f7748f82511
  0x00007f7748f824e1:   test   $0x80000000,%ecx
  0x00007f7748f824e7:   jne    0x00007f7748f8285e
  0x00007f7748f824ed:   jmpq   0x00007f7748f82edd
  0x00007f7748f824f2:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f824f8:   vmovd  %xmm1,%eax
  0x00007f7748f824fc:   test   $0x1,%al
  0x00007f7748f824fe:   jne    0x00007f7748f825af
  0x00007f7748f82504:   test   $0x2,%al
  0x00007f7748f82506:   jne    0x00007f7748f82581
  0x00007f7748f8250c:   jmpq   0x00007f7748f825af
  0x00007f7748f82511:   shr    $0x14,%ecx
  0x00007f7748f82514:   and    $0x7ff,%ecx
  0x00007f7748f8251a:   cmp    $0x433,%ecx
  0x00007f7748f82520:   ja     0x00007f7748f825af
  0x00007f7748f82526:   je     0x00007f7748f825d8
  0x00007f7748f8252c:   cmp    $0x432,%ecx
  0x00007f7748f82532:   ja     0x00007f7748f824f2
  0x00007f7748f82534:   cmp    $0x3ff,%ecx
  0x00007f7748f8253a:   jb     0x00007f7748f825af
  0x00007f7748f82540:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f82546:   mov    $0x4338,%eax
  0x00007f7748f8254b:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f7748f8254f:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f7748f82554:   vmovdqu %xmm3,%xmm4
  0x00007f7748f82558:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007f7748f8255c:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f7748f82560:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f7748f82564:   vpextrw $0x3,%xmm1,%eax
  0x00007f7748f82569:   and    $0x7ff0,%eax
  0x00007f7748f8256e:   jne    0x00007f7748f825af
  0x00007f7748f82574:   vmovd  %xmm3,%eax
  0x00007f7748f82578:   and    $0x1,%eax
  0x00007f7748f8257b:   je     0x00007f7748f825af
  0x00007f7748f82581:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f82587:   vpextrw $0x3,%xmm1,%eax
  0x00007f7748f8258c:   and    $0x8000,%eax
  0x00007f7748f82591:   jne    0x00007f7748f8259c
  0x00007f7748f82597:   jmpq   0x00007f7748f82edd
  0x00007f7748f8259c:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f825a0:   mov    $0x8000,%eax
  0x00007f7748f825a5:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f825aa:   jmpq   0x00007f7748f82edd
  0x00007f7748f825af:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f825b5:   vpextrw $0x3,%xmm1,%eax
  0x00007f7748f825ba:   and    $0x8000,%eax
  0x00007f7748f825bf:   jne    0x00007f7748f8285e
  0x00007f7748f825c5:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f825c9:   mov    $0x7ff0,%eax
  0x00007f7748f825ce:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f825d3:   jmpq   0x00007f7748f82edd
  0x00007f7748f825d8:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f825de:   vmovd  %xmm1,%eax
  0x00007f7748f825e2:   and    $0x1,%eax
  0x00007f7748f825e5:   je     0x00007f7748f825af
  0x00007f7748f825e7:   jmp    0x00007f7748f82581
  0x00007f7748f825e9:   vmovd  %xmm1,%eax
  0x00007f7748f825ed:   vpsrlq $0x14,%xmm1,%xmm1
  0x00007f7748f825f2:   vmovd  %xmm1,%edx
  0x00007f7748f825f6:   or     %edx,%eax
  0x00007f7748f825f8:   je     0x00007f7748f8260d
  0x00007f7748f825fe:   vmovq  0x10(%rsp),%xmm0
  0x00007f7748f82604:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f7748f82608:   jmpq   0x00007f7748f82edd
  0x00007f7748f8260d:   vmovq  0x8(%rsp),%xmm0
  0x00007f7748f82613:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f82618:   cmp    $0xbff0,%eax
  0x00007f7748f8261d:   jne    0x00007f7748f8264b
  0x00007f7748f82623:   vmovd  %xmm0,%ecx
  0x00007f7748f82627:   vpsrlq $0x14,%xmm0,%xmm0
  0x00007f7748f8262c:   vmovd  %xmm0,%edx
  0x00007f7748f82630:   or     %edx,%ecx
  0x00007f7748f82632:   jne    0x00007f7748f8264b
  0x00007f7748f82638:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f8263c:   mov    $0x7ff8,%eax
  0x00007f7748f82641:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f82646:   jmpq   0x00007f7748f82edd
  0x00007f7748f8264b:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f82651:   and    $0x7ff0,%eax
  0x00007f7748f82656:   sub    $0x3ff0,%eax
  0x00007f7748f8265b:   vpextrw $0x3,%xmm1,%edx
  0x00007f7748f82660:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f82664:   xor    %edx,%eax
  0x00007f7748f82666:   and    $0x8000,%eax
  0x00007f7748f8266b:   je     0x00007f7748f82676
  0x00007f7748f82671:   jmpq   0x00007f7748f82edd
  0x00007f7748f82676:   mov    $0x7ff0,%ecx
  0x00007f7748f8267b:   vpinsrw $0x3,%ecx,%xmm0,%xmm0
  0x00007f7748f82680:   jmpq   0x00007f7748f82edd
  0x00007f7748f82685:   vmovd  %xmm1,%eax
  0x00007f7748f82689:   cmp    $0x4320,%edx
  0x00007f7748f8268f:   ja     0x00007f7748f826aa
  0x00007f7748f82695:   test   $0x1,%al
  0x00007f7748f82697:   jne    0x00007f7748f827c9
  0x00007f7748f8269d:   test   $0x2,%al
  0x00007f7748f8269f:   je     0x00007f7748f827eb
  0x00007f7748f826a5:   jmpq   0x00007f7748f82769
  0x00007f7748f826aa:   test   $0x1,%al
  0x00007f7748f826ac:   je     0x00007f7748f827eb
  0x00007f7748f826b2:   jmpq   0x00007f7748f82769
  0x00007f7748f826b7:   vmovq  0x8(%rsp),%xmm2
  0x00007f7748f826bd:   vmovd  %xmm2,%eax
  0x00007f7748f826c1:   vpsrlq $0x1f,%xmm2,%xmm2
  0x00007f7748f826c6:   vmovd  %xmm2,%ecx
  0x00007f7748f826ca:   or     %ecx,%eax
  0x00007f7748f826cc:   je     0x00007f7748f828f5
  0x00007f7748f826d2:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f826d8:   vpextrw $0x3,%xmm1,%edx
  0x00007f7748f826dd:   vmovd  %xmm1,%eax
  0x00007f7748f826e1:   vmovdqu %xmm1,%xmm2
  0x00007f7748f826e5:   vpsrlq $0x20,%xmm2,%xmm2
  0x00007f7748f826ea:   vmovd  %xmm2,%ecx
  0x00007f7748f826ee:   add    %ecx,%ecx
  0x00007f7748f826f0:   or     %eax,%ecx
  0x00007f7748f826f2:   je     0x00007f7748f828c8
  0x00007f7748f826f8:   and    $0x7ff0,%edx
  0x00007f7748f826fe:   cmp    $0x7ff0,%edx
  0x00007f7748f82704:   je     0x00007f7748f825e9
  0x00007f7748f8270a:   cmp    $0x4330,%edx
  0x00007f7748f82710:   ja     0x00007f7748f827eb
  0x00007f7748f82716:   cmp    $0x4320,%edx
  0x00007f7748f8271c:   jae    0x00007f7748f82685
  0x00007f7748f82722:   cmp    $0x3ff0,%edx
  0x00007f7748f82728:   jb     0x00007f7748f827c9
  0x00007f7748f8272e:   mov    $0x4338,%eax
  0x00007f7748f82733:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f7748f82737:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f7748f8273c:   vmovdqu %xmm2,%xmm4
  0x00007f7748f82740:   vaddsd %xmm1,%xmm2,%xmm2
  0x00007f7748f82744:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007f7748f82748:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f7748f8274c:   vpextrw $0x3,%xmm1,%eax
  0x00007f7748f82751:   and    $0x7fff,%eax
  0x00007f7748f82756:   jne    0x00007f7748f827c9
  0x00007f7748f8275c:   vmovd  %xmm2,%eax
  0x00007f7748f82760:   and    $0x1,%eax
  0x00007f7748f82763:   je     0x00007f7748f827eb
  0x00007f7748f82769:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f8276d:   mov    $0x77f0,%edx
  0x00007f7748f82772:   vpinsrw $0x3,%edx,%xmm1,%xmm1
  0x00007f7748f82777:   vmovq  0x46b91c1(%rip),%xmm2        # 0x00007f774d63b940
  0x00007f7748f8277f:   vmovq  0x8(%rsp),%xmm4
  0x00007f7748f82785:   vpextrw $0x3,%xmm4,%eax
  0x00007f7748f8278a:   mov    $0x2000,%edx
  0x00007f7748f8278f:   vmovd  %edx,%xmm4
  0x00007f7748f82793:   and    $0x7fff,%eax
  0x00007f7748f82798:   sub    $0x10,%eax
  0x00007f7748f8279b:   jl     0x00007f7748f821d6
  0x00007f7748f827a1:   mov    %eax,%edx
  0x00007f7748f827a3:   and    $0x7ff0,%edx
  0x00007f7748f827a9:   sub    $0x3ff0,%edx
  0x00007f7748f827af:   mov    %edx,%ecx
  0x00007f7748f827b1:   sar    $0x1f,%edx
  0x00007f7748f827b4:   add    %edx,%ecx
  0x00007f7748f827b6:   xor    %edx,%ecx
  0x00007f7748f827b8:   add    $0x10,%ecx
  0x00007f7748f827bb:   bsr    %ecx,%ecx
  0x00007f7748f827be:   mov    $0x80000000,%r8d
  0x00007f7748f827c4:   jmpq   0x00007f7748f81edc
  0x00007f7748f827c9:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f827cd:   mov    $0x7ff0,%eax
  0x00007f7748f827d2:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f7748f827d7:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f827db:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f7748f827df:   movl   $0x1c,(%rsp)
  0x00007f7748f827e6:   jmpq   0x00007f7748f82ed1
  0x00007f7748f827eb:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f827ef:   mov    $0x77f0,%edx
  0x00007f7748f827f4:   vpinsrw $0x3,%edx,%xmm1,%xmm1
  0x00007f7748f827f9:   vmovq  0x46b913f(%rip),%xmm2        # 0x00007f774d63b940
  0x00007f7748f82801:   vmovq  0x8(%rsp),%xmm4
  0x00007f7748f82807:   vpextrw $0x3,%xmm4,%eax
  0x00007f7748f8280c:   mov    $0x2000,%edx
  0x00007f7748f82811:   vmovd  %edx,%xmm4
  0x00007f7748f82815:   and    $0x7fff,%eax
  0x00007f7748f8281a:   sub    $0x10,%eax
  0x00007f7748f8281d:   jl     0x00007f7748f82106
  0x00007f7748f82823:   mov    %eax,%edx
  0x00007f7748f82825:   and    $0x7ff0,%edx
  0x00007f7748f8282b:   sub    $0x3ff0,%edx
  0x00007f7748f82831:   mov    %edx,%ecx
  0x00007f7748f82833:   sar    $0x1f,%edx
  0x00007f7748f82836:   add    %edx,%ecx
  0x00007f7748f82838:   xor    %edx,%ecx
  0x00007f7748f8283a:   add    $0x10,%ecx
  0x00007f7748f8283d:   bsr    %ecx,%ecx
  0x00007f7748f82840:   mov    $0x0,%r8d
  0x00007f7748f82846:   jmpq   0x00007f7748f81edc
  0x00007f7748f8284b:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f8284f:   mov    $0x3ff0,%eax
  0x00007f7748f82854:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f82859:   jmpq   0x00007f7748f82edd
  0x00007f7748f8285e:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f82862:   jmpq   0x00007f7748f82edd
  0x00007f7748f82867:   add    $0x180,%eax
  0x00007f7748f8286c:   cmp    $0x0,%eax
  0x00007f7748f8286f:   jl     0x00007f7748f828c8
  0x00007f7748f82875:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007f7748f82879:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007f7748f8287d:   shr    $0x1f,%r8d
  0x00007f7748f82881:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007f7748f82885:   vpshufd $0xee,%xmm3,%xmm0
  0x00007f7748f8288a:   vaddsd %xmm0,%xmm3,%xmm3
  0x00007f7748f8288e:   movabs $0x7f774d638850,%r11
  0x00007f7748f82898:   vmovq  (%r11,%r8,8),%xmm4
  0x00007f7748f8289e:   vmulsd %xmm3,%xmm1,%xmm1
  0x00007f7748f828a2:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f828a6:   mov    $0x3ff0,%eax
  0x00007f7748f828ab:   shl    $0xf,%r8d
  0x00007f7748f828af:   or     %r8d,%eax
  0x00007f7748f828b2:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f828b7:   vaddsd %xmm1,%xmm5,%xmm5
  0x00007f7748f828bb:   vmulsd %xmm4,%xmm5,%xmm5
  0x00007f7748f828bf:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f7748f828c3:   jmpq   0x00007f7748f82edd
  0x00007f7748f828c8:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f828cc:   mov    $0x3ff0,%eax
  0x00007f7748f828d1:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f828d6:   jmpq   0x00007f7748f82edd
  0x00007f7748f828db:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f828df:   mov    $0x3ff0,%eax
  0x00007f7748f828e4:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f828e9:   movl   $0x1a,(%rsp)
  0x00007f7748f828f0:   jmpq   0x00007f7748f82ed1
  0x00007f7748f828f5:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f828fb:   vmovdqu %xmm1,%xmm2
  0x00007f7748f828ff:   vpextrw $0x3,%xmm1,%eax
  0x00007f7748f82904:   and    $0x7ff0,%eax
  0x00007f7748f82909:   cmp    $0x7ff0,%eax
  0x00007f7748f8290e:   jne    0x00007f7748f82929
  0x00007f7748f82914:   vmovd  %xmm2,%eax
  0x00007f7748f82918:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007f7748f8291d:   vmovd  %xmm2,%edx
  0x00007f7748f82921:   or     %edx,%eax
  0x00007f7748f82923:   jne    0x00007f7748f8247f
  0x00007f7748f82929:   vmovd  %xmm1,%eax
  0x00007f7748f8292d:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f7748f82932:   vmovd  %xmm1,%edx
  0x00007f7748f82936:   mov    %edx,%ecx
  0x00007f7748f82938:   add    %edx,%edx
  0x00007f7748f8293a:   or     %edx,%eax
  0x00007f7748f8293c:   je     0x00007f7748f828db
  0x00007f7748f8293e:   shr    $0x15,%edx
  0x00007f7748f82941:   cmp    $0x433,%edx
  0x00007f7748f82947:   ja     0x00007f7748f829c5
  0x00007f7748f8294d:   je     0x00007f7748f829b7
  0x00007f7748f82953:   cmp    $0x3ff,%edx
  0x00007f7748f82959:   jb     0x00007f7748f829c5
  0x00007f7748f8295f:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f82965:   mov    $0x4338,%eax
  0x00007f7748f8296a:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f7748f8296e:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007f7748f82973:   vmovdqu %xmm3,%xmm4
  0x00007f7748f82977:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007f7748f8297b:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007f7748f8297f:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f7748f82983:   vpextrw $0x3,%xmm1,%eax
  0x00007f7748f82988:   and    $0x7ff0,%eax
  0x00007f7748f8298d:   jne    0x00007f7748f829c5
  0x00007f7748f82993:   vmovd  %xmm3,%eax
  0x00007f7748f82997:   and    $0x1,%eax
  0x00007f7748f8299a:   je     0x00007f7748f829c5
  0x00007f7748f829a0:   vmovq  0x8(%rsp),%xmm0
  0x00007f7748f829a6:   test   $0x80000000,%ecx
  0x00007f7748f829ac:   jne    0x00007f7748f829d5
  0x00007f7748f829b2:   jmpq   0x00007f7748f82edd
  0x00007f7748f829b7:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f829bd:   vmovd  %xmm1,%eax
  0x00007f7748f829c1:   test   $0x1,%al
  0x00007f7748f829c3:   jne    0x00007f7748f829a0
  0x00007f7748f829c5:   test   $0x80000000,%ecx
  0x00007f7748f829cb:   je     0x00007f7748f8285e
  0x00007f7748f829d1:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f829d5:   mov    $0x3ff0,%eax
  0x00007f7748f829da:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f829de:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f7748f829e3:   vdivsd %xmm0,%xmm1,%xmm1
  0x00007f7748f829e7:   vmovdqu %xmm1,%xmm0
  0x00007f7748f829eb:   movl   $0x1b,(%rsp)
  0x00007f7748f829f2:   jmpq   0x00007f7748f82ed1
  0x00007f7748f829f7:   vmovq  0x8(%rsp),%xmm2
  0x00007f7748f829fd:   vmovq  0x10(%rsp),%xmm6
  0x00007f7748f82a03:   vpextrw $0x3,%xmm2,%eax
  0x00007f7748f82a08:   vpextrw $0x3,%xmm6,%edx
  0x00007f7748f82a0d:   mov    $0x7ff0,%ecx
  0x00007f7748f82a12:   and    %edx,%ecx
  0x00007f7748f82a14:   cmp    $0x7ff0,%ecx
  0x00007f7748f82a1a:   je     0x00007f7748f82e17
  0x00007f7748f82a20:   and    $0x7ff0,%eax
  0x00007f7748f82a25:   sub    $0x3ff0,%eax
  0x00007f7748f82a2a:   xor    %eax,%edx
  0x00007f7748f82a2c:   test   $0x8000,%edx
  0x00007f7748f82a32:   jne    0x00007f7748f82a5e
  0x00007f7748f82a38:   mov    $0x7fe0,%eax
  0x00007f7748f82a3d:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f82a42:   shr    $0x10,%r8d
  0x00007f7748f82a46:   or     %r8d,%eax
  0x00007f7748f82a49:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f7748f82a4e:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f7748f82a52:   movl   $0x18,(%rsp)
  0x00007f7748f82a59:   jmpq   0x00007f7748f82ed1
  0x00007f7748f82a5e:   mov    $0x10,%eax
  0x00007f7748f82a63:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f82a68:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f7748f82a6c:   test   $0x80000000,%r8d
  0x00007f7748f82a73:   je     0x00007f7748f82a8c
  0x00007f7748f82a79:   movabs $0x8000000000000000,%r9
  0x00007f7748f82a83:   vmovq  %r9,%xmm2
  0x00007f7748f82a88:   vxorpd %xmm2,%xmm0,%xmm0
  0x00007f7748f82a8c:   movl   $0x19,(%rsp)
  0x00007f7748f82a93:   jmpq   0x00007f7748f82ed1
  0x00007f7748f82a98:   vpextrw $0x3,%xmm5,%ecx
  0x00007f7748f82a9d:   vpextrw $0x3,%xmm4,%edx
  0x00007f7748f82aa2:   mov    $0xffffffff,%eax
  0x00007f7748f82aa7:   and    $0x7ff0,%ecx
  0x00007f7748f82aad:   sub    $0x3ff0,%ecx
  0x00007f7748f82ab3:   and    $0x7ff0,%edx
  0x00007f7748f82ab9:   add    %ecx,%edx
  0x00007f7748f82abb:   mov    $0xffffffe1,%ecx
  0x00007f7748f82ac0:   sar    $0x4,%edx
  0x00007f7748f82ac3:   sub    %edx,%ecx
  0x00007f7748f82ac5:   jle    0x00007f7748f82ad6
  0x00007f7748f82acb:   cmp    $0x14,%ecx
  0x00007f7748f82ace:   ja     0x00007f7748f82af8
  0x00007f7748f82ad4:   shl    %cl,%eax
  0x00007f7748f82ad6:   vmovd  %eax,%xmm0
  0x00007f7748f82ada:   (bad)  
  0x00007f7748f82ade:   lock and %al,%ch
  0x00007f7748f82ae1:   stc    
  0x00007f7748f82ae2:   fcmovnb %st(5),%st
  0x00007f7748f82ae4:   vsubsd %xmm0,%xmm5,%xmm5
  0x00007f7748f82ae8:   vaddsd %xmm1,%xmm5,%xmm5
  0x00007f7748f82aec:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f7748f82af0:   vmulsd %xmm4,%xmm5,%xmm5
  0x00007f7748f82af4:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f7748f82af8:   jmp    0x00007f7748f82a8c
  0x00007f7748f82afa:   mov    0x16(%rsp),%cx
  0x00007f7748f82aff:   mov    $0x80000000,%edx
  0x00007f7748f82b04:   vmovd  %edx,%xmm1
  0x00007f7748f82b08:   vxorpd %xmm7,%xmm7,%xmm7
  0x00007f7748f82b0c:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f7748f82b10:   vmovd  %xmm0,%edx
  0x00007f7748f82b14:   (bad)  
  0x00007f7748f82b18:   lock sbb $0xcbd4f1c5,%eax
  0x00007f7748f82b1e:   vpand  %xmm1,%xmm5,%xmm5
  0x00007f7748f82b22:   and    $0x7ff0,%ecx
  0x00007f7748f82b28:   cmp    $0x40b0,%ecx
  0x00007f7748f82b2e:   jl     0x00007f7748f81f17
  0x00007f7748f82b34:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f7748f82b38:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007f7748f82b3c:   add    $0x3fdf,%eax
  0x00007f7748f82b41:   shr    $0x4,%eax
  0x00007f7748f82b44:   sub    $0x3fe,%eax
  0x00007f7748f82b49:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f7748f82b4d:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f82b51:   movabs $0x7f774d638860,%r11
  0x00007f7748f82b5b:   vmovq  0x46b7d8d(%rip),%xmm4        # 0x00007f774d63a8f0
  0x00007f7748f82b63:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007f7748f82b67:   vmovq  0x46b7d81(%rip),%xmm6        # 0x00007f774d63a8f0
  0x00007f7748f82b6f:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007f7748f82b73:   vmovq  0x46b7d7d(%rip),%xmm1        # 0x00007f774d63a8f8
  0x00007f7748f82b7b:   vpshufd $0x44,%xmm3,%xmm2
  0x00007f7748f82b80:   vunpcklpd %xmm3,%xmm5,%xmm5
  0x00007f7748f82b84:   vaddsd %xmm5,%xmm3,%xmm3
  0x00007f7748f82b88:   vmovq  0x46b7d68(%rip),%xmm0        # 0x00007f774d63a8f8
  0x00007f7748f82b90:   and    $0xffc000,%edx
  0x00007f7748f82b96:   shr    $0xa,%edx
  0x00007f7748f82b99:   vaddpd -0xe40(%r11,%rdx,1),%xmm7,%xmm7
  0x00007f7748f82ba3:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007f7748f82ba7:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007f7748f82bab:   vmulsd %xmm2,%xmm6,%xmm6
  0x00007f7748f82baf:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f7748f82bb3:   vmovdqu %xmm5,%xmm2
  0x00007f7748f82bb7:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007f7748f82bbb:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f7748f82bbf:   vmovdqu %xmm7,%xmm0
  0x00007f7748f82bc3:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007f7748f82bc7:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007f7748f82bcb:   vmulsd %xmm2,%xmm6,%xmm6
  0x00007f7748f82bcf:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007f7748f82bd3:   vmovdqu %xmm7,%xmm2
  0x00007f7748f82bd7:   vaddsd %xmm4,%xmm7,%xmm7
  0x00007f7748f82bdb:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f7748f82bdf:   vsubsd %xmm7,%xmm2,%xmm2
  0x00007f7748f82be3:   vaddsd %xmm2,%xmm4,%xmm4
  0x00007f7748f82be7:   vpshufd $0xee,%xmm5,%xmm2
  0x00007f7748f82bec:   vmovdqu %xmm7,%xmm5
  0x00007f7748f82bf0:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007f7748f82bf4:   vaddsd %xmm0,%xmm4,%xmm4
  0x00007f7748f82bf8:   vmovdqu 0x46b7c70(%rip),%xmm0        # 0x00007f774d63a870
  0x00007f7748f82c00:   vsubsd %xmm7,%xmm5,%xmm5
  0x00007f7748f82c04:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f7748f82c08:   vmovdqu %xmm7,%xmm4
  0x00007f7748f82c0c:   vaddsd %xmm2,%xmm5,%xmm5
  0x00007f7748f82c10:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007f7748f82c14:   vmovdqu 0x46b7c94(%rip),%xmm2        # 0x00007f774d63a8b0
  0x00007f7748f82c1c:   vsubsd %xmm7,%xmm4,%xmm4
  0x00007f7748f82c20:   vaddsd %xmm5,%xmm6,%xmm6
  0x00007f7748f82c24:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007f7748f82c28:   vpshufd $0xee,%xmm7,%xmm5
  0x00007f7748f82c2d:   vmovapd %xmm7,%xmm1
  0x00007f7748f82c31:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007f7748f82c35:   vsubsd %xmm7,%xmm1,%xmm1
  0x00007f7748f82c39:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f7748f82c3d:   vmovdqu 0x46b7c7b(%rip),%xmm5        # 0x00007f774d63a8c0
  0x00007f7748f82c45:   vpshufd $0x44,%xmm3,%xmm3
  0x00007f7748f82c4a:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f7748f82c4e:   vaddsd %xmm1,%xmm6,%xmm6
  0x00007f7748f82c52:   vmovdqu 0x46b7c36(%rip),%xmm1        # 0x00007f774d63a890
  0x00007f7748f82c5a:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f7748f82c5e:   vmulpd %xmm3,%xmm2,%xmm2
  0x00007f7748f82c62:   vpshufd $0x44,%xmm3,%xmm4
  0x00007f7748f82c67:   vmulpd %xmm3,%xmm3,%xmm3
  0x00007f7748f82c6b:   vaddpd %xmm1,%xmm0,%xmm0
  0x00007f7748f82c6f:   vaddpd %xmm2,%xmm5,%xmm5
  0x00007f7748f82c73:   vmulsd %xmm3,%xmm4,%xmm4
  0x00007f7748f82c77:   vmovq  0x46b7c61(%rip),%xmm2        # 0x00007f774d63a8e0
  0x00007f7748f82c7f:   vmulpd %xmm3,%xmm3,%xmm3
  0x00007f7748f82c83:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f82c89:   mov    0x16(%rsp),%cx
  0x00007f7748f82c8e:   vmulpd %xmm4,%xmm0,%xmm0
  0x00007f7748f82c92:   vpextrw $0x3,%xmm7,%eax
  0x00007f7748f82c97:   vmulpd %xmm4,%xmm5,%xmm5
  0x00007f7748f82c9b:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f7748f82c9f:   vmovq  0x46b8c91(%rip),%xmm4        # 0x00007f774d63b938
  0x00007f7748f82ca7:   vpand  %xmm7,%xmm2,%xmm2
  0x00007f7748f82cab:   vaddsd %xmm6,%xmm5,%xmm5
  0x00007f7748f82caf:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007f7748f82cb3:   vaddpd %xmm0,%xmm5,%xmm5
  0x00007f7748f82cb7:   and    $0x7ff0,%eax
  0x00007f7748f82cbc:   sub    $0x3ff0,%eax
  0x00007f7748f82cc1:   and    $0x7ff0,%ecx
  0x00007f7748f82cc7:   cmp    $0x7ff0,%ecx
  0x00007f7748f82ccd:   je     0x00007f7748f82e17
  0x00007f7748f82cd3:   add    %eax,%ecx
  0x00007f7748f82cd5:   cmp    $0x40c0,%ecx
  0x00007f7748f82cdb:   jae    0x00007f7748f82e7c
  0x00007f7748f82ce1:   vpshufd $0xee,%xmm5,%xmm0
  0x00007f7748f82ce6:   vpand  %xmm1,%xmm4,%xmm4
  0x00007f7748f82cea:   vmovdqu %xmm1,%xmm3
  0x00007f7748f82cee:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007f7748f82cf2:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007f7748f82cf6:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007f7748f82cfa:   mov    $0x42b8,%edx
  0x00007f7748f82cff:   vpinsrw $0x3,%edx,%xmm6,%xmm6
  0x00007f7748f82d04:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007f7748f82d08:   vmulsd %xmm2,%xmm4,%xmm4
  0x00007f7748f82d0c:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007f7748f82d10:   vmovdqu %xmm6,%xmm5
  0x00007f7748f82d14:   vmulsd %xmm7,%xmm3,%xmm3
  0x00007f7748f82d18:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007f7748f82d1c:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007f7748f82d20:   vmovdqu 0x46b7bd8(%rip),%xmm7        # 0x00007f774d63a900
  0x00007f7748f82d28:   vmovd  %xmm6,%edx
  0x00007f7748f82d2c:   vsubsd %xmm5,%xmm6,%xmm6
  0x00007f7748f82d30:   movabs $0x7f774d63a930,%r11
  0x00007f7748f82d3a:   vmovdqu 0x46b7bce(%rip),%xmm3        # 0x00007f774d63a910
  0x00007f7748f82d42:   vmovq  0x46b7bd6(%rip),%xmm2        # 0x00007f774d63a920
  0x00007f7748f82d4a:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007f7748f82d4e:   mov    %edx,%ecx
  0x00007f7748f82d50:   and    $0xff,%edx
  0x00007f7748f82d56:   add    %edx,%edx
  0x00007f7748f82d58:   vmovdqu (%r11,%rdx,8),%xmm5
  0x00007f7748f82d5e:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007f7748f82d62:   vpextrw $0x3,%xmm6,%edx
  0x00007f7748f82d67:   shr    $0x8,%ecx
  0x00007f7748f82d6a:   mov    %ecx,%eax
  0x00007f7748f82d6c:   shr    %ecx
  0x00007f7748f82d6e:   sub    %ecx,%eax
  0x00007f7748f82d70:   shl    $0x14,%ecx
  0x00007f7748f82d73:   vmovd  %ecx,%xmm6
  0x00007f7748f82d77:   vpshufd $0x44,%xmm4,%xmm0
  0x00007f7748f82d7c:   vpshufd $0x44,%xmm4,%xmm1
  0x00007f7748f82d81:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007f7748f82d85:   vmulpd %xmm1,%xmm7,%xmm7
  0x00007f7748f82d89:   vpshufd $0x11,%xmm6,%xmm6
  0x00007f7748f82d8e:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007f7748f82d92:   and    $0x7fff,%edx
  0x00007f7748f82d98:   cmp    $0x4091,%edx
  0x00007f7748f82d9e:   ja     0x00007f7748f829f7
  0x00007f7748f82da4:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007f7748f82da8:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007f7748f82dac:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007f7748f82db0:   vmulsd %xmm5,%xmm2,%xmm2
  0x00007f7748f82db4:   vpshufd $0xee,%xmm5,%xmm6
  0x00007f7748f82db9:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007f7748f82dbd:   vaddsd %xmm6,%xmm2,%xmm2
  0x00007f7748f82dc1:   vpshufd $0xee,%xmm0,%xmm3
  0x00007f7748f82dc6:   add    $0x3ff,%eax
  0x00007f7748f82dcb:   shl    $0x14,%eax
  0x00007f7748f82dce:   or     %r8d,%eax
  0x00007f7748f82dd1:   vmovd  %eax,%xmm4
  0x00007f7748f82dd5:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007f7748f82dd9:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007f7748f82ddd:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007f7748f82de1:   (bad)  
  0x00007f7748f82de5:   hlt    
  0x00007f7748f82de6:   and    %al,%ch
  0x00007f7748f82de8:   sti    
  0x00007f7748f82de9:   pop    %rax
  0x00007f7748f82dea:   retq   
  0x00007f7748f82deb:   vmovdqu %xmm0,%xmm1
  0x00007f7748f82def:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007f7748f82df3:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007f7748f82df7:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f82dfc:   and    $0x7ff0,%eax
  0x00007f7748f82e01:   je     0x00007f7748f82a98
  0x00007f7748f82e07:   cmp    $0x7ff0,%eax
  0x00007f7748f82e0c:   je     0x00007f7748f82a52
  0x00007f7748f82e12:   jmpq   0x00007f7748f82edd
  0x00007f7748f82e17:   vmovq  0x8(%rsp),%xmm0
  0x00007f7748f82e1d:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f7748f82e21:   mov    $0xbff0,%eax
  0x00007f7748f82e26:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f7748f82e2b:   vaddsd %xmm0,%xmm2,%xmm2
  0x00007f7748f82e2f:   vpextrw $0x3,%xmm2,%eax
  0x00007f7748f82e34:   cmp    $0x0,%eax
  0x00007f7748f82e37:   jne    0x00007f7748f82e50
  0x00007f7748f82e3d:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f82e41:   mov    $0x7ff8,%eax
  0x00007f7748f82e46:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f82e4b:   jmpq   0x00007f7748f82edd
  0x00007f7748f82e50:   vmovq  0x10(%rsp),%xmm1
  0x00007f7748f82e56:   vmovd  %xmm1,%edx
  0x00007f7748f82e5a:   vmovdqu %xmm1,%xmm3
  0x00007f7748f82e5e:   vpsrlq $0x14,%xmm3,%xmm3
  0x00007f7748f82e63:   vmovd  %xmm3,%ecx
  0x00007f7748f82e67:   or     %edx,%ecx
  0x00007f7748f82e69:   je     0x00007f7748f82e98
  0x00007f7748f82e6f:   vaddsd %xmm1,%xmm1,%xmm1
  0x00007f7748f82e73:   vmovdqu %xmm1,%xmm0
  0x00007f7748f82e77:   jmpq   0x00007f7748f82edd
  0x00007f7748f82e7c:   vpextrw $0x3,%xmm1,%eax
  0x00007f7748f82e81:   vpextrw $0x3,%xmm2,%ecx
  0x00007f7748f82e86:   xor    %ecx,%eax
  0x00007f7748f82e88:   test   $0x8000,%eax
  0x00007f7748f82e8d:   je     0x00007f7748f82a38
  0x00007f7748f82e93:   jmpq   0x00007f7748f82a5e
  0x00007f7748f82e98:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f82e9d:   and    $0x7ff0,%eax
  0x00007f7748f82ea2:   vpextrw $0x3,%xmm1,%edx
  0x00007f7748f82ea7:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f82eab:   sub    $0x3ff0,%eax
  0x00007f7748f82eb0:   xor    %edx,%eax
  0x00007f7748f82eb2:   test   $0x8000,%eax
  0x00007f7748f82eb7:   je     0x00007f7748f82ec2
  0x00007f7748f82ebd:   jmpq   0x00007f7748f82edd
  0x00007f7748f82ec2:   mov    $0x7ff0,%edx
  0x00007f7748f82ec7:   vpinsrw $0x3,%edx,%xmm0,%xmm0
  0x00007f7748f82ecc:   jmpq   0x00007f7748f82edd
  0x00007f7748f82ed1:   vmovq  %xmm0,0x18(%rsp)
  0x00007f7748f82ed7:   vmovq  0x18(%rsp),%xmm0
  0x00007f7748f82edd:   add    $0x28,%rsp
  0x00007f7748f82ee1:   leaveq 
  0x00007f7748f82ee2:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmLog [0x00007f7748f82ee3, 0x00007f7748f83157] (628 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f82ee3:   push   %rbp
  0x00007f7748f82ee4:   mov    %rsp,%rbp
  0x00007f7748f82ee7:   sub    $0x18,%rsp
  0x00007f7748f82eeb:   vmovsd %xmm0,(%rsp)
  0x00007f7748f82ef0:   movabs $0x3ff0000000000000,%rax
  0x00007f7748f82efa:   vmovq  %rax,%xmm2
  0x00007f7748f82eff:   movabs $0x77f0000000000000,%rdx
  0x00007f7748f82f09:   vmovq  %rdx,%xmm3
  0x00007f7748f82f0e:   mov    $0x8000,%ecx
  0x00007f7748f82f13:   vmovd  %ecx,%xmm4
  0x00007f7748f82f17:   movabs $0xffffe00000000000,%r11
  0x00007f7748f82f21:   vmovq  %r11,%xmm5
  0x00007f7748f82f26:   vmovdqu %xmm0,%xmm1
  0x00007f7748f82f2a:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f82f2f:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f7748f82f33:   mov    $0x3fe0,%ecx
  0x00007f7748f82f38:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f7748f82f3d:   movabs $0x7f774d637f40,%r8
  0x00007f7748f82f47:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f7748f82f4c:   vrcpps %xmm0,%xmm0
  0x00007f7748f82f50:   (bad)  
  0x00007f7748f82f54:   icebp  
  0x00007f7748f82f55:   or     $0xc5,%al
  0x00007f7748f82f57:   stc    
  0x00007f7748f82f58:   jo     0x00007f7748f82f4f
  0x00007f7748f82f5a:   in     $0xc5,%al
  0x00007f7748f82f5c:   icebp  
  0x00007f7748f82f5d:   jae    0x00007f7748f82f30
  0x00007f7748f82f5f:   or     $0x83,%al
  0x00007f7748f82f61:   callq  0x00007f77c8d86c76
  0x00007f7748f82f66:   add    %al,(%rax)
  0x00007f7748f82f68:   jae    0x00007f7748f83041
  0x00007f7748f82f6e:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f7748f82f72:   vpor   %xmm3,%xmm1,%xmm1
  0x00007f7748f82f76:   vmovd  %xmm0,%edx
  0x00007f7748f82f7a:   (bad)  
  0x00007f7748f82f7e:   lock sbb $0xe9dbd1c5,%eax
  0x00007f7748f82f84:   vpand  %xmm6,%xmm0,%xmm0
  0x00007f7748f82f88:   vsubsd %xmm5,%xmm1,%xmm1
  0x00007f7748f82f8c:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f82f90:   and    $0x7ff0,%eax
  0x00007f7748f82f95:   sub    %ecx,%eax
  0x00007f7748f82f97:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f7748f82f9b:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f7748f82f9f:   vmovq  0x46b4f89(%rip),%xmm6        # 0x00007f774d637f30
  0x00007f7748f82fa7:   vmovdqu 0x46b4f51(%rip),%xmm3        # 0x00007f774d637f00
  0x00007f7748f82faf:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007f7748f82fb3:   and    $0xff0000,%edx
  0x00007f7748f82fb9:   shr    $0xc,%edx
  0x00007f7748f82fbc:   vmovdqu (%r8,%rdx,1),%xmm0
  0x00007f7748f82fc2:   vmovdqu 0x46b4f46(%rip),%xmm4        # 0x00007f774d637f10
  0x00007f7748f82fca:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f7748f82fce:   vmovdqu 0x46b4f4a(%rip),%xmm2        # 0x00007f774d637f20
  0x00007f7748f82fd6:   vmulsd %xmm7,%xmm6,%xmm6
  0x00007f7748f82fda:   vmovddup %xmm1,%xmm5
  0x00007f7748f82fde:   vmulsd 0x46b4f52(%rip),%xmm7,%xmm7        # 0x00007f774d637f38
  0x00007f7748f82fe6:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f7748f82fea:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f7748f82fee:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007f7748f82ff2:   vmulpd %xmm5,%xmm5,%xmm5
  0x00007f7748f82ff6:   vmovddup %xmm0,%xmm6
  0x00007f7748f82ffa:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f7748f82ffe:   vaddpd %xmm2,%xmm4,%xmm4
  0x00007f7748f83002:   vmulpd %xmm5,%xmm3,%xmm3
  0x00007f7748f83006:   vsubsd %xmm0,%xmm6,%xmm6
  0x00007f7748f8300a:   vmulsd %xmm1,%xmm4,%xmm4
  0x00007f7748f8300e:   vpshufd $0xee,%xmm0,%xmm2
  0x00007f7748f83013:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f7748f83017:   vmulsd %xmm5,%xmm5,%xmm5
  0x00007f7748f8301b:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007f7748f8301f:   vaddpd %xmm3,%xmm4,%xmm4
  0x00007f7748f83023:   vaddsd %xmm7,%xmm1,%xmm1
  0x00007f7748f83027:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007f7748f8302b:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f7748f8302f:   vpshufd $0xee,%xmm4,%xmm5
  0x00007f7748f83034:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f7748f83038:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f7748f8303c:   jmpq   0x00007f7748f83151
  0x00007f7748f83041:   vmovq  (%rsp),%xmm0
  0x00007f7748f83046:   vmovq  (%rsp),%xmm1
  0x00007f7748f8304b:   add    $0x10,%eax
  0x00007f7748f8304e:   cmp    $0x8000,%eax
  0x00007f7748f83053:   jae    0x00007f7748f830de
  0x00007f7748f83059:   cmp    $0x10,%eax
  0x00007f7748f8305c:   jb     0x00007f7748f83077
  0x00007f7748f83062:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f7748f83066:   jmpq   0x00007f7748f83151
  0x00007f7748f8306b:   ja     0x00007f7748f83062
  0x00007f7748f8306d:   cmp    $0x0,%edx
  0x00007f7748f83070:   ja     0x00007f7748f83062
  0x00007f7748f83072:   jmpq   0x00007f7748f83104
  0x00007f7748f83077:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f8307b:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007f7748f8307f:   vmovd  %xmm1,%edx
  0x00007f7748f83083:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f7748f83088:   vmovd  %xmm1,%ecx
  0x00007f7748f8308c:   or     %ecx,%edx
  0x00007f7748f8308e:   cmp    $0x0,%edx
  0x00007f7748f83091:   je     0x00007f7748f83127
  0x00007f7748f83097:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f8309b:   mov    $0x47f0,%eax
  0x00007f7748f830a0:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f7748f830a5:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f7748f830a9:   vmovdqu %xmm0,%xmm1
  0x00007f7748f830ad:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f830b2:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f7748f830b6:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f7748f830bb:   mov    $0x47f0,%ecx
  0x00007f7748f830c0:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f7748f830c5:   vrcpps %xmm0,%xmm0
  0x00007f7748f830c9:   (bad)  
  0x00007f7748f830cd:   icebp  
  0x00007f7748f830ce:   or     $0xc5,%al
  0x00007f7748f830d0:   stc    
  0x00007f7748f830d1:   jo     0x00007f7748f830c8
  0x00007f7748f830d3:   in     $0xc5,%al
  0x00007f7748f830d5:   icebp  
  0x00007f7748f830d6:   jae    0x00007f7748f830a9
  0x00007f7748f830d8:   or     $0xe9,%al
  0x00007f7748f830da:   nop
  0x00007f7748f830db:   (bad)  
  0x00007f7748f830dc:   (bad)  
  0x00007f7748f830dd:   inc    %ebp
  0x00007f7748f830df:   stc    
  0x00007f7748f830e0:   jle    0x00007f7748f830ac
  0x00007f7748f830e2:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f7748f830e7:   vmovd  %xmm1,%ecx
  0x00007f7748f830eb:   add    %ecx,%ecx
  0x00007f7748f830ed:   cmp    $0xffe00000,%ecx
  0x00007f7748f830f3:   jae    0x00007f7748f8306b
  0x00007f7748f830f9:   or     %ecx,%edx
  0x00007f7748f830fb:   cmp    $0x0,%edx
  0x00007f7748f830fe:   je     0x00007f7748f83127
  0x00007f7748f83104:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f83108:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f8310c:   mov    $0x7ff0,%eax
  0x00007f7748f83111:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f7748f83116:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f7748f8311a:   movl   $0x3,0x10(%rsp)
  0x00007f7748f83122:   jmpq   0x00007f7748f83145
  0x00007f7748f83127:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f8312b:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f8312f:   mov    $0xbff0,%eax
  0x00007f7748f83134:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f83139:   vdivsd %xmm1,%xmm0,%xmm0
  0x00007f7748f8313d:   movl   $0x2,0x10(%rsp)
  0x00007f7748f83145:   vmovq  %xmm0,0x8(%rsp)
  0x00007f7748f8314b:   vmovq  0x8(%rsp),%xmm0
  0x00007f7748f83151:   add    $0x18,%rsp
  0x00007f7748f83155:   leaveq 
  0x00007f7748f83156:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmLog10 [0x00007f7748f83157, 0x00007f7748f83403] (684 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f83157:   push   %rbp
  0x00007f7748f83158:   mov    %rsp,%rbp
  0x00007f7748f8315b:   sub    $0x18,%rsp
  0x00007f7748f8315f:   vmovsd %xmm0,(%rsp)
  0x00007f7748f83164:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f7748f83168:   mov    $0x3ff0,%eax
  0x00007f7748f8316d:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f7748f83172:   mov    $0x3ede0000,%ecx
  0x00007f7748f83177:   vmovd  %ecx,%xmm7
  0x00007f7748f8317b:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007f7748f8317f:   mov    $0x77f0,%edx
  0x00007f7748f83184:   vpinsrw $0x3,%edx,%xmm3,%xmm3
  0x00007f7748f83189:   vmovdqu %xmm0,%xmm1
  0x00007f7748f8318d:   mov    $0x8000,%edx
  0x00007f7748f83192:   vmovd  %edx,%xmm4
  0x00007f7748f83196:   vmovdqu 0x46b4d52(%rip),%xmm5        # 0x00007f774d637ef0
  0x00007f7748f8319e:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f831a3:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f7748f831a7:   mov    $0x3fe0,%ecx
  0x00007f7748f831ac:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f7748f831b1:   vmovdqu 0x46b4d27(%rip),%xmm2        # 0x00007f774d637ee0
  0x00007f7748f831b9:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f7748f831be:   vrcpps %xmm0,%xmm0
  0x00007f7748f831c2:   (bad)  
  0x00007f7748f831c6:   icebp  
  0x00007f7748f831c7:   or     $0xc5,%al
  0x00007f7748f831c9:   stc    
  0x00007f7748f831ca:   jo     0x00007f7748f831c1
  0x00007f7748f831cc:   rex.WRX vpsrlq $0xc,%xmm1,%xmm1
  0x00007f7748f831d2:   sub    $0x10,%eax
  0x00007f7748f831d5:   cmp    $0x7fe0,%eax
  0x00007f7748f831da:   jae    0x00007f7748f832d7
  0x00007f7748f831e0:   vmulss %xmm7,%xmm0,%xmm0
  0x00007f7748f831e4:   vpor   %xmm3,%xmm1,%xmm1
  0x00007f7748f831e8:   movabs $0x7f774d6376d0,%r11
  0x00007f7748f831f2:   vandpd %xmm1,%xmm5,%xmm5
  0x00007f7748f831f6:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007f7748f831fa:   vsubsd %xmm5,%xmm1,%xmm1
  0x00007f7748f831fe:   vmovd  %xmm0,%edx
  0x00007f7748f83202:   (bad)  
  0x00007f7748f83206:   lock sbb $0xc654f9c5,%eax
  0x00007f7748f8320c:   and    $0x7ff0,%eax
  0x00007f7748f83211:   sub    %ecx,%eax
  0x00007f7748f83213:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007f7748f83217:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007f7748f8321b:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007f7748f8321f:   vmovq  0x46b4499(%rip),%xmm6        # 0x00007f774d6376c0
  0x00007f7748f83227:   vmovdqu 0x46b4461(%rip),%xmm3        # 0x00007f774d637690
  0x00007f7748f8322f:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007f7748f83233:   and    $0xff0000,%edx
  0x00007f7748f83239:   shr    $0xc,%edx
  0x00007f7748f8323c:   vmovdqu -0x5e0(%r11,%rdx,1),%xmm0
  0x00007f7748f83246:   vmovdqu 0x46b4452(%rip),%xmm4        # 0x00007f774d6376a0
  0x00007f7748f8324e:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f7748f83252:   vmovdqu 0x46b4456(%rip),%xmm2        # 0x00007f774d6376b0
  0x00007f7748f8325a:   vmulsd %xmm7,%xmm6,%xmm6
  0x00007f7748f8325e:   vpshufd $0x44,%xmm1,%xmm5
  0x00007f7748f83263:   vmulsd 0x46b445d(%rip),%xmm7,%xmm7        # 0x00007f774d6376c8
  0x00007f7748f8326b:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007f7748f8326f:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007f7748f83273:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007f7748f83277:   vmovq  0x46b4c69(%rip),%xmm6        # 0x00007f774d637ee8
  0x00007f7748f8327f:   vmulpd %xmm5,%xmm5,%xmm5
  0x00007f7748f83283:   vaddpd %xmm2,%xmm4,%xmm4
  0x00007f7748f83287:   vmulpd %xmm5,%xmm3,%xmm3
  0x00007f7748f8328b:   vpshufd $0xe4,%xmm0,%xmm2
  0x00007f7748f83290:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f7748f83294:   vmulsd %xmm1,%xmm4,%xmm4
  0x00007f7748f83298:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007f7748f8329c:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007f7748f832a0:   vaddsd %xmm2,%xmm1,%xmm1
  0x00007f7748f832a4:   vpshufd $0xee,%xmm0,%xmm2
  0x00007f7748f832a9:   vmulsd %xmm5,%xmm5,%xmm5
  0x00007f7748f832ad:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007f7748f832b1:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007f7748f832b5:   vaddpd %xmm3,%xmm4,%xmm4
  0x00007f7748f832b9:   vaddsd %xmm7,%xmm1,%xmm1
  0x00007f7748f832bd:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007f7748f832c1:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007f7748f832c5:   vpshufd $0xee,%xmm4,%xmm5
  0x00007f7748f832ca:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007f7748f832ce:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007f7748f832d2:   jmpq   0x00007f7748f833fd
  0x00007f7748f832d7:   vmovq  (%rsp),%xmm0
  0x00007f7748f832dc:   vmovq  (%rsp),%xmm1
  0x00007f7748f832e1:   add    $0x10,%eax
  0x00007f7748f832e4:   cmp    $0x8000,%eax
  0x00007f7748f832e9:   jae    0x00007f7748f8338a
  0x00007f7748f832ef:   cmp    $0x10,%eax
  0x00007f7748f832f2:   jb     0x00007f7748f8330d
  0x00007f7748f832f8:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007f7748f832fc:   jmpq   0x00007f7748f833fd
  0x00007f7748f83301:   ja     0x00007f7748f832f8
  0x00007f7748f83303:   cmp    $0x0,%edx
  0x00007f7748f83306:   ja     0x00007f7748f832f8
  0x00007f7748f83308:   jmpq   0x00007f7748f833b0
  0x00007f7748f8330d:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f83311:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007f7748f83315:   vmovd  %xmm1,%edx
  0x00007f7748f83319:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f7748f8331e:   vmovd  %xmm1,%ecx
  0x00007f7748f83322:   or     %ecx,%edx
  0x00007f7748f83324:   cmp    $0x0,%edx
  0x00007f7748f83327:   je     0x00007f7748f833d3
  0x00007f7748f8332d:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f83331:   mov    $0x47f0,%eax
  0x00007f7748f83336:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f7748f8333b:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f7748f8333f:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007f7748f83343:   mov    $0x3ff0,%eax
  0x00007f7748f83348:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007f7748f8334d:   vmovdqu %xmm0,%xmm1
  0x00007f7748f83351:   vpextrw $0x3,%xmm0,%eax
  0x00007f7748f83356:   vpor   %xmm2,%xmm0,%xmm0
  0x00007f7748f8335a:   mov    $0x47f0,%ecx
  0x00007f7748f8335f:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007f7748f83364:   vmovdqu 0x46b4b74(%rip),%xmm2        # 0x00007f774d637ee0
  0x00007f7748f8336c:   vpsrld $0x2,%xmm0,%xmm0
  0x00007f7748f83371:   vrcpps %xmm0,%xmm0
  0x00007f7748f83375:   (bad)  
  0x00007f7748f83379:   icebp  
  0x00007f7748f8337a:   or     $0xc5,%al
  0x00007f7748f8337c:   stc    
  0x00007f7748f8337d:   jo     0x00007f7748f83374
  0x00007f7748f8337f:   rex.WRX vpsrlq $0xc,%xmm1,%xmm1
  0x00007f7748f83385:   jmpq   0x00007f7748f831e0
  0x00007f7748f8338a:   vmovd  %xmm1,%edx
  0x00007f7748f8338e:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007f7748f83393:   vmovd  %xmm1,%ecx
  0x00007f7748f83397:   add    %ecx,%ecx
  0x00007f7748f83399:   cmp    $0xffe00000,%ecx
  0x00007f7748f8339f:   jae    0x00007f7748f83301
  0x00007f7748f833a5:   or     %ecx,%edx
  0x00007f7748f833a7:   cmp    $0x0,%edx
  0x00007f7748f833aa:   je     0x00007f7748f833d3
  0x00007f7748f833b0:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f833b4:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f833b8:   mov    $0x7ff0,%eax
  0x00007f7748f833bd:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007f7748f833c2:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007f7748f833c6:   movl   $0x9,0x10(%rsp)
  0x00007f7748f833ce:   jmpq   0x00007f7748f833f1
  0x00007f7748f833d3:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007f7748f833d7:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007f7748f833db:   mov    $0xbff0,%eax
  0x00007f7748f833e0:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007f7748f833e5:   vdivsd %xmm1,%xmm0,%xmm0
  0x00007f7748f833e9:   movl   $0x8,0x10(%rsp)
  0x00007f7748f833f1:   vmovq  %xmm0,0x8(%rsp)
  0x00007f7748f833f7:   vmovq  0x8(%rsp),%xmm0
  0x00007f7748f833fd:   add    $0x18,%rsp
  0x00007f7748f83401:   leaveq 
  0x00007f7748f83402:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::getCPUIDNameInfo_stub [0x00007f7748f87300, 0x00007f7748f873df] (223 bytes)
--------------------------------------------------------------------------------
  0x00007f7748f87300:   push   %rbp
  0x00007f7748f87301:   mov    %rdi,%rbp
  0x00007f7748f87304:   push   %rbx
  0x00007f7748f87305:   push   %rsi
  0x00007f7748f87306:   pushfq 
  0x00007f7748f87307:   pop    %rax
  0x00007f7748f87308:   push   %rax
  0x00007f7748f87309:   mov    %rax,%rcx
  0x00007f7748f8730c:   xor    $0x40000,%eax
  0x00007f7748f87311:   push   %rax
  0x00007f7748f87312:   popfq  
  0x00007f7748f87313:   pushfq 
  0x00007f7748f87314:   pop    %rax
  0x00007f7748f87315:   cmp    %rcx,%rax
  0x00007f7748f87318:   jne    0x00007f7748f87324
  0x00007f7748f8731a:   mov    $0x300,%eax
  0x00007f7748f8731f:   jmpq   0x00007f7748f873da
  0x00007f7748f87324:   mov    %rcx,%rax
  0x00007f7748f87327:   xor    $0x200000,%eax
  0x00007f7748f8732c:   push   %rax
  0x00007f7748f8732d:   popfq  
  0x00007f7748f8732e:   pushfq 
  0x00007f7748f8732f:   pop    %rax
  0x00007f7748f87330:   cmp    %rax,%rcx
  0x00007f7748f87333:   jne    0x00007f7748f8733f
  0x00007f7748f87335:   mov    $0x400,%eax
  0x00007f7748f8733a:   jmpq   0x00007f7748f873da
  0x00007f7748f8733f:   xor    %eax,%eax
  0x00007f7748f87341:   cpuid  
  0x00007f7748f87343:   or     %eax,%eax
  0x00007f7748f87345:   je     0x00007f7748f87335
  0x00007f7748f87347:   mov    $0x80000000,%eax
  0x00007f7748f8734c:   cpuid  
  0x00007f7748f8734e:   cmp    $0x80000004,%eax
  0x00007f7748f87353:   jb     0x00007f7748f873da
  0x00007f7748f87359:   mov    $0x80000002,%eax
  0x00007f7748f8735e:   cpuid  
  0x00007f7748f87360:   lea    0x90(%rbp),%rsi
  0x00007f7748f87367:   mov    %eax,(%rsi)
  0x00007f7748f87369:   lea    0x94(%rbp),%rsi
  0x00007f7748f87370:   mov    %ebx,(%rsi)
  0x00007f7748f87372:   lea    0x98(%rbp),%rsi
  0x00007f7748f87379:   mov    %ecx,(%rsi)
  0x00007f7748f8737b:   lea    0x9c(%rbp),%rsi
  0x00007f7748f87382:   mov    %edx,(%rsi)
  0x00007f7748f87384:   mov    $0x80000003,%eax
  0x00007f7748f87389:   cpuid  
  0x00007f7748f8738b:   lea    0xa0(%rbp),%rsi
  0x00007f7748f87392:   mov    %eax,(%rsi)
  0x00007f7748f87394:   lea    0xa4(%rbp),%rsi
  0x00007f7748f8739b:   mov    %ebx,(%rsi)
  0x00007f7748f8739d:   lea    0xa8(%rbp),%rsi
  0x00007f7748f873a4:   mov    %ecx,(%rsi)
  0x00007f7748f873a6:   lea    0xac(%rbp),%rsi
  0x00007f7748f873ad:   mov    %edx,(%rsi)
  0x00007f7748f873af:   mov    $0x80000004,%eax
  0x00007f7748f873b4:   cpuid  
  0x00007f7748f873b6:   lea    0xb0(%rbp),%rsi
  0x00007f7748f873bd:   mov    %eax,(%rsi)
  0x00007f7748f873bf:   lea    0xb4(%rbp),%rsi
  0x00007f7748f873c6:   mov    %ebx,(%rsi)
  0x00007f7748f873c8:   lea    0xb8(%rbp),%rsi
  0x00007f7748f873cf:   mov    %ecx,(%rsi)
  0x00007f7748f873d1:   lea    0xbc(%rbp),%rsi
  0x00007f7748f873d8:   mov    %edx,(%rsi)
  0x00007f7748f873da:   popfq  
  0x00007f7748f873db:   pop    %rsi
  0x00007f7748f873dc:   pop    %rbx
  0x00007f7748f873dd:   pop    %rbp
  0x00007f7748f873de:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - jfr_write_checkpoint 0x00007f7748f9bc10
--------------------------------------------------------------------------------
  0x00007f7748f9bc80:   push   %rbp
  0x00007f7748f9bc81:   mov    %rsp,%rbp
  0x00007f7748f9bc84:   vzeroupper 
  0x00007f7748f9bc87:   mov    %rbp,0x2d0(%r15)
  0x00007f7748f9bc8e:   movabs $0x7f7748f9bc84,%r10
  0x00007f7748f9bc98:   mov    %r10,0x2c8(%r15)
  0x00007f7748f9bc9f:   mov    %rsp,0x2c0(%r15)
  0x00007f7748f9bca6:   mov    %r15,%rdi
  0x00007f7748f9bca9:   test   $0xf,%spl
  0x00007f7748f9bcad:   je     0x00007f7748f9bcc5
  0x00007f7748f9bcb3:   sub    $0x8,%rsp
  0x00007f7748f9bcb7:   callq  0x00007f774cb62420 = JfrIntrinsicSupport::write_checkpoint(JavaThread*)
  0x00007f7748f9bcbc:   add    $0x8,%rsp
  0x00007f7748f9bcc0:   jmpq   0x00007f7748f9bcca
  0x00007f7748f9bcc5:   callq  0x00007f774cb62420 = JfrIntrinsicSupport::write_checkpoint(JavaThread*)
  0x00007f7748f9bcca:   movq   $0x0,0x2c0(%r15)
  0x00007f7748f9bcd5:   movq   $0x0,0x2d0(%r15)
  0x00007f7748f9bce0:   movq   $0x0,0x2c8(%r15)
  0x00007f7748f9bceb:   vzeroupper 
  0x00007f7748f9bcee:   test   %rax,%rax
  0x00007f7748f9bcf1:   je     0x00007f7748f9bcfb
  0x00007f7748f9bcf7:   mov    -0x2(%rax),%rax
  0x00007f7748f9bcfb:   leaveq 
  0x00007f7748f9bcfc:   retq   
  0x00007f7748f9bcfd:   hlt    
  0x00007f7748f9bcfe:   hlt    
  0x00007f7748f9bcff:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 4 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - wrong_method_stub 0x00007f7748f9b690
--------------------------------------------------------------------------------
  0x00007f7748f9b700:   push   %rbp
  0x00007f7748f9b701:   mov    %rsp,%rbp
  0x00007f7748f9b704:   pushfq 
  0x00007f7748f9b705:   sub    $0x8,%rsp
  0x00007f7748f9b709:   sub    $0x80,%rsp
  0x00007f7748f9b710:   mov    %rax,0x78(%rsp)
  0x00007f7748f9b715:   mov    %rcx,0x70(%rsp)
  0x00007f7748f9b71a:   mov    %rdx,0x68(%rsp)
  0x00007f7748f9b71f:   mov    %rbx,0x60(%rsp)
  0x00007f7748f9b724:   mov    %rbp,0x50(%rsp)
  0x00007f7748f9b729:   mov    %rsi,0x48(%rsp)
  0x00007f7748f9b72e:   mov    %rdi,0x40(%rsp)
  0x00007f7748f9b733:   mov    %r8,0x38(%rsp)
  0x00007f7748f9b738:   mov    %r9,0x30(%rsp)
  0x00007f7748f9b73d:   mov    %r10,0x28(%rsp)
  0x00007f7748f9b742:   mov    %r11,0x20(%rsp)
  0x00007f7748f9b747:   mov    %r12,0x18(%rsp)
  0x00007f7748f9b74c:   mov    %r13,0x10(%rsp)
  0x00007f7748f9b751:   mov    %r14,0x8(%rsp)
  0x00007f7748f9b756:   mov    %r15,(%rsp)
  0x00007f7748f9b75a:   sub    $0xa80,%rsp
  0x00007f7748f9b761:   fxsave64 (%rsp)
  0x00007f7748f9b766:   vzeroupper 
  0x00007f7748f9b769:   vzeroupper 
  0x00007f7748f9b76c:   mov    %rsp,0x2c0(%r15)
  0x00007f7748f9b773:   mov    %r15,%rdi
  0x00007f7748f9b776:   callq  0x00007f774cfc0b00 = SharedRuntime::handle_wrong_method(JavaThread*)
  0x00007f7748f9b77b:   movq   $0x0,0x2c0(%r15)
  0x00007f7748f9b786:   movq   $0x0,0x2c8(%r15)
  0x00007f7748f9b791:   vzeroupper 
  0x00007f7748f9b794:   cmpq   $0x0,0x8(%r15)
  0x00007f7748f9b799:   jne    0x00007f7748f9b829
  0x00007f7748f9b79f:   mov    0x320(%r15),%rbx
  0x00007f7748f9b7a6:   movq   $0x0,0x320(%r15)
  0x00007f7748f9b7b1:   mov    %rbx,0xae0(%rsp)
  0x00007f7748f9b7b9:   mov    %rax,0xaf8(%rsp)
  0x00007f7748f9b7c1:   vzeroupper 
  0x00007f7748f9b7c4:   fxrstor64 (%rsp)
  0x00007f7748f9b7c9:   add    $0xa80,%rsp
  0x00007f7748f9b7d0:   mov    (%rsp),%r15
  0x00007f7748f9b7d4:   mov    0x8(%rsp),%r14
  0x00007f7748f9b7d9:   mov    0x10(%rsp),%r13
  0x00007f7748f9b7de:   mov    0x18(%rsp),%r12
  0x00007f7748f9b7e3:   mov    0x20(%rsp),%r11
  0x00007f7748f9b7e8:   mov    0x28(%rsp),%r10
  0x00007f7748f9b7ed:   mov    0x30(%rsp),%r9
  0x00007f7748f9b7f2:   mov    0x38(%rsp),%r8
  0x00007f7748f9b7f7:   mov    0x40(%rsp),%rdi
  0x00007f7748f9b7fc:   mov    0x48(%rsp),%rsi
  0x00007f7748f9b801:   mov    0x50(%rsp),%rbp
  0x00007f7748f9b806:   mov    0x60(%rsp),%rbx
  0x00007f7748f9b80b:   mov    0x68(%rsp),%rdx
  0x00007f7748f9b810:   mov    0x70(%rsp),%rcx
  0x00007f7748f9b815:   mov    0x78(%rsp),%rax
  0x00007f7748f9b81a:   add    $0x80,%rsp
  0x00007f7748f9b821:   add    $0x8,%rsp
  0x00007f7748f9b825:   popfq  
  0x00007f7748f9b826:   pop    %rbp
  0x00007f7748f9b827:   jmpq   *%rax
  0x00007f7748f9b829:   vzeroupper 
  0x00007f7748f9b82c:   fxrstor64 (%rsp)
  0x00007f7748f9b831:   add    $0xa80,%rsp
  0x00007f7748f9b838:   mov    (%rsp),%r15
  0x00007f7748f9b83c:   mov    0x8(%rsp),%r14
  0x00007f7748f9b841:   mov    0x10(%rsp),%r13
  0x00007f7748f9b846:   mov    0x18(%rsp),%r12
  0x00007f7748f9b84b:   mov    0x20(%rsp),%r11
  0x00007f7748f9b850:   mov    0x28(%rsp),%r10
  0x00007f7748f9b855:   mov    0x30(%rsp),%r9
  0x00007f7748f9b85a:   mov    0x38(%rsp),%r8
  0x00007f7748f9b85f:   mov    0x40(%rsp),%rdi
  0x00007f7748f9b864:   mov    0x48(%rsp),%rsi
  0x00007f7748f9b869:   mov    0x50(%rsp),%rbp
  0x00007f7748f9b86e:   mov    0x60(%rsp),%rbx
  0x00007f7748f9b873:   mov    0x68(%rsp),%rdx
  0x00007f7748f9b878:   mov    0x70(%rsp),%rcx
  0x00007f7748f9b87d:   mov    0x78(%rsp),%rax
  0x00007f7748f9b882:   add    $0x80,%rsp
  0x00007f7748f9b889:   add    $0x8,%rsp
  0x00007f7748f9b88d:   popfq  
  0x00007f7748f9b88e:   pop    %rbp
  0x00007f7748f9b88f:   movq   $0x0,0x318(%r15)
  0x00007f7748f9b89a:   mov    0x8(%r15),%rax
  0x00007f7748f9b89e:   jmpq   0x00007f7748f7fc00
  0x00007f7748f9b8a3:   hlt    
  0x00007f7748f9b8a4:   hlt    
  0x00007f7748f9b8a5:   hlt    
  0x00007f7748f9b8a6:   hlt    
  0x00007f7748f9b8a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - wrong_method_abstract_stub 0x00007f7748fe2190
--------------------------------------------------------------------------------
  0x00007f7748fe2200:   push   %rbp
  0x00007f7748fe2201:   mov    %rsp,%rbp
  0x00007f7748fe2204:   pushfq 
  0x00007f7748fe2205:   sub    $0x8,%rsp
  0x00007f7748fe2209:   sub    $0x80,%rsp
  0x00007f7748fe2210:   mov    %rax,0x78(%rsp)
  0x00007f7748fe2215:   mov    %rcx,0x70(%rsp)
  0x00007f7748fe221a:   mov    %rdx,0x68(%rsp)
  0x00007f7748fe221f:   mov    %rbx,0x60(%rsp)
  0x00007f7748fe2224:   mov    %rbp,0x50(%rsp)
  0x00007f7748fe2229:   mov    %rsi,0x48(%rsp)
  0x00007f7748fe222e:   mov    %rdi,0x40(%rsp)
  0x00007f7748fe2233:   mov    %r8,0x38(%rsp)
  0x00007f7748fe2238:   mov    %r9,0x30(%rsp)
  0x00007f7748fe223d:   mov    %r10,0x28(%rsp)
  0x00007f7748fe2242:   mov    %r11,0x20(%rsp)
  0x00007f7748fe2247:   mov    %r12,0x18(%rsp)
  0x00007f7748fe224c:   mov    %r13,0x10(%rsp)
  0x00007f7748fe2251:   mov    %r14,0x8(%rsp)
  0x00007f7748fe2256:   mov    %r15,(%rsp)
  0x00007f7748fe225a:   sub    $0xa80,%rsp
  0x00007f7748fe2261:   fxsave64 (%rsp)
  0x00007f7748fe2266:   vzeroupper 
  0x00007f7748fe2269:   vzeroupper 
  0x00007f7748fe226c:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fe2273:   mov    %r15,%rdi
  0x00007f7748fe2276:   callq  0x00007f774cfbf6e0 = SharedRuntime::handle_wrong_method_abstract(JavaThread*)
  0x00007f7748fe227b:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fe2286:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fe2291:   vzeroupper 
  0x00007f7748fe2294:   cmpq   $0x0,0x8(%r15)
  0x00007f7748fe2299:   jne    0x00007f7748fe2329
  0x00007f7748fe229f:   mov    0x320(%r15),%rbx
  0x00007f7748fe22a6:   movq   $0x0,0x320(%r15)
  0x00007f7748fe22b1:   mov    %rbx,0xae0(%rsp)
  0x00007f7748fe22b9:   mov    %rax,0xaf8(%rsp)
  0x00007f7748fe22c1:   vzeroupper 
  0x00007f7748fe22c4:   fxrstor64 (%rsp)
  0x00007f7748fe22c9:   add    $0xa80,%rsp
  0x00007f7748fe22d0:   mov    (%rsp),%r15
  0x00007f7748fe22d4:   mov    0x8(%rsp),%r14
  0x00007f7748fe22d9:   mov    0x10(%rsp),%r13
  0x00007f7748fe22de:   mov    0x18(%rsp),%r12
  0x00007f7748fe22e3:   mov    0x20(%rsp),%r11
  0x00007f7748fe22e8:   mov    0x28(%rsp),%r10
  0x00007f7748fe22ed:   mov    0x30(%rsp),%r9
  0x00007f7748fe22f2:   mov    0x38(%rsp),%r8
  0x00007f7748fe22f7:   mov    0x40(%rsp),%rdi
  0x00007f7748fe22fc:   mov    0x48(%rsp),%rsi
  0x00007f7748fe2301:   mov    0x50(%rsp),%rbp
  0x00007f7748fe2306:   mov    0x60(%rsp),%rbx
  0x00007f7748fe230b:   mov    0x68(%rsp),%rdx
  0x00007f7748fe2310:   mov    0x70(%rsp),%rcx
  0x00007f7748fe2315:   mov    0x78(%rsp),%rax
  0x00007f7748fe231a:   add    $0x80,%rsp
  0x00007f7748fe2321:   add    $0x8,%rsp
  0x00007f7748fe2325:   popfq  
  0x00007f7748fe2326:   pop    %rbp
  0x00007f7748fe2327:   jmpq   *%rax
  0x00007f7748fe2329:   vzeroupper 
  0x00007f7748fe232c:   fxrstor64 (%rsp)
  0x00007f7748fe2331:   add    $0xa80,%rsp
  0x00007f7748fe2338:   mov    (%rsp),%r15
  0x00007f7748fe233c:   mov    0x8(%rsp),%r14
  0x00007f7748fe2341:   mov    0x10(%rsp),%r13
  0x00007f7748fe2346:   mov    0x18(%rsp),%r12
  0x00007f7748fe234b:   mov    0x20(%rsp),%r11
  0x00007f7748fe2350:   mov    0x28(%rsp),%r10
  0x00007f7748fe2355:   mov    0x30(%rsp),%r9
  0x00007f7748fe235a:   mov    0x38(%rsp),%r8
  0x00007f7748fe235f:   mov    0x40(%rsp),%rdi
  0x00007f7748fe2364:   mov    0x48(%rsp),%rsi
  0x00007f7748fe2369:   mov    0x50(%rsp),%rbp
  0x00007f7748fe236e:   mov    0x60(%rsp),%rbx
  0x00007f7748fe2373:   mov    0x68(%rsp),%rdx
  0x00007f7748fe2378:   mov    0x70(%rsp),%rcx
  0x00007f7748fe237d:   mov    0x78(%rsp),%rax
  0x00007f7748fe2382:   add    $0x80,%rsp
  0x00007f7748fe2389:   add    $0x8,%rsp
  0x00007f7748fe238d:   popfq  
  0x00007f7748fe238e:   pop    %rbp
  0x00007f7748fe238f:   movq   $0x0,0x318(%r15)
  0x00007f7748fe239a:   mov    0x8(%r15),%rax
  0x00007f7748fe239e:   jmpq   0x00007f7748f7fc00
  0x00007f7748fe23a3:   hlt    
  0x00007f7748fe23a4:   hlt    
  0x00007f7748fe23a5:   hlt    
  0x00007f7748fe23a6:   hlt    
  0x00007f7748fe23a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - ic_miss_stub 0x00007f7748fe2490
--------------------------------------------------------------------------------
  0x00007f7748fe2500:   push   %rbp
  0x00007f7748fe2501:   mov    %rsp,%rbp
  0x00007f7748fe2504:   pushfq 
  0x00007f7748fe2505:   sub    $0x8,%rsp
  0x00007f7748fe2509:   sub    $0x80,%rsp
  0x00007f7748fe2510:   mov    %rax,0x78(%rsp)
  0x00007f7748fe2515:   mov    %rcx,0x70(%rsp)
  0x00007f7748fe251a:   mov    %rdx,0x68(%rsp)
  0x00007f7748fe251f:   mov    %rbx,0x60(%rsp)
  0x00007f7748fe2524:   mov    %rbp,0x50(%rsp)
  0x00007f7748fe2529:   mov    %rsi,0x48(%rsp)
  0x00007f7748fe252e:   mov    %rdi,0x40(%rsp)
  0x00007f7748fe2533:   mov    %r8,0x38(%rsp)
  0x00007f7748fe2538:   mov    %r9,0x30(%rsp)
  0x00007f7748fe253d:   mov    %r10,0x28(%rsp)
  0x00007f7748fe2542:   mov    %r11,0x20(%rsp)
  0x00007f7748fe2547:   mov    %r12,0x18(%rsp)
  0x00007f7748fe254c:   mov    %r13,0x10(%rsp)
  0x00007f7748fe2551:   mov    %r14,0x8(%rsp)
  0x00007f7748fe2556:   mov    %r15,(%rsp)
  0x00007f7748fe255a:   sub    $0xa80,%rsp
  0x00007f7748fe2561:   fxsave64 (%rsp)
  0x00007f7748fe2566:   vzeroupper 
  0x00007f7748fe2569:   vzeroupper 
  0x00007f7748fe256c:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fe2573:   mov    %r15,%rdi
  0x00007f7748fe2576:   callq  0x00007f774cfc29a0 = SharedRuntime::handle_wrong_method_ic_miss(JavaThread*)
  0x00007f7748fe257b:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fe2586:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fe2591:   vzeroupper 
  0x00007f7748fe2594:   cmpq   $0x0,0x8(%r15)
  0x00007f7748fe2599:   jne    0x00007f7748fe2629
  0x00007f7748fe259f:   mov    0x320(%r15),%rbx
  0x00007f7748fe25a6:   movq   $0x0,0x320(%r15)
  0x00007f7748fe25b1:   mov    %rbx,0xae0(%rsp)
  0x00007f7748fe25b9:   mov    %rax,0xaf8(%rsp)
  0x00007f7748fe25c1:   vzeroupper 
  0x00007f7748fe25c4:   fxrstor64 (%rsp)
  0x00007f7748fe25c9:   add    $0xa80,%rsp
  0x00007f7748fe25d0:   mov    (%rsp),%r15
  0x00007f7748fe25d4:   mov    0x8(%rsp),%r14
  0x00007f7748fe25d9:   mov    0x10(%rsp),%r13
  0x00007f7748fe25de:   mov    0x18(%rsp),%r12
  0x00007f7748fe25e3:   mov    0x20(%rsp),%r11
  0x00007f7748fe25e8:   mov    0x28(%rsp),%r10
  0x00007f7748fe25ed:   mov    0x30(%rsp),%r9
  0x00007f7748fe25f2:   mov    0x38(%rsp),%r8
  0x00007f7748fe25f7:   mov    0x40(%rsp),%rdi
  0x00007f7748fe25fc:   mov    0x48(%rsp),%rsi
  0x00007f7748fe2601:   mov    0x50(%rsp),%rbp
  0x00007f7748fe2606:   mov    0x60(%rsp),%rbx
  0x00007f7748fe260b:   mov    0x68(%rsp),%rdx
  0x00007f7748fe2610:   mov    0x70(%rsp),%rcx
  0x00007f7748fe2615:   mov    0x78(%rsp),%rax
  0x00007f7748fe261a:   add    $0x80,%rsp
  0x00007f7748fe2621:   add    $0x8,%rsp
  0x00007f7748fe2625:   popfq  
  0x00007f7748fe2626:   pop    %rbp
  0x00007f7748fe2627:   jmpq   *%rax
  0x00007f7748fe2629:   vzeroupper 
  0x00007f7748fe262c:   fxrstor64 (%rsp)
  0x00007f7748fe2631:   add    $0xa80,%rsp
  0x00007f7748fe2638:   mov    (%rsp),%r15
  0x00007f7748fe263c:   mov    0x8(%rsp),%r14
  0x00007f7748fe2641:   mov    0x10(%rsp),%r13
  0x00007f7748fe2646:   mov    0x18(%rsp),%r12
  0x00007f7748fe264b:   mov    0x20(%rsp),%r11
  0x00007f7748fe2650:   mov    0x28(%rsp),%r10
  0x00007f7748fe2655:   mov    0x30(%rsp),%r9
  0x00007f7748fe265a:   mov    0x38(%rsp),%r8
  0x00007f7748fe265f:   mov    0x40(%rsp),%rdi
  0x00007f7748fe2664:   mov    0x48(%rsp),%rsi
  0x00007f7748fe2669:   mov    0x50(%rsp),%rbp
  0x00007f7748fe266e:   mov    0x60(%rsp),%rbx
  0x00007f7748fe2673:   mov    0x68(%rsp),%rdx
  0x00007f7748fe2678:   mov    0x70(%rsp),%rcx
  0x00007f7748fe267d:   mov    0x78(%rsp),%rax
  0x00007f7748fe2682:   add    $0x80,%rsp
  0x00007f7748fe2689:   add    $0x8,%rsp
  0x00007f7748fe268d:   popfq  
  0x00007f7748fe268e:   pop    %rbp
  0x00007f7748fe268f:   movq   $0x0,0x318(%r15)
  0x00007f7748fe269a:   mov    0x8(%r15),%rax
  0x00007f7748fe269e:   jmpq   0x00007f7748f7fc00
  0x00007f7748fe26a3:   hlt    
  0x00007f7748fe26a4:   hlt    
  0x00007f7748fe26a5:   hlt    
  0x00007f7748fe26a6:   hlt    
  0x00007f7748fe26a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_opt_virtual_call 0x00007f7748fe2790
--------------------------------------------------------------------------------
  0x00007f7748fe2800:   push   %rbp
  0x00007f7748fe2801:   mov    %rsp,%rbp
  0x00007f7748fe2804:   pushfq 
  0x00007f7748fe2805:   sub    $0x8,%rsp
  0x00007f7748fe2809:   sub    $0x80,%rsp
  0x00007f7748fe2810:   mov    %rax,0x78(%rsp)
  0x00007f7748fe2815:   mov    %rcx,0x70(%rsp)
  0x00007f7748fe281a:   mov    %rdx,0x68(%rsp)
  0x00007f7748fe281f:   mov    %rbx,0x60(%rsp)
  0x00007f7748fe2824:   mov    %rbp,0x50(%rsp)
  0x00007f7748fe2829:   mov    %rsi,0x48(%rsp)
  0x00007f7748fe282e:   mov    %rdi,0x40(%rsp)
  0x00007f7748fe2833:   mov    %r8,0x38(%rsp)
  0x00007f7748fe2838:   mov    %r9,0x30(%rsp)
  0x00007f7748fe283d:   mov    %r10,0x28(%rsp)
  0x00007f7748fe2842:   mov    %r11,0x20(%rsp)
  0x00007f7748fe2847:   mov    %r12,0x18(%rsp)
  0x00007f7748fe284c:   mov    %r13,0x10(%rsp)
  0x00007f7748fe2851:   mov    %r14,0x8(%rsp)
  0x00007f7748fe2856:   mov    %r15,(%rsp)
  0x00007f7748fe285a:   sub    $0xa80,%rsp
  0x00007f7748fe2861:   fxsave64 (%rsp)
  0x00007f7748fe2866:   vzeroupper 
  0x00007f7748fe2869:   vzeroupper 
  0x00007f7748fe286c:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fe2873:   mov    %r15,%rdi
  0x00007f7748fe2876:   callq  0x00007f774cfc1730 = SharedRuntime::resolve_opt_virtual_call_C(JavaThread*)
  0x00007f7748fe287b:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fe2886:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fe2891:   vzeroupper 
  0x00007f7748fe2894:   cmpq   $0x0,0x8(%r15)
  0x00007f7748fe2899:   jne    0x00007f7748fe2929
  0x00007f7748fe289f:   mov    0x320(%r15),%rbx
  0x00007f7748fe28a6:   movq   $0x0,0x320(%r15)
  0x00007f7748fe28b1:   mov    %rbx,0xae0(%rsp)
  0x00007f7748fe28b9:   mov    %rax,0xaf8(%rsp)
  0x00007f7748fe28c1:   vzeroupper 
  0x00007f7748fe28c4:   fxrstor64 (%rsp)
  0x00007f7748fe28c9:   add    $0xa80,%rsp
  0x00007f7748fe28d0:   mov    (%rsp),%r15
  0x00007f7748fe28d4:   mov    0x8(%rsp),%r14
  0x00007f7748fe28d9:   mov    0x10(%rsp),%r13
  0x00007f7748fe28de:   mov    0x18(%rsp),%r12
  0x00007f7748fe28e3:   mov    0x20(%rsp),%r11
  0x00007f7748fe28e8:   mov    0x28(%rsp),%r10
  0x00007f7748fe28ed:   mov    0x30(%rsp),%r9
  0x00007f7748fe28f2:   mov    0x38(%rsp),%r8
  0x00007f7748fe28f7:   mov    0x40(%rsp),%rdi
  0x00007f7748fe28fc:   mov    0x48(%rsp),%rsi
  0x00007f7748fe2901:   mov    0x50(%rsp),%rbp
  0x00007f7748fe2906:   mov    0x60(%rsp),%rbx
  0x00007f7748fe290b:   mov    0x68(%rsp),%rdx
  0x00007f7748fe2910:   mov    0x70(%rsp),%rcx
  0x00007f7748fe2915:   mov    0x78(%rsp),%rax
  0x00007f7748fe291a:   add    $0x80,%rsp
  0x00007f7748fe2921:   add    $0x8,%rsp
  0x00007f7748fe2925:   popfq  
  0x00007f7748fe2926:   pop    %rbp
  0x00007f7748fe2927:   jmpq   *%rax
  0x00007f7748fe2929:   vzeroupper 
  0x00007f7748fe292c:   fxrstor64 (%rsp)
  0x00007f7748fe2931:   add    $0xa80,%rsp
  0x00007f7748fe2938:   mov    (%rsp),%r15
  0x00007f7748fe293c:   mov    0x8(%rsp),%r14
  0x00007f7748fe2941:   mov    0x10(%rsp),%r13
  0x00007f7748fe2946:   mov    0x18(%rsp),%r12
  0x00007f7748fe294b:   mov    0x20(%rsp),%r11
  0x00007f7748fe2950:   mov    0x28(%rsp),%r10
  0x00007f7748fe2955:   mov    0x30(%rsp),%r9
  0x00007f7748fe295a:   mov    0x38(%rsp),%r8
  0x00007f7748fe295f:   mov    0x40(%rsp),%rdi
  0x00007f7748fe2964:   mov    0x48(%rsp),%rsi
  0x00007f7748fe2969:   mov    0x50(%rsp),%rbp
  0x00007f7748fe296e:   mov    0x60(%rsp),%rbx
  0x00007f7748fe2973:   mov    0x68(%rsp),%rdx
  0x00007f7748fe2978:   mov    0x70(%rsp),%rcx
  0x00007f7748fe297d:   mov    0x78(%rsp),%rax
  0x00007f7748fe2982:   add    $0x80,%rsp
  0x00007f7748fe2989:   add    $0x8,%rsp
  0x00007f7748fe298d:   popfq  
  0x00007f7748fe298e:   pop    %rbp
  0x00007f7748fe298f:   movq   $0x0,0x318(%r15)
  0x00007f7748fe299a:   mov    0x8(%r15),%rax
  0x00007f7748fe299e:   jmpq   0x00007f7748f7fc00
  0x00007f7748fe29a3:   hlt    
  0x00007f7748fe29a4:   hlt    
  0x00007f7748fe29a5:   hlt    
  0x00007f7748fe29a6:   hlt    
  0x00007f7748fe29a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_virtual_call 0x00007f7748fe2a90
--------------------------------------------------------------------------------
  0x00007f7748fe2b00:   push   %rbp
  0x00007f7748fe2b01:   mov    %rsp,%rbp
  0x00007f7748fe2b04:   pushfq 
  0x00007f7748fe2b05:   sub    $0x8,%rsp
  0x00007f7748fe2b09:   sub    $0x80,%rsp
  0x00007f7748fe2b10:   mov    %rax,0x78(%rsp)
  0x00007f7748fe2b15:   mov    %rcx,0x70(%rsp)
  0x00007f7748fe2b1a:   mov    %rdx,0x68(%rsp)
  0x00007f7748fe2b1f:   mov    %rbx,0x60(%rsp)
  0x00007f7748fe2b24:   mov    %rbp,0x50(%rsp)
  0x00007f7748fe2b29:   mov    %rsi,0x48(%rsp)
  0x00007f7748fe2b2e:   mov    %rdi,0x40(%rsp)
  0x00007f7748fe2b33:   mov    %r8,0x38(%rsp)
  0x00007f7748fe2b38:   mov    %r9,0x30(%rsp)
  0x00007f7748fe2b3d:   mov    %r10,0x28(%rsp)
  0x00007f7748fe2b42:   mov    %r11,0x20(%rsp)
  0x00007f7748fe2b47:   mov    %r12,0x18(%rsp)
  0x00007f7748fe2b4c:   mov    %r13,0x10(%rsp)
  0x00007f7748fe2b51:   mov    %r14,0x8(%rsp)
  0x00007f7748fe2b56:   mov    %r15,(%rsp)
  0x00007f7748fe2b5a:   sub    $0xa80,%rsp
  0x00007f7748fe2b61:   fxsave64 (%rsp)
  0x00007f7748fe2b66:   vzeroupper 
  0x00007f7748fe2b69:   vzeroupper 
  0x00007f7748fe2b6c:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fe2b73:   mov    %r15,%rdi
  0x00007f7748fe2b76:   callq  0x00007f774cfc1570 = SharedRuntime::resolve_virtual_call_C(JavaThread*)
  0x00007f7748fe2b7b:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fe2b86:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fe2b91:   vzeroupper 
  0x00007f7748fe2b94:   cmpq   $0x0,0x8(%r15)
  0x00007f7748fe2b99:   jne    0x00007f7748fe2c29
  0x00007f7748fe2b9f:   mov    0x320(%r15),%rbx
  0x00007f7748fe2ba6:   movq   $0x0,0x320(%r15)
  0x00007f7748fe2bb1:   mov    %rbx,0xae0(%rsp)
  0x00007f7748fe2bb9:   mov    %rax,0xaf8(%rsp)
  0x00007f7748fe2bc1:   vzeroupper 
  0x00007f7748fe2bc4:   fxrstor64 (%rsp)
  0x00007f7748fe2bc9:   add    $0xa80,%rsp
  0x00007f7748fe2bd0:   mov    (%rsp),%r15
  0x00007f7748fe2bd4:   mov    0x8(%rsp),%r14
  0x00007f7748fe2bd9:   mov    0x10(%rsp),%r13
  0x00007f7748fe2bde:   mov    0x18(%rsp),%r12
  0x00007f7748fe2be3:   mov    0x20(%rsp),%r11
  0x00007f7748fe2be8:   mov    0x28(%rsp),%r10
  0x00007f7748fe2bed:   mov    0x30(%rsp),%r9
  0x00007f7748fe2bf2:   mov    0x38(%rsp),%r8
  0x00007f7748fe2bf7:   mov    0x40(%rsp),%rdi
  0x00007f7748fe2bfc:   mov    0x48(%rsp),%rsi
  0x00007f7748fe2c01:   mov    0x50(%rsp),%rbp
  0x00007f7748fe2c06:   mov    0x60(%rsp),%rbx
  0x00007f7748fe2c0b:   mov    0x68(%rsp),%rdx
  0x00007f7748fe2c10:   mov    0x70(%rsp),%rcx
  0x00007f7748fe2c15:   mov    0x78(%rsp),%rax
  0x00007f7748fe2c1a:   add    $0x80,%rsp
  0x00007f7748fe2c21:   add    $0x8,%rsp
  0x00007f7748fe2c25:   popfq  
  0x00007f7748fe2c26:   pop    %rbp
  0x00007f7748fe2c27:   jmpq   *%rax
  0x00007f7748fe2c29:   vzeroupper 
  0x00007f7748fe2c2c:   fxrstor64 (%rsp)
  0x00007f7748fe2c31:   add    $0xa80,%rsp
  0x00007f7748fe2c38:   mov    (%rsp),%r15
  0x00007f7748fe2c3c:   mov    0x8(%rsp),%r14
  0x00007f7748fe2c41:   mov    0x10(%rsp),%r13
  0x00007f7748fe2c46:   mov    0x18(%rsp),%r12
  0x00007f7748fe2c4b:   mov    0x20(%rsp),%r11
  0x00007f7748fe2c50:   mov    0x28(%rsp),%r10
  0x00007f7748fe2c55:   mov    0x30(%rsp),%r9
  0x00007f7748fe2c5a:   mov    0x38(%rsp),%r8
  0x00007f7748fe2c5f:   mov    0x40(%rsp),%rdi
  0x00007f7748fe2c64:   mov    0x48(%rsp),%rsi
  0x00007f7748fe2c69:   mov    0x50(%rsp),%rbp
  0x00007f7748fe2c6e:   mov    0x60(%rsp),%rbx
  0x00007f7748fe2c73:   mov    0x68(%rsp),%rdx
  0x00007f7748fe2c78:   mov    0x70(%rsp),%rcx
  0x00007f7748fe2c7d:   mov    0x78(%rsp),%rax
  0x00007f7748fe2c82:   add    $0x80,%rsp
  0x00007f7748fe2c89:   add    $0x8,%rsp
  0x00007f7748fe2c8d:   popfq  
  0x00007f7748fe2c8e:   pop    %rbp
  0x00007f7748fe2c8f:   movq   $0x0,0x318(%r15)
  0x00007f7748fe2c9a:   mov    0x8(%r15),%rax
  0x00007f7748fe2c9e:   jmpq   0x00007f7748f7fc00
  0x00007f7748fe2ca3:   hlt    
  0x00007f7748fe2ca4:   hlt    
  0x00007f7748fe2ca5:   hlt    
  0x00007f7748fe2ca6:   hlt    
  0x00007f7748fe2ca7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_static_call 0x00007f7748fe2d90
--------------------------------------------------------------------------------
  0x00007f7748fe2e00:   push   %rbp
  0x00007f7748fe2e01:   mov    %rsp,%rbp
  0x00007f7748fe2e04:   pushfq 
  0x00007f7748fe2e05:   sub    $0x8,%rsp
  0x00007f7748fe2e09:   sub    $0x80,%rsp
  0x00007f7748fe2e10:   mov    %rax,0x78(%rsp)
  0x00007f7748fe2e15:   mov    %rcx,0x70(%rsp)
  0x00007f7748fe2e1a:   mov    %rdx,0x68(%rsp)
  0x00007f7748fe2e1f:   mov    %rbx,0x60(%rsp)
  0x00007f7748fe2e24:   mov    %rbp,0x50(%rsp)
  0x00007f7748fe2e29:   mov    %rsi,0x48(%rsp)
  0x00007f7748fe2e2e:   mov    %rdi,0x40(%rsp)
  0x00007f7748fe2e33:   mov    %r8,0x38(%rsp)
  0x00007f7748fe2e38:   mov    %r9,0x30(%rsp)
  0x00007f7748fe2e3d:   mov    %r10,0x28(%rsp)
  0x00007f7748fe2e42:   mov    %r11,0x20(%rsp)
  0x00007f7748fe2e47:   mov    %r12,0x18(%rsp)
  0x00007f7748fe2e4c:   mov    %r13,0x10(%rsp)
  0x00007f7748fe2e51:   mov    %r14,0x8(%rsp)
  0x00007f7748fe2e56:   mov    %r15,(%rsp)
  0x00007f7748fe2e5a:   sub    $0xa80,%rsp
  0x00007f7748fe2e61:   fxsave64 (%rsp)
  0x00007f7748fe2e66:   vzeroupper 
  0x00007f7748fe2e69:   vzeroupper 
  0x00007f7748fe2e6c:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fe2e73:   mov    %r15,%rdi
  0x00007f7748fe2e76:   callq  0x00007f774cfc12e0 = SharedRuntime::resolve_static_call_C(JavaThread*)
  0x00007f7748fe2e7b:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fe2e86:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fe2e91:   vzeroupper 
  0x00007f7748fe2e94:   cmpq   $0x0,0x8(%r15)
  0x00007f7748fe2e99:   jne    0x00007f7748fe2f29
  0x00007f7748fe2e9f:   mov    0x320(%r15),%rbx
  0x00007f7748fe2ea6:   movq   $0x0,0x320(%r15)
  0x00007f7748fe2eb1:   mov    %rbx,0xae0(%rsp)
  0x00007f7748fe2eb9:   mov    %rax,0xaf8(%rsp)
  0x00007f7748fe2ec1:   vzeroupper 
  0x00007f7748fe2ec4:   fxrstor64 (%rsp)
  0x00007f7748fe2ec9:   add    $0xa80,%rsp
  0x00007f7748fe2ed0:   mov    (%rsp),%r15
  0x00007f7748fe2ed4:   mov    0x8(%rsp),%r14
  0x00007f7748fe2ed9:   mov    0x10(%rsp),%r13
  0x00007f7748fe2ede:   mov    0x18(%rsp),%r12
  0x00007f7748fe2ee3:   mov    0x20(%rsp),%r11
  0x00007f7748fe2ee8:   mov    0x28(%rsp),%r10
  0x00007f7748fe2eed:   mov    0x30(%rsp),%r9
  0x00007f7748fe2ef2:   mov    0x38(%rsp),%r8
  0x00007f7748fe2ef7:   mov    0x40(%rsp),%rdi
  0x00007f7748fe2efc:   mov    0x48(%rsp),%rsi
  0x00007f7748fe2f01:   mov    0x50(%rsp),%rbp
  0x00007f7748fe2f06:   mov    0x60(%rsp),%rbx
  0x00007f7748fe2f0b:   mov    0x68(%rsp),%rdx
  0x00007f7748fe2f10:   mov    0x70(%rsp),%rcx
  0x00007f7748fe2f15:   mov    0x78(%rsp),%rax
  0x00007f7748fe2f1a:   add    $0x80,%rsp
  0x00007f7748fe2f21:   add    $0x8,%rsp
  0x00007f7748fe2f25:   popfq  
  0x00007f7748fe2f26:   pop    %rbp
  0x00007f7748fe2f27:   jmpq   *%rax
  0x00007f7748fe2f29:   vzeroupper 
  0x00007f7748fe2f2c:   fxrstor64 (%rsp)
  0x00007f7748fe2f31:   add    $0xa80,%rsp
  0x00007f7748fe2f38:   mov    (%rsp),%r15
  0x00007f7748fe2f3c:   mov    0x8(%rsp),%r14
  0x00007f7748fe2f41:   mov    0x10(%rsp),%r13
  0x00007f7748fe2f46:   mov    0x18(%rsp),%r12
  0x00007f7748fe2f4b:   mov    0x20(%rsp),%r11
  0x00007f7748fe2f50:   mov    0x28(%rsp),%r10
  0x00007f7748fe2f55:   mov    0x30(%rsp),%r9
  0x00007f7748fe2f5a:   mov    0x38(%rsp),%r8
  0x00007f7748fe2f5f:   mov    0x40(%rsp),%rdi
  0x00007f7748fe2f64:   mov    0x48(%rsp),%rsi
  0x00007f7748fe2f69:   mov    0x50(%rsp),%rbp
  0x00007f7748fe2f6e:   mov    0x60(%rsp),%rbx
  0x00007f7748fe2f73:   mov    0x68(%rsp),%rdx
  0x00007f7748fe2f78:   mov    0x70(%rsp),%rcx
  0x00007f7748fe2f7d:   mov    0x78(%rsp),%rax
  0x00007f7748fe2f82:   add    $0x80,%rsp
  0x00007f7748fe2f89:   add    $0x8,%rsp
  0x00007f7748fe2f8d:   popfq  
  0x00007f7748fe2f8e:   pop    %rbp
  0x00007f7748fe2f8f:   movq   $0x0,0x318(%r15)
  0x00007f7748fe2f9a:   mov    0x8(%r15),%rax
  0x00007f7748fe2f9e:   jmpq   0x00007f7748f7fc00
  0x00007f7748fe2fa3:   hlt    
  0x00007f7748fe2fa4:   hlt    
  0x00007f7748fe2fa5:   hlt    
  0x00007f7748fe2fa6:   hlt    
  0x00007f7748fe2fa7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007f7748fe8c90
--------------------------------------------------------------------------------
  0x00007f7748fe8d00:   push   %rbx
  0x00007f7748fe8d01:   push   %rbp
  0x00007f7748fe8d02:   mov    %rsp,%rbp
  0x00007f7748fe8d05:   pushfq 
  0x00007f7748fe8d06:   sub    $0x8,%rsp
  0x00007f7748fe8d0a:   sub    $0x80,%rsp
  0x00007f7748fe8d11:   mov    %rax,0x78(%rsp)
  0x00007f7748fe8d16:   mov    %rcx,0x70(%rsp)
  0x00007f7748fe8d1b:   mov    %rdx,0x68(%rsp)
  0x00007f7748fe8d20:   mov    %rbx,0x60(%rsp)
  0x00007f7748fe8d25:   mov    %rbp,0x50(%rsp)
  0x00007f7748fe8d2a:   mov    %rsi,0x48(%rsp)
  0x00007f7748fe8d2f:   mov    %rdi,0x40(%rsp)
  0x00007f7748fe8d34:   mov    %r8,0x38(%rsp)
  0x00007f7748fe8d39:   mov    %r9,0x30(%rsp)
  0x00007f7748fe8d3e:   mov    %r10,0x28(%rsp)
  0x00007f7748fe8d43:   mov    %r11,0x20(%rsp)
  0x00007f7748fe8d48:   mov    %r12,0x18(%rsp)
  0x00007f7748fe8d4d:   mov    %r13,0x10(%rsp)
  0x00007f7748fe8d52:   mov    %r14,0x8(%rsp)
  0x00007f7748fe8d57:   mov    %r15,(%rsp)
  0x00007f7748fe8d5b:   sub    $0xa80,%rsp
  0x00007f7748fe8d62:   fxsave64 (%rsp)
  0x00007f7748fe8d67:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007f7748fe8d72:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007f7748fe8d7d:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007f7748fe8d88:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007f7748fe8d93:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007f7748fe8d9e:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007f7748fe8da9:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007f7748fe8db4:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007f7748fe8dbf:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007f7748fe8dca:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007f7748fe8dd5:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007f7748fe8de0:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007f7748fe8deb:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007f7748fe8df6:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007f7748fe8e01:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007f7748fe8e0c:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007f7748fe8e17:   vzeroupper 
  0x00007f7748fe8e1a:   vzeroupper 
  0x00007f7748fe8e1d:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fe8e24:   mov    0x390(%r15),%rbx
  0x00007f7748fe8e2b:   mov    %rbx,0x8(%rbp)
  0x00007f7748fe8e2f:   mov    %r15,%rdi
  0x00007f7748fe8e32:   callq  0x00007f774cfae2e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007f7748fe8e37:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fe8e42:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fe8e4d:   vzeroupper 
  0x00007f7748fe8e50:   cmpq   $0x0,0x8(%r15)
  0x00007f7748fe8e55:   je     0x00007f7748fe8f76
  0x00007f7748fe8e5b:   vzeroupper 
  0x00007f7748fe8e5e:   vinsertf128 $0x1,0x240(%rsp),%ymm0,%ymm0
  0x00007f7748fe8e69:   vinsertf128 $0x1,0x250(%rsp),%ymm1,%ymm1
  0x00007f7748fe8e74:   vinsertf128 $0x1,0x260(%rsp),%ymm2,%ymm2
  0x00007f7748fe8e7f:   vinsertf128 $0x1,0x270(%rsp),%ymm3,%ymm3
  0x00007f7748fe8e8a:   vinsertf128 $0x1,0x280(%rsp),%ymm4,%ymm4
  0x00007f7748fe8e95:   vinsertf128 $0x1,0x290(%rsp),%ymm5,%ymm5
  0x00007f7748fe8ea0:   vinsertf128 $0x1,0x2a0(%rsp),%ymm6,%ymm6
  0x00007f7748fe8eab:   vinsertf128 $0x1,0x2b0(%rsp),%ymm7,%ymm7
  0x00007f7748fe8eb6:   vinsertf128 $0x1,0x2c0(%rsp),%ymm8,%ymm8
  0x00007f7748fe8ec1:   vinsertf128 $0x1,0x2d0(%rsp),%ymm9,%ymm9
  0x00007f7748fe8ecc:   vinsertf128 $0x1,0x2e0(%rsp),%ymm10,%ymm10
  0x00007f7748fe8ed7:   vinsertf128 $0x1,0x2f0(%rsp),%ymm11,%ymm11
  0x00007f7748fe8ee2:   vinsertf128 $0x1,0x300(%rsp),%ymm12,%ymm12
  0x00007f7748fe8eed:   vinsertf128 $0x1,0x310(%rsp),%ymm13,%ymm13
  0x00007f7748fe8ef8:   vinsertf128 $0x1,0x320(%rsp),%ymm14,%ymm14
  0x00007f7748fe8f03:   vinsertf128 $0x1,0x330(%rsp),%ymm15,%ymm15
  0x00007f7748fe8f0e:   fxrstor64 (%rsp)
  0x00007f7748fe8f13:   add    $0xa80,%rsp
  0x00007f7748fe8f1a:   mov    (%rsp),%r15
  0x00007f7748fe8f1e:   mov    0x8(%rsp),%r14
  0x00007f7748fe8f23:   mov    0x10(%rsp),%r13
  0x00007f7748fe8f28:   mov    0x18(%rsp),%r12
  0x00007f7748fe8f2d:   mov    0x20(%rsp),%r11
  0x00007f7748fe8f32:   mov    0x28(%rsp),%r10
  0x00007f7748fe8f37:   mov    0x30(%rsp),%r9
  0x00007f7748fe8f3c:   mov    0x38(%rsp),%r8
  0x00007f7748fe8f41:   mov    0x40(%rsp),%rdi
  0x00007f7748fe8f46:   mov    0x48(%rsp),%rsi
  0x00007f7748fe8f4b:   mov    0x50(%rsp),%rbp
  0x00007f7748fe8f50:   mov    0x60(%rsp),%rbx
  0x00007f7748fe8f55:   mov    0x68(%rsp),%rdx
  0x00007f7748fe8f5a:   mov    0x70(%rsp),%rcx
  0x00007f7748fe8f5f:   mov    0x78(%rsp),%rax
  0x00007f7748fe8f64:   add    $0x80,%rsp
  0x00007f7748fe8f6b:   add    $0x8,%rsp
  0x00007f7748fe8f6f:   popfq  
  0x00007f7748fe8f70:   pop    %rbp
  0x00007f7748fe8f71:   jmpq   0x00007f7748f7fc00
  0x00007f7748fe8f76:   cmp    0x8(%rbp),%rbx
  0x00007f7748fe8f7a:   jne    0x00007f7748fe8fac
  0x00007f7748fe8f7c:   cmpb   $0x41,(%rbx)
  0x00007f7748fe8f7f:   jne    0x00007f7748fe8f89
  0x00007f7748fe8f85:   add    $0x1,%rbx
  0x00007f7748fe8f89:   movzbq 0x1(%rbx),%rcx
  0x00007f7748fe8f8e:   and    $0x7,%rcx
  0x00007f7748fe8f92:   sub    $0x4,%rcx
  0x00007f7748fe8f96:   cmp    $0x1,%rcx
  0x00007f7748fe8f9a:   ja     0x00007f7748fe8fa4
  0x00007f7748fe8fa0:   add    $0x1,%rbx
  0x00007f7748fe8fa4:   add    $0x2,%rbx
  0x00007f7748fe8fa8:   mov    %rbx,0x8(%rbp)
  0x00007f7748fe8fac:   vzeroupper 
  0x00007f7748fe8faf:   vinsertf128 $0x1,0x240(%rsp),%ymm0,%ymm0
  0x00007f7748fe8fba:   vinsertf128 $0x1,0x250(%rsp),%ymm1,%ymm1
  0x00007f7748fe8fc5:   vinsertf128 $0x1,0x260(%rsp),%ymm2,%ymm2
  0x00007f7748fe8fd0:   vinsertf128 $0x1,0x270(%rsp),%ymm3,%ymm3
  0x00007f7748fe8fdb:   vinsertf128 $0x1,0x280(%rsp),%ymm4,%ymm4
  0x00007f7748fe8fe6:   vinsertf128 $0x1,0x290(%rsp),%ymm5,%ymm5
  0x00007f7748fe8ff1:   vinsertf128 $0x1,0x2a0(%rsp),%ymm6,%ymm6
  0x00007f7748fe8ffc:   vinsertf128 $0x1,0x2b0(%rsp),%ymm7,%ymm7
  0x00007f7748fe9007:   vinsertf128 $0x1,0x2c0(%rsp),%ymm8,%ymm8
  0x00007f7748fe9012:   vinsertf128 $0x1,0x2d0(%rsp),%ymm9,%ymm9
  0x00007f7748fe901d:   vinsertf128 $0x1,0x2e0(%rsp),%ymm10,%ymm10
  0x00007f7748fe9028:   vinsertf128 $0x1,0x2f0(%rsp),%ymm11,%ymm11
  0x00007f7748fe9033:   vinsertf128 $0x1,0x300(%rsp),%ymm12,%ymm12
  0x00007f7748fe903e:   vinsertf128 $0x1,0x310(%rsp),%ymm13,%ymm13
  0x00007f7748fe9049:   vinsertf128 $0x1,0x320(%rsp),%ymm14,%ymm14
  0x00007f7748fe9054:   vinsertf128 $0x1,0x330(%rsp),%ymm15,%ymm15
  0x00007f7748fe905f:   fxrstor64 (%rsp)
  0x00007f7748fe9064:   add    $0xa80,%rsp
  0x00007f7748fe906b:   mov    (%rsp),%r15
  0x00007f7748fe906f:   mov    0x8(%rsp),%r14
  0x00007f7748fe9074:   mov    0x10(%rsp),%r13
  0x00007f7748fe9079:   mov    0x18(%rsp),%r12
  0x00007f7748fe907e:   mov    0x20(%rsp),%r11
  0x00007f7748fe9083:   mov    0x28(%rsp),%r10
  0x00007f7748fe9088:   mov    0x30(%rsp),%r9
  0x00007f7748fe908d:   mov    0x38(%rsp),%r8
  0x00007f7748fe9092:   mov    0x40(%rsp),%rdi
  0x00007f7748fe9097:   mov    0x48(%rsp),%rsi
  0x00007f7748fe909c:   mov    0x50(%rsp),%rbp
  0x00007f7748fe90a1:   mov    0x60(%rsp),%rbx
  0x00007f7748fe90a6:   mov    0x68(%rsp),%rdx
  0x00007f7748fe90ab:   mov    0x70(%rsp),%rcx
  0x00007f7748fe90b0:   mov    0x78(%rsp),%rax
  0x00007f7748fe90b5:   add    $0x80,%rsp
  0x00007f7748fe90bc:   add    $0x8,%rsp
  0x00007f7748fe90c0:   popfq  
  0x00007f7748fe90c1:   pop    %rbp
  0x00007f7748fe90c2:   retq   
  0x00007f7748fe90c3:   hlt    
  0x00007f7748fe90c4:   hlt    
  0x00007f7748fe90c5:   hlt    
  0x00007f7748fe90c6:   hlt    
  0x00007f7748fe90c7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [576]=Callers_xmm0 [592]=Callers_xmm1 [608]=Callers_xmm2 [624]=Callers_xmm3 [640]=Callers_xmm4 [656]=Callers_xmm5 [672]=Callers_xmm6 [688]=Callers_xmm7 [704]=Callers_xmm8 [720]=Callers_xmm9 [736]=Callers_xmm10 [752]=Callers_xmm11 [768]=Callers_xmm12 [784]=Callers_xmm13 [800]=Callers_xmm14 [816]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 311 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007f7748fe9110
--------------------------------------------------------------------------------
  0x00007f7748fe9180:   push   %rbx
  0x00007f7748fe9181:   push   %rbp
  0x00007f7748fe9182:   mov    %rsp,%rbp
  0x00007f7748fe9185:   pushfq 
  0x00007f7748fe9186:   sub    $0x8,%rsp
  0x00007f7748fe918a:   sub    $0x80,%rsp
  0x00007f7748fe9191:   mov    %rax,0x78(%rsp)
  0x00007f7748fe9196:   mov    %rcx,0x70(%rsp)
  0x00007f7748fe919b:   mov    %rdx,0x68(%rsp)
  0x00007f7748fe91a0:   mov    %rbx,0x60(%rsp)
  0x00007f7748fe91a5:   mov    %rbp,0x50(%rsp)
  0x00007f7748fe91aa:   mov    %rsi,0x48(%rsp)
  0x00007f7748fe91af:   mov    %rdi,0x40(%rsp)
  0x00007f7748fe91b4:   mov    %r8,0x38(%rsp)
  0x00007f7748fe91b9:   mov    %r9,0x30(%rsp)
  0x00007f7748fe91be:   mov    %r10,0x28(%rsp)
  0x00007f7748fe91c3:   mov    %r11,0x20(%rsp)
  0x00007f7748fe91c8:   mov    %r12,0x18(%rsp)
  0x00007f7748fe91cd:   mov    %r13,0x10(%rsp)
  0x00007f7748fe91d2:   mov    %r14,0x8(%rsp)
  0x00007f7748fe91d7:   mov    %r15,(%rsp)
  0x00007f7748fe91db:   sub    $0xa80,%rsp
  0x00007f7748fe91e2:   fxsave64 (%rsp)
  0x00007f7748fe91e7:   vzeroupper 
  0x00007f7748fe91ea:   vzeroupper 
  0x00007f7748fe91ed:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fe91f4:   mov    0x390(%r15),%rbx
  0x00007f7748fe91fb:   mov    %rbx,0x8(%rbp)
  0x00007f7748fe91ff:   mov    %r15,%rdi
  0x00007f7748fe9202:   callq  0x00007f774cfae2e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007f7748fe9207:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fe9212:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fe921d:   vzeroupper 
  0x00007f7748fe9220:   cmpq   $0x0,0x8(%r15)
  0x00007f7748fe9225:   je     0x00007f7748fe9296
  0x00007f7748fe922b:   vzeroupper 
  0x00007f7748fe922e:   fxrstor64 (%rsp)
  0x00007f7748fe9233:   add    $0xa80,%rsp
  0x00007f7748fe923a:   mov    (%rsp),%r15
  0x00007f7748fe923e:   mov    0x8(%rsp),%r14
  0x00007f7748fe9243:   mov    0x10(%rsp),%r13
  0x00007f7748fe9248:   mov    0x18(%rsp),%r12
  0x00007f7748fe924d:   mov    0x20(%rsp),%r11
  0x00007f7748fe9252:   mov    0x28(%rsp),%r10
  0x00007f7748fe9257:   mov    0x30(%rsp),%r9
  0x00007f7748fe925c:   mov    0x38(%rsp),%r8
  0x00007f7748fe9261:   mov    0x40(%rsp),%rdi
  0x00007f7748fe9266:   mov    0x48(%rsp),%rsi
  0x00007f7748fe926b:   mov    0x50(%rsp),%rbp
  0x00007f7748fe9270:   mov    0x60(%rsp),%rbx
  0x00007f7748fe9275:   mov    0x68(%rsp),%rdx
  0x00007f7748fe927a:   mov    0x70(%rsp),%rcx
  0x00007f7748fe927f:   mov    0x78(%rsp),%rax
  0x00007f7748fe9284:   add    $0x80,%rsp
  0x00007f7748fe928b:   add    $0x8,%rsp
  0x00007f7748fe928f:   popfq  
  0x00007f7748fe9290:   pop    %rbp
  0x00007f7748fe9291:   jmpq   0x00007f7748f7fc00
  0x00007f7748fe9296:   cmp    0x8(%rbp),%rbx
  0x00007f7748fe929a:   jne    0x00007f7748fe92cc
  0x00007f7748fe929c:   cmpb   $0x41,(%rbx)
  0x00007f7748fe929f:   jne    0x00007f7748fe92a9
  0x00007f7748fe92a5:   add    $0x1,%rbx
  0x00007f7748fe92a9:   movzbq 0x1(%rbx),%rcx
  0x00007f7748fe92ae:   and    $0x7,%rcx
  0x00007f7748fe92b2:   sub    $0x4,%rcx
  0x00007f7748fe92b6:   cmp    $0x1,%rcx
  0x00007f7748fe92ba:   ja     0x00007f7748fe92c4
  0x00007f7748fe92c0:   add    $0x1,%rbx
  0x00007f7748fe92c4:   add    $0x2,%rbx
  0x00007f7748fe92c8:   mov    %rbx,0x8(%rbp)
  0x00007f7748fe92cc:   vzeroupper 
  0x00007f7748fe92cf:   fxrstor64 (%rsp)
  0x00007f7748fe92d4:   add    $0xa80,%rsp
  0x00007f7748fe92db:   mov    (%rsp),%r15
  0x00007f7748fe92df:   mov    0x8(%rsp),%r14
  0x00007f7748fe92e4:   mov    0x10(%rsp),%r13
  0x00007f7748fe92e9:   mov    0x18(%rsp),%r12
  0x00007f7748fe92ee:   mov    0x20(%rsp),%r11
  0x00007f7748fe92f3:   mov    0x28(%rsp),%r10
  0x00007f7748fe92f8:   mov    0x30(%rsp),%r9
  0x00007f7748fe92fd:   mov    0x38(%rsp),%r8
  0x00007f7748fe9302:   mov    0x40(%rsp),%rdi
  0x00007f7748fe9307:   mov    0x48(%rsp),%rsi
  0x00007f7748fe930c:   mov    0x50(%rsp),%rbp
  0x00007f7748fe9311:   mov    0x60(%rsp),%rbx
  0x00007f7748fe9316:   mov    0x68(%rsp),%rdx
  0x00007f7748fe931b:   mov    0x70(%rsp),%rcx
  0x00007f7748fe9320:   mov    0x78(%rsp),%rax
  0x00007f7748fe9325:   add    $0x80,%rsp
  0x00007f7748fe932c:   add    $0x8,%rsp
  0x00007f7748fe9330:   popfq  
  0x00007f7748fe9331:   pop    %rbp
  0x00007f7748fe9332:   retq   
  0x00007f7748fe9333:   hlt    
  0x00007f7748fe9334:   hlt    
  0x00007f7748fe9335:   hlt    
  0x00007f7748fe9336:   hlt    
  0x00007f7748fe9337:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 135 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007f7748fe9410
--------------------------------------------------------------------------------
  0x00007f7748fe9480:   push   %rbp
  0x00007f7748fe9481:   mov    %rsp,%rbp
  0x00007f7748fe9484:   pushfq 
  0x00007f7748fe9485:   sub    $0x8,%rsp
  0x00007f7748fe9489:   sub    $0x80,%rsp
  0x00007f7748fe9490:   mov    %rax,0x78(%rsp)
  0x00007f7748fe9495:   mov    %rcx,0x70(%rsp)
  0x00007f7748fe949a:   mov    %rdx,0x68(%rsp)
  0x00007f7748fe949f:   mov    %rbx,0x60(%rsp)
  0x00007f7748fe94a4:   mov    %rbp,0x50(%rsp)
  0x00007f7748fe94a9:   mov    %rsi,0x48(%rsp)
  0x00007f7748fe94ae:   mov    %rdi,0x40(%rsp)
  0x00007f7748fe94b3:   mov    %r8,0x38(%rsp)
  0x00007f7748fe94b8:   mov    %r9,0x30(%rsp)
  0x00007f7748fe94bd:   mov    %r10,0x28(%rsp)
  0x00007f7748fe94c2:   mov    %r11,0x20(%rsp)
  0x00007f7748fe94c7:   mov    %r12,0x18(%rsp)
  0x00007f7748fe94cc:   mov    %r13,0x10(%rsp)
  0x00007f7748fe94d1:   mov    %r14,0x8(%rsp)
  0x00007f7748fe94d6:   mov    %r15,(%rsp)
  0x00007f7748fe94da:   sub    $0xa80,%rsp
  0x00007f7748fe94e1:   fxsave64 (%rsp)
  0x00007f7748fe94e6:   vzeroupper 
  0x00007f7748fe94e9:   vzeroupper 
  0x00007f7748fe94ec:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fe94f3:   mov    %r15,%rdi
  0x00007f7748fe94f6:   callq  0x00007f774cfae2e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007f7748fe94fb:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fe9506:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fe9511:   vzeroupper 
  0x00007f7748fe9514:   cmpq   $0x0,0x8(%r15)
  0x00007f7748fe9519:   je     0x00007f7748fe958a
  0x00007f7748fe951f:   vzeroupper 
  0x00007f7748fe9522:   fxrstor64 (%rsp)
  0x00007f7748fe9527:   add    $0xa80,%rsp
  0x00007f7748fe952e:   mov    (%rsp),%r15
  0x00007f7748fe9532:   mov    0x8(%rsp),%r14
  0x00007f7748fe9537:   mov    0x10(%rsp),%r13
  0x00007f7748fe953c:   mov    0x18(%rsp),%r12
  0x00007f7748fe9541:   mov    0x20(%rsp),%r11
  0x00007f7748fe9546:   mov    0x28(%rsp),%r10
  0x00007f7748fe954b:   mov    0x30(%rsp),%r9
  0x00007f7748fe9550:   mov    0x38(%rsp),%r8
  0x00007f7748fe9555:   mov    0x40(%rsp),%rdi
  0x00007f7748fe955a:   mov    0x48(%rsp),%rsi
  0x00007f7748fe955f:   mov    0x50(%rsp),%rbp
  0x00007f7748fe9564:   mov    0x60(%rsp),%rbx
  0x00007f7748fe9569:   mov    0x68(%rsp),%rdx
  0x00007f7748fe956e:   mov    0x70(%rsp),%rcx
  0x00007f7748fe9573:   mov    0x78(%rsp),%rax
  0x00007f7748fe9578:   add    $0x80,%rsp
  0x00007f7748fe957f:   add    $0x8,%rsp
  0x00007f7748fe9583:   popfq  
  0x00007f7748fe9584:   pop    %rbp
  0x00007f7748fe9585:   jmpq   0x00007f7748f7fc00
  0x00007f7748fe958a:   vzeroupper 
  0x00007f7748fe958d:   fxrstor64 (%rsp)
  0x00007f7748fe9592:   add    $0xa80,%rsp
  0x00007f7748fe9599:   mov    (%rsp),%r15
  0x00007f7748fe959d:   mov    0x8(%rsp),%r14
  0x00007f7748fe95a2:   mov    0x10(%rsp),%r13
  0x00007f7748fe95a7:   mov    0x18(%rsp),%r12
  0x00007f7748fe95ac:   mov    0x20(%rsp),%r11
  0x00007f7748fe95b1:   mov    0x28(%rsp),%r10
  0x00007f7748fe95b6:   mov    0x30(%rsp),%r9
  0x00007f7748fe95bb:   mov    0x38(%rsp),%r8
  0x00007f7748fe95c0:   mov    0x40(%rsp),%rdi
  0x00007f7748fe95c5:   mov    0x48(%rsp),%rsi
  0x00007f7748fe95ca:   mov    0x50(%rsp),%rbp
  0x00007f7748fe95cf:   mov    0x60(%rsp),%rbx
  0x00007f7748fe95d4:   mov    0x68(%rsp),%rdx
  0x00007f7748fe95d9:   mov    0x70(%rsp),%rcx
  0x00007f7748fe95de:   mov    0x78(%rsp),%rax
  0x00007f7748fe95e3:   add    $0x80,%rsp
  0x00007f7748fe95ea:   add    $0x8,%rsp
  0x00007f7748fe95ee:   popfq  
  0x00007f7748fe95ef:   pop    %rbp
  0x00007f7748fe95f0:   retq   
  0x00007f7748fe95f1:   hlt    
  0x00007f7748fe95f2:   hlt    
  0x00007f7748fe95f3:   hlt    
  0x00007f7748fe95f4:   hlt    
  0x00007f7748fe95f5:   hlt    
  0x00007f7748fe95f6:   hlt    
  0x00007f7748fe95f7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding DeoptimizationBlob 0x00007f7748fe8690
--------------------------------------------------------------------------------
  0x00007f7748fe8720:   push   %rbp
  0x00007f7748fe8721:   mov    %rsp,%rbp
  0x00007f7748fe8724:   pushfq 
  0x00007f7748fe8725:   sub    $0x8,%rsp
  0x00007f7748fe8729:   sub    $0x80,%rsp
  0x00007f7748fe8730:   mov    %rax,0x78(%rsp)
  0x00007f7748fe8735:   mov    %rcx,0x70(%rsp)
  0x00007f7748fe873a:   mov    %rdx,0x68(%rsp)
  0x00007f7748fe873f:   mov    %rbx,0x60(%rsp)
  0x00007f7748fe8744:   mov    %rbp,0x50(%rsp)
  0x00007f7748fe8749:   mov    %rsi,0x48(%rsp)
  0x00007f7748fe874e:   mov    %rdi,0x40(%rsp)
  0x00007f7748fe8753:   mov    %r8,0x38(%rsp)
  0x00007f7748fe8758:   mov    %r9,0x30(%rsp)
  0x00007f7748fe875d:   mov    %r10,0x28(%rsp)
  0x00007f7748fe8762:   mov    %r11,0x20(%rsp)
  0x00007f7748fe8767:   mov    %r12,0x18(%rsp)
  0x00007f7748fe876c:   mov    %r13,0x10(%rsp)
  0x00007f7748fe8771:   mov    %r14,0x8(%rsp)
  0x00007f7748fe8776:   mov    %r15,(%rsp)
  0x00007f7748fe877a:   sub    $0xa80,%rsp
  0x00007f7748fe8781:   fxsave64 (%rsp)
  0x00007f7748fe8786:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007f7748fe8791:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007f7748fe879c:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007f7748fe87a7:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007f7748fe87b2:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007f7748fe87bd:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007f7748fe87c8:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007f7748fe87d3:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007f7748fe87de:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007f7748fe87e9:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007f7748fe87f4:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007f7748fe87ff:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007f7748fe880a:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007f7748fe8815:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007f7748fe8820:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007f7748fe882b:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007f7748fe8836:   vzeroupper 
  0x00007f7748fe8839:   mov    $0x0,%r14d
  0x00007f7748fe883f:   jmpq   0x00007f7748fe8ab0
  0x00007f7748fe8844:   push   %rbp
  0x00007f7748fe8845:   mov    %rsp,%rbp
  0x00007f7748fe8848:   pushfq 
  0x00007f7748fe8849:   sub    $0x8,%rsp
  0x00007f7748fe884d:   sub    $0x80,%rsp
  0x00007f7748fe8854:   mov    %rax,0x78(%rsp)
  0x00007f7748fe8859:   mov    %rcx,0x70(%rsp)
  0x00007f7748fe885e:   mov    %rdx,0x68(%rsp)
  0x00007f7748fe8863:   mov    %rbx,0x60(%rsp)
  0x00007f7748fe8868:   mov    %rbp,0x50(%rsp)
  0x00007f7748fe886d:   mov    %rsi,0x48(%rsp)
  0x00007f7748fe8872:   mov    %rdi,0x40(%rsp)
  0x00007f7748fe8877:   mov    %r8,0x38(%rsp)
  0x00007f7748fe887c:   mov    %r9,0x30(%rsp)
  0x00007f7748fe8881:   mov    %r10,0x28(%rsp)
  0x00007f7748fe8886:   mov    %r11,0x20(%rsp)
  0x00007f7748fe888b:   mov    %r12,0x18(%rsp)
  0x00007f7748fe8890:   mov    %r13,0x10(%rsp)
  0x00007f7748fe8895:   mov    %r14,0x8(%rsp)
  0x00007f7748fe889a:   mov    %r15,(%rsp)
  0x00007f7748fe889e:   sub    $0xa80,%rsp
  0x00007f7748fe88a5:   fxsave64 (%rsp)
  0x00007f7748fe88aa:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007f7748fe88b5:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007f7748fe88c0:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007f7748fe88cb:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007f7748fe88d6:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007f7748fe88e1:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007f7748fe88ec:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007f7748fe88f7:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007f7748fe8902:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007f7748fe890d:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007f7748fe8918:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007f7748fe8923:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007f7748fe892e:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007f7748fe8939:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007f7748fe8944:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007f7748fe894f:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007f7748fe895a:   vzeroupper 
  0x00007f7748fe895d:   mov    $0x3,%r14d
  0x00007f7748fe8963:   jmpq   0x00007f7748fe8ab0
  0x00007f7748fe8968:   mov    %rdx,0x430(%r15)
  0x00007f7748fe896f:   mov    %rax,0x428(%r15)
  0x00007f7748fe8976:   pushq  $0x0
  0x00007f7748fe897b:   push   %rbp
  0x00007f7748fe897c:   mov    %rsp,%rbp
  0x00007f7748fe897f:   pushfq 
  0x00007f7748fe8980:   sub    $0x8,%rsp
  0x00007f7748fe8984:   sub    $0x80,%rsp
  0x00007f7748fe898b:   mov    %rax,0x78(%rsp)
  0x00007f7748fe8990:   mov    %rcx,0x70(%rsp)
  0x00007f7748fe8995:   mov    %rdx,0x68(%rsp)
  0x00007f7748fe899a:   mov    %rbx,0x60(%rsp)
  0x00007f7748fe899f:   mov    %rbp,0x50(%rsp)
  0x00007f7748fe89a4:   mov    %rsi,0x48(%rsp)
  0x00007f7748fe89a9:   mov    %rdi,0x40(%rsp)
  0x00007f7748fe89ae:   mov    %r8,0x38(%rsp)
  0x00007f7748fe89b3:   mov    %r9,0x30(%rsp)
  0x00007f7748fe89b8:   mov    %r10,0x28(%rsp)
  0x00007f7748fe89bd:   mov    %r11,0x20(%rsp)
  0x00007f7748fe89c2:   mov    %r12,0x18(%rsp)
  0x00007f7748fe89c7:   mov    %r13,0x10(%rsp)
  0x00007f7748fe89cc:   mov    %r14,0x8(%rsp)
  0x00007f7748fe89d1:   mov    %r15,(%rsp)
  0x00007f7748fe89d5:   sub    $0xa80,%rsp
  0x00007f7748fe89dc:   fxsave64 (%rsp)
  0x00007f7748fe89e1:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007f7748fe89ec:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007f7748fe89f7:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007f7748fe8a02:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007f7748fe8a0d:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007f7748fe8a18:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007f7748fe8a23:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007f7748fe8a2e:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007f7748fe8a39:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007f7748fe8a44:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007f7748fe8a4f:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007f7748fe8a5a:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007f7748fe8a65:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007f7748fe8a70:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007f7748fe8a7b:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007f7748fe8a86:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007f7748fe8a91:   vzeroupper 
  0x00007f7748fe8a94:   mov    $0x1,%r14d
  0x00007f7748fe8a9a:   mov    0x430(%r15),%rdx
  0x00007f7748fe8aa1:   mov    %rdx,0x8(%rbp)
  0x00007f7748fe8aa5:   movq   $0x0,0x430(%r15)
  0x00007f7748fe8ab0:   vzeroupper 
  0x00007f7748fe8ab3:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fe8aba:   mov    %r15,%rdi
  0x00007f7748fe8abd:   mov    %r14d,%esi
  0x00007f7748fe8ac0:   callq  0x00007f774c8fc170 = Deoptimization::fetch_unroll_info(JavaThread*, int)
  0x00007f7748fe8ac5:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fe8ad0:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fe8adb:   vzeroupper 
  0x00007f7748fe8ade:   mov    %rax,%rdi
  0x00007f7748fe8ae1:   mov    0x3c(%rdi),%r14d
  0x00007f7748fe8ae5:   cmp    $0x1,%r14d
  0x00007f7748fe8ae9:   jne    0x00007f7748fe8b23
  0x00007f7748fe8aef:   mov    0x428(%r15),%rax
  0x00007f7748fe8af6:   mov    0x430(%r15),%rdx
  0x00007f7748fe8afd:   movq   $0x0,0x428(%r15)
  0x00007f7748fe8b08:   movq   $0x0,0x430(%r15)
  0x00007f7748fe8b13:   mov    %rax,0xaf8(%rsp)
  0x00007f7748fe8b1b:   mov    %rdx,0xae8(%rsp)
  0x00007f7748fe8b23:   vmovsd 0xa0(%rsp),%xmm0
  0x00007f7748fe8b2c:   mov    0xaf8(%rsp),%rax
  0x00007f7748fe8b34:   mov    0xae8(%rsp),%rdx
  0x00007f7748fe8b3c:   add    $0xb18,%rsp
  0x00007f7748fe8b43:   mov    (%rdi),%ecx
  0x00007f7748fe8b45:   add    %rcx,%rsp
  0x00007f7748fe8b48:   mov    0x30(%rdi),%rbp
  0x00007f7748fe8b4c:   mov    0x18(%rdi),%rcx
  0x00007f7748fe8b50:   add    $0x8,%rsp
  0x00007f7748fe8b54:   mov    0x10(%rdi),%rsi
  0x00007f7748fe8b58:   mov    0x8(%rdi),%edx
  0x00007f7748fe8b5b:   mov    %rsp,%r8
  0x00007f7748fe8b5e:   mov    0x4(%rdi),%ebx
  0x00007f7748fe8b61:   sub    %rbx,%rsp
  0x00007f7748fe8b64:   mov    (%rsi),%rbx
  0x00007f7748fe8b67:   sub    $0x10,%rbx
  0x00007f7748fe8b6b:   rex.W pushq (%rcx)
  0x00007f7748fe8b6e:   push   %rbp
  0x00007f7748fe8b6f:   mov    %rsp,%rbp
  0x00007f7748fe8b72:   sub    %rbx,%rsp
  0x00007f7748fe8b75:   movq   $0x0,-0x10(%rbp)
  0x00007f7748fe8b7d:   mov    %r8,-0x8(%rbp)
  0x00007f7748fe8b81:   mov    %rsp,%r8
  0x00007f7748fe8b84:   add    $0x8,%rsi
  0x00007f7748fe8b88:   add    $0x8,%rcx
  0x00007f7748fe8b8c:   dec    %edx
  0x00007f7748fe8b8e:   jne    0x00007f7748fe8b64
  0x00007f7748fe8b90:   rex.W pushq (%rcx)
  0x00007f7748fe8b93:   push   %rbp
  0x00007f7748fe8b94:   mov    %rsp,%rbp
  0x00007f7748fe8b97:   sub    $0xb10,%rsp
  0x00007f7748fe8b9e:   vmovsd %xmm0,0xa0(%rsp)
  0x00007f7748fe8ba7:   mov    %rax,0xaf8(%rsp)
  0x00007f7748fe8baf:   vzeroupper 
  0x00007f7748fe8bb2:   mov    %rbp,0x2d0(%r15)
  0x00007f7748fe8bb9:   movabs $0x7f7748fe8baf,%r10
  0x00007f7748fe8bc3:   mov    %r10,0x2c8(%r15)
  0x00007f7748fe8bca:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fe8bd1:   and    $0xfffffffffffffff0,%rsp
  0x00007f7748fe8bd5:   mov    %r15,%rdi
  0x00007f7748fe8bd8:   mov    %r14d,%esi
  0x00007f7748fe8bdb:   callq  0x00007f774c8f4710 = Deoptimization::unpack_frames(JavaThread*, int)
  0x00007f7748fe8be0:   mov    0x2c0(%r15),%rsp
  0x00007f7748fe8be7:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fe8bf2:   movq   $0x0,0x2d0(%r15)
  0x00007f7748fe8bfd:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fe8c08:   vzeroupper 
  0x00007f7748fe8c0b:   vmovsd 0xa0(%rsp),%xmm0
  0x00007f7748fe8c14:   mov    0xaf8(%rsp),%rax
  0x00007f7748fe8c1c:   mov    0xae8(%rsp),%rdx
  0x00007f7748fe8c24:   leaveq 
  0x00007f7748fe8c25:   retq   
  0x00007f7748fe8c26:   hlt    
  0x00007f7748fe8c27:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 2 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [576]=Callers_xmm0 [592]=Callers_xmm1 [608]=Callers_xmm2 [624]=Callers_xmm3 [640]=Callers_xmm4 [656]=Callers_xmm5 [672]=Callers_xmm6 [688]=Callers_xmm7 [704]=Callers_xmm8 [720]=Callers_xmm9 [736]=Callers_xmm10 [752]=Callers_xmm11 [768]=Callers_xmm12 [784]=Callers_xmm13 [800]=Callers_xmm14 [816]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 933 
ImmutableOopMap {} pc offsets: 1167 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding UncommonTrapBlob 0x00007f7748fe8310
--------------------------------------------------------------------------------
  0x00007f7748fe8380:   sub    $0x8,%rsp
  0x00007f7748fe8384:   mov    %rbp,(%rsp)
  0x00007f7748fe8388:   mov    %esi,%esi
  0x00007f7748fe838a:   vzeroupper 
  0x00007f7748fe838d:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fe8394:   mov    %r15,%rdi
  0x00007f7748fe8397:   mov    $0x2,%edx
  0x00007f7748fe839c:   callq  0x00007f774c8fc200 = Deoptimization::uncommon_trap(JavaThread*, int, int)
  0x00007f7748fe83a1:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fe83ac:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fe83b7:   vzeroupper 
  0x00007f7748fe83ba:   mov    %rax,%rdi
  0x00007f7748fe83bd:   add    $0x8,%rsp
  0x00007f7748fe83c1:   mov    (%rdi),%ecx
  0x00007f7748fe83c3:   add    %rcx,%rsp
  0x00007f7748fe83c6:   mov    0x30(%rdi),%rbp
  0x00007f7748fe83ca:   mov    0x18(%rdi),%rcx
  0x00007f7748fe83ce:   add    $0x8,%rsp
  0x00007f7748fe83d2:   mov    0x10(%rdi),%rsi
  0x00007f7748fe83d6:   mov    0x8(%rdi),%edx
  0x00007f7748fe83d9:   mov    %rsp,%r8
  0x00007f7748fe83dc:   mov    0x4(%rdi),%ebx
  0x00007f7748fe83df:   sub    %rbx,%rsp
  0x00007f7748fe83e2:   mov    (%rsi),%rbx
  0x00007f7748fe83e5:   sub    $0x10,%rbx
  0x00007f7748fe83e9:   rex.W pushq (%rcx)
  0x00007f7748fe83ec:   push   %rbp
  0x00007f7748fe83ed:   mov    %rsp,%rbp
  0x00007f7748fe83f0:   sub    %rbx,%rsp
  0x00007f7748fe83f3:   mov    %r8,-0x8(%rbp)
  0x00007f7748fe83f7:   movq   $0x0,-0x10(%rbp)
  0x00007f7748fe83ff:   mov    %rsp,%r8
  0x00007f7748fe8402:   add    $0x8,%rsi
  0x00007f7748fe8406:   add    $0x8,%rcx
  0x00007f7748fe840a:   dec    %edx
  0x00007f7748fe840c:   jne    0x00007f7748fe83e2
  0x00007f7748fe840e:   rex.W pushq (%rcx)
  0x00007f7748fe8411:   push   %rbp
  0x00007f7748fe8412:   mov    %rsp,%rbp
  0x00007f7748fe8415:   sub    $0x0,%rsp
  0x00007f7748fe8419:   vzeroupper 
  0x00007f7748fe841c:   mov    %rbp,0x2d0(%r15)
  0x00007f7748fe8423:   movabs $0x7f7748fe8419,%r10
  0x00007f7748fe842d:   mov    %r10,0x2c8(%r15)
  0x00007f7748fe8434:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fe843b:   and    $0xfffffffffffffff0,%rsp
  0x00007f7748fe843f:   mov    %r15,%rdi
  0x00007f7748fe8442:   mov    $0x2,%esi
  0x00007f7748fe8447:   callq  0x00007f774c8f4710 = Deoptimization::unpack_frames(JavaThread*, int)
  0x00007f7748fe844c:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fe8457:   movq   $0x0,0x2d0(%r15)
  0x00007f7748fe8462:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fe846d:   vzeroupper 
  0x00007f7748fe8470:   leaveq 
  0x00007f7748fe8471:   retq   
  0x00007f7748fe8472:   hlt    
  0x00007f7748fe8473:   hlt    
  0x00007f7748fe8474:   hlt    
  0x00007f7748fe8475:   hlt    
  0x00007f7748fe8476:   hlt    
  0x00007f7748fe8477:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 2 OopMaps

ImmutableOopMap {} pc offsets: 33 153 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - AbstractMethodError throw_exception 0x00007f7748fbeb90
--------------------------------------------------------------------------------
  0x00007f7748fbec00:   push   %rbp
  0x00007f7748fbec01:   mov    %rsp,%rbp
  0x00007f7748fbec04:   sub    $0x0,%rsp
  0x00007f7748fbec08:   vzeroupper 
  0x00007f7748fbec0b:   mov    %rbp,0x2d0(%r15)
  0x00007f7748fbec12:   movabs $0x7f7748fbec08,%r10
  0x00007f7748fbec1c:   mov    %r10,0x2c8(%r15)
  0x00007f7748fbec23:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fbec2a:   and    $0xfffffffffffffff0,%rsp
  0x00007f7748fbec2e:   mov    %r15,%rdi
  0x00007f7748fbec31:   callq  0x00007f774cfc1ea0 = SharedRuntime::throw_AbstractMethodError(JavaThread*)
  0x00007f7748fbec36:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fbec41:   movq   $0x0,0x2d0(%r15)
  0x00007f7748fbec4c:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fbec57:   vzeroupper 
  0x00007f7748fbec5a:   leaveq 
  0x00007f7748fbec5b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - IncompatibleClassChangeError throw_exception 0x00007f7748fbe890
--------------------------------------------------------------------------------
  0x00007f7748fbe900:   push   %rbp
  0x00007f7748fbe901:   mov    %rsp,%rbp
  0x00007f7748fbe904:   sub    $0x0,%rsp
  0x00007f7748fbe908:   vzeroupper 
  0x00007f7748fbe90b:   mov    %rbp,0x2d0(%r15)
  0x00007f7748fbe912:   movabs $0x7f7748fbe908,%r10
  0x00007f7748fbe91c:   mov    %r10,0x2c8(%r15)
  0x00007f7748fbe923:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fbe92a:   and    $0xfffffffffffffff0,%rsp
  0x00007f7748fbe92e:   mov    %r15,%rdi
  0x00007f7748fbe931:   callq  0x00007f774cfc20a0 = SharedRuntime::throw_IncompatibleClassChangeError(JavaThread*)
  0x00007f7748fbe936:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fbe941:   movq   $0x0,0x2d0(%r15)
  0x00007f7748fbe94c:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fbe957:   vzeroupper 
  0x00007f7748fbe95a:   leaveq 
  0x00007f7748fbe95b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - NullPointerException at call throw_exception 0x00007f7748fbe590
--------------------------------------------------------------------------------
  0x00007f7748fbe600:   push   %rbp
  0x00007f7748fbe601:   mov    %rsp,%rbp
  0x00007f7748fbe604:   sub    $0x0,%rsp
  0x00007f7748fbe608:   vzeroupper 
  0x00007f7748fbe60b:   mov    %rbp,0x2d0(%r15)
  0x00007f7748fbe612:   movabs $0x7f7748fbe608,%r10
  0x00007f7748fbe61c:   mov    %r10,0x2c8(%r15)
  0x00007f7748fbe623:   mov    %rsp,0x2c0(%r15)
  0x00007f7748fbe62a:   and    $0xfffffffffffffff0,%rsp
  0x00007f7748fbe62e:   mov    %r15,%rdi
  0x00007f7748fbe631:   callq  0x00007f774cfc1da0 = SharedRuntime::throw_NullPointerException_at_call(JavaThread*)
  0x00007f7748fbe636:   movq   $0x0,0x2c0(%r15)
  0x00007f7748fbe641:   movq   $0x0,0x2d0(%r15)
  0x00007f7748fbe64c:   movq   $0x0,0x2c8(%r15)
  0x00007f7748fbe657:   vzeroupper 
  0x00007f7748fbe65a:   leaveq 
  0x00007f7748fbe65b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_float_sign_mask [0x00007f7748fbf280, 0x00007f7748fbf2c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf280:   (bad)  
  0x00007f7748fbf281:   (bad)  
  0x00007f7748fbf282:   (bad)  
  0x00007f7748fbf283:   jg     Stub::vector_float_sign_mask+4 0x00007f7748fbf284
  0x00007f7748fbf285:   (bad)  
  0x00007f7748fbf286:   (bad)  
  0x00007f7748fbf287:   jg     Stub::vector_float_sign_mask+8 0x00007f7748fbf288
  0x00007f7748fbf289:   (bad)  
  0x00007f7748fbf28a:   (bad)  
  0x00007f7748fbf28b:   jg     Stub::vector_float_sign_mask+12 0x00007f7748fbf28c
  0x00007f7748fbf28d:   (bad)  
  0x00007f7748fbf28e:   (bad)  
  0x00007f7748fbf28f:   jg     Stub::vector_float_sign_mask+16 0x00007f7748fbf290
  0x00007f7748fbf291:   (bad)  
  0x00007f7748fbf292:   (bad)  
  0x00007f7748fbf293:   jg     Stub::vector_float_sign_mask+20 0x00007f7748fbf294
  0x00007f7748fbf295:   (bad)  
  0x00007f7748fbf296:   (bad)  
  0x00007f7748fbf297:   jg     Stub::vector_float_sign_mask+24 0x00007f7748fbf298
  0x00007f7748fbf299:   (bad)  
  0x00007f7748fbf29a:   (bad)  
  0x00007f7748fbf29b:   jg     Stub::vector_float_sign_mask+28 0x00007f7748fbf29c
  0x00007f7748fbf29d:   (bad)  
  0x00007f7748fbf29e:   (bad)  
  0x00007f7748fbf29f:   jg     Stub::vector_float_sign_mask+32 0x00007f7748fbf2a0
  0x00007f7748fbf2a1:   (bad)  
  0x00007f7748fbf2a2:   (bad)  
  0x00007f7748fbf2a3:   jg     Stub::vector_float_sign_mask+36 0x00007f7748fbf2a4
  0x00007f7748fbf2a5:   (bad)  
  0x00007f7748fbf2a6:   (bad)  
  0x00007f7748fbf2a7:   jg     Stub::vector_float_sign_mask+40 0x00007f7748fbf2a8
  0x00007f7748fbf2a9:   (bad)  
  0x00007f7748fbf2aa:   (bad)  
  0x00007f7748fbf2ab:   jg     Stub::vector_float_sign_mask+44 0x00007f7748fbf2ac
  0x00007f7748fbf2ad:   (bad)  
  0x00007f7748fbf2ae:   (bad)  
  0x00007f7748fbf2af:   jg     Stub::vector_float_sign_mask+48 0x00007f7748fbf2b0
  0x00007f7748fbf2b1:   (bad)  
  0x00007f7748fbf2b2:   (bad)  
  0x00007f7748fbf2b3:   jg     Stub::vector_float_sign_mask+52 0x00007f7748fbf2b4
  0x00007f7748fbf2b5:   (bad)  
  0x00007f7748fbf2b6:   (bad)  
  0x00007f7748fbf2b7:   jg     Stub::vector_float_sign_mask+56 0x00007f7748fbf2b8
  0x00007f7748fbf2b9:   (bad)  
  0x00007f7748fbf2ba:   (bad)  
  0x00007f7748fbf2bb:   jg     Stub::vector_float_sign_mask+60 0x00007f7748fbf2bc
  0x00007f7748fbf2bd:   (bad)  
  0x00007f7748fbf2be:   (bad)  
  0x00007f7748fbf2bf:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_float_sign_flip [0x00007f7748fbf2c0, 0x00007f7748fbf300] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf2c0:   add    %al,(%rax)
  0x00007f7748fbf2c2:   add    %al,-0x80000000(%rax)
  0x00007f7748fbf2c8:   add    %al,(%rax)
  0x00007f7748fbf2ca:   add    %al,-0x80000000(%rax)
  0x00007f7748fbf2d0:   add    %al,(%rax)
  0x00007f7748fbf2d2:   add    %al,-0x80000000(%rax)
  0x00007f7748fbf2d8:   add    %al,(%rax)
  0x00007f7748fbf2da:   add    %al,-0x80000000(%rax)
  0x00007f7748fbf2e0:   add    %al,(%rax)
  0x00007f7748fbf2e2:   add    %al,-0x80000000(%rax)
  0x00007f7748fbf2e8:   add    %al,(%rax)
  0x00007f7748fbf2ea:   add    %al,-0x80000000(%rax)
  0x00007f7748fbf2f0:   add    %al,(%rax)
  0x00007f7748fbf2f2:   add    %al,-0x80000000(%rax)
  0x00007f7748fbf2f8:   add    %al,(%rax)
  0x00007f7748fbf2fa:   add    %al,-0x80000000(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_double_sign_mask [0x00007f7748fbf300, 0x00007f7748fbf340] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf300:   (bad)  
  0x00007f7748fbf301:   (bad)  
  0x00007f7748fbf302:   (bad)  
  0x00007f7748fbf303:   (bad)  
  0x00007f7748fbf304:   (bad)  
  0x00007f7748fbf305:   (bad)  
  0x00007f7748fbf306:   (bad)  
  0x00007f7748fbf307:   jg     Stub::vector_double_sign_mask+8 0x00007f7748fbf308
  0x00007f7748fbf309:   (bad)  
  0x00007f7748fbf30a:   (bad)  
  0x00007f7748fbf30b:   (bad)  
  0x00007f7748fbf30c:   (bad)  
  0x00007f7748fbf30d:   (bad)  
  0x00007f7748fbf30e:   (bad)  
  0x00007f7748fbf30f:   jg     Stub::vector_double_sign_mask+16 0x00007f7748fbf310
  0x00007f7748fbf311:   (bad)  
  0x00007f7748fbf312:   (bad)  
  0x00007f7748fbf313:   (bad)  
  0x00007f7748fbf314:   (bad)  
  0x00007f7748fbf315:   (bad)  
  0x00007f7748fbf316:   (bad)  
  0x00007f7748fbf317:   jg     Stub::vector_double_sign_mask+24 0x00007f7748fbf318
  0x00007f7748fbf319:   (bad)  
  0x00007f7748fbf31a:   (bad)  
  0x00007f7748fbf31b:   (bad)  
  0x00007f7748fbf31c:   (bad)  
  0x00007f7748fbf31d:   (bad)  
  0x00007f7748fbf31e:   (bad)  
  0x00007f7748fbf31f:   jg     Stub::vector_double_sign_mask+32 0x00007f7748fbf320
  0x00007f7748fbf321:   (bad)  
  0x00007f7748fbf322:   (bad)  
  0x00007f7748fbf323:   (bad)  
  0x00007f7748fbf324:   (bad)  
  0x00007f7748fbf325:   (bad)  
  0x00007f7748fbf326:   (bad)  
  0x00007f7748fbf327:   jg     Stub::vector_double_sign_mask+40 0x00007f7748fbf328
  0x00007f7748fbf329:   (bad)  
  0x00007f7748fbf32a:   (bad)  
  0x00007f7748fbf32b:   (bad)  
  0x00007f7748fbf32c:   (bad)  
  0x00007f7748fbf32d:   (bad)  
  0x00007f7748fbf32e:   (bad)  
  0x00007f7748fbf32f:   jg     Stub::vector_double_sign_mask+48 0x00007f7748fbf330
  0x00007f7748fbf331:   (bad)  
  0x00007f7748fbf332:   (bad)  
  0x00007f7748fbf333:   (bad)  
  0x00007f7748fbf334:   (bad)  
  0x00007f7748fbf335:   (bad)  
  0x00007f7748fbf336:   (bad)  
  0x00007f7748fbf337:   jg     Stub::vector_double_sign_mask+56 0x00007f7748fbf338
  0x00007f7748fbf339:   (bad)  
  0x00007f7748fbf33a:   (bad)  
  0x00007f7748fbf33b:   (bad)  
  0x00007f7748fbf33c:   (bad)  
  0x00007f7748fbf33d:   (bad)  
  0x00007f7748fbf33e:   (bad)  
  0x00007f7748fbf33f:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_double_sign_flip [0x00007f7748fbf340, 0x00007f7748fbf380] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf340:   add    %al,(%rax)
  0x00007f7748fbf342:   add    %al,(%rax)
  0x00007f7748fbf344:   add    %al,(%rax)
  0x00007f7748fbf346:   add    %al,0x0(%rax)
  0x00007f7748fbf34c:   add    %al,(%rax)
  0x00007f7748fbf34e:   add    %al,0x0(%rax)
  0x00007f7748fbf354:   add    %al,(%rax)
  0x00007f7748fbf356:   add    %al,0x0(%rax)
  0x00007f7748fbf35c:   add    %al,(%rax)
  0x00007f7748fbf35e:   add    %al,0x0(%rax)
  0x00007f7748fbf364:   add    %al,(%rax)
  0x00007f7748fbf366:   add    %al,0x0(%rax)
  0x00007f7748fbf36c:   add    %al,(%rax)
  0x00007f7748fbf36e:   add    %al,0x0(%rax)
  0x00007f7748fbf374:   add    %al,(%rax)
  0x00007f7748fbf376:   add    %al,0x0(%rax)
  0x00007f7748fbf37c:   add    %al,(%rax)
  0x00007f7748fbf37e:   .byte 0x0
  0x00007f7748fbf37f:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_all_bits_set [0x00007f7748fbf380, 0x00007f7748fbf3c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf380:   (bad)  
  0x00007f7748fbf381:   (bad)  
  0x00007f7748fbf382:   (bad)  
  0x00007f7748fbf383:   (bad)  
  0x00007f7748fbf384:   (bad)  
  0x00007f7748fbf385:   (bad)  
  0x00007f7748fbf386:   (bad)  
  0x00007f7748fbf387:   (bad)  
  0x00007f7748fbf388:   (bad)  
  0x00007f7748fbf389:   (bad)  
  0x00007f7748fbf38a:   (bad)  
  0x00007f7748fbf38b:   (bad)  
  0x00007f7748fbf38c:   (bad)  
  0x00007f7748fbf38d:   (bad)  
  0x00007f7748fbf38e:   (bad)  
  0x00007f7748fbf38f:   (bad)  
  0x00007f7748fbf390:   (bad)  
  0x00007f7748fbf391:   (bad)  
  0x00007f7748fbf392:   (bad)  
  0x00007f7748fbf393:   (bad)  
  0x00007f7748fbf394:   (bad)  
  0x00007f7748fbf395:   (bad)  
  0x00007f7748fbf396:   (bad)  
  0x00007f7748fbf397:   (bad)  
  0x00007f7748fbf398:   (bad)  
  0x00007f7748fbf399:   (bad)  
  0x00007f7748fbf39a:   (bad)  
  0x00007f7748fbf39b:   (bad)  
  0x00007f7748fbf39c:   (bad)  
  0x00007f7748fbf39d:   (bad)  
  0x00007f7748fbf39e:   (bad)  
  0x00007f7748fbf39f:   (bad)  
  0x00007f7748fbf3a0:   (bad)  
  0x00007f7748fbf3a1:   (bad)  
  0x00007f7748fbf3a2:   (bad)  
  0x00007f7748fbf3a3:   (bad)  
  0x00007f7748fbf3a4:   (bad)  
  0x00007f7748fbf3a5:   (bad)  
  0x00007f7748fbf3a6:   (bad)  
  0x00007f7748fbf3a7:   (bad)  
  0x00007f7748fbf3a8:   (bad)  
  0x00007f7748fbf3a9:   (bad)  
  0x00007f7748fbf3aa:   (bad)  
  0x00007f7748fbf3ab:   (bad)  
  0x00007f7748fbf3ac:   (bad)  
  0x00007f7748fbf3ad:   (bad)  
  0x00007f7748fbf3ae:   (bad)  
  0x00007f7748fbf3af:   (bad)  
  0x00007f7748fbf3b0:   (bad)  
  0x00007f7748fbf3b1:   (bad)  
  0x00007f7748fbf3b2:   (bad)  
  0x00007f7748fbf3b3:   (bad)  
  0x00007f7748fbf3b4:   (bad)  
  0x00007f7748fbf3b5:   (bad)  
  0x00007f7748fbf3b6:   (bad)  
  0x00007f7748fbf3b7:   (bad)  
  0x00007f7748fbf3b8:   (bad)  
  0x00007f7748fbf3b9:   (bad)  
  0x00007f7748fbf3ba:   (bad)  
  0x00007f7748fbf3bb:   (bad)  
  0x00007f7748fbf3bc:   (bad)  
  0x00007f7748fbf3bd:   (bad)  
  0x00007f7748fbf3be:   (bad)  
  0x00007f7748fbf3bf:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_mask_cmp_bits [0x00007f7748fbf3c0, 0x00007f7748fbf400] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf3c0:   add    %eax,(%rax)
  0x00007f7748fbf3c2:   add    %al,(%rax)
  0x00007f7748fbf3c4:   add    %eax,(%rax)
  0x00007f7748fbf3c6:   add    %al,(%rax)
  0x00007f7748fbf3c8:   add    %eax,(%rax)
  0x00007f7748fbf3ca:   add    %al,(%rax)
  0x00007f7748fbf3cc:   add    %eax,(%rax)
  0x00007f7748fbf3ce:   add    %al,(%rax)
  0x00007f7748fbf3d0:   add    %eax,(%rax)
  0x00007f7748fbf3d2:   add    %al,(%rax)
  0x00007f7748fbf3d4:   add    %eax,(%rax)
  0x00007f7748fbf3d6:   add    %al,(%rax)
  0x00007f7748fbf3d8:   add    %eax,(%rax)
  0x00007f7748fbf3da:   add    %al,(%rax)
  0x00007f7748fbf3dc:   add    %eax,(%rax)
  0x00007f7748fbf3de:   add    %al,(%rax)
  0x00007f7748fbf3e0:   add    %eax,(%rax)
  0x00007f7748fbf3e2:   add    %al,(%rax)
  0x00007f7748fbf3e4:   add    %eax,(%rax)
  0x00007f7748fbf3e6:   add    %al,(%rax)
  0x00007f7748fbf3e8:   add    %eax,(%rax)
  0x00007f7748fbf3ea:   add    %al,(%rax)
  0x00007f7748fbf3ec:   add    %eax,(%rax)
  0x00007f7748fbf3ee:   add    %al,(%rax)
  0x00007f7748fbf3f0:   add    %eax,(%rax)
  0x00007f7748fbf3f2:   add    %al,(%rax)
  0x00007f7748fbf3f4:   add    %eax,(%rax)
  0x00007f7748fbf3f6:   add    %al,(%rax)
  0x00007f7748fbf3f8:   add    %eax,(%rax)
  0x00007f7748fbf3fa:   add    %al,(%rax)
  0x00007f7748fbf3fc:   add    %eax,(%rax)
  0x00007f7748fbf3fe:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_short_to_byte_mask [0x00007f7748fbf400, 0x00007f7748fbf440] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf400:   incl   (%rax)
  0x00007f7748fbf402:   incl   (%rax)
  0x00007f7748fbf404:   incl   (%rax)
  0x00007f7748fbf406:   incl   (%rax)
  0x00007f7748fbf408:   incl   (%rax)
  0x00007f7748fbf40a:   incl   (%rax)
  0x00007f7748fbf40c:   incl   (%rax)
  0x00007f7748fbf40e:   incl   (%rax)
  0x00007f7748fbf410:   incl   (%rax)
  0x00007f7748fbf412:   incl   (%rax)
  0x00007f7748fbf414:   incl   (%rax)
  0x00007f7748fbf416:   incl   (%rax)
  0x00007f7748fbf418:   incl   (%rax)
  0x00007f7748fbf41a:   incl   (%rax)
  0x00007f7748fbf41c:   incl   (%rax)
  0x00007f7748fbf41e:   incl   (%rax)
  0x00007f7748fbf420:   incl   (%rax)
  0x00007f7748fbf422:   incl   (%rax)
  0x00007f7748fbf424:   incl   (%rax)
  0x00007f7748fbf426:   incl   (%rax)
  0x00007f7748fbf428:   incl   (%rax)
  0x00007f7748fbf42a:   incl   (%rax)
  0x00007f7748fbf42c:   incl   (%rax)
  0x00007f7748fbf42e:   incl   (%rax)
  0x00007f7748fbf430:   incl   (%rax)
  0x00007f7748fbf432:   incl   (%rax)
  0x00007f7748fbf434:   incl   (%rax)
  0x00007f7748fbf436:   incl   (%rax)
  0x00007f7748fbf438:   incl   (%rax)
  0x00007f7748fbf43a:   incl   (%rax)
  0x00007f7748fbf43c:   incl   (%rax)
  0x00007f7748fbf43e:   incl   (%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_byte_perm_mask [0x00007f7748fbf440, 0x00007f7748fbf480] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf440:   add    %eax,(%rax)
  0x00007f7748fbf442:   add    %al,(%rax)
  0x00007f7748fbf444:   add    %al,(%rax)
  0x00007f7748fbf446:   add    %al,(%rax)
  0x00007f7748fbf448:   add    (%rax),%eax
  0x00007f7748fbf44a:   add    %al,(%rax)
  0x00007f7748fbf44c:   add    %al,(%rax)
  0x00007f7748fbf44e:   add    %al,(%rax)
  0x00007f7748fbf450:   add    $0x0,%eax
  0x00007f7748fbf455:   add    %al,(%rax)
  0x00007f7748fbf457:   add    %al,(%rdi)
  0x00007f7748fbf459:   add    %al,(%rax)
  0x00007f7748fbf45b:   add    %al,(%rax)
  0x00007f7748fbf45d:   add    %al,(%rax)
  0x00007f7748fbf45f:   add    %al,(%rax)
  0x00007f7748fbf461:   add    %al,(%rax)
  0x00007f7748fbf463:   add    %al,(%rax)
  0x00007f7748fbf465:   add    %al,(%rax)
  0x00007f7748fbf467:   add    %al,(%rdx)
  0x00007f7748fbf469:   add    %al,(%rax)
  0x00007f7748fbf46b:   add    %al,(%rax)
  0x00007f7748fbf46d:   add    %al,(%rax)
  0x00007f7748fbf46f:   add    %al,(%rax,%rax,1)
  0x00007f7748fbf472:   add    %al,(%rax)
  0x00007f7748fbf474:   add    %al,(%rax)
  0x00007f7748fbf476:   add    %al,(%rax)
  0x00007f7748fbf478:   (bad)  
  0x00007f7748fbf479:   add    %al,(%rax)
  0x00007f7748fbf47b:   add    %al,(%rax)
  0x00007f7748fbf47d:   add    %al,(%rax)
  0x00007f7748fbf47f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_to_byte_mask [0x00007f7748fbf480, 0x00007f7748fbf4c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf480:   incl   (%rax)
  0x00007f7748fbf482:   add    %al,(%rax)
  0x00007f7748fbf484:   incl   (%rax)
  0x00007f7748fbf486:   add    %al,(%rax)
  0x00007f7748fbf488:   incl   (%rax)
  0x00007f7748fbf48a:   add    %al,(%rax)
  0x00007f7748fbf48c:   incl   (%rax)
  0x00007f7748fbf48e:   add    %al,(%rax)
  0x00007f7748fbf490:   incl   (%rax)
  0x00007f7748fbf492:   add    %al,(%rax)
  0x00007f7748fbf494:   incl   (%rax)
  0x00007f7748fbf496:   add    %al,(%rax)
  0x00007f7748fbf498:   incl   (%rax)
  0x00007f7748fbf49a:   add    %al,(%rax)
  0x00007f7748fbf49c:   incl   (%rax)
  0x00007f7748fbf49e:   add    %al,(%rax)
  0x00007f7748fbf4a0:   incl   (%rax)
  0x00007f7748fbf4a2:   add    %al,(%rax)
  0x00007f7748fbf4a4:   incl   (%rax)
  0x00007f7748fbf4a6:   add    %al,(%rax)
  0x00007f7748fbf4a8:   incl   (%rax)
  0x00007f7748fbf4aa:   add    %al,(%rax)
  0x00007f7748fbf4ac:   incl   (%rax)
  0x00007f7748fbf4ae:   add    %al,(%rax)
  0x00007f7748fbf4b0:   incl   (%rax)
  0x00007f7748fbf4b2:   add    %al,(%rax)
  0x00007f7748fbf4b4:   incl   (%rax)
  0x00007f7748fbf4b6:   add    %al,(%rax)
  0x00007f7748fbf4b8:   incl   (%rax)
  0x00007f7748fbf4ba:   add    %al,(%rax)
  0x00007f7748fbf4bc:   incl   (%rax)
  0x00007f7748fbf4be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_to_short_mask [0x00007f7748fbf4c0, 0x00007f7748fbf500] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf4c0:   (bad)  
  0x00007f7748fbf4c1:   incl   (%rax)
  0x00007f7748fbf4c3:   add    %bh,%bh
  0x00007f7748fbf4c5:   incl   (%rax)
  0x00007f7748fbf4c7:   add    %bh,%bh
  0x00007f7748fbf4c9:   incl   (%rax)
  0x00007f7748fbf4cb:   add    %bh,%bh
  0x00007f7748fbf4cd:   incl   (%rax)
  0x00007f7748fbf4cf:   add    %bh,%bh
  0x00007f7748fbf4d1:   incl   (%rax)
  0x00007f7748fbf4d3:   add    %bh,%bh
  0x00007f7748fbf4d5:   incl   (%rax)
  0x00007f7748fbf4d7:   add    %bh,%bh
  0x00007f7748fbf4d9:   incl   (%rax)
  0x00007f7748fbf4db:   add    %bh,%bh
  0x00007f7748fbf4dd:   incl   (%rax)
  0x00007f7748fbf4df:   add    %bh,%bh
  0x00007f7748fbf4e1:   incl   (%rax)
  0x00007f7748fbf4e3:   add    %bh,%bh
  0x00007f7748fbf4e5:   incl   (%rax)
  0x00007f7748fbf4e7:   add    %bh,%bh
  0x00007f7748fbf4e9:   incl   (%rax)
  0x00007f7748fbf4eb:   add    %bh,%bh
  0x00007f7748fbf4ed:   incl   (%rax)
  0x00007f7748fbf4ef:   add    %bh,%bh
  0x00007f7748fbf4f1:   incl   (%rax)
  0x00007f7748fbf4f3:   add    %bh,%bh
  0x00007f7748fbf4f5:   incl   (%rax)
  0x00007f7748fbf4f7:   add    %bh,%bh
  0x00007f7748fbf4f9:   incl   (%rax)
  0x00007f7748fbf4fb:   add    %bh,%bh
  0x00007f7748fbf4fd:   incl   (%rax)
  0x00007f7748fbf4ff:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_32_bit_mask [0x00007f7748fbf500, 0x00007f7748fbf540] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf500:   (bad)  
  0x00007f7748fbf501:   (bad)  
  0x00007f7748fbf502:   (bad)  
  0x00007f7748fbf503:   incl   (%rax)
  0x00007f7748fbf505:   add    %al,(%rax)
  0x00007f7748fbf507:   add    %al,(%rax)
  0x00007f7748fbf509:   add    %al,(%rax)
  0x00007f7748fbf50b:   add    %al,(%rax)
  0x00007f7748fbf50d:   add    %al,(%rax)
  0x00007f7748fbf50f:   add    %al,(%rax)
  0x00007f7748fbf511:   add    %al,(%rax)
  0x00007f7748fbf513:   add    %al,(%rax)
  0x00007f7748fbf515:   add    %al,(%rax)
  0x00007f7748fbf517:   add    %al,(%rax)
  0x00007f7748fbf519:   add    %al,(%rax)
  0x00007f7748fbf51b:   add    %al,(%rax)
  0x00007f7748fbf51d:   add    %al,(%rax)
  0x00007f7748fbf51f:   add    %al,(%rax)
  0x00007f7748fbf521:   add    %al,(%rax)
  0x00007f7748fbf523:   add    %al,(%rax)
  0x00007f7748fbf525:   add    %al,(%rax)
  0x00007f7748fbf527:   add    %al,(%rax)
  0x00007f7748fbf529:   add    %al,(%rax)
  0x00007f7748fbf52b:   add    %al,(%rax)
  0x00007f7748fbf52d:   add    %al,(%rax)
  0x00007f7748fbf52f:   add    %al,(%rax)
  0x00007f7748fbf531:   add    %al,(%rax)
  0x00007f7748fbf533:   add    %al,(%rax)
  0x00007f7748fbf535:   add    %al,(%rax)
  0x00007f7748fbf537:   add    %al,(%rax)
  0x00007f7748fbf539:   add    %al,(%rax)
  0x00007f7748fbf53b:   add    %al,(%rax)
  0x00007f7748fbf53d:   add    %al,(%rax)
  0x00007f7748fbf53f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_64_bit_mask [0x00007f7748fbf540, 0x00007f7748fbf580] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf540:   (bad)  
  0x00007f7748fbf541:   (bad)  
  0x00007f7748fbf542:   (bad)  
  0x00007f7748fbf543:   (bad)  
  0x00007f7748fbf544:   (bad)  
  0x00007f7748fbf545:   (bad)  
  0x00007f7748fbf546:   (bad)  
  0x00007f7748fbf547:   incl   (%rax)
  0x00007f7748fbf549:   add    %al,(%rax)
  0x00007f7748fbf54b:   add    %al,(%rax)
  0x00007f7748fbf54d:   add    %al,(%rax)
  0x00007f7748fbf54f:   add    %al,(%rax)
  0x00007f7748fbf551:   add    %al,(%rax)
  0x00007f7748fbf553:   add    %al,(%rax)
  0x00007f7748fbf555:   add    %al,(%rax)
  0x00007f7748fbf557:   add    %al,(%rax)
  0x00007f7748fbf559:   add    %al,(%rax)
  0x00007f7748fbf55b:   add    %al,(%rax)
  0x00007f7748fbf55d:   add    %al,(%rax)
  0x00007f7748fbf55f:   add    %al,(%rax)
  0x00007f7748fbf561:   add    %al,(%rax)
  0x00007f7748fbf563:   add    %al,(%rax)
  0x00007f7748fbf565:   add    %al,(%rax)
  0x00007f7748fbf567:   add    %al,(%rax)
  0x00007f7748fbf569:   add    %al,(%rax)
  0x00007f7748fbf56b:   add    %al,(%rax)
  0x00007f7748fbf56d:   add    %al,(%rax)
  0x00007f7748fbf56f:   add    %al,(%rax)
  0x00007f7748fbf571:   add    %al,(%rax)
  0x00007f7748fbf573:   add    %al,(%rax)
  0x00007f7748fbf575:   add    %al,(%rax)
  0x00007f7748fbf577:   add    %al,(%rax)
  0x00007f7748fbf579:   add    %al,(%rax)
  0x00007f7748fbf57b:   add    %al,(%rax)
  0x00007f7748fbf57d:   add    %al,(%rax)
  0x00007f7748fbf57f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_shuffle_mask [0x00007f7748fbf580, 0x00007f7748fbf5c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf580:   add    %al,(%rcx)
  0x00007f7748fbf582:   add    (%rbx),%al
  0x00007f7748fbf584:   add    %al,(%rcx)
  0x00007f7748fbf586:   add    (%rbx),%al
  0x00007f7748fbf588:   add    %al,(%rcx)
  0x00007f7748fbf58a:   add    (%rbx),%al
  0x00007f7748fbf58c:   add    %al,(%rcx)
  0x00007f7748fbf58e:   add    (%rbx),%al
  0x00007f7748fbf590:   add    %al,(%rcx)
  0x00007f7748fbf592:   add    (%rbx),%al
  0x00007f7748fbf594:   add    %al,(%rcx)
  0x00007f7748fbf596:   add    (%rbx),%al
  0x00007f7748fbf598:   add    %al,(%rcx)
  0x00007f7748fbf59a:   add    (%rbx),%al
  0x00007f7748fbf59c:   add    %al,(%rcx)
  0x00007f7748fbf59e:   add    (%rbx),%al
  0x00007f7748fbf5a0:   add    %al,(%rcx)
  0x00007f7748fbf5a2:   add    (%rbx),%al
  0x00007f7748fbf5a4:   add    %al,(%rcx)
  0x00007f7748fbf5a6:   add    (%rbx),%al
  0x00007f7748fbf5a8:   add    %al,(%rcx)
  0x00007f7748fbf5aa:   add    (%rbx),%al
  0x00007f7748fbf5ac:   add    %al,(%rcx)
  0x00007f7748fbf5ae:   add    (%rbx),%al
  0x00007f7748fbf5b0:   add    %al,(%rcx)
  0x00007f7748fbf5b2:   add    (%rbx),%al
  0x00007f7748fbf5b4:   add    %al,(%rcx)
  0x00007f7748fbf5b6:   add    (%rbx),%al
  0x00007f7748fbf5b8:   add    %al,(%rcx)
  0x00007f7748fbf5ba:   add    (%rbx),%al
  0x00007f7748fbf5bc:   add    %al,(%rcx)
  0x00007f7748fbf5be:   add    (%rbx),%al
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_byte_shuffle_mask [0x00007f7748fbf5c0, 0x00007f7748fbf5e0] (32 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf5c0:   jo     Stub::<unknown> 0x00007f7748fbf632
  0x00007f7748fbf5c2:   jo     Stub::<unknown> 0x00007f7748fbf634
  0x00007f7748fbf5c4:   jo     Stub::<unknown> 0x00007f7748fbf636
  0x00007f7748fbf5c6:   jo     Stub::<unknown> 0x00007f7748fbf638
  0x00007f7748fbf5c8:   jo     Stub::<unknown> 0x00007f7748fbf63a
  0x00007f7748fbf5ca:   jo     Stub::<unknown> 0x00007f7748fbf63c
  0x00007f7748fbf5cc:   jo     Stub::<unknown> 0x00007f7748fbf63e
  0x00007f7748fbf5ce:   jo     Stub::<unknown> 0x00007f7748fbf640
  0x00007f7748fbf5d0:   lock lock lock lock lock lock lock lock lock lock lock lock lock lock
  0x00007f7748fbf5de:   lock
  0x00007f7748fbf5df:   lock
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_short_shuffle_mask [0x00007f7748fbf5e0, 0x00007f7748fbf620] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf5e0:   add    %al,(%rcx)
  0x00007f7748fbf5e2:   add    %al,(%rcx)
  0x00007f7748fbf5e4:   add    %al,(%rcx)
  0x00007f7748fbf5e6:   add    %al,(%rcx)
  0x00007f7748fbf5e8:   add    %al,(%rcx)
  0x00007f7748fbf5ea:   add    %al,(%rcx)
  0x00007f7748fbf5ec:   add    %al,(%rcx)
  0x00007f7748fbf5ee:   add    %al,(%rcx)
  0x00007f7748fbf5f0:   add    %al,(%rcx)
  0x00007f7748fbf5f2:   add    %al,(%rcx)
  0x00007f7748fbf5f4:   add    %al,(%rcx)
  0x00007f7748fbf5f6:   add    %al,(%rcx)
  0x00007f7748fbf5f8:   add    %al,(%rcx)
  0x00007f7748fbf5fa:   add    %al,(%rcx)
  0x00007f7748fbf5fc:   add    %al,(%rcx)
  0x00007f7748fbf5fe:   add    %al,(%rcx)
  0x00007f7748fbf600:   add    %al,(%rcx)
  0x00007f7748fbf602:   add    %al,(%rcx)
  0x00007f7748fbf604:   add    %al,(%rcx)
  0x00007f7748fbf606:   add    %al,(%rcx)
  0x00007f7748fbf608:   add    %al,(%rcx)
  0x00007f7748fbf60a:   add    %al,(%rcx)
  0x00007f7748fbf60c:   add    %al,(%rcx)
  0x00007f7748fbf60e:   add    %al,(%rcx)
  0x00007f7748fbf610:   add    %al,(%rcx)
  0x00007f7748fbf612:   add    %al,(%rcx)
  0x00007f7748fbf614:   add    %al,(%rcx)
  0x00007f7748fbf616:   add    %al,(%rcx)
  0x00007f7748fbf618:   add    %al,(%rcx)
  0x00007f7748fbf61a:   add    %al,(%rcx)
  0x00007f7748fbf61c:   add    %al,(%rcx)
  0x00007f7748fbf61e:   add    %al,(%rcx)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_long_shuffle_mask [0x00007f7748fbf620, 0x00007f7748fbf660] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf620:   add    %al,(%rax)
  0x00007f7748fbf622:   add    %al,(%rax)
  0x00007f7748fbf624:   add    %eax,(%rax)
  0x00007f7748fbf626:   add    %al,(%rax)
  0x00007f7748fbf628:   add    %al,(%rax)
  0x00007f7748fbf62a:   add    %al,(%rax)
  0x00007f7748fbf62c:   add    %eax,(%rax)
  0x00007f7748fbf62e:   add    %al,(%rax)
  0x00007f7748fbf630:   add    %al,(%rax)
  0x00007f7748fbf632:   add    %al,(%rax)
  0x00007f7748fbf634:   add    %eax,(%rax)
  0x00007f7748fbf636:   add    %al,(%rax)
  0x00007f7748fbf638:   add    %al,(%rax)
  0x00007f7748fbf63a:   add    %al,(%rax)
  0x00007f7748fbf63c:   add    %eax,(%rax)
  0x00007f7748fbf63e:   add    %al,(%rax)
  0x00007f7748fbf640:   add    %al,(%rax)
  0x00007f7748fbf642:   add    %al,(%rax)
  0x00007f7748fbf644:   add    %eax,(%rax)
  0x00007f7748fbf646:   add    %al,(%rax)
  0x00007f7748fbf648:   add    %al,(%rax)
  0x00007f7748fbf64a:   add    %al,(%rax)
  0x00007f7748fbf64c:   add    %eax,(%rax)
  0x00007f7748fbf64e:   add    %al,(%rax)
  0x00007f7748fbf650:   add    %al,(%rax)
  0x00007f7748fbf652:   add    %al,(%rax)
  0x00007f7748fbf654:   add    %eax,(%rax)
  0x00007f7748fbf656:   add    %al,(%rax)
  0x00007f7748fbf658:   add    %al,(%rax)
  0x00007f7748fbf65a:   add    %al,(%rax)
  0x00007f7748fbf65c:   add    %eax,(%rax)
  0x00007f7748fbf65e:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_long_sign_mask [0x00007f7748fbf660, 0x00007f7748fbf6a0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf660:   add    %al,(%rax)
  0x00007f7748fbf662:   add    %al,(%rax)
  0x00007f7748fbf664:   add    %al,(%rax)
  0x00007f7748fbf666:   add    %al,0x0(%rax)
  0x00007f7748fbf66c:   add    %al,(%rax)
  0x00007f7748fbf66e:   add    %al,0x0(%rax)
  0x00007f7748fbf674:   add    %al,(%rax)
  0x00007f7748fbf676:   add    %al,0x0(%rax)
  0x00007f7748fbf67c:   add    %al,(%rax)
  0x00007f7748fbf67e:   add    %al,0x0(%rax)
  0x00007f7748fbf684:   add    %al,(%rax)
  0x00007f7748fbf686:   add    %al,0x0(%rax)
  0x00007f7748fbf68c:   add    %al,(%rax)
  0x00007f7748fbf68e:   add    %al,0x0(%rax)
  0x00007f7748fbf694:   add    %al,(%rax)
  0x00007f7748fbf696:   add    %al,0x0(%rax)
  0x00007f7748fbf69c:   add    %al,(%rax)
  0x00007f7748fbf69e:   .byte 0x0
  0x00007f7748fbf69f:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::iota_indices [0x00007f7748fbf6a0, 0x00007f7748fbf820] (384 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf6a0:   add    %al,(%rcx)
  0x00007f7748fbf6a2:   add    (%rbx),%al
  0x00007f7748fbf6a4:   add    $0x5,%al
  0x00007f7748fbf6a6:   (bad)  
  0x00007f7748fbf6a7:   (bad)  
  0x00007f7748fbf6a8:   or     %cl,(%rcx)
  0x00007f7748fbf6aa:   or     (%rbx),%cl
  0x00007f7748fbf6ac:   or     $0xd,%al
  0x00007f7748fbf6ae:   (bad)  
  0x00007f7748fbf6af:   movups (%rcx),%xmm2
  0x00007f7748fbf6b2:   adc    (%rbx),%dl
  0x00007f7748fbf6b4:   adc    $0x15,%al
  0x00007f7748fbf6b6:   (bad)  
  0x00007f7748fbf6b7:   (bad)  
  0x00007f7748fbf6b8:   sbb    %bl,(%rcx)
  0x00007f7748fbf6ba:   sbb    (%rbx),%bl
  0x00007f7748fbf6bc:   sbb    $0x1d,%al
  0x00007f7748fbf6be:   (bad)  
  0x00007f7748fbf6bf:   (bad)  
  0x00007f7748fbf6c0:   and    %ah,(%rcx)
  0x00007f7748fbf6c2:   and    (%rbx),%ah
  0x00007f7748fbf6c4:   and    $0x25,%al
  0x00007f7748fbf6c6:   es (bad) 
  0x00007f7748fbf6c8:   sub    %ch,(%rcx)
  0x00007f7748fbf6ca:   sub    (%rbx),%ch
  0x00007f7748fbf6cc:   sub    $0x2d,%al
  0x00007f7748fbf6ce:   cs (bad) 
  0x00007f7748fbf6d0:   xor    %dh,(%rcx)
  0x00007f7748fbf6d2:   xor    (%rbx),%dh
  0x00007f7748fbf6d4:   xor    $0x35,%al
  0x00007f7748fbf6d6:   ss (bad) 
  0x00007f7748fbf6d8:   cmp    %bh,(%rcx)
  0x00007f7748fbf6da:   cmp    (%rbx),%bh
  0x00007f7748fbf6dc:   cmp    $0x3d,%al
  0x00007f7748fbf6de:   ds (bad) 
  0x00007f7748fbf6e0:   add    %al,(%rax)
  0x00007f7748fbf6e2:   add    %eax,(%rax)
  0x00007f7748fbf6e4:   add    (%rax),%al
  0x00007f7748fbf6e6:   add    (%rax),%eax
  0x00007f7748fbf6e8:   add    $0x0,%al
  0x00007f7748fbf6ea:   add    $0x7000600,%eax
  0x00007f7748fbf6ef:   add    %cl,(%rax)
  0x00007f7748fbf6f1:   add    %cl,(%rcx)
  0x00007f7748fbf6f3:   add    %cl,(%rdx)
  0x00007f7748fbf6f5:   add    %cl,(%rbx)
  0x00007f7748fbf6f7:   add    %cl,(%rax,%rax,1)
  0x00007f7748fbf6fa:   or     $0xf000e00,%eax
  0x00007f7748fbf6ff:   add    %dl,(%rax)
  0x00007f7748fbf701:   add    %dl,(%rcx)
  0x00007f7748fbf703:   add    %dl,(%rdx)
  0x00007f7748fbf705:   add    %dl,(%rbx)
  0x00007f7748fbf707:   add    %dl,(%rax,%rax,1)
  0x00007f7748fbf70a:   adc    $0x17001600,%eax
  0x00007f7748fbf70f:   add    %bl,(%rax)
  0x00007f7748fbf711:   add    %bl,(%rcx)
  0x00007f7748fbf713:   add    %bl,(%rdx)
  0x00007f7748fbf715:   add    %bl,(%rbx)
  0x00007f7748fbf717:   add    %bl,(%rax,%rax,1)
  0x00007f7748fbf71a:   sbb    $0x1f001e00,%eax
  0x00007f7748fbf71f:   add    %al,(%rax)
  0x00007f7748fbf721:   add    %al,(%rax)
  0x00007f7748fbf723:   add    %al,(%rcx)
  0x00007f7748fbf725:   add    %al,(%rax)
  0x00007f7748fbf727:   add    %al,(%rdx)
  0x00007f7748fbf729:   add    %al,(%rax)
  0x00007f7748fbf72b:   add    %al,(%rbx)
  0x00007f7748fbf72d:   add    %al,(%rax)
  0x00007f7748fbf72f:   add    %al,(%rax,%rax,1)
  0x00007f7748fbf732:   add    %al,(%rax)
  0x00007f7748fbf734:   add    $0x6000000,%eax
  0x00007f7748fbf739:   add    %al,(%rax)
  0x00007f7748fbf73b:   add    %al,(%rdi)
  0x00007f7748fbf73d:   add    %al,(%rax)
  0x00007f7748fbf73f:   add    %cl,(%rax)
  0x00007f7748fbf741:   add    %al,(%rax)
  0x00007f7748fbf743:   add    %cl,(%rcx)
  0x00007f7748fbf745:   add    %al,(%rax)
  0x00007f7748fbf747:   add    %cl,(%rdx)
  0x00007f7748fbf749:   add    %al,(%rax)
  0x00007f7748fbf74b:   add    %cl,(%rbx)
  0x00007f7748fbf74d:   add    %al,(%rax)
  0x00007f7748fbf74f:   add    %cl,(%rax,%rax,1)
  0x00007f7748fbf752:   add    %al,(%rax)
  0x00007f7748fbf754:   or     $0xe000000,%eax
  0x00007f7748fbf759:   add    %al,(%rax)
  0x00007f7748fbf75b:   add    %cl,(%rdi)
  0x00007f7748fbf75d:   add    %al,(%rax)
  0x00007f7748fbf75f:   add    %al,(%rax)
  0x00007f7748fbf761:   add    %al,(%rax)
  0x00007f7748fbf763:   add    %al,(%rax)
  0x00007f7748fbf765:   add    %al,(%rax)
  0x00007f7748fbf767:   add    %al,(%rcx)
  0x00007f7748fbf769:   add    %al,(%rax)
  0x00007f7748fbf76b:   add    %al,(%rax)
  0x00007f7748fbf76d:   add    %al,(%rax)
  0x00007f7748fbf76f:   add    %al,(%rdx)
  0x00007f7748fbf771:   add    %al,(%rax)
  0x00007f7748fbf773:   add    %al,(%rax)
  0x00007f7748fbf775:   add    %al,(%rax)
  0x00007f7748fbf777:   add    %al,(%rbx)
  0x00007f7748fbf779:   add    %al,(%rax)
  0x00007f7748fbf77b:   add    %al,(%rax)
  0x00007f7748fbf77d:   add    %al,(%rax)
  0x00007f7748fbf77f:   add    %al,(%rax,%rax,1)
  0x00007f7748fbf782:   add    %al,(%rax)
  0x00007f7748fbf784:   add    %al,(%rax)
  0x00007f7748fbf786:   add    %al,(%rax)
  0x00007f7748fbf788:   add    $0x0,%eax
  0x00007f7748fbf78d:   add    %al,(%rax)
  0x00007f7748fbf78f:   add    %al,(%rsi)
  0x00007f7748fbf791:   add    %al,(%rax)
  0x00007f7748fbf793:   add    %al,(%rax)
  0x00007f7748fbf795:   add    %al,(%rax)
  0x00007f7748fbf797:   add    %al,(%rdi)
  0x00007f7748fbf799:   add    %al,(%rax)
  0x00007f7748fbf79b:   add    %al,(%rax)
  0x00007f7748fbf79d:   add    %al,(%rax)
  0x00007f7748fbf79f:   add    %al,(%rax)
  0x00007f7748fbf7a1:   add    %al,(%rax)
  0x00007f7748fbf7a3:   add    %al,(%rax)
  0x00007f7748fbf7a5:   add    %al,0x3f(%rax)
  0x00007f7748fbf7ab:   add    %al,(%rax)
  0x00007f7748fbf7ae:   rex
  0x00007f7748fbf7af:   add    %al,(%rax)
  0x00007f7748fbf7b2:   addb   $0x0,0x0(%rax)
  0x00007f7748fbf7b6:   movabs 0xe0000040c0000040,%al
  0x00007f7748fbf7bf:   add    %al,(%rax)
  0x00007f7748fbf7c2:   add    %al,0x0(%rcx)
  0x00007f7748fbf7c5:   add    %dl,(%rax)
  0x00007f7748fbf7c7:   add    %al,(%r8)
  0x00007f7748fbf7ca:   and    %al,0x0(%rcx)
  0x00007f7748fbf7cd:   add    %dh,(%rax)
  0x00007f7748fbf7cf:   add    %al,(%r8)
  0x00007f7748fbf7d2:   rex
  0x00007f7748fbf7d3:   add    %al,(%r8)
  0x00007f7748fbf7d6:   push   %rax
  0x00007f7748fbf7d7:   add    %al,(%r8)
  0x00007f7748fbf7da:   (bad)  
  0x00007f7748fbf7db:   add    %al,(%r8)
  0x00007f7748fbf7de:   jo     Stub::<unknown> 0x00007f7748fbf821
  0x00007f7748fbf7e0:   add    %al,(%rax)
  0x00007f7748fbf7e2:   add    %al,(%rax)
  0x00007f7748fbf7e4:   add    %al,(%rax)
  0x00007f7748fbf7e6:   add    %al,(%rax)
  0x00007f7748fbf7e8:   add    %al,(%rax)
  0x00007f7748fbf7ea:   add    %al,(%rax)
  0x00007f7748fbf7ec:   add    %al,(%rax)
  0x00007f7748fbf7ee:   lock (bad) 
  0x00007f7748fbf7f0:   add    %al,(%rax)
  0x00007f7748fbf7f2:   add    %al,(%rax)
  0x00007f7748fbf7f4:   add    %al,(%rax)
  0x00007f7748fbf7f6:   add    %al,0x0(%rax)
  0x00007f7748fbf7f9:   add    %al,(%rax)
  0x00007f7748fbf7fb:   add    %al,(%rax)
  0x00007f7748fbf7fd:   add    %cl,(%rax)
  0x00007f7748fbf7ff:   add    %al,(%rax)
  0x00007f7748fbf802:   add    %al,(%rax)
  0x00007f7748fbf804:   add    %al,(%rax)
  0x00007f7748fbf806:   adc    %al,0x0(%rax)
  0x00007f7748fbf809:   add    %al,(%rax)
  0x00007f7748fbf80b:   add    %al,(%rax)
  0x00007f7748fbf80d:   add    %dl,(%rax,%rax,2)
  0x00007f7748fbf810:   add    %al,(%rax)
  0x00007f7748fbf812:   add    %al,(%rax)
  0x00007f7748fbf814:   add    %al,(%rax)
  0x00007f7748fbf816:   sbb    %al,0x0(%rax)
  0x00007f7748fbf819:   add    %al,(%rax)
  0x00007f7748fbf81b:   add    %al,(%rax)
  0x00007f7748fbf81d:   add    %bl,(%rax,%rax,2)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::count_leading_zeros_lut [0x00007f7748fbf840, 0x00007f7748fbf880] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf840:   add    $0x3,%al
  0x00007f7748fbf842:   add    (%rdx),%al
  0x00007f7748fbf844:   add    %eax,(%rcx)
  0x00007f7748fbf846:   add    %eax,(%rcx)
  0x00007f7748fbf848:   add    %al,(%rax)
  0x00007f7748fbf84a:   add    %al,(%rax)
  0x00007f7748fbf84c:   add    %al,(%rax)
  0x00007f7748fbf84e:   add    %al,(%rax)
  0x00007f7748fbf850:   add    $0x3,%al
  0x00007f7748fbf852:   add    (%rdx),%al
  0x00007f7748fbf854:   add    %eax,(%rcx)
  0x00007f7748fbf856:   add    %eax,(%rcx)
  0x00007f7748fbf858:   add    %al,(%rax)
  0x00007f7748fbf85a:   add    %al,(%rax)
  0x00007f7748fbf85c:   add    %al,(%rax)
  0x00007f7748fbf85e:   add    %al,(%rax)
  0x00007f7748fbf860:   add    $0x3,%al
  0x00007f7748fbf862:   add    (%rdx),%al
  0x00007f7748fbf864:   add    %eax,(%rcx)
  0x00007f7748fbf866:   add    %eax,(%rcx)
  0x00007f7748fbf868:   add    %al,(%rax)
  0x00007f7748fbf86a:   add    %al,(%rax)
  0x00007f7748fbf86c:   add    %al,(%rax)
  0x00007f7748fbf86e:   add    %al,(%rax)
  0x00007f7748fbf870:   add    $0x3,%al
  0x00007f7748fbf872:   add    (%rdx),%al
  0x00007f7748fbf874:   add    %eax,(%rcx)
  0x00007f7748fbf876:   add    %eax,(%rcx)
  0x00007f7748fbf878:   add    %al,(%rax)
  0x00007f7748fbf87a:   add    %al,(%rax)
  0x00007f7748fbf87c:   add    %al,(%rax)
  0x00007f7748fbf87e:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::reverse_bit_lut [0x00007f7748fbf880, 0x00007f7748fbf8c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf880:   add    %cl,(%rax)
  0x00007f7748fbf882:   add    $0xc,%al
  0x00007f7748fbf884:   add    (%rdx),%cl
  0x00007f7748fbf886:   (bad)  
  0x00007f7748fbf887:   (bad)  
  0x00007f7748fbf888:   add    %ecx,(%rcx)
  0x00007f7748fbf88a:   add    $0x70b030d,%eax
  0x00007f7748fbf88f:   str    (%rax)
  0x00007f7748fbf892:   add    $0xc,%al
  0x00007f7748fbf894:   add    (%rdx),%cl
  0x00007f7748fbf896:   (bad)  
  0x00007f7748fbf897:   (bad)  
  0x00007f7748fbf898:   add    %ecx,(%rcx)
  0x00007f7748fbf89a:   add    $0x70b030d,%eax
  0x00007f7748fbf89f:   str    (%rax)
  0x00007f7748fbf8a2:   add    $0xc,%al
  0x00007f7748fbf8a4:   add    (%rdx),%cl
  0x00007f7748fbf8a6:   (bad)  
  0x00007f7748fbf8a7:   (bad)  
  0x00007f7748fbf8a8:   add    %ecx,(%rcx)
  0x00007f7748fbf8aa:   add    $0x70b030d,%eax
  0x00007f7748fbf8af:   str    (%rax)
  0x00007f7748fbf8b2:   add    $0xc,%al
  0x00007f7748fbf8b4:   add    (%rdx),%cl
  0x00007f7748fbf8b6:   (bad)  
  0x00007f7748fbf8b7:   (bad)  
  0x00007f7748fbf8b8:   add    %ecx,(%rcx)
  0x00007f7748fbf8ba:   add    $0x70b030d,%eax
  0x00007f7748fbf8bf:   .byte 0xf
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_long [0x00007f7748fbf8c0, 0x00007f7748fbf900] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf8c0:   (bad)  
  0x00007f7748fbf8c1:   (bad)  
  0x00007f7748fbf8c2:   add    $0x1020304,%eax
  0x00007f7748fbf8c7:   add    %cl,(%rdi)
  0x00007f7748fbf8c9:   (bad)  
  0x00007f7748fbf8ca:   or     $0x90a0b0c,%eax
  0x00007f7748fbf8cf:   or     %al,(%rdi)
  0x00007f7748fbf8d1:   (bad)  
  0x00007f7748fbf8d2:   add    $0x1020304,%eax
  0x00007f7748fbf8d7:   add    %cl,(%rdi)
  0x00007f7748fbf8d9:   (bad)  
  0x00007f7748fbf8da:   or     $0x90a0b0c,%eax
  0x00007f7748fbf8df:   or     %al,(%rdi)
  0x00007f7748fbf8e1:   (bad)  
  0x00007f7748fbf8e2:   add    $0x1020304,%eax
  0x00007f7748fbf8e7:   add    %cl,(%rdi)
  0x00007f7748fbf8e9:   (bad)  
  0x00007f7748fbf8ea:   or     $0x90a0b0c,%eax
  0x00007f7748fbf8ef:   or     %al,(%rdi)
  0x00007f7748fbf8f1:   (bad)  
  0x00007f7748fbf8f2:   add    $0x1020304,%eax
  0x00007f7748fbf8f7:   add    %cl,(%rdi)
  0x00007f7748fbf8f9:   (bad)  
  0x00007f7748fbf8fa:   or     $0x90a0b0c,%eax
  0x00007f7748fbf8ff:   .byte 0x8
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_int [0x00007f7748fbf900, 0x00007f7748fbf940] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf900:   add    (%rdx),%eax
  0x00007f7748fbf902:   add    %eax,(%rax)
  0x00007f7748fbf904:   (bad)  
  0x00007f7748fbf905:   (bad)  
  0x00007f7748fbf906:   add    $0x90a0b04,%eax
  0x00007f7748fbf90b:   or     %cl,(%rdi)
  0x00007f7748fbf90d:   (bad)  
  0x00007f7748fbf90e:   or     $0x102030c,%eax
  0x00007f7748fbf913:   add    %al,(%rdi)
  0x00007f7748fbf915:   (bad)  
  0x00007f7748fbf916:   add    $0x90a0b04,%eax
  0x00007f7748fbf91b:   or     %cl,(%rdi)
  0x00007f7748fbf91d:   (bad)  
  0x00007f7748fbf91e:   or     $0x102030c,%eax
  0x00007f7748fbf923:   add    %al,(%rdi)
  0x00007f7748fbf925:   (bad)  
  0x00007f7748fbf926:   add    $0x90a0b04,%eax
  0x00007f7748fbf92b:   or     %cl,(%rdi)
  0x00007f7748fbf92d:   (bad)  
  0x00007f7748fbf92e:   or     $0x102030c,%eax
  0x00007f7748fbf933:   add    %al,(%rdi)
  0x00007f7748fbf935:   (bad)  
  0x00007f7748fbf936:   add    $0x90a0b04,%eax
  0x00007f7748fbf93b:   or     %cl,(%rdi)
  0x00007f7748fbf93d:   (bad)  
  0x00007f7748fbf93e:   .byte 0xd
  0x00007f7748fbf93f:   .byte 0xc
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_short [0x00007f7748fbf940, 0x00007f7748fbf980] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf940:   add    %eax,(%rax)
  0x00007f7748fbf942:   add    (%rdx),%eax
  0x00007f7748fbf944:   add    $0x9060704,%eax
  0x00007f7748fbf949:   or     %cl,(%rbx)
  0x00007f7748fbf94b:   or     0x10e0f0c(%rip),%cl        # 0x00007f774a0a085d
  0x00007f7748fbf951:   add    %al,(%rbx)
  0x00007f7748fbf953:   add    0x9060704(%rip),%al        # 0x00007f775202005d
  0x00007f7748fbf959:   or     %cl,(%rbx)
  0x00007f7748fbf95b:   or     0x10e0f0c(%rip),%cl        # 0x00007f774a0a086d
  0x00007f7748fbf961:   add    %al,(%rbx)
  0x00007f7748fbf963:   add    0x9060704(%rip),%al        # 0x00007f775202006d
  0x00007f7748fbf969:   or     %cl,(%rbx)
  0x00007f7748fbf96b:   or     0x10e0f0c(%rip),%cl        # 0x00007f774a0a087d
  0x00007f7748fbf971:   add    %al,(%rbx)
  0x00007f7748fbf973:   add    0x9060704(%rip),%al        # 0x00007f775202007d
  0x00007f7748fbf979:   or     %cl,(%rbx)
  0x00007f7748fbf97b:   .byte 0xa
  0x00007f7748fbf97c:   .byte 0xd
  0x00007f7748fbf97d:   or     $0xf,%al
  0x00007f7748fbf97f:   (bad)  
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::popcount_lut [0x00007f7748fbf980, 0x00007f7748fbf9c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf980:   add    %al,(%rcx)
  0x00007f7748fbf982:   add    %eax,(%rdx)
  0x00007f7748fbf984:   add    %eax,(%rdx)
  0x00007f7748fbf986:   add    (%rbx),%al
  0x00007f7748fbf988:   add    %eax,(%rdx)
  0x00007f7748fbf98a:   add    (%rbx),%al
  0x00007f7748fbf98c:   add    (%rbx),%al
  0x00007f7748fbf98e:   add    (%rax,%rax,1),%eax
  0x00007f7748fbf991:   add    %eax,(%rcx)
  0x00007f7748fbf993:   add    (%rcx),%al
  0x00007f7748fbf995:   add    (%rdx),%al
  0x00007f7748fbf997:   add    (%rcx),%eax
  0x00007f7748fbf999:   add    (%rdx),%al
  0x00007f7748fbf99b:   add    (%rdx),%eax
  0x00007f7748fbf99d:   add    (%rbx),%eax
  0x00007f7748fbf99f:   add    $0x0,%al
  0x00007f7748fbf9a1:   add    %eax,(%rcx)
  0x00007f7748fbf9a3:   add    (%rcx),%al
  0x00007f7748fbf9a5:   add    (%rdx),%al
  0x00007f7748fbf9a7:   add    (%rcx),%eax
  0x00007f7748fbf9a9:   add    (%rdx),%al
  0x00007f7748fbf9ab:   add    (%rdx),%eax
  0x00007f7748fbf9ad:   add    (%rbx),%eax
  0x00007f7748fbf9af:   add    $0x0,%al
  0x00007f7748fbf9b1:   add    %eax,(%rcx)
  0x00007f7748fbf9b3:   add    (%rcx),%al
  0x00007f7748fbf9b5:   add    (%rdx),%al
  0x00007f7748fbf9b7:   add    (%rcx),%eax
  0x00007f7748fbf9b9:   add    (%rdx),%al
  0x00007f7748fbf9bb:   add    (%rdx),%eax
  0x00007f7748fbf9bd:   add    (%rbx),%eax
  0x00007f7748fbf9bf:   .byte 0x4
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::_data_cache_writeback [0x00007f7748fbf9c0, 0x00007f7748fbf9ca] (10 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf9c0:   push   %rbp
  0x00007f7748fbf9c1:   mov    %rsp,%rbp
  0x00007f7748fbf9c4:   clwb   (%rdi)
  0x00007f7748fbf9c8:   leaveq 
  0x00007f7748fbf9c9:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::_data_cache_writeback_sync [0x00007f7748fbf9e0, 0x00007f7748fbf9f2] (18 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbf9e0:   push   %rbp
  0x00007f7748fbf9e1:   mov    %rsp,%rbp
  0x00007f7748fbf9e4:   cmp    $0x0,%edi
  0x00007f7748fbf9e7:   jne    Stub::_data_cache_writeback_sync+16 0x00007f7748fbf9f0
  0x00007f7748fbf9ed:   sfence 
  0x00007f7748fbf9f0:   leaveq 
  0x00007f7748fbf9f1:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_disjoint_arraycopy [0x00007f7748fbfa00, 0x00007f7748fbfab3] (179 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbfa00:   push   %rbp
  0x00007f7748fbfa01:   mov    %rsp,%rbp
  0x00007f7748fbfa04:   mov    %rdx,%rcx
  0x00007f7748fbfa07:   shr    $0x3,%rdx
  0x00007f7748fbfa0b:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f7748fbfa10:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f7748fbfa15:   neg    %rdx
  0x00007f7748fbfa18:   jmpq   Stub::jbyte_disjoint_arraycopy+136 0x00007f7748fbfa88
  0x00007f7748fbfa1d:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f7748fbfa22:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f7748fbfa27:   inc    %rdx
  0x00007f7748fbfa2a:   jne    Stub::jbyte_disjoint_arraycopy+29 0x00007f7748fbfa1d
  0x00007f7748fbfa2c:   test   $0x4,%cl
  0x00007f7748fbfa2f:   je     Stub::jbyte_disjoint_arraycopy+63 0x00007f7748fbfa3f
  0x00007f7748fbfa31:   mov    0x8(%rdi),%eax
  0x00007f7748fbfa34:   mov    %eax,0x8(%rsi)
  0x00007f7748fbfa37:   add    $0x4,%rdi
  0x00007f7748fbfa3b:   add    $0x4,%rsi
  0x00007f7748fbfa3f:   test   $0x2,%cl
  0x00007f7748fbfa42:   je     Stub::jbyte_disjoint_arraycopy+84 0x00007f7748fbfa54
  0x00007f7748fbfa44:   mov    0x8(%rdi),%ax
  0x00007f7748fbfa48:   mov    %ax,0x8(%rsi)
  0x00007f7748fbfa4c:   add    $0x2,%rdi
  0x00007f7748fbfa50:   add    $0x2,%rsi
  0x00007f7748fbfa54:   test   $0x1,%cl
  0x00007f7748fbfa57:   je     Stub::jbyte_disjoint_arraycopy+95 0x00007f7748fbfa5f
  0x00007f7748fbfa59:   mov    0x8(%rdi),%al
  0x00007f7748fbfa5c:   mov    %al,0x8(%rsi)
  0x00007f7748fbfa5f:   xor    %rax,%rax
  0x00007f7748fbfa62:   vzeroupper 
  0x00007f7748fbfa65:   leaveq 
  0x00007f7748fbfa66:   retq   
  0x00007f7748fbfa67:   nopw   0x0(%rax,%rax,1)
  0x00007f7748fbfa70:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f7748fbfa76:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f7748fbfa7c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f7748fbfa82:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f7748fbfa88:   add    $0x8,%rdx
  0x00007f7748fbfa8c:   jle    Stub::jbyte_disjoint_arraycopy+112 0x00007f7748fbfa70
  0x00007f7748fbfa8e:   sub    $0x4,%rdx
  0x00007f7748fbfa92:   jg     Stub::jbyte_disjoint_arraycopy+164 0x00007f7748fbfaa4
  0x00007f7748fbfa94:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f7748fbfa9a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f7748fbfaa0:   add    $0x4,%rdx
  0x00007f7748fbfaa4:   sub    $0x4,%rdx
  0x00007f7748fbfaa8:   jl     Stub::jbyte_disjoint_arraycopy+29 0x00007f7748fbfa1d
  0x00007f7748fbfaae:   jmpq   Stub::jbyte_disjoint_arraycopy+44 0x00007f7748fbfa2c
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_arraycopy [0x00007f7748fbfac0, 0x00007f7748fbfb7e] (190 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbfac0:   push   %rbp
  0x00007f7748fbfac1:   mov    %rsp,%rbp
  0x00007f7748fbfac4:   cmp    %rdi,%rsi
  0x00007f7748fbfac7:   lea    (%rdi,%rdx,1),%rax
  0x00007f7748fbfacb:   jbe    Stub::jbyte_disjoint_arraycopy+4 0x00007f7748fbfa04
  0x00007f7748fbfad1:   cmp    %rax,%rsi
  0x00007f7748fbfad4:   jae    Stub::jbyte_disjoint_arraycopy+4 0x00007f7748fbfa04
  0x00007f7748fbfada:   mov    %rdx,%rcx
  0x00007f7748fbfadd:   shr    $0x3,%rdx
  0x00007f7748fbfae1:   test   $0x1,%cl
  0x00007f7748fbfae4:   je     Stub::jbyte_arraycopy+53 0x00007f7748fbfaf5
  0x00007f7748fbfaea:   mov    -0x1(%rdi,%rcx,1),%al
  0x00007f7748fbfaee:   mov    %al,-0x1(%rsi,%rcx,1)
  0x00007f7748fbfaf2:   dec    %rcx
  0x00007f7748fbfaf5:   test   $0x2,%cl
  0x00007f7748fbfaf8:   je     Stub::jbyte_arraycopy+72 0x00007f7748fbfb08
  0x00007f7748fbfafe:   mov    -0x2(%rdi,%rcx,1),%ax
  0x00007f7748fbfb03:   mov    %ax,-0x2(%rsi,%rcx,1)
  0x00007f7748fbfb08:   test   $0x4,%cl
  0x00007f7748fbfb0b:   je     Stub::jbyte_arraycopy+150 0x00007f7748fbfb56
  0x00007f7748fbfb11:   mov    (%rdi,%rdx,8),%eax
  0x00007f7748fbfb14:   mov    %eax,(%rsi,%rdx,8)
  0x00007f7748fbfb17:   jmpq   Stub::jbyte_arraycopy+150 0x00007f7748fbfb56
  0x00007f7748fbfb1c:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f7748fbfb21:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f7748fbfb26:   dec    %rdx
  0x00007f7748fbfb29:   jne    Stub::jbyte_arraycopy+92 0x00007f7748fbfb1c
  0x00007f7748fbfb2b:   xor    %rax,%rax
  0x00007f7748fbfb2e:   vzeroupper 
  0x00007f7748fbfb31:   leaveq 
  0x00007f7748fbfb32:   retq   
  0x00007f7748fbfb33:   nopw   0x0(%rax,%rax,1)
  0x00007f7748fbfb3c:   data16 data16 xchg %ax,%ax
  0x00007f7748fbfb40:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f7748fbfb46:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f7748fbfb4c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f7748fbfb51:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f7748fbfb56:   sub    $0x8,%rdx
  0x00007f7748fbfb5a:   jge    Stub::jbyte_arraycopy+128 0x00007f7748fbfb40
  0x00007f7748fbfb5c:   add    $0x4,%rdx
  0x00007f7748fbfb60:   jl     Stub::jbyte_arraycopy+176 0x00007f7748fbfb70
  0x00007f7748fbfb62:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f7748fbfb67:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f7748fbfb6c:   sub    $0x4,%rdx
  0x00007f7748fbfb70:   add    $0x4,%rdx
  0x00007f7748fbfb74:   jg     Stub::jbyte_arraycopy+92 0x00007f7748fbfb1c
  0x00007f7748fbfb76:   xor    %rax,%rax
  0x00007f7748fbfb79:   vzeroupper 
  0x00007f7748fbfb7c:   leaveq 
  0x00007f7748fbfb7d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_disjoint_arraycopy [0x00007f7748fbfb80, 0x00007f7748fbfc1c] (156 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbfb80:   push   %rbp
  0x00007f7748fbfb81:   mov    %rsp,%rbp
  0x00007f7748fbfb84:   mov    %rdx,%rcx
  0x00007f7748fbfb87:   shr    $0x2,%rdx
  0x00007f7748fbfb8b:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f7748fbfb90:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f7748fbfb95:   neg    %rdx
  0x00007f7748fbfb98:   jmpq   Stub::jshort_disjoint_arraycopy+120 0x00007f7748fbfbf8
  0x00007f7748fbfb9d:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f7748fbfba2:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f7748fbfba7:   inc    %rdx
  0x00007f7748fbfbaa:   jne    Stub::jshort_disjoint_arraycopy+29 0x00007f7748fbfb9d
  0x00007f7748fbfbac:   test   $0x2,%cl
  0x00007f7748fbfbaf:   je     Stub::jshort_disjoint_arraycopy+63 0x00007f7748fbfbbf
  0x00007f7748fbfbb1:   mov    0x8(%rdi),%eax
  0x00007f7748fbfbb4:   mov    %eax,0x8(%rsi)
  0x00007f7748fbfbb7:   add    $0x4,%rdi
  0x00007f7748fbfbbb:   add    $0x4,%rsi
  0x00007f7748fbfbbf:   test   $0x1,%cl
  0x00007f7748fbfbc2:   je     Stub::jshort_disjoint_arraycopy+76 0x00007f7748fbfbcc
  0x00007f7748fbfbc4:   mov    0x8(%rdi),%ax
  0x00007f7748fbfbc8:   mov    %ax,0x8(%rsi)
  0x00007f7748fbfbcc:   xor    %rax,%rax
  0x00007f7748fbfbcf:   vzeroupper 
  0x00007f7748fbfbd2:   leaveq 
  0x00007f7748fbfbd3:   retq   
  0x00007f7748fbfbd4:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fbfbdc:   data16 data16 xchg %ax,%ax
  0x00007f7748fbfbe0:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f7748fbfbe6:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f7748fbfbec:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f7748fbfbf2:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f7748fbfbf8:   add    $0x8,%rdx
  0x00007f7748fbfbfc:   jle    Stub::jshort_disjoint_arraycopy+96 0x00007f7748fbfbe0
  0x00007f7748fbfbfe:   sub    $0x4,%rdx
  0x00007f7748fbfc02:   jg     Stub::jshort_disjoint_arraycopy+148 0x00007f7748fbfc14
  0x00007f7748fbfc04:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f7748fbfc0a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f7748fbfc10:   add    $0x4,%rdx
  0x00007f7748fbfc14:   sub    $0x4,%rdx
  0x00007f7748fbfc18:   jl     Stub::jshort_disjoint_arraycopy+29 0x00007f7748fbfb9d
  0x00007f7748fbfc1a:   jmp    Stub::jshort_disjoint_arraycopy+44 0x00007f7748fbfbac
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_arraycopy [0x00007f7748fbfc20, 0x00007f7748fbfcbe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbfc20:   push   %rbp
  0x00007f7748fbfc21:   mov    %rsp,%rbp
  0x00007f7748fbfc24:   cmp    %rdi,%rsi
  0x00007f7748fbfc27:   lea    (%rdi,%rdx,2),%rax
  0x00007f7748fbfc2b:   jbe    Stub::jshort_disjoint_arraycopy+4 0x00007f7748fbfb84
  0x00007f7748fbfc31:   cmp    %rax,%rsi
  0x00007f7748fbfc34:   jae    Stub::jshort_disjoint_arraycopy+4 0x00007f7748fbfb84
  0x00007f7748fbfc3a:   mov    %rdx,%rcx
  0x00007f7748fbfc3d:   shr    $0x2,%rdx
  0x00007f7748fbfc41:   test   $0x1,%cl
  0x00007f7748fbfc44:   je     Stub::jshort_arraycopy+48 0x00007f7748fbfc50
  0x00007f7748fbfc46:   mov    -0x2(%rdi,%rcx,2),%ax
  0x00007f7748fbfc4b:   mov    %ax,-0x2(%rsi,%rcx,2)
  0x00007f7748fbfc50:   test   $0x2,%cl
  0x00007f7748fbfc53:   je     Stub::jshort_arraycopy+118 0x00007f7748fbfc96
  0x00007f7748fbfc59:   mov    (%rdi,%rdx,8),%eax
  0x00007f7748fbfc5c:   mov    %eax,(%rsi,%rdx,8)
  0x00007f7748fbfc5f:   jmpq   Stub::jshort_arraycopy+118 0x00007f7748fbfc96
  0x00007f7748fbfc64:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f7748fbfc69:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f7748fbfc6e:   dec    %rdx
  0x00007f7748fbfc71:   jne    Stub::jshort_arraycopy+68 0x00007f7748fbfc64
  0x00007f7748fbfc73:   xor    %rax,%rax
  0x00007f7748fbfc76:   vzeroupper 
  0x00007f7748fbfc79:   leaveq 
  0x00007f7748fbfc7a:   retq   
  0x00007f7748fbfc7b:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fbfc80:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f7748fbfc86:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f7748fbfc8c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f7748fbfc91:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f7748fbfc96:   sub    $0x8,%rdx
  0x00007f7748fbfc9a:   jge    Stub::jshort_arraycopy+96 0x00007f7748fbfc80
  0x00007f7748fbfc9c:   add    $0x4,%rdx
  0x00007f7748fbfca0:   jl     Stub::jshort_arraycopy+144 0x00007f7748fbfcb0
  0x00007f7748fbfca2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f7748fbfca7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f7748fbfcac:   sub    $0x4,%rdx
  0x00007f7748fbfcb0:   add    $0x4,%rdx
  0x00007f7748fbfcb4:   jg     Stub::jshort_arraycopy+68 0x00007f7748fbfc64
  0x00007f7748fbfcb6:   xor    %rax,%rax
  0x00007f7748fbfcb9:   vzeroupper 
  0x00007f7748fbfcbc:   leaveq 
  0x00007f7748fbfcbd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_disjoint_arraycopy [0x00007f7748fbfcc0, 0x00007f7748fbfd3c] (124 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbfcc0:   push   %rbp
  0x00007f7748fbfcc1:   mov    %rsp,%rbp
  0x00007f7748fbfcc4:   mov    %rdx,%rcx
  0x00007f7748fbfcc7:   shr    %rdx
  0x00007f7748fbfcca:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f7748fbfccf:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f7748fbfcd4:   neg    %rdx
  0x00007f7748fbfcd7:   jmpq   Stub::jint_disjoint_arraycopy+88 0x00007f7748fbfd18
  0x00007f7748fbfcdc:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f7748fbfce1:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f7748fbfce6:   inc    %rdx
  0x00007f7748fbfce9:   jne    Stub::jint_disjoint_arraycopy+28 0x00007f7748fbfcdc
  0x00007f7748fbfceb:   test   $0x1,%cl
  0x00007f7748fbfcee:   je     Stub::jint_disjoint_arraycopy+54 0x00007f7748fbfcf6
  0x00007f7748fbfcf0:   mov    0x8(%rdi),%eax
  0x00007f7748fbfcf3:   mov    %eax,0x8(%rsi)
  0x00007f7748fbfcf6:   vzeroupper 
  0x00007f7748fbfcf9:   xor    %rax,%rax
  0x00007f7748fbfcfc:   leaveq 
  0x00007f7748fbfcfd:   retq   
  0x00007f7748fbfcfe:   xchg   %ax,%ax
  0x00007f7748fbfd00:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f7748fbfd06:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f7748fbfd0c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f7748fbfd12:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f7748fbfd18:   add    $0x8,%rdx
  0x00007f7748fbfd1c:   jle    Stub::jint_disjoint_arraycopy+64 0x00007f7748fbfd00
  0x00007f7748fbfd1e:   sub    $0x4,%rdx
  0x00007f7748fbfd22:   jg     Stub::jint_disjoint_arraycopy+116 0x00007f7748fbfd34
  0x00007f7748fbfd24:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f7748fbfd2a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f7748fbfd30:   add    $0x4,%rdx
  0x00007f7748fbfd34:   sub    $0x4,%rdx
  0x00007f7748fbfd38:   jl     Stub::jint_disjoint_arraycopy+28 0x00007f7748fbfcdc
  0x00007f7748fbfd3a:   jmp    Stub::jint_disjoint_arraycopy+43 0x00007f7748fbfceb
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_arraycopy [0x00007f7748fbfd40, 0x00007f7748fbfdce] (142 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbfd40:   push   %rbp
  0x00007f7748fbfd41:   mov    %rsp,%rbp
  0x00007f7748fbfd44:   cmp    %rdi,%rsi
  0x00007f7748fbfd47:   lea    (%rdi,%rdx,4),%rax
  0x00007f7748fbfd4b:   jbe    Stub::jint_disjoint_arraycopy+4 0x00007f7748fbfcc4
  0x00007f7748fbfd51:   cmp    %rax,%rsi
  0x00007f7748fbfd54:   jae    Stub::jint_disjoint_arraycopy+4 0x00007f7748fbfcc4
  0x00007f7748fbfd5a:   mov    %rdx,%rcx
  0x00007f7748fbfd5d:   shr    %rdx
  0x00007f7748fbfd60:   test   $0x1,%cl
  0x00007f7748fbfd63:   je     Stub::jint_arraycopy+102 0x00007f7748fbfda6
  0x00007f7748fbfd69:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f7748fbfd6d:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f7748fbfd71:   jmpq   Stub::jint_arraycopy+102 0x00007f7748fbfda6
  0x00007f7748fbfd76:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f7748fbfd7b:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f7748fbfd80:   dec    %rdx
  0x00007f7748fbfd83:   jne    Stub::jint_arraycopy+54 0x00007f7748fbfd76
  0x00007f7748fbfd85:   xor    %rax,%rax
  0x00007f7748fbfd88:   vzeroupper 
  0x00007f7748fbfd8b:   leaveq 
  0x00007f7748fbfd8c:   retq   
  0x00007f7748fbfd8d:   data16 xchg %ax,%ax
  0x00007f7748fbfd90:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f7748fbfd96:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f7748fbfd9c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f7748fbfda1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f7748fbfda6:   sub    $0x8,%rdx
  0x00007f7748fbfdaa:   jge    Stub::jint_arraycopy+80 0x00007f7748fbfd90
  0x00007f7748fbfdac:   add    $0x4,%rdx
  0x00007f7748fbfdb0:   jl     Stub::jint_arraycopy+128 0x00007f7748fbfdc0
  0x00007f7748fbfdb2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f7748fbfdb7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f7748fbfdbc:   sub    $0x4,%rdx
  0x00007f7748fbfdc0:   add    $0x4,%rdx
  0x00007f7748fbfdc4:   jg     Stub::jint_arraycopy+54 0x00007f7748fbfd76
  0x00007f7748fbfdc6:   xor    %rax,%rax
  0x00007f7748fbfdc9:   vzeroupper 
  0x00007f7748fbfdcc:   leaveq 
  0x00007f7748fbfdcd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jlong_disjoint_arraycopy [0x00007f7748fbfde0, 0x00007f7748fbfe52] (114 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbfde0:   push   %rbp
  0x00007f7748fbfde1:   mov    %rsp,%rbp
  0x00007f7748fbfde4:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f7748fbfde9:   lea    -0x8(%rsi,%rdx,8),%rcx
  0x00007f7748fbfdee:   neg    %rdx
  0x00007f7748fbfdf1:   jmpq   Stub::jlong_disjoint_arraycopy+72 0x00007f7748fbfe28
  0x00007f7748fbfdf6:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f7748fbfdfb:   mov    %rax,0x8(%rcx,%rdx,8)
  0x00007f7748fbfe00:   inc    %rdx
  0x00007f7748fbfe03:   jne    Stub::jlong_disjoint_arraycopy+22 0x00007f7748fbfdf6
  0x00007f7748fbfe05:   xor    %rax,%rax
  0x00007f7748fbfe08:   vzeroupper 
  0x00007f7748fbfe0b:   leaveq 
  0x00007f7748fbfe0c:   retq   
  0x00007f7748fbfe0d:   data16 xchg %ax,%ax
  0x00007f7748fbfe10:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f7748fbfe16:   vmovdqu %ymm0,-0x38(%rcx,%rdx,8)
  0x00007f7748fbfe1c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f7748fbfe22:   vmovdqu %ymm1,-0x18(%rcx,%rdx,8)
  0x00007f7748fbfe28:   add    $0x8,%rdx
  0x00007f7748fbfe2c:   jle    Stub::jlong_disjoint_arraycopy+48 0x00007f7748fbfe10
  0x00007f7748fbfe2e:   sub    $0x4,%rdx
  0x00007f7748fbfe32:   jg     Stub::jlong_disjoint_arraycopy+100 0x00007f7748fbfe44
  0x00007f7748fbfe34:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f7748fbfe3a:   vmovdqu %ymm0,-0x18(%rcx,%rdx,8)
  0x00007f7748fbfe40:   add    $0x4,%rdx
  0x00007f7748fbfe44:   sub    $0x4,%rdx
  0x00007f7748fbfe48:   jl     Stub::jlong_disjoint_arraycopy+22 0x00007f7748fbfdf6
  0x00007f7748fbfe4a:   vzeroupper 
  0x00007f7748fbfe4d:   xor    %rax,%rax
  0x00007f7748fbfe50:   leaveq 
  0x00007f7748fbfe51:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jlong_arraycopy [0x00007f7748fbfe60, 0x00007f7748fbfede] (126 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbfe60:   push   %rbp
  0x00007f7748fbfe61:   mov    %rsp,%rbp
  0x00007f7748fbfe64:   cmp    %rdi,%rsi
  0x00007f7748fbfe67:   lea    (%rdi,%rdx,8),%rax
  0x00007f7748fbfe6b:   jbe    Stub::jlong_disjoint_arraycopy+4 0x00007f7748fbfde4
  0x00007f7748fbfe71:   cmp    %rax,%rsi
  0x00007f7748fbfe74:   jae    Stub::jlong_disjoint_arraycopy+4 0x00007f7748fbfde4
  0x00007f7748fbfe7a:   jmpq   Stub::jlong_arraycopy+86 0x00007f7748fbfeb6
  0x00007f7748fbfe7f:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f7748fbfe84:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f7748fbfe89:   dec    %rdx
  0x00007f7748fbfe8c:   jne    Stub::jlong_arraycopy+31 0x00007f7748fbfe7f
  0x00007f7748fbfe8e:   xor    %rax,%rax
  0x00007f7748fbfe91:   vzeroupper 
  0x00007f7748fbfe94:   leaveq 
  0x00007f7748fbfe95:   retq   
  0x00007f7748fbfe96:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fbfea0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f7748fbfea6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f7748fbfeac:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f7748fbfeb1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f7748fbfeb6:   sub    $0x8,%rdx
  0x00007f7748fbfeba:   jge    Stub::jlong_arraycopy+64 0x00007f7748fbfea0
  0x00007f7748fbfebc:   add    $0x4,%rdx
  0x00007f7748fbfec0:   jl     Stub::jlong_arraycopy+112 0x00007f7748fbfed0
  0x00007f7748fbfec2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f7748fbfec7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f7748fbfecc:   sub    $0x4,%rdx
  0x00007f7748fbfed0:   add    $0x4,%rdx
  0x00007f7748fbfed4:   jg     Stub::jlong_arraycopy+31 0x00007f7748fbfe7f
  0x00007f7748fbfed6:   vzeroupper 
  0x00007f7748fbfed9:   xor    %rax,%rax
  0x00007f7748fbfedc:   leaveq 
  0x00007f7748fbfedd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_disjoint_arraycopy [0x00007f7748fbfee0, 0x00007f7748fc0083] (419 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbfee0:   push   %rbp
  0x00007f7748fbfee1:   mov    %rsp,%rbp
  0x00007f7748fbfee4:   mov    %rsi,%r11
  0x00007f7748fbfee7:   cmpb   $0x0,0x40(%r15)
  0x00007f7748fbfeec:   je     Stub::oop_disjoint_arraycopy+156 0x00007f7748fbff7c
  0x00007f7748fbfef2:   sub    $0x50,%rsp
  0x00007f7748fbfef6:   mov    %rax,(%rsp)
  0x00007f7748fbfefa:   mov    %rcx,0x8(%rsp)
  0x00007f7748fbfeff:   mov    %rdx,0x10(%rsp)
  0x00007f7748fbff04:   mov    %rsi,0x18(%rsp)
  0x00007f7748fbff09:   mov    %rdi,0x20(%rsp)
  0x00007f7748fbff0e:   mov    %r8,0x28(%rsp)
  0x00007f7748fbff13:   mov    %r9,0x30(%rsp)
  0x00007f7748fbff18:   mov    %r10,0x38(%rsp)
  0x00007f7748fbff1d:   mov    %r11,0x40(%rsp)
  0x00007f7748fbff22:   mov    %rsi,%rdi
  0x00007f7748fbff25:   mov    %rdx,%rsi
  0x00007f7748fbff28:   test   $0xf,%spl
  0x00007f7748fbff2c:   je     Stub::oop_disjoint_arraycopy+100 0x00007f7748fbff44
  0x00007f7748fbff32:   sub    $0x8,%rsp
  0x00007f7748fbff36:   callq  0x00007f774c9dfd00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f7748fbff3b:   add    $0x8,%rsp
  0x00007f7748fbff3f:   jmpq   Stub::oop_disjoint_arraycopy+105 0x00007f7748fbff49
  0x00007f7748fbff44:   callq  0x00007f774c9dfd00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f7748fbff49:   mov    0x40(%rsp),%r11
  0x00007f7748fbff4e:   mov    0x38(%rsp),%r10
  0x00007f7748fbff53:   mov    0x30(%rsp),%r9
  0x00007f7748fbff58:   mov    0x28(%rsp),%r8
  0x00007f7748fbff5d:   mov    0x20(%rsp),%rdi
  0x00007f7748fbff62:   mov    0x18(%rsp),%rsi
  0x00007f7748fbff67:   mov    0x10(%rsp),%rdx
  0x00007f7748fbff6c:   mov    0x8(%rsp),%rcx
  0x00007f7748fbff71:   mov    (%rsp),%rax
  0x00007f7748fbff75:   add    $0x50,%rsp
  0x00007f7748fbff79:   vzeroupper 
  0x00007f7748fbff7c:   mov    %rdx,%rcx
  0x00007f7748fbff7f:   shr    %rdx
  0x00007f7748fbff82:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f7748fbff87:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f7748fbff8c:   neg    %rdx
  0x00007f7748fbff8f:   jmpq   Stub::oop_disjoint_arraycopy+376 0x00007f7748fc0058
  0x00007f7748fbff94:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f7748fbff99:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f7748fbff9e:   inc    %rdx
  0x00007f7748fbffa1:   jne    Stub::oop_disjoint_arraycopy+180 0x00007f7748fbff94
  0x00007f7748fbffa3:   test   $0x1,%cl
  0x00007f7748fbffa6:   je     Stub::oop_disjoint_arraycopy+206 0x00007f7748fbffae
  0x00007f7748fbffa8:   mov    0x8(%rdi),%eax
  0x00007f7748fbffab:   mov    %eax,0x8(%rsi)
  0x00007f7748fbffae:   sub    $0x50,%rsp
  0x00007f7748fbffb2:   mov    %rax,(%rsp)
  0x00007f7748fbffb6:   mov    %rcx,0x8(%rsp)
  0x00007f7748fbffbb:   mov    %rdx,0x10(%rsp)
  0x00007f7748fbffc0:   mov    %rsi,0x18(%rsp)
  0x00007f7748fbffc5:   mov    %rdi,0x20(%rsp)
  0x00007f7748fbffca:   mov    %r8,0x28(%rsp)
  0x00007f7748fbffcf:   mov    %r9,0x30(%rsp)
  0x00007f7748fbffd4:   mov    %r10,0x38(%rsp)
  0x00007f7748fbffd9:   mov    %r11,0x40(%rsp)
  0x00007f7748fbffde:   mov    %r11,%rdi
  0x00007f7748fbffe1:   mov    %rcx,%rsi
  0x00007f7748fbffe4:   test   $0xf,%spl
  0x00007f7748fbffe8:   je     Stub::oop_disjoint_arraycopy+288 0x00007f7748fc0000
  0x00007f7748fbffee:   sub    $0x8,%rsp
  0x00007f7748fbfff2:   callq  0x00007f774c9dfd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f7748fbfff7:   add    $0x8,%rsp
  0x00007f7748fbfffb:   jmpq   Stub::oop_disjoint_arraycopy+293 0x00007f7748fc0005
  0x00007f7748fc0000:   callq  0x00007f774c9dfd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f7748fc0005:   mov    0x40(%rsp),%r11
  0x00007f7748fc000a:   mov    0x38(%rsp),%r10
  0x00007f7748fc000f:   mov    0x30(%rsp),%r9
  0x00007f7748fc0014:   mov    0x28(%rsp),%r8
  0x00007f7748fc0019:   mov    0x20(%rsp),%rdi
  0x00007f7748fc001e:   mov    0x18(%rsp),%rsi
  0x00007f7748fc0023:   mov    0x10(%rsp),%rdx
  0x00007f7748fc0028:   mov    0x8(%rsp),%rcx
  0x00007f7748fc002d:   mov    (%rsp),%rax
  0x00007f7748fc0031:   add    $0x50,%rsp
  0x00007f7748fc0035:   vzeroupper 
  0x00007f7748fc0038:   vzeroupper 
  0x00007f7748fc003b:   xor    %rax,%rax
  0x00007f7748fc003e:   leaveq 
  0x00007f7748fc003f:   retq   
  0x00007f7748fc0040:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f7748fc0046:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f7748fc004c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f7748fc0052:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f7748fc0058:   add    $0x8,%rdx
  0x00007f7748fc005c:   jle    Stub::oop_disjoint_arraycopy+352 0x00007f7748fc0040
  0x00007f7748fc005e:   sub    $0x4,%rdx
  0x00007f7748fc0062:   jg     Stub::oop_disjoint_arraycopy+404 0x00007f7748fc0074
  0x00007f7748fc0064:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f7748fc006a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f7748fc0070:   add    $0x4,%rdx
  0x00007f7748fc0074:   sub    $0x4,%rdx
  0x00007f7748fc0078:   jl     Stub::oop_disjoint_arraycopy+180 0x00007f7748fbff94
  0x00007f7748fc007e:   jmpq   Stub::oop_disjoint_arraycopy+195 0x00007f7748fbffa3
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_arraycopy [0x00007f7748fc00a0, 0x00007f7748fc0258] (440 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc00a0:   push   %rbp
  0x00007f7748fc00a1:   mov    %rsp,%rbp
  0x00007f7748fc00a4:   cmp    %rdi,%rsi
  0x00007f7748fc00a7:   lea    (%rdi,%rdx,4),%rax
  0x00007f7748fc00ab:   jbe    Stub::oop_disjoint_arraycopy+4 0x00007f7748fbfee4
  0x00007f7748fc00b1:   cmp    %rax,%rsi
  0x00007f7748fc00b4:   jae    Stub::oop_disjoint_arraycopy+4 0x00007f7748fbfee4
  0x00007f7748fc00ba:   cmpb   $0x0,0x40(%r15)
  0x00007f7748fc00bf:   je     Stub::oop_arraycopy+175 0x00007f7748fc014f
  0x00007f7748fc00c5:   sub    $0x50,%rsp
  0x00007f7748fc00c9:   mov    %rax,(%rsp)
  0x00007f7748fc00cd:   mov    %rcx,0x8(%rsp)
  0x00007f7748fc00d2:   mov    %rdx,0x10(%rsp)
  0x00007f7748fc00d7:   mov    %rsi,0x18(%rsp)
  0x00007f7748fc00dc:   mov    %rdi,0x20(%rsp)
  0x00007f7748fc00e1:   mov    %r8,0x28(%rsp)
  0x00007f7748fc00e6:   mov    %r9,0x30(%rsp)
  0x00007f7748fc00eb:   mov    %r10,0x38(%rsp)
  0x00007f7748fc00f0:   mov    %r11,0x40(%rsp)
  0x00007f7748fc00f5:   mov    %rsi,%rdi
  0x00007f7748fc00f8:   mov    %rdx,%rsi
  0x00007f7748fc00fb:   test   $0xf,%spl
  0x00007f7748fc00ff:   je     Stub::oop_arraycopy+119 0x00007f7748fc0117
  0x00007f7748fc0105:   sub    $0x8,%rsp
  0x00007f7748fc0109:   callq  0x00007f774c9dfd00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f7748fc010e:   add    $0x8,%rsp
  0x00007f7748fc0112:   jmpq   Stub::oop_arraycopy+124 0x00007f7748fc011c
  0x00007f7748fc0117:   callq  0x00007f774c9dfd00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f7748fc011c:   mov    0x40(%rsp),%r11
  0x00007f7748fc0121:   mov    0x38(%rsp),%r10
  0x00007f7748fc0126:   mov    0x30(%rsp),%r9
  0x00007f7748fc012b:   mov    0x28(%rsp),%r8
  0x00007f7748fc0130:   mov    0x20(%rsp),%rdi
  0x00007f7748fc0135:   mov    0x18(%rsp),%rsi
  0x00007f7748fc013a:   mov    0x10(%rsp),%rdx
  0x00007f7748fc013f:   mov    0x8(%rsp),%rcx
  0x00007f7748fc0144:   mov    (%rsp),%rax
  0x00007f7748fc0148:   add    $0x50,%rsp
  0x00007f7748fc014c:   vzeroupper 
  0x00007f7748fc014f:   mov    %rdx,%rcx
  0x00007f7748fc0152:   shr    %rdx
  0x00007f7748fc0155:   test   $0x1,%cl
  0x00007f7748fc0158:   je     Stub::oop_arraycopy+262 0x00007f7748fc01a6
  0x00007f7748fc015e:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f7748fc0162:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f7748fc0166:   jmpq   Stub::oop_arraycopy+262 0x00007f7748fc01a6
  0x00007f7748fc016b:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f7748fc0170:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f7748fc0175:   dec    %rdx
  0x00007f7748fc0178:   jne    Stub::oop_arraycopy+203 0x00007f7748fc016b
  0x00007f7748fc017a:   jmpq   Stub::oop_arraycopy+294 0x00007f7748fc01c6
  0x00007f7748fc017f:   xor    %rax,%rax
  0x00007f7748fc0182:   vzeroupper 
  0x00007f7748fc0185:   leaveq 
  0x00007f7748fc0186:   retq   
  0x00007f7748fc0187:   nopw   0x0(%rax,%rax,1)
  0x00007f7748fc0190:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f7748fc0196:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f7748fc019c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f7748fc01a1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f7748fc01a6:   sub    $0x8,%rdx
  0x00007f7748fc01aa:   jge    Stub::oop_arraycopy+240 0x00007f7748fc0190
  0x00007f7748fc01ac:   add    $0x4,%rdx
  0x00007f7748fc01b0:   jl     Stub::oop_arraycopy+288 0x00007f7748fc01c0
  0x00007f7748fc01b2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f7748fc01b7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f7748fc01bc:   sub    $0x4,%rdx
  0x00007f7748fc01c0:   add    $0x4,%rdx
  0x00007f7748fc01c4:   jg     Stub::oop_arraycopy+203 0x00007f7748fc016b
  0x00007f7748fc01c6:   sub    $0x50,%rsp
  0x00007f7748fc01ca:   mov    %rax,(%rsp)
  0x00007f7748fc01ce:   mov    %rcx,0x8(%rsp)
  0x00007f7748fc01d3:   mov    %rdx,0x10(%rsp)
  0x00007f7748fc01d8:   mov    %rsi,0x18(%rsp)
  0x00007f7748fc01dd:   mov    %rdi,0x20(%rsp)
  0x00007f7748fc01e2:   mov    %r8,0x28(%rsp)
  0x00007f7748fc01e7:   mov    %r9,0x30(%rsp)
  0x00007f7748fc01ec:   mov    %r10,0x38(%rsp)
  0x00007f7748fc01f1:   mov    %r11,0x40(%rsp)
  0x00007f7748fc01f6:   mov    %rsi,%rdi
  0x00007f7748fc01f9:   mov    %rcx,%rsi
  0x00007f7748fc01fc:   test   $0xf,%spl
  0x00007f7748fc0200:   je     Stub::oop_arraycopy+376 0x00007f7748fc0218
  0x00007f7748fc0206:   sub    $0x8,%rsp
  0x00007f7748fc020a:   callq  0x00007f774c9dfd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f7748fc020f:   add    $0x8,%rsp
  0x00007f7748fc0213:   jmpq   Stub::oop_arraycopy+381 0x00007f7748fc021d
  0x00007f7748fc0218:   callq  0x00007f774c9dfd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f7748fc021d:   mov    0x40(%rsp),%r11
  0x00007f7748fc0222:   mov    0x38(%rsp),%r10
  0x00007f7748fc0227:   mov    0x30(%rsp),%r9
  0x00007f7748fc022c:   mov    0x28(%rsp),%r8
  0x00007f7748fc0231:   mov    0x20(%rsp),%rdi
  0x00007f7748fc0236:   mov    0x18(%rsp),%rsi
  0x00007f7748fc023b:   mov    0x10(%rsp),%rdx
  0x00007f7748fc0240:   mov    0x8(%rsp),%rcx
  0x00007f7748fc0245:   mov    (%rsp),%rax
  0x00007f7748fc0249:   add    $0x50,%rsp
  0x00007f7748fc024d:   vzeroupper 
  0x00007f7748fc0250:   xor    %rax,%rax
  0x00007f7748fc0253:   vzeroupper 
  0x00007f7748fc0256:   leaveq 
  0x00007f7748fc0257:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_disjoint_arraycopy_uninit [0x00007f7748fc0260, 0x00007f7748fc0373] (275 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc0260:   push   %rbp
  0x00007f7748fc0261:   mov    %rsp,%rbp
  0x00007f7748fc0264:   mov    %rsi,%r11
  0x00007f7748fc0267:   mov    %rdx,%rcx
  0x00007f7748fc026a:   shr    %rdx
  0x00007f7748fc026d:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f7748fc0272:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f7748fc0277:   neg    %rdx
  0x00007f7748fc027a:   jmpq   Stub::oop_disjoint_arraycopy_uninit+232 0x00007f7748fc0348
  0x00007f7748fc027f:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007f7748fc0284:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f7748fc0289:   inc    %rdx
  0x00007f7748fc028c:   jne    Stub::oop_disjoint_arraycopy_uninit+31 0x00007f7748fc027f
  0x00007f7748fc028e:   test   $0x1,%cl
  0x00007f7748fc0291:   je     Stub::oop_disjoint_arraycopy_uninit+57 0x00007f7748fc0299
  0x00007f7748fc0293:   mov    0x8(%rdi),%eax
  0x00007f7748fc0296:   mov    %eax,0x8(%rsi)
  0x00007f7748fc0299:   sub    $0x50,%rsp
  0x00007f7748fc029d:   mov    %rax,(%rsp)
  0x00007f7748fc02a1:   mov    %rcx,0x8(%rsp)
  0x00007f7748fc02a6:   mov    %rdx,0x10(%rsp)
  0x00007f7748fc02ab:   mov    %rsi,0x18(%rsp)
  0x00007f7748fc02b0:   mov    %rdi,0x20(%rsp)
  0x00007f7748fc02b5:   mov    %r8,0x28(%rsp)
  0x00007f7748fc02ba:   mov    %r9,0x30(%rsp)
  0x00007f7748fc02bf:   mov    %r10,0x38(%rsp)
  0x00007f7748fc02c4:   mov    %r11,0x40(%rsp)
  0x00007f7748fc02c9:   mov    %r11,%rdi
  0x00007f7748fc02cc:   mov    %rcx,%rsi
  0x00007f7748fc02cf:   test   $0xf,%spl
  0x00007f7748fc02d3:   je     Stub::oop_disjoint_arraycopy_uninit+139 0x00007f7748fc02eb
  0x00007f7748fc02d9:   sub    $0x8,%rsp
  0x00007f7748fc02dd:   callq  0x00007f774c9dfd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f7748fc02e2:   add    $0x8,%rsp
  0x00007f7748fc02e6:   jmpq   Stub::oop_disjoint_arraycopy_uninit+144 0x00007f7748fc02f0
  0x00007f7748fc02eb:   callq  0x00007f774c9dfd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f7748fc02f0:   mov    0x40(%rsp),%r11
  0x00007f7748fc02f5:   mov    0x38(%rsp),%r10
  0x00007f7748fc02fa:   mov    0x30(%rsp),%r9
  0x00007f7748fc02ff:   mov    0x28(%rsp),%r8
  0x00007f7748fc0304:   mov    0x20(%rsp),%rdi
  0x00007f7748fc0309:   mov    0x18(%rsp),%rsi
  0x00007f7748fc030e:   mov    0x10(%rsp),%rdx
  0x00007f7748fc0313:   mov    0x8(%rsp),%rcx
  0x00007f7748fc0318:   mov    (%rsp),%rax
  0x00007f7748fc031c:   add    $0x50,%rsp
  0x00007f7748fc0320:   vzeroupper 
  0x00007f7748fc0323:   vzeroupper 
  0x00007f7748fc0326:   xor    %rax,%rax
  0x00007f7748fc0329:   leaveq 
  0x00007f7748fc032a:   retq   
  0x00007f7748fc032b:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc0330:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007f7748fc0336:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007f7748fc033c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007f7748fc0342:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007f7748fc0348:   add    $0x8,%rdx
  0x00007f7748fc034c:   jle    Stub::oop_disjoint_arraycopy_uninit+208 0x00007f7748fc0330
  0x00007f7748fc034e:   sub    $0x4,%rdx
  0x00007f7748fc0352:   jg     Stub::oop_disjoint_arraycopy_uninit+260 0x00007f7748fc0364
  0x00007f7748fc0354:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007f7748fc035a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007f7748fc0360:   add    $0x4,%rdx
  0x00007f7748fc0364:   sub    $0x4,%rdx
  0x00007f7748fc0368:   jl     Stub::oop_disjoint_arraycopy_uninit+31 0x00007f7748fc027f
  0x00007f7748fc036e:   jmpq   Stub::oop_disjoint_arraycopy_uninit+46 0x00007f7748fc028e
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_arraycopy_uninit [0x00007f7748fc0380, 0x00007f7748fc04a8] (296 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc0380:   push   %rbp
  0x00007f7748fc0381:   mov    %rsp,%rbp
  0x00007f7748fc0384:   cmp    %rdi,%rsi
  0x00007f7748fc0387:   lea    (%rdi,%rdx,4),%rax
  0x00007f7748fc038b:   jbe    Stub::oop_disjoint_arraycopy_uninit+4 0x00007f7748fc0264
  0x00007f7748fc0391:   cmp    %rax,%rsi
  0x00007f7748fc0394:   jae    Stub::oop_disjoint_arraycopy_uninit+4 0x00007f7748fc0264
  0x00007f7748fc039a:   mov    %rdx,%rcx
  0x00007f7748fc039d:   shr    %rdx
  0x00007f7748fc03a0:   test   $0x1,%cl
  0x00007f7748fc03a3:   je     Stub::oop_arraycopy_uninit+118 0x00007f7748fc03f6
  0x00007f7748fc03a9:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f7748fc03ad:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f7748fc03b1:   jmpq   Stub::oop_arraycopy_uninit+118 0x00007f7748fc03f6
  0x00007f7748fc03b6:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f7748fc03bb:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f7748fc03c0:   dec    %rdx
  0x00007f7748fc03c3:   jne    Stub::oop_arraycopy_uninit+54 0x00007f7748fc03b6
  0x00007f7748fc03c5:   jmpq   Stub::oop_arraycopy_uninit+150 0x00007f7748fc0416
  0x00007f7748fc03ca:   xor    %rax,%rax
  0x00007f7748fc03cd:   vzeroupper 
  0x00007f7748fc03d0:   leaveq 
  0x00007f7748fc03d1:   retq   
  0x00007f7748fc03d2:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fc03dc:   data16 data16 xchg %ax,%ax
  0x00007f7748fc03e0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007f7748fc03e6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007f7748fc03ec:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007f7748fc03f1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007f7748fc03f6:   sub    $0x8,%rdx
  0x00007f7748fc03fa:   jge    Stub::oop_arraycopy_uninit+96 0x00007f7748fc03e0
  0x00007f7748fc03fc:   add    $0x4,%rdx
  0x00007f7748fc0400:   jl     Stub::oop_arraycopy_uninit+144 0x00007f7748fc0410
  0x00007f7748fc0402:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007f7748fc0407:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007f7748fc040c:   sub    $0x4,%rdx
  0x00007f7748fc0410:   add    $0x4,%rdx
  0x00007f7748fc0414:   jg     Stub::oop_arraycopy_uninit+54 0x00007f7748fc03b6
  0x00007f7748fc0416:   sub    $0x50,%rsp
  0x00007f7748fc041a:   mov    %rax,(%rsp)
  0x00007f7748fc041e:   mov    %rcx,0x8(%rsp)
  0x00007f7748fc0423:   mov    %rdx,0x10(%rsp)
  0x00007f7748fc0428:   mov    %rsi,0x18(%rsp)
  0x00007f7748fc042d:   mov    %rdi,0x20(%rsp)
  0x00007f7748fc0432:   mov    %r8,0x28(%rsp)
  0x00007f7748fc0437:   mov    %r9,0x30(%rsp)
  0x00007f7748fc043c:   mov    %r10,0x38(%rsp)
  0x00007f7748fc0441:   mov    %r11,0x40(%rsp)
  0x00007f7748fc0446:   mov    %rsi,%rdi
  0x00007f7748fc0449:   mov    %rcx,%rsi
  0x00007f7748fc044c:   test   $0xf,%spl
  0x00007f7748fc0450:   je     Stub::oop_arraycopy_uninit+232 0x00007f7748fc0468
  0x00007f7748fc0456:   sub    $0x8,%rsp
  0x00007f7748fc045a:   callq  0x00007f774c9dfd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f7748fc045f:   add    $0x8,%rsp
  0x00007f7748fc0463:   jmpq   Stub::oop_arraycopy_uninit+237 0x00007f7748fc046d
  0x00007f7748fc0468:   callq  0x00007f774c9dfd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f7748fc046d:   mov    0x40(%rsp),%r11
  0x00007f7748fc0472:   mov    0x38(%rsp),%r10
  0x00007f7748fc0477:   mov    0x30(%rsp),%r9
  0x00007f7748fc047c:   mov    0x28(%rsp),%r8
  0x00007f7748fc0481:   mov    0x20(%rsp),%rdi
  0x00007f7748fc0486:   mov    0x18(%rsp),%rsi
  0x00007f7748fc048b:   mov    0x10(%rsp),%rdx
  0x00007f7748fc0490:   mov    0x8(%rsp),%rcx
  0x00007f7748fc0495:   mov    (%rsp),%rax
  0x00007f7748fc0499:   add    $0x50,%rsp
  0x00007f7748fc049d:   vzeroupper 
  0x00007f7748fc04a0:   xor    %rax,%rax
  0x00007f7748fc04a3:   vzeroupper 
  0x00007f7748fc04a6:   leaveq 
  0x00007f7748fc04a7:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::checkcast_arraycopy [0x00007f7748fc04c0, 0x00007f7748fc06a1] (481 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc04c0:   push   %rbp
  0x00007f7748fc04c1:   mov    %rsp,%rbp
  0x00007f7748fc04c4:   sub    $0x18,%rsp
  0x00007f7748fc04c8:   mov    %r13,(%rsp)
  0x00007f7748fc04cc:   mov    %r14,0x8(%rsp)
  0x00007f7748fc04d1:   mov    %r10,0x10(%rsp)
  0x00007f7748fc04d6:   cmpb   $0x0,0x40(%r15)
  0x00007f7748fc04db:   je     Stub::checkcast_arraycopy+171 0x00007f7748fc056b
  0x00007f7748fc04e1:   sub    $0x50,%rsp
  0x00007f7748fc04e5:   mov    %rax,(%rsp)
  0x00007f7748fc04e9:   mov    %rcx,0x8(%rsp)
  0x00007f7748fc04ee:   mov    %rdx,0x10(%rsp)
  0x00007f7748fc04f3:   mov    %rsi,0x18(%rsp)
  0x00007f7748fc04f8:   mov    %rdi,0x20(%rsp)
  0x00007f7748fc04fd:   mov    %r8,0x28(%rsp)
  0x00007f7748fc0502:   mov    %r9,0x30(%rsp)
  0x00007f7748fc0507:   mov    %r10,0x38(%rsp)
  0x00007f7748fc050c:   mov    %r11,0x40(%rsp)
  0x00007f7748fc0511:   mov    %rsi,%rdi
  0x00007f7748fc0514:   mov    %rdx,%rsi
  0x00007f7748fc0517:   test   $0xf,%spl
  0x00007f7748fc051b:   je     Stub::checkcast_arraycopy+115 0x00007f7748fc0533
  0x00007f7748fc0521:   sub    $0x8,%rsp
  0x00007f7748fc0525:   callq  0x00007f774c9dfd00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f7748fc052a:   add    $0x8,%rsp
  0x00007f7748fc052e:   jmpq   Stub::checkcast_arraycopy+120 0x00007f7748fc0538
  0x00007f7748fc0533:   callq  0x00007f774c9dfd00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007f7748fc0538:   mov    0x40(%rsp),%r11
  0x00007f7748fc053d:   mov    0x38(%rsp),%r10
  0x00007f7748fc0542:   mov    0x30(%rsp),%r9
  0x00007f7748fc0547:   mov    0x28(%rsp),%r8
  0x00007f7748fc054c:   mov    0x20(%rsp),%rdi
  0x00007f7748fc0551:   mov    0x18(%rsp),%rsi
  0x00007f7748fc0556:   mov    0x10(%rsp),%rdx
  0x00007f7748fc055b:   mov    0x8(%rsp),%rcx
  0x00007f7748fc0560:   mov    (%rsp),%rax
  0x00007f7748fc0564:   add    $0x50,%rsp
  0x00007f7748fc0568:   vzeroupper 
  0x00007f7748fc056b:   lea    (%rdi,%rdx,4),%rdi
  0x00007f7748fc056f:   lea    (%rsi,%rdx,4),%r13
  0x00007f7748fc0573:   mov    %rdx,%r14
  0x00007f7748fc0576:   neg    %rdx
  0x00007f7748fc0579:   jne    Stub::checkcast_arraycopy+226 0x00007f7748fc05a2
  0x00007f7748fc057f:   xor    %rax,%rax
  0x00007f7748fc0582:   jmpq   Stub::checkcast_arraycopy+465 0x00007f7748fc0691
  0x00007f7748fc0587:   nopw   0x0(%rax,%rax,1)
  0x00007f7748fc0590:   shr    $0x3,%rax
  0x00007f7748fc0594:   mov    %eax,0x0(%r13,%rdx,4)
  0x00007f7748fc0599:   inc    %rdx
  0x00007f7748fc059c:   je     Stub::checkcast_arraycopy+324 0x00007f7748fc0604
  0x00007f7748fc05a2:   mov    (%rdi,%rdx,4),%eax
  0x00007f7748fc05a5:   shl    $0x3,%rax
  0x00007f7748fc05a9:   test   %rax,%rax
  0x00007f7748fc05ac:   je     Stub::checkcast_arraycopy+208 0x00007f7748fc0590
  0x00007f7748fc05ae:   mov    0x8(%rax),%r11d
  0x00007f7748fc05b2:   movabs $0x800000000,%r10
  0x00007f7748fc05bc:   add    %r10,%r11
  0x00007f7748fc05bf:   cmp    %r8,%r11
  0x00007f7748fc05c2:   je     Stub::checkcast_arraycopy+208 0x00007f7748fc0590
  0x00007f7748fc05c4:   cmp    (%r11,%rcx,1),%r8
  0x00007f7748fc05c8:   je     Stub::checkcast_arraycopy+208 0x00007f7748fc0590
  0x00007f7748fc05ca:   cmp    $0x20,%ecx
  0x00007f7748fc05cd:   jne    Stub::checkcast_arraycopy+308 0x00007f7748fc05f4
  0x00007f7748fc05d3:   push   %rax
  0x00007f7748fc05d4:   mov    %r8,%rax
  0x00007f7748fc05d7:   push   %rcx
  0x00007f7748fc05d8:   push   %rdi
  0x00007f7748fc05d9:   mov    0x28(%r11),%rdi
  0x00007f7748fc05dd:   mov    (%rdi),%ecx
  0x00007f7748fc05df:   add    $0x8,%rdi
  0x00007f7748fc05e3:   test   %rax,%rax
  0x00007f7748fc05e6:   repnz scas %es:(%rdi),%rax
  0x00007f7748fc05e9:   pop    %rdi
  0x00007f7748fc05ea:   pop    %rcx
  0x00007f7748fc05eb:   pop    %rax
  0x00007f7748fc05ec:   jne    Stub::checkcast_arraycopy+308 0x00007f7748fc05f4
  0x00007f7748fc05ee:   mov    %r8,0x20(%r11)
  0x00007f7748fc05f2:   jmp    Stub::checkcast_arraycopy+208 0x00007f7748fc0590
  0x00007f7748fc05f4:   add    %rdx,%r14
  0x00007f7748fc05f7:   mov    %r14,%rax
  0x00007f7748fc05fa:   not    %rax
  0x00007f7748fc05fd:   jne    Stub::checkcast_arraycopy+327 0x00007f7748fc0607
  0x00007f7748fc05ff:   jmpq   Stub::checkcast_arraycopy+465 0x00007f7748fc0691
  0x00007f7748fc0604:   xor    %rax,%rax
  0x00007f7748fc0607:   sub    $0x50,%rsp
  0x00007f7748fc060b:   mov    %rax,(%rsp)
  0x00007f7748fc060f:   mov    %rcx,0x8(%rsp)
  0x00007f7748fc0614:   mov    %rdx,0x10(%rsp)
  0x00007f7748fc0619:   mov    %rsi,0x18(%rsp)
  0x00007f7748fc061e:   mov    %rdi,0x20(%rsp)
  0x00007f7748fc0623:   mov    %r8,0x28(%rsp)
  0x00007f7748fc0628:   mov    %r9,0x30(%rsp)
  0x00007f7748fc062d:   mov    %r10,0x38(%rsp)
  0x00007f7748fc0632:   mov    %r11,0x40(%rsp)
  0x00007f7748fc0637:   mov    %rsi,%rdi
  0x00007f7748fc063a:   mov    %r14,%rsi
  0x00007f7748fc063d:   test   $0xf,%spl
  0x00007f7748fc0641:   je     Stub::checkcast_arraycopy+409 0x00007f7748fc0659
  0x00007f7748fc0647:   sub    $0x8,%rsp
  0x00007f7748fc064b:   callq  0x00007f774c9dfd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f7748fc0650:   add    $0x8,%rsp
  0x00007f7748fc0654:   jmpq   Stub::checkcast_arraycopy+414 0x00007f7748fc065e
  0x00007f7748fc0659:   callq  0x00007f774c9dfd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f7748fc065e:   mov    0x40(%rsp),%r11
  0x00007f7748fc0663:   mov    0x38(%rsp),%r10
  0x00007f7748fc0668:   mov    0x30(%rsp),%r9
  0x00007f7748fc066d:   mov    0x28(%rsp),%r8
  0x00007f7748fc0672:   mov    0x20(%rsp),%rdi
  0x00007f7748fc0677:   mov    0x18(%rsp),%rsi
  0x00007f7748fc067c:   mov    0x10(%rsp),%rdx
  0x00007f7748fc0681:   mov    0x8(%rsp),%rcx
  0x00007f7748fc0686:   mov    (%rsp),%rax
  0x00007f7748fc068a:   add    $0x50,%rsp
  0x00007f7748fc068e:   vzeroupper 
  0x00007f7748fc0691:   mov    (%rsp),%r13
  0x00007f7748fc0695:   mov    0x8(%rsp),%r14
  0x00007f7748fc069a:   mov    0x10(%rsp),%r10
  0x00007f7748fc069f:   leaveq 
  0x00007f7748fc06a0:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::checkcast_arraycopy_uninit [0x00007f7748fc06c0, 0x00007f7748fc0811] (337 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc06c0:   push   %rbp
  0x00007f7748fc06c1:   mov    %rsp,%rbp
  0x00007f7748fc06c4:   sub    $0x18,%rsp
  0x00007f7748fc06c8:   mov    %r13,(%rsp)
  0x00007f7748fc06cc:   mov    %r14,0x8(%rsp)
  0x00007f7748fc06d1:   mov    %r10,0x10(%rsp)
  0x00007f7748fc06d6:   lea    (%rdi,%rdx,4),%rdi
  0x00007f7748fc06da:   lea    (%rsi,%rdx,4),%r13
  0x00007f7748fc06de:   mov    %rdx,%r14
  0x00007f7748fc06e1:   neg    %rdx
  0x00007f7748fc06e4:   jne    Stub::checkcast_arraycopy_uninit+82 0x00007f7748fc0712
  0x00007f7748fc06ea:   xor    %rax,%rax
  0x00007f7748fc06ed:   jmpq   Stub::checkcast_arraycopy_uninit+321 0x00007f7748fc0801
  0x00007f7748fc06f2:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fc06fc:   data16 data16 xchg %ax,%ax
  0x00007f7748fc0700:   shr    $0x3,%rax
  0x00007f7748fc0704:   mov    %eax,0x0(%r13,%rdx,4)
  0x00007f7748fc0709:   inc    %rdx
  0x00007f7748fc070c:   je     Stub::checkcast_arraycopy_uninit+180 0x00007f7748fc0774
  0x00007f7748fc0712:   mov    (%rdi,%rdx,4),%eax
  0x00007f7748fc0715:   shl    $0x3,%rax
  0x00007f7748fc0719:   test   %rax,%rax
  0x00007f7748fc071c:   je     Stub::checkcast_arraycopy_uninit+64 0x00007f7748fc0700
  0x00007f7748fc071e:   mov    0x8(%rax),%r11d
  0x00007f7748fc0722:   movabs $0x800000000,%r10
  0x00007f7748fc072c:   add    %r10,%r11
  0x00007f7748fc072f:   cmp    %r8,%r11
  0x00007f7748fc0732:   je     Stub::checkcast_arraycopy_uninit+64 0x00007f7748fc0700
  0x00007f7748fc0734:   cmp    (%r11,%rcx,1),%r8
  0x00007f7748fc0738:   je     Stub::checkcast_arraycopy_uninit+64 0x00007f7748fc0700
  0x00007f7748fc073a:   cmp    $0x20,%ecx
  0x00007f7748fc073d:   jne    Stub::checkcast_arraycopy_uninit+164 0x00007f7748fc0764
  0x00007f7748fc0743:   push   %rax
  0x00007f7748fc0744:   mov    %r8,%rax
  0x00007f7748fc0747:   push   %rcx
  0x00007f7748fc0748:   push   %rdi
  0x00007f7748fc0749:   mov    0x28(%r11),%rdi
  0x00007f7748fc074d:   mov    (%rdi),%ecx
  0x00007f7748fc074f:   add    $0x8,%rdi
  0x00007f7748fc0753:   test   %rax,%rax
  0x00007f7748fc0756:   repnz scas %es:(%rdi),%rax
  0x00007f7748fc0759:   pop    %rdi
  0x00007f7748fc075a:   pop    %rcx
  0x00007f7748fc075b:   pop    %rax
  0x00007f7748fc075c:   jne    Stub::checkcast_arraycopy_uninit+164 0x00007f7748fc0764
  0x00007f7748fc075e:   mov    %r8,0x20(%r11)
  0x00007f7748fc0762:   jmp    Stub::checkcast_arraycopy_uninit+64 0x00007f7748fc0700
  0x00007f7748fc0764:   add    %rdx,%r14
  0x00007f7748fc0767:   mov    %r14,%rax
  0x00007f7748fc076a:   not    %rax
  0x00007f7748fc076d:   jne    Stub::checkcast_arraycopy_uninit+183 0x00007f7748fc0777
  0x00007f7748fc076f:   jmpq   Stub::checkcast_arraycopy_uninit+321 0x00007f7748fc0801
  0x00007f7748fc0774:   xor    %rax,%rax
  0x00007f7748fc0777:   sub    $0x50,%rsp
  0x00007f7748fc077b:   mov    %rax,(%rsp)
  0x00007f7748fc077f:   mov    %rcx,0x8(%rsp)
  0x00007f7748fc0784:   mov    %rdx,0x10(%rsp)
  0x00007f7748fc0789:   mov    %rsi,0x18(%rsp)
  0x00007f7748fc078e:   mov    %rdi,0x20(%rsp)
  0x00007f7748fc0793:   mov    %r8,0x28(%rsp)
  0x00007f7748fc0798:   mov    %r9,0x30(%rsp)
  0x00007f7748fc079d:   mov    %r10,0x38(%rsp)
  0x00007f7748fc07a2:   mov    %r11,0x40(%rsp)
  0x00007f7748fc07a7:   mov    %rsi,%rdi
  0x00007f7748fc07aa:   mov    %r14,%rsi
  0x00007f7748fc07ad:   test   $0xf,%spl
  0x00007f7748fc07b1:   je     Stub::checkcast_arraycopy_uninit+265 0x00007f7748fc07c9
  0x00007f7748fc07b7:   sub    $0x8,%rsp
  0x00007f7748fc07bb:   callq  0x00007f774c9dfd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f7748fc07c0:   add    $0x8,%rsp
  0x00007f7748fc07c4:   jmpq   Stub::checkcast_arraycopy_uninit+270 0x00007f7748fc07ce
  0x00007f7748fc07c9:   callq  0x00007f774c9dfd30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007f7748fc07ce:   mov    0x40(%rsp),%r11
  0x00007f7748fc07d3:   mov    0x38(%rsp),%r10
  0x00007f7748fc07d8:   mov    0x30(%rsp),%r9
  0x00007f7748fc07dd:   mov    0x28(%rsp),%r8
  0x00007f7748fc07e2:   mov    0x20(%rsp),%rdi
  0x00007f7748fc07e7:   mov    0x18(%rsp),%rsi
  0x00007f7748fc07ec:   mov    0x10(%rsp),%rdx
  0x00007f7748fc07f1:   mov    0x8(%rsp),%rcx
  0x00007f7748fc07f6:   mov    (%rsp),%rax
  0x00007f7748fc07fa:   add    $0x50,%rsp
  0x00007f7748fc07fe:   vzeroupper 
  0x00007f7748fc0801:   mov    (%rsp),%r13
  0x00007f7748fc0805:   mov    0x8(%rsp),%r14
  0x00007f7748fc080a:   mov    0x10(%rsp),%r10
  0x00007f7748fc080f:   leaveq 
  0x00007f7748fc0810:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::unsafe_arraycopy [0x00007f7748fc0820, 0x00007f7748fc0857] (55 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc0820:   push   %rbp
  0x00007f7748fc0821:   mov    %rsp,%rbp
  0x00007f7748fc0824:   mov    %rdi,%rax
  0x00007f7748fc0827:   or     %rsi,%rax
  0x00007f7748fc082a:   or     %rdx,%rax
  0x00007f7748fc082d:   test   $0x7,%al
  0x00007f7748fc082f:   je     Stub::unsafe_arraycopy+46 0x00007f7748fc084e
  0x00007f7748fc0831:   test   $0x3,%al
  0x00007f7748fc0833:   je     Stub::unsafe_arraycopy+37 0x00007f7748fc0845
  0x00007f7748fc0835:   test   $0x1,%al
  0x00007f7748fc0837:   jne    Stub::jbyte_arraycopy+4 0x00007f7748fbfac4
  0x00007f7748fc083d:   shr    %rdx
  0x00007f7748fc0840:   jmpq   Stub::jshort_arraycopy+4 0x00007f7748fbfc24
  0x00007f7748fc0845:   shr    $0x2,%rdx
  0x00007f7748fc0849:   jmpq   Stub::jint_arraycopy+4 0x00007f7748fbfd44
  0x00007f7748fc084e:   shr    $0x3,%rdx
  0x00007f7748fc0852:   jmpq   Stub::jlong_arraycopy+4 0x00007f7748fbfe64
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::generic_arraycopy [0x00007f7748fc085b, 0x00007f7748fc0a44] (489 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc085b:   jmpq   Stub::generic_arraycopy+481 0x00007f7748fc0a3c
  0x00007f7748fc0860:   push   %rbp
  0x00007f7748fc0861:   mov    %rsp,%rbp
  0x00007f7748fc0864:   test   %rdi,%rdi
  0x00007f7748fc0867:   je     Stub::generic_arraycopy
  0x00007f7748fc0869:   test   %esi,%esi
  0x00007f7748fc086b:   js     Stub::generic_arraycopy
  0x00007f7748fc086d:   test   %rdx,%rdx
  0x00007f7748fc0870:   je     Stub::generic_arraycopy
  0x00007f7748fc0872:   test   %ecx,%ecx
  0x00007f7748fc0874:   js     Stub::generic_arraycopy
  0x00007f7748fc0876:   mov    %r8d,%r11d
  0x00007f7748fc0879:   test   %r11d,%r11d
  0x00007f7748fc087c:   js     Stub::generic_arraycopy
  0x00007f7748fc087e:   mov    0x8(%rdi),%r10d
  0x00007f7748fc0882:   movabs $0x800000000,%r9
  0x00007f7748fc088c:   add    %r9,%r10
  0x00007f7748fc088f:   cmpl   $0x80100c02,0x8(%r10)
  0x00007f7748fc0897:   je     Stub::generic_arraycopy+244 0x00007f7748fc094f
  0x00007f7748fc089d:   mov    0x8(%rdx),%eax
  0x00007f7748fc08a0:   movabs $0x800000000,%r9
  0x00007f7748fc08aa:   add    %r9,%rax
  0x00007f7748fc08ad:   cmp    %rax,%r10
  0x00007f7748fc08b0:   jne    Stub::generic_arraycopy+481 0x00007f7748fc0a3c
  0x00007f7748fc08b6:   mov    0x8(%r10),%eax
  0x00007f7748fc08ba:   cmp    $0x0,%eax
  0x00007f7748fc08bd:   jge    Stub::generic_arraycopy+481 0x00007f7748fc0a3c
  0x00007f7748fc08c3:   mov    %r11d,%r10d
  0x00007f7748fc08c6:   add    %esi,%r10d
  0x00007f7748fc08c9:   cmp    0xc(%rdi),%r10d
  0x00007f7748fc08cd:   ja     Stub::generic_arraycopy+481 0x00007f7748fc0a3c
  0x00007f7748fc08d3:   mov    %r11d,%r10d
  0x00007f7748fc08d6:   add    %ecx,%r10d
  0x00007f7748fc08d9:   cmp    0xc(%rdx),%r10d
  0x00007f7748fc08dd:   ja     Stub::generic_arraycopy+481 0x00007f7748fc0a3c
  0x00007f7748fc08e3:   movslq %esi,%rsi
  0x00007f7748fc08e6:   movslq %ecx,%rcx
  0x00007f7748fc08e9:   mov    %eax,%r10d
  0x00007f7748fc08ec:   shr    $0x10,%r10d
  0x00007f7748fc08f0:   and    $0xff,%r10
  0x00007f7748fc08f7:   add    %r10,%rdi
  0x00007f7748fc08fa:   add    %r10,%rdx
  0x00007f7748fc08fd:   and    $0x3f,%eax
  0x00007f7748fc0900:   cmp    $0x0,%eax
  0x00007f7748fc0903:   jne    Stub::generic_arraycopy+186 0x00007f7748fc0915
  0x00007f7748fc0905:   lea    (%rdi,%rsi,1),%rdi
  0x00007f7748fc0909:   lea    (%rdx,%rcx,1),%rsi
  0x00007f7748fc090d:   movslq %r11d,%rdx
  0x00007f7748fc0910:   jmpq   Stub::jbyte_arraycopy+4 0x00007f7748fbfac4
  0x00007f7748fc0915:   cmp    $0x1,%eax
  0x00007f7748fc0918:   jne    Stub::generic_arraycopy+207 0x00007f7748fc092a
  0x00007f7748fc091a:   lea    (%rdi,%rsi,2),%rdi
  0x00007f7748fc091e:   lea    (%rdx,%rcx,2),%rsi
  0x00007f7748fc0922:   movslq %r11d,%rdx
  0x00007f7748fc0925:   jmpq   Stub::jshort_arraycopy+4 0x00007f7748fbfc24
  0x00007f7748fc092a:   cmp    $0x2,%eax
  0x00007f7748fc092d:   jne    Stub::generic_arraycopy+228 0x00007f7748fc093f
  0x00007f7748fc092f:   lea    (%rdi,%rsi,4),%rdi
  0x00007f7748fc0933:   lea    (%rdx,%rcx,4),%rsi
  0x00007f7748fc0937:   movslq %r11d,%rdx
  0x00007f7748fc093a:   jmpq   Stub::jint_arraycopy+4 0x00007f7748fbfd44
  0x00007f7748fc093f:   lea    (%rdi,%rsi,8),%rdi
  0x00007f7748fc0943:   lea    (%rdx,%rcx,8),%rsi
  0x00007f7748fc0947:   movslq %r11d,%rdx
  0x00007f7748fc094a:   jmpq   Stub::jlong_arraycopy+4 0x00007f7748fbfe64
  0x00007f7748fc094f:   mov    0x8(%rdx),%eax
  0x00007f7748fc0952:   movabs $0x800000000,%r9
  0x00007f7748fc095c:   add    %r9,%rax
  0x00007f7748fc095f:   cmp    %rax,%r10
  0x00007f7748fc0962:   jne    Stub::generic_arraycopy+325 0x00007f7748fc09a0
  0x00007f7748fc0968:   mov    %r11d,%r10d
  0x00007f7748fc096b:   add    %esi,%r10d
  0x00007f7748fc096e:   cmp    0xc(%rdi),%r10d
  0x00007f7748fc0972:   ja     Stub::generic_arraycopy+481 0x00007f7748fc0a3c
  0x00007f7748fc0978:   mov    %r11d,%r10d
  0x00007f7748fc097b:   add    %ecx,%r10d
  0x00007f7748fc097e:   cmp    0xc(%rdx),%r10d
  0x00007f7748fc0982:   ja     Stub::generic_arraycopy+481 0x00007f7748fc0a3c
  0x00007f7748fc0988:   movslq %esi,%rsi
  0x00007f7748fc098b:   movslq %ecx,%rcx
  0x00007f7748fc098e:   lea    0x10(%rdi,%rsi,4),%rdi
  0x00007f7748fc0993:   lea    0x10(%rdx,%rcx,4),%rsi
  0x00007f7748fc0998:   movslq %r11d,%rdx
  0x00007f7748fc099b:   jmpq   Stub::oop_arraycopy+4 0x00007f7748fc00a4
  0x00007f7748fc09a0:   cmpl   $0x80100c02,0x8(%rax)
  0x00007f7748fc09a7:   jne    Stub::generic_arraycopy+481 0x00007f7748fc0a3c
  0x00007f7748fc09ad:   mov    %r11d,%eax
  0x00007f7748fc09b0:   add    %esi,%eax
  0x00007f7748fc09b2:   cmp    0xc(%rdi),%eax
  0x00007f7748fc09b5:   ja     Stub::generic_arraycopy+481 0x00007f7748fc0a3c
  0x00007f7748fc09bb:   mov    %r11d,%eax
  0x00007f7748fc09be:   add    %ecx,%eax
  0x00007f7748fc09c0:   cmp    0xc(%rdx),%eax
  0x00007f7748fc09c3:   ja     Stub::generic_arraycopy+481 0x00007f7748fc0a3c
  0x00007f7748fc09c9:   movslq %esi,%rsi
  0x00007f7748fc09cc:   movslq %ecx,%rcx
  0x00007f7748fc09cf:   mov    0x8(%rdx),%r11d
  0x00007f7748fc09d3:   movabs $0x800000000,%r9
  0x00007f7748fc09dd:   add    %r9,%r11
  0x00007f7748fc09e0:   lea    0x10(%rdi,%rsi,4),%rdi
  0x00007f7748fc09e5:   lea    0x10(%rdx,%rcx,4),%rsi
  0x00007f7748fc09ea:   mov    %r8d,%edx
  0x00007f7748fc09ed:   mov    0x14(%r11),%ecx
  0x00007f7748fc09f1:   cmp    %r11,%r10
  0x00007f7748fc09f4:   je     Stub::generic_arraycopy+320 0x00007f7748fc099b
  0x00007f7748fc09f6:   cmp    (%r10,%rcx,1),%r11
  0x00007f7748fc09fa:   je     Stub::generic_arraycopy+320 0x00007f7748fc099b
  0x00007f7748fc09fc:   cmp    $0x20,%ecx
  0x00007f7748fc09ff:   jne    Stub::generic_arraycopy+462 0x00007f7748fc0a29
  0x00007f7748fc0a05:   push   %rax
  0x00007f7748fc0a06:   mov    %r11,%rax
  0x00007f7748fc0a09:   push   %rcx
  0x00007f7748fc0a0a:   push   %rdi
  0x00007f7748fc0a0b:   mov    0x28(%r10),%rdi
  0x00007f7748fc0a0f:   mov    (%rdi),%ecx
  0x00007f7748fc0a11:   add    $0x8,%rdi
  0x00007f7748fc0a15:   test   %rax,%rax
  0x00007f7748fc0a18:   repnz scas %es:(%rdi),%rax
  0x00007f7748fc0a1b:   pop    %rdi
  0x00007f7748fc0a1c:   pop    %rcx
  0x00007f7748fc0a1d:   pop    %rax
  0x00007f7748fc0a1e:   jne    Stub::generic_arraycopy+462 0x00007f7748fc0a29
  0x00007f7748fc0a20:   mov    %r11,0x20(%r10)
  0x00007f7748fc0a24:   jmpq   Stub::generic_arraycopy+320 0x00007f7748fc099b
  0x00007f7748fc0a29:   mov    0xd0(%r11),%r11
  0x00007f7748fc0a30:   mov    0x14(%r11),%ecx
  0x00007f7748fc0a34:   mov    %r11,%r8
  0x00007f7748fc0a37:   jmpq   Stub::checkcast_arraycopy+4 0x00007f7748fc04c4
  0x00007f7748fc0a3c:   xor    %rax,%rax
  0x00007f7748fc0a3f:   not    %rax
  0x00007f7748fc0a42:   leaveq 
  0x00007f7748fc0a43:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_fill [0x00007f7748fc0a60, 0x00007f7748fc0b0b] (171 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc0a60:   mov    %rdx,%r11
  0x00007f7748fc0a63:   push   %rbp
  0x00007f7748fc0a64:   mov    %rsp,%rbp
  0x00007f7748fc0a67:   and    $0xff,%esi
  0x00007f7748fc0a6d:   mov    %esi,%eax
  0x00007f7748fc0a6f:   shl    $0x8,%eax
  0x00007f7748fc0a72:   or     %eax,%esi
  0x00007f7748fc0a74:   mov    %esi,%eax
  0x00007f7748fc0a76:   shl    $0x10,%eax
  0x00007f7748fc0a79:   or     %eax,%esi
  0x00007f7748fc0a7b:   cmp    $0x8,%r11d
  0x00007f7748fc0a7f:   jb     Stub::jbyte_fill+132 0x00007f7748fc0ae4
  0x00007f7748fc0a85:   vmovd  %esi,%xmm0
  0x00007f7748fc0a89:   vpbroadcastd %xmm0,%ymm0
  0x00007f7748fc0a8e:   sub    $0x40,%r11d
  0x00007f7748fc0a92:   jl     Stub::jbyte_fill+83 0x00007f7748fc0ab3
  0x00007f7748fc0a98:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc0aa0:   vmovdqu %ymm0,(%rdi)
  0x00007f7748fc0aa4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f7748fc0aa9:   add    $0x40,%rdi
  0x00007f7748fc0aad:   sub    $0x40,%r11d
  0x00007f7748fc0ab1:   jge    Stub::jbyte_fill+64 0x00007f7748fc0aa0
  0x00007f7748fc0ab3:   add    $0x20,%r11d
  0x00007f7748fc0ab7:   jl     Stub::jbyte_fill+101 0x00007f7748fc0ac5
  0x00007f7748fc0ab9:   vmovdqu %ymm0,(%rdi)
  0x00007f7748fc0abd:   add    $0x20,%rdi
  0x00007f7748fc0ac1:   sub    $0x20,%r11d
  0x00007f7748fc0ac5:   vmovd  %esi,%xmm0
  0x00007f7748fc0ac9:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f7748fc0ace:   add    $0x20,%r11d
  0x00007f7748fc0ad2:   je     Stub::jbyte_fill+166 0x00007f7748fc0b06
  0x00007f7748fc0ad4:   jmp    Stub::jbyte_fill+126 0x00007f7748fc0ade
  0x00007f7748fc0ad6:   vmovq  %xmm0,(%rdi)
  0x00007f7748fc0ada:   add    $0x8,%rdi
  0x00007f7748fc0ade:   sub    $0x8,%r11d
  0x00007f7748fc0ae2:   jge    Stub::jbyte_fill+118 0x00007f7748fc0ad6
  0x00007f7748fc0ae4:   test   $0x4,%r11b
  0x00007f7748fc0ae8:   je     Stub::jbyte_fill+144 0x00007f7748fc0af0
  0x00007f7748fc0aea:   mov    %esi,(%rdi)
  0x00007f7748fc0aec:   add    $0x4,%rdi
  0x00007f7748fc0af0:   test   $0x2,%r11b
  0x00007f7748fc0af4:   je     Stub::jbyte_fill+157 0x00007f7748fc0afd
  0x00007f7748fc0af6:   mov    %si,(%rdi)
  0x00007f7748fc0af9:   add    $0x2,%rdi
  0x00007f7748fc0afd:   test   $0x1,%r11b
  0x00007f7748fc0b01:   je     Stub::jbyte_fill+166 0x00007f7748fc0b06
  0x00007f7748fc0b03:   mov    %sil,(%rdi)
  0x00007f7748fc0b06:   vzeroupper 
  0x00007f7748fc0b09:   leaveq 
  0x00007f7748fc0b0a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_fill [0x00007f7748fc0b20, 0x00007f7748fc0bbe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc0b20:   mov    %rdx,%r11
  0x00007f7748fc0b23:   push   %rbp
  0x00007f7748fc0b24:   mov    %rsp,%rbp
  0x00007f7748fc0b27:   and    $0xffff,%esi
  0x00007f7748fc0b2d:   mov    %esi,%eax
  0x00007f7748fc0b2f:   shl    $0x10,%eax
  0x00007f7748fc0b32:   or     %eax,%esi
  0x00007f7748fc0b34:   cmp    $0x4,%r11d
  0x00007f7748fc0b38:   jb     Stub::jshort_fill+132 0x00007f7748fc0ba4
  0x00007f7748fc0b3e:   vmovd  %esi,%xmm0
  0x00007f7748fc0b42:   vpbroadcastd %xmm0,%ymm0
  0x00007f7748fc0b47:   sub    $0x20,%r11d
  0x00007f7748fc0b4b:   jl     Stub::jshort_fill+83 0x00007f7748fc0b73
  0x00007f7748fc0b51:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fc0b5c:   data16 data16 xchg %ax,%ax
  0x00007f7748fc0b60:   vmovdqu %ymm0,(%rdi)
  0x00007f7748fc0b64:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f7748fc0b69:   add    $0x40,%rdi
  0x00007f7748fc0b6d:   sub    $0x20,%r11d
  0x00007f7748fc0b71:   jge    Stub::jshort_fill+64 0x00007f7748fc0b60
  0x00007f7748fc0b73:   add    $0x10,%r11d
  0x00007f7748fc0b77:   jl     Stub::jshort_fill+101 0x00007f7748fc0b85
  0x00007f7748fc0b79:   vmovdqu %ymm0,(%rdi)
  0x00007f7748fc0b7d:   add    $0x20,%rdi
  0x00007f7748fc0b81:   sub    $0x10,%r11d
  0x00007f7748fc0b85:   vmovd  %esi,%xmm0
  0x00007f7748fc0b89:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f7748fc0b8e:   add    $0x10,%r11d
  0x00007f7748fc0b92:   je     Stub::jshort_fill+153 0x00007f7748fc0bb9
  0x00007f7748fc0b94:   jmp    Stub::jshort_fill+126 0x00007f7748fc0b9e
  0x00007f7748fc0b96:   vmovq  %xmm0,(%rdi)
  0x00007f7748fc0b9a:   add    $0x8,%rdi
  0x00007f7748fc0b9e:   sub    $0x4,%r11d
  0x00007f7748fc0ba2:   jge    Stub::jshort_fill+118 0x00007f7748fc0b96
  0x00007f7748fc0ba4:   test   $0x2,%r11b
  0x00007f7748fc0ba8:   je     Stub::jshort_fill+144 0x00007f7748fc0bb0
  0x00007f7748fc0baa:   mov    %esi,(%rdi)
  0x00007f7748fc0bac:   add    $0x4,%rdi
  0x00007f7748fc0bb0:   test   $0x1,%r11b
  0x00007f7748fc0bb4:   je     Stub::jshort_fill+153 0x00007f7748fc0bb9
  0x00007f7748fc0bb6:   mov    %si,(%rdi)
  0x00007f7748fc0bb9:   vzeroupper 
  0x00007f7748fc0bbc:   leaveq 
  0x00007f7748fc0bbd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_fill [0x00007f7748fc0bc0, 0x00007f7748fc0c41] (129 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc0bc0:   mov    %rdx,%r11
  0x00007f7748fc0bc3:   push   %rbp
  0x00007f7748fc0bc4:   mov    %rsp,%rbp
  0x00007f7748fc0bc7:   cmp    $0x2,%r11d
  0x00007f7748fc0bcb:   jb     Stub::jint_fill+116 0x00007f7748fc0c34
  0x00007f7748fc0bd1:   vmovd  %esi,%xmm0
  0x00007f7748fc0bd5:   vpbroadcastd %xmm0,%ymm0
  0x00007f7748fc0bda:   sub    $0x10,%r11d
  0x00007f7748fc0bde:   jl     Stub::jint_fill+67 0x00007f7748fc0c03
  0x00007f7748fc0be4:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc0bec:   data16 data16 xchg %ax,%ax
  0x00007f7748fc0bf0:   vmovdqu %ymm0,(%rdi)
  0x00007f7748fc0bf4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f7748fc0bf9:   add    $0x40,%rdi
  0x00007f7748fc0bfd:   sub    $0x10,%r11d
  0x00007f7748fc0c01:   jge    Stub::jint_fill+48 0x00007f7748fc0bf0
  0x00007f7748fc0c03:   add    $0x8,%r11d
  0x00007f7748fc0c07:   jl     Stub::jint_fill+85 0x00007f7748fc0c15
  0x00007f7748fc0c09:   vmovdqu %ymm0,(%rdi)
  0x00007f7748fc0c0d:   add    $0x20,%rdi
  0x00007f7748fc0c11:   sub    $0x8,%r11d
  0x00007f7748fc0c15:   vmovd  %esi,%xmm0
  0x00007f7748fc0c19:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f7748fc0c1e:   add    $0x8,%r11d
  0x00007f7748fc0c22:   je     Stub::jint_fill+124 0x00007f7748fc0c3c
  0x00007f7748fc0c24:   jmp    Stub::jint_fill+110 0x00007f7748fc0c2e
  0x00007f7748fc0c26:   vmovq  %xmm0,(%rdi)
  0x00007f7748fc0c2a:   add    $0x8,%rdi
  0x00007f7748fc0c2e:   sub    $0x2,%r11d
  0x00007f7748fc0c32:   jge    Stub::jint_fill+102 0x00007f7748fc0c26
  0x00007f7748fc0c34:   test   $0x1,%r11b
  0x00007f7748fc0c38:   je     Stub::jint_fill+124 0x00007f7748fc0c3c
  0x00007f7748fc0c3a:   mov    %esi,(%rdi)
  0x00007f7748fc0c3c:   vzeroupper 
  0x00007f7748fc0c3f:   leaveq 
  0x00007f7748fc0c40:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jbyte_fill [0x00007f7748fc0c60, 0x00007f7748fc0d0b] (171 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc0c60:   mov    %rdx,%r11
  0x00007f7748fc0c63:   push   %rbp
  0x00007f7748fc0c64:   mov    %rsp,%rbp
  0x00007f7748fc0c67:   and    $0xff,%esi
  0x00007f7748fc0c6d:   mov    %esi,%eax
  0x00007f7748fc0c6f:   shl    $0x8,%eax
  0x00007f7748fc0c72:   or     %eax,%esi
  0x00007f7748fc0c74:   mov    %esi,%eax
  0x00007f7748fc0c76:   shl    $0x10,%eax
  0x00007f7748fc0c79:   or     %eax,%esi
  0x00007f7748fc0c7b:   cmp    $0x8,%r11d
  0x00007f7748fc0c7f:   jb     Stub::arrayof_jbyte_fill+132 0x00007f7748fc0ce4
  0x00007f7748fc0c85:   vmovd  %esi,%xmm0
  0x00007f7748fc0c89:   vpbroadcastd %xmm0,%ymm0
  0x00007f7748fc0c8e:   sub    $0x40,%r11d
  0x00007f7748fc0c92:   jl     Stub::arrayof_jbyte_fill+83 0x00007f7748fc0cb3
  0x00007f7748fc0c98:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc0ca0:   vmovdqu %ymm0,(%rdi)
  0x00007f7748fc0ca4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f7748fc0ca9:   add    $0x40,%rdi
  0x00007f7748fc0cad:   sub    $0x40,%r11d
  0x00007f7748fc0cb1:   jge    Stub::arrayof_jbyte_fill+64 0x00007f7748fc0ca0
  0x00007f7748fc0cb3:   add    $0x20,%r11d
  0x00007f7748fc0cb7:   jl     Stub::arrayof_jbyte_fill+101 0x00007f7748fc0cc5
  0x00007f7748fc0cb9:   vmovdqu %ymm0,(%rdi)
  0x00007f7748fc0cbd:   add    $0x20,%rdi
  0x00007f7748fc0cc1:   sub    $0x20,%r11d
  0x00007f7748fc0cc5:   vmovd  %esi,%xmm0
  0x00007f7748fc0cc9:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f7748fc0cce:   add    $0x20,%r11d
  0x00007f7748fc0cd2:   je     Stub::arrayof_jbyte_fill+166 0x00007f7748fc0d06
  0x00007f7748fc0cd4:   jmp    Stub::arrayof_jbyte_fill+126 0x00007f7748fc0cde
  0x00007f7748fc0cd6:   vmovq  %xmm0,(%rdi)
  0x00007f7748fc0cda:   add    $0x8,%rdi
  0x00007f7748fc0cde:   sub    $0x8,%r11d
  0x00007f7748fc0ce2:   jge    Stub::arrayof_jbyte_fill+118 0x00007f7748fc0cd6
  0x00007f7748fc0ce4:   test   $0x4,%r11b
  0x00007f7748fc0ce8:   je     Stub::arrayof_jbyte_fill+144 0x00007f7748fc0cf0
  0x00007f7748fc0cea:   mov    %esi,(%rdi)
  0x00007f7748fc0cec:   add    $0x4,%rdi
  0x00007f7748fc0cf0:   test   $0x2,%r11b
  0x00007f7748fc0cf4:   je     Stub::arrayof_jbyte_fill+157 0x00007f7748fc0cfd
  0x00007f7748fc0cf6:   mov    %si,(%rdi)
  0x00007f7748fc0cf9:   add    $0x2,%rdi
  0x00007f7748fc0cfd:   test   $0x1,%r11b
  0x00007f7748fc0d01:   je     Stub::arrayof_jbyte_fill+166 0x00007f7748fc0d06
  0x00007f7748fc0d03:   mov    %sil,(%rdi)
  0x00007f7748fc0d06:   vzeroupper 
  0x00007f7748fc0d09:   leaveq 
  0x00007f7748fc0d0a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jshort_fill [0x00007f7748fc0d20, 0x00007f7748fc0dbe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc0d20:   mov    %rdx,%r11
  0x00007f7748fc0d23:   push   %rbp
  0x00007f7748fc0d24:   mov    %rsp,%rbp
  0x00007f7748fc0d27:   and    $0xffff,%esi
  0x00007f7748fc0d2d:   mov    %esi,%eax
  0x00007f7748fc0d2f:   shl    $0x10,%eax
  0x00007f7748fc0d32:   or     %eax,%esi
  0x00007f7748fc0d34:   cmp    $0x4,%r11d
  0x00007f7748fc0d38:   jb     Stub::arrayof_jshort_fill+132 0x00007f7748fc0da4
  0x00007f7748fc0d3e:   vmovd  %esi,%xmm0
  0x00007f7748fc0d42:   vpbroadcastd %xmm0,%ymm0
  0x00007f7748fc0d47:   sub    $0x20,%r11d
  0x00007f7748fc0d4b:   jl     Stub::arrayof_jshort_fill+83 0x00007f7748fc0d73
  0x00007f7748fc0d51:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fc0d5c:   data16 data16 xchg %ax,%ax
  0x00007f7748fc0d60:   vmovdqu %ymm0,(%rdi)
  0x00007f7748fc0d64:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f7748fc0d69:   add    $0x40,%rdi
  0x00007f7748fc0d6d:   sub    $0x20,%r11d
  0x00007f7748fc0d71:   jge    Stub::arrayof_jshort_fill+64 0x00007f7748fc0d60
  0x00007f7748fc0d73:   add    $0x10,%r11d
  0x00007f7748fc0d77:   jl     Stub::arrayof_jshort_fill+101 0x00007f7748fc0d85
  0x00007f7748fc0d79:   vmovdqu %ymm0,(%rdi)
  0x00007f7748fc0d7d:   add    $0x20,%rdi
  0x00007f7748fc0d81:   sub    $0x10,%r11d
  0x00007f7748fc0d85:   vmovd  %esi,%xmm0
  0x00007f7748fc0d89:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f7748fc0d8e:   add    $0x10,%r11d
  0x00007f7748fc0d92:   je     Stub::arrayof_jshort_fill+153 0x00007f7748fc0db9
  0x00007f7748fc0d94:   jmp    Stub::arrayof_jshort_fill+126 0x00007f7748fc0d9e
  0x00007f7748fc0d96:   vmovq  %xmm0,(%rdi)
  0x00007f7748fc0d9a:   add    $0x8,%rdi
  0x00007f7748fc0d9e:   sub    $0x4,%r11d
  0x00007f7748fc0da2:   jge    Stub::arrayof_jshort_fill+118 0x00007f7748fc0d96
  0x00007f7748fc0da4:   test   $0x2,%r11b
  0x00007f7748fc0da8:   je     Stub::arrayof_jshort_fill+144 0x00007f7748fc0db0
  0x00007f7748fc0daa:   mov    %esi,(%rdi)
  0x00007f7748fc0dac:   add    $0x4,%rdi
  0x00007f7748fc0db0:   test   $0x1,%r11b
  0x00007f7748fc0db4:   je     Stub::arrayof_jshort_fill+153 0x00007f7748fc0db9
  0x00007f7748fc0db6:   mov    %si,(%rdi)
  0x00007f7748fc0db9:   vzeroupper 
  0x00007f7748fc0dbc:   leaveq 
  0x00007f7748fc0dbd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jint_fill [0x00007f7748fc0dc0, 0x00007f7748fc0e41] (129 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc0dc0:   mov    %rdx,%r11
  0x00007f7748fc0dc3:   push   %rbp
  0x00007f7748fc0dc4:   mov    %rsp,%rbp
  0x00007f7748fc0dc7:   cmp    $0x2,%r11d
  0x00007f7748fc0dcb:   jb     Stub::arrayof_jint_fill+116 0x00007f7748fc0e34
  0x00007f7748fc0dd1:   vmovd  %esi,%xmm0
  0x00007f7748fc0dd5:   vpbroadcastd %xmm0,%ymm0
  0x00007f7748fc0dda:   sub    $0x10,%r11d
  0x00007f7748fc0dde:   jl     Stub::arrayof_jint_fill+67 0x00007f7748fc0e03
  0x00007f7748fc0de4:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc0dec:   data16 data16 xchg %ax,%ax
  0x00007f7748fc0df0:   vmovdqu %ymm0,(%rdi)
  0x00007f7748fc0df4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f7748fc0df9:   add    $0x40,%rdi
  0x00007f7748fc0dfd:   sub    $0x10,%r11d
  0x00007f7748fc0e01:   jge    Stub::arrayof_jint_fill+48 0x00007f7748fc0df0
  0x00007f7748fc0e03:   add    $0x8,%r11d
  0x00007f7748fc0e07:   jl     Stub::arrayof_jint_fill+85 0x00007f7748fc0e15
  0x00007f7748fc0e09:   vmovdqu %ymm0,(%rdi)
  0x00007f7748fc0e0d:   add    $0x20,%rdi
  0x00007f7748fc0e11:   sub    $0x8,%r11d
  0x00007f7748fc0e15:   vmovd  %esi,%xmm0
  0x00007f7748fc0e19:   vpshufd $0x0,%xmm0,%xmm0
  0x00007f7748fc0e1e:   add    $0x8,%r11d
  0x00007f7748fc0e22:   je     Stub::arrayof_jint_fill+124 0x00007f7748fc0e3c
  0x00007f7748fc0e24:   jmp    Stub::arrayof_jint_fill+110 0x00007f7748fc0e2e
  0x00007f7748fc0e26:   vmovq  %xmm0,(%rdi)
  0x00007f7748fc0e2a:   add    $0x8,%rdi
  0x00007f7748fc0e2e:   sub    $0x2,%r11d
  0x00007f7748fc0e32:   jge    Stub::arrayof_jint_fill+102 0x00007f7748fc0e26
  0x00007f7748fc0e34:   test   $0x1,%r11b
  0x00007f7748fc0e38:   je     Stub::arrayof_jint_fill+124 0x00007f7748fc0e3c
  0x00007f7748fc0e3a:   mov    %esi,(%rdi)
  0x00007f7748fc0e3c:   vzeroupper 
  0x00007f7748fc0e3f:   leaveq 
  0x00007f7748fc0e40:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::aescrypt_encryptBlock [0x00007f7748fc0e60, 0x00007f7748fc0f7a] (282 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc0e60:   push   %rbp
  0x00007f7748fc0e61:   mov    %rsp,%rbp
  0x00007f7748fc0e64:   mov    -0x4(%rdx),%eax
  0x00007f7748fc0e67:   vmovdqu 0x46757d1(%rip),%xmm1        # 0x00007f774d636640
  0x00007f7748fc0e6f:   vmovdqu (%rdi),%xmm0
  0x00007f7748fc0e73:   vmovdqu (%rdx),%xmm2
  0x00007f7748fc0e77:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f7748fc0e7c:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f7748fc0e80:   vmovdqu 0x10(%rdx),%xmm2
  0x00007f7748fc0e85:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f7748fc0e8a:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f7748fc0e8f:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc0e94:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f7748fc0e99:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc0e9e:   vmovdqu 0x40(%rdx),%xmm5
  0x00007f7748fc0ea3:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f7748fc0ea8:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f7748fc0ead:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f7748fc0eb2:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f7748fc0eb7:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f7748fc0ebc:   vmovdqu 0x50(%rdx),%xmm2
  0x00007f7748fc0ec1:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f7748fc0ec6:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f7748fc0ecb:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc0ed0:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f7748fc0ed5:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc0eda:   vmovdqu 0x80(%rdx),%xmm5
  0x00007f7748fc0ee2:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f7748fc0ee7:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f7748fc0eec:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f7748fc0ef1:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f7748fc0ef6:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f7748fc0efb:   vmovdqu 0x90(%rdx),%xmm2
  0x00007f7748fc0f03:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f7748fc0f08:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f7748fc0f10:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc0f15:   cmp    $0x2c,%eax
  0x00007f7748fc0f18:   je     Stub::aescrypt_encryptBlock+263 0x00007f7748fc0f67
  0x00007f7748fc0f1a:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f7748fc0f1f:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f7748fc0f24:   vmovdqu 0xb0(%rdx),%xmm2
  0x00007f7748fc0f2c:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f7748fc0f31:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f7748fc0f39:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc0f3e:   cmp    $0x34,%eax
  0x00007f7748fc0f41:   je     Stub::aescrypt_encryptBlock+263 0x00007f7748fc0f67
  0x00007f7748fc0f43:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f7748fc0f48:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f7748fc0f4d:   vmovdqu 0xd0(%rdx),%xmm2
  0x00007f7748fc0f55:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f7748fc0f5a:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007f7748fc0f62:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc0f67:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007f7748fc0f6c:   vaesenclast %xmm3,%xmm0,%xmm0
  0x00007f7748fc0f71:   vmovdqu %xmm0,(%rsi)
  0x00007f7748fc0f75:   xor    %rax,%rax
  0x00007f7748fc0f78:   leaveq 
  0x00007f7748fc0f79:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::aescrypt_decryptBlock [0x00007f7748fc0f80, 0x00007f7748fc109a] (282 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc0f80:   push   %rbp
  0x00007f7748fc0f81:   mov    %rsp,%rbp
  0x00007f7748fc0f84:   mov    -0x4(%rdx),%eax
  0x00007f7748fc0f87:   vmovdqu 0x46756b1(%rip),%xmm1        # 0x00007f774d636640
  0x00007f7748fc0f8f:   vmovdqu (%rdi),%xmm0
  0x00007f7748fc0f93:   vmovdqu 0x10(%rdx),%xmm2
  0x00007f7748fc0f98:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f7748fc0f9d:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f7748fc0fa2:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc0fa7:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f7748fc0fac:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc0fb1:   vmovdqu 0x40(%rdx),%xmm5
  0x00007f7748fc0fb6:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f7748fc0fbb:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f7748fc0fbf:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f7748fc0fc4:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f7748fc0fc9:   vaesdec %xmm5,%xmm0,%xmm0
  0x00007f7748fc0fce:   vmovdqu 0x50(%rdx),%xmm2
  0x00007f7748fc0fd3:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f7748fc0fd8:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f7748fc0fdd:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc0fe2:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f7748fc0fe7:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc0fec:   vmovdqu 0x80(%rdx),%xmm5
  0x00007f7748fc0ff4:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f7748fc0ff9:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007f7748fc0ffe:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f7748fc1003:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f7748fc1008:   vaesdec %xmm5,%xmm0,%xmm0
  0x00007f7748fc100d:   vmovdqu 0x90(%rdx),%xmm2
  0x00007f7748fc1015:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f7748fc101a:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f7748fc1022:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1027:   vmovdqu (%rdx),%xmm4
  0x00007f7748fc102b:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc1030:   cmp    $0x2c,%eax
  0x00007f7748fc1033:   je     Stub::aescrypt_decryptBlock+258 0x00007f7748fc1082
  0x00007f7748fc1035:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007f7748fc103a:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f7748fc103f:   vmovdqu 0xb0(%rdx),%xmm2
  0x00007f7748fc1047:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f7748fc104c:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f7748fc1054:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1059:   cmp    $0x34,%eax
  0x00007f7748fc105c:   je     Stub::aescrypt_decryptBlock+258 0x00007f7748fc1082
  0x00007f7748fc105e:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007f7748fc1063:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f7748fc1068:   vmovdqu 0xd0(%rdx),%xmm2
  0x00007f7748fc1070:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f7748fc1075:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007f7748fc107d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1082:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007f7748fc1087:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f7748fc108c:   vaesdeclast %xmm4,%xmm0,%xmm0
  0x00007f7748fc1091:   vmovdqu %xmm0,(%rsi)
  0x00007f7748fc1095:   xor    %rax,%rax
  0x00007f7748fc1098:   leaveq 
  0x00007f7748fc1099:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::cipherBlockChaining_encryptAESCrypt [0x00007f7748fc10a0, 0x00007f7748fc12c8] (552 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc10a0:   push   %rbp
  0x00007f7748fc10a1:   mov    %rsp,%rbp
  0x00007f7748fc10a4:   push   %r8
  0x00007f7748fc10a6:   vmovdqu 0x4675592(%rip),%xmm1        # 0x00007f774d636640
  0x00007f7748fc10ae:   vmovdqu (%rdx),%xmm2
  0x00007f7748fc10b2:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007f7748fc10b7:   vmovdqu 0x10(%rdx),%xmm3
  0x00007f7748fc10bc:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc10c1:   vmovdqu 0x20(%rdx),%xmm4
  0x00007f7748fc10c6:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc10cb:   vmovdqu 0x30(%rdx),%xmm5
  0x00007f7748fc10d0:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f7748fc10d5:   vmovdqu 0x40(%rdx),%xmm6
  0x00007f7748fc10da:   vpshufb %xmm1,%xmm6,%xmm6
  0x00007f7748fc10df:   vmovdqu 0x50(%rdx),%xmm7
  0x00007f7748fc10e4:   vpshufb %xmm1,%xmm7,%xmm7
  0x00007f7748fc10e9:   vmovdqu 0x60(%rdx),%xmm8
  0x00007f7748fc10ee:   vpshufb %xmm1,%xmm8,%xmm8
  0x00007f7748fc10f3:   vmovdqu 0x70(%rdx),%xmm9
  0x00007f7748fc10f8:   vpshufb %xmm1,%xmm9,%xmm9
  0x00007f7748fc10fd:   vmovdqu 0x80(%rdx),%xmm10
  0x00007f7748fc1105:   vpshufb %xmm1,%xmm10,%xmm10
  0x00007f7748fc110a:   vmovdqu 0x90(%rdx),%xmm11
  0x00007f7748fc1112:   vpshufb %xmm1,%xmm11,%xmm11
  0x00007f7748fc1117:   vmovdqu 0xa0(%rdx),%xmm12
  0x00007f7748fc111f:   vpshufb %xmm1,%xmm12,%xmm12
  0x00007f7748fc1124:   vmovdqu (%rcx),%xmm0
  0x00007f7748fc1128:   mov    -0x4(%rdx),%eax
  0x00007f7748fc112b:   cmp    $0x2c,%eax
  0x00007f7748fc112e:   jne    Stub::cipherBlockChaining_encryptAESCrypt+245 0x00007f7748fc1195
  0x00007f7748fc1134:   movabs $0x0,%rax
  0x00007f7748fc113e:   xchg   %ax,%ax
  0x00007f7748fc1140:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f7748fc1145:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748fc1149:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f7748fc114d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f7748fc1152:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f7748fc1157:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f7748fc115c:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007f7748fc1161:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007f7748fc1166:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007f7748fc116b:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007f7748fc1170:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007f7748fc1175:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007f7748fc117a:   vaesenclast %xmm12,%xmm0,%xmm0
  0x00007f7748fc117f:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f7748fc1184:   add    $0x10,%rax
  0x00007f7748fc1188:   sub    $0x10,%r8
  0x00007f7748fc118c:   jne    Stub::cipherBlockChaining_encryptAESCrypt+160 0x00007f7748fc1140
  0x00007f7748fc118e:   vmovdqu %xmm0,(%rcx)
  0x00007f7748fc1192:   pop    %rax
  0x00007f7748fc1193:   leaveq 
  0x00007f7748fc1194:   retq   
  0x00007f7748fc1195:   vmovdqu 0xb0(%rdx),%xmm13
  0x00007f7748fc119d:   vpshufb %xmm1,%xmm13,%xmm13
  0x00007f7748fc11a2:   vmovdqu 0xc0(%rdx),%xmm14
  0x00007f7748fc11aa:   vpshufb %xmm1,%xmm14,%xmm14
  0x00007f7748fc11af:   cmp    $0x34,%eax
  0x00007f7748fc11b2:   jne    Stub::cipherBlockChaining_encryptAESCrypt+397 0x00007f7748fc122d
  0x00007f7748fc11b8:   movabs $0x0,%rax
  0x00007f7748fc11c2:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fc11cc:   data16 data16 xchg %ax,%ax
  0x00007f7748fc11d0:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f7748fc11d5:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748fc11d9:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f7748fc11dd:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f7748fc11e2:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f7748fc11e7:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f7748fc11ec:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007f7748fc11f1:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007f7748fc11f6:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007f7748fc11fb:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007f7748fc1200:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007f7748fc1205:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007f7748fc120a:   vaesenc %xmm12,%xmm0,%xmm0
  0x00007f7748fc120f:   vaesenc %xmm13,%xmm0,%xmm0
  0x00007f7748fc1214:   vaesenclast %xmm14,%xmm0,%xmm0
  0x00007f7748fc1219:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f7748fc121e:   add    $0x10,%rax
  0x00007f7748fc1222:   sub    $0x10,%r8
  0x00007f7748fc1226:   jne    Stub::cipherBlockChaining_encryptAESCrypt+304 0x00007f7748fc11d0
  0x00007f7748fc1228:   jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x00007f7748fc118e
  0x00007f7748fc122d:   vmovdqu 0xd0(%rdx),%xmm15
  0x00007f7748fc1235:   vpshufb %xmm1,%xmm15,%xmm15
  0x00007f7748fc123a:   movabs $0x0,%rax
  0x00007f7748fc1244:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc124c:   data16 data16 xchg %ax,%ax
  0x00007f7748fc1250:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f7748fc1255:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748fc1259:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f7748fc125d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007f7748fc1262:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007f7748fc1267:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007f7748fc126c:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007f7748fc1271:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007f7748fc1276:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007f7748fc127b:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007f7748fc1280:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007f7748fc1285:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007f7748fc128a:   vaesenc %xmm12,%xmm0,%xmm0
  0x00007f7748fc128f:   vaesenc %xmm13,%xmm0,%xmm0
  0x00007f7748fc1294:   vaesenc %xmm14,%xmm0,%xmm0
  0x00007f7748fc1299:   vaesenc %xmm15,%xmm0,%xmm0
  0x00007f7748fc129e:   vmovdqu 0xe0(%rdx),%xmm1
  0x00007f7748fc12a6:   vpshufb 0x4675391(%rip),%xmm1,%xmm1        # 0x00007f774d636640
  0x00007f7748fc12af:   vaesenclast %xmm1,%xmm0,%xmm0
  0x00007f7748fc12b4:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f7748fc12b9:   add    $0x10,%rax
  0x00007f7748fc12bd:   sub    $0x10,%r8
  0x00007f7748fc12c1:   jne    Stub::cipherBlockChaining_encryptAESCrypt+432 0x00007f7748fc1250
  0x00007f7748fc12c3:   jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x00007f7748fc118e
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::cipherBlockChaining_decryptAESCrypt [0x00007f7748fc12e0, 0x00007f7748fc1aa9] (1993 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc12e0:   push   %rbp
  0x00007f7748fc12e1:   mov    %rsp,%rbp
  0x00007f7748fc12e4:   push   %r8
  0x00007f7748fc12e6:   push   %rbx
  0x00007f7748fc12e7:   vmovdqu 0x4675351(%rip),%xmm1        # 0x00007f774d636640
  0x00007f7748fc12ef:   vmovdqu 0x10(%rdx),%xmm5
  0x00007f7748fc12f4:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007f7748fc12f9:   vmovdqu 0x20(%rdx),%xmm6
  0x00007f7748fc12fe:   vpshufb %xmm1,%xmm6,%xmm6
  0x00007f7748fc1303:   vmovdqu 0x30(%rdx),%xmm7
  0x00007f7748fc1308:   vpshufb %xmm1,%xmm7,%xmm7
  0x00007f7748fc130d:   vmovdqu 0x40(%rdx),%xmm8
  0x00007f7748fc1312:   vpshufb %xmm1,%xmm8,%xmm8
  0x00007f7748fc1317:   vmovdqu 0x50(%rdx),%xmm9
  0x00007f7748fc131c:   vpshufb %xmm1,%xmm9,%xmm9
  0x00007f7748fc1321:   vmovdqu 0x60(%rdx),%xmm10
  0x00007f7748fc1326:   vpshufb %xmm1,%xmm10,%xmm10
  0x00007f7748fc132b:   vmovdqu 0x70(%rdx),%xmm11
  0x00007f7748fc1330:   vpshufb %xmm1,%xmm11,%xmm11
  0x00007f7748fc1335:   vmovdqu 0x80(%rdx),%xmm12
  0x00007f7748fc133d:   vpshufb %xmm1,%xmm12,%xmm12
  0x00007f7748fc1342:   vmovdqu 0x90(%rdx),%xmm13
  0x00007f7748fc134a:   vpshufb %xmm1,%xmm13,%xmm13
  0x00007f7748fc134f:   vmovdqu 0xa0(%rdx),%xmm14
  0x00007f7748fc1357:   vpshufb %xmm1,%xmm14,%xmm14
  0x00007f7748fc135c:   vmovdqu (%rdx),%xmm15
  0x00007f7748fc1360:   vpshufb %xmm1,%xmm15,%xmm15
  0x00007f7748fc1365:   vmovdqu (%rcx),%xmm1
  0x00007f7748fc1369:   xor    %rax,%rax
  0x00007f7748fc136c:   mov    -0x4(%rdx),%ebx
  0x00007f7748fc136f:   cmp    $0x34,%ebx
  0x00007f7748fc1372:   je     Stub::cipherBlockChaining_decryptAESCrypt+603 0x00007f7748fc153b
  0x00007f7748fc1378:   cmp    $0x3c,%ebx
  0x00007f7748fc137b:   je     Stub::cipherBlockChaining_decryptAESCrypt+1221 0x00007f7748fc17a5
  0x00007f7748fc1381:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fc138c:   data16 data16 xchg %ax,%ax
  0x00007f7748fc1390:   cmp    $0x40,%r8
  0x00007f7748fc1394:   jl     Stub::cipherBlockChaining_decryptAESCrypt+500 0x00007f7748fc14d4
  0x00007f7748fc139a:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f7748fc139f:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007f7748fc13a5:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007f7748fc13ab:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007f7748fc13b1:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f7748fc13b5:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007f7748fc13b9:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007f7748fc13bd:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f7748fc13c1:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f7748fc13c6:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007f7748fc13cb:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007f7748fc13d0:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007f7748fc13d5:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f7748fc13da:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007f7748fc13df:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007f7748fc13e4:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007f7748fc13e9:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f7748fc13ee:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007f7748fc13f3:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007f7748fc13f8:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007f7748fc13fd:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f7748fc1402:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007f7748fc1407:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007f7748fc140c:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007f7748fc1411:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f7748fc1416:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007f7748fc141b:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007f7748fc1420:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007f7748fc1425:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f7748fc142a:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007f7748fc142f:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007f7748fc1434:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007f7748fc1439:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f7748fc143e:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007f7748fc1443:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007f7748fc1448:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007f7748fc144d:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f7748fc1452:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007f7748fc1457:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007f7748fc145c:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007f7748fc1461:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f7748fc1466:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007f7748fc146b:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007f7748fc1470:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007f7748fc1475:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f7748fc147a:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007f7748fc147f:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007f7748fc1484:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007f7748fc1489:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748fc148d:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f7748fc1492:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007f7748fc1496:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007f7748fc149c:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007f7748fc14a0:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007f7748fc14a6:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007f7748fc14aa:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007f7748fc14b0:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f7748fc14b5:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007f7748fc14bb:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007f7748fc14c1:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007f7748fc14c7:   add    $0x40,%rax
  0x00007f7748fc14cb:   sub    $0x40,%r8
  0x00007f7748fc14cf:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+176 0x00007f7748fc1390
  0x00007f7748fc14d4:   cmp    $0x0,%r8
  0x00007f7748fc14d8:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f7748fc1aa1
  0x00007f7748fc14de:   xchg   %ax,%ax
  0x00007f7748fc14e0:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f7748fc14e5:   vmovdqa %xmm0,%xmm2
  0x00007f7748fc14e9:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f7748fc14ed:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f7748fc14f2:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f7748fc14f7:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f7748fc14fc:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f7748fc1501:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f7748fc1506:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f7748fc150b:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f7748fc1510:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f7748fc1515:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f7748fc151a:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f7748fc151f:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748fc1523:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f7748fc1528:   vmovdqa %xmm2,%xmm1
  0x00007f7748fc152c:   add    $0x10,%rax
  0x00007f7748fc1530:   sub    $0x10,%r8
  0x00007f7748fc1534:   jne    Stub::cipherBlockChaining_decryptAESCrypt+512 0x00007f7748fc14e0
  0x00007f7748fc1536:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f7748fc1aa1
  0x00007f7748fc153b:   cmp    $0x40,%r8
  0x00007f7748fc153f:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1075 0x00007f7748fc1713
  0x00007f7748fc1545:   sub    $0x30,%rsp
  0x00007f7748fc1549:   vmovdqu %xmm15,(%rsp)
  0x00007f7748fc154e:   vmovdqu 0xb0(%rdx),%xmm15
  0x00007f7748fc1556:   vpshufb 0x46750e1(%rip),%xmm15,%xmm15        # 0x00007f774d636640
  0x00007f7748fc155f:   vmovdqu %xmm15,0x10(%rsp)
  0x00007f7748fc1565:   vmovdqu 0xc0(%rdx),%xmm1
  0x00007f7748fc156d:   vpshufb 0x46750ca(%rip),%xmm1,%xmm1        # 0x00007f774d636640
  0x00007f7748fc1576:   vmovdqu %xmm1,0x20(%rsp)
  0x00007f7748fc157c:   nopl   0x0(%rax)
  0x00007f7748fc1580:   cmp    $0x40,%r8
  0x00007f7748fc1584:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1061 0x00007f7748fc1705
  0x00007f7748fc158a:   vmovdqu 0x10(%rsp),%xmm15
  0x00007f7748fc1590:   vmovdqu 0x20(%rsp),%xmm1
  0x00007f7748fc1596:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f7748fc159b:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007f7748fc15a1:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007f7748fc15a7:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007f7748fc15ad:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f7748fc15b1:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007f7748fc15b5:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007f7748fc15b9:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f7748fc15bd:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f7748fc15c2:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007f7748fc15c7:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007f7748fc15cc:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007f7748fc15d1:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f7748fc15d6:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007f7748fc15db:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007f7748fc15e0:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007f7748fc15e5:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f7748fc15ea:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007f7748fc15ef:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007f7748fc15f4:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007f7748fc15f9:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f7748fc15fe:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007f7748fc1603:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007f7748fc1608:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007f7748fc160d:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f7748fc1612:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007f7748fc1617:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007f7748fc161c:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007f7748fc1621:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f7748fc1626:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007f7748fc162b:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007f7748fc1630:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007f7748fc1635:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f7748fc163a:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007f7748fc163f:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007f7748fc1644:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007f7748fc1649:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f7748fc164e:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007f7748fc1653:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007f7748fc1658:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007f7748fc165d:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f7748fc1662:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007f7748fc1667:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007f7748fc166c:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007f7748fc1671:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007f7748fc1676:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007f7748fc167b:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007f7748fc1680:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007f7748fc1685:   vmovdqu (%rsp),%xmm15
  0x00007f7748fc168a:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007f7748fc168f:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007f7748fc1694:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007f7748fc1699:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007f7748fc169e:   vmovdqu (%rcx),%xmm1
  0x00007f7748fc16a2:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f7748fc16a7:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007f7748fc16ac:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007f7748fc16b1:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007f7748fc16b6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748fc16ba:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f7748fc16bf:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007f7748fc16c3:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007f7748fc16c9:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007f7748fc16cd:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007f7748fc16d3:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007f7748fc16d7:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007f7748fc16dd:   vmovdqu %xmm1,(%rcx)
  0x00007f7748fc16e1:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f7748fc16e6:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007f7748fc16ec:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007f7748fc16f2:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007f7748fc16f8:   add    $0x40,%rax
  0x00007f7748fc16fc:   sub    $0x40,%r8
  0x00007f7748fc1700:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+672 0x00007f7748fc1580
  0x00007f7748fc1705:   add    $0x30,%rsp
  0x00007f7748fc1709:   cmp    $0x0,%r8
  0x00007f7748fc170d:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f7748fc1aa1
  0x00007f7748fc1713:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007f7748fc171b:   vpshufb 0x4674f1c(%rip),%xmm3,%xmm3        # 0x00007f774d636640
  0x00007f7748fc1724:   vmovdqu 0xc0(%rdx),%xmm4
  0x00007f7748fc172c:   vpshufb 0x4674f0b(%rip),%xmm4,%xmm4        # 0x00007f774d636640
  0x00007f7748fc1735:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fc1740:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f7748fc1745:   vmovdqa %xmm0,%xmm2
  0x00007f7748fc1749:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f7748fc174d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f7748fc1752:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f7748fc1757:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f7748fc175c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f7748fc1761:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f7748fc1766:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f7748fc176b:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f7748fc1770:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f7748fc1775:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f7748fc177a:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f7748fc177f:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f7748fc1784:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f7748fc1789:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748fc178d:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f7748fc1792:   vmovdqa %xmm2,%xmm1
  0x00007f7748fc1796:   add    $0x10,%rax
  0x00007f7748fc179a:   sub    $0x10,%r8
  0x00007f7748fc179e:   jne    Stub::cipherBlockChaining_decryptAESCrypt+1120 0x00007f7748fc1740
  0x00007f7748fc17a0:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f7748fc1aa1
  0x00007f7748fc17a5:   cmp    $0x40,%r8
  0x00007f7748fc17a9:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1799 0x00007f7748fc19e7
  0x00007f7748fc17af:   sub    $0x50,%rsp
  0x00007f7748fc17b3:   vmovdqu %xmm15,(%rsp)
  0x00007f7748fc17b8:   vmovdqu 0xd0(%rdx),%xmm15
  0x00007f7748fc17c0:   vpshufb 0x4674e77(%rip),%xmm15,%xmm15        # 0x00007f774d636640
  0x00007f7748fc17c9:   vmovdqu %xmm15,0x30(%rsp)
  0x00007f7748fc17cf:   vmovdqu 0xe0(%rdx),%xmm1
  0x00007f7748fc17d7:   vpshufb 0x4674e60(%rip),%xmm1,%xmm1        # 0x00007f774d636640
  0x00007f7748fc17e0:   vmovdqu %xmm1,0x40(%rsp)
  0x00007f7748fc17e6:   vmovdqu 0xb0(%rdx),%xmm15
  0x00007f7748fc17ee:   vpshufb 0x4674e49(%rip),%xmm15,%xmm15        # 0x00007f774d636640
  0x00007f7748fc17f7:   vmovdqu %xmm15,0x10(%rsp)
  0x00007f7748fc17fd:   vmovdqu 0xc0(%rdx),%xmm1
  0x00007f7748fc1805:   vpshufb 0x4674e32(%rip),%xmm1,%xmm1        # 0x00007f774d636640
  0x00007f7748fc180e:   vmovdqu %xmm1,0x20(%rsp)
  0x00007f7748fc1814:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc181c:   data16 data16 xchg %ax,%ax
  0x00007f7748fc1820:   cmp    $0x40,%r8
  0x00007f7748fc1824:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1785 0x00007f7748fc19d9
  0x00007f7748fc182a:   vmovdqu 0x10(%rsp),%xmm15
  0x00007f7748fc1830:   vmovdqu 0x20(%rsp),%xmm1
  0x00007f7748fc1836:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f7748fc183b:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007f7748fc1841:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007f7748fc1847:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007f7748fc184d:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f7748fc1851:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007f7748fc1855:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007f7748fc1859:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f7748fc185d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f7748fc1862:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007f7748fc1867:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007f7748fc186c:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007f7748fc1871:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f7748fc1876:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007f7748fc187b:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007f7748fc1880:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007f7748fc1885:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f7748fc188a:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007f7748fc188f:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007f7748fc1894:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007f7748fc1899:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f7748fc189e:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007f7748fc18a3:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007f7748fc18a8:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007f7748fc18ad:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f7748fc18b2:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007f7748fc18b7:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007f7748fc18bc:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007f7748fc18c1:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f7748fc18c6:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007f7748fc18cb:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007f7748fc18d0:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007f7748fc18d5:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f7748fc18da:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007f7748fc18df:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007f7748fc18e4:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007f7748fc18e9:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f7748fc18ee:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007f7748fc18f3:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007f7748fc18f8:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007f7748fc18fd:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f7748fc1902:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007f7748fc1907:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007f7748fc190c:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007f7748fc1911:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007f7748fc1916:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007f7748fc191b:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007f7748fc1920:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007f7748fc1925:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007f7748fc192a:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007f7748fc192f:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007f7748fc1934:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007f7748fc1939:   vmovdqu 0x30(%rsp),%xmm15
  0x00007f7748fc193f:   vmovdqu 0x40(%rsp),%xmm1
  0x00007f7748fc1945:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007f7748fc194a:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007f7748fc194f:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007f7748fc1954:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007f7748fc1959:   vmovdqu (%rsp),%xmm15
  0x00007f7748fc195e:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007f7748fc1963:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007f7748fc1968:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007f7748fc196d:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007f7748fc1972:   vmovdqu (%rcx),%xmm1
  0x00007f7748fc1976:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f7748fc197b:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007f7748fc1980:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007f7748fc1985:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007f7748fc198a:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748fc198e:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f7748fc1993:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007f7748fc1997:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007f7748fc199d:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007f7748fc19a1:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007f7748fc19a7:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007f7748fc19ab:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007f7748fc19b1:   vmovdqu %xmm1,(%rcx)
  0x00007f7748fc19b5:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f7748fc19ba:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007f7748fc19c0:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007f7748fc19c6:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007f7748fc19cc:   add    $0x40,%rax
  0x00007f7748fc19d0:   sub    $0x40,%r8
  0x00007f7748fc19d4:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1344 0x00007f7748fc1820
  0x00007f7748fc19d9:   add    $0x50,%rsp
  0x00007f7748fc19dd:   cmp    $0x0,%r8
  0x00007f7748fc19e1:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007f7748fc1aa1
  0x00007f7748fc19e7:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007f7748fc19ef:   vpshufb 0x4674c48(%rip),%xmm3,%xmm3        # 0x00007f774d636640
  0x00007f7748fc19f8:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc1a00:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f7748fc1a05:   vmovdqa %xmm0,%xmm2
  0x00007f7748fc1a09:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007f7748fc1a0d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007f7748fc1a12:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007f7748fc1a17:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007f7748fc1a1c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007f7748fc1a21:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007f7748fc1a26:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007f7748fc1a2b:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007f7748fc1a30:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007f7748fc1a35:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007f7748fc1a3a:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007f7748fc1a3f:   vmovdqu 0xc0(%rdx),%xmm4
  0x00007f7748fc1a47:   vpshufb 0x4674bf0(%rip),%xmm4,%xmm4        # 0x00007f774d636640
  0x00007f7748fc1a50:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f7748fc1a55:   vmovdqu 0xd0(%rdx),%xmm4
  0x00007f7748fc1a5d:   vpshufb 0x4674bda(%rip),%xmm4,%xmm4        # 0x00007f774d636640
  0x00007f7748fc1a66:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f7748fc1a6b:   vmovdqu 0xe0(%rdx),%xmm4
  0x00007f7748fc1a73:   vpshufb 0x4674bc4(%rip),%xmm4,%xmm4        # 0x00007f774d636640
  0x00007f7748fc1a7c:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007f7748fc1a81:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f7748fc1a86:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748fc1a8a:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f7748fc1a8f:   vmovdqa %xmm2,%xmm1
  0x00007f7748fc1a93:   add    $0x10,%rax
  0x00007f7748fc1a97:   sub    $0x10,%r8
  0x00007f7748fc1a9b:   jne    Stub::cipherBlockChaining_decryptAESCrypt+1824 0x00007f7748fc1a00
  0x00007f7748fc1aa1:   vmovdqu %xmm1,(%rcx)
  0x00007f7748fc1aa5:   pop    %rbx
  0x00007f7748fc1aa6:   pop    %rax
  0x00007f7748fc1aa7:   leaveq 
  0x00007f7748fc1aa8:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::counterMode_AESCrypt [0x00007f7748fc1ac0, 0x00007f7748fc2c79] (4537 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc1ac0:   push   %rbp
  0x00007f7748fc1ac1:   mov    %rsp,%rbp
  0x00007f7748fc1ac4:   push   %r8
  0x00007f7748fc1ac6:   mov    0x10(%rbp),%r10
  0x00007f7748fc1aca:   mov    (%r10),%r11d
  0x00007f7748fc1acd:   push   %rbx
  0x00007f7748fc1ace:   vmovdqu (%rcx),%xmm2
  0x00007f7748fc1ad2:   vmovdqu 0x4674b26(%rip),%xmm0        # 0x00007f774d636600
  0x00007f7748fc1ada:   vpshufb %xmm0,%xmm2,%xmm2
  0x00007f7748fc1adf:   movabs $0x0,%rax
  0x00007f7748fc1ae9:   cmp    $0x10,%r11
  0x00007f7748fc1aed:   jae    Stub::counterMode_AESCrypt+85 0x00007f7748fc1b15
  0x00007f7748fc1af3:   cmp    $0x0,%r8
  0x00007f7748fc1af7:   jle    Stub::counterMode_AESCrypt+85 0x00007f7748fc1b15
  0x00007f7748fc1afd:   mov    (%r9,%r11,1),%bl
  0x00007f7748fc1b01:   xor    (%rdi,%rax,1),%bl
  0x00007f7748fc1b04:   mov    %bl,(%rsi,%rax,1)
  0x00007f7748fc1b07:   add    $0x1,%rax
  0x00007f7748fc1b0b:   add    $0x1,%r11
  0x00007f7748fc1b0f:   sub    $0x1,%r8
  0x00007f7748fc1b13:   jmp    Stub::counterMode_AESCrypt+41 0x00007f7748fc1ae9
  0x00007f7748fc1b15:   mov    %r11d,(%r10)
  0x00007f7748fc1b18:   vmovdqu 0x4674b20(%rip),%xmm1        # 0x00007f774d636640
  0x00007f7748fc1b20:   mov    -0x4(%rdx),%ebx
  0x00007f7748fc1b23:   cmp    $0x34,%ebx
  0x00007f7748fc1b26:   je     Stub::counterMode_AESCrypt+1472 0x00007f7748fc2080
  0x00007f7748fc1b2c:   cmp    $0x3c,%ebx
  0x00007f7748fc1b2f:   je     Stub::counterMode_AESCrypt+2944 0x00007f7748fc2640
  0x00007f7748fc1b35:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fc1b40:   cmp    $0x60,%r8
  0x00007f7748fc1b44:   jl     Stub::counterMode_AESCrypt+976 0x00007f7748fc1e90
  0x00007f7748fc1b4a:   vmovdqu (%rdx),%xmm3
  0x00007f7748fc1b4e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1b53:   vmovdqa %xmm2,%xmm5
  0x00007f7748fc1b57:   vmovdqa %xmm2,%xmm6
  0x00007f7748fc1b5b:   vmovdqa %xmm2,%xmm7
  0x00007f7748fc1b5f:   vmovdqa %xmm2,%xmm8
  0x00007f7748fc1b63:   vmovdqa %xmm2,%xmm9
  0x00007f7748fc1b67:   vmovdqa %xmm2,%xmm10
  0x00007f7748fc1b6b:   vpextrq $0x0,%xmm6,%rbx
  0x00007f7748fc1b71:   add    $0x1,%rbx
  0x00007f7748fc1b75:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007f7748fc1b7b:   jae    Stub::counterMode_AESCrypt+209 0x00007f7748fc1b91
  0x00007f7748fc1b81:   vpextrq $0x1,%xmm6,%rbx
  0x00007f7748fc1b87:   add    $0x1,%rbx
  0x00007f7748fc1b8b:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007f7748fc1b91:   vpextrq $0x0,%xmm7,%rbx
  0x00007f7748fc1b97:   add    $0x2,%rbx
  0x00007f7748fc1b9b:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007f7748fc1ba1:   jae    Stub::counterMode_AESCrypt+247 0x00007f7748fc1bb7
  0x00007f7748fc1ba7:   vpextrq $0x1,%xmm7,%rbx
  0x00007f7748fc1bad:   add    $0x1,%rbx
  0x00007f7748fc1bb1:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007f7748fc1bb7:   vpextrq $0x0,%xmm8,%rbx
  0x00007f7748fc1bbd:   add    $0x3,%rbx
  0x00007f7748fc1bc1:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007f7748fc1bc7:   jae    Stub::counterMode_AESCrypt+285 0x00007f7748fc1bdd
  0x00007f7748fc1bcd:   vpextrq $0x1,%xmm8,%rbx
  0x00007f7748fc1bd3:   add    $0x1,%rbx
  0x00007f7748fc1bd7:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007f7748fc1bdd:   vpextrq $0x0,%xmm9,%rbx
  0x00007f7748fc1be3:   add    $0x4,%rbx
  0x00007f7748fc1be7:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007f7748fc1bed:   jae    Stub::counterMode_AESCrypt+323 0x00007f7748fc1c03
  0x00007f7748fc1bf3:   vpextrq $0x1,%xmm9,%rbx
  0x00007f7748fc1bf9:   add    $0x1,%rbx
  0x00007f7748fc1bfd:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007f7748fc1c03:   vpextrq $0x0,%xmm10,%rbx
  0x00007f7748fc1c09:   add    $0x5,%rbx
  0x00007f7748fc1c0d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007f7748fc1c13:   jae    Stub::counterMode_AESCrypt+361 0x00007f7748fc1c29
  0x00007f7748fc1c19:   vpextrq $0x1,%xmm10,%rbx
  0x00007f7748fc1c1f:   add    $0x1,%rbx
  0x00007f7748fc1c23:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007f7748fc1c29:   vpextrq $0x0,%xmm2,%rbx
  0x00007f7748fc1c2f:   add    $0x6,%rbx
  0x00007f7748fc1c33:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f7748fc1c39:   jae    Stub::counterMode_AESCrypt+399 0x00007f7748fc1c4f
  0x00007f7748fc1c3f:   vpextrq $0x1,%xmm2,%rbx
  0x00007f7748fc1c45:   add    $0x1,%rbx
  0x00007f7748fc1c49:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f7748fc1c4f:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f7748fc1c54:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007f7748fc1c59:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007f7748fc1c5e:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007f7748fc1c63:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007f7748fc1c68:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007f7748fc1c6d:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f7748fc1c71:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007f7748fc1c75:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007f7748fc1c79:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007f7748fc1c7d:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f7748fc1c81:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007f7748fc1c85:   vmovdqu 0x10(%rdx),%xmm4
  0x00007f7748fc1c8a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc1c8f:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f7748fc1c94:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1c99:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc1c9e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc1ca3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc1ca8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc1cad:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc1cb2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc1cb7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1cbc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc1cc1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc1cc6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc1ccb:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc1cd0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc1cd5:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f7748fc1cda:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc1cdf:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f7748fc1ce4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1ce9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc1cee:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc1cf3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc1cf8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc1cfd:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc1d02:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc1d07:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1d0c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc1d11:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc1d16:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc1d1b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc1d20:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc1d25:   vmovdqu 0x50(%rdx),%xmm4
  0x00007f7748fc1d2a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc1d2f:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f7748fc1d34:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1d39:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc1d3e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc1d43:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc1d48:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc1d4d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc1d52:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc1d57:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1d5c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc1d61:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc1d66:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc1d6b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc1d70:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc1d75:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f7748fc1d7a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc1d7f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f7748fc1d87:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1d8c:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc1d91:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc1d96:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc1d9b:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc1da0:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc1da5:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc1daa:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1daf:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc1db4:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc1db9:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc1dbe:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc1dc3:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc1dc8:   vmovdqu 0x90(%rdx),%xmm4
  0x00007f7748fc1dd0:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc1dd5:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f7748fc1ddd:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1de2:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc1de7:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc1dec:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc1df1:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc1df6:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc1dfb:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc1e00:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f7748fc1e05:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007f7748fc1e0a:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007f7748fc1e0f:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007f7748fc1e14:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007f7748fc1e19:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007f7748fc1e1e:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f7748fc1e23:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007f7748fc1e29:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007f7748fc1e2f:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007f7748fc1e35:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007f7748fc1e3b:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007f7748fc1e41:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f7748fc1e46:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007f7748fc1e4b:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007f7748fc1e50:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007f7748fc1e55:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f7748fc1e59:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007f7748fc1e5d:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f7748fc1e62:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007f7748fc1e68:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007f7748fc1e6e:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007f7748fc1e74:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007f7748fc1e7a:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007f7748fc1e80:   add    $0x60,%rax
  0x00007f7748fc1e84:   sub    $0x60,%r8
  0x00007f7748fc1e88:   jmpq   Stub::counterMode_AESCrypt+128 0x00007f7748fc1b40
  0x00007f7748fc1e8d:   data16 xchg %ax,%ax
  0x00007f7748fc1e90:   cmp    $0x0,%r8
  0x00007f7748fc1e94:   jle    Stub::counterMode_AESCrypt+4524 0x00007f7748fc2c6c
  0x00007f7748fc1e9a:   vmovdqu (%rdx),%xmm3
  0x00007f7748fc1e9e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1ea3:   vmovdqa %xmm2,%xmm5
  0x00007f7748fc1ea7:   vpextrq $0x0,%xmm2,%rbx
  0x00007f7748fc1ead:   add    $0x1,%rbx
  0x00007f7748fc1eb1:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f7748fc1eb7:   jae    Stub::counterMode_AESCrypt+1037 0x00007f7748fc1ecd
  0x00007f7748fc1ebd:   vpextrq $0x1,%xmm2,%rbx
  0x00007f7748fc1ec3:   add    $0x1,%rbx
  0x00007f7748fc1ec7:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f7748fc1ecd:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f7748fc1ed2:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f7748fc1ed6:   vmovdqu 0x10(%rdx),%xmm3
  0x00007f7748fc1edb:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1ee0:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1ee5:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f7748fc1eea:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1eef:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1ef4:   vmovdqu 0x30(%rdx),%xmm3
  0x00007f7748fc1ef9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1efe:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1f03:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f7748fc1f08:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1f0d:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1f12:   vmovdqu 0x50(%rdx),%xmm3
  0x00007f7748fc1f17:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1f1c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1f21:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f7748fc1f26:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1f2b:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1f30:   vmovdqu 0x70(%rdx),%xmm3
  0x00007f7748fc1f35:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1f3a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1f3f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f7748fc1f47:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1f4c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1f51:   vmovdqu 0x90(%rdx),%xmm3
  0x00007f7748fc1f59:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1f5e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc1f63:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f7748fc1f6b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc1f70:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f7748fc1f75:   cmp    $0x10,%r8
  0x00007f7748fc1f79:   jl     Stub::counterMode_AESCrypt+1243 0x00007f7748fc1f9b
  0x00007f7748fc1f7f:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f7748fc1f84:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f7748fc1f89:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f7748fc1f8e:   add    $0x10,%rax
  0x00007f7748fc1f92:   sub    $0x10,%r8
  0x00007f7748fc1f96:   jmpq   Stub::counterMode_AESCrypt+976 0x00007f7748fc1e90
  0x00007f7748fc1f9b:   add    %r8,%rax
  0x00007f7748fc1f9e:   test   $0x8,%r8b
  0x00007f7748fc1fa2:   je     Stub::counterMode_AESCrypt+1267 0x00007f7748fc1fb3
  0x00007f7748fc1fa8:   sub    $0x8,%rax
  0x00007f7748fc1fac:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f7748fc1fb3:   test   $0x4,%r8b
  0x00007f7748fc1fb7:   je     Stub::counterMode_AESCrypt+1294 0x00007f7748fc1fce
  0x00007f7748fc1fbd:   sub    $0x4,%rax
  0x00007f7748fc1fc1:   vpslldq $0x4,%xmm11,%xmm11
  0x00007f7748fc1fc7:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f7748fc1fce:   test   $0x2,%r8b
  0x00007f7748fc1fd2:   je     Stub::counterMode_AESCrypt+1320 0x00007f7748fc1fe8
  0x00007f7748fc1fd8:   sub    $0x2,%rax
  0x00007f7748fc1fdc:   vpslldq $0x2,%xmm11,%xmm11
  0x00007f7748fc1fe2:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f7748fc1fe8:   test   $0x1,%r8b
  0x00007f7748fc1fec:   je     Stub::counterMode_AESCrypt+1347 0x00007f7748fc2003
  0x00007f7748fc1ff2:   sub    $0x1,%rax
  0x00007f7748fc1ff6:   vpslldq $0x1,%xmm11,%xmm11
  0x00007f7748fc1ffc:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f7748fc2003:   vmovdqu %xmm5,(%r9)
  0x00007f7748fc2008:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f7748fc200d:   test   $0x8,%r8b
  0x00007f7748fc2011:   je     Stub::counterMode_AESCrypt+1383 0x00007f7748fc2027
  0x00007f7748fc2017:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f7748fc201e:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f7748fc2023:   add    $0x8,%rax
  0x00007f7748fc2027:   test   $0x4,%r8b
  0x00007f7748fc202b:   je     Stub::counterMode_AESCrypt+1409 0x00007f7748fc2041
  0x00007f7748fc2031:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f7748fc2038:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007f7748fc203d:   add    $0x4,%rax
  0x00007f7748fc2041:   test   $0x2,%r8b
  0x00007f7748fc2045:   je     Stub::counterMode_AESCrypt+1435 0x00007f7748fc205b
  0x00007f7748fc204b:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f7748fc2052:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007f7748fc2057:   add    $0x2,%rax
  0x00007f7748fc205b:   test   $0x1,%r8b
  0x00007f7748fc205f:   je     Stub::counterMode_AESCrypt+1452 0x00007f7748fc206c
  0x00007f7748fc2065:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f7748fc206c:   mov    %r8d,(%r10)
  0x00007f7748fc206f:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007f7748fc2c6c
  0x00007f7748fc2074:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc207c:   data16 data16 xchg %ax,%ax
  0x00007f7748fc2080:   cmp    $0x60,%r8
  0x00007f7748fc2084:   jl     Stub::counterMode_AESCrypt+2416 0x00007f7748fc2430
  0x00007f7748fc208a:   vmovdqu (%rdx),%xmm3
  0x00007f7748fc208e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2093:   vmovdqa %xmm2,%xmm5
  0x00007f7748fc2097:   vmovdqa %xmm2,%xmm6
  0x00007f7748fc209b:   vmovdqa %xmm2,%xmm7
  0x00007f7748fc209f:   vmovdqa %xmm2,%xmm8
  0x00007f7748fc20a3:   vmovdqa %xmm2,%xmm9
  0x00007f7748fc20a7:   vmovdqa %xmm2,%xmm10
  0x00007f7748fc20ab:   vpextrq $0x0,%xmm6,%rbx
  0x00007f7748fc20b1:   add    $0x1,%rbx
  0x00007f7748fc20b5:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007f7748fc20bb:   jae    Stub::counterMode_AESCrypt+1553 0x00007f7748fc20d1
  0x00007f7748fc20c1:   vpextrq $0x1,%xmm6,%rbx
  0x00007f7748fc20c7:   add    $0x1,%rbx
  0x00007f7748fc20cb:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007f7748fc20d1:   vpextrq $0x0,%xmm7,%rbx
  0x00007f7748fc20d7:   add    $0x2,%rbx
  0x00007f7748fc20db:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007f7748fc20e1:   jae    Stub::counterMode_AESCrypt+1591 0x00007f7748fc20f7
  0x00007f7748fc20e7:   vpextrq $0x1,%xmm7,%rbx
  0x00007f7748fc20ed:   add    $0x1,%rbx
  0x00007f7748fc20f1:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007f7748fc20f7:   vpextrq $0x0,%xmm8,%rbx
  0x00007f7748fc20fd:   add    $0x3,%rbx
  0x00007f7748fc2101:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007f7748fc2107:   jae    Stub::counterMode_AESCrypt+1629 0x00007f7748fc211d
  0x00007f7748fc210d:   vpextrq $0x1,%xmm8,%rbx
  0x00007f7748fc2113:   add    $0x1,%rbx
  0x00007f7748fc2117:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007f7748fc211d:   vpextrq $0x0,%xmm9,%rbx
  0x00007f7748fc2123:   add    $0x4,%rbx
  0x00007f7748fc2127:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007f7748fc212d:   jae    Stub::counterMode_AESCrypt+1667 0x00007f7748fc2143
  0x00007f7748fc2133:   vpextrq $0x1,%xmm9,%rbx
  0x00007f7748fc2139:   add    $0x1,%rbx
  0x00007f7748fc213d:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007f7748fc2143:   vpextrq $0x0,%xmm10,%rbx
  0x00007f7748fc2149:   add    $0x5,%rbx
  0x00007f7748fc214d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007f7748fc2153:   jae    Stub::counterMode_AESCrypt+1705 0x00007f7748fc2169
  0x00007f7748fc2159:   vpextrq $0x1,%xmm10,%rbx
  0x00007f7748fc215f:   add    $0x1,%rbx
  0x00007f7748fc2163:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007f7748fc2169:   vpextrq $0x0,%xmm2,%rbx
  0x00007f7748fc216f:   add    $0x6,%rbx
  0x00007f7748fc2173:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f7748fc2179:   jae    Stub::counterMode_AESCrypt+1743 0x00007f7748fc218f
  0x00007f7748fc217f:   vpextrq $0x1,%xmm2,%rbx
  0x00007f7748fc2185:   add    $0x1,%rbx
  0x00007f7748fc2189:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f7748fc218f:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f7748fc2194:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007f7748fc2199:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007f7748fc219e:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007f7748fc21a3:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007f7748fc21a8:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007f7748fc21ad:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f7748fc21b1:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007f7748fc21b5:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007f7748fc21b9:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007f7748fc21bd:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f7748fc21c1:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007f7748fc21c5:   vmovdqu 0x10(%rdx),%xmm4
  0x00007f7748fc21ca:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc21cf:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f7748fc21d4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc21d9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc21de:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc21e3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc21e8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc21ed:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc21f2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc21f7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc21fc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc2201:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc2206:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc220b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc2210:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc2215:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f7748fc221a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc221f:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f7748fc2224:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2229:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc222e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc2233:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc2238:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc223d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc2242:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc2247:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc224c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc2251:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc2256:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc225b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc2260:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc2265:   vmovdqu 0x50(%rdx),%xmm4
  0x00007f7748fc226a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc226f:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f7748fc2274:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2279:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc227e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc2283:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc2288:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc228d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc2292:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc2297:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc229c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc22a1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc22a6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc22ab:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc22b0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc22b5:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f7748fc22ba:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc22bf:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f7748fc22c7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc22cc:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc22d1:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc22d6:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc22db:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc22e0:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc22e5:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc22ea:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc22ef:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc22f4:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc22f9:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc22fe:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc2303:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc2308:   vmovdqu 0x90(%rdx),%xmm4
  0x00007f7748fc2310:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc2315:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f7748fc231d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2322:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc2327:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc232c:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc2331:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc2336:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc233b:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc2340:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2345:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc234a:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc234f:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc2354:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc2359:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc235e:   vmovdqu 0xb0(%rdx),%xmm4
  0x00007f7748fc2366:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc236b:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f7748fc2373:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2378:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc237d:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc2382:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc2387:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc238c:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc2391:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc2396:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f7748fc239b:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007f7748fc23a0:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007f7748fc23a5:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007f7748fc23aa:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007f7748fc23af:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007f7748fc23b4:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f7748fc23b9:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007f7748fc23bf:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007f7748fc23c5:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007f7748fc23cb:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007f7748fc23d1:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007f7748fc23d7:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f7748fc23dc:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007f7748fc23e1:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007f7748fc23e6:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007f7748fc23eb:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f7748fc23ef:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007f7748fc23f3:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f7748fc23f8:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007f7748fc23fe:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007f7748fc2404:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007f7748fc240a:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007f7748fc2410:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007f7748fc2416:   add    $0x60,%rax
  0x00007f7748fc241a:   sub    $0x60,%r8
  0x00007f7748fc241e:   jmpq   Stub::counterMode_AESCrypt+1472 0x00007f7748fc2080
  0x00007f7748fc2423:   nopw   0x0(%rax,%rax,1)
  0x00007f7748fc242c:   data16 data16 xchg %ax,%ax
  0x00007f7748fc2430:   cmp    $0x0,%r8
  0x00007f7748fc2434:   jle    Stub::counterMode_AESCrypt+4524 0x00007f7748fc2c6c
  0x00007f7748fc243a:   vmovdqu (%rdx),%xmm3
  0x00007f7748fc243e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2443:   vmovdqa %xmm2,%xmm5
  0x00007f7748fc2447:   vpextrq $0x0,%xmm2,%rbx
  0x00007f7748fc244d:   add    $0x1,%rbx
  0x00007f7748fc2451:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f7748fc2457:   jae    Stub::counterMode_AESCrypt+2477 0x00007f7748fc246d
  0x00007f7748fc245d:   vpextrq $0x1,%xmm2,%rbx
  0x00007f7748fc2463:   add    $0x1,%rbx
  0x00007f7748fc2467:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f7748fc246d:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f7748fc2472:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f7748fc2476:   vmovdqu 0x10(%rdx),%xmm3
  0x00007f7748fc247b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2480:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2485:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f7748fc248a:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc248f:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2494:   vmovdqu 0x30(%rdx),%xmm3
  0x00007f7748fc2499:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc249e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc24a3:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f7748fc24a8:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc24ad:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc24b2:   vmovdqu 0x50(%rdx),%xmm3
  0x00007f7748fc24b7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc24bc:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc24c1:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f7748fc24c6:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc24cb:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc24d0:   vmovdqu 0x70(%rdx),%xmm3
  0x00007f7748fc24d5:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc24da:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc24df:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f7748fc24e7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc24ec:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc24f1:   vmovdqu 0x90(%rdx),%xmm3
  0x00007f7748fc24f9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc24fe:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2503:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f7748fc250b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2510:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2515:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007f7748fc251d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2522:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2527:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f7748fc252f:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2534:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f7748fc2539:   cmp    $0x10,%r8
  0x00007f7748fc253d:   jl     Stub::counterMode_AESCrypt+2719 0x00007f7748fc255f
  0x00007f7748fc2543:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f7748fc2548:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f7748fc254d:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f7748fc2552:   add    $0x10,%rax
  0x00007f7748fc2556:   sub    $0x10,%r8
  0x00007f7748fc255a:   jmpq   Stub::counterMode_AESCrypt+2416 0x00007f7748fc2430
  0x00007f7748fc255f:   add    %r8,%rax
  0x00007f7748fc2562:   test   $0x8,%r8b
  0x00007f7748fc2566:   je     Stub::counterMode_AESCrypt+2743 0x00007f7748fc2577
  0x00007f7748fc256c:   sub    $0x8,%rax
  0x00007f7748fc2570:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f7748fc2577:   test   $0x4,%r8b
  0x00007f7748fc257b:   je     Stub::counterMode_AESCrypt+2770 0x00007f7748fc2592
  0x00007f7748fc2581:   sub    $0x4,%rax
  0x00007f7748fc2585:   vpslldq $0x4,%xmm11,%xmm11
  0x00007f7748fc258b:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f7748fc2592:   test   $0x2,%r8b
  0x00007f7748fc2596:   je     Stub::counterMode_AESCrypt+2796 0x00007f7748fc25ac
  0x00007f7748fc259c:   sub    $0x2,%rax
  0x00007f7748fc25a0:   vpslldq $0x2,%xmm11,%xmm11
  0x00007f7748fc25a6:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f7748fc25ac:   test   $0x1,%r8b
  0x00007f7748fc25b0:   je     Stub::counterMode_AESCrypt+2823 0x00007f7748fc25c7
  0x00007f7748fc25b6:   sub    $0x1,%rax
  0x00007f7748fc25ba:   vpslldq $0x1,%xmm11,%xmm11
  0x00007f7748fc25c0:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f7748fc25c7:   vmovdqu %xmm5,(%r9)
  0x00007f7748fc25cc:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f7748fc25d1:   test   $0x8,%r8b
  0x00007f7748fc25d5:   je     Stub::counterMode_AESCrypt+2859 0x00007f7748fc25eb
  0x00007f7748fc25db:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f7748fc25e2:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f7748fc25e7:   add    $0x8,%rax
  0x00007f7748fc25eb:   test   $0x4,%r8b
  0x00007f7748fc25ef:   je     Stub::counterMode_AESCrypt+2885 0x00007f7748fc2605
  0x00007f7748fc25f5:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f7748fc25fc:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007f7748fc2601:   add    $0x4,%rax
  0x00007f7748fc2605:   test   $0x2,%r8b
  0x00007f7748fc2609:   je     Stub::counterMode_AESCrypt+2911 0x00007f7748fc261f
  0x00007f7748fc260f:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f7748fc2616:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007f7748fc261b:   add    $0x2,%rax
  0x00007f7748fc261f:   test   $0x1,%r8b
  0x00007f7748fc2623:   je     Stub::counterMode_AESCrypt+2928 0x00007f7748fc2630
  0x00007f7748fc2629:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f7748fc2630:   mov    %r8d,(%r10)
  0x00007f7748fc2633:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007f7748fc2c6c
  0x00007f7748fc2638:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc2640:   cmp    $0x60,%r8
  0x00007f7748fc2644:   jl     Stub::counterMode_AESCrypt+3968 0x00007f7748fc2a40
  0x00007f7748fc264a:   vmovdqu (%rdx),%xmm3
  0x00007f7748fc264e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2653:   vmovdqa %xmm2,%xmm5
  0x00007f7748fc2657:   vmovdqa %xmm2,%xmm6
  0x00007f7748fc265b:   vmovdqa %xmm2,%xmm7
  0x00007f7748fc265f:   vmovdqa %xmm2,%xmm8
  0x00007f7748fc2663:   vmovdqa %xmm2,%xmm9
  0x00007f7748fc2667:   vmovdqa %xmm2,%xmm10
  0x00007f7748fc266b:   vpextrq $0x0,%xmm6,%rbx
  0x00007f7748fc2671:   add    $0x1,%rbx
  0x00007f7748fc2675:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007f7748fc267b:   jae    Stub::counterMode_AESCrypt+3025 0x00007f7748fc2691
  0x00007f7748fc2681:   vpextrq $0x1,%xmm6,%rbx
  0x00007f7748fc2687:   add    $0x1,%rbx
  0x00007f7748fc268b:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007f7748fc2691:   vpextrq $0x0,%xmm7,%rbx
  0x00007f7748fc2697:   add    $0x2,%rbx
  0x00007f7748fc269b:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007f7748fc26a1:   jae    Stub::counterMode_AESCrypt+3063 0x00007f7748fc26b7
  0x00007f7748fc26a7:   vpextrq $0x1,%xmm7,%rbx
  0x00007f7748fc26ad:   add    $0x1,%rbx
  0x00007f7748fc26b1:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007f7748fc26b7:   vpextrq $0x0,%xmm8,%rbx
  0x00007f7748fc26bd:   add    $0x3,%rbx
  0x00007f7748fc26c1:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007f7748fc26c7:   jae    Stub::counterMode_AESCrypt+3101 0x00007f7748fc26dd
  0x00007f7748fc26cd:   vpextrq $0x1,%xmm8,%rbx
  0x00007f7748fc26d3:   add    $0x1,%rbx
  0x00007f7748fc26d7:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007f7748fc26dd:   vpextrq $0x0,%xmm9,%rbx
  0x00007f7748fc26e3:   add    $0x4,%rbx
  0x00007f7748fc26e7:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007f7748fc26ed:   jae    Stub::counterMode_AESCrypt+3139 0x00007f7748fc2703
  0x00007f7748fc26f3:   vpextrq $0x1,%xmm9,%rbx
  0x00007f7748fc26f9:   add    $0x1,%rbx
  0x00007f7748fc26fd:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007f7748fc2703:   vpextrq $0x0,%xmm10,%rbx
  0x00007f7748fc2709:   add    $0x5,%rbx
  0x00007f7748fc270d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007f7748fc2713:   jae    Stub::counterMode_AESCrypt+3177 0x00007f7748fc2729
  0x00007f7748fc2719:   vpextrq $0x1,%xmm10,%rbx
  0x00007f7748fc271f:   add    $0x1,%rbx
  0x00007f7748fc2723:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007f7748fc2729:   vpextrq $0x0,%xmm2,%rbx
  0x00007f7748fc272f:   add    $0x6,%rbx
  0x00007f7748fc2733:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f7748fc2739:   jae    Stub::counterMode_AESCrypt+3215 0x00007f7748fc274f
  0x00007f7748fc273f:   vpextrq $0x1,%xmm2,%rbx
  0x00007f7748fc2745:   add    $0x1,%rbx
  0x00007f7748fc2749:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f7748fc274f:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f7748fc2754:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007f7748fc2759:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007f7748fc275e:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007f7748fc2763:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007f7748fc2768:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007f7748fc276d:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f7748fc2771:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007f7748fc2775:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007f7748fc2779:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007f7748fc277d:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f7748fc2781:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007f7748fc2785:   vmovdqu 0x10(%rdx),%xmm4
  0x00007f7748fc278a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc278f:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f7748fc2794:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2799:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc279e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc27a3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc27a8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc27ad:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc27b2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc27b7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc27bc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc27c1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc27c6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc27cb:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc27d0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc27d5:   vmovdqu 0x30(%rdx),%xmm4
  0x00007f7748fc27da:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc27df:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f7748fc27e4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc27e9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc27ee:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc27f3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc27f8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc27fd:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc2802:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc2807:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc280c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc2811:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc2816:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc281b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc2820:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc2825:   vmovdqu 0x50(%rdx),%xmm4
  0x00007f7748fc282a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc282f:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f7748fc2834:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2839:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc283e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc2843:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc2848:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc284d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc2852:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc2857:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc285c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc2861:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc2866:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc286b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc2870:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc2875:   vmovdqu 0x70(%rdx),%xmm4
  0x00007f7748fc287a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc287f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f7748fc2887:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc288c:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc2891:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc2896:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc289b:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc28a0:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc28a5:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc28aa:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc28af:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc28b4:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc28b9:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc28be:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc28c3:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc28c8:   vmovdqu 0x90(%rdx),%xmm4
  0x00007f7748fc28d0:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc28d5:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f7748fc28dd:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc28e2:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc28e7:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc28ec:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc28f1:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc28f6:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc28fb:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc2900:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2905:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc290a:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc290f:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc2914:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc2919:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc291e:   vmovdqu 0xb0(%rdx),%xmm4
  0x00007f7748fc2926:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc292b:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f7748fc2933:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2938:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc293d:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc2942:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc2947:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc294c:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc2951:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc2956:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc295b:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007f7748fc2960:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007f7748fc2965:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007f7748fc296a:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007f7748fc296f:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007f7748fc2974:   vmovdqu 0xd0(%rdx),%xmm4
  0x00007f7748fc297c:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007f7748fc2981:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007f7748fc2989:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc298e:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007f7748fc2993:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007f7748fc2998:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007f7748fc299d:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007f7748fc29a2:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007f7748fc29a7:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007f7748fc29ac:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f7748fc29b1:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007f7748fc29b6:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007f7748fc29bb:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007f7748fc29c0:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007f7748fc29c5:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007f7748fc29ca:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f7748fc29cf:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007f7748fc29d5:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007f7748fc29db:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007f7748fc29e1:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007f7748fc29e7:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007f7748fc29ed:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f7748fc29f2:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007f7748fc29f7:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007f7748fc29fc:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007f7748fc2a01:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007f7748fc2a05:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007f7748fc2a09:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f7748fc2a0e:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007f7748fc2a14:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007f7748fc2a1a:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007f7748fc2a20:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007f7748fc2a26:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007f7748fc2a2c:   add    $0x60,%rax
  0x00007f7748fc2a30:   sub    $0x60,%r8
  0x00007f7748fc2a34:   jmpq   Stub::counterMode_AESCrypt+2944 0x00007f7748fc2640
  0x00007f7748fc2a39:   nopl   0x0(%rax)
  0x00007f7748fc2a40:   cmp    $0x0,%r8
  0x00007f7748fc2a44:   jle    Stub::counterMode_AESCrypt+4524 0x00007f7748fc2c6c
  0x00007f7748fc2a4a:   vmovdqu (%rdx),%xmm3
  0x00007f7748fc2a4e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2a53:   vmovdqa %xmm2,%xmm5
  0x00007f7748fc2a57:   vpextrq $0x0,%xmm2,%rbx
  0x00007f7748fc2a5d:   add    $0x1,%rbx
  0x00007f7748fc2a61:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007f7748fc2a67:   jae    Stub::counterMode_AESCrypt+4029 0x00007f7748fc2a7d
  0x00007f7748fc2a6d:   vpextrq $0x1,%xmm2,%rbx
  0x00007f7748fc2a73:   add    $0x1,%rbx
  0x00007f7748fc2a77:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007f7748fc2a7d:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007f7748fc2a82:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007f7748fc2a86:   vmovdqu 0x10(%rdx),%xmm3
  0x00007f7748fc2a8b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2a90:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2a95:   vmovdqu 0x20(%rdx),%xmm3
  0x00007f7748fc2a9a:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2a9f:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2aa4:   vmovdqu 0x30(%rdx),%xmm3
  0x00007f7748fc2aa9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2aae:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2ab3:   vmovdqu 0x40(%rdx),%xmm3
  0x00007f7748fc2ab8:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2abd:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2ac2:   vmovdqu 0x50(%rdx),%xmm3
  0x00007f7748fc2ac7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2acc:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2ad1:   vmovdqu 0x60(%rdx),%xmm3
  0x00007f7748fc2ad6:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2adb:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2ae0:   vmovdqu 0x70(%rdx),%xmm3
  0x00007f7748fc2ae5:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2aea:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2aef:   vmovdqu 0x80(%rdx),%xmm3
  0x00007f7748fc2af7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2afc:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2b01:   vmovdqu 0x90(%rdx),%xmm3
  0x00007f7748fc2b09:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2b0e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2b13:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007f7748fc2b1b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2b20:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2b25:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007f7748fc2b2d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2b32:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2b37:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007f7748fc2b3f:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2b44:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2b49:   vmovdqu 0xd0(%rdx),%xmm3
  0x00007f7748fc2b51:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2b56:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007f7748fc2b5b:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007f7748fc2b63:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007f7748fc2b68:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007f7748fc2b6d:   cmp    $0x10,%r8
  0x00007f7748fc2b71:   jl     Stub::counterMode_AESCrypt+4307 0x00007f7748fc2b93
  0x00007f7748fc2b77:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007f7748fc2b7c:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f7748fc2b81:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007f7748fc2b86:   add    $0x10,%rax
  0x00007f7748fc2b8a:   sub    $0x10,%r8
  0x00007f7748fc2b8e:   jmpq   Stub::counterMode_AESCrypt+3968 0x00007f7748fc2a40
  0x00007f7748fc2b93:   add    %r8,%rax
  0x00007f7748fc2b96:   test   $0x8,%r8b
  0x00007f7748fc2b9a:   je     Stub::counterMode_AESCrypt+4331 0x00007f7748fc2bab
  0x00007f7748fc2ba0:   sub    $0x8,%rax
  0x00007f7748fc2ba4:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f7748fc2bab:   test   $0x4,%r8b
  0x00007f7748fc2baf:   je     Stub::counterMode_AESCrypt+4358 0x00007f7748fc2bc6
  0x00007f7748fc2bb5:   sub    $0x4,%rax
  0x00007f7748fc2bb9:   vpslldq $0x4,%xmm11,%xmm11
  0x00007f7748fc2bbf:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f7748fc2bc6:   test   $0x2,%r8b
  0x00007f7748fc2bca:   je     Stub::counterMode_AESCrypt+4384 0x00007f7748fc2be0
  0x00007f7748fc2bd0:   sub    $0x2,%rax
  0x00007f7748fc2bd4:   vpslldq $0x2,%xmm11,%xmm11
  0x00007f7748fc2bda:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f7748fc2be0:   test   $0x1,%r8b
  0x00007f7748fc2be4:   je     Stub::counterMode_AESCrypt+4411 0x00007f7748fc2bfb
  0x00007f7748fc2bea:   sub    $0x1,%rax
  0x00007f7748fc2bee:   vpslldq $0x1,%xmm11,%xmm11
  0x00007f7748fc2bf4:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007f7748fc2bfb:   vmovdqu %xmm5,(%r9)
  0x00007f7748fc2c00:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007f7748fc2c05:   test   $0x8,%r8b
  0x00007f7748fc2c09:   je     Stub::counterMode_AESCrypt+4447 0x00007f7748fc2c1f
  0x00007f7748fc2c0f:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f7748fc2c16:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f7748fc2c1b:   add    $0x8,%rax
  0x00007f7748fc2c1f:   test   $0x4,%r8b
  0x00007f7748fc2c23:   je     Stub::counterMode_AESCrypt+4473 0x00007f7748fc2c39
  0x00007f7748fc2c29:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f7748fc2c30:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007f7748fc2c35:   add    $0x4,%rax
  0x00007f7748fc2c39:   test   $0x2,%r8b
  0x00007f7748fc2c3d:   je     Stub::counterMode_AESCrypt+4499 0x00007f7748fc2c53
  0x00007f7748fc2c43:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f7748fc2c4a:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007f7748fc2c4f:   add    $0x2,%rax
  0x00007f7748fc2c53:   test   $0x1,%r8b
  0x00007f7748fc2c57:   je     Stub::counterMode_AESCrypt+4516 0x00007f7748fc2c64
  0x00007f7748fc2c5d:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007f7748fc2c64:   mov    %r8d,(%r10)
  0x00007f7748fc2c67:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007f7748fc2c6c
  0x00007f7748fc2c6c:   vpshufb %xmm0,%xmm2,%xmm2
  0x00007f7748fc2c71:   vmovdqu %xmm2,(%rcx)
  0x00007f7748fc2c75:   pop    %rbx
  0x00007f7748fc2c76:   pop    %rax
  0x00007f7748fc2c77:   leaveq 
  0x00007f7748fc2c78:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::ghash_processBlocks [0x00007f7748fc2c80, 0x00007f7748fc310c] (1164 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc2c80:   push   %rbp
  0x00007f7748fc2c81:   mov    %rsp,%rbp
  0x00007f7748fc2c84:   push   %rbx
  0x00007f7748fc2c85:   test   %rcx,%rcx
  0x00007f7748fc2c88:   je     Stub::ghash_processBlocks+1144 0x00007f7748fc30f8
  0x00007f7748fc2c8e:   vmovdqu 0x10(%rsi),%xmm5
  0x00007f7748fc2c93:   vptest %xmm5,%xmm5
  0x00007f7748fc2c98:   jne    Stub::ghash_processBlocks+35 0x00007f7748fc2ca3
  0x00007f7748fc2c9e:   callq  Stub::ghash_processBlocks+839 0x00007f7748fc2fc7
  0x00007f7748fc2ca3:   vmovdqu 0x46749c5(%rip),%xmm14        # 0x00007f774d637670
  0x00007f7748fc2cab:   vmovdqu (%rdi),%xmm0
  0x00007f7748fc2caf:   vpshufb %xmm14,%xmm0,%xmm0
  0x00007f7748fc2cb4:   cmp    $0x8,%ecx
  0x00007f7748fc2cb7:   jb     Stub::ghash_processBlocks+648 0x00007f7748fc2f08
  0x00007f7748fc2cbd:   vmovdqu 0x80(%rsi),%xmm5
  0x00007f7748fc2cc5:   vptest %xmm5,%xmm5
  0x00007f7748fc2cca:   jne    Stub::ghash_processBlocks+85 0x00007f7748fc2cd5
  0x00007f7748fc2cd0:   callq  Stub::ghash_processBlocks+932 0x00007f7748fc3024
  0x00007f7748fc2cd5:   sub    $0x8,%ecx
  0x00007f7748fc2cd8:   vmovdqu 0x4674980(%rip),%xmm2        # 0x00007f774d637660
  0x00007f7748fc2ce0:   vmovdqu 0x70(%rdx),%xmm1
  0x00007f7748fc2ce5:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f7748fc2cea:   vmovdqu 0x10(%rsi),%xmm15
  0x00007f7748fc2cef:   vpclmulhqlqdq %xmm15,%xmm1,%xmm5
  0x00007f7748fc2cf5:   vpclmullqlqdq %xmm15,%xmm1,%xmm3
  0x00007f7748fc2cfb:   vpclmulhqhqdq %xmm15,%xmm1,%xmm4
  0x00007f7748fc2d01:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2d07:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2d0b:   vmovdqu 0x60(%rdx),%xmm1
  0x00007f7748fc2d10:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f7748fc2d15:   vmovdqu 0x20(%rsi),%xmm15
  0x00007f7748fc2d1a:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2d20:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2d24:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2d2a:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f7748fc2d2e:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2d34:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f7748fc2d38:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2d3e:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2d42:   vmovdqu 0x50(%rdx),%xmm1
  0x00007f7748fc2d47:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f7748fc2d4c:   vmovdqu 0x30(%rsi),%xmm15
  0x00007f7748fc2d51:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2d57:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2d5b:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2d61:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f7748fc2d65:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2d6b:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f7748fc2d6f:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2d75:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2d79:   vmovdqu 0x40(%rdx),%xmm1
  0x00007f7748fc2d7e:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f7748fc2d83:   vmovdqu 0x40(%rsi),%xmm15
  0x00007f7748fc2d88:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2d8e:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2d92:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2d98:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f7748fc2d9c:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2da2:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f7748fc2da6:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2dac:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2db0:   vmovdqu 0x30(%rdx),%xmm1
  0x00007f7748fc2db5:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f7748fc2dba:   vmovdqu 0x50(%rsi),%xmm15
  0x00007f7748fc2dbf:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2dc5:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2dc9:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2dcf:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f7748fc2dd3:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2dd9:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f7748fc2ddd:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2de3:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2de7:   vmovdqu 0x20(%rdx),%xmm1
  0x00007f7748fc2dec:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f7748fc2df1:   vmovdqu 0x60(%rsi),%xmm15
  0x00007f7748fc2df6:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2dfc:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2e00:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2e06:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f7748fc2e0a:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2e10:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f7748fc2e14:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2e1a:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2e1e:   vmovdqu 0x10(%rdx),%xmm1
  0x00007f7748fc2e23:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f7748fc2e28:   vmovdqu 0x70(%rsi),%xmm15
  0x00007f7748fc2e2d:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2e33:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2e37:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2e3d:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f7748fc2e41:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2e47:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f7748fc2e4b:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2e51:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2e55:   vmovdqu (%rdx),%xmm1
  0x00007f7748fc2e59:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f7748fc2e5e:   vpxor  %xmm0,%xmm1,%xmm1
  0x00007f7748fc2e62:   vmovdqu 0x80(%rsi),%xmm15
  0x00007f7748fc2e6a:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2e70:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2e74:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2e7a:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f7748fc2e7e:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2e84:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f7748fc2e88:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007f7748fc2e8e:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2e92:   vpslldq $0x8,%xmm5,%xmm6
  0x00007f7748fc2e97:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f7748fc2e9c:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007f7748fc2ea0:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007f7748fc2ea4:   vpslld $0x1f,%xmm3,%xmm8
  0x00007f7748fc2ea9:   vpslld $0x1e,%xmm3,%xmm9
  0x00007f7748fc2eae:   vpslld $0x19,%xmm3,%xmm10
  0x00007f7748fc2eb3:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007f7748fc2eb8:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007f7748fc2ebd:   vpslldq $0xc,%xmm8,%xmm9
  0x00007f7748fc2ec3:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007f7748fc2ec9:   vpxor  %xmm9,%xmm3,%xmm3
  0x00007f7748fc2ece:   vpsrld $0x1,%xmm3,%xmm9
  0x00007f7748fc2ed3:   vpsrld $0x2,%xmm3,%xmm10
  0x00007f7748fc2ed8:   vpsrld $0x7,%xmm3,%xmm5
  0x00007f7748fc2edd:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007f7748fc2ee2:   vpxor  %xmm5,%xmm9,%xmm9
  0x00007f7748fc2ee6:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007f7748fc2eeb:   vpxor  %xmm3,%xmm9,%xmm3
  0x00007f7748fc2eef:   vpxor  %xmm4,%xmm3,%xmm0
  0x00007f7748fc2ef3:   lea    0x80(%rdx),%rdx
  0x00007f7748fc2efa:   cmp    $0x8,%ecx
  0x00007f7748fc2efd:   jb     Stub::ghash_processBlocks+648 0x00007f7748fc2f08
  0x00007f7748fc2f03:   jmpq   Stub::ghash_processBlocks+85 0x00007f7748fc2cd5
  0x00007f7748fc2f08:   vmovdqu 0x10(%rsi),%xmm3
  0x00007f7748fc2f0d:   vmovdqu 0x467474b(%rip),%xmm2        # 0x00007f774d637660
  0x00007f7748fc2f15:   cmp    $0x0,%ecx
  0x00007f7748fc2f18:   je     Stub::ghash_processBlocks+697 0x00007f7748fc2f39
  0x00007f7748fc2f1e:   sub    $0x1,%ecx
  0x00007f7748fc2f21:   vmovdqu (%rdx),%xmm1
  0x00007f7748fc2f25:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007f7748fc2f2a:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7748fc2f2e:   callq  Stub::ghash_processBlocks+711 0x00007f7748fc2f47
  0x00007f7748fc2f33:   add    $0x10,%rdx
  0x00007f7748fc2f37:   jmp    Stub::ghash_processBlocks+661 0x00007f7748fc2f15
  0x00007f7748fc2f39:   vpshufb %xmm14,%xmm0,%xmm0
  0x00007f7748fc2f3e:   vmovdqu %xmm0,(%rdi)
  0x00007f7748fc2f42:   jmpq   Stub::ghash_processBlocks+1144 0x00007f7748fc30f8
  0x00007f7748fc2f47:   vpclmullqlqdq %xmm3,%xmm0,%xmm4
  0x00007f7748fc2f4d:   vpclmulhqhqdq %xmm3,%xmm0,%xmm7
  0x00007f7748fc2f53:   vpclmullqhqdq %xmm3,%xmm0,%xmm5
  0x00007f7748fc2f59:   vpclmulhqlqdq %xmm3,%xmm0,%xmm6
  0x00007f7748fc2f5f:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc2f63:   vpslldq $0x8,%xmm5,%xmm6
  0x00007f7748fc2f68:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f7748fc2f6d:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f7748fc2f71:   vpxor  %xmm5,%xmm7,%xmm7
  0x00007f7748fc2f75:   vpslld $0x1f,%xmm4,%xmm8
  0x00007f7748fc2f7a:   vpslld $0x1e,%xmm4,%xmm9
  0x00007f7748fc2f7f:   vpslld $0x19,%xmm4,%xmm10
  0x00007f7748fc2f84:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007f7748fc2f89:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007f7748fc2f8e:   vpslldq $0xc,%xmm8,%xmm9
  0x00007f7748fc2f94:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007f7748fc2f9a:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007f7748fc2f9f:   vpsrld $0x1,%xmm4,%xmm9
  0x00007f7748fc2fa4:   vpsrld $0x2,%xmm4,%xmm10
  0x00007f7748fc2fa9:   vpsrld $0x7,%xmm4,%xmm11
  0x00007f7748fc2fae:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007f7748fc2fb3:   vpxor  %xmm11,%xmm9,%xmm9
  0x00007f7748fc2fb8:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007f7748fc2fbd:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007f7748fc2fc2:   vpxor  %xmm4,%xmm7,%xmm0
  0x00007f7748fc2fc6:   retq   
  0x00007f7748fc2fc7:   vmovdqu (%rsi),%xmm13
  0x00007f7748fc2fcb:   vmovdqu 0x467469d(%rip),%xmm10        # 0x00007f774d637670
  0x00007f7748fc2fd3:   vpshufb %xmm10,%xmm13,%xmm13
  0x00007f7748fc2fd8:   vpsrld $0x7,%xmm13,%xmm3
  0x00007f7748fc2fde:   vmovdqu 0x467469a(%rip),%xmm4        # 0x00007f774d637680
  0x00007f7748fc2fe6:   vpshufb %xmm4,%xmm3,%xmm3
  0x00007f7748fc2feb:   mov    $0xff00,%eax
  0x00007f7748fc2ff0:   vmovd  %eax,%xmm4
  0x00007f7748fc2ff4:   vpshufb %xmm3,%xmm4,%xmm4
  0x00007f7748fc2ff9:   vmovdqu 0x467464f(%rip),%xmm5        # 0x00007f774d637650
  0x00007f7748fc3001:   vpand  %xmm4,%xmm5,%xmm5
  0x00007f7748fc3005:   vpsrld $0x1f,%xmm13,%xmm3
  0x00007f7748fc300b:   vpslld $0x1,%xmm13,%xmm4
  0x00007f7748fc3011:   vpslldq $0x4,%xmm3,%xmm3
  0x00007f7748fc3016:   vpxor  %xmm3,%xmm4,%xmm13
  0x00007f7748fc301a:   vpxor  %xmm5,%xmm13,%xmm13
  0x00007f7748fc301e:   vmovdqu %xmm13,0x10(%rsi)
  0x00007f7748fc3023:   retq   
  0x00007f7748fc3024:   vmovdqu 0x10(%rsi),%xmm13
  0x00007f7748fc3029:   vmovdqu %xmm13,%xmm1
  0x00007f7748fc302e:   callq  Stub::ghash_processBlocks+1016 0x00007f7748fc3078
  0x00007f7748fc3033:   vmovdqu %xmm13,0x20(%rsi)
  0x00007f7748fc3038:   callq  Stub::ghash_processBlocks+1016 0x00007f7748fc3078
  0x00007f7748fc303d:   vmovdqu %xmm13,0x30(%rsi)
  0x00007f7748fc3042:   callq  Stub::ghash_processBlocks+1016 0x00007f7748fc3078
  0x00007f7748fc3047:   vmovdqu %xmm13,0x40(%rsi)
  0x00007f7748fc304c:   callq  Stub::ghash_processBlocks+1016 0x00007f7748fc3078
  0x00007f7748fc3051:   vmovdqu %xmm13,0x50(%rsi)
  0x00007f7748fc3056:   callq  Stub::ghash_processBlocks+1016 0x00007f7748fc3078
  0x00007f7748fc305b:   vmovdqu %xmm13,0x60(%rsi)
  0x00007f7748fc3060:   callq  Stub::ghash_processBlocks+1016 0x00007f7748fc3078
  0x00007f7748fc3065:   vmovdqu %xmm13,0x70(%rsi)
  0x00007f7748fc306a:   callq  Stub::ghash_processBlocks+1016 0x00007f7748fc3078
  0x00007f7748fc306f:   vmovdqu %xmm13,0x80(%rsi)
  0x00007f7748fc3077:   retq   
  0x00007f7748fc3078:   vpclmullqlqdq %xmm1,%xmm13,%xmm4
  0x00007f7748fc307e:   vpclmulhqhqdq %xmm1,%xmm13,%xmm7
  0x00007f7748fc3084:   vpclmullqhqdq %xmm1,%xmm13,%xmm5
  0x00007f7748fc308a:   vpclmulhqlqdq %xmm1,%xmm13,%xmm6
  0x00007f7748fc3090:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007f7748fc3094:   vpslldq $0x8,%xmm5,%xmm6
  0x00007f7748fc3099:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007f7748fc309e:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007f7748fc30a2:   vpxor  %xmm5,%xmm7,%xmm7
  0x00007f7748fc30a6:   vpslld $0x1f,%xmm4,%xmm8
  0x00007f7748fc30ab:   vpslld $0x1e,%xmm4,%xmm9
  0x00007f7748fc30b0:   vpslld $0x19,%xmm4,%xmm10
  0x00007f7748fc30b5:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007f7748fc30ba:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007f7748fc30bf:   vpslldq $0xc,%xmm8,%xmm9
  0x00007f7748fc30c5:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007f7748fc30cb:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007f7748fc30d0:   vpsrld $0x1,%xmm4,%xmm9
  0x00007f7748fc30d5:   vpsrld $0x2,%xmm4,%xmm10
  0x00007f7748fc30da:   vpsrld $0x7,%xmm4,%xmm11
  0x00007f7748fc30df:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007f7748fc30e4:   vpxor  %xmm11,%xmm9,%xmm9
  0x00007f7748fc30e9:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007f7748fc30ee:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007f7748fc30f3:   vpxor  %xmm4,%xmm7,%xmm13
  0x00007f7748fc30f7:   retq   
  0x00007f7748fc30f8:   vpxor  %xmm0,%xmm0,%xmm0
  0x00007f7748fc30fc:   vpxor  %xmm1,%xmm1,%xmm1
  0x00007f7748fc3100:   vpxor  %xmm3,%xmm3,%xmm3
  0x00007f7748fc3104:   vpxor  %xmm15,%xmm15,%xmm15
  0x00007f7748fc3109:   pop    %rbx
  0x00007f7748fc310a:   leaveq 
  0x00007f7748fc310b:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::chacha20Block [0x00007f7748fc3120, 0x00007f7748fc33c1] (673 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc3120:   push   %rbp
  0x00007f7748fc3121:   mov    %rsp,%rbp
  0x00007f7748fc3124:   movabs $0x7f774d636680,%r9
  0x00007f7748fc312e:   movabs $0x7f774d636740,%rax
  0x00007f7748fc3138:   vbroadcastf128 (%rdi),%ymm0
  0x00007f7748fc313d:   vbroadcastf128 0x10(%rdi),%ymm1
  0x00007f7748fc3143:   vbroadcastf128 0x20(%rdi),%ymm2
  0x00007f7748fc3149:   vbroadcastf128 0x30(%rdi),%ymm3
  0x00007f7748fc314f:   vpaddd (%rax),%ymm3,%ymm3
  0x00007f7748fc3153:   vpaddd 0x20(%rax),%ymm3,%ymm13
  0x00007f7748fc3158:   vmovdqu %ymm0,%ymm4
  0x00007f7748fc315c:   vmovdqu %ymm1,%ymm5
  0x00007f7748fc3160:   vmovdqu %ymm2,%ymm6
  0x00007f7748fc3164:   vmovdqu %ymm3,%ymm7
  0x00007f7748fc3168:   vmovdqu %ymm0,%ymm8
  0x00007f7748fc316c:   vmovdqu %ymm1,%ymm9
  0x00007f7748fc3170:   vmovdqu %ymm2,%ymm10
  0x00007f7748fc3174:   vmovdqu %ymm13,%ymm11
  0x00007f7748fc3179:   vmovdqu (%r9),%ymm14
  0x00007f7748fc317e:   vmovdqu 0x20(%r9),%ymm15
  0x00007f7748fc3184:   mov    $0xa,%r8d
  0x00007f7748fc318a:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007f7748fc318e:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007f7748fc3192:   vpshufb %ymm15,%ymm7,%ymm7
  0x00007f7748fc3197:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007f7748fc319b:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007f7748fc319f:   vpsrld $0x14,%ymm5,%ymm12
  0x00007f7748fc31a4:   vpslld $0xc,%ymm5,%ymm5
  0x00007f7748fc31a9:   vpor   %ymm12,%ymm5,%ymm5
  0x00007f7748fc31ae:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007f7748fc31b2:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007f7748fc31b6:   vpshufb %ymm14,%ymm7,%ymm7
  0x00007f7748fc31bb:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007f7748fc31bf:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007f7748fc31c3:   vpsrld $0x19,%ymm5,%ymm12
  0x00007f7748fc31c8:   vpslld $0x7,%ymm5,%ymm5
  0x00007f7748fc31cd:   vpor   %ymm12,%ymm5,%ymm5
  0x00007f7748fc31d2:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007f7748fc31d7:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007f7748fc31dc:   vpshufb %ymm15,%ymm11,%ymm11
  0x00007f7748fc31e1:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007f7748fc31e6:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007f7748fc31eb:   vpsrld $0x14,%ymm9,%ymm12
  0x00007f7748fc31f1:   vpslld $0xc,%ymm9,%ymm9
  0x00007f7748fc31f7:   vpor   %ymm12,%ymm9,%ymm9
  0x00007f7748fc31fc:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007f7748fc3201:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007f7748fc3206:   vpshufb %ymm14,%ymm11,%ymm11
  0x00007f7748fc320b:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007f7748fc3210:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007f7748fc3215:   vpsrld $0x19,%ymm9,%ymm12
  0x00007f7748fc321b:   vpslld $0x7,%ymm9,%ymm9
  0x00007f7748fc3221:   vpor   %ymm12,%ymm9,%ymm9
  0x00007f7748fc3226:   vpshufd $0x39,%ymm5,%ymm5
  0x00007f7748fc322b:   vpshufd $0x4e,%ymm6,%ymm6
  0x00007f7748fc3230:   vpshufd $0x93,%ymm7,%ymm7
  0x00007f7748fc3235:   vpshufd $0x39,%ymm9,%ymm9
  0x00007f7748fc323b:   vpshufd $0x4e,%ymm10,%ymm10
  0x00007f7748fc3241:   vpshufd $0x93,%ymm11,%ymm11
  0x00007f7748fc3247:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007f7748fc324b:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007f7748fc324f:   vpshufb %ymm15,%ymm7,%ymm7
  0x00007f7748fc3254:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007f7748fc3258:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007f7748fc325c:   vpsrld $0x14,%ymm5,%ymm12
  0x00007f7748fc3261:   vpslld $0xc,%ymm5,%ymm5
  0x00007f7748fc3266:   vpor   %ymm12,%ymm5,%ymm5
  0x00007f7748fc326b:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007f7748fc326f:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007f7748fc3273:   vpshufb %ymm14,%ymm7,%ymm7
  0x00007f7748fc3278:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007f7748fc327c:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007f7748fc3280:   vpsrld $0x19,%ymm5,%ymm12
  0x00007f7748fc3285:   vpslld $0x7,%ymm5,%ymm5
  0x00007f7748fc328a:   vpor   %ymm12,%ymm5,%ymm5
  0x00007f7748fc328f:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007f7748fc3294:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007f7748fc3299:   vpshufb %ymm15,%ymm11,%ymm11
  0x00007f7748fc329e:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007f7748fc32a3:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007f7748fc32a8:   vpsrld $0x14,%ymm9,%ymm12
  0x00007f7748fc32ae:   vpslld $0xc,%ymm9,%ymm9
  0x00007f7748fc32b4:   vpor   %ymm12,%ymm9,%ymm9
  0x00007f7748fc32b9:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007f7748fc32be:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007f7748fc32c3:   vpshufb %ymm14,%ymm11,%ymm11
  0x00007f7748fc32c8:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007f7748fc32cd:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007f7748fc32d2:   vpsrld $0x19,%ymm9,%ymm12
  0x00007f7748fc32d8:   vpslld $0x7,%ymm9,%ymm9
  0x00007f7748fc32de:   vpor   %ymm12,%ymm9,%ymm9
  0x00007f7748fc32e3:   vpshufd $0x93,%ymm5,%ymm5
  0x00007f7748fc32e8:   vpshufd $0x4e,%ymm6,%ymm6
  0x00007f7748fc32ed:   vpshufd $0x39,%ymm7,%ymm7
  0x00007f7748fc32f2:   vpshufd $0x93,%ymm9,%ymm9
  0x00007f7748fc32f8:   vpshufd $0x4e,%ymm10,%ymm10
  0x00007f7748fc32fe:   vpshufd $0x39,%ymm11,%ymm11
  0x00007f7748fc3304:   dec    %r8
  0x00007f7748fc3307:   jne    Stub::chacha20Block+106 0x00007f7748fc318a
  0x00007f7748fc330d:   vpaddd %ymm0,%ymm4,%ymm4
  0x00007f7748fc3311:   vpaddd %ymm1,%ymm5,%ymm5
  0x00007f7748fc3315:   vpaddd %ymm2,%ymm6,%ymm6
  0x00007f7748fc3319:   vpaddd %ymm3,%ymm7,%ymm7
  0x00007f7748fc331d:   vpaddd %ymm0,%ymm8,%ymm8
  0x00007f7748fc3321:   vpaddd %ymm1,%ymm9,%ymm9
  0x00007f7748fc3325:   vpaddd %ymm2,%ymm10,%ymm10
  0x00007f7748fc3329:   vpaddd %ymm13,%ymm11,%ymm11
  0x00007f7748fc332e:   vextracti128 $0x0,%ymm4,(%rsi)
  0x00007f7748fc3334:   vextracti128 $0x1,%ymm4,0x40(%rsi)
  0x00007f7748fc333b:   vextracti128 $0x0,%ymm5,0x10(%rsi)
  0x00007f7748fc3342:   vextracti128 $0x1,%ymm5,0x50(%rsi)
  0x00007f7748fc3349:   vextracti128 $0x0,%ymm6,0x20(%rsi)
  0x00007f7748fc3350:   vextracti128 $0x1,%ymm6,0x60(%rsi)
  0x00007f7748fc3357:   vextracti128 $0x0,%ymm7,0x30(%rsi)
  0x00007f7748fc335e:   vextracti128 $0x1,%ymm7,0x70(%rsi)
  0x00007f7748fc3365:   vextracti128 $0x0,%ymm8,0x80(%rsi)
  0x00007f7748fc336f:   vextracti128 $0x1,%ymm8,0xc0(%rsi)
  0x00007f7748fc3379:   vextracti128 $0x0,%ymm9,0x90(%rsi)
  0x00007f7748fc3383:   vextracti128 $0x1,%ymm9,0xd0(%rsi)
  0x00007f7748fc338d:   vextracti128 $0x0,%ymm10,0xa0(%rsi)
  0x00007f7748fc3397:   vextracti128 $0x1,%ymm10,0xe0(%rsi)
  0x00007f7748fc33a1:   vextracti128 $0x0,%ymm11,0xb0(%rsi)
  0x00007f7748fc33ab:   vextracti128 $0x1,%ymm11,0xf0(%rsi)
  0x00007f7748fc33b5:   movabs $0x100,%rax
  0x00007f7748fc33bf:   leaveq 
  0x00007f7748fc33c0:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::md5_implCompress [0x00007f7748fc33e0, 0x00007f7748fc3a69] (1673 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc33e0:   push   %rbp
  0x00007f7748fc33e1:   mov    %rsp,%rbp
  0x00007f7748fc33e4:   push   %rbx
  0x00007f7748fc33e5:   push   %rdi
  0x00007f7748fc33e6:   push   %rsi
  0x00007f7748fc33e7:   push   %r15
  0x00007f7748fc33e9:   sub    $0x10,%rsp
  0x00007f7748fc33ed:   mov    %rdi,%r15
  0x00007f7748fc33f0:   mov    %rsi,(%rsp)
  0x00007f7748fc33f4:   mov    (%rsp),%rdi
  0x00007f7748fc33f8:   mov    (%rdi),%eax
  0x00007f7748fc33fa:   mov    0x4(%rdi),%ebx
  0x00007f7748fc33fd:   mov    0x8(%rdi),%ecx
  0x00007f7748fc3400:   mov    0xc(%rdi),%edx
  0x00007f7748fc3403:   add    $0xd76aa478,%eax
  0x00007f7748fc3408:   mov    %ecx,%esi
  0x00007f7748fc340a:   add    (%r15),%eax
  0x00007f7748fc340d:   xor    %edx,%esi
  0x00007f7748fc340f:   and    %ebx,%esi
  0x00007f7748fc3411:   xor    %edx,%esi
  0x00007f7748fc3413:   add    %esi,%eax
  0x00007f7748fc3415:   rol    $0x7,%eax
  0x00007f7748fc3418:   add    %ebx,%eax
  0x00007f7748fc341a:   add    $0xe8c7b756,%edx
  0x00007f7748fc3420:   mov    %ebx,%esi
  0x00007f7748fc3422:   add    0x4(%r15),%edx
  0x00007f7748fc3426:   xor    %ecx,%esi
  0x00007f7748fc3428:   and    %eax,%esi
  0x00007f7748fc342a:   xor    %ecx,%esi
  0x00007f7748fc342c:   add    %esi,%edx
  0x00007f7748fc342e:   rol    $0xc,%edx
  0x00007f7748fc3431:   add    %eax,%edx
  0x00007f7748fc3433:   add    $0x242070db,%ecx
  0x00007f7748fc3439:   mov    %eax,%esi
  0x00007f7748fc343b:   add    0x8(%r15),%ecx
  0x00007f7748fc343f:   xor    %ebx,%esi
  0x00007f7748fc3441:   and    %edx,%esi
  0x00007f7748fc3443:   xor    %ebx,%esi
  0x00007f7748fc3445:   add    %esi,%ecx
  0x00007f7748fc3447:   rol    $0x11,%ecx
  0x00007f7748fc344a:   add    %edx,%ecx
  0x00007f7748fc344c:   add    $0xc1bdceee,%ebx
  0x00007f7748fc3452:   mov    %edx,%esi
  0x00007f7748fc3454:   add    0xc(%r15),%ebx
  0x00007f7748fc3458:   xor    %eax,%esi
  0x00007f7748fc345a:   and    %ecx,%esi
  0x00007f7748fc345c:   xor    %eax,%esi
  0x00007f7748fc345e:   add    %esi,%ebx
  0x00007f7748fc3460:   rol    $0x16,%ebx
  0x00007f7748fc3463:   add    %ecx,%ebx
  0x00007f7748fc3465:   add    $0xf57c0faf,%eax
  0x00007f7748fc346a:   mov    %ecx,%esi
  0x00007f7748fc346c:   add    0x10(%r15),%eax
  0x00007f7748fc3470:   xor    %edx,%esi
  0x00007f7748fc3472:   and    %ebx,%esi
  0x00007f7748fc3474:   xor    %edx,%esi
  0x00007f7748fc3476:   add    %esi,%eax
  0x00007f7748fc3478:   rol    $0x7,%eax
  0x00007f7748fc347b:   add    %ebx,%eax
  0x00007f7748fc347d:   add    $0x4787c62a,%edx
  0x00007f7748fc3483:   mov    %ebx,%esi
  0x00007f7748fc3485:   add    0x14(%r15),%edx
  0x00007f7748fc3489:   xor    %ecx,%esi
  0x00007f7748fc348b:   and    %eax,%esi
  0x00007f7748fc348d:   xor    %ecx,%esi
  0x00007f7748fc348f:   add    %esi,%edx
  0x00007f7748fc3491:   rol    $0xc,%edx
  0x00007f7748fc3494:   add    %eax,%edx
  0x00007f7748fc3496:   add    $0xa8304613,%ecx
  0x00007f7748fc349c:   mov    %eax,%esi
  0x00007f7748fc349e:   add    0x18(%r15),%ecx
  0x00007f7748fc34a2:   xor    %ebx,%esi
  0x00007f7748fc34a4:   and    %edx,%esi
  0x00007f7748fc34a6:   xor    %ebx,%esi
  0x00007f7748fc34a8:   add    %esi,%ecx
  0x00007f7748fc34aa:   rol    $0x11,%ecx
  0x00007f7748fc34ad:   add    %edx,%ecx
  0x00007f7748fc34af:   add    $0xfd469501,%ebx
  0x00007f7748fc34b5:   mov    %edx,%esi
  0x00007f7748fc34b7:   add    0x1c(%r15),%ebx
  0x00007f7748fc34bb:   xor    %eax,%esi
  0x00007f7748fc34bd:   and    %ecx,%esi
  0x00007f7748fc34bf:   xor    %eax,%esi
  0x00007f7748fc34c1:   add    %esi,%ebx
  0x00007f7748fc34c3:   rol    $0x16,%ebx
  0x00007f7748fc34c6:   add    %ecx,%ebx
  0x00007f7748fc34c8:   add    $0x698098d8,%eax
  0x00007f7748fc34cd:   mov    %ecx,%esi
  0x00007f7748fc34cf:   add    0x20(%r15),%eax
  0x00007f7748fc34d3:   xor    %edx,%esi
  0x00007f7748fc34d5:   and    %ebx,%esi
  0x00007f7748fc34d7:   xor    %edx,%esi
  0x00007f7748fc34d9:   add    %esi,%eax
  0x00007f7748fc34db:   rol    $0x7,%eax
  0x00007f7748fc34de:   add    %ebx,%eax
  0x00007f7748fc34e0:   add    $0x8b44f7af,%edx
  0x00007f7748fc34e6:   mov    %ebx,%esi
  0x00007f7748fc34e8:   add    0x24(%r15),%edx
  0x00007f7748fc34ec:   xor    %ecx,%esi
  0x00007f7748fc34ee:   and    %eax,%esi
  0x00007f7748fc34f0:   xor    %ecx,%esi
  0x00007f7748fc34f2:   add    %esi,%edx
  0x00007f7748fc34f4:   rol    $0xc,%edx
  0x00007f7748fc34f7:   add    %eax,%edx
  0x00007f7748fc34f9:   add    $0xffff5bb1,%ecx
  0x00007f7748fc34ff:   mov    %eax,%esi
  0x00007f7748fc3501:   add    0x28(%r15),%ecx
  0x00007f7748fc3505:   xor    %ebx,%esi
  0x00007f7748fc3507:   and    %edx,%esi
  0x00007f7748fc3509:   xor    %ebx,%esi
  0x00007f7748fc350b:   add    %esi,%ecx
  0x00007f7748fc350d:   rol    $0x11,%ecx
  0x00007f7748fc3510:   add    %edx,%ecx
  0x00007f7748fc3512:   add    $0x895cd7be,%ebx
  0x00007f7748fc3518:   mov    %edx,%esi
  0x00007f7748fc351a:   add    0x2c(%r15),%ebx
  0x00007f7748fc351e:   xor    %eax,%esi
  0x00007f7748fc3520:   and    %ecx,%esi
  0x00007f7748fc3522:   xor    %eax,%esi
  0x00007f7748fc3524:   add    %esi,%ebx
  0x00007f7748fc3526:   rol    $0x16,%ebx
  0x00007f7748fc3529:   add    %ecx,%ebx
  0x00007f7748fc352b:   add    $0x6b901122,%eax
  0x00007f7748fc3530:   mov    %ecx,%esi
  0x00007f7748fc3532:   add    0x30(%r15),%eax
  0x00007f7748fc3536:   xor    %edx,%esi
  0x00007f7748fc3538:   and    %ebx,%esi
  0x00007f7748fc353a:   xor    %edx,%esi
  0x00007f7748fc353c:   add    %esi,%eax
  0x00007f7748fc353e:   rol    $0x7,%eax
  0x00007f7748fc3541:   add    %ebx,%eax
  0x00007f7748fc3543:   add    $0xfd987193,%edx
  0x00007f7748fc3549:   mov    %ebx,%esi
  0x00007f7748fc354b:   add    0x34(%r15),%edx
  0x00007f7748fc354f:   xor    %ecx,%esi
  0x00007f7748fc3551:   and    %eax,%esi
  0x00007f7748fc3553:   xor    %ecx,%esi
  0x00007f7748fc3555:   add    %esi,%edx
  0x00007f7748fc3557:   rol    $0xc,%edx
  0x00007f7748fc355a:   add    %eax,%edx
  0x00007f7748fc355c:   add    $0xa679438e,%ecx
  0x00007f7748fc3562:   mov    %eax,%esi
  0x00007f7748fc3564:   add    0x38(%r15),%ecx
  0x00007f7748fc3568:   xor    %ebx,%esi
  0x00007f7748fc356a:   and    %edx,%esi
  0x00007f7748fc356c:   xor    %ebx,%esi
  0x00007f7748fc356e:   add    %esi,%ecx
  0x00007f7748fc3570:   rol    $0x11,%ecx
  0x00007f7748fc3573:   add    %edx,%ecx
  0x00007f7748fc3575:   add    $0x49b40821,%ebx
  0x00007f7748fc357b:   mov    %edx,%esi
  0x00007f7748fc357d:   add    0x3c(%r15),%ebx
  0x00007f7748fc3581:   xor    %eax,%esi
  0x00007f7748fc3583:   and    %ecx,%esi
  0x00007f7748fc3585:   xor    %eax,%esi
  0x00007f7748fc3587:   add    %esi,%ebx
  0x00007f7748fc3589:   rol    $0x16,%ebx
  0x00007f7748fc358c:   add    %ecx,%ebx
  0x00007f7748fc358e:   add    $0xf61e2562,%eax
  0x00007f7748fc3593:   mov    %edx,%esi
  0x00007f7748fc3595:   mov    %edx,%edi
  0x00007f7748fc3597:   add    0x4(%r15),%eax
  0x00007f7748fc359b:   not    %esi
  0x00007f7748fc359d:   and    %ebx,%edi
  0x00007f7748fc359f:   and    %ecx,%esi
  0x00007f7748fc35a1:   or     %edi,%esi
  0x00007f7748fc35a3:   add    %esi,%eax
  0x00007f7748fc35a5:   rol    $0x5,%eax
  0x00007f7748fc35a8:   add    %ebx,%eax
  0x00007f7748fc35aa:   add    $0xc040b340,%edx
  0x00007f7748fc35b0:   mov    %ecx,%esi
  0x00007f7748fc35b2:   mov    %ecx,%edi
  0x00007f7748fc35b4:   add    0x18(%r15),%edx
  0x00007f7748fc35b8:   not    %esi
  0x00007f7748fc35ba:   and    %eax,%edi
  0x00007f7748fc35bc:   and    %ebx,%esi
  0x00007f7748fc35be:   or     %edi,%esi
  0x00007f7748fc35c0:   add    %esi,%edx
  0x00007f7748fc35c2:   rol    $0x9,%edx
  0x00007f7748fc35c5:   add    %eax,%edx
  0x00007f7748fc35c7:   add    $0x265e5a51,%ecx
  0x00007f7748fc35cd:   mov    %ebx,%esi
  0x00007f7748fc35cf:   mov    %ebx,%edi
  0x00007f7748fc35d1:   add    0x2c(%r15),%ecx
  0x00007f7748fc35d5:   not    %esi
  0x00007f7748fc35d7:   and    %edx,%edi
  0x00007f7748fc35d9:   and    %eax,%esi
  0x00007f7748fc35db:   or     %edi,%esi
  0x00007f7748fc35dd:   add    %esi,%ecx
  0x00007f7748fc35df:   rol    $0xe,%ecx
  0x00007f7748fc35e2:   add    %edx,%ecx
  0x00007f7748fc35e4:   add    $0xe9b6c7aa,%ebx
  0x00007f7748fc35ea:   mov    %eax,%esi
  0x00007f7748fc35ec:   mov    %eax,%edi
  0x00007f7748fc35ee:   add    (%r15),%ebx
  0x00007f7748fc35f1:   not    %esi
  0x00007f7748fc35f3:   and    %ecx,%edi
  0x00007f7748fc35f5:   and    %edx,%esi
  0x00007f7748fc35f7:   or     %edi,%esi
  0x00007f7748fc35f9:   add    %esi,%ebx
  0x00007f7748fc35fb:   rol    $0x14,%ebx
  0x00007f7748fc35fe:   add    %ecx,%ebx
  0x00007f7748fc3600:   add    $0xd62f105d,%eax
  0x00007f7748fc3605:   mov    %edx,%esi
  0x00007f7748fc3607:   mov    %edx,%edi
  0x00007f7748fc3609:   add    0x14(%r15),%eax
  0x00007f7748fc360d:   not    %esi
  0x00007f7748fc360f:   and    %ebx,%edi
  0x00007f7748fc3611:   and    %ecx,%esi
  0x00007f7748fc3613:   or     %edi,%esi
  0x00007f7748fc3615:   add    %esi,%eax
  0x00007f7748fc3617:   rol    $0x5,%eax
  0x00007f7748fc361a:   add    %ebx,%eax
  0x00007f7748fc361c:   add    $0x2441453,%edx
  0x00007f7748fc3622:   mov    %ecx,%esi
  0x00007f7748fc3624:   mov    %ecx,%edi
  0x00007f7748fc3626:   add    0x28(%r15),%edx
  0x00007f7748fc362a:   not    %esi
  0x00007f7748fc362c:   and    %eax,%edi
  0x00007f7748fc362e:   and    %ebx,%esi
  0x00007f7748fc3630:   or     %edi,%esi
  0x00007f7748fc3632:   add    %esi,%edx
  0x00007f7748fc3634:   rol    $0x9,%edx
  0x00007f7748fc3637:   add    %eax,%edx
  0x00007f7748fc3639:   add    $0xd8a1e681,%ecx
  0x00007f7748fc363f:   mov    %ebx,%esi
  0x00007f7748fc3641:   mov    %ebx,%edi
  0x00007f7748fc3643:   add    0x3c(%r15),%ecx
  0x00007f7748fc3647:   not    %esi
  0x00007f7748fc3649:   and    %edx,%edi
  0x00007f7748fc364b:   and    %eax,%esi
  0x00007f7748fc364d:   or     %edi,%esi
  0x00007f7748fc364f:   add    %esi,%ecx
  0x00007f7748fc3651:   rol    $0xe,%ecx
  0x00007f7748fc3654:   add    %edx,%ecx
  0x00007f7748fc3656:   add    $0xe7d3fbc8,%ebx
  0x00007f7748fc365c:   mov    %eax,%esi
  0x00007f7748fc365e:   mov    %eax,%edi
  0x00007f7748fc3660:   add    0x10(%r15),%ebx
  0x00007f7748fc3664:   not    %esi
  0x00007f7748fc3666:   and    %ecx,%edi
  0x00007f7748fc3668:   and    %edx,%esi
  0x00007f7748fc366a:   or     %edi,%esi
  0x00007f7748fc366c:   add    %esi,%ebx
  0x00007f7748fc366e:   rol    $0x14,%ebx
  0x00007f7748fc3671:   add    %ecx,%ebx
  0x00007f7748fc3673:   add    $0x21e1cde6,%eax
  0x00007f7748fc3678:   mov    %edx,%esi
  0x00007f7748fc367a:   mov    %edx,%edi
  0x00007f7748fc367c:   add    0x24(%r15),%eax
  0x00007f7748fc3680:   not    %esi
  0x00007f7748fc3682:   and    %ebx,%edi
  0x00007f7748fc3684:   and    %ecx,%esi
  0x00007f7748fc3686:   or     %edi,%esi
  0x00007f7748fc3688:   add    %esi,%eax
  0x00007f7748fc368a:   rol    $0x5,%eax
  0x00007f7748fc368d:   add    %ebx,%eax
  0x00007f7748fc368f:   add    $0xc33707d6,%edx
  0x00007f7748fc3695:   mov    %ecx,%esi
  0x00007f7748fc3697:   mov    %ecx,%edi
  0x00007f7748fc3699:   add    0x38(%r15),%edx
  0x00007f7748fc369d:   not    %esi
  0x00007f7748fc369f:   and    %eax,%edi
  0x00007f7748fc36a1:   and    %ebx,%esi
  0x00007f7748fc36a3:   or     %edi,%esi
  0x00007f7748fc36a5:   add    %esi,%edx
  0x00007f7748fc36a7:   rol    $0x9,%edx
  0x00007f7748fc36aa:   add    %eax,%edx
  0x00007f7748fc36ac:   add    $0xf4d50d87,%ecx
  0x00007f7748fc36b2:   mov    %ebx,%esi
  0x00007f7748fc36b4:   mov    %ebx,%edi
  0x00007f7748fc36b6:   add    0xc(%r15),%ecx
  0x00007f7748fc36ba:   not    %esi
  0x00007f7748fc36bc:   and    %edx,%edi
  0x00007f7748fc36be:   and    %eax,%esi
  0x00007f7748fc36c0:   or     %edi,%esi
  0x00007f7748fc36c2:   add    %esi,%ecx
  0x00007f7748fc36c4:   rol    $0xe,%ecx
  0x00007f7748fc36c7:   add    %edx,%ecx
  0x00007f7748fc36c9:   add    $0x455a14ed,%ebx
  0x00007f7748fc36cf:   mov    %eax,%esi
  0x00007f7748fc36d1:   mov    %eax,%edi
  0x00007f7748fc36d3:   add    0x20(%r15),%ebx
  0x00007f7748fc36d7:   not    %esi
  0x00007f7748fc36d9:   and    %ecx,%edi
  0x00007f7748fc36db:   and    %edx,%esi
  0x00007f7748fc36dd:   or     %edi,%esi
  0x00007f7748fc36df:   add    %esi,%ebx
  0x00007f7748fc36e1:   rol    $0x14,%ebx
  0x00007f7748fc36e4:   add    %ecx,%ebx
  0x00007f7748fc36e6:   add    $0xa9e3e905,%eax
  0x00007f7748fc36eb:   mov    %edx,%esi
  0x00007f7748fc36ed:   mov    %edx,%edi
  0x00007f7748fc36ef:   add    0x34(%r15),%eax
  0x00007f7748fc36f3:   not    %esi
  0x00007f7748fc36f5:   and    %ebx,%edi
  0x00007f7748fc36f7:   and    %ecx,%esi
  0x00007f7748fc36f9:   or     %edi,%esi
  0x00007f7748fc36fb:   add    %esi,%eax
  0x00007f7748fc36fd:   rol    $0x5,%eax
  0x00007f7748fc3700:   add    %ebx,%eax
  0x00007f7748fc3702:   add    $0xfcefa3f8,%edx
  0x00007f7748fc3708:   mov    %ecx,%esi
  0x00007f7748fc370a:   mov    %ecx,%edi
  0x00007f7748fc370c:   add    0x8(%r15),%edx
  0x00007f7748fc3710:   not    %esi
  0x00007f7748fc3712:   and    %eax,%edi
  0x00007f7748fc3714:   and    %ebx,%esi
  0x00007f7748fc3716:   or     %edi,%esi
  0x00007f7748fc3718:   add    %esi,%edx
  0x00007f7748fc371a:   rol    $0x9,%edx
  0x00007f7748fc371d:   add    %eax,%edx
  0x00007f7748fc371f:   add    $0x676f02d9,%ecx
  0x00007f7748fc3725:   mov    %ebx,%esi
  0x00007f7748fc3727:   mov    %ebx,%edi
  0x00007f7748fc3729:   add    0x1c(%r15),%ecx
  0x00007f7748fc372d:   not    %esi
  0x00007f7748fc372f:   and    %edx,%edi
  0x00007f7748fc3731:   and    %eax,%esi
  0x00007f7748fc3733:   or     %edi,%esi
  0x00007f7748fc3735:   add    %esi,%ecx
  0x00007f7748fc3737:   rol    $0xe,%ecx
  0x00007f7748fc373a:   add    %edx,%ecx
  0x00007f7748fc373c:   add    $0x8d2a4c8a,%ebx
  0x00007f7748fc3742:   mov    %eax,%esi
  0x00007f7748fc3744:   mov    %eax,%edi
  0x00007f7748fc3746:   add    0x30(%r15),%ebx
  0x00007f7748fc374a:   not    %esi
  0x00007f7748fc374c:   and    %ecx,%edi
  0x00007f7748fc374e:   and    %edx,%esi
  0x00007f7748fc3750:   or     %edi,%esi
  0x00007f7748fc3752:   add    %esi,%ebx
  0x00007f7748fc3754:   rol    $0x14,%ebx
  0x00007f7748fc3757:   add    %ecx,%ebx
  0x00007f7748fc3759:   add    $0xfffa3942,%eax
  0x00007f7748fc375e:   mov    %ecx,%esi
  0x00007f7748fc3760:   add    0x14(%r15),%eax
  0x00007f7748fc3764:   xor    %edx,%esi
  0x00007f7748fc3766:   xor    %ebx,%esi
  0x00007f7748fc3768:   add    %esi,%eax
  0x00007f7748fc376a:   rol    $0x4,%eax
  0x00007f7748fc376d:   add    %ebx,%eax
  0x00007f7748fc376f:   add    $0x8771f681,%edx
  0x00007f7748fc3775:   mov    %ebx,%esi
  0x00007f7748fc3777:   add    0x20(%r15),%edx
  0x00007f7748fc377b:   xor    %ecx,%esi
  0x00007f7748fc377d:   xor    %eax,%esi
  0x00007f7748fc377f:   add    %esi,%edx
  0x00007f7748fc3781:   rol    $0xb,%edx
  0x00007f7748fc3784:   add    %eax,%edx
  0x00007f7748fc3786:   add    $0x6d9d6122,%ecx
  0x00007f7748fc378c:   mov    %eax,%esi
  0x00007f7748fc378e:   add    0x2c(%r15),%ecx
  0x00007f7748fc3792:   xor    %ebx,%esi
  0x00007f7748fc3794:   xor    %edx,%esi
  0x00007f7748fc3796:   add    %esi,%ecx
  0x00007f7748fc3798:   rol    $0x10,%ecx
  0x00007f7748fc379b:   add    %edx,%ecx
  0x00007f7748fc379d:   add    $0xfde5380c,%ebx
  0x00007f7748fc37a3:   mov    %edx,%esi
  0x00007f7748fc37a5:   add    0x38(%r15),%ebx
  0x00007f7748fc37a9:   xor    %eax,%esi
  0x00007f7748fc37ab:   xor    %ecx,%esi
  0x00007f7748fc37ad:   add    %esi,%ebx
  0x00007f7748fc37af:   rol    $0x17,%ebx
  0x00007f7748fc37b2:   add    %ecx,%ebx
  0x00007f7748fc37b4:   add    $0xa4beea44,%eax
  0x00007f7748fc37b9:   mov    %ecx,%esi
  0x00007f7748fc37bb:   add    0x4(%r15),%eax
  0x00007f7748fc37bf:   xor    %edx,%esi
  0x00007f7748fc37c1:   xor    %ebx,%esi
  0x00007f7748fc37c3:   add    %esi,%eax
  0x00007f7748fc37c5:   rol    $0x4,%eax
  0x00007f7748fc37c8:   add    %ebx,%eax
  0x00007f7748fc37ca:   add    $0x4bdecfa9,%edx
  0x00007f7748fc37d0:   mov    %ebx,%esi
  0x00007f7748fc37d2:   add    0x10(%r15),%edx
  0x00007f7748fc37d6:   xor    %ecx,%esi
  0x00007f7748fc37d8:   xor    %eax,%esi
  0x00007f7748fc37da:   add    %esi,%edx
  0x00007f7748fc37dc:   rol    $0xb,%edx
  0x00007f7748fc37df:   add    %eax,%edx
  0x00007f7748fc37e1:   add    $0xf6bb4b60,%ecx
  0x00007f7748fc37e7:   mov    %eax,%esi
  0x00007f7748fc37e9:   add    0x1c(%r15),%ecx
  0x00007f7748fc37ed:   xor    %ebx,%esi
  0x00007f7748fc37ef:   xor    %edx,%esi
  0x00007f7748fc37f1:   add    %esi,%ecx
  0x00007f7748fc37f3:   rol    $0x10,%ecx
  0x00007f7748fc37f6:   add    %edx,%ecx
  0x00007f7748fc37f8:   add    $0xbebfbc70,%ebx
  0x00007f7748fc37fe:   mov    %edx,%esi
  0x00007f7748fc3800:   add    0x28(%r15),%ebx
  0x00007f7748fc3804:   xor    %eax,%esi
  0x00007f7748fc3806:   xor    %ecx,%esi
  0x00007f7748fc3808:   add    %esi,%ebx
  0x00007f7748fc380a:   rol    $0x17,%ebx
  0x00007f7748fc380d:   add    %ecx,%ebx
  0x00007f7748fc380f:   add    $0x289b7ec6,%eax
  0x00007f7748fc3814:   mov    %ecx,%esi
  0x00007f7748fc3816:   add    0x34(%r15),%eax
  0x00007f7748fc381a:   xor    %edx,%esi
  0x00007f7748fc381c:   xor    %ebx,%esi
  0x00007f7748fc381e:   add    %esi,%eax
  0x00007f7748fc3820:   rol    $0x4,%eax
  0x00007f7748fc3823:   add    %ebx,%eax
  0x00007f7748fc3825:   add    $0xeaa127fa,%edx
  0x00007f7748fc382b:   mov    %ebx,%esi
  0x00007f7748fc382d:   add    (%r15),%edx
  0x00007f7748fc3830:   xor    %ecx,%esi
  0x00007f7748fc3832:   xor    %eax,%esi
  0x00007f7748fc3834:   add    %esi,%edx
  0x00007f7748fc3836:   rol    $0xb,%edx
  0x00007f7748fc3839:   add    %eax,%edx
  0x00007f7748fc383b:   add    $0xd4ef3085,%ecx
  0x00007f7748fc3841:   mov    %eax,%esi
  0x00007f7748fc3843:   add    0xc(%r15),%ecx
  0x00007f7748fc3847:   xor    %ebx,%esi
  0x00007f7748fc3849:   xor    %edx,%esi
  0x00007f7748fc384b:   add    %esi,%ecx
  0x00007f7748fc384d:   rol    $0x10,%ecx
  0x00007f7748fc3850:   add    %edx,%ecx
  0x00007f7748fc3852:   add    $0x4881d05,%ebx
  0x00007f7748fc3858:   mov    %edx,%esi
  0x00007f7748fc385a:   add    0x18(%r15),%ebx
  0x00007f7748fc385e:   xor    %eax,%esi
  0x00007f7748fc3860:   xor    %ecx,%esi
  0x00007f7748fc3862:   add    %esi,%ebx
  0x00007f7748fc3864:   rol    $0x17,%ebx
  0x00007f7748fc3867:   add    %ecx,%ebx
  0x00007f7748fc3869:   add    $0xd9d4d039,%eax
  0x00007f7748fc386e:   mov    %ecx,%esi
  0x00007f7748fc3870:   add    0x24(%r15),%eax
  0x00007f7748fc3874:   xor    %edx,%esi
  0x00007f7748fc3876:   xor    %ebx,%esi
  0x00007f7748fc3878:   add    %esi,%eax
  0x00007f7748fc387a:   rol    $0x4,%eax
  0x00007f7748fc387d:   add    %ebx,%eax
  0x00007f7748fc387f:   add    $0xe6db99e5,%edx
  0x00007f7748fc3885:   mov    %ebx,%esi
  0x00007f7748fc3887:   add    0x30(%r15),%edx
  0x00007f7748fc388b:   xor    %ecx,%esi
  0x00007f7748fc388d:   xor    %eax,%esi
  0x00007f7748fc388f:   add    %esi,%edx
  0x00007f7748fc3891:   rol    $0xb,%edx
  0x00007f7748fc3894:   add    %eax,%edx
  0x00007f7748fc3896:   add    $0x1fa27cf8,%ecx
  0x00007f7748fc389c:   mov    %eax,%esi
  0x00007f7748fc389e:   add    0x3c(%r15),%ecx
  0x00007f7748fc38a2:   xor    %ebx,%esi
  0x00007f7748fc38a4:   xor    %edx,%esi
  0x00007f7748fc38a6:   add    %esi,%ecx
  0x00007f7748fc38a8:   rol    $0x10,%ecx
  0x00007f7748fc38ab:   add    %edx,%ecx
  0x00007f7748fc38ad:   add    $0xc4ac5665,%ebx
  0x00007f7748fc38b3:   mov    %edx,%esi
  0x00007f7748fc38b5:   add    0x8(%r15),%ebx
  0x00007f7748fc38b9:   xor    %eax,%esi
  0x00007f7748fc38bb:   xor    %ecx,%esi
  0x00007f7748fc38bd:   add    %esi,%ebx
  0x00007f7748fc38bf:   rol    $0x17,%ebx
  0x00007f7748fc38c2:   add    %ecx,%ebx
  0x00007f7748fc38c4:   add    $0xf4292244,%eax
  0x00007f7748fc38c9:   mov    %edx,%esi
  0x00007f7748fc38cb:   not    %esi
  0x00007f7748fc38cd:   add    (%r15),%eax
  0x00007f7748fc38d0:   or     %ebx,%esi
  0x00007f7748fc38d2:   xor    %ecx,%esi
  0x00007f7748fc38d4:   add    %esi,%eax
  0x00007f7748fc38d6:   rol    $0x6,%eax
  0x00007f7748fc38d9:   add    %ebx,%eax
  0x00007f7748fc38db:   add    $0x432aff97,%edx
  0x00007f7748fc38e1:   mov    %ecx,%esi
  0x00007f7748fc38e3:   not    %esi
  0x00007f7748fc38e5:   add    0x1c(%r15),%edx
  0x00007f7748fc38e9:   or     %eax,%esi
  0x00007f7748fc38eb:   xor    %ebx,%esi
  0x00007f7748fc38ed:   add    %esi,%edx
  0x00007f7748fc38ef:   rol    $0xa,%edx
  0x00007f7748fc38f2:   add    %eax,%edx
  0x00007f7748fc38f4:   add    $0xab9423a7,%ecx
  0x00007f7748fc38fa:   mov    %ebx,%esi
  0x00007f7748fc38fc:   not    %esi
  0x00007f7748fc38fe:   add    0x38(%r15),%ecx
  0x00007f7748fc3902:   or     %edx,%esi
  0x00007f7748fc3904:   xor    %eax,%esi
  0x00007f7748fc3906:   add    %esi,%ecx
  0x00007f7748fc3908:   rol    $0xf,%ecx
  0x00007f7748fc390b:   add    %edx,%ecx
  0x00007f7748fc390d:   add    $0xfc93a039,%ebx
  0x00007f7748fc3913:   mov    %eax,%esi
  0x00007f7748fc3915:   not    %esi
  0x00007f7748fc3917:   add    0x14(%r15),%ebx
  0x00007f7748fc391b:   or     %ecx,%esi
  0x00007f7748fc391d:   xor    %edx,%esi
  0x00007f7748fc391f:   add    %esi,%ebx
  0x00007f7748fc3921:   rol    $0x15,%ebx
  0x00007f7748fc3924:   add    %ecx,%ebx
  0x00007f7748fc3926:   add    $0x655b59c3,%eax
  0x00007f7748fc392b:   mov    %edx,%esi
  0x00007f7748fc392d:   not    %esi
  0x00007f7748fc392f:   add    0x30(%r15),%eax
  0x00007f7748fc3933:   or     %ebx,%esi
  0x00007f7748fc3935:   xor    %ecx,%esi
  0x00007f7748fc3937:   add    %esi,%eax
  0x00007f7748fc3939:   rol    $0x6,%eax
  0x00007f7748fc393c:   add    %ebx,%eax
  0x00007f7748fc393e:   add    $0x8f0ccc92,%edx
  0x00007f7748fc3944:   mov    %ecx,%esi
  0x00007f7748fc3946:   not    %esi
  0x00007f7748fc3948:   add    0xc(%r15),%edx
  0x00007f7748fc394c:   or     %eax,%esi
  0x00007f7748fc394e:   xor    %ebx,%esi
  0x00007f7748fc3950:   add    %esi,%edx
  0x00007f7748fc3952:   rol    $0xa,%edx
  0x00007f7748fc3955:   add    %eax,%edx
  0x00007f7748fc3957:   add    $0xffeff47d,%ecx
  0x00007f7748fc395d:   mov    %ebx,%esi
  0x00007f7748fc395f:   not    %esi
  0x00007f7748fc3961:   add    0x28(%r15),%ecx
  0x00007f7748fc3965:   or     %edx,%esi
  0x00007f7748fc3967:   xor    %eax,%esi
  0x00007f7748fc3969:   add    %esi,%ecx
  0x00007f7748fc396b:   rol    $0xf,%ecx
  0x00007f7748fc396e:   add    %edx,%ecx
  0x00007f7748fc3970:   add    $0x85845dd1,%ebx
  0x00007f7748fc3976:   mov    %eax,%esi
  0x00007f7748fc3978:   not    %esi
  0x00007f7748fc397a:   add    0x4(%r15),%ebx
  0x00007f7748fc397e:   or     %ecx,%esi
  0x00007f7748fc3980:   xor    %edx,%esi
  0x00007f7748fc3982:   add    %esi,%ebx
  0x00007f7748fc3984:   rol    $0x15,%ebx
  0x00007f7748fc3987:   add    %ecx,%ebx
  0x00007f7748fc3989:   add    $0x6fa87e4f,%eax
  0x00007f7748fc398e:   mov    %edx,%esi
  0x00007f7748fc3990:   not    %esi
  0x00007f7748fc3992:   add    0x20(%r15),%eax
  0x00007f7748fc3996:   or     %ebx,%esi
  0x00007f7748fc3998:   xor    %ecx,%esi
  0x00007f7748fc399a:   add    %esi,%eax
  0x00007f7748fc399c:   rol    $0x6,%eax
  0x00007f7748fc399f:   add    %ebx,%eax
  0x00007f7748fc39a1:   add    $0xfe2ce6e0,%edx
  0x00007f7748fc39a7:   mov    %ecx,%esi
  0x00007f7748fc39a9:   not    %esi
  0x00007f7748fc39ab:   add    0x3c(%r15),%edx
  0x00007f7748fc39af:   or     %eax,%esi
  0x00007f7748fc39b1:   xor    %ebx,%esi
  0x00007f7748fc39b3:   add    %esi,%edx
  0x00007f7748fc39b5:   rol    $0xa,%edx
  0x00007f7748fc39b8:   add    %eax,%edx
  0x00007f7748fc39ba:   add    $0xa3014314,%ecx
  0x00007f7748fc39c0:   mov    %ebx,%esi
  0x00007f7748fc39c2:   not    %esi
  0x00007f7748fc39c4:   add    0x18(%r15),%ecx
  0x00007f7748fc39c8:   or     %edx,%esi
  0x00007f7748fc39ca:   xor    %eax,%esi
  0x00007f7748fc39cc:   add    %esi,%ecx
  0x00007f7748fc39ce:   rol    $0xf,%ecx
  0x00007f7748fc39d1:   add    %edx,%ecx
  0x00007f7748fc39d3:   add    $0x4e0811a1,%ebx
  0x00007f7748fc39d9:   mov    %eax,%esi
  0x00007f7748fc39db:   not    %esi
  0x00007f7748fc39dd:   add    0x34(%r15),%ebx
  0x00007f7748fc39e1:   or     %ecx,%esi
  0x00007f7748fc39e3:   xor    %edx,%esi
  0x00007f7748fc39e5:   add    %esi,%ebx
  0x00007f7748fc39e7:   rol    $0x15,%ebx
  0x00007f7748fc39ea:   add    %ecx,%ebx
  0x00007f7748fc39ec:   add    $0xf7537e82,%eax
  0x00007f7748fc39f1:   mov    %edx,%esi
  0x00007f7748fc39f3:   not    %esi
  0x00007f7748fc39f5:   add    0x10(%r15),%eax
  0x00007f7748fc39f9:   or     %ebx,%esi
  0x00007f7748fc39fb:   xor    %ecx,%esi
  0x00007f7748fc39fd:   add    %esi,%eax
  0x00007f7748fc39ff:   rol    $0x6,%eax
  0x00007f7748fc3a02:   add    %ebx,%eax
  0x00007f7748fc3a04:   add    $0xbd3af235,%edx
  0x00007f7748fc3a0a:   mov    %ecx,%esi
  0x00007f7748fc3a0c:   not    %esi
  0x00007f7748fc3a0e:   add    0x2c(%r15),%edx
  0x00007f7748fc3a12:   or     %eax,%esi
  0x00007f7748fc3a14:   xor    %ebx,%esi
  0x00007f7748fc3a16:   add    %esi,%edx
  0x00007f7748fc3a18:   rol    $0xa,%edx
  0x00007f7748fc3a1b:   add    %eax,%edx
  0x00007f7748fc3a1d:   add    $0x2ad7d2bb,%ecx
  0x00007f7748fc3a23:   mov    %ebx,%esi
  0x00007f7748fc3a25:   not    %esi
  0x00007f7748fc3a27:   add    0x8(%r15),%ecx
  0x00007f7748fc3a2b:   or     %edx,%esi
  0x00007f7748fc3a2d:   xor    %eax,%esi
  0x00007f7748fc3a2f:   add    %esi,%ecx
  0x00007f7748fc3a31:   rol    $0xf,%ecx
  0x00007f7748fc3a34:   add    %edx,%ecx
  0x00007f7748fc3a36:   add    $0xeb86d391,%ebx
  0x00007f7748fc3a3c:   mov    %eax,%esi
  0x00007f7748fc3a3e:   not    %esi
  0x00007f7748fc3a40:   add    0x24(%r15),%ebx
  0x00007f7748fc3a44:   or     %ecx,%esi
  0x00007f7748fc3a46:   xor    %edx,%esi
  0x00007f7748fc3a48:   add    %esi,%ebx
  0x00007f7748fc3a4a:   rol    $0x15,%ebx
  0x00007f7748fc3a4d:   add    %ecx,%ebx
  0x00007f7748fc3a4f:   mov    (%rsp),%rdi
  0x00007f7748fc3a53:   add    %eax,(%rdi)
  0x00007f7748fc3a55:   add    %ebx,0x4(%rdi)
  0x00007f7748fc3a58:   add    %ecx,0x8(%rdi)
  0x00007f7748fc3a5b:   add    %edx,0xc(%rdi)
  0x00007f7748fc3a5e:   add    $0x10,%rsp
  0x00007f7748fc3a62:   pop    %r15
  0x00007f7748fc3a64:   pop    %rsi
  0x00007f7748fc3a65:   pop    %rdi
  0x00007f7748fc3a66:   pop    %rbx
  0x00007f7748fc3a67:   leaveq 
  0x00007f7748fc3a68:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::md5_implCompressMB [0x00007f7748fc3a80, 0x00007f7748fc412b] (1707 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc3a80:   push   %rbp
  0x00007f7748fc3a81:   mov    %rsp,%rbp
  0x00007f7748fc3a84:   push   %rbx
  0x00007f7748fc3a85:   push   %rdi
  0x00007f7748fc3a86:   push   %rsi
  0x00007f7748fc3a87:   push   %r15
  0x00007f7748fc3a89:   sub    $0x10,%rsp
  0x00007f7748fc3a8d:   mov    %rdi,%r15
  0x00007f7748fc3a90:   mov    %rsi,(%rsp)
  0x00007f7748fc3a94:   mov    %edx,0x8(%rsp)
  0x00007f7748fc3a98:   mov    %ecx,0xc(%rsp)
  0x00007f7748fc3a9c:   mov    (%rsp),%rdi
  0x00007f7748fc3aa0:   mov    (%rdi),%eax
  0x00007f7748fc3aa2:   mov    0x4(%rdi),%ebx
  0x00007f7748fc3aa5:   mov    0x8(%rdi),%ecx
  0x00007f7748fc3aa8:   mov    0xc(%rdi),%edx
  0x00007f7748fc3aab:   add    $0xd76aa478,%eax
  0x00007f7748fc3ab0:   mov    %ecx,%esi
  0x00007f7748fc3ab2:   add    (%r15),%eax
  0x00007f7748fc3ab5:   xor    %edx,%esi
  0x00007f7748fc3ab7:   and    %ebx,%esi
  0x00007f7748fc3ab9:   xor    %edx,%esi
  0x00007f7748fc3abb:   add    %esi,%eax
  0x00007f7748fc3abd:   rol    $0x7,%eax
  0x00007f7748fc3ac0:   add    %ebx,%eax
  0x00007f7748fc3ac2:   add    $0xe8c7b756,%edx
  0x00007f7748fc3ac8:   mov    %ebx,%esi
  0x00007f7748fc3aca:   add    0x4(%r15),%edx
  0x00007f7748fc3ace:   xor    %ecx,%esi
  0x00007f7748fc3ad0:   and    %eax,%esi
  0x00007f7748fc3ad2:   xor    %ecx,%esi
  0x00007f7748fc3ad4:   add    %esi,%edx
  0x00007f7748fc3ad6:   rol    $0xc,%edx
  0x00007f7748fc3ad9:   add    %eax,%edx
  0x00007f7748fc3adb:   add    $0x242070db,%ecx
  0x00007f7748fc3ae1:   mov    %eax,%esi
  0x00007f7748fc3ae3:   add    0x8(%r15),%ecx
  0x00007f7748fc3ae7:   xor    %ebx,%esi
  0x00007f7748fc3ae9:   and    %edx,%esi
  0x00007f7748fc3aeb:   xor    %ebx,%esi
  0x00007f7748fc3aed:   add    %esi,%ecx
  0x00007f7748fc3aef:   rol    $0x11,%ecx
  0x00007f7748fc3af2:   add    %edx,%ecx
  0x00007f7748fc3af4:   add    $0xc1bdceee,%ebx
  0x00007f7748fc3afa:   mov    %edx,%esi
  0x00007f7748fc3afc:   add    0xc(%r15),%ebx
  0x00007f7748fc3b00:   xor    %eax,%esi
  0x00007f7748fc3b02:   and    %ecx,%esi
  0x00007f7748fc3b04:   xor    %eax,%esi
  0x00007f7748fc3b06:   add    %esi,%ebx
  0x00007f7748fc3b08:   rol    $0x16,%ebx
  0x00007f7748fc3b0b:   add    %ecx,%ebx
  0x00007f7748fc3b0d:   add    $0xf57c0faf,%eax
  0x00007f7748fc3b12:   mov    %ecx,%esi
  0x00007f7748fc3b14:   add    0x10(%r15),%eax
  0x00007f7748fc3b18:   xor    %edx,%esi
  0x00007f7748fc3b1a:   and    %ebx,%esi
  0x00007f7748fc3b1c:   xor    %edx,%esi
  0x00007f7748fc3b1e:   add    %esi,%eax
  0x00007f7748fc3b20:   rol    $0x7,%eax
  0x00007f7748fc3b23:   add    %ebx,%eax
  0x00007f7748fc3b25:   add    $0x4787c62a,%edx
  0x00007f7748fc3b2b:   mov    %ebx,%esi
  0x00007f7748fc3b2d:   add    0x14(%r15),%edx
  0x00007f7748fc3b31:   xor    %ecx,%esi
  0x00007f7748fc3b33:   and    %eax,%esi
  0x00007f7748fc3b35:   xor    %ecx,%esi
  0x00007f7748fc3b37:   add    %esi,%edx
  0x00007f7748fc3b39:   rol    $0xc,%edx
  0x00007f7748fc3b3c:   add    %eax,%edx
  0x00007f7748fc3b3e:   add    $0xa8304613,%ecx
  0x00007f7748fc3b44:   mov    %eax,%esi
  0x00007f7748fc3b46:   add    0x18(%r15),%ecx
  0x00007f7748fc3b4a:   xor    %ebx,%esi
  0x00007f7748fc3b4c:   and    %edx,%esi
  0x00007f7748fc3b4e:   xor    %ebx,%esi
  0x00007f7748fc3b50:   add    %esi,%ecx
  0x00007f7748fc3b52:   rol    $0x11,%ecx
  0x00007f7748fc3b55:   add    %edx,%ecx
  0x00007f7748fc3b57:   add    $0xfd469501,%ebx
  0x00007f7748fc3b5d:   mov    %edx,%esi
  0x00007f7748fc3b5f:   add    0x1c(%r15),%ebx
  0x00007f7748fc3b63:   xor    %eax,%esi
  0x00007f7748fc3b65:   and    %ecx,%esi
  0x00007f7748fc3b67:   xor    %eax,%esi
  0x00007f7748fc3b69:   add    %esi,%ebx
  0x00007f7748fc3b6b:   rol    $0x16,%ebx
  0x00007f7748fc3b6e:   add    %ecx,%ebx
  0x00007f7748fc3b70:   add    $0x698098d8,%eax
  0x00007f7748fc3b75:   mov    %ecx,%esi
  0x00007f7748fc3b77:   add    0x20(%r15),%eax
  0x00007f7748fc3b7b:   xor    %edx,%esi
  0x00007f7748fc3b7d:   and    %ebx,%esi
  0x00007f7748fc3b7f:   xor    %edx,%esi
  0x00007f7748fc3b81:   add    %esi,%eax
  0x00007f7748fc3b83:   rol    $0x7,%eax
  0x00007f7748fc3b86:   add    %ebx,%eax
  0x00007f7748fc3b88:   add    $0x8b44f7af,%edx
  0x00007f7748fc3b8e:   mov    %ebx,%esi
  0x00007f7748fc3b90:   add    0x24(%r15),%edx
  0x00007f7748fc3b94:   xor    %ecx,%esi
  0x00007f7748fc3b96:   and    %eax,%esi
  0x00007f7748fc3b98:   xor    %ecx,%esi
  0x00007f7748fc3b9a:   add    %esi,%edx
  0x00007f7748fc3b9c:   rol    $0xc,%edx
  0x00007f7748fc3b9f:   add    %eax,%edx
  0x00007f7748fc3ba1:   add    $0xffff5bb1,%ecx
  0x00007f7748fc3ba7:   mov    %eax,%esi
  0x00007f7748fc3ba9:   add    0x28(%r15),%ecx
  0x00007f7748fc3bad:   xor    %ebx,%esi
  0x00007f7748fc3baf:   and    %edx,%esi
  0x00007f7748fc3bb1:   xor    %ebx,%esi
  0x00007f7748fc3bb3:   add    %esi,%ecx
  0x00007f7748fc3bb5:   rol    $0x11,%ecx
  0x00007f7748fc3bb8:   add    %edx,%ecx
  0x00007f7748fc3bba:   add    $0x895cd7be,%ebx
  0x00007f7748fc3bc0:   mov    %edx,%esi
  0x00007f7748fc3bc2:   add    0x2c(%r15),%ebx
  0x00007f7748fc3bc6:   xor    %eax,%esi
  0x00007f7748fc3bc8:   and    %ecx,%esi
  0x00007f7748fc3bca:   xor    %eax,%esi
  0x00007f7748fc3bcc:   add    %esi,%ebx
  0x00007f7748fc3bce:   rol    $0x16,%ebx
  0x00007f7748fc3bd1:   add    %ecx,%ebx
  0x00007f7748fc3bd3:   add    $0x6b901122,%eax
  0x00007f7748fc3bd8:   mov    %ecx,%esi
  0x00007f7748fc3bda:   add    0x30(%r15),%eax
  0x00007f7748fc3bde:   xor    %edx,%esi
  0x00007f7748fc3be0:   and    %ebx,%esi
  0x00007f7748fc3be2:   xor    %edx,%esi
  0x00007f7748fc3be4:   add    %esi,%eax
  0x00007f7748fc3be6:   rol    $0x7,%eax
  0x00007f7748fc3be9:   add    %ebx,%eax
  0x00007f7748fc3beb:   add    $0xfd987193,%edx
  0x00007f7748fc3bf1:   mov    %ebx,%esi
  0x00007f7748fc3bf3:   add    0x34(%r15),%edx
  0x00007f7748fc3bf7:   xor    %ecx,%esi
  0x00007f7748fc3bf9:   and    %eax,%esi
  0x00007f7748fc3bfb:   xor    %ecx,%esi
  0x00007f7748fc3bfd:   add    %esi,%edx
  0x00007f7748fc3bff:   rol    $0xc,%edx
  0x00007f7748fc3c02:   add    %eax,%edx
  0x00007f7748fc3c04:   add    $0xa679438e,%ecx
  0x00007f7748fc3c0a:   mov    %eax,%esi
  0x00007f7748fc3c0c:   add    0x38(%r15),%ecx
  0x00007f7748fc3c10:   xor    %ebx,%esi
  0x00007f7748fc3c12:   and    %edx,%esi
  0x00007f7748fc3c14:   xor    %ebx,%esi
  0x00007f7748fc3c16:   add    %esi,%ecx
  0x00007f7748fc3c18:   rol    $0x11,%ecx
  0x00007f7748fc3c1b:   add    %edx,%ecx
  0x00007f7748fc3c1d:   add    $0x49b40821,%ebx
  0x00007f7748fc3c23:   mov    %edx,%esi
  0x00007f7748fc3c25:   add    0x3c(%r15),%ebx
  0x00007f7748fc3c29:   xor    %eax,%esi
  0x00007f7748fc3c2b:   and    %ecx,%esi
  0x00007f7748fc3c2d:   xor    %eax,%esi
  0x00007f7748fc3c2f:   add    %esi,%ebx
  0x00007f7748fc3c31:   rol    $0x16,%ebx
  0x00007f7748fc3c34:   add    %ecx,%ebx
  0x00007f7748fc3c36:   add    $0xf61e2562,%eax
  0x00007f7748fc3c3b:   mov    %edx,%esi
  0x00007f7748fc3c3d:   mov    %edx,%edi
  0x00007f7748fc3c3f:   add    0x4(%r15),%eax
  0x00007f7748fc3c43:   not    %esi
  0x00007f7748fc3c45:   and    %ebx,%edi
  0x00007f7748fc3c47:   and    %ecx,%esi
  0x00007f7748fc3c49:   or     %edi,%esi
  0x00007f7748fc3c4b:   add    %esi,%eax
  0x00007f7748fc3c4d:   rol    $0x5,%eax
  0x00007f7748fc3c50:   add    %ebx,%eax
  0x00007f7748fc3c52:   add    $0xc040b340,%edx
  0x00007f7748fc3c58:   mov    %ecx,%esi
  0x00007f7748fc3c5a:   mov    %ecx,%edi
  0x00007f7748fc3c5c:   add    0x18(%r15),%edx
  0x00007f7748fc3c60:   not    %esi
  0x00007f7748fc3c62:   and    %eax,%edi
  0x00007f7748fc3c64:   and    %ebx,%esi
  0x00007f7748fc3c66:   or     %edi,%esi
  0x00007f7748fc3c68:   add    %esi,%edx
  0x00007f7748fc3c6a:   rol    $0x9,%edx
  0x00007f7748fc3c6d:   add    %eax,%edx
  0x00007f7748fc3c6f:   add    $0x265e5a51,%ecx
  0x00007f7748fc3c75:   mov    %ebx,%esi
  0x00007f7748fc3c77:   mov    %ebx,%edi
  0x00007f7748fc3c79:   add    0x2c(%r15),%ecx
  0x00007f7748fc3c7d:   not    %esi
  0x00007f7748fc3c7f:   and    %edx,%edi
  0x00007f7748fc3c81:   and    %eax,%esi
  0x00007f7748fc3c83:   or     %edi,%esi
  0x00007f7748fc3c85:   add    %esi,%ecx
  0x00007f7748fc3c87:   rol    $0xe,%ecx
  0x00007f7748fc3c8a:   add    %edx,%ecx
  0x00007f7748fc3c8c:   add    $0xe9b6c7aa,%ebx
  0x00007f7748fc3c92:   mov    %eax,%esi
  0x00007f7748fc3c94:   mov    %eax,%edi
  0x00007f7748fc3c96:   add    (%r15),%ebx
  0x00007f7748fc3c99:   not    %esi
  0x00007f7748fc3c9b:   and    %ecx,%edi
  0x00007f7748fc3c9d:   and    %edx,%esi
  0x00007f7748fc3c9f:   or     %edi,%esi
  0x00007f7748fc3ca1:   add    %esi,%ebx
  0x00007f7748fc3ca3:   rol    $0x14,%ebx
  0x00007f7748fc3ca6:   add    %ecx,%ebx
  0x00007f7748fc3ca8:   add    $0xd62f105d,%eax
  0x00007f7748fc3cad:   mov    %edx,%esi
  0x00007f7748fc3caf:   mov    %edx,%edi
  0x00007f7748fc3cb1:   add    0x14(%r15),%eax
  0x00007f7748fc3cb5:   not    %esi
  0x00007f7748fc3cb7:   and    %ebx,%edi
  0x00007f7748fc3cb9:   and    %ecx,%esi
  0x00007f7748fc3cbb:   or     %edi,%esi
  0x00007f7748fc3cbd:   add    %esi,%eax
  0x00007f7748fc3cbf:   rol    $0x5,%eax
  0x00007f7748fc3cc2:   add    %ebx,%eax
  0x00007f7748fc3cc4:   add    $0x2441453,%edx
  0x00007f7748fc3cca:   mov    %ecx,%esi
  0x00007f7748fc3ccc:   mov    %ecx,%edi
  0x00007f7748fc3cce:   add    0x28(%r15),%edx
  0x00007f7748fc3cd2:   not    %esi
  0x00007f7748fc3cd4:   and    %eax,%edi
  0x00007f7748fc3cd6:   and    %ebx,%esi
  0x00007f7748fc3cd8:   or     %edi,%esi
  0x00007f7748fc3cda:   add    %esi,%edx
  0x00007f7748fc3cdc:   rol    $0x9,%edx
  0x00007f7748fc3cdf:   add    %eax,%edx
  0x00007f7748fc3ce1:   add    $0xd8a1e681,%ecx
  0x00007f7748fc3ce7:   mov    %ebx,%esi
  0x00007f7748fc3ce9:   mov    %ebx,%edi
  0x00007f7748fc3ceb:   add    0x3c(%r15),%ecx
  0x00007f7748fc3cef:   not    %esi
  0x00007f7748fc3cf1:   and    %edx,%edi
  0x00007f7748fc3cf3:   and    %eax,%esi
  0x00007f7748fc3cf5:   or     %edi,%esi
  0x00007f7748fc3cf7:   add    %esi,%ecx
  0x00007f7748fc3cf9:   rol    $0xe,%ecx
  0x00007f7748fc3cfc:   add    %edx,%ecx
  0x00007f7748fc3cfe:   add    $0xe7d3fbc8,%ebx
  0x00007f7748fc3d04:   mov    %eax,%esi
  0x00007f7748fc3d06:   mov    %eax,%edi
  0x00007f7748fc3d08:   add    0x10(%r15),%ebx
  0x00007f7748fc3d0c:   not    %esi
  0x00007f7748fc3d0e:   and    %ecx,%edi
  0x00007f7748fc3d10:   and    %edx,%esi
  0x00007f7748fc3d12:   or     %edi,%esi
  0x00007f7748fc3d14:   add    %esi,%ebx
  0x00007f7748fc3d16:   rol    $0x14,%ebx
  0x00007f7748fc3d19:   add    %ecx,%ebx
  0x00007f7748fc3d1b:   add    $0x21e1cde6,%eax
  0x00007f7748fc3d20:   mov    %edx,%esi
  0x00007f7748fc3d22:   mov    %edx,%edi
  0x00007f7748fc3d24:   add    0x24(%r15),%eax
  0x00007f7748fc3d28:   not    %esi
  0x00007f7748fc3d2a:   and    %ebx,%edi
  0x00007f7748fc3d2c:   and    %ecx,%esi
  0x00007f7748fc3d2e:   or     %edi,%esi
  0x00007f7748fc3d30:   add    %esi,%eax
  0x00007f7748fc3d32:   rol    $0x5,%eax
  0x00007f7748fc3d35:   add    %ebx,%eax
  0x00007f7748fc3d37:   add    $0xc33707d6,%edx
  0x00007f7748fc3d3d:   mov    %ecx,%esi
  0x00007f7748fc3d3f:   mov    %ecx,%edi
  0x00007f7748fc3d41:   add    0x38(%r15),%edx
  0x00007f7748fc3d45:   not    %esi
  0x00007f7748fc3d47:   and    %eax,%edi
  0x00007f7748fc3d49:   and    %ebx,%esi
  0x00007f7748fc3d4b:   or     %edi,%esi
  0x00007f7748fc3d4d:   add    %esi,%edx
  0x00007f7748fc3d4f:   rol    $0x9,%edx
  0x00007f7748fc3d52:   add    %eax,%edx
  0x00007f7748fc3d54:   add    $0xf4d50d87,%ecx
  0x00007f7748fc3d5a:   mov    %ebx,%esi
  0x00007f7748fc3d5c:   mov    %ebx,%edi
  0x00007f7748fc3d5e:   add    0xc(%r15),%ecx
  0x00007f7748fc3d62:   not    %esi
  0x00007f7748fc3d64:   and    %edx,%edi
  0x00007f7748fc3d66:   and    %eax,%esi
  0x00007f7748fc3d68:   or     %edi,%esi
  0x00007f7748fc3d6a:   add    %esi,%ecx
  0x00007f7748fc3d6c:   rol    $0xe,%ecx
  0x00007f7748fc3d6f:   add    %edx,%ecx
  0x00007f7748fc3d71:   add    $0x455a14ed,%ebx
  0x00007f7748fc3d77:   mov    %eax,%esi
  0x00007f7748fc3d79:   mov    %eax,%edi
  0x00007f7748fc3d7b:   add    0x20(%r15),%ebx
  0x00007f7748fc3d7f:   not    %esi
  0x00007f7748fc3d81:   and    %ecx,%edi
  0x00007f7748fc3d83:   and    %edx,%esi
  0x00007f7748fc3d85:   or     %edi,%esi
  0x00007f7748fc3d87:   add    %esi,%ebx
  0x00007f7748fc3d89:   rol    $0x14,%ebx
  0x00007f7748fc3d8c:   add    %ecx,%ebx
  0x00007f7748fc3d8e:   add    $0xa9e3e905,%eax
  0x00007f7748fc3d93:   mov    %edx,%esi
  0x00007f7748fc3d95:   mov    %edx,%edi
  0x00007f7748fc3d97:   add    0x34(%r15),%eax
  0x00007f7748fc3d9b:   not    %esi
  0x00007f7748fc3d9d:   and    %ebx,%edi
  0x00007f7748fc3d9f:   and    %ecx,%esi
  0x00007f7748fc3da1:   or     %edi,%esi
  0x00007f7748fc3da3:   add    %esi,%eax
  0x00007f7748fc3da5:   rol    $0x5,%eax
  0x00007f7748fc3da8:   add    %ebx,%eax
  0x00007f7748fc3daa:   add    $0xfcefa3f8,%edx
  0x00007f7748fc3db0:   mov    %ecx,%esi
  0x00007f7748fc3db2:   mov    %ecx,%edi
  0x00007f7748fc3db4:   add    0x8(%r15),%edx
  0x00007f7748fc3db8:   not    %esi
  0x00007f7748fc3dba:   and    %eax,%edi
  0x00007f7748fc3dbc:   and    %ebx,%esi
  0x00007f7748fc3dbe:   or     %edi,%esi
  0x00007f7748fc3dc0:   add    %esi,%edx
  0x00007f7748fc3dc2:   rol    $0x9,%edx
  0x00007f7748fc3dc5:   add    %eax,%edx
  0x00007f7748fc3dc7:   add    $0x676f02d9,%ecx
  0x00007f7748fc3dcd:   mov    %ebx,%esi
  0x00007f7748fc3dcf:   mov    %ebx,%edi
  0x00007f7748fc3dd1:   add    0x1c(%r15),%ecx
  0x00007f7748fc3dd5:   not    %esi
  0x00007f7748fc3dd7:   and    %edx,%edi
  0x00007f7748fc3dd9:   and    %eax,%esi
  0x00007f7748fc3ddb:   or     %edi,%esi
  0x00007f7748fc3ddd:   add    %esi,%ecx
  0x00007f7748fc3ddf:   rol    $0xe,%ecx
  0x00007f7748fc3de2:   add    %edx,%ecx
  0x00007f7748fc3de4:   add    $0x8d2a4c8a,%ebx
  0x00007f7748fc3dea:   mov    %eax,%esi
  0x00007f7748fc3dec:   mov    %eax,%edi
  0x00007f7748fc3dee:   add    0x30(%r15),%ebx
  0x00007f7748fc3df2:   not    %esi
  0x00007f7748fc3df4:   and    %ecx,%edi
  0x00007f7748fc3df6:   and    %edx,%esi
  0x00007f7748fc3df8:   or     %edi,%esi
  0x00007f7748fc3dfa:   add    %esi,%ebx
  0x00007f7748fc3dfc:   rol    $0x14,%ebx
  0x00007f7748fc3dff:   add    %ecx,%ebx
  0x00007f7748fc3e01:   add    $0xfffa3942,%eax
  0x00007f7748fc3e06:   mov    %ecx,%esi
  0x00007f7748fc3e08:   add    0x14(%r15),%eax
  0x00007f7748fc3e0c:   xor    %edx,%esi
  0x00007f7748fc3e0e:   xor    %ebx,%esi
  0x00007f7748fc3e10:   add    %esi,%eax
  0x00007f7748fc3e12:   rol    $0x4,%eax
  0x00007f7748fc3e15:   add    %ebx,%eax
  0x00007f7748fc3e17:   add    $0x8771f681,%edx
  0x00007f7748fc3e1d:   mov    %ebx,%esi
  0x00007f7748fc3e1f:   add    0x20(%r15),%edx
  0x00007f7748fc3e23:   xor    %ecx,%esi
  0x00007f7748fc3e25:   xor    %eax,%esi
  0x00007f7748fc3e27:   add    %esi,%edx
  0x00007f7748fc3e29:   rol    $0xb,%edx
  0x00007f7748fc3e2c:   add    %eax,%edx
  0x00007f7748fc3e2e:   add    $0x6d9d6122,%ecx
  0x00007f7748fc3e34:   mov    %eax,%esi
  0x00007f7748fc3e36:   add    0x2c(%r15),%ecx
  0x00007f7748fc3e3a:   xor    %ebx,%esi
  0x00007f7748fc3e3c:   xor    %edx,%esi
  0x00007f7748fc3e3e:   add    %esi,%ecx
  0x00007f7748fc3e40:   rol    $0x10,%ecx
  0x00007f7748fc3e43:   add    %edx,%ecx
  0x00007f7748fc3e45:   add    $0xfde5380c,%ebx
  0x00007f7748fc3e4b:   mov    %edx,%esi
  0x00007f7748fc3e4d:   add    0x38(%r15),%ebx
  0x00007f7748fc3e51:   xor    %eax,%esi
  0x00007f7748fc3e53:   xor    %ecx,%esi
  0x00007f7748fc3e55:   add    %esi,%ebx
  0x00007f7748fc3e57:   rol    $0x17,%ebx
  0x00007f7748fc3e5a:   add    %ecx,%ebx
  0x00007f7748fc3e5c:   add    $0xa4beea44,%eax
  0x00007f7748fc3e61:   mov    %ecx,%esi
  0x00007f7748fc3e63:   add    0x4(%r15),%eax
  0x00007f7748fc3e67:   xor    %edx,%esi
  0x00007f7748fc3e69:   xor    %ebx,%esi
  0x00007f7748fc3e6b:   add    %esi,%eax
  0x00007f7748fc3e6d:   rol    $0x4,%eax
  0x00007f7748fc3e70:   add    %ebx,%eax
  0x00007f7748fc3e72:   add    $0x4bdecfa9,%edx
  0x00007f7748fc3e78:   mov    %ebx,%esi
  0x00007f7748fc3e7a:   add    0x10(%r15),%edx
  0x00007f7748fc3e7e:   xor    %ecx,%esi
  0x00007f7748fc3e80:   xor    %eax,%esi
  0x00007f7748fc3e82:   add    %esi,%edx
  0x00007f7748fc3e84:   rol    $0xb,%edx
  0x00007f7748fc3e87:   add    %eax,%edx
  0x00007f7748fc3e89:   add    $0xf6bb4b60,%ecx
  0x00007f7748fc3e8f:   mov    %eax,%esi
  0x00007f7748fc3e91:   add    0x1c(%r15),%ecx
  0x00007f7748fc3e95:   xor    %ebx,%esi
  0x00007f7748fc3e97:   xor    %edx,%esi
  0x00007f7748fc3e99:   add    %esi,%ecx
  0x00007f7748fc3e9b:   rol    $0x10,%ecx
  0x00007f7748fc3e9e:   add    %edx,%ecx
  0x00007f7748fc3ea0:   add    $0xbebfbc70,%ebx
  0x00007f7748fc3ea6:   mov    %edx,%esi
  0x00007f7748fc3ea8:   add    0x28(%r15),%ebx
  0x00007f7748fc3eac:   xor    %eax,%esi
  0x00007f7748fc3eae:   xor    %ecx,%esi
  0x00007f7748fc3eb0:   add    %esi,%ebx
  0x00007f7748fc3eb2:   rol    $0x17,%ebx
  0x00007f7748fc3eb5:   add    %ecx,%ebx
  0x00007f7748fc3eb7:   add    $0x289b7ec6,%eax
  0x00007f7748fc3ebc:   mov    %ecx,%esi
  0x00007f7748fc3ebe:   add    0x34(%r15),%eax
  0x00007f7748fc3ec2:   xor    %edx,%esi
  0x00007f7748fc3ec4:   xor    %ebx,%esi
  0x00007f7748fc3ec6:   add    %esi,%eax
  0x00007f7748fc3ec8:   rol    $0x4,%eax
  0x00007f7748fc3ecb:   add    %ebx,%eax
  0x00007f7748fc3ecd:   add    $0xeaa127fa,%edx
  0x00007f7748fc3ed3:   mov    %ebx,%esi
  0x00007f7748fc3ed5:   add    (%r15),%edx
  0x00007f7748fc3ed8:   xor    %ecx,%esi
  0x00007f7748fc3eda:   xor    %eax,%esi
  0x00007f7748fc3edc:   add    %esi,%edx
  0x00007f7748fc3ede:   rol    $0xb,%edx
  0x00007f7748fc3ee1:   add    %eax,%edx
  0x00007f7748fc3ee3:   add    $0xd4ef3085,%ecx
  0x00007f7748fc3ee9:   mov    %eax,%esi
  0x00007f7748fc3eeb:   add    0xc(%r15),%ecx
  0x00007f7748fc3eef:   xor    %ebx,%esi
  0x00007f7748fc3ef1:   xor    %edx,%esi
  0x00007f7748fc3ef3:   add    %esi,%ecx
  0x00007f7748fc3ef5:   rol    $0x10,%ecx
  0x00007f7748fc3ef8:   add    %edx,%ecx
  0x00007f7748fc3efa:   add    $0x4881d05,%ebx
  0x00007f7748fc3f00:   mov    %edx,%esi
  0x00007f7748fc3f02:   add    0x18(%r15),%ebx
  0x00007f7748fc3f06:   xor    %eax,%esi
  0x00007f7748fc3f08:   xor    %ecx,%esi
  0x00007f7748fc3f0a:   add    %esi,%ebx
  0x00007f7748fc3f0c:   rol    $0x17,%ebx
  0x00007f7748fc3f0f:   add    %ecx,%ebx
  0x00007f7748fc3f11:   add    $0xd9d4d039,%eax
  0x00007f7748fc3f16:   mov    %ecx,%esi
  0x00007f7748fc3f18:   add    0x24(%r15),%eax
  0x00007f7748fc3f1c:   xor    %edx,%esi
  0x00007f7748fc3f1e:   xor    %ebx,%esi
  0x00007f7748fc3f20:   add    %esi,%eax
  0x00007f7748fc3f22:   rol    $0x4,%eax
  0x00007f7748fc3f25:   add    %ebx,%eax
  0x00007f7748fc3f27:   add    $0xe6db99e5,%edx
  0x00007f7748fc3f2d:   mov    %ebx,%esi
  0x00007f7748fc3f2f:   add    0x30(%r15),%edx
  0x00007f7748fc3f33:   xor    %ecx,%esi
  0x00007f7748fc3f35:   xor    %eax,%esi
  0x00007f7748fc3f37:   add    %esi,%edx
  0x00007f7748fc3f39:   rol    $0xb,%edx
  0x00007f7748fc3f3c:   add    %eax,%edx
  0x00007f7748fc3f3e:   add    $0x1fa27cf8,%ecx
  0x00007f7748fc3f44:   mov    %eax,%esi
  0x00007f7748fc3f46:   add    0x3c(%r15),%ecx
  0x00007f7748fc3f4a:   xor    %ebx,%esi
  0x00007f7748fc3f4c:   xor    %edx,%esi
  0x00007f7748fc3f4e:   add    %esi,%ecx
  0x00007f7748fc3f50:   rol    $0x10,%ecx
  0x00007f7748fc3f53:   add    %edx,%ecx
  0x00007f7748fc3f55:   add    $0xc4ac5665,%ebx
  0x00007f7748fc3f5b:   mov    %edx,%esi
  0x00007f7748fc3f5d:   add    0x8(%r15),%ebx
  0x00007f7748fc3f61:   xor    %eax,%esi
  0x00007f7748fc3f63:   xor    %ecx,%esi
  0x00007f7748fc3f65:   add    %esi,%ebx
  0x00007f7748fc3f67:   rol    $0x17,%ebx
  0x00007f7748fc3f6a:   add    %ecx,%ebx
  0x00007f7748fc3f6c:   add    $0xf4292244,%eax
  0x00007f7748fc3f71:   mov    %edx,%esi
  0x00007f7748fc3f73:   not    %esi
  0x00007f7748fc3f75:   add    (%r15),%eax
  0x00007f7748fc3f78:   or     %ebx,%esi
  0x00007f7748fc3f7a:   xor    %ecx,%esi
  0x00007f7748fc3f7c:   add    %esi,%eax
  0x00007f7748fc3f7e:   rol    $0x6,%eax
  0x00007f7748fc3f81:   add    %ebx,%eax
  0x00007f7748fc3f83:   add    $0x432aff97,%edx
  0x00007f7748fc3f89:   mov    %ecx,%esi
  0x00007f7748fc3f8b:   not    %esi
  0x00007f7748fc3f8d:   add    0x1c(%r15),%edx
  0x00007f7748fc3f91:   or     %eax,%esi
  0x00007f7748fc3f93:   xor    %ebx,%esi
  0x00007f7748fc3f95:   add    %esi,%edx
  0x00007f7748fc3f97:   rol    $0xa,%edx
  0x00007f7748fc3f9a:   add    %eax,%edx
  0x00007f7748fc3f9c:   add    $0xab9423a7,%ecx
  0x00007f7748fc3fa2:   mov    %ebx,%esi
  0x00007f7748fc3fa4:   not    %esi
  0x00007f7748fc3fa6:   add    0x38(%r15),%ecx
  0x00007f7748fc3faa:   or     %edx,%esi
  0x00007f7748fc3fac:   xor    %eax,%esi
  0x00007f7748fc3fae:   add    %esi,%ecx
  0x00007f7748fc3fb0:   rol    $0xf,%ecx
  0x00007f7748fc3fb3:   add    %edx,%ecx
  0x00007f7748fc3fb5:   add    $0xfc93a039,%ebx
  0x00007f7748fc3fbb:   mov    %eax,%esi
  0x00007f7748fc3fbd:   not    %esi
  0x00007f7748fc3fbf:   add    0x14(%r15),%ebx
  0x00007f7748fc3fc3:   or     %ecx,%esi
  0x00007f7748fc3fc5:   xor    %edx,%esi
  0x00007f7748fc3fc7:   add    %esi,%ebx
  0x00007f7748fc3fc9:   rol    $0x15,%ebx
  0x00007f7748fc3fcc:   add    %ecx,%ebx
  0x00007f7748fc3fce:   add    $0x655b59c3,%eax
  0x00007f7748fc3fd3:   mov    %edx,%esi
  0x00007f7748fc3fd5:   not    %esi
  0x00007f7748fc3fd7:   add    0x30(%r15),%eax
  0x00007f7748fc3fdb:   or     %ebx,%esi
  0x00007f7748fc3fdd:   xor    %ecx,%esi
  0x00007f7748fc3fdf:   add    %esi,%eax
  0x00007f7748fc3fe1:   rol    $0x6,%eax
  0x00007f7748fc3fe4:   add    %ebx,%eax
  0x00007f7748fc3fe6:   add    $0x8f0ccc92,%edx
  0x00007f7748fc3fec:   mov    %ecx,%esi
  0x00007f7748fc3fee:   not    %esi
  0x00007f7748fc3ff0:   add    0xc(%r15),%edx
  0x00007f7748fc3ff4:   or     %eax,%esi
  0x00007f7748fc3ff6:   xor    %ebx,%esi
  0x00007f7748fc3ff8:   add    %esi,%edx
  0x00007f7748fc3ffa:   rol    $0xa,%edx
  0x00007f7748fc3ffd:   add    %eax,%edx
  0x00007f7748fc3fff:   add    $0xffeff47d,%ecx
  0x00007f7748fc4005:   mov    %ebx,%esi
  0x00007f7748fc4007:   not    %esi
  0x00007f7748fc4009:   add    0x28(%r15),%ecx
  0x00007f7748fc400d:   or     %edx,%esi
  0x00007f7748fc400f:   xor    %eax,%esi
  0x00007f7748fc4011:   add    %esi,%ecx
  0x00007f7748fc4013:   rol    $0xf,%ecx
  0x00007f7748fc4016:   add    %edx,%ecx
  0x00007f7748fc4018:   add    $0x85845dd1,%ebx
  0x00007f7748fc401e:   mov    %eax,%esi
  0x00007f7748fc4020:   not    %esi
  0x00007f7748fc4022:   add    0x4(%r15),%ebx
  0x00007f7748fc4026:   or     %ecx,%esi
  0x00007f7748fc4028:   xor    %edx,%esi
  0x00007f7748fc402a:   add    %esi,%ebx
  0x00007f7748fc402c:   rol    $0x15,%ebx
  0x00007f7748fc402f:   add    %ecx,%ebx
  0x00007f7748fc4031:   add    $0x6fa87e4f,%eax
  0x00007f7748fc4036:   mov    %edx,%esi
  0x00007f7748fc4038:   not    %esi
  0x00007f7748fc403a:   add    0x20(%r15),%eax
  0x00007f7748fc403e:   or     %ebx,%esi
  0x00007f7748fc4040:   xor    %ecx,%esi
  0x00007f7748fc4042:   add    %esi,%eax
  0x00007f7748fc4044:   rol    $0x6,%eax
  0x00007f7748fc4047:   add    %ebx,%eax
  0x00007f7748fc4049:   add    $0xfe2ce6e0,%edx
  0x00007f7748fc404f:   mov    %ecx,%esi
  0x00007f7748fc4051:   not    %esi
  0x00007f7748fc4053:   add    0x3c(%r15),%edx
  0x00007f7748fc4057:   or     %eax,%esi
  0x00007f7748fc4059:   xor    %ebx,%esi
  0x00007f7748fc405b:   add    %esi,%edx
  0x00007f7748fc405d:   rol    $0xa,%edx
  0x00007f7748fc4060:   add    %eax,%edx
  0x00007f7748fc4062:   add    $0xa3014314,%ecx
  0x00007f7748fc4068:   mov    %ebx,%esi
  0x00007f7748fc406a:   not    %esi
  0x00007f7748fc406c:   add    0x18(%r15),%ecx
  0x00007f7748fc4070:   or     %edx,%esi
  0x00007f7748fc4072:   xor    %eax,%esi
  0x00007f7748fc4074:   add    %esi,%ecx
  0x00007f7748fc4076:   rol    $0xf,%ecx
  0x00007f7748fc4079:   add    %edx,%ecx
  0x00007f7748fc407b:   add    $0x4e0811a1,%ebx
  0x00007f7748fc4081:   mov    %eax,%esi
  0x00007f7748fc4083:   not    %esi
  0x00007f7748fc4085:   add    0x34(%r15),%ebx
  0x00007f7748fc4089:   or     %ecx,%esi
  0x00007f7748fc408b:   xor    %edx,%esi
  0x00007f7748fc408d:   add    %esi,%ebx
  0x00007f7748fc408f:   rol    $0x15,%ebx
  0x00007f7748fc4092:   add    %ecx,%ebx
  0x00007f7748fc4094:   add    $0xf7537e82,%eax
  0x00007f7748fc4099:   mov    %edx,%esi
  0x00007f7748fc409b:   not    %esi
  0x00007f7748fc409d:   add    0x10(%r15),%eax
  0x00007f7748fc40a1:   or     %ebx,%esi
  0x00007f7748fc40a3:   xor    %ecx,%esi
  0x00007f7748fc40a5:   add    %esi,%eax
  0x00007f7748fc40a7:   rol    $0x6,%eax
  0x00007f7748fc40aa:   add    %ebx,%eax
  0x00007f7748fc40ac:   add    $0xbd3af235,%edx
  0x00007f7748fc40b2:   mov    %ecx,%esi
  0x00007f7748fc40b4:   not    %esi
  0x00007f7748fc40b6:   add    0x2c(%r15),%edx
  0x00007f7748fc40ba:   or     %eax,%esi
  0x00007f7748fc40bc:   xor    %ebx,%esi
  0x00007f7748fc40be:   add    %esi,%edx
  0x00007f7748fc40c0:   rol    $0xa,%edx
  0x00007f7748fc40c3:   add    %eax,%edx
  0x00007f7748fc40c5:   add    $0x2ad7d2bb,%ecx
  0x00007f7748fc40cb:   mov    %ebx,%esi
  0x00007f7748fc40cd:   not    %esi
  0x00007f7748fc40cf:   add    0x8(%r15),%ecx
  0x00007f7748fc40d3:   or     %edx,%esi
  0x00007f7748fc40d5:   xor    %eax,%esi
  0x00007f7748fc40d7:   add    %esi,%ecx
  0x00007f7748fc40d9:   rol    $0xf,%ecx
  0x00007f7748fc40dc:   add    %edx,%ecx
  0x00007f7748fc40de:   add    $0xeb86d391,%ebx
  0x00007f7748fc40e4:   mov    %eax,%esi
  0x00007f7748fc40e6:   not    %esi
  0x00007f7748fc40e8:   add    0x24(%r15),%ebx
  0x00007f7748fc40ec:   or     %ecx,%esi
  0x00007f7748fc40ee:   xor    %edx,%esi
  0x00007f7748fc40f0:   add    %esi,%ebx
  0x00007f7748fc40f2:   rol    $0x15,%ebx
  0x00007f7748fc40f5:   add    %ecx,%ebx
  0x00007f7748fc40f7:   mov    (%rsp),%rdi
  0x00007f7748fc40fb:   add    %eax,(%rdi)
  0x00007f7748fc40fd:   add    %ebx,0x4(%rdi)
  0x00007f7748fc4100:   add    %ecx,0x8(%rdi)
  0x00007f7748fc4103:   add    %edx,0xc(%rdi)
  0x00007f7748fc4106:   add    $0x40,%r15
  0x00007f7748fc410a:   addl   $0x40,0x8(%rsp)
  0x00007f7748fc410f:   mov    0x8(%rsp),%esi
  0x00007f7748fc4113:   cmp    0xc(%rsp),%esi
  0x00007f7748fc4117:   jbe    Stub::md5_implCompressMB+28 0x00007f7748fc3a9c
  0x00007f7748fc411d:   mov    %rsi,%rax
  0x00007f7748fc4120:   add    $0x10,%rsp
  0x00007f7748fc4124:   pop    %r15
  0x00007f7748fc4126:   pop    %rsi
  0x00007f7748fc4127:   pop    %rdi
  0x00007f7748fc4128:   pop    %rbx
  0x00007f7748fc4129:   leaveq 
  0x00007f7748fc412a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::pshuffle_byte_flip_mask [0x00007f7748fc4140, 0x00007f7748fc41a0] (96 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc4140:   add    (%rdx),%eax
  0x00007f7748fc4142:   add    %eax,(%rax)
  0x00007f7748fc4144:   (bad)  
  0x00007f7748fc4145:   (bad)  
  0x00007f7748fc4146:   add    $0x90a0b04,%eax
  0x00007f7748fc414b:   or     %cl,(%rdi)
  0x00007f7748fc414d:   (bad)  
  0x00007f7748fc414e:   or     $0x102030c,%eax
  0x00007f7748fc4153:   add    %al,(%rdi)
  0x00007f7748fc4155:   (bad)  
  0x00007f7748fc4156:   add    $0x90a0b04,%eax
  0x00007f7748fc415b:   or     %cl,(%rdi)
  0x00007f7748fc415d:   (bad)  
  0x00007f7748fc415e:   or     $0x201000c,%eax
  0x00007f7748fc4163:   add    (%rax),%ecx
  0x00007f7748fc4165:   or     %ecx,(%rdx)
  0x00007f7748fc4167:   or     %edi,%edi
  0x00007f7748fc4169:   (bad)  
  0x00007f7748fc416a:   (bad)  
  0x00007f7748fc416b:   (bad)  
  0x00007f7748fc416c:   (bad)  
  0x00007f7748fc416d:   (bad)  
  0x00007f7748fc416e:   (bad)  
  0x00007f7748fc416f:   incl   (%rax)
  0x00007f7748fc4171:   add    %eax,(%rdx)
  0x00007f7748fc4173:   add    (%rax),%ecx
  0x00007f7748fc4175:   or     %ecx,(%rdx)
  0x00007f7748fc4177:   or     %edi,%edi
  0x00007f7748fc4179:   (bad)  
  0x00007f7748fc417a:   (bad)  
  0x00007f7748fc417b:   (bad)  
  0x00007f7748fc417c:   (bad)  
  0x00007f7748fc417d:   (bad)  
  0x00007f7748fc417e:   (bad)  
  0x00007f7748fc417f:   (bad)  
  0x00007f7748fc4180:   (bad)  
  0x00007f7748fc4181:   (bad)  
  0x00007f7748fc4182:   (bad)  
  0x00007f7748fc4183:   (bad)  
  0x00007f7748fc4184:   (bad)  
  0x00007f7748fc4185:   (bad)  
  0x00007f7748fc4186:   (bad)  
  0x00007f7748fc4187:   incl   (%rax)
  0x00007f7748fc4189:   add    %eax,(%rdx)
  0x00007f7748fc418b:   add    (%rax),%ecx
  0x00007f7748fc418d:   or     %ecx,(%rdx)
  0x00007f7748fc418f:   or     %edi,%edi
  0x00007f7748fc4191:   (bad)  
  0x00007f7748fc4192:   (bad)  
  0x00007f7748fc4193:   (bad)  
  0x00007f7748fc4194:   (bad)  
  0x00007f7748fc4195:   (bad)  
  0x00007f7748fc4196:   (bad)  
  0x00007f7748fc4197:   incl   (%rax)
  0x00007f7748fc4199:   add    %eax,(%rdx)
  0x00007f7748fc419b:   add    (%rax),%ecx
  0x00007f7748fc419d:   or     %ecx,(%rdx)
  0x00007f7748fc419f:   .byte 0xb
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha256_implCompress [0x00007f7748fc41a0, 0x00007f7748fc52cf] (4399 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc41a0:   push   %rbp
  0x00007f7748fc41a1:   mov    %rsp,%rbp
  0x00007f7748fc41a4:   sub    $0x20,%rsp
  0x00007f7748fc41a8:   push   %rcx
  0x00007f7748fc41a9:   push   %rdx
  0x00007f7748fc41aa:   push   %rbx
  0x00007f7748fc41ab:   push   %rbp
  0x00007f7748fc41ac:   push   %r12
  0x00007f7748fc41ae:   push   %r13
  0x00007f7748fc41b0:   push   %r14
  0x00007f7748fc41b2:   push   %r15
  0x00007f7748fc41b4:   mov    %rsp,%rax
  0x00007f7748fc41b7:   sub    $0x220,%rsp
  0x00007f7748fc41be:   and    $0xffffffffffffffe0,%rsp
  0x00007f7748fc41c2:   mov    %rax,0x218(%rsp)
  0x00007f7748fc41ca:   mov    %rcx,%r9
  0x00007f7748fc41cd:   mov    %rdx,%r8
  0x00007f7748fc41d0:   mov    %rsi,%rdx
  0x00007f7748fc41d3:   mov    %rdi,%rcx
  0x00007f7748fc41d6:   lea    (%rcx),%rcx
  0x00007f7748fc41d9:   mov    %rdx,%rdx
  0x00007f7748fc41dc:   xor    %r8,%r8
  0x00007f7748fc41df:   add    $0x40,%r8
  0x00007f7748fc41e3:   lea    -0x40(%rcx,%r8,1),%r8
  0x00007f7748fc41e8:   mov    %r8,0x200(%rsp)
  0x00007f7748fc41f0:   cmp    %r8,%rcx
  0x00007f7748fc41f3:   je     Stub::sha256_implCompress+4309 0x00007f7748fc5275
  0x00007f7748fc41f9:   mov    (%rdx),%eax
  0x00007f7748fc41fb:   mov    0x4(%rdx),%ebx
  0x00007f7748fc41fe:   mov    0x8(%rdx),%edi
  0x00007f7748fc4201:   mov    0xc(%rdx),%esi
  0x00007f7748fc4204:   mov    0x10(%rdx),%r8d
  0x00007f7748fc4208:   mov    0x14(%rdx),%r9d
  0x00007f7748fc420c:   mov    0x1c(%rdx),%r11d
  0x00007f7748fc4210:   vmovdqu -0xd8(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007f7748fc4218:   vmovdqu -0xc0(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007f7748fc4160
  0x00007f7748fc4220:   vmovdqu -0xa8(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007f7748fc4180
  0x00007f7748fc4228:   mov    0x18(%rdx),%r10d
  0x00007f7748fc422c:   mov    %rdx,0x210(%rsp)
  0x00007f7748fc4234:   movabs $0x7f774d6924c0,%rbp
  0x00007f7748fc423e:   vmovdqu (%rcx),%ymm0
  0x00007f7748fc4242:   vmovdqu 0x20(%rcx),%ymm1
  0x00007f7748fc4247:   vmovdqu 0x40(%rcx),%ymm2
  0x00007f7748fc424c:   vmovdqu 0x60(%rcx),%ymm3
  0x00007f7748fc4251:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007f7748fc4256:   vpshufb %ymm13,%ymm1,%ymm1
  0x00007f7748fc425b:   vpshufb %ymm13,%ymm2,%ymm2
  0x00007f7748fc4260:   vpshufb %ymm13,%ymm3,%ymm3
  0x00007f7748fc4265:   vperm2i128 $0x20,%ymm2,%ymm0,%ymm4
  0x00007f7748fc426b:   vperm2i128 $0x31,%ymm2,%ymm0,%ymm5
  0x00007f7748fc4271:   vperm2i128 $0x20,%ymm3,%ymm1,%ymm6
  0x00007f7748fc4277:   vperm2i128 $0x31,%ymm3,%ymm1,%ymm7
  0x00007f7748fc427d:   add    $0x40,%rcx
  0x00007f7748fc4281:   mov    %rcx,0x208(%rsp)
  0x00007f7748fc4289:   xor    %rdx,%rdx
  0x00007f7748fc428c:   nopl   0x0(%rax)
  0x00007f7748fc4290:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007f7748fc4296:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007f7748fc429b:   mov    %eax,%ecx
  0x00007f7748fc429d:   rorx   $0x19,%r8d,%r13d
  0x00007f7748fc42a3:   rorx   $0xb,%r8d,%r14d
  0x00007f7748fc42a9:   add    (%rsp,%rdx,1),%r11d
  0x00007f7748fc42ad:   or     %edi,%ecx
  0x00007f7748fc42af:   mov    %r9d,%r15d
  0x00007f7748fc42b2:   rorx   $0xd,%eax,%r12d
  0x00007f7748fc42b8:   xor    %r14d,%r13d
  0x00007f7748fc42bb:   xor    %r10d,%r15d
  0x00007f7748fc42be:   rorx   $0x6,%r8d,%r14d
  0x00007f7748fc42c4:   and    %r8d,%r15d
  0x00007f7748fc42c7:   xor    %r14d,%r13d
  0x00007f7748fc42ca:   rorx   $0x16,%eax,%r14d
  0x00007f7748fc42d0:   add    %r11d,%esi
  0x00007f7748fc42d3:   and    %ebx,%ecx
  0x00007f7748fc42d5:   xor    %r12d,%r14d
  0x00007f7748fc42d8:   rorx   $0x2,%eax,%r12d
  0x00007f7748fc42de:   xor    %r10d,%r15d
  0x00007f7748fc42e1:   xor    %r12d,%r14d
  0x00007f7748fc42e4:   mov    %eax,%r12d
  0x00007f7748fc42e7:   and    %edi,%r12d
  0x00007f7748fc42ea:   add    %r13d,%r15d
  0x00007f7748fc42ed:   or     %r12d,%ecx
  0x00007f7748fc42f0:   add    %r14d,%r11d
  0x00007f7748fc42f3:   add    %r15d,%esi
  0x00007f7748fc42f6:   add    %r15d,%r11d
  0x00007f7748fc42f9:   add    %ecx,%r11d
  0x00007f7748fc42fc:   vpalignr $0x4,%ymm6,%ymm7,%ymm0
  0x00007f7748fc4302:   vpaddd %ymm4,%ymm0,%ymm0
  0x00007f7748fc4306:   vpalignr $0x4,%ymm4,%ymm5,%ymm1
  0x00007f7748fc430c:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f7748fc4311:   vpslld $0x19,%ymm1,%ymm3
  0x00007f7748fc4316:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc431a:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f7748fc431f:   mov    %r11d,%ecx
  0x00007f7748fc4322:   rorx   $0x19,%esi,%r13d
  0x00007f7748fc4328:   rorx   $0xb,%esi,%r14d
  0x00007f7748fc432e:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007f7748fc4333:   or     %ebx,%ecx
  0x00007f7748fc4335:   mov    %r8d,%r15d
  0x00007f7748fc4338:   rorx   $0xd,%r11d,%r12d
  0x00007f7748fc433e:   xor    %r14d,%r13d
  0x00007f7748fc4341:   xor    %r9d,%r15d
  0x00007f7748fc4344:   rorx   $0x6,%esi,%r14d
  0x00007f7748fc434a:   and    %esi,%r15d
  0x00007f7748fc434d:   xor    %r14d,%r13d
  0x00007f7748fc4350:   rorx   $0x16,%r11d,%r14d
  0x00007f7748fc4356:   add    %r10d,%edi
  0x00007f7748fc4359:   and    %eax,%ecx
  0x00007f7748fc435b:   xor    %r12d,%r14d
  0x00007f7748fc435e:   rorx   $0x2,%r11d,%r12d
  0x00007f7748fc4364:   xor    %r9d,%r15d
  0x00007f7748fc4367:   xor    %r12d,%r14d
  0x00007f7748fc436a:   mov    %r11d,%r12d
  0x00007f7748fc436d:   and    %ebx,%r12d
  0x00007f7748fc4370:   add    %r13d,%r15d
  0x00007f7748fc4373:   or     %r12d,%ecx
  0x00007f7748fc4376:   add    %r14d,%r10d
  0x00007f7748fc4379:   add    %r15d,%edi
  0x00007f7748fc437c:   add    %r15d,%r10d
  0x00007f7748fc437f:   add    %ecx,%r10d
  0x00007f7748fc4382:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f7748fc4387:   vpslld $0xe,%ymm1,%ymm1
  0x00007f7748fc438c:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f7748fc4390:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f7748fc4394:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f7748fc4399:   vpshufd $0xfa,%ymm7,%ymm2
  0x00007f7748fc439e:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f7748fc43a2:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f7748fc43a7:   mov    %r10d,%ecx
  0x00007f7748fc43aa:   rorx   $0x19,%edi,%r13d
  0x00007f7748fc43b0:   rorx   $0xb,%edi,%r14d
  0x00007f7748fc43b6:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007f7748fc43bb:   or     %eax,%ecx
  0x00007f7748fc43bd:   mov    %esi,%r15d
  0x00007f7748fc43c0:   rorx   $0xd,%r10d,%r12d
  0x00007f7748fc43c6:   xor    %r14d,%r13d
  0x00007f7748fc43c9:   xor    %r8d,%r15d
  0x00007f7748fc43cc:   rorx   $0x6,%edi,%r14d
  0x00007f7748fc43d2:   and    %edi,%r15d
  0x00007f7748fc43d5:   xor    %r14d,%r13d
  0x00007f7748fc43d8:   rorx   $0x16,%r10d,%r14d
  0x00007f7748fc43de:   add    %r9d,%ebx
  0x00007f7748fc43e1:   and    %r11d,%ecx
  0x00007f7748fc43e4:   xor    %r12d,%r14d
  0x00007f7748fc43e7:   rorx   $0x2,%r10d,%r12d
  0x00007f7748fc43ed:   xor    %r8d,%r15d
  0x00007f7748fc43f0:   xor    %r12d,%r14d
  0x00007f7748fc43f3:   mov    %r10d,%r12d
  0x00007f7748fc43f6:   and    %eax,%r12d
  0x00007f7748fc43f9:   add    %r13d,%r15d
  0x00007f7748fc43fc:   or     %r12d,%ecx
  0x00007f7748fc43ff:   add    %r14d,%r9d
  0x00007f7748fc4402:   add    %r15d,%ebx
  0x00007f7748fc4405:   add    %r15d,%r9d
  0x00007f7748fc4408:   add    %ecx,%r9d
  0x00007f7748fc440b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc4410:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc4415:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc4419:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f7748fc441d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f7748fc4422:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f7748fc4427:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f7748fc442c:   mov    %r9d,%ecx
  0x00007f7748fc442f:   rorx   $0x19,%ebx,%r13d
  0x00007f7748fc4435:   rorx   $0xb,%ebx,%r14d
  0x00007f7748fc443b:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007f7748fc4440:   or     %r11d,%ecx
  0x00007f7748fc4443:   mov    %edi,%r15d
  0x00007f7748fc4446:   rorx   $0xd,%r9d,%r12d
  0x00007f7748fc444c:   xor    %r14d,%r13d
  0x00007f7748fc444f:   xor    %esi,%r15d
  0x00007f7748fc4452:   rorx   $0x6,%ebx,%r14d
  0x00007f7748fc4458:   and    %ebx,%r15d
  0x00007f7748fc445b:   xor    %r14d,%r13d
  0x00007f7748fc445e:   rorx   $0x16,%r9d,%r14d
  0x00007f7748fc4464:   add    %r8d,%eax
  0x00007f7748fc4467:   and    %r10d,%ecx
  0x00007f7748fc446a:   xor    %r12d,%r14d
  0x00007f7748fc446d:   rorx   $0x2,%r9d,%r12d
  0x00007f7748fc4473:   xor    %esi,%r15d
  0x00007f7748fc4476:   xor    %r12d,%r14d
  0x00007f7748fc4479:   mov    %r9d,%r12d
  0x00007f7748fc447c:   and    %r11d,%r12d
  0x00007f7748fc447f:   add    %r13d,%r15d
  0x00007f7748fc4482:   or     %r12d,%ecx
  0x00007f7748fc4485:   add    %r14d,%r8d
  0x00007f7748fc4488:   add    %r15d,%eax
  0x00007f7748fc448b:   add    %r15d,%r8d
  0x00007f7748fc448e:   add    %ecx,%r8d
  0x00007f7748fc4491:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f7748fc4496:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc449b:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc44a0:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc44a4:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f7748fc44a8:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f7748fc44ad:   vpaddd %ymm0,%ymm11,%ymm4
  0x00007f7748fc44b1:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007f7748fc44b7:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007f7748fc44bd:   mov    %r8d,%ecx
  0x00007f7748fc44c0:   rorx   $0x19,%eax,%r13d
  0x00007f7748fc44c6:   rorx   $0xb,%eax,%r14d
  0x00007f7748fc44cc:   add    0x20(%rsp,%rdx,1),%esi
  0x00007f7748fc44d0:   or     %r10d,%ecx
  0x00007f7748fc44d3:   mov    %ebx,%r15d
  0x00007f7748fc44d6:   rorx   $0xd,%r8d,%r12d
  0x00007f7748fc44dc:   xor    %r14d,%r13d
  0x00007f7748fc44df:   xor    %edi,%r15d
  0x00007f7748fc44e2:   rorx   $0x6,%eax,%r14d
  0x00007f7748fc44e8:   and    %eax,%r15d
  0x00007f7748fc44eb:   xor    %r14d,%r13d
  0x00007f7748fc44ee:   rorx   $0x16,%r8d,%r14d
  0x00007f7748fc44f4:   add    %esi,%r11d
  0x00007f7748fc44f7:   and    %r9d,%ecx
  0x00007f7748fc44fa:   xor    %r12d,%r14d
  0x00007f7748fc44fd:   rorx   $0x2,%r8d,%r12d
  0x00007f7748fc4503:   xor    %edi,%r15d
  0x00007f7748fc4506:   xor    %r12d,%r14d
  0x00007f7748fc4509:   mov    %r8d,%r12d
  0x00007f7748fc450c:   and    %r10d,%r12d
  0x00007f7748fc450f:   add    %r13d,%r15d
  0x00007f7748fc4512:   or     %r12d,%ecx
  0x00007f7748fc4515:   add    %r14d,%esi
  0x00007f7748fc4518:   add    %r15d,%r11d
  0x00007f7748fc451b:   add    %r15d,%esi
  0x00007f7748fc451e:   add    %ecx,%esi
  0x00007f7748fc4520:   vpalignr $0x4,%ymm7,%ymm4,%ymm0
  0x00007f7748fc4526:   vpaddd %ymm5,%ymm0,%ymm0
  0x00007f7748fc452a:   vpalignr $0x4,%ymm5,%ymm6,%ymm1
  0x00007f7748fc4530:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f7748fc4535:   vpslld $0x19,%ymm1,%ymm3
  0x00007f7748fc453a:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc453e:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f7748fc4543:   mov    %esi,%ecx
  0x00007f7748fc4545:   rorx   $0x19,%r11d,%r13d
  0x00007f7748fc454b:   rorx   $0xb,%r11d,%r14d
  0x00007f7748fc4551:   add    0x24(%rsp,%rdx,1),%edi
  0x00007f7748fc4555:   or     %r9d,%ecx
  0x00007f7748fc4558:   mov    %eax,%r15d
  0x00007f7748fc455b:   rorx   $0xd,%esi,%r12d
  0x00007f7748fc4561:   xor    %r14d,%r13d
  0x00007f7748fc4564:   xor    %ebx,%r15d
  0x00007f7748fc4567:   rorx   $0x6,%r11d,%r14d
  0x00007f7748fc456d:   and    %r11d,%r15d
  0x00007f7748fc4570:   xor    %r14d,%r13d
  0x00007f7748fc4573:   rorx   $0x16,%esi,%r14d
  0x00007f7748fc4579:   add    %edi,%r10d
  0x00007f7748fc457c:   and    %r8d,%ecx
  0x00007f7748fc457f:   xor    %r12d,%r14d
  0x00007f7748fc4582:   rorx   $0x2,%esi,%r12d
  0x00007f7748fc4588:   xor    %ebx,%r15d
  0x00007f7748fc458b:   xor    %r12d,%r14d
  0x00007f7748fc458e:   mov    %esi,%r12d
  0x00007f7748fc4591:   and    %r9d,%r12d
  0x00007f7748fc4594:   add    %r13d,%r15d
  0x00007f7748fc4597:   or     %r12d,%ecx
  0x00007f7748fc459a:   add    %r14d,%edi
  0x00007f7748fc459d:   add    %r15d,%r10d
  0x00007f7748fc45a0:   add    %r15d,%edi
  0x00007f7748fc45a3:   add    %ecx,%edi
  0x00007f7748fc45a5:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f7748fc45aa:   vpslld $0xe,%ymm1,%ymm1
  0x00007f7748fc45af:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f7748fc45b3:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f7748fc45b7:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f7748fc45bc:   vpshufd $0xfa,%ymm4,%ymm2
  0x00007f7748fc45c1:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f7748fc45c5:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f7748fc45ca:   mov    %edi,%ecx
  0x00007f7748fc45cc:   rorx   $0x19,%r10d,%r13d
  0x00007f7748fc45d2:   rorx   $0xb,%r10d,%r14d
  0x00007f7748fc45d8:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007f7748fc45dc:   or     %r8d,%ecx
  0x00007f7748fc45df:   mov    %r11d,%r15d
  0x00007f7748fc45e2:   rorx   $0xd,%edi,%r12d
  0x00007f7748fc45e8:   xor    %r14d,%r13d
  0x00007f7748fc45eb:   xor    %eax,%r15d
  0x00007f7748fc45ee:   rorx   $0x6,%r10d,%r14d
  0x00007f7748fc45f4:   and    %r10d,%r15d
  0x00007f7748fc45f7:   xor    %r14d,%r13d
  0x00007f7748fc45fa:   rorx   $0x16,%edi,%r14d
  0x00007f7748fc4600:   add    %ebx,%r9d
  0x00007f7748fc4603:   and    %esi,%ecx
  0x00007f7748fc4605:   xor    %r12d,%r14d
  0x00007f7748fc4608:   rorx   $0x2,%edi,%r12d
  0x00007f7748fc460e:   xor    %eax,%r15d
  0x00007f7748fc4611:   xor    %r12d,%r14d
  0x00007f7748fc4614:   mov    %edi,%r12d
  0x00007f7748fc4617:   and    %r8d,%r12d
  0x00007f7748fc461a:   add    %r13d,%r15d
  0x00007f7748fc461d:   or     %r12d,%ecx
  0x00007f7748fc4620:   add    %r14d,%ebx
  0x00007f7748fc4623:   add    %r15d,%r9d
  0x00007f7748fc4626:   add    %r15d,%ebx
  0x00007f7748fc4629:   add    %ecx,%ebx
  0x00007f7748fc462b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc4630:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc4635:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc4639:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f7748fc463d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f7748fc4642:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f7748fc4647:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f7748fc464c:   mov    %ebx,%ecx
  0x00007f7748fc464e:   rorx   $0x19,%r9d,%r13d
  0x00007f7748fc4654:   rorx   $0xb,%r9d,%r14d
  0x00007f7748fc465a:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007f7748fc465e:   or     %esi,%ecx
  0x00007f7748fc4660:   mov    %r10d,%r15d
  0x00007f7748fc4663:   rorx   $0xd,%ebx,%r12d
  0x00007f7748fc4669:   xor    %r14d,%r13d
  0x00007f7748fc466c:   xor    %r11d,%r15d
  0x00007f7748fc466f:   rorx   $0x6,%r9d,%r14d
  0x00007f7748fc4675:   and    %r9d,%r15d
  0x00007f7748fc4678:   xor    %r14d,%r13d
  0x00007f7748fc467b:   rorx   $0x16,%ebx,%r14d
  0x00007f7748fc4681:   add    %eax,%r8d
  0x00007f7748fc4684:   and    %edi,%ecx
  0x00007f7748fc4686:   xor    %r12d,%r14d
  0x00007f7748fc4689:   rorx   $0x2,%ebx,%r12d
  0x00007f7748fc468f:   xor    %r11d,%r15d
  0x00007f7748fc4692:   xor    %r12d,%r14d
  0x00007f7748fc4695:   mov    %ebx,%r12d
  0x00007f7748fc4698:   and    %esi,%r12d
  0x00007f7748fc469b:   add    %r13d,%r15d
  0x00007f7748fc469e:   or     %r12d,%ecx
  0x00007f7748fc46a1:   add    %r14d,%eax
  0x00007f7748fc46a4:   add    %r15d,%r8d
  0x00007f7748fc46a7:   add    %r15d,%eax
  0x00007f7748fc46aa:   add    %ecx,%eax
  0x00007f7748fc46ac:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f7748fc46b1:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc46b6:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc46bb:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc46bf:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f7748fc46c3:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f7748fc46c8:   vpaddd %ymm0,%ymm11,%ymm5
  0x00007f7748fc46cc:   vpaddd 0x40(%rbp,%rdx,1),%ymm6,%ymm9
  0x00007f7748fc46d2:   vmovdqu %ymm9,0x40(%rsp,%rdx,1)
  0x00007f7748fc46d8:   mov    %eax,%ecx
  0x00007f7748fc46da:   rorx   $0x19,%r8d,%r13d
  0x00007f7748fc46e0:   rorx   $0xb,%r8d,%r14d
  0x00007f7748fc46e6:   add    0x40(%rsp,%rdx,1),%r11d
  0x00007f7748fc46eb:   or     %edi,%ecx
  0x00007f7748fc46ed:   mov    %r9d,%r15d
  0x00007f7748fc46f0:   rorx   $0xd,%eax,%r12d
  0x00007f7748fc46f6:   xor    %r14d,%r13d
  0x00007f7748fc46f9:   xor    %r10d,%r15d
  0x00007f7748fc46fc:   rorx   $0x6,%r8d,%r14d
  0x00007f7748fc4702:   and    %r8d,%r15d
  0x00007f7748fc4705:   xor    %r14d,%r13d
  0x00007f7748fc4708:   rorx   $0x16,%eax,%r14d
  0x00007f7748fc470e:   add    %r11d,%esi
  0x00007f7748fc4711:   and    %ebx,%ecx
  0x00007f7748fc4713:   xor    %r12d,%r14d
  0x00007f7748fc4716:   rorx   $0x2,%eax,%r12d
  0x00007f7748fc471c:   xor    %r10d,%r15d
  0x00007f7748fc471f:   xor    %r12d,%r14d
  0x00007f7748fc4722:   mov    %eax,%r12d
  0x00007f7748fc4725:   and    %edi,%r12d
  0x00007f7748fc4728:   add    %r13d,%r15d
  0x00007f7748fc472b:   or     %r12d,%ecx
  0x00007f7748fc472e:   add    %r14d,%r11d
  0x00007f7748fc4731:   add    %r15d,%esi
  0x00007f7748fc4734:   add    %r15d,%r11d
  0x00007f7748fc4737:   add    %ecx,%r11d
  0x00007f7748fc473a:   vpalignr $0x4,%ymm4,%ymm5,%ymm0
  0x00007f7748fc4740:   vpaddd %ymm6,%ymm0,%ymm0
  0x00007f7748fc4744:   vpalignr $0x4,%ymm6,%ymm7,%ymm1
  0x00007f7748fc474a:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f7748fc474f:   vpslld $0x19,%ymm1,%ymm3
  0x00007f7748fc4754:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc4758:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f7748fc475d:   mov    %r11d,%ecx
  0x00007f7748fc4760:   rorx   $0x19,%esi,%r13d
  0x00007f7748fc4766:   rorx   $0xb,%esi,%r14d
  0x00007f7748fc476c:   add    0x44(%rsp,%rdx,1),%r10d
  0x00007f7748fc4771:   or     %ebx,%ecx
  0x00007f7748fc4773:   mov    %r8d,%r15d
  0x00007f7748fc4776:   rorx   $0xd,%r11d,%r12d
  0x00007f7748fc477c:   xor    %r14d,%r13d
  0x00007f7748fc477f:   xor    %r9d,%r15d
  0x00007f7748fc4782:   rorx   $0x6,%esi,%r14d
  0x00007f7748fc4788:   and    %esi,%r15d
  0x00007f7748fc478b:   xor    %r14d,%r13d
  0x00007f7748fc478e:   rorx   $0x16,%r11d,%r14d
  0x00007f7748fc4794:   add    %r10d,%edi
  0x00007f7748fc4797:   and    %eax,%ecx
  0x00007f7748fc4799:   xor    %r12d,%r14d
  0x00007f7748fc479c:   rorx   $0x2,%r11d,%r12d
  0x00007f7748fc47a2:   xor    %r9d,%r15d
  0x00007f7748fc47a5:   xor    %r12d,%r14d
  0x00007f7748fc47a8:   mov    %r11d,%r12d
  0x00007f7748fc47ab:   and    %ebx,%r12d
  0x00007f7748fc47ae:   add    %r13d,%r15d
  0x00007f7748fc47b1:   or     %r12d,%ecx
  0x00007f7748fc47b4:   add    %r14d,%r10d
  0x00007f7748fc47b7:   add    %r15d,%edi
  0x00007f7748fc47ba:   add    %r15d,%r10d
  0x00007f7748fc47bd:   add    %ecx,%r10d
  0x00007f7748fc47c0:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f7748fc47c5:   vpslld $0xe,%ymm1,%ymm1
  0x00007f7748fc47ca:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f7748fc47ce:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f7748fc47d2:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f7748fc47d7:   vpshufd $0xfa,%ymm5,%ymm2
  0x00007f7748fc47dc:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f7748fc47e0:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f7748fc47e5:   mov    %r10d,%ecx
  0x00007f7748fc47e8:   rorx   $0x19,%edi,%r13d
  0x00007f7748fc47ee:   rorx   $0xb,%edi,%r14d
  0x00007f7748fc47f4:   add    0x48(%rsp,%rdx,1),%r9d
  0x00007f7748fc47f9:   or     %eax,%ecx
  0x00007f7748fc47fb:   mov    %esi,%r15d
  0x00007f7748fc47fe:   rorx   $0xd,%r10d,%r12d
  0x00007f7748fc4804:   xor    %r14d,%r13d
  0x00007f7748fc4807:   xor    %r8d,%r15d
  0x00007f7748fc480a:   rorx   $0x6,%edi,%r14d
  0x00007f7748fc4810:   and    %edi,%r15d
  0x00007f7748fc4813:   xor    %r14d,%r13d
  0x00007f7748fc4816:   rorx   $0x16,%r10d,%r14d
  0x00007f7748fc481c:   add    %r9d,%ebx
  0x00007f7748fc481f:   and    %r11d,%ecx
  0x00007f7748fc4822:   xor    %r12d,%r14d
  0x00007f7748fc4825:   rorx   $0x2,%r10d,%r12d
  0x00007f7748fc482b:   xor    %r8d,%r15d
  0x00007f7748fc482e:   xor    %r12d,%r14d
  0x00007f7748fc4831:   mov    %r10d,%r12d
  0x00007f7748fc4834:   and    %eax,%r12d
  0x00007f7748fc4837:   add    %r13d,%r15d
  0x00007f7748fc483a:   or     %r12d,%ecx
  0x00007f7748fc483d:   add    %r14d,%r9d
  0x00007f7748fc4840:   add    %r15d,%ebx
  0x00007f7748fc4843:   add    %r15d,%r9d
  0x00007f7748fc4846:   add    %ecx,%r9d
  0x00007f7748fc4849:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc484e:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc4853:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc4857:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f7748fc485b:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f7748fc4860:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f7748fc4865:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f7748fc486a:   mov    %r9d,%ecx
  0x00007f7748fc486d:   rorx   $0x19,%ebx,%r13d
  0x00007f7748fc4873:   rorx   $0xb,%ebx,%r14d
  0x00007f7748fc4879:   add    0x4c(%rsp,%rdx,1),%r8d
  0x00007f7748fc487e:   or     %r11d,%ecx
  0x00007f7748fc4881:   mov    %edi,%r15d
  0x00007f7748fc4884:   rorx   $0xd,%r9d,%r12d
  0x00007f7748fc488a:   xor    %r14d,%r13d
  0x00007f7748fc488d:   xor    %esi,%r15d
  0x00007f7748fc4890:   rorx   $0x6,%ebx,%r14d
  0x00007f7748fc4896:   and    %ebx,%r15d
  0x00007f7748fc4899:   xor    %r14d,%r13d
  0x00007f7748fc489c:   rorx   $0x16,%r9d,%r14d
  0x00007f7748fc48a2:   add    %r8d,%eax
  0x00007f7748fc48a5:   and    %r10d,%ecx
  0x00007f7748fc48a8:   xor    %r12d,%r14d
  0x00007f7748fc48ab:   rorx   $0x2,%r9d,%r12d
  0x00007f7748fc48b1:   xor    %esi,%r15d
  0x00007f7748fc48b4:   xor    %r12d,%r14d
  0x00007f7748fc48b7:   mov    %r9d,%r12d
  0x00007f7748fc48ba:   and    %r11d,%r12d
  0x00007f7748fc48bd:   add    %r13d,%r15d
  0x00007f7748fc48c0:   or     %r12d,%ecx
  0x00007f7748fc48c3:   add    %r14d,%r8d
  0x00007f7748fc48c6:   add    %r15d,%eax
  0x00007f7748fc48c9:   add    %r15d,%r8d
  0x00007f7748fc48cc:   add    %ecx,%r8d
  0x00007f7748fc48cf:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f7748fc48d4:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc48d9:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc48de:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc48e2:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f7748fc48e6:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f7748fc48eb:   vpaddd %ymm0,%ymm11,%ymm6
  0x00007f7748fc48ef:   vpaddd 0x60(%rbp,%rdx,1),%ymm7,%ymm9
  0x00007f7748fc48f5:   vmovdqu %ymm9,0x60(%rsp,%rdx,1)
  0x00007f7748fc48fb:   mov    %r8d,%ecx
  0x00007f7748fc48fe:   rorx   $0x19,%eax,%r13d
  0x00007f7748fc4904:   rorx   $0xb,%eax,%r14d
  0x00007f7748fc490a:   add    0x60(%rsp,%rdx,1),%esi
  0x00007f7748fc490e:   or     %r10d,%ecx
  0x00007f7748fc4911:   mov    %ebx,%r15d
  0x00007f7748fc4914:   rorx   $0xd,%r8d,%r12d
  0x00007f7748fc491a:   xor    %r14d,%r13d
  0x00007f7748fc491d:   xor    %edi,%r15d
  0x00007f7748fc4920:   rorx   $0x6,%eax,%r14d
  0x00007f7748fc4926:   and    %eax,%r15d
  0x00007f7748fc4929:   xor    %r14d,%r13d
  0x00007f7748fc492c:   rorx   $0x16,%r8d,%r14d
  0x00007f7748fc4932:   add    %esi,%r11d
  0x00007f7748fc4935:   and    %r9d,%ecx
  0x00007f7748fc4938:   xor    %r12d,%r14d
  0x00007f7748fc493b:   rorx   $0x2,%r8d,%r12d
  0x00007f7748fc4941:   xor    %edi,%r15d
  0x00007f7748fc4944:   xor    %r12d,%r14d
  0x00007f7748fc4947:   mov    %r8d,%r12d
  0x00007f7748fc494a:   and    %r10d,%r12d
  0x00007f7748fc494d:   add    %r13d,%r15d
  0x00007f7748fc4950:   or     %r12d,%ecx
  0x00007f7748fc4953:   add    %r14d,%esi
  0x00007f7748fc4956:   add    %r15d,%r11d
  0x00007f7748fc4959:   add    %r15d,%esi
  0x00007f7748fc495c:   add    %ecx,%esi
  0x00007f7748fc495e:   vpalignr $0x4,%ymm5,%ymm6,%ymm0
  0x00007f7748fc4964:   vpaddd %ymm7,%ymm0,%ymm0
  0x00007f7748fc4968:   vpalignr $0x4,%ymm7,%ymm4,%ymm1
  0x00007f7748fc496e:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f7748fc4973:   vpslld $0x19,%ymm1,%ymm3
  0x00007f7748fc4978:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc497c:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f7748fc4981:   mov    %esi,%ecx
  0x00007f7748fc4983:   rorx   $0x19,%r11d,%r13d
  0x00007f7748fc4989:   rorx   $0xb,%r11d,%r14d
  0x00007f7748fc498f:   add    0x64(%rsp,%rdx,1),%edi
  0x00007f7748fc4993:   or     %r9d,%ecx
  0x00007f7748fc4996:   mov    %eax,%r15d
  0x00007f7748fc4999:   rorx   $0xd,%esi,%r12d
  0x00007f7748fc499f:   xor    %r14d,%r13d
  0x00007f7748fc49a2:   xor    %ebx,%r15d
  0x00007f7748fc49a5:   rorx   $0x6,%r11d,%r14d
  0x00007f7748fc49ab:   and    %r11d,%r15d
  0x00007f7748fc49ae:   xor    %r14d,%r13d
  0x00007f7748fc49b1:   rorx   $0x16,%esi,%r14d
  0x00007f7748fc49b7:   add    %edi,%r10d
  0x00007f7748fc49ba:   and    %r8d,%ecx
  0x00007f7748fc49bd:   xor    %r12d,%r14d
  0x00007f7748fc49c0:   rorx   $0x2,%esi,%r12d
  0x00007f7748fc49c6:   xor    %ebx,%r15d
  0x00007f7748fc49c9:   xor    %r12d,%r14d
  0x00007f7748fc49cc:   mov    %esi,%r12d
  0x00007f7748fc49cf:   and    %r9d,%r12d
  0x00007f7748fc49d2:   add    %r13d,%r15d
  0x00007f7748fc49d5:   or     %r12d,%ecx
  0x00007f7748fc49d8:   add    %r14d,%edi
  0x00007f7748fc49db:   add    %r15d,%r10d
  0x00007f7748fc49de:   add    %r15d,%edi
  0x00007f7748fc49e1:   add    %ecx,%edi
  0x00007f7748fc49e3:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f7748fc49e8:   vpslld $0xe,%ymm1,%ymm1
  0x00007f7748fc49ed:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f7748fc49f1:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f7748fc49f5:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f7748fc49fa:   vpshufd $0xfa,%ymm6,%ymm2
  0x00007f7748fc49ff:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f7748fc4a03:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f7748fc4a08:   mov    %edi,%ecx
  0x00007f7748fc4a0a:   rorx   $0x19,%r10d,%r13d
  0x00007f7748fc4a10:   rorx   $0xb,%r10d,%r14d
  0x00007f7748fc4a16:   add    0x68(%rsp,%rdx,1),%ebx
  0x00007f7748fc4a1a:   or     %r8d,%ecx
  0x00007f7748fc4a1d:   mov    %r11d,%r15d
  0x00007f7748fc4a20:   rorx   $0xd,%edi,%r12d
  0x00007f7748fc4a26:   xor    %r14d,%r13d
  0x00007f7748fc4a29:   xor    %eax,%r15d
  0x00007f7748fc4a2c:   rorx   $0x6,%r10d,%r14d
  0x00007f7748fc4a32:   and    %r10d,%r15d
  0x00007f7748fc4a35:   xor    %r14d,%r13d
  0x00007f7748fc4a38:   rorx   $0x16,%edi,%r14d
  0x00007f7748fc4a3e:   add    %ebx,%r9d
  0x00007f7748fc4a41:   and    %esi,%ecx
  0x00007f7748fc4a43:   xor    %r12d,%r14d
  0x00007f7748fc4a46:   rorx   $0x2,%edi,%r12d
  0x00007f7748fc4a4c:   xor    %eax,%r15d
  0x00007f7748fc4a4f:   xor    %r12d,%r14d
  0x00007f7748fc4a52:   mov    %edi,%r12d
  0x00007f7748fc4a55:   and    %r8d,%r12d
  0x00007f7748fc4a58:   add    %r13d,%r15d
  0x00007f7748fc4a5b:   or     %r12d,%ecx
  0x00007f7748fc4a5e:   add    %r14d,%ebx
  0x00007f7748fc4a61:   add    %r15d,%r9d
  0x00007f7748fc4a64:   add    %r15d,%ebx
  0x00007f7748fc4a67:   add    %ecx,%ebx
  0x00007f7748fc4a69:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc4a6e:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc4a73:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc4a77:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f7748fc4a7b:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f7748fc4a80:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f7748fc4a85:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f7748fc4a8a:   mov    %ebx,%ecx
  0x00007f7748fc4a8c:   rorx   $0x19,%r9d,%r13d
  0x00007f7748fc4a92:   rorx   $0xb,%r9d,%r14d
  0x00007f7748fc4a98:   add    0x6c(%rsp,%rdx,1),%eax
  0x00007f7748fc4a9c:   or     %esi,%ecx
  0x00007f7748fc4a9e:   mov    %r10d,%r15d
  0x00007f7748fc4aa1:   rorx   $0xd,%ebx,%r12d
  0x00007f7748fc4aa7:   xor    %r14d,%r13d
  0x00007f7748fc4aaa:   xor    %r11d,%r15d
  0x00007f7748fc4aad:   rorx   $0x6,%r9d,%r14d
  0x00007f7748fc4ab3:   and    %r9d,%r15d
  0x00007f7748fc4ab6:   xor    %r14d,%r13d
  0x00007f7748fc4ab9:   rorx   $0x16,%ebx,%r14d
  0x00007f7748fc4abf:   add    %eax,%r8d
  0x00007f7748fc4ac2:   and    %edi,%ecx
  0x00007f7748fc4ac4:   xor    %r12d,%r14d
  0x00007f7748fc4ac7:   rorx   $0x2,%ebx,%r12d
  0x00007f7748fc4acd:   xor    %r11d,%r15d
  0x00007f7748fc4ad0:   xor    %r12d,%r14d
  0x00007f7748fc4ad3:   mov    %ebx,%r12d
  0x00007f7748fc4ad6:   and    %esi,%r12d
  0x00007f7748fc4ad9:   add    %r13d,%r15d
  0x00007f7748fc4adc:   or     %r12d,%ecx
  0x00007f7748fc4adf:   add    %r14d,%eax
  0x00007f7748fc4ae2:   add    %r15d,%r8d
  0x00007f7748fc4ae5:   add    %r15d,%eax
  0x00007f7748fc4ae8:   add    %ecx,%eax
  0x00007f7748fc4aea:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f7748fc4aef:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc4af4:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc4af9:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc4afd:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f7748fc4b01:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f7748fc4b06:   vpaddd %ymm0,%ymm11,%ymm7
  0x00007f7748fc4b0a:   add    $0x80,%rdx
  0x00007f7748fc4b11:   cmp    $0x180,%rdx
  0x00007f7748fc4b18:   jb     Stub::sha256_implCompress+240 0x00007f7748fc4290
  0x00007f7748fc4b1e:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007f7748fc4b24:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007f7748fc4b29:   mov    %r9d,%r15d
  0x00007f7748fc4b2c:   rorx   $0x19,%r8d,%r13d
  0x00007f7748fc4b32:   rorx   $0xb,%r8d,%r14d
  0x00007f7748fc4b38:   xor    %r10d,%r15d
  0x00007f7748fc4b3b:   xor    %r14d,%r13d
  0x00007f7748fc4b3e:   rorx   $0x6,%r8d,%r14d
  0x00007f7748fc4b44:   and    %r8d,%r15d
  0x00007f7748fc4b47:   xor    %r14d,%r13d
  0x00007f7748fc4b4a:   rorx   $0xd,%eax,%r12d
  0x00007f7748fc4b50:   xor    %r10d,%r15d
  0x00007f7748fc4b53:   rorx   $0x16,%eax,%r14d
  0x00007f7748fc4b59:   mov    %eax,%ecx
  0x00007f7748fc4b5b:   xor    %r12d,%r14d
  0x00007f7748fc4b5e:   rorx   $0x2,%eax,%r12d
  0x00007f7748fc4b64:   add    (%rsp,%rdx,1),%r11d
  0x00007f7748fc4b68:   or     %edi,%ecx
  0x00007f7748fc4b6a:   xor    %r12d,%r14d
  0x00007f7748fc4b6d:   mov    %eax,%r12d
  0x00007f7748fc4b70:   and    %ebx,%ecx
  0x00007f7748fc4b72:   and    %edi,%r12d
  0x00007f7748fc4b75:   add    %r13d,%r15d
  0x00007f7748fc4b78:   add    %r11d,%esi
  0x00007f7748fc4b7b:   or     %r12d,%ecx
  0x00007f7748fc4b7e:   add    %r14d,%r11d
  0x00007f7748fc4b81:   add    %r15d,%esi
  0x00007f7748fc4b84:   add    %r15d,%r11d
  0x00007f7748fc4b87:   mov    %r8d,%r15d
  0x00007f7748fc4b8a:   rorx   $0x19,%esi,%r13d
  0x00007f7748fc4b90:   rorx   $0xb,%esi,%r14d
  0x00007f7748fc4b96:   xor    %r9d,%r15d
  0x00007f7748fc4b99:   xor    %r14d,%r13d
  0x00007f7748fc4b9c:   rorx   $0x6,%esi,%r14d
  0x00007f7748fc4ba2:   and    %esi,%r15d
  0x00007f7748fc4ba5:   add    %ecx,%r11d
  0x00007f7748fc4ba8:   xor    %r14d,%r13d
  0x00007f7748fc4bab:   rorx   $0xd,%r11d,%r12d
  0x00007f7748fc4bb1:   xor    %r9d,%r15d
  0x00007f7748fc4bb4:   rorx   $0x16,%r11d,%r14d
  0x00007f7748fc4bba:   mov    %r11d,%ecx
  0x00007f7748fc4bbd:   xor    %r12d,%r14d
  0x00007f7748fc4bc0:   rorx   $0x2,%r11d,%r12d
  0x00007f7748fc4bc6:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007f7748fc4bcb:   or     %ebx,%ecx
  0x00007f7748fc4bcd:   xor    %r12d,%r14d
  0x00007f7748fc4bd0:   mov    %r11d,%r12d
  0x00007f7748fc4bd3:   and    %eax,%ecx
  0x00007f7748fc4bd5:   and    %ebx,%r12d
  0x00007f7748fc4bd8:   add    %r13d,%r15d
  0x00007f7748fc4bdb:   add    %r10d,%edi
  0x00007f7748fc4bde:   or     %r12d,%ecx
  0x00007f7748fc4be1:   add    %r14d,%r10d
  0x00007f7748fc4be4:   add    %r15d,%edi
  0x00007f7748fc4be7:   add    %r15d,%r10d
  0x00007f7748fc4bea:   mov    %esi,%r15d
  0x00007f7748fc4bed:   rorx   $0x19,%edi,%r13d
  0x00007f7748fc4bf3:   rorx   $0xb,%edi,%r14d
  0x00007f7748fc4bf9:   xor    %r8d,%r15d
  0x00007f7748fc4bfc:   xor    %r14d,%r13d
  0x00007f7748fc4bff:   rorx   $0x6,%edi,%r14d
  0x00007f7748fc4c05:   and    %edi,%r15d
  0x00007f7748fc4c08:   add    %ecx,%r10d
  0x00007f7748fc4c0b:   xor    %r14d,%r13d
  0x00007f7748fc4c0e:   rorx   $0xd,%r10d,%r12d
  0x00007f7748fc4c14:   xor    %r8d,%r15d
  0x00007f7748fc4c17:   rorx   $0x16,%r10d,%r14d
  0x00007f7748fc4c1d:   mov    %r10d,%ecx
  0x00007f7748fc4c20:   xor    %r12d,%r14d
  0x00007f7748fc4c23:   rorx   $0x2,%r10d,%r12d
  0x00007f7748fc4c29:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007f7748fc4c2e:   or     %eax,%ecx
  0x00007f7748fc4c30:   xor    %r12d,%r14d
  0x00007f7748fc4c33:   mov    %r10d,%r12d
  0x00007f7748fc4c36:   and    %r11d,%ecx
  0x00007f7748fc4c39:   and    %eax,%r12d
  0x00007f7748fc4c3c:   add    %r13d,%r15d
  0x00007f7748fc4c3f:   add    %r9d,%ebx
  0x00007f7748fc4c42:   or     %r12d,%ecx
  0x00007f7748fc4c45:   add    %r14d,%r9d
  0x00007f7748fc4c48:   add    %r15d,%ebx
  0x00007f7748fc4c4b:   add    %r15d,%r9d
  0x00007f7748fc4c4e:   mov    %edi,%r15d
  0x00007f7748fc4c51:   rorx   $0x19,%ebx,%r13d
  0x00007f7748fc4c57:   rorx   $0xb,%ebx,%r14d
  0x00007f7748fc4c5d:   xor    %esi,%r15d
  0x00007f7748fc4c60:   xor    %r14d,%r13d
  0x00007f7748fc4c63:   rorx   $0x6,%ebx,%r14d
  0x00007f7748fc4c69:   and    %ebx,%r15d
  0x00007f7748fc4c6c:   add    %ecx,%r9d
  0x00007f7748fc4c6f:   xor    %r14d,%r13d
  0x00007f7748fc4c72:   rorx   $0xd,%r9d,%r12d
  0x00007f7748fc4c78:   xor    %esi,%r15d
  0x00007f7748fc4c7b:   rorx   $0x16,%r9d,%r14d
  0x00007f7748fc4c81:   mov    %r9d,%ecx
  0x00007f7748fc4c84:   xor    %r12d,%r14d
  0x00007f7748fc4c87:   rorx   $0x2,%r9d,%r12d
  0x00007f7748fc4c8d:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007f7748fc4c92:   or     %r11d,%ecx
  0x00007f7748fc4c95:   xor    %r12d,%r14d
  0x00007f7748fc4c98:   mov    %r9d,%r12d
  0x00007f7748fc4c9b:   and    %r10d,%ecx
  0x00007f7748fc4c9e:   and    %r11d,%r12d
  0x00007f7748fc4ca1:   add    %r13d,%r15d
  0x00007f7748fc4ca4:   add    %r8d,%eax
  0x00007f7748fc4ca7:   or     %r12d,%ecx
  0x00007f7748fc4caa:   add    %r14d,%r8d
  0x00007f7748fc4cad:   add    %r15d,%eax
  0x00007f7748fc4cb0:   add    %r15d,%r8d
  0x00007f7748fc4cb3:   add    %ecx,%r8d
  0x00007f7748fc4cb6:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007f7748fc4cbc:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007f7748fc4cc2:   mov    %ebx,%r15d
  0x00007f7748fc4cc5:   rorx   $0x19,%eax,%r13d
  0x00007f7748fc4ccb:   rorx   $0xb,%eax,%r14d
  0x00007f7748fc4cd1:   xor    %edi,%r15d
  0x00007f7748fc4cd4:   xor    %r14d,%r13d
  0x00007f7748fc4cd7:   rorx   $0x6,%eax,%r14d
  0x00007f7748fc4cdd:   and    %eax,%r15d
  0x00007f7748fc4ce0:   xor    %r14d,%r13d
  0x00007f7748fc4ce3:   rorx   $0xd,%r8d,%r12d
  0x00007f7748fc4ce9:   xor    %edi,%r15d
  0x00007f7748fc4cec:   rorx   $0x16,%r8d,%r14d
  0x00007f7748fc4cf2:   mov    %r8d,%ecx
  0x00007f7748fc4cf5:   xor    %r12d,%r14d
  0x00007f7748fc4cf8:   rorx   $0x2,%r8d,%r12d
  0x00007f7748fc4cfe:   add    0x20(%rsp,%rdx,1),%esi
  0x00007f7748fc4d02:   or     %r10d,%ecx
  0x00007f7748fc4d05:   xor    %r12d,%r14d
  0x00007f7748fc4d08:   mov    %r8d,%r12d
  0x00007f7748fc4d0b:   and    %r9d,%ecx
  0x00007f7748fc4d0e:   and    %r10d,%r12d
  0x00007f7748fc4d11:   add    %r13d,%r15d
  0x00007f7748fc4d14:   add    %esi,%r11d
  0x00007f7748fc4d17:   or     %r12d,%ecx
  0x00007f7748fc4d1a:   add    %r14d,%esi
  0x00007f7748fc4d1d:   add    %r15d,%r11d
  0x00007f7748fc4d20:   add    %r15d,%esi
  0x00007f7748fc4d23:   mov    %eax,%r15d
  0x00007f7748fc4d26:   rorx   $0x19,%r11d,%r13d
  0x00007f7748fc4d2c:   rorx   $0xb,%r11d,%r14d
  0x00007f7748fc4d32:   xor    %ebx,%r15d
  0x00007f7748fc4d35:   xor    %r14d,%r13d
  0x00007f7748fc4d38:   rorx   $0x6,%r11d,%r14d
  0x00007f7748fc4d3e:   and    %r11d,%r15d
  0x00007f7748fc4d41:   add    %ecx,%esi
  0x00007f7748fc4d43:   xor    %r14d,%r13d
  0x00007f7748fc4d46:   rorx   $0xd,%esi,%r12d
  0x00007f7748fc4d4c:   xor    %ebx,%r15d
  0x00007f7748fc4d4f:   rorx   $0x16,%esi,%r14d
  0x00007f7748fc4d55:   mov    %esi,%ecx
  0x00007f7748fc4d57:   xor    %r12d,%r14d
  0x00007f7748fc4d5a:   rorx   $0x2,%esi,%r12d
  0x00007f7748fc4d60:   add    0x24(%rsp,%rdx,1),%edi
  0x00007f7748fc4d64:   or     %r9d,%ecx
  0x00007f7748fc4d67:   xor    %r12d,%r14d
  0x00007f7748fc4d6a:   mov    %esi,%r12d
  0x00007f7748fc4d6d:   and    %r8d,%ecx
  0x00007f7748fc4d70:   and    %r9d,%r12d
  0x00007f7748fc4d73:   add    %r13d,%r15d
  0x00007f7748fc4d76:   add    %edi,%r10d
  0x00007f7748fc4d79:   or     %r12d,%ecx
  0x00007f7748fc4d7c:   add    %r14d,%edi
  0x00007f7748fc4d7f:   add    %r15d,%r10d
  0x00007f7748fc4d82:   add    %r15d,%edi
  0x00007f7748fc4d85:   mov    %r11d,%r15d
  0x00007f7748fc4d88:   rorx   $0x19,%r10d,%r13d
  0x00007f7748fc4d8e:   rorx   $0xb,%r10d,%r14d
  0x00007f7748fc4d94:   xor    %eax,%r15d
  0x00007f7748fc4d97:   xor    %r14d,%r13d
  0x00007f7748fc4d9a:   rorx   $0x6,%r10d,%r14d
  0x00007f7748fc4da0:   and    %r10d,%r15d
  0x00007f7748fc4da3:   add    %ecx,%edi
  0x00007f7748fc4da5:   xor    %r14d,%r13d
  0x00007f7748fc4da8:   rorx   $0xd,%edi,%r12d
  0x00007f7748fc4dae:   xor    %eax,%r15d
  0x00007f7748fc4db1:   rorx   $0x16,%edi,%r14d
  0x00007f7748fc4db7:   mov    %edi,%ecx
  0x00007f7748fc4db9:   xor    %r12d,%r14d
  0x00007f7748fc4dbc:   rorx   $0x2,%edi,%r12d
  0x00007f7748fc4dc2:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007f7748fc4dc6:   or     %r8d,%ecx
  0x00007f7748fc4dc9:   xor    %r12d,%r14d
  0x00007f7748fc4dcc:   mov    %edi,%r12d
  0x00007f7748fc4dcf:   and    %esi,%ecx
  0x00007f7748fc4dd1:   and    %r8d,%r12d
  0x00007f7748fc4dd4:   add    %r13d,%r15d
  0x00007f7748fc4dd7:   add    %ebx,%r9d
  0x00007f7748fc4dda:   or     %r12d,%ecx
  0x00007f7748fc4ddd:   add    %r14d,%ebx
  0x00007f7748fc4de0:   add    %r15d,%r9d
  0x00007f7748fc4de3:   add    %r15d,%ebx
  0x00007f7748fc4de6:   mov    %r10d,%r15d
  0x00007f7748fc4de9:   rorx   $0x19,%r9d,%r13d
  0x00007f7748fc4def:   rorx   $0xb,%r9d,%r14d
  0x00007f7748fc4df5:   xor    %r11d,%r15d
  0x00007f7748fc4df8:   xor    %r14d,%r13d
  0x00007f7748fc4dfb:   rorx   $0x6,%r9d,%r14d
  0x00007f7748fc4e01:   and    %r9d,%r15d
  0x00007f7748fc4e04:   add    %ecx,%ebx
  0x00007f7748fc4e06:   xor    %r14d,%r13d
  0x00007f7748fc4e09:   rorx   $0xd,%ebx,%r12d
  0x00007f7748fc4e0f:   xor    %r11d,%r15d
  0x00007f7748fc4e12:   rorx   $0x16,%ebx,%r14d
  0x00007f7748fc4e18:   mov    %ebx,%ecx
  0x00007f7748fc4e1a:   xor    %r12d,%r14d
  0x00007f7748fc4e1d:   rorx   $0x2,%ebx,%r12d
  0x00007f7748fc4e23:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007f7748fc4e27:   or     %esi,%ecx
  0x00007f7748fc4e29:   xor    %r12d,%r14d
  0x00007f7748fc4e2c:   mov    %ebx,%r12d
  0x00007f7748fc4e2f:   and    %edi,%ecx
  0x00007f7748fc4e31:   and    %esi,%r12d
  0x00007f7748fc4e34:   add    %r13d,%r15d
  0x00007f7748fc4e37:   add    %eax,%r8d
  0x00007f7748fc4e3a:   or     %r12d,%ecx
  0x00007f7748fc4e3d:   add    %r14d,%eax
  0x00007f7748fc4e40:   add    %r15d,%r8d
  0x00007f7748fc4e43:   add    %r15d,%eax
  0x00007f7748fc4e46:   add    %ecx,%eax
  0x00007f7748fc4e48:   add    $0x40,%rdx
  0x00007f7748fc4e4c:   vmovdqu %ymm6,%ymm4
  0x00007f7748fc4e50:   vmovdqu %ymm7,%ymm5
  0x00007f7748fc4e54:   cmp    $0x200,%rdx
  0x00007f7748fc4e5b:   jb     Stub::sha256_implCompress+2430 0x00007f7748fc4b1e
  0x00007f7748fc4e61:   mov    0x210(%rsp),%rdx
  0x00007f7748fc4e69:   mov    0x208(%rsp),%rcx
  0x00007f7748fc4e71:   add    (%rdx),%eax
  0x00007f7748fc4e73:   mov    %eax,(%rdx)
  0x00007f7748fc4e75:   add    0x4(%rdx),%ebx
  0x00007f7748fc4e78:   mov    %ebx,0x4(%rdx)
  0x00007f7748fc4e7b:   add    0x8(%rdx),%edi
  0x00007f7748fc4e7e:   mov    %edi,0x8(%rdx)
  0x00007f7748fc4e81:   add    0xc(%rdx),%esi
  0x00007f7748fc4e84:   mov    %esi,0xc(%rdx)
  0x00007f7748fc4e87:   add    0x10(%rdx),%r8d
  0x00007f7748fc4e8b:   mov    %r8d,0x10(%rdx)
  0x00007f7748fc4e8f:   add    0x14(%rdx),%r9d
  0x00007f7748fc4e93:   mov    %r9d,0x14(%rdx)
  0x00007f7748fc4e97:   add    0x18(%rdx),%r10d
  0x00007f7748fc4e9b:   mov    %r10d,0x18(%rdx)
  0x00007f7748fc4e9f:   add    0x1c(%rdx),%r11d
  0x00007f7748fc4ea3:   mov    %r11d,0x1c(%rdx)
  0x00007f7748fc4ea7:   cmp    0x200(%rsp),%rcx
  0x00007f7748fc4eaf:   ja     Stub::sha256_implCompress+4370 0x00007f7748fc52b2
  0x00007f7748fc4eb5:   xor    %rdx,%rdx
  0x00007f7748fc4eb8:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc4ec0:   mov    %r9d,%r15d
  0x00007f7748fc4ec3:   rorx   $0x19,%r8d,%r13d
  0x00007f7748fc4ec9:   rorx   $0xb,%r8d,%r14d
  0x00007f7748fc4ecf:   xor    %r10d,%r15d
  0x00007f7748fc4ed2:   xor    %r14d,%r13d
  0x00007f7748fc4ed5:   rorx   $0x6,%r8d,%r14d
  0x00007f7748fc4edb:   and    %r8d,%r15d
  0x00007f7748fc4ede:   xor    %r14d,%r13d
  0x00007f7748fc4ee1:   rorx   $0xd,%eax,%r12d
  0x00007f7748fc4ee7:   xor    %r10d,%r15d
  0x00007f7748fc4eea:   rorx   $0x16,%eax,%r14d
  0x00007f7748fc4ef0:   mov    %eax,%ecx
  0x00007f7748fc4ef2:   xor    %r12d,%r14d
  0x00007f7748fc4ef5:   rorx   $0x2,%eax,%r12d
  0x00007f7748fc4efb:   add    0x10(%rsp,%rdx,1),%r11d
  0x00007f7748fc4f00:   or     %edi,%ecx
  0x00007f7748fc4f02:   xor    %r12d,%r14d
  0x00007f7748fc4f05:   mov    %eax,%r12d
  0x00007f7748fc4f08:   and    %ebx,%ecx
  0x00007f7748fc4f0a:   and    %edi,%r12d
  0x00007f7748fc4f0d:   add    %r13d,%r15d
  0x00007f7748fc4f10:   add    %r11d,%esi
  0x00007f7748fc4f13:   or     %r12d,%ecx
  0x00007f7748fc4f16:   add    %r14d,%r11d
  0x00007f7748fc4f19:   add    %r15d,%esi
  0x00007f7748fc4f1c:   add    %r15d,%r11d
  0x00007f7748fc4f1f:   mov    %r8d,%r15d
  0x00007f7748fc4f22:   rorx   $0x19,%esi,%r13d
  0x00007f7748fc4f28:   rorx   $0xb,%esi,%r14d
  0x00007f7748fc4f2e:   xor    %r9d,%r15d
  0x00007f7748fc4f31:   xor    %r14d,%r13d
  0x00007f7748fc4f34:   rorx   $0x6,%esi,%r14d
  0x00007f7748fc4f3a:   and    %esi,%r15d
  0x00007f7748fc4f3d:   add    %ecx,%r11d
  0x00007f7748fc4f40:   xor    %r14d,%r13d
  0x00007f7748fc4f43:   rorx   $0xd,%r11d,%r12d
  0x00007f7748fc4f49:   xor    %r9d,%r15d
  0x00007f7748fc4f4c:   rorx   $0x16,%r11d,%r14d
  0x00007f7748fc4f52:   mov    %r11d,%ecx
  0x00007f7748fc4f55:   xor    %r12d,%r14d
  0x00007f7748fc4f58:   rorx   $0x2,%r11d,%r12d
  0x00007f7748fc4f5e:   add    0x14(%rsp,%rdx,1),%r10d
  0x00007f7748fc4f63:   or     %ebx,%ecx
  0x00007f7748fc4f65:   xor    %r12d,%r14d
  0x00007f7748fc4f68:   mov    %r11d,%r12d
  0x00007f7748fc4f6b:   and    %eax,%ecx
  0x00007f7748fc4f6d:   and    %ebx,%r12d
  0x00007f7748fc4f70:   add    %r13d,%r15d
  0x00007f7748fc4f73:   add    %r10d,%edi
  0x00007f7748fc4f76:   or     %r12d,%ecx
  0x00007f7748fc4f79:   add    %r14d,%r10d
  0x00007f7748fc4f7c:   add    %r15d,%edi
  0x00007f7748fc4f7f:   add    %r15d,%r10d
  0x00007f7748fc4f82:   mov    %esi,%r15d
  0x00007f7748fc4f85:   rorx   $0x19,%edi,%r13d
  0x00007f7748fc4f8b:   rorx   $0xb,%edi,%r14d
  0x00007f7748fc4f91:   xor    %r8d,%r15d
  0x00007f7748fc4f94:   xor    %r14d,%r13d
  0x00007f7748fc4f97:   rorx   $0x6,%edi,%r14d
  0x00007f7748fc4f9d:   and    %edi,%r15d
  0x00007f7748fc4fa0:   add    %ecx,%r10d
  0x00007f7748fc4fa3:   xor    %r14d,%r13d
  0x00007f7748fc4fa6:   rorx   $0xd,%r10d,%r12d
  0x00007f7748fc4fac:   xor    %r8d,%r15d
  0x00007f7748fc4faf:   rorx   $0x16,%r10d,%r14d
  0x00007f7748fc4fb5:   mov    %r10d,%ecx
  0x00007f7748fc4fb8:   xor    %r12d,%r14d
  0x00007f7748fc4fbb:   rorx   $0x2,%r10d,%r12d
  0x00007f7748fc4fc1:   add    0x18(%rsp,%rdx,1),%r9d
  0x00007f7748fc4fc6:   or     %eax,%ecx
  0x00007f7748fc4fc8:   xor    %r12d,%r14d
  0x00007f7748fc4fcb:   mov    %r10d,%r12d
  0x00007f7748fc4fce:   and    %r11d,%ecx
  0x00007f7748fc4fd1:   and    %eax,%r12d
  0x00007f7748fc4fd4:   add    %r13d,%r15d
  0x00007f7748fc4fd7:   add    %r9d,%ebx
  0x00007f7748fc4fda:   or     %r12d,%ecx
  0x00007f7748fc4fdd:   add    %r14d,%r9d
  0x00007f7748fc4fe0:   add    %r15d,%ebx
  0x00007f7748fc4fe3:   add    %r15d,%r9d
  0x00007f7748fc4fe6:   mov    %edi,%r15d
  0x00007f7748fc4fe9:   rorx   $0x19,%ebx,%r13d
  0x00007f7748fc4fef:   rorx   $0xb,%ebx,%r14d
  0x00007f7748fc4ff5:   xor    %esi,%r15d
  0x00007f7748fc4ff8:   xor    %r14d,%r13d
  0x00007f7748fc4ffb:   rorx   $0x6,%ebx,%r14d
  0x00007f7748fc5001:   and    %ebx,%r15d
  0x00007f7748fc5004:   add    %ecx,%r9d
  0x00007f7748fc5007:   xor    %r14d,%r13d
  0x00007f7748fc500a:   rorx   $0xd,%r9d,%r12d
  0x00007f7748fc5010:   xor    %esi,%r15d
  0x00007f7748fc5013:   rorx   $0x16,%r9d,%r14d
  0x00007f7748fc5019:   mov    %r9d,%ecx
  0x00007f7748fc501c:   xor    %r12d,%r14d
  0x00007f7748fc501f:   rorx   $0x2,%r9d,%r12d
  0x00007f7748fc5025:   add    0x1c(%rsp,%rdx,1),%r8d
  0x00007f7748fc502a:   or     %r11d,%ecx
  0x00007f7748fc502d:   xor    %r12d,%r14d
  0x00007f7748fc5030:   mov    %r9d,%r12d
  0x00007f7748fc5033:   and    %r10d,%ecx
  0x00007f7748fc5036:   and    %r11d,%r12d
  0x00007f7748fc5039:   add    %r13d,%r15d
  0x00007f7748fc503c:   add    %r8d,%eax
  0x00007f7748fc503f:   or     %r12d,%ecx
  0x00007f7748fc5042:   add    %r14d,%r8d
  0x00007f7748fc5045:   add    %r15d,%eax
  0x00007f7748fc5048:   add    %r15d,%r8d
  0x00007f7748fc504b:   add    %ecx,%r8d
  0x00007f7748fc504e:   mov    %ebx,%r15d
  0x00007f7748fc5051:   rorx   $0x19,%eax,%r13d
  0x00007f7748fc5057:   rorx   $0xb,%eax,%r14d
  0x00007f7748fc505d:   xor    %edi,%r15d
  0x00007f7748fc5060:   xor    %r14d,%r13d
  0x00007f7748fc5063:   rorx   $0x6,%eax,%r14d
  0x00007f7748fc5069:   and    %eax,%r15d
  0x00007f7748fc506c:   xor    %r14d,%r13d
  0x00007f7748fc506f:   rorx   $0xd,%r8d,%r12d
  0x00007f7748fc5075:   xor    %edi,%r15d
  0x00007f7748fc5078:   rorx   $0x16,%r8d,%r14d
  0x00007f7748fc507e:   mov    %r8d,%ecx
  0x00007f7748fc5081:   xor    %r12d,%r14d
  0x00007f7748fc5084:   rorx   $0x2,%r8d,%r12d
  0x00007f7748fc508a:   add    0x30(%rsp,%rdx,1),%esi
  0x00007f7748fc508e:   or     %r10d,%ecx
  0x00007f7748fc5091:   xor    %r12d,%r14d
  0x00007f7748fc5094:   mov    %r8d,%r12d
  0x00007f7748fc5097:   and    %r9d,%ecx
  0x00007f7748fc509a:   and    %r10d,%r12d
  0x00007f7748fc509d:   add    %r13d,%r15d
  0x00007f7748fc50a0:   add    %esi,%r11d
  0x00007f7748fc50a3:   or     %r12d,%ecx
  0x00007f7748fc50a6:   add    %r14d,%esi
  0x00007f7748fc50a9:   add    %r15d,%r11d
  0x00007f7748fc50ac:   add    %r15d,%esi
  0x00007f7748fc50af:   mov    %eax,%r15d
  0x00007f7748fc50b2:   rorx   $0x19,%r11d,%r13d
  0x00007f7748fc50b8:   rorx   $0xb,%r11d,%r14d
  0x00007f7748fc50be:   xor    %ebx,%r15d
  0x00007f7748fc50c1:   xor    %r14d,%r13d
  0x00007f7748fc50c4:   rorx   $0x6,%r11d,%r14d
  0x00007f7748fc50ca:   and    %r11d,%r15d
  0x00007f7748fc50cd:   add    %ecx,%esi
  0x00007f7748fc50cf:   xor    %r14d,%r13d
  0x00007f7748fc50d2:   rorx   $0xd,%esi,%r12d
  0x00007f7748fc50d8:   xor    %ebx,%r15d
  0x00007f7748fc50db:   rorx   $0x16,%esi,%r14d
  0x00007f7748fc50e1:   mov    %esi,%ecx
  0x00007f7748fc50e3:   xor    %r12d,%r14d
  0x00007f7748fc50e6:   rorx   $0x2,%esi,%r12d
  0x00007f7748fc50ec:   add    0x34(%rsp,%rdx,1),%edi
  0x00007f7748fc50f0:   or     %r9d,%ecx
  0x00007f7748fc50f3:   xor    %r12d,%r14d
  0x00007f7748fc50f6:   mov    %esi,%r12d
  0x00007f7748fc50f9:   and    %r8d,%ecx
  0x00007f7748fc50fc:   and    %r9d,%r12d
  0x00007f7748fc50ff:   add    %r13d,%r15d
  0x00007f7748fc5102:   add    %edi,%r10d
  0x00007f7748fc5105:   or     %r12d,%ecx
  0x00007f7748fc5108:   add    %r14d,%edi
  0x00007f7748fc510b:   add    %r15d,%r10d
  0x00007f7748fc510e:   add    %r15d,%edi
  0x00007f7748fc5111:   mov    %r11d,%r15d
  0x00007f7748fc5114:   rorx   $0x19,%r10d,%r13d
  0x00007f7748fc511a:   rorx   $0xb,%r10d,%r14d
  0x00007f7748fc5120:   xor    %eax,%r15d
  0x00007f7748fc5123:   xor    %r14d,%r13d
  0x00007f7748fc5126:   rorx   $0x6,%r10d,%r14d
  0x00007f7748fc512c:   and    %r10d,%r15d
  0x00007f7748fc512f:   add    %ecx,%edi
  0x00007f7748fc5131:   xor    %r14d,%r13d
  0x00007f7748fc5134:   rorx   $0xd,%edi,%r12d
  0x00007f7748fc513a:   xor    %eax,%r15d
  0x00007f7748fc513d:   rorx   $0x16,%edi,%r14d
  0x00007f7748fc5143:   mov    %edi,%ecx
  0x00007f7748fc5145:   xor    %r12d,%r14d
  0x00007f7748fc5148:   rorx   $0x2,%edi,%r12d
  0x00007f7748fc514e:   add    0x38(%rsp,%rdx,1),%ebx
  0x00007f7748fc5152:   or     %r8d,%ecx
  0x00007f7748fc5155:   xor    %r12d,%r14d
  0x00007f7748fc5158:   mov    %edi,%r12d
  0x00007f7748fc515b:   and    %esi,%ecx
  0x00007f7748fc515d:   and    %r8d,%r12d
  0x00007f7748fc5160:   add    %r13d,%r15d
  0x00007f7748fc5163:   add    %ebx,%r9d
  0x00007f7748fc5166:   or     %r12d,%ecx
  0x00007f7748fc5169:   add    %r14d,%ebx
  0x00007f7748fc516c:   add    %r15d,%r9d
  0x00007f7748fc516f:   add    %r15d,%ebx
  0x00007f7748fc5172:   mov    %r10d,%r15d
  0x00007f7748fc5175:   rorx   $0x19,%r9d,%r13d
  0x00007f7748fc517b:   rorx   $0xb,%r9d,%r14d
  0x00007f7748fc5181:   xor    %r11d,%r15d
  0x00007f7748fc5184:   xor    %r14d,%r13d
  0x00007f7748fc5187:   rorx   $0x6,%r9d,%r14d
  0x00007f7748fc518d:   and    %r9d,%r15d
  0x00007f7748fc5190:   add    %ecx,%ebx
  0x00007f7748fc5192:   xor    %r14d,%r13d
  0x00007f7748fc5195:   rorx   $0xd,%ebx,%r12d
  0x00007f7748fc519b:   xor    %r11d,%r15d
  0x00007f7748fc519e:   rorx   $0x16,%ebx,%r14d
  0x00007f7748fc51a4:   mov    %ebx,%ecx
  0x00007f7748fc51a6:   xor    %r12d,%r14d
  0x00007f7748fc51a9:   rorx   $0x2,%ebx,%r12d
  0x00007f7748fc51af:   add    0x3c(%rsp,%rdx,1),%eax
  0x00007f7748fc51b3:   or     %esi,%ecx
  0x00007f7748fc51b5:   xor    %r12d,%r14d
  0x00007f7748fc51b8:   mov    %ebx,%r12d
  0x00007f7748fc51bb:   and    %edi,%ecx
  0x00007f7748fc51bd:   and    %esi,%r12d
  0x00007f7748fc51c0:   add    %r13d,%r15d
  0x00007f7748fc51c3:   add    %eax,%r8d
  0x00007f7748fc51c6:   or     %r12d,%ecx
  0x00007f7748fc51c9:   add    %r14d,%eax
  0x00007f7748fc51cc:   add    %r15d,%r8d
  0x00007f7748fc51cf:   add    %r15d,%eax
  0x00007f7748fc51d2:   add    %ecx,%eax
  0x00007f7748fc51d4:   add    $0x40,%rdx
  0x00007f7748fc51d8:   cmp    $0x200,%rdx
  0x00007f7748fc51df:   jb     Stub::sha256_implCompress+3360 0x00007f7748fc4ec0
  0x00007f7748fc51e5:   mov    0x210(%rsp),%rdx
  0x00007f7748fc51ed:   mov    0x208(%rsp),%rcx
  0x00007f7748fc51f5:   add    $0x40,%rcx
  0x00007f7748fc51f9:   add    (%rdx),%eax
  0x00007f7748fc51fb:   mov    %eax,(%rdx)
  0x00007f7748fc51fd:   add    0x4(%rdx),%ebx
  0x00007f7748fc5200:   mov    %ebx,0x4(%rdx)
  0x00007f7748fc5203:   add    0x8(%rdx),%edi
  0x00007f7748fc5206:   mov    %edi,0x8(%rdx)
  0x00007f7748fc5209:   add    0xc(%rdx),%esi
  0x00007f7748fc520c:   mov    %esi,0xc(%rdx)
  0x00007f7748fc520f:   add    0x10(%rdx),%r8d
  0x00007f7748fc5213:   mov    %r8d,0x10(%rdx)
  0x00007f7748fc5217:   add    0x14(%rdx),%r9d
  0x00007f7748fc521b:   mov    %r9d,0x14(%rdx)
  0x00007f7748fc521f:   add    0x18(%rdx),%r10d
  0x00007f7748fc5223:   mov    %r10d,0x18(%rdx)
  0x00007f7748fc5227:   add    0x1c(%rdx),%r11d
  0x00007f7748fc522b:   mov    %r11d,0x1c(%rdx)
  0x00007f7748fc522f:   cmp    0x200(%rsp),%rcx
  0x00007f7748fc5237:   jb     Stub::sha256_implCompress+148 0x00007f7748fc4234
  0x00007f7748fc523d:   ja     Stub::sha256_implCompress+4370 0x00007f7748fc52b2
  0x00007f7748fc523f:   movabs $0x7f774d6924c0,%rbp
  0x00007f7748fc5249:   vmovdqu (%rcx),%xmm4
  0x00007f7748fc524d:   vmovdqu 0x10(%rcx),%xmm5
  0x00007f7748fc5252:   vmovdqu 0x20(%rcx),%xmm6
  0x00007f7748fc5257:   vmovdqu 0x30(%rcx),%xmm7
  0x00007f7748fc525c:   vpshufb %xmm13,%xmm4,%xmm4
  0x00007f7748fc5261:   vpshufb %xmm13,%xmm5,%xmm5
  0x00007f7748fc5266:   vpshufb %xmm13,%xmm6,%xmm6
  0x00007f7748fc526b:   vpshufb %xmm13,%xmm7,%xmm7
  0x00007f7748fc5270:   jmpq   Stub::sha256_implCompress+221 0x00007f7748fc427d
  0x00007f7748fc5275:   mov    (%rdx),%eax
  0x00007f7748fc5277:   mov    0x4(%rdx),%ebx
  0x00007f7748fc527a:   mov    0x8(%rdx),%edi
  0x00007f7748fc527d:   mov    0xc(%rdx),%esi
  0x00007f7748fc5280:   mov    0x10(%rdx),%r8d
  0x00007f7748fc5284:   mov    0x14(%rdx),%r9d
  0x00007f7748fc5288:   mov    0x1c(%rdx),%r11d
  0x00007f7748fc528c:   vmovdqu -0x1154(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007f7748fc5294:   vmovdqu -0x113c(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007f7748fc4160
  0x00007f7748fc529c:   vmovdqu -0x1124(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007f7748fc4180
  0x00007f7748fc52a4:   mov    0x18(%rdx),%r10d
  0x00007f7748fc52a8:   mov    %rdx,0x210(%rsp)
  0x00007f7748fc52b0:   jmp    Stub::sha256_implCompress+4255 0x00007f7748fc523f
  0x00007f7748fc52b2:   mov    0x218(%rsp),%rsp
  0x00007f7748fc52ba:   pop    %r15
  0x00007f7748fc52bc:   pop    %r14
  0x00007f7748fc52be:   pop    %r13
  0x00007f7748fc52c0:   pop    %r12
  0x00007f7748fc52c2:   pop    %rbp
  0x00007f7748fc52c3:   pop    %rbx
  0x00007f7748fc52c4:   pop    %rdx
  0x00007f7748fc52c5:   pop    %rcx
  0x00007f7748fc52c6:   add    $0x20,%rsp
  0x00007f7748fc52ca:   vzeroupper 
  0x00007f7748fc52cd:   leaveq 
  0x00007f7748fc52ce:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha256_implCompressMB [0x00007f7748fc52e0, 0x00007f7748fc643d] (4445 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc52e0:   push   %rbp
  0x00007f7748fc52e1:   mov    %rsp,%rbp
  0x00007f7748fc52e4:   sub    $0x20,%rsp
  0x00007f7748fc52e8:   push   %rcx
  0x00007f7748fc52e9:   push   %rdx
  0x00007f7748fc52ea:   push   %rbx
  0x00007f7748fc52eb:   push   %rbp
  0x00007f7748fc52ec:   push   %r12
  0x00007f7748fc52ee:   push   %r13
  0x00007f7748fc52f0:   push   %r14
  0x00007f7748fc52f2:   push   %r15
  0x00007f7748fc52f4:   mov    %rsp,%rax
  0x00007f7748fc52f7:   sub    $0x220,%rsp
  0x00007f7748fc52fe:   and    $0xffffffffffffffe0,%rsp
  0x00007f7748fc5302:   mov    %rax,0x218(%rsp)
  0x00007f7748fc530a:   mov    %rcx,%r9
  0x00007f7748fc530d:   mov    %rdx,%r8
  0x00007f7748fc5310:   mov    %rsi,%rdx
  0x00007f7748fc5313:   mov    %rdi,%rcx
  0x00007f7748fc5316:   lea    (%rcx),%rcx
  0x00007f7748fc5319:   mov    %rdx,%rdx
  0x00007f7748fc531c:   xor    %rax,%rax
  0x00007f7748fc531f:   cmp    %r9,%r8
  0x00007f7748fc5322:   jae    Stub::sha256_implCompressMB+78 0x00007f7748fc532e
  0x00007f7748fc5324:   add    $0x40,%r8
  0x00007f7748fc5328:   add    $0x40,%rax
  0x00007f7748fc532c:   jmp    Stub::sha256_implCompressMB+63 0x00007f7748fc531f
  0x00007f7748fc532e:   mov    %rax,%r8
  0x00007f7748fc5331:   cmp    $0x0,%r8
  0x00007f7748fc5335:   je     Stub::sha256_implCompressMB+4402 0x00007f7748fc6412
  0x00007f7748fc533b:   lea    -0x40(%rcx,%r8,1),%r8
  0x00007f7748fc5340:   mov    %r8,0x200(%rsp)
  0x00007f7748fc5348:   cmp    %r8,%rcx
  0x00007f7748fc534b:   je     Stub::sha256_implCompressMB+4341 0x00007f7748fc63d5
  0x00007f7748fc5351:   mov    (%rdx),%eax
  0x00007f7748fc5353:   mov    0x4(%rdx),%ebx
  0x00007f7748fc5356:   mov    0x8(%rdx),%edi
  0x00007f7748fc5359:   mov    0xc(%rdx),%esi
  0x00007f7748fc535c:   mov    0x10(%rdx),%r8d
  0x00007f7748fc5360:   mov    0x14(%rdx),%r9d
  0x00007f7748fc5364:   mov    0x1c(%rdx),%r11d
  0x00007f7748fc5368:   vmovdqu -0x1230(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007f7748fc5370:   vmovdqu -0x1218(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007f7748fc4160
  0x00007f7748fc5378:   vmovdqu -0x1200(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007f7748fc4180
  0x00007f7748fc5380:   mov    0x18(%rdx),%r10d
  0x00007f7748fc5384:   mov    %rdx,0x210(%rsp)
  0x00007f7748fc538c:   movabs $0x7f774d6924c0,%rbp
  0x00007f7748fc5396:   vmovdqu (%rcx),%ymm0
  0x00007f7748fc539a:   vmovdqu 0x20(%rcx),%ymm1
  0x00007f7748fc539f:   vmovdqu 0x40(%rcx),%ymm2
  0x00007f7748fc53a4:   vmovdqu 0x60(%rcx),%ymm3
  0x00007f7748fc53a9:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007f7748fc53ae:   vpshufb %ymm13,%ymm1,%ymm1
  0x00007f7748fc53b3:   vpshufb %ymm13,%ymm2,%ymm2
  0x00007f7748fc53b8:   vpshufb %ymm13,%ymm3,%ymm3
  0x00007f7748fc53bd:   vperm2i128 $0x20,%ymm2,%ymm0,%ymm4
  0x00007f7748fc53c3:   vperm2i128 $0x31,%ymm2,%ymm0,%ymm5
  0x00007f7748fc53c9:   vperm2i128 $0x20,%ymm3,%ymm1,%ymm6
  0x00007f7748fc53cf:   vperm2i128 $0x31,%ymm3,%ymm1,%ymm7
  0x00007f7748fc53d5:   add    $0x40,%rcx
  0x00007f7748fc53d9:   mov    %rcx,0x208(%rsp)
  0x00007f7748fc53e1:   xor    %rdx,%rdx
  0x00007f7748fc53e4:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc53ec:   data16 data16 xchg %ax,%ax
  0x00007f7748fc53f0:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007f7748fc53f6:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007f7748fc53fb:   mov    %eax,%ecx
  0x00007f7748fc53fd:   rorx   $0x19,%r8d,%r13d
  0x00007f7748fc5403:   rorx   $0xb,%r8d,%r14d
  0x00007f7748fc5409:   add    (%rsp,%rdx,1),%r11d
  0x00007f7748fc540d:   or     %edi,%ecx
  0x00007f7748fc540f:   mov    %r9d,%r15d
  0x00007f7748fc5412:   rorx   $0xd,%eax,%r12d
  0x00007f7748fc5418:   xor    %r14d,%r13d
  0x00007f7748fc541b:   xor    %r10d,%r15d
  0x00007f7748fc541e:   rorx   $0x6,%r8d,%r14d
  0x00007f7748fc5424:   and    %r8d,%r15d
  0x00007f7748fc5427:   xor    %r14d,%r13d
  0x00007f7748fc542a:   rorx   $0x16,%eax,%r14d
  0x00007f7748fc5430:   add    %r11d,%esi
  0x00007f7748fc5433:   and    %ebx,%ecx
  0x00007f7748fc5435:   xor    %r12d,%r14d
  0x00007f7748fc5438:   rorx   $0x2,%eax,%r12d
  0x00007f7748fc543e:   xor    %r10d,%r15d
  0x00007f7748fc5441:   xor    %r12d,%r14d
  0x00007f7748fc5444:   mov    %eax,%r12d
  0x00007f7748fc5447:   and    %edi,%r12d
  0x00007f7748fc544a:   add    %r13d,%r15d
  0x00007f7748fc544d:   or     %r12d,%ecx
  0x00007f7748fc5450:   add    %r14d,%r11d
  0x00007f7748fc5453:   add    %r15d,%esi
  0x00007f7748fc5456:   add    %r15d,%r11d
  0x00007f7748fc5459:   add    %ecx,%r11d
  0x00007f7748fc545c:   vpalignr $0x4,%ymm6,%ymm7,%ymm0
  0x00007f7748fc5462:   vpaddd %ymm4,%ymm0,%ymm0
  0x00007f7748fc5466:   vpalignr $0x4,%ymm4,%ymm5,%ymm1
  0x00007f7748fc546c:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f7748fc5471:   vpslld $0x19,%ymm1,%ymm3
  0x00007f7748fc5476:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc547a:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f7748fc547f:   mov    %r11d,%ecx
  0x00007f7748fc5482:   rorx   $0x19,%esi,%r13d
  0x00007f7748fc5488:   rorx   $0xb,%esi,%r14d
  0x00007f7748fc548e:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007f7748fc5493:   or     %ebx,%ecx
  0x00007f7748fc5495:   mov    %r8d,%r15d
  0x00007f7748fc5498:   rorx   $0xd,%r11d,%r12d
  0x00007f7748fc549e:   xor    %r14d,%r13d
  0x00007f7748fc54a1:   xor    %r9d,%r15d
  0x00007f7748fc54a4:   rorx   $0x6,%esi,%r14d
  0x00007f7748fc54aa:   and    %esi,%r15d
  0x00007f7748fc54ad:   xor    %r14d,%r13d
  0x00007f7748fc54b0:   rorx   $0x16,%r11d,%r14d
  0x00007f7748fc54b6:   add    %r10d,%edi
  0x00007f7748fc54b9:   and    %eax,%ecx
  0x00007f7748fc54bb:   xor    %r12d,%r14d
  0x00007f7748fc54be:   rorx   $0x2,%r11d,%r12d
  0x00007f7748fc54c4:   xor    %r9d,%r15d
  0x00007f7748fc54c7:   xor    %r12d,%r14d
  0x00007f7748fc54ca:   mov    %r11d,%r12d
  0x00007f7748fc54cd:   and    %ebx,%r12d
  0x00007f7748fc54d0:   add    %r13d,%r15d
  0x00007f7748fc54d3:   or     %r12d,%ecx
  0x00007f7748fc54d6:   add    %r14d,%r10d
  0x00007f7748fc54d9:   add    %r15d,%edi
  0x00007f7748fc54dc:   add    %r15d,%r10d
  0x00007f7748fc54df:   add    %ecx,%r10d
  0x00007f7748fc54e2:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f7748fc54e7:   vpslld $0xe,%ymm1,%ymm1
  0x00007f7748fc54ec:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f7748fc54f0:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f7748fc54f4:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f7748fc54f9:   vpshufd $0xfa,%ymm7,%ymm2
  0x00007f7748fc54fe:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f7748fc5502:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f7748fc5507:   mov    %r10d,%ecx
  0x00007f7748fc550a:   rorx   $0x19,%edi,%r13d
  0x00007f7748fc5510:   rorx   $0xb,%edi,%r14d
  0x00007f7748fc5516:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007f7748fc551b:   or     %eax,%ecx
  0x00007f7748fc551d:   mov    %esi,%r15d
  0x00007f7748fc5520:   rorx   $0xd,%r10d,%r12d
  0x00007f7748fc5526:   xor    %r14d,%r13d
  0x00007f7748fc5529:   xor    %r8d,%r15d
  0x00007f7748fc552c:   rorx   $0x6,%edi,%r14d
  0x00007f7748fc5532:   and    %edi,%r15d
  0x00007f7748fc5535:   xor    %r14d,%r13d
  0x00007f7748fc5538:   rorx   $0x16,%r10d,%r14d
  0x00007f7748fc553e:   add    %r9d,%ebx
  0x00007f7748fc5541:   and    %r11d,%ecx
  0x00007f7748fc5544:   xor    %r12d,%r14d
  0x00007f7748fc5547:   rorx   $0x2,%r10d,%r12d
  0x00007f7748fc554d:   xor    %r8d,%r15d
  0x00007f7748fc5550:   xor    %r12d,%r14d
  0x00007f7748fc5553:   mov    %r10d,%r12d
  0x00007f7748fc5556:   and    %eax,%r12d
  0x00007f7748fc5559:   add    %r13d,%r15d
  0x00007f7748fc555c:   or     %r12d,%ecx
  0x00007f7748fc555f:   add    %r14d,%r9d
  0x00007f7748fc5562:   add    %r15d,%ebx
  0x00007f7748fc5565:   add    %r15d,%r9d
  0x00007f7748fc5568:   add    %ecx,%r9d
  0x00007f7748fc556b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc5570:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc5575:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc5579:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f7748fc557d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f7748fc5582:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f7748fc5587:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f7748fc558c:   mov    %r9d,%ecx
  0x00007f7748fc558f:   rorx   $0x19,%ebx,%r13d
  0x00007f7748fc5595:   rorx   $0xb,%ebx,%r14d
  0x00007f7748fc559b:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007f7748fc55a0:   or     %r11d,%ecx
  0x00007f7748fc55a3:   mov    %edi,%r15d
  0x00007f7748fc55a6:   rorx   $0xd,%r9d,%r12d
  0x00007f7748fc55ac:   xor    %r14d,%r13d
  0x00007f7748fc55af:   xor    %esi,%r15d
  0x00007f7748fc55b2:   rorx   $0x6,%ebx,%r14d
  0x00007f7748fc55b8:   and    %ebx,%r15d
  0x00007f7748fc55bb:   xor    %r14d,%r13d
  0x00007f7748fc55be:   rorx   $0x16,%r9d,%r14d
  0x00007f7748fc55c4:   add    %r8d,%eax
  0x00007f7748fc55c7:   and    %r10d,%ecx
  0x00007f7748fc55ca:   xor    %r12d,%r14d
  0x00007f7748fc55cd:   rorx   $0x2,%r9d,%r12d
  0x00007f7748fc55d3:   xor    %esi,%r15d
  0x00007f7748fc55d6:   xor    %r12d,%r14d
  0x00007f7748fc55d9:   mov    %r9d,%r12d
  0x00007f7748fc55dc:   and    %r11d,%r12d
  0x00007f7748fc55df:   add    %r13d,%r15d
  0x00007f7748fc55e2:   or     %r12d,%ecx
  0x00007f7748fc55e5:   add    %r14d,%r8d
  0x00007f7748fc55e8:   add    %r15d,%eax
  0x00007f7748fc55eb:   add    %r15d,%r8d
  0x00007f7748fc55ee:   add    %ecx,%r8d
  0x00007f7748fc55f1:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f7748fc55f6:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc55fb:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc5600:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc5604:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f7748fc5608:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f7748fc560d:   vpaddd %ymm0,%ymm11,%ymm4
  0x00007f7748fc5611:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007f7748fc5617:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007f7748fc561d:   mov    %r8d,%ecx
  0x00007f7748fc5620:   rorx   $0x19,%eax,%r13d
  0x00007f7748fc5626:   rorx   $0xb,%eax,%r14d
  0x00007f7748fc562c:   add    0x20(%rsp,%rdx,1),%esi
  0x00007f7748fc5630:   or     %r10d,%ecx
  0x00007f7748fc5633:   mov    %ebx,%r15d
  0x00007f7748fc5636:   rorx   $0xd,%r8d,%r12d
  0x00007f7748fc563c:   xor    %r14d,%r13d
  0x00007f7748fc563f:   xor    %edi,%r15d
  0x00007f7748fc5642:   rorx   $0x6,%eax,%r14d
  0x00007f7748fc5648:   and    %eax,%r15d
  0x00007f7748fc564b:   xor    %r14d,%r13d
  0x00007f7748fc564e:   rorx   $0x16,%r8d,%r14d
  0x00007f7748fc5654:   add    %esi,%r11d
  0x00007f7748fc5657:   and    %r9d,%ecx
  0x00007f7748fc565a:   xor    %r12d,%r14d
  0x00007f7748fc565d:   rorx   $0x2,%r8d,%r12d
  0x00007f7748fc5663:   xor    %edi,%r15d
  0x00007f7748fc5666:   xor    %r12d,%r14d
  0x00007f7748fc5669:   mov    %r8d,%r12d
  0x00007f7748fc566c:   and    %r10d,%r12d
  0x00007f7748fc566f:   add    %r13d,%r15d
  0x00007f7748fc5672:   or     %r12d,%ecx
  0x00007f7748fc5675:   add    %r14d,%esi
  0x00007f7748fc5678:   add    %r15d,%r11d
  0x00007f7748fc567b:   add    %r15d,%esi
  0x00007f7748fc567e:   add    %ecx,%esi
  0x00007f7748fc5680:   vpalignr $0x4,%ymm7,%ymm4,%ymm0
  0x00007f7748fc5686:   vpaddd %ymm5,%ymm0,%ymm0
  0x00007f7748fc568a:   vpalignr $0x4,%ymm5,%ymm6,%ymm1
  0x00007f7748fc5690:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f7748fc5695:   vpslld $0x19,%ymm1,%ymm3
  0x00007f7748fc569a:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc569e:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f7748fc56a3:   mov    %esi,%ecx
  0x00007f7748fc56a5:   rorx   $0x19,%r11d,%r13d
  0x00007f7748fc56ab:   rorx   $0xb,%r11d,%r14d
  0x00007f7748fc56b1:   add    0x24(%rsp,%rdx,1),%edi
  0x00007f7748fc56b5:   or     %r9d,%ecx
  0x00007f7748fc56b8:   mov    %eax,%r15d
  0x00007f7748fc56bb:   rorx   $0xd,%esi,%r12d
  0x00007f7748fc56c1:   xor    %r14d,%r13d
  0x00007f7748fc56c4:   xor    %ebx,%r15d
  0x00007f7748fc56c7:   rorx   $0x6,%r11d,%r14d
  0x00007f7748fc56cd:   and    %r11d,%r15d
  0x00007f7748fc56d0:   xor    %r14d,%r13d
  0x00007f7748fc56d3:   rorx   $0x16,%esi,%r14d
  0x00007f7748fc56d9:   add    %edi,%r10d
  0x00007f7748fc56dc:   and    %r8d,%ecx
  0x00007f7748fc56df:   xor    %r12d,%r14d
  0x00007f7748fc56e2:   rorx   $0x2,%esi,%r12d
  0x00007f7748fc56e8:   xor    %ebx,%r15d
  0x00007f7748fc56eb:   xor    %r12d,%r14d
  0x00007f7748fc56ee:   mov    %esi,%r12d
  0x00007f7748fc56f1:   and    %r9d,%r12d
  0x00007f7748fc56f4:   add    %r13d,%r15d
  0x00007f7748fc56f7:   or     %r12d,%ecx
  0x00007f7748fc56fa:   add    %r14d,%edi
  0x00007f7748fc56fd:   add    %r15d,%r10d
  0x00007f7748fc5700:   add    %r15d,%edi
  0x00007f7748fc5703:   add    %ecx,%edi
  0x00007f7748fc5705:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f7748fc570a:   vpslld $0xe,%ymm1,%ymm1
  0x00007f7748fc570f:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f7748fc5713:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f7748fc5717:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f7748fc571c:   vpshufd $0xfa,%ymm4,%ymm2
  0x00007f7748fc5721:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f7748fc5725:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f7748fc572a:   mov    %edi,%ecx
  0x00007f7748fc572c:   rorx   $0x19,%r10d,%r13d
  0x00007f7748fc5732:   rorx   $0xb,%r10d,%r14d
  0x00007f7748fc5738:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007f7748fc573c:   or     %r8d,%ecx
  0x00007f7748fc573f:   mov    %r11d,%r15d
  0x00007f7748fc5742:   rorx   $0xd,%edi,%r12d
  0x00007f7748fc5748:   xor    %r14d,%r13d
  0x00007f7748fc574b:   xor    %eax,%r15d
  0x00007f7748fc574e:   rorx   $0x6,%r10d,%r14d
  0x00007f7748fc5754:   and    %r10d,%r15d
  0x00007f7748fc5757:   xor    %r14d,%r13d
  0x00007f7748fc575a:   rorx   $0x16,%edi,%r14d
  0x00007f7748fc5760:   add    %ebx,%r9d
  0x00007f7748fc5763:   and    %esi,%ecx
  0x00007f7748fc5765:   xor    %r12d,%r14d
  0x00007f7748fc5768:   rorx   $0x2,%edi,%r12d
  0x00007f7748fc576e:   xor    %eax,%r15d
  0x00007f7748fc5771:   xor    %r12d,%r14d
  0x00007f7748fc5774:   mov    %edi,%r12d
  0x00007f7748fc5777:   and    %r8d,%r12d
  0x00007f7748fc577a:   add    %r13d,%r15d
  0x00007f7748fc577d:   or     %r12d,%ecx
  0x00007f7748fc5780:   add    %r14d,%ebx
  0x00007f7748fc5783:   add    %r15d,%r9d
  0x00007f7748fc5786:   add    %r15d,%ebx
  0x00007f7748fc5789:   add    %ecx,%ebx
  0x00007f7748fc578b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc5790:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc5795:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc5799:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f7748fc579d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f7748fc57a2:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f7748fc57a7:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f7748fc57ac:   mov    %ebx,%ecx
  0x00007f7748fc57ae:   rorx   $0x19,%r9d,%r13d
  0x00007f7748fc57b4:   rorx   $0xb,%r9d,%r14d
  0x00007f7748fc57ba:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007f7748fc57be:   or     %esi,%ecx
  0x00007f7748fc57c0:   mov    %r10d,%r15d
  0x00007f7748fc57c3:   rorx   $0xd,%ebx,%r12d
  0x00007f7748fc57c9:   xor    %r14d,%r13d
  0x00007f7748fc57cc:   xor    %r11d,%r15d
  0x00007f7748fc57cf:   rorx   $0x6,%r9d,%r14d
  0x00007f7748fc57d5:   and    %r9d,%r15d
  0x00007f7748fc57d8:   xor    %r14d,%r13d
  0x00007f7748fc57db:   rorx   $0x16,%ebx,%r14d
  0x00007f7748fc57e1:   add    %eax,%r8d
  0x00007f7748fc57e4:   and    %edi,%ecx
  0x00007f7748fc57e6:   xor    %r12d,%r14d
  0x00007f7748fc57e9:   rorx   $0x2,%ebx,%r12d
  0x00007f7748fc57ef:   xor    %r11d,%r15d
  0x00007f7748fc57f2:   xor    %r12d,%r14d
  0x00007f7748fc57f5:   mov    %ebx,%r12d
  0x00007f7748fc57f8:   and    %esi,%r12d
  0x00007f7748fc57fb:   add    %r13d,%r15d
  0x00007f7748fc57fe:   or     %r12d,%ecx
  0x00007f7748fc5801:   add    %r14d,%eax
  0x00007f7748fc5804:   add    %r15d,%r8d
  0x00007f7748fc5807:   add    %r15d,%eax
  0x00007f7748fc580a:   add    %ecx,%eax
  0x00007f7748fc580c:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f7748fc5811:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc5816:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc581b:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc581f:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f7748fc5823:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f7748fc5828:   vpaddd %ymm0,%ymm11,%ymm5
  0x00007f7748fc582c:   vpaddd 0x40(%rbp,%rdx,1),%ymm6,%ymm9
  0x00007f7748fc5832:   vmovdqu %ymm9,0x40(%rsp,%rdx,1)
  0x00007f7748fc5838:   mov    %eax,%ecx
  0x00007f7748fc583a:   rorx   $0x19,%r8d,%r13d
  0x00007f7748fc5840:   rorx   $0xb,%r8d,%r14d
  0x00007f7748fc5846:   add    0x40(%rsp,%rdx,1),%r11d
  0x00007f7748fc584b:   or     %edi,%ecx
  0x00007f7748fc584d:   mov    %r9d,%r15d
  0x00007f7748fc5850:   rorx   $0xd,%eax,%r12d
  0x00007f7748fc5856:   xor    %r14d,%r13d
  0x00007f7748fc5859:   xor    %r10d,%r15d
  0x00007f7748fc585c:   rorx   $0x6,%r8d,%r14d
  0x00007f7748fc5862:   and    %r8d,%r15d
  0x00007f7748fc5865:   xor    %r14d,%r13d
  0x00007f7748fc5868:   rorx   $0x16,%eax,%r14d
  0x00007f7748fc586e:   add    %r11d,%esi
  0x00007f7748fc5871:   and    %ebx,%ecx
  0x00007f7748fc5873:   xor    %r12d,%r14d
  0x00007f7748fc5876:   rorx   $0x2,%eax,%r12d
  0x00007f7748fc587c:   xor    %r10d,%r15d
  0x00007f7748fc587f:   xor    %r12d,%r14d
  0x00007f7748fc5882:   mov    %eax,%r12d
  0x00007f7748fc5885:   and    %edi,%r12d
  0x00007f7748fc5888:   add    %r13d,%r15d
  0x00007f7748fc588b:   or     %r12d,%ecx
  0x00007f7748fc588e:   add    %r14d,%r11d
  0x00007f7748fc5891:   add    %r15d,%esi
  0x00007f7748fc5894:   add    %r15d,%r11d
  0x00007f7748fc5897:   add    %ecx,%r11d
  0x00007f7748fc589a:   vpalignr $0x4,%ymm4,%ymm5,%ymm0
  0x00007f7748fc58a0:   vpaddd %ymm6,%ymm0,%ymm0
  0x00007f7748fc58a4:   vpalignr $0x4,%ymm6,%ymm7,%ymm1
  0x00007f7748fc58aa:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f7748fc58af:   vpslld $0x19,%ymm1,%ymm3
  0x00007f7748fc58b4:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc58b8:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f7748fc58bd:   mov    %r11d,%ecx
  0x00007f7748fc58c0:   rorx   $0x19,%esi,%r13d
  0x00007f7748fc58c6:   rorx   $0xb,%esi,%r14d
  0x00007f7748fc58cc:   add    0x44(%rsp,%rdx,1),%r10d
  0x00007f7748fc58d1:   or     %ebx,%ecx
  0x00007f7748fc58d3:   mov    %r8d,%r15d
  0x00007f7748fc58d6:   rorx   $0xd,%r11d,%r12d
  0x00007f7748fc58dc:   xor    %r14d,%r13d
  0x00007f7748fc58df:   xor    %r9d,%r15d
  0x00007f7748fc58e2:   rorx   $0x6,%esi,%r14d
  0x00007f7748fc58e8:   and    %esi,%r15d
  0x00007f7748fc58eb:   xor    %r14d,%r13d
  0x00007f7748fc58ee:   rorx   $0x16,%r11d,%r14d
  0x00007f7748fc58f4:   add    %r10d,%edi
  0x00007f7748fc58f7:   and    %eax,%ecx
  0x00007f7748fc58f9:   xor    %r12d,%r14d
  0x00007f7748fc58fc:   rorx   $0x2,%r11d,%r12d
  0x00007f7748fc5902:   xor    %r9d,%r15d
  0x00007f7748fc5905:   xor    %r12d,%r14d
  0x00007f7748fc5908:   mov    %r11d,%r12d
  0x00007f7748fc590b:   and    %ebx,%r12d
  0x00007f7748fc590e:   add    %r13d,%r15d
  0x00007f7748fc5911:   or     %r12d,%ecx
  0x00007f7748fc5914:   add    %r14d,%r10d
  0x00007f7748fc5917:   add    %r15d,%edi
  0x00007f7748fc591a:   add    %r15d,%r10d
  0x00007f7748fc591d:   add    %ecx,%r10d
  0x00007f7748fc5920:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f7748fc5925:   vpslld $0xe,%ymm1,%ymm1
  0x00007f7748fc592a:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f7748fc592e:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f7748fc5932:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f7748fc5937:   vpshufd $0xfa,%ymm5,%ymm2
  0x00007f7748fc593c:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f7748fc5940:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f7748fc5945:   mov    %r10d,%ecx
  0x00007f7748fc5948:   rorx   $0x19,%edi,%r13d
  0x00007f7748fc594e:   rorx   $0xb,%edi,%r14d
  0x00007f7748fc5954:   add    0x48(%rsp,%rdx,1),%r9d
  0x00007f7748fc5959:   or     %eax,%ecx
  0x00007f7748fc595b:   mov    %esi,%r15d
  0x00007f7748fc595e:   rorx   $0xd,%r10d,%r12d
  0x00007f7748fc5964:   xor    %r14d,%r13d
  0x00007f7748fc5967:   xor    %r8d,%r15d
  0x00007f7748fc596a:   rorx   $0x6,%edi,%r14d
  0x00007f7748fc5970:   and    %edi,%r15d
  0x00007f7748fc5973:   xor    %r14d,%r13d
  0x00007f7748fc5976:   rorx   $0x16,%r10d,%r14d
  0x00007f7748fc597c:   add    %r9d,%ebx
  0x00007f7748fc597f:   and    %r11d,%ecx
  0x00007f7748fc5982:   xor    %r12d,%r14d
  0x00007f7748fc5985:   rorx   $0x2,%r10d,%r12d
  0x00007f7748fc598b:   xor    %r8d,%r15d
  0x00007f7748fc598e:   xor    %r12d,%r14d
  0x00007f7748fc5991:   mov    %r10d,%r12d
  0x00007f7748fc5994:   and    %eax,%r12d
  0x00007f7748fc5997:   add    %r13d,%r15d
  0x00007f7748fc599a:   or     %r12d,%ecx
  0x00007f7748fc599d:   add    %r14d,%r9d
  0x00007f7748fc59a0:   add    %r15d,%ebx
  0x00007f7748fc59a3:   add    %r15d,%r9d
  0x00007f7748fc59a6:   add    %ecx,%r9d
  0x00007f7748fc59a9:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc59ae:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc59b3:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc59b7:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f7748fc59bb:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f7748fc59c0:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f7748fc59c5:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f7748fc59ca:   mov    %r9d,%ecx
  0x00007f7748fc59cd:   rorx   $0x19,%ebx,%r13d
  0x00007f7748fc59d3:   rorx   $0xb,%ebx,%r14d
  0x00007f7748fc59d9:   add    0x4c(%rsp,%rdx,1),%r8d
  0x00007f7748fc59de:   or     %r11d,%ecx
  0x00007f7748fc59e1:   mov    %edi,%r15d
  0x00007f7748fc59e4:   rorx   $0xd,%r9d,%r12d
  0x00007f7748fc59ea:   xor    %r14d,%r13d
  0x00007f7748fc59ed:   xor    %esi,%r15d
  0x00007f7748fc59f0:   rorx   $0x6,%ebx,%r14d
  0x00007f7748fc59f6:   and    %ebx,%r15d
  0x00007f7748fc59f9:   xor    %r14d,%r13d
  0x00007f7748fc59fc:   rorx   $0x16,%r9d,%r14d
  0x00007f7748fc5a02:   add    %r8d,%eax
  0x00007f7748fc5a05:   and    %r10d,%ecx
  0x00007f7748fc5a08:   xor    %r12d,%r14d
  0x00007f7748fc5a0b:   rorx   $0x2,%r9d,%r12d
  0x00007f7748fc5a11:   xor    %esi,%r15d
  0x00007f7748fc5a14:   xor    %r12d,%r14d
  0x00007f7748fc5a17:   mov    %r9d,%r12d
  0x00007f7748fc5a1a:   and    %r11d,%r12d
  0x00007f7748fc5a1d:   add    %r13d,%r15d
  0x00007f7748fc5a20:   or     %r12d,%ecx
  0x00007f7748fc5a23:   add    %r14d,%r8d
  0x00007f7748fc5a26:   add    %r15d,%eax
  0x00007f7748fc5a29:   add    %r15d,%r8d
  0x00007f7748fc5a2c:   add    %ecx,%r8d
  0x00007f7748fc5a2f:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f7748fc5a34:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc5a39:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc5a3e:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc5a42:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f7748fc5a46:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f7748fc5a4b:   vpaddd %ymm0,%ymm11,%ymm6
  0x00007f7748fc5a4f:   vpaddd 0x60(%rbp,%rdx,1),%ymm7,%ymm9
  0x00007f7748fc5a55:   vmovdqu %ymm9,0x60(%rsp,%rdx,1)
  0x00007f7748fc5a5b:   mov    %r8d,%ecx
  0x00007f7748fc5a5e:   rorx   $0x19,%eax,%r13d
  0x00007f7748fc5a64:   rorx   $0xb,%eax,%r14d
  0x00007f7748fc5a6a:   add    0x60(%rsp,%rdx,1),%esi
  0x00007f7748fc5a6e:   or     %r10d,%ecx
  0x00007f7748fc5a71:   mov    %ebx,%r15d
  0x00007f7748fc5a74:   rorx   $0xd,%r8d,%r12d
  0x00007f7748fc5a7a:   xor    %r14d,%r13d
  0x00007f7748fc5a7d:   xor    %edi,%r15d
  0x00007f7748fc5a80:   rorx   $0x6,%eax,%r14d
  0x00007f7748fc5a86:   and    %eax,%r15d
  0x00007f7748fc5a89:   xor    %r14d,%r13d
  0x00007f7748fc5a8c:   rorx   $0x16,%r8d,%r14d
  0x00007f7748fc5a92:   add    %esi,%r11d
  0x00007f7748fc5a95:   and    %r9d,%ecx
  0x00007f7748fc5a98:   xor    %r12d,%r14d
  0x00007f7748fc5a9b:   rorx   $0x2,%r8d,%r12d
  0x00007f7748fc5aa1:   xor    %edi,%r15d
  0x00007f7748fc5aa4:   xor    %r12d,%r14d
  0x00007f7748fc5aa7:   mov    %r8d,%r12d
  0x00007f7748fc5aaa:   and    %r10d,%r12d
  0x00007f7748fc5aad:   add    %r13d,%r15d
  0x00007f7748fc5ab0:   or     %r12d,%ecx
  0x00007f7748fc5ab3:   add    %r14d,%esi
  0x00007f7748fc5ab6:   add    %r15d,%r11d
  0x00007f7748fc5ab9:   add    %r15d,%esi
  0x00007f7748fc5abc:   add    %ecx,%esi
  0x00007f7748fc5abe:   vpalignr $0x4,%ymm5,%ymm6,%ymm0
  0x00007f7748fc5ac4:   vpaddd %ymm7,%ymm0,%ymm0
  0x00007f7748fc5ac8:   vpalignr $0x4,%ymm7,%ymm4,%ymm1
  0x00007f7748fc5ace:   vpsrld $0x7,%ymm1,%ymm2
  0x00007f7748fc5ad3:   vpslld $0x19,%ymm1,%ymm3
  0x00007f7748fc5ad8:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc5adc:   vpsrld $0x12,%ymm1,%ymm2
  0x00007f7748fc5ae1:   mov    %esi,%ecx
  0x00007f7748fc5ae3:   rorx   $0x19,%r11d,%r13d
  0x00007f7748fc5ae9:   rorx   $0xb,%r11d,%r14d
  0x00007f7748fc5aef:   add    0x64(%rsp,%rdx,1),%edi
  0x00007f7748fc5af3:   or     %r9d,%ecx
  0x00007f7748fc5af6:   mov    %eax,%r15d
  0x00007f7748fc5af9:   rorx   $0xd,%esi,%r12d
  0x00007f7748fc5aff:   xor    %r14d,%r13d
  0x00007f7748fc5b02:   xor    %ebx,%r15d
  0x00007f7748fc5b05:   rorx   $0x6,%r11d,%r14d
  0x00007f7748fc5b0b:   and    %r11d,%r15d
  0x00007f7748fc5b0e:   xor    %r14d,%r13d
  0x00007f7748fc5b11:   rorx   $0x16,%esi,%r14d
  0x00007f7748fc5b17:   add    %edi,%r10d
  0x00007f7748fc5b1a:   and    %r8d,%ecx
  0x00007f7748fc5b1d:   xor    %r12d,%r14d
  0x00007f7748fc5b20:   rorx   $0x2,%esi,%r12d
  0x00007f7748fc5b26:   xor    %ebx,%r15d
  0x00007f7748fc5b29:   xor    %r12d,%r14d
  0x00007f7748fc5b2c:   mov    %esi,%r12d
  0x00007f7748fc5b2f:   and    %r9d,%r12d
  0x00007f7748fc5b32:   add    %r13d,%r15d
  0x00007f7748fc5b35:   or     %r12d,%ecx
  0x00007f7748fc5b38:   add    %r14d,%edi
  0x00007f7748fc5b3b:   add    %r15d,%r10d
  0x00007f7748fc5b3e:   add    %r15d,%edi
  0x00007f7748fc5b41:   add    %ecx,%edi
  0x00007f7748fc5b43:   vpsrld $0x3,%ymm1,%ymm8
  0x00007f7748fc5b48:   vpslld $0xe,%ymm1,%ymm1
  0x00007f7748fc5b4d:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007f7748fc5b51:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007f7748fc5b55:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007f7748fc5b5a:   vpshufd $0xfa,%ymm6,%ymm2
  0x00007f7748fc5b5f:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007f7748fc5b63:   vpsrld $0xa,%ymm2,%ymm8
  0x00007f7748fc5b68:   mov    %edi,%ecx
  0x00007f7748fc5b6a:   rorx   $0x19,%r10d,%r13d
  0x00007f7748fc5b70:   rorx   $0xb,%r10d,%r14d
  0x00007f7748fc5b76:   add    0x68(%rsp,%rdx,1),%ebx
  0x00007f7748fc5b7a:   or     %r8d,%ecx
  0x00007f7748fc5b7d:   mov    %r11d,%r15d
  0x00007f7748fc5b80:   rorx   $0xd,%edi,%r12d
  0x00007f7748fc5b86:   xor    %r14d,%r13d
  0x00007f7748fc5b89:   xor    %eax,%r15d
  0x00007f7748fc5b8c:   rorx   $0x6,%r10d,%r14d
  0x00007f7748fc5b92:   and    %r10d,%r15d
  0x00007f7748fc5b95:   xor    %r14d,%r13d
  0x00007f7748fc5b98:   rorx   $0x16,%edi,%r14d
  0x00007f7748fc5b9e:   add    %ebx,%r9d
  0x00007f7748fc5ba1:   and    %esi,%ecx
  0x00007f7748fc5ba3:   xor    %r12d,%r14d
  0x00007f7748fc5ba6:   rorx   $0x2,%edi,%r12d
  0x00007f7748fc5bac:   xor    %eax,%r15d
  0x00007f7748fc5baf:   xor    %r12d,%r14d
  0x00007f7748fc5bb2:   mov    %edi,%r12d
  0x00007f7748fc5bb5:   and    %r8d,%r12d
  0x00007f7748fc5bb8:   add    %r13d,%r15d
  0x00007f7748fc5bbb:   or     %r12d,%ecx
  0x00007f7748fc5bbe:   add    %r14d,%ebx
  0x00007f7748fc5bc1:   add    %r15d,%r9d
  0x00007f7748fc5bc4:   add    %r15d,%ebx
  0x00007f7748fc5bc7:   add    %ecx,%ebx
  0x00007f7748fc5bc9:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc5bce:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc5bd3:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc5bd7:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007f7748fc5bdb:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007f7748fc5be0:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007f7748fc5be5:   vpshufd $0x50,%ymm0,%ymm2
  0x00007f7748fc5bea:   mov    %ebx,%ecx
  0x00007f7748fc5bec:   rorx   $0x19,%r9d,%r13d
  0x00007f7748fc5bf2:   rorx   $0xb,%r9d,%r14d
  0x00007f7748fc5bf8:   add    0x6c(%rsp,%rdx,1),%eax
  0x00007f7748fc5bfc:   or     %esi,%ecx
  0x00007f7748fc5bfe:   mov    %r10d,%r15d
  0x00007f7748fc5c01:   rorx   $0xd,%ebx,%r12d
  0x00007f7748fc5c07:   xor    %r14d,%r13d
  0x00007f7748fc5c0a:   xor    %r11d,%r15d
  0x00007f7748fc5c0d:   rorx   $0x6,%r9d,%r14d
  0x00007f7748fc5c13:   and    %r9d,%r15d
  0x00007f7748fc5c16:   xor    %r14d,%r13d
  0x00007f7748fc5c19:   rorx   $0x16,%ebx,%r14d
  0x00007f7748fc5c1f:   add    %eax,%r8d
  0x00007f7748fc5c22:   and    %edi,%ecx
  0x00007f7748fc5c24:   xor    %r12d,%r14d
  0x00007f7748fc5c27:   rorx   $0x2,%ebx,%r12d
  0x00007f7748fc5c2d:   xor    %r11d,%r15d
  0x00007f7748fc5c30:   xor    %r12d,%r14d
  0x00007f7748fc5c33:   mov    %ebx,%r12d
  0x00007f7748fc5c36:   and    %esi,%r12d
  0x00007f7748fc5c39:   add    %r13d,%r15d
  0x00007f7748fc5c3c:   or     %r12d,%ecx
  0x00007f7748fc5c3f:   add    %r14d,%eax
  0x00007f7748fc5c42:   add    %r15d,%r8d
  0x00007f7748fc5c45:   add    %r15d,%eax
  0x00007f7748fc5c48:   add    %ecx,%eax
  0x00007f7748fc5c4a:   vpsrld $0xa,%ymm2,%ymm11
  0x00007f7748fc5c4f:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc5c54:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007f7748fc5c59:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007f7748fc5c5d:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007f7748fc5c61:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007f7748fc5c66:   vpaddd %ymm0,%ymm11,%ymm7
  0x00007f7748fc5c6a:   add    $0x80,%rdx
  0x00007f7748fc5c71:   cmp    $0x180,%rdx
  0x00007f7748fc5c78:   jb     Stub::sha256_implCompressMB+272 0x00007f7748fc53f0
  0x00007f7748fc5c7e:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007f7748fc5c84:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007f7748fc5c89:   mov    %r9d,%r15d
  0x00007f7748fc5c8c:   rorx   $0x19,%r8d,%r13d
  0x00007f7748fc5c92:   rorx   $0xb,%r8d,%r14d
  0x00007f7748fc5c98:   xor    %r10d,%r15d
  0x00007f7748fc5c9b:   xor    %r14d,%r13d
  0x00007f7748fc5c9e:   rorx   $0x6,%r8d,%r14d
  0x00007f7748fc5ca4:   and    %r8d,%r15d
  0x00007f7748fc5ca7:   xor    %r14d,%r13d
  0x00007f7748fc5caa:   rorx   $0xd,%eax,%r12d
  0x00007f7748fc5cb0:   xor    %r10d,%r15d
  0x00007f7748fc5cb3:   rorx   $0x16,%eax,%r14d
  0x00007f7748fc5cb9:   mov    %eax,%ecx
  0x00007f7748fc5cbb:   xor    %r12d,%r14d
  0x00007f7748fc5cbe:   rorx   $0x2,%eax,%r12d
  0x00007f7748fc5cc4:   add    (%rsp,%rdx,1),%r11d
  0x00007f7748fc5cc8:   or     %edi,%ecx
  0x00007f7748fc5cca:   xor    %r12d,%r14d
  0x00007f7748fc5ccd:   mov    %eax,%r12d
  0x00007f7748fc5cd0:   and    %ebx,%ecx
  0x00007f7748fc5cd2:   and    %edi,%r12d
  0x00007f7748fc5cd5:   add    %r13d,%r15d
  0x00007f7748fc5cd8:   add    %r11d,%esi
  0x00007f7748fc5cdb:   or     %r12d,%ecx
  0x00007f7748fc5cde:   add    %r14d,%r11d
  0x00007f7748fc5ce1:   add    %r15d,%esi
  0x00007f7748fc5ce4:   add    %r15d,%r11d
  0x00007f7748fc5ce7:   mov    %r8d,%r15d
  0x00007f7748fc5cea:   rorx   $0x19,%esi,%r13d
  0x00007f7748fc5cf0:   rorx   $0xb,%esi,%r14d
  0x00007f7748fc5cf6:   xor    %r9d,%r15d
  0x00007f7748fc5cf9:   xor    %r14d,%r13d
  0x00007f7748fc5cfc:   rorx   $0x6,%esi,%r14d
  0x00007f7748fc5d02:   and    %esi,%r15d
  0x00007f7748fc5d05:   add    %ecx,%r11d
  0x00007f7748fc5d08:   xor    %r14d,%r13d
  0x00007f7748fc5d0b:   rorx   $0xd,%r11d,%r12d
  0x00007f7748fc5d11:   xor    %r9d,%r15d
  0x00007f7748fc5d14:   rorx   $0x16,%r11d,%r14d
  0x00007f7748fc5d1a:   mov    %r11d,%ecx
  0x00007f7748fc5d1d:   xor    %r12d,%r14d
  0x00007f7748fc5d20:   rorx   $0x2,%r11d,%r12d
  0x00007f7748fc5d26:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007f7748fc5d2b:   or     %ebx,%ecx
  0x00007f7748fc5d2d:   xor    %r12d,%r14d
  0x00007f7748fc5d30:   mov    %r11d,%r12d
  0x00007f7748fc5d33:   and    %eax,%ecx
  0x00007f7748fc5d35:   and    %ebx,%r12d
  0x00007f7748fc5d38:   add    %r13d,%r15d
  0x00007f7748fc5d3b:   add    %r10d,%edi
  0x00007f7748fc5d3e:   or     %r12d,%ecx
  0x00007f7748fc5d41:   add    %r14d,%r10d
  0x00007f7748fc5d44:   add    %r15d,%edi
  0x00007f7748fc5d47:   add    %r15d,%r10d
  0x00007f7748fc5d4a:   mov    %esi,%r15d
  0x00007f7748fc5d4d:   rorx   $0x19,%edi,%r13d
  0x00007f7748fc5d53:   rorx   $0xb,%edi,%r14d
  0x00007f7748fc5d59:   xor    %r8d,%r15d
  0x00007f7748fc5d5c:   xor    %r14d,%r13d
  0x00007f7748fc5d5f:   rorx   $0x6,%edi,%r14d
  0x00007f7748fc5d65:   and    %edi,%r15d
  0x00007f7748fc5d68:   add    %ecx,%r10d
  0x00007f7748fc5d6b:   xor    %r14d,%r13d
  0x00007f7748fc5d6e:   rorx   $0xd,%r10d,%r12d
  0x00007f7748fc5d74:   xor    %r8d,%r15d
  0x00007f7748fc5d77:   rorx   $0x16,%r10d,%r14d
  0x00007f7748fc5d7d:   mov    %r10d,%ecx
  0x00007f7748fc5d80:   xor    %r12d,%r14d
  0x00007f7748fc5d83:   rorx   $0x2,%r10d,%r12d
  0x00007f7748fc5d89:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007f7748fc5d8e:   or     %eax,%ecx
  0x00007f7748fc5d90:   xor    %r12d,%r14d
  0x00007f7748fc5d93:   mov    %r10d,%r12d
  0x00007f7748fc5d96:   and    %r11d,%ecx
  0x00007f7748fc5d99:   and    %eax,%r12d
  0x00007f7748fc5d9c:   add    %r13d,%r15d
  0x00007f7748fc5d9f:   add    %r9d,%ebx
  0x00007f7748fc5da2:   or     %r12d,%ecx
  0x00007f7748fc5da5:   add    %r14d,%r9d
  0x00007f7748fc5da8:   add    %r15d,%ebx
  0x00007f7748fc5dab:   add    %r15d,%r9d
  0x00007f7748fc5dae:   mov    %edi,%r15d
  0x00007f7748fc5db1:   rorx   $0x19,%ebx,%r13d
  0x00007f7748fc5db7:   rorx   $0xb,%ebx,%r14d
  0x00007f7748fc5dbd:   xor    %esi,%r15d
  0x00007f7748fc5dc0:   xor    %r14d,%r13d
  0x00007f7748fc5dc3:   rorx   $0x6,%ebx,%r14d
  0x00007f7748fc5dc9:   and    %ebx,%r15d
  0x00007f7748fc5dcc:   add    %ecx,%r9d
  0x00007f7748fc5dcf:   xor    %r14d,%r13d
  0x00007f7748fc5dd2:   rorx   $0xd,%r9d,%r12d
  0x00007f7748fc5dd8:   xor    %esi,%r15d
  0x00007f7748fc5ddb:   rorx   $0x16,%r9d,%r14d
  0x00007f7748fc5de1:   mov    %r9d,%ecx
  0x00007f7748fc5de4:   xor    %r12d,%r14d
  0x00007f7748fc5de7:   rorx   $0x2,%r9d,%r12d
  0x00007f7748fc5ded:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007f7748fc5df2:   or     %r11d,%ecx
  0x00007f7748fc5df5:   xor    %r12d,%r14d
  0x00007f7748fc5df8:   mov    %r9d,%r12d
  0x00007f7748fc5dfb:   and    %r10d,%ecx
  0x00007f7748fc5dfe:   and    %r11d,%r12d
  0x00007f7748fc5e01:   add    %r13d,%r15d
  0x00007f7748fc5e04:   add    %r8d,%eax
  0x00007f7748fc5e07:   or     %r12d,%ecx
  0x00007f7748fc5e0a:   add    %r14d,%r8d
  0x00007f7748fc5e0d:   add    %r15d,%eax
  0x00007f7748fc5e10:   add    %r15d,%r8d
  0x00007f7748fc5e13:   add    %ecx,%r8d
  0x00007f7748fc5e16:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007f7748fc5e1c:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007f7748fc5e22:   mov    %ebx,%r15d
  0x00007f7748fc5e25:   rorx   $0x19,%eax,%r13d
  0x00007f7748fc5e2b:   rorx   $0xb,%eax,%r14d
  0x00007f7748fc5e31:   xor    %edi,%r15d
  0x00007f7748fc5e34:   xor    %r14d,%r13d
  0x00007f7748fc5e37:   rorx   $0x6,%eax,%r14d
  0x00007f7748fc5e3d:   and    %eax,%r15d
  0x00007f7748fc5e40:   xor    %r14d,%r13d
  0x00007f7748fc5e43:   rorx   $0xd,%r8d,%r12d
  0x00007f7748fc5e49:   xor    %edi,%r15d
  0x00007f7748fc5e4c:   rorx   $0x16,%r8d,%r14d
  0x00007f7748fc5e52:   mov    %r8d,%ecx
  0x00007f7748fc5e55:   xor    %r12d,%r14d
  0x00007f7748fc5e58:   rorx   $0x2,%r8d,%r12d
  0x00007f7748fc5e5e:   add    0x20(%rsp,%rdx,1),%esi
  0x00007f7748fc5e62:   or     %r10d,%ecx
  0x00007f7748fc5e65:   xor    %r12d,%r14d
  0x00007f7748fc5e68:   mov    %r8d,%r12d
  0x00007f7748fc5e6b:   and    %r9d,%ecx
  0x00007f7748fc5e6e:   and    %r10d,%r12d
  0x00007f7748fc5e71:   add    %r13d,%r15d
  0x00007f7748fc5e74:   add    %esi,%r11d
  0x00007f7748fc5e77:   or     %r12d,%ecx
  0x00007f7748fc5e7a:   add    %r14d,%esi
  0x00007f7748fc5e7d:   add    %r15d,%r11d
  0x00007f7748fc5e80:   add    %r15d,%esi
  0x00007f7748fc5e83:   mov    %eax,%r15d
  0x00007f7748fc5e86:   rorx   $0x19,%r11d,%r13d
  0x00007f7748fc5e8c:   rorx   $0xb,%r11d,%r14d
  0x00007f7748fc5e92:   xor    %ebx,%r15d
  0x00007f7748fc5e95:   xor    %r14d,%r13d
  0x00007f7748fc5e98:   rorx   $0x6,%r11d,%r14d
  0x00007f7748fc5e9e:   and    %r11d,%r15d
  0x00007f7748fc5ea1:   add    %ecx,%esi
  0x00007f7748fc5ea3:   xor    %r14d,%r13d
  0x00007f7748fc5ea6:   rorx   $0xd,%esi,%r12d
  0x00007f7748fc5eac:   xor    %ebx,%r15d
  0x00007f7748fc5eaf:   rorx   $0x16,%esi,%r14d
  0x00007f7748fc5eb5:   mov    %esi,%ecx
  0x00007f7748fc5eb7:   xor    %r12d,%r14d
  0x00007f7748fc5eba:   rorx   $0x2,%esi,%r12d
  0x00007f7748fc5ec0:   add    0x24(%rsp,%rdx,1),%edi
  0x00007f7748fc5ec4:   or     %r9d,%ecx
  0x00007f7748fc5ec7:   xor    %r12d,%r14d
  0x00007f7748fc5eca:   mov    %esi,%r12d
  0x00007f7748fc5ecd:   and    %r8d,%ecx
  0x00007f7748fc5ed0:   and    %r9d,%r12d
  0x00007f7748fc5ed3:   add    %r13d,%r15d
  0x00007f7748fc5ed6:   add    %edi,%r10d
  0x00007f7748fc5ed9:   or     %r12d,%ecx
  0x00007f7748fc5edc:   add    %r14d,%edi
  0x00007f7748fc5edf:   add    %r15d,%r10d
  0x00007f7748fc5ee2:   add    %r15d,%edi
  0x00007f7748fc5ee5:   mov    %r11d,%r15d
  0x00007f7748fc5ee8:   rorx   $0x19,%r10d,%r13d
  0x00007f7748fc5eee:   rorx   $0xb,%r10d,%r14d
  0x00007f7748fc5ef4:   xor    %eax,%r15d
  0x00007f7748fc5ef7:   xor    %r14d,%r13d
  0x00007f7748fc5efa:   rorx   $0x6,%r10d,%r14d
  0x00007f7748fc5f00:   and    %r10d,%r15d
  0x00007f7748fc5f03:   add    %ecx,%edi
  0x00007f7748fc5f05:   xor    %r14d,%r13d
  0x00007f7748fc5f08:   rorx   $0xd,%edi,%r12d
  0x00007f7748fc5f0e:   xor    %eax,%r15d
  0x00007f7748fc5f11:   rorx   $0x16,%edi,%r14d
  0x00007f7748fc5f17:   mov    %edi,%ecx
  0x00007f7748fc5f19:   xor    %r12d,%r14d
  0x00007f7748fc5f1c:   rorx   $0x2,%edi,%r12d
  0x00007f7748fc5f22:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007f7748fc5f26:   or     %r8d,%ecx
  0x00007f7748fc5f29:   xor    %r12d,%r14d
  0x00007f7748fc5f2c:   mov    %edi,%r12d
  0x00007f7748fc5f2f:   and    %esi,%ecx
  0x00007f7748fc5f31:   and    %r8d,%r12d
  0x00007f7748fc5f34:   add    %r13d,%r15d
  0x00007f7748fc5f37:   add    %ebx,%r9d
  0x00007f7748fc5f3a:   or     %r12d,%ecx
  0x00007f7748fc5f3d:   add    %r14d,%ebx
  0x00007f7748fc5f40:   add    %r15d,%r9d
  0x00007f7748fc5f43:   add    %r15d,%ebx
  0x00007f7748fc5f46:   mov    %r10d,%r15d
  0x00007f7748fc5f49:   rorx   $0x19,%r9d,%r13d
  0x00007f7748fc5f4f:   rorx   $0xb,%r9d,%r14d
  0x00007f7748fc5f55:   xor    %r11d,%r15d
  0x00007f7748fc5f58:   xor    %r14d,%r13d
  0x00007f7748fc5f5b:   rorx   $0x6,%r9d,%r14d
  0x00007f7748fc5f61:   and    %r9d,%r15d
  0x00007f7748fc5f64:   add    %ecx,%ebx
  0x00007f7748fc5f66:   xor    %r14d,%r13d
  0x00007f7748fc5f69:   rorx   $0xd,%ebx,%r12d
  0x00007f7748fc5f6f:   xor    %r11d,%r15d
  0x00007f7748fc5f72:   rorx   $0x16,%ebx,%r14d
  0x00007f7748fc5f78:   mov    %ebx,%ecx
  0x00007f7748fc5f7a:   xor    %r12d,%r14d
  0x00007f7748fc5f7d:   rorx   $0x2,%ebx,%r12d
  0x00007f7748fc5f83:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007f7748fc5f87:   or     %esi,%ecx
  0x00007f7748fc5f89:   xor    %r12d,%r14d
  0x00007f7748fc5f8c:   mov    %ebx,%r12d
  0x00007f7748fc5f8f:   and    %edi,%ecx
  0x00007f7748fc5f91:   and    %esi,%r12d
  0x00007f7748fc5f94:   add    %r13d,%r15d
  0x00007f7748fc5f97:   add    %eax,%r8d
  0x00007f7748fc5f9a:   or     %r12d,%ecx
  0x00007f7748fc5f9d:   add    %r14d,%eax
  0x00007f7748fc5fa0:   add    %r15d,%r8d
  0x00007f7748fc5fa3:   add    %r15d,%eax
  0x00007f7748fc5fa6:   add    %ecx,%eax
  0x00007f7748fc5fa8:   add    $0x40,%rdx
  0x00007f7748fc5fac:   vmovdqu %ymm6,%ymm4
  0x00007f7748fc5fb0:   vmovdqu %ymm7,%ymm5
  0x00007f7748fc5fb4:   cmp    $0x200,%rdx
  0x00007f7748fc5fbb:   jb     Stub::sha256_implCompressMB+2462 0x00007f7748fc5c7e
  0x00007f7748fc5fc1:   mov    0x210(%rsp),%rdx
  0x00007f7748fc5fc9:   mov    0x208(%rsp),%rcx
  0x00007f7748fc5fd1:   add    (%rdx),%eax
  0x00007f7748fc5fd3:   mov    %eax,(%rdx)
  0x00007f7748fc5fd5:   add    0x4(%rdx),%ebx
  0x00007f7748fc5fd8:   mov    %ebx,0x4(%rdx)
  0x00007f7748fc5fdb:   add    0x8(%rdx),%edi
  0x00007f7748fc5fde:   mov    %edi,0x8(%rdx)
  0x00007f7748fc5fe1:   add    0xc(%rdx),%esi
  0x00007f7748fc5fe4:   mov    %esi,0xc(%rdx)
  0x00007f7748fc5fe7:   add    0x10(%rdx),%r8d
  0x00007f7748fc5feb:   mov    %r8d,0x10(%rdx)
  0x00007f7748fc5fef:   add    0x14(%rdx),%r9d
  0x00007f7748fc5ff3:   mov    %r9d,0x14(%rdx)
  0x00007f7748fc5ff7:   add    0x18(%rdx),%r10d
  0x00007f7748fc5ffb:   mov    %r10d,0x18(%rdx)
  0x00007f7748fc5fff:   add    0x1c(%rdx),%r11d
  0x00007f7748fc6003:   mov    %r11d,0x1c(%rdx)
  0x00007f7748fc6007:   cmp    0x200(%rsp),%rcx
  0x00007f7748fc600f:   ja     Stub::sha256_implCompressMB+4402 0x00007f7748fc6412
  0x00007f7748fc6015:   xor    %rdx,%rdx
  0x00007f7748fc6018:   nopl   0x0(%rax,%rax,1)
  0x00007f7748fc6020:   mov    %r9d,%r15d
  0x00007f7748fc6023:   rorx   $0x19,%r8d,%r13d
  0x00007f7748fc6029:   rorx   $0xb,%r8d,%r14d
  0x00007f7748fc602f:   xor    %r10d,%r15d
  0x00007f7748fc6032:   xor    %r14d,%r13d
  0x00007f7748fc6035:   rorx   $0x6,%r8d,%r14d
  0x00007f7748fc603b:   and    %r8d,%r15d
  0x00007f7748fc603e:   xor    %r14d,%r13d
  0x00007f7748fc6041:   rorx   $0xd,%eax,%r12d
  0x00007f7748fc6047:   xor    %r10d,%r15d
  0x00007f7748fc604a:   rorx   $0x16,%eax,%r14d
  0x00007f7748fc6050:   mov    %eax,%ecx
  0x00007f7748fc6052:   xor    %r12d,%r14d
  0x00007f7748fc6055:   rorx   $0x2,%eax,%r12d
  0x00007f7748fc605b:   add    0x10(%rsp,%rdx,1),%r11d
  0x00007f7748fc6060:   or     %edi,%ecx
  0x00007f7748fc6062:   xor    %r12d,%r14d
  0x00007f7748fc6065:   mov    %eax,%r12d
  0x00007f7748fc6068:   and    %ebx,%ecx
  0x00007f7748fc606a:   and    %edi,%r12d
  0x00007f7748fc606d:   add    %r13d,%r15d
  0x00007f7748fc6070:   add    %r11d,%esi
  0x00007f7748fc6073:   or     %r12d,%ecx
  0x00007f7748fc6076:   add    %r14d,%r11d
  0x00007f7748fc6079:   add    %r15d,%esi
  0x00007f7748fc607c:   add    %r15d,%r11d
  0x00007f7748fc607f:   mov    %r8d,%r15d
  0x00007f7748fc6082:   rorx   $0x19,%esi,%r13d
  0x00007f7748fc6088:   rorx   $0xb,%esi,%r14d
  0x00007f7748fc608e:   xor    %r9d,%r15d
  0x00007f7748fc6091:   xor    %r14d,%r13d
  0x00007f7748fc6094:   rorx   $0x6,%esi,%r14d
  0x00007f7748fc609a:   and    %esi,%r15d
  0x00007f7748fc609d:   add    %ecx,%r11d
  0x00007f7748fc60a0:   xor    %r14d,%r13d
  0x00007f7748fc60a3:   rorx   $0xd,%r11d,%r12d
  0x00007f7748fc60a9:   xor    %r9d,%r15d
  0x00007f7748fc60ac:   rorx   $0x16,%r11d,%r14d
  0x00007f7748fc60b2:   mov    %r11d,%ecx
  0x00007f7748fc60b5:   xor    %r12d,%r14d
  0x00007f7748fc60b8:   rorx   $0x2,%r11d,%r12d
  0x00007f7748fc60be:   add    0x14(%rsp,%rdx,1),%r10d
  0x00007f7748fc60c3:   or     %ebx,%ecx
  0x00007f7748fc60c5:   xor    %r12d,%r14d
  0x00007f7748fc60c8:   mov    %r11d,%r12d
  0x00007f7748fc60cb:   and    %eax,%ecx
  0x00007f7748fc60cd:   and    %ebx,%r12d
  0x00007f7748fc60d0:   add    %r13d,%r15d
  0x00007f7748fc60d3:   add    %r10d,%edi
  0x00007f7748fc60d6:   or     %r12d,%ecx
  0x00007f7748fc60d9:   add    %r14d,%r10d
  0x00007f7748fc60dc:   add    %r15d,%edi
  0x00007f7748fc60df:   add    %r15d,%r10d
  0x00007f7748fc60e2:   mov    %esi,%r15d
  0x00007f7748fc60e5:   rorx   $0x19,%edi,%r13d
  0x00007f7748fc60eb:   rorx   $0xb,%edi,%r14d
  0x00007f7748fc60f1:   xor    %r8d,%r15d
  0x00007f7748fc60f4:   xor    %r14d,%r13d
  0x00007f7748fc60f7:   rorx   $0x6,%edi,%r14d
  0x00007f7748fc60fd:   and    %edi,%r15d
  0x00007f7748fc6100:   add    %ecx,%r10d
  0x00007f7748fc6103:   xor    %r14d,%r13d
  0x00007f7748fc6106:   rorx   $0xd,%r10d,%r12d
  0x00007f7748fc610c:   xor    %r8d,%r15d
  0x00007f7748fc610f:   rorx   $0x16,%r10d,%r14d
  0x00007f7748fc6115:   mov    %r10d,%ecx
  0x00007f7748fc6118:   xor    %r12d,%r14d
  0x00007f7748fc611b:   rorx   $0x2,%r10d,%r12d
  0x00007f7748fc6121:   add    0x18(%rsp,%rdx,1),%r9d
  0x00007f7748fc6126:   or     %eax,%ecx
  0x00007f7748fc6128:   xor    %r12d,%r14d
  0x00007f7748fc612b:   mov    %r10d,%r12d
  0x00007f7748fc612e:   and    %r11d,%ecx
  0x00007f7748fc6131:   and    %eax,%r12d
  0x00007f7748fc6134:   add    %r13d,%r15d
  0x00007f7748fc6137:   add    %r9d,%ebx
  0x00007f7748fc613a:   or     %r12d,%ecx
  0x00007f7748fc613d:   add    %r14d,%r9d
  0x00007f7748fc6140:   add    %r15d,%ebx
  0x00007f7748fc6143:   add    %r15d,%r9d
  0x00007f7748fc6146:   mov    %edi,%r15d
  0x00007f7748fc6149:   rorx   $0x19,%ebx,%r13d
  0x00007f7748fc614f:   rorx   $0xb,%ebx,%r14d
  0x00007f7748fc6155:   xor    %esi,%r15d
  0x00007f7748fc6158:   xor    %r14d,%r13d
  0x00007f7748fc615b:   rorx   $0x6,%ebx,%r14d
  0x00007f7748fc6161:   and    %ebx,%r15d
  0x00007f7748fc6164:   add    %ecx,%r9d
  0x00007f7748fc6167:   xor    %r14d,%r13d
  0x00007f7748fc616a:   rorx   $0xd,%r9d,%r12d
  0x00007f7748fc6170:   xor    %esi,%r15d
  0x00007f7748fc6173:   rorx   $0x16,%r9d,%r14d
  0x00007f7748fc6179:   mov    %r9d,%ecx
  0x00007f7748fc617c:   xor    %r12d,%r14d
  0x00007f7748fc617f:   rorx   $0x2,%r9d,%r12d
  0x00007f7748fc6185:   add    0x1c(%rsp,%rdx,1),%r8d
  0x00007f7748fc618a:   or     %r11d,%ecx
  0x00007f7748fc618d:   xor    %r12d,%r14d
  0x00007f7748fc6190:   mov    %r9d,%r12d
  0x00007f7748fc6193:   and    %r10d,%ecx
  0x00007f7748fc6196:   and    %r11d,%r12d
  0x00007f7748fc6199:   add    %r13d,%r15d
  0x00007f7748fc619c:   add    %r8d,%eax
  0x00007f7748fc619f:   or     %r12d,%ecx
  0x00007f7748fc61a2:   add    %r14d,%r8d
  0x00007f7748fc61a5:   add    %r15d,%eax
  0x00007f7748fc61a8:   add    %r15d,%r8d
  0x00007f7748fc61ab:   add    %ecx,%r8d
  0x00007f7748fc61ae:   mov    %ebx,%r15d
  0x00007f7748fc61b1:   rorx   $0x19,%eax,%r13d
  0x00007f7748fc61b7:   rorx   $0xb,%eax,%r14d
  0x00007f7748fc61bd:   xor    %edi,%r15d
  0x00007f7748fc61c0:   xor    %r14d,%r13d
  0x00007f7748fc61c3:   rorx   $0x6,%eax,%r14d
  0x00007f7748fc61c9:   and    %eax,%r15d
  0x00007f7748fc61cc:   xor    %r14d,%r13d
  0x00007f7748fc61cf:   rorx   $0xd,%r8d,%r12d
  0x00007f7748fc61d5:   xor    %edi,%r15d
  0x00007f7748fc61d8:   rorx   $0x16,%r8d,%r14d
  0x00007f7748fc61de:   mov    %r8d,%ecx
  0x00007f7748fc61e1:   xor    %r12d,%r14d
  0x00007f7748fc61e4:   rorx   $0x2,%r8d,%r12d
  0x00007f7748fc61ea:   add    0x30(%rsp,%rdx,1),%esi
  0x00007f7748fc61ee:   or     %r10d,%ecx
  0x00007f7748fc61f1:   xor    %r12d,%r14d
  0x00007f7748fc61f4:   mov    %r8d,%r12d
  0x00007f7748fc61f7:   and    %r9d,%ecx
  0x00007f7748fc61fa:   and    %r10d,%r12d
  0x00007f7748fc61fd:   add    %r13d,%r15d
  0x00007f7748fc6200:   add    %esi,%r11d
  0x00007f7748fc6203:   or     %r12d,%ecx
  0x00007f7748fc6206:   add    %r14d,%esi
  0x00007f7748fc6209:   add    %r15d,%r11d
  0x00007f7748fc620c:   add    %r15d,%esi
  0x00007f7748fc620f:   mov    %eax,%r15d
  0x00007f7748fc6212:   rorx   $0x19,%r11d,%r13d
  0x00007f7748fc6218:   rorx   $0xb,%r11d,%r14d
  0x00007f7748fc621e:   xor    %ebx,%r15d
  0x00007f7748fc6221:   xor    %r14d,%r13d
  0x00007f7748fc6224:   rorx   $0x6,%r11d,%r14d
  0x00007f7748fc622a:   and    %r11d,%r15d
  0x00007f7748fc622d:   add    %ecx,%esi
  0x00007f7748fc622f:   xor    %r14d,%r13d
  0x00007f7748fc6232:   rorx   $0xd,%esi,%r12d
  0x00007f7748fc6238:   xor    %ebx,%r15d
  0x00007f7748fc623b:   rorx   $0x16,%esi,%r14d
  0x00007f7748fc6241:   mov    %esi,%ecx
  0x00007f7748fc6243:   xor    %r12d,%r14d
  0x00007f7748fc6246:   rorx   $0x2,%esi,%r12d
  0x00007f7748fc624c:   add    0x34(%rsp,%rdx,1),%edi
  0x00007f7748fc6250:   or     %r9d,%ecx
  0x00007f7748fc6253:   xor    %r12d,%r14d
  0x00007f7748fc6256:   mov    %esi,%r12d
  0x00007f7748fc6259:   and    %r8d,%ecx
  0x00007f7748fc625c:   and    %r9d,%r12d
  0x00007f7748fc625f:   add    %r13d,%r15d
  0x00007f7748fc6262:   add    %edi,%r10d
  0x00007f7748fc6265:   or     %r12d,%ecx
  0x00007f7748fc6268:   add    %r14d,%edi
  0x00007f7748fc626b:   add    %r15d,%r10d
  0x00007f7748fc626e:   add    %r15d,%edi
  0x00007f7748fc6271:   mov    %r11d,%r15d
  0x00007f7748fc6274:   rorx   $0x19,%r10d,%r13d
  0x00007f7748fc627a:   rorx   $0xb,%r10d,%r14d
  0x00007f7748fc6280:   xor    %eax,%r15d
  0x00007f7748fc6283:   xor    %r14d,%r13d
  0x00007f7748fc6286:   rorx   $0x6,%r10d,%r14d
  0x00007f7748fc628c:   and    %r10d,%r15d
  0x00007f7748fc628f:   add    %ecx,%edi
  0x00007f7748fc6291:   xor    %r14d,%r13d
  0x00007f7748fc6294:   rorx   $0xd,%edi,%r12d
  0x00007f7748fc629a:   xor    %eax,%r15d
  0x00007f7748fc629d:   rorx   $0x16,%edi,%r14d
  0x00007f7748fc62a3:   mov    %edi,%ecx
  0x00007f7748fc62a5:   xor    %r12d,%r14d
  0x00007f7748fc62a8:   rorx   $0x2,%edi,%r12d
  0x00007f7748fc62ae:   add    0x38(%rsp,%rdx,1),%ebx
  0x00007f7748fc62b2:   or     %r8d,%ecx
  0x00007f7748fc62b5:   xor    %r12d,%r14d
  0x00007f7748fc62b8:   mov    %edi,%r12d
  0x00007f7748fc62bb:   and    %esi,%ecx
  0x00007f7748fc62bd:   and    %r8d,%r12d
  0x00007f7748fc62c0:   add    %r13d,%r15d
  0x00007f7748fc62c3:   add    %ebx,%r9d
  0x00007f7748fc62c6:   or     %r12d,%ecx
  0x00007f7748fc62c9:   add    %r14d,%ebx
  0x00007f7748fc62cc:   add    %r15d,%r9d
  0x00007f7748fc62cf:   add    %r15d,%ebx
  0x00007f7748fc62d2:   mov    %r10d,%r15d
  0x00007f7748fc62d5:   rorx   $0x19,%r9d,%r13d
  0x00007f7748fc62db:   rorx   $0xb,%r9d,%r14d
  0x00007f7748fc62e1:   xor    %r11d,%r15d
  0x00007f7748fc62e4:   xor    %r14d,%r13d
  0x00007f7748fc62e7:   rorx   $0x6,%r9d,%r14d
  0x00007f7748fc62ed:   and    %r9d,%r15d
  0x00007f7748fc62f0:   add    %ecx,%ebx
  0x00007f7748fc62f2:   xor    %r14d,%r13d
  0x00007f7748fc62f5:   rorx   $0xd,%ebx,%r12d
  0x00007f7748fc62fb:   xor    %r11d,%r15d
  0x00007f7748fc62fe:   rorx   $0x16,%ebx,%r14d
  0x00007f7748fc6304:   mov    %ebx,%ecx
  0x00007f7748fc6306:   xor    %r12d,%r14d
  0x00007f7748fc6309:   rorx   $0x2,%ebx,%r12d
  0x00007f7748fc630f:   add    0x3c(%rsp,%rdx,1),%eax
  0x00007f7748fc6313:   or     %esi,%ecx
  0x00007f7748fc6315:   xor    %r12d,%r14d
  0x00007f7748fc6318:   mov    %ebx,%r12d
  0x00007f7748fc631b:   and    %edi,%ecx
  0x00007f7748fc631d:   and    %esi,%r12d
  0x00007f7748fc6320:   add    %r13d,%r15d
  0x00007f7748fc6323:   add    %eax,%r8d
  0x00007f7748fc6326:   or     %r12d,%ecx
  0x00007f7748fc6329:   add    %r14d,%eax
  0x00007f7748fc632c:   add    %r15d,%r8d
  0x00007f7748fc632f:   add    %r15d,%eax
  0x00007f7748fc6332:   add    %ecx,%eax
  0x00007f7748fc6334:   add    $0x40,%rdx
  0x00007f7748fc6338:   cmp    $0x200,%rdx
  0x00007f7748fc633f:   jb     Stub::sha256_implCompressMB+3392 0x00007f7748fc6020
  0x00007f7748fc6345:   mov    0x210(%rsp),%rdx
  0x00007f7748fc634d:   mov    0x208(%rsp),%rcx
  0x00007f7748fc6355:   add    $0x40,%rcx
  0x00007f7748fc6359:   add    (%rdx),%eax
  0x00007f7748fc635b:   mov    %eax,(%rdx)
  0x00007f7748fc635d:   add    0x4(%rdx),%ebx
  0x00007f7748fc6360:   mov    %ebx,0x4(%rdx)
  0x00007f7748fc6363:   add    0x8(%rdx),%edi
  0x00007f7748fc6366:   mov    %edi,0x8(%rdx)
  0x00007f7748fc6369:   add    0xc(%rdx),%esi
  0x00007f7748fc636c:   mov    %esi,0xc(%rdx)
  0x00007f7748fc636f:   add    0x10(%rdx),%r8d
  0x00007f7748fc6373:   mov    %r8d,0x10(%rdx)
  0x00007f7748fc6377:   add    0x14(%rdx),%r9d
  0x00007f7748fc637b:   mov    %r9d,0x14(%rdx)
  0x00007f7748fc637f:   add    0x18(%rdx),%r10d
  0x00007f7748fc6383:   mov    %r10d,0x18(%rdx)
  0x00007f7748fc6387:   add    0x1c(%rdx),%r11d
  0x00007f7748fc638b:   mov    %r11d,0x1c(%rdx)
  0x00007f7748fc638f:   cmp    0x200(%rsp),%rcx
  0x00007f7748fc6397:   jb     Stub::sha256_implCompressMB+172 0x00007f7748fc538c
  0x00007f7748fc639d:   ja     Stub::sha256_implCompressMB+4402 0x00007f7748fc6412
  0x00007f7748fc639f:   movabs $0x7f774d6924c0,%rbp
  0x00007f7748fc63a9:   vmovdqu (%rcx),%xmm4
  0x00007f7748fc63ad:   vmovdqu 0x10(%rcx),%xmm5
  0x00007f7748fc63b2:   vmovdqu 0x20(%rcx),%xmm6
  0x00007f7748fc63b7:   vmovdqu 0x30(%rcx),%xmm7
  0x00007f7748fc63bc:   vpshufb %xmm13,%xmm4,%xmm4
  0x00007f7748fc63c1:   vpshufb %xmm13,%xmm5,%xmm5
  0x00007f7748fc63c6:   vpshufb %xmm13,%xmm6,%xmm6
  0x00007f7748fc63cb:   vpshufb %xmm13,%xmm7,%xmm7
  0x00007f7748fc63d0:   jmpq   Stub::sha256_implCompressMB+245 0x00007f7748fc53d5
  0x00007f7748fc63d5:   mov    (%rdx),%eax
  0x00007f7748fc63d7:   mov    0x4(%rdx),%ebx
  0x00007f7748fc63da:   mov    0x8(%rdx),%edi
  0x00007f7748fc63dd:   mov    0xc(%rdx),%esi
  0x00007f7748fc63e0:   mov    0x10(%rdx),%r8d
  0x00007f7748fc63e4:   mov    0x14(%rdx),%r9d
  0x00007f7748fc63e8:   mov    0x1c(%rdx),%r11d
  0x00007f7748fc63ec:   vmovdqu -0x22b4(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007f7748fc63f4:   vmovdqu -0x229c(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007f7748fc4160
  0x00007f7748fc63fc:   vmovdqu -0x2284(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007f7748fc4180
  0x00007f7748fc6404:   mov    0x18(%rdx),%r10d
  0x00007f7748fc6408:   mov    %rdx,0x210(%rsp)
  0x00007f7748fc6410:   jmp    Stub::sha256_implCompressMB+4287 0x00007f7748fc639f
  0x00007f7748fc6412:   mov    0x218(%rsp),%rsp
  0x00007f7748fc641a:   pop    %r15
  0x00007f7748fc641c:   pop    %r14
  0x00007f7748fc641e:   pop    %r13
  0x00007f7748fc6420:   pop    %r12
  0x00007f7748fc6422:   pop    %rbp
  0x00007f7748fc6423:   pop    %rbx
  0x00007f7748fc6424:   pop    %rdx
  0x00007f7748fc6425:   pop    %rcx
  0x00007f7748fc6426:   mov    %rdx,%rax
  0x00007f7748fc6429:   cmp    %rcx,%rax
  0x00007f7748fc642c:   jae    Stub::sha256_implCompressMB+4436 0x00007f7748fc6434
  0x00007f7748fc642e:   add    $0x40,%rax
  0x00007f7748fc6432:   jmp    Stub::sha256_implCompressMB+4425 0x00007f7748fc6429
  0x00007f7748fc6434:   add    $0x20,%rsp
  0x00007f7748fc6438:   vzeroupper 
  0x00007f7748fc643b:   leaveq 
  0x00007f7748fc643c:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::pshuffle_byte_flip_mask_sha512 [0x00007f7748fc6440, 0x00007f7748fc6480] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc6440:   (bad)  
  0x00007f7748fc6441:   (bad)  
  0x00007f7748fc6442:   add    $0x1020304,%eax
  0x00007f7748fc6447:   add    %cl,(%rdi)
  0x00007f7748fc6449:   (bad)  
  0x00007f7748fc644a:   or     $0x90a0b0c,%eax
  0x00007f7748fc644f:   or     %dl,(%rdi)
  0x00007f7748fc6451:   (bad)  
  0x00007f7748fc6452:   adc    $0x11121314,%eax
  0x00007f7748fc6457:   adc    %bl,(%rdi)
  0x00007f7748fc6459:   (bad)  
  0x00007f7748fc645a:   sbb    $0x191a1b1c,%eax
  0x00007f7748fc645f:   sbb    %al,(%rax)
  0x00007f7748fc6461:   add    %al,(%rax)
  0x00007f7748fc6463:   add    %al,(%rax)
  0x00007f7748fc6465:   add    %al,(%rax)
  0x00007f7748fc6467:   add    %al,(%rax)
  0x00007f7748fc6469:   add    %al,(%rax)
  0x00007f7748fc646b:   add    %al,(%rax)
  0x00007f7748fc646d:   add    %al,(%rax)
  0x00007f7748fc646f:   add    %bh,%bh
  0x00007f7748fc6471:   (bad)  
  0x00007f7748fc6472:   (bad)  
  0x00007f7748fc6473:   (bad)  
  0x00007f7748fc6474:   (bad)  
  0x00007f7748fc6475:   (bad)  
  0x00007f7748fc6476:   (bad)  
  0x00007f7748fc6477:   (bad)  
  0x00007f7748fc6478:   (bad)  
  0x00007f7748fc6479:   (bad)  
  0x00007f7748fc647a:   (bad)  
  0x00007f7748fc647b:   (bad)  
  0x00007f7748fc647c:   (bad)  
  0x00007f7748fc647d:   (bad)  
  0x00007f7748fc647e:   (bad)  
  0x00007f7748fc647f:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha512_implCompress [0x00007f7748fc6480, 0x00007f7748fc7295] (3605 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc6480:   push   %rbp
  0x00007f7748fc6481:   mov    %rsp,%rbp
  0x00007f7748fc6484:   push   %rdx
  0x00007f7748fc6485:   push   %rcx
  0x00007f7748fc6486:   mov    %rsp,%rax
  0x00007f7748fc6489:   sub    $0x70,%rsp
  0x00007f7748fc648d:   and    $0xffffffffffffffe0,%rsp
  0x00007f7748fc6491:   mov    %rax,0x38(%rsp)
  0x00007f7748fc6496:   mov    %rbp,0x40(%rsp)
  0x00007f7748fc649b:   mov    %rbx,0x48(%rsp)
  0x00007f7748fc64a0:   mov    %r12,0x50(%rsp)
  0x00007f7748fc64a5:   mov    %r13,0x58(%rsp)
  0x00007f7748fc64aa:   mov    %r14,0x60(%rsp)
  0x00007f7748fc64af:   mov    %r15,0x68(%rsp)
  0x00007f7748fc64b4:   vpblendd $0xf0,%xmm1,%xmm0,%xmm0
  0x00007f7748fc64ba:   vpblendd $0xf0,%ymm1,%ymm0,%ymm0
  0x00007f7748fc64c0:   xor    %rdx,%rdx
  0x00007f7748fc64c3:   add    $0x80,%rdx
  0x00007f7748fc64ca:   add    %rdi,%rdx
  0x00007f7748fc64cd:   mov    %rdx,0x30(%rsp)
  0x00007f7748fc64d2:   mov    (%rsi),%rax
  0x00007f7748fc64d5:   mov    0x8(%rsi),%rbx
  0x00007f7748fc64d9:   mov    0x10(%rsi),%rcx
  0x00007f7748fc64dd:   mov    0x18(%rsi),%r8
  0x00007f7748fc64e1:   mov    0x20(%rsi),%rdx
  0x00007f7748fc64e5:   mov    0x28(%rsi),%r9
  0x00007f7748fc64e9:   mov    0x38(%rsi),%r11
  0x00007f7748fc64ed:   vmovdqu -0xb5(%rip),%ymm9        # Stub::pshuffle_byte_flip_mask_sha512
  0x00007f7748fc64f5:   vmovdqu -0x9d(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask_sha512+32 0x00007f7748fc6460
  0x00007f7748fc64fd:   mov    0x30(%rsi),%r10
  0x00007f7748fc6501:   movabs $0x7f774d63d140,%rbp
  0x00007f7748fc650b:   vmovdqu (%rdi),%ymm4
  0x00007f7748fc650f:   vpshufb %ymm9,%ymm4,%ymm4
  0x00007f7748fc6514:   vmovdqu 0x20(%rdi),%ymm5
  0x00007f7748fc6519:   vpshufb %ymm9,%ymm5,%ymm5
  0x00007f7748fc651e:   vmovdqu 0x40(%rdi),%ymm6
  0x00007f7748fc6523:   vpshufb %ymm9,%ymm6,%ymm6
  0x00007f7748fc6528:   vmovdqu 0x60(%rdi),%ymm7
  0x00007f7748fc652d:   vpshufb %ymm9,%ymm7,%ymm7
  0x00007f7748fc6532:   mov    %rdi,0x28(%rsp)
  0x00007f7748fc6537:   movq   $0x4,0x20(%rsp)
  0x00007f7748fc6540:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007f7748fc6545:   vmovdqu %ymm0,(%rsp)
  0x00007f7748fc654a:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm0
  0x00007f7748fc6550:   vpalignr $0x8,%ymm6,%ymm0,%ymm0
  0x00007f7748fc6556:   vpaddq %ymm4,%ymm0,%ymm0
  0x00007f7748fc655a:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm1
  0x00007f7748fc6560:   vpalignr $0x8,%ymm4,%ymm1,%ymm1
  0x00007f7748fc6566:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f7748fc656b:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f7748fc6570:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc6574:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f7748fc6579:   mov    %rax,%rdi
  0x00007f7748fc657c:   rorx   $0x29,%rdx,%r13
  0x00007f7748fc6582:   rorx   $0x12,%rdx,%r14
  0x00007f7748fc6588:   add    (%rsp),%r11
  0x00007f7748fc658c:   or     %rcx,%rdi
  0x00007f7748fc658f:   mov    %r9,%r15
  0x00007f7748fc6592:   xor    %r10,%r15
  0x00007f7748fc6595:   rorx   $0x22,%rax,%r12
  0x00007f7748fc659b:   xor    %r14,%r13
  0x00007f7748fc659e:   rorx   $0xe,%rdx,%r14
  0x00007f7748fc65a4:   and    %rdx,%r15
  0x00007f7748fc65a7:   add    %r11,%r8
  0x00007f7748fc65aa:   and    %rbx,%rdi
  0x00007f7748fc65ad:   xor    %r14,%r13
  0x00007f7748fc65b0:   rorx   $0x27,%rax,%r14
  0x00007f7748fc65b6:   xor    %r12,%r14
  0x00007f7748fc65b9:   rorx   $0x1c,%rax,%r12
  0x00007f7748fc65bf:   xor    %r10,%r15
  0x00007f7748fc65c2:   xor    %r12,%r14
  0x00007f7748fc65c5:   mov    %rax,%r12
  0x00007f7748fc65c8:   and    %rcx,%r12
  0x00007f7748fc65cb:   add    %r13,%r15
  0x00007f7748fc65ce:   or     %r12,%rdi
  0x00007f7748fc65d1:   add    %r14,%r11
  0x00007f7748fc65d4:   add    %r15,%r8
  0x00007f7748fc65d7:   add    %r15,%r11
  0x00007f7748fc65da:   add    %rdi,%r11
  0x00007f7748fc65dd:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f7748fc65e2:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f7748fc65e7:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f7748fc65eb:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f7748fc65f0:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f7748fc65f4:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f7748fc65f8:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm4
  0x00007f7748fc65fe:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f7748fc6603:   vperm2f128 $0x11,%ymm7,%ymm7,%ymm2
  0x00007f7748fc6609:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f7748fc660e:   mov    %r11,%rdi
  0x00007f7748fc6611:   rorx   $0x29,%r8,%r13
  0x00007f7748fc6617:   rorx   $0x12,%r8,%r14
  0x00007f7748fc661d:   add    0x8(%rsp),%r10
  0x00007f7748fc6622:   or     %rbx,%rdi
  0x00007f7748fc6625:   mov    %rdx,%r15
  0x00007f7748fc6628:   xor    %r9,%r15
  0x00007f7748fc662b:   rorx   $0x22,%r11,%r12
  0x00007f7748fc6631:   xor    %r14,%r13
  0x00007f7748fc6634:   rorx   $0xe,%r8,%r14
  0x00007f7748fc663a:   and    %r8,%r15
  0x00007f7748fc663d:   add    %r10,%rcx
  0x00007f7748fc6640:   and    %rax,%rdi
  0x00007f7748fc6643:   xor    %r14,%r13
  0x00007f7748fc6646:   rorx   $0x27,%r11,%r14
  0x00007f7748fc664c:   xor    %r12,%r14
  0x00007f7748fc664f:   rorx   $0x1c,%r11,%r12
  0x00007f7748fc6655:   xor    %r9,%r15
  0x00007f7748fc6658:   xor    %r12,%r14
  0x00007f7748fc665b:   mov    %r11,%r12
  0x00007f7748fc665e:   and    %rbx,%r12
  0x00007f7748fc6661:   add    %r13,%r15
  0x00007f7748fc6664:   or     %r12,%rdi
  0x00007f7748fc6667:   add    %r14,%r10
  0x00007f7748fc666a:   add    %r15,%rcx
  0x00007f7748fc666d:   add    %r15,%r10
  0x00007f7748fc6670:   add    %rdi,%r10
  0x00007f7748fc6673:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc6678:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f7748fc667d:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6681:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6685:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f7748fc668a:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f7748fc668f:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6693:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6697:   vpaddq %ymm8,%ymm4,%ymm4
  0x00007f7748fc669c:   vpsrlq $0x6,%ymm4,%ymm8
  0x00007f7748fc66a1:   mov    %r10,%rdi
  0x00007f7748fc66a4:   rorx   $0x29,%rcx,%r13
  0x00007f7748fc66aa:   rorx   $0x12,%rcx,%r14
  0x00007f7748fc66b0:   add    0x10(%rsp),%r9
  0x00007f7748fc66b5:   or     %rax,%rdi
  0x00007f7748fc66b8:   mov    %r8,%r15
  0x00007f7748fc66bb:   xor    %rdx,%r15
  0x00007f7748fc66be:   rorx   $0x22,%r10,%r12
  0x00007f7748fc66c4:   xor    %r14,%r13
  0x00007f7748fc66c7:   rorx   $0xe,%rcx,%r14
  0x00007f7748fc66cd:   and    %rcx,%r15
  0x00007f7748fc66d0:   add    %r9,%rbx
  0x00007f7748fc66d3:   and    %r11,%rdi
  0x00007f7748fc66d6:   xor    %r14,%r13
  0x00007f7748fc66d9:   rorx   $0x27,%r10,%r14
  0x00007f7748fc66df:   xor    %r12,%r14
  0x00007f7748fc66e2:   rorx   $0x1c,%r10,%r12
  0x00007f7748fc66e8:   xor    %rdx,%r15
  0x00007f7748fc66eb:   xor    %r12,%r14
  0x00007f7748fc66ee:   mov    %r10,%r12
  0x00007f7748fc66f1:   and    %rax,%r12
  0x00007f7748fc66f4:   add    %r13,%r15
  0x00007f7748fc66f7:   or     %r12,%rdi
  0x00007f7748fc66fa:   add    %r14,%r9
  0x00007f7748fc66fd:   add    %r15,%rbx
  0x00007f7748fc6700:   add    %r15,%r9
  0x00007f7748fc6703:   add    %rdi,%r9
  0x00007f7748fc6706:   vpsrlq $0x13,%ymm4,%ymm3
  0x00007f7748fc670b:   vpsllq $0x2d,%ymm4,%ymm1
  0x00007f7748fc6710:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6714:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6718:   vpsrlq $0x3d,%ymm4,%ymm3
  0x00007f7748fc671d:   vpsllq $0x3,%ymm4,%ymm1
  0x00007f7748fc6722:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6726:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc672a:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f7748fc672f:   vpblendd $0xf0,%ymm2,%ymm4,%ymm4
  0x00007f7748fc6735:   mov    %r9,%rdi
  0x00007f7748fc6738:   rorx   $0x29,%rbx,%r13
  0x00007f7748fc673e:   rorx   $0x12,%rbx,%r14
  0x00007f7748fc6744:   add    0x18(%rsp),%rdx
  0x00007f7748fc6749:   or     %r11,%rdi
  0x00007f7748fc674c:   mov    %rcx,%r15
  0x00007f7748fc674f:   xor    %r8,%r15
  0x00007f7748fc6752:   rorx   $0x22,%r9,%r12
  0x00007f7748fc6758:   xor    %r14,%r13
  0x00007f7748fc675b:   rorx   $0xe,%rbx,%r14
  0x00007f7748fc6761:   and    %rbx,%r15
  0x00007f7748fc6764:   add    %rdx,%rax
  0x00007f7748fc6767:   and    %r10,%rdi
  0x00007f7748fc676a:   xor    %r14,%r13
  0x00007f7748fc676d:   rorx   $0x27,%r9,%r14
  0x00007f7748fc6773:   xor    %r12,%r14
  0x00007f7748fc6776:   rorx   $0x1c,%r9,%r12
  0x00007f7748fc677c:   xor    %r8,%r15
  0x00007f7748fc677f:   xor    %r12,%r14
  0x00007f7748fc6782:   mov    %r9,%r12
  0x00007f7748fc6785:   and    %r11,%r12
  0x00007f7748fc6788:   add    %r13,%r15
  0x00007f7748fc678b:   or     %r12,%rdi
  0x00007f7748fc678e:   add    %r14,%rdx
  0x00007f7748fc6791:   add    %r15,%rax
  0x00007f7748fc6794:   add    %r15,%rdx
  0x00007f7748fc6797:   add    %rdi,%rdx
  0x00007f7748fc679a:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007f7748fc679f:   vmovdqu %ymm0,(%rsp)
  0x00007f7748fc67a4:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm0
  0x00007f7748fc67aa:   vpalignr $0x8,%ymm7,%ymm0,%ymm0
  0x00007f7748fc67b0:   vpaddq %ymm5,%ymm0,%ymm0
  0x00007f7748fc67b4:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm1
  0x00007f7748fc67ba:   vpalignr $0x8,%ymm5,%ymm1,%ymm1
  0x00007f7748fc67c0:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f7748fc67c5:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f7748fc67ca:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc67ce:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f7748fc67d3:   mov    %rdx,%rdi
  0x00007f7748fc67d6:   rorx   $0x29,%rax,%r13
  0x00007f7748fc67dc:   rorx   $0x12,%rax,%r14
  0x00007f7748fc67e2:   add    (%rsp),%r8
  0x00007f7748fc67e6:   or     %r10,%rdi
  0x00007f7748fc67e9:   mov    %rbx,%r15
  0x00007f7748fc67ec:   xor    %rcx,%r15
  0x00007f7748fc67ef:   rorx   $0x22,%rdx,%r12
  0x00007f7748fc67f5:   xor    %r14,%r13
  0x00007f7748fc67f8:   rorx   $0xe,%rax,%r14
  0x00007f7748fc67fe:   and    %rax,%r15
  0x00007f7748fc6801:   add    %r8,%r11
  0x00007f7748fc6804:   and    %r9,%rdi
  0x00007f7748fc6807:   xor    %r14,%r13
  0x00007f7748fc680a:   rorx   $0x27,%rdx,%r14
  0x00007f7748fc6810:   xor    %r12,%r14
  0x00007f7748fc6813:   rorx   $0x1c,%rdx,%r12
  0x00007f7748fc6819:   xor    %rcx,%r15
  0x00007f7748fc681c:   xor    %r12,%r14
  0x00007f7748fc681f:   mov    %rdx,%r12
  0x00007f7748fc6822:   and    %r10,%r12
  0x00007f7748fc6825:   add    %r13,%r15
  0x00007f7748fc6828:   or     %r12,%rdi
  0x00007f7748fc682b:   add    %r14,%r8
  0x00007f7748fc682e:   add    %r15,%r11
  0x00007f7748fc6831:   add    %r15,%r8
  0x00007f7748fc6834:   add    %rdi,%r8
  0x00007f7748fc6837:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f7748fc683c:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f7748fc6841:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f7748fc6845:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f7748fc684a:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f7748fc684e:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f7748fc6852:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm5
  0x00007f7748fc6858:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f7748fc685d:   vperm2f128 $0x11,%ymm4,%ymm4,%ymm2
  0x00007f7748fc6863:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f7748fc6868:   mov    %r8,%rdi
  0x00007f7748fc686b:   rorx   $0x29,%r11,%r13
  0x00007f7748fc6871:   rorx   $0x12,%r11,%r14
  0x00007f7748fc6877:   add    0x8(%rsp),%rcx
  0x00007f7748fc687c:   or     %r9,%rdi
  0x00007f7748fc687f:   mov    %rax,%r15
  0x00007f7748fc6882:   xor    %rbx,%r15
  0x00007f7748fc6885:   rorx   $0x22,%r8,%r12
  0x00007f7748fc688b:   xor    %r14,%r13
  0x00007f7748fc688e:   rorx   $0xe,%r11,%r14
  0x00007f7748fc6894:   and    %r11,%r15
  0x00007f7748fc6897:   add    %rcx,%r10
  0x00007f7748fc689a:   and    %rdx,%rdi
  0x00007f7748fc689d:   xor    %r14,%r13
  0x00007f7748fc68a0:   rorx   $0x27,%r8,%r14
  0x00007f7748fc68a6:   xor    %r12,%r14
  0x00007f7748fc68a9:   rorx   $0x1c,%r8,%r12
  0x00007f7748fc68af:   xor    %rbx,%r15
  0x00007f7748fc68b2:   xor    %r12,%r14
  0x00007f7748fc68b5:   mov    %r8,%r12
  0x00007f7748fc68b8:   and    %r9,%r12
  0x00007f7748fc68bb:   add    %r13,%r15
  0x00007f7748fc68be:   or     %r12,%rdi
  0x00007f7748fc68c1:   add    %r14,%rcx
  0x00007f7748fc68c4:   add    %r15,%r10
  0x00007f7748fc68c7:   add    %r15,%rcx
  0x00007f7748fc68ca:   add    %rdi,%rcx
  0x00007f7748fc68cd:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc68d2:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f7748fc68d7:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc68db:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc68df:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f7748fc68e4:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f7748fc68e9:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc68ed:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc68f1:   vpaddq %ymm8,%ymm5,%ymm5
  0x00007f7748fc68f6:   vpsrlq $0x6,%ymm5,%ymm8
  0x00007f7748fc68fb:   mov    %rcx,%rdi
  0x00007f7748fc68fe:   rorx   $0x29,%r10,%r13
  0x00007f7748fc6904:   rorx   $0x12,%r10,%r14
  0x00007f7748fc690a:   add    0x10(%rsp),%rbx
  0x00007f7748fc690f:   or     %rdx,%rdi
  0x00007f7748fc6912:   mov    %r11,%r15
  0x00007f7748fc6915:   xor    %rax,%r15
  0x00007f7748fc6918:   rorx   $0x22,%rcx,%r12
  0x00007f7748fc691e:   xor    %r14,%r13
  0x00007f7748fc6921:   rorx   $0xe,%r10,%r14
  0x00007f7748fc6927:   and    %r10,%r15
  0x00007f7748fc692a:   add    %rbx,%r9
  0x00007f7748fc692d:   and    %r8,%rdi
  0x00007f7748fc6930:   xor    %r14,%r13
  0x00007f7748fc6933:   rorx   $0x27,%rcx,%r14
  0x00007f7748fc6939:   xor    %r12,%r14
  0x00007f7748fc693c:   rorx   $0x1c,%rcx,%r12
  0x00007f7748fc6942:   xor    %rax,%r15
  0x00007f7748fc6945:   xor    %r12,%r14
  0x00007f7748fc6948:   mov    %rcx,%r12
  0x00007f7748fc694b:   and    %rdx,%r12
  0x00007f7748fc694e:   add    %r13,%r15
  0x00007f7748fc6951:   or     %r12,%rdi
  0x00007f7748fc6954:   add    %r14,%rbx
  0x00007f7748fc6957:   add    %r15,%r9
  0x00007f7748fc695a:   add    %r15,%rbx
  0x00007f7748fc695d:   add    %rdi,%rbx
  0x00007f7748fc6960:   vpsrlq $0x13,%ymm5,%ymm3
  0x00007f7748fc6965:   vpsllq $0x2d,%ymm5,%ymm1
  0x00007f7748fc696a:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc696e:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6972:   vpsrlq $0x3d,%ymm5,%ymm3
  0x00007f7748fc6977:   vpsllq $0x3,%ymm5,%ymm1
  0x00007f7748fc697c:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6980:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6984:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f7748fc6989:   vpblendd $0xf0,%ymm2,%ymm5,%ymm5
  0x00007f7748fc698f:   mov    %rbx,%rdi
  0x00007f7748fc6992:   rorx   $0x29,%r9,%r13
  0x00007f7748fc6998:   rorx   $0x12,%r9,%r14
  0x00007f7748fc699e:   add    0x18(%rsp),%rax
  0x00007f7748fc69a3:   or     %r8,%rdi
  0x00007f7748fc69a6:   mov    %r10,%r15
  0x00007f7748fc69a9:   xor    %r11,%r15
  0x00007f7748fc69ac:   rorx   $0x22,%rbx,%r12
  0x00007f7748fc69b2:   xor    %r14,%r13
  0x00007f7748fc69b5:   rorx   $0xe,%r9,%r14
  0x00007f7748fc69bb:   and    %r9,%r15
  0x00007f7748fc69be:   add    %rax,%rdx
  0x00007f7748fc69c1:   and    %rcx,%rdi
  0x00007f7748fc69c4:   xor    %r14,%r13
  0x00007f7748fc69c7:   rorx   $0x27,%rbx,%r14
  0x00007f7748fc69cd:   xor    %r12,%r14
  0x00007f7748fc69d0:   rorx   $0x1c,%rbx,%r12
  0x00007f7748fc69d6:   xor    %r11,%r15
  0x00007f7748fc69d9:   xor    %r12,%r14
  0x00007f7748fc69dc:   mov    %rbx,%r12
  0x00007f7748fc69df:   and    %r8,%r12
  0x00007f7748fc69e2:   add    %r13,%r15
  0x00007f7748fc69e5:   or     %r12,%rdi
  0x00007f7748fc69e8:   add    %r14,%rax
  0x00007f7748fc69eb:   add    %r15,%rdx
  0x00007f7748fc69ee:   add    %r15,%rax
  0x00007f7748fc69f1:   add    %rdi,%rax
  0x00007f7748fc69f4:   vpaddq 0x40(%rbp),%ymm6,%ymm0
  0x00007f7748fc69f9:   vmovdqu %ymm0,(%rsp)
  0x00007f7748fc69fe:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm0
  0x00007f7748fc6a04:   vpalignr $0x8,%ymm4,%ymm0,%ymm0
  0x00007f7748fc6a0a:   vpaddq %ymm6,%ymm0,%ymm0
  0x00007f7748fc6a0e:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm1
  0x00007f7748fc6a14:   vpalignr $0x8,%ymm6,%ymm1,%ymm1
  0x00007f7748fc6a1a:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f7748fc6a1f:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f7748fc6a24:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc6a28:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f7748fc6a2d:   mov    %rax,%rdi
  0x00007f7748fc6a30:   rorx   $0x29,%rdx,%r13
  0x00007f7748fc6a36:   rorx   $0x12,%rdx,%r14
  0x00007f7748fc6a3c:   add    (%rsp),%r11
  0x00007f7748fc6a40:   or     %rcx,%rdi
  0x00007f7748fc6a43:   mov    %r9,%r15
  0x00007f7748fc6a46:   xor    %r10,%r15
  0x00007f7748fc6a49:   rorx   $0x22,%rax,%r12
  0x00007f7748fc6a4f:   xor    %r14,%r13
  0x00007f7748fc6a52:   rorx   $0xe,%rdx,%r14
  0x00007f7748fc6a58:   and    %rdx,%r15
  0x00007f7748fc6a5b:   add    %r11,%r8
  0x00007f7748fc6a5e:   and    %rbx,%rdi
  0x00007f7748fc6a61:   xor    %r14,%r13
  0x00007f7748fc6a64:   rorx   $0x27,%rax,%r14
  0x00007f7748fc6a6a:   xor    %r12,%r14
  0x00007f7748fc6a6d:   rorx   $0x1c,%rax,%r12
  0x00007f7748fc6a73:   xor    %r10,%r15
  0x00007f7748fc6a76:   xor    %r12,%r14
  0x00007f7748fc6a79:   mov    %rax,%r12
  0x00007f7748fc6a7c:   and    %rcx,%r12
  0x00007f7748fc6a7f:   add    %r13,%r15
  0x00007f7748fc6a82:   or     %r12,%rdi
  0x00007f7748fc6a85:   add    %r14,%r11
  0x00007f7748fc6a88:   add    %r15,%r8
  0x00007f7748fc6a8b:   add    %r15,%r11
  0x00007f7748fc6a8e:   add    %rdi,%r11
  0x00007f7748fc6a91:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f7748fc6a96:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f7748fc6a9b:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f7748fc6a9f:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f7748fc6aa4:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f7748fc6aa8:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f7748fc6aac:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm6
  0x00007f7748fc6ab2:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f7748fc6ab7:   vperm2f128 $0x11,%ymm5,%ymm5,%ymm2
  0x00007f7748fc6abd:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f7748fc6ac2:   mov    %r11,%rdi
  0x00007f7748fc6ac5:   rorx   $0x29,%r8,%r13
  0x00007f7748fc6acb:   rorx   $0x12,%r8,%r14
  0x00007f7748fc6ad1:   add    0x8(%rsp),%r10
  0x00007f7748fc6ad6:   or     %rbx,%rdi
  0x00007f7748fc6ad9:   mov    %rdx,%r15
  0x00007f7748fc6adc:   xor    %r9,%r15
  0x00007f7748fc6adf:   rorx   $0x22,%r11,%r12
  0x00007f7748fc6ae5:   xor    %r14,%r13
  0x00007f7748fc6ae8:   rorx   $0xe,%r8,%r14
  0x00007f7748fc6aee:   and    %r8,%r15
  0x00007f7748fc6af1:   add    %r10,%rcx
  0x00007f7748fc6af4:   and    %rax,%rdi
  0x00007f7748fc6af7:   xor    %r14,%r13
  0x00007f7748fc6afa:   rorx   $0x27,%r11,%r14
  0x00007f7748fc6b00:   xor    %r12,%r14
  0x00007f7748fc6b03:   rorx   $0x1c,%r11,%r12
  0x00007f7748fc6b09:   xor    %r9,%r15
  0x00007f7748fc6b0c:   xor    %r12,%r14
  0x00007f7748fc6b0f:   mov    %r11,%r12
  0x00007f7748fc6b12:   and    %rbx,%r12
  0x00007f7748fc6b15:   add    %r13,%r15
  0x00007f7748fc6b18:   or     %r12,%rdi
  0x00007f7748fc6b1b:   add    %r14,%r10
  0x00007f7748fc6b1e:   add    %r15,%rcx
  0x00007f7748fc6b21:   add    %r15,%r10
  0x00007f7748fc6b24:   add    %rdi,%r10
  0x00007f7748fc6b27:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc6b2c:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f7748fc6b31:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6b35:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6b39:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f7748fc6b3e:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f7748fc6b43:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6b47:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6b4b:   vpaddq %ymm8,%ymm6,%ymm6
  0x00007f7748fc6b50:   vpsrlq $0x6,%ymm6,%ymm8
  0x00007f7748fc6b55:   mov    %r10,%rdi
  0x00007f7748fc6b58:   rorx   $0x29,%rcx,%r13
  0x00007f7748fc6b5e:   rorx   $0x12,%rcx,%r14
  0x00007f7748fc6b64:   add    0x10(%rsp),%r9
  0x00007f7748fc6b69:   or     %rax,%rdi
  0x00007f7748fc6b6c:   mov    %r8,%r15
  0x00007f7748fc6b6f:   xor    %rdx,%r15
  0x00007f7748fc6b72:   rorx   $0x22,%r10,%r12
  0x00007f7748fc6b78:   xor    %r14,%r13
  0x00007f7748fc6b7b:   rorx   $0xe,%rcx,%r14
  0x00007f7748fc6b81:   and    %rcx,%r15
  0x00007f7748fc6b84:   add    %r9,%rbx
  0x00007f7748fc6b87:   and    %r11,%rdi
  0x00007f7748fc6b8a:   xor    %r14,%r13
  0x00007f7748fc6b8d:   rorx   $0x27,%r10,%r14
  0x00007f7748fc6b93:   xor    %r12,%r14
  0x00007f7748fc6b96:   rorx   $0x1c,%r10,%r12
  0x00007f7748fc6b9c:   xor    %rdx,%r15
  0x00007f7748fc6b9f:   xor    %r12,%r14
  0x00007f7748fc6ba2:   mov    %r10,%r12
  0x00007f7748fc6ba5:   and    %rax,%r12
  0x00007f7748fc6ba8:   add    %r13,%r15
  0x00007f7748fc6bab:   or     %r12,%rdi
  0x00007f7748fc6bae:   add    %r14,%r9
  0x00007f7748fc6bb1:   add    %r15,%rbx
  0x00007f7748fc6bb4:   add    %r15,%r9
  0x00007f7748fc6bb7:   add    %rdi,%r9
  0x00007f7748fc6bba:   vpsrlq $0x13,%ymm6,%ymm3
  0x00007f7748fc6bbf:   vpsllq $0x2d,%ymm6,%ymm1
  0x00007f7748fc6bc4:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6bc8:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6bcc:   vpsrlq $0x3d,%ymm6,%ymm3
  0x00007f7748fc6bd1:   vpsllq $0x3,%ymm6,%ymm1
  0x00007f7748fc6bd6:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6bda:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6bde:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f7748fc6be3:   vpblendd $0xf0,%ymm2,%ymm6,%ymm6
  0x00007f7748fc6be9:   mov    %r9,%rdi
  0x00007f7748fc6bec:   rorx   $0x29,%rbx,%r13
  0x00007f7748fc6bf2:   rorx   $0x12,%rbx,%r14
  0x00007f7748fc6bf8:   add    0x18(%rsp),%rdx
  0x00007f7748fc6bfd:   or     %r11,%rdi
  0x00007f7748fc6c00:   mov    %rcx,%r15
  0x00007f7748fc6c03:   xor    %r8,%r15
  0x00007f7748fc6c06:   rorx   $0x22,%r9,%r12
  0x00007f7748fc6c0c:   xor    %r14,%r13
  0x00007f7748fc6c0f:   rorx   $0xe,%rbx,%r14
  0x00007f7748fc6c15:   and    %rbx,%r15
  0x00007f7748fc6c18:   add    %rdx,%rax
  0x00007f7748fc6c1b:   and    %r10,%rdi
  0x00007f7748fc6c1e:   xor    %r14,%r13
  0x00007f7748fc6c21:   rorx   $0x27,%r9,%r14
  0x00007f7748fc6c27:   xor    %r12,%r14
  0x00007f7748fc6c2a:   rorx   $0x1c,%r9,%r12
  0x00007f7748fc6c30:   xor    %r8,%r15
  0x00007f7748fc6c33:   xor    %r12,%r14
  0x00007f7748fc6c36:   mov    %r9,%r12
  0x00007f7748fc6c39:   and    %r11,%r12
  0x00007f7748fc6c3c:   add    %r13,%r15
  0x00007f7748fc6c3f:   or     %r12,%rdi
  0x00007f7748fc6c42:   add    %r14,%rdx
  0x00007f7748fc6c45:   add    %r15,%rax
  0x00007f7748fc6c48:   add    %r15,%rdx
  0x00007f7748fc6c4b:   add    %rdi,%rdx
  0x00007f7748fc6c4e:   vpaddq 0x60(%rbp),%ymm7,%ymm0
  0x00007f7748fc6c53:   vmovdqu %ymm0,(%rsp)
  0x00007f7748fc6c58:   add    $0x80,%rbp
  0x00007f7748fc6c5f:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm0
  0x00007f7748fc6c65:   vpalignr $0x8,%ymm5,%ymm0,%ymm0
  0x00007f7748fc6c6b:   vpaddq %ymm7,%ymm0,%ymm0
  0x00007f7748fc6c6f:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm1
  0x00007f7748fc6c75:   vpalignr $0x8,%ymm7,%ymm1,%ymm1
  0x00007f7748fc6c7b:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f7748fc6c80:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f7748fc6c85:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc6c89:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f7748fc6c8e:   mov    %rdx,%rdi
  0x00007f7748fc6c91:   rorx   $0x29,%rax,%r13
  0x00007f7748fc6c97:   rorx   $0x12,%rax,%r14
  0x00007f7748fc6c9d:   add    (%rsp),%r8
  0x00007f7748fc6ca1:   or     %r10,%rdi
  0x00007f7748fc6ca4:   mov    %rbx,%r15
  0x00007f7748fc6ca7:   xor    %rcx,%r15
  0x00007f7748fc6caa:   rorx   $0x22,%rdx,%r12
  0x00007f7748fc6cb0:   xor    %r14,%r13
  0x00007f7748fc6cb3:   rorx   $0xe,%rax,%r14
  0x00007f7748fc6cb9:   and    %rax,%r15
  0x00007f7748fc6cbc:   add    %r8,%r11
  0x00007f7748fc6cbf:   and    %r9,%rdi
  0x00007f7748fc6cc2:   xor    %r14,%r13
  0x00007f7748fc6cc5:   rorx   $0x27,%rdx,%r14
  0x00007f7748fc6ccb:   xor    %r12,%r14
  0x00007f7748fc6cce:   rorx   $0x1c,%rdx,%r12
  0x00007f7748fc6cd4:   xor    %rcx,%r15
  0x00007f7748fc6cd7:   xor    %r12,%r14
  0x00007f7748fc6cda:   mov    %rdx,%r12
  0x00007f7748fc6cdd:   and    %r10,%r12
  0x00007f7748fc6ce0:   add    %r13,%r15
  0x00007f7748fc6ce3:   or     %r12,%rdi
  0x00007f7748fc6ce6:   add    %r14,%r8
  0x00007f7748fc6ce9:   add    %r15,%r11
  0x00007f7748fc6cec:   add    %r15,%r8
  0x00007f7748fc6cef:   add    %rdi,%r8
  0x00007f7748fc6cf2:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f7748fc6cf7:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f7748fc6cfc:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f7748fc6d00:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f7748fc6d05:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f7748fc6d09:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f7748fc6d0d:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm7
  0x00007f7748fc6d13:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f7748fc6d18:   vperm2f128 $0x11,%ymm6,%ymm6,%ymm2
  0x00007f7748fc6d1e:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f7748fc6d23:   mov    %r8,%rdi
  0x00007f7748fc6d26:   rorx   $0x29,%r11,%r13
  0x00007f7748fc6d2c:   rorx   $0x12,%r11,%r14
  0x00007f7748fc6d32:   add    0x8(%rsp),%rcx
  0x00007f7748fc6d37:   or     %r9,%rdi
  0x00007f7748fc6d3a:   mov    %rax,%r15
  0x00007f7748fc6d3d:   xor    %rbx,%r15
  0x00007f7748fc6d40:   rorx   $0x22,%r8,%r12
  0x00007f7748fc6d46:   xor    %r14,%r13
  0x00007f7748fc6d49:   rorx   $0xe,%r11,%r14
  0x00007f7748fc6d4f:   and    %r11,%r15
  0x00007f7748fc6d52:   add    %rcx,%r10
  0x00007f7748fc6d55:   and    %rdx,%rdi
  0x00007f7748fc6d58:   xor    %r14,%r13
  0x00007f7748fc6d5b:   rorx   $0x27,%r8,%r14
  0x00007f7748fc6d61:   xor    %r12,%r14
  0x00007f7748fc6d64:   rorx   $0x1c,%r8,%r12
  0x00007f7748fc6d6a:   xor    %rbx,%r15
  0x00007f7748fc6d6d:   xor    %r12,%r14
  0x00007f7748fc6d70:   mov    %r8,%r12
  0x00007f7748fc6d73:   and    %r9,%r12
  0x00007f7748fc6d76:   add    %r13,%r15
  0x00007f7748fc6d79:   or     %r12,%rdi
  0x00007f7748fc6d7c:   add    %r14,%rcx
  0x00007f7748fc6d7f:   add    %r15,%r10
  0x00007f7748fc6d82:   add    %r15,%rcx
  0x00007f7748fc6d85:   add    %rdi,%rcx
  0x00007f7748fc6d88:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc6d8d:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f7748fc6d92:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6d96:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6d9a:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f7748fc6d9f:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f7748fc6da4:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6da8:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6dac:   vpaddq %ymm8,%ymm7,%ymm7
  0x00007f7748fc6db1:   vpsrlq $0x6,%ymm7,%ymm8
  0x00007f7748fc6db6:   mov    %rcx,%rdi
  0x00007f7748fc6db9:   rorx   $0x29,%r10,%r13
  0x00007f7748fc6dbf:   rorx   $0x12,%r10,%r14
  0x00007f7748fc6dc5:   add    0x10(%rsp),%rbx
  0x00007f7748fc6dca:   or     %rdx,%rdi
  0x00007f7748fc6dcd:   mov    %r11,%r15
  0x00007f7748fc6dd0:   xor    %rax,%r15
  0x00007f7748fc6dd3:   rorx   $0x22,%rcx,%r12
  0x00007f7748fc6dd9:   xor    %r14,%r13
  0x00007f7748fc6ddc:   rorx   $0xe,%r10,%r14
  0x00007f7748fc6de2:   and    %r10,%r15
  0x00007f7748fc6de5:   add    %rbx,%r9
  0x00007f7748fc6de8:   and    %r8,%rdi
  0x00007f7748fc6deb:   xor    %r14,%r13
  0x00007f7748fc6dee:   rorx   $0x27,%rcx,%r14
  0x00007f7748fc6df4:   xor    %r12,%r14
  0x00007f7748fc6df7:   rorx   $0x1c,%rcx,%r12
  0x00007f7748fc6dfd:   xor    %rax,%r15
  0x00007f7748fc6e00:   xor    %r12,%r14
  0x00007f7748fc6e03:   mov    %rcx,%r12
  0x00007f7748fc6e06:   and    %rdx,%r12
  0x00007f7748fc6e09:   add    %r13,%r15
  0x00007f7748fc6e0c:   or     %r12,%rdi
  0x00007f7748fc6e0f:   add    %r14,%rbx
  0x00007f7748fc6e12:   add    %r15,%r9
  0x00007f7748fc6e15:   add    %r15,%rbx
  0x00007f7748fc6e18:   add    %rdi,%rbx
  0x00007f7748fc6e1b:   vpsrlq $0x13,%ymm7,%ymm3
  0x00007f7748fc6e20:   vpsllq $0x2d,%ymm7,%ymm1
  0x00007f7748fc6e25:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6e29:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6e2d:   vpsrlq $0x3d,%ymm7,%ymm3
  0x00007f7748fc6e32:   vpsllq $0x3,%ymm7,%ymm1
  0x00007f7748fc6e37:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc6e3b:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc6e3f:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f7748fc6e44:   vpblendd $0xf0,%ymm2,%ymm7,%ymm7
  0x00007f7748fc6e4a:   mov    %rbx,%rdi
  0x00007f7748fc6e4d:   rorx   $0x29,%r9,%r13
  0x00007f7748fc6e53:   rorx   $0x12,%r9,%r14
  0x00007f7748fc6e59:   add    0x18(%rsp),%rax
  0x00007f7748fc6e5e:   or     %r8,%rdi
  0x00007f7748fc6e61:   mov    %r10,%r15
  0x00007f7748fc6e64:   xor    %r11,%r15
  0x00007f7748fc6e67:   rorx   $0x22,%rbx,%r12
  0x00007f7748fc6e6d:   xor    %r14,%r13
  0x00007f7748fc6e70:   rorx   $0xe,%r9,%r14
  0x00007f7748fc6e76:   and    %r9,%r15
  0x00007f7748fc6e79:   add    %rax,%rdx
  0x00007f7748fc6e7c:   and    %rcx,%rdi
  0x00007f7748fc6e7f:   xor    %r14,%r13
  0x00007f7748fc6e82:   rorx   $0x27,%rbx,%r14
  0x00007f7748fc6e88:   xor    %r12,%r14
  0x00007f7748fc6e8b:   rorx   $0x1c,%rbx,%r12
  0x00007f7748fc6e91:   xor    %r11,%r15
  0x00007f7748fc6e94:   xor    %r12,%r14
  0x00007f7748fc6e97:   mov    %rbx,%r12
  0x00007f7748fc6e9a:   and    %r8,%r12
  0x00007f7748fc6e9d:   add    %r13,%r15
  0x00007f7748fc6ea0:   or     %r12,%rdi
  0x00007f7748fc6ea3:   add    %r14,%rax
  0x00007f7748fc6ea6:   add    %r15,%rdx
  0x00007f7748fc6ea9:   add    %r15,%rax
  0x00007f7748fc6eac:   add    %rdi,%rax
  0x00007f7748fc6eaf:   subq   $0x1,0x20(%rsp)
  0x00007f7748fc6eb5:   jne    Stub::sha512_implCompress+192 0x00007f7748fc6540
  0x00007f7748fc6ebb:   movq   $0x2,0x20(%rsp)
  0x00007f7748fc6ec4:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007f7748fc6ec9:   vmovdqu %ymm0,(%rsp)
  0x00007f7748fc6ece:   mov    %r9,%r15
  0x00007f7748fc6ed1:   rorx   $0x29,%rdx,%r13
  0x00007f7748fc6ed7:   rorx   $0x12,%rdx,%r14
  0x00007f7748fc6edd:   xor    %r10,%r15
  0x00007f7748fc6ee0:   xor    %r14,%r13
  0x00007f7748fc6ee3:   rorx   $0xe,%rdx,%r14
  0x00007f7748fc6ee9:   and    %rdx,%r15
  0x00007f7748fc6eec:   xor    %r14,%r13
  0x00007f7748fc6eef:   rorx   $0x22,%rax,%r12
  0x00007f7748fc6ef5:   xor    %r10,%r15
  0x00007f7748fc6ef8:   rorx   $0x27,%rax,%r14
  0x00007f7748fc6efe:   mov    %rax,%rdi
  0x00007f7748fc6f01:   xor    %r12,%r14
  0x00007f7748fc6f04:   rorx   $0x1c,%rax,%r12
  0x00007f7748fc6f0a:   add    (%rsp),%r11
  0x00007f7748fc6f0e:   or     %rcx,%rdi
  0x00007f7748fc6f11:   xor    %r12,%r14
  0x00007f7748fc6f14:   mov    %rax,%r12
  0x00007f7748fc6f17:   and    %rbx,%rdi
  0x00007f7748fc6f1a:   and    %rcx,%r12
  0x00007f7748fc6f1d:   add    %r13,%r15
  0x00007f7748fc6f20:   add    %r11,%r8
  0x00007f7748fc6f23:   or     %r12,%rdi
  0x00007f7748fc6f26:   add    %r14,%r11
  0x00007f7748fc6f29:   add    %r15,%r8
  0x00007f7748fc6f2c:   add    %r15,%r11
  0x00007f7748fc6f2f:   mov    %rdx,%r15
  0x00007f7748fc6f32:   rorx   $0x29,%r8,%r13
  0x00007f7748fc6f38:   rorx   $0x12,%r8,%r14
  0x00007f7748fc6f3e:   xor    %r9,%r15
  0x00007f7748fc6f41:   xor    %r14,%r13
  0x00007f7748fc6f44:   rorx   $0xe,%r8,%r14
  0x00007f7748fc6f4a:   and    %r8,%r15
  0x00007f7748fc6f4d:   add    %rdi,%r11
  0x00007f7748fc6f50:   xor    %r14,%r13
  0x00007f7748fc6f53:   rorx   $0x22,%r11,%r12
  0x00007f7748fc6f59:   xor    %r9,%r15
  0x00007f7748fc6f5c:   rorx   $0x27,%r11,%r14
  0x00007f7748fc6f62:   mov    %r11,%rdi
  0x00007f7748fc6f65:   xor    %r12,%r14
  0x00007f7748fc6f68:   rorx   $0x1c,%r11,%r12
  0x00007f7748fc6f6e:   add    0x8(%rsp),%r10
  0x00007f7748fc6f73:   or     %rbx,%rdi
  0x00007f7748fc6f76:   xor    %r12,%r14
  0x00007f7748fc6f79:   mov    %r11,%r12
  0x00007f7748fc6f7c:   and    %rax,%rdi
  0x00007f7748fc6f7f:   and    %rbx,%r12
  0x00007f7748fc6f82:   add    %r13,%r15
  0x00007f7748fc6f85:   add    %r10,%rcx
  0x00007f7748fc6f88:   or     %r12,%rdi
  0x00007f7748fc6f8b:   add    %r14,%r10
  0x00007f7748fc6f8e:   add    %r15,%rcx
  0x00007f7748fc6f91:   add    %r15,%r10
  0x00007f7748fc6f94:   mov    %r8,%r15
  0x00007f7748fc6f97:   rorx   $0x29,%rcx,%r13
  0x00007f7748fc6f9d:   rorx   $0x12,%rcx,%r14
  0x00007f7748fc6fa3:   xor    %rdx,%r15
  0x00007f7748fc6fa6:   xor    %r14,%r13
  0x00007f7748fc6fa9:   rorx   $0xe,%rcx,%r14
  0x00007f7748fc6faf:   and    %rcx,%r15
  0x00007f7748fc6fb2:   add    %rdi,%r10
  0x00007f7748fc6fb5:   xor    %r14,%r13
  0x00007f7748fc6fb8:   rorx   $0x22,%r10,%r12
  0x00007f7748fc6fbe:   xor    %rdx,%r15
  0x00007f7748fc6fc1:   rorx   $0x27,%r10,%r14
  0x00007f7748fc6fc7:   mov    %r10,%rdi
  0x00007f7748fc6fca:   xor    %r12,%r14
  0x00007f7748fc6fcd:   rorx   $0x1c,%r10,%r12
  0x00007f7748fc6fd3:   add    0x10(%rsp),%r9
  0x00007f7748fc6fd8:   or     %rax,%rdi
  0x00007f7748fc6fdb:   xor    %r12,%r14
  0x00007f7748fc6fde:   mov    %r10,%r12
  0x00007f7748fc6fe1:   and    %r11,%rdi
  0x00007f7748fc6fe4:   and    %rax,%r12
  0x00007f7748fc6fe7:   add    %r13,%r15
  0x00007f7748fc6fea:   add    %r9,%rbx
  0x00007f7748fc6fed:   or     %r12,%rdi
  0x00007f7748fc6ff0:   add    %r14,%r9
  0x00007f7748fc6ff3:   add    %r15,%rbx
  0x00007f7748fc6ff6:   add    %r15,%r9
  0x00007f7748fc6ff9:   mov    %rcx,%r15
  0x00007f7748fc6ffc:   rorx   $0x29,%rbx,%r13
  0x00007f7748fc7002:   rorx   $0x12,%rbx,%r14
  0x00007f7748fc7008:   xor    %r8,%r15
  0x00007f7748fc700b:   xor    %r14,%r13
  0x00007f7748fc700e:   rorx   $0xe,%rbx,%r14
  0x00007f7748fc7014:   and    %rbx,%r15
  0x00007f7748fc7017:   add    %rdi,%r9
  0x00007f7748fc701a:   xor    %r14,%r13
  0x00007f7748fc701d:   rorx   $0x22,%r9,%r12
  0x00007f7748fc7023:   xor    %r8,%r15
  0x00007f7748fc7026:   rorx   $0x27,%r9,%r14
  0x00007f7748fc702c:   mov    %r9,%rdi
  0x00007f7748fc702f:   xor    %r12,%r14
  0x00007f7748fc7032:   rorx   $0x1c,%r9,%r12
  0x00007f7748fc7038:   add    0x18(%rsp),%rdx
  0x00007f7748fc703d:   or     %r11,%rdi
  0x00007f7748fc7040:   xor    %r12,%r14
  0x00007f7748fc7043:   mov    %r9,%r12
  0x00007f7748fc7046:   and    %r10,%rdi
  0x00007f7748fc7049:   and    %r11,%r12
  0x00007f7748fc704c:   add    %r13,%r15
  0x00007f7748fc704f:   add    %rdx,%rax
  0x00007f7748fc7052:   or     %r12,%rdi
  0x00007f7748fc7055:   add    %r14,%rdx
  0x00007f7748fc7058:   add    %r15,%rax
  0x00007f7748fc705b:   add    %r15,%rdx
  0x00007f7748fc705e:   add    %rdi,%rdx
  0x00007f7748fc7061:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007f7748fc7066:   vmovdqu %ymm0,(%rsp)
  0x00007f7748fc706b:   add    $0x40,%rbp
  0x00007f7748fc706f:   mov    %rbx,%r15
  0x00007f7748fc7072:   rorx   $0x29,%rax,%r13
  0x00007f7748fc7078:   rorx   $0x12,%rax,%r14
  0x00007f7748fc707e:   xor    %rcx,%r15
  0x00007f7748fc7081:   xor    %r14,%r13
  0x00007f7748fc7084:   rorx   $0xe,%rax,%r14
  0x00007f7748fc708a:   and    %rax,%r15
  0x00007f7748fc708d:   xor    %r14,%r13
  0x00007f7748fc7090:   rorx   $0x22,%rdx,%r12
  0x00007f7748fc7096:   xor    %rcx,%r15
  0x00007f7748fc7099:   rorx   $0x27,%rdx,%r14
  0x00007f7748fc709f:   mov    %rdx,%rdi
  0x00007f7748fc70a2:   xor    %r12,%r14
  0x00007f7748fc70a5:   rorx   $0x1c,%rdx,%r12
  0x00007f7748fc70ab:   add    (%rsp),%r8
  0x00007f7748fc70af:   or     %r10,%rdi
  0x00007f7748fc70b2:   xor    %r12,%r14
  0x00007f7748fc70b5:   mov    %rdx,%r12
  0x00007f7748fc70b8:   and    %r9,%rdi
  0x00007f7748fc70bb:   and    %r10,%r12
  0x00007f7748fc70be:   add    %r13,%r15
  0x00007f7748fc70c1:   add    %r8,%r11
  0x00007f7748fc70c4:   or     %r12,%rdi
  0x00007f7748fc70c7:   add    %r14,%r8
  0x00007f7748fc70ca:   add    %r15,%r11
  0x00007f7748fc70cd:   add    %r15,%r8
  0x00007f7748fc70d0:   mov    %rax,%r15
  0x00007f7748fc70d3:   rorx   $0x29,%r11,%r13
  0x00007f7748fc70d9:   rorx   $0x12,%r11,%r14
  0x00007f7748fc70df:   xor    %rbx,%r15
  0x00007f7748fc70e2:   xor    %r14,%r13
  0x00007f7748fc70e5:   rorx   $0xe,%r11,%r14
  0x00007f7748fc70eb:   and    %r11,%r15
  0x00007f7748fc70ee:   add    %rdi,%r8
  0x00007f7748fc70f1:   xor    %r14,%r13
  0x00007f7748fc70f4:   rorx   $0x22,%r8,%r12
  0x00007f7748fc70fa:   xor    %rbx,%r15
  0x00007f7748fc70fd:   rorx   $0x27,%r8,%r14
  0x00007f7748fc7103:   mov    %r8,%rdi
  0x00007f7748fc7106:   xor    %r12,%r14
  0x00007f7748fc7109:   rorx   $0x1c,%r8,%r12
  0x00007f7748fc710f:   add    0x8(%rsp),%rcx
  0x00007f7748fc7114:   or     %r9,%rdi
  0x00007f7748fc7117:   xor    %r12,%r14
  0x00007f7748fc711a:   mov    %r8,%r12
  0x00007f7748fc711d:   and    %rdx,%rdi
  0x00007f7748fc7120:   and    %r9,%r12
  0x00007f7748fc7123:   add    %r13,%r15
  0x00007f7748fc7126:   add    %rcx,%r10
  0x00007f7748fc7129:   or     %r12,%rdi
  0x00007f7748fc712c:   add    %r14,%rcx
  0x00007f7748fc712f:   add    %r15,%r10
  0x00007f7748fc7132:   add    %r15,%rcx
  0x00007f7748fc7135:   mov    %r11,%r15
  0x00007f7748fc7138:   rorx   $0x29,%r10,%r13
  0x00007f7748fc713e:   rorx   $0x12,%r10,%r14
  0x00007f7748fc7144:   xor    %rax,%r15
  0x00007f7748fc7147:   xor    %r14,%r13
  0x00007f7748fc714a:   rorx   $0xe,%r10,%r14
  0x00007f7748fc7150:   and    %r10,%r15
  0x00007f7748fc7153:   add    %rdi,%rcx
  0x00007f7748fc7156:   xor    %r14,%r13
  0x00007f7748fc7159:   rorx   $0x22,%rcx,%r12
  0x00007f7748fc715f:   xor    %rax,%r15
  0x00007f7748fc7162:   rorx   $0x27,%rcx,%r14
  0x00007f7748fc7168:   mov    %rcx,%rdi
  0x00007f7748fc716b:   xor    %r12,%r14
  0x00007f7748fc716e:   rorx   $0x1c,%rcx,%r12
  0x00007f7748fc7174:   add    0x10(%rsp),%rbx
  0x00007f7748fc7179:   or     %rdx,%rdi
  0x00007f7748fc717c:   xor    %r12,%r14
  0x00007f7748fc717f:   mov    %rcx,%r12
  0x00007f7748fc7182:   and    %r8,%rdi
  0x00007f7748fc7185:   and    %rdx,%r12
  0x00007f7748fc7188:   add    %r13,%r15
  0x00007f7748fc718b:   add    %rbx,%r9
  0x00007f7748fc718e:   or     %r12,%rdi
  0x00007f7748fc7191:   add    %r14,%rbx
  0x00007f7748fc7194:   add    %r15,%r9
  0x00007f7748fc7197:   add    %r15,%rbx
  0x00007f7748fc719a:   mov    %r10,%r15
  0x00007f7748fc719d:   rorx   $0x29,%r9,%r13
  0x00007f7748fc71a3:   rorx   $0x12,%r9,%r14
  0x00007f7748fc71a9:   xor    %r11,%r15
  0x00007f7748fc71ac:   xor    %r14,%r13
  0x00007f7748fc71af:   rorx   $0xe,%r9,%r14
  0x00007f7748fc71b5:   and    %r9,%r15
  0x00007f7748fc71b8:   add    %rdi,%rbx
  0x00007f7748fc71bb:   xor    %r14,%r13
  0x00007f7748fc71be:   rorx   $0x22,%rbx,%r12
  0x00007f7748fc71c4:   xor    %r11,%r15
  0x00007f7748fc71c7:   rorx   $0x27,%rbx,%r14
  0x00007f7748fc71cd:   mov    %rbx,%rdi
  0x00007f7748fc71d0:   xor    %r12,%r14
  0x00007f7748fc71d3:   rorx   $0x1c,%rbx,%r12
  0x00007f7748fc71d9:   add    0x18(%rsp),%rax
  0x00007f7748fc71de:   or     %r8,%rdi
  0x00007f7748fc71e1:   xor    %r12,%r14
  0x00007f7748fc71e4:   mov    %rbx,%r12
  0x00007f7748fc71e7:   and    %rcx,%rdi
  0x00007f7748fc71ea:   and    %r8,%r12
  0x00007f7748fc71ed:   add    %r13,%r15
  0x00007f7748fc71f0:   add    %rax,%rdx
  0x00007f7748fc71f3:   or     %r12,%rdi
  0x00007f7748fc71f6:   add    %r14,%rax
  0x00007f7748fc71f9:   add    %r15,%rdx
  0x00007f7748fc71fc:   add    %r15,%rax
  0x00007f7748fc71ff:   add    %rdi,%rax
  0x00007f7748fc7202:   vmovdqu %ymm6,%ymm4
  0x00007f7748fc7206:   vmovdqu %ymm7,%ymm5
  0x00007f7748fc720a:   subq   $0x1,0x20(%rsp)
  0x00007f7748fc7210:   jne    Stub::sha512_implCompress+2628 0x00007f7748fc6ec4
  0x00007f7748fc7216:   add    (%rsi),%rax
  0x00007f7748fc7219:   mov    %rax,(%rsi)
  0x00007f7748fc721c:   add    0x8(%rsi),%rbx
  0x00007f7748fc7220:   mov    %rbx,0x8(%rsi)
  0x00007f7748fc7224:   add    0x10(%rsi),%rcx
  0x00007f7748fc7228:   mov    %rcx,0x10(%rsi)
  0x00007f7748fc722c:   add    0x18(%rsi),%r8
  0x00007f7748fc7230:   mov    %r8,0x18(%rsi)
  0x00007f7748fc7234:   add    0x20(%rsi),%rdx
  0x00007f7748fc7238:   mov    %rdx,0x20(%rsi)
  0x00007f7748fc723c:   add    0x28(%rsi),%r9
  0x00007f7748fc7240:   mov    %r9,0x28(%rsi)
  0x00007f7748fc7244:   add    0x30(%rsi),%r10
  0x00007f7748fc7248:   mov    %r10,0x30(%rsi)
  0x00007f7748fc724c:   add    0x38(%rsi),%r11
  0x00007f7748fc7250:   mov    %r11,0x38(%rsi)
  0x00007f7748fc7254:   mov    0x28(%rsp),%rdi
  0x00007f7748fc7259:   add    $0x80,%rdi
  0x00007f7748fc7260:   cmp    0x30(%rsp),%rdi
  0x00007f7748fc7265:   jne    Stub::sha512_implCompress+129 0x00007f7748fc6501
  0x00007f7748fc726b:   mov    0x40(%rsp),%rbp
  0x00007f7748fc7270:   mov    0x48(%rsp),%rbx
  0x00007f7748fc7275:   mov    0x50(%rsp),%r12
  0x00007f7748fc727a:   mov    0x58(%rsp),%r13
  0x00007f7748fc727f:   mov    0x60(%rsp),%r14
  0x00007f7748fc7284:   mov    0x68(%rsp),%r15
  0x00007f7748fc7289:   mov    0x38(%rsp),%rsp
  0x00007f7748fc728e:   pop    %rcx
  0x00007f7748fc728f:   pop    %rdx
  0x00007f7748fc7290:   vzeroupper 
  0x00007f7748fc7293:   leaveq 
  0x00007f7748fc7294:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha512_implCompressMB [0x00007f7748fc72a0, 0x00007f7748fc80e5] (3653 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc72a0:   push   %rbp
  0x00007f7748fc72a1:   mov    %rsp,%rbp
  0x00007f7748fc72a4:   push   %rdx
  0x00007f7748fc72a5:   push   %rcx
  0x00007f7748fc72a6:   mov    %rsp,%rax
  0x00007f7748fc72a9:   sub    $0x70,%rsp
  0x00007f7748fc72ad:   and    $0xffffffffffffffe0,%rsp
  0x00007f7748fc72b1:   mov    %rax,0x38(%rsp)
  0x00007f7748fc72b6:   mov    %rbp,0x40(%rsp)
  0x00007f7748fc72bb:   mov    %rbx,0x48(%rsp)
  0x00007f7748fc72c0:   mov    %r12,0x50(%rsp)
  0x00007f7748fc72c5:   mov    %r13,0x58(%rsp)
  0x00007f7748fc72ca:   mov    %r14,0x60(%rsp)
  0x00007f7748fc72cf:   mov    %r15,0x68(%rsp)
  0x00007f7748fc72d4:   vpblendd $0xf0,%xmm1,%xmm0,%xmm0
  0x00007f7748fc72da:   vpblendd $0xf0,%ymm1,%ymm0,%ymm0
  0x00007f7748fc72e0:   xor    %rax,%rax
  0x00007f7748fc72e3:   cmp    %rcx,%rdx
  0x00007f7748fc72e6:   jae    Stub::sha512_implCompressMB+87 0x00007f7748fc72f7
  0x00007f7748fc72e8:   add    $0x80,%rdx
  0x00007f7748fc72ef:   add    $0x80,%rax
  0x00007f7748fc72f5:   jmp    Stub::sha512_implCompressMB+67 0x00007f7748fc72e3
  0x00007f7748fc72f7:   mov    %rax,%rdx
  0x00007f7748fc72fa:   cmp    $0x0,%rdx
  0x00007f7748fc72fe:   je     Stub::sha512_implCompressMB+3595 0x00007f7748fc80ab
  0x00007f7748fc7304:   add    %rdi,%rdx
  0x00007f7748fc7307:   mov    %rdx,0x30(%rsp)
  0x00007f7748fc730c:   mov    (%rsi),%rax
  0x00007f7748fc730f:   mov    0x8(%rsi),%rbx
  0x00007f7748fc7313:   mov    0x10(%rsi),%rcx
  0x00007f7748fc7317:   mov    0x18(%rsi),%r8
  0x00007f7748fc731b:   mov    0x20(%rsi),%rdx
  0x00007f7748fc731f:   mov    0x28(%rsi),%r9
  0x00007f7748fc7323:   mov    0x38(%rsi),%r11
  0x00007f7748fc7327:   vmovdqu -0xeef(%rip),%ymm9        # Stub::pshuffle_byte_flip_mask_sha512
  0x00007f7748fc732f:   vmovdqu -0xed7(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask_sha512+32 0x00007f7748fc6460
  0x00007f7748fc7337:   mov    0x30(%rsi),%r10
  0x00007f7748fc733b:   movabs $0x7f774d63d140,%rbp
  0x00007f7748fc7345:   vmovdqu (%rdi),%ymm4
  0x00007f7748fc7349:   vpshufb %ymm9,%ymm4,%ymm4
  0x00007f7748fc734e:   vmovdqu 0x20(%rdi),%ymm5
  0x00007f7748fc7353:   vpshufb %ymm9,%ymm5,%ymm5
  0x00007f7748fc7358:   vmovdqu 0x40(%rdi),%ymm6
  0x00007f7748fc735d:   vpshufb %ymm9,%ymm6,%ymm6
  0x00007f7748fc7362:   vmovdqu 0x60(%rdi),%ymm7
  0x00007f7748fc7367:   vpshufb %ymm9,%ymm7,%ymm7
  0x00007f7748fc736c:   mov    %rdi,0x28(%rsp)
  0x00007f7748fc7371:   movq   $0x4,0x20(%rsp)
  0x00007f7748fc737a:   nopw   0x0(%rax,%rax,1)
  0x00007f7748fc7380:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007f7748fc7385:   vmovdqu %ymm0,(%rsp)
  0x00007f7748fc738a:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm0
  0x00007f7748fc7390:   vpalignr $0x8,%ymm6,%ymm0,%ymm0
  0x00007f7748fc7396:   vpaddq %ymm4,%ymm0,%ymm0
  0x00007f7748fc739a:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm1
  0x00007f7748fc73a0:   vpalignr $0x8,%ymm4,%ymm1,%ymm1
  0x00007f7748fc73a6:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f7748fc73ab:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f7748fc73b0:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc73b4:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f7748fc73b9:   mov    %rax,%rdi
  0x00007f7748fc73bc:   rorx   $0x29,%rdx,%r13
  0x00007f7748fc73c2:   rorx   $0x12,%rdx,%r14
  0x00007f7748fc73c8:   add    (%rsp),%r11
  0x00007f7748fc73cc:   or     %rcx,%rdi
  0x00007f7748fc73cf:   mov    %r9,%r15
  0x00007f7748fc73d2:   xor    %r10,%r15
  0x00007f7748fc73d5:   rorx   $0x22,%rax,%r12
  0x00007f7748fc73db:   xor    %r14,%r13
  0x00007f7748fc73de:   rorx   $0xe,%rdx,%r14
  0x00007f7748fc73e4:   and    %rdx,%r15
  0x00007f7748fc73e7:   add    %r11,%r8
  0x00007f7748fc73ea:   and    %rbx,%rdi
  0x00007f7748fc73ed:   xor    %r14,%r13
  0x00007f7748fc73f0:   rorx   $0x27,%rax,%r14
  0x00007f7748fc73f6:   xor    %r12,%r14
  0x00007f7748fc73f9:   rorx   $0x1c,%rax,%r12
  0x00007f7748fc73ff:   xor    %r10,%r15
  0x00007f7748fc7402:   xor    %r12,%r14
  0x00007f7748fc7405:   mov    %rax,%r12
  0x00007f7748fc7408:   and    %rcx,%r12
  0x00007f7748fc740b:   add    %r13,%r15
  0x00007f7748fc740e:   or     %r12,%rdi
  0x00007f7748fc7411:   add    %r14,%r11
  0x00007f7748fc7414:   add    %r15,%r8
  0x00007f7748fc7417:   add    %r15,%r11
  0x00007f7748fc741a:   add    %rdi,%r11
  0x00007f7748fc741d:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f7748fc7422:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f7748fc7427:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f7748fc742b:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f7748fc7430:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f7748fc7434:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f7748fc7438:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm4
  0x00007f7748fc743e:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f7748fc7443:   vperm2f128 $0x11,%ymm7,%ymm7,%ymm2
  0x00007f7748fc7449:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f7748fc744e:   mov    %r11,%rdi
  0x00007f7748fc7451:   rorx   $0x29,%r8,%r13
  0x00007f7748fc7457:   rorx   $0x12,%r8,%r14
  0x00007f7748fc745d:   add    0x8(%rsp),%r10
  0x00007f7748fc7462:   or     %rbx,%rdi
  0x00007f7748fc7465:   mov    %rdx,%r15
  0x00007f7748fc7468:   xor    %r9,%r15
  0x00007f7748fc746b:   rorx   $0x22,%r11,%r12
  0x00007f7748fc7471:   xor    %r14,%r13
  0x00007f7748fc7474:   rorx   $0xe,%r8,%r14
  0x00007f7748fc747a:   and    %r8,%r15
  0x00007f7748fc747d:   add    %r10,%rcx
  0x00007f7748fc7480:   and    %rax,%rdi
  0x00007f7748fc7483:   xor    %r14,%r13
  0x00007f7748fc7486:   rorx   $0x27,%r11,%r14
  0x00007f7748fc748c:   xor    %r12,%r14
  0x00007f7748fc748f:   rorx   $0x1c,%r11,%r12
  0x00007f7748fc7495:   xor    %r9,%r15
  0x00007f7748fc7498:   xor    %r12,%r14
  0x00007f7748fc749b:   mov    %r11,%r12
  0x00007f7748fc749e:   and    %rbx,%r12
  0x00007f7748fc74a1:   add    %r13,%r15
  0x00007f7748fc74a4:   or     %r12,%rdi
  0x00007f7748fc74a7:   add    %r14,%r10
  0x00007f7748fc74aa:   add    %r15,%rcx
  0x00007f7748fc74ad:   add    %r15,%r10
  0x00007f7748fc74b0:   add    %rdi,%r10
  0x00007f7748fc74b3:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc74b8:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f7748fc74bd:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc74c1:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc74c5:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f7748fc74ca:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f7748fc74cf:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc74d3:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc74d7:   vpaddq %ymm8,%ymm4,%ymm4
  0x00007f7748fc74dc:   vpsrlq $0x6,%ymm4,%ymm8
  0x00007f7748fc74e1:   mov    %r10,%rdi
  0x00007f7748fc74e4:   rorx   $0x29,%rcx,%r13
  0x00007f7748fc74ea:   rorx   $0x12,%rcx,%r14
  0x00007f7748fc74f0:   add    0x10(%rsp),%r9
  0x00007f7748fc74f5:   or     %rax,%rdi
  0x00007f7748fc74f8:   mov    %r8,%r15
  0x00007f7748fc74fb:   xor    %rdx,%r15
  0x00007f7748fc74fe:   rorx   $0x22,%r10,%r12
  0x00007f7748fc7504:   xor    %r14,%r13
  0x00007f7748fc7507:   rorx   $0xe,%rcx,%r14
  0x00007f7748fc750d:   and    %rcx,%r15
  0x00007f7748fc7510:   add    %r9,%rbx
  0x00007f7748fc7513:   and    %r11,%rdi
  0x00007f7748fc7516:   xor    %r14,%r13
  0x00007f7748fc7519:   rorx   $0x27,%r10,%r14
  0x00007f7748fc751f:   xor    %r12,%r14
  0x00007f7748fc7522:   rorx   $0x1c,%r10,%r12
  0x00007f7748fc7528:   xor    %rdx,%r15
  0x00007f7748fc752b:   xor    %r12,%r14
  0x00007f7748fc752e:   mov    %r10,%r12
  0x00007f7748fc7531:   and    %rax,%r12
  0x00007f7748fc7534:   add    %r13,%r15
  0x00007f7748fc7537:   or     %r12,%rdi
  0x00007f7748fc753a:   add    %r14,%r9
  0x00007f7748fc753d:   add    %r15,%rbx
  0x00007f7748fc7540:   add    %r15,%r9
  0x00007f7748fc7543:   add    %rdi,%r9
  0x00007f7748fc7546:   vpsrlq $0x13,%ymm4,%ymm3
  0x00007f7748fc754b:   vpsllq $0x2d,%ymm4,%ymm1
  0x00007f7748fc7550:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc7554:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc7558:   vpsrlq $0x3d,%ymm4,%ymm3
  0x00007f7748fc755d:   vpsllq $0x3,%ymm4,%ymm1
  0x00007f7748fc7562:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc7566:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc756a:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f7748fc756f:   vpblendd $0xf0,%ymm2,%ymm4,%ymm4
  0x00007f7748fc7575:   mov    %r9,%rdi
  0x00007f7748fc7578:   rorx   $0x29,%rbx,%r13
  0x00007f7748fc757e:   rorx   $0x12,%rbx,%r14
  0x00007f7748fc7584:   add    0x18(%rsp),%rdx
  0x00007f7748fc7589:   or     %r11,%rdi
  0x00007f7748fc758c:   mov    %rcx,%r15
  0x00007f7748fc758f:   xor    %r8,%r15
  0x00007f7748fc7592:   rorx   $0x22,%r9,%r12
  0x00007f7748fc7598:   xor    %r14,%r13
  0x00007f7748fc759b:   rorx   $0xe,%rbx,%r14
  0x00007f7748fc75a1:   and    %rbx,%r15
  0x00007f7748fc75a4:   add    %rdx,%rax
  0x00007f7748fc75a7:   and    %r10,%rdi
  0x00007f7748fc75aa:   xor    %r14,%r13
  0x00007f7748fc75ad:   rorx   $0x27,%r9,%r14
  0x00007f7748fc75b3:   xor    %r12,%r14
  0x00007f7748fc75b6:   rorx   $0x1c,%r9,%r12
  0x00007f7748fc75bc:   xor    %r8,%r15
  0x00007f7748fc75bf:   xor    %r12,%r14
  0x00007f7748fc75c2:   mov    %r9,%r12
  0x00007f7748fc75c5:   and    %r11,%r12
  0x00007f7748fc75c8:   add    %r13,%r15
  0x00007f7748fc75cb:   or     %r12,%rdi
  0x00007f7748fc75ce:   add    %r14,%rdx
  0x00007f7748fc75d1:   add    %r15,%rax
  0x00007f7748fc75d4:   add    %r15,%rdx
  0x00007f7748fc75d7:   add    %rdi,%rdx
  0x00007f7748fc75da:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007f7748fc75df:   vmovdqu %ymm0,(%rsp)
  0x00007f7748fc75e4:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm0
  0x00007f7748fc75ea:   vpalignr $0x8,%ymm7,%ymm0,%ymm0
  0x00007f7748fc75f0:   vpaddq %ymm5,%ymm0,%ymm0
  0x00007f7748fc75f4:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm1
  0x00007f7748fc75fa:   vpalignr $0x8,%ymm5,%ymm1,%ymm1
  0x00007f7748fc7600:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f7748fc7605:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f7748fc760a:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc760e:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f7748fc7613:   mov    %rdx,%rdi
  0x00007f7748fc7616:   rorx   $0x29,%rax,%r13
  0x00007f7748fc761c:   rorx   $0x12,%rax,%r14
  0x00007f7748fc7622:   add    (%rsp),%r8
  0x00007f7748fc7626:   or     %r10,%rdi
  0x00007f7748fc7629:   mov    %rbx,%r15
  0x00007f7748fc762c:   xor    %rcx,%r15
  0x00007f7748fc762f:   rorx   $0x22,%rdx,%r12
  0x00007f7748fc7635:   xor    %r14,%r13
  0x00007f7748fc7638:   rorx   $0xe,%rax,%r14
  0x00007f7748fc763e:   and    %rax,%r15
  0x00007f7748fc7641:   add    %r8,%r11
  0x00007f7748fc7644:   and    %r9,%rdi
  0x00007f7748fc7647:   xor    %r14,%r13
  0x00007f7748fc764a:   rorx   $0x27,%rdx,%r14
  0x00007f7748fc7650:   xor    %r12,%r14
  0x00007f7748fc7653:   rorx   $0x1c,%rdx,%r12
  0x00007f7748fc7659:   xor    %rcx,%r15
  0x00007f7748fc765c:   xor    %r12,%r14
  0x00007f7748fc765f:   mov    %rdx,%r12
  0x00007f7748fc7662:   and    %r10,%r12
  0x00007f7748fc7665:   add    %r13,%r15
  0x00007f7748fc7668:   or     %r12,%rdi
  0x00007f7748fc766b:   add    %r14,%r8
  0x00007f7748fc766e:   add    %r15,%r11
  0x00007f7748fc7671:   add    %r15,%r8
  0x00007f7748fc7674:   add    %rdi,%r8
  0x00007f7748fc7677:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f7748fc767c:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f7748fc7681:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f7748fc7685:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f7748fc768a:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f7748fc768e:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f7748fc7692:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm5
  0x00007f7748fc7698:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f7748fc769d:   vperm2f128 $0x11,%ymm4,%ymm4,%ymm2
  0x00007f7748fc76a3:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f7748fc76a8:   mov    %r8,%rdi
  0x00007f7748fc76ab:   rorx   $0x29,%r11,%r13
  0x00007f7748fc76b1:   rorx   $0x12,%r11,%r14
  0x00007f7748fc76b7:   add    0x8(%rsp),%rcx
  0x00007f7748fc76bc:   or     %r9,%rdi
  0x00007f7748fc76bf:   mov    %rax,%r15
  0x00007f7748fc76c2:   xor    %rbx,%r15
  0x00007f7748fc76c5:   rorx   $0x22,%r8,%r12
  0x00007f7748fc76cb:   xor    %r14,%r13
  0x00007f7748fc76ce:   rorx   $0xe,%r11,%r14
  0x00007f7748fc76d4:   and    %r11,%r15
  0x00007f7748fc76d7:   add    %rcx,%r10
  0x00007f7748fc76da:   and    %rdx,%rdi
  0x00007f7748fc76dd:   xor    %r14,%r13
  0x00007f7748fc76e0:   rorx   $0x27,%r8,%r14
  0x00007f7748fc76e6:   xor    %r12,%r14
  0x00007f7748fc76e9:   rorx   $0x1c,%r8,%r12
  0x00007f7748fc76ef:   xor    %rbx,%r15
  0x00007f7748fc76f2:   xor    %r12,%r14
  0x00007f7748fc76f5:   mov    %r8,%r12
  0x00007f7748fc76f8:   and    %r9,%r12
  0x00007f7748fc76fb:   add    %r13,%r15
  0x00007f7748fc76fe:   or     %r12,%rdi
  0x00007f7748fc7701:   add    %r14,%rcx
  0x00007f7748fc7704:   add    %r15,%r10
  0x00007f7748fc7707:   add    %r15,%rcx
  0x00007f7748fc770a:   add    %rdi,%rcx
  0x00007f7748fc770d:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc7712:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f7748fc7717:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc771b:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc771f:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f7748fc7724:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f7748fc7729:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc772d:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc7731:   vpaddq %ymm8,%ymm5,%ymm5
  0x00007f7748fc7736:   vpsrlq $0x6,%ymm5,%ymm8
  0x00007f7748fc773b:   mov    %rcx,%rdi
  0x00007f7748fc773e:   rorx   $0x29,%r10,%r13
  0x00007f7748fc7744:   rorx   $0x12,%r10,%r14
  0x00007f7748fc774a:   add    0x10(%rsp),%rbx
  0x00007f7748fc774f:   or     %rdx,%rdi
  0x00007f7748fc7752:   mov    %r11,%r15
  0x00007f7748fc7755:   xor    %rax,%r15
  0x00007f7748fc7758:   rorx   $0x22,%rcx,%r12
  0x00007f7748fc775e:   xor    %r14,%r13
  0x00007f7748fc7761:   rorx   $0xe,%r10,%r14
  0x00007f7748fc7767:   and    %r10,%r15
  0x00007f7748fc776a:   add    %rbx,%r9
  0x00007f7748fc776d:   and    %r8,%rdi
  0x00007f7748fc7770:   xor    %r14,%r13
  0x00007f7748fc7773:   rorx   $0x27,%rcx,%r14
  0x00007f7748fc7779:   xor    %r12,%r14
  0x00007f7748fc777c:   rorx   $0x1c,%rcx,%r12
  0x00007f7748fc7782:   xor    %rax,%r15
  0x00007f7748fc7785:   xor    %r12,%r14
  0x00007f7748fc7788:   mov    %rcx,%r12
  0x00007f7748fc778b:   and    %rdx,%r12
  0x00007f7748fc778e:   add    %r13,%r15
  0x00007f7748fc7791:   or     %r12,%rdi
  0x00007f7748fc7794:   add    %r14,%rbx
  0x00007f7748fc7797:   add    %r15,%r9
  0x00007f7748fc779a:   add    %r15,%rbx
  0x00007f7748fc779d:   add    %rdi,%rbx
  0x00007f7748fc77a0:   vpsrlq $0x13,%ymm5,%ymm3
  0x00007f7748fc77a5:   vpsllq $0x2d,%ymm5,%ymm1
  0x00007f7748fc77aa:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc77ae:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc77b2:   vpsrlq $0x3d,%ymm5,%ymm3
  0x00007f7748fc77b7:   vpsllq $0x3,%ymm5,%ymm1
  0x00007f7748fc77bc:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc77c0:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc77c4:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f7748fc77c9:   vpblendd $0xf0,%ymm2,%ymm5,%ymm5
  0x00007f7748fc77cf:   mov    %rbx,%rdi
  0x00007f7748fc77d2:   rorx   $0x29,%r9,%r13
  0x00007f7748fc77d8:   rorx   $0x12,%r9,%r14
  0x00007f7748fc77de:   add    0x18(%rsp),%rax
  0x00007f7748fc77e3:   or     %r8,%rdi
  0x00007f7748fc77e6:   mov    %r10,%r15
  0x00007f7748fc77e9:   xor    %r11,%r15
  0x00007f7748fc77ec:   rorx   $0x22,%rbx,%r12
  0x00007f7748fc77f2:   xor    %r14,%r13
  0x00007f7748fc77f5:   rorx   $0xe,%r9,%r14
  0x00007f7748fc77fb:   and    %r9,%r15
  0x00007f7748fc77fe:   add    %rax,%rdx
  0x00007f7748fc7801:   and    %rcx,%rdi
  0x00007f7748fc7804:   xor    %r14,%r13
  0x00007f7748fc7807:   rorx   $0x27,%rbx,%r14
  0x00007f7748fc780d:   xor    %r12,%r14
  0x00007f7748fc7810:   rorx   $0x1c,%rbx,%r12
  0x00007f7748fc7816:   xor    %r11,%r15
  0x00007f7748fc7819:   xor    %r12,%r14
  0x00007f7748fc781c:   mov    %rbx,%r12
  0x00007f7748fc781f:   and    %r8,%r12
  0x00007f7748fc7822:   add    %r13,%r15
  0x00007f7748fc7825:   or     %r12,%rdi
  0x00007f7748fc7828:   add    %r14,%rax
  0x00007f7748fc782b:   add    %r15,%rdx
  0x00007f7748fc782e:   add    %r15,%rax
  0x00007f7748fc7831:   add    %rdi,%rax
  0x00007f7748fc7834:   vpaddq 0x40(%rbp),%ymm6,%ymm0
  0x00007f7748fc7839:   vmovdqu %ymm0,(%rsp)
  0x00007f7748fc783e:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm0
  0x00007f7748fc7844:   vpalignr $0x8,%ymm4,%ymm0,%ymm0
  0x00007f7748fc784a:   vpaddq %ymm6,%ymm0,%ymm0
  0x00007f7748fc784e:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm1
  0x00007f7748fc7854:   vpalignr $0x8,%ymm6,%ymm1,%ymm1
  0x00007f7748fc785a:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f7748fc785f:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f7748fc7864:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc7868:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f7748fc786d:   mov    %rax,%rdi
  0x00007f7748fc7870:   rorx   $0x29,%rdx,%r13
  0x00007f7748fc7876:   rorx   $0x12,%rdx,%r14
  0x00007f7748fc787c:   add    (%rsp),%r11
  0x00007f7748fc7880:   or     %rcx,%rdi
  0x00007f7748fc7883:   mov    %r9,%r15
  0x00007f7748fc7886:   xor    %r10,%r15
  0x00007f7748fc7889:   rorx   $0x22,%rax,%r12
  0x00007f7748fc788f:   xor    %r14,%r13
  0x00007f7748fc7892:   rorx   $0xe,%rdx,%r14
  0x00007f7748fc7898:   and    %rdx,%r15
  0x00007f7748fc789b:   add    %r11,%r8
  0x00007f7748fc789e:   and    %rbx,%rdi
  0x00007f7748fc78a1:   xor    %r14,%r13
  0x00007f7748fc78a4:   rorx   $0x27,%rax,%r14
  0x00007f7748fc78aa:   xor    %r12,%r14
  0x00007f7748fc78ad:   rorx   $0x1c,%rax,%r12
  0x00007f7748fc78b3:   xor    %r10,%r15
  0x00007f7748fc78b6:   xor    %r12,%r14
  0x00007f7748fc78b9:   mov    %rax,%r12
  0x00007f7748fc78bc:   and    %rcx,%r12
  0x00007f7748fc78bf:   add    %r13,%r15
  0x00007f7748fc78c2:   or     %r12,%rdi
  0x00007f7748fc78c5:   add    %r14,%r11
  0x00007f7748fc78c8:   add    %r15,%r8
  0x00007f7748fc78cb:   add    %r15,%r11
  0x00007f7748fc78ce:   add    %rdi,%r11
  0x00007f7748fc78d1:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f7748fc78d6:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f7748fc78db:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f7748fc78df:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f7748fc78e4:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f7748fc78e8:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f7748fc78ec:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm6
  0x00007f7748fc78f2:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f7748fc78f7:   vperm2f128 $0x11,%ymm5,%ymm5,%ymm2
  0x00007f7748fc78fd:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f7748fc7902:   mov    %r11,%rdi
  0x00007f7748fc7905:   rorx   $0x29,%r8,%r13
  0x00007f7748fc790b:   rorx   $0x12,%r8,%r14
  0x00007f7748fc7911:   add    0x8(%rsp),%r10
  0x00007f7748fc7916:   or     %rbx,%rdi
  0x00007f7748fc7919:   mov    %rdx,%r15
  0x00007f7748fc791c:   xor    %r9,%r15
  0x00007f7748fc791f:   rorx   $0x22,%r11,%r12
  0x00007f7748fc7925:   xor    %r14,%r13
  0x00007f7748fc7928:   rorx   $0xe,%r8,%r14
  0x00007f7748fc792e:   and    %r8,%r15
  0x00007f7748fc7931:   add    %r10,%rcx
  0x00007f7748fc7934:   and    %rax,%rdi
  0x00007f7748fc7937:   xor    %r14,%r13
  0x00007f7748fc793a:   rorx   $0x27,%r11,%r14
  0x00007f7748fc7940:   xor    %r12,%r14
  0x00007f7748fc7943:   rorx   $0x1c,%r11,%r12
  0x00007f7748fc7949:   xor    %r9,%r15
  0x00007f7748fc794c:   xor    %r12,%r14
  0x00007f7748fc794f:   mov    %r11,%r12
  0x00007f7748fc7952:   and    %rbx,%r12
  0x00007f7748fc7955:   add    %r13,%r15
  0x00007f7748fc7958:   or     %r12,%rdi
  0x00007f7748fc795b:   add    %r14,%r10
  0x00007f7748fc795e:   add    %r15,%rcx
  0x00007f7748fc7961:   add    %r15,%r10
  0x00007f7748fc7964:   add    %rdi,%r10
  0x00007f7748fc7967:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc796c:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f7748fc7971:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc7975:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc7979:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f7748fc797e:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f7748fc7983:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc7987:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc798b:   vpaddq %ymm8,%ymm6,%ymm6
  0x00007f7748fc7990:   vpsrlq $0x6,%ymm6,%ymm8
  0x00007f7748fc7995:   mov    %r10,%rdi
  0x00007f7748fc7998:   rorx   $0x29,%rcx,%r13
  0x00007f7748fc799e:   rorx   $0x12,%rcx,%r14
  0x00007f7748fc79a4:   add    0x10(%rsp),%r9
  0x00007f7748fc79a9:   or     %rax,%rdi
  0x00007f7748fc79ac:   mov    %r8,%r15
  0x00007f7748fc79af:   xor    %rdx,%r15
  0x00007f7748fc79b2:   rorx   $0x22,%r10,%r12
  0x00007f7748fc79b8:   xor    %r14,%r13
  0x00007f7748fc79bb:   rorx   $0xe,%rcx,%r14
  0x00007f7748fc79c1:   and    %rcx,%r15
  0x00007f7748fc79c4:   add    %r9,%rbx
  0x00007f7748fc79c7:   and    %r11,%rdi
  0x00007f7748fc79ca:   xor    %r14,%r13
  0x00007f7748fc79cd:   rorx   $0x27,%r10,%r14
  0x00007f7748fc79d3:   xor    %r12,%r14
  0x00007f7748fc79d6:   rorx   $0x1c,%r10,%r12
  0x00007f7748fc79dc:   xor    %rdx,%r15
  0x00007f7748fc79df:   xor    %r12,%r14
  0x00007f7748fc79e2:   mov    %r10,%r12
  0x00007f7748fc79e5:   and    %rax,%r12
  0x00007f7748fc79e8:   add    %r13,%r15
  0x00007f7748fc79eb:   or     %r12,%rdi
  0x00007f7748fc79ee:   add    %r14,%r9
  0x00007f7748fc79f1:   add    %r15,%rbx
  0x00007f7748fc79f4:   add    %r15,%r9
  0x00007f7748fc79f7:   add    %rdi,%r9
  0x00007f7748fc79fa:   vpsrlq $0x13,%ymm6,%ymm3
  0x00007f7748fc79ff:   vpsllq $0x2d,%ymm6,%ymm1
  0x00007f7748fc7a04:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc7a08:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc7a0c:   vpsrlq $0x3d,%ymm6,%ymm3
  0x00007f7748fc7a11:   vpsllq $0x3,%ymm6,%ymm1
  0x00007f7748fc7a16:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc7a1a:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc7a1e:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f7748fc7a23:   vpblendd $0xf0,%ymm2,%ymm6,%ymm6
  0x00007f7748fc7a29:   mov    %r9,%rdi
  0x00007f7748fc7a2c:   rorx   $0x29,%rbx,%r13
  0x00007f7748fc7a32:   rorx   $0x12,%rbx,%r14
  0x00007f7748fc7a38:   add    0x18(%rsp),%rdx
  0x00007f7748fc7a3d:   or     %r11,%rdi
  0x00007f7748fc7a40:   mov    %rcx,%r15
  0x00007f7748fc7a43:   xor    %r8,%r15
  0x00007f7748fc7a46:   rorx   $0x22,%r9,%r12
  0x00007f7748fc7a4c:   xor    %r14,%r13
  0x00007f7748fc7a4f:   rorx   $0xe,%rbx,%r14
  0x00007f7748fc7a55:   and    %rbx,%r15
  0x00007f7748fc7a58:   add    %rdx,%rax
  0x00007f7748fc7a5b:   and    %r10,%rdi
  0x00007f7748fc7a5e:   xor    %r14,%r13
  0x00007f7748fc7a61:   rorx   $0x27,%r9,%r14
  0x00007f7748fc7a67:   xor    %r12,%r14
  0x00007f7748fc7a6a:   rorx   $0x1c,%r9,%r12
  0x00007f7748fc7a70:   xor    %r8,%r15
  0x00007f7748fc7a73:   xor    %r12,%r14
  0x00007f7748fc7a76:   mov    %r9,%r12
  0x00007f7748fc7a79:   and    %r11,%r12
  0x00007f7748fc7a7c:   add    %r13,%r15
  0x00007f7748fc7a7f:   or     %r12,%rdi
  0x00007f7748fc7a82:   add    %r14,%rdx
  0x00007f7748fc7a85:   add    %r15,%rax
  0x00007f7748fc7a88:   add    %r15,%rdx
  0x00007f7748fc7a8b:   add    %rdi,%rdx
  0x00007f7748fc7a8e:   vpaddq 0x60(%rbp),%ymm7,%ymm0
  0x00007f7748fc7a93:   vmovdqu %ymm0,(%rsp)
  0x00007f7748fc7a98:   add    $0x80,%rbp
  0x00007f7748fc7a9f:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm0
  0x00007f7748fc7aa5:   vpalignr $0x8,%ymm5,%ymm0,%ymm0
  0x00007f7748fc7aab:   vpaddq %ymm7,%ymm0,%ymm0
  0x00007f7748fc7aaf:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm1
  0x00007f7748fc7ab5:   vpalignr $0x8,%ymm7,%ymm1,%ymm1
  0x00007f7748fc7abb:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007f7748fc7ac0:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007f7748fc7ac5:   vpor   %ymm2,%ymm3,%ymm3
  0x00007f7748fc7ac9:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007f7748fc7ace:   mov    %rdx,%rdi
  0x00007f7748fc7ad1:   rorx   $0x29,%rax,%r13
  0x00007f7748fc7ad7:   rorx   $0x12,%rax,%r14
  0x00007f7748fc7add:   add    (%rsp),%r8
  0x00007f7748fc7ae1:   or     %r10,%rdi
  0x00007f7748fc7ae4:   mov    %rbx,%r15
  0x00007f7748fc7ae7:   xor    %rcx,%r15
  0x00007f7748fc7aea:   rorx   $0x22,%rdx,%r12
  0x00007f7748fc7af0:   xor    %r14,%r13
  0x00007f7748fc7af3:   rorx   $0xe,%rax,%r14
  0x00007f7748fc7af9:   and    %rax,%r15
  0x00007f7748fc7afc:   add    %r8,%r11
  0x00007f7748fc7aff:   and    %r9,%rdi
  0x00007f7748fc7b02:   xor    %r14,%r13
  0x00007f7748fc7b05:   rorx   $0x27,%rdx,%r14
  0x00007f7748fc7b0b:   xor    %r12,%r14
  0x00007f7748fc7b0e:   rorx   $0x1c,%rdx,%r12
  0x00007f7748fc7b14:   xor    %rcx,%r15
  0x00007f7748fc7b17:   xor    %r12,%r14
  0x00007f7748fc7b1a:   mov    %rdx,%r12
  0x00007f7748fc7b1d:   and    %r10,%r12
  0x00007f7748fc7b20:   add    %r13,%r15
  0x00007f7748fc7b23:   or     %r12,%rdi
  0x00007f7748fc7b26:   add    %r14,%r8
  0x00007f7748fc7b29:   add    %r15,%r11
  0x00007f7748fc7b2c:   add    %r15,%r8
  0x00007f7748fc7b2f:   add    %rdi,%r8
  0x00007f7748fc7b32:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007f7748fc7b37:   vpsllq $0x38,%ymm1,%ymm1
  0x00007f7748fc7b3c:   vpor   %ymm2,%ymm1,%ymm1
  0x00007f7748fc7b40:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007f7748fc7b45:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007f7748fc7b49:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007f7748fc7b4d:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm7
  0x00007f7748fc7b53:   vpand  %ymm10,%ymm0,%ymm0
  0x00007f7748fc7b58:   vperm2f128 $0x11,%ymm6,%ymm6,%ymm2
  0x00007f7748fc7b5e:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007f7748fc7b63:   mov    %r8,%rdi
  0x00007f7748fc7b66:   rorx   $0x29,%r11,%r13
  0x00007f7748fc7b6c:   rorx   $0x12,%r11,%r14
  0x00007f7748fc7b72:   add    0x8(%rsp),%rcx
  0x00007f7748fc7b77:   or     %r9,%rdi
  0x00007f7748fc7b7a:   mov    %rax,%r15
  0x00007f7748fc7b7d:   xor    %rbx,%r15
  0x00007f7748fc7b80:   rorx   $0x22,%r8,%r12
  0x00007f7748fc7b86:   xor    %r14,%r13
  0x00007f7748fc7b89:   rorx   $0xe,%r11,%r14
  0x00007f7748fc7b8f:   and    %r11,%r15
  0x00007f7748fc7b92:   add    %rcx,%r10
  0x00007f7748fc7b95:   and    %rdx,%rdi
  0x00007f7748fc7b98:   xor    %r14,%r13
  0x00007f7748fc7b9b:   rorx   $0x27,%r8,%r14
  0x00007f7748fc7ba1:   xor    %r12,%r14
  0x00007f7748fc7ba4:   rorx   $0x1c,%r8,%r12
  0x00007f7748fc7baa:   xor    %rbx,%r15
  0x00007f7748fc7bad:   xor    %r12,%r14
  0x00007f7748fc7bb0:   mov    %r8,%r12
  0x00007f7748fc7bb3:   and    %r9,%r12
  0x00007f7748fc7bb6:   add    %r13,%r15
  0x00007f7748fc7bb9:   or     %r12,%rdi
  0x00007f7748fc7bbc:   add    %r14,%rcx
  0x00007f7748fc7bbf:   add    %r15,%r10
  0x00007f7748fc7bc2:   add    %r15,%rcx
  0x00007f7748fc7bc5:   add    %rdi,%rcx
  0x00007f7748fc7bc8:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007f7748fc7bcd:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007f7748fc7bd2:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc7bd6:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc7bda:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007f7748fc7bdf:   vpsllq $0x3,%ymm2,%ymm1
  0x00007f7748fc7be4:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc7be8:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc7bec:   vpaddq %ymm8,%ymm7,%ymm7
  0x00007f7748fc7bf1:   vpsrlq $0x6,%ymm7,%ymm8
  0x00007f7748fc7bf6:   mov    %rcx,%rdi
  0x00007f7748fc7bf9:   rorx   $0x29,%r10,%r13
  0x00007f7748fc7bff:   rorx   $0x12,%r10,%r14
  0x00007f7748fc7c05:   add    0x10(%rsp),%rbx
  0x00007f7748fc7c0a:   or     %rdx,%rdi
  0x00007f7748fc7c0d:   mov    %r11,%r15
  0x00007f7748fc7c10:   xor    %rax,%r15
  0x00007f7748fc7c13:   rorx   $0x22,%rcx,%r12
  0x00007f7748fc7c19:   xor    %r14,%r13
  0x00007f7748fc7c1c:   rorx   $0xe,%r10,%r14
  0x00007f7748fc7c22:   and    %r10,%r15
  0x00007f7748fc7c25:   add    %rbx,%r9
  0x00007f7748fc7c28:   and    %r8,%rdi
  0x00007f7748fc7c2b:   xor    %r14,%r13
  0x00007f7748fc7c2e:   rorx   $0x27,%rcx,%r14
  0x00007f7748fc7c34:   xor    %r12,%r14
  0x00007f7748fc7c37:   rorx   $0x1c,%rcx,%r12
  0x00007f7748fc7c3d:   xor    %rax,%r15
  0x00007f7748fc7c40:   xor    %r12,%r14
  0x00007f7748fc7c43:   mov    %rcx,%r12
  0x00007f7748fc7c46:   and    %rdx,%r12
  0x00007f7748fc7c49:   add    %r13,%r15
  0x00007f7748fc7c4c:   or     %r12,%rdi
  0x00007f7748fc7c4f:   add    %r14,%rbx
  0x00007f7748fc7c52:   add    %r15,%r9
  0x00007f7748fc7c55:   add    %r15,%rbx
  0x00007f7748fc7c58:   add    %rdi,%rbx
  0x00007f7748fc7c5b:   vpsrlq $0x13,%ymm7,%ymm3
  0x00007f7748fc7c60:   vpsllq $0x2d,%ymm7,%ymm1
  0x00007f7748fc7c65:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc7c69:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc7c6d:   vpsrlq $0x3d,%ymm7,%ymm3
  0x00007f7748fc7c72:   vpsllq $0x3,%ymm7,%ymm1
  0x00007f7748fc7c77:   vpor   %ymm1,%ymm3,%ymm3
  0x00007f7748fc7c7b:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007f7748fc7c7f:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007f7748fc7c84:   vpblendd $0xf0,%ymm2,%ymm7,%ymm7
  0x00007f7748fc7c8a:   mov    %rbx,%rdi
  0x00007f7748fc7c8d:   rorx   $0x29,%r9,%r13
  0x00007f7748fc7c93:   rorx   $0x12,%r9,%r14
  0x00007f7748fc7c99:   add    0x18(%rsp),%rax
  0x00007f7748fc7c9e:   or     %r8,%rdi
  0x00007f7748fc7ca1:   mov    %r10,%r15
  0x00007f7748fc7ca4:   xor    %r11,%r15
  0x00007f7748fc7ca7:   rorx   $0x22,%rbx,%r12
  0x00007f7748fc7cad:   xor    %r14,%r13
  0x00007f7748fc7cb0:   rorx   $0xe,%r9,%r14
  0x00007f7748fc7cb6:   and    %r9,%r15
  0x00007f7748fc7cb9:   add    %rax,%rdx
  0x00007f7748fc7cbc:   and    %rcx,%rdi
  0x00007f7748fc7cbf:   xor    %r14,%r13
  0x00007f7748fc7cc2:   rorx   $0x27,%rbx,%r14
  0x00007f7748fc7cc8:   xor    %r12,%r14
  0x00007f7748fc7ccb:   rorx   $0x1c,%rbx,%r12
  0x00007f7748fc7cd1:   xor    %r11,%r15
  0x00007f7748fc7cd4:   xor    %r12,%r14
  0x00007f7748fc7cd7:   mov    %rbx,%r12
  0x00007f7748fc7cda:   and    %r8,%r12
  0x00007f7748fc7cdd:   add    %r13,%r15
  0x00007f7748fc7ce0:   or     %r12,%rdi
  0x00007f7748fc7ce3:   add    %r14,%rax
  0x00007f7748fc7ce6:   add    %r15,%rdx
  0x00007f7748fc7ce9:   add    %r15,%rax
  0x00007f7748fc7cec:   add    %rdi,%rax
  0x00007f7748fc7cef:   subq   $0x1,0x20(%rsp)
  0x00007f7748fc7cf5:   jne    Stub::sha512_implCompressMB+224 0x00007f7748fc7380
  0x00007f7748fc7cfb:   movq   $0x2,0x20(%rsp)
  0x00007f7748fc7d04:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007f7748fc7d09:   vmovdqu %ymm0,(%rsp)
  0x00007f7748fc7d0e:   mov    %r9,%r15
  0x00007f7748fc7d11:   rorx   $0x29,%rdx,%r13
  0x00007f7748fc7d17:   rorx   $0x12,%rdx,%r14
  0x00007f7748fc7d1d:   xor    %r10,%r15
  0x00007f7748fc7d20:   xor    %r14,%r13
  0x00007f7748fc7d23:   rorx   $0xe,%rdx,%r14
  0x00007f7748fc7d29:   and    %rdx,%r15
  0x00007f7748fc7d2c:   xor    %r14,%r13
  0x00007f7748fc7d2f:   rorx   $0x22,%rax,%r12
  0x00007f7748fc7d35:   xor    %r10,%r15
  0x00007f7748fc7d38:   rorx   $0x27,%rax,%r14
  0x00007f7748fc7d3e:   mov    %rax,%rdi
  0x00007f7748fc7d41:   xor    %r12,%r14
  0x00007f7748fc7d44:   rorx   $0x1c,%rax,%r12
  0x00007f7748fc7d4a:   add    (%rsp),%r11
  0x00007f7748fc7d4e:   or     %rcx,%rdi
  0x00007f7748fc7d51:   xor    %r12,%r14
  0x00007f7748fc7d54:   mov    %rax,%r12
  0x00007f7748fc7d57:   and    %rbx,%rdi
  0x00007f7748fc7d5a:   and    %rcx,%r12
  0x00007f7748fc7d5d:   add    %r13,%r15
  0x00007f7748fc7d60:   add    %r11,%r8
  0x00007f7748fc7d63:   or     %r12,%rdi
  0x00007f7748fc7d66:   add    %r14,%r11
  0x00007f7748fc7d69:   add    %r15,%r8
  0x00007f7748fc7d6c:   add    %r15,%r11
  0x00007f7748fc7d6f:   mov    %rdx,%r15
  0x00007f7748fc7d72:   rorx   $0x29,%r8,%r13
  0x00007f7748fc7d78:   rorx   $0x12,%r8,%r14
  0x00007f7748fc7d7e:   xor    %r9,%r15
  0x00007f7748fc7d81:   xor    %r14,%r13
  0x00007f7748fc7d84:   rorx   $0xe,%r8,%r14
  0x00007f7748fc7d8a:   and    %r8,%r15
  0x00007f7748fc7d8d:   add    %rdi,%r11
  0x00007f7748fc7d90:   xor    %r14,%r13
  0x00007f7748fc7d93:   rorx   $0x22,%r11,%r12
  0x00007f7748fc7d99:   xor    %r9,%r15
  0x00007f7748fc7d9c:   rorx   $0x27,%r11,%r14
  0x00007f7748fc7da2:   mov    %r11,%rdi
  0x00007f7748fc7da5:   xor    %r12,%r14
  0x00007f7748fc7da8:   rorx   $0x1c,%r11,%r12
  0x00007f7748fc7dae:   add    0x8(%rsp),%r10
  0x00007f7748fc7db3:   or     %rbx,%rdi
  0x00007f7748fc7db6:   xor    %r12,%r14
  0x00007f7748fc7db9:   mov    %r11,%r12
  0x00007f7748fc7dbc:   and    %rax,%rdi
  0x00007f7748fc7dbf:   and    %rbx,%r12
  0x00007f7748fc7dc2:   add    %r13,%r15
  0x00007f7748fc7dc5:   add    %r10,%rcx
  0x00007f7748fc7dc8:   or     %r12,%rdi
  0x00007f7748fc7dcb:   add    %r14,%r10
  0x00007f7748fc7dce:   add    %r15,%rcx
  0x00007f7748fc7dd1:   add    %r15,%r10
  0x00007f7748fc7dd4:   mov    %r8,%r15
  0x00007f7748fc7dd7:   rorx   $0x29,%rcx,%r13
  0x00007f7748fc7ddd:   rorx   $0x12,%rcx,%r14
  0x00007f7748fc7de3:   xor    %rdx,%r15
  0x00007f7748fc7de6:   xor    %r14,%r13
  0x00007f7748fc7de9:   rorx   $0xe,%rcx,%r14
  0x00007f7748fc7def:   and    %rcx,%r15
  0x00007f7748fc7df2:   add    %rdi,%r10
  0x00007f7748fc7df5:   xor    %r14,%r13
  0x00007f7748fc7df8:   rorx   $0x22,%r10,%r12
  0x00007f7748fc7dfe:   xor    %rdx,%r15
  0x00007f7748fc7e01:   rorx   $0x27,%r10,%r14
  0x00007f7748fc7e07:   mov    %r10,%rdi
  0x00007f7748fc7e0a:   xor    %r12,%r14
  0x00007f7748fc7e0d:   rorx   $0x1c,%r10,%r12
  0x00007f7748fc7e13:   add    0x10(%rsp),%r9
  0x00007f7748fc7e18:   or     %rax,%rdi
  0x00007f7748fc7e1b:   xor    %r12,%r14
  0x00007f7748fc7e1e:   mov    %r10,%r12
  0x00007f7748fc7e21:   and    %r11,%rdi
  0x00007f7748fc7e24:   and    %rax,%r12
  0x00007f7748fc7e27:   add    %r13,%r15
  0x00007f7748fc7e2a:   add    %r9,%rbx
  0x00007f7748fc7e2d:   or     %r12,%rdi
  0x00007f7748fc7e30:   add    %r14,%r9
  0x00007f7748fc7e33:   add    %r15,%rbx
  0x00007f7748fc7e36:   add    %r15,%r9
  0x00007f7748fc7e39:   mov    %rcx,%r15
  0x00007f7748fc7e3c:   rorx   $0x29,%rbx,%r13
  0x00007f7748fc7e42:   rorx   $0x12,%rbx,%r14
  0x00007f7748fc7e48:   xor    %r8,%r15
  0x00007f7748fc7e4b:   xor    %r14,%r13
  0x00007f7748fc7e4e:   rorx   $0xe,%rbx,%r14
  0x00007f7748fc7e54:   and    %rbx,%r15
  0x00007f7748fc7e57:   add    %rdi,%r9
  0x00007f7748fc7e5a:   xor    %r14,%r13
  0x00007f7748fc7e5d:   rorx   $0x22,%r9,%r12
  0x00007f7748fc7e63:   xor    %r8,%r15
  0x00007f7748fc7e66:   rorx   $0x27,%r9,%r14
  0x00007f7748fc7e6c:   mov    %r9,%rdi
  0x00007f7748fc7e6f:   xor    %r12,%r14
  0x00007f7748fc7e72:   rorx   $0x1c,%r9,%r12
  0x00007f7748fc7e78:   add    0x18(%rsp),%rdx
  0x00007f7748fc7e7d:   or     %r11,%rdi
  0x00007f7748fc7e80:   xor    %r12,%r14
  0x00007f7748fc7e83:   mov    %r9,%r12
  0x00007f7748fc7e86:   and    %r10,%rdi
  0x00007f7748fc7e89:   and    %r11,%r12
  0x00007f7748fc7e8c:   add    %r13,%r15
  0x00007f7748fc7e8f:   add    %rdx,%rax
  0x00007f7748fc7e92:   or     %r12,%rdi
  0x00007f7748fc7e95:   add    %r14,%rdx
  0x00007f7748fc7e98:   add    %r15,%rax
  0x00007f7748fc7e9b:   add    %r15,%rdx
  0x00007f7748fc7e9e:   add    %rdi,%rdx
  0x00007f7748fc7ea1:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007f7748fc7ea6:   vmovdqu %ymm0,(%rsp)
  0x00007f7748fc7eab:   add    $0x40,%rbp
  0x00007f7748fc7eaf:   mov    %rbx,%r15
  0x00007f7748fc7eb2:   rorx   $0x29,%rax,%r13
  0x00007f7748fc7eb8:   rorx   $0x12,%rax,%r14
  0x00007f7748fc7ebe:   xor    %rcx,%r15
  0x00007f7748fc7ec1:   xor    %r14,%r13
  0x00007f7748fc7ec4:   rorx   $0xe,%rax,%r14
  0x00007f7748fc7eca:   and    %rax,%r15
  0x00007f7748fc7ecd:   xor    %r14,%r13
  0x00007f7748fc7ed0:   rorx   $0x22,%rdx,%r12
  0x00007f7748fc7ed6:   xor    %rcx,%r15
  0x00007f7748fc7ed9:   rorx   $0x27,%rdx,%r14
  0x00007f7748fc7edf:   mov    %rdx,%rdi
  0x00007f7748fc7ee2:   xor    %r12,%r14
  0x00007f7748fc7ee5:   rorx   $0x1c,%rdx,%r12
  0x00007f7748fc7eeb:   add    (%rsp),%r8
  0x00007f7748fc7eef:   or     %r10,%rdi
  0x00007f7748fc7ef2:   xor    %r12,%r14
  0x00007f7748fc7ef5:   mov    %rdx,%r12
  0x00007f7748fc7ef8:   and    %r9,%rdi
  0x00007f7748fc7efb:   and    %r10,%r12
  0x00007f7748fc7efe:   add    %r13,%r15
  0x00007f7748fc7f01:   add    %r8,%r11
  0x00007f7748fc7f04:   or     %r12,%rdi
  0x00007f7748fc7f07:   add    %r14,%r8
  0x00007f7748fc7f0a:   add    %r15,%r11
  0x00007f7748fc7f0d:   add    %r15,%r8
  0x00007f7748fc7f10:   mov    %rax,%r15
  0x00007f7748fc7f13:   rorx   $0x29,%r11,%r13
  0x00007f7748fc7f19:   rorx   $0x12,%r11,%r14
  0x00007f7748fc7f1f:   xor    %rbx,%r15
  0x00007f7748fc7f22:   xor    %r14,%r13
  0x00007f7748fc7f25:   rorx   $0xe,%r11,%r14
  0x00007f7748fc7f2b:   and    %r11,%r15
  0x00007f7748fc7f2e:   add    %rdi,%r8
  0x00007f7748fc7f31:   xor    %r14,%r13
  0x00007f7748fc7f34:   rorx   $0x22,%r8,%r12
  0x00007f7748fc7f3a:   xor    %rbx,%r15
  0x00007f7748fc7f3d:   rorx   $0x27,%r8,%r14
  0x00007f7748fc7f43:   mov    %r8,%rdi
  0x00007f7748fc7f46:   xor    %r12,%r14
  0x00007f7748fc7f49:   rorx   $0x1c,%r8,%r12
  0x00007f7748fc7f4f:   add    0x8(%rsp),%rcx
  0x00007f7748fc7f54:   or     %r9,%rdi
  0x00007f7748fc7f57:   xor    %r12,%r14
  0x00007f7748fc7f5a:   mov    %r8,%r12
  0x00007f7748fc7f5d:   and    %rdx,%rdi
  0x00007f7748fc7f60:   and    %r9,%r12
  0x00007f7748fc7f63:   add    %r13,%r15
  0x00007f7748fc7f66:   add    %rcx,%r10
  0x00007f7748fc7f69:   or     %r12,%rdi
  0x00007f7748fc7f6c:   add    %r14,%rcx
  0x00007f7748fc7f6f:   add    %r15,%r10
  0x00007f7748fc7f72:   add    %r15,%rcx
  0x00007f7748fc7f75:   mov    %r11,%r15
  0x00007f7748fc7f78:   rorx   $0x29,%r10,%r13
  0x00007f7748fc7f7e:   rorx   $0x12,%r10,%r14
  0x00007f7748fc7f84:   xor    %rax,%r15
  0x00007f7748fc7f87:   xor    %r14,%r13
  0x00007f7748fc7f8a:   rorx   $0xe,%r10,%r14
  0x00007f7748fc7f90:   and    %r10,%r15
  0x00007f7748fc7f93:   add    %rdi,%rcx
  0x00007f7748fc7f96:   xor    %r14,%r13
  0x00007f7748fc7f99:   rorx   $0x22,%rcx,%r12
  0x00007f7748fc7f9f:   xor    %rax,%r15
  0x00007f7748fc7fa2:   rorx   $0x27,%rcx,%r14
  0x00007f7748fc7fa8:   mov    %rcx,%rdi
  0x00007f7748fc7fab:   xor    %r12,%r14
  0x00007f7748fc7fae:   rorx   $0x1c,%rcx,%r12
  0x00007f7748fc7fb4:   add    0x10(%rsp),%rbx
  0x00007f7748fc7fb9:   or     %rdx,%rdi
  0x00007f7748fc7fbc:   xor    %r12,%r14
  0x00007f7748fc7fbf:   mov    %rcx,%r12
  0x00007f7748fc7fc2:   and    %r8,%rdi
  0x00007f7748fc7fc5:   and    %rdx,%r12
  0x00007f7748fc7fc8:   add    %r13,%r15
  0x00007f7748fc7fcb:   add    %rbx,%r9
  0x00007f7748fc7fce:   or     %r12,%rdi
  0x00007f7748fc7fd1:   add    %r14,%rbx
  0x00007f7748fc7fd4:   add    %r15,%r9
  0x00007f7748fc7fd7:   add    %r15,%rbx
  0x00007f7748fc7fda:   mov    %r10,%r15
  0x00007f7748fc7fdd:   rorx   $0x29,%r9,%r13
  0x00007f7748fc7fe3:   rorx   $0x12,%r9,%r14
  0x00007f7748fc7fe9:   xor    %r11,%r15
  0x00007f7748fc7fec:   xor    %r14,%r13
  0x00007f7748fc7fef:   rorx   $0xe,%r9,%r14
  0x00007f7748fc7ff5:   and    %r9,%r15
  0x00007f7748fc7ff8:   add    %rdi,%rbx
  0x00007f7748fc7ffb:   xor    %r14,%r13
  0x00007f7748fc7ffe:   rorx   $0x22,%rbx,%r12
  0x00007f7748fc8004:   xor    %r11,%r15
  0x00007f7748fc8007:   rorx   $0x27,%rbx,%r14
  0x00007f7748fc800d:   mov    %rbx,%rdi
  0x00007f7748fc8010:   xor    %r12,%r14
  0x00007f7748fc8013:   rorx   $0x1c,%rbx,%r12
  0x00007f7748fc8019:   add    0x18(%rsp),%rax
  0x00007f7748fc801e:   or     %r8,%rdi
  0x00007f7748fc8021:   xor    %r12,%r14
  0x00007f7748fc8024:   mov    %rbx,%r12
  0x00007f7748fc8027:   and    %rcx,%rdi
  0x00007f7748fc802a:   and    %r8,%r12
  0x00007f7748fc802d:   add    %r13,%r15
  0x00007f7748fc8030:   add    %rax,%rdx
  0x00007f7748fc8033:   or     %r12,%rdi
  0x00007f7748fc8036:   add    %r14,%rax
  0x00007f7748fc8039:   add    %r15,%rdx
  0x00007f7748fc803c:   add    %r15,%rax
  0x00007f7748fc803f:   add    %rdi,%rax
  0x00007f7748fc8042:   vmovdqu %ymm6,%ymm4
  0x00007f7748fc8046:   vmovdqu %ymm7,%ymm5
  0x00007f7748fc804a:   subq   $0x1,0x20(%rsp)
  0x00007f7748fc8050:   jne    Stub::sha512_implCompressMB+2660 0x00007f7748fc7d04
  0x00007f7748fc8056:   add    (%rsi),%rax
  0x00007f7748fc8059:   mov    %rax,(%rsi)
  0x00007f7748fc805c:   add    0x8(%rsi),%rbx
  0x00007f7748fc8060:   mov    %rbx,0x8(%rsi)
  0x00007f7748fc8064:   add    0x10(%rsi),%rcx
  0x00007f7748fc8068:   mov    %rcx,0x10(%rsi)
  0x00007f7748fc806c:   add    0x18(%rsi),%r8
  0x00007f7748fc8070:   mov    %r8,0x18(%rsi)
  0x00007f7748fc8074:   add    0x20(%rsi),%rdx
  0x00007f7748fc8078:   mov    %rdx,0x20(%rsi)
  0x00007f7748fc807c:   add    0x28(%rsi),%r9
  0x00007f7748fc8080:   mov    %r9,0x28(%rsi)
  0x00007f7748fc8084:   add    0x30(%rsi),%r10
  0x00007f7748fc8088:   mov    %r10,0x30(%rsi)
  0x00007f7748fc808c:   add    0x38(%rsi),%r11
  0x00007f7748fc8090:   mov    %r11,0x38(%rsi)
  0x00007f7748fc8094:   mov    0x28(%rsp),%rdi
  0x00007f7748fc8099:   add    $0x80,%rdi
  0x00007f7748fc80a0:   cmp    0x30(%rsp),%rdi
  0x00007f7748fc80a5:   jne    Stub::sha512_implCompressMB+155 0x00007f7748fc733b
  0x00007f7748fc80ab:   mov    0x40(%rsp),%rbp
  0x00007f7748fc80b0:   mov    0x48(%rsp),%rbx
  0x00007f7748fc80b5:   mov    0x50(%rsp),%r12
  0x00007f7748fc80ba:   mov    0x58(%rsp),%r13
  0x00007f7748fc80bf:   mov    0x60(%rsp),%r14
  0x00007f7748fc80c4:   mov    0x68(%rsp),%r15
  0x00007f7748fc80c9:   mov    0x38(%rsp),%rsp
  0x00007f7748fc80ce:   pop    %rcx
  0x00007f7748fc80cf:   pop    %rdx
  0x00007f7748fc80d0:   mov    %rdx,%rax
  0x00007f7748fc80d3:   cmp    %rcx,%rax
  0x00007f7748fc80d6:   jae    Stub::sha512_implCompressMB+3648 0x00007f7748fc80e0
  0x00007f7748fc80d8:   add    $0x80,%rax
  0x00007f7748fc80de:   jmp    Stub::sha512_implCompressMB+3635 0x00007f7748fc80d3
  0x00007f7748fc80e0:   vzeroupper 
  0x00007f7748fc80e3:   leaveq 
  0x00007f7748fc80e4:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_shuffle_base64 [0x00007f7748fc8100, 0x00007f7748fc8120] (32 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8100:   add    $0x8050604,%eax
  0x00007f7748fc8105:   (bad)  
  0x00007f7748fc8106:   or     %ecx,(%rax)
  0x00007f7748fc8108:   or     (%rdx),%ecx
  0x00007f7748fc810a:   or     $0xb,%al
  0x00007f7748fc810c:   (bad)  
  0x00007f7748fc810d:   or     $0x10e0f,%eax
  0x00007f7748fc8112:   add    (%rcx),%al
  0x00007f7748fc8114:   add    $0x3,%al
  0x00007f7748fc8116:   add    $0x8060704,%eax
  0x00007f7748fc811b:   (bad)  
  0x00007f7748fc811c:   or     (%rcx),%cl
  0x00007f7748fc811e:   or     (%rdx),%ecx
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_input_mask_base64 [0x00007f7748fc8120, 0x00007f7748fc8140] (32 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8120:   add    %al,(%rax)
  0x00007f7748fc8122:   add    %al,(%rax)
  0x00007f7748fc8124:   add    %al,(%rax)
  0x00007f7748fc8126:   add    %al,-0x80000000(%rax)
  0x00007f7748fc812c:   add    %al,(%rax)
  0x00007f7748fc812e:   add    %al,-0x80000000(%rax)
  0x00007f7748fc8134:   add    %al,(%rax)
  0x00007f7748fc8136:   add    %al,-0x80000000(%rax)
  0x00007f7748fc813c:   add    %al,(%rax)
  0x00007f7748fc813e:   .byte 0x0
  0x00007f7748fc813f:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_lut_base64 [0x00007f7748fc8140, 0x00007f7748fc8180] (64 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8140:   rex.B
  0x00007f7748fc8141:   rex.RXB cld 
  0x00007f7748fc8143:   cld    
  0x00007f7748fc8144:   cld    
  0x00007f7748fc8145:   cld    
  0x00007f7748fc8146:   cld    
  0x00007f7748fc8147:   cld    
  0x00007f7748fc8148:   cld    
  0x00007f7748fc8149:   cld    
  0x00007f7748fc814a:   cld    
  0x00007f7748fc814b:   cld    
  0x00007f7748fc814c:   in     (%dx),%eax
  0x00007f7748fc814d:   lock add %al,(%rax)
  0x00007f7748fc8150:   rex.B
  0x00007f7748fc8151:   rex.RXB cld 
  0x00007f7748fc8153:   cld    
  0x00007f7748fc8154:   cld    
  0x00007f7748fc8155:   cld    
  0x00007f7748fc8156:   cld    
  0x00007f7748fc8157:   cld    
  0x00007f7748fc8158:   cld    
  0x00007f7748fc8159:   cld    
  0x00007f7748fc815a:   cld    
  0x00007f7748fc815b:   cld    
  0x00007f7748fc815c:   in     (%dx),%eax
  0x00007f7748fc815d:   lock add %al,(%rax)
  0x00007f7748fc8160:   rex.B
  0x00007f7748fc8161:   rex.RXB cld 
  0x00007f7748fc8163:   cld    
  0x00007f7748fc8164:   cld    
  0x00007f7748fc8165:   cld    
  0x00007f7748fc8166:   cld    
  0x00007f7748fc8167:   cld    
  0x00007f7748fc8168:   cld    
  0x00007f7748fc8169:   cld    
  0x00007f7748fc816a:   cld    
  0x00007f7748fc816b:   cld    
  0x00007f7748fc816c:   out    %eax,(%dx)
  0x00007f7748fc816d:   and    %al,(%rax)
  0x00007f7748fc816f:   add    %al,0x47(%rcx)
  0x00007f7748fc8172:   cld    
  0x00007f7748fc8173:   cld    
  0x00007f7748fc8174:   cld    
  0x00007f7748fc8175:   cld    
  0x00007f7748fc8176:   cld    
  0x00007f7748fc8177:   cld    
  0x00007f7748fc8178:   cld    
  0x00007f7748fc8179:   cld    
  0x00007f7748fc817a:   cld    
  0x00007f7748fc817b:   cld    
  0x00007f7748fc817c:   out    %eax,(%dx)
  0x00007f7748fc817d:   and    %al,(%rax)
  0x00007f7748fc817f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::AVX2_tables_base64 [0x00007f7748fc8180, 0x00007f7748fc8230] (176 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8180:   (bad)  
  0x00007f7748fc8181:   (bad)  
  0x00007f7748fc8182:   (bad)  
  0x00007f7748fc8183:   (bad)  
  0x00007f7748fc8184:   (bad)  
  0x00007f7748fc8185:   (bad)  
  0x00007f7748fc8186:   (bad)  
  0x00007f7748fc8187:   (bad)  
  0x00007f7748fc8188:   pop    %rdi
  0x00007f7748fc8189:   pop    %rdi
  0x00007f7748fc818a:   pop    %rdi
  0x00007f7748fc818b:   pop    %rdi
  0x00007f7748fc818c:   pop    %rdi
  0x00007f7748fc818d:   pop    %rdi
  0x00007f7748fc818e:   pop    %rdi
  0x00007f7748fc818f:   pop    %rdi
  0x00007f7748fc8190:   add    %al,(%rax)
  0x00007f7748fc8192:   add    %al,(%rax)
  0x00007f7748fc8194:   add    %eax,(%rax)
  0x00007f7748fc8196:   add    %al,(%rax)
  0x00007f7748fc8198:   add    (%rax),%al
  0x00007f7748fc819a:   add    %al,(%rax)
  0x00007f7748fc819c:   add    $0x0,%al
  0x00007f7748fc819e:   add    %al,(%rax)
  0x00007f7748fc81a0:   add    $0x6000000,%eax
  0x00007f7748fc81a5:   add    %al,(%rax)
  0x00007f7748fc81a7:   add    %bh,%bh
  0x00007f7748fc81a9:   (bad)  
  0x00007f7748fc81aa:   (bad)  
  0x00007f7748fc81ab:   (bad)  
  0x00007f7748fc81ac:   (bad)  
  0x00007f7748fc81ad:   (bad)  
  0x00007f7748fc81ae:   (bad)  
  0x00007f7748fc81af:   callq  *(%rax)
  0x00007f7748fc81b1:   adc    %al,(%rcx)
  0x00007f7748fc81b3:   add    (%rax,%rcx,1),%al
  0x00007f7748fc81b6:   add    $0x8,%al
  0x00007f7748fc81b8:   adc    %dl,(%rax)
  0x00007f7748fc81ba:   adc    %dl,(%rax)
  0x00007f7748fc81bc:   adc    %dl,(%rax)
  0x00007f7748fc81be:   adc    %dl,(%rax)
  0x00007f7748fc81c0:   adc    %dl,(%rax)
  0x00007f7748fc81c2:   add    %eax,(%rdx)
  0x00007f7748fc81c4:   add    $0x8,%al
  0x00007f7748fc81c6:   add    $0x8,%al
  0x00007f7748fc81c8:   adc    %dl,(%rax)
  0x00007f7748fc81ca:   adc    %dl,(%rax)
  0x00007f7748fc81cc:   adc    %dl,(%rax)
  0x00007f7748fc81ce:   adc    %dl,(%rax)
  0x00007f7748fc81d0:   rex add %eax,0x1(%rax)
  0x00007f7748fc81d4:   rex add %eax,0x1(%rax)
  0x00007f7748fc81d8:   rex add %eax,0x1(%rax)
  0x00007f7748fc81dc:   rex add %eax,0x1(%rax)
  0x00007f7748fc81e0:   rex add %eax,0x1(%rax)
  0x00007f7748fc81e4:   rex add %eax,0x1(%rax)
  0x00007f7748fc81e8:   rex add %eax,0x1(%rax)
  0x00007f7748fc81ec:   rex add %eax,0x1(%rax)
  0x00007f7748fc81f0:   add    %dl,(%rax)
  0x00007f7748fc81f2:   add    %eax,(%rax)
  0x00007f7748fc81f4:   add    %dl,(%rax)
  0x00007f7748fc81f6:   add    %eax,(%rax)
  0x00007f7748fc81f8:   add    %dl,(%rax)
  0x00007f7748fc81fa:   add    %eax,(%rax)
  0x00007f7748fc81fc:   add    %dl,(%rax)
  0x00007f7748fc81fe:   add    %eax,(%rax)
  0x00007f7748fc8200:   add    %dl,(%rax)
  0x00007f7748fc8202:   add    %eax,(%rax)
  0x00007f7748fc8204:   add    %dl,(%rax)
  0x00007f7748fc8206:   add    %eax,(%rax)
  0x00007f7748fc8208:   add    %dl,(%rax)
  0x00007f7748fc820a:   add    %eax,(%rax)
  0x00007f7748fc820c:   add    %dl,(%rax)
  0x00007f7748fc820e:   add    %eax,(%rax)
  0x00007f7748fc8210:   add    (%rcx),%al
  0x00007f7748fc8212:   add    %al,(%rsi)
  0x00007f7748fc8214:   add    $0x8090a04,%eax
  0x00007f7748fc8219:   (bad)  
  0x00007f7748fc821a:   or     $0xffffff0c,%eax
  0x00007f7748fc821f:   incl   (%rdx)
  0x00007f7748fc8221:   add    %eax,(%rax)
  0x00007f7748fc8223:   (bad)  
  0x00007f7748fc8224:   add    $0x8090a04,%eax
  0x00007f7748fc8229:   (bad)  
  0x00007f7748fc822a:   or     $0xffffff0c,%eax
  0x00007f7748fc822f:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::AVX2_tables_URL_base64 [0x00007f7748fc8240, 0x00007f7748fc82c0] (128 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8240:   adc    $0x11111111,%eax
  0x00007f7748fc8245:   adc    %edx,(%rcx)
  0x00007f7748fc8247:   adc    %edx,(%rcx)
  0x00007f7748fc8249:   adc    %edx,(%rbx)
  0x00007f7748fc824b:   sbb    (%rbx),%bl
  0x00007f7748fc824d:   sbb    (%rbx),%ebx
  0x00007f7748fc824f:   sbb    0x11111111(%rip),%dl        # 0x00007f775a0d9366
  0x00007f7748fc8255:   adc    %edx,(%rcx)
  0x00007f7748fc8257:   adc    %edx,(%rcx)
  0x00007f7748fc8259:   adc    %edx,(%rbx)
  0x00007f7748fc825b:   sbb    (%rbx),%bl
  0x00007f7748fc825d:   sbb    (%rbx),%ebx
  0x00007f7748fc825f:   sbb    (%rax),%al
  0x00007f7748fc8261:   adc    %dl,(%rbx)
  0x00007f7748fc8263:   add    $0xbf,%al
  0x00007f7748fc8265:   mov    $0xb9b9,%edi
  0x00007f7748fc826a:   add    %al,(%rax)
  0x00007f7748fc826c:   add    %al,(%rax)
  0x00007f7748fc826e:   add    %al,(%rax)
  0x00007f7748fc8270:   add    %dl,(%rax)
  0x00007f7748fc8272:   adc    (%rdi,%rdi,4),%eax
  0x00007f7748fc8275:   mov    $0xb9b9,%edi
  0x00007f7748fc827a:   add    %al,(%rax)
  0x00007f7748fc827c:   add    %al,(%rax)
  0x00007f7748fc827e:   add    %al,(%rax)
  0x00007f7748fc8280:   adc    $0x11111111,%eax
  0x00007f7748fc8285:   adc    %edx,(%rcx)
  0x00007f7748fc8287:   adc    %edx,(%rcx)
  0x00007f7748fc8289:   adc    %edx,(%rbx)
  0x00007f7748fc828b:   sbb    (%rbx),%ebx
  0x00007f7748fc828d:   sbb    (%rbx),%bl
  0x00007f7748fc828f:   sbb    0x11111111(%rip),%edx        # 0x00007f775a0d93a6
  0x00007f7748fc8295:   adc    %edx,(%rcx)
  0x00007f7748fc8297:   adc    %edx,(%rcx)
  0x00007f7748fc8299:   adc    %edx,(%rbx)
  0x00007f7748fc829b:   sbb    (%rbx),%ebx
  0x00007f7748fc829d:   sbb    (%rbx),%bl
  0x00007f7748fc829f:   sbb    (%rax),%eax
  0x00007f7748fc82a1:   adc    %dl,(%rcx)
  0x00007f7748fc82a3:   add    $0xbf,%al
  0x00007f7748fc82a5:   mov    $0xb9b9,%edi
  0x00007f7748fc82aa:   add    %al,(%rax)
  0x00007f7748fc82ac:   add    %al,(%rax)
  0x00007f7748fc82ae:   add    %al,(%rax)
  0x00007f7748fc82b0:   add    %dl,(%rax)
  0x00007f7748fc82b2:   adc    %eax,(%rdi,%rdi,4)
  0x00007f7748fc82b5:   mov    $0xb9b9,%edi
  0x00007f7748fc82ba:   add    %al,(%rax)
  0x00007f7748fc82bc:   add    %al,(%rax)
  0x00007f7748fc82be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::encoding_table_base64 [0x00007f7748fc82c0, 0x00007f7748fc8340] (128 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc82c0:   rex.B
  0x00007f7748fc82c1:   rex.X
  0x00007f7748fc82c2:   rex.XB
  0x00007f7748fc82c3:   rex.R
  0x00007f7748fc82c4:   rex.RB
  0x00007f7748fc82c5:   rex.RX
  0x00007f7748fc82c6:   rex.RXB
  0x00007f7748fc82c7:   rex.W
  0x00007f7748fc82c8:   rex.WB
  0x00007f7748fc82c9:   rex.WX
  0x00007f7748fc82ca:   rex.WXB
  0x00007f7748fc82cb:   rex.WR
  0x00007f7748fc82cc:   rex.WRB
  0x00007f7748fc82cd:   rex.WRX
  0x00007f7748fc82ce:   rex.WRXB push %r8
  0x00007f7748fc82d0:   push   %rcx
  0x00007f7748fc82d1:   push   %rdx
  0x00007f7748fc82d2:   push   %rbx
  0x00007f7748fc82d3:   push   %rsp
  0x00007f7748fc82d4:   push   %rbp
  0x00007f7748fc82d5:   push   %rsi
  0x00007f7748fc82d6:   push   %rdi
  0x00007f7748fc82d7:   pop    %rax
  0x00007f7748fc82d8:   pop    %rcx
  0x00007f7748fc82d9:   pop    %rdx
  0x00007f7748fc82da:   (bad)  
  0x00007f7748fc82db:   (bad)  {%k5}
  0x00007f7748fc82e0:   addr32 pushq $0x6c6b6a69
  0x00007f7748fc82e6:   insl   (%dx),%es:(%rdi)
  0x00007f7748fc82e7:   outsb  %ds:(%rsi),(%dx)
  0x00007f7748fc82e8:   outsl  %ds:(%rsi),(%dx)
  0x00007f7748fc82e9:   jo     Stub::<unknown> 0x00007f7748fc835c
  0x00007f7748fc82eb:   jb     Stub::<unknown> 0x00007f7748fc8360
  0x00007f7748fc82ed:   je     Stub::<unknown> 0x00007f7748fc8364
  0x00007f7748fc82ef:   jbe    Stub::<unknown> 0x00007f7748fc8368
  0x00007f7748fc82f1:   js     Stub::<unknown> 0x00007f7748fc836c
  0x00007f7748fc82f3:   jp     Stub::encoding_table_base64+101 0x00007f7748fc8325
  0x00007f7748fc82f5:   xor    %esi,(%rdx)
  0x00007f7748fc82f7:   xor    0x39383736(,%rsi,1),%esi
  0x00007f7748fc82fe:   sub    (%rdi),%ebp
  0x00007f7748fc8300:   rex.B
  0x00007f7748fc8301:   rex.X
  0x00007f7748fc8302:   rex.XB
  0x00007f7748fc8303:   rex.R
  0x00007f7748fc8304:   rex.RB
  0x00007f7748fc8305:   rex.RX
  0x00007f7748fc8306:   rex.RXB
  0x00007f7748fc8307:   rex.W
  0x00007f7748fc8308:   rex.WB
  0x00007f7748fc8309:   rex.WX
  0x00007f7748fc830a:   rex.WXB
  0x00007f7748fc830b:   rex.WR
  0x00007f7748fc830c:   rex.WRB
  0x00007f7748fc830d:   rex.WRX
  0x00007f7748fc830e:   rex.WRXB push %r8
  0x00007f7748fc8310:   push   %rcx
  0x00007f7748fc8311:   push   %rdx
  0x00007f7748fc8312:   push   %rbx
  0x00007f7748fc8313:   push   %rsp
  0x00007f7748fc8314:   push   %rbp
  0x00007f7748fc8315:   push   %rsi
  0x00007f7748fc8316:   push   %rdi
  0x00007f7748fc8317:   pop    %rax
  0x00007f7748fc8318:   pop    %rcx
  0x00007f7748fc8319:   pop    %rdx
  0x00007f7748fc831a:   (bad)  
  0x00007f7748fc831b:   (bad)  {%k5}
  0x00007f7748fc8320:   addr32 pushq $0x6c6b6a69
  0x00007f7748fc8326:   insl   (%dx),%es:(%rdi)
  0x00007f7748fc8327:   outsb  %ds:(%rsi),(%dx)
  0x00007f7748fc8328:   outsl  %ds:(%rsi),(%dx)
  0x00007f7748fc8329:   jo     Stub::<unknown> 0x00007f7748fc839c
  0x00007f7748fc832b:   jb     Stub::<unknown> 0x00007f7748fc83a0
  0x00007f7748fc832d:   je     Stub::<unknown> 0x00007f7748fc83a4
  0x00007f7748fc832f:   jbe    Stub::<unknown> 0x00007f7748fc83a8
  0x00007f7748fc8331:   js     Stub::<unknown> 0x00007f7748fc83ac
  0x00007f7748fc8333:   jp     Stub::<unknown> 0x00007f7748fc8365
  0x00007f7748fc8335:   xor    %esi,(%rdx)
  0x00007f7748fc8337:   xor    0x39383736(,%rsi,1),%esi
  0x00007f7748fc833e:   .byte 0x2d
  0x00007f7748fc833f:   pop    %rdi
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::decoding_table_base64 [0x00007f7748fc8340, 0x00007f7748fc8540] (512 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8340:   (bad)  
  0x00007f7748fc8341:   (bad)  
  0x00007f7748fc8342:   (bad)  
  0x00007f7748fc8343:   (bad)  
  0x00007f7748fc8344:   (bad)  
  0x00007f7748fc8345:   (bad)  
  0x00007f7748fc8346:   (bad)  
  0x00007f7748fc8347:   (bad)  
  0x00007f7748fc8348:   (bad)  
  0x00007f7748fc8349:   (bad)  
  0x00007f7748fc834a:   (bad)  
  0x00007f7748fc834b:   (bad)  
  0x00007f7748fc834c:   (bad)  
  0x00007f7748fc834d:   (bad)  
  0x00007f7748fc834e:   (bad)  
  0x00007f7748fc834f:   (bad)  
  0x00007f7748fc8350:   (bad)  
  0x00007f7748fc8351:   (bad)  
  0x00007f7748fc8352:   (bad)  
  0x00007f7748fc8353:   (bad)  
  0x00007f7748fc8354:   (bad)  
  0x00007f7748fc8355:   (bad)  
  0x00007f7748fc8356:   (bad)  
  0x00007f7748fc8357:   (bad)  
  0x00007f7748fc8358:   (bad)  
  0x00007f7748fc8359:   (bad)  
  0x00007f7748fc835a:   (bad)  
  0x00007f7748fc835b:   (bad)  
  0x00007f7748fc835c:   (bad)  
  0x00007f7748fc835d:   (bad)  
  0x00007f7748fc835e:   (bad)  
  0x00007f7748fc835f:   (bad)  
  0x00007f7748fc8360:   (bad)  
  0x00007f7748fc8361:   (bad)  
  0x00007f7748fc8362:   (bad)  
  0x00007f7748fc8363:   (bad)  
  0x00007f7748fc8364:   (bad)  
  0x00007f7748fc8365:   (bad)  
  0x00007f7748fc8366:   (bad)  
  0x00007f7748fc8367:   (bad)  
  0x00007f7748fc8368:   (bad)  
  0x00007f7748fc8369:   (bad)  
  0x00007f7748fc836a:   (bad)  
  0x00007f7748fc836b:   ds (bad) 
  0x00007f7748fc836d:   (bad)  
  0x00007f7748fc836e:   (bad)  
  0x00007f7748fc836f:   (bad)  
  0x00007f7748fc8370:   xor    $0x35,%al
  0x00007f7748fc8372:   ss (bad) 
  0x00007f7748fc8374:   cmp    %bh,(%rcx)
  0x00007f7748fc8376:   cmp    (%rbx),%bh
  0x00007f7748fc8378:   cmp    $0x3d,%al
  0x00007f7748fc837a:   (bad)  
  0x00007f7748fc837b:   (bad)  
  0x00007f7748fc837c:   (bad)  
  0x00007f7748fc837d:   (bad)  
  0x00007f7748fc837e:   (bad)  
  0x00007f7748fc837f:   (bad)  
  0x00007f7748fc8380:   incl   (%rax)
  0x00007f7748fc8382:   add    %eax,(%rdx)
  0x00007f7748fc8384:   add    0x9080706(,%rax,1),%eax
  0x00007f7748fc838b:   or     (%rbx),%cl
  0x00007f7748fc838d:   or     $0xd,%al
  0x00007f7748fc838f:   (bad)  
  0x00007f7748fc8390:   movups (%rcx),%xmm2
  0x00007f7748fc8393:   adc    (%rbx),%dl
  0x00007f7748fc8395:   adc    $0x15,%al
  0x00007f7748fc8397:   (bad)  
  0x00007f7748fc8398:   (bad)  
  0x00007f7748fc8399:   sbb    %bl,(%rcx)
  0x00007f7748fc839b:   (bad)  
  0x00007f7748fc839c:   (bad)  
  0x00007f7748fc839d:   (bad)  
  0x00007f7748fc839e:   (bad)  
  0x00007f7748fc839f:   (bad)  
  0x00007f7748fc83a0:   lcall  *(%rdx)
  0x00007f7748fc83a2:   sbb    0x21201f1e(,%rbx,1),%ebx
  0x00007f7748fc83a9:   and    (%rbx),%ah
  0x00007f7748fc83ab:   and    $0x25,%al
  0x00007f7748fc83ad:   es (bad) 
  0x00007f7748fc83af:   sub    %ch,(%rcx)
  0x00007f7748fc83b1:   sub    (%rbx),%ch
  0x00007f7748fc83b3:   sub    $0x2d,%al
  0x00007f7748fc83b5:   cs (bad) 
  0x00007f7748fc83b7:   xor    %dh,(%rcx)
  0x00007f7748fc83b9:   xor    (%rbx),%dh
  0x00007f7748fc83bb:   (bad)  
  0x00007f7748fc83bc:   (bad)  
  0x00007f7748fc83bd:   (bad)  
  0x00007f7748fc83be:   (bad)  
  0x00007f7748fc83bf:   (bad)  
  0x00007f7748fc83c0:   (bad)  
  0x00007f7748fc83c1:   (bad)  
  0x00007f7748fc83c2:   (bad)  
  0x00007f7748fc83c3:   (bad)  
  0x00007f7748fc83c4:   (bad)  
  0x00007f7748fc83c5:   (bad)  
  0x00007f7748fc83c6:   (bad)  
  0x00007f7748fc83c7:   (bad)  
  0x00007f7748fc83c8:   (bad)  
  0x00007f7748fc83c9:   (bad)  
  0x00007f7748fc83ca:   (bad)  
  0x00007f7748fc83cb:   (bad)  
  0x00007f7748fc83cc:   (bad)  
  0x00007f7748fc83cd:   (bad)  
  0x00007f7748fc83ce:   (bad)  
  0x00007f7748fc83cf:   (bad)  
  0x00007f7748fc83d0:   (bad)  
  0x00007f7748fc83d1:   (bad)  
  0x00007f7748fc83d2:   (bad)  
  0x00007f7748fc83d3:   (bad)  
  0x00007f7748fc83d4:   (bad)  
  0x00007f7748fc83d5:   (bad)  
  0x00007f7748fc83d6:   (bad)  
  0x00007f7748fc83d7:   (bad)  
  0x00007f7748fc83d8:   (bad)  
  0x00007f7748fc83d9:   (bad)  
  0x00007f7748fc83da:   (bad)  
  0x00007f7748fc83db:   (bad)  
  0x00007f7748fc83dc:   (bad)  
  0x00007f7748fc83dd:   (bad)  
  0x00007f7748fc83de:   (bad)  
  0x00007f7748fc83df:   (bad)  
  0x00007f7748fc83e0:   (bad)  
  0x00007f7748fc83e1:   (bad)  
  0x00007f7748fc83e2:   (bad)  
  0x00007f7748fc83e3:   (bad)  
  0x00007f7748fc83e4:   (bad)  
  0x00007f7748fc83e5:   (bad)  
  0x00007f7748fc83e6:   (bad)  
  0x00007f7748fc83e7:   (bad)  
  0x00007f7748fc83e8:   (bad)  
  0x00007f7748fc83e9:   (bad)  
  0x00007f7748fc83ea:   (bad)  
  0x00007f7748fc83eb:   (bad)  
  0x00007f7748fc83ec:   (bad)  
  0x00007f7748fc83ed:   (bad)  
  0x00007f7748fc83ee:   (bad)  
  0x00007f7748fc83ef:   (bad)  
  0x00007f7748fc83f0:   (bad)  
  0x00007f7748fc83f1:   (bad)  
  0x00007f7748fc83f2:   (bad)  
  0x00007f7748fc83f3:   (bad)  
  0x00007f7748fc83f4:   (bad)  
  0x00007f7748fc83f5:   (bad)  
  0x00007f7748fc83f6:   (bad)  
  0x00007f7748fc83f7:   (bad)  
  0x00007f7748fc83f8:   (bad)  
  0x00007f7748fc83f9:   (bad)  
  0x00007f7748fc83fa:   (bad)  
  0x00007f7748fc83fb:   (bad)  
  0x00007f7748fc83fc:   (bad)  
  0x00007f7748fc83fd:   (bad)  
  0x00007f7748fc83fe:   (bad)  
  0x00007f7748fc83ff:   (bad)  
  0x00007f7748fc8400:   (bad)  
  0x00007f7748fc8401:   (bad)  
  0x00007f7748fc8402:   (bad)  
  0x00007f7748fc8403:   (bad)  
  0x00007f7748fc8404:   (bad)  
  0x00007f7748fc8405:   (bad)  
  0x00007f7748fc8406:   (bad)  
  0x00007f7748fc8407:   (bad)  
  0x00007f7748fc8408:   (bad)  
  0x00007f7748fc8409:   (bad)  
  0x00007f7748fc840a:   (bad)  
  0x00007f7748fc840b:   (bad)  
  0x00007f7748fc840c:   (bad)  
  0x00007f7748fc840d:   (bad)  
  0x00007f7748fc840e:   (bad)  
  0x00007f7748fc840f:   (bad)  
  0x00007f7748fc8410:   (bad)  
  0x00007f7748fc8411:   (bad)  
  0x00007f7748fc8412:   (bad)  
  0x00007f7748fc8413:   (bad)  
  0x00007f7748fc8414:   (bad)  
  0x00007f7748fc8415:   (bad)  
  0x00007f7748fc8416:   (bad)  
  0x00007f7748fc8417:   (bad)  
  0x00007f7748fc8418:   (bad)  
  0x00007f7748fc8419:   (bad)  
  0x00007f7748fc841a:   (bad)  
  0x00007f7748fc841b:   (bad)  
  0x00007f7748fc841c:   (bad)  
  0x00007f7748fc841d:   (bad)  
  0x00007f7748fc841e:   (bad)  
  0x00007f7748fc841f:   (bad)  
  0x00007f7748fc8420:   (bad)  
  0x00007f7748fc8421:   (bad)  
  0x00007f7748fc8422:   (bad)  
  0x00007f7748fc8423:   (bad)  
  0x00007f7748fc8424:   (bad)  
  0x00007f7748fc8425:   (bad)  
  0x00007f7748fc8426:   (bad)  
  0x00007f7748fc8427:   (bad)  
  0x00007f7748fc8428:   (bad)  
  0x00007f7748fc8429:   (bad)  
  0x00007f7748fc842a:   (bad)  
  0x00007f7748fc842b:   (bad)  
  0x00007f7748fc842c:   (bad)  
  0x00007f7748fc842d:   (bad)  
  0x00007f7748fc842e:   (bad)  
  0x00007f7748fc842f:   (bad)  
  0x00007f7748fc8430:   (bad)  
  0x00007f7748fc8431:   (bad)  
  0x00007f7748fc8432:   (bad)  
  0x00007f7748fc8433:   (bad)  
  0x00007f7748fc8434:   (bad)  
  0x00007f7748fc8435:   (bad)  
  0x00007f7748fc8436:   (bad)  
  0x00007f7748fc8437:   (bad)  
  0x00007f7748fc8438:   (bad)  
  0x00007f7748fc8439:   (bad)  
  0x00007f7748fc843a:   (bad)  
  0x00007f7748fc843b:   (bad)  
  0x00007f7748fc843c:   (bad)  
  0x00007f7748fc843d:   (bad)  
  0x00007f7748fc843e:   (bad)  
  0x00007f7748fc843f:   (bad)  
  0x00007f7748fc8440:   (bad)  
  0x00007f7748fc8441:   (bad)  
  0x00007f7748fc8442:   (bad)  
  0x00007f7748fc8443:   (bad)  
  0x00007f7748fc8444:   (bad)  
  0x00007f7748fc8445:   (bad)  
  0x00007f7748fc8446:   (bad)  
  0x00007f7748fc8447:   (bad)  
  0x00007f7748fc8448:   (bad)  
  0x00007f7748fc8449:   (bad)  
  0x00007f7748fc844a:   (bad)  
  0x00007f7748fc844b:   (bad)  
  0x00007f7748fc844c:   (bad)  
  0x00007f7748fc844d:   (bad)  
  0x00007f7748fc844e:   (bad)  
  0x00007f7748fc844f:   (bad)  
  0x00007f7748fc8450:   (bad)  
  0x00007f7748fc8451:   (bad)  
  0x00007f7748fc8452:   (bad)  
  0x00007f7748fc8453:   (bad)  
  0x00007f7748fc8454:   (bad)  
  0x00007f7748fc8455:   (bad)  
  0x00007f7748fc8456:   (bad)  
  0x00007f7748fc8457:   (bad)  
  0x00007f7748fc8458:   (bad)  
  0x00007f7748fc8459:   (bad)  
  0x00007f7748fc845a:   (bad)  
  0x00007f7748fc845b:   (bad)  
  0x00007f7748fc845c:   (bad)  
  0x00007f7748fc845d:   (bad)  
  0x00007f7748fc845e:   (bad)  
  0x00007f7748fc845f:   (bad)  
  0x00007f7748fc8460:   (bad)  
  0x00007f7748fc8461:   (bad)  
  0x00007f7748fc8462:   (bad)  
  0x00007f7748fc8463:   (bad)  
  0x00007f7748fc8464:   (bad)  
  0x00007f7748fc8465:   (bad)  
  0x00007f7748fc8466:   (bad)  
  0x00007f7748fc8467:   (bad)  
  0x00007f7748fc8468:   (bad)  
  0x00007f7748fc8469:   (bad)  
  0x00007f7748fc846a:   (bad)  
  0x00007f7748fc846b:   (bad)  
  0x00007f7748fc846c:   (bad)  
  0x00007f7748fc846d:   ds (bad) 
  0x00007f7748fc846f:   pushq  0x39383736(,%rsi,1)
  0x00007f7748fc8476:   cmp    (%rbx),%bh
  0x00007f7748fc8478:   cmp    $0x3d,%al
  0x00007f7748fc847a:   (bad)  
  0x00007f7748fc847b:   (bad)  
  0x00007f7748fc847c:   (bad)  
  0x00007f7748fc847d:   (bad)  
  0x00007f7748fc847e:   (bad)  
  0x00007f7748fc847f:   (bad)  
  0x00007f7748fc8480:   incl   (%rax)
  0x00007f7748fc8482:   add    %eax,(%rdx)
  0x00007f7748fc8484:   add    0x9080706(,%rax,1),%eax
  0x00007f7748fc848b:   or     (%rbx),%cl
  0x00007f7748fc848d:   or     $0xd,%al
  0x00007f7748fc848f:   (bad)  
  0x00007f7748fc8490:   movups (%rcx),%xmm2
  0x00007f7748fc8493:   adc    (%rbx),%dl
  0x00007f7748fc8495:   adc    $0x15,%al
  0x00007f7748fc8497:   (bad)  
  0x00007f7748fc8498:   (bad)  
  0x00007f7748fc8499:   sbb    %bl,(%rcx)
  0x00007f7748fc849b:   (bad)  
  0x00007f7748fc849c:   (bad)  
  0x00007f7748fc849d:   (bad)  
  0x00007f7748fc849e:   (bad)  
  0x00007f7748fc849f:   (bad)  
  0x00007f7748fc84a0:   lcall  *(%rdx)
  0x00007f7748fc84a2:   sbb    0x21201f1e(,%rbx,1),%ebx
  0x00007f7748fc84a9:   and    (%rbx),%ah
  0x00007f7748fc84ab:   and    $0x25,%al
  0x00007f7748fc84ad:   es (bad) 
  0x00007f7748fc84af:   sub    %ch,(%rcx)
  0x00007f7748fc84b1:   sub    (%rbx),%ch
  0x00007f7748fc84b3:   sub    $0x2d,%al
  0x00007f7748fc84b5:   cs (bad) 
  0x00007f7748fc84b7:   xor    %dh,(%rcx)
  0x00007f7748fc84b9:   xor    (%rbx),%dh
  0x00007f7748fc84bb:   (bad)  
  0x00007f7748fc84bc:   (bad)  
  0x00007f7748fc84bd:   (bad)  
  0x00007f7748fc84be:   (bad)  
  0x00007f7748fc84bf:   (bad)  
  0x00007f7748fc84c0:   (bad)  
  0x00007f7748fc84c1:   (bad)  
  0x00007f7748fc84c2:   (bad)  
  0x00007f7748fc84c3:   (bad)  
  0x00007f7748fc84c4:   (bad)  
  0x00007f7748fc84c5:   (bad)  
  0x00007f7748fc84c6:   (bad)  
  0x00007f7748fc84c7:   (bad)  
  0x00007f7748fc84c8:   (bad)  
  0x00007f7748fc84c9:   (bad)  
  0x00007f7748fc84ca:   (bad)  
  0x00007f7748fc84cb:   (bad)  
  0x00007f7748fc84cc:   (bad)  
  0x00007f7748fc84cd:   (bad)  
  0x00007f7748fc84ce:   (bad)  
  0x00007f7748fc84cf:   (bad)  
  0x00007f7748fc84d0:   (bad)  
  0x00007f7748fc84d1:   (bad)  
  0x00007f7748fc84d2:   (bad)  
  0x00007f7748fc84d3:   (bad)  
  0x00007f7748fc84d4:   (bad)  
  0x00007f7748fc84d5:   (bad)  
  0x00007f7748fc84d6:   (bad)  
  0x00007f7748fc84d7:   (bad)  
  0x00007f7748fc84d8:   (bad)  
  0x00007f7748fc84d9:   (bad)  
  0x00007f7748fc84da:   (bad)  
  0x00007f7748fc84db:   (bad)  
  0x00007f7748fc84dc:   (bad)  
  0x00007f7748fc84dd:   (bad)  
  0x00007f7748fc84de:   (bad)  
  0x00007f7748fc84df:   (bad)  
  0x00007f7748fc84e0:   (bad)  
  0x00007f7748fc84e1:   (bad)  
  0x00007f7748fc84e2:   (bad)  
  0x00007f7748fc84e3:   (bad)  
  0x00007f7748fc84e4:   (bad)  
  0x00007f7748fc84e5:   (bad)  
  0x00007f7748fc84e6:   (bad)  
  0x00007f7748fc84e7:   (bad)  
  0x00007f7748fc84e8:   (bad)  
  0x00007f7748fc84e9:   (bad)  
  0x00007f7748fc84ea:   (bad)  
  0x00007f7748fc84eb:   (bad)  
  0x00007f7748fc84ec:   (bad)  
  0x00007f7748fc84ed:   (bad)  
  0x00007f7748fc84ee:   (bad)  
  0x00007f7748fc84ef:   (bad)  
  0x00007f7748fc84f0:   (bad)  
  0x00007f7748fc84f1:   (bad)  
  0x00007f7748fc84f2:   (bad)  
  0x00007f7748fc84f3:   (bad)  
  0x00007f7748fc84f4:   (bad)  
  0x00007f7748fc84f5:   (bad)  
  0x00007f7748fc84f6:   (bad)  
  0x00007f7748fc84f7:   (bad)  
  0x00007f7748fc84f8:   (bad)  
  0x00007f7748fc84f9:   (bad)  
  0x00007f7748fc84fa:   (bad)  
  0x00007f7748fc84fb:   (bad)  
  0x00007f7748fc84fc:   (bad)  
  0x00007f7748fc84fd:   (bad)  
  0x00007f7748fc84fe:   (bad)  
  0x00007f7748fc84ff:   (bad)  
  0x00007f7748fc8500:   (bad)  
  0x00007f7748fc8501:   (bad)  
  0x00007f7748fc8502:   (bad)  
  0x00007f7748fc8503:   (bad)  
  0x00007f7748fc8504:   (bad)  
  0x00007f7748fc8505:   (bad)  
  0x00007f7748fc8506:   (bad)  
  0x00007f7748fc8507:   (bad)  
  0x00007f7748fc8508:   (bad)  
  0x00007f7748fc8509:   (bad)  
  0x00007f7748fc850a:   (bad)  
  0x00007f7748fc850b:   (bad)  
  0x00007f7748fc850c:   (bad)  
  0x00007f7748fc850d:   (bad)  
  0x00007f7748fc850e:   (bad)  
  0x00007f7748fc850f:   (bad)  
  0x00007f7748fc8510:   (bad)  
  0x00007f7748fc8511:   (bad)  
  0x00007f7748fc8512:   (bad)  
  0x00007f7748fc8513:   (bad)  
  0x00007f7748fc8514:   (bad)  
  0x00007f7748fc8515:   (bad)  
  0x00007f7748fc8516:   (bad)  
  0x00007f7748fc8517:   (bad)  
  0x00007f7748fc8518:   (bad)  
  0x00007f7748fc8519:   (bad)  
  0x00007f7748fc851a:   (bad)  
  0x00007f7748fc851b:   (bad)  
  0x00007f7748fc851c:   (bad)  
  0x00007f7748fc851d:   (bad)  
  0x00007f7748fc851e:   (bad)  
  0x00007f7748fc851f:   (bad)  
  0x00007f7748fc8520:   (bad)  
  0x00007f7748fc8521:   (bad)  
  0x00007f7748fc8522:   (bad)  
  0x00007f7748fc8523:   (bad)  
  0x00007f7748fc8524:   (bad)  
  0x00007f7748fc8525:   (bad)  
  0x00007f7748fc8526:   (bad)  
  0x00007f7748fc8527:   (bad)  
  0x00007f7748fc8528:   (bad)  
  0x00007f7748fc8529:   (bad)  
  0x00007f7748fc852a:   (bad)  
  0x00007f7748fc852b:   (bad)  
  0x00007f7748fc852c:   (bad)  
  0x00007f7748fc852d:   (bad)  
  0x00007f7748fc852e:   (bad)  
  0x00007f7748fc852f:   (bad)  
  0x00007f7748fc8530:   (bad)  
  0x00007f7748fc8531:   (bad)  
  0x00007f7748fc8532:   (bad)  
  0x00007f7748fc8533:   (bad)  
  0x00007f7748fc8534:   (bad)  
  0x00007f7748fc8535:   (bad)  
  0x00007f7748fc8536:   (bad)  
  0x00007f7748fc8537:   (bad)  
  0x00007f7748fc8538:   (bad)  
  0x00007f7748fc8539:   (bad)  
  0x00007f7748fc853a:   (bad)  
  0x00007f7748fc853b:   (bad)  
  0x00007f7748fc853c:   (bad)  
  0x00007f7748fc853d:   (bad)  
  0x00007f7748fc853e:   (bad)  
  0x00007f7748fc853f:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::implEncode [0x00007f7748fc8540, 0x00007f7748fc8736] (502 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8540:   push   %rbp
  0x00007f7748fc8541:   mov    %rsp,%rbp
  0x00007f7748fc8544:   push   %r12
  0x00007f7748fc8546:   push   %r13
  0x00007f7748fc8548:   push   %r14
  0x00007f7748fc854a:   push   %r15
  0x00007f7748fc854c:   mov    %edx,%r14d
  0x00007f7748fc854f:   sub    %esi,%r14d
  0x00007f7748fc8552:   cmp    $0x0,%r14d
  0x00007f7748fc8556:   jle    Stub::implEncode+492 0x00007f7748fc872c
  0x00007f7748fc855c:   cmp    $0x1f,%r14d
  0x00007f7748fc8560:   jbe    Stub::implEncode+333 0x00007f7748fc868d
  0x00007f7748fc8566:   vmovdqu -0x46e(%rip),%ymm9        # Stub::avx2_shuffle_base64
  0x00007f7748fc856e:   mov    $0xfc0fc00,%eax
  0x00007f7748fc8573:   vmovd  %eax,%xmm8
  0x00007f7748fc8577:   vmovdqu -0x45f(%rip),%ymm1        # Stub::avx2_input_mask_base64
  0x00007f7748fc857f:   vpbroadcastd %xmm8,%ymm8
  0x00007f7748fc8584:   mov    $0x4000040,%eax
  0x00007f7748fc8589:   sub    $0x18,%r14d
  0x00007f7748fc858d:   vmovd  %eax,%xmm7
  0x00007f7748fc8591:   vpbroadcastd %xmm7,%ymm7
  0x00007f7748fc8596:   vpmaskmovd -0x4(%rdi,%rsi,1),%ymm1,%ymm1
  0x00007f7748fc859d:   vpshufb %ymm9,%ymm1,%ymm1
  0x00007f7748fc85a2:   add    $0x18,%esi
  0x00007f7748fc85a5:   mov    $0x3f03f0,%eax
  0x00007f7748fc85aa:   vmovd  %eax,%xmm6
  0x00007f7748fc85ae:   vpbroadcastd %xmm6,%ymm6
  0x00007f7748fc85b3:   mov    $0x1000010,%eax
  0x00007f7748fc85b8:   vmovd  %eax,%xmm5
  0x00007f7748fc85bc:   vpbroadcastd %xmm5,%ymm5
  0x00007f7748fc85c1:   vpand  %ymm1,%ymm8,%ymm0
  0x00007f7748fc85c5:   mov    $0x19191919,%eax
  0x00007f7748fc85ca:   vmovd  %eax,%xmm3
  0x00007f7748fc85ce:   vpbroadcastd %xmm3,%ymm3
  0x00007f7748fc85d3:   mov    $0x33333333,%eax
  0x00007f7748fc85d8:   vmovd  %eax,%xmm4
  0x00007f7748fc85dc:   vpbroadcastd %xmm4,%ymm4
  0x00007f7748fc85e1:   vpmulhuw %ymm7,%ymm0,%ymm2
  0x00007f7748fc85e5:   vpand  %ymm1,%ymm6,%ymm0
  0x00007f7748fc85e9:   vpmullw %ymm0,%ymm5,%ymm0
  0x00007f7748fc85ed:   vpor   %ymm2,%ymm0,%ymm0
  0x00007f7748fc85f1:   vpcmpgtb %ymm3,%ymm0,%ymm2
  0x00007f7748fc85f5:   vpsubusb %ymm4,%ymm0,%ymm1
  0x00007f7748fc85f9:   vpsubb %ymm2,%ymm1,%ymm1
  0x00007f7748fc85fd:   movabs $0x7f7748fc8140,%r11
  0x00007f7748fc8607:   mov    %r9d,%r15d
  0x00007f7748fc860a:   shl    $0x5,%r15d
  0x00007f7748fc860e:   vmovdqu (%r11,%r15,1),%ymm2
  0x00007f7748fc8614:   vpshufb %ymm1,%ymm2,%ymm1
  0x00007f7748fc8619:   vpaddb %ymm0,%ymm1,%ymm0
  0x00007f7748fc861d:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007f7748fc8623:   add    $0x20,%r8d
  0x00007f7748fc8627:   cmp    $0x1f,%r14d
  0x00007f7748fc862b:   jbe    Stub::implEncode+333 0x00007f7748fc868d
  0x00007f7748fc8631:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fc863c:   data16 data16 xchg %ax,%ax
  0x00007f7748fc8640:   vmovdqu -0x4(%rdi,%rsi,1),%ymm1
  0x00007f7748fc8646:   sub    $0x18,%r14d
  0x00007f7748fc864a:   add    $0x18,%esi
  0x00007f7748fc864d:   vpshufb %ymm9,%ymm1,%ymm1
  0x00007f7748fc8652:   vpand  %ymm1,%ymm8,%ymm0
  0x00007f7748fc8656:   vpmulhuw %ymm7,%ymm0,%ymm10
  0x00007f7748fc865a:   vpand  %ymm1,%ymm6,%ymm0
  0x00007f7748fc865e:   vpmullw %ymm0,%ymm5,%ymm0
  0x00007f7748fc8662:   vpor   %ymm10,%ymm0,%ymm0
  0x00007f7748fc8667:   vpcmpgtb %ymm3,%ymm0,%ymm10
  0x00007f7748fc866b:   vpsubusb %ymm4,%ymm0,%ymm1
  0x00007f7748fc866f:   vpsubb %ymm10,%ymm1,%ymm1
  0x00007f7748fc8674:   vpshufb %ymm1,%ymm2,%ymm1
  0x00007f7748fc8679:   vpaddb %ymm0,%ymm1,%ymm0
  0x00007f7748fc867d:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007f7748fc8683:   add    $0x20,%r8d
  0x00007f7748fc8687:   cmp    $0x1f,%r14d
  0x00007f7748fc868b:   ja     Stub::implEncode+256 0x00007f7748fc8640
  0x00007f7748fc868d:   vzeroupper 
  0x00007f7748fc8690:   cmp    $0x3,%r14d
  0x00007f7748fc8694:   jb     Stub::implEncode+492 0x00007f7748fc872c
  0x00007f7748fc869a:   movabs $0x7f7748fc82c0,%r11
  0x00007f7748fc86a4:   mov    %r9d,%r15d
  0x00007f7748fc86a7:   shl    $0x6,%r15d
  0x00007f7748fc86ab:   add    %r15,%r11
  0x00007f7748fc86ae:   movzbl (%rdi,%rsi,1),%r15d
  0x00007f7748fc86b3:   movzbl 0x1(%rdi,%rsi,1),%r10d
  0x00007f7748fc86b9:   movzbl 0x2(%rdi,%rsi,1),%r13d
  0x00007f7748fc86bf:   mov    %r10d,%eax
  0x00007f7748fc86c2:   shl    $0x18,%r10d
  0x00007f7748fc86c6:   or     %r10d,%eax
  0x00007f7748fc86c9:   sub    $0x3,%r14d
  0x00007f7748fc86cd:   shl    $0x8,%r15d
  0x00007f7748fc86d1:   shl    $0x10,%r13d
  0x00007f7748fc86d5:   or     %r15d,%eax
  0x00007f7748fc86d8:   add    $0x3,%esi
  0x00007f7748fc86db:   or     %r13d,%eax
  0x00007f7748fc86de:   shr    $0x10,%r13d
  0x00007f7748fc86e2:   and    $0x3f,%r13d
  0x00007f7748fc86e6:   shr    $0xa,%r15d
  0x00007f7748fc86ea:   movzbl (%r11,%r13,1),%r13d
  0x00007f7748fc86ef:   movzbl (%r11,%r15,1),%r15d
  0x00007f7748fc86f4:   mov    %r13b,0x3(%rcx,%r8,1)
  0x00007f7748fc86f9:   shr    $0x4,%eax
  0x00007f7748fc86fc:   mov    %eax,%r10d
  0x00007f7748fc86ff:   and    $0x3f,%eax
  0x00007f7748fc8702:   mov    %r15b,(%rcx,%r8,1)
  0x00007f7748fc8706:   movzbl (%r11,%rax,1),%eax
  0x00007f7748fc870b:   shr    $0x12,%r10d
  0x00007f7748fc870f:   and    $0x3f,%r10d
  0x00007f7748fc8713:   movzbl (%r11,%r10,1),%r10d
  0x00007f7748fc8718:   mov    %al,0x1(%rcx,%r8,1)
  0x00007f7748fc871d:   mov    %r10b,0x2(%rcx,%r8,1)
  0x00007f7748fc8722:   add    $0x4,%r8d
  0x00007f7748fc8726:   cmp    $0x3,%r14d
  0x00007f7748fc872a:   jae    Stub::implEncode+366 0x00007f7748fc86ae
  0x00007f7748fc872c:   pop    %r15
  0x00007f7748fc872e:   pop    %r14
  0x00007f7748fc8730:   pop    %r13
  0x00007f7748fc8732:   pop    %r12
  0x00007f7748fc8734:   leaveq 
  0x00007f7748fc8735:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::implDecode [0x00007f7748fc8740, 0x00007f7748fc8904] (452 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8740:   push   %rbp
  0x00007f7748fc8741:   mov    %rsp,%rbp
  0x00007f7748fc8744:   push   %r12
  0x00007f7748fc8746:   push   %r13
  0x00007f7748fc8748:   push   %r14
  0x00007f7748fc874a:   push   %r15
  0x00007f7748fc874c:   push   %rbx
  0x00007f7748fc874d:   mov    0x10(%rbp),%ebx
  0x00007f7748fc8750:   mov    %edx,%r14d
  0x00007f7748fc8753:   sub    %esi,%r14d
  0x00007f7748fc8756:   push   %rcx
  0x00007f7748fc8757:   sub    $0x2c,%r14d
  0x00007f7748fc875b:   cmp    $0x0,%r14d
  0x00007f7748fc875f:   jbe    Stub::implDecode+255 0x00007f7748fc883f
  0x00007f7748fc8765:   cmp    $0x0,%ebx
  0x00007f7748fc8768:   jne    Stub::implDecode+255 0x00007f7748fc883f
  0x00007f7748fc876e:   shl    $0x3,%r9d
  0x00007f7748fc8772:   movabs $0x7f7748fc8180,%r13
  0x00007f7748fc877c:   vpbroadcastq 0x0(%r13,%r9,1),%ymm4
  0x00007f7748fc8783:   vmovdqu %ymm4,%ymm10
  0x00007f7748fc8787:   vmovdqu 0x10(%r13),%ymm12
  0x00007f7748fc878d:   vmovdqu 0x30(%r13),%ymm9
  0x00007f7748fc8793:   vmovdqu 0x50(%r13),%ymm7
  0x00007f7748fc8799:   vmovdqu 0x70(%r13),%ymm6
  0x00007f7748fc879f:   vmovdqu 0x90(%r13),%ymm13
  0x00007f7748fc87a8:   movabs $0x7f7748fc8240,%r13
  0x00007f7748fc87b2:   shl    $0x2,%r9d
  0x00007f7748fc87b6:   vmovdqu 0x0(%r13,%r9,1),%ymm11
  0x00007f7748fc87bd:   vmovdqu 0x20(%r13,%r9,1),%ymm8
  0x00007f7748fc87c4:   shr    $0x5,%r9d
  0x00007f7748fc87c8:   jmpq   Stub::implDecode+207 0x00007f7748fc880f
  0x00007f7748fc87cd:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fc87d8:   data16 data16 xchg %ax,%ax
  0x00007f7748fc87dc:   nopl   0x0(%rax)
  0x00007f7748fc87e0:   vpaddb %ymm2,%ymm0,%ymm0
  0x00007f7748fc87e4:   vpmaddubsw %ymm7,%ymm0,%ymm0
  0x00007f7748fc87e9:   vpmaddwd %ymm6,%ymm0,%ymm0
  0x00007f7748fc87ed:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007f7748fc87f2:   vpermd %ymm0,%ymm12,%ymm0
  0x00007f7748fc87f7:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007f7748fc87fd:   add    $0x20,%rdi
  0x00007f7748fc8801:   add    $0x18,%rcx
  0x00007f7748fc8805:   sub    $0x20,%r14d
  0x00007f7748fc8809:   jbe    Stub::implDecode+255 0x00007f7748fc883f
  0x00007f7748fc880f:   vmovdqu (%rdi,%rsi,1),%ymm2
  0x00007f7748fc8814:   vpsrld $0x4,%ymm2,%ymm1
  0x00007f7748fc8819:   vpand  %ymm1,%ymm4,%ymm1
  0x00007f7748fc881d:   vpand  %ymm4,%ymm2,%ymm3
  0x00007f7748fc8821:   vpcmpeqb %ymm2,%ymm10,%ymm0
  0x00007f7748fc8825:   vpshufb %ymm3,%ymm11,%ymm3
  0x00007f7748fc882a:   vpshufb %ymm1,%ymm9,%ymm5
  0x00007f7748fc882f:   vptest %ymm5,%ymm3
  0x00007f7748fc8834:   vpaddb %ymm1,%ymm0,%ymm0
  0x00007f7748fc8838:   vpshufb %ymm0,%ymm8,%ymm0
  0x00007f7748fc883d:   je     Stub::implDecode+160 0x00007f7748fc87e0
  0x00007f7748fc883f:   add    $0x2c,%r14d
  0x00007f7748fc8843:   vzeroupper 
  0x00007f7748fc8846:   shr    $0x2,%r14d
  0x00007f7748fc884a:   cmp    $0x0,%r14d
  0x00007f7748fc884e:   jle    Stub::implDecode+434 0x00007f7748fc88f2
  0x00007f7748fc8854:   shl    $0x8,%r9d
  0x00007f7748fc8858:   movabs $0x7f7748fc8340,%r11
  0x00007f7748fc8862:   add    %r9,%r11
  0x00007f7748fc8865:   jmpq   Stub::implDecode+379 0x00007f7748fc88bb
  0x00007f7748fc886a:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fc8875:   data16 data16 xchg %ax,%ax
  0x00007f7748fc8879:   nopl   0x0(%rax)
  0x00007f7748fc8880:   shl    $0x12,%r13d
  0x00007f7748fc8884:   shl    $0xc,%r15d
  0x00007f7748fc8888:   shl    $0x6,%edx
  0x00007f7748fc888b:   or     %r15d,%r13d
  0x00007f7748fc888e:   or     %edx,%r13d
  0x00007f7748fc8891:   or     %r9d,%r13d
  0x00007f7748fc8894:   add    $0x4,%rdi
  0x00007f7748fc8898:   mov    %r13b,0x2(%rcx,%r8,1)
  0x00007f7748fc889d:   shr    $0x8,%r13d
  0x00007f7748fc88a1:   mov    %r13b,0x1(%rcx,%r8,1)
  0x00007f7748fc88a6:   shr    $0x8,%r13d
  0x00007f7748fc88aa:   mov    %r13b,(%rcx,%r8,1)
  0x00007f7748fc88ae:   add    $0x3,%rcx
  0x00007f7748fc88b2:   dec    %r14d
  0x00007f7748fc88b5:   je     Stub::implDecode+434 0x00007f7748fc88f2
  0x00007f7748fc88bb:   movzbl (%rdi,%rsi,1),%r13d
  0x00007f7748fc88c0:   movzbl 0x1(%rdi,%rsi,1),%r15d
  0x00007f7748fc88c6:   movsbl (%r11,%r13,1),%r13d
  0x00007f7748fc88cb:   movsbl (%r11,%r15,1),%r15d
  0x00007f7748fc88d0:   movzbl 0x2(%rdi,%rsi,1),%edx
  0x00007f7748fc88d5:   movzbl 0x3(%rdi,%rsi,1),%r9d
  0x00007f7748fc88db:   movsbl (%r11,%rdx,1),%edx
  0x00007f7748fc88e0:   movsbl (%r11,%r9,1),%r9d
  0x00007f7748fc88e5:   mov    %r13,%rax
  0x00007f7748fc88e8:   or     %r15d,%eax
  0x00007f7748fc88eb:   or     %edx,%eax
  0x00007f7748fc88ed:   or     %r9d,%eax
  0x00007f7748fc88f0:   jns    Stub::implDecode+320 0x00007f7748fc8880
  0x00007f7748fc88f2:   pop    %rax
  0x00007f7748fc88f3:   sub    %rax,%rcx
  0x00007f7748fc88f6:   mov    %rcx,%rax
  0x00007f7748fc88f9:   pop    %rbx
  0x00007f7748fc88fa:   pop    %r15
  0x00007f7748fc88fc:   pop    %r14
  0x00007f7748fc88fe:   pop    %r13
  0x00007f7748fc8900:   pop    %r12
  0x00007f7748fc8902:   leaveq 
  0x00007f7748fc8903:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::nmethod_entry_barrier [0x00007f7748fc8920, 0x00007f7748fc8acd] (429 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8920:   pushq  $0xffffffffffffffff
  0x00007f7748fc8925:   push   %rbp
  0x00007f7748fc8926:   mov    %rsp,%rbp
  0x00007f7748fc8929:   push   %rdi
  0x00007f7748fc892a:   lea    0x18(%rsp),%rdi
  0x00007f7748fc892f:   sub    $0x80,%rsp
  0x00007f7748fc8936:   mov    %rax,0x78(%rsp)
  0x00007f7748fc893b:   mov    %rcx,0x70(%rsp)
  0x00007f7748fc8940:   mov    %rdx,0x68(%rsp)
  0x00007f7748fc8945:   mov    %rbx,0x60(%rsp)
  0x00007f7748fc894a:   mov    %rbp,0x50(%rsp)
  0x00007f7748fc894f:   mov    %rsi,0x48(%rsp)
  0x00007f7748fc8954:   mov    %rdi,0x40(%rsp)
  0x00007f7748fc8959:   mov    %r8,0x38(%rsp)
  0x00007f7748fc895e:   mov    %r9,0x30(%rsp)
  0x00007f7748fc8963:   mov    %r10,0x28(%rsp)
  0x00007f7748fc8968:   mov    %r11,0x20(%rsp)
  0x00007f7748fc896d:   mov    %r12,0x18(%rsp)
  0x00007f7748fc8972:   mov    %r13,0x10(%rsp)
  0x00007f7748fc8977:   mov    %r14,0x8(%rsp)
  0x00007f7748fc897c:   mov    %r15,(%rsp)
  0x00007f7748fc8980:   sub    $0x80,%rsp
  0x00007f7748fc8987:   vmovdqu %xmm7,0x70(%rsp)
  0x00007f7748fc898d:   vmovdqu %xmm6,0x60(%rsp)
  0x00007f7748fc8993:   vmovdqu %xmm5,0x50(%rsp)
  0x00007f7748fc8999:   vmovdqu %xmm4,0x40(%rsp)
  0x00007f7748fc899f:   vmovdqu %xmm3,0x30(%rsp)
  0x00007f7748fc89a5:   vmovdqu %xmm2,0x20(%rsp)
  0x00007f7748fc89ab:   vmovdqu %xmm1,0x10(%rsp)
  0x00007f7748fc89b1:   vmovdqu %xmm0,(%rsp)
  0x00007f7748fc89b6:   test   $0xf,%spl
  0x00007f7748fc89ba:   je     Stub::nmethod_entry_barrier+178 0x00007f7748fc89d2
  0x00007f7748fc89c0:   sub    $0x8,%rsp
  0x00007f7748fc89c4:   callq  0x00007f774c6dd2e0 = BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)
  0x00007f7748fc89c9:   add    $0x8,%rsp
  0x00007f7748fc89cd:   jmpq   Stub::nmethod_entry_barrier+183 0x00007f7748fc89d7
  0x00007f7748fc89d2:   callq  0x00007f774c6dd2e0 = BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)
  0x00007f7748fc89d7:   vmovdqu (%rsp),%xmm0
  0x00007f7748fc89dc:   vmovdqu 0x10(%rsp),%xmm1
  0x00007f7748fc89e2:   vmovdqu 0x20(%rsp),%xmm2
  0x00007f7748fc89e8:   vmovdqu 0x30(%rsp),%xmm3
  0x00007f7748fc89ee:   vmovdqu 0x40(%rsp),%xmm4
  0x00007f7748fc89f4:   vmovdqu 0x50(%rsp),%xmm5
  0x00007f7748fc89fa:   vmovdqu 0x60(%rsp),%xmm6
  0x00007f7748fc8a00:   vmovdqu 0x70(%rsp),%xmm7
  0x00007f7748fc8a06:   add    $0x80,%rsp
  0x00007f7748fc8a0d:   cmp    $0x1,%eax
  0x00007f7748fc8a10:   je     Stub::nmethod_entry_barrier+334 0x00007f7748fc8a6e
  0x00007f7748fc8a16:   mov    (%rsp),%r15
  0x00007f7748fc8a1a:   mov    0x8(%rsp),%r14
  0x00007f7748fc8a1f:   mov    0x10(%rsp),%r13
  0x00007f7748fc8a24:   mov    0x18(%rsp),%r12
  0x00007f7748fc8a29:   mov    0x20(%rsp),%r11
  0x00007f7748fc8a2e:   mov    0x28(%rsp),%r10
  0x00007f7748fc8a33:   mov    0x30(%rsp),%r9
  0x00007f7748fc8a38:   mov    0x38(%rsp),%r8
  0x00007f7748fc8a3d:   mov    0x40(%rsp),%rdi
  0x00007f7748fc8a42:   mov    0x48(%rsp),%rsi
  0x00007f7748fc8a47:   mov    0x50(%rsp),%rbp
  0x00007f7748fc8a4c:   mov    0x60(%rsp),%rbx
  0x00007f7748fc8a51:   mov    0x68(%rsp),%rdx
  0x00007f7748fc8a56:   mov    0x70(%rsp),%rcx
  0x00007f7748fc8a5b:   mov    0x78(%rsp),%rax
  0x00007f7748fc8a60:   add    $0x80,%rsp
  0x00007f7748fc8a67:   pop    %rdi
  0x00007f7748fc8a68:   leaveq 
  0x00007f7748fc8a69:   add    $0x8,%rsp
  0x00007f7748fc8a6d:   retq   
  0x00007f7748fc8a6e:   mov    (%rsp),%r15
  0x00007f7748fc8a72:   mov    0x8(%rsp),%r14
  0x00007f7748fc8a77:   mov    0x10(%rsp),%r13
  0x00007f7748fc8a7c:   mov    0x18(%rsp),%r12
  0x00007f7748fc8a81:   mov    0x20(%rsp),%r11
  0x00007f7748fc8a86:   mov    0x28(%rsp),%r10
  0x00007f7748fc8a8b:   mov    0x30(%rsp),%r9
  0x00007f7748fc8a90:   mov    0x38(%rsp),%r8
  0x00007f7748fc8a95:   mov    0x40(%rsp),%rdi
  0x00007f7748fc8a9a:   mov    0x48(%rsp),%rsi
  0x00007f7748fc8a9f:   mov    0x50(%rsp),%rbp
  0x00007f7748fc8aa4:   mov    0x60(%rsp),%rbx
  0x00007f7748fc8aa9:   mov    0x68(%rsp),%rdx
  0x00007f7748fc8aae:   mov    0x70(%rsp),%rcx
  0x00007f7748fc8ab3:   mov    0x78(%rsp),%rax
  0x00007f7748fc8ab8:   add    $0x80,%rsp
  0x00007f7748fc8abf:   pop    %rdi
  0x00007f7748fc8ac0:   leaveq 
  0x00007f7748fc8ac1:   test   %rsp,(%rsp)
  0x00007f7748fc8ac5:   mov    (%rsp),%rsp
  0x00007f7748fc8ac9:   jmpq   *-0x8(%rsp)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::multiplyToLen [0x00007f7748fc8ae0, 0x00007f7748fc8d0f] (559 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8ae0:   push   %rbp
  0x00007f7748fc8ae1:   mov    %rsp,%rbp
  0x00007f7748fc8ae4:   mov    %r9,%r11
  0x00007f7748fc8ae7:   mov    %rsi,%rax
  0x00007f7748fc8aea:   mov    %rdx,%rsi
  0x00007f7748fc8aed:   push   %r12
  0x00007f7748fc8aef:   push   %r13
  0x00007f7748fc8af1:   push   %r14
  0x00007f7748fc8af3:   push   %r15
  0x00007f7748fc8af5:   push   %rbx
  0x00007f7748fc8af6:   push   %rax
  0x00007f7748fc8af7:   push   %r11
  0x00007f7748fc8af9:   mov    %ecx,%r12d
  0x00007f7748fc8afc:   mov    %r11d,%r13d
  0x00007f7748fc8aff:   xor    %rbx,%rbx
  0x00007f7748fc8b02:   mov    %eax,%r14d
  0x00007f7748fc8b05:   dec    %r14d
  0x00007f7748fc8b08:   js     Stub::multiplyToLen+545 0x00007f7748fc8d01
  0x00007f7748fc8b0e:   dec    %r14d
  0x00007f7748fc8b11:   js     Stub::multiplyToLen+129 0x00007f7748fc8b61
  0x00007f7748fc8b17:   mov    (%rdi,%r14,4),%r11
  0x00007f7748fc8b1b:   ror    $0x20,%r11
  0x00007f7748fc8b1f:   dec    %r12d
  0x00007f7748fc8b22:   js     Stub::multiplyToLen+134 0x00007f7748fc8b66
  0x00007f7748fc8b28:   dec    %r12d
  0x00007f7748fc8b2b:   js     Stub::multiplyToLen+124 0x00007f7748fc8b5c
  0x00007f7748fc8b31:   mov    (%rsi,%r12,4),%r15
  0x00007f7748fc8b35:   ror    $0x20,%r15
  0x00007f7748fc8b39:   mov    %r11,%rax
  0x00007f7748fc8b3c:   mul    %r15
  0x00007f7748fc8b3f:   add    %rbx,%rax
  0x00007f7748fc8b42:   adc    $0x0,%rdx
  0x00007f7748fc8b46:   sub    $0x2,%r13d
  0x00007f7748fc8b4a:   mov    %eax,0x4(%r8,%r13,4)
  0x00007f7748fc8b4f:   shr    $0x20,%rax
  0x00007f7748fc8b53:   mov    %eax,(%r8,%r13,4)
  0x00007f7748fc8b57:   mov    %rdx,%rbx
  0x00007f7748fc8b5a:   jmp    Stub::multiplyToLen+63 0x00007f7748fc8b1f
  0x00007f7748fc8b5c:   mov    (%rsi),%r15d
  0x00007f7748fc8b5f:   jmp    Stub::multiplyToLen+89 0x00007f7748fc8b39
  0x00007f7748fc8b61:   mov    (%rdi),%r11d
  0x00007f7748fc8b64:   jmp    Stub::multiplyToLen+63 0x00007f7748fc8b1f
  0x00007f7748fc8b66:   test   %r13d,%r13d
  0x00007f7748fc8b69:   je     Stub::multiplyToLen+169 0x00007f7748fc8b89
  0x00007f7748fc8b6f:   sub    $0x1,%r13d
  0x00007f7748fc8b73:   je     Stub::multiplyToLen+165 0x00007f7748fc8b85
  0x00007f7748fc8b79:   mov    %ebx,(%r8,%r13,4)
  0x00007f7748fc8b7d:   shr    $0x20,%rbx
  0x00007f7748fc8b81:   sub    $0x1,%r13d
  0x00007f7748fc8b85:   mov    %ebx,(%r8,%r13,4)
  0x00007f7748fc8b89:   xor    %ebx,%ebx
  0x00007f7748fc8b8b:   mov    %ecx,%r12d
  0x00007f7748fc8b8e:   sub    $0x1,%r14d
  0x00007f7748fc8b92:   js     Stub::multiplyToLen+545 0x00007f7748fc8d01
  0x00007f7748fc8b98:   push   %r8
  0x00007f7748fc8b9a:   lea    0x4(%r8,%r14,4),%r8
  0x00007f7748fc8b9f:   sub    $0x1,%r14d
  0x00007f7748fc8ba3:   js     Stub::multiplyToLen+538 0x00007f7748fc8cfa
  0x00007f7748fc8ba9:   mov    (%rdi,%r14,4),%rdx
  0x00007f7748fc8bad:   rorx   $0x20,%rdx,%rdx
  0x00007f7748fc8bb3:   push   %rdi
  0x00007f7748fc8bb4:   push   %r14
  0x00007f7748fc8bb6:   push   %rcx
  0x00007f7748fc8bb7:   mov    %r12d,%ecx
  0x00007f7748fc8bba:   and    $0xfffffffc,%ecx
  0x00007f7748fc8bbd:   shr    $0x2,%ecx
  0x00007f7748fc8bc0:   sub    $0x1,%ecx
  0x00007f7748fc8bc3:   js     Stub::multiplyToLen+365 0x00007f7748fc8c4d
  0x00007f7748fc8bc9:   sub    $0x4,%r12d
  0x00007f7748fc8bcd:   mov    0x8(%rsi,%r12,4),%rax
  0x00007f7748fc8bd2:   rorx   $0x20,%rax,%rax
  0x00007f7748fc8bd8:   mov    (%rsi,%r12,4),%r13
  0x00007f7748fc8bdc:   rorx   $0x20,%r13,%r13
  0x00007f7748fc8be2:   mulx   %rax,%r14,%r15
  0x00007f7748fc8be7:   mulx   %r13,%r11,%rdi
  0x00007f7748fc8bec:   mov    0x8(%r8,%r12,4),%rax
  0x00007f7748fc8bf1:   rorx   $0x20,%rax,%rax
  0x00007f7748fc8bf7:   mov    (%r8,%r12,4),%r13
  0x00007f7748fc8bfb:   rorx   $0x20,%r13,%r13
  0x00007f7748fc8c01:   adcx   %rbx,%r14
  0x00007f7748fc8c07:   adox   %rax,%r14
  0x00007f7748fc8c0d:   adcx   %r11,%r15
  0x00007f7748fc8c13:   adox   %r13,%r15
  0x00007f7748fc8c19:   mov    $0x0,%ebx
  0x00007f7748fc8c1e:   adcx   %rbx,%rdi
  0x00007f7748fc8c24:   adox   %rbx,%rdi
  0x00007f7748fc8c2a:   mov    %rdi,%rbx
  0x00007f7748fc8c2d:   mov    %r14d,0xc(%r8,%r12,4)
  0x00007f7748fc8c32:   shr    $0x20,%r14
  0x00007f7748fc8c36:   mov    %r14d,0x8(%r8,%r12,4)
  0x00007f7748fc8c3b:   mov    %r15d,0x4(%r8,%r12,4)
  0x00007f7748fc8c40:   shr    $0x20,%r15
  0x00007f7748fc8c44:   mov    %r15d,(%r8,%r12,4)
  0x00007f7748fc8c48:   jmpq   Stub::multiplyToLen+224 0x00007f7748fc8bc0
  0x00007f7748fc8c4d:   and    $0x3,%r12d
  0x00007f7748fc8c51:   je     Stub::multiplyToLen+503 0x00007f7748fc8cd7
  0x00007f7748fc8c57:   sub    $0x2,%r12d
  0x00007f7748fc8c5b:   js     Stub::multiplyToLen+440 0x00007f7748fc8c98
  0x00007f7748fc8c61:   mov    (%rsi,%r12,4),%rax
  0x00007f7748fc8c65:   rorx   $0x20,%rax,%rax
  0x00007f7748fc8c6b:   mulx   %rax,%r14,%r15
  0x00007f7748fc8c70:   mov    (%r8,%r12,4),%r13
  0x00007f7748fc8c74:   rorx   $0x20,%r13,%r13
  0x00007f7748fc8c7a:   add    %rbx,%r14
  0x00007f7748fc8c7d:   adc    $0x0,%r15
  0x00007f7748fc8c81:   add    %r13,%r14
  0x00007f7748fc8c84:   adc    $0x0,%r15
  0x00007f7748fc8c88:   mov    %r14d,0x4(%r8,%r12,4)
  0x00007f7748fc8c8d:   shr    $0x20,%r14
  0x00007f7748fc8c91:   mov    %r14d,(%r8,%r12,4)
  0x00007f7748fc8c95:   mov    %r15,%rbx
  0x00007f7748fc8c98:   add    $0x2,%r12d
  0x00007f7748fc8c9c:   and    $0x1,%r12d
  0x00007f7748fc8ca0:   sub    $0x1,%r12d
  0x00007f7748fc8ca4:   js     Stub::multiplyToLen+503 0x00007f7748fc8cd7
  0x00007f7748fc8caa:   mov    (%rsi,%r12,4),%r15d
  0x00007f7748fc8cae:   mulx   %r15,%r14,%rdi
  0x00007f7748fc8cb3:   mov    (%r8,%r12,4),%r15d
  0x00007f7748fc8cb7:   add    %r15,%r14
  0x00007f7748fc8cba:   adc    $0x0,%rdi
  0x00007f7748fc8cbe:   add    %rbx,%r14
  0x00007f7748fc8cc1:   adc    $0x0,%rdi
  0x00007f7748fc8cc5:   mov    %r14d,(%r8,%r12,4)
  0x00007f7748fc8cc9:   shr    $0x20,%r14
  0x00007f7748fc8ccd:   shl    $0x20,%rdi
  0x00007f7748fc8cd1:   or     %rdi,%r14
  0x00007f7748fc8cd4:   mov    %r14,%rbx
  0x00007f7748fc8cd7:   pop    %rcx
  0x00007f7748fc8cd8:   pop    %rax
  0x00007f7748fc8cd9:   pop    %rdi
  0x00007f7748fc8cda:   pop    %r8
  0x00007f7748fc8cdc:   mov    %eax,%r14d
  0x00007f7748fc8cdf:   add    $0x1,%r14d
  0x00007f7748fc8ce3:   mov    %ebx,(%r8,%r14,4)
  0x00007f7748fc8ce7:   sub    $0x1,%r14d
  0x00007f7748fc8ceb:   js     Stub::multiplyToLen+545 0x00007f7748fc8d01
  0x00007f7748fc8ced:   shr    $0x20,%rbx
  0x00007f7748fc8cf1:   mov    %ebx,(%r8,%r14,4)
  0x00007f7748fc8cf5:   jmpq   Stub::multiplyToLen+169 0x00007f7748fc8b89
  0x00007f7748fc8cfa:   mov    (%rdi),%edx
  0x00007f7748fc8cfc:   jmpq   Stub::multiplyToLen+211 0x00007f7748fc8bb3
  0x00007f7748fc8d01:   pop    %r11
  0x00007f7748fc8d03:   pop    %rax
  0x00007f7748fc8d04:   pop    %rbx
  0x00007f7748fc8d05:   pop    %r15
  0x00007f7748fc8d07:   pop    %r14
  0x00007f7748fc8d09:   pop    %r13
  0x00007f7748fc8d0b:   pop    %r12
  0x00007f7748fc8d0d:   leaveq 
  0x00007f7748fc8d0e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::squareToLen [0x00007f7748fc8d20, 0x00007f7748fc8e3f] (287 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8d20:   push   %rbp
  0x00007f7748fc8d21:   mov    %rsp,%rbp
  0x00007f7748fc8d24:   mov    %rdx,%r8
  0x00007f7748fc8d27:   push   %r12
  0x00007f7748fc8d29:   push   %r13
  0x00007f7748fc8d2b:   push   %r14
  0x00007f7748fc8d2d:   push   %r15
  0x00007f7748fc8d2f:   push   %rbx
  0x00007f7748fc8d30:   xor    %rbx,%rbx
  0x00007f7748fc8d33:   xor    %rdx,%rdx
  0x00007f7748fc8d36:   xor    %r12d,%r12d
  0x00007f7748fc8d39:   xor    %r15d,%r15d
  0x00007f7748fc8d3c:   test   $0x1,%sil
  0x00007f7748fc8d40:   je     Stub::squareToLen+60 0x00007f7748fc8d5c
  0x00007f7748fc8d42:   mov    (%rdi,%r12,4),%eax
  0x00007f7748fc8d46:   imul   %rax,%rax
  0x00007f7748fc8d4a:   shr    %rax
  0x00007f7748fc8d4d:   adc    $0x0,%rbx
  0x00007f7748fc8d51:   mov    %rax,(%r8,%r15,4)
  0x00007f7748fc8d55:   inc    %r12d
  0x00007f7748fc8d58:   add    $0x2,%r15d
  0x00007f7748fc8d5c:   cmp    %rsi,%r12
  0x00007f7748fc8d5f:   je     Stub::squareToLen+108 0x00007f7748fc8d8c
  0x00007f7748fc8d61:   mov    (%rdi,%r12,4),%rax
  0x00007f7748fc8d65:   ror    $0x20,%rax
  0x00007f7748fc8d69:   mul    %rax
  0x00007f7748fc8d6c:   shr    %rbx
  0x00007f7748fc8d6f:   rcr    %rdx
  0x00007f7748fc8d72:   rcr    %rax
  0x00007f7748fc8d75:   adc    $0x0,%rbx
  0x00007f7748fc8d79:   mov    %rdx,(%r8,%r15,4)
  0x00007f7748fc8d7d:   mov    %rax,0x8(%r8,%r15,4)
  0x00007f7748fc8d82:   add    $0x2,%r12d
  0x00007f7748fc8d86:   add    $0x4,%r15d
  0x00007f7748fc8d8a:   jmp    Stub::squareToLen+60 0x00007f7748fc8d5c
  0x00007f7748fc8d8c:   push   %rcx
  0x00007f7748fc8d8d:   push   %rsi
  0x00007f7748fc8d8e:   add    $0x2,%ecx
  0x00007f7748fc8d91:   xor    %rbx,%rbx
  0x00007f7748fc8d94:   sub    $0x4,%ecx
  0x00007f7748fc8d97:   sub    $0x2,%esi
  0x00007f7748fc8d9a:   push   %rcx
  0x00007f7748fc8d9b:   push   %rsi
  0x00007f7748fc8d9c:   cmp    $0x0,%esi
  0x00007f7748fc8d9f:   jle    Stub::squareToLen+225 0x00007f7748fc8e01
  0x00007f7748fc8da1:   mov    (%rdi,%rsi,4),%rdx
  0x00007f7748fc8da5:   rorx   $0x20,%rdx,%rdx
  0x00007f7748fc8dab:   dec    %esi
  0x00007f7748fc8dad:   js     Stub::squareToLen+190 0x00007f7748fc8dde
  0x00007f7748fc8daf:   dec    %esi
  0x00007f7748fc8db1:   js     Stub::squareToLen+220 0x00007f7748fc8dfc
  0x00007f7748fc8db3:   mov    (%rdi,%rsi,4),%r15
  0x00007f7748fc8db7:   ror    $0x20,%r15
  0x00007f7748fc8dbb:   sub    $0x2,%ecx
  0x00007f7748fc8dbe:   mov    (%r8,%rcx,4),%r14
  0x00007f7748fc8dc2:   mulx   %r15,%r15,%r13
  0x00007f7748fc8dc7:   add    %rbx,%r14
  0x00007f7748fc8dca:   adc    $0x0,%r13
  0x00007f7748fc8dce:   add    %r15,%r14
  0x00007f7748fc8dd1:   adc    $0x0,%r13
  0x00007f7748fc8dd5:   mov    %r13,%rbx
  0x00007f7748fc8dd8:   mov    %r14,(%r8,%rcx,4)
  0x00007f7748fc8ddc:   jmp    Stub::squareToLen+139 0x00007f7748fc8dab
  0x00007f7748fc8dde:   mov    $0x1,%r12d
  0x00007f7748fc8de4:   sub    $0x2,%ecx
  0x00007f7748fc8de7:   add    %rbx,(%r8,%rcx,4)
  0x00007f7748fc8deb:   jae    Stub::squareToLen+216 0x00007f7748fc8df8
  0x00007f7748fc8ded:   sub    $0x2,%ecx
  0x00007f7748fc8df0:   js     Stub::squareToLen+216 0x00007f7748fc8df8
  0x00007f7748fc8df2:   add    %r12,(%r8,%rcx,4)
  0x00007f7748fc8df6:   jmp    Stub::squareToLen+203 0x00007f7748fc8deb
  0x00007f7748fc8df8:   pop    %rsi
  0x00007f7748fc8df9:   pop    %rcx
  0x00007f7748fc8dfa:   jmp    Stub::squareToLen+113 0x00007f7748fc8d91
  0x00007f7748fc8dfc:   mov    (%rdi),%r15d
  0x00007f7748fc8dff:   jmp    Stub::squareToLen+155 0x00007f7748fc8dbb
  0x00007f7748fc8e01:   pop    %rsi
  0x00007f7748fc8e02:   pop    %rcx
  0x00007f7748fc8e03:   pop    %rsi
  0x00007f7748fc8e04:   pop    %rcx
  0x00007f7748fc8e05:   mov    %ecx,%r14d
  0x00007f7748fc8e08:   xor    %r12d,%r12d
  0x00007f7748fc8e0b:   dec    %r14d
  0x00007f7748fc8e0e:   dec    %r14d
  0x00007f7748fc8e11:   js     Stub::squareToLen+262 0x00007f7748fc8e26
  0x00007f7748fc8e13:   mov    (%r8,%r14,4),%r13
  0x00007f7748fc8e17:   rcl    %r13
  0x00007f7748fc8e1a:   rorx   $0x20,%r13,%r13
  0x00007f7748fc8e20:   mov    %r13,(%r8,%r14,4)
  0x00007f7748fc8e24:   jmp    Stub::squareToLen+235 0x00007f7748fc8e0b
  0x00007f7748fc8e26:   mov    -0x4(%rdi,%rsi,4),%r14d
  0x00007f7748fc8e2b:   and    $0x1,%r14d
  0x00007f7748fc8e2f:   or     %r14d,-0x4(%r8,%rcx,4)
  0x00007f7748fc8e34:   pop    %rbx
  0x00007f7748fc8e35:   pop    %r15
  0x00007f7748fc8e37:   pop    %r14
  0x00007f7748fc8e39:   pop    %r13
  0x00007f7748fc8e3b:   pop    %r12
  0x00007f7748fc8e3d:   leaveq 
  0x00007f7748fc8e3e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::mulAdd [0x00007f7748fc8e40, 0x00007f7748fc8f37] (247 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8e40:   push   %rbp
  0x00007f7748fc8e41:   mov    %rsp,%rbp
  0x00007f7748fc8e44:   mov    %rdx,%r11
  0x00007f7748fc8e47:   push   %r12
  0x00007f7748fc8e49:   push   %r13
  0x00007f7748fc8e4b:   push   %r14
  0x00007f7748fc8e4d:   push   %r15
  0x00007f7748fc8e4f:   push   %rbx
  0x00007f7748fc8e50:   mov    %r8d,%edx
  0x00007f7748fc8e53:   xor    %rbx,%rbx
  0x00007f7748fc8e56:   mov    %ecx,%r12d
  0x00007f7748fc8e59:   shr    $0x2,%r12d
  0x00007f7748fc8e5d:   sub    $0x1,%r12d
  0x00007f7748fc8e61:   js     Stub::mulAdd+139 0x00007f7748fc8ecb
  0x00007f7748fc8e63:   sub    $0x4,%ecx
  0x00007f7748fc8e66:   sub    $0x4,%r11d
  0x00007f7748fc8e6a:   mov    0x8(%rsi,%rcx,4),%r15
  0x00007f7748fc8e6f:   ror    $0x20,%r15
  0x00007f7748fc8e73:   mov    0x8(%rdi,%r11,4),%r14
  0x00007f7748fc8e78:   ror    $0x20,%r14
  0x00007f7748fc8e7c:   mulx   %r15,%r15,%rax
  0x00007f7748fc8e81:   add    %rbx,%r14
  0x00007f7748fc8e84:   adc    $0x0,%rax
  0x00007f7748fc8e88:   add    %r15,%r14
  0x00007f7748fc8e8b:   adc    $0x0,%rax
  0x00007f7748fc8e8f:   mov    %rax,%rbx
  0x00007f7748fc8e92:   ror    $0x20,%r14
  0x00007f7748fc8e96:   mov    %r14,0x8(%rdi,%r11,4)
  0x00007f7748fc8e9b:   mov    (%rsi,%rcx,4),%r15
  0x00007f7748fc8e9f:   ror    $0x20,%r15
  0x00007f7748fc8ea3:   mov    (%rdi,%r11,4),%r14
  0x00007f7748fc8ea7:   ror    $0x20,%r14
  0x00007f7748fc8eab:   mulx   %r15,%r15,%rax
  0x00007f7748fc8eb0:   add    %rbx,%r14
  0x00007f7748fc8eb3:   adc    $0x0,%rax
  0x00007f7748fc8eb7:   add    %r15,%r14
  0x00007f7748fc8eba:   adc    $0x0,%rax
  0x00007f7748fc8ebe:   mov    %rax,%rbx
  0x00007f7748fc8ec1:   ror    $0x20,%r14
  0x00007f7748fc8ec5:   mov    %r14,(%rdi,%r11,4)
  0x00007f7748fc8ec9:   jmp    Stub::mulAdd+29 0x00007f7748fc8e5d
  0x00007f7748fc8ecb:   dec    %ecx
  0x00007f7748fc8ecd:   js     Stub::mulAdd+234 0x00007f7748fc8f2a
  0x00007f7748fc8ecf:   dec    %ecx
  0x00007f7748fc8ed1:   js     Stub::mulAdd+201 0x00007f7748fc8f09
  0x00007f7748fc8ed3:   mov    (%rsi,%rcx,4),%r15
  0x00007f7748fc8ed7:   ror    $0x20,%r15
  0x00007f7748fc8edb:   sub    $0x2,%r11d
  0x00007f7748fc8edf:   mov    (%rdi,%r11,4),%r14
  0x00007f7748fc8ee3:   ror    $0x20,%r14
  0x00007f7748fc8ee7:   mulx   %r15,%r15,%rax
  0x00007f7748fc8eec:   add    %rbx,%r14
  0x00007f7748fc8eef:   adc    $0x0,%rax
  0x00007f7748fc8ef3:   add    %r15,%r14
  0x00007f7748fc8ef6:   adc    $0x0,%rax
  0x00007f7748fc8efa:   mov    %rax,%rbx
  0x00007f7748fc8efd:   ror    $0x20,%r14
  0x00007f7748fc8f01:   mov    %r14,(%rdi,%r11,4)
  0x00007f7748fc8f05:   test   %ecx,%ecx
  0x00007f7748fc8f07:   je     Stub::mulAdd+234 0x00007f7748fc8f2a
  0x00007f7748fc8f09:   mov    (%rsi),%r15d
  0x00007f7748fc8f0c:   mov    -0x4(%rdi,%r11,4),%r14d
  0x00007f7748fc8f11:   mov    %r8d,%eax
  0x00007f7748fc8f14:   mul    %r15d
  0x00007f7748fc8f17:   add    %ebx,%r14d
  0x00007f7748fc8f1a:   adc    $0x0,%edx
  0x00007f7748fc8f1d:   add    %eax,%r14d
  0x00007f7748fc8f20:   adc    $0x0,%edx
  0x00007f7748fc8f23:   mov    %edx,%ebx
  0x00007f7748fc8f25:   mov    %r14d,-0x4(%rdi,%r11,4)
  0x00007f7748fc8f2a:   mov    %ebx,%eax
  0x00007f7748fc8f2c:   pop    %rbx
  0x00007f7748fc8f2d:   pop    %r15
  0x00007f7748fc8f2f:   pop    %r14
  0x00007f7748fc8f31:   pop    %r13
  0x00007f7748fc8f33:   pop    %r12
  0x00007f7748fc8f35:   leaveq 
  0x00007f7748fc8f36:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vectorizedMismatch [0x00007f7748fc8f40, 0x00007f7748fc90d4] (404 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fc8f40:   push   %rbp
  0x00007f7748fc8f41:   mov    %rsp,%rbp
  0x00007f7748fc8f44:   shl    %cl,%rdx
  0x00007f7748fc8f47:   xor    %rax,%rax
  0x00007f7748fc8f4a:   cmp    $0x8,%rdx
  0x00007f7748fc8f4e:   je     Stub::vectorizedMismatch+148 0x00007f7748fc8fd4
  0x00007f7748fc8f54:   jl     Stub::vectorizedMismatch+182 0x00007f7748fc8ff6
  0x00007f7748fc8f5a:   cmp    $0x10,%rdx
  0x00007f7748fc8f5e:   je     Stub::vectorizedMismatch+103 0x00007f7748fc8fa7
  0x00007f7748fc8f64:   jl     Stub::vectorizedMismatch+148 0x00007f7748fc8fd4
  0x00007f7748fc8f6a:   cmp    $0x20,%rdx
  0x00007f7748fc8f6e:   jl     Stub::vectorizedMismatch+97 0x00007f7748fc8fa1
  0x00007f7748fc8f70:   sub    $0x20,%rdx
  0x00007f7748fc8f74:   vmovdqu (%rdi,%rax,1),%ymm0
  0x00007f7748fc8f79:   vmovdqu (%rsi,%rax,1),%ymm1
  0x00007f7748fc8f7e:   vpxor  %ymm1,%ymm0,%ymm2
  0x00007f7748fc8f82:   vptest %ymm2,%ymm2
  0x00007f7748fc8f87:   jne    Stub::vectorizedMismatch+314 0x00007f7748fc907a
  0x00007f7748fc8f8d:   add    $0x20,%rax
  0x00007f7748fc8f91:   sub    $0x20,%rdx
  0x00007f7748fc8f95:   jge    Stub::vectorizedMismatch+52 0x00007f7748fc8f74
  0x00007f7748fc8f97:   add    $0x20,%rdx
  0x00007f7748fc8f9b:   je     Stub::vectorizedMismatch+389 0x00007f7748fc90c5
  0x00007f7748fc8fa1:   cmp    $0x10,%rdx
  0x00007f7748fc8fa5:   jl     Stub::vectorizedMismatch+142 0x00007f7748fc8fce
  0x00007f7748fc8fa7:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f7748fc8fac:   vmovdqu (%rsi,%rax,1),%xmm1
  0x00007f7748fc8fb1:   vpxor  %xmm1,%xmm0,%xmm2
  0x00007f7748fc8fb5:   vptest %xmm2,%xmm2
  0x00007f7748fc8fba:   jne    Stub::vectorizedMismatch+345 0x00007f7748fc9099
  0x00007f7748fc8fc0:   add    $0x10,%rax
  0x00007f7748fc8fc4:   sub    $0x10,%rdx
  0x00007f7748fc8fc8:   je     Stub::vectorizedMismatch+389 0x00007f7748fc90c5
  0x00007f7748fc8fce:   cmp    $0x8,%rdx
  0x00007f7748fc8fd2:   jl     Stub::vectorizedMismatch+182 0x00007f7748fc8ff6
  0x00007f7748fc8fd4:   mov    (%rdi,%rax,1),%r8
  0x00007f7748fc8fd8:   mov    (%rsi,%rax,1),%r9
  0x00007f7748fc8fdc:   xor    %r9,%r8
  0x00007f7748fc8fdf:   test   %r8,%r8
  0x00007f7748fc8fe2:   jne    Stub::vectorizedMismatch+373 0x00007f7748fc90b5
  0x00007f7748fc8fe8:   add    $0x8,%rax
  0x00007f7748fc8fec:   sub    $0x8,%rdx
  0x00007f7748fc8ff0:   je     Stub::vectorizedMismatch+389 0x00007f7748fc90c5
  0x00007f7748fc8ff6:   cmp    $0x4,%rdx
  0x00007f7748fc8ffa:   jl     Stub::vectorizedMismatch+219 0x00007f7748fc901b
  0x00007f7748fc8ffc:   mov    (%rdi,%rax,1),%r8d
  0x00007f7748fc9000:   xor    (%rsi,%rax,1),%r8d
  0x00007f7748fc9004:   test   %r8d,%r8d
  0x00007f7748fc9007:   jne    Stub::vectorizedMismatch+373 0x00007f7748fc90b5
  0x00007f7748fc900d:   add    $0x4,%rax
  0x00007f7748fc9011:   sub    $0x4,%rdx
  0x00007f7748fc9015:   je     Stub::vectorizedMismatch+389 0x00007f7748fc90c5
  0x00007f7748fc901b:   movzbl (%rdi,%rax,1),%r8d
  0x00007f7748fc9020:   movzbl (%rsi,%rax,1),%r9d
  0x00007f7748fc9025:   xor    %r9d,%r8d
  0x00007f7748fc9028:   test   %r8d,%r8d
  0x00007f7748fc902b:   jne    Stub::vectorizedMismatch+384 0x00007f7748fc90c0
  0x00007f7748fc9031:   dec    %rdx
  0x00007f7748fc9034:   je     Stub::vectorizedMismatch+389 0x00007f7748fc90c5
  0x00007f7748fc903a:   inc    %rax
  0x00007f7748fc903d:   movzbl (%rdi,%rax,1),%r8d
  0x00007f7748fc9042:   movzbl (%rsi,%rax,1),%r9d
  0x00007f7748fc9047:   xor    %r9d,%r8d
  0x00007f7748fc904a:   test   %r8d,%r8d
  0x00007f7748fc904d:   jne    Stub::vectorizedMismatch+384 0x00007f7748fc90c0
  0x00007f7748fc9053:   dec    %rdx
  0x00007f7748fc9056:   je     Stub::vectorizedMismatch+389 0x00007f7748fc90c5
  0x00007f7748fc905c:   inc    %rax
  0x00007f7748fc905f:   movzbl (%rdi,%rax,1),%r8d
  0x00007f7748fc9064:   movzbl (%rsi,%rax,1),%r9d
  0x00007f7748fc9069:   xor    %r9d,%r8d
  0x00007f7748fc906c:   test   %r8d,%r8d
  0x00007f7748fc906f:   jne    Stub::vectorizedMismatch+384 0x00007f7748fc90c0
  0x00007f7748fc9075:   jmpq   Stub::vectorizedMismatch+389 0x00007f7748fc90c5
  0x00007f7748fc907a:   vpcmpeqb %ymm2,%ymm2,%ymm2
  0x00007f7748fc907e:   vpcmpeqb %ymm1,%ymm0,%ymm0
  0x00007f7748fc9082:   vpxor  %ymm2,%ymm0,%ymm0
  0x00007f7748fc9086:   vpmovmskb %ymm0,%r8d
  0x00007f7748fc908a:   bsf    %r8,%r8
  0x00007f7748fc908e:   add    %r8,%rax
  0x00007f7748fc9091:   shr    %cl,%rax
  0x00007f7748fc9094:   jmpq   Stub::vectorizedMismatch+399 0x00007f7748fc90cf
  0x00007f7748fc9099:   vpcmpeqb %xmm2,%xmm2,%xmm2
  0x00007f7748fc909d:   vpcmpeqb %xmm1,%xmm0,%xmm0
  0x00007f7748fc90a1:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007f7748fc90a5:   vpmovmskb %xmm0,%r8d
  0x00007f7748fc90a9:   bsf    %r8,%r8
  0x00007f7748fc90ad:   add    %r8,%rax
  0x00007f7748fc90b0:   shr    %cl,%rax
  0x00007f7748fc90b3:   jmp    Stub::vectorizedMismatch+399 0x00007f7748fc90cf
  0x00007f7748fc90b5:   bsf    %r8,%r8
  0x00007f7748fc90b9:   shr    $0x3,%r8
  0x00007f7748fc90bd:   add    %r8,%rax
  0x00007f7748fc90c0:   shr    %cl,%rax
  0x00007f7748fc90c3:   jmp    Stub::vectorizedMismatch+399 0x00007f7748fc90cf
  0x00007f7748fc90c5:   movabs $0xffffffffffffffff,%rax
  0x00007f7748fc90cf:   vzeroupper 
  0x00007f7748fc90d2:   leaveq 
  0x00007f7748fc90d3:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_invokeGeneric [0x00007f7748fbd500, 0x00007f7748fbd501] (1 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbd500:   hlt    
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_invokeBasic [0x00007f7748fbd501, 0x00007f7748fbd556] (85 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbd501:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fbd50c:   data16 data16 xchg %ax,%ax
  0x00007f7748fbd510:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fbd51b:   data16 data16 xchg %ax,%ax
  0x00007f7748fbd51f:   nop
  0x00007f7748fbd520:   mov    0x8(%rbx),%rdx
  0x00007f7748fbd524:   movzwl 0x2c(%rdx),%edx
  0x00007f7748fbd528:   mov    (%rsp,%rdx,8),%rcx
  0x00007f7748fbd52c:   mov    0x14(%rcx),%ebx
  0x00007f7748fbd52f:   shl    $0x3,%rbx
  0x00007f7748fbd533:   mov    0x28(%rbx),%ebx
  0x00007f7748fbd536:   shl    $0x3,%rbx
  0x00007f7748fbd53a:   mov    0x24(%rbx),%ebx
  0x00007f7748fbd53d:   shl    $0x3,%rbx
  0x00007f7748fbd541:   mov    0x10(%rbx),%rbx
  0x00007f7748fbd545:   test   %rbx,%rbx
  0x00007f7748fbd548:   je     0x00007f7748fbd551
  0x00007f7748fbd54e:   jmpq   *0x50(%rbx)
  0x00007f7748fbd551:   jmpq   0x00007f7748fbec00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToVirtual [0x00007f7748fbd556, 0x00007f7748fbd59d] (71 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbd556:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fbd560:   mov    0x8(%rbx),%rdx
  0x00007f7748fbd564:   movzwl 0x2c(%rdx),%edx
  0x00007f7748fbd568:   mov    (%rsp,%rdx,8),%rcx
  0x00007f7748fbd56c:   pop    %rax
  0x00007f7748fbd56d:   pop    %rbx
  0x00007f7748fbd56e:   push   %rax
  0x00007f7748fbd56f:   mov    0x8(%rcx),%r10d
  0x00007f7748fbd573:   movabs $0x800000000,%r11
  0x00007f7748fbd57d:   add    %r11,%r10
  0x00007f7748fbd580:   mov    0x10(%rbx),%r11
  0x00007f7748fbd584:   mov    0x1c0(%r10,%r11,8),%rbx
  0x00007f7748fbd58c:   test   %rbx,%rbx
  0x00007f7748fbd58f:   je     0x00007f7748fbd598
  0x00007f7748fbd595:   jmpq   *0x50(%rbx)
  0x00007f7748fbd598:   jmpq   0x00007f7748fbec00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToStatic [0x00007f7748fbd59d, 0x00007f7748fbd5bf] (34 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbd59d:   data16 xchg %ax,%ax
  0x00007f7748fbd5a0:   pop    %rax
  0x00007f7748fbd5a1:   pop    %rbx
  0x00007f7748fbd5a2:   push   %rax
  0x00007f7748fbd5a3:   mov    0x24(%rbx),%ebx
  0x00007f7748fbd5a6:   shl    $0x3,%rbx
  0x00007f7748fbd5aa:   mov    0x10(%rbx),%rbx
  0x00007f7748fbd5ae:   test   %rbx,%rbx
  0x00007f7748fbd5b1:   je     0x00007f7748fbd5ba
  0x00007f7748fbd5b7:   jmpq   *0x50(%rbx)
  0x00007f7748fbd5ba:   jmpq   0x00007f7748fbec00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToSpecial [0x00007f7748fbd5bf, 0x00007f7748fbd5ee] (47 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbd5bf:   nop
  0x00007f7748fbd5c0:   mov    0x8(%rbx),%rdx
  0x00007f7748fbd5c4:   movzwl 0x2c(%rdx),%edx
  0x00007f7748fbd5c8:   mov    (%rsp,%rdx,8),%rcx
  0x00007f7748fbd5cc:   pop    %rax
  0x00007f7748fbd5cd:   pop    %rbx
  0x00007f7748fbd5ce:   push   %rax
  0x00007f7748fbd5cf:   cmp    (%rcx),%rax
  0x00007f7748fbd5d2:   mov    0x24(%rbx),%ebx
  0x00007f7748fbd5d5:   shl    $0x3,%rbx
  0x00007f7748fbd5d9:   mov    0x10(%rbx),%rbx
  0x00007f7748fbd5dd:   test   %rbx,%rbx
  0x00007f7748fbd5e0:   je     0x00007f7748fbd5e9
  0x00007f7748fbd5e6:   jmpq   *0x50(%rbx)
  0x00007f7748fbd5e9:   jmpq   0x00007f7748fbec00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToInterface [0x00007f7748fbd5ee, 0x00007f7748fbd67d] (143 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbd5ee:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f7748fbd5f9:   data16 data16 xchg %ax,%ax
  0x00007f7748fbd5fd:   data16 xchg %ax,%ax
  0x00007f7748fbd600:   mov    0x8(%rbx),%rdx
  0x00007f7748fbd604:   movzwl 0x2c(%rdx),%edx
  0x00007f7748fbd608:   mov    (%rsp,%rdx,8),%rcx
  0x00007f7748fbd60c:   pop    %rax
  0x00007f7748fbd60d:   pop    %rbx
  0x00007f7748fbd60e:   push   %rax
  0x00007f7748fbd60f:   mov    0x8(%rcx),%r10d
  0x00007f7748fbd613:   movabs $0x800000000,%r11
  0x00007f7748fbd61d:   add    %r11,%r10
  0x00007f7748fbd620:   mov    0x18(%rbx),%eax
  0x00007f7748fbd623:   shl    $0x3,%rax
  0x00007f7748fbd627:   mov    0x10(%rax),%rax
  0x00007f7748fbd62b:   mov    0x10(%rbx),%rbx
  0x00007f7748fbd62f:   mov    0xa0(%r10),%r11d
  0x00007f7748fbd636:   lea    0x1c0(%r10,%r11,8),%r11
  0x00007f7748fbd63e:   lea    (%r10,%rbx,8),%r10
  0x00007f7748fbd642:   mov    (%r11),%rbx
  0x00007f7748fbd645:   cmp    %rbx,%rax
  0x00007f7748fbd648:   je     0x00007f7748fbd65f
  0x00007f7748fbd64a:   test   %rbx,%rbx
  0x00007f7748fbd64d:   je     0x00007f7748fbd678
  0x00007f7748fbd653:   add    $0x10,%r11
  0x00007f7748fbd657:   mov    (%r11),%rbx
  0x00007f7748fbd65a:   cmp    %rbx,%rax
  0x00007f7748fbd65d:   jne    0x00007f7748fbd64a
  0x00007f7748fbd65f:   mov    0x8(%r11),%r11d
  0x00007f7748fbd663:   mov    (%r10,%r11,1),%rbx
  0x00007f7748fbd667:   test   %rbx,%rbx
  0x00007f7748fbd66a:   je     0x00007f7748fbd673
  0x00007f7748fbd670:   jmpq   *0x50(%rbx)
  0x00007f7748fbd673:   jmpq   0x00007f7748fbec00
  0x00007f7748fbd678:   jmpq   0x00007f7748fbe900
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToNative [0x00007f7748fbd67d, 0x00007f7748fbd67e] (1 bytes)
--------------------------------------------------------------------------------
  0x00007f7748fbd67d:   hlt    
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding ExceptionBlob 0x00007f774900e910
--------------------------------------------------------------------------------
  0x00007f774900e980:   push   %rdx
  0x00007f774900e981:   sub    $0x8,%rsp
  0x00007f774900e985:   mov    %rbp,(%rsp)
  0x00007f774900e989:   mov    %rax,0x428(%r15)
  0x00007f774900e990:   mov    %rdx,0x430(%r15)
  0x00007f774900e997:   vzeroupper 
  0x00007f774900e99a:   movabs $0x7f774900e997,%r10
  0x00007f774900e9a4:   mov    %r10,0x2c8(%r15)
  0x00007f774900e9ab:   mov    %rsp,0x2c0(%r15)
  0x00007f774900e9b2:   mov    %r15,%rdi
  0x00007f774900e9b5:   and    $0xfffffffffffffff0,%rsp
  0x00007f774900e9b9:   callq  0x00007f774cfac550 = OptoRuntime::handle_exception_C(JavaThread*)
  0x00007f774900e9be:   movq   $0x0,0x2c0(%r15)
  0x00007f774900e9c9:   movq   $0x0,0x2c8(%r15)
  0x00007f774900e9d4:   vzeroupper 
  0x00007f774900e9d7:   mov    (%rsp),%rbp
  0x00007f774900e9db:   add    $0x8,%rsp
  0x00007f774900e9df:   pop    %rdx
  0x00007f774900e9e0:   mov    %rax,%r8
  0x00007f774900e9e3:   mov    0x428(%r15),%rax
  0x00007f774900e9ea:   mov    0x430(%r15),%rdx
  0x00007f774900e9f1:   movq   $0x0,0x428(%r15)
  0x00007f774900e9fc:   jmpq   *%r8
  0x00007f774900e9ff:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 23 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_instance_Java 0x00007f7749015010
--------------------------------------------------------------------------------
  0x00007f7749015080:   sub    $0x8,%rsp
  0x00007f7749015087:   mov    %rbp,(%rsp)
  0x00007f774901508b:   mov    %rsp,0x2c0(%r15)
  0x00007f7749015092:   mov    %rsi,%rdi
  0x00007f7749015095:   mov    %r15,%rsi
  0x00007f7749015098:   nopl   0x0(%rax,%rax,1)
  0x00007f77490150a0:   movabs $0x7f774cfaa020,%r10
  0x00007f77490150aa:   callq  *%r10
  0x00007f77490150ad:   mov    %r12,0x2c0(%r15)
  0x00007f77490150b4:   mov    %r12,0x2c8(%r15)
  0x00007f77490150bb:   mov    0x318(%r15),%rax
  0x00007f77490150c2:   mov    %r12,0x318(%r15)
  0x00007f77490150c9:   cmp    0x8(%r15),%r12
  0x00007f77490150cd:   jne    0x00007f77490150d1
  0x00007f77490150cf:   pop    %rbp
  0x00007f77490150d0:   retq   
  0x00007f77490150d1:   xor    %ebx,%ebx
  0x00007f77490150d3:   movabs $0x7f7748f7fc00,%r10
  0x00007f77490150dd:   pop    %rbp
  0x00007f77490150de:   jmpq   *%r10
  0x00007f77490150e1:   hlt    
  0x00007f77490150e2:   hlt    
  0x00007f77490150e3:   hlt    
  0x00007f77490150e4:   hlt    
  0x00007f77490150e5:   hlt    
  0x00007f77490150e6:   hlt    
  0x00007f77490150e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_array_Java 0x00007f7749016610
--------------------------------------------------------------------------------
  0x00007f7749016680:   sub    $0x8,%rsp
  0x00007f7749016687:   mov    %rbp,(%rsp)
  0x00007f774901668b:   mov    %rsp,0x2c0(%r15)
  0x00007f7749016692:   mov    %rsi,%rdi
  0x00007f7749016695:   mov    %edx,%esi
  0x00007f7749016697:   mov    %r15,%rdx
  0x00007f774901669a:   nopw   0x0(%rax,%rax,1)
  0x00007f77490166a0:   movabs $0x7f774cfaa240,%r10
  0x00007f77490166aa:   callq  *%r10
  0x00007f77490166ad:   mov    %r12,0x2c0(%r15)
  0x00007f77490166b4:   mov    %r12,0x2c8(%r15)
  0x00007f77490166bb:   mov    0x318(%r15),%rax
  0x00007f77490166c2:   mov    %r12,0x318(%r15)
  0x00007f77490166c9:   cmp    0x8(%r15),%r12
  0x00007f77490166cd:   jne    0x00007f77490166d1
  0x00007f77490166cf:   pop    %rbp
  0x00007f77490166d0:   retq   
  0x00007f77490166d1:   xor    %ebx,%ebx
  0x00007f77490166d3:   movabs $0x7f7748f7fc00,%r10
  0x00007f77490166dd:   pop    %rbp
  0x00007f77490166de:   jmpq   *%r10
  0x00007f77490166e1:   hlt    
  0x00007f77490166e2:   hlt    
  0x00007f77490166e3:   hlt    
  0x00007f77490166e4:   hlt    
  0x00007f77490166e5:   hlt    
  0x00007f77490166e6:   hlt    
  0x00007f77490166e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_array_nozero_Java 0x00007f7749019f10
--------------------------------------------------------------------------------
  0x00007f7749019f80:   sub    $0x8,%rsp
  0x00007f7749019f87:   mov    %rbp,(%rsp)
  0x00007f7749019f8b:   mov    %rsp,0x2c0(%r15)
  0x00007f7749019f92:   mov    %rsi,%rdi
  0x00007f7749019f95:   mov    %edx,%esi
  0x00007f7749019f97:   mov    %r15,%rdx
  0x00007f7749019f9a:   nopw   0x0(%rax,%rax,1)
  0x00007f7749019fa0:   movabs $0x7f774cfab110,%r10
  0x00007f7749019faa:   callq  *%r10
  0x00007f7749019fad:   mov    %r12,0x2c0(%r15)
  0x00007f7749019fb4:   mov    %r12,0x2c8(%r15)
  0x00007f7749019fbb:   mov    0x318(%r15),%rax
  0x00007f7749019fc2:   mov    %r12,0x318(%r15)
  0x00007f7749019fc9:   cmp    0x8(%r15),%r12
  0x00007f7749019fcd:   jne    0x00007f7749019fd1
  0x00007f7749019fcf:   pop    %rbp
  0x00007f7749019fd0:   retq   
  0x00007f7749019fd1:   xor    %ebx,%ebx
  0x00007f7749019fd3:   movabs $0x7f7748f7fc00,%r10
  0x00007f7749019fdd:   pop    %rbp
  0x00007f7749019fde:   jmpq   *%r10
  0x00007f7749019fe1:   hlt    
  0x00007f7749019fe2:   hlt    
  0x00007f7749019fe3:   hlt    
  0x00007f7749019fe4:   hlt    
  0x00007f7749019fe5:   hlt    
  0x00007f7749019fe6:   hlt    
  0x00007f7749019fe7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray2_Java 0x00007f774901a210
--------------------------------------------------------------------------------
  0x00007f774901a280:   sub    $0x8,%rsp
  0x00007f774901a287:   mov    %rbp,(%rsp)
  0x00007f774901a28b:   mov    %rsp,0x2c0(%r15)
  0x00007f774901a292:   mov    %rsi,%rdi
  0x00007f774901a295:   mov    %edx,%esi
  0x00007f774901a297:   mov    %ecx,%edx
  0x00007f774901a299:   mov    %r15,%rcx
  0x00007f774901a29c:   nopl   0x0(%rax)
  0x00007f774901a2a0:   movabs $0x7f774cfaa3f0,%r10
  0x00007f774901a2aa:   callq  *%r10
  0x00007f774901a2ad:   mov    %r12,0x2c0(%r15)
  0x00007f774901a2b4:   mov    %r12,0x2c8(%r15)
  0x00007f774901a2bb:   mov    0x318(%r15),%rax
  0x00007f774901a2c2:   mov    %r12,0x318(%r15)
  0x00007f774901a2c9:   cmp    0x8(%r15),%r12
  0x00007f774901a2cd:   jne    0x00007f774901a2d1
  0x00007f774901a2cf:   pop    %rbp
  0x00007f774901a2d0:   retq   
  0x00007f774901a2d1:   xor    %ebx,%ebx
  0x00007f774901a2d3:   movabs $0x7f7748f7fc00,%r10
  0x00007f774901a2dd:   pop    %rbp
  0x00007f774901a2de:   jmpq   *%r10
  0x00007f774901a2e1:   hlt    
  0x00007f774901a2e2:   hlt    
  0x00007f774901a2e3:   hlt    
  0x00007f774901a2e4:   hlt    
  0x00007f774901a2e5:   hlt    
  0x00007f774901a2e6:   hlt    
  0x00007f774901a2e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray3_Java 0x00007f774901b290
--------------------------------------------------------------------------------
  0x00007f774901b300:   sub    $0x8,%rsp
  0x00007f774901b307:   mov    %rbp,(%rsp)
  0x00007f774901b30b:   mov    %rsp,0x2c0(%r15)
  0x00007f774901b312:   mov    %rsi,%rdi
  0x00007f774901b315:   mov    %edx,%esi
  0x00007f774901b317:   mov    %ecx,%edx
  0x00007f774901b319:   mov    %r8d,%ecx
  0x00007f774901b31c:   mov    %r15,%r8
  0x00007f774901b31f:   nop
  0x00007f774901b320:   movabs $0x7f774cfaa570,%r10
  0x00007f774901b32a:   callq  *%r10
  0x00007f774901b32d:   mov    %r12,0x2c0(%r15)
  0x00007f774901b334:   mov    %r12,0x2c8(%r15)
  0x00007f774901b33b:   mov    0x318(%r15),%rax
  0x00007f774901b342:   mov    %r12,0x318(%r15)
  0x00007f774901b349:   cmp    0x8(%r15),%r12
  0x00007f774901b34d:   jne    0x00007f774901b351
  0x00007f774901b34f:   pop    %rbp
  0x00007f774901b350:   retq   
  0x00007f774901b351:   xor    %ebx,%ebx
  0x00007f774901b353:   movabs $0x7f7748f7fc00,%r10
  0x00007f774901b35d:   pop    %rbp
  0x00007f774901b35e:   jmpq   *%r10
  0x00007f774901b361:   hlt    
  0x00007f774901b362:   hlt    
  0x00007f774901b363:   hlt    
  0x00007f774901b364:   hlt    
  0x00007f774901b365:   hlt    
  0x00007f774901b366:   hlt    
  0x00007f774901b367:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray4_Java 0x00007f774901d590
--------------------------------------------------------------------------------
  0x00007f774901d600:   sub    $0x8,%rsp
  0x00007f774901d607:   mov    %rbp,(%rsp)
  0x00007f774901d60b:   mov    %rsp,0x2c0(%r15)
  0x00007f774901d612:   mov    %rsi,%rdi
  0x00007f774901d615:   mov    %edx,%esi
  0x00007f774901d617:   mov    %ecx,%edx
  0x00007f774901d619:   mov    %r8d,%ecx
  0x00007f774901d61c:   mov    %r9d,%r8d
  0x00007f774901d61f:   mov    %r15,%r9
  0x00007f774901d622:   movabs $0x7f774cfaa6f0,%r10
  0x00007f774901d62c:   callq  *%r10
  0x00007f774901d62f:   mov    %r12,0x2c0(%r15)
  0x00007f774901d636:   mov    %r12,0x2c8(%r15)
  0x00007f774901d63d:   mov    0x318(%r15),%rax
  0x00007f774901d644:   mov    %r12,0x318(%r15)
  0x00007f774901d64b:   cmp    0x8(%r15),%r12
  0x00007f774901d64f:   jne    0x00007f774901d653
  0x00007f774901d651:   pop    %rbp
  0x00007f774901d652:   retq   
  0x00007f774901d653:   xor    %ebx,%ebx
  0x00007f774901d655:   movabs $0x7f7748f7fc00,%r10
  0x00007f774901d65f:   pop    %rbp
  0x00007f774901d660:   jmpq   *%r10
  0x00007f774901d663:   hlt    
  0x00007f774901d664:   hlt    
  0x00007f774901d665:   hlt    
  0x00007f774901d666:   hlt    
  0x00007f774901d667:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 47 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray5_Java 0x00007f7749012e10
--------------------------------------------------------------------------------
  0x00007f7749012e80:   sub    $0x18,%rsp
  0x00007f7749012e87:   mov    %rbp,0x10(%rsp)
  0x00007f7749012e8c:   mov    %edi,%r10d
  0x00007f7749012e8f:   mov    %rsp,0x2c0(%r15)
  0x00007f7749012e96:   mov    %rsi,%rdi
  0x00007f7749012e99:   mov    %edx,%esi
  0x00007f7749012e9b:   mov    %ecx,%edx
  0x00007f7749012e9d:   mov    %r8d,%ecx
  0x00007f7749012ea0:   mov    %r9d,%r8d
  0x00007f7749012ea3:   mov    %r10d,%r9d
  0x00007f7749012ea6:   mov    %r15,(%rsp)
  0x00007f7749012eaa:   movabs $0x7f774cfaa880,%r10
  0x00007f7749012eb4:   callq  *%r10
  0x00007f7749012eb7:   mov    %r12,0x2c0(%r15)
  0x00007f7749012ebe:   mov    %r12,0x2c8(%r15)
  0x00007f7749012ec5:   mov    0x318(%r15),%rax
  0x00007f7749012ecc:   mov    %r12,0x318(%r15)
  0x00007f7749012ed3:   cmp    0x8(%r15),%r12
  0x00007f7749012ed7:   jne    0x00007f7749012edf
  0x00007f7749012ed9:   add    $0x10,%rsp
  0x00007f7749012edd:   pop    %rbp
  0x00007f7749012ede:   retq   
  0x00007f7749012edf:   xor    %ebx,%ebx
  0x00007f7749012ee1:   movabs $0x7f7748f7fc00,%r10
  0x00007f7749012eeb:   add    $0x10,%rsp
  0x00007f7749012eef:   pop    %rbp
  0x00007f7749012ef0:   jmpq   *%r10
  0x00007f7749012ef3:   hlt    
  0x00007f7749012ef4:   hlt    
  0x00007f7749012ef5:   hlt    
  0x00007f7749012ef6:   hlt    
  0x00007f7749012ef7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 55 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarrayN_Java 0x00007f7749012310
--------------------------------------------------------------------------------
  0x00007f7749012380:   sub    $0x8,%rsp
  0x00007f7749012387:   mov    %rbp,(%rsp)
  0x00007f774901238b:   mov    %rsp,0x2c0(%r15)
  0x00007f7749012392:   mov    %rsi,%rdi
  0x00007f7749012395:   mov    %rdx,%rsi
  0x00007f7749012398:   mov    %r15,%rdx
  0x00007f774901239b:   nopl   0x0(%rax,%rax,1)
  0x00007f77490123a0:   movabs $0x7f774cfaaa20,%r10
  0x00007f77490123aa:   callq  *%r10
  0x00007f77490123ad:   mov    %r12,0x2c0(%r15)
  0x00007f77490123b4:   mov    %r12,0x2c8(%r15)
  0x00007f77490123bb:   mov    0x318(%r15),%rax
  0x00007f77490123c2:   mov    %r12,0x318(%r15)
  0x00007f77490123c9:   cmp    0x8(%r15),%r12
  0x00007f77490123cd:   jne    0x00007f77490123d1
  0x00007f77490123cf:   pop    %rbp
  0x00007f77490123d0:   retq   
  0x00007f77490123d1:   xor    %ebx,%ebx
  0x00007f77490123d3:   movabs $0x7f7748f7fc00,%r10
  0x00007f77490123dd:   pop    %rbp
  0x00007f77490123de:   jmpq   *%r10
  0x00007f77490123e1:   hlt    
  0x00007f77490123e2:   hlt    
  0x00007f77490123e3:   hlt    
  0x00007f77490123e4:   hlt    
  0x00007f77490123e5:   hlt    
  0x00007f77490123e6:   hlt    
  0x00007f77490123e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _complete_monitor_locking_Java 0x00007f7749013f10
--------------------------------------------------------------------------------
  0x00007f7749013f80:   sub    $0x8,%rsp
  0x00007f7749013f87:   mov    %rbp,(%rsp)
  0x00007f7749013f8b:   mov    %rsp,0x2c0(%r15)
  0x00007f7749013f92:   mov    %rsi,%rdi
  0x00007f7749013f95:   mov    %rdx,%rsi
  0x00007f7749013f98:   mov    %r15,%rdx
  0x00007f7749013f9b:   nopl   0x0(%rax,%rax,1)
  0x00007f7749013fa0:   movabs $0x7f774cfbd470,%r10
  0x00007f7749013faa:   callq  *%r10
  0x00007f7749013fad:   mov    %r12,0x2c0(%r15)
  0x00007f7749013fb4:   mov    %r12,0x2c8(%r15)
  0x00007f7749013fbb:   nopl   0x0(%rax,%rax,1)
  0x00007f7749013fc0:   cmp    0x8(%r15),%r12
  0x00007f7749013fc4:   jne    0x00007f7749013fc8
  0x00007f7749013fc6:   pop    %rbp
  0x00007f7749013fc7:   retq   
  0x00007f7749013fc8:   xor    %ebx,%ebx
  0x00007f7749013fca:   movabs $0x7f7748f7fc00,%r10
  0x00007f7749013fd4:   pop    %rbp
  0x00007f7749013fd5:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _monitor_notify_Java 0x00007f774901e810
--------------------------------------------------------------------------------
  0x00007f774901e880:   sub    $0x8,%rsp
  0x00007f774901e887:   mov    %rbp,(%rsp)
  0x00007f774901e88b:   mov    %rsp,0x2c0(%r15)
  0x00007f774901e892:   mov    %rsi,%rdi
  0x00007f774901e895:   mov    %r15,%rsi
  0x00007f774901e898:   nopl   0x0(%rax,%rax,1)
  0x00007f774901e8a0:   movabs $0x7f774cfa8360,%r10
  0x00007f774901e8aa:   callq  *%r10
  0x00007f774901e8ad:   mov    %r12,0x2c0(%r15)
  0x00007f774901e8b4:   mov    %r12,0x2c8(%r15)
  0x00007f774901e8bb:   nopl   0x0(%rax,%rax,1)
  0x00007f774901e8c0:   cmp    0x8(%r15),%r12
  0x00007f774901e8c4:   jne    0x00007f774901e8c8
  0x00007f774901e8c6:   pop    %rbp
  0x00007f774901e8c7:   retq   
  0x00007f774901e8c8:   xor    %ebx,%ebx
  0x00007f774901e8ca:   movabs $0x7f7748f7fc00,%r10
  0x00007f774901e8d4:   pop    %rbp
  0x00007f774901e8d5:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _monitor_notifyAll_Java 0x00007f7749021590
--------------------------------------------------------------------------------
  0x00007f7749021600:   sub    $0x8,%rsp
  0x00007f7749021607:   mov    %rbp,(%rsp)
  0x00007f774902160b:   mov    %rsp,0x2c0(%r15)
  0x00007f7749021612:   mov    %rsi,%rdi
  0x00007f7749021615:   mov    %r15,%rsi
  0x00007f7749021618:   nopl   0x0(%rax,%rax,1)
  0x00007f7749021620:   movabs $0x7f774cfa8160,%r10
  0x00007f774902162a:   callq  *%r10
  0x00007f774902162d:   mov    %r12,0x2c0(%r15)
  0x00007f7749021634:   mov    %r12,0x2c8(%r15)
  0x00007f774902163b:   nopl   0x0(%rax,%rax,1)
  0x00007f7749021640:   cmp    0x8(%r15),%r12
  0x00007f7749021644:   jne    0x00007f7749021648
  0x00007f7749021646:   pop    %rbp
  0x00007f7749021647:   retq   
  0x00007f7749021648:   xor    %ebx,%ebx
  0x00007f774902164a:   movabs $0x7f7748f7fc00,%r10
  0x00007f7749021654:   pop    %rbp
  0x00007f7749021655:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _rethrow_Java 0x00007f7749027390
--------------------------------------------------------------------------------
  0x00007f7749027400:   sub    $0x18,%rsp
  0x00007f7749027407:   mov    %rbp,0x10(%rsp)
  0x00007f774902740c:   rex.W pushq 0x18(%rsp)
  0x00007f7749027411:   rex.W popq (%rsp)
  0x00007f7749027415:   mov    %rsp,0x2c0(%r15)
  0x00007f774902741c:   mov    %rsi,%rdi
  0x00007f774902741f:   mov    %r15,%rsi
  0x00007f7749027422:   mov    (%rsp),%rdx
  0x00007f7749027426:   movabs $0x7f774cfa7da0,%r10
  0x00007f7749027430:   callq  *%r10
  0x00007f7749027433:   mov    %rax,%r10
  0x00007f7749027436:   mov    %r12,0x2c0(%r15)
  0x00007f774902743d:   mov    %r12,0x2c8(%r15)
  0x00007f7749027444:   mov    0x318(%r15),%rax
  0x00007f774902744b:   mov    %r12,0x318(%r15)
  0x00007f7749027452:   cmp    0x8(%r15),%r12
  0x00007f7749027456:   jne    0x00007f7749027461
  0x00007f7749027458:   add    $0x10,%rsp
  0x00007f774902745c:   pop    %rbp
  0x00007f774902745d:   pop    %rdx
  0x00007f774902745e:   jmpq   *%r10
  0x00007f7749027461:   xor    %ebx,%ebx
  0x00007f7749027463:   movabs $0x7f7748f7fc00,%r10
  0x00007f774902746d:   add    $0x10,%rsp
  0x00007f7749027471:   pop    %rbp
  0x00007f7749027472:   jmpq   *%r10
  0x00007f7749027475:   hlt    
  0x00007f7749027476:   hlt    
  0x00007f7749027477:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 51 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _slow_arraycopy_Java 0x00007f7749027990
--------------------------------------------------------------------------------
  0x00007f7749027a00:   sub    $0x8,%rsp
  0x00007f7749027a07:   mov    %rbp,(%rsp)
  0x00007f7749027a0b:   mov    %rsp,0x2c0(%r15)
  0x00007f7749027a12:   mov    %rsi,%rdi
  0x00007f7749027a15:   mov    %edx,%esi
  0x00007f7749027a17:   mov    %rcx,%rdx
  0x00007f7749027a1a:   mov    %r8d,%ecx
  0x00007f7749027a1d:   mov    %r9d,%r8d
  0x00007f7749027a20:   mov    %r15,%r9
  0x00007f7749027a23:   movabs $0x7f774cfbcfa0,%r10
  0x00007f7749027a2d:   callq  *%r10
  0x00007f7749027a30:   mov    %r12,0x2c0(%r15)
  0x00007f7749027a37:   mov    %r12,0x2c8(%r15)
  0x00007f7749027a3e:   xchg   %ax,%ax
  0x00007f7749027a40:   cmp    0x8(%r15),%r12
  0x00007f7749027a44:   jne    0x00007f7749027a48
  0x00007f7749027a46:   pop    %rbp
  0x00007f7749027a47:   retq   
  0x00007f7749027a48:   xor    %ebx,%ebx
  0x00007f7749027a4a:   movabs $0x7f7748f7fc00,%r10
  0x00007f7749027a54:   pop    %rbp
  0x00007f7749027a55:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 48 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _register_finalizer_Java 0x00007f7749028290
--------------------------------------------------------------------------------
  0x00007f7749028300:   sub    $0x8,%rsp
  0x00007f7749028307:   mov    %rbp,(%rsp)
  0x00007f774902830b:   mov    %rsp,0x2c0(%r15)
  0x00007f7749028312:   mov    %rsi,%rdi
  0x00007f7749028315:   mov    %r15,%rsi
  0x00007f7749028318:   nopl   0x0(%rax,%rax,1)
  0x00007f7749028320:   movabs $0x7f774cfa8090,%r10
  0x00007f774902832a:   callq  *%r10
  0x00007f774902832d:   mov    %r12,0x2c0(%r15)
  0x00007f7749028334:   mov    %r12,0x2c8(%r15)
  0x00007f774902833b:   nopl   0x0(%rax,%rax,1)
  0x00007f7749028340:   cmp    0x8(%r15),%r12
  0x00007f7749028344:   jne    0x00007f7749028348
  0x00007f7749028346:   pop    %rbp
  0x00007f7749028347:   retq   
  0x00007f7749028348:   xor    %ebx,%ebx
  0x00007f774902834a:   movabs $0x7f7748f7fc00,%r10
  0x00007f7749028354:   pop    %rbp
  0x00007f7749028355:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

[Time]  32 ms  [Res] 20000
- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ICache::flush_icache_stub [0x00007fb1a0832080, 0x00007fb1a083209d] (29 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832080:   test   %esi,%esi
  0x00007fb1a0832082:   je     0x00007fb1a0832099
  0x00007fb1a0832088:   mfence 
  0x00007fb1a083208b:   clflush (%rdi)
  0x00007fb1a083208e:   add    $0x40,%rdi
  0x00007fb1a0832092:   dec    %esi
  0x00007fb1a0832094:   jne    0x00007fb1a083208b
  0x00007fb1a0832096:   mfence 
  0x00007fb1a0832099:   mov    %rdx,%rax
  0x00007fb1a083209c:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::get_cpu_info_stub [0x00007fb1a0832380, 0x00007fb1a083261c] (668 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832380:   push   %rbp
  0x00007fb1a0832381:   mov    %rdi,%rbp
  0x00007fb1a0832384:   push   %rbx
  0x00007fb1a0832385:   push   %rsi
  0x00007fb1a0832386:   pushfq 
  0x00007fb1a0832387:   pop    %rax
  0x00007fb1a0832388:   push   %rax
  0x00007fb1a0832389:   mov    %rax,%rcx
  0x00007fb1a083238c:   xor    $0x40000,%eax
  0x00007fb1a0832391:   push   %rax
  0x00007fb1a0832392:   popfq  
  0x00007fb1a0832393:   pushfq 
  0x00007fb1a0832394:   pop    %rax
  0x00007fb1a0832395:   cmp    %rcx,%rax
  0x00007fb1a0832398:   jne    0x00007fb1a08323a7
  0x00007fb1a083239a:   mov    $0x300,%eax
  0x00007fb1a083239f:   mov    %eax,0x10(%rbp)
  0x00007fb1a08323a2:   jmpq   0x00007fb1a083259d
  0x00007fb1a08323a7:   mov    %rcx,%rax
  0x00007fb1a08323aa:   xor    $0x200000,%eax
  0x00007fb1a08323af:   push   %rax
  0x00007fb1a08323b0:   popfq  
  0x00007fb1a08323b1:   pushfq 
  0x00007fb1a08323b2:   pop    %rax
  0x00007fb1a08323b3:   cmp    %rax,%rcx
  0x00007fb1a08323b6:   jne    0x00007fb1a08323c5
  0x00007fb1a08323b8:   mov    $0x400,%eax
  0x00007fb1a08323bd:   mov    %eax,0x10(%rbp)
  0x00007fb1a08323c0:   jmpq   0x00007fb1a083259d
  0x00007fb1a08323c5:   xor    %eax,%eax
  0x00007fb1a08323c7:   cpuid  
  0x00007fb1a08323c9:   or     %eax,%eax
  0x00007fb1a08323cb:   je     0x00007fb1a08323b8
  0x00007fb1a08323cd:   lea    0x0(%rbp),%rsi
  0x00007fb1a08323d1:   mov    %eax,(%rsi)
  0x00007fb1a08323d3:   mov    %ebx,0x4(%rsi)
  0x00007fb1a08323d6:   mov    %ecx,0x8(%rsi)
  0x00007fb1a08323d9:   mov    %edx,0xc(%rsi)
  0x00007fb1a08323dc:   cmp    $0xa,%eax
  0x00007fb1a08323df:   jbe    0x00007fb1a083244b
  0x00007fb1a08323e1:   mov    $0xb,%eax
  0x00007fb1a08323e6:   xor    %ecx,%ecx
  0x00007fb1a08323e8:   cpuid  
  0x00007fb1a08323ea:   lea    0x40(%rbp),%rsi
  0x00007fb1a08323ee:   mov    %eax,(%rsi)
  0x00007fb1a08323f0:   mov    %ebx,0x4(%rsi)
  0x00007fb1a08323f3:   mov    %ecx,0x8(%rsi)
  0x00007fb1a08323f6:   mov    %edx,0xc(%rsi)
  0x00007fb1a08323f9:   mov    $0xb,%eax
  0x00007fb1a08323fe:   mov    $0x1,%ecx
  0x00007fb1a0832403:   cpuid  
  0x00007fb1a0832405:   push   %rax
  0x00007fb1a0832406:   and    $0x1f,%eax
  0x00007fb1a0832409:   or     %ebx,%eax
  0x00007fb1a083240b:   and    $0xffff,%eax
  0x00007fb1a0832410:   pop    %rax
  0x00007fb1a0832411:   je     0x00007fb1a083244b
  0x00007fb1a0832413:   lea    0x50(%rbp),%rsi
  0x00007fb1a0832417:   mov    %eax,(%rsi)
  0x00007fb1a0832419:   mov    %ebx,0x4(%rsi)
  0x00007fb1a083241c:   mov    %ecx,0x8(%rsi)
  0x00007fb1a083241f:   mov    %edx,0xc(%rsi)
  0x00007fb1a0832422:   mov    $0xb,%eax
  0x00007fb1a0832427:   mov    $0x2,%ecx
  0x00007fb1a083242c:   cpuid  
  0x00007fb1a083242e:   push   %rax
  0x00007fb1a083242f:   and    $0x1f,%eax
  0x00007fb1a0832432:   or     %ebx,%eax
  0x00007fb1a0832434:   and    $0xffff,%eax
  0x00007fb1a0832439:   pop    %rax
  0x00007fb1a083243a:   je     0x00007fb1a083244b
  0x00007fb1a083243c:   lea    0x60(%rbp),%rsi
  0x00007fb1a0832440:   mov    %eax,(%rsi)
  0x00007fb1a0832442:   mov    %ebx,0x4(%rsi)
  0x00007fb1a0832445:   mov    %ecx,0x8(%rsi)
  0x00007fb1a0832448:   mov    %edx,0xc(%rsi)
  0x00007fb1a083244b:   mov    $0x4,%eax
  0x00007fb1a0832450:   cmp    0x0(%rbp),%eax
  0x00007fb1a0832453:   jg     0x00007fb1a0832471
  0x00007fb1a0832455:   xor    %ecx,%ecx
  0x00007fb1a0832457:   cpuid  
  0x00007fb1a0832459:   push   %rax
  0x00007fb1a083245a:   and    $0x1f,%eax
  0x00007fb1a083245d:   or     %eax,%eax
  0x00007fb1a083245f:   pop    %rax
  0x00007fb1a0832460:   je     0x00007fb1a0832471
  0x00007fb1a0832462:   lea    0x20(%rbp),%rsi
  0x00007fb1a0832466:   mov    %eax,(%rsi)
  0x00007fb1a0832468:   mov    %ebx,0x4(%rsi)
  0x00007fb1a083246b:   mov    %ecx,0x8(%rsi)
  0x00007fb1a083246e:   mov    %edx,0xc(%rsi)
  0x00007fb1a0832471:   mov    $0x1,%eax
  0x00007fb1a0832476:   cpuid  
  0x00007fb1a0832478:   lea    0x10(%rbp),%rsi
  0x00007fb1a083247c:   mov    %eax,(%rsi)
  0x00007fb1a083247e:   mov    %ebx,0x4(%rsi)
  0x00007fb1a0832481:   mov    %ecx,0x8(%rsi)
  0x00007fb1a0832484:   mov    %edx,0xc(%rsi)
  0x00007fb1a0832487:   and    $0x18000000,%ecx
  0x00007fb1a083248d:   cmp    $0x18000000,%ecx
  0x00007fb1a0832493:   jne    0x00007fb1a08324a6
  0x00007fb1a0832495:   xor    %ecx,%ecx
  0x00007fb1a0832497:   xgetbv 
  0x00007fb1a083249a:   lea    0x100(%rbp),%rsi
  0x00007fb1a08324a1:   mov    %eax,(%rsi)
  0x00007fb1a08324a3:   mov    %edx,0x4(%rsi)
  0x00007fb1a08324a6:   mov    $0x7,%eax
  0x00007fb1a08324ab:   cmp    0x0(%rbp),%eax
  0x00007fb1a08324ae:   jg     0x00007fb1a08324c3
  0x00007fb1a08324b0:   xor    %ecx,%ecx
  0x00007fb1a08324b2:   cpuid  
  0x00007fb1a08324b4:   lea    0x30(%rbp),%rsi
  0x00007fb1a08324b8:   mov    %eax,(%rsi)
  0x00007fb1a08324ba:   mov    %ebx,0x4(%rsi)
  0x00007fb1a08324bd:   mov    %ecx,0x8(%rsi)
  0x00007fb1a08324c0:   mov    %edx,0xc(%rsi)
  0x00007fb1a08324c3:   mov    $0x80000000,%eax
  0x00007fb1a08324c8:   cpuid  
  0x00007fb1a08324ca:   cmp    $0x80000000,%eax
  0x00007fb1a08324cf:   jbe    0x00007fb1a083259d
  0x00007fb1a08324d5:   cmp    $0x80000004,%eax
  0x00007fb1a08324da:   jbe    0x00007fb1a0832560
  0x00007fb1a08324e0:   cmp    $0x80000006,%eax
  0x00007fb1a08324e5:   jbe    0x00007fb1a0832547
  0x00007fb1a08324e7:   cmp    $0x80000007,%eax
  0x00007fb1a08324ec:   jbe    0x00007fb1a083252e
  0x00007fb1a08324ee:   cmp    $0x80000008,%eax
  0x00007fb1a08324f3:   jbe    0x00007fb1a0832515
  0x00007fb1a08324f5:   cmp    $0x8000001e,%eax
  0x00007fb1a08324fa:   jb     0x00007fb1a0832515
  0x00007fb1a08324fc:   mov    $0x8000001e,%eax
  0x00007fb1a0832501:   cpuid  
  0x00007fb1a0832503:   lea    0xf0(%rbp),%rsi
  0x00007fb1a083250a:   mov    %eax,(%rsi)
  0x00007fb1a083250c:   mov    %ebx,0x4(%rsi)
  0x00007fb1a083250f:   mov    %ecx,0x8(%rsi)
  0x00007fb1a0832512:   mov    %edx,0xc(%rsi)
  0x00007fb1a0832515:   mov    $0x80000008,%eax
  0x00007fb1a083251a:   cpuid  
  0x00007fb1a083251c:   lea    0xe0(%rbp),%rsi
  0x00007fb1a0832523:   mov    %eax,(%rsi)
  0x00007fb1a0832525:   mov    %ebx,0x4(%rsi)
  0x00007fb1a0832528:   mov    %ecx,0x8(%rsi)
  0x00007fb1a083252b:   mov    %edx,0xc(%rsi)
  0x00007fb1a083252e:   mov    $0x80000007,%eax
  0x00007fb1a0832533:   cpuid  
  0x00007fb1a0832535:   lea    0xd0(%rbp),%rsi
  0x00007fb1a083253c:   mov    %eax,(%rsi)
  0x00007fb1a083253e:   mov    %ebx,0x4(%rsi)
  0x00007fb1a0832541:   mov    %ecx,0x8(%rsi)
  0x00007fb1a0832544:   mov    %edx,0xc(%rsi)
  0x00007fb1a0832547:   mov    $0x80000005,%eax
  0x00007fb1a083254c:   cpuid  
  0x00007fb1a083254e:   lea    0xc0(%rbp),%rsi
  0x00007fb1a0832555:   mov    %eax,(%rsi)
  0x00007fb1a0832557:   mov    %ebx,0x4(%rsi)
  0x00007fb1a083255a:   mov    %ecx,0x8(%rsi)
  0x00007fb1a083255d:   mov    %edx,0xc(%rsi)
  0x00007fb1a0832560:   mov    $0x80000001,%eax
  0x00007fb1a0832565:   cpuid  
  0x00007fb1a0832567:   lea    0x80(%rbp),%rsi
  0x00007fb1a083256e:   mov    %eax,(%rsi)
  0x00007fb1a0832570:   mov    %ebx,0x4(%rsi)
  0x00007fb1a0832573:   mov    %ecx,0x8(%rsi)
  0x00007fb1a0832576:   mov    %edx,0xc(%rsi)
  0x00007fb1a0832579:   lea    0x10(%rbp),%rsi
  0x00007fb1a083257d:   mov    $0x18000000,%ecx
  0x00007fb1a0832582:   and    0x8(%rsi),%ecx
  0x00007fb1a0832585:   cmp    $0x18000000,%ecx
  0x00007fb1a083258b:   jne    0x00007fb1a083259d
  0x00007fb1a083258d:   mov    $0x6,%eax
  0x00007fb1a0832592:   and    0x100(%rbp),%eax
  0x00007fb1a0832598:   cmp    $0x6,%eax
  0x00007fb1a083259b:   je     0x00007fb1a08325a2
  0x00007fb1a083259d:   jmpq   0x00007fb1a0832617
  0x00007fb1a08325a2:   mov    $0xcafebabe,%ecx
  0x00007fb1a08325a7:   vmovd  %ecx,%xmm0
  0x00007fb1a08325ab:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fb1a08325b0:   vinsertf128 $0x1,%xmm0,%ymm0,%ymm0
  0x00007fb1a08325b6:   vmovdqu %ymm0,%ymm7
  0x00007fb1a08325ba:   vmovdqu %ymm0,%ymm8
  0x00007fb1a08325be:   vmovdqu %ymm0,%ymm15
  0x00007fb1a08325c2:   xor    %esi,%esi
  0x00007fb1a08325c4:   mov    (%rsi),%eax
  0x00007fb1a08325c6:   lea    0x108(%rbp),%rsi
  0x00007fb1a08325cd:   vmovdqu %ymm0,(%rsi)
  0x00007fb1a08325d1:   vmovdqu %ymm7,0x20(%rsi)
  0x00007fb1a08325d6:   vmovdqu %ymm8,0x40(%rsi)
  0x00007fb1a08325db:   vmovdqu %ymm15,0x60(%rsi)
  0x00007fb1a08325e0:   lea    0x0(%rbp),%rsi
  0x00007fb1a08325e4:   cmpl   $0x756e6547,0x4(%rsi)
  0x00007fb1a08325eb:   jne    0x00007fb1a0832617
  0x00007fb1a08325f1:   mov    $0xfff0ff0,%ecx
  0x00007fb1a08325f6:   lea    0x10(%rbp),%rsi
  0x00007fb1a08325fa:   and    (%rsi),%ecx
  0x00007fb1a08325fc:   cmp    $0x50670,%ecx
  0x00007fb1a0832602:   je     0x00007fb1a0832617
  0x00007fb1a0832608:   cmp    $0x80650,%ecx
  0x00007fb1a083260e:   je     0x00007fb1a0832617
  0x00007fb1a0832614:   vzeroupper 
  0x00007fb1a0832617:   popfq  
  0x00007fb1a0832618:   pop    %rsi
  0x00007fb1a0832619:   pop    %rbx
  0x00007fb1a083261a:   pop    %rbp
  0x00007fb1a083261b:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::detect_virt_stub [0x00007fb1a083261c, 0x00007fb1a0832636] (26 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a083261c:   push   %rbp
  0x00007fb1a083261d:   push   %rbx
  0x00007fb1a083261e:   push   %rsi
  0x00007fb1a083261f:   mov    %rdi,%rax
  0x00007fb1a0832622:   mov    %rsi,%rsi
  0x00007fb1a0832625:   cpuid  
  0x00007fb1a0832627:   mov    %eax,(%rsi)
  0x00007fb1a0832629:   mov    %ebx,0x4(%rsi)
  0x00007fb1a083262c:   mov    %ecx,0x8(%rsi)
  0x00007fb1a083262f:   mov    %edx,0xc(%rsi)
  0x00007fb1a0832632:   pop    %rsi
  0x00007fb1a0832633:   pop    %rbx
  0x00007fb1a0832634:   pop    %rbp
  0x00007fb1a0832635:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::forward exception [0x00007fb1a0832c00, 0x00007fb1a0832c3d] (61 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832c00:   mov    (%rsp),%rdi
  0x00007fb1a0832c04:   mov    %rdi,%rsi
  0x00007fb1a0832c07:   mov    %r15,%rdi
  0x00007fb1a0832c0a:   test   $0xf,%spl
  0x00007fb1a0832c0e:   je     0x00007fb1a0832c26
  0x00007fb1a0832c14:   sub    $0x8,%rsp
  0x00007fb1a0832c18:   callq  0x00007fb1a486edb0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x00007fb1a0832c1d:   add    $0x8,%rsp
  0x00007fb1a0832c21:   jmpq   0x00007fb1a0832c2b
  0x00007fb1a0832c26:   callq  0x00007fb1a486edb0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x00007fb1a0832c2b:   mov    %rax,%rbx
  0x00007fb1a0832c2e:   pop    %rdx
  0x00007fb1a0832c2f:   mov    0x8(%r15),%rax
  0x00007fb1a0832c33:   movq   $0x0,0x8(%r15)
  0x00007fb1a0832c3b:   jmpq   *%rbx
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::call_stub [0x00007fb1a0832c3d, 0x00007fb1a0832d2a] (237 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832c3d:   push   %rbp
  0x00007fb1a0832c3e:   mov    %rsp,%rbp
  0x00007fb1a0832c41:   sub    $0x60,%rsp
  0x00007fb1a0832c45:   mov    %r9,-0x8(%rbp)
  0x00007fb1a0832c49:   mov    %r8,-0x10(%rbp)
  0x00007fb1a0832c4d:   mov    %rcx,-0x18(%rbp)
  0x00007fb1a0832c51:   mov    %edx,-0x20(%rbp)
  0x00007fb1a0832c54:   mov    %rsi,-0x28(%rbp)
  0x00007fb1a0832c58:   mov    %rdi,-0x30(%rbp)
  0x00007fb1a0832c5c:   mov    %rbx,-0x38(%rbp)
  0x00007fb1a0832c60:   mov    %r12,-0x40(%rbp)
  0x00007fb1a0832c64:   mov    %r13,-0x48(%rbp)
  0x00007fb1a0832c68:   mov    %r14,-0x50(%rbp)
  0x00007fb1a0832c6c:   mov    %r15,-0x58(%rbp)
  0x00007fb1a0832c70:   vstmxcsr -0x60(%rbp)
  0x00007fb1a0832c75:   mov    -0x60(%rbp),%eax
  0x00007fb1a0832c78:   and    $0xffc0,%eax
  0x00007fb1a0832c7d:   cmp    0x47162e5(%rip),%eax        # 0x00007fb1a4f48f68
  0x00007fb1a0832c83:   je     0x00007fb1a0832c91
  0x00007fb1a0832c89:   vldmxcsr 0x47162d7(%rip)        # 0x00007fb1a4f48f68
  0x00007fb1a0832c91:   mov    0x18(%rbp),%r15
  0x00007fb1a0832c95:   mov    0x46a7374(%rip),%r12        # 0x00007fb1a4eda010
  0x00007fb1a0832c9c:   mov    0x10(%rbp),%ecx
  0x00007fb1a0832c9f:   test   %ecx,%ecx
  0x00007fb1a0832ca1:   je     0x00007fb1a0832cb9
  0x00007fb1a0832ca7:   mov    -0x8(%rbp),%rdx
  0x00007fb1a0832cab:   mov    %ecx,%esi
  0x00007fb1a0832cad:   mov    (%rdx),%rax
  0x00007fb1a0832cb0:   add    $0x8,%rdx
  0x00007fb1a0832cb4:   dec    %esi
  0x00007fb1a0832cb6:   push   %rax
  0x00007fb1a0832cb7:   jne    0x00007fb1a0832cad
  0x00007fb1a0832cb9:   mov    -0x18(%rbp),%rbx
  0x00007fb1a0832cbd:   mov    -0x10(%rbp),%rsi
  0x00007fb1a0832cc1:   mov    %rsp,%r13
  0x00007fb1a0832cc4:   callq  *%rsi
  0x00007fb1a0832cc6:   mov    -0x28(%rbp),%rdi
  0x00007fb1a0832cca:   mov    -0x20(%rbp),%esi
  0x00007fb1a0832ccd:   cmp    $0xc,%esi
  0x00007fb1a0832cd0:   je     0x00007fb1a0832d19
  0x00007fb1a0832cd6:   cmp    $0xb,%esi
  0x00007fb1a0832cd9:   je     0x00007fb1a0832d19
  0x00007fb1a0832cdf:   cmp    $0x6,%esi
  0x00007fb1a0832ce2:   je     0x00007fb1a0832d1e
  0x00007fb1a0832ce8:   cmp    $0x7,%esi
  0x00007fb1a0832ceb:   je     0x00007fb1a0832d24
  0x00007fb1a0832cf1:   mov    %eax,(%rdi)
  0x00007fb1a0832cf3:   lea    -0x60(%rbp),%rsp
  0x00007fb1a0832cf7:   mov    -0x58(%rbp),%r15
  0x00007fb1a0832cfb:   mov    -0x50(%rbp),%r14
  0x00007fb1a0832cff:   mov    -0x48(%rbp),%r13
  0x00007fb1a0832d03:   mov    -0x40(%rbp),%r12
  0x00007fb1a0832d07:   mov    -0x38(%rbp),%rbx
  0x00007fb1a0832d0b:   vldmxcsr -0x60(%rbp)
  0x00007fb1a0832d10:   add    $0x60,%rsp
  0x00007fb1a0832d14:   vzeroupper 
  0x00007fb1a0832d17:   pop    %rbp
  0x00007fb1a0832d18:   retq   
  0x00007fb1a0832d19:   mov    %rax,(%rdi)
  0x00007fb1a0832d1c:   jmp    0x00007fb1a0832cf3
  0x00007fb1a0832d1e:   vmovss %xmm0,(%rdi)
  0x00007fb1a0832d22:   jmp    0x00007fb1a0832cf3
  0x00007fb1a0832d24:   vmovsd %xmm0,(%rdi)
  0x00007fb1a0832d28:   jmp    0x00007fb1a0832cf3
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::catch_exception [0x00007fb1a0832d2a, 0x00007fb1a0832d49] (31 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832d2a:   mov    %rax,0x8(%r15)
  0x00007fb1a0832d2e:   movabs $0x7fb1a4bfdca0,%r10
  0x00007fb1a0832d38:   mov    %r10,0x10(%r15)
  0x00007fb1a0832d3c:   movl   $0x1cb,0x18(%r15)
  0x00007fb1a0832d44:   jmpq   0x00007fb1a0832cc6
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::orderaccess_fence [0x00007fb1a0832d49, 0x00007fb1a0832d50] (7 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832d49:   lock addl $0x0,-0x40(%rsp)
  0x00007fb1a0832d4f:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::get_previous_sp [0x00007fb1a0832d50, 0x00007fb1a0832d58] (8 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832d50:   mov    %rsp,%rax
  0x00007fb1a0832d53:   add    $0x8,%rax
  0x00007fb1a0832d57:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::verify_mxcsr [0x00007fb1a0832d58, 0x00007fb1a0832d59] (1 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832d58:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::f2i_fixup [0x00007fb1a0832d59, 0x00007fb1a0832d91] (56 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832d59:   push   %rax
  0x00007fb1a0832d5a:   push   %rcx
  0x00007fb1a0832d5b:   push   %rdx
  0x00007fb1a0832d5c:   push   %rsi
  0x00007fb1a0832d5d:   mov    $0x7f800000,%eax
  0x00007fb1a0832d62:   xor    %ecx,%ecx
  0x00007fb1a0832d64:   mov    0x28(%rsp),%edx
  0x00007fb1a0832d68:   mov    %edx,%esi
  0x00007fb1a0832d6a:   and    $0x7fffffff,%esi
  0x00007fb1a0832d70:   cmp    %esi,%eax
  0x00007fb1a0832d72:   js     0x00007fb1a0832d87
  0x00007fb1a0832d78:   test   %edx,%edx
  0x00007fb1a0832d7a:   mov    $0x80000000,%ecx
  0x00007fb1a0832d7f:   mov    $0x7fffffff,%eax
  0x00007fb1a0832d84:   cmovns %eax,%ecx
  0x00007fb1a0832d87:   mov    %rcx,0x28(%rsp)
  0x00007fb1a0832d8c:   pop    %rsi
  0x00007fb1a0832d8d:   pop    %rdx
  0x00007fb1a0832d8e:   pop    %rcx
  0x00007fb1a0832d8f:   pop    %rax
  0x00007fb1a0832d90:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::f2l_fixup [0x00007fb1a0832d91, 0x00007fb1a0832dd4] (67 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832d91:   push   %rax
  0x00007fb1a0832d92:   push   %rcx
  0x00007fb1a0832d93:   push   %rdx
  0x00007fb1a0832d94:   push   %rsi
  0x00007fb1a0832d95:   mov    $0x7f800000,%eax
  0x00007fb1a0832d9a:   xor    %ecx,%ecx
  0x00007fb1a0832d9c:   mov    0x28(%rsp),%edx
  0x00007fb1a0832da0:   mov    %edx,%esi
  0x00007fb1a0832da2:   and    $0x7fffffff,%esi
  0x00007fb1a0832da8:   cmp    %esi,%eax
  0x00007fb1a0832daa:   js     0x00007fb1a0832dca
  0x00007fb1a0832db0:   test   %edx,%edx
  0x00007fb1a0832db2:   movabs $0x8000000000000000,%rcx
  0x00007fb1a0832dbc:   movabs $0x7fffffffffffffff,%rax
  0x00007fb1a0832dc6:   cmovns %rax,%rcx
  0x00007fb1a0832dca:   mov    %rcx,0x28(%rsp)
  0x00007fb1a0832dcf:   pop    %rsi
  0x00007fb1a0832dd0:   pop    %rdx
  0x00007fb1a0832dd1:   pop    %rcx
  0x00007fb1a0832dd2:   pop    %rax
  0x00007fb1a0832dd3:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::d2i_fixup [0x00007fb1a0832dd4, 0x00007fb1a0832e24] (80 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832dd4:   push   %rax
  0x00007fb1a0832dd5:   push   %rcx
  0x00007fb1a0832dd6:   push   %rdx
  0x00007fb1a0832dd7:   push   %rsi
  0x00007fb1a0832dd8:   push   %rdi
  0x00007fb1a0832dd9:   mov    $0x7ff00000,%eax
  0x00007fb1a0832dde:   mov    0x30(%rsp),%rdx
  0x00007fb1a0832de3:   mov    %edx,%ecx
  0x00007fb1a0832de5:   mov    %rdx,%rsi
  0x00007fb1a0832de8:   mov    %rdx,%rdi
  0x00007fb1a0832deb:   neg    %ecx
  0x00007fb1a0832ded:   shr    $0x20,%rsi
  0x00007fb1a0832df1:   or     %edx,%ecx
  0x00007fb1a0832df3:   and    $0x7fffffff,%esi
  0x00007fb1a0832df9:   xor    %edx,%edx
  0x00007fb1a0832dfb:   shr    $0x1f,%ecx
  0x00007fb1a0832dfe:   or     %ecx,%esi
  0x00007fb1a0832e00:   cmp    %esi,%eax
  0x00007fb1a0832e02:   js     0x00007fb1a0832e19
  0x00007fb1a0832e08:   test   %rdi,%rdi
  0x00007fb1a0832e0b:   mov    $0x80000000,%edx
  0x00007fb1a0832e10:   mov    $0x7fffffff,%eax
  0x00007fb1a0832e15:   cmovns %rax,%rdx
  0x00007fb1a0832e19:   mov    %rdx,0x30(%rsp)
  0x00007fb1a0832e1e:   pop    %rdi
  0x00007fb1a0832e1f:   pop    %rsi
  0x00007fb1a0832e20:   pop    %rdx
  0x00007fb1a0832e21:   pop    %rcx
  0x00007fb1a0832e22:   pop    %rax
  0x00007fb1a0832e23:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::d2l_fixup [0x00007fb1a0832e24, 0x00007fb1a0832e7e] (90 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832e24:   push   %rax
  0x00007fb1a0832e25:   push   %rcx
  0x00007fb1a0832e26:   push   %rdx
  0x00007fb1a0832e27:   push   %rsi
  0x00007fb1a0832e28:   push   %rdi
  0x00007fb1a0832e29:   mov    $0x7ff00000,%eax
  0x00007fb1a0832e2e:   mov    0x30(%rsp),%rdx
  0x00007fb1a0832e33:   mov    %edx,%ecx
  0x00007fb1a0832e35:   mov    %rdx,%rsi
  0x00007fb1a0832e38:   mov    %rdx,%rdi
  0x00007fb1a0832e3b:   neg    %ecx
  0x00007fb1a0832e3d:   shr    $0x20,%rsi
  0x00007fb1a0832e41:   or     %edx,%ecx
  0x00007fb1a0832e43:   and    $0x7fffffff,%esi
  0x00007fb1a0832e49:   xor    %edx,%edx
  0x00007fb1a0832e4b:   shr    $0x1f,%ecx
  0x00007fb1a0832e4e:   or     %ecx,%esi
  0x00007fb1a0832e50:   cmp    %esi,%eax
  0x00007fb1a0832e52:   js     0x00007fb1a0832e73
  0x00007fb1a0832e58:   test   %rdi,%rdi
  0x00007fb1a0832e5b:   movabs $0x8000000000000000,%rdx
  0x00007fb1a0832e65:   movabs $0x7fffffffffffffff,%rax
  0x00007fb1a0832e6f:   cmovns %rax,%rdx
  0x00007fb1a0832e73:   mov    %rdx,0x30(%rsp)
  0x00007fb1a0832e78:   pop    %rdi
  0x00007fb1a0832e79:   pop    %rsi
  0x00007fb1a0832e7a:   pop    %rdx
  0x00007fb1a0832e7b:   pop    %rcx
  0x00007fb1a0832e7c:   pop    %rax
  0x00007fb1a0832e7d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::float_sign_mask [0x00007fb1a0832e80, 0x00007fb1a0832e90] (16 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832e80:   (bad)  
  0x00007fb1a0832e81:   (bad)  
  0x00007fb1a0832e82:   (bad)  
  0x00007fb1a0832e83:   jg     0x00007fb1a0832e84
  0x00007fb1a0832e85:   (bad)  
  0x00007fb1a0832e86:   (bad)  
  0x00007fb1a0832e87:   jg     0x00007fb1a0832e88
  0x00007fb1a0832e89:   (bad)  
  0x00007fb1a0832e8a:   (bad)  
  0x00007fb1a0832e8b:   jg     0x00007fb1a0832e8c
  0x00007fb1a0832e8d:   (bad)  
  0x00007fb1a0832e8e:   (bad)  
  0x00007fb1a0832e8f:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::float_sign_flip [0x00007fb1a0832ea0, 0x00007fb1a0832eb0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832ea0:   add    %al,(%rax)
  0x00007fb1a0832ea2:   add    %al,-0x80000000(%rax)
  0x00007fb1a0832ea8:   add    %al,(%rax)
  0x00007fb1a0832eaa:   add    %al,-0x80000000(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::double_sign_mask [0x00007fb1a0832ec0, 0x00007fb1a0832ed0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832ec0:   (bad)  
  0x00007fb1a0832ec1:   (bad)  
  0x00007fb1a0832ec2:   (bad)  
  0x00007fb1a0832ec3:   (bad)  
  0x00007fb1a0832ec4:   (bad)  
  0x00007fb1a0832ec5:   (bad)  
  0x00007fb1a0832ec6:   (bad)  
  0x00007fb1a0832ec7:   jg     0x00007fb1a0832ec8
  0x00007fb1a0832ec9:   (bad)  
  0x00007fb1a0832eca:   (bad)  
  0x00007fb1a0832ecb:   (bad)  
  0x00007fb1a0832ecc:   (bad)  
  0x00007fb1a0832ecd:   (bad)  
  0x00007fb1a0832ece:   (bad)  
  0x00007fb1a0832ecf:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::double_sign_flip [0x00007fb1a0832ee0, 0x00007fb1a0832ef0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832ee0:   add    %al,(%rax)
  0x00007fb1a0832ee2:   add    %al,(%rax)
  0x00007fb1a0832ee4:   add    %al,(%rax)
  0x00007fb1a0832ee6:   add    %al,0x0(%rax)
  0x00007fb1a0832eec:   add    %al,(%rax)
  0x00007fb1a0832eee:   .byte 0x0
  0x00007fb1a0832eef:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - StackOverflowError throw_exception 0x00007fb1a083a610
--------------------------------------------------------------------------------
  0x00007fb1a083a680:   push   %rbp
  0x00007fb1a083a681:   mov    %rsp,%rbp
  0x00007fb1a083a684:   sub    $0x0,%rsp
  0x00007fb1a083a688:   vzeroupper 
  0x00007fb1a083a68b:   mov    %rbp,0x2d0(%r15)
  0x00007fb1a083a692:   movabs $0x7fb1a083a688,%r10
  0x00007fb1a083a69c:   mov    %r10,0x2c8(%r15)
  0x00007fb1a083a6a3:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a083a6aa:   and    $0xfffffffffffffff0,%rsp
  0x00007fb1a083a6ae:   mov    %r15,%rdi
  0x00007fb1a083a6b1:   callq  0x00007fb1a48752a0 = SharedRuntime::throw_StackOverflowError(JavaThread*)
  0x00007fb1a083a6b6:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a083a6c1:   movq   $0x0,0x2d0(%r15)
  0x00007fb1a083a6cc:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a083a6d7:   vzeroupper 
  0x00007fb1a083a6da:   leaveq 
  0x00007fb1a083a6db:   jmpq   0x00007fb1a0832c00
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - delayed StackOverflowError throw_exception 0x00007fb1a083a910
--------------------------------------------------------------------------------
  0x00007fb1a083a980:   push   %rbp
  0x00007fb1a083a981:   mov    %rsp,%rbp
  0x00007fb1a083a984:   sub    $0x0,%rsp
  0x00007fb1a083a988:   vzeroupper 
  0x00007fb1a083a98b:   mov    %rbp,0x2d0(%r15)
  0x00007fb1a083a992:   movabs $0x7fb1a083a988,%r10
  0x00007fb1a083a99c:   mov    %r10,0x2c8(%r15)
  0x00007fb1a083a9a3:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a083a9aa:   and    $0xfffffffffffffff0,%rsp
  0x00007fb1a083a9ae:   mov    %r15,%rdi
  0x00007fb1a083a9b1:   callq  0x00007fb1a4875460 = SharedRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007fb1a083a9b6:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a083a9c1:   movq   $0x0,0x2d0(%r15)
  0x00007fb1a083a9cc:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a083a9d7:   vzeroupper 
  0x00007fb1a083a9da:   leaveq 
  0x00007fb1a083a9db:   jmpq   0x00007fb1a0832c00
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesCRC32 [0x00007fb1a0832f00, 0x00007fb1a0833170] (624 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0832f00:   push   %rbp
  0x00007fb1a0832f01:   mov    %rsp,%rbp
  0x00007fb1a0832f04:   movabs $0x7fb1a4ef0780,%rcx
  0x00007fb1a0832f0e:   not    %edi
  0x00007fb1a0832f10:   cmp    $0x10,%edx
  0x00007fb1a0832f13:   jl     0x00007fb1a083314a
  0x00007fb1a0832f19:   mov    %esi,%r11d
  0x00007fb1a0832f1c:   and    $0xf,%r11d
  0x00007fb1a0832f20:   je     0x00007fb1a0832f44
  0x00007fb1a0832f22:   sub    $0x10,%r11d
  0x00007fb1a0832f26:   add    %r11d,%edx
  0x00007fb1a0832f29:   data16 xchg %ax,%ax
  0x00007fb1a0832f2c:   movsbl (%rsi),%eax
  0x00007fb1a0832f2f:   xor    %edi,%eax
  0x00007fb1a0832f31:   and    $0xff,%eax
  0x00007fb1a0832f36:   shr    $0x8,%edi
  0x00007fb1a0832f39:   xor    (%rcx,%rax,4),%edi
  0x00007fb1a0832f3c:   inc    %rsi
  0x00007fb1a0832f3f:   inc    %r11d
  0x00007fb1a0832f42:   jl     0x00007fb1a0832f2c
  0x00007fb1a0832f44:   mov    %edx,%r11d
  0x00007fb1a0832f47:   shr    $0x4,%edx
  0x00007fb1a0832f4a:   je     0x00007fb1a0833147
  0x00007fb1a0832f50:   vmovdqa (%rsi),%xmm1
  0x00007fb1a0832f54:   vmovd  %xmm1,%eax
  0x00007fb1a0832f58:   xor    %eax,%edi
  0x00007fb1a0832f5a:   vpinsrd $0x0,%edi,%xmm1,%xmm1
  0x00007fb1a0832f60:   add    $0x10,%rsi
  0x00007fb1a0832f64:   sub    $0x4,%edx
  0x00007fb1a0832f67:   jl     0x00007fb1a0833060
  0x00007fb1a0832f6d:   vmovdqa (%rsi),%xmm2
  0x00007fb1a0832f71:   vmovdqa 0x10(%rsi),%xmm3
  0x00007fb1a0832f76:   vmovdqa 0x20(%rsi),%xmm4
  0x00007fb1a0832f7b:   add    $0x30,%rsi
  0x00007fb1a0832f7f:   sub    $0x3,%edx
  0x00007fb1a0832f82:   jle    0x00007fb1a083301c
  0x00007fb1a0832f88:   vmovdqu 0x46bdc10(%rip),%xmm0        # 0x00007fb1a4ef0ba0
  0x00007fb1a0832f90:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a0832f9b:   data16 data16 xchg %ax,%ax
  0x00007fb1a0832f9f:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a0832faa:   data16 data16 xchg %ax,%ax
  0x00007fb1a0832fae:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a0832fb9:   data16 data16 xchg %ax,%ax
  0x00007fb1a0832fbd:   data16 xchg %ax,%ax
  0x00007fb1a0832fc0:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007fb1a0832fc6:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007fb1a0832fcc:   vpxor  (%rsi),%xmm1,%xmm1
  0x00007fb1a0832fd0:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007fb1a0832fd4:   vpclmulhqhqdq %xmm2,%xmm0,%xmm5
  0x00007fb1a0832fda:   vpclmullqlqdq %xmm2,%xmm0,%xmm2
  0x00007fb1a0832fe0:   vpxor  0x10(%rsi),%xmm2,%xmm2
  0x00007fb1a0832fe5:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007fb1a0832fe9:   vpclmulhqhqdq %xmm3,%xmm0,%xmm5
  0x00007fb1a0832fef:   vpclmullqlqdq %xmm3,%xmm0,%xmm3
  0x00007fb1a0832ff5:   vpxor  0x20(%rsi),%xmm3,%xmm3
  0x00007fb1a0832ffa:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007fb1a0832ffe:   vpclmulhqhqdq %xmm4,%xmm0,%xmm5
  0x00007fb1a0833004:   vpclmullqlqdq %xmm4,%xmm0,%xmm4
  0x00007fb1a083300a:   vpxor  0x30(%rsi),%xmm4,%xmm4
  0x00007fb1a083300f:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007fb1a0833013:   add    $0x40,%rsi
  0x00007fb1a0833017:   sub    $0x4,%edx
  0x00007fb1a083301a:   jg     0x00007fb1a0832fc0
  0x00007fb1a083301c:   vmovdqu 0x46bdb6c(%rip),%xmm0        # 0x00007fb1a4ef0b90
  0x00007fb1a0833024:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007fb1a083302a:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007fb1a0833030:   vpxor  %xmm2,%xmm1,%xmm1
  0x00007fb1a0833034:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007fb1a0833038:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007fb1a083303e:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007fb1a0833044:   vpxor  %xmm3,%xmm1,%xmm1
  0x00007fb1a0833048:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007fb1a083304c:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007fb1a0833052:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007fb1a0833058:   vpxor  %xmm4,%xmm1,%xmm1
  0x00007fb1a083305c:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007fb1a0833060:   add    $0x3,%edx
  0x00007fb1a0833063:   jle    0x00007fb1a0833089
  0x00007fb1a0833065:   vmovdqu 0x46bdb23(%rip),%xmm0        # 0x00007fb1a4ef0b90
  0x00007fb1a083306d:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007fb1a0833073:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007fb1a0833079:   vpxor  (%rsi),%xmm1,%xmm1
  0x00007fb1a083307d:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007fb1a0833081:   add    $0x10,%rsi
  0x00007fb1a0833085:   dec    %edx
  0x00007fb1a0833087:   jg     0x00007fb1a083306d
  0x00007fb1a0833089:   vmovdqu 0x46bdaef(%rip),%xmm0        # 0x00007fb1a4ef0b80
  0x00007fb1a0833091:   vpclmulhqlqdq %xmm1,%xmm0,%xmm2
  0x00007fb1a0833097:   vpand  %xmm2,%xmm0,%xmm3
  0x00007fb1a083309b:   vpclmulhqlqdq %xmm3,%xmm0,%xmm0
  0x00007fb1a08330a1:   vpsrldq $0x8,%xmm1,%xmm1
  0x00007fb1a08330a6:   vpsrldq $0x4,%xmm2,%xmm2
  0x00007fb1a08330ab:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a08330af:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fb1a08330b3:   vmovd  %xmm0,%eax
  0x00007fb1a08330b7:   and    $0xff,%eax
  0x00007fb1a08330bc:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007fb1a08330c1:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007fb1a08330c6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a08330ca:   vmovd  %xmm0,%eax
  0x00007fb1a08330ce:   and    $0xff,%eax
  0x00007fb1a08330d3:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007fb1a08330d8:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007fb1a08330dd:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a08330e1:   vmovd  %xmm0,%eax
  0x00007fb1a08330e5:   and    $0xff,%eax
  0x00007fb1a08330ea:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007fb1a08330ef:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007fb1a08330f4:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a08330f8:   vmovd  %xmm0,%eax
  0x00007fb1a08330fc:   and    $0xff,%eax
  0x00007fb1a0833101:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007fb1a0833106:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007fb1a083310b:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a083310f:   vmovd  %xmm0,%edi
  0x00007fb1a0833113:   mov    %edi,%eax
  0x00007fb1a0833115:   and    $0xff,%eax
  0x00007fb1a083311a:   shr    $0x8,%edi
  0x00007fb1a083311d:   xor    (%rcx,%rax,4),%edi
  0x00007fb1a0833120:   mov    %edi,%eax
  0x00007fb1a0833122:   and    $0xff,%eax
  0x00007fb1a0833127:   shr    $0x8,%edi
  0x00007fb1a083312a:   xor    (%rcx,%rax,4),%edi
  0x00007fb1a083312d:   mov    %edi,%eax
  0x00007fb1a083312f:   and    $0xff,%eax
  0x00007fb1a0833134:   shr    $0x8,%edi
  0x00007fb1a0833137:   xor    (%rcx,%rax,4),%edi
  0x00007fb1a083313a:   mov    %edi,%eax
  0x00007fb1a083313c:   and    $0xff,%eax
  0x00007fb1a0833141:   shr    $0x8,%edi
  0x00007fb1a0833144:   xor    (%rcx,%rax,4),%edi
  0x00007fb1a0833147:   mov    %r11d,%edx
  0x00007fb1a083314a:   and    $0xf,%edx
  0x00007fb1a083314d:   je     0x00007fb1a0833167
  0x00007fb1a083314f:   nop
  0x00007fb1a0833150:   movsbl (%rsi),%eax
  0x00007fb1a0833153:   xor    %edi,%eax
  0x00007fb1a0833155:   and    $0xff,%eax
  0x00007fb1a083315a:   shr    $0x8,%edi
  0x00007fb1a083315d:   xor    (%rcx,%rax,4),%edi
  0x00007fb1a0833160:   inc    %rsi
  0x00007fb1a0833163:   dec    %edx
  0x00007fb1a0833165:   jg     0x00007fb1a0833150
  0x00007fb1a0833167:   not    %edi
  0x00007fb1a0833169:   mov    %edi,%eax
  0x00007fb1a083316b:   vzeroupper 
  0x00007fb1a083316e:   leaveq 
  0x00007fb1a083316f:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesCRC32C [0x00007fb1a0833180, 0x00007fb1a08333e4] (612 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0833180:   push   %rbp
  0x00007fb1a0833181:   mov    %rsp,%rbp
  0x00007fb1a0833184:   cmp    $0x1800,%edx
  0x00007fb1a083318a:   jl     0x00007fb1a0833235
  0x00007fb1a0833190:   xor    %eax,%eax
  0x00007fb1a0833192:   xor    %r9d,%r9d
  0x00007fb1a0833195:   mov    %rsi,%r10
  0x00007fb1a0833198:   add    $0x800,%r10
  0x00007fb1a083319f:   crc32q (%rsi),%rdi
  0x00007fb1a08331a5:   crc32q 0x800(%rsi),%rax
  0x00007fb1a08331af:   crc32q 0x1000(%rsi),%r9
  0x00007fb1a08331b9:   add    $0x8,%rsi
  0x00007fb1a08331bd:   cmp    %r10,%rsi
  0x00007fb1a08331c0:   jl     0x00007fb1a083319f
  0x00007fb1a08331c2:   vmovd  %edi,%xmm0
  0x00007fb1a08331c6:   mov    $0x35d73a62,%r11d
  0x00007fb1a08331cc:   vmovd  %r11d,%xmm2
  0x00007fb1a08331d1:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007fb1a08331d7:   vmovq  %xmm0,%rdi
  0x00007fb1a08331dc:   vmovd  %eax,%xmm1
  0x00007fb1a08331e0:   mov    $0xd65762a,%r11d
  0x00007fb1a08331e6:   vmovd  %r11d,%xmm2
  0x00007fb1a08331eb:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007fb1a08331f1:   vmovq  %xmm1,%rax
  0x00007fb1a08331f6:   shl    %rdi
  0x00007fb1a08331f9:   mov    %edi,%r11d
  0x00007fb1a08331fc:   shr    $0x20,%rdi
  0x00007fb1a0833200:   xor    %ecx,%ecx
  0x00007fb1a0833202:   crc32l %r11d,%ecx
  0x00007fb1a0833208:   xor    %ecx,%edi
  0x00007fb1a083320a:   shl    %rax
  0x00007fb1a083320d:   mov    %eax,%r11d
  0x00007fb1a0833210:   shr    $0x20,%rax
  0x00007fb1a0833214:   xor    %ecx,%ecx
  0x00007fb1a0833216:   crc32l %r11d,%ecx
  0x00007fb1a083321c:   xor    %ecx,%eax
  0x00007fb1a083321e:   xor    %eax,%edi
  0x00007fb1a0833220:   xor    %r9d,%edi
  0x00007fb1a0833223:   add    $0x1000,%rsi
  0x00007fb1a083322a:   sub    $0x1800,%edx
  0x00007fb1a0833230:   jmpq   0x00007fb1a0833184
  0x00007fb1a0833235:   cmp    $0x6f0,%edx
  0x00007fb1a083323b:   jl     0x00007fb1a08332e6
  0x00007fb1a0833241:   xor    %eax,%eax
  0x00007fb1a0833243:   xor    %r9d,%r9d
  0x00007fb1a0833246:   mov    %rsi,%r10
  0x00007fb1a0833249:   add    $0x250,%r10
  0x00007fb1a0833250:   crc32q (%rsi),%rdi
  0x00007fb1a0833256:   crc32q 0x250(%rsi),%rax
  0x00007fb1a0833260:   crc32q 0x4a0(%rsi),%r9
  0x00007fb1a083326a:   add    $0x8,%rsi
  0x00007fb1a083326e:   cmp    %r10,%rsi
  0x00007fb1a0833271:   jl     0x00007fb1a0833250
  0x00007fb1a0833273:   vmovd  %edi,%xmm0
  0x00007fb1a0833277:   mov    $0x3babc3e6,%r11d
  0x00007fb1a083327d:   vmovd  %r11d,%xmm2
  0x00007fb1a0833282:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007fb1a0833288:   vmovq  %xmm0,%rdi
  0x00007fb1a083328d:   vmovd  %eax,%xmm1
  0x00007fb1a0833291:   mov    $0x1230a27d,%r11d
  0x00007fb1a0833297:   vmovd  %r11d,%xmm2
  0x00007fb1a083329c:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007fb1a08332a2:   vmovq  %xmm1,%rax
  0x00007fb1a08332a7:   shl    %rdi
  0x00007fb1a08332aa:   mov    %edi,%r11d
  0x00007fb1a08332ad:   shr    $0x20,%rdi
  0x00007fb1a08332b1:   xor    %ecx,%ecx
  0x00007fb1a08332b3:   crc32l %r11d,%ecx
  0x00007fb1a08332b9:   xor    %ecx,%edi
  0x00007fb1a08332bb:   shl    %rax
  0x00007fb1a08332be:   mov    %eax,%r11d
  0x00007fb1a08332c1:   shr    $0x20,%rax
  0x00007fb1a08332c5:   xor    %ecx,%ecx
  0x00007fb1a08332c7:   crc32l %r11d,%ecx
  0x00007fb1a08332cd:   xor    %ecx,%eax
  0x00007fb1a08332cf:   xor    %eax,%edi
  0x00007fb1a08332d1:   xor    %r9d,%edi
  0x00007fb1a08332d4:   add    $0x4a0,%rsi
  0x00007fb1a08332db:   sub    $0x6f0,%edx
  0x00007fb1a08332e1:   jmpq   0x00007fb1a0833235
  0x00007fb1a08332e6:   cmp    $0xd8,%edx
  0x00007fb1a08332ec:   jl     0x00007fb1a0833391
  0x00007fb1a08332f2:   xor    %eax,%eax
  0x00007fb1a08332f4:   xor    %r9d,%r9d
  0x00007fb1a08332f7:   mov    %rsi,%r10
  0x00007fb1a08332fa:   add    $0x48,%r10
  0x00007fb1a08332fe:   crc32q (%rsi),%rdi
  0x00007fb1a0833304:   crc32q 0x48(%rsi),%rax
  0x00007fb1a083330b:   crc32q 0x90(%rsi),%r9
  0x00007fb1a0833315:   add    $0x8,%rsi
  0x00007fb1a0833319:   cmp    %r10,%rsi
  0x00007fb1a083331c:   jl     0x00007fb1a08332fe
  0x00007fb1a083331e:   vmovd  %edi,%xmm0
  0x00007fb1a0833322:   mov    $0xe55ef1f3,%r11d
  0x00007fb1a0833328:   vmovd  %r11d,%xmm2
  0x00007fb1a083332d:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007fb1a0833333:   vmovq  %xmm0,%rdi
  0x00007fb1a0833338:   vmovd  %eax,%xmm1
  0x00007fb1a083333c:   mov    $0x8cfaa965,%r11d
  0x00007fb1a0833342:   vmovd  %r11d,%xmm2
  0x00007fb1a0833347:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007fb1a083334d:   vmovq  %xmm1,%rax
  0x00007fb1a0833352:   shl    %rdi
  0x00007fb1a0833355:   mov    %edi,%r11d
  0x00007fb1a0833358:   shr    $0x20,%rdi
  0x00007fb1a083335c:   xor    %ecx,%ecx
  0x00007fb1a083335e:   crc32l %r11d,%ecx
  0x00007fb1a0833364:   xor    %ecx,%edi
  0x00007fb1a0833366:   shl    %rax
  0x00007fb1a0833369:   mov    %eax,%r11d
  0x00007fb1a083336c:   shr    $0x20,%rax
  0x00007fb1a0833370:   xor    %ecx,%ecx
  0x00007fb1a0833372:   crc32l %r11d,%ecx
  0x00007fb1a0833378:   xor    %ecx,%eax
  0x00007fb1a083337a:   xor    %eax,%edi
  0x00007fb1a083337c:   xor    %r9d,%edi
  0x00007fb1a083337f:   add    $0x90,%rsi
  0x00007fb1a0833386:   sub    $0xd8,%edx
  0x00007fb1a083338c:   jmpq   0x00007fb1a08332e6
  0x00007fb1a0833391:   mov    %edx,%eax
  0x00007fb1a0833393:   and    $0x7,%eax
  0x00007fb1a0833396:   neg    %eax
  0x00007fb1a0833398:   add    %edx,%eax
  0x00007fb1a083339a:   add    %rsi,%rax
  0x00007fb1a083339d:   cmp    %rax,%rsi
  0x00007fb1a08333a0:   jge    0x00007fb1a08333bf
  0x00007fb1a08333a2:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a08333ac:   data16 data16 xchg %ax,%ax
  0x00007fb1a08333b0:   crc32q (%rsi),%rdi
  0x00007fb1a08333b6:   add    $0x8,%rsi
  0x00007fb1a08333ba:   cmp    %rax,%rsi
  0x00007fb1a08333bd:   jl     0x00007fb1a08333b0
  0x00007fb1a08333bf:   and    $0x7,%edx
  0x00007fb1a08333c2:   mov    $0x1,%r9d
  0x00007fb1a08333c8:   cmp    %edx,%r9d
  0x00007fb1a08333cb:   jg     0x00007fb1a08333dd
  0x00007fb1a08333cd:   crc32b (%rsi),%edi
  0x00007fb1a08333d2:   inc    %rsi
  0x00007fb1a08333d5:   inc    %r9d
  0x00007fb1a08333d8:   cmp    %edx,%r9d
  0x00007fb1a08333db:   jle    0x00007fb1a08333cd
  0x00007fb1a08333dd:   mov    %edi,%eax
  0x00007fb1a08333df:   vzeroupper 
  0x00007fb1a08333e2:   leaveq 
  0x00007fb1a08333e3:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesAdler32 [0x00007fb1a0833400, 0x00007fb1a08335e7] (487 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0833400:   push   %rbp
  0x00007fb1a0833401:   mov    %rsp,%rbp
  0x00007fb1a0833404:   vmovq  %r12,%xmm8
  0x00007fb1a0833409:   vmovq  %r13,%xmm9
  0x00007fb1a083340e:   vmovq  %r14,%xmm10
  0x00007fb1a0833413:   vmovdqu 0x46b5f85(%rip),%ymm6        # 0x00007fb1a4ee93a0
  0x00007fb1a083341b:   vmovdqu 0x46b5f5d(%rip),%ymm7        # 0x00007fb1a4ee9380
  0x00007fb1a0833423:   mov    %rsi,%r9
  0x00007fb1a0833426:   mov    %edx,%r10d
  0x00007fb1a0833429:   mov    %edi,%r8d
  0x00007fb1a083342c:   shr    $0x10,%r8d
  0x00007fb1a0833430:   and    $0xffff,%edi
  0x00007fb1a0833436:   cmp    $0x20,%r10d
  0x00007fb1a083343a:   jb     0x00007fb1a083354f
  0x00007fb1a0833440:   vmovd  %edi,%xmm0
  0x00007fb1a0833444:   mov    $0x15b0,%r11d
  0x00007fb1a083344a:   cmp    %r10d,%r11d
  0x00007fb1a083344d:   cmova  %r10d,%r11d
  0x00007fb1a0833451:   lea    -0xf(%r11,%r9,1),%r13
  0x00007fb1a0833456:   cmp    %r13,%r9
  0x00007fb1a0833459:   jae    0x00007fb1a08334ac
  0x00007fb1a083345f:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a083346a:   data16 data16 xchg %ax,%ax
  0x00007fb1a083346e:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a0833479:   data16 data16 xchg %ax,%ax
  0x00007fb1a083347d:   data16 xchg %ax,%ax
  0x00007fb1a0833480:   vpxor  %ymm1,%ymm1,%ymm1
  0x00007fb1a0833484:   vbroadcastf128 (%r9),%ymm4
  0x00007fb1a0833489:   add    $0x10,%r9
  0x00007fb1a083348d:   vpshufb %ymm6,%ymm4,%ymm2
  0x00007fb1a0833492:   vpaddd %ymm2,%ymm0,%ymm0
  0x00007fb1a0833496:   vpaddd %ymm0,%ymm1,%ymm1
  0x00007fb1a083349a:   vpshufb %ymm7,%ymm4,%ymm3
  0x00007fb1a083349f:   vpaddd %ymm3,%ymm0,%ymm0
  0x00007fb1a08334a3:   vpaddd %ymm0,%ymm1,%ymm1
  0x00007fb1a08334a7:   cmp    %r13,%r9
  0x00007fb1a08334aa:   jb     0x00007fb1a0833484
  0x00007fb1a08334ac:   vpslld $0x3,%ymm1,%ymm1
  0x00007fb1a08334b1:   vpmulld 0x46b5f06(%rip),%ymm0,%ymm4        # 0x00007fb1a4ee93c0
  0x00007fb1a08334ba:   vextracti128 $0x1,%ymm0,%xmm2
  0x00007fb1a08334c0:   vextracti128 $0x1,%ymm1,%xmm3
  0x00007fb1a08334c6:   vextracti128 $0x1,%ymm4,%xmm5
  0x00007fb1a08334cc:   vpaddd %xmm2,%xmm0,%xmm0
  0x00007fb1a08334d0:   vpaddd %xmm3,%xmm1,%xmm1
  0x00007fb1a08334d4:   vpaddd %xmm5,%xmm4,%xmm4
  0x00007fb1a08334d8:   vphaddd %xmm0,%xmm0,%xmm0
  0x00007fb1a08334dd:   vphaddd %xmm1,%xmm1,%xmm1
  0x00007fb1a08334e2:   vphaddd %xmm4,%xmm4,%xmm4
  0x00007fb1a08334e7:   vphaddd %xmm0,%xmm0,%xmm0
  0x00007fb1a08334ec:   vphaddd %xmm1,%xmm1,%xmm1
  0x00007fb1a08334f1:   vphaddd %xmm4,%xmm4,%xmm4
  0x00007fb1a08334f6:   vpsubd %xmm4,%xmm1,%xmm1
  0x00007fb1a08334fa:   add    $0xf,%r13
  0x00007fb1a08334fe:   test   $0xf,%r11b
  0x00007fb1a0833502:   jne    0x00007fb1a0833564
  0x00007fb1a0833508:   sub    %r11d,%r10d
  0x00007fb1a083350b:   vmovd  %xmm0,%eax
  0x00007fb1a083350f:   xor    %edx,%edx
  0x00007fb1a0833511:   mov    $0xfff1,%ecx
  0x00007fb1a0833516:   div    %ecx
  0x00007fb1a0833518:   mov    %edx,%r12d
  0x00007fb1a083351b:   vmovd  %xmm1,%eax
  0x00007fb1a083351f:   add    %r8d,%eax
  0x00007fb1a0833522:   xor    %edx,%edx
  0x00007fb1a0833524:   mov    $0xfff1,%ecx
  0x00007fb1a0833529:   div    %ecx
  0x00007fb1a083352b:   mov    %edx,%r8d
  0x00007fb1a083352e:   test   %r10d,%r10d
  0x00007fb1a0833531:   je     0x00007fb1a0833541
  0x00007fb1a0833537:   vmovd  %r12d,%xmm0
  0x00007fb1a083353c:   jmpq   0x00007fb1a0833444
  0x00007fb1a0833541:   mov    %r8d,%eax
  0x00007fb1a0833544:   shl    $0x10,%eax
  0x00007fb1a0833547:   or     %r12d,%eax
  0x00007fb1a083354a:   jmpq   0x00007fb1a08335d6
  0x00007fb1a083354f:   mov    %edi,%r12d
  0x00007fb1a0833552:   lea    (%r9,%r10,1),%r13
  0x00007fb1a0833556:   test   %r10d,%r10d
  0x00007fb1a0833559:   jne    0x00007fb1a08335a0
  0x00007fb1a083355f:   jmpq   0x00007fb1a08335b3
  0x00007fb1a0833564:   vmovd  %xmm0,%r12d
  0x00007fb1a0833569:   vmovd  %xmm1,%eax
  0x00007fb1a083356d:   add    %eax,%r8d
  0x00007fb1a0833570:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a083357b:   data16 data16 xchg %ax,%ax
  0x00007fb1a083357f:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a083358a:   data16 data16 xchg %ax,%ax
  0x00007fb1a083358e:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a0833599:   data16 data16 xchg %ax,%ax
  0x00007fb1a083359d:   data16 xchg %ax,%ax
  0x00007fb1a08335a0:   movzbl (%r9),%eax
  0x00007fb1a08335a4:   add    %eax,%r12d
  0x00007fb1a08335a7:   add    $0x1,%r9
  0x00007fb1a08335ab:   add    %r12d,%r8d
  0x00007fb1a08335ae:   cmp    %r13,%r9
  0x00007fb1a08335b1:   jb     0x00007fb1a08335a0
  0x00007fb1a08335b3:   mov    %r12d,%eax
  0x00007fb1a08335b6:   xor    %edx,%edx
  0x00007fb1a08335b8:   mov    $0xfff1,%ecx
  0x00007fb1a08335bd:   div    %ecx
  0x00007fb1a08335bf:   mov    %edx,%r12d
  0x00007fb1a08335c2:   mov    %r8d,%eax
  0x00007fb1a08335c5:   xor    %edx,%edx
  0x00007fb1a08335c7:   mov    $0xfff1,%ecx
  0x00007fb1a08335cc:   div    %ecx
  0x00007fb1a08335ce:   shl    $0x10,%edx
  0x00007fb1a08335d1:   or     %r12d,%edx
  0x00007fb1a08335d4:   mov    %edx,%eax
  0x00007fb1a08335d6:   vmovq  %xmm10,%r14
  0x00007fb1a08335db:   vmovq  %xmm9,%r13
  0x00007fb1a08335e0:   vmovq  %xmm8,%r12
  0x00007fb1a08335e5:   leaveq 
  0x00007fb1a08335e6:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmSin [0x00007fb1a08335e7, 0x00007fb1a0833c76] (1679 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08335e7:   push   %rbp
  0x00007fb1a08335e8:   mov    %rsp,%rbp
  0x00007fb1a08335eb:   push   %rbx
  0x00007fb1a08335ec:   sub    $0x10,%rsp
  0x00007fb1a08335f0:   vmovsd %xmm0,0x8(%rsp)
  0x00007fb1a08335f6:   mov    0xc(%rsp),%eax
  0x00007fb1a08335fa:   vmovq  0x46b6a4e(%rip),%xmm1        # 0x00007fb1a4eea050
  0x00007fb1a0833602:   vmovq  0x46b6aa6(%rip),%xmm2        # 0x00007fb1a4eea0b0
  0x00007fb1a083360a:   and    $0x7fff0000,%eax
  0x00007fb1a083360f:   sub    $0x30300000,%eax
  0x00007fb1a0833614:   cmp    $0x10c50000,%eax
  0x00007fb1a0833619:   ja     0x00007fb1a0833769
  0x00007fb1a083361f:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007fb1a0833623:   vmovdqu 0x46b6ab5(%rip),%xmm5        # 0x00007fb1a4eea0e0
  0x00007fb1a083362b:   vmovq  0x46b6a9d(%rip),%xmm4        # 0x00007fb1a4eea0d0
  0x00007fb1a0833633:   vpand  %xmm0,%xmm4,%xmm4
  0x00007fb1a0833637:   vpor   %xmm4,%xmm5,%xmm5
  0x00007fb1a083363b:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007fb1a083363f:   vcvttsd2si %xmm1,%edx
  0x00007fb1a0833643:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007fb1a0833647:   vmovdqu 0x46b69e1(%rip),%xmm6        # 0x00007fb1a4eea030
  0x00007fb1a083364f:   movabs $0x3fb921fb54400000,%r8
  0x00007fb1a0833659:   vmovq  %r8,%xmm3
  0x00007fb1a083365e:   vmovdqu 0x46b6a0a(%rip),%xmm5        # 0x00007fb1a4eea070
  0x00007fb1a0833666:   vpshufd $0x44,%xmm0,%xmm4
  0x00007fb1a083366b:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007fb1a083366f:   vmovddup %xmm1,%xmm1
  0x00007fb1a0833673:   and    $0x3f,%edx
  0x00007fb1a0833676:   shl    $0x5,%edx
  0x00007fb1a0833679:   movabs $0x7fb1a4ee9780,%rax
  0x00007fb1a0833683:   add    %rdx,%rax
  0x00007fb1a0833686:   vmulpd %xmm1,%xmm6,%xmm6
  0x00007fb1a083368a:   vmulsd 0x46b6996(%rip),%xmm1,%xmm1        # 0x00007fb1a4eea028
  0x00007fb1a0833692:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fb1a0833696:   vmovq  0x8(%rax),%xmm7
  0x00007fb1a083369b:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007fb1a083369f:   vmovddup %xmm4,%xmm3
  0x00007fb1a08336a3:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007fb1a08336a7:   vpshufd $0x44,%xmm0,%xmm0
  0x00007fb1a08336ac:   vmovdqu (%rax),%xmm2
  0x00007fb1a08336b0:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a08336b4:   vsubpd %xmm6,%xmm0,%xmm0
  0x00007fb1a08336b8:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007fb1a08336bc:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fb1a08336c0:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a08336c4:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a08336c8:   vsubsd %xmm6,%xmm3,%xmm3
  0x00007fb1a08336cc:   vmovdqu 0x46b69bc(%rip),%xmm6        # 0x00007fb1a4eea090
  0x00007fb1a08336d4:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007fb1a08336d8:   vmovq  0x18(%rax),%xmm3
  0x00007fb1a08336dd:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fb1a08336e1:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007fb1a08336e5:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007fb1a08336e9:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007fb1a08336ed:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007fb1a08336f1:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007fb1a08336f5:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a08336f9:   vaddpd 0x46b697f(%rip),%xmm5,%xmm5        # 0x00007fb1a4eea080
  0x00007fb1a0833701:   vmulsd (%rax),%xmm4,%xmm4
  0x00007fb1a0833705:   vaddpd 0x46b6993(%rip),%xmm6,%xmm6        # 0x00007fb1a4eea0a0
  0x00007fb1a083370d:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0833711:   vmovdqu %xmm3,%xmm0
  0x00007fb1a0833715:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007fb1a083371a:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007fb1a083371e:   vmovdqu %xmm4,%xmm7
  0x00007fb1a0833722:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007fb1a0833726:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007fb1a083372a:   vmovq  0x8(%rax),%xmm5
  0x00007fb1a083372f:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007fb1a0833733:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fb1a0833737:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007fb1a083373c:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007fb1a0833740:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fb1a0833744:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007fb1a0833748:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fb1a083374c:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fb1a0833750:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fb1a0833754:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007fb1a0833758:   vmovdqu %xmm4,%xmm0
  0x00007fb1a083375c:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fb1a0833760:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fb1a0833764:   jmpq   0x00007fb1a0833c6f
  0x00007fb1a0833769:   jg     0x00007fb1a08337a7
  0x00007fb1a083376f:   shr    $0x14,%eax
  0x00007fb1a0833772:   cmp    $0xcfd,%eax
  0x00007fb1a0833777:   jne    0x00007fb1a083378a
  0x00007fb1a083377d:   vmulsd 0x46bb1db(%rip),%xmm0,%xmm0        # 0x00007fb1a4eee960
  0x00007fb1a0833785:   jmpq   0x00007fb1a0833c6f
  0x00007fb1a083378a:   vmovq  0x46b6936(%rip),%xmm3        # 0x00007fb1a4eea0c8
  0x00007fb1a0833792:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007fb1a0833796:   vsubsd %xmm0,%xmm3,%xmm3
  0x00007fb1a083379a:   vmulsd 0x46b691e(%rip),%xmm3,%xmm3        # 0x00007fb1a4eea0c0
  0x00007fb1a08337a2:   jmpq   0x00007fb1a0833c6f
  0x00007fb1a08337a7:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a08337ac:   and    $0x7ff0,%eax
  0x00007fb1a08337b1:   cmp    $0x7ff0,%eax
  0x00007fb1a08337b6:   je     0x00007fb1a0833c5c
  0x00007fb1a08337bc:   vpextrw $0x3,%xmm0,%ecx
  0x00007fb1a08337c1:   and    $0x7ff0,%ecx
  0x00007fb1a08337c7:   sub    $0x3f60,%ecx
  0x00007fb1a08337cd:   shr    $0x7,%ecx
  0x00007fb1a08337d0:   and    $0xfffc,%ecx
  0x00007fb1a08337d6:   movabs $0x7fb1a4ee9f80,%r11
  0x00007fb1a08337e0:   add    %r11,%rcx
  0x00007fb1a08337e3:   vmovq  %xmm0,%rax
  0x00007fb1a08337e8:   mov    0x14(%rcx),%r10d
  0x00007fb1a08337ec:   mov    0x18(%rcx),%r8d
  0x00007fb1a08337f0:   mov    %eax,%edx
  0x00007fb1a08337f2:   shr    $0x15,%rax
  0x00007fb1a08337f6:   or     $0x80000000,%eax
  0x00007fb1a08337fb:   shr    $0xb,%eax
  0x00007fb1a08337fe:   mov    %r10d,%r9d
  0x00007fb1a0833801:   imul   %rdx,%r10
  0x00007fb1a0833805:   imul   %rax,%r9
  0x00007fb1a0833809:   imul   %rax,%r8
  0x00007fb1a083380d:   mov    0x10(%rcx),%esi
  0x00007fb1a0833810:   mov    0xc(%rcx),%edi
  0x00007fb1a0833813:   mov    %r10d,%r11d
  0x00007fb1a0833816:   shr    $0x20,%r10
  0x00007fb1a083381a:   add    %r10,%r9
  0x00007fb1a083381d:   add    %r8,%r11
  0x00007fb1a0833820:   mov    %r11d,%r8d
  0x00007fb1a0833823:   shr    $0x20,%r11
  0x00007fb1a0833827:   add    %r11,%r9
  0x00007fb1a083382a:   mov    %esi,%r10d
  0x00007fb1a083382d:   imul   %rdx,%rsi
  0x00007fb1a0833831:   imul   %rax,%r10
  0x00007fb1a0833835:   mov    %edi,%r11d
  0x00007fb1a0833838:   imul   %rdx,%rdi
  0x00007fb1a083383c:   mov    %esi,%ebx
  0x00007fb1a083383e:   shr    $0x20,%rsi
  0x00007fb1a0833842:   add    %rbx,%r9
  0x00007fb1a0833845:   mov    %r9d,%ebx
  0x00007fb1a0833848:   shr    $0x20,%r9
  0x00007fb1a083384c:   add    %rsi,%r10
  0x00007fb1a083384f:   add    %r9,%r10
  0x00007fb1a0833852:   shl    $0x20,%rbx
  0x00007fb1a0833856:   or     %rbx,%r8
  0x00007fb1a0833859:   imul   %rax,%r11
  0x00007fb1a083385d:   mov    0x8(%rcx),%r9d
  0x00007fb1a0833861:   mov    0x4(%rcx),%esi
  0x00007fb1a0833864:   mov    %edi,%ebx
  0x00007fb1a0833866:   shr    $0x20,%rdi
  0x00007fb1a083386a:   add    %rbx,%r10
  0x00007fb1a083386d:   mov    %r10d,%ebx
  0x00007fb1a0833870:   shr    $0x20,%r10
  0x00007fb1a0833874:   add    %rdi,%r11
  0x00007fb1a0833877:   add    %r10,%r11
  0x00007fb1a083387a:   mov    %r9,%rdi
  0x00007fb1a083387d:   imul   %rdx,%r9
  0x00007fb1a0833881:   imul   %rax,%rdi
  0x00007fb1a0833885:   mov    %r9d,%r10d
  0x00007fb1a0833888:   shr    $0x20,%r9
  0x00007fb1a083388c:   add    %r10,%r11
  0x00007fb1a083388f:   mov    %r11d,%r10d
  0x00007fb1a0833892:   shr    $0x20,%r11
  0x00007fb1a0833896:   add    %r9,%rdi
  0x00007fb1a0833899:   add    %r11,%rdi
  0x00007fb1a083389c:   mov    %rsi,%r9
  0x00007fb1a083389f:   imul   %rdx,%rsi
  0x00007fb1a08338a3:   imul   %rax,%r9
  0x00007fb1a08338a7:   shl    $0x20,%r10
  0x00007fb1a08338ab:   or     %rbx,%r10
  0x00007fb1a08338ae:   mov    (%rcx),%eax
  0x00007fb1a08338b0:   mov    %esi,%r11d
  0x00007fb1a08338b3:   shr    $0x20,%rsi
  0x00007fb1a08338b7:   add    %r11,%rdi
  0x00007fb1a08338ba:   mov    %edi,%r11d
  0x00007fb1a08338bd:   shr    $0x20,%rdi
  0x00007fb1a08338c1:   add    %rsi,%r9
  0x00007fb1a08338c4:   add    %rdi,%r9
  0x00007fb1a08338c7:   imul   %rax,%rdx
  0x00007fb1a08338cb:   vpextrw $0x3,%xmm0,%ebx
  0x00007fb1a08338d0:   movabs $0x7fb1a4ee9f80,%rdi
  0x00007fb1a08338da:   sub    %rdi,%rcx
  0x00007fb1a08338dd:   add    %ecx,%ecx
  0x00007fb1a08338df:   add    %ecx,%ecx
  0x00007fb1a08338e1:   add    %ecx,%ecx
  0x00007fb1a08338e3:   add    $0x13,%ecx
  0x00007fb1a08338e6:   mov    $0x8000,%esi
  0x00007fb1a08338eb:   and    %ebx,%esi
  0x00007fb1a08338ed:   shr    $0x4,%ebx
  0x00007fb1a08338f0:   and    $0x7ff,%ebx
  0x00007fb1a08338f6:   sub    $0x3ff,%ebx
  0x00007fb1a08338fc:   sub    %ebx,%ecx
  0x00007fb1a08338fe:   add    %rdx,%r9
  0x00007fb1a0833901:   mov    %ecx,%edx
  0x00007fb1a0833903:   add    $0x20,%edx
  0x00007fb1a0833906:   cmp    $0x1,%ecx
  0x00007fb1a0833909:   jl     0x00007fb1a0833bac
  0x00007fb1a083390f:   neg    %ecx
  0x00007fb1a0833911:   add    $0x1d,%ecx
  0x00007fb1a0833914:   shl    %cl,%r9d
  0x00007fb1a0833917:   mov    %r9d,%edi
  0x00007fb1a083391a:   and    $0x1fffffff,%r9d
  0x00007fb1a0833921:   test   $0x10000000,%r9d
  0x00007fb1a0833928:   jne    0x00007fb1a0833bd9
  0x00007fb1a083392e:   shr    %cl,%r9d
  0x00007fb1a0833931:   mov    $0x0,%ebx
  0x00007fb1a0833936:   shl    $0x20,%r9
  0x00007fb1a083393a:   or     %r11,%r9
  0x00007fb1a083393d:   cmp    $0x0,%r9
  0x00007fb1a0833941:   je     0x00007fb1a0833b50
  0x00007fb1a0833947:   bsr    %r9,%r11
  0x00007fb1a083394b:   mov    $0x1d,%ecx
  0x00007fb1a0833950:   sub    %r11d,%ecx
  0x00007fb1a0833953:   jle    0x00007fb1a0833b89
  0x00007fb1a0833959:   shl    %cl,%r9
  0x00007fb1a083395c:   mov    %r10,%rax
  0x00007fb1a083395f:   shl    %cl,%r10
  0x00007fb1a0833962:   add    %ecx,%edx
  0x00007fb1a0833964:   neg    %ecx
  0x00007fb1a0833966:   add    $0x40,%ecx
  0x00007fb1a0833969:   shr    %cl,%rax
  0x00007fb1a083396c:   shr    %cl,%r8
  0x00007fb1a083396f:   or     %rax,%r9
  0x00007fb1a0833972:   or     %r8,%r10
  0x00007fb1a0833975:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007fb1a083397a:   shr    %r10
  0x00007fb1a083397d:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007fb1a0833982:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007fb1a0833986:   shl    $0x4,%edx
  0x00007fb1a0833989:   neg    %edx
  0x00007fb1a083398b:   add    $0x3ff0,%edx
  0x00007fb1a0833991:   or     %esi,%edx
  0x00007fb1a0833993:   xor    %ebx,%edx
  0x00007fb1a0833995:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007fb1a083399a:   vmovq  0x46b66b6(%rip),%xmm2        # 0x00007fb1a4eea058
  0x00007fb1a08339a2:   vmovq  0x46b66b6(%rip),%xmm6        # 0x00007fb1a4eea060
  0x00007fb1a08339aa:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007fb1a08339ae:   sub    $0x3f0,%edx
  0x00007fb1a08339b4:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007fb1a08339b9:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007fb1a08339bd:   shl    $0x10,%esi
  0x00007fb1a08339c0:   sar    $0x1f,%esi
  0x00007fb1a08339c3:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007fb1a08339c7:   vmovdqu %xmm0,%xmm1
  0x00007fb1a08339cb:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007fb1a08339cf:   shr    $0x1d,%edi
  0x00007fb1a08339d2:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fb1a08339d6:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007fb1a08339da:   add    %esi,%edi
  0x00007fb1a08339dc:   xor    %esi,%edi
  0x00007fb1a08339de:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007fb1a08339e2:   mov    %edi,%eax
  0x00007fb1a08339e4:   vaddsd %xmm3,%xmm6,%xmm6
  0x00007fb1a08339e8:   vmovdqu %xmm0,%xmm2
  0x00007fb1a08339ec:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fb1a08339f0:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007fb1a08339f4:   vaddsd %xmm2,%xmm6,%xmm6
  0x00007fb1a08339f8:   vmovq  0x46b6650(%rip),%xmm1        # 0x00007fb1a4eea050
  0x00007fb1a0833a00:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007fb1a0833a04:   vmovq  0x46b66d4(%rip),%xmm5        # 0x00007fb1a4eea0e0
  0x00007fb1a0833a0c:   vmovq  0x46b66bc(%rip),%xmm4        # 0x00007fb1a4eea0d0
  0x00007fb1a0833a14:   vpand  %xmm0,%xmm4,%xmm4
  0x00007fb1a0833a18:   vpor   %xmm4,%xmm5,%xmm5
  0x00007fb1a0833a1c:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007fb1a0833a20:   vcvttsd2si %xmm1,%edx
  0x00007fb1a0833a24:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007fb1a0833a28:   vmovq  0x46b6610(%rip),%xmm3        # 0x00007fb1a4eea040
  0x00007fb1a0833a30:   vmovdqu 0x46b65f8(%rip),%xmm2        # 0x00007fb1a4eea030
  0x00007fb1a0833a38:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007fb1a0833a3c:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007fb1a0833a40:   shl    $0x3,%eax
  0x00007fb1a0833a43:   add    $0x1c7600,%edx
  0x00007fb1a0833a49:   vmovdqu %xmm0,%xmm4
  0x00007fb1a0833a4d:   add    %eax,%edx
  0x00007fb1a0833a4f:   and    $0x3f,%edx
  0x00007fb1a0833a52:   vmovdqu 0x46b6616(%rip),%xmm5        # 0x00007fb1a4eea070
  0x00007fb1a0833a5a:   movabs $0x7fb1a4ee9780,%rax
  0x00007fb1a0833a64:   shl    $0x5,%edx
  0x00007fb1a0833a67:   add    %rdx,%rax
  0x00007fb1a0833a6a:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007fb1a0833a6e:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007fb1a0833a72:   vmulsd 0x46b65ae(%rip),%xmm1,%xmm1        # 0x00007fb1a4eea028
  0x00007fb1a0833a7a:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fb1a0833a7e:   vmovq  0x8(%rax),%xmm7
  0x00007fb1a0833a83:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0833a87:   vmovdqu %xmm4,%xmm3
  0x00007fb1a0833a8b:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007fb1a0833a8f:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0833a93:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007fb1a0833a97:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007fb1a0833a9b:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fb1a0833a9f:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0833aa3:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0833aa7:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007fb1a0833aab:   vmovdqu (%rax),%xmm2
  0x00007fb1a0833aaf:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007fb1a0833ab3:   vmovq  0x18(%rax),%xmm3
  0x00007fb1a0833ab8:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fb1a0833abc:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007fb1a0833ac0:   vsubsd %xmm6,%xmm1,%xmm1
  0x00007fb1a0833ac4:   vmovdqu 0x46b65c4(%rip),%xmm6        # 0x00007fb1a4eea090
  0x00007fb1a0833acc:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007fb1a0833ad0:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007fb1a0833ad4:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007fb1a0833ad8:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007fb1a0833adc:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0833ae0:   vaddpd 0x46b6598(%rip),%xmm5,%xmm5        # 0x00007fb1a4eea080
  0x00007fb1a0833ae8:   vmulsd (%rax),%xmm4,%xmm4
  0x00007fb1a0833aec:   vaddpd 0x46b65ac(%rip),%xmm6,%xmm6        # 0x00007fb1a4eea0a0
  0x00007fb1a0833af4:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0833af8:   vmovdqu %xmm3,%xmm0
  0x00007fb1a0833afc:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007fb1a0833b01:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007fb1a0833b05:   vmovdqu %xmm4,%xmm7
  0x00007fb1a0833b09:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007fb1a0833b0d:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007fb1a0833b11:   vmovq  0x8(%rax),%xmm5
  0x00007fb1a0833b16:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007fb1a0833b1a:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fb1a0833b1e:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007fb1a0833b23:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007fb1a0833b27:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fb1a0833b2b:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007fb1a0833b2f:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fb1a0833b33:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fb1a0833b37:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fb1a0833b3b:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007fb1a0833b3f:   vmovdqu %xmm4,%xmm0
  0x00007fb1a0833b43:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fb1a0833b47:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fb1a0833b4b:   jmpq   0x00007fb1a0833c6f
  0x00007fb1a0833b50:   add    $0x40,%edx
  0x00007fb1a0833b53:   mov    %r10,%r9
  0x00007fb1a0833b56:   mov    %r8,%r10
  0x00007fb1a0833b59:   mov    $0x0,%r8d
  0x00007fb1a0833b5f:   cmp    $0x0,%r9
  0x00007fb1a0833b63:   jne    0x00007fb1a0833947
  0x00007fb1a0833b69:   add    $0x40,%edx
  0x00007fb1a0833b6c:   mov    %r10,%r9
  0x00007fb1a0833b6f:   mov    %r8,%r10
  0x00007fb1a0833b72:   cmp    $0x0,%r9
  0x00007fb1a0833b76:   jne    0x00007fb1a0833947
  0x00007fb1a0833b7c:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0833b80:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007fb1a0833b84:   jmpq   0x00007fb1a08339f8
  0x00007fb1a0833b89:   je     0x00007fb1a0833975
  0x00007fb1a0833b8f:   neg    %ecx
  0x00007fb1a0833b91:   shr    %cl,%r10
  0x00007fb1a0833b94:   mov    %r9,%rax
  0x00007fb1a0833b97:   shr    %cl,%r9
  0x00007fb1a0833b9a:   sub    %ecx,%edx
  0x00007fb1a0833b9c:   neg    %ecx
  0x00007fb1a0833b9e:   add    $0x40,%ecx
  0x00007fb1a0833ba1:   shl    %cl,%rax
  0x00007fb1a0833ba4:   or     %rax,%r10
  0x00007fb1a0833ba7:   jmpq   0x00007fb1a0833975
  0x00007fb1a0833bac:   neg    %ecx
  0x00007fb1a0833bae:   shl    $0x20,%r9
  0x00007fb1a0833bb2:   or     %r11,%r9
  0x00007fb1a0833bb5:   shl    %cl,%r9
  0x00007fb1a0833bb8:   mov    %r9,%rdi
  0x00007fb1a0833bbb:   test   $0x80000000,%r9d
  0x00007fb1a0833bc2:   jne    0x00007fb1a0833c1b
  0x00007fb1a0833bc8:   shr    %cl,%r9d
  0x00007fb1a0833bcb:   mov    $0x0,%ebx
  0x00007fb1a0833bd0:   shr    $0x3,%rdi
  0x00007fb1a0833bd4:   jmpq   0x00007fb1a083393d
  0x00007fb1a0833bd9:   shr    %cl,%r9d
  0x00007fb1a0833bdc:   mov    $0x20000000,%ebx
  0x00007fb1a0833be1:   shr    %cl,%ebx
  0x00007fb1a0833be3:   shl    $0x20,%r9
  0x00007fb1a0833be7:   or     %r11,%r9
  0x00007fb1a0833bea:   shl    $0x20,%rbx
  0x00007fb1a0833bee:   add    $0x20000000,%edi
  0x00007fb1a0833bf4:   mov    $0x0,%ecx
  0x00007fb1a0833bf9:   mov    $0x0,%r11d
  0x00007fb1a0833bff:   sub    %r8,%rcx
  0x00007fb1a0833c02:   sbb    %r10,%r11
  0x00007fb1a0833c05:   sbb    %r9,%rbx
  0x00007fb1a0833c08:   mov    %rcx,%r8
  0x00007fb1a0833c0b:   mov    %r11,%r10
  0x00007fb1a0833c0e:   mov    %rbx,%r9
  0x00007fb1a0833c11:   mov    $0x8000,%ebx
  0x00007fb1a0833c16:   jmpq   0x00007fb1a083393d
  0x00007fb1a0833c1b:   shr    %cl,%r9d
  0x00007fb1a0833c1e:   movabs $0x100000000,%rbx
  0x00007fb1a0833c28:   shr    %cl,%rbx
  0x00007fb1a0833c2b:   mov    $0x0,%ecx
  0x00007fb1a0833c30:   mov    $0x0,%r11d
  0x00007fb1a0833c36:   sub    %r8,%rcx
  0x00007fb1a0833c39:   sbb    %r10,%r11
  0x00007fb1a0833c3c:   sbb    %r9,%rbx
  0x00007fb1a0833c3f:   mov    %rcx,%r8
  0x00007fb1a0833c42:   mov    %r11,%r10
  0x00007fb1a0833c45:   mov    %rbx,%r9
  0x00007fb1a0833c48:   mov    $0x8000,%ebx
  0x00007fb1a0833c4d:   shr    $0x3,%rdi
  0x00007fb1a0833c51:   add    $0x20000000,%edi
  0x00007fb1a0833c57:   jmpq   0x00007fb1a083393d
  0x00007fb1a0833c5c:   vmovq  0x8(%rsp),%xmm0
  0x00007fb1a0833c62:   vmulsd 0x46b63de(%rip),%xmm0,%xmm0        # 0x00007fb1a4eea048
  0x00007fb1a0833c6a:   vmovq  %xmm0,(%rsp)
  0x00007fb1a0833c6f:   add    $0x10,%rsp
  0x00007fb1a0833c73:   pop    %rbx
  0x00007fb1a0833c74:   leaveq 
  0x00007fb1a0833c75:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmCos [0x00007fb1a0833c76, 0x00007fb1a08342e7] (1649 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0833c76:   push   %rbp
  0x00007fb1a0833c77:   mov    %rsp,%rbp
  0x00007fb1a0833c7a:   push   %rbx
  0x00007fb1a0833c7b:   sub    $0x10,%rsp
  0x00007fb1a0833c7f:   vmovsd %xmm0,0x8(%rsp)
  0x00007fb1a0833c85:   mov    0xc(%rsp),%eax
  0x00007fb1a0833c89:   vmovq  0x46b63bf(%rip),%xmm1        # 0x00007fb1a4eea050
  0x00007fb1a0833c91:   and    $0x7fff0000,%eax
  0x00007fb1a0833c96:   sub    $0x30300000,%eax
  0x00007fb1a0833c9b:   cmp    $0x10c50000,%eax
  0x00007fb1a0833ca0:   ja     0x00007fb1a0833dec
  0x00007fb1a0833ca6:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007fb1a0833caa:   vmovdqu 0x46b642e(%rip),%xmm5        # 0x00007fb1a4eea0e0
  0x00007fb1a0833cb2:   vmovq  0x46b6416(%rip),%xmm4        # 0x00007fb1a4eea0d0
  0x00007fb1a0833cba:   vpand  %xmm0,%xmm4,%xmm4
  0x00007fb1a0833cbe:   vpor   %xmm4,%xmm5,%xmm5
  0x00007fb1a0833cc2:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007fb1a0833cc6:   vcvttsd2si %xmm1,%edx
  0x00007fb1a0833cca:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007fb1a0833cce:   vmovdqu 0x46b635a(%rip),%xmm2        # 0x00007fb1a4eea030
  0x00007fb1a0833cd6:   vmovq  0x46b6362(%rip),%xmm3        # 0x00007fb1a4eea040
  0x00007fb1a0833cde:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007fb1a0833ce2:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007fb1a0833ce6:   add    $0x1c7610,%rdx
  0x00007fb1a0833ced:   vmovdqu %xmm0,%xmm4
  0x00007fb1a0833cf1:   and    $0x3f,%rdx
  0x00007fb1a0833cf5:   vmovdqu 0x46b6373(%rip),%xmm5        # 0x00007fb1a4eea070
  0x00007fb1a0833cfd:   movabs $0x7fb1a4ee9780,%rax
  0x00007fb1a0833d07:   shl    $0x5,%rdx
  0x00007fb1a0833d0b:   add    %rdx,%rax
  0x00007fb1a0833d0e:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007fb1a0833d12:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007fb1a0833d16:   vmulsd 0x46b630a(%rip),%xmm1,%xmm1        # 0x00007fb1a4eea028
  0x00007fb1a0833d1e:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fb1a0833d22:   vmovq  0x8(%rax),%xmm7
  0x00007fb1a0833d27:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0833d2b:   vmovdqu %xmm4,%xmm3
  0x00007fb1a0833d2f:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007fb1a0833d33:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0833d37:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007fb1a0833d3b:   vmovdqu 0x46b634d(%rip),%xmm6        # 0x00007fb1a4eea090
  0x00007fb1a0833d43:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007fb1a0833d47:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fb1a0833d4b:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0833d4f:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0833d53:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007fb1a0833d57:   vmovdqu (%rax),%xmm2
  0x00007fb1a0833d5b:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007fb1a0833d5f:   vmovq  0x18(%rax),%xmm3
  0x00007fb1a0833d64:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fb1a0833d68:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007fb1a0833d6c:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007fb1a0833d70:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007fb1a0833d74:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007fb1a0833d78:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007fb1a0833d7c:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0833d80:   vaddpd 0x46b62f8(%rip),%xmm5,%xmm5        # 0x00007fb1a4eea080
  0x00007fb1a0833d88:   vmulsd (%rax),%xmm4,%xmm4
  0x00007fb1a0833d8c:   vaddpd 0x46b630c(%rip),%xmm6,%xmm6        # 0x00007fb1a4eea0a0
  0x00007fb1a0833d94:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0833d98:   vmovdqu %xmm3,%xmm0
  0x00007fb1a0833d9c:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007fb1a0833da1:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007fb1a0833da5:   vmovdqu %xmm4,%xmm7
  0x00007fb1a0833da9:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007fb1a0833dad:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007fb1a0833db1:   vmovq  0x8(%rax),%xmm5
  0x00007fb1a0833db6:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007fb1a0833dba:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fb1a0833dbe:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007fb1a0833dc3:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007fb1a0833dc7:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fb1a0833dcb:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007fb1a0833dcf:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fb1a0833dd3:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fb1a0833dd7:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fb1a0833ddb:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007fb1a0833ddf:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fb1a0833de3:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007fb1a0833de7:   jmpq   0x00007fb1a08342e0
  0x00007fb1a0833dec:   jg     0x00007fb1a0833e16
  0x00007fb1a0833df2:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0833df7:   and    $0x7fff,%eax
  0x00007fb1a0833dfc:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a0833e01:   vmovq  0x46b62e7(%rip),%xmm1        # 0x00007fb1a4eea0f0
  0x00007fb1a0833e09:   vsubsd %xmm0,%xmm1,%xmm1
  0x00007fb1a0833e0d:   vmovdqu %xmm1,%xmm0
  0x00007fb1a0833e11:   jmpq   0x00007fb1a08342e0
  0x00007fb1a0833e16:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0833e1b:   and    $0x7ff0,%eax
  0x00007fb1a0833e20:   cmp    $0x7ff0,%eax
  0x00007fb1a0833e25:   je     0x00007fb1a08342cd
  0x00007fb1a0833e2b:   vpextrw $0x3,%xmm0,%ecx
  0x00007fb1a0833e30:   and    $0x7ff0,%ecx
  0x00007fb1a0833e36:   sub    $0x3f60,%ecx
  0x00007fb1a0833e3c:   shr    $0x7,%ecx
  0x00007fb1a0833e3f:   and    $0xfffc,%ecx
  0x00007fb1a0833e45:   movabs $0x7fb1a4ee9f80,%r11
  0x00007fb1a0833e4f:   add    %r11,%rcx
  0x00007fb1a0833e52:   vmovq  %xmm0,%rax
  0x00007fb1a0833e57:   mov    0x14(%rcx),%r10d
  0x00007fb1a0833e5b:   mov    0x18(%rcx),%r8d
  0x00007fb1a0833e5f:   mov    %eax,%edx
  0x00007fb1a0833e61:   shr    $0x15,%rax
  0x00007fb1a0833e65:   or     $0x80000000,%eax
  0x00007fb1a0833e6a:   shr    $0xb,%eax
  0x00007fb1a0833e6d:   mov    %r10d,%r9d
  0x00007fb1a0833e70:   imul   %rdx,%r10
  0x00007fb1a0833e74:   imul   %rax,%r9
  0x00007fb1a0833e78:   imul   %rax,%r8
  0x00007fb1a0833e7c:   mov    0x10(%rcx),%esi
  0x00007fb1a0833e7f:   mov    0xc(%rcx),%edi
  0x00007fb1a0833e82:   mov    %r10d,%r11d
  0x00007fb1a0833e85:   shr    $0x20,%r10
  0x00007fb1a0833e89:   add    %r10,%r9
  0x00007fb1a0833e8c:   add    %r8,%r11
  0x00007fb1a0833e8f:   mov    %r11d,%r8d
  0x00007fb1a0833e92:   shr    $0x20,%r11
  0x00007fb1a0833e96:   add    %r11,%r9
  0x00007fb1a0833e99:   mov    %esi,%r10d
  0x00007fb1a0833e9c:   imul   %rdx,%rsi
  0x00007fb1a0833ea0:   imul   %rax,%r10
  0x00007fb1a0833ea4:   mov    %edi,%r11d
  0x00007fb1a0833ea7:   imul   %rdx,%rdi
  0x00007fb1a0833eab:   mov    %esi,%ebx
  0x00007fb1a0833ead:   shr    $0x20,%rsi
  0x00007fb1a0833eb1:   add    %rbx,%r9
  0x00007fb1a0833eb4:   mov    %r9d,%ebx
  0x00007fb1a0833eb7:   shr    $0x20,%r9
  0x00007fb1a0833ebb:   add    %rsi,%r10
  0x00007fb1a0833ebe:   add    %r9,%r10
  0x00007fb1a0833ec1:   shl    $0x20,%rbx
  0x00007fb1a0833ec5:   or     %rbx,%r8
  0x00007fb1a0833ec8:   imul   %rax,%r11
  0x00007fb1a0833ecc:   mov    0x8(%rcx),%r9d
  0x00007fb1a0833ed0:   mov    0x4(%rcx),%esi
  0x00007fb1a0833ed3:   mov    %edi,%ebx
  0x00007fb1a0833ed5:   shr    $0x20,%rdi
  0x00007fb1a0833ed9:   add    %rbx,%r10
  0x00007fb1a0833edc:   mov    %r10d,%ebx
  0x00007fb1a0833edf:   shr    $0x20,%r10
  0x00007fb1a0833ee3:   add    %rdi,%r11
  0x00007fb1a0833ee6:   add    %r10,%r11
  0x00007fb1a0833ee9:   mov    %r9,%rdi
  0x00007fb1a0833eec:   imul   %rdx,%r9
  0x00007fb1a0833ef0:   imul   %rax,%rdi
  0x00007fb1a0833ef4:   mov    %r9d,%r10d
  0x00007fb1a0833ef7:   shr    $0x20,%r9
  0x00007fb1a0833efb:   add    %r10,%r11
  0x00007fb1a0833efe:   mov    %r11d,%r10d
  0x00007fb1a0833f01:   shr    $0x20,%r11
  0x00007fb1a0833f05:   add    %r9,%rdi
  0x00007fb1a0833f08:   add    %r11,%rdi
  0x00007fb1a0833f0b:   mov    %rsi,%r9
  0x00007fb1a0833f0e:   imul   %rdx,%rsi
  0x00007fb1a0833f12:   imul   %rax,%r9
  0x00007fb1a0833f16:   shl    $0x20,%r10
  0x00007fb1a0833f1a:   or     %rbx,%r10
  0x00007fb1a0833f1d:   mov    (%rcx),%eax
  0x00007fb1a0833f1f:   mov    %esi,%r11d
  0x00007fb1a0833f22:   shr    $0x20,%rsi
  0x00007fb1a0833f26:   add    %r11,%rdi
  0x00007fb1a0833f29:   mov    %edi,%r11d
  0x00007fb1a0833f2c:   shr    $0x20,%rdi
  0x00007fb1a0833f30:   add    %rsi,%r9
  0x00007fb1a0833f33:   add    %rdi,%r9
  0x00007fb1a0833f36:   imul   %rax,%rdx
  0x00007fb1a0833f3a:   vpextrw $0x3,%xmm0,%ebx
  0x00007fb1a0833f3f:   movabs $0x7fb1a4ee9f80,%rdi
  0x00007fb1a0833f49:   sub    %rdi,%rcx
  0x00007fb1a0833f4c:   add    %ecx,%ecx
  0x00007fb1a0833f4e:   add    %ecx,%ecx
  0x00007fb1a0833f50:   add    %ecx,%ecx
  0x00007fb1a0833f52:   add    $0x13,%ecx
  0x00007fb1a0833f55:   mov    $0x8000,%esi
  0x00007fb1a0833f5a:   and    %ebx,%esi
  0x00007fb1a0833f5c:   shr    $0x4,%ebx
  0x00007fb1a0833f5f:   and    $0x7ff,%ebx
  0x00007fb1a0833f65:   sub    $0x3ff,%ebx
  0x00007fb1a0833f6b:   sub    %ebx,%ecx
  0x00007fb1a0833f6d:   add    %rdx,%r9
  0x00007fb1a0833f70:   mov    %ecx,%edx
  0x00007fb1a0833f72:   add    $0x20,%edx
  0x00007fb1a0833f75:   cmp    $0x1,%ecx
  0x00007fb1a0833f78:   jl     0x00007fb1a083421d
  0x00007fb1a0833f7e:   neg    %ecx
  0x00007fb1a0833f80:   add    $0x1d,%ecx
  0x00007fb1a0833f83:   shl    %cl,%r9d
  0x00007fb1a0833f86:   mov    %r9d,%edi
  0x00007fb1a0833f89:   and    $0x1fffffff,%r9d
  0x00007fb1a0833f90:   test   $0x10000000,%r9d
  0x00007fb1a0833f97:   jne    0x00007fb1a083424a
  0x00007fb1a0833f9d:   shr    %cl,%r9d
  0x00007fb1a0833fa0:   mov    $0x0,%ebx
  0x00007fb1a0833fa5:   shl    $0x20,%r9
  0x00007fb1a0833fa9:   or     %r11,%r9
  0x00007fb1a0833fac:   cmp    $0x0,%r9
  0x00007fb1a0833fb0:   je     0x00007fb1a08341c1
  0x00007fb1a0833fb6:   bsr    %r9,%r11
  0x00007fb1a0833fba:   mov    $0x1d,%ecx
  0x00007fb1a0833fbf:   sub    %r11d,%ecx
  0x00007fb1a0833fc2:   jle    0x00007fb1a08341fa
  0x00007fb1a0833fc8:   shl    %cl,%r9
  0x00007fb1a0833fcb:   mov    %r10,%rax
  0x00007fb1a0833fce:   shl    %cl,%r10
  0x00007fb1a0833fd1:   add    %ecx,%edx
  0x00007fb1a0833fd3:   neg    %ecx
  0x00007fb1a0833fd5:   add    $0x40,%ecx
  0x00007fb1a0833fd8:   shr    %cl,%rax
  0x00007fb1a0833fdb:   shr    %cl,%r8
  0x00007fb1a0833fde:   or     %rax,%r9
  0x00007fb1a0833fe1:   or     %r8,%r10
  0x00007fb1a0833fe4:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007fb1a0833fe9:   shr    %r10
  0x00007fb1a0833fec:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007fb1a0833ff1:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007fb1a0833ff5:   shl    $0x4,%edx
  0x00007fb1a0833ff8:   neg    %edx
  0x00007fb1a0833ffa:   add    $0x3ff0,%edx
  0x00007fb1a0834000:   or     %esi,%edx
  0x00007fb1a0834002:   xor    %ebx,%edx
  0x00007fb1a0834004:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007fb1a0834009:   vmovq  0x46b6047(%rip),%xmm2        # 0x00007fb1a4eea058
  0x00007fb1a0834011:   vmovq  0x46b6047(%rip),%xmm6        # 0x00007fb1a4eea060
  0x00007fb1a0834019:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007fb1a083401d:   sub    $0x3f0,%edx
  0x00007fb1a0834023:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007fb1a0834028:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007fb1a083402c:   shl    $0x10,%esi
  0x00007fb1a083402f:   sar    $0x1f,%esi
  0x00007fb1a0834032:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007fb1a0834036:   vmovdqu %xmm0,%xmm1
  0x00007fb1a083403a:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007fb1a083403e:   shr    $0x1d,%edi
  0x00007fb1a0834041:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fb1a0834045:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007fb1a0834049:   add    %esi,%edi
  0x00007fb1a083404b:   xor    %esi,%edi
  0x00007fb1a083404d:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007fb1a0834051:   mov    %edi,%eax
  0x00007fb1a0834053:   vaddsd %xmm3,%xmm6,%xmm6
  0x00007fb1a0834057:   vmovdqu %xmm0,%xmm2
  0x00007fb1a083405b:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fb1a083405f:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007fb1a0834063:   vaddsd %xmm2,%xmm6,%xmm6
  0x00007fb1a0834067:   vmovq  0x46b5fe1(%rip),%xmm1        # 0x00007fb1a4eea050
  0x00007fb1a083406f:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007fb1a0834073:   vmovq  0x46b6065(%rip),%xmm5        # 0x00007fb1a4eea0e0
  0x00007fb1a083407b:   vmovq  0x46b604d(%rip),%xmm4        # 0x00007fb1a4eea0d0
  0x00007fb1a0834083:   vpand  %xmm0,%xmm4,%xmm4
  0x00007fb1a0834087:   vpor   %xmm4,%xmm5,%xmm5
  0x00007fb1a083408b:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007fb1a083408f:   vcvttsd2si %xmm1,%rdx
  0x00007fb1a0834094:   vcvtsi2sd %rdx,%xmm1,%xmm1
  0x00007fb1a0834099:   vmovq  0x46b5f9f(%rip),%xmm3        # 0x00007fb1a4eea040
  0x00007fb1a08340a1:   vmovdqu 0x46b5f87(%rip),%xmm2        # 0x00007fb1a4eea030
  0x00007fb1a08340a9:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007fb1a08340ad:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007fb1a08340b1:   shl    $0x3,%eax
  0x00007fb1a08340b4:   add    $0x1c7610,%edx
  0x00007fb1a08340ba:   vmovdqu %xmm0,%xmm4
  0x00007fb1a08340be:   add    %eax,%edx
  0x00007fb1a08340c0:   and    $0x3f,%edx
  0x00007fb1a08340c3:   vmovdqu 0x46b5fa5(%rip),%xmm5        # 0x00007fb1a4eea070
  0x00007fb1a08340cb:   movabs $0x7fb1a4ee9780,%rax
  0x00007fb1a08340d5:   shl    $0x5,%edx
  0x00007fb1a08340d8:   add    %rdx,%rax
  0x00007fb1a08340db:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007fb1a08340df:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007fb1a08340e3:   vmulsd 0x46b5f3d(%rip),%xmm1,%xmm1        # 0x00007fb1a4eea028
  0x00007fb1a08340eb:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fb1a08340ef:   vmovq  0x8(%rax),%xmm7
  0x00007fb1a08340f4:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007fb1a08340f8:   vmovdqu %xmm4,%xmm3
  0x00007fb1a08340fc:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007fb1a0834100:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0834104:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007fb1a0834108:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007fb1a083410c:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fb1a0834110:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0834114:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834118:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007fb1a083411c:   vmovdqu (%rax),%xmm2
  0x00007fb1a0834120:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007fb1a0834124:   vmovq  0x18(%rax),%xmm3
  0x00007fb1a0834129:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fb1a083412d:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007fb1a0834131:   vsubsd %xmm6,%xmm1,%xmm1
  0x00007fb1a0834135:   vmovdqu 0x46b5f53(%rip),%xmm6        # 0x00007fb1a4eea090
  0x00007fb1a083413d:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007fb1a0834141:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007fb1a0834145:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007fb1a0834149:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007fb1a083414d:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834151:   vaddpd 0x46b5f27(%rip),%xmm5,%xmm5        # 0x00007fb1a4eea080
  0x00007fb1a0834159:   vmulsd (%rax),%xmm4,%xmm4
  0x00007fb1a083415d:   vaddpd 0x46b5f3b(%rip),%xmm6,%xmm6        # 0x00007fb1a4eea0a0
  0x00007fb1a0834165:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0834169:   vmovdqu %xmm3,%xmm0
  0x00007fb1a083416d:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007fb1a0834172:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007fb1a0834176:   vmovdqu %xmm4,%xmm7
  0x00007fb1a083417a:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007fb1a083417e:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007fb1a0834182:   vmovq  0x8(%rax),%xmm5
  0x00007fb1a0834187:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007fb1a083418b:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fb1a083418f:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007fb1a0834194:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007fb1a0834198:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fb1a083419c:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007fb1a08341a0:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fb1a08341a4:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fb1a08341a8:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fb1a08341ac:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007fb1a08341b0:   vmovdqu %xmm4,%xmm0
  0x00007fb1a08341b4:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fb1a08341b8:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fb1a08341bc:   jmpq   0x00007fb1a08342e0
  0x00007fb1a08341c1:   add    $0x40,%edx
  0x00007fb1a08341c4:   mov    %r10,%r9
  0x00007fb1a08341c7:   mov    %r8,%r10
  0x00007fb1a08341ca:   mov    $0x0,%r8d
  0x00007fb1a08341d0:   cmp    $0x0,%r9
  0x00007fb1a08341d4:   jne    0x00007fb1a0833fb6
  0x00007fb1a08341da:   add    $0x40,%edx
  0x00007fb1a08341dd:   mov    %r10,%r9
  0x00007fb1a08341e0:   mov    %r8,%r10
  0x00007fb1a08341e3:   cmp    $0x0,%r9
  0x00007fb1a08341e7:   jne    0x00007fb1a0833fb6
  0x00007fb1a08341ed:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a08341f1:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007fb1a08341f5:   jmpq   0x00007fb1a0834067
  0x00007fb1a08341fa:   je     0x00007fb1a0833fe4
  0x00007fb1a0834200:   neg    %ecx
  0x00007fb1a0834202:   shr    %cl,%r10
  0x00007fb1a0834205:   mov    %r9,%rax
  0x00007fb1a0834208:   shr    %cl,%r9
  0x00007fb1a083420b:   sub    %ecx,%edx
  0x00007fb1a083420d:   neg    %ecx
  0x00007fb1a083420f:   add    $0x40,%ecx
  0x00007fb1a0834212:   shl    %cl,%rax
  0x00007fb1a0834215:   or     %rax,%r10
  0x00007fb1a0834218:   jmpq   0x00007fb1a0833fe4
  0x00007fb1a083421d:   neg    %ecx
  0x00007fb1a083421f:   shl    $0x20,%r9
  0x00007fb1a0834223:   or     %r11,%r9
  0x00007fb1a0834226:   shl    %cl,%r9
  0x00007fb1a0834229:   mov    %r9,%rdi
  0x00007fb1a083422c:   test   $0x80000000,%r9d
  0x00007fb1a0834233:   jne    0x00007fb1a083428c
  0x00007fb1a0834239:   shr    %cl,%r9d
  0x00007fb1a083423c:   mov    $0x0,%ebx
  0x00007fb1a0834241:   shr    $0x3,%rdi
  0x00007fb1a0834245:   jmpq   0x00007fb1a0833fac
  0x00007fb1a083424a:   shr    %cl,%r9d
  0x00007fb1a083424d:   mov    $0x20000000,%ebx
  0x00007fb1a0834252:   shr    %cl,%ebx
  0x00007fb1a0834254:   shl    $0x20,%r9
  0x00007fb1a0834258:   or     %r11,%r9
  0x00007fb1a083425b:   shl    $0x20,%rbx
  0x00007fb1a083425f:   add    $0x20000000,%edi
  0x00007fb1a0834265:   mov    $0x0,%ecx
  0x00007fb1a083426a:   mov    $0x0,%r11d
  0x00007fb1a0834270:   sub    %r8,%rcx
  0x00007fb1a0834273:   sbb    %r10,%r11
  0x00007fb1a0834276:   sbb    %r9,%rbx
  0x00007fb1a0834279:   mov    %rcx,%r8
  0x00007fb1a083427c:   mov    %r11,%r10
  0x00007fb1a083427f:   mov    %rbx,%r9
  0x00007fb1a0834282:   mov    $0x8000,%ebx
  0x00007fb1a0834287:   jmpq   0x00007fb1a0833fac
  0x00007fb1a083428c:   shr    %cl,%r9d
  0x00007fb1a083428f:   movabs $0x100000000,%rbx
  0x00007fb1a0834299:   shr    %cl,%rbx
  0x00007fb1a083429c:   mov    $0x0,%ecx
  0x00007fb1a08342a1:   mov    $0x0,%r11d
  0x00007fb1a08342a7:   sub    %r8,%rcx
  0x00007fb1a08342aa:   sbb    %r10,%r11
  0x00007fb1a08342ad:   sbb    %r9,%rbx
  0x00007fb1a08342b0:   mov    %rcx,%r8
  0x00007fb1a08342b3:   mov    %r11,%r10
  0x00007fb1a08342b6:   mov    %rbx,%r9
  0x00007fb1a08342b9:   mov    $0x8000,%ebx
  0x00007fb1a08342be:   shr    $0x3,%rdi
  0x00007fb1a08342c2:   add    $0x20000000,%edi
  0x00007fb1a08342c8:   jmpq   0x00007fb1a0833fac
  0x00007fb1a08342cd:   vmovsd 0x8(%rsp),%xmm0
  0x00007fb1a08342d3:   vmulsd 0x46b5d6d(%rip),%xmm0,%xmm0        # 0x00007fb1a4eea048
  0x00007fb1a08342db:   vmovq  %xmm0,(%rsp)
  0x00007fb1a08342e0:   add    $0x10,%rsp
  0x00007fb1a08342e4:   pop    %rbx
  0x00007fb1a08342e5:   leaveq 
  0x00007fb1a08342e6:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmTan [0x00007fb1a08342e7, 0x00007fb1a0834b2f] (2120 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08342e7:   push   %rbp
  0x00007fb1a08342e8:   mov    %rsp,%rbp
  0x00007fb1a08342eb:   push   %rbx
  0x00007fb1a08342ec:   sub    $0x10,%rsp
  0x00007fb1a08342f0:   vmovsd %xmm0,0x8(%rsp)
  0x00007fb1a08342f6:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a08342fb:   and    $0x7fff,%eax
  0x00007fb1a0834300:   sub    $0x3fba,%eax
  0x00007fb1a0834305:   cmp    $0x10e,%eax
  0x00007fb1a083430a:   ja     0x00007fb1a0834511
  0x00007fb1a0834310:   vmovdqu 0x46b5dc8(%rip),%xmm5        # 0x00007fb1a4eea0e0
  0x00007fb1a0834318:   vmovdqu 0x46bbd20(%rip),%xmm6        # 0x00007fb1a4ef0040
  0x00007fb1a0834320:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834324:   vmovdqu 0x46bbd04(%rip),%xmm4        # 0x00007fb1a4ef0030
  0x00007fb1a083432c:   vandpd %xmm0,%xmm4,%xmm4
  0x00007fb1a0834330:   vmovdqu 0x46bbce8(%rip),%xmm1        # 0x00007fb1a4ef0020
  0x00007fb1a0834338:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fb1a083433c:   vpor   %xmm4,%xmm5,%xmm5
  0x00007fb1a0834340:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007fb1a0834344:   vmovdqu %xmm1,%xmm7
  0x00007fb1a0834348:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007fb1a083434c:   vcvttsd2si %xmm7,%edx
  0x00007fb1a0834350:   (bad)  
  0x00007fb1a0834354:   leaveq 
  0x00007fb1a0834355:   vcvtdq2pd %xmm1,%xmm1
  0x00007fb1a0834359:   vmulpd %xmm6,%xmm1,%xmm1
  0x00007fb1a083435d:   vmovdqu 0x46bbcab(%rip),%xmm3        # 0x00007fb1a4ef0010
  0x00007fb1a0834365:   vmovq  0x46ba603(%rip),%xmm5        # 0x00007fb1a4eee970
  0x00007fb1a083436d:   add    $0x72900,%rdx
  0x00007fb1a0834374:   vmovdqu 0x46bbc84(%rip),%xmm4        # 0x00007fb1a4ef0000
  0x00007fb1a083437c:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007fb1a0834380:   and    $0x1f,%rdx
  0x00007fb1a0834384:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007fb1a0834388:   mov    %rdx,%rcx
  0x00007fb1a083438b:   vmulpd %xmm1,%xmm4,%xmm4
  0x00007fb1a083438f:   shl    %rcx
  0x00007fb1a0834392:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007fb1a0834396:   vmulpd 0x46bbc52(%rip),%xmm1,%xmm1        # 0x00007fb1a4eefff0
  0x00007fb1a083439e:   add    %rcx,%rdx
  0x00007fb1a08343a1:   shl    $0x2,%rcx
  0x00007fb1a08343a5:   add    %rcx,%rdx
  0x00007fb1a08343a8:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fb1a08343ac:   vmovdqu %xmm0,%xmm2
  0x00007fb1a08343b0:   vsubpd %xmm4,%xmm0,%xmm0
  0x00007fb1a08343b4:   vmovq  0x46b5d34(%rip),%xmm6        # 0x00007fb1a4eea0f0
  0x00007fb1a08343bc:   shl    $0x4,%rdx
  0x00007fb1a08343c0:   movabs $0x7fb1a4eee9f0,%rax
  0x00007fb1a08343ca:   vandpd 0x46ba60e(%rip),%xmm5,%xmm5        # 0x00007fb1a4eee9e0
  0x00007fb1a08343d2:   vmovdqu %xmm0,%xmm3
  0x00007fb1a08343d6:   add    %rdx,%rax
  0x00007fb1a08343d9:   vsubpd %xmm0,%xmm2,%xmm2
  0x00007fb1a08343dd:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007fb1a08343e1:   vdivsd %xmm5,%xmm6,%xmm6
  0x00007fb1a08343e5:   vsubpd %xmm4,%xmm2,%xmm2
  0x00007fb1a08343e9:   vmovdqu 0x10(%rax),%xmm7
  0x00007fb1a08343ee:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007fb1a08343f2:   vmulpd %xmm0,%xmm7,%xmm7
  0x00007fb1a08343f6:   vsubpd %xmm1,%xmm2,%xmm2
  0x00007fb1a08343fa:   vmovdqu 0x30(%rax),%xmm1
  0x00007fb1a08343ff:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fb1a0834403:   vmovdqu 0x60(%rax),%xmm4
  0x00007fb1a0834408:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007fb1a083440c:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fb1a0834410:   vmovdqu %xmm0,%xmm3
  0x00007fb1a0834414:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834418:   vaddpd (%rax),%xmm7,%xmm7
  0x00007fb1a083441c:   vaddpd 0x20(%rax),%xmm1,%xmm1
  0x00007fb1a0834421:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fb1a0834425:   vaddpd 0x50(%rax),%xmm4,%xmm4
  0x00007fb1a083442a:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007fb1a083442e:   vmovdqu 0x70(%rax),%xmm1
  0x00007fb1a0834433:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fb1a0834437:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a083443b:   vaddpd %xmm1,%xmm4,%xmm4
  0x00007fb1a083443f:   vmovdqu 0x40(%rax),%xmm1
  0x00007fb1a0834444:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fb1a0834448:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007fb1a083444c:   vmovdqu %xmm3,%xmm1
  0x00007fb1a0834450:   vmulpd %xmm0,%xmm3,%xmm3
  0x00007fb1a0834454:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834458:   vmulpd 0x90(%rax),%xmm1,%xmm1
  0x00007fb1a0834460:   vmulpd %xmm3,%xmm4,%xmm4
  0x00007fb1a0834464:   vmovdqu %xmm1,%xmm3
  0x00007fb1a0834468:   vaddpd %xmm4,%xmm7,%xmm7
  0x00007fb1a083446c:   vmovdqu %xmm1,%xmm4
  0x00007fb1a0834470:   vmulsd %xmm7,%xmm0,%xmm0
  0x00007fb1a0834474:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007fb1a0834478:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fb1a083447c:   vunpckhpd %xmm1,%xmm1,%xmm1
  0x00007fb1a0834480:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007fb1a0834484:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fb1a0834488:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fb1a083448c:   vmovdqu %xmm2,%xmm4
  0x00007fb1a0834490:   vmovq  0x90(%rax),%xmm7
  0x00007fb1a0834498:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007fb1a083449c:   vaddsd 0x98(%rax),%xmm7,%xmm7
  0x00007fb1a08344a4:   vmulsd %xmm2,%xmm7,%xmm7
  0x00007fb1a08344a8:   vaddsd 0x88(%rax),%xmm7,%xmm7
  0x00007fb1a08344b0:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007fb1a08344b4:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fb1a08344b8:   vmovq  0x46b5c30(%rip),%xmm7        # 0x00007fb1a4eea0f0
  0x00007fb1a08344c0:   vmulsd %xmm6,%xmm4,%xmm4
  0x00007fb1a08344c4:   vmovq  0xa8(%rax),%xmm2
  0x00007fb1a08344cc:   vandpd %xmm6,%xmm2,%xmm2
  0x00007fb1a08344d0:   vmulsd %xmm2,%xmm5,%xmm5
  0x00007fb1a08344d4:   vmulsd 0xa0(%rax),%xmm6,%xmm6
  0x00007fb1a08344dc:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007fb1a08344e0:   vsubsd 0x80(%rax),%xmm2,%xmm2
  0x00007fb1a08344e8:   vsubsd %xmm4,%xmm7,%xmm7
  0x00007fb1a08344ec:   vmulsd %xmm6,%xmm7,%xmm7
  0x00007fb1a08344f0:   vmovdqu %xmm3,%xmm4
  0x00007fb1a08344f4:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007fb1a08344f8:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fb1a08344fc:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007fb1a0834500:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007fb1a0834504:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007fb1a0834508:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fb1a083450c:   jmpq   0x00007fb1a0834b28
  0x00007fb1a0834511:   jg     0x00007fb1a08345ba
  0x00007fb1a0834517:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a083451c:   mov    %eax,%edx
  0x00007fb1a083451e:   and    $0x7ff0,%eax
  0x00007fb1a0834523:   je     0x00007fb1a08345ad
  0x00007fb1a0834529:   and    $0x7fff,%edx
  0x00007fb1a083452f:   cmp    $0x3e20,%edx
  0x00007fb1a0834535:   jb     0x00007fb1a0834590
  0x00007fb1a083453b:   vmovdqu %xmm0,%xmm2
  0x00007fb1a083453f:   vmovdqu %xmm0,%xmm3
  0x00007fb1a0834543:   vmovq  0x46ba485(%rip),%xmm1        # 0x00007fb1a4eee9d0
  0x00007fb1a083454b:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007fb1a083454f:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007fb1a0834553:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fb1a0834557:   vaddsd 0x46ba461(%rip),%xmm1,%xmm1        # 0x00007fb1a4eee9c0
  0x00007fb1a083455f:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fb1a0834563:   vaddsd 0x46ba445(%rip),%xmm1,%xmm1        # 0x00007fb1a4eee9b0
  0x00007fb1a083456b:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fb1a083456f:   vaddsd 0x46ba429(%rip),%xmm1,%xmm1        # 0x00007fb1a4eee9a0
  0x00007fb1a0834577:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fb1a083457b:   vaddsd 0x46ba40d(%rip),%xmm1,%xmm1        # 0x00007fb1a4eee990
  0x00007fb1a0834583:   vmulsd %xmm3,%xmm1,%xmm1
  0x00007fb1a0834587:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fb1a083458b:   jmpq   0x00007fb1a0834b28
  0x00007fb1a0834590:   vmovq  0x46b5b30(%rip),%xmm3        # 0x00007fb1a4eea0c8
  0x00007fb1a0834598:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007fb1a083459c:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fb1a08345a0:   vmulsd 0x46b5b18(%rip),%xmm0,%xmm0        # 0x00007fb1a4eea0c0
  0x00007fb1a08345a8:   jmpq   0x00007fb1a0834b28
  0x00007fb1a08345ad:   vmovdqu %xmm0,%xmm1
  0x00007fb1a08345b1:   vmulsd %xmm1,%xmm1,%xmm1
  0x00007fb1a08345b5:   jmpq   0x00007fb1a0834b28
  0x00007fb1a08345ba:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a08345bf:   and    $0x7ff0,%eax
  0x00007fb1a08345c4:   cmp    $0x7ff0,%eax
  0x00007fb1a08345c9:   je     0x00007fb1a0834b15
  0x00007fb1a08345cf:   vpextrw $0x3,%xmm0,%ecx
  0x00007fb1a08345d4:   and    $0x7ff0,%ecx
  0x00007fb1a08345da:   sub    $0x3f60,%ecx
  0x00007fb1a08345e0:   shr    $0x7,%ecx
  0x00007fb1a08345e3:   and    $0xfffc,%ecx
  0x00007fb1a08345e9:   movabs $0x7fb1a4ee9f80,%r11
  0x00007fb1a08345f3:   add    %r11,%rcx
  0x00007fb1a08345f6:   vmovq  %xmm0,%rax
  0x00007fb1a08345fb:   mov    0x14(%rcx),%r10d
  0x00007fb1a08345ff:   mov    0x18(%rcx),%r8d
  0x00007fb1a0834603:   mov    %eax,%edx
  0x00007fb1a0834605:   shr    $0x15,%rax
  0x00007fb1a0834609:   or     $0x80000000,%eax
  0x00007fb1a083460e:   shr    $0xb,%eax
  0x00007fb1a0834611:   mov    %r10d,%r9d
  0x00007fb1a0834614:   imul   %rdx,%r10
  0x00007fb1a0834618:   imul   %rax,%r9
  0x00007fb1a083461c:   imul   %rax,%r8
  0x00007fb1a0834620:   mov    0x10(%rcx),%esi
  0x00007fb1a0834623:   mov    0xc(%rcx),%edi
  0x00007fb1a0834626:   mov    %r10d,%r11d
  0x00007fb1a0834629:   shr    $0x20,%r10
  0x00007fb1a083462d:   add    %r10,%r9
  0x00007fb1a0834630:   add    %r8,%r11
  0x00007fb1a0834633:   mov    %r11d,%r8d
  0x00007fb1a0834636:   shr    $0x20,%r11
  0x00007fb1a083463a:   add    %r11,%r9
  0x00007fb1a083463d:   mov    %esi,%r10d
  0x00007fb1a0834640:   imul   %rdx,%rsi
  0x00007fb1a0834644:   imul   %rax,%r10
  0x00007fb1a0834648:   mov    %edi,%r11d
  0x00007fb1a083464b:   imul   %rdx,%rdi
  0x00007fb1a083464f:   mov    %esi,%ebx
  0x00007fb1a0834651:   shr    $0x20,%rsi
  0x00007fb1a0834655:   add    %rbx,%r9
  0x00007fb1a0834658:   mov    %r9d,%ebx
  0x00007fb1a083465b:   shr    $0x20,%r9
  0x00007fb1a083465f:   add    %rsi,%r10
  0x00007fb1a0834662:   add    %r9,%r10
  0x00007fb1a0834665:   shl    $0x20,%rbx
  0x00007fb1a0834669:   or     %rbx,%r8
  0x00007fb1a083466c:   imul   %rax,%r11
  0x00007fb1a0834670:   mov    0x8(%rcx),%r9d
  0x00007fb1a0834674:   mov    0x4(%rcx),%esi
  0x00007fb1a0834677:   mov    %edi,%ebx
  0x00007fb1a0834679:   shr    $0x20,%rdi
  0x00007fb1a083467d:   add    %rbx,%r10
  0x00007fb1a0834680:   mov    %r10d,%ebx
  0x00007fb1a0834683:   shr    $0x20,%r10
  0x00007fb1a0834687:   add    %rdi,%r11
  0x00007fb1a083468a:   add    %r10,%r11
  0x00007fb1a083468d:   mov    %r9,%rdi
  0x00007fb1a0834690:   imul   %rdx,%r9
  0x00007fb1a0834694:   imul   %rax,%rdi
  0x00007fb1a0834698:   mov    %r9d,%r10d
  0x00007fb1a083469b:   shr    $0x20,%r9
  0x00007fb1a083469f:   add    %r10,%r11
  0x00007fb1a08346a2:   mov    %r11d,%r10d
  0x00007fb1a08346a5:   shr    $0x20,%r11
  0x00007fb1a08346a9:   add    %r9,%rdi
  0x00007fb1a08346ac:   add    %r11,%rdi
  0x00007fb1a08346af:   mov    %rsi,%r9
  0x00007fb1a08346b2:   imul   %rdx,%rsi
  0x00007fb1a08346b6:   imul   %rax,%r9
  0x00007fb1a08346ba:   shl    $0x20,%r10
  0x00007fb1a08346be:   or     %rbx,%r10
  0x00007fb1a08346c1:   mov    (%rcx),%eax
  0x00007fb1a08346c3:   mov    %esi,%r11d
  0x00007fb1a08346c6:   shr    $0x20,%rsi
  0x00007fb1a08346ca:   add    %r11,%rdi
  0x00007fb1a08346cd:   mov    %edi,%r11d
  0x00007fb1a08346d0:   shr    $0x20,%rdi
  0x00007fb1a08346d4:   add    %rsi,%r9
  0x00007fb1a08346d7:   add    %rdi,%r9
  0x00007fb1a08346da:   imul   %rax,%rdx
  0x00007fb1a08346de:   vpextrw $0x3,%xmm0,%ebx
  0x00007fb1a08346e3:   movabs $0x7fb1a4ee9f80,%rdi
  0x00007fb1a08346ed:   sub    %rdi,%rcx
  0x00007fb1a08346f0:   add    %ecx,%ecx
  0x00007fb1a08346f2:   add    %ecx,%ecx
  0x00007fb1a08346f4:   add    %ecx,%ecx
  0x00007fb1a08346f6:   add    $0x13,%ecx
  0x00007fb1a08346f9:   mov    $0x8000,%esi
  0x00007fb1a08346fe:   and    %ebx,%esi
  0x00007fb1a0834700:   shr    $0x4,%ebx
  0x00007fb1a0834703:   and    $0x7ff,%ebx
  0x00007fb1a0834709:   sub    $0x3ff,%ebx
  0x00007fb1a083470f:   sub    %ebx,%ecx
  0x00007fb1a0834711:   add    %rdx,%r9
  0x00007fb1a0834714:   mov    %ecx,%edx
  0x00007fb1a0834716:   add    $0x20,%edx
  0x00007fb1a0834719:   cmp    $0x0,%ecx
  0x00007fb1a083471c:   jl     0x00007fb1a0834a65
  0x00007fb1a0834722:   neg    %ecx
  0x00007fb1a0834724:   add    $0x1d,%ecx
  0x00007fb1a0834727:   shl    %cl,%r9d
  0x00007fb1a083472a:   mov    %r9d,%edi
  0x00007fb1a083472d:   and    $0x3fffffff,%r9d
  0x00007fb1a0834734:   test   $0x20000000,%r9d
  0x00007fb1a083473b:   jne    0x00007fb1a0834a92
  0x00007fb1a0834741:   shr    %cl,%r9d
  0x00007fb1a0834744:   mov    $0x0,%ebx
  0x00007fb1a0834749:   shl    $0x20,%r9
  0x00007fb1a083474d:   or     %r11,%r9
  0x00007fb1a0834750:   cmp    $0x0,%r9
  0x00007fb1a0834754:   je     0x00007fb1a0834a11
  0x00007fb1a083475a:   bsr    %r9,%r11
  0x00007fb1a083475e:   mov    $0x1d,%ecx
  0x00007fb1a0834763:   sub    %r11d,%ecx
  0x00007fb1a0834766:   jle    0x00007fb1a0834a42
  0x00007fb1a083476c:   shl    %cl,%r9
  0x00007fb1a083476f:   mov    %r10,%rax
  0x00007fb1a0834772:   shl    %cl,%r10
  0x00007fb1a0834775:   add    %ecx,%edx
  0x00007fb1a0834777:   neg    %ecx
  0x00007fb1a0834779:   add    $0x40,%ecx
  0x00007fb1a083477c:   shr    %cl,%rax
  0x00007fb1a083477f:   shr    %cl,%r8
  0x00007fb1a0834782:   or     %rax,%r9
  0x00007fb1a0834785:   or     %r8,%r10
  0x00007fb1a0834788:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007fb1a083478d:   shr    %r10
  0x00007fb1a0834790:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007fb1a0834795:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007fb1a0834799:   shl    $0x4,%edx
  0x00007fb1a083479c:   neg    %edx
  0x00007fb1a083479e:   add    $0x3ff0,%edx
  0x00007fb1a08347a4:   or     %esi,%edx
  0x00007fb1a08347a6:   xor    %ebx,%edx
  0x00007fb1a08347a8:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007fb1a08347ad:   vmovq  0x46ba1c3(%rip),%xmm2        # 0x00007fb1a4eee978
  0x00007fb1a08347b5:   vmovq  0x46ba1c3(%rip),%xmm7        # 0x00007fb1a4eee980
  0x00007fb1a08347bd:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007fb1a08347c1:   sub    $0x3f0,%edx
  0x00007fb1a08347c7:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007fb1a08347cc:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007fb1a08347d0:   shl    $0x10,%esi
  0x00007fb1a08347d3:   sar    $0x1f,%esi
  0x00007fb1a08347d6:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007fb1a08347da:   vmovdqu %xmm0,%xmm1
  0x00007fb1a08347de:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007fb1a08347e2:   shr    $0x1e,%edi
  0x00007fb1a08347e5:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fb1a08347e9:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007fb1a08347ed:   add    %esi,%edi
  0x00007fb1a08347ef:   xor    %esi,%edi
  0x00007fb1a08347f1:   vmulsd %xmm1,%xmm7,%xmm7
  0x00007fb1a08347f5:   mov    %edi,%eax
  0x00007fb1a08347f7:   vaddsd %xmm3,%xmm7,%xmm7
  0x00007fb1a08347fb:   vmovdqu %xmm0,%xmm2
  0x00007fb1a08347ff:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fb1a0834803:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007fb1a0834807:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007fb1a083480b:   vmovdqu 0x46bb80d(%rip),%xmm1        # 0x00007fb1a4ef0020
  0x00007fb1a0834813:   vmovddup %xmm0,%xmm0
  0x00007fb1a0834817:   vmovdqu 0x46bb811(%rip),%xmm4        # 0x00007fb1a4ef0030
  0x00007fb1a083481f:   vandpd %xmm0,%xmm4,%xmm4
  0x00007fb1a0834823:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fb1a0834827:   vmovddup %xmm7,%xmm7
  0x00007fb1a083482b:   vmovdqu 0x46b58ad(%rip),%xmm5        # 0x00007fb1a4eea0e0
  0x00007fb1a0834833:   vmovdqu 0x46bb805(%rip),%xmm6        # 0x00007fb1a4ef0040
  0x00007fb1a083483b:   vpor   %xmm4,%xmm5,%xmm5
  0x00007fb1a083483f:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007fb1a0834843:   vmovdqu %xmm1,%xmm5
  0x00007fb1a0834847:   vunpckhpd %xmm5,%xmm5,%xmm5
  0x00007fb1a083484b:   vcvttsd2si %xmm5,%edx
  0x00007fb1a083484f:   (bad)  
  0x00007fb1a0834853:   leaveq 
  0x00007fb1a0834854:   vcvtdq2pd %xmm1,%xmm1
  0x00007fb1a0834858:   vmulpd %xmm6,%xmm1,%xmm1
  0x00007fb1a083485c:   vmovdqu 0x46bb7ac(%rip),%xmm3        # 0x00007fb1a4ef0010
  0x00007fb1a0834864:   vmovq  0x46ba104(%rip),%xmm5        # 0x00007fb1a4eee970
  0x00007fb1a083486c:   shl    $0x4,%eax
  0x00007fb1a083486f:   add    $0x72900,%edx
  0x00007fb1a0834875:   vmovdqu 0x46bb783(%rip),%xmm4        # 0x00007fb1a4ef0000
  0x00007fb1a083487d:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007fb1a0834881:   add    %eax,%edx
  0x00007fb1a0834883:   and    $0x1f,%edx
  0x00007fb1a0834886:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007fb1a083488a:   mov    %edx,%ecx
  0x00007fb1a083488c:   vmulpd %xmm1,%xmm4,%xmm4
  0x00007fb1a0834890:   shl    %ecx
  0x00007fb1a0834892:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007fb1a0834896:   vmulpd 0x46bb752(%rip),%xmm1,%xmm1        # 0x00007fb1a4eefff0
  0x00007fb1a083489e:   add    %ecx,%edx
  0x00007fb1a08348a0:   shl    $0x2,%ecx
  0x00007fb1a08348a3:   add    %ecx,%edx
  0x00007fb1a08348a5:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fb1a08348a9:   vmovdqu %xmm0,%xmm2
  0x00007fb1a08348ad:   vsubpd %xmm4,%xmm0,%xmm0
  0x00007fb1a08348b1:   vmovq  0x46b5837(%rip),%xmm6        # 0x00007fb1a4eea0f0
  0x00007fb1a08348b9:   shl    $0x4,%edx
  0x00007fb1a08348bc:   movabs $0x7fb1a4eee9f0,%rax
  0x00007fb1a08348c6:   vandpd 0x46ba112(%rip),%xmm5,%xmm5        # 0x00007fb1a4eee9e0
  0x00007fb1a08348ce:   vmovdqu %xmm0,%xmm3
  0x00007fb1a08348d2:   add    %rdx,%rax
  0x00007fb1a08348d5:   vsubpd %xmm0,%xmm2,%xmm2
  0x00007fb1a08348d9:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007fb1a08348dd:   vdivsd %xmm5,%xmm6,%xmm6
  0x00007fb1a08348e1:   vsubpd %xmm4,%xmm2,%xmm2
  0x00007fb1a08348e5:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007fb1a08348e9:   vsubpd %xmm1,%xmm2,%xmm2
  0x00007fb1a08348ed:   vmovdqu 0x30(%rax),%xmm1
  0x00007fb1a08348f2:   vaddpd %xmm7,%xmm2,%xmm2
  0x00007fb1a08348f6:   vmovdqu 0x10(%rax),%xmm7
  0x00007fb1a08348fb:   vmulpd %xmm0,%xmm7,%xmm7
  0x00007fb1a08348ff:   vmovdqu 0x60(%rax),%xmm4
  0x00007fb1a0834904:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fb1a0834908:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007fb1a083490c:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fb1a0834910:   vmovdqu %xmm0,%xmm3
  0x00007fb1a0834914:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834918:   vaddpd (%rax),%xmm7,%xmm7
  0x00007fb1a083491c:   vaddpd 0x20(%rax),%xmm1,%xmm1
  0x00007fb1a0834921:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fb1a0834925:   vaddpd 0x50(%rax),%xmm4,%xmm4
  0x00007fb1a083492a:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007fb1a083492e:   vmovdqu 0x70(%rax),%xmm1
  0x00007fb1a0834933:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fb1a0834937:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a083493b:   vaddpd %xmm1,%xmm4,%xmm4
  0x00007fb1a083493f:   vmovdqu 0x40(%rax),%xmm1
  0x00007fb1a0834944:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fb1a0834948:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007fb1a083494c:   vmovdqu %xmm3,%xmm1
  0x00007fb1a0834950:   vmulpd %xmm0,%xmm3,%xmm3
  0x00007fb1a0834954:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834958:   vmulpd 0x90(%rax),%xmm1,%xmm1
  0x00007fb1a0834960:   vmulpd %xmm3,%xmm4,%xmm4
  0x00007fb1a0834964:   vmovdqu %xmm1,%xmm3
  0x00007fb1a0834968:   vaddpd %xmm4,%xmm7,%xmm7
  0x00007fb1a083496c:   vmovdqu %xmm1,%xmm4
  0x00007fb1a0834970:   vmulsd %xmm7,%xmm0,%xmm0
  0x00007fb1a0834974:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007fb1a0834978:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fb1a083497c:   vunpckhpd %xmm1,%xmm1,%xmm1
  0x00007fb1a0834980:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007fb1a0834984:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fb1a0834988:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fb1a083498c:   vmovdqu %xmm2,%xmm4
  0x00007fb1a0834990:   vmovq  0x90(%rax),%xmm7
  0x00007fb1a0834998:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007fb1a083499c:   vaddsd 0x98(%rax),%xmm7,%xmm7
  0x00007fb1a08349a4:   vmulsd %xmm2,%xmm7,%xmm7
  0x00007fb1a08349a8:   vaddsd 0x88(%rax),%xmm7,%xmm7
  0x00007fb1a08349b0:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007fb1a08349b4:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fb1a08349b8:   vmovq  0x46b5730(%rip),%xmm7        # 0x00007fb1a4eea0f0
  0x00007fb1a08349c0:   vmulsd %xmm6,%xmm4,%xmm4
  0x00007fb1a08349c4:   vmovq  0xa8(%rax),%xmm2
  0x00007fb1a08349cc:   vandpd %xmm6,%xmm2,%xmm2
  0x00007fb1a08349d0:   vmulsd %xmm2,%xmm5,%xmm5
  0x00007fb1a08349d4:   vmulsd 0xa0(%rax),%xmm6,%xmm6
  0x00007fb1a08349dc:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007fb1a08349e0:   vsubsd 0x80(%rax),%xmm2,%xmm2
  0x00007fb1a08349e8:   vsubsd %xmm4,%xmm7,%xmm7
  0x00007fb1a08349ec:   vmulsd %xmm6,%xmm7,%xmm7
  0x00007fb1a08349f0:   vmovdqu %xmm3,%xmm4
  0x00007fb1a08349f4:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007fb1a08349f8:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fb1a08349fc:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007fb1a0834a00:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007fb1a0834a04:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007fb1a0834a08:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fb1a0834a0c:   jmpq   0x00007fb1a0834b28
  0x00007fb1a0834a11:   add    $0x40,%edx
  0x00007fb1a0834a14:   mov    %r10,%r9
  0x00007fb1a0834a17:   mov    %r8,%r10
  0x00007fb1a0834a1a:   mov    $0x0,%r8d
  0x00007fb1a0834a20:   cmp    $0x0,%r9
  0x00007fb1a0834a24:   jne    0x00007fb1a083475a
  0x00007fb1a0834a2a:   add    $0x40,%edx
  0x00007fb1a0834a2d:   mov    %r10,%r9
  0x00007fb1a0834a30:   mov    %r8,%r10
  0x00007fb1a0834a33:   cmp    $0x0,%r9
  0x00007fb1a0834a37:   jne    0x00007fb1a083475a
  0x00007fb1a0834a3d:   jmpq   0x00007fb1a0834788
  0x00007fb1a0834a42:   je     0x00007fb1a0834788
  0x00007fb1a0834a48:   neg    %ecx
  0x00007fb1a0834a4a:   shr    %cl,%r10
  0x00007fb1a0834a4d:   mov    %r9,%rax
  0x00007fb1a0834a50:   shr    %cl,%r9
  0x00007fb1a0834a53:   sub    %ecx,%edx
  0x00007fb1a0834a55:   neg    %ecx
  0x00007fb1a0834a57:   add    $0x40,%ecx
  0x00007fb1a0834a5a:   shl    %cl,%rax
  0x00007fb1a0834a5d:   or     %rax,%r10
  0x00007fb1a0834a60:   jmpq   0x00007fb1a0834788
  0x00007fb1a0834a65:   not    %ecx
  0x00007fb1a0834a67:   shl    $0x20,%r9
  0x00007fb1a0834a6b:   or     %r11,%r9
  0x00007fb1a0834a6e:   shl    %cl,%r9
  0x00007fb1a0834a71:   mov    %r9,%rdi
  0x00007fb1a0834a74:   test   $0x80000000,%r9d
  0x00007fb1a0834a7b:   jne    0x00007fb1a0834ad4
  0x00007fb1a0834a81:   shr    %cl,%r9d
  0x00007fb1a0834a84:   mov    $0x0,%ebx
  0x00007fb1a0834a89:   shr    $0x2,%rdi
  0x00007fb1a0834a8d:   jmpq   0x00007fb1a0834750
  0x00007fb1a0834a92:   shr    %cl,%r9d
  0x00007fb1a0834a95:   mov    $0x40000000,%ebx
  0x00007fb1a0834a9a:   shr    %cl,%ebx
  0x00007fb1a0834a9c:   shl    $0x20,%r9
  0x00007fb1a0834aa0:   or     %r11,%r9
  0x00007fb1a0834aa3:   shl    $0x20,%rbx
  0x00007fb1a0834aa7:   add    $0x40000000,%edi
  0x00007fb1a0834aad:   mov    $0x0,%ecx
  0x00007fb1a0834ab2:   mov    $0x0,%r11d
  0x00007fb1a0834ab8:   sub    %r8,%rcx
  0x00007fb1a0834abb:   sbb    %r10,%r11
  0x00007fb1a0834abe:   sbb    %r9,%rbx
  0x00007fb1a0834ac1:   mov    %rcx,%r8
  0x00007fb1a0834ac4:   mov    %r11,%r10
  0x00007fb1a0834ac7:   mov    %rbx,%r9
  0x00007fb1a0834aca:   mov    $0x8000,%ebx
  0x00007fb1a0834acf:   jmpq   0x00007fb1a0834750
  0x00007fb1a0834ad4:   shr    %cl,%r9d
  0x00007fb1a0834ad7:   movabs $0x100000000,%rbx
  0x00007fb1a0834ae1:   shr    %cl,%rbx
  0x00007fb1a0834ae4:   mov    $0x0,%ecx
  0x00007fb1a0834ae9:   mov    $0x0,%r11d
  0x00007fb1a0834aef:   sub    %r8,%rcx
  0x00007fb1a0834af2:   sbb    %r10,%r11
  0x00007fb1a0834af5:   sbb    %r9,%rbx
  0x00007fb1a0834af8:   mov    %rcx,%r8
  0x00007fb1a0834afb:   mov    %r11,%r10
  0x00007fb1a0834afe:   mov    %rbx,%r9
  0x00007fb1a0834b01:   mov    $0x8000,%ebx
  0x00007fb1a0834b06:   shr    $0x2,%rdi
  0x00007fb1a0834b0a:   add    $0x40000000,%edi
  0x00007fb1a0834b10:   jmpq   0x00007fb1a0834750
  0x00007fb1a0834b15:   vmovq  0x8(%rsp),%xmm0
  0x00007fb1a0834b1b:   vmulsd 0x46b5525(%rip),%xmm0,%xmm0        # 0x00007fb1a4eea048
  0x00007fb1a0834b23:   vmovq  %xmm0,(%rsp)
  0x00007fb1a0834b28:   add    $0x10,%rsp
  0x00007fb1a0834b2c:   pop    %rbx
  0x00007fb1a0834b2d:   leaveq 
  0x00007fb1a0834b2e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmExp [0x00007fb1a0834b2f, 0x00007fb1a0834e4f] (800 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0834b2f:   push   %rbp
  0x00007fb1a0834b30:   mov    %rsp,%rbp
  0x00007fb1a0834b33:   sub    $0x18,%rsp
  0x00007fb1a0834b37:   vmovsd %xmm0,0x8(%rsp)
  0x00007fb1a0834b3d:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834b41:   vmovdqu 0x46b5aa7(%rip),%xmm1        # 0x00007fb1a4eea5f0
  0x00007fb1a0834b49:   vmovdqu 0x46b5aaf(%rip),%xmm2        # 0x00007fb1a4eea600
  0x00007fb1a0834b51:   vmovdqu 0x46b5ab7(%rip),%xmm3        # 0x00007fb1a4eea610
  0x00007fb1a0834b59:   vmovdqu 0x46b554f(%rip),%xmm6        # 0x00007fb1a4eea0b0
  0x00007fb1a0834b61:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0834b66:   and    $0x7fff,%eax
  0x00007fb1a0834b6b:   mov    $0x408f,%edx
  0x00007fb1a0834b70:   sub    %eax,%edx
  0x00007fb1a0834b72:   sub    $0x3c90,%eax
  0x00007fb1a0834b77:   or     %eax,%edx
  0x00007fb1a0834b79:   cmp    $0x80000000,%edx
  0x00007fb1a0834b7f:   jae    0x00007fb1a0834e16
  0x00007fb1a0834b85:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fb1a0834b89:   vaddpd %xmm6,%xmm1,%xmm1
  0x00007fb1a0834b8d:   vmovapd %xmm1,%xmm7
  0x00007fb1a0834b91:   vsubpd %xmm6,%xmm1,%xmm1
  0x00007fb1a0834b95:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007fb1a0834b99:   vmovdqu 0x46b5a8f(%rip),%xmm4        # 0x00007fb1a4eea630
  0x00007fb1a0834ba1:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007fb1a0834ba5:   vmovdqu 0x46b5a93(%rip),%xmm5        # 0x00007fb1a4eea640
  0x00007fb1a0834bad:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007fb1a0834bb1:   vmovd  %xmm7,%eax
  0x00007fb1a0834bb5:   mov    %eax,%ecx
  0x00007fb1a0834bb7:   and    $0x3f,%ecx
  0x00007fb1a0834bba:   shl    $0x4,%ecx
  0x00007fb1a0834bbd:   sar    $0x6,%eax
  0x00007fb1a0834bc0:   mov    %eax,%edx
  0x00007fb1a0834bc2:   vmovdqu 0x46b5a16(%rip),%xmm6        # 0x00007fb1a4eea5e0
  0x00007fb1a0834bca:   vpand  %xmm6,%xmm7,%xmm7
  0x00007fb1a0834bce:   vmovdqu 0x46b59fa(%rip),%xmm6        # 0x00007fb1a4eea5d0
  0x00007fb1a0834bd6:   vpaddq %xmm6,%xmm7,%xmm7
  0x00007fb1a0834bda:   (bad)  
  0x00007fb1a0834bde:   imull  (%rsi)
  0x00007fb1a0834be0:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007fb1a0834be4:   movabs $0x7fb1a4eea1d0,%r11
  0x00007fb1a0834bee:   vmovdqu (%rcx,%r11,1),%xmm2
  0x00007fb1a0834bf4:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007fb1a0834bf8:   vmovapd %xmm0,%xmm6
  0x00007fb1a0834bfc:   vmovapd %xmm0,%xmm1
  0x00007fb1a0834c00:   vmulpd %xmm6,%xmm6,%xmm6
  0x00007fb1a0834c04:   vmulpd %xmm6,%xmm0,%xmm0
  0x00007fb1a0834c08:   vaddpd %xmm4,%xmm5,%xmm5
  0x00007fb1a0834c0c:   vmulsd %xmm6,%xmm0,%xmm0
  0x00007fb1a0834c10:   vmulpd 0x46b5a08(%rip),%xmm6,%xmm6        # 0x00007fb1a4eea620
  0x00007fb1a0834c18:   vaddsd %xmm2,%xmm1,%xmm1
  0x00007fb1a0834c1c:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007fb1a0834c20:   vmulpd %xmm5,%xmm0,%xmm0
  0x00007fb1a0834c24:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007fb1a0834c28:   vpor   %xmm7,%xmm2,%xmm2
  0x00007fb1a0834c2c:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834c30:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fb1a0834c34:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fb1a0834c38:   add    $0x37e,%edx
  0x00007fb1a0834c3e:   cmp    $0x77c,%edx
  0x00007fb1a0834c44:   ja     0x00007fb1a0834c57
  0x00007fb1a0834c4a:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007fb1a0834c4e:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007fb1a0834c52:   jmpq   0x00007fb1a0834e49
  0x00007fb1a0834c57:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007fb1a0834c5b:   vmovdqu 0x46b555d(%rip),%xmm4        # 0x00007fb1a4eea1c0
  0x00007fb1a0834c63:   mov    $0xfffffc02,%edx
  0x00007fb1a0834c68:   sub    %eax,%edx
  0x00007fb1a0834c6a:   vmovd  %edx,%xmm5
  0x00007fb1a0834c6e:   vpsllq %xmm5,%xmm4,%xmm4
  0x00007fb1a0834c72:   mov    %eax,%ecx
  0x00007fb1a0834c74:   sar    %eax
  0x00007fb1a0834c76:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007fb1a0834c7b:   vmovdqu 0x46b552d(%rip),%xmm6        # 0x00007fb1a4eea1b0
  0x00007fb1a0834c83:   (bad)  
  0x00007fb1a0834c87:   repz add $0xc5,%al
  0x00007fb1a0834c8a:   jmpq   0x00007fb19c492089
  0x00007fb1a0834c8f:   pop    %rcx
  0x00007fb1a0834c90:   retq   $0xfa83
  0x00007fb1a0834c93:   xor    $0xf,%al
  0x00007fb1a0834c95:   (bad)  
  0x00007fb1a0834c99:   add    %al,%ch
  0x00007fb1a0834c9b:   (bad)  
  0x00007fb1a0834c9d:   loop   0x00007fb1a0834c64
  0x00007fb1a0834c9f:   loope  0x00007fb1a0834c9f
  0x00007fb1a0834ca1:   faddp  %st,%st(5)
  0x00007fb1a0834ca3:   jmp    0x00007fb1a0834d01
  0x00007fb1a0834ca5:   (bad)  
  0x00007fb1a0834ca6:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007fb1a0834caa:   cmp    $0x3ff,%ecx
  0x00007fb1a0834cb0:   jge    0x00007fb1a0834d40
  0x00007fb1a0834cb6:   vpextrw $0x3,%xmm0,%ecx
  0x00007fb1a0834cbb:   and    $0x8000,%ecx
  0x00007fb1a0834cc1:   or     %ecx,%edx
  0x00007fb1a0834cc3:   cmp    $0x0,%edx
  0x00007fb1a0834cc6:   je     0x00007fb1a0834d33
  0x00007fb1a0834ccc:   vmovapd %xmm0,%xmm6
  0x00007fb1a0834cd0:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007fb1a0834cd4:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007fb1a0834cd8:   vpextrw $0x3,%xmm0,%ecx
  0x00007fb1a0834cdd:   and    $0x7ff0,%ecx
  0x00007fb1a0834ce3:   cmp    $0x0,%ecx
  0x00007fb1a0834ce6:   je     0x00007fb1a0834cf1
  0x00007fb1a0834cec:   jmpq   0x00007fb1a0834e49
  0x00007fb1a0834cf1:   vmulsd %xmm3,%xmm6,%xmm6
  0x00007fb1a0834cf5:   vmulsd %xmm3,%xmm4,%xmm4
  0x00007fb1a0834cf9:   vmovdqu %xmm6,%xmm0
  0x00007fb1a0834cfd:   vpxor  %xmm4,%xmm6,%xmm6
  0x00007fb1a0834d01:   vpsrad $0x1f,%xmm6,%xmm6
  0x00007fb1a0834d06:   vpshufd $0x55,%xmm6,%xmm6
  0x00007fb1a0834d0b:   (bad)  
  0x00007fb1a0834d0f:   lock add %eax,%ebp
  0x00007fb1a0834d12:   stc    
  0x00007fb1a0834d13:   jae    0x00007fb1a0834ce5
  0x00007fb1a0834d15:   add    %eax,%ebp
  0x00007fb1a0834d17:   stc    
  0x00007fb1a0834d18:   out    %eax,(%dx)
  0x00007fb1a0834d19:   mov    $0xc9,%ch
  0x00007fb1a0834d1c:   jae    0x00007fb1a0834cf4
  0x00007fb1a0834d1e:   (bad)  
  0x00007fb1a0834d1f:   vpaddq %xmm6,%xmm0,%xmm0
  0x00007fb1a0834d23:   vpaddq %xmm4,%xmm0,%xmm0
  0x00007fb1a0834d27:   movl   $0xf,(%rsp)
  0x00007fb1a0834d2e:   jmpq   0x00007fb1a0834e3d
  0x00007fb1a0834d33:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007fb1a0834d37:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007fb1a0834d3b:   jmpq   0x00007fb1a0834e49
  0x00007fb1a0834d40:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007fb1a0834d44:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007fb1a0834d48:   vpextrw $0x3,%xmm0,%ecx
  0x00007fb1a0834d4d:   and    $0x7ff0,%ecx
  0x00007fb1a0834d53:   cmp    $0x7ff0,%ecx
  0x00007fb1a0834d59:   jae    0x00007fb1a0834da2
  0x00007fb1a0834d5f:   jmpq   0x00007fb1a0834e49
  0x00007fb1a0834d64:   vpaddd %xmm6,%xmm3,%xmm3
  0x00007fb1a0834d68:   vaddpd %xmm2,%xmm0,%xmm0
  0x00007fb1a0834d6c:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007fb1a0834d70:   movl   $0xf,(%rsp)
  0x00007fb1a0834d77:   jmpq   0x00007fb1a0834e3d
  0x00007fb1a0834d7c:   cmp    $0x7ff00000,%eax
  0x00007fb1a0834d81:   jae    0x00007fb1a0834dc6
  0x00007fb1a0834d87:   mov    0xc(%rsp),%eax
  0x00007fb1a0834d8b:   cmp    $0x80000000,%eax
  0x00007fb1a0834d90:   jae    0x00007fb1a0834dae
  0x00007fb1a0834d96:   vmovsd 0x46b5402(%rip),%xmm0        # 0x00007fb1a4eea1a0
  0x00007fb1a0834d9e:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834da2:   movl   $0xe,(%rsp)
  0x00007fb1a0834da9:   jmpq   0x00007fb1a0834e3d
  0x00007fb1a0834dae:   vmovsd 0x46b53e2(%rip),%xmm0        # 0x00007fb1a4eea198
  0x00007fb1a0834db6:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834dba:   movl   $0xf,(%rsp)
  0x00007fb1a0834dc1:   jmpq   0x00007fb1a0834e3d
  0x00007fb1a0834dc6:   mov    0x8(%rsp),%edx
  0x00007fb1a0834dca:   cmp    $0x7ff00000,%eax
  0x00007fb1a0834dcf:   ja     0x00007fb1a0834e07
  0x00007fb1a0834dd5:   cmp    $0x0,%edx
  0x00007fb1a0834dd8:   jne    0x00007fb1a0834e07
  0x00007fb1a0834dde:   mov    0xc(%rsp),%eax
  0x00007fb1a0834de2:   cmp    $0x7ff00000,%eax
  0x00007fb1a0834de7:   jne    0x00007fb1a0834dfa
  0x00007fb1a0834ded:   vmovsd 0x46b539b(%rip),%xmm0        # 0x00007fb1a4eea190
  0x00007fb1a0834df5:   jmpq   0x00007fb1a0834e49
  0x00007fb1a0834dfa:   vmovsd 0x470ff3e(%rip),%xmm0        # 0x00007fb1a4f44d40
  0x00007fb1a0834e02:   jmpq   0x00007fb1a0834e49
  0x00007fb1a0834e07:   vmovsd 0x8(%rsp),%xmm0
  0x00007fb1a0834e0d:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834e11:   jmpq   0x00007fb1a0834e49
  0x00007fb1a0834e16:   mov    0xc(%rsp),%eax
  0x00007fb1a0834e1a:   and    $0x7fffffff,%eax
  0x00007fb1a0834e1f:   cmp    $0x40900000,%eax
  0x00007fb1a0834e24:   jae    0x00007fb1a0834d7c
  0x00007fb1a0834e2a:   vmovsd %xmm0,0x8(%rsp)
  0x00007fb1a0834e30:   vaddsd 0x46b52b8(%rip),%xmm0,%xmm0        # 0x00007fb1a4eea0f0
  0x00007fb1a0834e38:   jmpq   0x00007fb1a0834e49
  0x00007fb1a0834e3d:   vmovq  %xmm0,0x10(%rsp)
  0x00007fb1a0834e43:   vmovq  0x10(%rsp),%xmm0
  0x00007fb1a0834e49:   add    $0x18,%rsp
  0x00007fb1a0834e4d:   leaveq 
  0x00007fb1a0834e4e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmPow [0x00007fb1a0834e4f, 0x00007fb1a0835f43] (4340 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0834e4f:   push   %rbp
  0x00007fb1a0834e50:   mov    %rsp,%rbp
  0x00007fb1a0834e53:   sub    $0x28,%rsp
  0x00007fb1a0834e57:   vmovsd %xmm0,0x8(%rsp)
  0x00007fb1a0834e5d:   vmovsd %xmm1,0x10(%rsp)
  0x00007fb1a0834e63:   vmovq  %xmm1,%r8
  0x00007fb1a0834e68:   cmp    0x46b69d9(%rip),%r8        # 0x00007fb1a4eeb848
  0x00007fb1a0834e6f:   jne    0x00007fb1a0834e7a
  0x00007fb1a0834e71:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834e75:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a0834e7a:   cmp    0x46b69bf(%rip),%r8        # 0x00007fb1a4eeb840
  0x00007fb1a0834e81:   jne    0x00007fb1a0834e9a
  0x00007fb1a0834e83:   vmovq  %xmm0,%r9
  0x00007fb1a0834e88:   cmp    0x470feb9(%rip),%r9        # 0x00007fb1a4f44d48
  0x00007fb1a0834e8f:   jl     0x00007fb1a0834e9a
  0x00007fb1a0834e91:   vsqrtsd %xmm0,%xmm0,%xmm0
  0x00007fb1a0834e95:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a0834e9a:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0834e9f:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fb1a0834ea3:   movabs $0x3ff0000000000000,%r9
  0x00007fb1a0834ead:   vmovq  %r9,%xmm2
  0x00007fb1a0834eb2:   mov    $0x3fb90000,%r8d
  0x00007fb1a0834eb8:   vmovq  %r8,%xmm7
  0x00007fb1a0834ebd:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a0834ec1:   movabs $0x77f0000000000000,%r10
  0x00007fb1a0834ecb:   vmovq  %r10,%xmm1
  0x00007fb1a0834ed0:   vmovdqu %xmm0,%xmm3
  0x00007fb1a0834ed4:   mov    $0x7ff0,%edx
  0x00007fb1a0834ed9:   and    %eax,%edx
  0x00007fb1a0834edb:   sub    $0x3ff0,%edx
  0x00007fb1a0834ee1:   mov    %edx,%ecx
  0x00007fb1a0834ee3:   sar    $0x1f,%edx
  0x00007fb1a0834ee6:   add    %edx,%ecx
  0x00007fb1a0834ee8:   xor    %edx,%ecx
  0x00007fb1a0834eea:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fb1a0834eee:   vmovdqu 0x46b9a5a(%rip),%xmm6        # 0x00007fb1a4eee950
  0x00007fb1a0834ef6:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fb1a0834efb:   vmovq  0x46b9a3d(%rip),%xmm2        # 0x00007fb1a4eee940
  0x00007fb1a0834f03:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fb1a0834f08:   add    $0x10,%ecx
  0x00007fb1a0834f0b:   bsr    %ecx,%ecx
  0x00007fb1a0834f0e:   vrcpps %xmm0,%xmm0
  0x00007fb1a0834f12:   (bad)  
  0x00007fb1a0834f16:   repz or $0x41,%al
  0x00007fb1a0834f19:   mov    $0x2000,%ebx
  0x00007fb1a0834f1e:   vmovq  %r11,%xmm4
  0x00007fb1a0834f23:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007fb1a0834f28:   sub    $0x10,%eax
  0x00007fb1a0834f2b:   cmp    $0x7fe0,%eax
  0x00007fb1a0834f30:   jae    0x00007fb1a0835145
  0x00007fb1a0834f36:   mov    $0x0,%r8d
  0x00007fb1a0834f3c:   vmulss %xmm7,%xmm0,%xmm0
  0x00007fb1a0834f40:   mov    $0xffffffff,%edx
  0x00007fb1a0834f45:   sub    $0x4,%ecx
  0x00007fb1a0834f48:   shl    %cl,%edx
  0x00007fb1a0834f4a:   shl    $0x20,%rdx
  0x00007fb1a0834f4e:   vmovq  %rdx,%xmm5
  0x00007fb1a0834f53:   vpor   %xmm1,%xmm3,%xmm3
  0x00007fb1a0834f57:   sub    $0x3fdf,%eax
  0x00007fb1a0834f5c:   cmp    $0x1,%eax
  0x00007fb1a0834f5f:   jbe    0x00007fb1a0835b5a
  0x00007fb1a0834f65:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007fb1a0834f69:   vpand  %xmm3,%xmm5,%xmm5
  0x00007fb1a0834f6d:   vmovd  %xmm0,%edx
  0x00007fb1a0834f71:   (bad)  
  0x00007fb1a0834f75:   lock sbb $0xdd5ce3c5,%eax
  0x00007fb1a0834f7b:   vpand  %xmm6,%xmm0,%xmm0
  0x00007fb1a0834f7f:   sub    $0x1,%eax
  0x00007fb1a0834f82:   sar    $0x4,%eax
  0x00007fb1a0834f85:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007fb1a0834f89:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0834f8d:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007fb1a0834f91:   vmovdqu 0x46b88d7(%rip),%xmm1        # 0x00007fb1a4eed870
  0x00007fb1a0834f99:   movabs $0x7fb1a4eeb860,%r11
  0x00007fb1a0834fa3:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007fb1a0834fa7:   vmovdqu 0x46b88d1(%rip),%xmm4        # 0x00007fb1a4eed880
  0x00007fb1a0834faf:   mov    %eax,%ecx
  0x00007fb1a0834fb1:   sar    $0x1f,%eax
  0x00007fb1a0834fb4:   add    %eax,%ecx
  0x00007fb1a0834fb6:   xor    %ecx,%eax
  0x00007fb1a0834fb8:   add    $0x1,%eax
  0x00007fb1a0834fbb:   bsr    %eax,%eax
  0x00007fb1a0834fbe:   vunpcklpd %xmm3,%xmm5,%xmm5
  0x00007fb1a0834fc2:   vmovdqu 0x46b88c6(%rip),%xmm6        # 0x00007fb1a4eed890
  0x00007fb1a0834fca:   vaddsd %xmm5,%xmm3,%xmm3
  0x00007fb1a0834fce:   and    $0xffc000,%edx
  0x00007fb1a0834fd4:   shr    $0xa,%edx
  0x00007fb1a0834fd7:   vaddpd -0xe40(%r11,%rdx,1),%xmm5,%xmm5
  0x00007fb1a0834fe1:   vmovdqu 0x46b88b7(%rip),%xmm0        # 0x00007fb1a4eed8a0
  0x00007fb1a0834fe9:   vpshufd $0x44,%xmm3,%xmm2
  0x00007fb1a0834fee:   vmulsd %xmm3,%xmm3,%xmm3
  0x00007fb1a0834ff2:   vmulpd %xmm2,%xmm1,%xmm1
  0x00007fb1a0834ff6:   vmulpd %xmm2,%xmm4,%xmm4
  0x00007fb1a0834ffa:   vaddsd %xmm7,%xmm5,%xmm5
  0x00007fb1a0834ffe:   vmulsd %xmm3,%xmm2,%xmm2
  0x00007fb1a0835002:   vaddpd %xmm1,%xmm6,%xmm6
  0x00007fb1a0835006:   vmulsd %xmm3,%xmm3,%xmm3
  0x00007fb1a083500a:   vaddpd %xmm4,%xmm0,%xmm0
  0x00007fb1a083500e:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a0835014:   mov    0x16(%rsp),%cx
  0x00007fb1a0835019:   vpshufd $0xee,%xmm5,%xmm7
  0x00007fb1a083501e:   vmovq  0x46b990a(%rip),%xmm4        # 0x00007fb1a4eee930
  0x00007fb1a0835026:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007fb1a083502a:   vpshufd $0x44,%xmm3,%xmm3
  0x00007fb1a083502f:   vmulpd %xmm2,%xmm0,%xmm0
  0x00007fb1a0835033:   shl    $0x4,%eax
  0x00007fb1a0835036:   sub    $0x3e00,%eax
  0x00007fb1a083503b:   and    $0x7ff0,%ecx
  0x00007fb1a0835041:   add    %ecx,%eax
  0x00007fb1a0835043:   vmulpd %xmm6,%xmm3,%xmm3
  0x00007fb1a0835047:   cmp    $0x270,%eax
  0x00007fb1a083504c:   jae    0x00007fb1a0835306
  0x00007fb1a0835052:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007fb1a0835056:   mov    $0x42b8,%edx
  0x00007fb1a083505b:   vpinsrw $0x3,%edx,%xmm6,%xmm6
  0x00007fb1a0835060:   vmovdqu %xmm1,%xmm2
  0x00007fb1a0835064:   vpand  %xmm1,%xmm4,%xmm4
  0x00007fb1a0835068:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007fb1a083506c:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007fb1a0835070:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fb1a0835074:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007fb1a0835078:   vmovdqu %xmm6,%xmm7
  0x00007fb1a083507c:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007fb1a0835080:   movabs $0x7fb1a4eed930,%r11
  0x00007fb1a083508a:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007fb1a083508e:   vmovd  %xmm6,%edx
  0x00007fb1a0835092:   vsubsd %xmm7,%xmm6,%xmm6
  0x00007fb1a0835096:   vpshufd $0xee,%xmm3,%xmm0
  0x00007fb1a083509b:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007fb1a083509f:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fb1a08350a3:   mov    %edx,%ecx
  0x00007fb1a08350a5:   and    $0xff,%edx
  0x00007fb1a08350ab:   add    %edx,%edx
  0x00007fb1a08350ad:   vmovdqu (%r11,%rdx,8),%xmm5
  0x00007fb1a08350b3:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007fb1a08350b7:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007fb1a08350bb:   vmovdqu 0x46b883d(%rip),%xmm7        # 0x00007fb1a4eed900
  0x00007fb1a08350c3:   vmovdqu 0x46b8845(%rip),%xmm3        # 0x00007fb1a4eed910
  0x00007fb1a08350cb:   shl    $0xc,%ecx
  0x00007fb1a08350ce:   xor    %r8d,%ecx
  0x00007fb1a08350d1:   and    $0xfff00000,%ecx
  0x00007fb1a08350d7:   vmovq  %rcx,%xmm6
  0x00007fb1a08350dc:   vaddsd %xmm4,%xmm2,%xmm2
  0x00007fb1a08350e0:   movabs $0x3fe62e42fefa39ef,%r9
  0x00007fb1a08350ea:   vmovq  %r9,%xmm1
  0x00007fb1a08350ef:   vpshufd $0x44,%xmm2,%xmm0
  0x00007fb1a08350f4:   vpshufd $0x44,%xmm2,%xmm4
  0x00007fb1a08350f9:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fb1a08350fd:   vpshufd $0x11,%xmm6,%xmm6
  0x00007fb1a0835102:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835106:   vmulpd %xmm4,%xmm7,%xmm7
  0x00007fb1a083510a:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007fb1a083510e:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007fb1a0835112:   vpshufd $0xee,%xmm5,%xmm6
  0x00007fb1a0835117:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fb1a083511b:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007fb1a083511f:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fb1a0835123:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007fb1a0835127:   vpshufd $0xee,%xmm0,%xmm3
  0x00007fb1a083512c:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007fb1a0835130:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007fb1a0835134:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fb1a0835138:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fb1a083513c:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fb1a0835140:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a0835145:   add    $0x10,%eax
  0x00007fb1a0835148:   mov    $0x7ff0,%edx
  0x00007fb1a083514d:   and    %eax,%edx
  0x00007fb1a083514f:   cmp    $0x7ff0,%edx
  0x00007fb1a0835155:   je     0x00007fb1a083547e
  0x00007fb1a083515b:   test   $0x8000,%eax
  0x00007fb1a0835160:   jne    0x00007fb1a0835717
  0x00007fb1a0835166:   vmovq  0x8(%rsp),%xmm0
  0x00007fb1a083516c:   vmovq  0x8(%rsp),%xmm3
  0x00007fb1a0835172:   vmovd  %xmm3,%edx
  0x00007fb1a0835176:   vpsrlq $0x20,%xmm3,%xmm3
  0x00007fb1a083517b:   vmovd  %xmm3,%ecx
  0x00007fb1a083517f:   or     %ecx,%edx
  0x00007fb1a0835181:   cmp    $0x0,%edx
  0x00007fb1a0835184:   je     0x00007fb1a0835955
  0x00007fb1a083518a:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007fb1a083518e:   mov    $0x47f0,%eax
  0x00007fb1a0835193:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007fb1a0835198:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007fb1a083519c:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fb1a08351a0:   mov    $0x3ff0,%eax
  0x00007fb1a08351a5:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007fb1a08351aa:   vmovdqu %xmm0,%xmm3
  0x00007fb1a08351ae:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a08351b3:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fb1a08351b7:   mov    $0x47f0,%ecx
  0x00007fb1a08351bc:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fb1a08351c1:   vmovq  0x46b9777(%rip),%xmm2        # 0x00007fb1a4eee940
  0x00007fb1a08351c9:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fb1a08351ce:   vrcpps %xmm0,%xmm0
  0x00007fb1a08351d2:   (bad)  
  0x00007fb1a08351d6:   repz or $0xc5,%al
  0x00007fb1a08351d9:   cli    
  0x00007fb1a08351da:   outsl  %ds:(%rsi),(%dx)
  0x00007fb1a08351db:   xor    $0x46b9770,%eax
  0x00007fb1a08351e0:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007fb1a08351e5:   vmulss %xmm7,%xmm0,%xmm0
  0x00007fb1a08351e9:   mov    $0xfffffc00,%edx
  0x00007fb1a08351ee:   vmovd  %edx,%xmm5
  0x00007fb1a08351f2:   vpor   %xmm1,%xmm3,%xmm3
  0x00007fb1a08351f6:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007fb1a08351fa:   (bad)  
  0x00007fb1a08351fe:   cmc    
  0x00007fb1a08351ff:   and    %al,%ch
  0x00007fb1a0835201:   stc    
  0x00007fb1a0835202:   jle    0x00007fb1a08351c6
  0x00007fb1a0835204:   (bad)  
  0x00007fb1a0835208:   lock sbb $0xebdbd1c5,%eax
  0x00007fb1a083520e:   mov    $0x0,%r8d
  0x00007fb1a0835214:   vpand  %xmm6,%xmm0,%xmm0
  0x00007fb1a0835218:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007fb1a083521c:   and    $0x7ff0,%eax
  0x00007fb1a0835221:   sub    $0x47f0,%eax
  0x00007fb1a0835226:   sar    $0x4,%eax
  0x00007fb1a0835229:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007fb1a083522d:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0835231:   jmpq   0x00007fb1a0834f8d
  0x00007fb1a0835236:   vmovq  0x8(%rsp),%xmm0
  0x00007fb1a083523c:   vmovq  0x8(%rsp),%xmm3
  0x00007fb1a0835242:   vmovd  %xmm3,%edx
  0x00007fb1a0835246:   vpsrlq $0x20,%xmm3,%xmm3
  0x00007fb1a083524b:   vmovd  %xmm3,%ecx
  0x00007fb1a083524f:   or     %ecx,%edx
  0x00007fb1a0835251:   cmp    $0x0,%edx
  0x00007fb1a0835254:   je     0x00007fb1a0835955
  0x00007fb1a083525a:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007fb1a083525e:   mov    $0x47f0,%eax
  0x00007fb1a0835263:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007fb1a0835268:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007fb1a083526c:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fb1a0835270:   mov    $0x3ff0,%eax
  0x00007fb1a0835275:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007fb1a083527a:   vmovdqu %xmm0,%xmm3
  0x00007fb1a083527e:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0835283:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fb1a0835287:   mov    $0x47f0,%ecx
  0x00007fb1a083528c:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fb1a0835291:   vmovq  0x46b96a7(%rip),%xmm2        # 0x00007fb1a4eee940
  0x00007fb1a0835299:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fb1a083529e:   vrcpps %xmm0,%xmm0
  0x00007fb1a08352a2:   (bad)  
  0x00007fb1a08352a6:   repz or $0xc5,%al
  0x00007fb1a08352a9:   cli    
  0x00007fb1a08352aa:   outsl  %ds:(%rsi),(%dx)
  0x00007fb1a08352ab:   xor    $0x46b96a0,%eax
  0x00007fb1a08352b0:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007fb1a08352b5:   vmulss %xmm7,%xmm0,%xmm0
  0x00007fb1a08352b9:   mov    $0xfffffc00,%edx
  0x00007fb1a08352be:   vmovd  %edx,%xmm5
  0x00007fb1a08352c2:   vpor   %xmm1,%xmm3,%xmm3
  0x00007fb1a08352c6:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007fb1a08352ca:   (bad)  
  0x00007fb1a08352ce:   cmc    
  0x00007fb1a08352cf:   and    %al,%ch
  0x00007fb1a08352d1:   stc    
  0x00007fb1a08352d2:   jle    0x00007fb1a0835296
  0x00007fb1a08352d4:   (bad)  
  0x00007fb1a08352d8:   lock sbb $0xebdbd1c5,%eax
  0x00007fb1a08352de:   mov    $0x80000000,%r8d
  0x00007fb1a08352e4:   vpand  %xmm6,%xmm0,%xmm0
  0x00007fb1a08352e8:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007fb1a08352ec:   and    $0x7ff0,%eax
  0x00007fb1a08352f1:   sub    $0x47f0,%eax
  0x00007fb1a08352f6:   sar    $0x4,%eax
  0x00007fb1a08352f9:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007fb1a08352fd:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0835301:   jmpq   0x00007fb1a0834f8d
  0x00007fb1a0835306:   cmp    $0x0,%eax
  0x00007fb1a0835309:   jl     0x00007fb1a08358c7
  0x00007fb1a083530f:   cmp    $0x2f0,%eax
  0x00007fb1a0835314:   jae    0x00007fb1a0835a57
  0x00007fb1a083531a:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fb1a083531e:   vmovq  0x46b85aa(%rip),%xmm2        # 0x00007fb1a4eed8d0
  0x00007fb1a0835326:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007fb1a083532a:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007fb1a083532e:   mov    $0x42b8,%eax
  0x00007fb1a0835333:   vpinsrw $0x3,%eax,%xmm6,%xmm6
  0x00007fb1a0835338:   vpshufd $0xee,%xmm3,%xmm0
  0x00007fb1a083533d:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fb1a0835341:   vmovdqu %xmm5,%xmm3
  0x00007fb1a0835345:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fb1a0835349:   vmovdqu %xmm2,%xmm4
  0x00007fb1a083534d:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007fb1a0835351:   vmovdqu %xmm5,%xmm7
  0x00007fb1a0835355:   vpand  %xmm2,%xmm5,%xmm5
  0x00007fb1a0835359:   vmovdqu %xmm1,%xmm2
  0x00007fb1a083535d:   vpand  %xmm1,%xmm4,%xmm4
  0x00007fb1a0835361:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007fb1a0835365:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fb1a0835369:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007fb1a083536d:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007fb1a0835371:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fb1a0835375:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007fb1a0835379:   vmovdqu %xmm6,%xmm7
  0x00007fb1a083537d:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007fb1a0835381:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007fb1a0835385:   vmovd  %xmm6,%eax
  0x00007fb1a0835389:   vsubsd %xmm7,%xmm6,%xmm6
  0x00007fb1a083538d:   movabs $0x7fb1a4eed930,%r11
  0x00007fb1a0835397:   vaddsd %xmm1,%xmm2,%xmm2
  0x00007fb1a083539b:   vmovdqu 0x46b855d(%rip),%xmm7        # 0x00007fb1a4eed900
  0x00007fb1a08353a3:   vmovdqu 0x46b8565(%rip),%xmm3        # 0x00007fb1a4eed910
  0x00007fb1a08353ab:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007fb1a08353af:   vpextrw $0x3,%xmm6,%edx
  0x00007fb1a08353b4:   mov    %eax,%ecx
  0x00007fb1a08353b6:   and    $0xff,%eax
  0x00007fb1a08353bb:   add    %eax,%eax
  0x00007fb1a08353bd:   vmovdqu (%r11,%rax,8),%xmm5
  0x00007fb1a08353c3:   vaddsd %xmm4,%xmm2,%xmm2
  0x00007fb1a08353c7:   sar    $0x8,%ecx
  0x00007fb1a08353ca:   mov    %ecx,%eax
  0x00007fb1a08353cc:   sar    %ecx
  0x00007fb1a08353ce:   sub    %ecx,%eax
  0x00007fb1a08353d0:   shl    $0x14,%ecx
  0x00007fb1a08353d3:   xor    %r8d,%ecx
  0x00007fb1a08353d6:   vmovd  %ecx,%xmm6
  0x00007fb1a08353da:   vmovq  0x46b853e(%rip),%xmm1        # 0x00007fb1a4eed920
  0x00007fb1a08353e2:   and    $0x7fff,%edx
  0x00007fb1a08353e8:   cmp    $0x4091,%edx
  0x00007fb1a08353ee:   ja     0x00007fb1a0835a57
  0x00007fb1a08353f4:   vpshufd $0x44,%xmm2,%xmm0
  0x00007fb1a08353f9:   vpshufd $0x44,%xmm2,%xmm4
  0x00007fb1a08353fe:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835402:   vmulpd %xmm4,%xmm7,%xmm7
  0x00007fb1a0835406:   vpshufd $0x11,%xmm6,%xmm6
  0x00007fb1a083540b:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fb1a083540f:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835413:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007fb1a0835417:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007fb1a083541b:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007fb1a083541f:   vpshufd $0xee,%xmm5,%xmm6
  0x00007fb1a0835424:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007fb1a0835428:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fb1a083542c:   vpshufd $0xee,%xmm0,%xmm3
  0x00007fb1a0835431:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007fb1a0835435:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007fb1a0835439:   shl    $0x4,%eax
  0x00007fb1a083543c:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007fb1a0835440:   add    $0x3ff0,%eax
  0x00007fb1a0835445:   vpinsrw $0x3,%eax,%xmm4,%xmm4
  0x00007fb1a083544a:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fb1a083544e:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fb1a0835452:   vmovdqu %xmm0,%xmm1
  0x00007fb1a0835456:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fb1a083545a:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007fb1a083545e:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0835463:   and    $0x7ff0,%eax
  0x00007fb1a0835468:   je     0x00007fb1a0835af8
  0x00007fb1a083546e:   cmp    $0x7ff0,%eax
  0x00007fb1a0835473:   je     0x00007fb1a0835ab2
  0x00007fb1a0835479:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a083547e:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a0835484:   vmovq  0x8(%rsp),%xmm0
  0x00007fb1a083548a:   vmovdqu %xmm0,%xmm2
  0x00007fb1a083548e:   vmovd  %xmm2,%eax
  0x00007fb1a0835492:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007fb1a0835497:   vmovd  %xmm2,%edx
  0x00007fb1a083549b:   or     %edx,%eax
  0x00007fb1a083549d:   je     0x00007fb1a08354ee
  0x00007fb1a08354a3:   vmovd  %xmm1,%eax
  0x00007fb1a08354a7:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fb1a08354ac:   vmovd  %xmm1,%edx
  0x00007fb1a08354b0:   mov    %edx,%ecx
  0x00007fb1a08354b2:   add    %edx,%edx
  0x00007fb1a08354b4:   or     %edx,%eax
  0x00007fb1a08354b6:   je     0x00007fb1a08354c5
  0x00007fb1a08354bc:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007fb1a08354c0:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a08354c5:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a08354c9:   mov    $0x3ff0,%eax
  0x00007fb1a08354ce:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a08354d3:   movl   $0x1d,(%rsp)
  0x00007fb1a08354da:   jmpq   0x00007fb1a0835f31
  0x00007fb1a08354df:   vmovq  0x10(%rsp),%xmm0
  0x00007fb1a08354e5:   vaddpd %xmm0,%xmm0,%xmm0
  0x00007fb1a08354e9:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a08354ee:   vmovd  %xmm1,%eax
  0x00007fb1a08354f2:   vmovdqu %xmm1,%xmm2
  0x00007fb1a08354f6:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fb1a08354fb:   vmovd  %xmm1,%edx
  0x00007fb1a08354ff:   mov    %edx,%ecx
  0x00007fb1a0835501:   add    %edx,%edx
  0x00007fb1a0835503:   or     %edx,%eax
  0x00007fb1a0835505:   je     0x00007fb1a08358ab
  0x00007fb1a083550b:   vpextrw $0x3,%xmm2,%eax
  0x00007fb1a0835510:   and    $0x7ff0,%eax
  0x00007fb1a0835515:   cmp    $0x7ff0,%eax
  0x00007fb1a083551a:   jne    0x00007fb1a0835531
  0x00007fb1a0835520:   vmovd  %xmm2,%eax
  0x00007fb1a0835524:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007fb1a0835529:   vmovd  %xmm2,%edx
  0x00007fb1a083552d:   or     %edx,%eax
  0x00007fb1a083552f:   jne    0x00007fb1a08354df
  0x00007fb1a0835531:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0835536:   test   $0x8000,%eax
  0x00007fb1a083553b:   jne    0x00007fb1a0835571
  0x00007fb1a0835541:   test   $0x80000000,%ecx
  0x00007fb1a0835547:   jne    0x00007fb1a08358be
  0x00007fb1a083554d:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a0835552:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a0835558:   vmovd  %xmm1,%eax
  0x00007fb1a083555c:   test   $0x1,%al
  0x00007fb1a083555e:   jne    0x00007fb1a083560f
  0x00007fb1a0835564:   test   $0x2,%al
  0x00007fb1a0835566:   jne    0x00007fb1a08355e1
  0x00007fb1a083556c:   jmpq   0x00007fb1a083560f
  0x00007fb1a0835571:   shr    $0x14,%ecx
  0x00007fb1a0835574:   and    $0x7ff,%ecx
  0x00007fb1a083557a:   cmp    $0x433,%ecx
  0x00007fb1a0835580:   ja     0x00007fb1a083560f
  0x00007fb1a0835586:   je     0x00007fb1a0835638
  0x00007fb1a083558c:   cmp    $0x432,%ecx
  0x00007fb1a0835592:   ja     0x00007fb1a0835552
  0x00007fb1a0835594:   cmp    $0x3ff,%ecx
  0x00007fb1a083559a:   jb     0x00007fb1a083560f
  0x00007fb1a08355a0:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a08355a6:   mov    $0x4338,%eax
  0x00007fb1a08355ab:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007fb1a08355af:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007fb1a08355b4:   vmovdqu %xmm3,%xmm4
  0x00007fb1a08355b8:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007fb1a08355bc:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fb1a08355c0:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fb1a08355c4:   vpextrw $0x3,%xmm1,%eax
  0x00007fb1a08355c9:   and    $0x7ff0,%eax
  0x00007fb1a08355ce:   jne    0x00007fb1a083560f
  0x00007fb1a08355d4:   vmovd  %xmm3,%eax
  0x00007fb1a08355d8:   and    $0x1,%eax
  0x00007fb1a08355db:   je     0x00007fb1a083560f
  0x00007fb1a08355e1:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a08355e7:   vpextrw $0x3,%xmm1,%eax
  0x00007fb1a08355ec:   and    $0x8000,%eax
  0x00007fb1a08355f1:   jne    0x00007fb1a08355fc
  0x00007fb1a08355f7:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a08355fc:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835600:   mov    $0x8000,%eax
  0x00007fb1a0835605:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a083560a:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a083560f:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a0835615:   vpextrw $0x3,%xmm1,%eax
  0x00007fb1a083561a:   and    $0x8000,%eax
  0x00007fb1a083561f:   jne    0x00007fb1a08358be
  0x00007fb1a0835625:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835629:   mov    $0x7ff0,%eax
  0x00007fb1a083562e:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a0835633:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a0835638:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a083563e:   vmovd  %xmm1,%eax
  0x00007fb1a0835642:   and    $0x1,%eax
  0x00007fb1a0835645:   je     0x00007fb1a083560f
  0x00007fb1a0835647:   jmp    0x00007fb1a08355e1
  0x00007fb1a0835649:   vmovd  %xmm1,%eax
  0x00007fb1a083564d:   vpsrlq $0x14,%xmm1,%xmm1
  0x00007fb1a0835652:   vmovd  %xmm1,%edx
  0x00007fb1a0835656:   or     %edx,%eax
  0x00007fb1a0835658:   je     0x00007fb1a083566d
  0x00007fb1a083565e:   vmovq  0x10(%rsp),%xmm0
  0x00007fb1a0835664:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835668:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a083566d:   vmovq  0x8(%rsp),%xmm0
  0x00007fb1a0835673:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0835678:   cmp    $0xbff0,%eax
  0x00007fb1a083567d:   jne    0x00007fb1a08356ab
  0x00007fb1a0835683:   vmovd  %xmm0,%ecx
  0x00007fb1a0835687:   vpsrlq $0x14,%xmm0,%xmm0
  0x00007fb1a083568c:   vmovd  %xmm0,%edx
  0x00007fb1a0835690:   or     %edx,%ecx
  0x00007fb1a0835692:   jne    0x00007fb1a08356ab
  0x00007fb1a0835698:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a083569c:   mov    $0x7ff8,%eax
  0x00007fb1a08356a1:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a08356a6:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a08356ab:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a08356b1:   and    $0x7ff0,%eax
  0x00007fb1a08356b6:   sub    $0x3ff0,%eax
  0x00007fb1a08356bb:   vpextrw $0x3,%xmm1,%edx
  0x00007fb1a08356c0:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a08356c4:   xor    %edx,%eax
  0x00007fb1a08356c6:   and    $0x8000,%eax
  0x00007fb1a08356cb:   je     0x00007fb1a08356d6
  0x00007fb1a08356d1:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a08356d6:   mov    $0x7ff0,%ecx
  0x00007fb1a08356db:   vpinsrw $0x3,%ecx,%xmm0,%xmm0
  0x00007fb1a08356e0:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a08356e5:   vmovd  %xmm1,%eax
  0x00007fb1a08356e9:   cmp    $0x4320,%edx
  0x00007fb1a08356ef:   ja     0x00007fb1a083570a
  0x00007fb1a08356f5:   test   $0x1,%al
  0x00007fb1a08356f7:   jne    0x00007fb1a0835829
  0x00007fb1a08356fd:   test   $0x2,%al
  0x00007fb1a08356ff:   je     0x00007fb1a083584b
  0x00007fb1a0835705:   jmpq   0x00007fb1a08357c9
  0x00007fb1a083570a:   test   $0x1,%al
  0x00007fb1a083570c:   je     0x00007fb1a083584b
  0x00007fb1a0835712:   jmpq   0x00007fb1a08357c9
  0x00007fb1a0835717:   vmovq  0x8(%rsp),%xmm2
  0x00007fb1a083571d:   vmovd  %xmm2,%eax
  0x00007fb1a0835721:   vpsrlq $0x1f,%xmm2,%xmm2
  0x00007fb1a0835726:   vmovd  %xmm2,%ecx
  0x00007fb1a083572a:   or     %ecx,%eax
  0x00007fb1a083572c:   je     0x00007fb1a0835955
  0x00007fb1a0835732:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a0835738:   vpextrw $0x3,%xmm1,%edx
  0x00007fb1a083573d:   vmovd  %xmm1,%eax
  0x00007fb1a0835741:   vmovdqu %xmm1,%xmm2
  0x00007fb1a0835745:   vpsrlq $0x20,%xmm2,%xmm2
  0x00007fb1a083574a:   vmovd  %xmm2,%ecx
  0x00007fb1a083574e:   add    %ecx,%ecx
  0x00007fb1a0835750:   or     %eax,%ecx
  0x00007fb1a0835752:   je     0x00007fb1a0835928
  0x00007fb1a0835758:   and    $0x7ff0,%edx
  0x00007fb1a083575e:   cmp    $0x7ff0,%edx
  0x00007fb1a0835764:   je     0x00007fb1a0835649
  0x00007fb1a083576a:   cmp    $0x4330,%edx
  0x00007fb1a0835770:   ja     0x00007fb1a083584b
  0x00007fb1a0835776:   cmp    $0x4320,%edx
  0x00007fb1a083577c:   jae    0x00007fb1a08356e5
  0x00007fb1a0835782:   cmp    $0x3ff0,%edx
  0x00007fb1a0835788:   jb     0x00007fb1a0835829
  0x00007fb1a083578e:   mov    $0x4338,%eax
  0x00007fb1a0835793:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fb1a0835797:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007fb1a083579c:   vmovdqu %xmm2,%xmm4
  0x00007fb1a08357a0:   vaddsd %xmm1,%xmm2,%xmm2
  0x00007fb1a08357a4:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007fb1a08357a8:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fb1a08357ac:   vpextrw $0x3,%xmm1,%eax
  0x00007fb1a08357b1:   and    $0x7fff,%eax
  0x00007fb1a08357b6:   jne    0x00007fb1a0835829
  0x00007fb1a08357bc:   vmovd  %xmm2,%eax
  0x00007fb1a08357c0:   and    $0x1,%eax
  0x00007fb1a08357c3:   je     0x00007fb1a083584b
  0x00007fb1a08357c9:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a08357cd:   mov    $0x77f0,%edx
  0x00007fb1a08357d2:   vpinsrw $0x3,%edx,%xmm1,%xmm1
  0x00007fb1a08357d7:   vmovq  0x46b9161(%rip),%xmm2        # 0x00007fb1a4eee940
  0x00007fb1a08357df:   vmovq  0x8(%rsp),%xmm4
  0x00007fb1a08357e5:   vpextrw $0x3,%xmm4,%eax
  0x00007fb1a08357ea:   mov    $0x2000,%edx
  0x00007fb1a08357ef:   vmovd  %edx,%xmm4
  0x00007fb1a08357f3:   and    $0x7fff,%eax
  0x00007fb1a08357f8:   sub    $0x10,%eax
  0x00007fb1a08357fb:   jl     0x00007fb1a0835236
  0x00007fb1a0835801:   mov    %eax,%edx
  0x00007fb1a0835803:   and    $0x7ff0,%edx
  0x00007fb1a0835809:   sub    $0x3ff0,%edx
  0x00007fb1a083580f:   mov    %edx,%ecx
  0x00007fb1a0835811:   sar    $0x1f,%edx
  0x00007fb1a0835814:   add    %edx,%ecx
  0x00007fb1a0835816:   xor    %edx,%ecx
  0x00007fb1a0835818:   add    $0x10,%ecx
  0x00007fb1a083581b:   bsr    %ecx,%ecx
  0x00007fb1a083581e:   mov    $0x80000000,%r8d
  0x00007fb1a0835824:   jmpq   0x00007fb1a0834f3c
  0x00007fb1a0835829:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a083582d:   mov    $0x7ff0,%eax
  0x00007fb1a0835832:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fb1a0835837:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a083583b:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007fb1a083583f:   movl   $0x1c,(%rsp)
  0x00007fb1a0835846:   jmpq   0x00007fb1a0835f31
  0x00007fb1a083584b:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a083584f:   mov    $0x77f0,%edx
  0x00007fb1a0835854:   vpinsrw $0x3,%edx,%xmm1,%xmm1
  0x00007fb1a0835859:   vmovq  0x46b90df(%rip),%xmm2        # 0x00007fb1a4eee940
  0x00007fb1a0835861:   vmovq  0x8(%rsp),%xmm4
  0x00007fb1a0835867:   vpextrw $0x3,%xmm4,%eax
  0x00007fb1a083586c:   mov    $0x2000,%edx
  0x00007fb1a0835871:   vmovd  %edx,%xmm4
  0x00007fb1a0835875:   and    $0x7fff,%eax
  0x00007fb1a083587a:   sub    $0x10,%eax
  0x00007fb1a083587d:   jl     0x00007fb1a0835166
  0x00007fb1a0835883:   mov    %eax,%edx
  0x00007fb1a0835885:   and    $0x7ff0,%edx
  0x00007fb1a083588b:   sub    $0x3ff0,%edx
  0x00007fb1a0835891:   mov    %edx,%ecx
  0x00007fb1a0835893:   sar    $0x1f,%edx
  0x00007fb1a0835896:   add    %edx,%ecx
  0x00007fb1a0835898:   xor    %edx,%ecx
  0x00007fb1a083589a:   add    $0x10,%ecx
  0x00007fb1a083589d:   bsr    %ecx,%ecx
  0x00007fb1a08358a0:   mov    $0x0,%r8d
  0x00007fb1a08358a6:   jmpq   0x00007fb1a0834f3c
  0x00007fb1a08358ab:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a08358af:   mov    $0x3ff0,%eax
  0x00007fb1a08358b4:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a08358b9:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a08358be:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a08358c2:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a08358c7:   add    $0x180,%eax
  0x00007fb1a08358cc:   cmp    $0x0,%eax
  0x00007fb1a08358cf:   jl     0x00007fb1a0835928
  0x00007fb1a08358d5:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007fb1a08358d9:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fb1a08358dd:   shr    $0x1f,%r8d
  0x00007fb1a08358e1:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007fb1a08358e5:   vpshufd $0xee,%xmm3,%xmm0
  0x00007fb1a08358ea:   vaddsd %xmm0,%xmm3,%xmm3
  0x00007fb1a08358ee:   movabs $0x7fb1a4eeb850,%r11
  0x00007fb1a08358f8:   vmovq  (%r11,%r8,8),%xmm4
  0x00007fb1a08358fe:   vmulsd %xmm3,%xmm1,%xmm1
  0x00007fb1a0835902:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835906:   mov    $0x3ff0,%eax
  0x00007fb1a083590b:   shl    $0xf,%r8d
  0x00007fb1a083590f:   or     %r8d,%eax
  0x00007fb1a0835912:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a0835917:   vaddsd %xmm1,%xmm5,%xmm5
  0x00007fb1a083591b:   vmulsd %xmm4,%xmm5,%xmm5
  0x00007fb1a083591f:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fb1a0835923:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a0835928:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a083592c:   mov    $0x3ff0,%eax
  0x00007fb1a0835931:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a0835936:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a083593b:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a083593f:   mov    $0x3ff0,%eax
  0x00007fb1a0835944:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a0835949:   movl   $0x1a,(%rsp)
  0x00007fb1a0835950:   jmpq   0x00007fb1a0835f31
  0x00007fb1a0835955:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a083595b:   vmovdqu %xmm1,%xmm2
  0x00007fb1a083595f:   vpextrw $0x3,%xmm1,%eax
  0x00007fb1a0835964:   and    $0x7ff0,%eax
  0x00007fb1a0835969:   cmp    $0x7ff0,%eax
  0x00007fb1a083596e:   jne    0x00007fb1a0835989
  0x00007fb1a0835974:   vmovd  %xmm2,%eax
  0x00007fb1a0835978:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007fb1a083597d:   vmovd  %xmm2,%edx
  0x00007fb1a0835981:   or     %edx,%eax
  0x00007fb1a0835983:   jne    0x00007fb1a08354df
  0x00007fb1a0835989:   vmovd  %xmm1,%eax
  0x00007fb1a083598d:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fb1a0835992:   vmovd  %xmm1,%edx
  0x00007fb1a0835996:   mov    %edx,%ecx
  0x00007fb1a0835998:   add    %edx,%edx
  0x00007fb1a083599a:   or     %edx,%eax
  0x00007fb1a083599c:   je     0x00007fb1a083593b
  0x00007fb1a083599e:   shr    $0x15,%edx
  0x00007fb1a08359a1:   cmp    $0x433,%edx
  0x00007fb1a08359a7:   ja     0x00007fb1a0835a25
  0x00007fb1a08359ad:   je     0x00007fb1a0835a17
  0x00007fb1a08359b3:   cmp    $0x3ff,%edx
  0x00007fb1a08359b9:   jb     0x00007fb1a0835a25
  0x00007fb1a08359bf:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a08359c5:   mov    $0x4338,%eax
  0x00007fb1a08359ca:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007fb1a08359ce:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007fb1a08359d3:   vmovdqu %xmm3,%xmm4
  0x00007fb1a08359d7:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007fb1a08359db:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fb1a08359df:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fb1a08359e3:   vpextrw $0x3,%xmm1,%eax
  0x00007fb1a08359e8:   and    $0x7ff0,%eax
  0x00007fb1a08359ed:   jne    0x00007fb1a0835a25
  0x00007fb1a08359f3:   vmovd  %xmm3,%eax
  0x00007fb1a08359f7:   and    $0x1,%eax
  0x00007fb1a08359fa:   je     0x00007fb1a0835a25
  0x00007fb1a0835a00:   vmovq  0x8(%rsp),%xmm0
  0x00007fb1a0835a06:   test   $0x80000000,%ecx
  0x00007fb1a0835a0c:   jne    0x00007fb1a0835a35
  0x00007fb1a0835a12:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a0835a17:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a0835a1d:   vmovd  %xmm1,%eax
  0x00007fb1a0835a21:   test   $0x1,%al
  0x00007fb1a0835a23:   jne    0x00007fb1a0835a00
  0x00007fb1a0835a25:   test   $0x80000000,%ecx
  0x00007fb1a0835a2b:   je     0x00007fb1a08358be
  0x00007fb1a0835a31:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835a35:   mov    $0x3ff0,%eax
  0x00007fb1a0835a3a:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a0835a3e:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fb1a0835a43:   vdivsd %xmm0,%xmm1,%xmm1
  0x00007fb1a0835a47:   vmovdqu %xmm1,%xmm0
  0x00007fb1a0835a4b:   movl   $0x1b,(%rsp)
  0x00007fb1a0835a52:   jmpq   0x00007fb1a0835f31
  0x00007fb1a0835a57:   vmovq  0x8(%rsp),%xmm2
  0x00007fb1a0835a5d:   vmovq  0x10(%rsp),%xmm6
  0x00007fb1a0835a63:   vpextrw $0x3,%xmm2,%eax
  0x00007fb1a0835a68:   vpextrw $0x3,%xmm6,%edx
  0x00007fb1a0835a6d:   mov    $0x7ff0,%ecx
  0x00007fb1a0835a72:   and    %edx,%ecx
  0x00007fb1a0835a74:   cmp    $0x7ff0,%ecx
  0x00007fb1a0835a7a:   je     0x00007fb1a0835e77
  0x00007fb1a0835a80:   and    $0x7ff0,%eax
  0x00007fb1a0835a85:   sub    $0x3ff0,%eax
  0x00007fb1a0835a8a:   xor    %eax,%edx
  0x00007fb1a0835a8c:   test   $0x8000,%edx
  0x00007fb1a0835a92:   jne    0x00007fb1a0835abe
  0x00007fb1a0835a98:   mov    $0x7fe0,%eax
  0x00007fb1a0835a9d:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a0835aa2:   shr    $0x10,%r8d
  0x00007fb1a0835aa6:   or     %r8d,%eax
  0x00007fb1a0835aa9:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fb1a0835aae:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007fb1a0835ab2:   movl   $0x18,(%rsp)
  0x00007fb1a0835ab9:   jmpq   0x00007fb1a0835f31
  0x00007fb1a0835abe:   mov    $0x10,%eax
  0x00007fb1a0835ac3:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a0835ac8:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835acc:   test   $0x80000000,%r8d
  0x00007fb1a0835ad3:   je     0x00007fb1a0835aec
  0x00007fb1a0835ad9:   movabs $0x8000000000000000,%r9
  0x00007fb1a0835ae3:   vmovq  %r9,%xmm2
  0x00007fb1a0835ae8:   vxorpd %xmm2,%xmm0,%xmm0
  0x00007fb1a0835aec:   movl   $0x19,(%rsp)
  0x00007fb1a0835af3:   jmpq   0x00007fb1a0835f31
  0x00007fb1a0835af8:   vpextrw $0x3,%xmm5,%ecx
  0x00007fb1a0835afd:   vpextrw $0x3,%xmm4,%edx
  0x00007fb1a0835b02:   mov    $0xffffffff,%eax
  0x00007fb1a0835b07:   and    $0x7ff0,%ecx
  0x00007fb1a0835b0d:   sub    $0x3ff0,%ecx
  0x00007fb1a0835b13:   and    $0x7ff0,%edx
  0x00007fb1a0835b19:   add    %ecx,%edx
  0x00007fb1a0835b1b:   mov    $0xffffffe1,%ecx
  0x00007fb1a0835b20:   sar    $0x4,%edx
  0x00007fb1a0835b23:   sub    %edx,%ecx
  0x00007fb1a0835b25:   jle    0x00007fb1a0835b36
  0x00007fb1a0835b2b:   cmp    $0x14,%ecx
  0x00007fb1a0835b2e:   ja     0x00007fb1a0835b58
  0x00007fb1a0835b34:   shl    %cl,%eax
  0x00007fb1a0835b36:   vmovd  %eax,%xmm0
  0x00007fb1a0835b3a:   (bad)  
  0x00007fb1a0835b3e:   lock and %al,%ch
  0x00007fb1a0835b41:   stc    
  0x00007fb1a0835b42:   fcmovnb %st(5),%st
  0x00007fb1a0835b44:   vsubsd %xmm0,%xmm5,%xmm5
  0x00007fb1a0835b48:   vaddsd %xmm1,%xmm5,%xmm5
  0x00007fb1a0835b4c:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007fb1a0835b50:   vmulsd %xmm4,%xmm5,%xmm5
  0x00007fb1a0835b54:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fb1a0835b58:   jmp    0x00007fb1a0835aec
  0x00007fb1a0835b5a:   mov    0x16(%rsp),%cx
  0x00007fb1a0835b5f:   mov    $0x80000000,%edx
  0x00007fb1a0835b64:   vmovd  %edx,%xmm1
  0x00007fb1a0835b68:   vxorpd %xmm7,%xmm7,%xmm7
  0x00007fb1a0835b6c:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007fb1a0835b70:   vmovd  %xmm0,%edx
  0x00007fb1a0835b74:   (bad)  
  0x00007fb1a0835b78:   lock sbb $0xcbd4f1c5,%eax
  0x00007fb1a0835b7e:   vpand  %xmm1,%xmm5,%xmm5
  0x00007fb1a0835b82:   and    $0x7ff0,%ecx
  0x00007fb1a0835b88:   cmp    $0x40b0,%ecx
  0x00007fb1a0835b8e:   jl     0x00007fb1a0834f77
  0x00007fb1a0835b94:   vpand  %xmm6,%xmm0,%xmm0
  0x00007fb1a0835b98:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007fb1a0835b9c:   add    $0x3fdf,%eax
  0x00007fb1a0835ba1:   shr    $0x4,%eax
  0x00007fb1a0835ba4:   sub    $0x3fe,%eax
  0x00007fb1a0835ba9:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007fb1a0835bad:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0835bb1:   movabs $0x7fb1a4eeb860,%r11
  0x00007fb1a0835bbb:   vmovq  0x46b7d2d(%rip),%xmm4        # 0x00007fb1a4eed8f0
  0x00007fb1a0835bc3:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007fb1a0835bc7:   vmovq  0x46b7d21(%rip),%xmm6        # 0x00007fb1a4eed8f0
  0x00007fb1a0835bcf:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007fb1a0835bd3:   vmovq  0x46b7d1d(%rip),%xmm1        # 0x00007fb1a4eed8f8
  0x00007fb1a0835bdb:   vpshufd $0x44,%xmm3,%xmm2
  0x00007fb1a0835be0:   vunpcklpd %xmm3,%xmm5,%xmm5
  0x00007fb1a0835be4:   vaddsd %xmm5,%xmm3,%xmm3
  0x00007fb1a0835be8:   vmovq  0x46b7d08(%rip),%xmm0        # 0x00007fb1a4eed8f8
  0x00007fb1a0835bf0:   and    $0xffc000,%edx
  0x00007fb1a0835bf6:   shr    $0xa,%edx
  0x00007fb1a0835bf9:   vaddpd -0xe40(%r11,%rdx,1),%xmm7,%xmm7
  0x00007fb1a0835c03:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007fb1a0835c07:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007fb1a0835c0b:   vmulsd %xmm2,%xmm6,%xmm6
  0x00007fb1a0835c0f:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fb1a0835c13:   vmovdqu %xmm5,%xmm2
  0x00007fb1a0835c17:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007fb1a0835c1b:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fb1a0835c1f:   vmovdqu %xmm7,%xmm0
  0x00007fb1a0835c23:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fb1a0835c27:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007fb1a0835c2b:   vmulsd %xmm2,%xmm6,%xmm6
  0x00007fb1a0835c2f:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007fb1a0835c33:   vmovdqu %xmm7,%xmm2
  0x00007fb1a0835c37:   vaddsd %xmm4,%xmm7,%xmm7
  0x00007fb1a0835c3b:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fb1a0835c3f:   vsubsd %xmm7,%xmm2,%xmm2
  0x00007fb1a0835c43:   vaddsd %xmm2,%xmm4,%xmm4
  0x00007fb1a0835c47:   vpshufd $0xee,%xmm5,%xmm2
  0x00007fb1a0835c4c:   vmovdqu %xmm7,%xmm5
  0x00007fb1a0835c50:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007fb1a0835c54:   vaddsd %xmm0,%xmm4,%xmm4
  0x00007fb1a0835c58:   vmovdqu 0x46b7c10(%rip),%xmm0        # 0x00007fb1a4eed870
  0x00007fb1a0835c60:   vsubsd %xmm7,%xmm5,%xmm5
  0x00007fb1a0835c64:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007fb1a0835c68:   vmovdqu %xmm7,%xmm4
  0x00007fb1a0835c6c:   vaddsd %xmm2,%xmm5,%xmm5
  0x00007fb1a0835c70:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007fb1a0835c74:   vmovdqu 0x46b7c34(%rip),%xmm2        # 0x00007fb1a4eed8b0
  0x00007fb1a0835c7c:   vsubsd %xmm7,%xmm4,%xmm4
  0x00007fb1a0835c80:   vaddsd %xmm5,%xmm6,%xmm6
  0x00007fb1a0835c84:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007fb1a0835c88:   vpshufd $0xee,%xmm7,%xmm5
  0x00007fb1a0835c8d:   vmovapd %xmm7,%xmm1
  0x00007fb1a0835c91:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007fb1a0835c95:   vsubsd %xmm7,%xmm1,%xmm1
  0x00007fb1a0835c99:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fb1a0835c9d:   vmovdqu 0x46b7c1b(%rip),%xmm5        # 0x00007fb1a4eed8c0
  0x00007fb1a0835ca5:   vpshufd $0x44,%xmm3,%xmm3
  0x00007fb1a0835caa:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007fb1a0835cae:   vaddsd %xmm1,%xmm6,%xmm6
  0x00007fb1a0835cb2:   vmovdqu 0x46b7bd6(%rip),%xmm1        # 0x00007fb1a4eed890
  0x00007fb1a0835cba:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007fb1a0835cbe:   vmulpd %xmm3,%xmm2,%xmm2
  0x00007fb1a0835cc2:   vpshufd $0x44,%xmm3,%xmm4
  0x00007fb1a0835cc7:   vmulpd %xmm3,%xmm3,%xmm3
  0x00007fb1a0835ccb:   vaddpd %xmm1,%xmm0,%xmm0
  0x00007fb1a0835ccf:   vaddpd %xmm2,%xmm5,%xmm5
  0x00007fb1a0835cd3:   vmulsd %xmm3,%xmm4,%xmm4
  0x00007fb1a0835cd7:   vmovq  0x46b7c01(%rip),%xmm2        # 0x00007fb1a4eed8e0
  0x00007fb1a0835cdf:   vmulpd %xmm3,%xmm3,%xmm3
  0x00007fb1a0835ce3:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a0835ce9:   mov    0x16(%rsp),%cx
  0x00007fb1a0835cee:   vmulpd %xmm4,%xmm0,%xmm0
  0x00007fb1a0835cf2:   vpextrw $0x3,%xmm7,%eax
  0x00007fb1a0835cf7:   vmulpd %xmm4,%xmm5,%xmm5
  0x00007fb1a0835cfb:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007fb1a0835cff:   vmovq  0x46b8c31(%rip),%xmm4        # 0x00007fb1a4eee938
  0x00007fb1a0835d07:   vpand  %xmm7,%xmm2,%xmm2
  0x00007fb1a0835d0b:   vaddsd %xmm6,%xmm5,%xmm5
  0x00007fb1a0835d0f:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007fb1a0835d13:   vaddpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0835d17:   and    $0x7ff0,%eax
  0x00007fb1a0835d1c:   sub    $0x3ff0,%eax
  0x00007fb1a0835d21:   and    $0x7ff0,%ecx
  0x00007fb1a0835d27:   cmp    $0x7ff0,%ecx
  0x00007fb1a0835d2d:   je     0x00007fb1a0835e77
  0x00007fb1a0835d33:   add    %eax,%ecx
  0x00007fb1a0835d35:   cmp    $0x40c0,%ecx
  0x00007fb1a0835d3b:   jae    0x00007fb1a0835edc
  0x00007fb1a0835d41:   vpshufd $0xee,%xmm5,%xmm0
  0x00007fb1a0835d46:   vpand  %xmm1,%xmm4,%xmm4
  0x00007fb1a0835d4a:   vmovdqu %xmm1,%xmm3
  0x00007fb1a0835d4e:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fb1a0835d52:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007fb1a0835d56:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007fb1a0835d5a:   mov    $0x42b8,%edx
  0x00007fb1a0835d5f:   vpinsrw $0x3,%edx,%xmm6,%xmm6
  0x00007fb1a0835d64:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007fb1a0835d68:   vmulsd %xmm2,%xmm4,%xmm4
  0x00007fb1a0835d6c:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fb1a0835d70:   vmovdqu %xmm6,%xmm5
  0x00007fb1a0835d74:   vmulsd %xmm7,%xmm3,%xmm3
  0x00007fb1a0835d78:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007fb1a0835d7c:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fb1a0835d80:   vmovdqu 0x46b7b78(%rip),%xmm7        # 0x00007fb1a4eed900
  0x00007fb1a0835d88:   vmovd  %xmm6,%edx
  0x00007fb1a0835d8c:   vsubsd %xmm5,%xmm6,%xmm6
  0x00007fb1a0835d90:   movabs $0x7fb1a4eed930,%r11
  0x00007fb1a0835d9a:   vmovdqu 0x46b7b6e(%rip),%xmm3        # 0x00007fb1a4eed910
  0x00007fb1a0835da2:   vmovq  0x46b7b76(%rip),%xmm2        # 0x00007fb1a4eed920
  0x00007fb1a0835daa:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007fb1a0835dae:   mov    %edx,%ecx
  0x00007fb1a0835db0:   and    $0xff,%edx
  0x00007fb1a0835db6:   add    %edx,%edx
  0x00007fb1a0835db8:   vmovdqu (%r11,%rdx,8),%xmm5
  0x00007fb1a0835dbe:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007fb1a0835dc2:   vpextrw $0x3,%xmm6,%edx
  0x00007fb1a0835dc7:   shr    $0x8,%ecx
  0x00007fb1a0835dca:   mov    %ecx,%eax
  0x00007fb1a0835dcc:   shr    %ecx
  0x00007fb1a0835dce:   sub    %ecx,%eax
  0x00007fb1a0835dd0:   shl    $0x14,%ecx
  0x00007fb1a0835dd3:   vmovd  %ecx,%xmm6
  0x00007fb1a0835dd7:   vpshufd $0x44,%xmm4,%xmm0
  0x00007fb1a0835ddc:   vpshufd $0x44,%xmm4,%xmm1
  0x00007fb1a0835de1:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835de5:   vmulpd %xmm1,%xmm7,%xmm7
  0x00007fb1a0835de9:   vpshufd $0x11,%xmm6,%xmm6
  0x00007fb1a0835dee:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007fb1a0835df2:   and    $0x7fff,%edx
  0x00007fb1a0835df8:   cmp    $0x4091,%edx
  0x00007fb1a0835dfe:   ja     0x00007fb1a0835a57
  0x00007fb1a0835e04:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835e08:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007fb1a0835e0c:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007fb1a0835e10:   vmulsd %xmm5,%xmm2,%xmm2
  0x00007fb1a0835e14:   vpshufd $0xee,%xmm5,%xmm6
  0x00007fb1a0835e19:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007fb1a0835e1d:   vaddsd %xmm6,%xmm2,%xmm2
  0x00007fb1a0835e21:   vpshufd $0xee,%xmm0,%xmm3
  0x00007fb1a0835e26:   add    $0x3ff,%eax
  0x00007fb1a0835e2b:   shl    $0x14,%eax
  0x00007fb1a0835e2e:   or     %r8d,%eax
  0x00007fb1a0835e31:   vmovd  %eax,%xmm4
  0x00007fb1a0835e35:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007fb1a0835e39:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007fb1a0835e3d:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007fb1a0835e41:   (bad)  
  0x00007fb1a0835e45:   hlt    
  0x00007fb1a0835e46:   and    %al,%ch
  0x00007fb1a0835e48:   sti    
  0x00007fb1a0835e49:   pop    %rax
  0x00007fb1a0835e4a:   retq   
  0x00007fb1a0835e4b:   vmovdqu %xmm0,%xmm1
  0x00007fb1a0835e4f:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fb1a0835e53:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007fb1a0835e57:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0835e5c:   and    $0x7ff0,%eax
  0x00007fb1a0835e61:   je     0x00007fb1a0835af8
  0x00007fb1a0835e67:   cmp    $0x7ff0,%eax
  0x00007fb1a0835e6c:   je     0x00007fb1a0835ab2
  0x00007fb1a0835e72:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a0835e77:   vmovq  0x8(%rsp),%xmm0
  0x00007fb1a0835e7d:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fb1a0835e81:   mov    $0xbff0,%eax
  0x00007fb1a0835e86:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007fb1a0835e8b:   vaddsd %xmm0,%xmm2,%xmm2
  0x00007fb1a0835e8f:   vpextrw $0x3,%xmm2,%eax
  0x00007fb1a0835e94:   cmp    $0x0,%eax
  0x00007fb1a0835e97:   jne    0x00007fb1a0835eb0
  0x00007fb1a0835e9d:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835ea1:   mov    $0x7ff8,%eax
  0x00007fb1a0835ea6:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a0835eab:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a0835eb0:   vmovq  0x10(%rsp),%xmm1
  0x00007fb1a0835eb6:   vmovd  %xmm1,%edx
  0x00007fb1a0835eba:   vmovdqu %xmm1,%xmm3
  0x00007fb1a0835ebe:   vpsrlq $0x14,%xmm3,%xmm3
  0x00007fb1a0835ec3:   vmovd  %xmm3,%ecx
  0x00007fb1a0835ec7:   or     %edx,%ecx
  0x00007fb1a0835ec9:   je     0x00007fb1a0835ef8
  0x00007fb1a0835ecf:   vaddsd %xmm1,%xmm1,%xmm1
  0x00007fb1a0835ed3:   vmovdqu %xmm1,%xmm0
  0x00007fb1a0835ed7:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a0835edc:   vpextrw $0x3,%xmm1,%eax
  0x00007fb1a0835ee1:   vpextrw $0x3,%xmm2,%ecx
  0x00007fb1a0835ee6:   xor    %ecx,%eax
  0x00007fb1a0835ee8:   test   $0x8000,%eax
  0x00007fb1a0835eed:   je     0x00007fb1a0835a98
  0x00007fb1a0835ef3:   jmpq   0x00007fb1a0835abe
  0x00007fb1a0835ef8:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0835efd:   and    $0x7ff0,%eax
  0x00007fb1a0835f02:   vpextrw $0x3,%xmm1,%edx
  0x00007fb1a0835f07:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0835f0b:   sub    $0x3ff0,%eax
  0x00007fb1a0835f10:   xor    %edx,%eax
  0x00007fb1a0835f12:   test   $0x8000,%eax
  0x00007fb1a0835f17:   je     0x00007fb1a0835f22
  0x00007fb1a0835f1d:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a0835f22:   mov    $0x7ff0,%edx
  0x00007fb1a0835f27:   vpinsrw $0x3,%edx,%xmm0,%xmm0
  0x00007fb1a0835f2c:   jmpq   0x00007fb1a0835f3d
  0x00007fb1a0835f31:   vmovq  %xmm0,0x18(%rsp)
  0x00007fb1a0835f37:   vmovq  0x18(%rsp),%xmm0
  0x00007fb1a0835f3d:   add    $0x28,%rsp
  0x00007fb1a0835f41:   leaveq 
  0x00007fb1a0835f42:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmLog [0x00007fb1a0835f43, 0x00007fb1a08361b7] (628 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0835f43:   push   %rbp
  0x00007fb1a0835f44:   mov    %rsp,%rbp
  0x00007fb1a0835f47:   sub    $0x18,%rsp
  0x00007fb1a0835f4b:   vmovsd %xmm0,(%rsp)
  0x00007fb1a0835f50:   movabs $0x3ff0000000000000,%rax
  0x00007fb1a0835f5a:   vmovq  %rax,%xmm2
  0x00007fb1a0835f5f:   movabs $0x77f0000000000000,%rdx
  0x00007fb1a0835f69:   vmovq  %rdx,%xmm3
  0x00007fb1a0835f6e:   mov    $0x8000,%ecx
  0x00007fb1a0835f73:   vmovd  %ecx,%xmm4
  0x00007fb1a0835f77:   movabs $0xffffe00000000000,%r11
  0x00007fb1a0835f81:   vmovq  %r11,%xmm5
  0x00007fb1a0835f86:   vmovdqu %xmm0,%xmm1
  0x00007fb1a0835f8a:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0835f8f:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fb1a0835f93:   mov    $0x3fe0,%ecx
  0x00007fb1a0835f98:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fb1a0835f9d:   movabs $0x7fb1a4eeaf40,%r8
  0x00007fb1a0835fa7:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fb1a0835fac:   vrcpps %xmm0,%xmm0
  0x00007fb1a0835fb0:   (bad)  
  0x00007fb1a0835fb4:   icebp  
  0x00007fb1a0835fb5:   or     $0xc5,%al
  0x00007fb1a0835fb7:   stc    
  0x00007fb1a0835fb8:   jo     0x00007fb1a0835faf
  0x00007fb1a0835fba:   in     $0xc5,%al
  0x00007fb1a0835fbc:   icebp  
  0x00007fb1a0835fbd:   jae    0x00007fb1a0835f90
  0x00007fb1a0835fbf:   or     $0x83,%al
  0x00007fb1a0835fc1:   callq  0x00007fb220639cd6
  0x00007fb1a0835fc6:   add    %al,(%rax)
  0x00007fb1a0835fc8:   jae    0x00007fb1a08360a1
  0x00007fb1a0835fce:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007fb1a0835fd2:   vpor   %xmm3,%xmm1,%xmm1
  0x00007fb1a0835fd6:   vmovd  %xmm0,%edx
  0x00007fb1a0835fda:   (bad)  
  0x00007fb1a0835fde:   lock sbb $0xe9dbd1c5,%eax
  0x00007fb1a0835fe4:   vpand  %xmm6,%xmm0,%xmm0
  0x00007fb1a0835fe8:   vsubsd %xmm5,%xmm1,%xmm1
  0x00007fb1a0835fec:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a0835ff0:   and    $0x7ff0,%eax
  0x00007fb1a0835ff5:   sub    %ecx,%eax
  0x00007fb1a0835ff7:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007fb1a0835ffb:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007fb1a0835fff:   vmovq  0x46b4f29(%rip),%xmm6        # 0x00007fb1a4eeaf30
  0x00007fb1a0836007:   vmovdqu 0x46b4ef1(%rip),%xmm3        # 0x00007fb1a4eeaf00
  0x00007fb1a083600f:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007fb1a0836013:   and    $0xff0000,%edx
  0x00007fb1a0836019:   shr    $0xc,%edx
  0x00007fb1a083601c:   vmovdqu (%r8,%rdx,1),%xmm0
  0x00007fb1a0836022:   vmovdqu 0x46b4ee6(%rip),%xmm4        # 0x00007fb1a4eeaf10
  0x00007fb1a083602a:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fb1a083602e:   vmovdqu 0x46b4eea(%rip),%xmm2        # 0x00007fb1a4eeaf20
  0x00007fb1a0836036:   vmulsd %xmm7,%xmm6,%xmm6
  0x00007fb1a083603a:   vmovddup %xmm1,%xmm5
  0x00007fb1a083603e:   vmulsd 0x46b4ef2(%rip),%xmm7,%xmm7        # 0x00007fb1a4eeaf38
  0x00007fb1a0836046:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007fb1a083604a:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fb1a083604e:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007fb1a0836052:   vmulpd %xmm5,%xmm5,%xmm5
  0x00007fb1a0836056:   vmovddup %xmm0,%xmm6
  0x00007fb1a083605a:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fb1a083605e:   vaddpd %xmm2,%xmm4,%xmm4
  0x00007fb1a0836062:   vmulpd %xmm5,%xmm3,%xmm3
  0x00007fb1a0836066:   vsubsd %xmm0,%xmm6,%xmm6
  0x00007fb1a083606a:   vmulsd %xmm1,%xmm4,%xmm4
  0x00007fb1a083606e:   vpshufd $0xee,%xmm0,%xmm2
  0x00007fb1a0836073:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fb1a0836077:   vmulsd %xmm5,%xmm5,%xmm5
  0x00007fb1a083607b:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007fb1a083607f:   vaddpd %xmm3,%xmm4,%xmm4
  0x00007fb1a0836083:   vaddsd %xmm7,%xmm1,%xmm1
  0x00007fb1a0836087:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007fb1a083608b:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fb1a083608f:   vpshufd $0xee,%xmm4,%xmm5
  0x00007fb1a0836094:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fb1a0836098:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fb1a083609c:   jmpq   0x00007fb1a08361b1
  0x00007fb1a08360a1:   vmovq  (%rsp),%xmm0
  0x00007fb1a08360a6:   vmovq  (%rsp),%xmm1
  0x00007fb1a08360ab:   add    $0x10,%eax
  0x00007fb1a08360ae:   cmp    $0x8000,%eax
  0x00007fb1a08360b3:   jae    0x00007fb1a083613e
  0x00007fb1a08360b9:   cmp    $0x10,%eax
  0x00007fb1a08360bc:   jb     0x00007fb1a08360d7
  0x00007fb1a08360c2:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007fb1a08360c6:   jmpq   0x00007fb1a08361b1
  0x00007fb1a08360cb:   ja     0x00007fb1a08360c2
  0x00007fb1a08360cd:   cmp    $0x0,%edx
  0x00007fb1a08360d0:   ja     0x00007fb1a08360c2
  0x00007fb1a08360d2:   jmpq   0x00007fb1a0836164
  0x00007fb1a08360d7:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a08360db:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007fb1a08360df:   vmovd  %xmm1,%edx
  0x00007fb1a08360e3:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fb1a08360e8:   vmovd  %xmm1,%ecx
  0x00007fb1a08360ec:   or     %ecx,%edx
  0x00007fb1a08360ee:   cmp    $0x0,%edx
  0x00007fb1a08360f1:   je     0x00007fb1a0836187
  0x00007fb1a08360f7:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a08360fb:   mov    $0x47f0,%eax
  0x00007fb1a0836100:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fb1a0836105:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007fb1a0836109:   vmovdqu %xmm0,%xmm1
  0x00007fb1a083610d:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0836112:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fb1a0836116:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fb1a083611b:   mov    $0x47f0,%ecx
  0x00007fb1a0836120:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fb1a0836125:   vrcpps %xmm0,%xmm0
  0x00007fb1a0836129:   (bad)  
  0x00007fb1a083612d:   icebp  
  0x00007fb1a083612e:   or     $0xc5,%al
  0x00007fb1a0836130:   stc    
  0x00007fb1a0836131:   jo     0x00007fb1a0836128
  0x00007fb1a0836133:   in     $0xc5,%al
  0x00007fb1a0836135:   icebp  
  0x00007fb1a0836136:   jae    0x00007fb1a0836109
  0x00007fb1a0836138:   or     $0xe9,%al
  0x00007fb1a083613a:   nop
  0x00007fb1a083613b:   (bad)  
  0x00007fb1a083613c:   (bad)  
  0x00007fb1a083613d:   inc    %ebp
  0x00007fb1a083613f:   stc    
  0x00007fb1a0836140:   jle    0x00007fb1a083610c
  0x00007fb1a0836142:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fb1a0836147:   vmovd  %xmm1,%ecx
  0x00007fb1a083614b:   add    %ecx,%ecx
  0x00007fb1a083614d:   cmp    $0xffe00000,%ecx
  0x00007fb1a0836153:   jae    0x00007fb1a08360cb
  0x00007fb1a0836159:   or     %ecx,%edx
  0x00007fb1a083615b:   cmp    $0x0,%edx
  0x00007fb1a083615e:   je     0x00007fb1a0836187
  0x00007fb1a0836164:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a0836168:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a083616c:   mov    $0x7ff0,%eax
  0x00007fb1a0836171:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fb1a0836176:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007fb1a083617a:   movl   $0x3,0x10(%rsp)
  0x00007fb1a0836182:   jmpq   0x00007fb1a08361a5
  0x00007fb1a0836187:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a083618b:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a083618f:   mov    $0xbff0,%eax
  0x00007fb1a0836194:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a0836199:   vdivsd %xmm1,%xmm0,%xmm0
  0x00007fb1a083619d:   movl   $0x2,0x10(%rsp)
  0x00007fb1a08361a5:   vmovq  %xmm0,0x8(%rsp)
  0x00007fb1a08361ab:   vmovq  0x8(%rsp),%xmm0
  0x00007fb1a08361b1:   add    $0x18,%rsp
  0x00007fb1a08361b5:   leaveq 
  0x00007fb1a08361b6:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmLog10 [0x00007fb1a08361b7, 0x00007fb1a0836463] (684 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08361b7:   push   %rbp
  0x00007fb1a08361b8:   mov    %rsp,%rbp
  0x00007fb1a08361bb:   sub    $0x18,%rsp
  0x00007fb1a08361bf:   vmovsd %xmm0,(%rsp)
  0x00007fb1a08361c4:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fb1a08361c8:   mov    $0x3ff0,%eax
  0x00007fb1a08361cd:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007fb1a08361d2:   mov    $0x3ede0000,%ecx
  0x00007fb1a08361d7:   vmovd  %ecx,%xmm7
  0x00007fb1a08361db:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007fb1a08361df:   mov    $0x77f0,%edx
  0x00007fb1a08361e4:   vpinsrw $0x3,%edx,%xmm3,%xmm3
  0x00007fb1a08361e9:   vmovdqu %xmm0,%xmm1
  0x00007fb1a08361ed:   mov    $0x8000,%edx
  0x00007fb1a08361f2:   vmovd  %edx,%xmm4
  0x00007fb1a08361f6:   vmovdqu 0x46b4cf2(%rip),%xmm5        # 0x00007fb1a4eeaef0
  0x00007fb1a08361fe:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a0836203:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fb1a0836207:   mov    $0x3fe0,%ecx
  0x00007fb1a083620c:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fb1a0836211:   vmovdqu 0x46b4cc7(%rip),%xmm2        # 0x00007fb1a4eeaee0
  0x00007fb1a0836219:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fb1a083621e:   vrcpps %xmm0,%xmm0
  0x00007fb1a0836222:   (bad)  
  0x00007fb1a0836226:   icebp  
  0x00007fb1a0836227:   or     $0xc5,%al
  0x00007fb1a0836229:   stc    
  0x00007fb1a083622a:   jo     0x00007fb1a0836221
  0x00007fb1a083622c:   rex.WRX vpsrlq $0xc,%xmm1,%xmm1
  0x00007fb1a0836232:   sub    $0x10,%eax
  0x00007fb1a0836235:   cmp    $0x7fe0,%eax
  0x00007fb1a083623a:   jae    0x00007fb1a0836337
  0x00007fb1a0836240:   vmulss %xmm7,%xmm0,%xmm0
  0x00007fb1a0836244:   vpor   %xmm3,%xmm1,%xmm1
  0x00007fb1a0836248:   movabs $0x7fb1a4eea6d0,%r11
  0x00007fb1a0836252:   vandpd %xmm1,%xmm5,%xmm5
  0x00007fb1a0836256:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007fb1a083625a:   vsubsd %xmm5,%xmm1,%xmm1
  0x00007fb1a083625e:   vmovd  %xmm0,%edx
  0x00007fb1a0836262:   (bad)  
  0x00007fb1a0836266:   lock sbb $0xc654f9c5,%eax
  0x00007fb1a083626c:   and    $0x7ff0,%eax
  0x00007fb1a0836271:   sub    %ecx,%eax
  0x00007fb1a0836273:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007fb1a0836277:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fb1a083627b:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007fb1a083627f:   vmovq  0x46b4439(%rip),%xmm6        # 0x00007fb1a4eea6c0
  0x00007fb1a0836287:   vmovdqu 0x46b4401(%rip),%xmm3        # 0x00007fb1a4eea690
  0x00007fb1a083628f:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007fb1a0836293:   and    $0xff0000,%edx
  0x00007fb1a0836299:   shr    $0xc,%edx
  0x00007fb1a083629c:   vmovdqu -0x5e0(%r11,%rdx,1),%xmm0
  0x00007fb1a08362a6:   vmovdqu 0x46b43f2(%rip),%xmm4        # 0x00007fb1a4eea6a0
  0x00007fb1a08362ae:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fb1a08362b2:   vmovdqu 0x46b43f6(%rip),%xmm2        # 0x00007fb1a4eea6b0
  0x00007fb1a08362ba:   vmulsd %xmm7,%xmm6,%xmm6
  0x00007fb1a08362be:   vpshufd $0x44,%xmm1,%xmm5
  0x00007fb1a08362c3:   vmulsd 0x46b43fd(%rip),%xmm7,%xmm7        # 0x00007fb1a4eea6c8
  0x00007fb1a08362cb:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007fb1a08362cf:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fb1a08362d3:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007fb1a08362d7:   vmovq  0x46b4c09(%rip),%xmm6        # 0x00007fb1a4eeaee8
  0x00007fb1a08362df:   vmulpd %xmm5,%xmm5,%xmm5
  0x00007fb1a08362e3:   vaddpd %xmm2,%xmm4,%xmm4
  0x00007fb1a08362e7:   vmulpd %xmm5,%xmm3,%xmm3
  0x00007fb1a08362eb:   vpshufd $0xe4,%xmm0,%xmm2
  0x00007fb1a08362f0:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fb1a08362f4:   vmulsd %xmm1,%xmm4,%xmm4
  0x00007fb1a08362f8:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007fb1a08362fc:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007fb1a0836300:   vaddsd %xmm2,%xmm1,%xmm1
  0x00007fb1a0836304:   vpshufd $0xee,%xmm0,%xmm2
  0x00007fb1a0836309:   vmulsd %xmm5,%xmm5,%xmm5
  0x00007fb1a083630d:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007fb1a0836311:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fb1a0836315:   vaddpd %xmm3,%xmm4,%xmm4
  0x00007fb1a0836319:   vaddsd %xmm7,%xmm1,%xmm1
  0x00007fb1a083631d:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007fb1a0836321:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fb1a0836325:   vpshufd $0xee,%xmm4,%xmm5
  0x00007fb1a083632a:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fb1a083632e:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fb1a0836332:   jmpq   0x00007fb1a083645d
  0x00007fb1a0836337:   vmovq  (%rsp),%xmm0
  0x00007fb1a083633c:   vmovq  (%rsp),%xmm1
  0x00007fb1a0836341:   add    $0x10,%eax
  0x00007fb1a0836344:   cmp    $0x8000,%eax
  0x00007fb1a0836349:   jae    0x00007fb1a08363ea
  0x00007fb1a083634f:   cmp    $0x10,%eax
  0x00007fb1a0836352:   jb     0x00007fb1a083636d
  0x00007fb1a0836358:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007fb1a083635c:   jmpq   0x00007fb1a083645d
  0x00007fb1a0836361:   ja     0x00007fb1a0836358
  0x00007fb1a0836363:   cmp    $0x0,%edx
  0x00007fb1a0836366:   ja     0x00007fb1a0836358
  0x00007fb1a0836368:   jmpq   0x00007fb1a0836410
  0x00007fb1a083636d:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a0836371:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007fb1a0836375:   vmovd  %xmm1,%edx
  0x00007fb1a0836379:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fb1a083637e:   vmovd  %xmm1,%ecx
  0x00007fb1a0836382:   or     %ecx,%edx
  0x00007fb1a0836384:   cmp    $0x0,%edx
  0x00007fb1a0836387:   je     0x00007fb1a0836433
  0x00007fb1a083638d:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a0836391:   mov    $0x47f0,%eax
  0x00007fb1a0836396:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fb1a083639b:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007fb1a083639f:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fb1a08363a3:   mov    $0x3ff0,%eax
  0x00007fb1a08363a8:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007fb1a08363ad:   vmovdqu %xmm0,%xmm1
  0x00007fb1a08363b1:   vpextrw $0x3,%xmm0,%eax
  0x00007fb1a08363b6:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fb1a08363ba:   mov    $0x47f0,%ecx
  0x00007fb1a08363bf:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fb1a08363c4:   vmovdqu 0x46b4b14(%rip),%xmm2        # 0x00007fb1a4eeaee0
  0x00007fb1a08363cc:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fb1a08363d1:   vrcpps %xmm0,%xmm0
  0x00007fb1a08363d5:   (bad)  
  0x00007fb1a08363d9:   icebp  
  0x00007fb1a08363da:   or     $0xc5,%al
  0x00007fb1a08363dc:   stc    
  0x00007fb1a08363dd:   jo     0x00007fb1a08363d4
  0x00007fb1a08363df:   rex.WRX vpsrlq $0xc,%xmm1,%xmm1
  0x00007fb1a08363e5:   jmpq   0x00007fb1a0836240
  0x00007fb1a08363ea:   vmovd  %xmm1,%edx
  0x00007fb1a08363ee:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fb1a08363f3:   vmovd  %xmm1,%ecx
  0x00007fb1a08363f7:   add    %ecx,%ecx
  0x00007fb1a08363f9:   cmp    $0xffe00000,%ecx
  0x00007fb1a08363ff:   jae    0x00007fb1a0836361
  0x00007fb1a0836405:   or     %ecx,%edx
  0x00007fb1a0836407:   cmp    $0x0,%edx
  0x00007fb1a083640a:   je     0x00007fb1a0836433
  0x00007fb1a0836410:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a0836414:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a0836418:   mov    $0x7ff0,%eax
  0x00007fb1a083641d:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fb1a0836422:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007fb1a0836426:   movl   $0x9,0x10(%rsp)
  0x00007fb1a083642e:   jmpq   0x00007fb1a0836451
  0x00007fb1a0836433:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fb1a0836437:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fb1a083643b:   mov    $0xbff0,%eax
  0x00007fb1a0836440:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fb1a0836445:   vdivsd %xmm1,%xmm0,%xmm0
  0x00007fb1a0836449:   movl   $0x8,0x10(%rsp)
  0x00007fb1a0836451:   vmovq  %xmm0,0x8(%rsp)
  0x00007fb1a0836457:   vmovq  0x8(%rsp),%xmm0
  0x00007fb1a083645d:   add    $0x18,%rsp
  0x00007fb1a0836461:   leaveq 
  0x00007fb1a0836462:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::getCPUIDNameInfo_stub [0x00007fb1a083a300, 0x00007fb1a083a3df] (223 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a083a300:   push   %rbp
  0x00007fb1a083a301:   mov    %rdi,%rbp
  0x00007fb1a083a304:   push   %rbx
  0x00007fb1a083a305:   push   %rsi
  0x00007fb1a083a306:   pushfq 
  0x00007fb1a083a307:   pop    %rax
  0x00007fb1a083a308:   push   %rax
  0x00007fb1a083a309:   mov    %rax,%rcx
  0x00007fb1a083a30c:   xor    $0x40000,%eax
  0x00007fb1a083a311:   push   %rax
  0x00007fb1a083a312:   popfq  
  0x00007fb1a083a313:   pushfq 
  0x00007fb1a083a314:   pop    %rax
  0x00007fb1a083a315:   cmp    %rcx,%rax
  0x00007fb1a083a318:   jne    0x00007fb1a083a324
  0x00007fb1a083a31a:   mov    $0x300,%eax
  0x00007fb1a083a31f:   jmpq   0x00007fb1a083a3da
  0x00007fb1a083a324:   mov    %rcx,%rax
  0x00007fb1a083a327:   xor    $0x200000,%eax
  0x00007fb1a083a32c:   push   %rax
  0x00007fb1a083a32d:   popfq  
  0x00007fb1a083a32e:   pushfq 
  0x00007fb1a083a32f:   pop    %rax
  0x00007fb1a083a330:   cmp    %rax,%rcx
  0x00007fb1a083a333:   jne    0x00007fb1a083a33f
  0x00007fb1a083a335:   mov    $0x400,%eax
  0x00007fb1a083a33a:   jmpq   0x00007fb1a083a3da
  0x00007fb1a083a33f:   xor    %eax,%eax
  0x00007fb1a083a341:   cpuid  
  0x00007fb1a083a343:   or     %eax,%eax
  0x00007fb1a083a345:   je     0x00007fb1a083a335
  0x00007fb1a083a347:   mov    $0x80000000,%eax
  0x00007fb1a083a34c:   cpuid  
  0x00007fb1a083a34e:   cmp    $0x80000004,%eax
  0x00007fb1a083a353:   jb     0x00007fb1a083a3da
  0x00007fb1a083a359:   mov    $0x80000002,%eax
  0x00007fb1a083a35e:   cpuid  
  0x00007fb1a083a360:   lea    0x90(%rbp),%rsi
  0x00007fb1a083a367:   mov    %eax,(%rsi)
  0x00007fb1a083a369:   lea    0x94(%rbp),%rsi
  0x00007fb1a083a370:   mov    %ebx,(%rsi)
  0x00007fb1a083a372:   lea    0x98(%rbp),%rsi
  0x00007fb1a083a379:   mov    %ecx,(%rsi)
  0x00007fb1a083a37b:   lea    0x9c(%rbp),%rsi
  0x00007fb1a083a382:   mov    %edx,(%rsi)
  0x00007fb1a083a384:   mov    $0x80000003,%eax
  0x00007fb1a083a389:   cpuid  
  0x00007fb1a083a38b:   lea    0xa0(%rbp),%rsi
  0x00007fb1a083a392:   mov    %eax,(%rsi)
  0x00007fb1a083a394:   lea    0xa4(%rbp),%rsi
  0x00007fb1a083a39b:   mov    %ebx,(%rsi)
  0x00007fb1a083a39d:   lea    0xa8(%rbp),%rsi
  0x00007fb1a083a3a4:   mov    %ecx,(%rsi)
  0x00007fb1a083a3a6:   lea    0xac(%rbp),%rsi
  0x00007fb1a083a3ad:   mov    %edx,(%rsi)
  0x00007fb1a083a3af:   mov    $0x80000004,%eax
  0x00007fb1a083a3b4:   cpuid  
  0x00007fb1a083a3b6:   lea    0xb0(%rbp),%rsi
  0x00007fb1a083a3bd:   mov    %eax,(%rsi)
  0x00007fb1a083a3bf:   lea    0xb4(%rbp),%rsi
  0x00007fb1a083a3c6:   mov    %ebx,(%rsi)
  0x00007fb1a083a3c8:   lea    0xb8(%rbp),%rsi
  0x00007fb1a083a3cf:   mov    %ecx,(%rsi)
  0x00007fb1a083a3d1:   lea    0xbc(%rbp),%rsi
  0x00007fb1a083a3d8:   mov    %edx,(%rsi)
  0x00007fb1a083a3da:   popfq  
  0x00007fb1a083a3db:   pop    %rsi
  0x00007fb1a083a3dc:   pop    %rbx
  0x00007fb1a083a3dd:   pop    %rbp
  0x00007fb1a083a3de:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - jfr_write_checkpoint 0x00007fb1a084ec10
--------------------------------------------------------------------------------
  0x00007fb1a084ec80:   push   %rbp
  0x00007fb1a084ec81:   mov    %rsp,%rbp
  0x00007fb1a084ec84:   vzeroupper 
  0x00007fb1a084ec87:   mov    %rbp,0x2d0(%r15)
  0x00007fb1a084ec8e:   movabs $0x7fb1a084ec84,%r10
  0x00007fb1a084ec98:   mov    %r10,0x2c8(%r15)
  0x00007fb1a084ec9f:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a084eca6:   mov    %r15,%rdi
  0x00007fb1a084eca9:   test   $0xf,%spl
  0x00007fb1a084ecad:   je     0x00007fb1a084ecc5
  0x00007fb1a084ecb3:   sub    $0x8,%rsp
  0x00007fb1a084ecb7:   callq  0x00007fb1a4415420 = JfrIntrinsicSupport::write_checkpoint(JavaThread*)
  0x00007fb1a084ecbc:   add    $0x8,%rsp
  0x00007fb1a084ecc0:   jmpq   0x00007fb1a084ecca
  0x00007fb1a084ecc5:   callq  0x00007fb1a4415420 = JfrIntrinsicSupport::write_checkpoint(JavaThread*)
  0x00007fb1a084ecca:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a084ecd5:   movq   $0x0,0x2d0(%r15)
  0x00007fb1a084ece0:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a084eceb:   vzeroupper 
  0x00007fb1a084ecee:   test   %rax,%rax
  0x00007fb1a084ecf1:   je     0x00007fb1a084ecfb
  0x00007fb1a084ecf7:   mov    -0x2(%rax),%rax
  0x00007fb1a084ecfb:   leaveq 
  0x00007fb1a084ecfc:   retq   
  0x00007fb1a084ecfd:   hlt    
  0x00007fb1a084ecfe:   hlt    
  0x00007fb1a084ecff:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 4 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - wrong_method_stub 0x00007fb1a084e690
--------------------------------------------------------------------------------
  0x00007fb1a084e700:   push   %rbp
  0x00007fb1a084e701:   mov    %rsp,%rbp
  0x00007fb1a084e704:   pushfq 
  0x00007fb1a084e705:   sub    $0x8,%rsp
  0x00007fb1a084e709:   sub    $0x80,%rsp
  0x00007fb1a084e710:   mov    %rax,0x78(%rsp)
  0x00007fb1a084e715:   mov    %rcx,0x70(%rsp)
  0x00007fb1a084e71a:   mov    %rdx,0x68(%rsp)
  0x00007fb1a084e71f:   mov    %rbx,0x60(%rsp)
  0x00007fb1a084e724:   mov    %rbp,0x50(%rsp)
  0x00007fb1a084e729:   mov    %rsi,0x48(%rsp)
  0x00007fb1a084e72e:   mov    %rdi,0x40(%rsp)
  0x00007fb1a084e733:   mov    %r8,0x38(%rsp)
  0x00007fb1a084e738:   mov    %r9,0x30(%rsp)
  0x00007fb1a084e73d:   mov    %r10,0x28(%rsp)
  0x00007fb1a084e742:   mov    %r11,0x20(%rsp)
  0x00007fb1a084e747:   mov    %r12,0x18(%rsp)
  0x00007fb1a084e74c:   mov    %r13,0x10(%rsp)
  0x00007fb1a084e751:   mov    %r14,0x8(%rsp)
  0x00007fb1a084e756:   mov    %r15,(%rsp)
  0x00007fb1a084e75a:   sub    $0xa80,%rsp
  0x00007fb1a084e761:   fxsave64 (%rsp)
  0x00007fb1a084e766:   vzeroupper 
  0x00007fb1a084e769:   vzeroupper 
  0x00007fb1a084e76c:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a084e773:   mov    %r15,%rdi
  0x00007fb1a084e776:   callq  0x00007fb1a4873b00 = SharedRuntime::handle_wrong_method(JavaThread*)
  0x00007fb1a084e77b:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a084e786:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a084e791:   vzeroupper 
  0x00007fb1a084e794:   cmpq   $0x0,0x8(%r15)
  0x00007fb1a084e799:   jne    0x00007fb1a084e829
  0x00007fb1a084e79f:   mov    0x320(%r15),%rbx
  0x00007fb1a084e7a6:   movq   $0x0,0x320(%r15)
  0x00007fb1a084e7b1:   mov    %rbx,0xae0(%rsp)
  0x00007fb1a084e7b9:   mov    %rax,0xaf8(%rsp)
  0x00007fb1a084e7c1:   vzeroupper 
  0x00007fb1a084e7c4:   fxrstor64 (%rsp)
  0x00007fb1a084e7c9:   add    $0xa80,%rsp
  0x00007fb1a084e7d0:   mov    (%rsp),%r15
  0x00007fb1a084e7d4:   mov    0x8(%rsp),%r14
  0x00007fb1a084e7d9:   mov    0x10(%rsp),%r13
  0x00007fb1a084e7de:   mov    0x18(%rsp),%r12
  0x00007fb1a084e7e3:   mov    0x20(%rsp),%r11
  0x00007fb1a084e7e8:   mov    0x28(%rsp),%r10
  0x00007fb1a084e7ed:   mov    0x30(%rsp),%r9
  0x00007fb1a084e7f2:   mov    0x38(%rsp),%r8
  0x00007fb1a084e7f7:   mov    0x40(%rsp),%rdi
  0x00007fb1a084e7fc:   mov    0x48(%rsp),%rsi
  0x00007fb1a084e801:   mov    0x50(%rsp),%rbp
  0x00007fb1a084e806:   mov    0x60(%rsp),%rbx
  0x00007fb1a084e80b:   mov    0x68(%rsp),%rdx
  0x00007fb1a084e810:   mov    0x70(%rsp),%rcx
  0x00007fb1a084e815:   mov    0x78(%rsp),%rax
  0x00007fb1a084e81a:   add    $0x80,%rsp
  0x00007fb1a084e821:   add    $0x8,%rsp
  0x00007fb1a084e825:   popfq  
  0x00007fb1a084e826:   pop    %rbp
  0x00007fb1a084e827:   jmpq   *%rax
  0x00007fb1a084e829:   vzeroupper 
  0x00007fb1a084e82c:   fxrstor64 (%rsp)
  0x00007fb1a084e831:   add    $0xa80,%rsp
  0x00007fb1a084e838:   mov    (%rsp),%r15
  0x00007fb1a084e83c:   mov    0x8(%rsp),%r14
  0x00007fb1a084e841:   mov    0x10(%rsp),%r13
  0x00007fb1a084e846:   mov    0x18(%rsp),%r12
  0x00007fb1a084e84b:   mov    0x20(%rsp),%r11
  0x00007fb1a084e850:   mov    0x28(%rsp),%r10
  0x00007fb1a084e855:   mov    0x30(%rsp),%r9
  0x00007fb1a084e85a:   mov    0x38(%rsp),%r8
  0x00007fb1a084e85f:   mov    0x40(%rsp),%rdi
  0x00007fb1a084e864:   mov    0x48(%rsp),%rsi
  0x00007fb1a084e869:   mov    0x50(%rsp),%rbp
  0x00007fb1a084e86e:   mov    0x60(%rsp),%rbx
  0x00007fb1a084e873:   mov    0x68(%rsp),%rdx
  0x00007fb1a084e878:   mov    0x70(%rsp),%rcx
  0x00007fb1a084e87d:   mov    0x78(%rsp),%rax
  0x00007fb1a084e882:   add    $0x80,%rsp
  0x00007fb1a084e889:   add    $0x8,%rsp
  0x00007fb1a084e88d:   popfq  
  0x00007fb1a084e88e:   pop    %rbp
  0x00007fb1a084e88f:   movq   $0x0,0x318(%r15)
  0x00007fb1a084e89a:   mov    0x8(%r15),%rax
  0x00007fb1a084e89e:   jmpq   0x00007fb1a0832c00
  0x00007fb1a084e8a3:   hlt    
  0x00007fb1a084e8a4:   hlt    
  0x00007fb1a084e8a5:   hlt    
  0x00007fb1a084e8a6:   hlt    
  0x00007fb1a084e8a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - wrong_method_abstract_stub 0x00007fb1a0895190
--------------------------------------------------------------------------------
  0x00007fb1a0895200:   push   %rbp
  0x00007fb1a0895201:   mov    %rsp,%rbp
  0x00007fb1a0895204:   pushfq 
  0x00007fb1a0895205:   sub    $0x8,%rsp
  0x00007fb1a0895209:   sub    $0x80,%rsp
  0x00007fb1a0895210:   mov    %rax,0x78(%rsp)
  0x00007fb1a0895215:   mov    %rcx,0x70(%rsp)
  0x00007fb1a089521a:   mov    %rdx,0x68(%rsp)
  0x00007fb1a089521f:   mov    %rbx,0x60(%rsp)
  0x00007fb1a0895224:   mov    %rbp,0x50(%rsp)
  0x00007fb1a0895229:   mov    %rsi,0x48(%rsp)
  0x00007fb1a089522e:   mov    %rdi,0x40(%rsp)
  0x00007fb1a0895233:   mov    %r8,0x38(%rsp)
  0x00007fb1a0895238:   mov    %r9,0x30(%rsp)
  0x00007fb1a089523d:   mov    %r10,0x28(%rsp)
  0x00007fb1a0895242:   mov    %r11,0x20(%rsp)
  0x00007fb1a0895247:   mov    %r12,0x18(%rsp)
  0x00007fb1a089524c:   mov    %r13,0x10(%rsp)
  0x00007fb1a0895251:   mov    %r14,0x8(%rsp)
  0x00007fb1a0895256:   mov    %r15,(%rsp)
  0x00007fb1a089525a:   sub    $0xa80,%rsp
  0x00007fb1a0895261:   fxsave64 (%rsp)
  0x00007fb1a0895266:   vzeroupper 
  0x00007fb1a0895269:   vzeroupper 
  0x00007fb1a089526c:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a0895273:   mov    %r15,%rdi
  0x00007fb1a0895276:   callq  0x00007fb1a48726e0 = SharedRuntime::handle_wrong_method_abstract(JavaThread*)
  0x00007fb1a089527b:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a0895286:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a0895291:   vzeroupper 
  0x00007fb1a0895294:   cmpq   $0x0,0x8(%r15)
  0x00007fb1a0895299:   jne    0x00007fb1a0895329
  0x00007fb1a089529f:   mov    0x320(%r15),%rbx
  0x00007fb1a08952a6:   movq   $0x0,0x320(%r15)
  0x00007fb1a08952b1:   mov    %rbx,0xae0(%rsp)
  0x00007fb1a08952b9:   mov    %rax,0xaf8(%rsp)
  0x00007fb1a08952c1:   vzeroupper 
  0x00007fb1a08952c4:   fxrstor64 (%rsp)
  0x00007fb1a08952c9:   add    $0xa80,%rsp
  0x00007fb1a08952d0:   mov    (%rsp),%r15
  0x00007fb1a08952d4:   mov    0x8(%rsp),%r14
  0x00007fb1a08952d9:   mov    0x10(%rsp),%r13
  0x00007fb1a08952de:   mov    0x18(%rsp),%r12
  0x00007fb1a08952e3:   mov    0x20(%rsp),%r11
  0x00007fb1a08952e8:   mov    0x28(%rsp),%r10
  0x00007fb1a08952ed:   mov    0x30(%rsp),%r9
  0x00007fb1a08952f2:   mov    0x38(%rsp),%r8
  0x00007fb1a08952f7:   mov    0x40(%rsp),%rdi
  0x00007fb1a08952fc:   mov    0x48(%rsp),%rsi
  0x00007fb1a0895301:   mov    0x50(%rsp),%rbp
  0x00007fb1a0895306:   mov    0x60(%rsp),%rbx
  0x00007fb1a089530b:   mov    0x68(%rsp),%rdx
  0x00007fb1a0895310:   mov    0x70(%rsp),%rcx
  0x00007fb1a0895315:   mov    0x78(%rsp),%rax
  0x00007fb1a089531a:   add    $0x80,%rsp
  0x00007fb1a0895321:   add    $0x8,%rsp
  0x00007fb1a0895325:   popfq  
  0x00007fb1a0895326:   pop    %rbp
  0x00007fb1a0895327:   jmpq   *%rax
  0x00007fb1a0895329:   vzeroupper 
  0x00007fb1a089532c:   fxrstor64 (%rsp)
  0x00007fb1a0895331:   add    $0xa80,%rsp
  0x00007fb1a0895338:   mov    (%rsp),%r15
  0x00007fb1a089533c:   mov    0x8(%rsp),%r14
  0x00007fb1a0895341:   mov    0x10(%rsp),%r13
  0x00007fb1a0895346:   mov    0x18(%rsp),%r12
  0x00007fb1a089534b:   mov    0x20(%rsp),%r11
  0x00007fb1a0895350:   mov    0x28(%rsp),%r10
  0x00007fb1a0895355:   mov    0x30(%rsp),%r9
  0x00007fb1a089535a:   mov    0x38(%rsp),%r8
  0x00007fb1a089535f:   mov    0x40(%rsp),%rdi
  0x00007fb1a0895364:   mov    0x48(%rsp),%rsi
  0x00007fb1a0895369:   mov    0x50(%rsp),%rbp
  0x00007fb1a089536e:   mov    0x60(%rsp),%rbx
  0x00007fb1a0895373:   mov    0x68(%rsp),%rdx
  0x00007fb1a0895378:   mov    0x70(%rsp),%rcx
  0x00007fb1a089537d:   mov    0x78(%rsp),%rax
  0x00007fb1a0895382:   add    $0x80,%rsp
  0x00007fb1a0895389:   add    $0x8,%rsp
  0x00007fb1a089538d:   popfq  
  0x00007fb1a089538e:   pop    %rbp
  0x00007fb1a089538f:   movq   $0x0,0x318(%r15)
  0x00007fb1a089539a:   mov    0x8(%r15),%rax
  0x00007fb1a089539e:   jmpq   0x00007fb1a0832c00
  0x00007fb1a08953a3:   hlt    
  0x00007fb1a08953a4:   hlt    
  0x00007fb1a08953a5:   hlt    
  0x00007fb1a08953a6:   hlt    
  0x00007fb1a08953a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - ic_miss_stub 0x00007fb1a0895490
--------------------------------------------------------------------------------
  0x00007fb1a0895500:   push   %rbp
  0x00007fb1a0895501:   mov    %rsp,%rbp
  0x00007fb1a0895504:   pushfq 
  0x00007fb1a0895505:   sub    $0x8,%rsp
  0x00007fb1a0895509:   sub    $0x80,%rsp
  0x00007fb1a0895510:   mov    %rax,0x78(%rsp)
  0x00007fb1a0895515:   mov    %rcx,0x70(%rsp)
  0x00007fb1a089551a:   mov    %rdx,0x68(%rsp)
  0x00007fb1a089551f:   mov    %rbx,0x60(%rsp)
  0x00007fb1a0895524:   mov    %rbp,0x50(%rsp)
  0x00007fb1a0895529:   mov    %rsi,0x48(%rsp)
  0x00007fb1a089552e:   mov    %rdi,0x40(%rsp)
  0x00007fb1a0895533:   mov    %r8,0x38(%rsp)
  0x00007fb1a0895538:   mov    %r9,0x30(%rsp)
  0x00007fb1a089553d:   mov    %r10,0x28(%rsp)
  0x00007fb1a0895542:   mov    %r11,0x20(%rsp)
  0x00007fb1a0895547:   mov    %r12,0x18(%rsp)
  0x00007fb1a089554c:   mov    %r13,0x10(%rsp)
  0x00007fb1a0895551:   mov    %r14,0x8(%rsp)
  0x00007fb1a0895556:   mov    %r15,(%rsp)
  0x00007fb1a089555a:   sub    $0xa80,%rsp
  0x00007fb1a0895561:   fxsave64 (%rsp)
  0x00007fb1a0895566:   vzeroupper 
  0x00007fb1a0895569:   vzeroupper 
  0x00007fb1a089556c:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a0895573:   mov    %r15,%rdi
  0x00007fb1a0895576:   callq  0x00007fb1a48759a0 = SharedRuntime::handle_wrong_method_ic_miss(JavaThread*)
  0x00007fb1a089557b:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a0895586:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a0895591:   vzeroupper 
  0x00007fb1a0895594:   cmpq   $0x0,0x8(%r15)
  0x00007fb1a0895599:   jne    0x00007fb1a0895629
  0x00007fb1a089559f:   mov    0x320(%r15),%rbx
  0x00007fb1a08955a6:   movq   $0x0,0x320(%r15)
  0x00007fb1a08955b1:   mov    %rbx,0xae0(%rsp)
  0x00007fb1a08955b9:   mov    %rax,0xaf8(%rsp)
  0x00007fb1a08955c1:   vzeroupper 
  0x00007fb1a08955c4:   fxrstor64 (%rsp)
  0x00007fb1a08955c9:   add    $0xa80,%rsp
  0x00007fb1a08955d0:   mov    (%rsp),%r15
  0x00007fb1a08955d4:   mov    0x8(%rsp),%r14
  0x00007fb1a08955d9:   mov    0x10(%rsp),%r13
  0x00007fb1a08955de:   mov    0x18(%rsp),%r12
  0x00007fb1a08955e3:   mov    0x20(%rsp),%r11
  0x00007fb1a08955e8:   mov    0x28(%rsp),%r10
  0x00007fb1a08955ed:   mov    0x30(%rsp),%r9
  0x00007fb1a08955f2:   mov    0x38(%rsp),%r8
  0x00007fb1a08955f7:   mov    0x40(%rsp),%rdi
  0x00007fb1a08955fc:   mov    0x48(%rsp),%rsi
  0x00007fb1a0895601:   mov    0x50(%rsp),%rbp
  0x00007fb1a0895606:   mov    0x60(%rsp),%rbx
  0x00007fb1a089560b:   mov    0x68(%rsp),%rdx
  0x00007fb1a0895610:   mov    0x70(%rsp),%rcx
  0x00007fb1a0895615:   mov    0x78(%rsp),%rax
  0x00007fb1a089561a:   add    $0x80,%rsp
  0x00007fb1a0895621:   add    $0x8,%rsp
  0x00007fb1a0895625:   popfq  
  0x00007fb1a0895626:   pop    %rbp
  0x00007fb1a0895627:   jmpq   *%rax
  0x00007fb1a0895629:   vzeroupper 
  0x00007fb1a089562c:   fxrstor64 (%rsp)
  0x00007fb1a0895631:   add    $0xa80,%rsp
  0x00007fb1a0895638:   mov    (%rsp),%r15
  0x00007fb1a089563c:   mov    0x8(%rsp),%r14
  0x00007fb1a0895641:   mov    0x10(%rsp),%r13
  0x00007fb1a0895646:   mov    0x18(%rsp),%r12
  0x00007fb1a089564b:   mov    0x20(%rsp),%r11
  0x00007fb1a0895650:   mov    0x28(%rsp),%r10
  0x00007fb1a0895655:   mov    0x30(%rsp),%r9
  0x00007fb1a089565a:   mov    0x38(%rsp),%r8
  0x00007fb1a089565f:   mov    0x40(%rsp),%rdi
  0x00007fb1a0895664:   mov    0x48(%rsp),%rsi
  0x00007fb1a0895669:   mov    0x50(%rsp),%rbp
  0x00007fb1a089566e:   mov    0x60(%rsp),%rbx
  0x00007fb1a0895673:   mov    0x68(%rsp),%rdx
  0x00007fb1a0895678:   mov    0x70(%rsp),%rcx
  0x00007fb1a089567d:   mov    0x78(%rsp),%rax
  0x00007fb1a0895682:   add    $0x80,%rsp
  0x00007fb1a0895689:   add    $0x8,%rsp
  0x00007fb1a089568d:   popfq  
  0x00007fb1a089568e:   pop    %rbp
  0x00007fb1a089568f:   movq   $0x0,0x318(%r15)
  0x00007fb1a089569a:   mov    0x8(%r15),%rax
  0x00007fb1a089569e:   jmpq   0x00007fb1a0832c00
  0x00007fb1a08956a3:   hlt    
  0x00007fb1a08956a4:   hlt    
  0x00007fb1a08956a5:   hlt    
  0x00007fb1a08956a6:   hlt    
  0x00007fb1a08956a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_opt_virtual_call 0x00007fb1a0895790
--------------------------------------------------------------------------------
  0x00007fb1a0895800:   push   %rbp
  0x00007fb1a0895801:   mov    %rsp,%rbp
  0x00007fb1a0895804:   pushfq 
  0x00007fb1a0895805:   sub    $0x8,%rsp
  0x00007fb1a0895809:   sub    $0x80,%rsp
  0x00007fb1a0895810:   mov    %rax,0x78(%rsp)
  0x00007fb1a0895815:   mov    %rcx,0x70(%rsp)
  0x00007fb1a089581a:   mov    %rdx,0x68(%rsp)
  0x00007fb1a089581f:   mov    %rbx,0x60(%rsp)
  0x00007fb1a0895824:   mov    %rbp,0x50(%rsp)
  0x00007fb1a0895829:   mov    %rsi,0x48(%rsp)
  0x00007fb1a089582e:   mov    %rdi,0x40(%rsp)
  0x00007fb1a0895833:   mov    %r8,0x38(%rsp)
  0x00007fb1a0895838:   mov    %r9,0x30(%rsp)
  0x00007fb1a089583d:   mov    %r10,0x28(%rsp)
  0x00007fb1a0895842:   mov    %r11,0x20(%rsp)
  0x00007fb1a0895847:   mov    %r12,0x18(%rsp)
  0x00007fb1a089584c:   mov    %r13,0x10(%rsp)
  0x00007fb1a0895851:   mov    %r14,0x8(%rsp)
  0x00007fb1a0895856:   mov    %r15,(%rsp)
  0x00007fb1a089585a:   sub    $0xa80,%rsp
  0x00007fb1a0895861:   fxsave64 (%rsp)
  0x00007fb1a0895866:   vzeroupper 
  0x00007fb1a0895869:   vzeroupper 
  0x00007fb1a089586c:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a0895873:   mov    %r15,%rdi
  0x00007fb1a0895876:   callq  0x00007fb1a4874730 = SharedRuntime::resolve_opt_virtual_call_C(JavaThread*)
  0x00007fb1a089587b:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a0895886:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a0895891:   vzeroupper 
  0x00007fb1a0895894:   cmpq   $0x0,0x8(%r15)
  0x00007fb1a0895899:   jne    0x00007fb1a0895929
  0x00007fb1a089589f:   mov    0x320(%r15),%rbx
  0x00007fb1a08958a6:   movq   $0x0,0x320(%r15)
  0x00007fb1a08958b1:   mov    %rbx,0xae0(%rsp)
  0x00007fb1a08958b9:   mov    %rax,0xaf8(%rsp)
  0x00007fb1a08958c1:   vzeroupper 
  0x00007fb1a08958c4:   fxrstor64 (%rsp)
  0x00007fb1a08958c9:   add    $0xa80,%rsp
  0x00007fb1a08958d0:   mov    (%rsp),%r15
  0x00007fb1a08958d4:   mov    0x8(%rsp),%r14
  0x00007fb1a08958d9:   mov    0x10(%rsp),%r13
  0x00007fb1a08958de:   mov    0x18(%rsp),%r12
  0x00007fb1a08958e3:   mov    0x20(%rsp),%r11
  0x00007fb1a08958e8:   mov    0x28(%rsp),%r10
  0x00007fb1a08958ed:   mov    0x30(%rsp),%r9
  0x00007fb1a08958f2:   mov    0x38(%rsp),%r8
  0x00007fb1a08958f7:   mov    0x40(%rsp),%rdi
  0x00007fb1a08958fc:   mov    0x48(%rsp),%rsi
  0x00007fb1a0895901:   mov    0x50(%rsp),%rbp
  0x00007fb1a0895906:   mov    0x60(%rsp),%rbx
  0x00007fb1a089590b:   mov    0x68(%rsp),%rdx
  0x00007fb1a0895910:   mov    0x70(%rsp),%rcx
  0x00007fb1a0895915:   mov    0x78(%rsp),%rax
  0x00007fb1a089591a:   add    $0x80,%rsp
  0x00007fb1a0895921:   add    $0x8,%rsp
  0x00007fb1a0895925:   popfq  
  0x00007fb1a0895926:   pop    %rbp
  0x00007fb1a0895927:   jmpq   *%rax
  0x00007fb1a0895929:   vzeroupper 
  0x00007fb1a089592c:   fxrstor64 (%rsp)
  0x00007fb1a0895931:   add    $0xa80,%rsp
  0x00007fb1a0895938:   mov    (%rsp),%r15
  0x00007fb1a089593c:   mov    0x8(%rsp),%r14
  0x00007fb1a0895941:   mov    0x10(%rsp),%r13
  0x00007fb1a0895946:   mov    0x18(%rsp),%r12
  0x00007fb1a089594b:   mov    0x20(%rsp),%r11
  0x00007fb1a0895950:   mov    0x28(%rsp),%r10
  0x00007fb1a0895955:   mov    0x30(%rsp),%r9
  0x00007fb1a089595a:   mov    0x38(%rsp),%r8
  0x00007fb1a089595f:   mov    0x40(%rsp),%rdi
  0x00007fb1a0895964:   mov    0x48(%rsp),%rsi
  0x00007fb1a0895969:   mov    0x50(%rsp),%rbp
  0x00007fb1a089596e:   mov    0x60(%rsp),%rbx
  0x00007fb1a0895973:   mov    0x68(%rsp),%rdx
  0x00007fb1a0895978:   mov    0x70(%rsp),%rcx
  0x00007fb1a089597d:   mov    0x78(%rsp),%rax
  0x00007fb1a0895982:   add    $0x80,%rsp
  0x00007fb1a0895989:   add    $0x8,%rsp
  0x00007fb1a089598d:   popfq  
  0x00007fb1a089598e:   pop    %rbp
  0x00007fb1a089598f:   movq   $0x0,0x318(%r15)
  0x00007fb1a089599a:   mov    0x8(%r15),%rax
  0x00007fb1a089599e:   jmpq   0x00007fb1a0832c00
  0x00007fb1a08959a3:   hlt    
  0x00007fb1a08959a4:   hlt    
  0x00007fb1a08959a5:   hlt    
  0x00007fb1a08959a6:   hlt    
  0x00007fb1a08959a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_virtual_call 0x00007fb1a0895a90
--------------------------------------------------------------------------------
  0x00007fb1a0895b00:   push   %rbp
  0x00007fb1a0895b01:   mov    %rsp,%rbp
  0x00007fb1a0895b04:   pushfq 
  0x00007fb1a0895b05:   sub    $0x8,%rsp
  0x00007fb1a0895b09:   sub    $0x80,%rsp
  0x00007fb1a0895b10:   mov    %rax,0x78(%rsp)
  0x00007fb1a0895b15:   mov    %rcx,0x70(%rsp)
  0x00007fb1a0895b1a:   mov    %rdx,0x68(%rsp)
  0x00007fb1a0895b1f:   mov    %rbx,0x60(%rsp)
  0x00007fb1a0895b24:   mov    %rbp,0x50(%rsp)
  0x00007fb1a0895b29:   mov    %rsi,0x48(%rsp)
  0x00007fb1a0895b2e:   mov    %rdi,0x40(%rsp)
  0x00007fb1a0895b33:   mov    %r8,0x38(%rsp)
  0x00007fb1a0895b38:   mov    %r9,0x30(%rsp)
  0x00007fb1a0895b3d:   mov    %r10,0x28(%rsp)
  0x00007fb1a0895b42:   mov    %r11,0x20(%rsp)
  0x00007fb1a0895b47:   mov    %r12,0x18(%rsp)
  0x00007fb1a0895b4c:   mov    %r13,0x10(%rsp)
  0x00007fb1a0895b51:   mov    %r14,0x8(%rsp)
  0x00007fb1a0895b56:   mov    %r15,(%rsp)
  0x00007fb1a0895b5a:   sub    $0xa80,%rsp
  0x00007fb1a0895b61:   fxsave64 (%rsp)
  0x00007fb1a0895b66:   vzeroupper 
  0x00007fb1a0895b69:   vzeroupper 
  0x00007fb1a0895b6c:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a0895b73:   mov    %r15,%rdi
  0x00007fb1a0895b76:   callq  0x00007fb1a4874570 = SharedRuntime::resolve_virtual_call_C(JavaThread*)
  0x00007fb1a0895b7b:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a0895b86:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a0895b91:   vzeroupper 
  0x00007fb1a0895b94:   cmpq   $0x0,0x8(%r15)
  0x00007fb1a0895b99:   jne    0x00007fb1a0895c29
  0x00007fb1a0895b9f:   mov    0x320(%r15),%rbx
  0x00007fb1a0895ba6:   movq   $0x0,0x320(%r15)
  0x00007fb1a0895bb1:   mov    %rbx,0xae0(%rsp)
  0x00007fb1a0895bb9:   mov    %rax,0xaf8(%rsp)
  0x00007fb1a0895bc1:   vzeroupper 
  0x00007fb1a0895bc4:   fxrstor64 (%rsp)
  0x00007fb1a0895bc9:   add    $0xa80,%rsp
  0x00007fb1a0895bd0:   mov    (%rsp),%r15
  0x00007fb1a0895bd4:   mov    0x8(%rsp),%r14
  0x00007fb1a0895bd9:   mov    0x10(%rsp),%r13
  0x00007fb1a0895bde:   mov    0x18(%rsp),%r12
  0x00007fb1a0895be3:   mov    0x20(%rsp),%r11
  0x00007fb1a0895be8:   mov    0x28(%rsp),%r10
  0x00007fb1a0895bed:   mov    0x30(%rsp),%r9
  0x00007fb1a0895bf2:   mov    0x38(%rsp),%r8
  0x00007fb1a0895bf7:   mov    0x40(%rsp),%rdi
  0x00007fb1a0895bfc:   mov    0x48(%rsp),%rsi
  0x00007fb1a0895c01:   mov    0x50(%rsp),%rbp
  0x00007fb1a0895c06:   mov    0x60(%rsp),%rbx
  0x00007fb1a0895c0b:   mov    0x68(%rsp),%rdx
  0x00007fb1a0895c10:   mov    0x70(%rsp),%rcx
  0x00007fb1a0895c15:   mov    0x78(%rsp),%rax
  0x00007fb1a0895c1a:   add    $0x80,%rsp
  0x00007fb1a0895c21:   add    $0x8,%rsp
  0x00007fb1a0895c25:   popfq  
  0x00007fb1a0895c26:   pop    %rbp
  0x00007fb1a0895c27:   jmpq   *%rax
  0x00007fb1a0895c29:   vzeroupper 
  0x00007fb1a0895c2c:   fxrstor64 (%rsp)
  0x00007fb1a0895c31:   add    $0xa80,%rsp
  0x00007fb1a0895c38:   mov    (%rsp),%r15
  0x00007fb1a0895c3c:   mov    0x8(%rsp),%r14
  0x00007fb1a0895c41:   mov    0x10(%rsp),%r13
  0x00007fb1a0895c46:   mov    0x18(%rsp),%r12
  0x00007fb1a0895c4b:   mov    0x20(%rsp),%r11
  0x00007fb1a0895c50:   mov    0x28(%rsp),%r10
  0x00007fb1a0895c55:   mov    0x30(%rsp),%r9
  0x00007fb1a0895c5a:   mov    0x38(%rsp),%r8
  0x00007fb1a0895c5f:   mov    0x40(%rsp),%rdi
  0x00007fb1a0895c64:   mov    0x48(%rsp),%rsi
  0x00007fb1a0895c69:   mov    0x50(%rsp),%rbp
  0x00007fb1a0895c6e:   mov    0x60(%rsp),%rbx
  0x00007fb1a0895c73:   mov    0x68(%rsp),%rdx
  0x00007fb1a0895c78:   mov    0x70(%rsp),%rcx
  0x00007fb1a0895c7d:   mov    0x78(%rsp),%rax
  0x00007fb1a0895c82:   add    $0x80,%rsp
  0x00007fb1a0895c89:   add    $0x8,%rsp
  0x00007fb1a0895c8d:   popfq  
  0x00007fb1a0895c8e:   pop    %rbp
  0x00007fb1a0895c8f:   movq   $0x0,0x318(%r15)
  0x00007fb1a0895c9a:   mov    0x8(%r15),%rax
  0x00007fb1a0895c9e:   jmpq   0x00007fb1a0832c00
  0x00007fb1a0895ca3:   hlt    
  0x00007fb1a0895ca4:   hlt    
  0x00007fb1a0895ca5:   hlt    
  0x00007fb1a0895ca6:   hlt    
  0x00007fb1a0895ca7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_static_call 0x00007fb1a0895d90
--------------------------------------------------------------------------------
  0x00007fb1a0895e00:   push   %rbp
  0x00007fb1a0895e01:   mov    %rsp,%rbp
  0x00007fb1a0895e04:   pushfq 
  0x00007fb1a0895e05:   sub    $0x8,%rsp
  0x00007fb1a0895e09:   sub    $0x80,%rsp
  0x00007fb1a0895e10:   mov    %rax,0x78(%rsp)
  0x00007fb1a0895e15:   mov    %rcx,0x70(%rsp)
  0x00007fb1a0895e1a:   mov    %rdx,0x68(%rsp)
  0x00007fb1a0895e1f:   mov    %rbx,0x60(%rsp)
  0x00007fb1a0895e24:   mov    %rbp,0x50(%rsp)
  0x00007fb1a0895e29:   mov    %rsi,0x48(%rsp)
  0x00007fb1a0895e2e:   mov    %rdi,0x40(%rsp)
  0x00007fb1a0895e33:   mov    %r8,0x38(%rsp)
  0x00007fb1a0895e38:   mov    %r9,0x30(%rsp)
  0x00007fb1a0895e3d:   mov    %r10,0x28(%rsp)
  0x00007fb1a0895e42:   mov    %r11,0x20(%rsp)
  0x00007fb1a0895e47:   mov    %r12,0x18(%rsp)
  0x00007fb1a0895e4c:   mov    %r13,0x10(%rsp)
  0x00007fb1a0895e51:   mov    %r14,0x8(%rsp)
  0x00007fb1a0895e56:   mov    %r15,(%rsp)
  0x00007fb1a0895e5a:   sub    $0xa80,%rsp
  0x00007fb1a0895e61:   fxsave64 (%rsp)
  0x00007fb1a0895e66:   vzeroupper 
  0x00007fb1a0895e69:   vzeroupper 
  0x00007fb1a0895e6c:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a0895e73:   mov    %r15,%rdi
  0x00007fb1a0895e76:   callq  0x00007fb1a48742e0 = SharedRuntime::resolve_static_call_C(JavaThread*)
  0x00007fb1a0895e7b:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a0895e86:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a0895e91:   vzeroupper 
  0x00007fb1a0895e94:   cmpq   $0x0,0x8(%r15)
  0x00007fb1a0895e99:   jne    0x00007fb1a0895f29
  0x00007fb1a0895e9f:   mov    0x320(%r15),%rbx
  0x00007fb1a0895ea6:   movq   $0x0,0x320(%r15)
  0x00007fb1a0895eb1:   mov    %rbx,0xae0(%rsp)
  0x00007fb1a0895eb9:   mov    %rax,0xaf8(%rsp)
  0x00007fb1a0895ec1:   vzeroupper 
  0x00007fb1a0895ec4:   fxrstor64 (%rsp)
  0x00007fb1a0895ec9:   add    $0xa80,%rsp
  0x00007fb1a0895ed0:   mov    (%rsp),%r15
  0x00007fb1a0895ed4:   mov    0x8(%rsp),%r14
  0x00007fb1a0895ed9:   mov    0x10(%rsp),%r13
  0x00007fb1a0895ede:   mov    0x18(%rsp),%r12
  0x00007fb1a0895ee3:   mov    0x20(%rsp),%r11
  0x00007fb1a0895ee8:   mov    0x28(%rsp),%r10
  0x00007fb1a0895eed:   mov    0x30(%rsp),%r9
  0x00007fb1a0895ef2:   mov    0x38(%rsp),%r8
  0x00007fb1a0895ef7:   mov    0x40(%rsp),%rdi
  0x00007fb1a0895efc:   mov    0x48(%rsp),%rsi
  0x00007fb1a0895f01:   mov    0x50(%rsp),%rbp
  0x00007fb1a0895f06:   mov    0x60(%rsp),%rbx
  0x00007fb1a0895f0b:   mov    0x68(%rsp),%rdx
  0x00007fb1a0895f10:   mov    0x70(%rsp),%rcx
  0x00007fb1a0895f15:   mov    0x78(%rsp),%rax
  0x00007fb1a0895f1a:   add    $0x80,%rsp
  0x00007fb1a0895f21:   add    $0x8,%rsp
  0x00007fb1a0895f25:   popfq  
  0x00007fb1a0895f26:   pop    %rbp
  0x00007fb1a0895f27:   jmpq   *%rax
  0x00007fb1a0895f29:   vzeroupper 
  0x00007fb1a0895f2c:   fxrstor64 (%rsp)
  0x00007fb1a0895f31:   add    $0xa80,%rsp
  0x00007fb1a0895f38:   mov    (%rsp),%r15
  0x00007fb1a0895f3c:   mov    0x8(%rsp),%r14
  0x00007fb1a0895f41:   mov    0x10(%rsp),%r13
  0x00007fb1a0895f46:   mov    0x18(%rsp),%r12
  0x00007fb1a0895f4b:   mov    0x20(%rsp),%r11
  0x00007fb1a0895f50:   mov    0x28(%rsp),%r10
  0x00007fb1a0895f55:   mov    0x30(%rsp),%r9
  0x00007fb1a0895f5a:   mov    0x38(%rsp),%r8
  0x00007fb1a0895f5f:   mov    0x40(%rsp),%rdi
  0x00007fb1a0895f64:   mov    0x48(%rsp),%rsi
  0x00007fb1a0895f69:   mov    0x50(%rsp),%rbp
  0x00007fb1a0895f6e:   mov    0x60(%rsp),%rbx
  0x00007fb1a0895f73:   mov    0x68(%rsp),%rdx
  0x00007fb1a0895f78:   mov    0x70(%rsp),%rcx
  0x00007fb1a0895f7d:   mov    0x78(%rsp),%rax
  0x00007fb1a0895f82:   add    $0x80,%rsp
  0x00007fb1a0895f89:   add    $0x8,%rsp
  0x00007fb1a0895f8d:   popfq  
  0x00007fb1a0895f8e:   pop    %rbp
  0x00007fb1a0895f8f:   movq   $0x0,0x318(%r15)
  0x00007fb1a0895f9a:   mov    0x8(%r15),%rax
  0x00007fb1a0895f9e:   jmpq   0x00007fb1a0832c00
  0x00007fb1a0895fa3:   hlt    
  0x00007fb1a0895fa4:   hlt    
  0x00007fb1a0895fa5:   hlt    
  0x00007fb1a0895fa6:   hlt    
  0x00007fb1a0895fa7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007fb1a089bc90
--------------------------------------------------------------------------------
  0x00007fb1a089bd00:   push   %rbx
  0x00007fb1a089bd01:   push   %rbp
  0x00007fb1a089bd02:   mov    %rsp,%rbp
  0x00007fb1a089bd05:   pushfq 
  0x00007fb1a089bd06:   sub    $0x8,%rsp
  0x00007fb1a089bd0a:   sub    $0x80,%rsp
  0x00007fb1a089bd11:   mov    %rax,0x78(%rsp)
  0x00007fb1a089bd16:   mov    %rcx,0x70(%rsp)
  0x00007fb1a089bd1b:   mov    %rdx,0x68(%rsp)
  0x00007fb1a089bd20:   mov    %rbx,0x60(%rsp)
  0x00007fb1a089bd25:   mov    %rbp,0x50(%rsp)
  0x00007fb1a089bd2a:   mov    %rsi,0x48(%rsp)
  0x00007fb1a089bd2f:   mov    %rdi,0x40(%rsp)
  0x00007fb1a089bd34:   mov    %r8,0x38(%rsp)
  0x00007fb1a089bd39:   mov    %r9,0x30(%rsp)
  0x00007fb1a089bd3e:   mov    %r10,0x28(%rsp)
  0x00007fb1a089bd43:   mov    %r11,0x20(%rsp)
  0x00007fb1a089bd48:   mov    %r12,0x18(%rsp)
  0x00007fb1a089bd4d:   mov    %r13,0x10(%rsp)
  0x00007fb1a089bd52:   mov    %r14,0x8(%rsp)
  0x00007fb1a089bd57:   mov    %r15,(%rsp)
  0x00007fb1a089bd5b:   sub    $0xa80,%rsp
  0x00007fb1a089bd62:   fxsave64 (%rsp)
  0x00007fb1a089bd67:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007fb1a089bd72:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007fb1a089bd7d:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007fb1a089bd88:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007fb1a089bd93:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007fb1a089bd9e:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007fb1a089bda9:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007fb1a089bdb4:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007fb1a089bdbf:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007fb1a089bdca:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007fb1a089bdd5:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007fb1a089bde0:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007fb1a089bdeb:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007fb1a089bdf6:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007fb1a089be01:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007fb1a089be0c:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007fb1a089be17:   vzeroupper 
  0x00007fb1a089be1a:   vzeroupper 
  0x00007fb1a089be1d:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a089be24:   mov    0x390(%r15),%rbx
  0x00007fb1a089be2b:   mov    %rbx,0x8(%rbp)
  0x00007fb1a089be2f:   mov    %r15,%rdi
  0x00007fb1a089be32:   callq  0x00007fb1a48612e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007fb1a089be37:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a089be42:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a089be4d:   vzeroupper 
  0x00007fb1a089be50:   cmpq   $0x0,0x8(%r15)
  0x00007fb1a089be55:   je     0x00007fb1a089bf76
  0x00007fb1a089be5b:   vzeroupper 
  0x00007fb1a089be5e:   vinsertf128 $0x1,0x240(%rsp),%ymm0,%ymm0
  0x00007fb1a089be69:   vinsertf128 $0x1,0x250(%rsp),%ymm1,%ymm1
  0x00007fb1a089be74:   vinsertf128 $0x1,0x260(%rsp),%ymm2,%ymm2
  0x00007fb1a089be7f:   vinsertf128 $0x1,0x270(%rsp),%ymm3,%ymm3
  0x00007fb1a089be8a:   vinsertf128 $0x1,0x280(%rsp),%ymm4,%ymm4
  0x00007fb1a089be95:   vinsertf128 $0x1,0x290(%rsp),%ymm5,%ymm5
  0x00007fb1a089bea0:   vinsertf128 $0x1,0x2a0(%rsp),%ymm6,%ymm6
  0x00007fb1a089beab:   vinsertf128 $0x1,0x2b0(%rsp),%ymm7,%ymm7
  0x00007fb1a089beb6:   vinsertf128 $0x1,0x2c0(%rsp),%ymm8,%ymm8
  0x00007fb1a089bec1:   vinsertf128 $0x1,0x2d0(%rsp),%ymm9,%ymm9
  0x00007fb1a089becc:   vinsertf128 $0x1,0x2e0(%rsp),%ymm10,%ymm10
  0x00007fb1a089bed7:   vinsertf128 $0x1,0x2f0(%rsp),%ymm11,%ymm11
  0x00007fb1a089bee2:   vinsertf128 $0x1,0x300(%rsp),%ymm12,%ymm12
  0x00007fb1a089beed:   vinsertf128 $0x1,0x310(%rsp),%ymm13,%ymm13
  0x00007fb1a089bef8:   vinsertf128 $0x1,0x320(%rsp),%ymm14,%ymm14
  0x00007fb1a089bf03:   vinsertf128 $0x1,0x330(%rsp),%ymm15,%ymm15
  0x00007fb1a089bf0e:   fxrstor64 (%rsp)
  0x00007fb1a089bf13:   add    $0xa80,%rsp
  0x00007fb1a089bf1a:   mov    (%rsp),%r15
  0x00007fb1a089bf1e:   mov    0x8(%rsp),%r14
  0x00007fb1a089bf23:   mov    0x10(%rsp),%r13
  0x00007fb1a089bf28:   mov    0x18(%rsp),%r12
  0x00007fb1a089bf2d:   mov    0x20(%rsp),%r11
  0x00007fb1a089bf32:   mov    0x28(%rsp),%r10
  0x00007fb1a089bf37:   mov    0x30(%rsp),%r9
  0x00007fb1a089bf3c:   mov    0x38(%rsp),%r8
  0x00007fb1a089bf41:   mov    0x40(%rsp),%rdi
  0x00007fb1a089bf46:   mov    0x48(%rsp),%rsi
  0x00007fb1a089bf4b:   mov    0x50(%rsp),%rbp
  0x00007fb1a089bf50:   mov    0x60(%rsp),%rbx
  0x00007fb1a089bf55:   mov    0x68(%rsp),%rdx
  0x00007fb1a089bf5a:   mov    0x70(%rsp),%rcx
  0x00007fb1a089bf5f:   mov    0x78(%rsp),%rax
  0x00007fb1a089bf64:   add    $0x80,%rsp
  0x00007fb1a089bf6b:   add    $0x8,%rsp
  0x00007fb1a089bf6f:   popfq  
  0x00007fb1a089bf70:   pop    %rbp
  0x00007fb1a089bf71:   jmpq   0x00007fb1a0832c00
  0x00007fb1a089bf76:   cmp    0x8(%rbp),%rbx
  0x00007fb1a089bf7a:   jne    0x00007fb1a089bfac
  0x00007fb1a089bf7c:   cmpb   $0x41,(%rbx)
  0x00007fb1a089bf7f:   jne    0x00007fb1a089bf89
  0x00007fb1a089bf85:   add    $0x1,%rbx
  0x00007fb1a089bf89:   movzbq 0x1(%rbx),%rcx
  0x00007fb1a089bf8e:   and    $0x7,%rcx
  0x00007fb1a089bf92:   sub    $0x4,%rcx
  0x00007fb1a089bf96:   cmp    $0x1,%rcx
  0x00007fb1a089bf9a:   ja     0x00007fb1a089bfa4
  0x00007fb1a089bfa0:   add    $0x1,%rbx
  0x00007fb1a089bfa4:   add    $0x2,%rbx
  0x00007fb1a089bfa8:   mov    %rbx,0x8(%rbp)
  0x00007fb1a089bfac:   vzeroupper 
  0x00007fb1a089bfaf:   vinsertf128 $0x1,0x240(%rsp),%ymm0,%ymm0
  0x00007fb1a089bfba:   vinsertf128 $0x1,0x250(%rsp),%ymm1,%ymm1
  0x00007fb1a089bfc5:   vinsertf128 $0x1,0x260(%rsp),%ymm2,%ymm2
  0x00007fb1a089bfd0:   vinsertf128 $0x1,0x270(%rsp),%ymm3,%ymm3
  0x00007fb1a089bfdb:   vinsertf128 $0x1,0x280(%rsp),%ymm4,%ymm4
  0x00007fb1a089bfe6:   vinsertf128 $0x1,0x290(%rsp),%ymm5,%ymm5
  0x00007fb1a089bff1:   vinsertf128 $0x1,0x2a0(%rsp),%ymm6,%ymm6
  0x00007fb1a089bffc:   vinsertf128 $0x1,0x2b0(%rsp),%ymm7,%ymm7
  0x00007fb1a089c007:   vinsertf128 $0x1,0x2c0(%rsp),%ymm8,%ymm8
  0x00007fb1a089c012:   vinsertf128 $0x1,0x2d0(%rsp),%ymm9,%ymm9
  0x00007fb1a089c01d:   vinsertf128 $0x1,0x2e0(%rsp),%ymm10,%ymm10
  0x00007fb1a089c028:   vinsertf128 $0x1,0x2f0(%rsp),%ymm11,%ymm11
  0x00007fb1a089c033:   vinsertf128 $0x1,0x300(%rsp),%ymm12,%ymm12
  0x00007fb1a089c03e:   vinsertf128 $0x1,0x310(%rsp),%ymm13,%ymm13
  0x00007fb1a089c049:   vinsertf128 $0x1,0x320(%rsp),%ymm14,%ymm14
  0x00007fb1a089c054:   vinsertf128 $0x1,0x330(%rsp),%ymm15,%ymm15
  0x00007fb1a089c05f:   fxrstor64 (%rsp)
  0x00007fb1a089c064:   add    $0xa80,%rsp
  0x00007fb1a089c06b:   mov    (%rsp),%r15
  0x00007fb1a089c06f:   mov    0x8(%rsp),%r14
  0x00007fb1a089c074:   mov    0x10(%rsp),%r13
  0x00007fb1a089c079:   mov    0x18(%rsp),%r12
  0x00007fb1a089c07e:   mov    0x20(%rsp),%r11
  0x00007fb1a089c083:   mov    0x28(%rsp),%r10
  0x00007fb1a089c088:   mov    0x30(%rsp),%r9
  0x00007fb1a089c08d:   mov    0x38(%rsp),%r8
  0x00007fb1a089c092:   mov    0x40(%rsp),%rdi
  0x00007fb1a089c097:   mov    0x48(%rsp),%rsi
  0x00007fb1a089c09c:   mov    0x50(%rsp),%rbp
  0x00007fb1a089c0a1:   mov    0x60(%rsp),%rbx
  0x00007fb1a089c0a6:   mov    0x68(%rsp),%rdx
  0x00007fb1a089c0ab:   mov    0x70(%rsp),%rcx
  0x00007fb1a089c0b0:   mov    0x78(%rsp),%rax
  0x00007fb1a089c0b5:   add    $0x80,%rsp
  0x00007fb1a089c0bc:   add    $0x8,%rsp
  0x00007fb1a089c0c0:   popfq  
  0x00007fb1a089c0c1:   pop    %rbp
  0x00007fb1a089c0c2:   retq   
  0x00007fb1a089c0c3:   hlt    
  0x00007fb1a089c0c4:   hlt    
  0x00007fb1a089c0c5:   hlt    
  0x00007fb1a089c0c6:   hlt    
  0x00007fb1a089c0c7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [576]=Callers_xmm0 [592]=Callers_xmm1 [608]=Callers_xmm2 [624]=Callers_xmm3 [640]=Callers_xmm4 [656]=Callers_xmm5 [672]=Callers_xmm6 [688]=Callers_xmm7 [704]=Callers_xmm8 [720]=Callers_xmm9 [736]=Callers_xmm10 [752]=Callers_xmm11 [768]=Callers_xmm12 [784]=Callers_xmm13 [800]=Callers_xmm14 [816]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 311 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007fb1a089c110
--------------------------------------------------------------------------------
  0x00007fb1a089c180:   push   %rbx
  0x00007fb1a089c181:   push   %rbp
  0x00007fb1a089c182:   mov    %rsp,%rbp
  0x00007fb1a089c185:   pushfq 
  0x00007fb1a089c186:   sub    $0x8,%rsp
  0x00007fb1a089c18a:   sub    $0x80,%rsp
  0x00007fb1a089c191:   mov    %rax,0x78(%rsp)
  0x00007fb1a089c196:   mov    %rcx,0x70(%rsp)
  0x00007fb1a089c19b:   mov    %rdx,0x68(%rsp)
  0x00007fb1a089c1a0:   mov    %rbx,0x60(%rsp)
  0x00007fb1a089c1a5:   mov    %rbp,0x50(%rsp)
  0x00007fb1a089c1aa:   mov    %rsi,0x48(%rsp)
  0x00007fb1a089c1af:   mov    %rdi,0x40(%rsp)
  0x00007fb1a089c1b4:   mov    %r8,0x38(%rsp)
  0x00007fb1a089c1b9:   mov    %r9,0x30(%rsp)
  0x00007fb1a089c1be:   mov    %r10,0x28(%rsp)
  0x00007fb1a089c1c3:   mov    %r11,0x20(%rsp)
  0x00007fb1a089c1c8:   mov    %r12,0x18(%rsp)
  0x00007fb1a089c1cd:   mov    %r13,0x10(%rsp)
  0x00007fb1a089c1d2:   mov    %r14,0x8(%rsp)
  0x00007fb1a089c1d7:   mov    %r15,(%rsp)
  0x00007fb1a089c1db:   sub    $0xa80,%rsp
  0x00007fb1a089c1e2:   fxsave64 (%rsp)
  0x00007fb1a089c1e7:   vzeroupper 
  0x00007fb1a089c1ea:   vzeroupper 
  0x00007fb1a089c1ed:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a089c1f4:   mov    0x390(%r15),%rbx
  0x00007fb1a089c1fb:   mov    %rbx,0x8(%rbp)
  0x00007fb1a089c1ff:   mov    %r15,%rdi
  0x00007fb1a089c202:   callq  0x00007fb1a48612e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007fb1a089c207:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a089c212:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a089c21d:   vzeroupper 
  0x00007fb1a089c220:   cmpq   $0x0,0x8(%r15)
  0x00007fb1a089c225:   je     0x00007fb1a089c296
  0x00007fb1a089c22b:   vzeroupper 
  0x00007fb1a089c22e:   fxrstor64 (%rsp)
  0x00007fb1a089c233:   add    $0xa80,%rsp
  0x00007fb1a089c23a:   mov    (%rsp),%r15
  0x00007fb1a089c23e:   mov    0x8(%rsp),%r14
  0x00007fb1a089c243:   mov    0x10(%rsp),%r13
  0x00007fb1a089c248:   mov    0x18(%rsp),%r12
  0x00007fb1a089c24d:   mov    0x20(%rsp),%r11
  0x00007fb1a089c252:   mov    0x28(%rsp),%r10
  0x00007fb1a089c257:   mov    0x30(%rsp),%r9
  0x00007fb1a089c25c:   mov    0x38(%rsp),%r8
  0x00007fb1a089c261:   mov    0x40(%rsp),%rdi
  0x00007fb1a089c266:   mov    0x48(%rsp),%rsi
  0x00007fb1a089c26b:   mov    0x50(%rsp),%rbp
  0x00007fb1a089c270:   mov    0x60(%rsp),%rbx
  0x00007fb1a089c275:   mov    0x68(%rsp),%rdx
  0x00007fb1a089c27a:   mov    0x70(%rsp),%rcx
  0x00007fb1a089c27f:   mov    0x78(%rsp),%rax
  0x00007fb1a089c284:   add    $0x80,%rsp
  0x00007fb1a089c28b:   add    $0x8,%rsp
  0x00007fb1a089c28f:   popfq  
  0x00007fb1a089c290:   pop    %rbp
  0x00007fb1a089c291:   jmpq   0x00007fb1a0832c00
  0x00007fb1a089c296:   cmp    0x8(%rbp),%rbx
  0x00007fb1a089c29a:   jne    0x00007fb1a089c2cc
  0x00007fb1a089c29c:   cmpb   $0x41,(%rbx)
  0x00007fb1a089c29f:   jne    0x00007fb1a089c2a9
  0x00007fb1a089c2a5:   add    $0x1,%rbx
  0x00007fb1a089c2a9:   movzbq 0x1(%rbx),%rcx
  0x00007fb1a089c2ae:   and    $0x7,%rcx
  0x00007fb1a089c2b2:   sub    $0x4,%rcx
  0x00007fb1a089c2b6:   cmp    $0x1,%rcx
  0x00007fb1a089c2ba:   ja     0x00007fb1a089c2c4
  0x00007fb1a089c2c0:   add    $0x1,%rbx
  0x00007fb1a089c2c4:   add    $0x2,%rbx
  0x00007fb1a089c2c8:   mov    %rbx,0x8(%rbp)
  0x00007fb1a089c2cc:   vzeroupper 
  0x00007fb1a089c2cf:   fxrstor64 (%rsp)
  0x00007fb1a089c2d4:   add    $0xa80,%rsp
  0x00007fb1a089c2db:   mov    (%rsp),%r15
  0x00007fb1a089c2df:   mov    0x8(%rsp),%r14
  0x00007fb1a089c2e4:   mov    0x10(%rsp),%r13
  0x00007fb1a089c2e9:   mov    0x18(%rsp),%r12
  0x00007fb1a089c2ee:   mov    0x20(%rsp),%r11
  0x00007fb1a089c2f3:   mov    0x28(%rsp),%r10
  0x00007fb1a089c2f8:   mov    0x30(%rsp),%r9
  0x00007fb1a089c2fd:   mov    0x38(%rsp),%r8
  0x00007fb1a089c302:   mov    0x40(%rsp),%rdi
  0x00007fb1a089c307:   mov    0x48(%rsp),%rsi
  0x00007fb1a089c30c:   mov    0x50(%rsp),%rbp
  0x00007fb1a089c311:   mov    0x60(%rsp),%rbx
  0x00007fb1a089c316:   mov    0x68(%rsp),%rdx
  0x00007fb1a089c31b:   mov    0x70(%rsp),%rcx
  0x00007fb1a089c320:   mov    0x78(%rsp),%rax
  0x00007fb1a089c325:   add    $0x80,%rsp
  0x00007fb1a089c32c:   add    $0x8,%rsp
  0x00007fb1a089c330:   popfq  
  0x00007fb1a089c331:   pop    %rbp
  0x00007fb1a089c332:   retq   
  0x00007fb1a089c333:   hlt    
  0x00007fb1a089c334:   hlt    
  0x00007fb1a089c335:   hlt    
  0x00007fb1a089c336:   hlt    
  0x00007fb1a089c337:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 135 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007fb1a089c410
--------------------------------------------------------------------------------
  0x00007fb1a089c480:   push   %rbp
  0x00007fb1a089c481:   mov    %rsp,%rbp
  0x00007fb1a089c484:   pushfq 
  0x00007fb1a089c485:   sub    $0x8,%rsp
  0x00007fb1a089c489:   sub    $0x80,%rsp
  0x00007fb1a089c490:   mov    %rax,0x78(%rsp)
  0x00007fb1a089c495:   mov    %rcx,0x70(%rsp)
  0x00007fb1a089c49a:   mov    %rdx,0x68(%rsp)
  0x00007fb1a089c49f:   mov    %rbx,0x60(%rsp)
  0x00007fb1a089c4a4:   mov    %rbp,0x50(%rsp)
  0x00007fb1a089c4a9:   mov    %rsi,0x48(%rsp)
  0x00007fb1a089c4ae:   mov    %rdi,0x40(%rsp)
  0x00007fb1a089c4b3:   mov    %r8,0x38(%rsp)
  0x00007fb1a089c4b8:   mov    %r9,0x30(%rsp)
  0x00007fb1a089c4bd:   mov    %r10,0x28(%rsp)
  0x00007fb1a089c4c2:   mov    %r11,0x20(%rsp)
  0x00007fb1a089c4c7:   mov    %r12,0x18(%rsp)
  0x00007fb1a089c4cc:   mov    %r13,0x10(%rsp)
  0x00007fb1a089c4d1:   mov    %r14,0x8(%rsp)
  0x00007fb1a089c4d6:   mov    %r15,(%rsp)
  0x00007fb1a089c4da:   sub    $0xa80,%rsp
  0x00007fb1a089c4e1:   fxsave64 (%rsp)
  0x00007fb1a089c4e6:   vzeroupper 
  0x00007fb1a089c4e9:   vzeroupper 
  0x00007fb1a089c4ec:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a089c4f3:   mov    %r15,%rdi
  0x00007fb1a089c4f6:   callq  0x00007fb1a48612e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007fb1a089c4fb:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a089c506:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a089c511:   vzeroupper 
  0x00007fb1a089c514:   cmpq   $0x0,0x8(%r15)
  0x00007fb1a089c519:   je     0x00007fb1a089c58a
  0x00007fb1a089c51f:   vzeroupper 
  0x00007fb1a089c522:   fxrstor64 (%rsp)
  0x00007fb1a089c527:   add    $0xa80,%rsp
  0x00007fb1a089c52e:   mov    (%rsp),%r15
  0x00007fb1a089c532:   mov    0x8(%rsp),%r14
  0x00007fb1a089c537:   mov    0x10(%rsp),%r13
  0x00007fb1a089c53c:   mov    0x18(%rsp),%r12
  0x00007fb1a089c541:   mov    0x20(%rsp),%r11
  0x00007fb1a089c546:   mov    0x28(%rsp),%r10
  0x00007fb1a089c54b:   mov    0x30(%rsp),%r9
  0x00007fb1a089c550:   mov    0x38(%rsp),%r8
  0x00007fb1a089c555:   mov    0x40(%rsp),%rdi
  0x00007fb1a089c55a:   mov    0x48(%rsp),%rsi
  0x00007fb1a089c55f:   mov    0x50(%rsp),%rbp
  0x00007fb1a089c564:   mov    0x60(%rsp),%rbx
  0x00007fb1a089c569:   mov    0x68(%rsp),%rdx
  0x00007fb1a089c56e:   mov    0x70(%rsp),%rcx
  0x00007fb1a089c573:   mov    0x78(%rsp),%rax
  0x00007fb1a089c578:   add    $0x80,%rsp
  0x00007fb1a089c57f:   add    $0x8,%rsp
  0x00007fb1a089c583:   popfq  
  0x00007fb1a089c584:   pop    %rbp
  0x00007fb1a089c585:   jmpq   0x00007fb1a0832c00
  0x00007fb1a089c58a:   vzeroupper 
  0x00007fb1a089c58d:   fxrstor64 (%rsp)
  0x00007fb1a089c592:   add    $0xa80,%rsp
  0x00007fb1a089c599:   mov    (%rsp),%r15
  0x00007fb1a089c59d:   mov    0x8(%rsp),%r14
  0x00007fb1a089c5a2:   mov    0x10(%rsp),%r13
  0x00007fb1a089c5a7:   mov    0x18(%rsp),%r12
  0x00007fb1a089c5ac:   mov    0x20(%rsp),%r11
  0x00007fb1a089c5b1:   mov    0x28(%rsp),%r10
  0x00007fb1a089c5b6:   mov    0x30(%rsp),%r9
  0x00007fb1a089c5bb:   mov    0x38(%rsp),%r8
  0x00007fb1a089c5c0:   mov    0x40(%rsp),%rdi
  0x00007fb1a089c5c5:   mov    0x48(%rsp),%rsi
  0x00007fb1a089c5ca:   mov    0x50(%rsp),%rbp
  0x00007fb1a089c5cf:   mov    0x60(%rsp),%rbx
  0x00007fb1a089c5d4:   mov    0x68(%rsp),%rdx
  0x00007fb1a089c5d9:   mov    0x70(%rsp),%rcx
  0x00007fb1a089c5de:   mov    0x78(%rsp),%rax
  0x00007fb1a089c5e3:   add    $0x80,%rsp
  0x00007fb1a089c5ea:   add    $0x8,%rsp
  0x00007fb1a089c5ee:   popfq  
  0x00007fb1a089c5ef:   pop    %rbp
  0x00007fb1a089c5f0:   retq   
  0x00007fb1a089c5f1:   hlt    
  0x00007fb1a089c5f2:   hlt    
  0x00007fb1a089c5f3:   hlt    
  0x00007fb1a089c5f4:   hlt    
  0x00007fb1a089c5f5:   hlt    
  0x00007fb1a089c5f6:   hlt    
  0x00007fb1a089c5f7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding DeoptimizationBlob 0x00007fb1a089b690
--------------------------------------------------------------------------------
  0x00007fb1a089b720:   push   %rbp
  0x00007fb1a089b721:   mov    %rsp,%rbp
  0x00007fb1a089b724:   pushfq 
  0x00007fb1a089b725:   sub    $0x8,%rsp
  0x00007fb1a089b729:   sub    $0x80,%rsp
  0x00007fb1a089b730:   mov    %rax,0x78(%rsp)
  0x00007fb1a089b735:   mov    %rcx,0x70(%rsp)
  0x00007fb1a089b73a:   mov    %rdx,0x68(%rsp)
  0x00007fb1a089b73f:   mov    %rbx,0x60(%rsp)
  0x00007fb1a089b744:   mov    %rbp,0x50(%rsp)
  0x00007fb1a089b749:   mov    %rsi,0x48(%rsp)
  0x00007fb1a089b74e:   mov    %rdi,0x40(%rsp)
  0x00007fb1a089b753:   mov    %r8,0x38(%rsp)
  0x00007fb1a089b758:   mov    %r9,0x30(%rsp)
  0x00007fb1a089b75d:   mov    %r10,0x28(%rsp)
  0x00007fb1a089b762:   mov    %r11,0x20(%rsp)
  0x00007fb1a089b767:   mov    %r12,0x18(%rsp)
  0x00007fb1a089b76c:   mov    %r13,0x10(%rsp)
  0x00007fb1a089b771:   mov    %r14,0x8(%rsp)
  0x00007fb1a089b776:   mov    %r15,(%rsp)
  0x00007fb1a089b77a:   sub    $0xa80,%rsp
  0x00007fb1a089b781:   fxsave64 (%rsp)
  0x00007fb1a089b786:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007fb1a089b791:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007fb1a089b79c:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007fb1a089b7a7:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007fb1a089b7b2:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007fb1a089b7bd:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007fb1a089b7c8:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007fb1a089b7d3:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007fb1a089b7de:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007fb1a089b7e9:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007fb1a089b7f4:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007fb1a089b7ff:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007fb1a089b80a:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007fb1a089b815:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007fb1a089b820:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007fb1a089b82b:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007fb1a089b836:   vzeroupper 
  0x00007fb1a089b839:   mov    $0x0,%r14d
  0x00007fb1a089b83f:   jmpq   0x00007fb1a089bab0
  0x00007fb1a089b844:   push   %rbp
  0x00007fb1a089b845:   mov    %rsp,%rbp
  0x00007fb1a089b848:   pushfq 
  0x00007fb1a089b849:   sub    $0x8,%rsp
  0x00007fb1a089b84d:   sub    $0x80,%rsp
  0x00007fb1a089b854:   mov    %rax,0x78(%rsp)
  0x00007fb1a089b859:   mov    %rcx,0x70(%rsp)
  0x00007fb1a089b85e:   mov    %rdx,0x68(%rsp)
  0x00007fb1a089b863:   mov    %rbx,0x60(%rsp)
  0x00007fb1a089b868:   mov    %rbp,0x50(%rsp)
  0x00007fb1a089b86d:   mov    %rsi,0x48(%rsp)
  0x00007fb1a089b872:   mov    %rdi,0x40(%rsp)
  0x00007fb1a089b877:   mov    %r8,0x38(%rsp)
  0x00007fb1a089b87c:   mov    %r9,0x30(%rsp)
  0x00007fb1a089b881:   mov    %r10,0x28(%rsp)
  0x00007fb1a089b886:   mov    %r11,0x20(%rsp)
  0x00007fb1a089b88b:   mov    %r12,0x18(%rsp)
  0x00007fb1a089b890:   mov    %r13,0x10(%rsp)
  0x00007fb1a089b895:   mov    %r14,0x8(%rsp)
  0x00007fb1a089b89a:   mov    %r15,(%rsp)
  0x00007fb1a089b89e:   sub    $0xa80,%rsp
  0x00007fb1a089b8a5:   fxsave64 (%rsp)
  0x00007fb1a089b8aa:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007fb1a089b8b5:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007fb1a089b8c0:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007fb1a089b8cb:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007fb1a089b8d6:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007fb1a089b8e1:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007fb1a089b8ec:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007fb1a089b8f7:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007fb1a089b902:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007fb1a089b90d:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007fb1a089b918:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007fb1a089b923:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007fb1a089b92e:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007fb1a089b939:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007fb1a089b944:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007fb1a089b94f:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007fb1a089b95a:   vzeroupper 
  0x00007fb1a089b95d:   mov    $0x3,%r14d
  0x00007fb1a089b963:   jmpq   0x00007fb1a089bab0
  0x00007fb1a089b968:   mov    %rdx,0x430(%r15)
  0x00007fb1a089b96f:   mov    %rax,0x428(%r15)
  0x00007fb1a089b976:   pushq  $0x0
  0x00007fb1a089b97b:   push   %rbp
  0x00007fb1a089b97c:   mov    %rsp,%rbp
  0x00007fb1a089b97f:   pushfq 
  0x00007fb1a089b980:   sub    $0x8,%rsp
  0x00007fb1a089b984:   sub    $0x80,%rsp
  0x00007fb1a089b98b:   mov    %rax,0x78(%rsp)
  0x00007fb1a089b990:   mov    %rcx,0x70(%rsp)
  0x00007fb1a089b995:   mov    %rdx,0x68(%rsp)
  0x00007fb1a089b99a:   mov    %rbx,0x60(%rsp)
  0x00007fb1a089b99f:   mov    %rbp,0x50(%rsp)
  0x00007fb1a089b9a4:   mov    %rsi,0x48(%rsp)
  0x00007fb1a089b9a9:   mov    %rdi,0x40(%rsp)
  0x00007fb1a089b9ae:   mov    %r8,0x38(%rsp)
  0x00007fb1a089b9b3:   mov    %r9,0x30(%rsp)
  0x00007fb1a089b9b8:   mov    %r10,0x28(%rsp)
  0x00007fb1a089b9bd:   mov    %r11,0x20(%rsp)
  0x00007fb1a089b9c2:   mov    %r12,0x18(%rsp)
  0x00007fb1a089b9c7:   mov    %r13,0x10(%rsp)
  0x00007fb1a089b9cc:   mov    %r14,0x8(%rsp)
  0x00007fb1a089b9d1:   mov    %r15,(%rsp)
  0x00007fb1a089b9d5:   sub    $0xa80,%rsp
  0x00007fb1a089b9dc:   fxsave64 (%rsp)
  0x00007fb1a089b9e1:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007fb1a089b9ec:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007fb1a089b9f7:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007fb1a089ba02:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007fb1a089ba0d:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007fb1a089ba18:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007fb1a089ba23:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007fb1a089ba2e:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007fb1a089ba39:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007fb1a089ba44:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007fb1a089ba4f:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007fb1a089ba5a:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007fb1a089ba65:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007fb1a089ba70:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007fb1a089ba7b:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007fb1a089ba86:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007fb1a089ba91:   vzeroupper 
  0x00007fb1a089ba94:   mov    $0x1,%r14d
  0x00007fb1a089ba9a:   mov    0x430(%r15),%rdx
  0x00007fb1a089baa1:   mov    %rdx,0x8(%rbp)
  0x00007fb1a089baa5:   movq   $0x0,0x430(%r15)
  0x00007fb1a089bab0:   vzeroupper 
  0x00007fb1a089bab3:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a089baba:   mov    %r15,%rdi
  0x00007fb1a089babd:   mov    %r14d,%esi
  0x00007fb1a089bac0:   callq  0x00007fb1a41af170 = Deoptimization::fetch_unroll_info(JavaThread*, int)
  0x00007fb1a089bac5:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a089bad0:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a089badb:   vzeroupper 
  0x00007fb1a089bade:   mov    %rax,%rdi
  0x00007fb1a089bae1:   mov    0x3c(%rdi),%r14d
  0x00007fb1a089bae5:   cmp    $0x1,%r14d
  0x00007fb1a089bae9:   jne    0x00007fb1a089bb23
  0x00007fb1a089baef:   mov    0x428(%r15),%rax
  0x00007fb1a089baf6:   mov    0x430(%r15),%rdx
  0x00007fb1a089bafd:   movq   $0x0,0x428(%r15)
  0x00007fb1a089bb08:   movq   $0x0,0x430(%r15)
  0x00007fb1a089bb13:   mov    %rax,0xaf8(%rsp)
  0x00007fb1a089bb1b:   mov    %rdx,0xae8(%rsp)
  0x00007fb1a089bb23:   vmovsd 0xa0(%rsp),%xmm0
  0x00007fb1a089bb2c:   mov    0xaf8(%rsp),%rax
  0x00007fb1a089bb34:   mov    0xae8(%rsp),%rdx
  0x00007fb1a089bb3c:   add    $0xb18,%rsp
  0x00007fb1a089bb43:   mov    (%rdi),%ecx
  0x00007fb1a089bb45:   add    %rcx,%rsp
  0x00007fb1a089bb48:   mov    0x30(%rdi),%rbp
  0x00007fb1a089bb4c:   mov    0x18(%rdi),%rcx
  0x00007fb1a089bb50:   add    $0x8,%rsp
  0x00007fb1a089bb54:   mov    0x10(%rdi),%rsi
  0x00007fb1a089bb58:   mov    0x8(%rdi),%edx
  0x00007fb1a089bb5b:   mov    %rsp,%r8
  0x00007fb1a089bb5e:   mov    0x4(%rdi),%ebx
  0x00007fb1a089bb61:   sub    %rbx,%rsp
  0x00007fb1a089bb64:   mov    (%rsi),%rbx
  0x00007fb1a089bb67:   sub    $0x10,%rbx
  0x00007fb1a089bb6b:   rex.W pushq (%rcx)
  0x00007fb1a089bb6e:   push   %rbp
  0x00007fb1a089bb6f:   mov    %rsp,%rbp
  0x00007fb1a089bb72:   sub    %rbx,%rsp
  0x00007fb1a089bb75:   movq   $0x0,-0x10(%rbp)
  0x00007fb1a089bb7d:   mov    %r8,-0x8(%rbp)
  0x00007fb1a089bb81:   mov    %rsp,%r8
  0x00007fb1a089bb84:   add    $0x8,%rsi
  0x00007fb1a089bb88:   add    $0x8,%rcx
  0x00007fb1a089bb8c:   dec    %edx
  0x00007fb1a089bb8e:   jne    0x00007fb1a089bb64
  0x00007fb1a089bb90:   rex.W pushq (%rcx)
  0x00007fb1a089bb93:   push   %rbp
  0x00007fb1a089bb94:   mov    %rsp,%rbp
  0x00007fb1a089bb97:   sub    $0xb10,%rsp
  0x00007fb1a089bb9e:   vmovsd %xmm0,0xa0(%rsp)
  0x00007fb1a089bba7:   mov    %rax,0xaf8(%rsp)
  0x00007fb1a089bbaf:   vzeroupper 
  0x00007fb1a089bbb2:   mov    %rbp,0x2d0(%r15)
  0x00007fb1a089bbb9:   movabs $0x7fb1a089bbaf,%r10
  0x00007fb1a089bbc3:   mov    %r10,0x2c8(%r15)
  0x00007fb1a089bbca:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a089bbd1:   and    $0xfffffffffffffff0,%rsp
  0x00007fb1a089bbd5:   mov    %r15,%rdi
  0x00007fb1a089bbd8:   mov    %r14d,%esi
  0x00007fb1a089bbdb:   callq  0x00007fb1a41a7710 = Deoptimization::unpack_frames(JavaThread*, int)
  0x00007fb1a089bbe0:   mov    0x2c0(%r15),%rsp
  0x00007fb1a089bbe7:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a089bbf2:   movq   $0x0,0x2d0(%r15)
  0x00007fb1a089bbfd:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a089bc08:   vzeroupper 
  0x00007fb1a089bc0b:   vmovsd 0xa0(%rsp),%xmm0
  0x00007fb1a089bc14:   mov    0xaf8(%rsp),%rax
  0x00007fb1a089bc1c:   mov    0xae8(%rsp),%rdx
  0x00007fb1a089bc24:   leaveq 
  0x00007fb1a089bc25:   retq   
  0x00007fb1a089bc26:   hlt    
  0x00007fb1a089bc27:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 2 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [576]=Callers_xmm0 [592]=Callers_xmm1 [608]=Callers_xmm2 [624]=Callers_xmm3 [640]=Callers_xmm4 [656]=Callers_xmm5 [672]=Callers_xmm6 [688]=Callers_xmm7 [704]=Callers_xmm8 [720]=Callers_xmm9 [736]=Callers_xmm10 [752]=Callers_xmm11 [768]=Callers_xmm12 [784]=Callers_xmm13 [800]=Callers_xmm14 [816]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 933 
ImmutableOopMap {} pc offsets: 1167 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding UncommonTrapBlob 0x00007fb1a089b310
--------------------------------------------------------------------------------
  0x00007fb1a089b380:   sub    $0x8,%rsp
  0x00007fb1a089b384:   mov    %rbp,(%rsp)
  0x00007fb1a089b388:   mov    %esi,%esi
  0x00007fb1a089b38a:   vzeroupper 
  0x00007fb1a089b38d:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a089b394:   mov    %r15,%rdi
  0x00007fb1a089b397:   mov    $0x2,%edx
  0x00007fb1a089b39c:   callq  0x00007fb1a41af200 = Deoptimization::uncommon_trap(JavaThread*, int, int)
  0x00007fb1a089b3a1:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a089b3ac:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a089b3b7:   vzeroupper 
  0x00007fb1a089b3ba:   mov    %rax,%rdi
  0x00007fb1a089b3bd:   add    $0x8,%rsp
  0x00007fb1a089b3c1:   mov    (%rdi),%ecx
  0x00007fb1a089b3c3:   add    %rcx,%rsp
  0x00007fb1a089b3c6:   mov    0x30(%rdi),%rbp
  0x00007fb1a089b3ca:   mov    0x18(%rdi),%rcx
  0x00007fb1a089b3ce:   add    $0x8,%rsp
  0x00007fb1a089b3d2:   mov    0x10(%rdi),%rsi
  0x00007fb1a089b3d6:   mov    0x8(%rdi),%edx
  0x00007fb1a089b3d9:   mov    %rsp,%r8
  0x00007fb1a089b3dc:   mov    0x4(%rdi),%ebx
  0x00007fb1a089b3df:   sub    %rbx,%rsp
  0x00007fb1a089b3e2:   mov    (%rsi),%rbx
  0x00007fb1a089b3e5:   sub    $0x10,%rbx
  0x00007fb1a089b3e9:   rex.W pushq (%rcx)
  0x00007fb1a089b3ec:   push   %rbp
  0x00007fb1a089b3ed:   mov    %rsp,%rbp
  0x00007fb1a089b3f0:   sub    %rbx,%rsp
  0x00007fb1a089b3f3:   mov    %r8,-0x8(%rbp)
  0x00007fb1a089b3f7:   movq   $0x0,-0x10(%rbp)
  0x00007fb1a089b3ff:   mov    %rsp,%r8
  0x00007fb1a089b402:   add    $0x8,%rsi
  0x00007fb1a089b406:   add    $0x8,%rcx
  0x00007fb1a089b40a:   dec    %edx
  0x00007fb1a089b40c:   jne    0x00007fb1a089b3e2
  0x00007fb1a089b40e:   rex.W pushq (%rcx)
  0x00007fb1a089b411:   push   %rbp
  0x00007fb1a089b412:   mov    %rsp,%rbp
  0x00007fb1a089b415:   sub    $0x0,%rsp
  0x00007fb1a089b419:   vzeroupper 
  0x00007fb1a089b41c:   mov    %rbp,0x2d0(%r15)
  0x00007fb1a089b423:   movabs $0x7fb1a089b419,%r10
  0x00007fb1a089b42d:   mov    %r10,0x2c8(%r15)
  0x00007fb1a089b434:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a089b43b:   and    $0xfffffffffffffff0,%rsp
  0x00007fb1a089b43f:   mov    %r15,%rdi
  0x00007fb1a089b442:   mov    $0x2,%esi
  0x00007fb1a089b447:   callq  0x00007fb1a41a7710 = Deoptimization::unpack_frames(JavaThread*, int)
  0x00007fb1a089b44c:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a089b457:   movq   $0x0,0x2d0(%r15)
  0x00007fb1a089b462:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a089b46d:   vzeroupper 
  0x00007fb1a089b470:   leaveq 
  0x00007fb1a089b471:   retq   
  0x00007fb1a089b472:   hlt    
  0x00007fb1a089b473:   hlt    
  0x00007fb1a089b474:   hlt    
  0x00007fb1a089b475:   hlt    
  0x00007fb1a089b476:   hlt    
  0x00007fb1a089b477:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 2 OopMaps

ImmutableOopMap {} pc offsets: 33 153 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - AbstractMethodError throw_exception 0x00007fb1a0871b90
--------------------------------------------------------------------------------
  0x00007fb1a0871c00:   push   %rbp
  0x00007fb1a0871c01:   mov    %rsp,%rbp
  0x00007fb1a0871c04:   sub    $0x0,%rsp
  0x00007fb1a0871c08:   vzeroupper 
  0x00007fb1a0871c0b:   mov    %rbp,0x2d0(%r15)
  0x00007fb1a0871c12:   movabs $0x7fb1a0871c08,%r10
  0x00007fb1a0871c1c:   mov    %r10,0x2c8(%r15)
  0x00007fb1a0871c23:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a0871c2a:   and    $0xfffffffffffffff0,%rsp
  0x00007fb1a0871c2e:   mov    %r15,%rdi
  0x00007fb1a0871c31:   callq  0x00007fb1a4874ea0 = SharedRuntime::throw_AbstractMethodError(JavaThread*)
  0x00007fb1a0871c36:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a0871c41:   movq   $0x0,0x2d0(%r15)
  0x00007fb1a0871c4c:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a0871c57:   vzeroupper 
  0x00007fb1a0871c5a:   leaveq 
  0x00007fb1a0871c5b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - IncompatibleClassChangeError throw_exception 0x00007fb1a0871890
--------------------------------------------------------------------------------
  0x00007fb1a0871900:   push   %rbp
  0x00007fb1a0871901:   mov    %rsp,%rbp
  0x00007fb1a0871904:   sub    $0x0,%rsp
  0x00007fb1a0871908:   vzeroupper 
  0x00007fb1a087190b:   mov    %rbp,0x2d0(%r15)
  0x00007fb1a0871912:   movabs $0x7fb1a0871908,%r10
  0x00007fb1a087191c:   mov    %r10,0x2c8(%r15)
  0x00007fb1a0871923:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a087192a:   and    $0xfffffffffffffff0,%rsp
  0x00007fb1a087192e:   mov    %r15,%rdi
  0x00007fb1a0871931:   callq  0x00007fb1a48750a0 = SharedRuntime::throw_IncompatibleClassChangeError(JavaThread*)
  0x00007fb1a0871936:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a0871941:   movq   $0x0,0x2d0(%r15)
  0x00007fb1a087194c:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a0871957:   vzeroupper 
  0x00007fb1a087195a:   leaveq 
  0x00007fb1a087195b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - NullPointerException at call throw_exception 0x00007fb1a0871590
--------------------------------------------------------------------------------
  0x00007fb1a0871600:   push   %rbp
  0x00007fb1a0871601:   mov    %rsp,%rbp
  0x00007fb1a0871604:   sub    $0x0,%rsp
  0x00007fb1a0871608:   vzeroupper 
  0x00007fb1a087160b:   mov    %rbp,0x2d0(%r15)
  0x00007fb1a0871612:   movabs $0x7fb1a0871608,%r10
  0x00007fb1a087161c:   mov    %r10,0x2c8(%r15)
  0x00007fb1a0871623:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a087162a:   and    $0xfffffffffffffff0,%rsp
  0x00007fb1a087162e:   mov    %r15,%rdi
  0x00007fb1a0871631:   callq  0x00007fb1a4874da0 = SharedRuntime::throw_NullPointerException_at_call(JavaThread*)
  0x00007fb1a0871636:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a0871641:   movq   $0x0,0x2d0(%r15)
  0x00007fb1a087164c:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a0871657:   vzeroupper 
  0x00007fb1a087165a:   leaveq 
  0x00007fb1a087165b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_float_sign_mask [0x00007fb1a0872280, 0x00007fb1a08722c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872280:   (bad)  
  0x00007fb1a0872281:   (bad)  
  0x00007fb1a0872282:   (bad)  
  0x00007fb1a0872283:   jg     Stub::vector_float_sign_mask+4 0x00007fb1a0872284
  0x00007fb1a0872285:   (bad)  
  0x00007fb1a0872286:   (bad)  
  0x00007fb1a0872287:   jg     Stub::vector_float_sign_mask+8 0x00007fb1a0872288
  0x00007fb1a0872289:   (bad)  
  0x00007fb1a087228a:   (bad)  
  0x00007fb1a087228b:   jg     Stub::vector_float_sign_mask+12 0x00007fb1a087228c
  0x00007fb1a087228d:   (bad)  
  0x00007fb1a087228e:   (bad)  
  0x00007fb1a087228f:   jg     Stub::vector_float_sign_mask+16 0x00007fb1a0872290
  0x00007fb1a0872291:   (bad)  
  0x00007fb1a0872292:   (bad)  
  0x00007fb1a0872293:   jg     Stub::vector_float_sign_mask+20 0x00007fb1a0872294
  0x00007fb1a0872295:   (bad)  
  0x00007fb1a0872296:   (bad)  
  0x00007fb1a0872297:   jg     Stub::vector_float_sign_mask+24 0x00007fb1a0872298
  0x00007fb1a0872299:   (bad)  
  0x00007fb1a087229a:   (bad)  
  0x00007fb1a087229b:   jg     Stub::vector_float_sign_mask+28 0x00007fb1a087229c
  0x00007fb1a087229d:   (bad)  
  0x00007fb1a087229e:   (bad)  
  0x00007fb1a087229f:   jg     Stub::vector_float_sign_mask+32 0x00007fb1a08722a0
  0x00007fb1a08722a1:   (bad)  
  0x00007fb1a08722a2:   (bad)  
  0x00007fb1a08722a3:   jg     Stub::vector_float_sign_mask+36 0x00007fb1a08722a4
  0x00007fb1a08722a5:   (bad)  
  0x00007fb1a08722a6:   (bad)  
  0x00007fb1a08722a7:   jg     Stub::vector_float_sign_mask+40 0x00007fb1a08722a8
  0x00007fb1a08722a9:   (bad)  
  0x00007fb1a08722aa:   (bad)  
  0x00007fb1a08722ab:   jg     Stub::vector_float_sign_mask+44 0x00007fb1a08722ac
  0x00007fb1a08722ad:   (bad)  
  0x00007fb1a08722ae:   (bad)  
  0x00007fb1a08722af:   jg     Stub::vector_float_sign_mask+48 0x00007fb1a08722b0
  0x00007fb1a08722b1:   (bad)  
  0x00007fb1a08722b2:   (bad)  
  0x00007fb1a08722b3:   jg     Stub::vector_float_sign_mask+52 0x00007fb1a08722b4
  0x00007fb1a08722b5:   (bad)  
  0x00007fb1a08722b6:   (bad)  
  0x00007fb1a08722b7:   jg     Stub::vector_float_sign_mask+56 0x00007fb1a08722b8
  0x00007fb1a08722b9:   (bad)  
  0x00007fb1a08722ba:   (bad)  
  0x00007fb1a08722bb:   jg     Stub::vector_float_sign_mask+60 0x00007fb1a08722bc
  0x00007fb1a08722bd:   (bad)  
  0x00007fb1a08722be:   (bad)  
  0x00007fb1a08722bf:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_float_sign_flip [0x00007fb1a08722c0, 0x00007fb1a0872300] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08722c0:   add    %al,(%rax)
  0x00007fb1a08722c2:   add    %al,-0x80000000(%rax)
  0x00007fb1a08722c8:   add    %al,(%rax)
  0x00007fb1a08722ca:   add    %al,-0x80000000(%rax)
  0x00007fb1a08722d0:   add    %al,(%rax)
  0x00007fb1a08722d2:   add    %al,-0x80000000(%rax)
  0x00007fb1a08722d8:   add    %al,(%rax)
  0x00007fb1a08722da:   add    %al,-0x80000000(%rax)
  0x00007fb1a08722e0:   add    %al,(%rax)
  0x00007fb1a08722e2:   add    %al,-0x80000000(%rax)
  0x00007fb1a08722e8:   add    %al,(%rax)
  0x00007fb1a08722ea:   add    %al,-0x80000000(%rax)
  0x00007fb1a08722f0:   add    %al,(%rax)
  0x00007fb1a08722f2:   add    %al,-0x80000000(%rax)
  0x00007fb1a08722f8:   add    %al,(%rax)
  0x00007fb1a08722fa:   add    %al,-0x80000000(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_double_sign_mask [0x00007fb1a0872300, 0x00007fb1a0872340] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872300:   (bad)  
  0x00007fb1a0872301:   (bad)  
  0x00007fb1a0872302:   (bad)  
  0x00007fb1a0872303:   (bad)  
  0x00007fb1a0872304:   (bad)  
  0x00007fb1a0872305:   (bad)  
  0x00007fb1a0872306:   (bad)  
  0x00007fb1a0872307:   jg     Stub::vector_double_sign_mask+8 0x00007fb1a0872308
  0x00007fb1a0872309:   (bad)  
  0x00007fb1a087230a:   (bad)  
  0x00007fb1a087230b:   (bad)  
  0x00007fb1a087230c:   (bad)  
  0x00007fb1a087230d:   (bad)  
  0x00007fb1a087230e:   (bad)  
  0x00007fb1a087230f:   jg     Stub::vector_double_sign_mask+16 0x00007fb1a0872310
  0x00007fb1a0872311:   (bad)  
  0x00007fb1a0872312:   (bad)  
  0x00007fb1a0872313:   (bad)  
  0x00007fb1a0872314:   (bad)  
  0x00007fb1a0872315:   (bad)  
  0x00007fb1a0872316:   (bad)  
  0x00007fb1a0872317:   jg     Stub::vector_double_sign_mask+24 0x00007fb1a0872318
  0x00007fb1a0872319:   (bad)  
  0x00007fb1a087231a:   (bad)  
  0x00007fb1a087231b:   (bad)  
  0x00007fb1a087231c:   (bad)  
  0x00007fb1a087231d:   (bad)  
  0x00007fb1a087231e:   (bad)  
  0x00007fb1a087231f:   jg     Stub::vector_double_sign_mask+32 0x00007fb1a0872320
  0x00007fb1a0872321:   (bad)  
  0x00007fb1a0872322:   (bad)  
  0x00007fb1a0872323:   (bad)  
  0x00007fb1a0872324:   (bad)  
  0x00007fb1a0872325:   (bad)  
  0x00007fb1a0872326:   (bad)  
  0x00007fb1a0872327:   jg     Stub::vector_double_sign_mask+40 0x00007fb1a0872328
  0x00007fb1a0872329:   (bad)  
  0x00007fb1a087232a:   (bad)  
  0x00007fb1a087232b:   (bad)  
  0x00007fb1a087232c:   (bad)  
  0x00007fb1a087232d:   (bad)  
  0x00007fb1a087232e:   (bad)  
  0x00007fb1a087232f:   jg     Stub::vector_double_sign_mask+48 0x00007fb1a0872330
  0x00007fb1a0872331:   (bad)  
  0x00007fb1a0872332:   (bad)  
  0x00007fb1a0872333:   (bad)  
  0x00007fb1a0872334:   (bad)  
  0x00007fb1a0872335:   (bad)  
  0x00007fb1a0872336:   (bad)  
  0x00007fb1a0872337:   jg     Stub::vector_double_sign_mask+56 0x00007fb1a0872338
  0x00007fb1a0872339:   (bad)  
  0x00007fb1a087233a:   (bad)  
  0x00007fb1a087233b:   (bad)  
  0x00007fb1a087233c:   (bad)  
  0x00007fb1a087233d:   (bad)  
  0x00007fb1a087233e:   (bad)  
  0x00007fb1a087233f:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_double_sign_flip [0x00007fb1a0872340, 0x00007fb1a0872380] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872340:   add    %al,(%rax)
  0x00007fb1a0872342:   add    %al,(%rax)
  0x00007fb1a0872344:   add    %al,(%rax)
  0x00007fb1a0872346:   add    %al,0x0(%rax)
  0x00007fb1a087234c:   add    %al,(%rax)
  0x00007fb1a087234e:   add    %al,0x0(%rax)
  0x00007fb1a0872354:   add    %al,(%rax)
  0x00007fb1a0872356:   add    %al,0x0(%rax)
  0x00007fb1a087235c:   add    %al,(%rax)
  0x00007fb1a087235e:   add    %al,0x0(%rax)
  0x00007fb1a0872364:   add    %al,(%rax)
  0x00007fb1a0872366:   add    %al,0x0(%rax)
  0x00007fb1a087236c:   add    %al,(%rax)
  0x00007fb1a087236e:   add    %al,0x0(%rax)
  0x00007fb1a0872374:   add    %al,(%rax)
  0x00007fb1a0872376:   add    %al,0x0(%rax)
  0x00007fb1a087237c:   add    %al,(%rax)
  0x00007fb1a087237e:   .byte 0x0
  0x00007fb1a087237f:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_all_bits_set [0x00007fb1a0872380, 0x00007fb1a08723c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872380:   (bad)  
  0x00007fb1a0872381:   (bad)  
  0x00007fb1a0872382:   (bad)  
  0x00007fb1a0872383:   (bad)  
  0x00007fb1a0872384:   (bad)  
  0x00007fb1a0872385:   (bad)  
  0x00007fb1a0872386:   (bad)  
  0x00007fb1a0872387:   (bad)  
  0x00007fb1a0872388:   (bad)  
  0x00007fb1a0872389:   (bad)  
  0x00007fb1a087238a:   (bad)  
  0x00007fb1a087238b:   (bad)  
  0x00007fb1a087238c:   (bad)  
  0x00007fb1a087238d:   (bad)  
  0x00007fb1a087238e:   (bad)  
  0x00007fb1a087238f:   (bad)  
  0x00007fb1a0872390:   (bad)  
  0x00007fb1a0872391:   (bad)  
  0x00007fb1a0872392:   (bad)  
  0x00007fb1a0872393:   (bad)  
  0x00007fb1a0872394:   (bad)  
  0x00007fb1a0872395:   (bad)  
  0x00007fb1a0872396:   (bad)  
  0x00007fb1a0872397:   (bad)  
  0x00007fb1a0872398:   (bad)  
  0x00007fb1a0872399:   (bad)  
  0x00007fb1a087239a:   (bad)  
  0x00007fb1a087239b:   (bad)  
  0x00007fb1a087239c:   (bad)  
  0x00007fb1a087239d:   (bad)  
  0x00007fb1a087239e:   (bad)  
  0x00007fb1a087239f:   (bad)  
  0x00007fb1a08723a0:   (bad)  
  0x00007fb1a08723a1:   (bad)  
  0x00007fb1a08723a2:   (bad)  
  0x00007fb1a08723a3:   (bad)  
  0x00007fb1a08723a4:   (bad)  
  0x00007fb1a08723a5:   (bad)  
  0x00007fb1a08723a6:   (bad)  
  0x00007fb1a08723a7:   (bad)  
  0x00007fb1a08723a8:   (bad)  
  0x00007fb1a08723a9:   (bad)  
  0x00007fb1a08723aa:   (bad)  
  0x00007fb1a08723ab:   (bad)  
  0x00007fb1a08723ac:   (bad)  
  0x00007fb1a08723ad:   (bad)  
  0x00007fb1a08723ae:   (bad)  
  0x00007fb1a08723af:   (bad)  
  0x00007fb1a08723b0:   (bad)  
  0x00007fb1a08723b1:   (bad)  
  0x00007fb1a08723b2:   (bad)  
  0x00007fb1a08723b3:   (bad)  
  0x00007fb1a08723b4:   (bad)  
  0x00007fb1a08723b5:   (bad)  
  0x00007fb1a08723b6:   (bad)  
  0x00007fb1a08723b7:   (bad)  
  0x00007fb1a08723b8:   (bad)  
  0x00007fb1a08723b9:   (bad)  
  0x00007fb1a08723ba:   (bad)  
  0x00007fb1a08723bb:   (bad)  
  0x00007fb1a08723bc:   (bad)  
  0x00007fb1a08723bd:   (bad)  
  0x00007fb1a08723be:   (bad)  
  0x00007fb1a08723bf:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_mask_cmp_bits [0x00007fb1a08723c0, 0x00007fb1a0872400] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08723c0:   add    %eax,(%rax)
  0x00007fb1a08723c2:   add    %al,(%rax)
  0x00007fb1a08723c4:   add    %eax,(%rax)
  0x00007fb1a08723c6:   add    %al,(%rax)
  0x00007fb1a08723c8:   add    %eax,(%rax)
  0x00007fb1a08723ca:   add    %al,(%rax)
  0x00007fb1a08723cc:   add    %eax,(%rax)
  0x00007fb1a08723ce:   add    %al,(%rax)
  0x00007fb1a08723d0:   add    %eax,(%rax)
  0x00007fb1a08723d2:   add    %al,(%rax)
  0x00007fb1a08723d4:   add    %eax,(%rax)
  0x00007fb1a08723d6:   add    %al,(%rax)
  0x00007fb1a08723d8:   add    %eax,(%rax)
  0x00007fb1a08723da:   add    %al,(%rax)
  0x00007fb1a08723dc:   add    %eax,(%rax)
  0x00007fb1a08723de:   add    %al,(%rax)
  0x00007fb1a08723e0:   add    %eax,(%rax)
  0x00007fb1a08723e2:   add    %al,(%rax)
  0x00007fb1a08723e4:   add    %eax,(%rax)
  0x00007fb1a08723e6:   add    %al,(%rax)
  0x00007fb1a08723e8:   add    %eax,(%rax)
  0x00007fb1a08723ea:   add    %al,(%rax)
  0x00007fb1a08723ec:   add    %eax,(%rax)
  0x00007fb1a08723ee:   add    %al,(%rax)
  0x00007fb1a08723f0:   add    %eax,(%rax)
  0x00007fb1a08723f2:   add    %al,(%rax)
  0x00007fb1a08723f4:   add    %eax,(%rax)
  0x00007fb1a08723f6:   add    %al,(%rax)
  0x00007fb1a08723f8:   add    %eax,(%rax)
  0x00007fb1a08723fa:   add    %al,(%rax)
  0x00007fb1a08723fc:   add    %eax,(%rax)
  0x00007fb1a08723fe:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_short_to_byte_mask [0x00007fb1a0872400, 0x00007fb1a0872440] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872400:   incl   (%rax)
  0x00007fb1a0872402:   incl   (%rax)
  0x00007fb1a0872404:   incl   (%rax)
  0x00007fb1a0872406:   incl   (%rax)
  0x00007fb1a0872408:   incl   (%rax)
  0x00007fb1a087240a:   incl   (%rax)
  0x00007fb1a087240c:   incl   (%rax)
  0x00007fb1a087240e:   incl   (%rax)
  0x00007fb1a0872410:   incl   (%rax)
  0x00007fb1a0872412:   incl   (%rax)
  0x00007fb1a0872414:   incl   (%rax)
  0x00007fb1a0872416:   incl   (%rax)
  0x00007fb1a0872418:   incl   (%rax)
  0x00007fb1a087241a:   incl   (%rax)
  0x00007fb1a087241c:   incl   (%rax)
  0x00007fb1a087241e:   incl   (%rax)
  0x00007fb1a0872420:   incl   (%rax)
  0x00007fb1a0872422:   incl   (%rax)
  0x00007fb1a0872424:   incl   (%rax)
  0x00007fb1a0872426:   incl   (%rax)
  0x00007fb1a0872428:   incl   (%rax)
  0x00007fb1a087242a:   incl   (%rax)
  0x00007fb1a087242c:   incl   (%rax)
  0x00007fb1a087242e:   incl   (%rax)
  0x00007fb1a0872430:   incl   (%rax)
  0x00007fb1a0872432:   incl   (%rax)
  0x00007fb1a0872434:   incl   (%rax)
  0x00007fb1a0872436:   incl   (%rax)
  0x00007fb1a0872438:   incl   (%rax)
  0x00007fb1a087243a:   incl   (%rax)
  0x00007fb1a087243c:   incl   (%rax)
  0x00007fb1a087243e:   incl   (%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_byte_perm_mask [0x00007fb1a0872440, 0x00007fb1a0872480] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872440:   add    %eax,(%rax)
  0x00007fb1a0872442:   add    %al,(%rax)
  0x00007fb1a0872444:   add    %al,(%rax)
  0x00007fb1a0872446:   add    %al,(%rax)
  0x00007fb1a0872448:   add    (%rax),%eax
  0x00007fb1a087244a:   add    %al,(%rax)
  0x00007fb1a087244c:   add    %al,(%rax)
  0x00007fb1a087244e:   add    %al,(%rax)
  0x00007fb1a0872450:   add    $0x0,%eax
  0x00007fb1a0872455:   add    %al,(%rax)
  0x00007fb1a0872457:   add    %al,(%rdi)
  0x00007fb1a0872459:   add    %al,(%rax)
  0x00007fb1a087245b:   add    %al,(%rax)
  0x00007fb1a087245d:   add    %al,(%rax)
  0x00007fb1a087245f:   add    %al,(%rax)
  0x00007fb1a0872461:   add    %al,(%rax)
  0x00007fb1a0872463:   add    %al,(%rax)
  0x00007fb1a0872465:   add    %al,(%rax)
  0x00007fb1a0872467:   add    %al,(%rdx)
  0x00007fb1a0872469:   add    %al,(%rax)
  0x00007fb1a087246b:   add    %al,(%rax)
  0x00007fb1a087246d:   add    %al,(%rax)
  0x00007fb1a087246f:   add    %al,(%rax,%rax,1)
  0x00007fb1a0872472:   add    %al,(%rax)
  0x00007fb1a0872474:   add    %al,(%rax)
  0x00007fb1a0872476:   add    %al,(%rax)
  0x00007fb1a0872478:   (bad)  
  0x00007fb1a0872479:   add    %al,(%rax)
  0x00007fb1a087247b:   add    %al,(%rax)
  0x00007fb1a087247d:   add    %al,(%rax)
  0x00007fb1a087247f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_to_byte_mask [0x00007fb1a0872480, 0x00007fb1a08724c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872480:   incl   (%rax)
  0x00007fb1a0872482:   add    %al,(%rax)
  0x00007fb1a0872484:   incl   (%rax)
  0x00007fb1a0872486:   add    %al,(%rax)
  0x00007fb1a0872488:   incl   (%rax)
  0x00007fb1a087248a:   add    %al,(%rax)
  0x00007fb1a087248c:   incl   (%rax)
  0x00007fb1a087248e:   add    %al,(%rax)
  0x00007fb1a0872490:   incl   (%rax)
  0x00007fb1a0872492:   add    %al,(%rax)
  0x00007fb1a0872494:   incl   (%rax)
  0x00007fb1a0872496:   add    %al,(%rax)
  0x00007fb1a0872498:   incl   (%rax)
  0x00007fb1a087249a:   add    %al,(%rax)
  0x00007fb1a087249c:   incl   (%rax)
  0x00007fb1a087249e:   add    %al,(%rax)
  0x00007fb1a08724a0:   incl   (%rax)
  0x00007fb1a08724a2:   add    %al,(%rax)
  0x00007fb1a08724a4:   incl   (%rax)
  0x00007fb1a08724a6:   add    %al,(%rax)
  0x00007fb1a08724a8:   incl   (%rax)
  0x00007fb1a08724aa:   add    %al,(%rax)
  0x00007fb1a08724ac:   incl   (%rax)
  0x00007fb1a08724ae:   add    %al,(%rax)
  0x00007fb1a08724b0:   incl   (%rax)
  0x00007fb1a08724b2:   add    %al,(%rax)
  0x00007fb1a08724b4:   incl   (%rax)
  0x00007fb1a08724b6:   add    %al,(%rax)
  0x00007fb1a08724b8:   incl   (%rax)
  0x00007fb1a08724ba:   add    %al,(%rax)
  0x00007fb1a08724bc:   incl   (%rax)
  0x00007fb1a08724be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_to_short_mask [0x00007fb1a08724c0, 0x00007fb1a0872500] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08724c0:   (bad)  
  0x00007fb1a08724c1:   incl   (%rax)
  0x00007fb1a08724c3:   add    %bh,%bh
  0x00007fb1a08724c5:   incl   (%rax)
  0x00007fb1a08724c7:   add    %bh,%bh
  0x00007fb1a08724c9:   incl   (%rax)
  0x00007fb1a08724cb:   add    %bh,%bh
  0x00007fb1a08724cd:   incl   (%rax)
  0x00007fb1a08724cf:   add    %bh,%bh
  0x00007fb1a08724d1:   incl   (%rax)
  0x00007fb1a08724d3:   add    %bh,%bh
  0x00007fb1a08724d5:   incl   (%rax)
  0x00007fb1a08724d7:   add    %bh,%bh
  0x00007fb1a08724d9:   incl   (%rax)
  0x00007fb1a08724db:   add    %bh,%bh
  0x00007fb1a08724dd:   incl   (%rax)
  0x00007fb1a08724df:   add    %bh,%bh
  0x00007fb1a08724e1:   incl   (%rax)
  0x00007fb1a08724e3:   add    %bh,%bh
  0x00007fb1a08724e5:   incl   (%rax)
  0x00007fb1a08724e7:   add    %bh,%bh
  0x00007fb1a08724e9:   incl   (%rax)
  0x00007fb1a08724eb:   add    %bh,%bh
  0x00007fb1a08724ed:   incl   (%rax)
  0x00007fb1a08724ef:   add    %bh,%bh
  0x00007fb1a08724f1:   incl   (%rax)
  0x00007fb1a08724f3:   add    %bh,%bh
  0x00007fb1a08724f5:   incl   (%rax)
  0x00007fb1a08724f7:   add    %bh,%bh
  0x00007fb1a08724f9:   incl   (%rax)
  0x00007fb1a08724fb:   add    %bh,%bh
  0x00007fb1a08724fd:   incl   (%rax)
  0x00007fb1a08724ff:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_32_bit_mask [0x00007fb1a0872500, 0x00007fb1a0872540] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872500:   (bad)  
  0x00007fb1a0872501:   (bad)  
  0x00007fb1a0872502:   (bad)  
  0x00007fb1a0872503:   incl   (%rax)
  0x00007fb1a0872505:   add    %al,(%rax)
  0x00007fb1a0872507:   add    %al,(%rax)
  0x00007fb1a0872509:   add    %al,(%rax)
  0x00007fb1a087250b:   add    %al,(%rax)
  0x00007fb1a087250d:   add    %al,(%rax)
  0x00007fb1a087250f:   add    %al,(%rax)
  0x00007fb1a0872511:   add    %al,(%rax)
  0x00007fb1a0872513:   add    %al,(%rax)
  0x00007fb1a0872515:   add    %al,(%rax)
  0x00007fb1a0872517:   add    %al,(%rax)
  0x00007fb1a0872519:   add    %al,(%rax)
  0x00007fb1a087251b:   add    %al,(%rax)
  0x00007fb1a087251d:   add    %al,(%rax)
  0x00007fb1a087251f:   add    %al,(%rax)
  0x00007fb1a0872521:   add    %al,(%rax)
  0x00007fb1a0872523:   add    %al,(%rax)
  0x00007fb1a0872525:   add    %al,(%rax)
  0x00007fb1a0872527:   add    %al,(%rax)
  0x00007fb1a0872529:   add    %al,(%rax)
  0x00007fb1a087252b:   add    %al,(%rax)
  0x00007fb1a087252d:   add    %al,(%rax)
  0x00007fb1a087252f:   add    %al,(%rax)
  0x00007fb1a0872531:   add    %al,(%rax)
  0x00007fb1a0872533:   add    %al,(%rax)
  0x00007fb1a0872535:   add    %al,(%rax)
  0x00007fb1a0872537:   add    %al,(%rax)
  0x00007fb1a0872539:   add    %al,(%rax)
  0x00007fb1a087253b:   add    %al,(%rax)
  0x00007fb1a087253d:   add    %al,(%rax)
  0x00007fb1a087253f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_64_bit_mask [0x00007fb1a0872540, 0x00007fb1a0872580] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872540:   (bad)  
  0x00007fb1a0872541:   (bad)  
  0x00007fb1a0872542:   (bad)  
  0x00007fb1a0872543:   (bad)  
  0x00007fb1a0872544:   (bad)  
  0x00007fb1a0872545:   (bad)  
  0x00007fb1a0872546:   (bad)  
  0x00007fb1a0872547:   incl   (%rax)
  0x00007fb1a0872549:   add    %al,(%rax)
  0x00007fb1a087254b:   add    %al,(%rax)
  0x00007fb1a087254d:   add    %al,(%rax)
  0x00007fb1a087254f:   add    %al,(%rax)
  0x00007fb1a0872551:   add    %al,(%rax)
  0x00007fb1a0872553:   add    %al,(%rax)
  0x00007fb1a0872555:   add    %al,(%rax)
  0x00007fb1a0872557:   add    %al,(%rax)
  0x00007fb1a0872559:   add    %al,(%rax)
  0x00007fb1a087255b:   add    %al,(%rax)
  0x00007fb1a087255d:   add    %al,(%rax)
  0x00007fb1a087255f:   add    %al,(%rax)
  0x00007fb1a0872561:   add    %al,(%rax)
  0x00007fb1a0872563:   add    %al,(%rax)
  0x00007fb1a0872565:   add    %al,(%rax)
  0x00007fb1a0872567:   add    %al,(%rax)
  0x00007fb1a0872569:   add    %al,(%rax)
  0x00007fb1a087256b:   add    %al,(%rax)
  0x00007fb1a087256d:   add    %al,(%rax)
  0x00007fb1a087256f:   add    %al,(%rax)
  0x00007fb1a0872571:   add    %al,(%rax)
  0x00007fb1a0872573:   add    %al,(%rax)
  0x00007fb1a0872575:   add    %al,(%rax)
  0x00007fb1a0872577:   add    %al,(%rax)
  0x00007fb1a0872579:   add    %al,(%rax)
  0x00007fb1a087257b:   add    %al,(%rax)
  0x00007fb1a087257d:   add    %al,(%rax)
  0x00007fb1a087257f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_shuffle_mask [0x00007fb1a0872580, 0x00007fb1a08725c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872580:   add    %al,(%rcx)
  0x00007fb1a0872582:   add    (%rbx),%al
  0x00007fb1a0872584:   add    %al,(%rcx)
  0x00007fb1a0872586:   add    (%rbx),%al
  0x00007fb1a0872588:   add    %al,(%rcx)
  0x00007fb1a087258a:   add    (%rbx),%al
  0x00007fb1a087258c:   add    %al,(%rcx)
  0x00007fb1a087258e:   add    (%rbx),%al
  0x00007fb1a0872590:   add    %al,(%rcx)
  0x00007fb1a0872592:   add    (%rbx),%al
  0x00007fb1a0872594:   add    %al,(%rcx)
  0x00007fb1a0872596:   add    (%rbx),%al
  0x00007fb1a0872598:   add    %al,(%rcx)
  0x00007fb1a087259a:   add    (%rbx),%al
  0x00007fb1a087259c:   add    %al,(%rcx)
  0x00007fb1a087259e:   add    (%rbx),%al
  0x00007fb1a08725a0:   add    %al,(%rcx)
  0x00007fb1a08725a2:   add    (%rbx),%al
  0x00007fb1a08725a4:   add    %al,(%rcx)
  0x00007fb1a08725a6:   add    (%rbx),%al
  0x00007fb1a08725a8:   add    %al,(%rcx)
  0x00007fb1a08725aa:   add    (%rbx),%al
  0x00007fb1a08725ac:   add    %al,(%rcx)
  0x00007fb1a08725ae:   add    (%rbx),%al
  0x00007fb1a08725b0:   add    %al,(%rcx)
  0x00007fb1a08725b2:   add    (%rbx),%al
  0x00007fb1a08725b4:   add    %al,(%rcx)
  0x00007fb1a08725b6:   add    (%rbx),%al
  0x00007fb1a08725b8:   add    %al,(%rcx)
  0x00007fb1a08725ba:   add    (%rbx),%al
  0x00007fb1a08725bc:   add    %al,(%rcx)
  0x00007fb1a08725be:   add    (%rbx),%al
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_byte_shuffle_mask [0x00007fb1a08725c0, 0x00007fb1a08725e0] (32 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08725c0:   jo     Stub::<unknown> 0x00007fb1a0872632
  0x00007fb1a08725c2:   jo     Stub::<unknown> 0x00007fb1a0872634
  0x00007fb1a08725c4:   jo     Stub::<unknown> 0x00007fb1a0872636
  0x00007fb1a08725c6:   jo     Stub::<unknown> 0x00007fb1a0872638
  0x00007fb1a08725c8:   jo     Stub::<unknown> 0x00007fb1a087263a
  0x00007fb1a08725ca:   jo     Stub::<unknown> 0x00007fb1a087263c
  0x00007fb1a08725cc:   jo     Stub::<unknown> 0x00007fb1a087263e
  0x00007fb1a08725ce:   jo     Stub::<unknown> 0x00007fb1a0872640
  0x00007fb1a08725d0:   lock lock lock lock lock lock lock lock lock lock lock lock lock lock
  0x00007fb1a08725de:   lock
  0x00007fb1a08725df:   lock
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_short_shuffle_mask [0x00007fb1a08725e0, 0x00007fb1a0872620] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08725e0:   add    %al,(%rcx)
  0x00007fb1a08725e2:   add    %al,(%rcx)
  0x00007fb1a08725e4:   add    %al,(%rcx)
  0x00007fb1a08725e6:   add    %al,(%rcx)
  0x00007fb1a08725e8:   add    %al,(%rcx)
  0x00007fb1a08725ea:   add    %al,(%rcx)
  0x00007fb1a08725ec:   add    %al,(%rcx)
  0x00007fb1a08725ee:   add    %al,(%rcx)
  0x00007fb1a08725f0:   add    %al,(%rcx)
  0x00007fb1a08725f2:   add    %al,(%rcx)
  0x00007fb1a08725f4:   add    %al,(%rcx)
  0x00007fb1a08725f6:   add    %al,(%rcx)
  0x00007fb1a08725f8:   add    %al,(%rcx)
  0x00007fb1a08725fa:   add    %al,(%rcx)
  0x00007fb1a08725fc:   add    %al,(%rcx)
  0x00007fb1a08725fe:   add    %al,(%rcx)
  0x00007fb1a0872600:   add    %al,(%rcx)
  0x00007fb1a0872602:   add    %al,(%rcx)
  0x00007fb1a0872604:   add    %al,(%rcx)
  0x00007fb1a0872606:   add    %al,(%rcx)
  0x00007fb1a0872608:   add    %al,(%rcx)
  0x00007fb1a087260a:   add    %al,(%rcx)
  0x00007fb1a087260c:   add    %al,(%rcx)
  0x00007fb1a087260e:   add    %al,(%rcx)
  0x00007fb1a0872610:   add    %al,(%rcx)
  0x00007fb1a0872612:   add    %al,(%rcx)
  0x00007fb1a0872614:   add    %al,(%rcx)
  0x00007fb1a0872616:   add    %al,(%rcx)
  0x00007fb1a0872618:   add    %al,(%rcx)
  0x00007fb1a087261a:   add    %al,(%rcx)
  0x00007fb1a087261c:   add    %al,(%rcx)
  0x00007fb1a087261e:   add    %al,(%rcx)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_long_shuffle_mask [0x00007fb1a0872620, 0x00007fb1a0872660] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872620:   add    %al,(%rax)
  0x00007fb1a0872622:   add    %al,(%rax)
  0x00007fb1a0872624:   add    %eax,(%rax)
  0x00007fb1a0872626:   add    %al,(%rax)
  0x00007fb1a0872628:   add    %al,(%rax)
  0x00007fb1a087262a:   add    %al,(%rax)
  0x00007fb1a087262c:   add    %eax,(%rax)
  0x00007fb1a087262e:   add    %al,(%rax)
  0x00007fb1a0872630:   add    %al,(%rax)
  0x00007fb1a0872632:   add    %al,(%rax)
  0x00007fb1a0872634:   add    %eax,(%rax)
  0x00007fb1a0872636:   add    %al,(%rax)
  0x00007fb1a0872638:   add    %al,(%rax)
  0x00007fb1a087263a:   add    %al,(%rax)
  0x00007fb1a087263c:   add    %eax,(%rax)
  0x00007fb1a087263e:   add    %al,(%rax)
  0x00007fb1a0872640:   add    %al,(%rax)
  0x00007fb1a0872642:   add    %al,(%rax)
  0x00007fb1a0872644:   add    %eax,(%rax)
  0x00007fb1a0872646:   add    %al,(%rax)
  0x00007fb1a0872648:   add    %al,(%rax)
  0x00007fb1a087264a:   add    %al,(%rax)
  0x00007fb1a087264c:   add    %eax,(%rax)
  0x00007fb1a087264e:   add    %al,(%rax)
  0x00007fb1a0872650:   add    %al,(%rax)
  0x00007fb1a0872652:   add    %al,(%rax)
  0x00007fb1a0872654:   add    %eax,(%rax)
  0x00007fb1a0872656:   add    %al,(%rax)
  0x00007fb1a0872658:   add    %al,(%rax)
  0x00007fb1a087265a:   add    %al,(%rax)
  0x00007fb1a087265c:   add    %eax,(%rax)
  0x00007fb1a087265e:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_long_sign_mask [0x00007fb1a0872660, 0x00007fb1a08726a0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872660:   add    %al,(%rax)
  0x00007fb1a0872662:   add    %al,(%rax)
  0x00007fb1a0872664:   add    %al,(%rax)
  0x00007fb1a0872666:   add    %al,0x0(%rax)
  0x00007fb1a087266c:   add    %al,(%rax)
  0x00007fb1a087266e:   add    %al,0x0(%rax)
  0x00007fb1a0872674:   add    %al,(%rax)
  0x00007fb1a0872676:   add    %al,0x0(%rax)
  0x00007fb1a087267c:   add    %al,(%rax)
  0x00007fb1a087267e:   add    %al,0x0(%rax)
  0x00007fb1a0872684:   add    %al,(%rax)
  0x00007fb1a0872686:   add    %al,0x0(%rax)
  0x00007fb1a087268c:   add    %al,(%rax)
  0x00007fb1a087268e:   add    %al,0x0(%rax)
  0x00007fb1a0872694:   add    %al,(%rax)
  0x00007fb1a0872696:   add    %al,0x0(%rax)
  0x00007fb1a087269c:   add    %al,(%rax)
  0x00007fb1a087269e:   .byte 0x0
  0x00007fb1a087269f:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::iota_indices [0x00007fb1a08726a0, 0x00007fb1a0872820] (384 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08726a0:   add    %al,(%rcx)
  0x00007fb1a08726a2:   add    (%rbx),%al
  0x00007fb1a08726a4:   add    $0x5,%al
  0x00007fb1a08726a6:   (bad)  
  0x00007fb1a08726a7:   (bad)  
  0x00007fb1a08726a8:   or     %cl,(%rcx)
  0x00007fb1a08726aa:   or     (%rbx),%cl
  0x00007fb1a08726ac:   or     $0xd,%al
  0x00007fb1a08726ae:   (bad)  
  0x00007fb1a08726af:   movups (%rcx),%xmm2
  0x00007fb1a08726b2:   adc    (%rbx),%dl
  0x00007fb1a08726b4:   adc    $0x15,%al
  0x00007fb1a08726b6:   (bad)  
  0x00007fb1a08726b7:   (bad)  
  0x00007fb1a08726b8:   sbb    %bl,(%rcx)
  0x00007fb1a08726ba:   sbb    (%rbx),%bl
  0x00007fb1a08726bc:   sbb    $0x1d,%al
  0x00007fb1a08726be:   (bad)  
  0x00007fb1a08726bf:   (bad)  
  0x00007fb1a08726c0:   and    %ah,(%rcx)
  0x00007fb1a08726c2:   and    (%rbx),%ah
  0x00007fb1a08726c4:   and    $0x25,%al
  0x00007fb1a08726c6:   es (bad) 
  0x00007fb1a08726c8:   sub    %ch,(%rcx)
  0x00007fb1a08726ca:   sub    (%rbx),%ch
  0x00007fb1a08726cc:   sub    $0x2d,%al
  0x00007fb1a08726ce:   cs (bad) 
  0x00007fb1a08726d0:   xor    %dh,(%rcx)
  0x00007fb1a08726d2:   xor    (%rbx),%dh
  0x00007fb1a08726d4:   xor    $0x35,%al
  0x00007fb1a08726d6:   ss (bad) 
  0x00007fb1a08726d8:   cmp    %bh,(%rcx)
  0x00007fb1a08726da:   cmp    (%rbx),%bh
  0x00007fb1a08726dc:   cmp    $0x3d,%al
  0x00007fb1a08726de:   ds (bad) 
  0x00007fb1a08726e0:   add    %al,(%rax)
  0x00007fb1a08726e2:   add    %eax,(%rax)
  0x00007fb1a08726e4:   add    (%rax),%al
  0x00007fb1a08726e6:   add    (%rax),%eax
  0x00007fb1a08726e8:   add    $0x0,%al
  0x00007fb1a08726ea:   add    $0x7000600,%eax
  0x00007fb1a08726ef:   add    %cl,(%rax)
  0x00007fb1a08726f1:   add    %cl,(%rcx)
  0x00007fb1a08726f3:   add    %cl,(%rdx)
  0x00007fb1a08726f5:   add    %cl,(%rbx)
  0x00007fb1a08726f7:   add    %cl,(%rax,%rax,1)
  0x00007fb1a08726fa:   or     $0xf000e00,%eax
  0x00007fb1a08726ff:   add    %dl,(%rax)
  0x00007fb1a0872701:   add    %dl,(%rcx)
  0x00007fb1a0872703:   add    %dl,(%rdx)
  0x00007fb1a0872705:   add    %dl,(%rbx)
  0x00007fb1a0872707:   add    %dl,(%rax,%rax,1)
  0x00007fb1a087270a:   adc    $0x17001600,%eax
  0x00007fb1a087270f:   add    %bl,(%rax)
  0x00007fb1a0872711:   add    %bl,(%rcx)
  0x00007fb1a0872713:   add    %bl,(%rdx)
  0x00007fb1a0872715:   add    %bl,(%rbx)
  0x00007fb1a0872717:   add    %bl,(%rax,%rax,1)
  0x00007fb1a087271a:   sbb    $0x1f001e00,%eax
  0x00007fb1a087271f:   add    %al,(%rax)
  0x00007fb1a0872721:   add    %al,(%rax)
  0x00007fb1a0872723:   add    %al,(%rcx)
  0x00007fb1a0872725:   add    %al,(%rax)
  0x00007fb1a0872727:   add    %al,(%rdx)
  0x00007fb1a0872729:   add    %al,(%rax)
  0x00007fb1a087272b:   add    %al,(%rbx)
  0x00007fb1a087272d:   add    %al,(%rax)
  0x00007fb1a087272f:   add    %al,(%rax,%rax,1)
  0x00007fb1a0872732:   add    %al,(%rax)
  0x00007fb1a0872734:   add    $0x6000000,%eax
  0x00007fb1a0872739:   add    %al,(%rax)
  0x00007fb1a087273b:   add    %al,(%rdi)
  0x00007fb1a087273d:   add    %al,(%rax)
  0x00007fb1a087273f:   add    %cl,(%rax)
  0x00007fb1a0872741:   add    %al,(%rax)
  0x00007fb1a0872743:   add    %cl,(%rcx)
  0x00007fb1a0872745:   add    %al,(%rax)
  0x00007fb1a0872747:   add    %cl,(%rdx)
  0x00007fb1a0872749:   add    %al,(%rax)
  0x00007fb1a087274b:   add    %cl,(%rbx)
  0x00007fb1a087274d:   add    %al,(%rax)
  0x00007fb1a087274f:   add    %cl,(%rax,%rax,1)
  0x00007fb1a0872752:   add    %al,(%rax)
  0x00007fb1a0872754:   or     $0xe000000,%eax
  0x00007fb1a0872759:   add    %al,(%rax)
  0x00007fb1a087275b:   add    %cl,(%rdi)
  0x00007fb1a087275d:   add    %al,(%rax)
  0x00007fb1a087275f:   add    %al,(%rax)
  0x00007fb1a0872761:   add    %al,(%rax)
  0x00007fb1a0872763:   add    %al,(%rax)
  0x00007fb1a0872765:   add    %al,(%rax)
  0x00007fb1a0872767:   add    %al,(%rcx)
  0x00007fb1a0872769:   add    %al,(%rax)
  0x00007fb1a087276b:   add    %al,(%rax)
  0x00007fb1a087276d:   add    %al,(%rax)
  0x00007fb1a087276f:   add    %al,(%rdx)
  0x00007fb1a0872771:   add    %al,(%rax)
  0x00007fb1a0872773:   add    %al,(%rax)
  0x00007fb1a0872775:   add    %al,(%rax)
  0x00007fb1a0872777:   add    %al,(%rbx)
  0x00007fb1a0872779:   add    %al,(%rax)
  0x00007fb1a087277b:   add    %al,(%rax)
  0x00007fb1a087277d:   add    %al,(%rax)
  0x00007fb1a087277f:   add    %al,(%rax,%rax,1)
  0x00007fb1a0872782:   add    %al,(%rax)
  0x00007fb1a0872784:   add    %al,(%rax)
  0x00007fb1a0872786:   add    %al,(%rax)
  0x00007fb1a0872788:   add    $0x0,%eax
  0x00007fb1a087278d:   add    %al,(%rax)
  0x00007fb1a087278f:   add    %al,(%rsi)
  0x00007fb1a0872791:   add    %al,(%rax)
  0x00007fb1a0872793:   add    %al,(%rax)
  0x00007fb1a0872795:   add    %al,(%rax)
  0x00007fb1a0872797:   add    %al,(%rdi)
  0x00007fb1a0872799:   add    %al,(%rax)
  0x00007fb1a087279b:   add    %al,(%rax)
  0x00007fb1a087279d:   add    %al,(%rax)
  0x00007fb1a087279f:   add    %al,(%rax)
  0x00007fb1a08727a1:   add    %al,(%rax)
  0x00007fb1a08727a3:   add    %al,(%rax)
  0x00007fb1a08727a5:   add    %al,0x3f(%rax)
  0x00007fb1a08727ab:   add    %al,(%rax)
  0x00007fb1a08727ae:   rex
  0x00007fb1a08727af:   add    %al,(%rax)
  0x00007fb1a08727b2:   addb   $0x0,0x0(%rax)
  0x00007fb1a08727b6:   movabs 0xe0000040c0000040,%al
  0x00007fb1a08727bf:   add    %al,(%rax)
  0x00007fb1a08727c2:   add    %al,0x0(%rcx)
  0x00007fb1a08727c5:   add    %dl,(%rax)
  0x00007fb1a08727c7:   add    %al,(%r8)
  0x00007fb1a08727ca:   and    %al,0x0(%rcx)
  0x00007fb1a08727cd:   add    %dh,(%rax)
  0x00007fb1a08727cf:   add    %al,(%r8)
  0x00007fb1a08727d2:   rex
  0x00007fb1a08727d3:   add    %al,(%r8)
  0x00007fb1a08727d6:   push   %rax
  0x00007fb1a08727d7:   add    %al,(%r8)
  0x00007fb1a08727da:   (bad)  
  0x00007fb1a08727db:   add    %al,(%r8)
  0x00007fb1a08727de:   jo     Stub::<unknown> 0x00007fb1a0872821
  0x00007fb1a08727e0:   add    %al,(%rax)
  0x00007fb1a08727e2:   add    %al,(%rax)
  0x00007fb1a08727e4:   add    %al,(%rax)
  0x00007fb1a08727e6:   add    %al,(%rax)
  0x00007fb1a08727e8:   add    %al,(%rax)
  0x00007fb1a08727ea:   add    %al,(%rax)
  0x00007fb1a08727ec:   add    %al,(%rax)
  0x00007fb1a08727ee:   lock (bad) 
  0x00007fb1a08727f0:   add    %al,(%rax)
  0x00007fb1a08727f2:   add    %al,(%rax)
  0x00007fb1a08727f4:   add    %al,(%rax)
  0x00007fb1a08727f6:   add    %al,0x0(%rax)
  0x00007fb1a08727f9:   add    %al,(%rax)
  0x00007fb1a08727fb:   add    %al,(%rax)
  0x00007fb1a08727fd:   add    %cl,(%rax)
  0x00007fb1a08727ff:   add    %al,(%rax)
  0x00007fb1a0872802:   add    %al,(%rax)
  0x00007fb1a0872804:   add    %al,(%rax)
  0x00007fb1a0872806:   adc    %al,0x0(%rax)
  0x00007fb1a0872809:   add    %al,(%rax)
  0x00007fb1a087280b:   add    %al,(%rax)
  0x00007fb1a087280d:   add    %dl,(%rax,%rax,2)
  0x00007fb1a0872810:   add    %al,(%rax)
  0x00007fb1a0872812:   add    %al,(%rax)
  0x00007fb1a0872814:   add    %al,(%rax)
  0x00007fb1a0872816:   sbb    %al,0x0(%rax)
  0x00007fb1a0872819:   add    %al,(%rax)
  0x00007fb1a087281b:   add    %al,(%rax)
  0x00007fb1a087281d:   add    %bl,(%rax,%rax,2)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::count_leading_zeros_lut [0x00007fb1a0872880, 0x00007fb1a08728c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872880:   add    $0x3,%al
  0x00007fb1a0872882:   add    (%rdx),%al
  0x00007fb1a0872884:   add    %eax,(%rcx)
  0x00007fb1a0872886:   add    %eax,(%rcx)
  0x00007fb1a0872888:   add    %al,(%rax)
  0x00007fb1a087288a:   add    %al,(%rax)
  0x00007fb1a087288c:   add    %al,(%rax)
  0x00007fb1a087288e:   add    %al,(%rax)
  0x00007fb1a0872890:   add    $0x3,%al
  0x00007fb1a0872892:   add    (%rdx),%al
  0x00007fb1a0872894:   add    %eax,(%rcx)
  0x00007fb1a0872896:   add    %eax,(%rcx)
  0x00007fb1a0872898:   add    %al,(%rax)
  0x00007fb1a087289a:   add    %al,(%rax)
  0x00007fb1a087289c:   add    %al,(%rax)
  0x00007fb1a087289e:   add    %al,(%rax)
  0x00007fb1a08728a0:   add    $0x3,%al
  0x00007fb1a08728a2:   add    (%rdx),%al
  0x00007fb1a08728a4:   add    %eax,(%rcx)
  0x00007fb1a08728a6:   add    %eax,(%rcx)
  0x00007fb1a08728a8:   add    %al,(%rax)
  0x00007fb1a08728aa:   add    %al,(%rax)
  0x00007fb1a08728ac:   add    %al,(%rax)
  0x00007fb1a08728ae:   add    %al,(%rax)
  0x00007fb1a08728b0:   add    $0x3,%al
  0x00007fb1a08728b2:   add    (%rdx),%al
  0x00007fb1a08728b4:   add    %eax,(%rcx)
  0x00007fb1a08728b6:   add    %eax,(%rcx)
  0x00007fb1a08728b8:   add    %al,(%rax)
  0x00007fb1a08728ba:   add    %al,(%rax)
  0x00007fb1a08728bc:   add    %al,(%rax)
  0x00007fb1a08728be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::reverse_bit_lut [0x00007fb1a08728c0, 0x00007fb1a0872900] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08728c0:   add    %cl,(%rax)
  0x00007fb1a08728c2:   add    $0xc,%al
  0x00007fb1a08728c4:   add    (%rdx),%cl
  0x00007fb1a08728c6:   (bad)  
  0x00007fb1a08728c7:   (bad)  
  0x00007fb1a08728c8:   add    %ecx,(%rcx)
  0x00007fb1a08728ca:   add    $0x70b030d,%eax
  0x00007fb1a08728cf:   str    (%rax)
  0x00007fb1a08728d2:   add    $0xc,%al
  0x00007fb1a08728d4:   add    (%rdx),%cl
  0x00007fb1a08728d6:   (bad)  
  0x00007fb1a08728d7:   (bad)  
  0x00007fb1a08728d8:   add    %ecx,(%rcx)
  0x00007fb1a08728da:   add    $0x70b030d,%eax
  0x00007fb1a08728df:   str    (%rax)
  0x00007fb1a08728e2:   add    $0xc,%al
  0x00007fb1a08728e4:   add    (%rdx),%cl
  0x00007fb1a08728e6:   (bad)  
  0x00007fb1a08728e7:   (bad)  
  0x00007fb1a08728e8:   add    %ecx,(%rcx)
  0x00007fb1a08728ea:   add    $0x70b030d,%eax
  0x00007fb1a08728ef:   str    (%rax)
  0x00007fb1a08728f2:   add    $0xc,%al
  0x00007fb1a08728f4:   add    (%rdx),%cl
  0x00007fb1a08728f6:   (bad)  
  0x00007fb1a08728f7:   (bad)  
  0x00007fb1a08728f8:   add    %ecx,(%rcx)
  0x00007fb1a08728fa:   add    $0x70b030d,%eax
  0x00007fb1a08728ff:   .byte 0xf
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_long [0x00007fb1a0872900, 0x00007fb1a0872940] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872900:   (bad)  
  0x00007fb1a0872901:   (bad)  
  0x00007fb1a0872902:   add    $0x1020304,%eax
  0x00007fb1a0872907:   add    %cl,(%rdi)
  0x00007fb1a0872909:   (bad)  
  0x00007fb1a087290a:   or     $0x90a0b0c,%eax
  0x00007fb1a087290f:   or     %al,(%rdi)
  0x00007fb1a0872911:   (bad)  
  0x00007fb1a0872912:   add    $0x1020304,%eax
  0x00007fb1a0872917:   add    %cl,(%rdi)
  0x00007fb1a0872919:   (bad)  
  0x00007fb1a087291a:   or     $0x90a0b0c,%eax
  0x00007fb1a087291f:   or     %al,(%rdi)
  0x00007fb1a0872921:   (bad)  
  0x00007fb1a0872922:   add    $0x1020304,%eax
  0x00007fb1a0872927:   add    %cl,(%rdi)
  0x00007fb1a0872929:   (bad)  
  0x00007fb1a087292a:   or     $0x90a0b0c,%eax
  0x00007fb1a087292f:   or     %al,(%rdi)
  0x00007fb1a0872931:   (bad)  
  0x00007fb1a0872932:   add    $0x1020304,%eax
  0x00007fb1a0872937:   add    %cl,(%rdi)
  0x00007fb1a0872939:   (bad)  
  0x00007fb1a087293a:   or     $0x90a0b0c,%eax
  0x00007fb1a087293f:   .byte 0x8
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_int [0x00007fb1a0872940, 0x00007fb1a0872980] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872940:   add    (%rdx),%eax
  0x00007fb1a0872942:   add    %eax,(%rax)
  0x00007fb1a0872944:   (bad)  
  0x00007fb1a0872945:   (bad)  
  0x00007fb1a0872946:   add    $0x90a0b04,%eax
  0x00007fb1a087294b:   or     %cl,(%rdi)
  0x00007fb1a087294d:   (bad)  
  0x00007fb1a087294e:   or     $0x102030c,%eax
  0x00007fb1a0872953:   add    %al,(%rdi)
  0x00007fb1a0872955:   (bad)  
  0x00007fb1a0872956:   add    $0x90a0b04,%eax
  0x00007fb1a087295b:   or     %cl,(%rdi)
  0x00007fb1a087295d:   (bad)  
  0x00007fb1a087295e:   or     $0x102030c,%eax
  0x00007fb1a0872963:   add    %al,(%rdi)
  0x00007fb1a0872965:   (bad)  
  0x00007fb1a0872966:   add    $0x90a0b04,%eax
  0x00007fb1a087296b:   or     %cl,(%rdi)
  0x00007fb1a087296d:   (bad)  
  0x00007fb1a087296e:   or     $0x102030c,%eax
  0x00007fb1a0872973:   add    %al,(%rdi)
  0x00007fb1a0872975:   (bad)  
  0x00007fb1a0872976:   add    $0x90a0b04,%eax
  0x00007fb1a087297b:   or     %cl,(%rdi)
  0x00007fb1a087297d:   (bad)  
  0x00007fb1a087297e:   .byte 0xd
  0x00007fb1a087297f:   .byte 0xc
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_short [0x00007fb1a0872980, 0x00007fb1a08729c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872980:   add    %eax,(%rax)
  0x00007fb1a0872982:   add    (%rdx),%eax
  0x00007fb1a0872984:   add    $0x9060704,%eax
  0x00007fb1a0872989:   or     %cl,(%rbx)
  0x00007fb1a087298b:   or     0x10e0f0c(%rip),%cl        # 0x00007fb1a195389d
  0x00007fb1a0872991:   add    %al,(%rbx)
  0x00007fb1a0872993:   add    0x9060704(%rip),%al        # 0x00007fb1a98d309d
  0x00007fb1a0872999:   or     %cl,(%rbx)
  0x00007fb1a087299b:   or     0x10e0f0c(%rip),%cl        # 0x00007fb1a19538ad
  0x00007fb1a08729a1:   add    %al,(%rbx)
  0x00007fb1a08729a3:   add    0x9060704(%rip),%al        # 0x00007fb1a98d30ad
  0x00007fb1a08729a9:   or     %cl,(%rbx)
  0x00007fb1a08729ab:   or     0x10e0f0c(%rip),%cl        # 0x00007fb1a19538bd
  0x00007fb1a08729b1:   add    %al,(%rbx)
  0x00007fb1a08729b3:   add    0x9060704(%rip),%al        # 0x00007fb1a98d30bd
  0x00007fb1a08729b9:   or     %cl,(%rbx)
  0x00007fb1a08729bb:   .byte 0xa
  0x00007fb1a08729bc:   .byte 0xd
  0x00007fb1a08729bd:   or     $0xf,%al
  0x00007fb1a08729bf:   (bad)  
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::popcount_lut [0x00007fb1a08729c0, 0x00007fb1a0872a00] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08729c0:   add    %al,(%rcx)
  0x00007fb1a08729c2:   add    %eax,(%rdx)
  0x00007fb1a08729c4:   add    %eax,(%rdx)
  0x00007fb1a08729c6:   add    (%rbx),%al
  0x00007fb1a08729c8:   add    %eax,(%rdx)
  0x00007fb1a08729ca:   add    (%rbx),%al
  0x00007fb1a08729cc:   add    (%rbx),%al
  0x00007fb1a08729ce:   add    (%rax,%rax,1),%eax
  0x00007fb1a08729d1:   add    %eax,(%rcx)
  0x00007fb1a08729d3:   add    (%rcx),%al
  0x00007fb1a08729d5:   add    (%rdx),%al
  0x00007fb1a08729d7:   add    (%rcx),%eax
  0x00007fb1a08729d9:   add    (%rdx),%al
  0x00007fb1a08729db:   add    (%rdx),%eax
  0x00007fb1a08729dd:   add    (%rbx),%eax
  0x00007fb1a08729df:   add    $0x0,%al
  0x00007fb1a08729e1:   add    %eax,(%rcx)
  0x00007fb1a08729e3:   add    (%rcx),%al
  0x00007fb1a08729e5:   add    (%rdx),%al
  0x00007fb1a08729e7:   add    (%rcx),%eax
  0x00007fb1a08729e9:   add    (%rdx),%al
  0x00007fb1a08729eb:   add    (%rdx),%eax
  0x00007fb1a08729ed:   add    (%rbx),%eax
  0x00007fb1a08729ef:   add    $0x0,%al
  0x00007fb1a08729f1:   add    %eax,(%rcx)
  0x00007fb1a08729f3:   add    (%rcx),%al
  0x00007fb1a08729f5:   add    (%rdx),%al
  0x00007fb1a08729f7:   add    (%rcx),%eax
  0x00007fb1a08729f9:   add    (%rdx),%al
  0x00007fb1a08729fb:   add    (%rdx),%eax
  0x00007fb1a08729fd:   add    (%rbx),%eax
  0x00007fb1a08729ff:   .byte 0x4
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::_data_cache_writeback [0x00007fb1a0872a00, 0x00007fb1a0872a0a] (10 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872a00:   push   %rbp
  0x00007fb1a0872a01:   mov    %rsp,%rbp
  0x00007fb1a0872a04:   clwb   (%rdi)
  0x00007fb1a0872a08:   leaveq 
  0x00007fb1a0872a09:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::_data_cache_writeback_sync [0x00007fb1a0872a20, 0x00007fb1a0872a32] (18 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872a20:   push   %rbp
  0x00007fb1a0872a21:   mov    %rsp,%rbp
  0x00007fb1a0872a24:   cmp    $0x0,%edi
  0x00007fb1a0872a27:   jne    Stub::_data_cache_writeback_sync+16 0x00007fb1a0872a30
  0x00007fb1a0872a2d:   sfence 
  0x00007fb1a0872a30:   leaveq 
  0x00007fb1a0872a31:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_disjoint_arraycopy [0x00007fb1a0872a40, 0x00007fb1a0872af3] (179 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872a40:   push   %rbp
  0x00007fb1a0872a41:   mov    %rsp,%rbp
  0x00007fb1a0872a44:   mov    %rdx,%rcx
  0x00007fb1a0872a47:   shr    $0x3,%rdx
  0x00007fb1a0872a4b:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007fb1a0872a50:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007fb1a0872a55:   neg    %rdx
  0x00007fb1a0872a58:   jmpq   Stub::jbyte_disjoint_arraycopy+136 0x00007fb1a0872ac8
  0x00007fb1a0872a5d:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007fb1a0872a62:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007fb1a0872a67:   inc    %rdx
  0x00007fb1a0872a6a:   jne    Stub::jbyte_disjoint_arraycopy+29 0x00007fb1a0872a5d
  0x00007fb1a0872a6c:   test   $0x4,%cl
  0x00007fb1a0872a6f:   je     Stub::jbyte_disjoint_arraycopy+63 0x00007fb1a0872a7f
  0x00007fb1a0872a71:   mov    0x8(%rdi),%eax
  0x00007fb1a0872a74:   mov    %eax,0x8(%rsi)
  0x00007fb1a0872a77:   add    $0x4,%rdi
  0x00007fb1a0872a7b:   add    $0x4,%rsi
  0x00007fb1a0872a7f:   test   $0x2,%cl
  0x00007fb1a0872a82:   je     Stub::jbyte_disjoint_arraycopy+84 0x00007fb1a0872a94
  0x00007fb1a0872a84:   mov    0x8(%rdi),%ax
  0x00007fb1a0872a88:   mov    %ax,0x8(%rsi)
  0x00007fb1a0872a8c:   add    $0x2,%rdi
  0x00007fb1a0872a90:   add    $0x2,%rsi
  0x00007fb1a0872a94:   test   $0x1,%cl
  0x00007fb1a0872a97:   je     Stub::jbyte_disjoint_arraycopy+95 0x00007fb1a0872a9f
  0x00007fb1a0872a99:   mov    0x8(%rdi),%al
  0x00007fb1a0872a9c:   mov    %al,0x8(%rsi)
  0x00007fb1a0872a9f:   xor    %rax,%rax
  0x00007fb1a0872aa2:   vzeroupper 
  0x00007fb1a0872aa5:   leaveq 
  0x00007fb1a0872aa6:   retq   
  0x00007fb1a0872aa7:   nopw   0x0(%rax,%rax,1)
  0x00007fb1a0872ab0:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007fb1a0872ab6:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007fb1a0872abc:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007fb1a0872ac2:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007fb1a0872ac8:   add    $0x8,%rdx
  0x00007fb1a0872acc:   jle    Stub::jbyte_disjoint_arraycopy+112 0x00007fb1a0872ab0
  0x00007fb1a0872ace:   sub    $0x4,%rdx
  0x00007fb1a0872ad2:   jg     Stub::jbyte_disjoint_arraycopy+164 0x00007fb1a0872ae4
  0x00007fb1a0872ad4:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007fb1a0872ada:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007fb1a0872ae0:   add    $0x4,%rdx
  0x00007fb1a0872ae4:   sub    $0x4,%rdx
  0x00007fb1a0872ae8:   jl     Stub::jbyte_disjoint_arraycopy+29 0x00007fb1a0872a5d
  0x00007fb1a0872aee:   jmpq   Stub::jbyte_disjoint_arraycopy+44 0x00007fb1a0872a6c
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_arraycopy [0x00007fb1a0872b00, 0x00007fb1a0872bbe] (190 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872b00:   push   %rbp
  0x00007fb1a0872b01:   mov    %rsp,%rbp
  0x00007fb1a0872b04:   cmp    %rdi,%rsi
  0x00007fb1a0872b07:   lea    (%rdi,%rdx,1),%rax
  0x00007fb1a0872b0b:   jbe    Stub::jbyte_disjoint_arraycopy+4 0x00007fb1a0872a44
  0x00007fb1a0872b11:   cmp    %rax,%rsi
  0x00007fb1a0872b14:   jae    Stub::jbyte_disjoint_arraycopy+4 0x00007fb1a0872a44
  0x00007fb1a0872b1a:   mov    %rdx,%rcx
  0x00007fb1a0872b1d:   shr    $0x3,%rdx
  0x00007fb1a0872b21:   test   $0x1,%cl
  0x00007fb1a0872b24:   je     Stub::jbyte_arraycopy+53 0x00007fb1a0872b35
  0x00007fb1a0872b2a:   mov    -0x1(%rdi,%rcx,1),%al
  0x00007fb1a0872b2e:   mov    %al,-0x1(%rsi,%rcx,1)
  0x00007fb1a0872b32:   dec    %rcx
  0x00007fb1a0872b35:   test   $0x2,%cl
  0x00007fb1a0872b38:   je     Stub::jbyte_arraycopy+72 0x00007fb1a0872b48
  0x00007fb1a0872b3e:   mov    -0x2(%rdi,%rcx,1),%ax
  0x00007fb1a0872b43:   mov    %ax,-0x2(%rsi,%rcx,1)
  0x00007fb1a0872b48:   test   $0x4,%cl
  0x00007fb1a0872b4b:   je     Stub::jbyte_arraycopy+150 0x00007fb1a0872b96
  0x00007fb1a0872b51:   mov    (%rdi,%rdx,8),%eax
  0x00007fb1a0872b54:   mov    %eax,(%rsi,%rdx,8)
  0x00007fb1a0872b57:   jmpq   Stub::jbyte_arraycopy+150 0x00007fb1a0872b96
  0x00007fb1a0872b5c:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007fb1a0872b61:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007fb1a0872b66:   dec    %rdx
  0x00007fb1a0872b69:   jne    Stub::jbyte_arraycopy+92 0x00007fb1a0872b5c
  0x00007fb1a0872b6b:   xor    %rax,%rax
  0x00007fb1a0872b6e:   vzeroupper 
  0x00007fb1a0872b71:   leaveq 
  0x00007fb1a0872b72:   retq   
  0x00007fb1a0872b73:   nopw   0x0(%rax,%rax,1)
  0x00007fb1a0872b7c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0872b80:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007fb1a0872b86:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007fb1a0872b8c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007fb1a0872b91:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007fb1a0872b96:   sub    $0x8,%rdx
  0x00007fb1a0872b9a:   jge    Stub::jbyte_arraycopy+128 0x00007fb1a0872b80
  0x00007fb1a0872b9c:   add    $0x4,%rdx
  0x00007fb1a0872ba0:   jl     Stub::jbyte_arraycopy+176 0x00007fb1a0872bb0
  0x00007fb1a0872ba2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007fb1a0872ba7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007fb1a0872bac:   sub    $0x4,%rdx
  0x00007fb1a0872bb0:   add    $0x4,%rdx
  0x00007fb1a0872bb4:   jg     Stub::jbyte_arraycopy+92 0x00007fb1a0872b5c
  0x00007fb1a0872bb6:   xor    %rax,%rax
  0x00007fb1a0872bb9:   vzeroupper 
  0x00007fb1a0872bbc:   leaveq 
  0x00007fb1a0872bbd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_disjoint_arraycopy [0x00007fb1a0872bc0, 0x00007fb1a0872c5c] (156 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872bc0:   push   %rbp
  0x00007fb1a0872bc1:   mov    %rsp,%rbp
  0x00007fb1a0872bc4:   mov    %rdx,%rcx
  0x00007fb1a0872bc7:   shr    $0x2,%rdx
  0x00007fb1a0872bcb:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007fb1a0872bd0:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007fb1a0872bd5:   neg    %rdx
  0x00007fb1a0872bd8:   jmpq   Stub::jshort_disjoint_arraycopy+120 0x00007fb1a0872c38
  0x00007fb1a0872bdd:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007fb1a0872be2:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007fb1a0872be7:   inc    %rdx
  0x00007fb1a0872bea:   jne    Stub::jshort_disjoint_arraycopy+29 0x00007fb1a0872bdd
  0x00007fb1a0872bec:   test   $0x2,%cl
  0x00007fb1a0872bef:   je     Stub::jshort_disjoint_arraycopy+63 0x00007fb1a0872bff
  0x00007fb1a0872bf1:   mov    0x8(%rdi),%eax
  0x00007fb1a0872bf4:   mov    %eax,0x8(%rsi)
  0x00007fb1a0872bf7:   add    $0x4,%rdi
  0x00007fb1a0872bfb:   add    $0x4,%rsi
  0x00007fb1a0872bff:   test   $0x1,%cl
  0x00007fb1a0872c02:   je     Stub::jshort_disjoint_arraycopy+76 0x00007fb1a0872c0c
  0x00007fb1a0872c04:   mov    0x8(%rdi),%ax
  0x00007fb1a0872c08:   mov    %ax,0x8(%rsi)
  0x00007fb1a0872c0c:   xor    %rax,%rax
  0x00007fb1a0872c0f:   vzeroupper 
  0x00007fb1a0872c12:   leaveq 
  0x00007fb1a0872c13:   retq   
  0x00007fb1a0872c14:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a0872c1c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0872c20:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007fb1a0872c26:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007fb1a0872c2c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007fb1a0872c32:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007fb1a0872c38:   add    $0x8,%rdx
  0x00007fb1a0872c3c:   jle    Stub::jshort_disjoint_arraycopy+96 0x00007fb1a0872c20
  0x00007fb1a0872c3e:   sub    $0x4,%rdx
  0x00007fb1a0872c42:   jg     Stub::jshort_disjoint_arraycopy+148 0x00007fb1a0872c54
  0x00007fb1a0872c44:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007fb1a0872c4a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007fb1a0872c50:   add    $0x4,%rdx
  0x00007fb1a0872c54:   sub    $0x4,%rdx
  0x00007fb1a0872c58:   jl     Stub::jshort_disjoint_arraycopy+29 0x00007fb1a0872bdd
  0x00007fb1a0872c5a:   jmp    Stub::jshort_disjoint_arraycopy+44 0x00007fb1a0872bec
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_arraycopy [0x00007fb1a0872c60, 0x00007fb1a0872cfe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872c60:   push   %rbp
  0x00007fb1a0872c61:   mov    %rsp,%rbp
  0x00007fb1a0872c64:   cmp    %rdi,%rsi
  0x00007fb1a0872c67:   lea    (%rdi,%rdx,2),%rax
  0x00007fb1a0872c6b:   jbe    Stub::jshort_disjoint_arraycopy+4 0x00007fb1a0872bc4
  0x00007fb1a0872c71:   cmp    %rax,%rsi
  0x00007fb1a0872c74:   jae    Stub::jshort_disjoint_arraycopy+4 0x00007fb1a0872bc4
  0x00007fb1a0872c7a:   mov    %rdx,%rcx
  0x00007fb1a0872c7d:   shr    $0x2,%rdx
  0x00007fb1a0872c81:   test   $0x1,%cl
  0x00007fb1a0872c84:   je     Stub::jshort_arraycopy+48 0x00007fb1a0872c90
  0x00007fb1a0872c86:   mov    -0x2(%rdi,%rcx,2),%ax
  0x00007fb1a0872c8b:   mov    %ax,-0x2(%rsi,%rcx,2)
  0x00007fb1a0872c90:   test   $0x2,%cl
  0x00007fb1a0872c93:   je     Stub::jshort_arraycopy+118 0x00007fb1a0872cd6
  0x00007fb1a0872c99:   mov    (%rdi,%rdx,8),%eax
  0x00007fb1a0872c9c:   mov    %eax,(%rsi,%rdx,8)
  0x00007fb1a0872c9f:   jmpq   Stub::jshort_arraycopy+118 0x00007fb1a0872cd6
  0x00007fb1a0872ca4:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007fb1a0872ca9:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007fb1a0872cae:   dec    %rdx
  0x00007fb1a0872cb1:   jne    Stub::jshort_arraycopy+68 0x00007fb1a0872ca4
  0x00007fb1a0872cb3:   xor    %rax,%rax
  0x00007fb1a0872cb6:   vzeroupper 
  0x00007fb1a0872cb9:   leaveq 
  0x00007fb1a0872cba:   retq   
  0x00007fb1a0872cbb:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a0872cc0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007fb1a0872cc6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007fb1a0872ccc:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007fb1a0872cd1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007fb1a0872cd6:   sub    $0x8,%rdx
  0x00007fb1a0872cda:   jge    Stub::jshort_arraycopy+96 0x00007fb1a0872cc0
  0x00007fb1a0872cdc:   add    $0x4,%rdx
  0x00007fb1a0872ce0:   jl     Stub::jshort_arraycopy+144 0x00007fb1a0872cf0
  0x00007fb1a0872ce2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007fb1a0872ce7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007fb1a0872cec:   sub    $0x4,%rdx
  0x00007fb1a0872cf0:   add    $0x4,%rdx
  0x00007fb1a0872cf4:   jg     Stub::jshort_arraycopy+68 0x00007fb1a0872ca4
  0x00007fb1a0872cf6:   xor    %rax,%rax
  0x00007fb1a0872cf9:   vzeroupper 
  0x00007fb1a0872cfc:   leaveq 
  0x00007fb1a0872cfd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_disjoint_arraycopy [0x00007fb1a0872d00, 0x00007fb1a0872d7c] (124 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872d00:   push   %rbp
  0x00007fb1a0872d01:   mov    %rsp,%rbp
  0x00007fb1a0872d04:   mov    %rdx,%rcx
  0x00007fb1a0872d07:   shr    %rdx
  0x00007fb1a0872d0a:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007fb1a0872d0f:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007fb1a0872d14:   neg    %rdx
  0x00007fb1a0872d17:   jmpq   Stub::jint_disjoint_arraycopy+88 0x00007fb1a0872d58
  0x00007fb1a0872d1c:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007fb1a0872d21:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007fb1a0872d26:   inc    %rdx
  0x00007fb1a0872d29:   jne    Stub::jint_disjoint_arraycopy+28 0x00007fb1a0872d1c
  0x00007fb1a0872d2b:   test   $0x1,%cl
  0x00007fb1a0872d2e:   je     Stub::jint_disjoint_arraycopy+54 0x00007fb1a0872d36
  0x00007fb1a0872d30:   mov    0x8(%rdi),%eax
  0x00007fb1a0872d33:   mov    %eax,0x8(%rsi)
  0x00007fb1a0872d36:   vzeroupper 
  0x00007fb1a0872d39:   xor    %rax,%rax
  0x00007fb1a0872d3c:   leaveq 
  0x00007fb1a0872d3d:   retq   
  0x00007fb1a0872d3e:   xchg   %ax,%ax
  0x00007fb1a0872d40:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007fb1a0872d46:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007fb1a0872d4c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007fb1a0872d52:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007fb1a0872d58:   add    $0x8,%rdx
  0x00007fb1a0872d5c:   jle    Stub::jint_disjoint_arraycopy+64 0x00007fb1a0872d40
  0x00007fb1a0872d5e:   sub    $0x4,%rdx
  0x00007fb1a0872d62:   jg     Stub::jint_disjoint_arraycopy+116 0x00007fb1a0872d74
  0x00007fb1a0872d64:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007fb1a0872d6a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007fb1a0872d70:   add    $0x4,%rdx
  0x00007fb1a0872d74:   sub    $0x4,%rdx
  0x00007fb1a0872d78:   jl     Stub::jint_disjoint_arraycopy+28 0x00007fb1a0872d1c
  0x00007fb1a0872d7a:   jmp    Stub::jint_disjoint_arraycopy+43 0x00007fb1a0872d2b
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_arraycopy [0x00007fb1a0872d80, 0x00007fb1a0872e0e] (142 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872d80:   push   %rbp
  0x00007fb1a0872d81:   mov    %rsp,%rbp
  0x00007fb1a0872d84:   cmp    %rdi,%rsi
  0x00007fb1a0872d87:   lea    (%rdi,%rdx,4),%rax
  0x00007fb1a0872d8b:   jbe    Stub::jint_disjoint_arraycopy+4 0x00007fb1a0872d04
  0x00007fb1a0872d91:   cmp    %rax,%rsi
  0x00007fb1a0872d94:   jae    Stub::jint_disjoint_arraycopy+4 0x00007fb1a0872d04
  0x00007fb1a0872d9a:   mov    %rdx,%rcx
  0x00007fb1a0872d9d:   shr    %rdx
  0x00007fb1a0872da0:   test   $0x1,%cl
  0x00007fb1a0872da3:   je     Stub::jint_arraycopy+102 0x00007fb1a0872de6
  0x00007fb1a0872da9:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007fb1a0872dad:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007fb1a0872db1:   jmpq   Stub::jint_arraycopy+102 0x00007fb1a0872de6
  0x00007fb1a0872db6:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007fb1a0872dbb:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007fb1a0872dc0:   dec    %rdx
  0x00007fb1a0872dc3:   jne    Stub::jint_arraycopy+54 0x00007fb1a0872db6
  0x00007fb1a0872dc5:   xor    %rax,%rax
  0x00007fb1a0872dc8:   vzeroupper 
  0x00007fb1a0872dcb:   leaveq 
  0x00007fb1a0872dcc:   retq   
  0x00007fb1a0872dcd:   data16 xchg %ax,%ax
  0x00007fb1a0872dd0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007fb1a0872dd6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007fb1a0872ddc:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007fb1a0872de1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007fb1a0872de6:   sub    $0x8,%rdx
  0x00007fb1a0872dea:   jge    Stub::jint_arraycopy+80 0x00007fb1a0872dd0
  0x00007fb1a0872dec:   add    $0x4,%rdx
  0x00007fb1a0872df0:   jl     Stub::jint_arraycopy+128 0x00007fb1a0872e00
  0x00007fb1a0872df2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007fb1a0872df7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007fb1a0872dfc:   sub    $0x4,%rdx
  0x00007fb1a0872e00:   add    $0x4,%rdx
  0x00007fb1a0872e04:   jg     Stub::jint_arraycopy+54 0x00007fb1a0872db6
  0x00007fb1a0872e06:   xor    %rax,%rax
  0x00007fb1a0872e09:   vzeroupper 
  0x00007fb1a0872e0c:   leaveq 
  0x00007fb1a0872e0d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jlong_disjoint_arraycopy [0x00007fb1a0872e20, 0x00007fb1a0872e92] (114 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872e20:   push   %rbp
  0x00007fb1a0872e21:   mov    %rsp,%rbp
  0x00007fb1a0872e24:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007fb1a0872e29:   lea    -0x8(%rsi,%rdx,8),%rcx
  0x00007fb1a0872e2e:   neg    %rdx
  0x00007fb1a0872e31:   jmpq   Stub::jlong_disjoint_arraycopy+72 0x00007fb1a0872e68
  0x00007fb1a0872e36:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007fb1a0872e3b:   mov    %rax,0x8(%rcx,%rdx,8)
  0x00007fb1a0872e40:   inc    %rdx
  0x00007fb1a0872e43:   jne    Stub::jlong_disjoint_arraycopy+22 0x00007fb1a0872e36
  0x00007fb1a0872e45:   xor    %rax,%rax
  0x00007fb1a0872e48:   vzeroupper 
  0x00007fb1a0872e4b:   leaveq 
  0x00007fb1a0872e4c:   retq   
  0x00007fb1a0872e4d:   data16 xchg %ax,%ax
  0x00007fb1a0872e50:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007fb1a0872e56:   vmovdqu %ymm0,-0x38(%rcx,%rdx,8)
  0x00007fb1a0872e5c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007fb1a0872e62:   vmovdqu %ymm1,-0x18(%rcx,%rdx,8)
  0x00007fb1a0872e68:   add    $0x8,%rdx
  0x00007fb1a0872e6c:   jle    Stub::jlong_disjoint_arraycopy+48 0x00007fb1a0872e50
  0x00007fb1a0872e6e:   sub    $0x4,%rdx
  0x00007fb1a0872e72:   jg     Stub::jlong_disjoint_arraycopy+100 0x00007fb1a0872e84
  0x00007fb1a0872e74:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007fb1a0872e7a:   vmovdqu %ymm0,-0x18(%rcx,%rdx,8)
  0x00007fb1a0872e80:   add    $0x4,%rdx
  0x00007fb1a0872e84:   sub    $0x4,%rdx
  0x00007fb1a0872e88:   jl     Stub::jlong_disjoint_arraycopy+22 0x00007fb1a0872e36
  0x00007fb1a0872e8a:   vzeroupper 
  0x00007fb1a0872e8d:   xor    %rax,%rax
  0x00007fb1a0872e90:   leaveq 
  0x00007fb1a0872e91:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jlong_arraycopy [0x00007fb1a0872ea0, 0x00007fb1a0872f1e] (126 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872ea0:   push   %rbp
  0x00007fb1a0872ea1:   mov    %rsp,%rbp
  0x00007fb1a0872ea4:   cmp    %rdi,%rsi
  0x00007fb1a0872ea7:   lea    (%rdi,%rdx,8),%rax
  0x00007fb1a0872eab:   jbe    Stub::jlong_disjoint_arraycopy+4 0x00007fb1a0872e24
  0x00007fb1a0872eb1:   cmp    %rax,%rsi
  0x00007fb1a0872eb4:   jae    Stub::jlong_disjoint_arraycopy+4 0x00007fb1a0872e24
  0x00007fb1a0872eba:   jmpq   Stub::jlong_arraycopy+86 0x00007fb1a0872ef6
  0x00007fb1a0872ebf:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007fb1a0872ec4:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007fb1a0872ec9:   dec    %rdx
  0x00007fb1a0872ecc:   jne    Stub::jlong_arraycopy+31 0x00007fb1a0872ebf
  0x00007fb1a0872ece:   xor    %rax,%rax
  0x00007fb1a0872ed1:   vzeroupper 
  0x00007fb1a0872ed4:   leaveq 
  0x00007fb1a0872ed5:   retq   
  0x00007fb1a0872ed6:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a0872ee0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007fb1a0872ee6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007fb1a0872eec:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007fb1a0872ef1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007fb1a0872ef6:   sub    $0x8,%rdx
  0x00007fb1a0872efa:   jge    Stub::jlong_arraycopy+64 0x00007fb1a0872ee0
  0x00007fb1a0872efc:   add    $0x4,%rdx
  0x00007fb1a0872f00:   jl     Stub::jlong_arraycopy+112 0x00007fb1a0872f10
  0x00007fb1a0872f02:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007fb1a0872f07:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007fb1a0872f0c:   sub    $0x4,%rdx
  0x00007fb1a0872f10:   add    $0x4,%rdx
  0x00007fb1a0872f14:   jg     Stub::jlong_arraycopy+31 0x00007fb1a0872ebf
  0x00007fb1a0872f16:   vzeroupper 
  0x00007fb1a0872f19:   xor    %rax,%rax
  0x00007fb1a0872f1c:   leaveq 
  0x00007fb1a0872f1d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_disjoint_arraycopy [0x00007fb1a0872f20, 0x00007fb1a08730c3] (419 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0872f20:   push   %rbp
  0x00007fb1a0872f21:   mov    %rsp,%rbp
  0x00007fb1a0872f24:   mov    %rsi,%r11
  0x00007fb1a0872f27:   cmpb   $0x0,0x40(%r15)
  0x00007fb1a0872f2c:   je     Stub::oop_disjoint_arraycopy+156 0x00007fb1a0872fbc
  0x00007fb1a0872f32:   sub    $0x50,%rsp
  0x00007fb1a0872f36:   mov    %rax,(%rsp)
  0x00007fb1a0872f3a:   mov    %rcx,0x8(%rsp)
  0x00007fb1a0872f3f:   mov    %rdx,0x10(%rsp)
  0x00007fb1a0872f44:   mov    %rsi,0x18(%rsp)
  0x00007fb1a0872f49:   mov    %rdi,0x20(%rsp)
  0x00007fb1a0872f4e:   mov    %r8,0x28(%rsp)
  0x00007fb1a0872f53:   mov    %r9,0x30(%rsp)
  0x00007fb1a0872f58:   mov    %r10,0x38(%rsp)
  0x00007fb1a0872f5d:   mov    %r11,0x40(%rsp)
  0x00007fb1a0872f62:   mov    %rsi,%rdi
  0x00007fb1a0872f65:   mov    %rdx,%rsi
  0x00007fb1a0872f68:   test   $0xf,%spl
  0x00007fb1a0872f6c:   je     Stub::oop_disjoint_arraycopy+100 0x00007fb1a0872f84
  0x00007fb1a0872f72:   sub    $0x8,%rsp
  0x00007fb1a0872f76:   callq  0x00007fb1a4292d00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007fb1a0872f7b:   add    $0x8,%rsp
  0x00007fb1a0872f7f:   jmpq   Stub::oop_disjoint_arraycopy+105 0x00007fb1a0872f89
  0x00007fb1a0872f84:   callq  0x00007fb1a4292d00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007fb1a0872f89:   mov    0x40(%rsp),%r11
  0x00007fb1a0872f8e:   mov    0x38(%rsp),%r10
  0x00007fb1a0872f93:   mov    0x30(%rsp),%r9
  0x00007fb1a0872f98:   mov    0x28(%rsp),%r8
  0x00007fb1a0872f9d:   mov    0x20(%rsp),%rdi
  0x00007fb1a0872fa2:   mov    0x18(%rsp),%rsi
  0x00007fb1a0872fa7:   mov    0x10(%rsp),%rdx
  0x00007fb1a0872fac:   mov    0x8(%rsp),%rcx
  0x00007fb1a0872fb1:   mov    (%rsp),%rax
  0x00007fb1a0872fb5:   add    $0x50,%rsp
  0x00007fb1a0872fb9:   vzeroupper 
  0x00007fb1a0872fbc:   mov    %rdx,%rcx
  0x00007fb1a0872fbf:   shr    %rdx
  0x00007fb1a0872fc2:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007fb1a0872fc7:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007fb1a0872fcc:   neg    %rdx
  0x00007fb1a0872fcf:   jmpq   Stub::oop_disjoint_arraycopy+376 0x00007fb1a0873098
  0x00007fb1a0872fd4:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007fb1a0872fd9:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007fb1a0872fde:   inc    %rdx
  0x00007fb1a0872fe1:   jne    Stub::oop_disjoint_arraycopy+180 0x00007fb1a0872fd4
  0x00007fb1a0872fe3:   test   $0x1,%cl
  0x00007fb1a0872fe6:   je     Stub::oop_disjoint_arraycopy+206 0x00007fb1a0872fee
  0x00007fb1a0872fe8:   mov    0x8(%rdi),%eax
  0x00007fb1a0872feb:   mov    %eax,0x8(%rsi)
  0x00007fb1a0872fee:   sub    $0x50,%rsp
  0x00007fb1a0872ff2:   mov    %rax,(%rsp)
  0x00007fb1a0872ff6:   mov    %rcx,0x8(%rsp)
  0x00007fb1a0872ffb:   mov    %rdx,0x10(%rsp)
  0x00007fb1a0873000:   mov    %rsi,0x18(%rsp)
  0x00007fb1a0873005:   mov    %rdi,0x20(%rsp)
  0x00007fb1a087300a:   mov    %r8,0x28(%rsp)
  0x00007fb1a087300f:   mov    %r9,0x30(%rsp)
  0x00007fb1a0873014:   mov    %r10,0x38(%rsp)
  0x00007fb1a0873019:   mov    %r11,0x40(%rsp)
  0x00007fb1a087301e:   mov    %r11,%rdi
  0x00007fb1a0873021:   mov    %rcx,%rsi
  0x00007fb1a0873024:   test   $0xf,%spl
  0x00007fb1a0873028:   je     Stub::oop_disjoint_arraycopy+288 0x00007fb1a0873040
  0x00007fb1a087302e:   sub    $0x8,%rsp
  0x00007fb1a0873032:   callq  0x00007fb1a4292d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fb1a0873037:   add    $0x8,%rsp
  0x00007fb1a087303b:   jmpq   Stub::oop_disjoint_arraycopy+293 0x00007fb1a0873045
  0x00007fb1a0873040:   callq  0x00007fb1a4292d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fb1a0873045:   mov    0x40(%rsp),%r11
  0x00007fb1a087304a:   mov    0x38(%rsp),%r10
  0x00007fb1a087304f:   mov    0x30(%rsp),%r9
  0x00007fb1a0873054:   mov    0x28(%rsp),%r8
  0x00007fb1a0873059:   mov    0x20(%rsp),%rdi
  0x00007fb1a087305e:   mov    0x18(%rsp),%rsi
  0x00007fb1a0873063:   mov    0x10(%rsp),%rdx
  0x00007fb1a0873068:   mov    0x8(%rsp),%rcx
  0x00007fb1a087306d:   mov    (%rsp),%rax
  0x00007fb1a0873071:   add    $0x50,%rsp
  0x00007fb1a0873075:   vzeroupper 
  0x00007fb1a0873078:   vzeroupper 
  0x00007fb1a087307b:   xor    %rax,%rax
  0x00007fb1a087307e:   leaveq 
  0x00007fb1a087307f:   retq   
  0x00007fb1a0873080:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007fb1a0873086:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007fb1a087308c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007fb1a0873092:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007fb1a0873098:   add    $0x8,%rdx
  0x00007fb1a087309c:   jle    Stub::oop_disjoint_arraycopy+352 0x00007fb1a0873080
  0x00007fb1a087309e:   sub    $0x4,%rdx
  0x00007fb1a08730a2:   jg     Stub::oop_disjoint_arraycopy+404 0x00007fb1a08730b4
  0x00007fb1a08730a4:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007fb1a08730aa:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007fb1a08730b0:   add    $0x4,%rdx
  0x00007fb1a08730b4:   sub    $0x4,%rdx
  0x00007fb1a08730b8:   jl     Stub::oop_disjoint_arraycopy+180 0x00007fb1a0872fd4
  0x00007fb1a08730be:   jmpq   Stub::oop_disjoint_arraycopy+195 0x00007fb1a0872fe3
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_arraycopy [0x00007fb1a08730e0, 0x00007fb1a0873298] (440 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08730e0:   push   %rbp
  0x00007fb1a08730e1:   mov    %rsp,%rbp
  0x00007fb1a08730e4:   cmp    %rdi,%rsi
  0x00007fb1a08730e7:   lea    (%rdi,%rdx,4),%rax
  0x00007fb1a08730eb:   jbe    Stub::oop_disjoint_arraycopy+4 0x00007fb1a0872f24
  0x00007fb1a08730f1:   cmp    %rax,%rsi
  0x00007fb1a08730f4:   jae    Stub::oop_disjoint_arraycopy+4 0x00007fb1a0872f24
  0x00007fb1a08730fa:   cmpb   $0x0,0x40(%r15)
  0x00007fb1a08730ff:   je     Stub::oop_arraycopy+175 0x00007fb1a087318f
  0x00007fb1a0873105:   sub    $0x50,%rsp
  0x00007fb1a0873109:   mov    %rax,(%rsp)
  0x00007fb1a087310d:   mov    %rcx,0x8(%rsp)
  0x00007fb1a0873112:   mov    %rdx,0x10(%rsp)
  0x00007fb1a0873117:   mov    %rsi,0x18(%rsp)
  0x00007fb1a087311c:   mov    %rdi,0x20(%rsp)
  0x00007fb1a0873121:   mov    %r8,0x28(%rsp)
  0x00007fb1a0873126:   mov    %r9,0x30(%rsp)
  0x00007fb1a087312b:   mov    %r10,0x38(%rsp)
  0x00007fb1a0873130:   mov    %r11,0x40(%rsp)
  0x00007fb1a0873135:   mov    %rsi,%rdi
  0x00007fb1a0873138:   mov    %rdx,%rsi
  0x00007fb1a087313b:   test   $0xf,%spl
  0x00007fb1a087313f:   je     Stub::oop_arraycopy+119 0x00007fb1a0873157
  0x00007fb1a0873145:   sub    $0x8,%rsp
  0x00007fb1a0873149:   callq  0x00007fb1a4292d00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007fb1a087314e:   add    $0x8,%rsp
  0x00007fb1a0873152:   jmpq   Stub::oop_arraycopy+124 0x00007fb1a087315c
  0x00007fb1a0873157:   callq  0x00007fb1a4292d00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007fb1a087315c:   mov    0x40(%rsp),%r11
  0x00007fb1a0873161:   mov    0x38(%rsp),%r10
  0x00007fb1a0873166:   mov    0x30(%rsp),%r9
  0x00007fb1a087316b:   mov    0x28(%rsp),%r8
  0x00007fb1a0873170:   mov    0x20(%rsp),%rdi
  0x00007fb1a0873175:   mov    0x18(%rsp),%rsi
  0x00007fb1a087317a:   mov    0x10(%rsp),%rdx
  0x00007fb1a087317f:   mov    0x8(%rsp),%rcx
  0x00007fb1a0873184:   mov    (%rsp),%rax
  0x00007fb1a0873188:   add    $0x50,%rsp
  0x00007fb1a087318c:   vzeroupper 
  0x00007fb1a087318f:   mov    %rdx,%rcx
  0x00007fb1a0873192:   shr    %rdx
  0x00007fb1a0873195:   test   $0x1,%cl
  0x00007fb1a0873198:   je     Stub::oop_arraycopy+262 0x00007fb1a08731e6
  0x00007fb1a087319e:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007fb1a08731a2:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007fb1a08731a6:   jmpq   Stub::oop_arraycopy+262 0x00007fb1a08731e6
  0x00007fb1a08731ab:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007fb1a08731b0:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007fb1a08731b5:   dec    %rdx
  0x00007fb1a08731b8:   jne    Stub::oop_arraycopy+203 0x00007fb1a08731ab
  0x00007fb1a08731ba:   jmpq   Stub::oop_arraycopy+294 0x00007fb1a0873206
  0x00007fb1a08731bf:   xor    %rax,%rax
  0x00007fb1a08731c2:   vzeroupper 
  0x00007fb1a08731c5:   leaveq 
  0x00007fb1a08731c6:   retq   
  0x00007fb1a08731c7:   nopw   0x0(%rax,%rax,1)
  0x00007fb1a08731d0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007fb1a08731d6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007fb1a08731dc:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007fb1a08731e1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007fb1a08731e6:   sub    $0x8,%rdx
  0x00007fb1a08731ea:   jge    Stub::oop_arraycopy+240 0x00007fb1a08731d0
  0x00007fb1a08731ec:   add    $0x4,%rdx
  0x00007fb1a08731f0:   jl     Stub::oop_arraycopy+288 0x00007fb1a0873200
  0x00007fb1a08731f2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007fb1a08731f7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007fb1a08731fc:   sub    $0x4,%rdx
  0x00007fb1a0873200:   add    $0x4,%rdx
  0x00007fb1a0873204:   jg     Stub::oop_arraycopy+203 0x00007fb1a08731ab
  0x00007fb1a0873206:   sub    $0x50,%rsp
  0x00007fb1a087320a:   mov    %rax,(%rsp)
  0x00007fb1a087320e:   mov    %rcx,0x8(%rsp)
  0x00007fb1a0873213:   mov    %rdx,0x10(%rsp)
  0x00007fb1a0873218:   mov    %rsi,0x18(%rsp)
  0x00007fb1a087321d:   mov    %rdi,0x20(%rsp)
  0x00007fb1a0873222:   mov    %r8,0x28(%rsp)
  0x00007fb1a0873227:   mov    %r9,0x30(%rsp)
  0x00007fb1a087322c:   mov    %r10,0x38(%rsp)
  0x00007fb1a0873231:   mov    %r11,0x40(%rsp)
  0x00007fb1a0873236:   mov    %rsi,%rdi
  0x00007fb1a0873239:   mov    %rcx,%rsi
  0x00007fb1a087323c:   test   $0xf,%spl
  0x00007fb1a0873240:   je     Stub::oop_arraycopy+376 0x00007fb1a0873258
  0x00007fb1a0873246:   sub    $0x8,%rsp
  0x00007fb1a087324a:   callq  0x00007fb1a4292d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fb1a087324f:   add    $0x8,%rsp
  0x00007fb1a0873253:   jmpq   Stub::oop_arraycopy+381 0x00007fb1a087325d
  0x00007fb1a0873258:   callq  0x00007fb1a4292d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fb1a087325d:   mov    0x40(%rsp),%r11
  0x00007fb1a0873262:   mov    0x38(%rsp),%r10
  0x00007fb1a0873267:   mov    0x30(%rsp),%r9
  0x00007fb1a087326c:   mov    0x28(%rsp),%r8
  0x00007fb1a0873271:   mov    0x20(%rsp),%rdi
  0x00007fb1a0873276:   mov    0x18(%rsp),%rsi
  0x00007fb1a087327b:   mov    0x10(%rsp),%rdx
  0x00007fb1a0873280:   mov    0x8(%rsp),%rcx
  0x00007fb1a0873285:   mov    (%rsp),%rax
  0x00007fb1a0873289:   add    $0x50,%rsp
  0x00007fb1a087328d:   vzeroupper 
  0x00007fb1a0873290:   xor    %rax,%rax
  0x00007fb1a0873293:   vzeroupper 
  0x00007fb1a0873296:   leaveq 
  0x00007fb1a0873297:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_disjoint_arraycopy_uninit [0x00007fb1a08732a0, 0x00007fb1a08733b3] (275 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08732a0:   push   %rbp
  0x00007fb1a08732a1:   mov    %rsp,%rbp
  0x00007fb1a08732a4:   mov    %rsi,%r11
  0x00007fb1a08732a7:   mov    %rdx,%rcx
  0x00007fb1a08732aa:   shr    %rdx
  0x00007fb1a08732ad:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007fb1a08732b2:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007fb1a08732b7:   neg    %rdx
  0x00007fb1a08732ba:   jmpq   Stub::oop_disjoint_arraycopy_uninit+232 0x00007fb1a0873388
  0x00007fb1a08732bf:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007fb1a08732c4:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007fb1a08732c9:   inc    %rdx
  0x00007fb1a08732cc:   jne    Stub::oop_disjoint_arraycopy_uninit+31 0x00007fb1a08732bf
  0x00007fb1a08732ce:   test   $0x1,%cl
  0x00007fb1a08732d1:   je     Stub::oop_disjoint_arraycopy_uninit+57 0x00007fb1a08732d9
  0x00007fb1a08732d3:   mov    0x8(%rdi),%eax
  0x00007fb1a08732d6:   mov    %eax,0x8(%rsi)
  0x00007fb1a08732d9:   sub    $0x50,%rsp
  0x00007fb1a08732dd:   mov    %rax,(%rsp)
  0x00007fb1a08732e1:   mov    %rcx,0x8(%rsp)
  0x00007fb1a08732e6:   mov    %rdx,0x10(%rsp)
  0x00007fb1a08732eb:   mov    %rsi,0x18(%rsp)
  0x00007fb1a08732f0:   mov    %rdi,0x20(%rsp)
  0x00007fb1a08732f5:   mov    %r8,0x28(%rsp)
  0x00007fb1a08732fa:   mov    %r9,0x30(%rsp)
  0x00007fb1a08732ff:   mov    %r10,0x38(%rsp)
  0x00007fb1a0873304:   mov    %r11,0x40(%rsp)
  0x00007fb1a0873309:   mov    %r11,%rdi
  0x00007fb1a087330c:   mov    %rcx,%rsi
  0x00007fb1a087330f:   test   $0xf,%spl
  0x00007fb1a0873313:   je     Stub::oop_disjoint_arraycopy_uninit+139 0x00007fb1a087332b
  0x00007fb1a0873319:   sub    $0x8,%rsp
  0x00007fb1a087331d:   callq  0x00007fb1a4292d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fb1a0873322:   add    $0x8,%rsp
  0x00007fb1a0873326:   jmpq   Stub::oop_disjoint_arraycopy_uninit+144 0x00007fb1a0873330
  0x00007fb1a087332b:   callq  0x00007fb1a4292d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fb1a0873330:   mov    0x40(%rsp),%r11
  0x00007fb1a0873335:   mov    0x38(%rsp),%r10
  0x00007fb1a087333a:   mov    0x30(%rsp),%r9
  0x00007fb1a087333f:   mov    0x28(%rsp),%r8
  0x00007fb1a0873344:   mov    0x20(%rsp),%rdi
  0x00007fb1a0873349:   mov    0x18(%rsp),%rsi
  0x00007fb1a087334e:   mov    0x10(%rsp),%rdx
  0x00007fb1a0873353:   mov    0x8(%rsp),%rcx
  0x00007fb1a0873358:   mov    (%rsp),%rax
  0x00007fb1a087335c:   add    $0x50,%rsp
  0x00007fb1a0873360:   vzeroupper 
  0x00007fb1a0873363:   vzeroupper 
  0x00007fb1a0873366:   xor    %rax,%rax
  0x00007fb1a0873369:   leaveq 
  0x00007fb1a087336a:   retq   
  0x00007fb1a087336b:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a0873370:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007fb1a0873376:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007fb1a087337c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007fb1a0873382:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007fb1a0873388:   add    $0x8,%rdx
  0x00007fb1a087338c:   jle    Stub::oop_disjoint_arraycopy_uninit+208 0x00007fb1a0873370
  0x00007fb1a087338e:   sub    $0x4,%rdx
  0x00007fb1a0873392:   jg     Stub::oop_disjoint_arraycopy_uninit+260 0x00007fb1a08733a4
  0x00007fb1a0873394:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007fb1a087339a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007fb1a08733a0:   add    $0x4,%rdx
  0x00007fb1a08733a4:   sub    $0x4,%rdx
  0x00007fb1a08733a8:   jl     Stub::oop_disjoint_arraycopy_uninit+31 0x00007fb1a08732bf
  0x00007fb1a08733ae:   jmpq   Stub::oop_disjoint_arraycopy_uninit+46 0x00007fb1a08732ce
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_arraycopy_uninit [0x00007fb1a08733c0, 0x00007fb1a08734e8] (296 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08733c0:   push   %rbp
  0x00007fb1a08733c1:   mov    %rsp,%rbp
  0x00007fb1a08733c4:   cmp    %rdi,%rsi
  0x00007fb1a08733c7:   lea    (%rdi,%rdx,4),%rax
  0x00007fb1a08733cb:   jbe    Stub::oop_disjoint_arraycopy_uninit+4 0x00007fb1a08732a4
  0x00007fb1a08733d1:   cmp    %rax,%rsi
  0x00007fb1a08733d4:   jae    Stub::oop_disjoint_arraycopy_uninit+4 0x00007fb1a08732a4
  0x00007fb1a08733da:   mov    %rdx,%rcx
  0x00007fb1a08733dd:   shr    %rdx
  0x00007fb1a08733e0:   test   $0x1,%cl
  0x00007fb1a08733e3:   je     Stub::oop_arraycopy_uninit+118 0x00007fb1a0873436
  0x00007fb1a08733e9:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007fb1a08733ed:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007fb1a08733f1:   jmpq   Stub::oop_arraycopy_uninit+118 0x00007fb1a0873436
  0x00007fb1a08733f6:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007fb1a08733fb:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007fb1a0873400:   dec    %rdx
  0x00007fb1a0873403:   jne    Stub::oop_arraycopy_uninit+54 0x00007fb1a08733f6
  0x00007fb1a0873405:   jmpq   Stub::oop_arraycopy_uninit+150 0x00007fb1a0873456
  0x00007fb1a087340a:   xor    %rax,%rax
  0x00007fb1a087340d:   vzeroupper 
  0x00007fb1a0873410:   leaveq 
  0x00007fb1a0873411:   retq   
  0x00007fb1a0873412:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087341c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0873420:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007fb1a0873426:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007fb1a087342c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007fb1a0873431:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007fb1a0873436:   sub    $0x8,%rdx
  0x00007fb1a087343a:   jge    Stub::oop_arraycopy_uninit+96 0x00007fb1a0873420
  0x00007fb1a087343c:   add    $0x4,%rdx
  0x00007fb1a0873440:   jl     Stub::oop_arraycopy_uninit+144 0x00007fb1a0873450
  0x00007fb1a0873442:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007fb1a0873447:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007fb1a087344c:   sub    $0x4,%rdx
  0x00007fb1a0873450:   add    $0x4,%rdx
  0x00007fb1a0873454:   jg     Stub::oop_arraycopy_uninit+54 0x00007fb1a08733f6
  0x00007fb1a0873456:   sub    $0x50,%rsp
  0x00007fb1a087345a:   mov    %rax,(%rsp)
  0x00007fb1a087345e:   mov    %rcx,0x8(%rsp)
  0x00007fb1a0873463:   mov    %rdx,0x10(%rsp)
  0x00007fb1a0873468:   mov    %rsi,0x18(%rsp)
  0x00007fb1a087346d:   mov    %rdi,0x20(%rsp)
  0x00007fb1a0873472:   mov    %r8,0x28(%rsp)
  0x00007fb1a0873477:   mov    %r9,0x30(%rsp)
  0x00007fb1a087347c:   mov    %r10,0x38(%rsp)
  0x00007fb1a0873481:   mov    %r11,0x40(%rsp)
  0x00007fb1a0873486:   mov    %rsi,%rdi
  0x00007fb1a0873489:   mov    %rcx,%rsi
  0x00007fb1a087348c:   test   $0xf,%spl
  0x00007fb1a0873490:   je     Stub::oop_arraycopy_uninit+232 0x00007fb1a08734a8
  0x00007fb1a0873496:   sub    $0x8,%rsp
  0x00007fb1a087349a:   callq  0x00007fb1a4292d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fb1a087349f:   add    $0x8,%rsp
  0x00007fb1a08734a3:   jmpq   Stub::oop_arraycopy_uninit+237 0x00007fb1a08734ad
  0x00007fb1a08734a8:   callq  0x00007fb1a4292d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fb1a08734ad:   mov    0x40(%rsp),%r11
  0x00007fb1a08734b2:   mov    0x38(%rsp),%r10
  0x00007fb1a08734b7:   mov    0x30(%rsp),%r9
  0x00007fb1a08734bc:   mov    0x28(%rsp),%r8
  0x00007fb1a08734c1:   mov    0x20(%rsp),%rdi
  0x00007fb1a08734c6:   mov    0x18(%rsp),%rsi
  0x00007fb1a08734cb:   mov    0x10(%rsp),%rdx
  0x00007fb1a08734d0:   mov    0x8(%rsp),%rcx
  0x00007fb1a08734d5:   mov    (%rsp),%rax
  0x00007fb1a08734d9:   add    $0x50,%rsp
  0x00007fb1a08734dd:   vzeroupper 
  0x00007fb1a08734e0:   xor    %rax,%rax
  0x00007fb1a08734e3:   vzeroupper 
  0x00007fb1a08734e6:   leaveq 
  0x00007fb1a08734e7:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::checkcast_arraycopy [0x00007fb1a0873500, 0x00007fb1a08736e1] (481 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0873500:   push   %rbp
  0x00007fb1a0873501:   mov    %rsp,%rbp
  0x00007fb1a0873504:   sub    $0x18,%rsp
  0x00007fb1a0873508:   mov    %r13,(%rsp)
  0x00007fb1a087350c:   mov    %r14,0x8(%rsp)
  0x00007fb1a0873511:   mov    %r10,0x10(%rsp)
  0x00007fb1a0873516:   cmpb   $0x0,0x40(%r15)
  0x00007fb1a087351b:   je     Stub::checkcast_arraycopy+171 0x00007fb1a08735ab
  0x00007fb1a0873521:   sub    $0x50,%rsp
  0x00007fb1a0873525:   mov    %rax,(%rsp)
  0x00007fb1a0873529:   mov    %rcx,0x8(%rsp)
  0x00007fb1a087352e:   mov    %rdx,0x10(%rsp)
  0x00007fb1a0873533:   mov    %rsi,0x18(%rsp)
  0x00007fb1a0873538:   mov    %rdi,0x20(%rsp)
  0x00007fb1a087353d:   mov    %r8,0x28(%rsp)
  0x00007fb1a0873542:   mov    %r9,0x30(%rsp)
  0x00007fb1a0873547:   mov    %r10,0x38(%rsp)
  0x00007fb1a087354c:   mov    %r11,0x40(%rsp)
  0x00007fb1a0873551:   mov    %rsi,%rdi
  0x00007fb1a0873554:   mov    %rdx,%rsi
  0x00007fb1a0873557:   test   $0xf,%spl
  0x00007fb1a087355b:   je     Stub::checkcast_arraycopy+115 0x00007fb1a0873573
  0x00007fb1a0873561:   sub    $0x8,%rsp
  0x00007fb1a0873565:   callq  0x00007fb1a4292d00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007fb1a087356a:   add    $0x8,%rsp
  0x00007fb1a087356e:   jmpq   Stub::checkcast_arraycopy+120 0x00007fb1a0873578
  0x00007fb1a0873573:   callq  0x00007fb1a4292d00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007fb1a0873578:   mov    0x40(%rsp),%r11
  0x00007fb1a087357d:   mov    0x38(%rsp),%r10
  0x00007fb1a0873582:   mov    0x30(%rsp),%r9
  0x00007fb1a0873587:   mov    0x28(%rsp),%r8
  0x00007fb1a087358c:   mov    0x20(%rsp),%rdi
  0x00007fb1a0873591:   mov    0x18(%rsp),%rsi
  0x00007fb1a0873596:   mov    0x10(%rsp),%rdx
  0x00007fb1a087359b:   mov    0x8(%rsp),%rcx
  0x00007fb1a08735a0:   mov    (%rsp),%rax
  0x00007fb1a08735a4:   add    $0x50,%rsp
  0x00007fb1a08735a8:   vzeroupper 
  0x00007fb1a08735ab:   lea    (%rdi,%rdx,4),%rdi
  0x00007fb1a08735af:   lea    (%rsi,%rdx,4),%r13
  0x00007fb1a08735b3:   mov    %rdx,%r14
  0x00007fb1a08735b6:   neg    %rdx
  0x00007fb1a08735b9:   jne    Stub::checkcast_arraycopy+226 0x00007fb1a08735e2
  0x00007fb1a08735bf:   xor    %rax,%rax
  0x00007fb1a08735c2:   jmpq   Stub::checkcast_arraycopy+465 0x00007fb1a08736d1
  0x00007fb1a08735c7:   nopw   0x0(%rax,%rax,1)
  0x00007fb1a08735d0:   shr    $0x3,%rax
  0x00007fb1a08735d4:   mov    %eax,0x0(%r13,%rdx,4)
  0x00007fb1a08735d9:   inc    %rdx
  0x00007fb1a08735dc:   je     Stub::checkcast_arraycopy+324 0x00007fb1a0873644
  0x00007fb1a08735e2:   mov    (%rdi,%rdx,4),%eax
  0x00007fb1a08735e5:   shl    $0x3,%rax
  0x00007fb1a08735e9:   test   %rax,%rax
  0x00007fb1a08735ec:   je     Stub::checkcast_arraycopy+208 0x00007fb1a08735d0
  0x00007fb1a08735ee:   mov    0x8(%rax),%r11d
  0x00007fb1a08735f2:   movabs $0x800000000,%r10
  0x00007fb1a08735fc:   add    %r10,%r11
  0x00007fb1a08735ff:   cmp    %r8,%r11
  0x00007fb1a0873602:   je     Stub::checkcast_arraycopy+208 0x00007fb1a08735d0
  0x00007fb1a0873604:   cmp    (%r11,%rcx,1),%r8
  0x00007fb1a0873608:   je     Stub::checkcast_arraycopy+208 0x00007fb1a08735d0
  0x00007fb1a087360a:   cmp    $0x20,%ecx
  0x00007fb1a087360d:   jne    Stub::checkcast_arraycopy+308 0x00007fb1a0873634
  0x00007fb1a0873613:   push   %rax
  0x00007fb1a0873614:   mov    %r8,%rax
  0x00007fb1a0873617:   push   %rcx
  0x00007fb1a0873618:   push   %rdi
  0x00007fb1a0873619:   mov    0x28(%r11),%rdi
  0x00007fb1a087361d:   mov    (%rdi),%ecx
  0x00007fb1a087361f:   add    $0x8,%rdi
  0x00007fb1a0873623:   test   %rax,%rax
  0x00007fb1a0873626:   repnz scas %es:(%rdi),%rax
  0x00007fb1a0873629:   pop    %rdi
  0x00007fb1a087362a:   pop    %rcx
  0x00007fb1a087362b:   pop    %rax
  0x00007fb1a087362c:   jne    Stub::checkcast_arraycopy+308 0x00007fb1a0873634
  0x00007fb1a087362e:   mov    %r8,0x20(%r11)
  0x00007fb1a0873632:   jmp    Stub::checkcast_arraycopy+208 0x00007fb1a08735d0
  0x00007fb1a0873634:   add    %rdx,%r14
  0x00007fb1a0873637:   mov    %r14,%rax
  0x00007fb1a087363a:   not    %rax
  0x00007fb1a087363d:   jne    Stub::checkcast_arraycopy+327 0x00007fb1a0873647
  0x00007fb1a087363f:   jmpq   Stub::checkcast_arraycopy+465 0x00007fb1a08736d1
  0x00007fb1a0873644:   xor    %rax,%rax
  0x00007fb1a0873647:   sub    $0x50,%rsp
  0x00007fb1a087364b:   mov    %rax,(%rsp)
  0x00007fb1a087364f:   mov    %rcx,0x8(%rsp)
  0x00007fb1a0873654:   mov    %rdx,0x10(%rsp)
  0x00007fb1a0873659:   mov    %rsi,0x18(%rsp)
  0x00007fb1a087365e:   mov    %rdi,0x20(%rsp)
  0x00007fb1a0873663:   mov    %r8,0x28(%rsp)
  0x00007fb1a0873668:   mov    %r9,0x30(%rsp)
  0x00007fb1a087366d:   mov    %r10,0x38(%rsp)
  0x00007fb1a0873672:   mov    %r11,0x40(%rsp)
  0x00007fb1a0873677:   mov    %rsi,%rdi
  0x00007fb1a087367a:   mov    %r14,%rsi
  0x00007fb1a087367d:   test   $0xf,%spl
  0x00007fb1a0873681:   je     Stub::checkcast_arraycopy+409 0x00007fb1a0873699
  0x00007fb1a0873687:   sub    $0x8,%rsp
  0x00007fb1a087368b:   callq  0x00007fb1a4292d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fb1a0873690:   add    $0x8,%rsp
  0x00007fb1a0873694:   jmpq   Stub::checkcast_arraycopy+414 0x00007fb1a087369e
  0x00007fb1a0873699:   callq  0x00007fb1a4292d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fb1a087369e:   mov    0x40(%rsp),%r11
  0x00007fb1a08736a3:   mov    0x38(%rsp),%r10
  0x00007fb1a08736a8:   mov    0x30(%rsp),%r9
  0x00007fb1a08736ad:   mov    0x28(%rsp),%r8
  0x00007fb1a08736b2:   mov    0x20(%rsp),%rdi
  0x00007fb1a08736b7:   mov    0x18(%rsp),%rsi
  0x00007fb1a08736bc:   mov    0x10(%rsp),%rdx
  0x00007fb1a08736c1:   mov    0x8(%rsp),%rcx
  0x00007fb1a08736c6:   mov    (%rsp),%rax
  0x00007fb1a08736ca:   add    $0x50,%rsp
  0x00007fb1a08736ce:   vzeroupper 
  0x00007fb1a08736d1:   mov    (%rsp),%r13
  0x00007fb1a08736d5:   mov    0x8(%rsp),%r14
  0x00007fb1a08736da:   mov    0x10(%rsp),%r10
  0x00007fb1a08736df:   leaveq 
  0x00007fb1a08736e0:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::checkcast_arraycopy_uninit [0x00007fb1a0873700, 0x00007fb1a0873851] (337 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0873700:   push   %rbp
  0x00007fb1a0873701:   mov    %rsp,%rbp
  0x00007fb1a0873704:   sub    $0x18,%rsp
  0x00007fb1a0873708:   mov    %r13,(%rsp)
  0x00007fb1a087370c:   mov    %r14,0x8(%rsp)
  0x00007fb1a0873711:   mov    %r10,0x10(%rsp)
  0x00007fb1a0873716:   lea    (%rdi,%rdx,4),%rdi
  0x00007fb1a087371a:   lea    (%rsi,%rdx,4),%r13
  0x00007fb1a087371e:   mov    %rdx,%r14
  0x00007fb1a0873721:   neg    %rdx
  0x00007fb1a0873724:   jne    Stub::checkcast_arraycopy_uninit+82 0x00007fb1a0873752
  0x00007fb1a087372a:   xor    %rax,%rax
  0x00007fb1a087372d:   jmpq   Stub::checkcast_arraycopy_uninit+321 0x00007fb1a0873841
  0x00007fb1a0873732:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087373c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0873740:   shr    $0x3,%rax
  0x00007fb1a0873744:   mov    %eax,0x0(%r13,%rdx,4)
  0x00007fb1a0873749:   inc    %rdx
  0x00007fb1a087374c:   je     Stub::checkcast_arraycopy_uninit+180 0x00007fb1a08737b4
  0x00007fb1a0873752:   mov    (%rdi,%rdx,4),%eax
  0x00007fb1a0873755:   shl    $0x3,%rax
  0x00007fb1a0873759:   test   %rax,%rax
  0x00007fb1a087375c:   je     Stub::checkcast_arraycopy_uninit+64 0x00007fb1a0873740
  0x00007fb1a087375e:   mov    0x8(%rax),%r11d
  0x00007fb1a0873762:   movabs $0x800000000,%r10
  0x00007fb1a087376c:   add    %r10,%r11
  0x00007fb1a087376f:   cmp    %r8,%r11
  0x00007fb1a0873772:   je     Stub::checkcast_arraycopy_uninit+64 0x00007fb1a0873740
  0x00007fb1a0873774:   cmp    (%r11,%rcx,1),%r8
  0x00007fb1a0873778:   je     Stub::checkcast_arraycopy_uninit+64 0x00007fb1a0873740
  0x00007fb1a087377a:   cmp    $0x20,%ecx
  0x00007fb1a087377d:   jne    Stub::checkcast_arraycopy_uninit+164 0x00007fb1a08737a4
  0x00007fb1a0873783:   push   %rax
  0x00007fb1a0873784:   mov    %r8,%rax
  0x00007fb1a0873787:   push   %rcx
  0x00007fb1a0873788:   push   %rdi
  0x00007fb1a0873789:   mov    0x28(%r11),%rdi
  0x00007fb1a087378d:   mov    (%rdi),%ecx
  0x00007fb1a087378f:   add    $0x8,%rdi
  0x00007fb1a0873793:   test   %rax,%rax
  0x00007fb1a0873796:   repnz scas %es:(%rdi),%rax
  0x00007fb1a0873799:   pop    %rdi
  0x00007fb1a087379a:   pop    %rcx
  0x00007fb1a087379b:   pop    %rax
  0x00007fb1a087379c:   jne    Stub::checkcast_arraycopy_uninit+164 0x00007fb1a08737a4
  0x00007fb1a087379e:   mov    %r8,0x20(%r11)
  0x00007fb1a08737a2:   jmp    Stub::checkcast_arraycopy_uninit+64 0x00007fb1a0873740
  0x00007fb1a08737a4:   add    %rdx,%r14
  0x00007fb1a08737a7:   mov    %r14,%rax
  0x00007fb1a08737aa:   not    %rax
  0x00007fb1a08737ad:   jne    Stub::checkcast_arraycopy_uninit+183 0x00007fb1a08737b7
  0x00007fb1a08737af:   jmpq   Stub::checkcast_arraycopy_uninit+321 0x00007fb1a0873841
  0x00007fb1a08737b4:   xor    %rax,%rax
  0x00007fb1a08737b7:   sub    $0x50,%rsp
  0x00007fb1a08737bb:   mov    %rax,(%rsp)
  0x00007fb1a08737bf:   mov    %rcx,0x8(%rsp)
  0x00007fb1a08737c4:   mov    %rdx,0x10(%rsp)
  0x00007fb1a08737c9:   mov    %rsi,0x18(%rsp)
  0x00007fb1a08737ce:   mov    %rdi,0x20(%rsp)
  0x00007fb1a08737d3:   mov    %r8,0x28(%rsp)
  0x00007fb1a08737d8:   mov    %r9,0x30(%rsp)
  0x00007fb1a08737dd:   mov    %r10,0x38(%rsp)
  0x00007fb1a08737e2:   mov    %r11,0x40(%rsp)
  0x00007fb1a08737e7:   mov    %rsi,%rdi
  0x00007fb1a08737ea:   mov    %r14,%rsi
  0x00007fb1a08737ed:   test   $0xf,%spl
  0x00007fb1a08737f1:   je     Stub::checkcast_arraycopy_uninit+265 0x00007fb1a0873809
  0x00007fb1a08737f7:   sub    $0x8,%rsp
  0x00007fb1a08737fb:   callq  0x00007fb1a4292d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fb1a0873800:   add    $0x8,%rsp
  0x00007fb1a0873804:   jmpq   Stub::checkcast_arraycopy_uninit+270 0x00007fb1a087380e
  0x00007fb1a0873809:   callq  0x00007fb1a4292d30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fb1a087380e:   mov    0x40(%rsp),%r11
  0x00007fb1a0873813:   mov    0x38(%rsp),%r10
  0x00007fb1a0873818:   mov    0x30(%rsp),%r9
  0x00007fb1a087381d:   mov    0x28(%rsp),%r8
  0x00007fb1a0873822:   mov    0x20(%rsp),%rdi
  0x00007fb1a0873827:   mov    0x18(%rsp),%rsi
  0x00007fb1a087382c:   mov    0x10(%rsp),%rdx
  0x00007fb1a0873831:   mov    0x8(%rsp),%rcx
  0x00007fb1a0873836:   mov    (%rsp),%rax
  0x00007fb1a087383a:   add    $0x50,%rsp
  0x00007fb1a087383e:   vzeroupper 
  0x00007fb1a0873841:   mov    (%rsp),%r13
  0x00007fb1a0873845:   mov    0x8(%rsp),%r14
  0x00007fb1a087384a:   mov    0x10(%rsp),%r10
  0x00007fb1a087384f:   leaveq 
  0x00007fb1a0873850:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::unsafe_arraycopy [0x00007fb1a0873860, 0x00007fb1a0873897] (55 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0873860:   push   %rbp
  0x00007fb1a0873861:   mov    %rsp,%rbp
  0x00007fb1a0873864:   mov    %rdi,%rax
  0x00007fb1a0873867:   or     %rsi,%rax
  0x00007fb1a087386a:   or     %rdx,%rax
  0x00007fb1a087386d:   test   $0x7,%al
  0x00007fb1a087386f:   je     Stub::unsafe_arraycopy+46 0x00007fb1a087388e
  0x00007fb1a0873871:   test   $0x3,%al
  0x00007fb1a0873873:   je     Stub::unsafe_arraycopy+37 0x00007fb1a0873885
  0x00007fb1a0873875:   test   $0x1,%al
  0x00007fb1a0873877:   jne    Stub::jbyte_arraycopy+4 0x00007fb1a0872b04
  0x00007fb1a087387d:   shr    %rdx
  0x00007fb1a0873880:   jmpq   Stub::jshort_arraycopy+4 0x00007fb1a0872c64
  0x00007fb1a0873885:   shr    $0x2,%rdx
  0x00007fb1a0873889:   jmpq   Stub::jint_arraycopy+4 0x00007fb1a0872d84
  0x00007fb1a087388e:   shr    $0x3,%rdx
  0x00007fb1a0873892:   jmpq   Stub::jlong_arraycopy+4 0x00007fb1a0872ea4
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::generic_arraycopy [0x00007fb1a087389b, 0x00007fb1a0873a84] (489 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087389b:   jmpq   Stub::generic_arraycopy+481 0x00007fb1a0873a7c
  0x00007fb1a08738a0:   push   %rbp
  0x00007fb1a08738a1:   mov    %rsp,%rbp
  0x00007fb1a08738a4:   test   %rdi,%rdi
  0x00007fb1a08738a7:   je     Stub::generic_arraycopy
  0x00007fb1a08738a9:   test   %esi,%esi
  0x00007fb1a08738ab:   js     Stub::generic_arraycopy
  0x00007fb1a08738ad:   test   %rdx,%rdx
  0x00007fb1a08738b0:   je     Stub::generic_arraycopy
  0x00007fb1a08738b2:   test   %ecx,%ecx
  0x00007fb1a08738b4:   js     Stub::generic_arraycopy
  0x00007fb1a08738b6:   mov    %r8d,%r11d
  0x00007fb1a08738b9:   test   %r11d,%r11d
  0x00007fb1a08738bc:   js     Stub::generic_arraycopy
  0x00007fb1a08738be:   mov    0x8(%rdi),%r10d
  0x00007fb1a08738c2:   movabs $0x800000000,%r9
  0x00007fb1a08738cc:   add    %r9,%r10
  0x00007fb1a08738cf:   cmpl   $0x80100c02,0x8(%r10)
  0x00007fb1a08738d7:   je     Stub::generic_arraycopy+244 0x00007fb1a087398f
  0x00007fb1a08738dd:   mov    0x8(%rdx),%eax
  0x00007fb1a08738e0:   movabs $0x800000000,%r9
  0x00007fb1a08738ea:   add    %r9,%rax
  0x00007fb1a08738ed:   cmp    %rax,%r10
  0x00007fb1a08738f0:   jne    Stub::generic_arraycopy+481 0x00007fb1a0873a7c
  0x00007fb1a08738f6:   mov    0x8(%r10),%eax
  0x00007fb1a08738fa:   cmp    $0x0,%eax
  0x00007fb1a08738fd:   jge    Stub::generic_arraycopy+481 0x00007fb1a0873a7c
  0x00007fb1a0873903:   mov    %r11d,%r10d
  0x00007fb1a0873906:   add    %esi,%r10d
  0x00007fb1a0873909:   cmp    0xc(%rdi),%r10d
  0x00007fb1a087390d:   ja     Stub::generic_arraycopy+481 0x00007fb1a0873a7c
  0x00007fb1a0873913:   mov    %r11d,%r10d
  0x00007fb1a0873916:   add    %ecx,%r10d
  0x00007fb1a0873919:   cmp    0xc(%rdx),%r10d
  0x00007fb1a087391d:   ja     Stub::generic_arraycopy+481 0x00007fb1a0873a7c
  0x00007fb1a0873923:   movslq %esi,%rsi
  0x00007fb1a0873926:   movslq %ecx,%rcx
  0x00007fb1a0873929:   mov    %eax,%r10d
  0x00007fb1a087392c:   shr    $0x10,%r10d
  0x00007fb1a0873930:   and    $0xff,%r10
  0x00007fb1a0873937:   add    %r10,%rdi
  0x00007fb1a087393a:   add    %r10,%rdx
  0x00007fb1a087393d:   and    $0x3f,%eax
  0x00007fb1a0873940:   cmp    $0x0,%eax
  0x00007fb1a0873943:   jne    Stub::generic_arraycopy+186 0x00007fb1a0873955
  0x00007fb1a0873945:   lea    (%rdi,%rsi,1),%rdi
  0x00007fb1a0873949:   lea    (%rdx,%rcx,1),%rsi
  0x00007fb1a087394d:   movslq %r11d,%rdx
  0x00007fb1a0873950:   jmpq   Stub::jbyte_arraycopy+4 0x00007fb1a0872b04
  0x00007fb1a0873955:   cmp    $0x1,%eax
  0x00007fb1a0873958:   jne    Stub::generic_arraycopy+207 0x00007fb1a087396a
  0x00007fb1a087395a:   lea    (%rdi,%rsi,2),%rdi
  0x00007fb1a087395e:   lea    (%rdx,%rcx,2),%rsi
  0x00007fb1a0873962:   movslq %r11d,%rdx
  0x00007fb1a0873965:   jmpq   Stub::jshort_arraycopy+4 0x00007fb1a0872c64
  0x00007fb1a087396a:   cmp    $0x2,%eax
  0x00007fb1a087396d:   jne    Stub::generic_arraycopy+228 0x00007fb1a087397f
  0x00007fb1a087396f:   lea    (%rdi,%rsi,4),%rdi
  0x00007fb1a0873973:   lea    (%rdx,%rcx,4),%rsi
  0x00007fb1a0873977:   movslq %r11d,%rdx
  0x00007fb1a087397a:   jmpq   Stub::jint_arraycopy+4 0x00007fb1a0872d84
  0x00007fb1a087397f:   lea    (%rdi,%rsi,8),%rdi
  0x00007fb1a0873983:   lea    (%rdx,%rcx,8),%rsi
  0x00007fb1a0873987:   movslq %r11d,%rdx
  0x00007fb1a087398a:   jmpq   Stub::jlong_arraycopy+4 0x00007fb1a0872ea4
  0x00007fb1a087398f:   mov    0x8(%rdx),%eax
  0x00007fb1a0873992:   movabs $0x800000000,%r9
  0x00007fb1a087399c:   add    %r9,%rax
  0x00007fb1a087399f:   cmp    %rax,%r10
  0x00007fb1a08739a2:   jne    Stub::generic_arraycopy+325 0x00007fb1a08739e0
  0x00007fb1a08739a8:   mov    %r11d,%r10d
  0x00007fb1a08739ab:   add    %esi,%r10d
  0x00007fb1a08739ae:   cmp    0xc(%rdi),%r10d
  0x00007fb1a08739b2:   ja     Stub::generic_arraycopy+481 0x00007fb1a0873a7c
  0x00007fb1a08739b8:   mov    %r11d,%r10d
  0x00007fb1a08739bb:   add    %ecx,%r10d
  0x00007fb1a08739be:   cmp    0xc(%rdx),%r10d
  0x00007fb1a08739c2:   ja     Stub::generic_arraycopy+481 0x00007fb1a0873a7c
  0x00007fb1a08739c8:   movslq %esi,%rsi
  0x00007fb1a08739cb:   movslq %ecx,%rcx
  0x00007fb1a08739ce:   lea    0x10(%rdi,%rsi,4),%rdi
  0x00007fb1a08739d3:   lea    0x10(%rdx,%rcx,4),%rsi
  0x00007fb1a08739d8:   movslq %r11d,%rdx
  0x00007fb1a08739db:   jmpq   Stub::oop_arraycopy+4 0x00007fb1a08730e4
  0x00007fb1a08739e0:   cmpl   $0x80100c02,0x8(%rax)
  0x00007fb1a08739e7:   jne    Stub::generic_arraycopy+481 0x00007fb1a0873a7c
  0x00007fb1a08739ed:   mov    %r11d,%eax
  0x00007fb1a08739f0:   add    %esi,%eax
  0x00007fb1a08739f2:   cmp    0xc(%rdi),%eax
  0x00007fb1a08739f5:   ja     Stub::generic_arraycopy+481 0x00007fb1a0873a7c
  0x00007fb1a08739fb:   mov    %r11d,%eax
  0x00007fb1a08739fe:   add    %ecx,%eax
  0x00007fb1a0873a00:   cmp    0xc(%rdx),%eax
  0x00007fb1a0873a03:   ja     Stub::generic_arraycopy+481 0x00007fb1a0873a7c
  0x00007fb1a0873a09:   movslq %esi,%rsi
  0x00007fb1a0873a0c:   movslq %ecx,%rcx
  0x00007fb1a0873a0f:   mov    0x8(%rdx),%r11d
  0x00007fb1a0873a13:   movabs $0x800000000,%r9
  0x00007fb1a0873a1d:   add    %r9,%r11
  0x00007fb1a0873a20:   lea    0x10(%rdi,%rsi,4),%rdi
  0x00007fb1a0873a25:   lea    0x10(%rdx,%rcx,4),%rsi
  0x00007fb1a0873a2a:   mov    %r8d,%edx
  0x00007fb1a0873a2d:   mov    0x14(%r11),%ecx
  0x00007fb1a0873a31:   cmp    %r11,%r10
  0x00007fb1a0873a34:   je     Stub::generic_arraycopy+320 0x00007fb1a08739db
  0x00007fb1a0873a36:   cmp    (%r10,%rcx,1),%r11
  0x00007fb1a0873a3a:   je     Stub::generic_arraycopy+320 0x00007fb1a08739db
  0x00007fb1a0873a3c:   cmp    $0x20,%ecx
  0x00007fb1a0873a3f:   jne    Stub::generic_arraycopy+462 0x00007fb1a0873a69
  0x00007fb1a0873a45:   push   %rax
  0x00007fb1a0873a46:   mov    %r11,%rax
  0x00007fb1a0873a49:   push   %rcx
  0x00007fb1a0873a4a:   push   %rdi
  0x00007fb1a0873a4b:   mov    0x28(%r10),%rdi
  0x00007fb1a0873a4f:   mov    (%rdi),%ecx
  0x00007fb1a0873a51:   add    $0x8,%rdi
  0x00007fb1a0873a55:   test   %rax,%rax
  0x00007fb1a0873a58:   repnz scas %es:(%rdi),%rax
  0x00007fb1a0873a5b:   pop    %rdi
  0x00007fb1a0873a5c:   pop    %rcx
  0x00007fb1a0873a5d:   pop    %rax
  0x00007fb1a0873a5e:   jne    Stub::generic_arraycopy+462 0x00007fb1a0873a69
  0x00007fb1a0873a60:   mov    %r11,0x20(%r10)
  0x00007fb1a0873a64:   jmpq   Stub::generic_arraycopy+320 0x00007fb1a08739db
  0x00007fb1a0873a69:   mov    0xd0(%r11),%r11
  0x00007fb1a0873a70:   mov    0x14(%r11),%ecx
  0x00007fb1a0873a74:   mov    %r11,%r8
  0x00007fb1a0873a77:   jmpq   Stub::checkcast_arraycopy+4 0x00007fb1a0873504
  0x00007fb1a0873a7c:   xor    %rax,%rax
  0x00007fb1a0873a7f:   not    %rax
  0x00007fb1a0873a82:   leaveq 
  0x00007fb1a0873a83:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_fill [0x00007fb1a0873aa0, 0x00007fb1a0873b4b] (171 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0873aa0:   mov    %rdx,%r11
  0x00007fb1a0873aa3:   push   %rbp
  0x00007fb1a0873aa4:   mov    %rsp,%rbp
  0x00007fb1a0873aa7:   and    $0xff,%esi
  0x00007fb1a0873aad:   mov    %esi,%eax
  0x00007fb1a0873aaf:   shl    $0x8,%eax
  0x00007fb1a0873ab2:   or     %eax,%esi
  0x00007fb1a0873ab4:   mov    %esi,%eax
  0x00007fb1a0873ab6:   shl    $0x10,%eax
  0x00007fb1a0873ab9:   or     %eax,%esi
  0x00007fb1a0873abb:   cmp    $0x8,%r11d
  0x00007fb1a0873abf:   jb     Stub::jbyte_fill+132 0x00007fb1a0873b24
  0x00007fb1a0873ac5:   vmovd  %esi,%xmm0
  0x00007fb1a0873ac9:   vpbroadcastd %xmm0,%ymm0
  0x00007fb1a0873ace:   sub    $0x40,%r11d
  0x00007fb1a0873ad2:   jl     Stub::jbyte_fill+83 0x00007fb1a0873af3
  0x00007fb1a0873ad8:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a0873ae0:   vmovdqu %ymm0,(%rdi)
  0x00007fb1a0873ae4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007fb1a0873ae9:   add    $0x40,%rdi
  0x00007fb1a0873aed:   sub    $0x40,%r11d
  0x00007fb1a0873af1:   jge    Stub::jbyte_fill+64 0x00007fb1a0873ae0
  0x00007fb1a0873af3:   add    $0x20,%r11d
  0x00007fb1a0873af7:   jl     Stub::jbyte_fill+101 0x00007fb1a0873b05
  0x00007fb1a0873af9:   vmovdqu %ymm0,(%rdi)
  0x00007fb1a0873afd:   add    $0x20,%rdi
  0x00007fb1a0873b01:   sub    $0x20,%r11d
  0x00007fb1a0873b05:   vmovd  %esi,%xmm0
  0x00007fb1a0873b09:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fb1a0873b0e:   add    $0x20,%r11d
  0x00007fb1a0873b12:   je     Stub::jbyte_fill+166 0x00007fb1a0873b46
  0x00007fb1a0873b14:   jmp    Stub::jbyte_fill+126 0x00007fb1a0873b1e
  0x00007fb1a0873b16:   vmovq  %xmm0,(%rdi)
  0x00007fb1a0873b1a:   add    $0x8,%rdi
  0x00007fb1a0873b1e:   sub    $0x8,%r11d
  0x00007fb1a0873b22:   jge    Stub::jbyte_fill+118 0x00007fb1a0873b16
  0x00007fb1a0873b24:   test   $0x4,%r11b
  0x00007fb1a0873b28:   je     Stub::jbyte_fill+144 0x00007fb1a0873b30
  0x00007fb1a0873b2a:   mov    %esi,(%rdi)
  0x00007fb1a0873b2c:   add    $0x4,%rdi
  0x00007fb1a0873b30:   test   $0x2,%r11b
  0x00007fb1a0873b34:   je     Stub::jbyte_fill+157 0x00007fb1a0873b3d
  0x00007fb1a0873b36:   mov    %si,(%rdi)
  0x00007fb1a0873b39:   add    $0x2,%rdi
  0x00007fb1a0873b3d:   test   $0x1,%r11b
  0x00007fb1a0873b41:   je     Stub::jbyte_fill+166 0x00007fb1a0873b46
  0x00007fb1a0873b43:   mov    %sil,(%rdi)
  0x00007fb1a0873b46:   vzeroupper 
  0x00007fb1a0873b49:   leaveq 
  0x00007fb1a0873b4a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_fill [0x00007fb1a0873b60, 0x00007fb1a0873bfe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0873b60:   mov    %rdx,%r11
  0x00007fb1a0873b63:   push   %rbp
  0x00007fb1a0873b64:   mov    %rsp,%rbp
  0x00007fb1a0873b67:   and    $0xffff,%esi
  0x00007fb1a0873b6d:   mov    %esi,%eax
  0x00007fb1a0873b6f:   shl    $0x10,%eax
  0x00007fb1a0873b72:   or     %eax,%esi
  0x00007fb1a0873b74:   cmp    $0x4,%r11d
  0x00007fb1a0873b78:   jb     Stub::jshort_fill+132 0x00007fb1a0873be4
  0x00007fb1a0873b7e:   vmovd  %esi,%xmm0
  0x00007fb1a0873b82:   vpbroadcastd %xmm0,%ymm0
  0x00007fb1a0873b87:   sub    $0x20,%r11d
  0x00007fb1a0873b8b:   jl     Stub::jshort_fill+83 0x00007fb1a0873bb3
  0x00007fb1a0873b91:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a0873b9c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0873ba0:   vmovdqu %ymm0,(%rdi)
  0x00007fb1a0873ba4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007fb1a0873ba9:   add    $0x40,%rdi
  0x00007fb1a0873bad:   sub    $0x20,%r11d
  0x00007fb1a0873bb1:   jge    Stub::jshort_fill+64 0x00007fb1a0873ba0
  0x00007fb1a0873bb3:   add    $0x10,%r11d
  0x00007fb1a0873bb7:   jl     Stub::jshort_fill+101 0x00007fb1a0873bc5
  0x00007fb1a0873bb9:   vmovdqu %ymm0,(%rdi)
  0x00007fb1a0873bbd:   add    $0x20,%rdi
  0x00007fb1a0873bc1:   sub    $0x10,%r11d
  0x00007fb1a0873bc5:   vmovd  %esi,%xmm0
  0x00007fb1a0873bc9:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fb1a0873bce:   add    $0x10,%r11d
  0x00007fb1a0873bd2:   je     Stub::jshort_fill+153 0x00007fb1a0873bf9
  0x00007fb1a0873bd4:   jmp    Stub::jshort_fill+126 0x00007fb1a0873bde
  0x00007fb1a0873bd6:   vmovq  %xmm0,(%rdi)
  0x00007fb1a0873bda:   add    $0x8,%rdi
  0x00007fb1a0873bde:   sub    $0x4,%r11d
  0x00007fb1a0873be2:   jge    Stub::jshort_fill+118 0x00007fb1a0873bd6
  0x00007fb1a0873be4:   test   $0x2,%r11b
  0x00007fb1a0873be8:   je     Stub::jshort_fill+144 0x00007fb1a0873bf0
  0x00007fb1a0873bea:   mov    %esi,(%rdi)
  0x00007fb1a0873bec:   add    $0x4,%rdi
  0x00007fb1a0873bf0:   test   $0x1,%r11b
  0x00007fb1a0873bf4:   je     Stub::jshort_fill+153 0x00007fb1a0873bf9
  0x00007fb1a0873bf6:   mov    %si,(%rdi)
  0x00007fb1a0873bf9:   vzeroupper 
  0x00007fb1a0873bfc:   leaveq 
  0x00007fb1a0873bfd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_fill [0x00007fb1a0873c00, 0x00007fb1a0873c81] (129 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0873c00:   mov    %rdx,%r11
  0x00007fb1a0873c03:   push   %rbp
  0x00007fb1a0873c04:   mov    %rsp,%rbp
  0x00007fb1a0873c07:   cmp    $0x2,%r11d
  0x00007fb1a0873c0b:   jb     Stub::jint_fill+116 0x00007fb1a0873c74
  0x00007fb1a0873c11:   vmovd  %esi,%xmm0
  0x00007fb1a0873c15:   vpbroadcastd %xmm0,%ymm0
  0x00007fb1a0873c1a:   sub    $0x10,%r11d
  0x00007fb1a0873c1e:   jl     Stub::jint_fill+67 0x00007fb1a0873c43
  0x00007fb1a0873c24:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a0873c2c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0873c30:   vmovdqu %ymm0,(%rdi)
  0x00007fb1a0873c34:   vmovdqu %ymm0,0x20(%rdi)
  0x00007fb1a0873c39:   add    $0x40,%rdi
  0x00007fb1a0873c3d:   sub    $0x10,%r11d
  0x00007fb1a0873c41:   jge    Stub::jint_fill+48 0x00007fb1a0873c30
  0x00007fb1a0873c43:   add    $0x8,%r11d
  0x00007fb1a0873c47:   jl     Stub::jint_fill+85 0x00007fb1a0873c55
  0x00007fb1a0873c49:   vmovdqu %ymm0,(%rdi)
  0x00007fb1a0873c4d:   add    $0x20,%rdi
  0x00007fb1a0873c51:   sub    $0x8,%r11d
  0x00007fb1a0873c55:   vmovd  %esi,%xmm0
  0x00007fb1a0873c59:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fb1a0873c5e:   add    $0x8,%r11d
  0x00007fb1a0873c62:   je     Stub::jint_fill+124 0x00007fb1a0873c7c
  0x00007fb1a0873c64:   jmp    Stub::jint_fill+110 0x00007fb1a0873c6e
  0x00007fb1a0873c66:   vmovq  %xmm0,(%rdi)
  0x00007fb1a0873c6a:   add    $0x8,%rdi
  0x00007fb1a0873c6e:   sub    $0x2,%r11d
  0x00007fb1a0873c72:   jge    Stub::jint_fill+102 0x00007fb1a0873c66
  0x00007fb1a0873c74:   test   $0x1,%r11b
  0x00007fb1a0873c78:   je     Stub::jint_fill+124 0x00007fb1a0873c7c
  0x00007fb1a0873c7a:   mov    %esi,(%rdi)
  0x00007fb1a0873c7c:   vzeroupper 
  0x00007fb1a0873c7f:   leaveq 
  0x00007fb1a0873c80:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jbyte_fill [0x00007fb1a0873ca0, 0x00007fb1a0873d4b] (171 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0873ca0:   mov    %rdx,%r11
  0x00007fb1a0873ca3:   push   %rbp
  0x00007fb1a0873ca4:   mov    %rsp,%rbp
  0x00007fb1a0873ca7:   and    $0xff,%esi
  0x00007fb1a0873cad:   mov    %esi,%eax
  0x00007fb1a0873caf:   shl    $0x8,%eax
  0x00007fb1a0873cb2:   or     %eax,%esi
  0x00007fb1a0873cb4:   mov    %esi,%eax
  0x00007fb1a0873cb6:   shl    $0x10,%eax
  0x00007fb1a0873cb9:   or     %eax,%esi
  0x00007fb1a0873cbb:   cmp    $0x8,%r11d
  0x00007fb1a0873cbf:   jb     Stub::arrayof_jbyte_fill+132 0x00007fb1a0873d24
  0x00007fb1a0873cc5:   vmovd  %esi,%xmm0
  0x00007fb1a0873cc9:   vpbroadcastd %xmm0,%ymm0
  0x00007fb1a0873cce:   sub    $0x40,%r11d
  0x00007fb1a0873cd2:   jl     Stub::arrayof_jbyte_fill+83 0x00007fb1a0873cf3
  0x00007fb1a0873cd8:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a0873ce0:   vmovdqu %ymm0,(%rdi)
  0x00007fb1a0873ce4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007fb1a0873ce9:   add    $0x40,%rdi
  0x00007fb1a0873ced:   sub    $0x40,%r11d
  0x00007fb1a0873cf1:   jge    Stub::arrayof_jbyte_fill+64 0x00007fb1a0873ce0
  0x00007fb1a0873cf3:   add    $0x20,%r11d
  0x00007fb1a0873cf7:   jl     Stub::arrayof_jbyte_fill+101 0x00007fb1a0873d05
  0x00007fb1a0873cf9:   vmovdqu %ymm0,(%rdi)
  0x00007fb1a0873cfd:   add    $0x20,%rdi
  0x00007fb1a0873d01:   sub    $0x20,%r11d
  0x00007fb1a0873d05:   vmovd  %esi,%xmm0
  0x00007fb1a0873d09:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fb1a0873d0e:   add    $0x20,%r11d
  0x00007fb1a0873d12:   je     Stub::arrayof_jbyte_fill+166 0x00007fb1a0873d46
  0x00007fb1a0873d14:   jmp    Stub::arrayof_jbyte_fill+126 0x00007fb1a0873d1e
  0x00007fb1a0873d16:   vmovq  %xmm0,(%rdi)
  0x00007fb1a0873d1a:   add    $0x8,%rdi
  0x00007fb1a0873d1e:   sub    $0x8,%r11d
  0x00007fb1a0873d22:   jge    Stub::arrayof_jbyte_fill+118 0x00007fb1a0873d16
  0x00007fb1a0873d24:   test   $0x4,%r11b
  0x00007fb1a0873d28:   je     Stub::arrayof_jbyte_fill+144 0x00007fb1a0873d30
  0x00007fb1a0873d2a:   mov    %esi,(%rdi)
  0x00007fb1a0873d2c:   add    $0x4,%rdi
  0x00007fb1a0873d30:   test   $0x2,%r11b
  0x00007fb1a0873d34:   je     Stub::arrayof_jbyte_fill+157 0x00007fb1a0873d3d
  0x00007fb1a0873d36:   mov    %si,(%rdi)
  0x00007fb1a0873d39:   add    $0x2,%rdi
  0x00007fb1a0873d3d:   test   $0x1,%r11b
  0x00007fb1a0873d41:   je     Stub::arrayof_jbyte_fill+166 0x00007fb1a0873d46
  0x00007fb1a0873d43:   mov    %sil,(%rdi)
  0x00007fb1a0873d46:   vzeroupper 
  0x00007fb1a0873d49:   leaveq 
  0x00007fb1a0873d4a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jshort_fill [0x00007fb1a0873d60, 0x00007fb1a0873dfe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0873d60:   mov    %rdx,%r11
  0x00007fb1a0873d63:   push   %rbp
  0x00007fb1a0873d64:   mov    %rsp,%rbp
  0x00007fb1a0873d67:   and    $0xffff,%esi
  0x00007fb1a0873d6d:   mov    %esi,%eax
  0x00007fb1a0873d6f:   shl    $0x10,%eax
  0x00007fb1a0873d72:   or     %eax,%esi
  0x00007fb1a0873d74:   cmp    $0x4,%r11d
  0x00007fb1a0873d78:   jb     Stub::arrayof_jshort_fill+132 0x00007fb1a0873de4
  0x00007fb1a0873d7e:   vmovd  %esi,%xmm0
  0x00007fb1a0873d82:   vpbroadcastd %xmm0,%ymm0
  0x00007fb1a0873d87:   sub    $0x20,%r11d
  0x00007fb1a0873d8b:   jl     Stub::arrayof_jshort_fill+83 0x00007fb1a0873db3
  0x00007fb1a0873d91:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a0873d9c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0873da0:   vmovdqu %ymm0,(%rdi)
  0x00007fb1a0873da4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007fb1a0873da9:   add    $0x40,%rdi
  0x00007fb1a0873dad:   sub    $0x20,%r11d
  0x00007fb1a0873db1:   jge    Stub::arrayof_jshort_fill+64 0x00007fb1a0873da0
  0x00007fb1a0873db3:   add    $0x10,%r11d
  0x00007fb1a0873db7:   jl     Stub::arrayof_jshort_fill+101 0x00007fb1a0873dc5
  0x00007fb1a0873db9:   vmovdqu %ymm0,(%rdi)
  0x00007fb1a0873dbd:   add    $0x20,%rdi
  0x00007fb1a0873dc1:   sub    $0x10,%r11d
  0x00007fb1a0873dc5:   vmovd  %esi,%xmm0
  0x00007fb1a0873dc9:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fb1a0873dce:   add    $0x10,%r11d
  0x00007fb1a0873dd2:   je     Stub::arrayof_jshort_fill+153 0x00007fb1a0873df9
  0x00007fb1a0873dd4:   jmp    Stub::arrayof_jshort_fill+126 0x00007fb1a0873dde
  0x00007fb1a0873dd6:   vmovq  %xmm0,(%rdi)
  0x00007fb1a0873dda:   add    $0x8,%rdi
  0x00007fb1a0873dde:   sub    $0x4,%r11d
  0x00007fb1a0873de2:   jge    Stub::arrayof_jshort_fill+118 0x00007fb1a0873dd6
  0x00007fb1a0873de4:   test   $0x2,%r11b
  0x00007fb1a0873de8:   je     Stub::arrayof_jshort_fill+144 0x00007fb1a0873df0
  0x00007fb1a0873dea:   mov    %esi,(%rdi)
  0x00007fb1a0873dec:   add    $0x4,%rdi
  0x00007fb1a0873df0:   test   $0x1,%r11b
  0x00007fb1a0873df4:   je     Stub::arrayof_jshort_fill+153 0x00007fb1a0873df9
  0x00007fb1a0873df6:   mov    %si,(%rdi)
  0x00007fb1a0873df9:   vzeroupper 
  0x00007fb1a0873dfc:   leaveq 
  0x00007fb1a0873dfd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jint_fill [0x00007fb1a0873e00, 0x00007fb1a0873e81] (129 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0873e00:   mov    %rdx,%r11
  0x00007fb1a0873e03:   push   %rbp
  0x00007fb1a0873e04:   mov    %rsp,%rbp
  0x00007fb1a0873e07:   cmp    $0x2,%r11d
  0x00007fb1a0873e0b:   jb     Stub::arrayof_jint_fill+116 0x00007fb1a0873e74
  0x00007fb1a0873e11:   vmovd  %esi,%xmm0
  0x00007fb1a0873e15:   vpbroadcastd %xmm0,%ymm0
  0x00007fb1a0873e1a:   sub    $0x10,%r11d
  0x00007fb1a0873e1e:   jl     Stub::arrayof_jint_fill+67 0x00007fb1a0873e43
  0x00007fb1a0873e24:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a0873e2c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0873e30:   vmovdqu %ymm0,(%rdi)
  0x00007fb1a0873e34:   vmovdqu %ymm0,0x20(%rdi)
  0x00007fb1a0873e39:   add    $0x40,%rdi
  0x00007fb1a0873e3d:   sub    $0x10,%r11d
  0x00007fb1a0873e41:   jge    Stub::arrayof_jint_fill+48 0x00007fb1a0873e30
  0x00007fb1a0873e43:   add    $0x8,%r11d
  0x00007fb1a0873e47:   jl     Stub::arrayof_jint_fill+85 0x00007fb1a0873e55
  0x00007fb1a0873e49:   vmovdqu %ymm0,(%rdi)
  0x00007fb1a0873e4d:   add    $0x20,%rdi
  0x00007fb1a0873e51:   sub    $0x8,%r11d
  0x00007fb1a0873e55:   vmovd  %esi,%xmm0
  0x00007fb1a0873e59:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fb1a0873e5e:   add    $0x8,%r11d
  0x00007fb1a0873e62:   je     Stub::arrayof_jint_fill+124 0x00007fb1a0873e7c
  0x00007fb1a0873e64:   jmp    Stub::arrayof_jint_fill+110 0x00007fb1a0873e6e
  0x00007fb1a0873e66:   vmovq  %xmm0,(%rdi)
  0x00007fb1a0873e6a:   add    $0x8,%rdi
  0x00007fb1a0873e6e:   sub    $0x2,%r11d
  0x00007fb1a0873e72:   jge    Stub::arrayof_jint_fill+102 0x00007fb1a0873e66
  0x00007fb1a0873e74:   test   $0x1,%r11b
  0x00007fb1a0873e78:   je     Stub::arrayof_jint_fill+124 0x00007fb1a0873e7c
  0x00007fb1a0873e7a:   mov    %esi,(%rdi)
  0x00007fb1a0873e7c:   vzeroupper 
  0x00007fb1a0873e7f:   leaveq 
  0x00007fb1a0873e80:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::aescrypt_encryptBlock [0x00007fb1a0873ea0, 0x00007fb1a0873fba] (282 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0873ea0:   push   %rbp
  0x00007fb1a0873ea1:   mov    %rsp,%rbp
  0x00007fb1a0873ea4:   mov    -0x4(%rdx),%eax
  0x00007fb1a0873ea7:   vmovdqu 0x4675791(%rip),%xmm1        # 0x00007fb1a4ee9640
  0x00007fb1a0873eaf:   vmovdqu (%rdi),%xmm0
  0x00007fb1a0873eb3:   vmovdqu (%rdx),%xmm2
  0x00007fb1a0873eb7:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fb1a0873ebc:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fb1a0873ec0:   vmovdqu 0x10(%rdx),%xmm2
  0x00007fb1a0873ec5:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fb1a0873eca:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fb1a0873ecf:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0873ed4:   vmovdqu 0x30(%rdx),%xmm4
  0x00007fb1a0873ed9:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a0873ede:   vmovdqu 0x40(%rdx),%xmm5
  0x00007fb1a0873ee3:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007fb1a0873ee8:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007fb1a0873eed:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fb1a0873ef2:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007fb1a0873ef7:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007fb1a0873efc:   vmovdqu 0x50(%rdx),%xmm2
  0x00007fb1a0873f01:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fb1a0873f06:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fb1a0873f0b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0873f10:   vmovdqu 0x70(%rdx),%xmm4
  0x00007fb1a0873f15:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a0873f1a:   vmovdqu 0x80(%rdx),%xmm5
  0x00007fb1a0873f22:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007fb1a0873f27:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007fb1a0873f2c:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fb1a0873f31:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007fb1a0873f36:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007fb1a0873f3b:   vmovdqu 0x90(%rdx),%xmm2
  0x00007fb1a0873f43:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fb1a0873f48:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fb1a0873f50:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0873f55:   cmp    $0x2c,%eax
  0x00007fb1a0873f58:   je     Stub::aescrypt_encryptBlock+263 0x00007fb1a0873fa7
  0x00007fb1a0873f5a:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007fb1a0873f5f:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fb1a0873f64:   vmovdqu 0xb0(%rdx),%xmm2
  0x00007fb1a0873f6c:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fb1a0873f71:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007fb1a0873f79:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0873f7e:   cmp    $0x34,%eax
  0x00007fb1a0873f81:   je     Stub::aescrypt_encryptBlock+263 0x00007fb1a0873fa7
  0x00007fb1a0873f83:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007fb1a0873f88:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fb1a0873f8d:   vmovdqu 0xd0(%rdx),%xmm2
  0x00007fb1a0873f95:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fb1a0873f9a:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007fb1a0873fa2:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0873fa7:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007fb1a0873fac:   vaesenclast %xmm3,%xmm0,%xmm0
  0x00007fb1a0873fb1:   vmovdqu %xmm0,(%rsi)
  0x00007fb1a0873fb5:   xor    %rax,%rax
  0x00007fb1a0873fb8:   leaveq 
  0x00007fb1a0873fb9:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::aescrypt_decryptBlock [0x00007fb1a0873fc0, 0x00007fb1a08740da] (282 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0873fc0:   push   %rbp
  0x00007fb1a0873fc1:   mov    %rsp,%rbp
  0x00007fb1a0873fc4:   mov    -0x4(%rdx),%eax
  0x00007fb1a0873fc7:   vmovdqu 0x4675671(%rip),%xmm1        # 0x00007fb1a4ee9640
  0x00007fb1a0873fcf:   vmovdqu (%rdi),%xmm0
  0x00007fb1a0873fd3:   vmovdqu 0x10(%rdx),%xmm2
  0x00007fb1a0873fd8:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fb1a0873fdd:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fb1a0873fe2:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0873fe7:   vmovdqu 0x30(%rdx),%xmm4
  0x00007fb1a0873fec:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a0873ff1:   vmovdqu 0x40(%rdx),%xmm5
  0x00007fb1a0873ff6:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007fb1a0873ffb:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fb1a0873fff:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fb1a0874004:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007fb1a0874009:   vaesdec %xmm5,%xmm0,%xmm0
  0x00007fb1a087400e:   vmovdqu 0x50(%rdx),%xmm2
  0x00007fb1a0874013:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fb1a0874018:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fb1a087401d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874022:   vmovdqu 0x70(%rdx),%xmm4
  0x00007fb1a0874027:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a087402c:   vmovdqu 0x80(%rdx),%xmm5
  0x00007fb1a0874034:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007fb1a0874039:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007fb1a087403e:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fb1a0874043:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007fb1a0874048:   vaesdec %xmm5,%xmm0,%xmm0
  0x00007fb1a087404d:   vmovdqu 0x90(%rdx),%xmm2
  0x00007fb1a0874055:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fb1a087405a:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fb1a0874062:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874067:   vmovdqu (%rdx),%xmm4
  0x00007fb1a087406b:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a0874070:   cmp    $0x2c,%eax
  0x00007fb1a0874073:   je     Stub::aescrypt_decryptBlock+258 0x00007fb1a08740c2
  0x00007fb1a0874075:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007fb1a087407a:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fb1a087407f:   vmovdqu 0xb0(%rdx),%xmm2
  0x00007fb1a0874087:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fb1a087408c:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007fb1a0874094:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874099:   cmp    $0x34,%eax
  0x00007fb1a087409c:   je     Stub::aescrypt_decryptBlock+258 0x00007fb1a08740c2
  0x00007fb1a087409e:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007fb1a08740a3:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fb1a08740a8:   vmovdqu 0xd0(%rdx),%xmm2
  0x00007fb1a08740b0:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fb1a08740b5:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007fb1a08740bd:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a08740c2:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007fb1a08740c7:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fb1a08740cc:   vaesdeclast %xmm4,%xmm0,%xmm0
  0x00007fb1a08740d1:   vmovdqu %xmm0,(%rsi)
  0x00007fb1a08740d5:   xor    %rax,%rax
  0x00007fb1a08740d8:   leaveq 
  0x00007fb1a08740d9:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::cipherBlockChaining_encryptAESCrypt [0x00007fb1a08740e0, 0x00007fb1a0874308] (552 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08740e0:   push   %rbp
  0x00007fb1a08740e1:   mov    %rsp,%rbp
  0x00007fb1a08740e4:   push   %r8
  0x00007fb1a08740e6:   vmovdqu 0x4675552(%rip),%xmm1        # 0x00007fb1a4ee9640
  0x00007fb1a08740ee:   vmovdqu (%rdx),%xmm2
  0x00007fb1a08740f2:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fb1a08740f7:   vmovdqu 0x10(%rdx),%xmm3
  0x00007fb1a08740fc:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874101:   vmovdqu 0x20(%rdx),%xmm4
  0x00007fb1a0874106:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a087410b:   vmovdqu 0x30(%rdx),%xmm5
  0x00007fb1a0874110:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007fb1a0874115:   vmovdqu 0x40(%rdx),%xmm6
  0x00007fb1a087411a:   vpshufb %xmm1,%xmm6,%xmm6
  0x00007fb1a087411f:   vmovdqu 0x50(%rdx),%xmm7
  0x00007fb1a0874124:   vpshufb %xmm1,%xmm7,%xmm7
  0x00007fb1a0874129:   vmovdqu 0x60(%rdx),%xmm8
  0x00007fb1a087412e:   vpshufb %xmm1,%xmm8,%xmm8
  0x00007fb1a0874133:   vmovdqu 0x70(%rdx),%xmm9
  0x00007fb1a0874138:   vpshufb %xmm1,%xmm9,%xmm9
  0x00007fb1a087413d:   vmovdqu 0x80(%rdx),%xmm10
  0x00007fb1a0874145:   vpshufb %xmm1,%xmm10,%xmm10
  0x00007fb1a087414a:   vmovdqu 0x90(%rdx),%xmm11
  0x00007fb1a0874152:   vpshufb %xmm1,%xmm11,%xmm11
  0x00007fb1a0874157:   vmovdqu 0xa0(%rdx),%xmm12
  0x00007fb1a087415f:   vpshufb %xmm1,%xmm12,%xmm12
  0x00007fb1a0874164:   vmovdqu (%rcx),%xmm0
  0x00007fb1a0874168:   mov    -0x4(%rdx),%eax
  0x00007fb1a087416b:   cmp    $0x2c,%eax
  0x00007fb1a087416e:   jne    Stub::cipherBlockChaining_encryptAESCrypt+245 0x00007fb1a08741d5
  0x00007fb1a0874174:   movabs $0x0,%rax
  0x00007fb1a087417e:   xchg   %ax,%ax
  0x00007fb1a0874180:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007fb1a0874185:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a0874189:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fb1a087418d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fb1a0874192:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007fb1a0874197:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007fb1a087419c:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007fb1a08741a1:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007fb1a08741a6:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007fb1a08741ab:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007fb1a08741b0:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007fb1a08741b5:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007fb1a08741ba:   vaesenclast %xmm12,%xmm0,%xmm0
  0x00007fb1a08741bf:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fb1a08741c4:   add    $0x10,%rax
  0x00007fb1a08741c8:   sub    $0x10,%r8
  0x00007fb1a08741cc:   jne    Stub::cipherBlockChaining_encryptAESCrypt+160 0x00007fb1a0874180
  0x00007fb1a08741ce:   vmovdqu %xmm0,(%rcx)
  0x00007fb1a08741d2:   pop    %rax
  0x00007fb1a08741d3:   leaveq 
  0x00007fb1a08741d4:   retq   
  0x00007fb1a08741d5:   vmovdqu 0xb0(%rdx),%xmm13
  0x00007fb1a08741dd:   vpshufb %xmm1,%xmm13,%xmm13
  0x00007fb1a08741e2:   vmovdqu 0xc0(%rdx),%xmm14
  0x00007fb1a08741ea:   vpshufb %xmm1,%xmm14,%xmm14
  0x00007fb1a08741ef:   cmp    $0x34,%eax
  0x00007fb1a08741f2:   jne    Stub::cipherBlockChaining_encryptAESCrypt+397 0x00007fb1a087426d
  0x00007fb1a08741f8:   movabs $0x0,%rax
  0x00007fb1a0874202:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087420c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0874210:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007fb1a0874215:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a0874219:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fb1a087421d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fb1a0874222:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007fb1a0874227:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007fb1a087422c:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007fb1a0874231:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007fb1a0874236:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007fb1a087423b:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007fb1a0874240:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007fb1a0874245:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007fb1a087424a:   vaesenc %xmm12,%xmm0,%xmm0
  0x00007fb1a087424f:   vaesenc %xmm13,%xmm0,%xmm0
  0x00007fb1a0874254:   vaesenclast %xmm14,%xmm0,%xmm0
  0x00007fb1a0874259:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fb1a087425e:   add    $0x10,%rax
  0x00007fb1a0874262:   sub    $0x10,%r8
  0x00007fb1a0874266:   jne    Stub::cipherBlockChaining_encryptAESCrypt+304 0x00007fb1a0874210
  0x00007fb1a0874268:   jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x00007fb1a08741ce
  0x00007fb1a087426d:   vmovdqu 0xd0(%rdx),%xmm15
  0x00007fb1a0874275:   vpshufb %xmm1,%xmm15,%xmm15
  0x00007fb1a087427a:   movabs $0x0,%rax
  0x00007fb1a0874284:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a087428c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0874290:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007fb1a0874295:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a0874299:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fb1a087429d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fb1a08742a2:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007fb1a08742a7:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007fb1a08742ac:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007fb1a08742b1:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007fb1a08742b6:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007fb1a08742bb:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007fb1a08742c0:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007fb1a08742c5:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007fb1a08742ca:   vaesenc %xmm12,%xmm0,%xmm0
  0x00007fb1a08742cf:   vaesenc %xmm13,%xmm0,%xmm0
  0x00007fb1a08742d4:   vaesenc %xmm14,%xmm0,%xmm0
  0x00007fb1a08742d9:   vaesenc %xmm15,%xmm0,%xmm0
  0x00007fb1a08742de:   vmovdqu 0xe0(%rdx),%xmm1
  0x00007fb1a08742e6:   vpshufb 0x4675351(%rip),%xmm1,%xmm1        # 0x00007fb1a4ee9640
  0x00007fb1a08742ef:   vaesenclast %xmm1,%xmm0,%xmm0
  0x00007fb1a08742f4:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fb1a08742f9:   add    $0x10,%rax
  0x00007fb1a08742fd:   sub    $0x10,%r8
  0x00007fb1a0874301:   jne    Stub::cipherBlockChaining_encryptAESCrypt+432 0x00007fb1a0874290
  0x00007fb1a0874303:   jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x00007fb1a08741ce
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::cipherBlockChaining_decryptAESCrypt [0x00007fb1a0874320, 0x00007fb1a0874ae9] (1993 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0874320:   push   %rbp
  0x00007fb1a0874321:   mov    %rsp,%rbp
  0x00007fb1a0874324:   push   %r8
  0x00007fb1a0874326:   push   %rbx
  0x00007fb1a0874327:   vmovdqu 0x4675311(%rip),%xmm1        # 0x00007fb1a4ee9640
  0x00007fb1a087432f:   vmovdqu 0x10(%rdx),%xmm5
  0x00007fb1a0874334:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007fb1a0874339:   vmovdqu 0x20(%rdx),%xmm6
  0x00007fb1a087433e:   vpshufb %xmm1,%xmm6,%xmm6
  0x00007fb1a0874343:   vmovdqu 0x30(%rdx),%xmm7
  0x00007fb1a0874348:   vpshufb %xmm1,%xmm7,%xmm7
  0x00007fb1a087434d:   vmovdqu 0x40(%rdx),%xmm8
  0x00007fb1a0874352:   vpshufb %xmm1,%xmm8,%xmm8
  0x00007fb1a0874357:   vmovdqu 0x50(%rdx),%xmm9
  0x00007fb1a087435c:   vpshufb %xmm1,%xmm9,%xmm9
  0x00007fb1a0874361:   vmovdqu 0x60(%rdx),%xmm10
  0x00007fb1a0874366:   vpshufb %xmm1,%xmm10,%xmm10
  0x00007fb1a087436b:   vmovdqu 0x70(%rdx),%xmm11
  0x00007fb1a0874370:   vpshufb %xmm1,%xmm11,%xmm11
  0x00007fb1a0874375:   vmovdqu 0x80(%rdx),%xmm12
  0x00007fb1a087437d:   vpshufb %xmm1,%xmm12,%xmm12
  0x00007fb1a0874382:   vmovdqu 0x90(%rdx),%xmm13
  0x00007fb1a087438a:   vpshufb %xmm1,%xmm13,%xmm13
  0x00007fb1a087438f:   vmovdqu 0xa0(%rdx),%xmm14
  0x00007fb1a0874397:   vpshufb %xmm1,%xmm14,%xmm14
  0x00007fb1a087439c:   vmovdqu (%rdx),%xmm15
  0x00007fb1a08743a0:   vpshufb %xmm1,%xmm15,%xmm15
  0x00007fb1a08743a5:   vmovdqu (%rcx),%xmm1
  0x00007fb1a08743a9:   xor    %rax,%rax
  0x00007fb1a08743ac:   mov    -0x4(%rdx),%ebx
  0x00007fb1a08743af:   cmp    $0x34,%ebx
  0x00007fb1a08743b2:   je     Stub::cipherBlockChaining_decryptAESCrypt+603 0x00007fb1a087457b
  0x00007fb1a08743b8:   cmp    $0x3c,%ebx
  0x00007fb1a08743bb:   je     Stub::cipherBlockChaining_decryptAESCrypt+1221 0x00007fb1a08747e5
  0x00007fb1a08743c1:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a08743cc:   data16 data16 xchg %ax,%ax
  0x00007fb1a08743d0:   cmp    $0x40,%r8
  0x00007fb1a08743d4:   jl     Stub::cipherBlockChaining_decryptAESCrypt+500 0x00007fb1a0874514
  0x00007fb1a08743da:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fb1a08743df:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007fb1a08743e5:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007fb1a08743eb:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007fb1a08743f1:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007fb1a08743f5:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007fb1a08743f9:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007fb1a08743fd:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007fb1a0874401:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007fb1a0874406:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007fb1a087440b:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007fb1a0874410:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007fb1a0874415:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007fb1a087441a:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007fb1a087441f:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007fb1a0874424:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007fb1a0874429:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007fb1a087442e:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007fb1a0874433:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007fb1a0874438:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007fb1a087443d:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007fb1a0874442:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007fb1a0874447:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007fb1a087444c:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007fb1a0874451:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007fb1a0874456:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007fb1a087445b:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007fb1a0874460:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007fb1a0874465:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007fb1a087446a:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007fb1a087446f:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007fb1a0874474:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007fb1a0874479:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007fb1a087447e:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007fb1a0874483:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007fb1a0874488:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007fb1a087448d:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007fb1a0874492:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007fb1a0874497:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007fb1a087449c:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007fb1a08744a1:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007fb1a08744a6:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007fb1a08744ab:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007fb1a08744b0:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007fb1a08744b5:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007fb1a08744ba:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007fb1a08744bf:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007fb1a08744c4:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007fb1a08744c9:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a08744cd:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007fb1a08744d2:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007fb1a08744d6:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007fb1a08744dc:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007fb1a08744e0:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007fb1a08744e6:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007fb1a08744ea:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007fb1a08744f0:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fb1a08744f5:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007fb1a08744fb:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007fb1a0874501:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007fb1a0874507:   add    $0x40,%rax
  0x00007fb1a087450b:   sub    $0x40,%r8
  0x00007fb1a087450f:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+176 0x00007fb1a08743d0
  0x00007fb1a0874514:   cmp    $0x0,%r8
  0x00007fb1a0874518:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007fb1a0874ae1
  0x00007fb1a087451e:   xchg   %ax,%ax
  0x00007fb1a0874520:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fb1a0874525:   vmovdqa %xmm0,%xmm2
  0x00007fb1a0874529:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007fb1a087452d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007fb1a0874532:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007fb1a0874537:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007fb1a087453c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007fb1a0874541:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007fb1a0874546:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007fb1a087454b:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007fb1a0874550:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007fb1a0874555:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007fb1a087455a:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007fb1a087455f:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a0874563:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fb1a0874568:   vmovdqa %xmm2,%xmm1
  0x00007fb1a087456c:   add    $0x10,%rax
  0x00007fb1a0874570:   sub    $0x10,%r8
  0x00007fb1a0874574:   jne    Stub::cipherBlockChaining_decryptAESCrypt+512 0x00007fb1a0874520
  0x00007fb1a0874576:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007fb1a0874ae1
  0x00007fb1a087457b:   cmp    $0x40,%r8
  0x00007fb1a087457f:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1075 0x00007fb1a0874753
  0x00007fb1a0874585:   sub    $0x30,%rsp
  0x00007fb1a0874589:   vmovdqu %xmm15,(%rsp)
  0x00007fb1a087458e:   vmovdqu 0xb0(%rdx),%xmm15
  0x00007fb1a0874596:   vpshufb 0x46750a1(%rip),%xmm15,%xmm15        # 0x00007fb1a4ee9640
  0x00007fb1a087459f:   vmovdqu %xmm15,0x10(%rsp)
  0x00007fb1a08745a5:   vmovdqu 0xc0(%rdx),%xmm1
  0x00007fb1a08745ad:   vpshufb 0x467508a(%rip),%xmm1,%xmm1        # 0x00007fb1a4ee9640
  0x00007fb1a08745b6:   vmovdqu %xmm1,0x20(%rsp)
  0x00007fb1a08745bc:   nopl   0x0(%rax)
  0x00007fb1a08745c0:   cmp    $0x40,%r8
  0x00007fb1a08745c4:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1061 0x00007fb1a0874745
  0x00007fb1a08745ca:   vmovdqu 0x10(%rsp),%xmm15
  0x00007fb1a08745d0:   vmovdqu 0x20(%rsp),%xmm1
  0x00007fb1a08745d6:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fb1a08745db:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007fb1a08745e1:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007fb1a08745e7:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007fb1a08745ed:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007fb1a08745f1:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007fb1a08745f5:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007fb1a08745f9:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007fb1a08745fd:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007fb1a0874602:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007fb1a0874607:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007fb1a087460c:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007fb1a0874611:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007fb1a0874616:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007fb1a087461b:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007fb1a0874620:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007fb1a0874625:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007fb1a087462a:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007fb1a087462f:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007fb1a0874634:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007fb1a0874639:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007fb1a087463e:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007fb1a0874643:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007fb1a0874648:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007fb1a087464d:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007fb1a0874652:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007fb1a0874657:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007fb1a087465c:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007fb1a0874661:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007fb1a0874666:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007fb1a087466b:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007fb1a0874670:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007fb1a0874675:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007fb1a087467a:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007fb1a087467f:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007fb1a0874684:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007fb1a0874689:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007fb1a087468e:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007fb1a0874693:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007fb1a0874698:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007fb1a087469d:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007fb1a08746a2:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007fb1a08746a7:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007fb1a08746ac:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007fb1a08746b1:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007fb1a08746b6:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007fb1a08746bb:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007fb1a08746c0:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007fb1a08746c5:   vmovdqu (%rsp),%xmm15
  0x00007fb1a08746ca:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007fb1a08746cf:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007fb1a08746d4:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007fb1a08746d9:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007fb1a08746de:   vmovdqu (%rcx),%xmm1
  0x00007fb1a08746e2:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007fb1a08746e7:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007fb1a08746ec:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007fb1a08746f1:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007fb1a08746f6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a08746fa:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007fb1a08746ff:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007fb1a0874703:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007fb1a0874709:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007fb1a087470d:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007fb1a0874713:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007fb1a0874717:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007fb1a087471d:   vmovdqu %xmm1,(%rcx)
  0x00007fb1a0874721:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fb1a0874726:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007fb1a087472c:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007fb1a0874732:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007fb1a0874738:   add    $0x40,%rax
  0x00007fb1a087473c:   sub    $0x40,%r8
  0x00007fb1a0874740:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+672 0x00007fb1a08745c0
  0x00007fb1a0874745:   add    $0x30,%rsp
  0x00007fb1a0874749:   cmp    $0x0,%r8
  0x00007fb1a087474d:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007fb1a0874ae1
  0x00007fb1a0874753:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007fb1a087475b:   vpshufb 0x4674edc(%rip),%xmm3,%xmm3        # 0x00007fb1a4ee9640
  0x00007fb1a0874764:   vmovdqu 0xc0(%rdx),%xmm4
  0x00007fb1a087476c:   vpshufb 0x4674ecb(%rip),%xmm4,%xmm4        # 0x00007fb1a4ee9640
  0x00007fb1a0874775:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a0874780:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fb1a0874785:   vmovdqa %xmm0,%xmm2
  0x00007fb1a0874789:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007fb1a087478d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007fb1a0874792:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007fb1a0874797:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007fb1a087479c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007fb1a08747a1:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007fb1a08747a6:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007fb1a08747ab:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007fb1a08747b0:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007fb1a08747b5:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007fb1a08747ba:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fb1a08747bf:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007fb1a08747c4:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007fb1a08747c9:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a08747cd:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fb1a08747d2:   vmovdqa %xmm2,%xmm1
  0x00007fb1a08747d6:   add    $0x10,%rax
  0x00007fb1a08747da:   sub    $0x10,%r8
  0x00007fb1a08747de:   jne    Stub::cipherBlockChaining_decryptAESCrypt+1120 0x00007fb1a0874780
  0x00007fb1a08747e0:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007fb1a0874ae1
  0x00007fb1a08747e5:   cmp    $0x40,%r8
  0x00007fb1a08747e9:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1799 0x00007fb1a0874a27
  0x00007fb1a08747ef:   sub    $0x50,%rsp
  0x00007fb1a08747f3:   vmovdqu %xmm15,(%rsp)
  0x00007fb1a08747f8:   vmovdqu 0xd0(%rdx),%xmm15
  0x00007fb1a0874800:   vpshufb 0x4674e37(%rip),%xmm15,%xmm15        # 0x00007fb1a4ee9640
  0x00007fb1a0874809:   vmovdqu %xmm15,0x30(%rsp)
  0x00007fb1a087480f:   vmovdqu 0xe0(%rdx),%xmm1
  0x00007fb1a0874817:   vpshufb 0x4674e20(%rip),%xmm1,%xmm1        # 0x00007fb1a4ee9640
  0x00007fb1a0874820:   vmovdqu %xmm1,0x40(%rsp)
  0x00007fb1a0874826:   vmovdqu 0xb0(%rdx),%xmm15
  0x00007fb1a087482e:   vpshufb 0x4674e09(%rip),%xmm15,%xmm15        # 0x00007fb1a4ee9640
  0x00007fb1a0874837:   vmovdqu %xmm15,0x10(%rsp)
  0x00007fb1a087483d:   vmovdqu 0xc0(%rdx),%xmm1
  0x00007fb1a0874845:   vpshufb 0x4674df2(%rip),%xmm1,%xmm1        # 0x00007fb1a4ee9640
  0x00007fb1a087484e:   vmovdqu %xmm1,0x20(%rsp)
  0x00007fb1a0874854:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a087485c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0874860:   cmp    $0x40,%r8
  0x00007fb1a0874864:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1785 0x00007fb1a0874a19
  0x00007fb1a087486a:   vmovdqu 0x10(%rsp),%xmm15
  0x00007fb1a0874870:   vmovdqu 0x20(%rsp),%xmm1
  0x00007fb1a0874876:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fb1a087487b:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007fb1a0874881:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007fb1a0874887:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007fb1a087488d:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007fb1a0874891:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007fb1a0874895:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007fb1a0874899:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007fb1a087489d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007fb1a08748a2:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007fb1a08748a7:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007fb1a08748ac:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007fb1a08748b1:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007fb1a08748b6:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007fb1a08748bb:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007fb1a08748c0:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007fb1a08748c5:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007fb1a08748ca:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007fb1a08748cf:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007fb1a08748d4:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007fb1a08748d9:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007fb1a08748de:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007fb1a08748e3:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007fb1a08748e8:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007fb1a08748ed:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007fb1a08748f2:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007fb1a08748f7:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007fb1a08748fc:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007fb1a0874901:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007fb1a0874906:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007fb1a087490b:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007fb1a0874910:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007fb1a0874915:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007fb1a087491a:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007fb1a087491f:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007fb1a0874924:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007fb1a0874929:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007fb1a087492e:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007fb1a0874933:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007fb1a0874938:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007fb1a087493d:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007fb1a0874942:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007fb1a0874947:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007fb1a087494c:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007fb1a0874951:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007fb1a0874956:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007fb1a087495b:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007fb1a0874960:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007fb1a0874965:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007fb1a087496a:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007fb1a087496f:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007fb1a0874974:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007fb1a0874979:   vmovdqu 0x30(%rsp),%xmm15
  0x00007fb1a087497f:   vmovdqu 0x40(%rsp),%xmm1
  0x00007fb1a0874985:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007fb1a087498a:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007fb1a087498f:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007fb1a0874994:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007fb1a0874999:   vmovdqu (%rsp),%xmm15
  0x00007fb1a087499e:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007fb1a08749a3:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007fb1a08749a8:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007fb1a08749ad:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007fb1a08749b2:   vmovdqu (%rcx),%xmm1
  0x00007fb1a08749b6:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007fb1a08749bb:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007fb1a08749c0:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007fb1a08749c5:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007fb1a08749ca:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a08749ce:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007fb1a08749d3:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007fb1a08749d7:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007fb1a08749dd:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007fb1a08749e1:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007fb1a08749e7:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007fb1a08749eb:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007fb1a08749f1:   vmovdqu %xmm1,(%rcx)
  0x00007fb1a08749f5:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fb1a08749fa:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007fb1a0874a00:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007fb1a0874a06:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007fb1a0874a0c:   add    $0x40,%rax
  0x00007fb1a0874a10:   sub    $0x40,%r8
  0x00007fb1a0874a14:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1344 0x00007fb1a0874860
  0x00007fb1a0874a19:   add    $0x50,%rsp
  0x00007fb1a0874a1d:   cmp    $0x0,%r8
  0x00007fb1a0874a21:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007fb1a0874ae1
  0x00007fb1a0874a27:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007fb1a0874a2f:   vpshufb 0x4674c08(%rip),%xmm3,%xmm3        # 0x00007fb1a4ee9640
  0x00007fb1a0874a38:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a0874a40:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fb1a0874a45:   vmovdqa %xmm0,%xmm2
  0x00007fb1a0874a49:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007fb1a0874a4d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007fb1a0874a52:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007fb1a0874a57:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007fb1a0874a5c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007fb1a0874a61:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007fb1a0874a66:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007fb1a0874a6b:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007fb1a0874a70:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007fb1a0874a75:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007fb1a0874a7a:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fb1a0874a7f:   vmovdqu 0xc0(%rdx),%xmm4
  0x00007fb1a0874a87:   vpshufb 0x4674bb0(%rip),%xmm4,%xmm4        # 0x00007fb1a4ee9640
  0x00007fb1a0874a90:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007fb1a0874a95:   vmovdqu 0xd0(%rdx),%xmm4
  0x00007fb1a0874a9d:   vpshufb 0x4674b9a(%rip),%xmm4,%xmm4        # 0x00007fb1a4ee9640
  0x00007fb1a0874aa6:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007fb1a0874aab:   vmovdqu 0xe0(%rdx),%xmm4
  0x00007fb1a0874ab3:   vpshufb 0x4674b84(%rip),%xmm4,%xmm4        # 0x00007fb1a4ee9640
  0x00007fb1a0874abc:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007fb1a0874ac1:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007fb1a0874ac6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a0874aca:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fb1a0874acf:   vmovdqa %xmm2,%xmm1
  0x00007fb1a0874ad3:   add    $0x10,%rax
  0x00007fb1a0874ad7:   sub    $0x10,%r8
  0x00007fb1a0874adb:   jne    Stub::cipherBlockChaining_decryptAESCrypt+1824 0x00007fb1a0874a40
  0x00007fb1a0874ae1:   vmovdqu %xmm1,(%rcx)
  0x00007fb1a0874ae5:   pop    %rbx
  0x00007fb1a0874ae6:   pop    %rax
  0x00007fb1a0874ae7:   leaveq 
  0x00007fb1a0874ae8:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::counterMode_AESCrypt [0x00007fb1a0874b00, 0x00007fb1a0875cb9] (4537 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0874b00:   push   %rbp
  0x00007fb1a0874b01:   mov    %rsp,%rbp
  0x00007fb1a0874b04:   push   %r8
  0x00007fb1a0874b06:   mov    0x10(%rbp),%r10
  0x00007fb1a0874b0a:   mov    (%r10),%r11d
  0x00007fb1a0874b0d:   push   %rbx
  0x00007fb1a0874b0e:   vmovdqu (%rcx),%xmm2
  0x00007fb1a0874b12:   vmovdqu 0x4674ae6(%rip),%xmm0        # 0x00007fb1a4ee9600
  0x00007fb1a0874b1a:   vpshufb %xmm0,%xmm2,%xmm2
  0x00007fb1a0874b1f:   movabs $0x0,%rax
  0x00007fb1a0874b29:   cmp    $0x10,%r11
  0x00007fb1a0874b2d:   jae    Stub::counterMode_AESCrypt+85 0x00007fb1a0874b55
  0x00007fb1a0874b33:   cmp    $0x0,%r8
  0x00007fb1a0874b37:   jle    Stub::counterMode_AESCrypt+85 0x00007fb1a0874b55
  0x00007fb1a0874b3d:   mov    (%r9,%r11,1),%bl
  0x00007fb1a0874b41:   xor    (%rdi,%rax,1),%bl
  0x00007fb1a0874b44:   mov    %bl,(%rsi,%rax,1)
  0x00007fb1a0874b47:   add    $0x1,%rax
  0x00007fb1a0874b4b:   add    $0x1,%r11
  0x00007fb1a0874b4f:   sub    $0x1,%r8
  0x00007fb1a0874b53:   jmp    Stub::counterMode_AESCrypt+41 0x00007fb1a0874b29
  0x00007fb1a0874b55:   mov    %r11d,(%r10)
  0x00007fb1a0874b58:   vmovdqu 0x4674ae0(%rip),%xmm1        # 0x00007fb1a4ee9640
  0x00007fb1a0874b60:   mov    -0x4(%rdx),%ebx
  0x00007fb1a0874b63:   cmp    $0x34,%ebx
  0x00007fb1a0874b66:   je     Stub::counterMode_AESCrypt+1472 0x00007fb1a08750c0
  0x00007fb1a0874b6c:   cmp    $0x3c,%ebx
  0x00007fb1a0874b6f:   je     Stub::counterMode_AESCrypt+2944 0x00007fb1a0875680
  0x00007fb1a0874b75:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a0874b80:   cmp    $0x60,%r8
  0x00007fb1a0874b84:   jl     Stub::counterMode_AESCrypt+976 0x00007fb1a0874ed0
  0x00007fb1a0874b8a:   vmovdqu (%rdx),%xmm3
  0x00007fb1a0874b8e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874b93:   vmovdqa %xmm2,%xmm5
  0x00007fb1a0874b97:   vmovdqa %xmm2,%xmm6
  0x00007fb1a0874b9b:   vmovdqa %xmm2,%xmm7
  0x00007fb1a0874b9f:   vmovdqa %xmm2,%xmm8
  0x00007fb1a0874ba3:   vmovdqa %xmm2,%xmm9
  0x00007fb1a0874ba7:   vmovdqa %xmm2,%xmm10
  0x00007fb1a0874bab:   vpextrq $0x0,%xmm6,%rbx
  0x00007fb1a0874bb1:   add    $0x1,%rbx
  0x00007fb1a0874bb5:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007fb1a0874bbb:   jae    Stub::counterMode_AESCrypt+209 0x00007fb1a0874bd1
  0x00007fb1a0874bc1:   vpextrq $0x1,%xmm6,%rbx
  0x00007fb1a0874bc7:   add    $0x1,%rbx
  0x00007fb1a0874bcb:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007fb1a0874bd1:   vpextrq $0x0,%xmm7,%rbx
  0x00007fb1a0874bd7:   add    $0x2,%rbx
  0x00007fb1a0874bdb:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007fb1a0874be1:   jae    Stub::counterMode_AESCrypt+247 0x00007fb1a0874bf7
  0x00007fb1a0874be7:   vpextrq $0x1,%xmm7,%rbx
  0x00007fb1a0874bed:   add    $0x1,%rbx
  0x00007fb1a0874bf1:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007fb1a0874bf7:   vpextrq $0x0,%xmm8,%rbx
  0x00007fb1a0874bfd:   add    $0x3,%rbx
  0x00007fb1a0874c01:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007fb1a0874c07:   jae    Stub::counterMode_AESCrypt+285 0x00007fb1a0874c1d
  0x00007fb1a0874c0d:   vpextrq $0x1,%xmm8,%rbx
  0x00007fb1a0874c13:   add    $0x1,%rbx
  0x00007fb1a0874c17:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007fb1a0874c1d:   vpextrq $0x0,%xmm9,%rbx
  0x00007fb1a0874c23:   add    $0x4,%rbx
  0x00007fb1a0874c27:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007fb1a0874c2d:   jae    Stub::counterMode_AESCrypt+323 0x00007fb1a0874c43
  0x00007fb1a0874c33:   vpextrq $0x1,%xmm9,%rbx
  0x00007fb1a0874c39:   add    $0x1,%rbx
  0x00007fb1a0874c3d:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007fb1a0874c43:   vpextrq $0x0,%xmm10,%rbx
  0x00007fb1a0874c49:   add    $0x5,%rbx
  0x00007fb1a0874c4d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007fb1a0874c53:   jae    Stub::counterMode_AESCrypt+361 0x00007fb1a0874c69
  0x00007fb1a0874c59:   vpextrq $0x1,%xmm10,%rbx
  0x00007fb1a0874c5f:   add    $0x1,%rbx
  0x00007fb1a0874c63:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007fb1a0874c69:   vpextrq $0x0,%xmm2,%rbx
  0x00007fb1a0874c6f:   add    $0x6,%rbx
  0x00007fb1a0874c73:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007fb1a0874c79:   jae    Stub::counterMode_AESCrypt+399 0x00007fb1a0874c8f
  0x00007fb1a0874c7f:   vpextrq $0x1,%xmm2,%rbx
  0x00007fb1a0874c85:   add    $0x1,%rbx
  0x00007fb1a0874c89:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007fb1a0874c8f:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007fb1a0874c94:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007fb1a0874c99:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007fb1a0874c9e:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007fb1a0874ca3:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007fb1a0874ca8:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007fb1a0874cad:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007fb1a0874cb1:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007fb1a0874cb5:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007fb1a0874cb9:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007fb1a0874cbd:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007fb1a0874cc1:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007fb1a0874cc5:   vmovdqu 0x10(%rdx),%xmm4
  0x00007fb1a0874cca:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a0874ccf:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fb1a0874cd4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874cd9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a0874cde:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a0874ce3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a0874ce8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a0874ced:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a0874cf2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a0874cf7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874cfc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a0874d01:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a0874d06:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a0874d0b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a0874d10:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a0874d15:   vmovdqu 0x30(%rdx),%xmm4
  0x00007fb1a0874d1a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a0874d1f:   vmovdqu 0x40(%rdx),%xmm3
  0x00007fb1a0874d24:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874d29:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a0874d2e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a0874d33:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a0874d38:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a0874d3d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a0874d42:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a0874d47:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874d4c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a0874d51:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a0874d56:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a0874d5b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a0874d60:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a0874d65:   vmovdqu 0x50(%rdx),%xmm4
  0x00007fb1a0874d6a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a0874d6f:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fb1a0874d74:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874d79:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a0874d7e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a0874d83:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a0874d88:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a0874d8d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a0874d92:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a0874d97:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874d9c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a0874da1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a0874da6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a0874dab:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a0874db0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a0874db5:   vmovdqu 0x70(%rdx),%xmm4
  0x00007fb1a0874dba:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a0874dbf:   vmovdqu 0x80(%rdx),%xmm3
  0x00007fb1a0874dc7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874dcc:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a0874dd1:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a0874dd6:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a0874ddb:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a0874de0:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a0874de5:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a0874dea:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874def:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a0874df4:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a0874df9:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a0874dfe:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a0874e03:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a0874e08:   vmovdqu 0x90(%rdx),%xmm4
  0x00007fb1a0874e10:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a0874e15:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fb1a0874e1d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874e22:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a0874e27:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a0874e2c:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a0874e31:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a0874e36:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a0874e3b:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a0874e40:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007fb1a0874e45:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007fb1a0874e4a:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007fb1a0874e4f:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007fb1a0874e54:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007fb1a0874e59:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007fb1a0874e5e:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007fb1a0874e63:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007fb1a0874e69:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007fb1a0874e6f:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007fb1a0874e75:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007fb1a0874e7b:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007fb1a0874e81:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fb1a0874e86:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007fb1a0874e8b:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007fb1a0874e90:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007fb1a0874e95:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007fb1a0874e99:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007fb1a0874e9d:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007fb1a0874ea2:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007fb1a0874ea8:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007fb1a0874eae:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007fb1a0874eb4:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007fb1a0874eba:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007fb1a0874ec0:   add    $0x60,%rax
  0x00007fb1a0874ec4:   sub    $0x60,%r8
  0x00007fb1a0874ec8:   jmpq   Stub::counterMode_AESCrypt+128 0x00007fb1a0874b80
  0x00007fb1a0874ecd:   data16 xchg %ax,%ax
  0x00007fb1a0874ed0:   cmp    $0x0,%r8
  0x00007fb1a0874ed4:   jle    Stub::counterMode_AESCrypt+4524 0x00007fb1a0875cac
  0x00007fb1a0874eda:   vmovdqu (%rdx),%xmm3
  0x00007fb1a0874ede:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874ee3:   vmovdqa %xmm2,%xmm5
  0x00007fb1a0874ee7:   vpextrq $0x0,%xmm2,%rbx
  0x00007fb1a0874eed:   add    $0x1,%rbx
  0x00007fb1a0874ef1:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007fb1a0874ef7:   jae    Stub::counterMode_AESCrypt+1037 0x00007fb1a0874f0d
  0x00007fb1a0874efd:   vpextrq $0x1,%xmm2,%rbx
  0x00007fb1a0874f03:   add    $0x1,%rbx
  0x00007fb1a0874f07:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007fb1a0874f0d:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007fb1a0874f12:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007fb1a0874f16:   vmovdqu 0x10(%rdx),%xmm3
  0x00007fb1a0874f1b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874f20:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874f25:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fb1a0874f2a:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874f2f:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874f34:   vmovdqu 0x30(%rdx),%xmm3
  0x00007fb1a0874f39:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874f3e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874f43:   vmovdqu 0x40(%rdx),%xmm3
  0x00007fb1a0874f48:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874f4d:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874f52:   vmovdqu 0x50(%rdx),%xmm3
  0x00007fb1a0874f57:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874f5c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874f61:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fb1a0874f66:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874f6b:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874f70:   vmovdqu 0x70(%rdx),%xmm3
  0x00007fb1a0874f75:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874f7a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874f7f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007fb1a0874f87:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874f8c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874f91:   vmovdqu 0x90(%rdx),%xmm3
  0x00007fb1a0874f99:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874f9e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0874fa3:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fb1a0874fab:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0874fb0:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007fb1a0874fb5:   cmp    $0x10,%r8
  0x00007fb1a0874fb9:   jl     Stub::counterMode_AESCrypt+1243 0x00007fb1a0874fdb
  0x00007fb1a0874fbf:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007fb1a0874fc4:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fb1a0874fc9:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007fb1a0874fce:   add    $0x10,%rax
  0x00007fb1a0874fd2:   sub    $0x10,%r8
  0x00007fb1a0874fd6:   jmpq   Stub::counterMode_AESCrypt+976 0x00007fb1a0874ed0
  0x00007fb1a0874fdb:   add    %r8,%rax
  0x00007fb1a0874fde:   test   $0x8,%r8b
  0x00007fb1a0874fe2:   je     Stub::counterMode_AESCrypt+1267 0x00007fb1a0874ff3
  0x00007fb1a0874fe8:   sub    $0x8,%rax
  0x00007fb1a0874fec:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fb1a0874ff3:   test   $0x4,%r8b
  0x00007fb1a0874ff7:   je     Stub::counterMode_AESCrypt+1294 0x00007fb1a087500e
  0x00007fb1a0874ffd:   sub    $0x4,%rax
  0x00007fb1a0875001:   vpslldq $0x4,%xmm11,%xmm11
  0x00007fb1a0875007:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fb1a087500e:   test   $0x2,%r8b
  0x00007fb1a0875012:   je     Stub::counterMode_AESCrypt+1320 0x00007fb1a0875028
  0x00007fb1a0875018:   sub    $0x2,%rax
  0x00007fb1a087501c:   vpslldq $0x2,%xmm11,%xmm11
  0x00007fb1a0875022:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fb1a0875028:   test   $0x1,%r8b
  0x00007fb1a087502c:   je     Stub::counterMode_AESCrypt+1347 0x00007fb1a0875043
  0x00007fb1a0875032:   sub    $0x1,%rax
  0x00007fb1a0875036:   vpslldq $0x1,%xmm11,%xmm11
  0x00007fb1a087503c:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fb1a0875043:   vmovdqu %xmm5,(%r9)
  0x00007fb1a0875048:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fb1a087504d:   test   $0x8,%r8b
  0x00007fb1a0875051:   je     Stub::counterMode_AESCrypt+1383 0x00007fb1a0875067
  0x00007fb1a0875057:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fb1a087505e:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007fb1a0875063:   add    $0x8,%rax
  0x00007fb1a0875067:   test   $0x4,%r8b
  0x00007fb1a087506b:   je     Stub::counterMode_AESCrypt+1409 0x00007fb1a0875081
  0x00007fb1a0875071:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fb1a0875078:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007fb1a087507d:   add    $0x4,%rax
  0x00007fb1a0875081:   test   $0x2,%r8b
  0x00007fb1a0875085:   je     Stub::counterMode_AESCrypt+1435 0x00007fb1a087509b
  0x00007fb1a087508b:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fb1a0875092:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007fb1a0875097:   add    $0x2,%rax
  0x00007fb1a087509b:   test   $0x1,%r8b
  0x00007fb1a087509f:   je     Stub::counterMode_AESCrypt+1452 0x00007fb1a08750ac
  0x00007fb1a08750a5:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fb1a08750ac:   mov    %r8d,(%r10)
  0x00007fb1a08750af:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007fb1a0875cac
  0x00007fb1a08750b4:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a08750bc:   data16 data16 xchg %ax,%ax
  0x00007fb1a08750c0:   cmp    $0x60,%r8
  0x00007fb1a08750c4:   jl     Stub::counterMode_AESCrypt+2416 0x00007fb1a0875470
  0x00007fb1a08750ca:   vmovdqu (%rdx),%xmm3
  0x00007fb1a08750ce:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a08750d3:   vmovdqa %xmm2,%xmm5
  0x00007fb1a08750d7:   vmovdqa %xmm2,%xmm6
  0x00007fb1a08750db:   vmovdqa %xmm2,%xmm7
  0x00007fb1a08750df:   vmovdqa %xmm2,%xmm8
  0x00007fb1a08750e3:   vmovdqa %xmm2,%xmm9
  0x00007fb1a08750e7:   vmovdqa %xmm2,%xmm10
  0x00007fb1a08750eb:   vpextrq $0x0,%xmm6,%rbx
  0x00007fb1a08750f1:   add    $0x1,%rbx
  0x00007fb1a08750f5:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007fb1a08750fb:   jae    Stub::counterMode_AESCrypt+1553 0x00007fb1a0875111
  0x00007fb1a0875101:   vpextrq $0x1,%xmm6,%rbx
  0x00007fb1a0875107:   add    $0x1,%rbx
  0x00007fb1a087510b:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007fb1a0875111:   vpextrq $0x0,%xmm7,%rbx
  0x00007fb1a0875117:   add    $0x2,%rbx
  0x00007fb1a087511b:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007fb1a0875121:   jae    Stub::counterMode_AESCrypt+1591 0x00007fb1a0875137
  0x00007fb1a0875127:   vpextrq $0x1,%xmm7,%rbx
  0x00007fb1a087512d:   add    $0x1,%rbx
  0x00007fb1a0875131:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007fb1a0875137:   vpextrq $0x0,%xmm8,%rbx
  0x00007fb1a087513d:   add    $0x3,%rbx
  0x00007fb1a0875141:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007fb1a0875147:   jae    Stub::counterMode_AESCrypt+1629 0x00007fb1a087515d
  0x00007fb1a087514d:   vpextrq $0x1,%xmm8,%rbx
  0x00007fb1a0875153:   add    $0x1,%rbx
  0x00007fb1a0875157:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007fb1a087515d:   vpextrq $0x0,%xmm9,%rbx
  0x00007fb1a0875163:   add    $0x4,%rbx
  0x00007fb1a0875167:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007fb1a087516d:   jae    Stub::counterMode_AESCrypt+1667 0x00007fb1a0875183
  0x00007fb1a0875173:   vpextrq $0x1,%xmm9,%rbx
  0x00007fb1a0875179:   add    $0x1,%rbx
  0x00007fb1a087517d:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007fb1a0875183:   vpextrq $0x0,%xmm10,%rbx
  0x00007fb1a0875189:   add    $0x5,%rbx
  0x00007fb1a087518d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007fb1a0875193:   jae    Stub::counterMode_AESCrypt+1705 0x00007fb1a08751a9
  0x00007fb1a0875199:   vpextrq $0x1,%xmm10,%rbx
  0x00007fb1a087519f:   add    $0x1,%rbx
  0x00007fb1a08751a3:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007fb1a08751a9:   vpextrq $0x0,%xmm2,%rbx
  0x00007fb1a08751af:   add    $0x6,%rbx
  0x00007fb1a08751b3:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007fb1a08751b9:   jae    Stub::counterMode_AESCrypt+1743 0x00007fb1a08751cf
  0x00007fb1a08751bf:   vpextrq $0x1,%xmm2,%rbx
  0x00007fb1a08751c5:   add    $0x1,%rbx
  0x00007fb1a08751c9:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007fb1a08751cf:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007fb1a08751d4:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007fb1a08751d9:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007fb1a08751de:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007fb1a08751e3:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007fb1a08751e8:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007fb1a08751ed:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007fb1a08751f1:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007fb1a08751f5:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007fb1a08751f9:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007fb1a08751fd:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007fb1a0875201:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007fb1a0875205:   vmovdqu 0x10(%rdx),%xmm4
  0x00007fb1a087520a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a087520f:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fb1a0875214:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875219:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a087521e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a0875223:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a0875228:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a087522d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a0875232:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a0875237:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a087523c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a0875241:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a0875246:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a087524b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a0875250:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a0875255:   vmovdqu 0x30(%rdx),%xmm4
  0x00007fb1a087525a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a087525f:   vmovdqu 0x40(%rdx),%xmm3
  0x00007fb1a0875264:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875269:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a087526e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a0875273:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a0875278:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a087527d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a0875282:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a0875287:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a087528c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a0875291:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a0875296:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a087529b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a08752a0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a08752a5:   vmovdqu 0x50(%rdx),%xmm4
  0x00007fb1a08752aa:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a08752af:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fb1a08752b4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a08752b9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a08752be:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a08752c3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a08752c8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a08752cd:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a08752d2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a08752d7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a08752dc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a08752e1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a08752e6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a08752eb:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a08752f0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a08752f5:   vmovdqu 0x70(%rdx),%xmm4
  0x00007fb1a08752fa:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a08752ff:   vmovdqu 0x80(%rdx),%xmm3
  0x00007fb1a0875307:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a087530c:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a0875311:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a0875316:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a087531b:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a0875320:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a0875325:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a087532a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a087532f:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a0875334:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a0875339:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a087533e:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a0875343:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a0875348:   vmovdqu 0x90(%rdx),%xmm4
  0x00007fb1a0875350:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a0875355:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fb1a087535d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875362:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a0875367:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a087536c:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a0875371:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a0875376:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a087537b:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a0875380:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875385:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a087538a:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a087538f:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a0875394:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a0875399:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a087539e:   vmovdqu 0xb0(%rdx),%xmm4
  0x00007fb1a08753a6:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a08753ab:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007fb1a08753b3:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a08753b8:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a08753bd:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a08753c2:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a08753c7:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a08753cc:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a08753d1:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a08753d6:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007fb1a08753db:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007fb1a08753e0:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007fb1a08753e5:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007fb1a08753ea:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007fb1a08753ef:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007fb1a08753f4:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007fb1a08753f9:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007fb1a08753ff:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007fb1a0875405:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007fb1a087540b:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007fb1a0875411:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007fb1a0875417:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fb1a087541c:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007fb1a0875421:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007fb1a0875426:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007fb1a087542b:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007fb1a087542f:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007fb1a0875433:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007fb1a0875438:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007fb1a087543e:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007fb1a0875444:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007fb1a087544a:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007fb1a0875450:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007fb1a0875456:   add    $0x60,%rax
  0x00007fb1a087545a:   sub    $0x60,%r8
  0x00007fb1a087545e:   jmpq   Stub::counterMode_AESCrypt+1472 0x00007fb1a08750c0
  0x00007fb1a0875463:   nopw   0x0(%rax,%rax,1)
  0x00007fb1a087546c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0875470:   cmp    $0x0,%r8
  0x00007fb1a0875474:   jle    Stub::counterMode_AESCrypt+4524 0x00007fb1a0875cac
  0x00007fb1a087547a:   vmovdqu (%rdx),%xmm3
  0x00007fb1a087547e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875483:   vmovdqa %xmm2,%xmm5
  0x00007fb1a0875487:   vpextrq $0x0,%xmm2,%rbx
  0x00007fb1a087548d:   add    $0x1,%rbx
  0x00007fb1a0875491:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007fb1a0875497:   jae    Stub::counterMode_AESCrypt+2477 0x00007fb1a08754ad
  0x00007fb1a087549d:   vpextrq $0x1,%xmm2,%rbx
  0x00007fb1a08754a3:   add    $0x1,%rbx
  0x00007fb1a08754a7:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007fb1a08754ad:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007fb1a08754b2:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007fb1a08754b6:   vmovdqu 0x10(%rdx),%xmm3
  0x00007fb1a08754bb:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a08754c0:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a08754c5:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fb1a08754ca:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a08754cf:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a08754d4:   vmovdqu 0x30(%rdx),%xmm3
  0x00007fb1a08754d9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a08754de:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a08754e3:   vmovdqu 0x40(%rdx),%xmm3
  0x00007fb1a08754e8:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a08754ed:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a08754f2:   vmovdqu 0x50(%rdx),%xmm3
  0x00007fb1a08754f7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a08754fc:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875501:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fb1a0875506:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a087550b:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875510:   vmovdqu 0x70(%rdx),%xmm3
  0x00007fb1a0875515:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a087551a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a087551f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007fb1a0875527:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a087552c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875531:   vmovdqu 0x90(%rdx),%xmm3
  0x00007fb1a0875539:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a087553e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875543:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fb1a087554b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875550:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875555:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007fb1a087555d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875562:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875567:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007fb1a087556f:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875574:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007fb1a0875579:   cmp    $0x10,%r8
  0x00007fb1a087557d:   jl     Stub::counterMode_AESCrypt+2719 0x00007fb1a087559f
  0x00007fb1a0875583:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007fb1a0875588:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fb1a087558d:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007fb1a0875592:   add    $0x10,%rax
  0x00007fb1a0875596:   sub    $0x10,%r8
  0x00007fb1a087559a:   jmpq   Stub::counterMode_AESCrypt+2416 0x00007fb1a0875470
  0x00007fb1a087559f:   add    %r8,%rax
  0x00007fb1a08755a2:   test   $0x8,%r8b
  0x00007fb1a08755a6:   je     Stub::counterMode_AESCrypt+2743 0x00007fb1a08755b7
  0x00007fb1a08755ac:   sub    $0x8,%rax
  0x00007fb1a08755b0:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fb1a08755b7:   test   $0x4,%r8b
  0x00007fb1a08755bb:   je     Stub::counterMode_AESCrypt+2770 0x00007fb1a08755d2
  0x00007fb1a08755c1:   sub    $0x4,%rax
  0x00007fb1a08755c5:   vpslldq $0x4,%xmm11,%xmm11
  0x00007fb1a08755cb:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fb1a08755d2:   test   $0x2,%r8b
  0x00007fb1a08755d6:   je     Stub::counterMode_AESCrypt+2796 0x00007fb1a08755ec
  0x00007fb1a08755dc:   sub    $0x2,%rax
  0x00007fb1a08755e0:   vpslldq $0x2,%xmm11,%xmm11
  0x00007fb1a08755e6:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fb1a08755ec:   test   $0x1,%r8b
  0x00007fb1a08755f0:   je     Stub::counterMode_AESCrypt+2823 0x00007fb1a0875607
  0x00007fb1a08755f6:   sub    $0x1,%rax
  0x00007fb1a08755fa:   vpslldq $0x1,%xmm11,%xmm11
  0x00007fb1a0875600:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fb1a0875607:   vmovdqu %xmm5,(%r9)
  0x00007fb1a087560c:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fb1a0875611:   test   $0x8,%r8b
  0x00007fb1a0875615:   je     Stub::counterMode_AESCrypt+2859 0x00007fb1a087562b
  0x00007fb1a087561b:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fb1a0875622:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007fb1a0875627:   add    $0x8,%rax
  0x00007fb1a087562b:   test   $0x4,%r8b
  0x00007fb1a087562f:   je     Stub::counterMode_AESCrypt+2885 0x00007fb1a0875645
  0x00007fb1a0875635:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fb1a087563c:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007fb1a0875641:   add    $0x4,%rax
  0x00007fb1a0875645:   test   $0x2,%r8b
  0x00007fb1a0875649:   je     Stub::counterMode_AESCrypt+2911 0x00007fb1a087565f
  0x00007fb1a087564f:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fb1a0875656:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007fb1a087565b:   add    $0x2,%rax
  0x00007fb1a087565f:   test   $0x1,%r8b
  0x00007fb1a0875663:   je     Stub::counterMode_AESCrypt+2928 0x00007fb1a0875670
  0x00007fb1a0875669:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fb1a0875670:   mov    %r8d,(%r10)
  0x00007fb1a0875673:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007fb1a0875cac
  0x00007fb1a0875678:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a0875680:   cmp    $0x60,%r8
  0x00007fb1a0875684:   jl     Stub::counterMode_AESCrypt+3968 0x00007fb1a0875a80
  0x00007fb1a087568a:   vmovdqu (%rdx),%xmm3
  0x00007fb1a087568e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875693:   vmovdqa %xmm2,%xmm5
  0x00007fb1a0875697:   vmovdqa %xmm2,%xmm6
  0x00007fb1a087569b:   vmovdqa %xmm2,%xmm7
  0x00007fb1a087569f:   vmovdqa %xmm2,%xmm8
  0x00007fb1a08756a3:   vmovdqa %xmm2,%xmm9
  0x00007fb1a08756a7:   vmovdqa %xmm2,%xmm10
  0x00007fb1a08756ab:   vpextrq $0x0,%xmm6,%rbx
  0x00007fb1a08756b1:   add    $0x1,%rbx
  0x00007fb1a08756b5:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007fb1a08756bb:   jae    Stub::counterMode_AESCrypt+3025 0x00007fb1a08756d1
  0x00007fb1a08756c1:   vpextrq $0x1,%xmm6,%rbx
  0x00007fb1a08756c7:   add    $0x1,%rbx
  0x00007fb1a08756cb:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007fb1a08756d1:   vpextrq $0x0,%xmm7,%rbx
  0x00007fb1a08756d7:   add    $0x2,%rbx
  0x00007fb1a08756db:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007fb1a08756e1:   jae    Stub::counterMode_AESCrypt+3063 0x00007fb1a08756f7
  0x00007fb1a08756e7:   vpextrq $0x1,%xmm7,%rbx
  0x00007fb1a08756ed:   add    $0x1,%rbx
  0x00007fb1a08756f1:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007fb1a08756f7:   vpextrq $0x0,%xmm8,%rbx
  0x00007fb1a08756fd:   add    $0x3,%rbx
  0x00007fb1a0875701:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007fb1a0875707:   jae    Stub::counterMode_AESCrypt+3101 0x00007fb1a087571d
  0x00007fb1a087570d:   vpextrq $0x1,%xmm8,%rbx
  0x00007fb1a0875713:   add    $0x1,%rbx
  0x00007fb1a0875717:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007fb1a087571d:   vpextrq $0x0,%xmm9,%rbx
  0x00007fb1a0875723:   add    $0x4,%rbx
  0x00007fb1a0875727:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007fb1a087572d:   jae    Stub::counterMode_AESCrypt+3139 0x00007fb1a0875743
  0x00007fb1a0875733:   vpextrq $0x1,%xmm9,%rbx
  0x00007fb1a0875739:   add    $0x1,%rbx
  0x00007fb1a087573d:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007fb1a0875743:   vpextrq $0x0,%xmm10,%rbx
  0x00007fb1a0875749:   add    $0x5,%rbx
  0x00007fb1a087574d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007fb1a0875753:   jae    Stub::counterMode_AESCrypt+3177 0x00007fb1a0875769
  0x00007fb1a0875759:   vpextrq $0x1,%xmm10,%rbx
  0x00007fb1a087575f:   add    $0x1,%rbx
  0x00007fb1a0875763:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007fb1a0875769:   vpextrq $0x0,%xmm2,%rbx
  0x00007fb1a087576f:   add    $0x6,%rbx
  0x00007fb1a0875773:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007fb1a0875779:   jae    Stub::counterMode_AESCrypt+3215 0x00007fb1a087578f
  0x00007fb1a087577f:   vpextrq $0x1,%xmm2,%rbx
  0x00007fb1a0875785:   add    $0x1,%rbx
  0x00007fb1a0875789:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007fb1a087578f:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007fb1a0875794:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007fb1a0875799:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007fb1a087579e:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007fb1a08757a3:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007fb1a08757a8:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007fb1a08757ad:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007fb1a08757b1:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007fb1a08757b5:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007fb1a08757b9:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007fb1a08757bd:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007fb1a08757c1:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007fb1a08757c5:   vmovdqu 0x10(%rdx),%xmm4
  0x00007fb1a08757ca:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a08757cf:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fb1a08757d4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a08757d9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a08757de:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a08757e3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a08757e8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a08757ed:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a08757f2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a08757f7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a08757fc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a0875801:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a0875806:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a087580b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a0875810:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a0875815:   vmovdqu 0x30(%rdx),%xmm4
  0x00007fb1a087581a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a087581f:   vmovdqu 0x40(%rdx),%xmm3
  0x00007fb1a0875824:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875829:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a087582e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a0875833:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a0875838:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a087583d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a0875842:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a0875847:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a087584c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a0875851:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a0875856:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a087585b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a0875860:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a0875865:   vmovdqu 0x50(%rdx),%xmm4
  0x00007fb1a087586a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a087586f:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fb1a0875874:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875879:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a087587e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a0875883:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a0875888:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a087588d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a0875892:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a0875897:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a087589c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a08758a1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a08758a6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a08758ab:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a08758b0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a08758b5:   vmovdqu 0x70(%rdx),%xmm4
  0x00007fb1a08758ba:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a08758bf:   vmovdqu 0x80(%rdx),%xmm3
  0x00007fb1a08758c7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a08758cc:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a08758d1:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a08758d6:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a08758db:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a08758e0:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a08758e5:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a08758ea:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a08758ef:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a08758f4:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a08758f9:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a08758fe:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a0875903:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a0875908:   vmovdqu 0x90(%rdx),%xmm4
  0x00007fb1a0875910:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a0875915:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fb1a087591d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875922:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a0875927:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a087592c:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a0875931:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a0875936:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a087593b:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a0875940:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875945:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a087594a:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a087594f:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a0875954:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a0875959:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a087595e:   vmovdqu 0xb0(%rdx),%xmm4
  0x00007fb1a0875966:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a087596b:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007fb1a0875973:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875978:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a087597d:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a0875982:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a0875987:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a087598c:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a0875991:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a0875996:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a087599b:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fb1a08759a0:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fb1a08759a5:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fb1a08759aa:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fb1a08759af:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fb1a08759b4:   vmovdqu 0xd0(%rdx),%xmm4
  0x00007fb1a08759bc:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fb1a08759c1:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007fb1a08759c9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a08759ce:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fb1a08759d3:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fb1a08759d8:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fb1a08759dd:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fb1a08759e2:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fb1a08759e7:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fb1a08759ec:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007fb1a08759f1:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007fb1a08759f6:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007fb1a08759fb:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007fb1a0875a00:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007fb1a0875a05:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007fb1a0875a0a:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007fb1a0875a0f:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007fb1a0875a15:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007fb1a0875a1b:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007fb1a0875a21:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007fb1a0875a27:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007fb1a0875a2d:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fb1a0875a32:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007fb1a0875a37:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007fb1a0875a3c:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007fb1a0875a41:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007fb1a0875a45:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007fb1a0875a49:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007fb1a0875a4e:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007fb1a0875a54:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007fb1a0875a5a:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007fb1a0875a60:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007fb1a0875a66:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007fb1a0875a6c:   add    $0x60,%rax
  0x00007fb1a0875a70:   sub    $0x60,%r8
  0x00007fb1a0875a74:   jmpq   Stub::counterMode_AESCrypt+2944 0x00007fb1a0875680
  0x00007fb1a0875a79:   nopl   0x0(%rax)
  0x00007fb1a0875a80:   cmp    $0x0,%r8
  0x00007fb1a0875a84:   jle    Stub::counterMode_AESCrypt+4524 0x00007fb1a0875cac
  0x00007fb1a0875a8a:   vmovdqu (%rdx),%xmm3
  0x00007fb1a0875a8e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875a93:   vmovdqa %xmm2,%xmm5
  0x00007fb1a0875a97:   vpextrq $0x0,%xmm2,%rbx
  0x00007fb1a0875a9d:   add    $0x1,%rbx
  0x00007fb1a0875aa1:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007fb1a0875aa7:   jae    Stub::counterMode_AESCrypt+4029 0x00007fb1a0875abd
  0x00007fb1a0875aad:   vpextrq $0x1,%xmm2,%rbx
  0x00007fb1a0875ab3:   add    $0x1,%rbx
  0x00007fb1a0875ab7:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007fb1a0875abd:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007fb1a0875ac2:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007fb1a0875ac6:   vmovdqu 0x10(%rdx),%xmm3
  0x00007fb1a0875acb:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875ad0:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875ad5:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fb1a0875ada:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875adf:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875ae4:   vmovdqu 0x30(%rdx),%xmm3
  0x00007fb1a0875ae9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875aee:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875af3:   vmovdqu 0x40(%rdx),%xmm3
  0x00007fb1a0875af8:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875afd:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875b02:   vmovdqu 0x50(%rdx),%xmm3
  0x00007fb1a0875b07:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875b0c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875b11:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fb1a0875b16:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875b1b:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875b20:   vmovdqu 0x70(%rdx),%xmm3
  0x00007fb1a0875b25:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875b2a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875b2f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007fb1a0875b37:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875b3c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875b41:   vmovdqu 0x90(%rdx),%xmm3
  0x00007fb1a0875b49:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875b4e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875b53:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fb1a0875b5b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875b60:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875b65:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007fb1a0875b6d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875b72:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875b77:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007fb1a0875b7f:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875b84:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875b89:   vmovdqu 0xd0(%rdx),%xmm3
  0x00007fb1a0875b91:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875b96:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fb1a0875b9b:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007fb1a0875ba3:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fb1a0875ba8:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007fb1a0875bad:   cmp    $0x10,%r8
  0x00007fb1a0875bb1:   jl     Stub::counterMode_AESCrypt+4307 0x00007fb1a0875bd3
  0x00007fb1a0875bb7:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007fb1a0875bbc:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fb1a0875bc1:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007fb1a0875bc6:   add    $0x10,%rax
  0x00007fb1a0875bca:   sub    $0x10,%r8
  0x00007fb1a0875bce:   jmpq   Stub::counterMode_AESCrypt+3968 0x00007fb1a0875a80
  0x00007fb1a0875bd3:   add    %r8,%rax
  0x00007fb1a0875bd6:   test   $0x8,%r8b
  0x00007fb1a0875bda:   je     Stub::counterMode_AESCrypt+4331 0x00007fb1a0875beb
  0x00007fb1a0875be0:   sub    $0x8,%rax
  0x00007fb1a0875be4:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fb1a0875beb:   test   $0x4,%r8b
  0x00007fb1a0875bef:   je     Stub::counterMode_AESCrypt+4358 0x00007fb1a0875c06
  0x00007fb1a0875bf5:   sub    $0x4,%rax
  0x00007fb1a0875bf9:   vpslldq $0x4,%xmm11,%xmm11
  0x00007fb1a0875bff:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fb1a0875c06:   test   $0x2,%r8b
  0x00007fb1a0875c0a:   je     Stub::counterMode_AESCrypt+4384 0x00007fb1a0875c20
  0x00007fb1a0875c10:   sub    $0x2,%rax
  0x00007fb1a0875c14:   vpslldq $0x2,%xmm11,%xmm11
  0x00007fb1a0875c1a:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fb1a0875c20:   test   $0x1,%r8b
  0x00007fb1a0875c24:   je     Stub::counterMode_AESCrypt+4411 0x00007fb1a0875c3b
  0x00007fb1a0875c2a:   sub    $0x1,%rax
  0x00007fb1a0875c2e:   vpslldq $0x1,%xmm11,%xmm11
  0x00007fb1a0875c34:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fb1a0875c3b:   vmovdqu %xmm5,(%r9)
  0x00007fb1a0875c40:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fb1a0875c45:   test   $0x8,%r8b
  0x00007fb1a0875c49:   je     Stub::counterMode_AESCrypt+4447 0x00007fb1a0875c5f
  0x00007fb1a0875c4f:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fb1a0875c56:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007fb1a0875c5b:   add    $0x8,%rax
  0x00007fb1a0875c5f:   test   $0x4,%r8b
  0x00007fb1a0875c63:   je     Stub::counterMode_AESCrypt+4473 0x00007fb1a0875c79
  0x00007fb1a0875c69:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fb1a0875c70:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007fb1a0875c75:   add    $0x4,%rax
  0x00007fb1a0875c79:   test   $0x2,%r8b
  0x00007fb1a0875c7d:   je     Stub::counterMode_AESCrypt+4499 0x00007fb1a0875c93
  0x00007fb1a0875c83:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fb1a0875c8a:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007fb1a0875c8f:   add    $0x2,%rax
  0x00007fb1a0875c93:   test   $0x1,%r8b
  0x00007fb1a0875c97:   je     Stub::counterMode_AESCrypt+4516 0x00007fb1a0875ca4
  0x00007fb1a0875c9d:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fb1a0875ca4:   mov    %r8d,(%r10)
  0x00007fb1a0875ca7:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007fb1a0875cac
  0x00007fb1a0875cac:   vpshufb %xmm0,%xmm2,%xmm2
  0x00007fb1a0875cb1:   vmovdqu %xmm2,(%rcx)
  0x00007fb1a0875cb5:   pop    %rbx
  0x00007fb1a0875cb6:   pop    %rax
  0x00007fb1a0875cb7:   leaveq 
  0x00007fb1a0875cb8:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::ghash_processBlocks [0x00007fb1a0875cc0, 0x00007fb1a087614c] (1164 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0875cc0:   push   %rbp
  0x00007fb1a0875cc1:   mov    %rsp,%rbp
  0x00007fb1a0875cc4:   push   %rbx
  0x00007fb1a0875cc5:   test   %rcx,%rcx
  0x00007fb1a0875cc8:   je     Stub::ghash_processBlocks+1144 0x00007fb1a0876138
  0x00007fb1a0875cce:   vmovdqu 0x10(%rsi),%xmm5
  0x00007fb1a0875cd3:   vptest %xmm5,%xmm5
  0x00007fb1a0875cd8:   jne    Stub::ghash_processBlocks+35 0x00007fb1a0875ce3
  0x00007fb1a0875cde:   callq  Stub::ghash_processBlocks+839 0x00007fb1a0876007
  0x00007fb1a0875ce3:   vmovdqu 0x4674985(%rip),%xmm14        # 0x00007fb1a4eea670
  0x00007fb1a0875ceb:   vmovdqu (%rdi),%xmm0
  0x00007fb1a0875cef:   vpshufb %xmm14,%xmm0,%xmm0
  0x00007fb1a0875cf4:   cmp    $0x8,%ecx
  0x00007fb1a0875cf7:   jb     Stub::ghash_processBlocks+648 0x00007fb1a0875f48
  0x00007fb1a0875cfd:   vmovdqu 0x80(%rsi),%xmm5
  0x00007fb1a0875d05:   vptest %xmm5,%xmm5
  0x00007fb1a0875d0a:   jne    Stub::ghash_processBlocks+85 0x00007fb1a0875d15
  0x00007fb1a0875d10:   callq  Stub::ghash_processBlocks+932 0x00007fb1a0876064
  0x00007fb1a0875d15:   sub    $0x8,%ecx
  0x00007fb1a0875d18:   vmovdqu 0x4674940(%rip),%xmm2        # 0x00007fb1a4eea660
  0x00007fb1a0875d20:   vmovdqu 0x70(%rdx),%xmm1
  0x00007fb1a0875d25:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fb1a0875d2a:   vmovdqu 0x10(%rsi),%xmm15
  0x00007fb1a0875d2f:   vpclmulhqlqdq %xmm15,%xmm1,%xmm5
  0x00007fb1a0875d35:   vpclmullqlqdq %xmm15,%xmm1,%xmm3
  0x00007fb1a0875d3b:   vpclmulhqhqdq %xmm15,%xmm1,%xmm4
  0x00007fb1a0875d41:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875d47:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875d4b:   vmovdqu 0x60(%rdx),%xmm1
  0x00007fb1a0875d50:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fb1a0875d55:   vmovdqu 0x20(%rsi),%xmm15
  0x00007fb1a0875d5a:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875d60:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875d64:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875d6a:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fb1a0875d6e:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875d74:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fb1a0875d78:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875d7e:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875d82:   vmovdqu 0x50(%rdx),%xmm1
  0x00007fb1a0875d87:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fb1a0875d8c:   vmovdqu 0x30(%rsi),%xmm15
  0x00007fb1a0875d91:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875d97:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875d9b:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875da1:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fb1a0875da5:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875dab:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fb1a0875daf:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875db5:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875db9:   vmovdqu 0x40(%rdx),%xmm1
  0x00007fb1a0875dbe:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fb1a0875dc3:   vmovdqu 0x40(%rsi),%xmm15
  0x00007fb1a0875dc8:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875dce:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875dd2:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875dd8:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fb1a0875ddc:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875de2:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fb1a0875de6:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875dec:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875df0:   vmovdqu 0x30(%rdx),%xmm1
  0x00007fb1a0875df5:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fb1a0875dfa:   vmovdqu 0x50(%rsi),%xmm15
  0x00007fb1a0875dff:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875e05:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875e09:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875e0f:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fb1a0875e13:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875e19:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fb1a0875e1d:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875e23:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875e27:   vmovdqu 0x20(%rdx),%xmm1
  0x00007fb1a0875e2c:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fb1a0875e31:   vmovdqu 0x60(%rsi),%xmm15
  0x00007fb1a0875e36:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875e3c:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875e40:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875e46:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fb1a0875e4a:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875e50:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fb1a0875e54:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875e5a:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875e5e:   vmovdqu 0x10(%rdx),%xmm1
  0x00007fb1a0875e63:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fb1a0875e68:   vmovdqu 0x70(%rsi),%xmm15
  0x00007fb1a0875e6d:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875e73:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875e77:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875e7d:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fb1a0875e81:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875e87:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fb1a0875e8b:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875e91:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875e95:   vmovdqu (%rdx),%xmm1
  0x00007fb1a0875e99:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fb1a0875e9e:   vpxor  %xmm0,%xmm1,%xmm1
  0x00007fb1a0875ea2:   vmovdqu 0x80(%rsi),%xmm15
  0x00007fb1a0875eaa:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875eb0:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875eb4:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875eba:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fb1a0875ebe:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875ec4:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fb1a0875ec8:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fb1a0875ece:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875ed2:   vpslldq $0x8,%xmm5,%xmm6
  0x00007fb1a0875ed7:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007fb1a0875edc:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fb1a0875ee0:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007fb1a0875ee4:   vpslld $0x1f,%xmm3,%xmm8
  0x00007fb1a0875ee9:   vpslld $0x1e,%xmm3,%xmm9
  0x00007fb1a0875eee:   vpslld $0x19,%xmm3,%xmm10
  0x00007fb1a0875ef3:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007fb1a0875ef8:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007fb1a0875efd:   vpslldq $0xc,%xmm8,%xmm9
  0x00007fb1a0875f03:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007fb1a0875f09:   vpxor  %xmm9,%xmm3,%xmm3
  0x00007fb1a0875f0e:   vpsrld $0x1,%xmm3,%xmm9
  0x00007fb1a0875f13:   vpsrld $0x2,%xmm3,%xmm10
  0x00007fb1a0875f18:   vpsrld $0x7,%xmm3,%xmm5
  0x00007fb1a0875f1d:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007fb1a0875f22:   vpxor  %xmm5,%xmm9,%xmm9
  0x00007fb1a0875f26:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007fb1a0875f2b:   vpxor  %xmm3,%xmm9,%xmm3
  0x00007fb1a0875f2f:   vpxor  %xmm4,%xmm3,%xmm0
  0x00007fb1a0875f33:   lea    0x80(%rdx),%rdx
  0x00007fb1a0875f3a:   cmp    $0x8,%ecx
  0x00007fb1a0875f3d:   jb     Stub::ghash_processBlocks+648 0x00007fb1a0875f48
  0x00007fb1a0875f43:   jmpq   Stub::ghash_processBlocks+85 0x00007fb1a0875d15
  0x00007fb1a0875f48:   vmovdqu 0x10(%rsi),%xmm3
  0x00007fb1a0875f4d:   vmovdqu 0x467470b(%rip),%xmm2        # 0x00007fb1a4eea660
  0x00007fb1a0875f55:   cmp    $0x0,%ecx
  0x00007fb1a0875f58:   je     Stub::ghash_processBlocks+697 0x00007fb1a0875f79
  0x00007fb1a0875f5e:   sub    $0x1,%ecx
  0x00007fb1a0875f61:   vmovdqu (%rdx),%xmm1
  0x00007fb1a0875f65:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fb1a0875f6a:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fb1a0875f6e:   callq  Stub::ghash_processBlocks+711 0x00007fb1a0875f87
  0x00007fb1a0875f73:   add    $0x10,%rdx
  0x00007fb1a0875f77:   jmp    Stub::ghash_processBlocks+661 0x00007fb1a0875f55
  0x00007fb1a0875f79:   vpshufb %xmm14,%xmm0,%xmm0
  0x00007fb1a0875f7e:   vmovdqu %xmm0,(%rdi)
  0x00007fb1a0875f82:   jmpq   Stub::ghash_processBlocks+1144 0x00007fb1a0876138
  0x00007fb1a0875f87:   vpclmullqlqdq %xmm3,%xmm0,%xmm4
  0x00007fb1a0875f8d:   vpclmulhqhqdq %xmm3,%xmm0,%xmm7
  0x00007fb1a0875f93:   vpclmullqhqdq %xmm3,%xmm0,%xmm5
  0x00007fb1a0875f99:   vpclmulhqlqdq %xmm3,%xmm0,%xmm6
  0x00007fb1a0875f9f:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a0875fa3:   vpslldq $0x8,%xmm5,%xmm6
  0x00007fb1a0875fa8:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007fb1a0875fad:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fb1a0875fb1:   vpxor  %xmm5,%xmm7,%xmm7
  0x00007fb1a0875fb5:   vpslld $0x1f,%xmm4,%xmm8
  0x00007fb1a0875fba:   vpslld $0x1e,%xmm4,%xmm9
  0x00007fb1a0875fbf:   vpslld $0x19,%xmm4,%xmm10
  0x00007fb1a0875fc4:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007fb1a0875fc9:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007fb1a0875fce:   vpslldq $0xc,%xmm8,%xmm9
  0x00007fb1a0875fd4:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007fb1a0875fda:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007fb1a0875fdf:   vpsrld $0x1,%xmm4,%xmm9
  0x00007fb1a0875fe4:   vpsrld $0x2,%xmm4,%xmm10
  0x00007fb1a0875fe9:   vpsrld $0x7,%xmm4,%xmm11
  0x00007fb1a0875fee:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007fb1a0875ff3:   vpxor  %xmm11,%xmm9,%xmm9
  0x00007fb1a0875ff8:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007fb1a0875ffd:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007fb1a0876002:   vpxor  %xmm4,%xmm7,%xmm0
  0x00007fb1a0876006:   retq   
  0x00007fb1a0876007:   vmovdqu (%rsi),%xmm13
  0x00007fb1a087600b:   vmovdqu 0x467465d(%rip),%xmm10        # 0x00007fb1a4eea670
  0x00007fb1a0876013:   vpshufb %xmm10,%xmm13,%xmm13
  0x00007fb1a0876018:   vpsrld $0x7,%xmm13,%xmm3
  0x00007fb1a087601e:   vmovdqu 0x467465a(%rip),%xmm4        # 0x00007fb1a4eea680
  0x00007fb1a0876026:   vpshufb %xmm4,%xmm3,%xmm3
  0x00007fb1a087602b:   mov    $0xff00,%eax
  0x00007fb1a0876030:   vmovd  %eax,%xmm4
  0x00007fb1a0876034:   vpshufb %xmm3,%xmm4,%xmm4
  0x00007fb1a0876039:   vmovdqu 0x467460f(%rip),%xmm5        # 0x00007fb1a4eea650
  0x00007fb1a0876041:   vpand  %xmm4,%xmm5,%xmm5
  0x00007fb1a0876045:   vpsrld $0x1f,%xmm13,%xmm3
  0x00007fb1a087604b:   vpslld $0x1,%xmm13,%xmm4
  0x00007fb1a0876051:   vpslldq $0x4,%xmm3,%xmm3
  0x00007fb1a0876056:   vpxor  %xmm3,%xmm4,%xmm13
  0x00007fb1a087605a:   vpxor  %xmm5,%xmm13,%xmm13
  0x00007fb1a087605e:   vmovdqu %xmm13,0x10(%rsi)
  0x00007fb1a0876063:   retq   
  0x00007fb1a0876064:   vmovdqu 0x10(%rsi),%xmm13
  0x00007fb1a0876069:   vmovdqu %xmm13,%xmm1
  0x00007fb1a087606e:   callq  Stub::ghash_processBlocks+1016 0x00007fb1a08760b8
  0x00007fb1a0876073:   vmovdqu %xmm13,0x20(%rsi)
  0x00007fb1a0876078:   callq  Stub::ghash_processBlocks+1016 0x00007fb1a08760b8
  0x00007fb1a087607d:   vmovdqu %xmm13,0x30(%rsi)
  0x00007fb1a0876082:   callq  Stub::ghash_processBlocks+1016 0x00007fb1a08760b8
  0x00007fb1a0876087:   vmovdqu %xmm13,0x40(%rsi)
  0x00007fb1a087608c:   callq  Stub::ghash_processBlocks+1016 0x00007fb1a08760b8
  0x00007fb1a0876091:   vmovdqu %xmm13,0x50(%rsi)
  0x00007fb1a0876096:   callq  Stub::ghash_processBlocks+1016 0x00007fb1a08760b8
  0x00007fb1a087609b:   vmovdqu %xmm13,0x60(%rsi)
  0x00007fb1a08760a0:   callq  Stub::ghash_processBlocks+1016 0x00007fb1a08760b8
  0x00007fb1a08760a5:   vmovdqu %xmm13,0x70(%rsi)
  0x00007fb1a08760aa:   callq  Stub::ghash_processBlocks+1016 0x00007fb1a08760b8
  0x00007fb1a08760af:   vmovdqu %xmm13,0x80(%rsi)
  0x00007fb1a08760b7:   retq   
  0x00007fb1a08760b8:   vpclmullqlqdq %xmm1,%xmm13,%xmm4
  0x00007fb1a08760be:   vpclmulhqhqdq %xmm1,%xmm13,%xmm7
  0x00007fb1a08760c4:   vpclmullqhqdq %xmm1,%xmm13,%xmm5
  0x00007fb1a08760ca:   vpclmulhqlqdq %xmm1,%xmm13,%xmm6
  0x00007fb1a08760d0:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fb1a08760d4:   vpslldq $0x8,%xmm5,%xmm6
  0x00007fb1a08760d9:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007fb1a08760de:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fb1a08760e2:   vpxor  %xmm5,%xmm7,%xmm7
  0x00007fb1a08760e6:   vpslld $0x1f,%xmm4,%xmm8
  0x00007fb1a08760eb:   vpslld $0x1e,%xmm4,%xmm9
  0x00007fb1a08760f0:   vpslld $0x19,%xmm4,%xmm10
  0x00007fb1a08760f5:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007fb1a08760fa:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007fb1a08760ff:   vpslldq $0xc,%xmm8,%xmm9
  0x00007fb1a0876105:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007fb1a087610b:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007fb1a0876110:   vpsrld $0x1,%xmm4,%xmm9
  0x00007fb1a0876115:   vpsrld $0x2,%xmm4,%xmm10
  0x00007fb1a087611a:   vpsrld $0x7,%xmm4,%xmm11
  0x00007fb1a087611f:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007fb1a0876124:   vpxor  %xmm11,%xmm9,%xmm9
  0x00007fb1a0876129:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007fb1a087612e:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007fb1a0876133:   vpxor  %xmm4,%xmm7,%xmm13
  0x00007fb1a0876137:   retq   
  0x00007fb1a0876138:   vpxor  %xmm0,%xmm0,%xmm0
  0x00007fb1a087613c:   vpxor  %xmm1,%xmm1,%xmm1
  0x00007fb1a0876140:   vpxor  %xmm3,%xmm3,%xmm3
  0x00007fb1a0876144:   vpxor  %xmm15,%xmm15,%xmm15
  0x00007fb1a0876149:   pop    %rbx
  0x00007fb1a087614a:   leaveq 
  0x00007fb1a087614b:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::chacha20Block [0x00007fb1a0876160, 0x00007fb1a0876401] (673 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0876160:   push   %rbp
  0x00007fb1a0876161:   mov    %rsp,%rbp
  0x00007fb1a0876164:   movabs $0x7fb1a4ee9680,%r9
  0x00007fb1a087616e:   movabs $0x7fb1a4ee9740,%rax
  0x00007fb1a0876178:   vbroadcastf128 (%rdi),%ymm0
  0x00007fb1a087617d:   vbroadcastf128 0x10(%rdi),%ymm1
  0x00007fb1a0876183:   vbroadcastf128 0x20(%rdi),%ymm2
  0x00007fb1a0876189:   vbroadcastf128 0x30(%rdi),%ymm3
  0x00007fb1a087618f:   vpaddd (%rax),%ymm3,%ymm3
  0x00007fb1a0876193:   vpaddd 0x20(%rax),%ymm3,%ymm13
  0x00007fb1a0876198:   vmovdqu %ymm0,%ymm4
  0x00007fb1a087619c:   vmovdqu %ymm1,%ymm5
  0x00007fb1a08761a0:   vmovdqu %ymm2,%ymm6
  0x00007fb1a08761a4:   vmovdqu %ymm3,%ymm7
  0x00007fb1a08761a8:   vmovdqu %ymm0,%ymm8
  0x00007fb1a08761ac:   vmovdqu %ymm1,%ymm9
  0x00007fb1a08761b0:   vmovdqu %ymm2,%ymm10
  0x00007fb1a08761b4:   vmovdqu %ymm13,%ymm11
  0x00007fb1a08761b9:   vmovdqu (%r9),%ymm14
  0x00007fb1a08761be:   vmovdqu 0x20(%r9),%ymm15
  0x00007fb1a08761c4:   mov    $0xa,%r8d
  0x00007fb1a08761ca:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007fb1a08761ce:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007fb1a08761d2:   vpshufb %ymm15,%ymm7,%ymm7
  0x00007fb1a08761d7:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007fb1a08761db:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007fb1a08761df:   vpsrld $0x14,%ymm5,%ymm12
  0x00007fb1a08761e4:   vpslld $0xc,%ymm5,%ymm5
  0x00007fb1a08761e9:   vpor   %ymm12,%ymm5,%ymm5
  0x00007fb1a08761ee:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007fb1a08761f2:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007fb1a08761f6:   vpshufb %ymm14,%ymm7,%ymm7
  0x00007fb1a08761fb:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007fb1a08761ff:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007fb1a0876203:   vpsrld $0x19,%ymm5,%ymm12
  0x00007fb1a0876208:   vpslld $0x7,%ymm5,%ymm5
  0x00007fb1a087620d:   vpor   %ymm12,%ymm5,%ymm5
  0x00007fb1a0876212:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007fb1a0876217:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007fb1a087621c:   vpshufb %ymm15,%ymm11,%ymm11
  0x00007fb1a0876221:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007fb1a0876226:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007fb1a087622b:   vpsrld $0x14,%ymm9,%ymm12
  0x00007fb1a0876231:   vpslld $0xc,%ymm9,%ymm9
  0x00007fb1a0876237:   vpor   %ymm12,%ymm9,%ymm9
  0x00007fb1a087623c:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007fb1a0876241:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007fb1a0876246:   vpshufb %ymm14,%ymm11,%ymm11
  0x00007fb1a087624b:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007fb1a0876250:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007fb1a0876255:   vpsrld $0x19,%ymm9,%ymm12
  0x00007fb1a087625b:   vpslld $0x7,%ymm9,%ymm9
  0x00007fb1a0876261:   vpor   %ymm12,%ymm9,%ymm9
  0x00007fb1a0876266:   vpshufd $0x39,%ymm5,%ymm5
  0x00007fb1a087626b:   vpshufd $0x4e,%ymm6,%ymm6
  0x00007fb1a0876270:   vpshufd $0x93,%ymm7,%ymm7
  0x00007fb1a0876275:   vpshufd $0x39,%ymm9,%ymm9
  0x00007fb1a087627b:   vpshufd $0x4e,%ymm10,%ymm10
  0x00007fb1a0876281:   vpshufd $0x93,%ymm11,%ymm11
  0x00007fb1a0876287:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007fb1a087628b:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007fb1a087628f:   vpshufb %ymm15,%ymm7,%ymm7
  0x00007fb1a0876294:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007fb1a0876298:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007fb1a087629c:   vpsrld $0x14,%ymm5,%ymm12
  0x00007fb1a08762a1:   vpslld $0xc,%ymm5,%ymm5
  0x00007fb1a08762a6:   vpor   %ymm12,%ymm5,%ymm5
  0x00007fb1a08762ab:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007fb1a08762af:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007fb1a08762b3:   vpshufb %ymm14,%ymm7,%ymm7
  0x00007fb1a08762b8:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007fb1a08762bc:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007fb1a08762c0:   vpsrld $0x19,%ymm5,%ymm12
  0x00007fb1a08762c5:   vpslld $0x7,%ymm5,%ymm5
  0x00007fb1a08762ca:   vpor   %ymm12,%ymm5,%ymm5
  0x00007fb1a08762cf:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007fb1a08762d4:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007fb1a08762d9:   vpshufb %ymm15,%ymm11,%ymm11
  0x00007fb1a08762de:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007fb1a08762e3:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007fb1a08762e8:   vpsrld $0x14,%ymm9,%ymm12
  0x00007fb1a08762ee:   vpslld $0xc,%ymm9,%ymm9
  0x00007fb1a08762f4:   vpor   %ymm12,%ymm9,%ymm9
  0x00007fb1a08762f9:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007fb1a08762fe:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007fb1a0876303:   vpshufb %ymm14,%ymm11,%ymm11
  0x00007fb1a0876308:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007fb1a087630d:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007fb1a0876312:   vpsrld $0x19,%ymm9,%ymm12
  0x00007fb1a0876318:   vpslld $0x7,%ymm9,%ymm9
  0x00007fb1a087631e:   vpor   %ymm12,%ymm9,%ymm9
  0x00007fb1a0876323:   vpshufd $0x93,%ymm5,%ymm5
  0x00007fb1a0876328:   vpshufd $0x4e,%ymm6,%ymm6
  0x00007fb1a087632d:   vpshufd $0x39,%ymm7,%ymm7
  0x00007fb1a0876332:   vpshufd $0x93,%ymm9,%ymm9
  0x00007fb1a0876338:   vpshufd $0x4e,%ymm10,%ymm10
  0x00007fb1a087633e:   vpshufd $0x39,%ymm11,%ymm11
  0x00007fb1a0876344:   dec    %r8
  0x00007fb1a0876347:   jne    Stub::chacha20Block+106 0x00007fb1a08761ca
  0x00007fb1a087634d:   vpaddd %ymm0,%ymm4,%ymm4
  0x00007fb1a0876351:   vpaddd %ymm1,%ymm5,%ymm5
  0x00007fb1a0876355:   vpaddd %ymm2,%ymm6,%ymm6
  0x00007fb1a0876359:   vpaddd %ymm3,%ymm7,%ymm7
  0x00007fb1a087635d:   vpaddd %ymm0,%ymm8,%ymm8
  0x00007fb1a0876361:   vpaddd %ymm1,%ymm9,%ymm9
  0x00007fb1a0876365:   vpaddd %ymm2,%ymm10,%ymm10
  0x00007fb1a0876369:   vpaddd %ymm13,%ymm11,%ymm11
  0x00007fb1a087636e:   vextracti128 $0x0,%ymm4,(%rsi)
  0x00007fb1a0876374:   vextracti128 $0x1,%ymm4,0x40(%rsi)
  0x00007fb1a087637b:   vextracti128 $0x0,%ymm5,0x10(%rsi)
  0x00007fb1a0876382:   vextracti128 $0x1,%ymm5,0x50(%rsi)
  0x00007fb1a0876389:   vextracti128 $0x0,%ymm6,0x20(%rsi)
  0x00007fb1a0876390:   vextracti128 $0x1,%ymm6,0x60(%rsi)
  0x00007fb1a0876397:   vextracti128 $0x0,%ymm7,0x30(%rsi)
  0x00007fb1a087639e:   vextracti128 $0x1,%ymm7,0x70(%rsi)
  0x00007fb1a08763a5:   vextracti128 $0x0,%ymm8,0x80(%rsi)
  0x00007fb1a08763af:   vextracti128 $0x1,%ymm8,0xc0(%rsi)
  0x00007fb1a08763b9:   vextracti128 $0x0,%ymm9,0x90(%rsi)
  0x00007fb1a08763c3:   vextracti128 $0x1,%ymm9,0xd0(%rsi)
  0x00007fb1a08763cd:   vextracti128 $0x0,%ymm10,0xa0(%rsi)
  0x00007fb1a08763d7:   vextracti128 $0x1,%ymm10,0xe0(%rsi)
  0x00007fb1a08763e1:   vextracti128 $0x0,%ymm11,0xb0(%rsi)
  0x00007fb1a08763eb:   vextracti128 $0x1,%ymm11,0xf0(%rsi)
  0x00007fb1a08763f5:   movabs $0x100,%rax
  0x00007fb1a08763ff:   leaveq 
  0x00007fb1a0876400:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::md5_implCompress [0x00007fb1a0876420, 0x00007fb1a0876aa9] (1673 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0876420:   push   %rbp
  0x00007fb1a0876421:   mov    %rsp,%rbp
  0x00007fb1a0876424:   push   %rbx
  0x00007fb1a0876425:   push   %rdi
  0x00007fb1a0876426:   push   %rsi
  0x00007fb1a0876427:   push   %r15
  0x00007fb1a0876429:   sub    $0x10,%rsp
  0x00007fb1a087642d:   mov    %rdi,%r15
  0x00007fb1a0876430:   mov    %rsi,(%rsp)
  0x00007fb1a0876434:   mov    (%rsp),%rdi
  0x00007fb1a0876438:   mov    (%rdi),%eax
  0x00007fb1a087643a:   mov    0x4(%rdi),%ebx
  0x00007fb1a087643d:   mov    0x8(%rdi),%ecx
  0x00007fb1a0876440:   mov    0xc(%rdi),%edx
  0x00007fb1a0876443:   add    $0xd76aa478,%eax
  0x00007fb1a0876448:   mov    %ecx,%esi
  0x00007fb1a087644a:   add    (%r15),%eax
  0x00007fb1a087644d:   xor    %edx,%esi
  0x00007fb1a087644f:   and    %ebx,%esi
  0x00007fb1a0876451:   xor    %edx,%esi
  0x00007fb1a0876453:   add    %esi,%eax
  0x00007fb1a0876455:   rol    $0x7,%eax
  0x00007fb1a0876458:   add    %ebx,%eax
  0x00007fb1a087645a:   add    $0xe8c7b756,%edx
  0x00007fb1a0876460:   mov    %ebx,%esi
  0x00007fb1a0876462:   add    0x4(%r15),%edx
  0x00007fb1a0876466:   xor    %ecx,%esi
  0x00007fb1a0876468:   and    %eax,%esi
  0x00007fb1a087646a:   xor    %ecx,%esi
  0x00007fb1a087646c:   add    %esi,%edx
  0x00007fb1a087646e:   rol    $0xc,%edx
  0x00007fb1a0876471:   add    %eax,%edx
  0x00007fb1a0876473:   add    $0x242070db,%ecx
  0x00007fb1a0876479:   mov    %eax,%esi
  0x00007fb1a087647b:   add    0x8(%r15),%ecx
  0x00007fb1a087647f:   xor    %ebx,%esi
  0x00007fb1a0876481:   and    %edx,%esi
  0x00007fb1a0876483:   xor    %ebx,%esi
  0x00007fb1a0876485:   add    %esi,%ecx
  0x00007fb1a0876487:   rol    $0x11,%ecx
  0x00007fb1a087648a:   add    %edx,%ecx
  0x00007fb1a087648c:   add    $0xc1bdceee,%ebx
  0x00007fb1a0876492:   mov    %edx,%esi
  0x00007fb1a0876494:   add    0xc(%r15),%ebx
  0x00007fb1a0876498:   xor    %eax,%esi
  0x00007fb1a087649a:   and    %ecx,%esi
  0x00007fb1a087649c:   xor    %eax,%esi
  0x00007fb1a087649e:   add    %esi,%ebx
  0x00007fb1a08764a0:   rol    $0x16,%ebx
  0x00007fb1a08764a3:   add    %ecx,%ebx
  0x00007fb1a08764a5:   add    $0xf57c0faf,%eax
  0x00007fb1a08764aa:   mov    %ecx,%esi
  0x00007fb1a08764ac:   add    0x10(%r15),%eax
  0x00007fb1a08764b0:   xor    %edx,%esi
  0x00007fb1a08764b2:   and    %ebx,%esi
  0x00007fb1a08764b4:   xor    %edx,%esi
  0x00007fb1a08764b6:   add    %esi,%eax
  0x00007fb1a08764b8:   rol    $0x7,%eax
  0x00007fb1a08764bb:   add    %ebx,%eax
  0x00007fb1a08764bd:   add    $0x4787c62a,%edx
  0x00007fb1a08764c3:   mov    %ebx,%esi
  0x00007fb1a08764c5:   add    0x14(%r15),%edx
  0x00007fb1a08764c9:   xor    %ecx,%esi
  0x00007fb1a08764cb:   and    %eax,%esi
  0x00007fb1a08764cd:   xor    %ecx,%esi
  0x00007fb1a08764cf:   add    %esi,%edx
  0x00007fb1a08764d1:   rol    $0xc,%edx
  0x00007fb1a08764d4:   add    %eax,%edx
  0x00007fb1a08764d6:   add    $0xa8304613,%ecx
  0x00007fb1a08764dc:   mov    %eax,%esi
  0x00007fb1a08764de:   add    0x18(%r15),%ecx
  0x00007fb1a08764e2:   xor    %ebx,%esi
  0x00007fb1a08764e4:   and    %edx,%esi
  0x00007fb1a08764e6:   xor    %ebx,%esi
  0x00007fb1a08764e8:   add    %esi,%ecx
  0x00007fb1a08764ea:   rol    $0x11,%ecx
  0x00007fb1a08764ed:   add    %edx,%ecx
  0x00007fb1a08764ef:   add    $0xfd469501,%ebx
  0x00007fb1a08764f5:   mov    %edx,%esi
  0x00007fb1a08764f7:   add    0x1c(%r15),%ebx
  0x00007fb1a08764fb:   xor    %eax,%esi
  0x00007fb1a08764fd:   and    %ecx,%esi
  0x00007fb1a08764ff:   xor    %eax,%esi
  0x00007fb1a0876501:   add    %esi,%ebx
  0x00007fb1a0876503:   rol    $0x16,%ebx
  0x00007fb1a0876506:   add    %ecx,%ebx
  0x00007fb1a0876508:   add    $0x698098d8,%eax
  0x00007fb1a087650d:   mov    %ecx,%esi
  0x00007fb1a087650f:   add    0x20(%r15),%eax
  0x00007fb1a0876513:   xor    %edx,%esi
  0x00007fb1a0876515:   and    %ebx,%esi
  0x00007fb1a0876517:   xor    %edx,%esi
  0x00007fb1a0876519:   add    %esi,%eax
  0x00007fb1a087651b:   rol    $0x7,%eax
  0x00007fb1a087651e:   add    %ebx,%eax
  0x00007fb1a0876520:   add    $0x8b44f7af,%edx
  0x00007fb1a0876526:   mov    %ebx,%esi
  0x00007fb1a0876528:   add    0x24(%r15),%edx
  0x00007fb1a087652c:   xor    %ecx,%esi
  0x00007fb1a087652e:   and    %eax,%esi
  0x00007fb1a0876530:   xor    %ecx,%esi
  0x00007fb1a0876532:   add    %esi,%edx
  0x00007fb1a0876534:   rol    $0xc,%edx
  0x00007fb1a0876537:   add    %eax,%edx
  0x00007fb1a0876539:   add    $0xffff5bb1,%ecx
  0x00007fb1a087653f:   mov    %eax,%esi
  0x00007fb1a0876541:   add    0x28(%r15),%ecx
  0x00007fb1a0876545:   xor    %ebx,%esi
  0x00007fb1a0876547:   and    %edx,%esi
  0x00007fb1a0876549:   xor    %ebx,%esi
  0x00007fb1a087654b:   add    %esi,%ecx
  0x00007fb1a087654d:   rol    $0x11,%ecx
  0x00007fb1a0876550:   add    %edx,%ecx
  0x00007fb1a0876552:   add    $0x895cd7be,%ebx
  0x00007fb1a0876558:   mov    %edx,%esi
  0x00007fb1a087655a:   add    0x2c(%r15),%ebx
  0x00007fb1a087655e:   xor    %eax,%esi
  0x00007fb1a0876560:   and    %ecx,%esi
  0x00007fb1a0876562:   xor    %eax,%esi
  0x00007fb1a0876564:   add    %esi,%ebx
  0x00007fb1a0876566:   rol    $0x16,%ebx
  0x00007fb1a0876569:   add    %ecx,%ebx
  0x00007fb1a087656b:   add    $0x6b901122,%eax
  0x00007fb1a0876570:   mov    %ecx,%esi
  0x00007fb1a0876572:   add    0x30(%r15),%eax
  0x00007fb1a0876576:   xor    %edx,%esi
  0x00007fb1a0876578:   and    %ebx,%esi
  0x00007fb1a087657a:   xor    %edx,%esi
  0x00007fb1a087657c:   add    %esi,%eax
  0x00007fb1a087657e:   rol    $0x7,%eax
  0x00007fb1a0876581:   add    %ebx,%eax
  0x00007fb1a0876583:   add    $0xfd987193,%edx
  0x00007fb1a0876589:   mov    %ebx,%esi
  0x00007fb1a087658b:   add    0x34(%r15),%edx
  0x00007fb1a087658f:   xor    %ecx,%esi
  0x00007fb1a0876591:   and    %eax,%esi
  0x00007fb1a0876593:   xor    %ecx,%esi
  0x00007fb1a0876595:   add    %esi,%edx
  0x00007fb1a0876597:   rol    $0xc,%edx
  0x00007fb1a087659a:   add    %eax,%edx
  0x00007fb1a087659c:   add    $0xa679438e,%ecx
  0x00007fb1a08765a2:   mov    %eax,%esi
  0x00007fb1a08765a4:   add    0x38(%r15),%ecx
  0x00007fb1a08765a8:   xor    %ebx,%esi
  0x00007fb1a08765aa:   and    %edx,%esi
  0x00007fb1a08765ac:   xor    %ebx,%esi
  0x00007fb1a08765ae:   add    %esi,%ecx
  0x00007fb1a08765b0:   rol    $0x11,%ecx
  0x00007fb1a08765b3:   add    %edx,%ecx
  0x00007fb1a08765b5:   add    $0x49b40821,%ebx
  0x00007fb1a08765bb:   mov    %edx,%esi
  0x00007fb1a08765bd:   add    0x3c(%r15),%ebx
  0x00007fb1a08765c1:   xor    %eax,%esi
  0x00007fb1a08765c3:   and    %ecx,%esi
  0x00007fb1a08765c5:   xor    %eax,%esi
  0x00007fb1a08765c7:   add    %esi,%ebx
  0x00007fb1a08765c9:   rol    $0x16,%ebx
  0x00007fb1a08765cc:   add    %ecx,%ebx
  0x00007fb1a08765ce:   add    $0xf61e2562,%eax
  0x00007fb1a08765d3:   mov    %edx,%esi
  0x00007fb1a08765d5:   mov    %edx,%edi
  0x00007fb1a08765d7:   add    0x4(%r15),%eax
  0x00007fb1a08765db:   not    %esi
  0x00007fb1a08765dd:   and    %ebx,%edi
  0x00007fb1a08765df:   and    %ecx,%esi
  0x00007fb1a08765e1:   or     %edi,%esi
  0x00007fb1a08765e3:   add    %esi,%eax
  0x00007fb1a08765e5:   rol    $0x5,%eax
  0x00007fb1a08765e8:   add    %ebx,%eax
  0x00007fb1a08765ea:   add    $0xc040b340,%edx
  0x00007fb1a08765f0:   mov    %ecx,%esi
  0x00007fb1a08765f2:   mov    %ecx,%edi
  0x00007fb1a08765f4:   add    0x18(%r15),%edx
  0x00007fb1a08765f8:   not    %esi
  0x00007fb1a08765fa:   and    %eax,%edi
  0x00007fb1a08765fc:   and    %ebx,%esi
  0x00007fb1a08765fe:   or     %edi,%esi
  0x00007fb1a0876600:   add    %esi,%edx
  0x00007fb1a0876602:   rol    $0x9,%edx
  0x00007fb1a0876605:   add    %eax,%edx
  0x00007fb1a0876607:   add    $0x265e5a51,%ecx
  0x00007fb1a087660d:   mov    %ebx,%esi
  0x00007fb1a087660f:   mov    %ebx,%edi
  0x00007fb1a0876611:   add    0x2c(%r15),%ecx
  0x00007fb1a0876615:   not    %esi
  0x00007fb1a0876617:   and    %edx,%edi
  0x00007fb1a0876619:   and    %eax,%esi
  0x00007fb1a087661b:   or     %edi,%esi
  0x00007fb1a087661d:   add    %esi,%ecx
  0x00007fb1a087661f:   rol    $0xe,%ecx
  0x00007fb1a0876622:   add    %edx,%ecx
  0x00007fb1a0876624:   add    $0xe9b6c7aa,%ebx
  0x00007fb1a087662a:   mov    %eax,%esi
  0x00007fb1a087662c:   mov    %eax,%edi
  0x00007fb1a087662e:   add    (%r15),%ebx
  0x00007fb1a0876631:   not    %esi
  0x00007fb1a0876633:   and    %ecx,%edi
  0x00007fb1a0876635:   and    %edx,%esi
  0x00007fb1a0876637:   or     %edi,%esi
  0x00007fb1a0876639:   add    %esi,%ebx
  0x00007fb1a087663b:   rol    $0x14,%ebx
  0x00007fb1a087663e:   add    %ecx,%ebx
  0x00007fb1a0876640:   add    $0xd62f105d,%eax
  0x00007fb1a0876645:   mov    %edx,%esi
  0x00007fb1a0876647:   mov    %edx,%edi
  0x00007fb1a0876649:   add    0x14(%r15),%eax
  0x00007fb1a087664d:   not    %esi
  0x00007fb1a087664f:   and    %ebx,%edi
  0x00007fb1a0876651:   and    %ecx,%esi
  0x00007fb1a0876653:   or     %edi,%esi
  0x00007fb1a0876655:   add    %esi,%eax
  0x00007fb1a0876657:   rol    $0x5,%eax
  0x00007fb1a087665a:   add    %ebx,%eax
  0x00007fb1a087665c:   add    $0x2441453,%edx
  0x00007fb1a0876662:   mov    %ecx,%esi
  0x00007fb1a0876664:   mov    %ecx,%edi
  0x00007fb1a0876666:   add    0x28(%r15),%edx
  0x00007fb1a087666a:   not    %esi
  0x00007fb1a087666c:   and    %eax,%edi
  0x00007fb1a087666e:   and    %ebx,%esi
  0x00007fb1a0876670:   or     %edi,%esi
  0x00007fb1a0876672:   add    %esi,%edx
  0x00007fb1a0876674:   rol    $0x9,%edx
  0x00007fb1a0876677:   add    %eax,%edx
  0x00007fb1a0876679:   add    $0xd8a1e681,%ecx
  0x00007fb1a087667f:   mov    %ebx,%esi
  0x00007fb1a0876681:   mov    %ebx,%edi
  0x00007fb1a0876683:   add    0x3c(%r15),%ecx
  0x00007fb1a0876687:   not    %esi
  0x00007fb1a0876689:   and    %edx,%edi
  0x00007fb1a087668b:   and    %eax,%esi
  0x00007fb1a087668d:   or     %edi,%esi
  0x00007fb1a087668f:   add    %esi,%ecx
  0x00007fb1a0876691:   rol    $0xe,%ecx
  0x00007fb1a0876694:   add    %edx,%ecx
  0x00007fb1a0876696:   add    $0xe7d3fbc8,%ebx
  0x00007fb1a087669c:   mov    %eax,%esi
  0x00007fb1a087669e:   mov    %eax,%edi
  0x00007fb1a08766a0:   add    0x10(%r15),%ebx
  0x00007fb1a08766a4:   not    %esi
  0x00007fb1a08766a6:   and    %ecx,%edi
  0x00007fb1a08766a8:   and    %edx,%esi
  0x00007fb1a08766aa:   or     %edi,%esi
  0x00007fb1a08766ac:   add    %esi,%ebx
  0x00007fb1a08766ae:   rol    $0x14,%ebx
  0x00007fb1a08766b1:   add    %ecx,%ebx
  0x00007fb1a08766b3:   add    $0x21e1cde6,%eax
  0x00007fb1a08766b8:   mov    %edx,%esi
  0x00007fb1a08766ba:   mov    %edx,%edi
  0x00007fb1a08766bc:   add    0x24(%r15),%eax
  0x00007fb1a08766c0:   not    %esi
  0x00007fb1a08766c2:   and    %ebx,%edi
  0x00007fb1a08766c4:   and    %ecx,%esi
  0x00007fb1a08766c6:   or     %edi,%esi
  0x00007fb1a08766c8:   add    %esi,%eax
  0x00007fb1a08766ca:   rol    $0x5,%eax
  0x00007fb1a08766cd:   add    %ebx,%eax
  0x00007fb1a08766cf:   add    $0xc33707d6,%edx
  0x00007fb1a08766d5:   mov    %ecx,%esi
  0x00007fb1a08766d7:   mov    %ecx,%edi
  0x00007fb1a08766d9:   add    0x38(%r15),%edx
  0x00007fb1a08766dd:   not    %esi
  0x00007fb1a08766df:   and    %eax,%edi
  0x00007fb1a08766e1:   and    %ebx,%esi
  0x00007fb1a08766e3:   or     %edi,%esi
  0x00007fb1a08766e5:   add    %esi,%edx
  0x00007fb1a08766e7:   rol    $0x9,%edx
  0x00007fb1a08766ea:   add    %eax,%edx
  0x00007fb1a08766ec:   add    $0xf4d50d87,%ecx
  0x00007fb1a08766f2:   mov    %ebx,%esi
  0x00007fb1a08766f4:   mov    %ebx,%edi
  0x00007fb1a08766f6:   add    0xc(%r15),%ecx
  0x00007fb1a08766fa:   not    %esi
  0x00007fb1a08766fc:   and    %edx,%edi
  0x00007fb1a08766fe:   and    %eax,%esi
  0x00007fb1a0876700:   or     %edi,%esi
  0x00007fb1a0876702:   add    %esi,%ecx
  0x00007fb1a0876704:   rol    $0xe,%ecx
  0x00007fb1a0876707:   add    %edx,%ecx
  0x00007fb1a0876709:   add    $0x455a14ed,%ebx
  0x00007fb1a087670f:   mov    %eax,%esi
  0x00007fb1a0876711:   mov    %eax,%edi
  0x00007fb1a0876713:   add    0x20(%r15),%ebx
  0x00007fb1a0876717:   not    %esi
  0x00007fb1a0876719:   and    %ecx,%edi
  0x00007fb1a087671b:   and    %edx,%esi
  0x00007fb1a087671d:   or     %edi,%esi
  0x00007fb1a087671f:   add    %esi,%ebx
  0x00007fb1a0876721:   rol    $0x14,%ebx
  0x00007fb1a0876724:   add    %ecx,%ebx
  0x00007fb1a0876726:   add    $0xa9e3e905,%eax
  0x00007fb1a087672b:   mov    %edx,%esi
  0x00007fb1a087672d:   mov    %edx,%edi
  0x00007fb1a087672f:   add    0x34(%r15),%eax
  0x00007fb1a0876733:   not    %esi
  0x00007fb1a0876735:   and    %ebx,%edi
  0x00007fb1a0876737:   and    %ecx,%esi
  0x00007fb1a0876739:   or     %edi,%esi
  0x00007fb1a087673b:   add    %esi,%eax
  0x00007fb1a087673d:   rol    $0x5,%eax
  0x00007fb1a0876740:   add    %ebx,%eax
  0x00007fb1a0876742:   add    $0xfcefa3f8,%edx
  0x00007fb1a0876748:   mov    %ecx,%esi
  0x00007fb1a087674a:   mov    %ecx,%edi
  0x00007fb1a087674c:   add    0x8(%r15),%edx
  0x00007fb1a0876750:   not    %esi
  0x00007fb1a0876752:   and    %eax,%edi
  0x00007fb1a0876754:   and    %ebx,%esi
  0x00007fb1a0876756:   or     %edi,%esi
  0x00007fb1a0876758:   add    %esi,%edx
  0x00007fb1a087675a:   rol    $0x9,%edx
  0x00007fb1a087675d:   add    %eax,%edx
  0x00007fb1a087675f:   add    $0x676f02d9,%ecx
  0x00007fb1a0876765:   mov    %ebx,%esi
  0x00007fb1a0876767:   mov    %ebx,%edi
  0x00007fb1a0876769:   add    0x1c(%r15),%ecx
  0x00007fb1a087676d:   not    %esi
  0x00007fb1a087676f:   and    %edx,%edi
  0x00007fb1a0876771:   and    %eax,%esi
  0x00007fb1a0876773:   or     %edi,%esi
  0x00007fb1a0876775:   add    %esi,%ecx
  0x00007fb1a0876777:   rol    $0xe,%ecx
  0x00007fb1a087677a:   add    %edx,%ecx
  0x00007fb1a087677c:   add    $0x8d2a4c8a,%ebx
  0x00007fb1a0876782:   mov    %eax,%esi
  0x00007fb1a0876784:   mov    %eax,%edi
  0x00007fb1a0876786:   add    0x30(%r15),%ebx
  0x00007fb1a087678a:   not    %esi
  0x00007fb1a087678c:   and    %ecx,%edi
  0x00007fb1a087678e:   and    %edx,%esi
  0x00007fb1a0876790:   or     %edi,%esi
  0x00007fb1a0876792:   add    %esi,%ebx
  0x00007fb1a0876794:   rol    $0x14,%ebx
  0x00007fb1a0876797:   add    %ecx,%ebx
  0x00007fb1a0876799:   add    $0xfffa3942,%eax
  0x00007fb1a087679e:   mov    %ecx,%esi
  0x00007fb1a08767a0:   add    0x14(%r15),%eax
  0x00007fb1a08767a4:   xor    %edx,%esi
  0x00007fb1a08767a6:   xor    %ebx,%esi
  0x00007fb1a08767a8:   add    %esi,%eax
  0x00007fb1a08767aa:   rol    $0x4,%eax
  0x00007fb1a08767ad:   add    %ebx,%eax
  0x00007fb1a08767af:   add    $0x8771f681,%edx
  0x00007fb1a08767b5:   mov    %ebx,%esi
  0x00007fb1a08767b7:   add    0x20(%r15),%edx
  0x00007fb1a08767bb:   xor    %ecx,%esi
  0x00007fb1a08767bd:   xor    %eax,%esi
  0x00007fb1a08767bf:   add    %esi,%edx
  0x00007fb1a08767c1:   rol    $0xb,%edx
  0x00007fb1a08767c4:   add    %eax,%edx
  0x00007fb1a08767c6:   add    $0x6d9d6122,%ecx
  0x00007fb1a08767cc:   mov    %eax,%esi
  0x00007fb1a08767ce:   add    0x2c(%r15),%ecx
  0x00007fb1a08767d2:   xor    %ebx,%esi
  0x00007fb1a08767d4:   xor    %edx,%esi
  0x00007fb1a08767d6:   add    %esi,%ecx
  0x00007fb1a08767d8:   rol    $0x10,%ecx
  0x00007fb1a08767db:   add    %edx,%ecx
  0x00007fb1a08767dd:   add    $0xfde5380c,%ebx
  0x00007fb1a08767e3:   mov    %edx,%esi
  0x00007fb1a08767e5:   add    0x38(%r15),%ebx
  0x00007fb1a08767e9:   xor    %eax,%esi
  0x00007fb1a08767eb:   xor    %ecx,%esi
  0x00007fb1a08767ed:   add    %esi,%ebx
  0x00007fb1a08767ef:   rol    $0x17,%ebx
  0x00007fb1a08767f2:   add    %ecx,%ebx
  0x00007fb1a08767f4:   add    $0xa4beea44,%eax
  0x00007fb1a08767f9:   mov    %ecx,%esi
  0x00007fb1a08767fb:   add    0x4(%r15),%eax
  0x00007fb1a08767ff:   xor    %edx,%esi
  0x00007fb1a0876801:   xor    %ebx,%esi
  0x00007fb1a0876803:   add    %esi,%eax
  0x00007fb1a0876805:   rol    $0x4,%eax
  0x00007fb1a0876808:   add    %ebx,%eax
  0x00007fb1a087680a:   add    $0x4bdecfa9,%edx
  0x00007fb1a0876810:   mov    %ebx,%esi
  0x00007fb1a0876812:   add    0x10(%r15),%edx
  0x00007fb1a0876816:   xor    %ecx,%esi
  0x00007fb1a0876818:   xor    %eax,%esi
  0x00007fb1a087681a:   add    %esi,%edx
  0x00007fb1a087681c:   rol    $0xb,%edx
  0x00007fb1a087681f:   add    %eax,%edx
  0x00007fb1a0876821:   add    $0xf6bb4b60,%ecx
  0x00007fb1a0876827:   mov    %eax,%esi
  0x00007fb1a0876829:   add    0x1c(%r15),%ecx
  0x00007fb1a087682d:   xor    %ebx,%esi
  0x00007fb1a087682f:   xor    %edx,%esi
  0x00007fb1a0876831:   add    %esi,%ecx
  0x00007fb1a0876833:   rol    $0x10,%ecx
  0x00007fb1a0876836:   add    %edx,%ecx
  0x00007fb1a0876838:   add    $0xbebfbc70,%ebx
  0x00007fb1a087683e:   mov    %edx,%esi
  0x00007fb1a0876840:   add    0x28(%r15),%ebx
  0x00007fb1a0876844:   xor    %eax,%esi
  0x00007fb1a0876846:   xor    %ecx,%esi
  0x00007fb1a0876848:   add    %esi,%ebx
  0x00007fb1a087684a:   rol    $0x17,%ebx
  0x00007fb1a087684d:   add    %ecx,%ebx
  0x00007fb1a087684f:   add    $0x289b7ec6,%eax
  0x00007fb1a0876854:   mov    %ecx,%esi
  0x00007fb1a0876856:   add    0x34(%r15),%eax
  0x00007fb1a087685a:   xor    %edx,%esi
  0x00007fb1a087685c:   xor    %ebx,%esi
  0x00007fb1a087685e:   add    %esi,%eax
  0x00007fb1a0876860:   rol    $0x4,%eax
  0x00007fb1a0876863:   add    %ebx,%eax
  0x00007fb1a0876865:   add    $0xeaa127fa,%edx
  0x00007fb1a087686b:   mov    %ebx,%esi
  0x00007fb1a087686d:   add    (%r15),%edx
  0x00007fb1a0876870:   xor    %ecx,%esi
  0x00007fb1a0876872:   xor    %eax,%esi
  0x00007fb1a0876874:   add    %esi,%edx
  0x00007fb1a0876876:   rol    $0xb,%edx
  0x00007fb1a0876879:   add    %eax,%edx
  0x00007fb1a087687b:   add    $0xd4ef3085,%ecx
  0x00007fb1a0876881:   mov    %eax,%esi
  0x00007fb1a0876883:   add    0xc(%r15),%ecx
  0x00007fb1a0876887:   xor    %ebx,%esi
  0x00007fb1a0876889:   xor    %edx,%esi
  0x00007fb1a087688b:   add    %esi,%ecx
  0x00007fb1a087688d:   rol    $0x10,%ecx
  0x00007fb1a0876890:   add    %edx,%ecx
  0x00007fb1a0876892:   add    $0x4881d05,%ebx
  0x00007fb1a0876898:   mov    %edx,%esi
  0x00007fb1a087689a:   add    0x18(%r15),%ebx
  0x00007fb1a087689e:   xor    %eax,%esi
  0x00007fb1a08768a0:   xor    %ecx,%esi
  0x00007fb1a08768a2:   add    %esi,%ebx
  0x00007fb1a08768a4:   rol    $0x17,%ebx
  0x00007fb1a08768a7:   add    %ecx,%ebx
  0x00007fb1a08768a9:   add    $0xd9d4d039,%eax
  0x00007fb1a08768ae:   mov    %ecx,%esi
  0x00007fb1a08768b0:   add    0x24(%r15),%eax
  0x00007fb1a08768b4:   xor    %edx,%esi
  0x00007fb1a08768b6:   xor    %ebx,%esi
  0x00007fb1a08768b8:   add    %esi,%eax
  0x00007fb1a08768ba:   rol    $0x4,%eax
  0x00007fb1a08768bd:   add    %ebx,%eax
  0x00007fb1a08768bf:   add    $0xe6db99e5,%edx
  0x00007fb1a08768c5:   mov    %ebx,%esi
  0x00007fb1a08768c7:   add    0x30(%r15),%edx
  0x00007fb1a08768cb:   xor    %ecx,%esi
  0x00007fb1a08768cd:   xor    %eax,%esi
  0x00007fb1a08768cf:   add    %esi,%edx
  0x00007fb1a08768d1:   rol    $0xb,%edx
  0x00007fb1a08768d4:   add    %eax,%edx
  0x00007fb1a08768d6:   add    $0x1fa27cf8,%ecx
  0x00007fb1a08768dc:   mov    %eax,%esi
  0x00007fb1a08768de:   add    0x3c(%r15),%ecx
  0x00007fb1a08768e2:   xor    %ebx,%esi
  0x00007fb1a08768e4:   xor    %edx,%esi
  0x00007fb1a08768e6:   add    %esi,%ecx
  0x00007fb1a08768e8:   rol    $0x10,%ecx
  0x00007fb1a08768eb:   add    %edx,%ecx
  0x00007fb1a08768ed:   add    $0xc4ac5665,%ebx
  0x00007fb1a08768f3:   mov    %edx,%esi
  0x00007fb1a08768f5:   add    0x8(%r15),%ebx
  0x00007fb1a08768f9:   xor    %eax,%esi
  0x00007fb1a08768fb:   xor    %ecx,%esi
  0x00007fb1a08768fd:   add    %esi,%ebx
  0x00007fb1a08768ff:   rol    $0x17,%ebx
  0x00007fb1a0876902:   add    %ecx,%ebx
  0x00007fb1a0876904:   add    $0xf4292244,%eax
  0x00007fb1a0876909:   mov    %edx,%esi
  0x00007fb1a087690b:   not    %esi
  0x00007fb1a087690d:   add    (%r15),%eax
  0x00007fb1a0876910:   or     %ebx,%esi
  0x00007fb1a0876912:   xor    %ecx,%esi
  0x00007fb1a0876914:   add    %esi,%eax
  0x00007fb1a0876916:   rol    $0x6,%eax
  0x00007fb1a0876919:   add    %ebx,%eax
  0x00007fb1a087691b:   add    $0x432aff97,%edx
  0x00007fb1a0876921:   mov    %ecx,%esi
  0x00007fb1a0876923:   not    %esi
  0x00007fb1a0876925:   add    0x1c(%r15),%edx
  0x00007fb1a0876929:   or     %eax,%esi
  0x00007fb1a087692b:   xor    %ebx,%esi
  0x00007fb1a087692d:   add    %esi,%edx
  0x00007fb1a087692f:   rol    $0xa,%edx
  0x00007fb1a0876932:   add    %eax,%edx
  0x00007fb1a0876934:   add    $0xab9423a7,%ecx
  0x00007fb1a087693a:   mov    %ebx,%esi
  0x00007fb1a087693c:   not    %esi
  0x00007fb1a087693e:   add    0x38(%r15),%ecx
  0x00007fb1a0876942:   or     %edx,%esi
  0x00007fb1a0876944:   xor    %eax,%esi
  0x00007fb1a0876946:   add    %esi,%ecx
  0x00007fb1a0876948:   rol    $0xf,%ecx
  0x00007fb1a087694b:   add    %edx,%ecx
  0x00007fb1a087694d:   add    $0xfc93a039,%ebx
  0x00007fb1a0876953:   mov    %eax,%esi
  0x00007fb1a0876955:   not    %esi
  0x00007fb1a0876957:   add    0x14(%r15),%ebx
  0x00007fb1a087695b:   or     %ecx,%esi
  0x00007fb1a087695d:   xor    %edx,%esi
  0x00007fb1a087695f:   add    %esi,%ebx
  0x00007fb1a0876961:   rol    $0x15,%ebx
  0x00007fb1a0876964:   add    %ecx,%ebx
  0x00007fb1a0876966:   add    $0x655b59c3,%eax
  0x00007fb1a087696b:   mov    %edx,%esi
  0x00007fb1a087696d:   not    %esi
  0x00007fb1a087696f:   add    0x30(%r15),%eax
  0x00007fb1a0876973:   or     %ebx,%esi
  0x00007fb1a0876975:   xor    %ecx,%esi
  0x00007fb1a0876977:   add    %esi,%eax
  0x00007fb1a0876979:   rol    $0x6,%eax
  0x00007fb1a087697c:   add    %ebx,%eax
  0x00007fb1a087697e:   add    $0x8f0ccc92,%edx
  0x00007fb1a0876984:   mov    %ecx,%esi
  0x00007fb1a0876986:   not    %esi
  0x00007fb1a0876988:   add    0xc(%r15),%edx
  0x00007fb1a087698c:   or     %eax,%esi
  0x00007fb1a087698e:   xor    %ebx,%esi
  0x00007fb1a0876990:   add    %esi,%edx
  0x00007fb1a0876992:   rol    $0xa,%edx
  0x00007fb1a0876995:   add    %eax,%edx
  0x00007fb1a0876997:   add    $0xffeff47d,%ecx
  0x00007fb1a087699d:   mov    %ebx,%esi
  0x00007fb1a087699f:   not    %esi
  0x00007fb1a08769a1:   add    0x28(%r15),%ecx
  0x00007fb1a08769a5:   or     %edx,%esi
  0x00007fb1a08769a7:   xor    %eax,%esi
  0x00007fb1a08769a9:   add    %esi,%ecx
  0x00007fb1a08769ab:   rol    $0xf,%ecx
  0x00007fb1a08769ae:   add    %edx,%ecx
  0x00007fb1a08769b0:   add    $0x85845dd1,%ebx
  0x00007fb1a08769b6:   mov    %eax,%esi
  0x00007fb1a08769b8:   not    %esi
  0x00007fb1a08769ba:   add    0x4(%r15),%ebx
  0x00007fb1a08769be:   or     %ecx,%esi
  0x00007fb1a08769c0:   xor    %edx,%esi
  0x00007fb1a08769c2:   add    %esi,%ebx
  0x00007fb1a08769c4:   rol    $0x15,%ebx
  0x00007fb1a08769c7:   add    %ecx,%ebx
  0x00007fb1a08769c9:   add    $0x6fa87e4f,%eax
  0x00007fb1a08769ce:   mov    %edx,%esi
  0x00007fb1a08769d0:   not    %esi
  0x00007fb1a08769d2:   add    0x20(%r15),%eax
  0x00007fb1a08769d6:   or     %ebx,%esi
  0x00007fb1a08769d8:   xor    %ecx,%esi
  0x00007fb1a08769da:   add    %esi,%eax
  0x00007fb1a08769dc:   rol    $0x6,%eax
  0x00007fb1a08769df:   add    %ebx,%eax
  0x00007fb1a08769e1:   add    $0xfe2ce6e0,%edx
  0x00007fb1a08769e7:   mov    %ecx,%esi
  0x00007fb1a08769e9:   not    %esi
  0x00007fb1a08769eb:   add    0x3c(%r15),%edx
  0x00007fb1a08769ef:   or     %eax,%esi
  0x00007fb1a08769f1:   xor    %ebx,%esi
  0x00007fb1a08769f3:   add    %esi,%edx
  0x00007fb1a08769f5:   rol    $0xa,%edx
  0x00007fb1a08769f8:   add    %eax,%edx
  0x00007fb1a08769fa:   add    $0xa3014314,%ecx
  0x00007fb1a0876a00:   mov    %ebx,%esi
  0x00007fb1a0876a02:   not    %esi
  0x00007fb1a0876a04:   add    0x18(%r15),%ecx
  0x00007fb1a0876a08:   or     %edx,%esi
  0x00007fb1a0876a0a:   xor    %eax,%esi
  0x00007fb1a0876a0c:   add    %esi,%ecx
  0x00007fb1a0876a0e:   rol    $0xf,%ecx
  0x00007fb1a0876a11:   add    %edx,%ecx
  0x00007fb1a0876a13:   add    $0x4e0811a1,%ebx
  0x00007fb1a0876a19:   mov    %eax,%esi
  0x00007fb1a0876a1b:   not    %esi
  0x00007fb1a0876a1d:   add    0x34(%r15),%ebx
  0x00007fb1a0876a21:   or     %ecx,%esi
  0x00007fb1a0876a23:   xor    %edx,%esi
  0x00007fb1a0876a25:   add    %esi,%ebx
  0x00007fb1a0876a27:   rol    $0x15,%ebx
  0x00007fb1a0876a2a:   add    %ecx,%ebx
  0x00007fb1a0876a2c:   add    $0xf7537e82,%eax
  0x00007fb1a0876a31:   mov    %edx,%esi
  0x00007fb1a0876a33:   not    %esi
  0x00007fb1a0876a35:   add    0x10(%r15),%eax
  0x00007fb1a0876a39:   or     %ebx,%esi
  0x00007fb1a0876a3b:   xor    %ecx,%esi
  0x00007fb1a0876a3d:   add    %esi,%eax
  0x00007fb1a0876a3f:   rol    $0x6,%eax
  0x00007fb1a0876a42:   add    %ebx,%eax
  0x00007fb1a0876a44:   add    $0xbd3af235,%edx
  0x00007fb1a0876a4a:   mov    %ecx,%esi
  0x00007fb1a0876a4c:   not    %esi
  0x00007fb1a0876a4e:   add    0x2c(%r15),%edx
  0x00007fb1a0876a52:   or     %eax,%esi
  0x00007fb1a0876a54:   xor    %ebx,%esi
  0x00007fb1a0876a56:   add    %esi,%edx
  0x00007fb1a0876a58:   rol    $0xa,%edx
  0x00007fb1a0876a5b:   add    %eax,%edx
  0x00007fb1a0876a5d:   add    $0x2ad7d2bb,%ecx
  0x00007fb1a0876a63:   mov    %ebx,%esi
  0x00007fb1a0876a65:   not    %esi
  0x00007fb1a0876a67:   add    0x8(%r15),%ecx
  0x00007fb1a0876a6b:   or     %edx,%esi
  0x00007fb1a0876a6d:   xor    %eax,%esi
  0x00007fb1a0876a6f:   add    %esi,%ecx
  0x00007fb1a0876a71:   rol    $0xf,%ecx
  0x00007fb1a0876a74:   add    %edx,%ecx
  0x00007fb1a0876a76:   add    $0xeb86d391,%ebx
  0x00007fb1a0876a7c:   mov    %eax,%esi
  0x00007fb1a0876a7e:   not    %esi
  0x00007fb1a0876a80:   add    0x24(%r15),%ebx
  0x00007fb1a0876a84:   or     %ecx,%esi
  0x00007fb1a0876a86:   xor    %edx,%esi
  0x00007fb1a0876a88:   add    %esi,%ebx
  0x00007fb1a0876a8a:   rol    $0x15,%ebx
  0x00007fb1a0876a8d:   add    %ecx,%ebx
  0x00007fb1a0876a8f:   mov    (%rsp),%rdi
  0x00007fb1a0876a93:   add    %eax,(%rdi)
  0x00007fb1a0876a95:   add    %ebx,0x4(%rdi)
  0x00007fb1a0876a98:   add    %ecx,0x8(%rdi)
  0x00007fb1a0876a9b:   add    %edx,0xc(%rdi)
  0x00007fb1a0876a9e:   add    $0x10,%rsp
  0x00007fb1a0876aa2:   pop    %r15
  0x00007fb1a0876aa4:   pop    %rsi
  0x00007fb1a0876aa5:   pop    %rdi
  0x00007fb1a0876aa6:   pop    %rbx
  0x00007fb1a0876aa7:   leaveq 
  0x00007fb1a0876aa8:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::md5_implCompressMB [0x00007fb1a0876ac0, 0x00007fb1a087716b] (1707 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0876ac0:   push   %rbp
  0x00007fb1a0876ac1:   mov    %rsp,%rbp
  0x00007fb1a0876ac4:   push   %rbx
  0x00007fb1a0876ac5:   push   %rdi
  0x00007fb1a0876ac6:   push   %rsi
  0x00007fb1a0876ac7:   push   %r15
  0x00007fb1a0876ac9:   sub    $0x10,%rsp
  0x00007fb1a0876acd:   mov    %rdi,%r15
  0x00007fb1a0876ad0:   mov    %rsi,(%rsp)
  0x00007fb1a0876ad4:   mov    %edx,0x8(%rsp)
  0x00007fb1a0876ad8:   mov    %ecx,0xc(%rsp)
  0x00007fb1a0876adc:   mov    (%rsp),%rdi
  0x00007fb1a0876ae0:   mov    (%rdi),%eax
  0x00007fb1a0876ae2:   mov    0x4(%rdi),%ebx
  0x00007fb1a0876ae5:   mov    0x8(%rdi),%ecx
  0x00007fb1a0876ae8:   mov    0xc(%rdi),%edx
  0x00007fb1a0876aeb:   add    $0xd76aa478,%eax
  0x00007fb1a0876af0:   mov    %ecx,%esi
  0x00007fb1a0876af2:   add    (%r15),%eax
  0x00007fb1a0876af5:   xor    %edx,%esi
  0x00007fb1a0876af7:   and    %ebx,%esi
  0x00007fb1a0876af9:   xor    %edx,%esi
  0x00007fb1a0876afb:   add    %esi,%eax
  0x00007fb1a0876afd:   rol    $0x7,%eax
  0x00007fb1a0876b00:   add    %ebx,%eax
  0x00007fb1a0876b02:   add    $0xe8c7b756,%edx
  0x00007fb1a0876b08:   mov    %ebx,%esi
  0x00007fb1a0876b0a:   add    0x4(%r15),%edx
  0x00007fb1a0876b0e:   xor    %ecx,%esi
  0x00007fb1a0876b10:   and    %eax,%esi
  0x00007fb1a0876b12:   xor    %ecx,%esi
  0x00007fb1a0876b14:   add    %esi,%edx
  0x00007fb1a0876b16:   rol    $0xc,%edx
  0x00007fb1a0876b19:   add    %eax,%edx
  0x00007fb1a0876b1b:   add    $0x242070db,%ecx
  0x00007fb1a0876b21:   mov    %eax,%esi
  0x00007fb1a0876b23:   add    0x8(%r15),%ecx
  0x00007fb1a0876b27:   xor    %ebx,%esi
  0x00007fb1a0876b29:   and    %edx,%esi
  0x00007fb1a0876b2b:   xor    %ebx,%esi
  0x00007fb1a0876b2d:   add    %esi,%ecx
  0x00007fb1a0876b2f:   rol    $0x11,%ecx
  0x00007fb1a0876b32:   add    %edx,%ecx
  0x00007fb1a0876b34:   add    $0xc1bdceee,%ebx
  0x00007fb1a0876b3a:   mov    %edx,%esi
  0x00007fb1a0876b3c:   add    0xc(%r15),%ebx
  0x00007fb1a0876b40:   xor    %eax,%esi
  0x00007fb1a0876b42:   and    %ecx,%esi
  0x00007fb1a0876b44:   xor    %eax,%esi
  0x00007fb1a0876b46:   add    %esi,%ebx
  0x00007fb1a0876b48:   rol    $0x16,%ebx
  0x00007fb1a0876b4b:   add    %ecx,%ebx
  0x00007fb1a0876b4d:   add    $0xf57c0faf,%eax
  0x00007fb1a0876b52:   mov    %ecx,%esi
  0x00007fb1a0876b54:   add    0x10(%r15),%eax
  0x00007fb1a0876b58:   xor    %edx,%esi
  0x00007fb1a0876b5a:   and    %ebx,%esi
  0x00007fb1a0876b5c:   xor    %edx,%esi
  0x00007fb1a0876b5e:   add    %esi,%eax
  0x00007fb1a0876b60:   rol    $0x7,%eax
  0x00007fb1a0876b63:   add    %ebx,%eax
  0x00007fb1a0876b65:   add    $0x4787c62a,%edx
  0x00007fb1a0876b6b:   mov    %ebx,%esi
  0x00007fb1a0876b6d:   add    0x14(%r15),%edx
  0x00007fb1a0876b71:   xor    %ecx,%esi
  0x00007fb1a0876b73:   and    %eax,%esi
  0x00007fb1a0876b75:   xor    %ecx,%esi
  0x00007fb1a0876b77:   add    %esi,%edx
  0x00007fb1a0876b79:   rol    $0xc,%edx
  0x00007fb1a0876b7c:   add    %eax,%edx
  0x00007fb1a0876b7e:   add    $0xa8304613,%ecx
  0x00007fb1a0876b84:   mov    %eax,%esi
  0x00007fb1a0876b86:   add    0x18(%r15),%ecx
  0x00007fb1a0876b8a:   xor    %ebx,%esi
  0x00007fb1a0876b8c:   and    %edx,%esi
  0x00007fb1a0876b8e:   xor    %ebx,%esi
  0x00007fb1a0876b90:   add    %esi,%ecx
  0x00007fb1a0876b92:   rol    $0x11,%ecx
  0x00007fb1a0876b95:   add    %edx,%ecx
  0x00007fb1a0876b97:   add    $0xfd469501,%ebx
  0x00007fb1a0876b9d:   mov    %edx,%esi
  0x00007fb1a0876b9f:   add    0x1c(%r15),%ebx
  0x00007fb1a0876ba3:   xor    %eax,%esi
  0x00007fb1a0876ba5:   and    %ecx,%esi
  0x00007fb1a0876ba7:   xor    %eax,%esi
  0x00007fb1a0876ba9:   add    %esi,%ebx
  0x00007fb1a0876bab:   rol    $0x16,%ebx
  0x00007fb1a0876bae:   add    %ecx,%ebx
  0x00007fb1a0876bb0:   add    $0x698098d8,%eax
  0x00007fb1a0876bb5:   mov    %ecx,%esi
  0x00007fb1a0876bb7:   add    0x20(%r15),%eax
  0x00007fb1a0876bbb:   xor    %edx,%esi
  0x00007fb1a0876bbd:   and    %ebx,%esi
  0x00007fb1a0876bbf:   xor    %edx,%esi
  0x00007fb1a0876bc1:   add    %esi,%eax
  0x00007fb1a0876bc3:   rol    $0x7,%eax
  0x00007fb1a0876bc6:   add    %ebx,%eax
  0x00007fb1a0876bc8:   add    $0x8b44f7af,%edx
  0x00007fb1a0876bce:   mov    %ebx,%esi
  0x00007fb1a0876bd0:   add    0x24(%r15),%edx
  0x00007fb1a0876bd4:   xor    %ecx,%esi
  0x00007fb1a0876bd6:   and    %eax,%esi
  0x00007fb1a0876bd8:   xor    %ecx,%esi
  0x00007fb1a0876bda:   add    %esi,%edx
  0x00007fb1a0876bdc:   rol    $0xc,%edx
  0x00007fb1a0876bdf:   add    %eax,%edx
  0x00007fb1a0876be1:   add    $0xffff5bb1,%ecx
  0x00007fb1a0876be7:   mov    %eax,%esi
  0x00007fb1a0876be9:   add    0x28(%r15),%ecx
  0x00007fb1a0876bed:   xor    %ebx,%esi
  0x00007fb1a0876bef:   and    %edx,%esi
  0x00007fb1a0876bf1:   xor    %ebx,%esi
  0x00007fb1a0876bf3:   add    %esi,%ecx
  0x00007fb1a0876bf5:   rol    $0x11,%ecx
  0x00007fb1a0876bf8:   add    %edx,%ecx
  0x00007fb1a0876bfa:   add    $0x895cd7be,%ebx
  0x00007fb1a0876c00:   mov    %edx,%esi
  0x00007fb1a0876c02:   add    0x2c(%r15),%ebx
  0x00007fb1a0876c06:   xor    %eax,%esi
  0x00007fb1a0876c08:   and    %ecx,%esi
  0x00007fb1a0876c0a:   xor    %eax,%esi
  0x00007fb1a0876c0c:   add    %esi,%ebx
  0x00007fb1a0876c0e:   rol    $0x16,%ebx
  0x00007fb1a0876c11:   add    %ecx,%ebx
  0x00007fb1a0876c13:   add    $0x6b901122,%eax
  0x00007fb1a0876c18:   mov    %ecx,%esi
  0x00007fb1a0876c1a:   add    0x30(%r15),%eax
  0x00007fb1a0876c1e:   xor    %edx,%esi
  0x00007fb1a0876c20:   and    %ebx,%esi
  0x00007fb1a0876c22:   xor    %edx,%esi
  0x00007fb1a0876c24:   add    %esi,%eax
  0x00007fb1a0876c26:   rol    $0x7,%eax
  0x00007fb1a0876c29:   add    %ebx,%eax
  0x00007fb1a0876c2b:   add    $0xfd987193,%edx
  0x00007fb1a0876c31:   mov    %ebx,%esi
  0x00007fb1a0876c33:   add    0x34(%r15),%edx
  0x00007fb1a0876c37:   xor    %ecx,%esi
  0x00007fb1a0876c39:   and    %eax,%esi
  0x00007fb1a0876c3b:   xor    %ecx,%esi
  0x00007fb1a0876c3d:   add    %esi,%edx
  0x00007fb1a0876c3f:   rol    $0xc,%edx
  0x00007fb1a0876c42:   add    %eax,%edx
  0x00007fb1a0876c44:   add    $0xa679438e,%ecx
  0x00007fb1a0876c4a:   mov    %eax,%esi
  0x00007fb1a0876c4c:   add    0x38(%r15),%ecx
  0x00007fb1a0876c50:   xor    %ebx,%esi
  0x00007fb1a0876c52:   and    %edx,%esi
  0x00007fb1a0876c54:   xor    %ebx,%esi
  0x00007fb1a0876c56:   add    %esi,%ecx
  0x00007fb1a0876c58:   rol    $0x11,%ecx
  0x00007fb1a0876c5b:   add    %edx,%ecx
  0x00007fb1a0876c5d:   add    $0x49b40821,%ebx
  0x00007fb1a0876c63:   mov    %edx,%esi
  0x00007fb1a0876c65:   add    0x3c(%r15),%ebx
  0x00007fb1a0876c69:   xor    %eax,%esi
  0x00007fb1a0876c6b:   and    %ecx,%esi
  0x00007fb1a0876c6d:   xor    %eax,%esi
  0x00007fb1a0876c6f:   add    %esi,%ebx
  0x00007fb1a0876c71:   rol    $0x16,%ebx
  0x00007fb1a0876c74:   add    %ecx,%ebx
  0x00007fb1a0876c76:   add    $0xf61e2562,%eax
  0x00007fb1a0876c7b:   mov    %edx,%esi
  0x00007fb1a0876c7d:   mov    %edx,%edi
  0x00007fb1a0876c7f:   add    0x4(%r15),%eax
  0x00007fb1a0876c83:   not    %esi
  0x00007fb1a0876c85:   and    %ebx,%edi
  0x00007fb1a0876c87:   and    %ecx,%esi
  0x00007fb1a0876c89:   or     %edi,%esi
  0x00007fb1a0876c8b:   add    %esi,%eax
  0x00007fb1a0876c8d:   rol    $0x5,%eax
  0x00007fb1a0876c90:   add    %ebx,%eax
  0x00007fb1a0876c92:   add    $0xc040b340,%edx
  0x00007fb1a0876c98:   mov    %ecx,%esi
  0x00007fb1a0876c9a:   mov    %ecx,%edi
  0x00007fb1a0876c9c:   add    0x18(%r15),%edx
  0x00007fb1a0876ca0:   not    %esi
  0x00007fb1a0876ca2:   and    %eax,%edi
  0x00007fb1a0876ca4:   and    %ebx,%esi
  0x00007fb1a0876ca6:   or     %edi,%esi
  0x00007fb1a0876ca8:   add    %esi,%edx
  0x00007fb1a0876caa:   rol    $0x9,%edx
  0x00007fb1a0876cad:   add    %eax,%edx
  0x00007fb1a0876caf:   add    $0x265e5a51,%ecx
  0x00007fb1a0876cb5:   mov    %ebx,%esi
  0x00007fb1a0876cb7:   mov    %ebx,%edi
  0x00007fb1a0876cb9:   add    0x2c(%r15),%ecx
  0x00007fb1a0876cbd:   not    %esi
  0x00007fb1a0876cbf:   and    %edx,%edi
  0x00007fb1a0876cc1:   and    %eax,%esi
  0x00007fb1a0876cc3:   or     %edi,%esi
  0x00007fb1a0876cc5:   add    %esi,%ecx
  0x00007fb1a0876cc7:   rol    $0xe,%ecx
  0x00007fb1a0876cca:   add    %edx,%ecx
  0x00007fb1a0876ccc:   add    $0xe9b6c7aa,%ebx
  0x00007fb1a0876cd2:   mov    %eax,%esi
  0x00007fb1a0876cd4:   mov    %eax,%edi
  0x00007fb1a0876cd6:   add    (%r15),%ebx
  0x00007fb1a0876cd9:   not    %esi
  0x00007fb1a0876cdb:   and    %ecx,%edi
  0x00007fb1a0876cdd:   and    %edx,%esi
  0x00007fb1a0876cdf:   or     %edi,%esi
  0x00007fb1a0876ce1:   add    %esi,%ebx
  0x00007fb1a0876ce3:   rol    $0x14,%ebx
  0x00007fb1a0876ce6:   add    %ecx,%ebx
  0x00007fb1a0876ce8:   add    $0xd62f105d,%eax
  0x00007fb1a0876ced:   mov    %edx,%esi
  0x00007fb1a0876cef:   mov    %edx,%edi
  0x00007fb1a0876cf1:   add    0x14(%r15),%eax
  0x00007fb1a0876cf5:   not    %esi
  0x00007fb1a0876cf7:   and    %ebx,%edi
  0x00007fb1a0876cf9:   and    %ecx,%esi
  0x00007fb1a0876cfb:   or     %edi,%esi
  0x00007fb1a0876cfd:   add    %esi,%eax
  0x00007fb1a0876cff:   rol    $0x5,%eax
  0x00007fb1a0876d02:   add    %ebx,%eax
  0x00007fb1a0876d04:   add    $0x2441453,%edx
  0x00007fb1a0876d0a:   mov    %ecx,%esi
  0x00007fb1a0876d0c:   mov    %ecx,%edi
  0x00007fb1a0876d0e:   add    0x28(%r15),%edx
  0x00007fb1a0876d12:   not    %esi
  0x00007fb1a0876d14:   and    %eax,%edi
  0x00007fb1a0876d16:   and    %ebx,%esi
  0x00007fb1a0876d18:   or     %edi,%esi
  0x00007fb1a0876d1a:   add    %esi,%edx
  0x00007fb1a0876d1c:   rol    $0x9,%edx
  0x00007fb1a0876d1f:   add    %eax,%edx
  0x00007fb1a0876d21:   add    $0xd8a1e681,%ecx
  0x00007fb1a0876d27:   mov    %ebx,%esi
  0x00007fb1a0876d29:   mov    %ebx,%edi
  0x00007fb1a0876d2b:   add    0x3c(%r15),%ecx
  0x00007fb1a0876d2f:   not    %esi
  0x00007fb1a0876d31:   and    %edx,%edi
  0x00007fb1a0876d33:   and    %eax,%esi
  0x00007fb1a0876d35:   or     %edi,%esi
  0x00007fb1a0876d37:   add    %esi,%ecx
  0x00007fb1a0876d39:   rol    $0xe,%ecx
  0x00007fb1a0876d3c:   add    %edx,%ecx
  0x00007fb1a0876d3e:   add    $0xe7d3fbc8,%ebx
  0x00007fb1a0876d44:   mov    %eax,%esi
  0x00007fb1a0876d46:   mov    %eax,%edi
  0x00007fb1a0876d48:   add    0x10(%r15),%ebx
  0x00007fb1a0876d4c:   not    %esi
  0x00007fb1a0876d4e:   and    %ecx,%edi
  0x00007fb1a0876d50:   and    %edx,%esi
  0x00007fb1a0876d52:   or     %edi,%esi
  0x00007fb1a0876d54:   add    %esi,%ebx
  0x00007fb1a0876d56:   rol    $0x14,%ebx
  0x00007fb1a0876d59:   add    %ecx,%ebx
  0x00007fb1a0876d5b:   add    $0x21e1cde6,%eax
  0x00007fb1a0876d60:   mov    %edx,%esi
  0x00007fb1a0876d62:   mov    %edx,%edi
  0x00007fb1a0876d64:   add    0x24(%r15),%eax
  0x00007fb1a0876d68:   not    %esi
  0x00007fb1a0876d6a:   and    %ebx,%edi
  0x00007fb1a0876d6c:   and    %ecx,%esi
  0x00007fb1a0876d6e:   or     %edi,%esi
  0x00007fb1a0876d70:   add    %esi,%eax
  0x00007fb1a0876d72:   rol    $0x5,%eax
  0x00007fb1a0876d75:   add    %ebx,%eax
  0x00007fb1a0876d77:   add    $0xc33707d6,%edx
  0x00007fb1a0876d7d:   mov    %ecx,%esi
  0x00007fb1a0876d7f:   mov    %ecx,%edi
  0x00007fb1a0876d81:   add    0x38(%r15),%edx
  0x00007fb1a0876d85:   not    %esi
  0x00007fb1a0876d87:   and    %eax,%edi
  0x00007fb1a0876d89:   and    %ebx,%esi
  0x00007fb1a0876d8b:   or     %edi,%esi
  0x00007fb1a0876d8d:   add    %esi,%edx
  0x00007fb1a0876d8f:   rol    $0x9,%edx
  0x00007fb1a0876d92:   add    %eax,%edx
  0x00007fb1a0876d94:   add    $0xf4d50d87,%ecx
  0x00007fb1a0876d9a:   mov    %ebx,%esi
  0x00007fb1a0876d9c:   mov    %ebx,%edi
  0x00007fb1a0876d9e:   add    0xc(%r15),%ecx
  0x00007fb1a0876da2:   not    %esi
  0x00007fb1a0876da4:   and    %edx,%edi
  0x00007fb1a0876da6:   and    %eax,%esi
  0x00007fb1a0876da8:   or     %edi,%esi
  0x00007fb1a0876daa:   add    %esi,%ecx
  0x00007fb1a0876dac:   rol    $0xe,%ecx
  0x00007fb1a0876daf:   add    %edx,%ecx
  0x00007fb1a0876db1:   add    $0x455a14ed,%ebx
  0x00007fb1a0876db7:   mov    %eax,%esi
  0x00007fb1a0876db9:   mov    %eax,%edi
  0x00007fb1a0876dbb:   add    0x20(%r15),%ebx
  0x00007fb1a0876dbf:   not    %esi
  0x00007fb1a0876dc1:   and    %ecx,%edi
  0x00007fb1a0876dc3:   and    %edx,%esi
  0x00007fb1a0876dc5:   or     %edi,%esi
  0x00007fb1a0876dc7:   add    %esi,%ebx
  0x00007fb1a0876dc9:   rol    $0x14,%ebx
  0x00007fb1a0876dcc:   add    %ecx,%ebx
  0x00007fb1a0876dce:   add    $0xa9e3e905,%eax
  0x00007fb1a0876dd3:   mov    %edx,%esi
  0x00007fb1a0876dd5:   mov    %edx,%edi
  0x00007fb1a0876dd7:   add    0x34(%r15),%eax
  0x00007fb1a0876ddb:   not    %esi
  0x00007fb1a0876ddd:   and    %ebx,%edi
  0x00007fb1a0876ddf:   and    %ecx,%esi
  0x00007fb1a0876de1:   or     %edi,%esi
  0x00007fb1a0876de3:   add    %esi,%eax
  0x00007fb1a0876de5:   rol    $0x5,%eax
  0x00007fb1a0876de8:   add    %ebx,%eax
  0x00007fb1a0876dea:   add    $0xfcefa3f8,%edx
  0x00007fb1a0876df0:   mov    %ecx,%esi
  0x00007fb1a0876df2:   mov    %ecx,%edi
  0x00007fb1a0876df4:   add    0x8(%r15),%edx
  0x00007fb1a0876df8:   not    %esi
  0x00007fb1a0876dfa:   and    %eax,%edi
  0x00007fb1a0876dfc:   and    %ebx,%esi
  0x00007fb1a0876dfe:   or     %edi,%esi
  0x00007fb1a0876e00:   add    %esi,%edx
  0x00007fb1a0876e02:   rol    $0x9,%edx
  0x00007fb1a0876e05:   add    %eax,%edx
  0x00007fb1a0876e07:   add    $0x676f02d9,%ecx
  0x00007fb1a0876e0d:   mov    %ebx,%esi
  0x00007fb1a0876e0f:   mov    %ebx,%edi
  0x00007fb1a0876e11:   add    0x1c(%r15),%ecx
  0x00007fb1a0876e15:   not    %esi
  0x00007fb1a0876e17:   and    %edx,%edi
  0x00007fb1a0876e19:   and    %eax,%esi
  0x00007fb1a0876e1b:   or     %edi,%esi
  0x00007fb1a0876e1d:   add    %esi,%ecx
  0x00007fb1a0876e1f:   rol    $0xe,%ecx
  0x00007fb1a0876e22:   add    %edx,%ecx
  0x00007fb1a0876e24:   add    $0x8d2a4c8a,%ebx
  0x00007fb1a0876e2a:   mov    %eax,%esi
  0x00007fb1a0876e2c:   mov    %eax,%edi
  0x00007fb1a0876e2e:   add    0x30(%r15),%ebx
  0x00007fb1a0876e32:   not    %esi
  0x00007fb1a0876e34:   and    %ecx,%edi
  0x00007fb1a0876e36:   and    %edx,%esi
  0x00007fb1a0876e38:   or     %edi,%esi
  0x00007fb1a0876e3a:   add    %esi,%ebx
  0x00007fb1a0876e3c:   rol    $0x14,%ebx
  0x00007fb1a0876e3f:   add    %ecx,%ebx
  0x00007fb1a0876e41:   add    $0xfffa3942,%eax
  0x00007fb1a0876e46:   mov    %ecx,%esi
  0x00007fb1a0876e48:   add    0x14(%r15),%eax
  0x00007fb1a0876e4c:   xor    %edx,%esi
  0x00007fb1a0876e4e:   xor    %ebx,%esi
  0x00007fb1a0876e50:   add    %esi,%eax
  0x00007fb1a0876e52:   rol    $0x4,%eax
  0x00007fb1a0876e55:   add    %ebx,%eax
  0x00007fb1a0876e57:   add    $0x8771f681,%edx
  0x00007fb1a0876e5d:   mov    %ebx,%esi
  0x00007fb1a0876e5f:   add    0x20(%r15),%edx
  0x00007fb1a0876e63:   xor    %ecx,%esi
  0x00007fb1a0876e65:   xor    %eax,%esi
  0x00007fb1a0876e67:   add    %esi,%edx
  0x00007fb1a0876e69:   rol    $0xb,%edx
  0x00007fb1a0876e6c:   add    %eax,%edx
  0x00007fb1a0876e6e:   add    $0x6d9d6122,%ecx
  0x00007fb1a0876e74:   mov    %eax,%esi
  0x00007fb1a0876e76:   add    0x2c(%r15),%ecx
  0x00007fb1a0876e7a:   xor    %ebx,%esi
  0x00007fb1a0876e7c:   xor    %edx,%esi
  0x00007fb1a0876e7e:   add    %esi,%ecx
  0x00007fb1a0876e80:   rol    $0x10,%ecx
  0x00007fb1a0876e83:   add    %edx,%ecx
  0x00007fb1a0876e85:   add    $0xfde5380c,%ebx
  0x00007fb1a0876e8b:   mov    %edx,%esi
  0x00007fb1a0876e8d:   add    0x38(%r15),%ebx
  0x00007fb1a0876e91:   xor    %eax,%esi
  0x00007fb1a0876e93:   xor    %ecx,%esi
  0x00007fb1a0876e95:   add    %esi,%ebx
  0x00007fb1a0876e97:   rol    $0x17,%ebx
  0x00007fb1a0876e9a:   add    %ecx,%ebx
  0x00007fb1a0876e9c:   add    $0xa4beea44,%eax
  0x00007fb1a0876ea1:   mov    %ecx,%esi
  0x00007fb1a0876ea3:   add    0x4(%r15),%eax
  0x00007fb1a0876ea7:   xor    %edx,%esi
  0x00007fb1a0876ea9:   xor    %ebx,%esi
  0x00007fb1a0876eab:   add    %esi,%eax
  0x00007fb1a0876ead:   rol    $0x4,%eax
  0x00007fb1a0876eb0:   add    %ebx,%eax
  0x00007fb1a0876eb2:   add    $0x4bdecfa9,%edx
  0x00007fb1a0876eb8:   mov    %ebx,%esi
  0x00007fb1a0876eba:   add    0x10(%r15),%edx
  0x00007fb1a0876ebe:   xor    %ecx,%esi
  0x00007fb1a0876ec0:   xor    %eax,%esi
  0x00007fb1a0876ec2:   add    %esi,%edx
  0x00007fb1a0876ec4:   rol    $0xb,%edx
  0x00007fb1a0876ec7:   add    %eax,%edx
  0x00007fb1a0876ec9:   add    $0xf6bb4b60,%ecx
  0x00007fb1a0876ecf:   mov    %eax,%esi
  0x00007fb1a0876ed1:   add    0x1c(%r15),%ecx
  0x00007fb1a0876ed5:   xor    %ebx,%esi
  0x00007fb1a0876ed7:   xor    %edx,%esi
  0x00007fb1a0876ed9:   add    %esi,%ecx
  0x00007fb1a0876edb:   rol    $0x10,%ecx
  0x00007fb1a0876ede:   add    %edx,%ecx
  0x00007fb1a0876ee0:   add    $0xbebfbc70,%ebx
  0x00007fb1a0876ee6:   mov    %edx,%esi
  0x00007fb1a0876ee8:   add    0x28(%r15),%ebx
  0x00007fb1a0876eec:   xor    %eax,%esi
  0x00007fb1a0876eee:   xor    %ecx,%esi
  0x00007fb1a0876ef0:   add    %esi,%ebx
  0x00007fb1a0876ef2:   rol    $0x17,%ebx
  0x00007fb1a0876ef5:   add    %ecx,%ebx
  0x00007fb1a0876ef7:   add    $0x289b7ec6,%eax
  0x00007fb1a0876efc:   mov    %ecx,%esi
  0x00007fb1a0876efe:   add    0x34(%r15),%eax
  0x00007fb1a0876f02:   xor    %edx,%esi
  0x00007fb1a0876f04:   xor    %ebx,%esi
  0x00007fb1a0876f06:   add    %esi,%eax
  0x00007fb1a0876f08:   rol    $0x4,%eax
  0x00007fb1a0876f0b:   add    %ebx,%eax
  0x00007fb1a0876f0d:   add    $0xeaa127fa,%edx
  0x00007fb1a0876f13:   mov    %ebx,%esi
  0x00007fb1a0876f15:   add    (%r15),%edx
  0x00007fb1a0876f18:   xor    %ecx,%esi
  0x00007fb1a0876f1a:   xor    %eax,%esi
  0x00007fb1a0876f1c:   add    %esi,%edx
  0x00007fb1a0876f1e:   rol    $0xb,%edx
  0x00007fb1a0876f21:   add    %eax,%edx
  0x00007fb1a0876f23:   add    $0xd4ef3085,%ecx
  0x00007fb1a0876f29:   mov    %eax,%esi
  0x00007fb1a0876f2b:   add    0xc(%r15),%ecx
  0x00007fb1a0876f2f:   xor    %ebx,%esi
  0x00007fb1a0876f31:   xor    %edx,%esi
  0x00007fb1a0876f33:   add    %esi,%ecx
  0x00007fb1a0876f35:   rol    $0x10,%ecx
  0x00007fb1a0876f38:   add    %edx,%ecx
  0x00007fb1a0876f3a:   add    $0x4881d05,%ebx
  0x00007fb1a0876f40:   mov    %edx,%esi
  0x00007fb1a0876f42:   add    0x18(%r15),%ebx
  0x00007fb1a0876f46:   xor    %eax,%esi
  0x00007fb1a0876f48:   xor    %ecx,%esi
  0x00007fb1a0876f4a:   add    %esi,%ebx
  0x00007fb1a0876f4c:   rol    $0x17,%ebx
  0x00007fb1a0876f4f:   add    %ecx,%ebx
  0x00007fb1a0876f51:   add    $0xd9d4d039,%eax
  0x00007fb1a0876f56:   mov    %ecx,%esi
  0x00007fb1a0876f58:   add    0x24(%r15),%eax
  0x00007fb1a0876f5c:   xor    %edx,%esi
  0x00007fb1a0876f5e:   xor    %ebx,%esi
  0x00007fb1a0876f60:   add    %esi,%eax
  0x00007fb1a0876f62:   rol    $0x4,%eax
  0x00007fb1a0876f65:   add    %ebx,%eax
  0x00007fb1a0876f67:   add    $0xe6db99e5,%edx
  0x00007fb1a0876f6d:   mov    %ebx,%esi
  0x00007fb1a0876f6f:   add    0x30(%r15),%edx
  0x00007fb1a0876f73:   xor    %ecx,%esi
  0x00007fb1a0876f75:   xor    %eax,%esi
  0x00007fb1a0876f77:   add    %esi,%edx
  0x00007fb1a0876f79:   rol    $0xb,%edx
  0x00007fb1a0876f7c:   add    %eax,%edx
  0x00007fb1a0876f7e:   add    $0x1fa27cf8,%ecx
  0x00007fb1a0876f84:   mov    %eax,%esi
  0x00007fb1a0876f86:   add    0x3c(%r15),%ecx
  0x00007fb1a0876f8a:   xor    %ebx,%esi
  0x00007fb1a0876f8c:   xor    %edx,%esi
  0x00007fb1a0876f8e:   add    %esi,%ecx
  0x00007fb1a0876f90:   rol    $0x10,%ecx
  0x00007fb1a0876f93:   add    %edx,%ecx
  0x00007fb1a0876f95:   add    $0xc4ac5665,%ebx
  0x00007fb1a0876f9b:   mov    %edx,%esi
  0x00007fb1a0876f9d:   add    0x8(%r15),%ebx
  0x00007fb1a0876fa1:   xor    %eax,%esi
  0x00007fb1a0876fa3:   xor    %ecx,%esi
  0x00007fb1a0876fa5:   add    %esi,%ebx
  0x00007fb1a0876fa7:   rol    $0x17,%ebx
  0x00007fb1a0876faa:   add    %ecx,%ebx
  0x00007fb1a0876fac:   add    $0xf4292244,%eax
  0x00007fb1a0876fb1:   mov    %edx,%esi
  0x00007fb1a0876fb3:   not    %esi
  0x00007fb1a0876fb5:   add    (%r15),%eax
  0x00007fb1a0876fb8:   or     %ebx,%esi
  0x00007fb1a0876fba:   xor    %ecx,%esi
  0x00007fb1a0876fbc:   add    %esi,%eax
  0x00007fb1a0876fbe:   rol    $0x6,%eax
  0x00007fb1a0876fc1:   add    %ebx,%eax
  0x00007fb1a0876fc3:   add    $0x432aff97,%edx
  0x00007fb1a0876fc9:   mov    %ecx,%esi
  0x00007fb1a0876fcb:   not    %esi
  0x00007fb1a0876fcd:   add    0x1c(%r15),%edx
  0x00007fb1a0876fd1:   or     %eax,%esi
  0x00007fb1a0876fd3:   xor    %ebx,%esi
  0x00007fb1a0876fd5:   add    %esi,%edx
  0x00007fb1a0876fd7:   rol    $0xa,%edx
  0x00007fb1a0876fda:   add    %eax,%edx
  0x00007fb1a0876fdc:   add    $0xab9423a7,%ecx
  0x00007fb1a0876fe2:   mov    %ebx,%esi
  0x00007fb1a0876fe4:   not    %esi
  0x00007fb1a0876fe6:   add    0x38(%r15),%ecx
  0x00007fb1a0876fea:   or     %edx,%esi
  0x00007fb1a0876fec:   xor    %eax,%esi
  0x00007fb1a0876fee:   add    %esi,%ecx
  0x00007fb1a0876ff0:   rol    $0xf,%ecx
  0x00007fb1a0876ff3:   add    %edx,%ecx
  0x00007fb1a0876ff5:   add    $0xfc93a039,%ebx
  0x00007fb1a0876ffb:   mov    %eax,%esi
  0x00007fb1a0876ffd:   not    %esi
  0x00007fb1a0876fff:   add    0x14(%r15),%ebx
  0x00007fb1a0877003:   or     %ecx,%esi
  0x00007fb1a0877005:   xor    %edx,%esi
  0x00007fb1a0877007:   add    %esi,%ebx
  0x00007fb1a0877009:   rol    $0x15,%ebx
  0x00007fb1a087700c:   add    %ecx,%ebx
  0x00007fb1a087700e:   add    $0x655b59c3,%eax
  0x00007fb1a0877013:   mov    %edx,%esi
  0x00007fb1a0877015:   not    %esi
  0x00007fb1a0877017:   add    0x30(%r15),%eax
  0x00007fb1a087701b:   or     %ebx,%esi
  0x00007fb1a087701d:   xor    %ecx,%esi
  0x00007fb1a087701f:   add    %esi,%eax
  0x00007fb1a0877021:   rol    $0x6,%eax
  0x00007fb1a0877024:   add    %ebx,%eax
  0x00007fb1a0877026:   add    $0x8f0ccc92,%edx
  0x00007fb1a087702c:   mov    %ecx,%esi
  0x00007fb1a087702e:   not    %esi
  0x00007fb1a0877030:   add    0xc(%r15),%edx
  0x00007fb1a0877034:   or     %eax,%esi
  0x00007fb1a0877036:   xor    %ebx,%esi
  0x00007fb1a0877038:   add    %esi,%edx
  0x00007fb1a087703a:   rol    $0xa,%edx
  0x00007fb1a087703d:   add    %eax,%edx
  0x00007fb1a087703f:   add    $0xffeff47d,%ecx
  0x00007fb1a0877045:   mov    %ebx,%esi
  0x00007fb1a0877047:   not    %esi
  0x00007fb1a0877049:   add    0x28(%r15),%ecx
  0x00007fb1a087704d:   or     %edx,%esi
  0x00007fb1a087704f:   xor    %eax,%esi
  0x00007fb1a0877051:   add    %esi,%ecx
  0x00007fb1a0877053:   rol    $0xf,%ecx
  0x00007fb1a0877056:   add    %edx,%ecx
  0x00007fb1a0877058:   add    $0x85845dd1,%ebx
  0x00007fb1a087705e:   mov    %eax,%esi
  0x00007fb1a0877060:   not    %esi
  0x00007fb1a0877062:   add    0x4(%r15),%ebx
  0x00007fb1a0877066:   or     %ecx,%esi
  0x00007fb1a0877068:   xor    %edx,%esi
  0x00007fb1a087706a:   add    %esi,%ebx
  0x00007fb1a087706c:   rol    $0x15,%ebx
  0x00007fb1a087706f:   add    %ecx,%ebx
  0x00007fb1a0877071:   add    $0x6fa87e4f,%eax
  0x00007fb1a0877076:   mov    %edx,%esi
  0x00007fb1a0877078:   not    %esi
  0x00007fb1a087707a:   add    0x20(%r15),%eax
  0x00007fb1a087707e:   or     %ebx,%esi
  0x00007fb1a0877080:   xor    %ecx,%esi
  0x00007fb1a0877082:   add    %esi,%eax
  0x00007fb1a0877084:   rol    $0x6,%eax
  0x00007fb1a0877087:   add    %ebx,%eax
  0x00007fb1a0877089:   add    $0xfe2ce6e0,%edx
  0x00007fb1a087708f:   mov    %ecx,%esi
  0x00007fb1a0877091:   not    %esi
  0x00007fb1a0877093:   add    0x3c(%r15),%edx
  0x00007fb1a0877097:   or     %eax,%esi
  0x00007fb1a0877099:   xor    %ebx,%esi
  0x00007fb1a087709b:   add    %esi,%edx
  0x00007fb1a087709d:   rol    $0xa,%edx
  0x00007fb1a08770a0:   add    %eax,%edx
  0x00007fb1a08770a2:   add    $0xa3014314,%ecx
  0x00007fb1a08770a8:   mov    %ebx,%esi
  0x00007fb1a08770aa:   not    %esi
  0x00007fb1a08770ac:   add    0x18(%r15),%ecx
  0x00007fb1a08770b0:   or     %edx,%esi
  0x00007fb1a08770b2:   xor    %eax,%esi
  0x00007fb1a08770b4:   add    %esi,%ecx
  0x00007fb1a08770b6:   rol    $0xf,%ecx
  0x00007fb1a08770b9:   add    %edx,%ecx
  0x00007fb1a08770bb:   add    $0x4e0811a1,%ebx
  0x00007fb1a08770c1:   mov    %eax,%esi
  0x00007fb1a08770c3:   not    %esi
  0x00007fb1a08770c5:   add    0x34(%r15),%ebx
  0x00007fb1a08770c9:   or     %ecx,%esi
  0x00007fb1a08770cb:   xor    %edx,%esi
  0x00007fb1a08770cd:   add    %esi,%ebx
  0x00007fb1a08770cf:   rol    $0x15,%ebx
  0x00007fb1a08770d2:   add    %ecx,%ebx
  0x00007fb1a08770d4:   add    $0xf7537e82,%eax
  0x00007fb1a08770d9:   mov    %edx,%esi
  0x00007fb1a08770db:   not    %esi
  0x00007fb1a08770dd:   add    0x10(%r15),%eax
  0x00007fb1a08770e1:   or     %ebx,%esi
  0x00007fb1a08770e3:   xor    %ecx,%esi
  0x00007fb1a08770e5:   add    %esi,%eax
  0x00007fb1a08770e7:   rol    $0x6,%eax
  0x00007fb1a08770ea:   add    %ebx,%eax
  0x00007fb1a08770ec:   add    $0xbd3af235,%edx
  0x00007fb1a08770f2:   mov    %ecx,%esi
  0x00007fb1a08770f4:   not    %esi
  0x00007fb1a08770f6:   add    0x2c(%r15),%edx
  0x00007fb1a08770fa:   or     %eax,%esi
  0x00007fb1a08770fc:   xor    %ebx,%esi
  0x00007fb1a08770fe:   add    %esi,%edx
  0x00007fb1a0877100:   rol    $0xa,%edx
  0x00007fb1a0877103:   add    %eax,%edx
  0x00007fb1a0877105:   add    $0x2ad7d2bb,%ecx
  0x00007fb1a087710b:   mov    %ebx,%esi
  0x00007fb1a087710d:   not    %esi
  0x00007fb1a087710f:   add    0x8(%r15),%ecx
  0x00007fb1a0877113:   or     %edx,%esi
  0x00007fb1a0877115:   xor    %eax,%esi
  0x00007fb1a0877117:   add    %esi,%ecx
  0x00007fb1a0877119:   rol    $0xf,%ecx
  0x00007fb1a087711c:   add    %edx,%ecx
  0x00007fb1a087711e:   add    $0xeb86d391,%ebx
  0x00007fb1a0877124:   mov    %eax,%esi
  0x00007fb1a0877126:   not    %esi
  0x00007fb1a0877128:   add    0x24(%r15),%ebx
  0x00007fb1a087712c:   or     %ecx,%esi
  0x00007fb1a087712e:   xor    %edx,%esi
  0x00007fb1a0877130:   add    %esi,%ebx
  0x00007fb1a0877132:   rol    $0x15,%ebx
  0x00007fb1a0877135:   add    %ecx,%ebx
  0x00007fb1a0877137:   mov    (%rsp),%rdi
  0x00007fb1a087713b:   add    %eax,(%rdi)
  0x00007fb1a087713d:   add    %ebx,0x4(%rdi)
  0x00007fb1a0877140:   add    %ecx,0x8(%rdi)
  0x00007fb1a0877143:   add    %edx,0xc(%rdi)
  0x00007fb1a0877146:   add    $0x40,%r15
  0x00007fb1a087714a:   addl   $0x40,0x8(%rsp)
  0x00007fb1a087714f:   mov    0x8(%rsp),%esi
  0x00007fb1a0877153:   cmp    0xc(%rsp),%esi
  0x00007fb1a0877157:   jbe    Stub::md5_implCompressMB+28 0x00007fb1a0876adc
  0x00007fb1a087715d:   mov    %rsi,%rax
  0x00007fb1a0877160:   add    $0x10,%rsp
  0x00007fb1a0877164:   pop    %r15
  0x00007fb1a0877166:   pop    %rsi
  0x00007fb1a0877167:   pop    %rdi
  0x00007fb1a0877168:   pop    %rbx
  0x00007fb1a0877169:   leaveq 
  0x00007fb1a087716a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::pshuffle_byte_flip_mask [0x00007fb1a08771c0, 0x00007fb1a0877220] (96 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08771c0:   add    (%rdx),%eax
  0x00007fb1a08771c2:   add    %eax,(%rax)
  0x00007fb1a08771c4:   (bad)  
  0x00007fb1a08771c5:   (bad)  
  0x00007fb1a08771c6:   add    $0x90a0b04,%eax
  0x00007fb1a08771cb:   or     %cl,(%rdi)
  0x00007fb1a08771cd:   (bad)  
  0x00007fb1a08771ce:   or     $0x102030c,%eax
  0x00007fb1a08771d3:   add    %al,(%rdi)
  0x00007fb1a08771d5:   (bad)  
  0x00007fb1a08771d6:   add    $0x90a0b04,%eax
  0x00007fb1a08771db:   or     %cl,(%rdi)
  0x00007fb1a08771dd:   (bad)  
  0x00007fb1a08771de:   or     $0x201000c,%eax
  0x00007fb1a08771e3:   add    (%rax),%ecx
  0x00007fb1a08771e5:   or     %ecx,(%rdx)
  0x00007fb1a08771e7:   or     %edi,%edi
  0x00007fb1a08771e9:   (bad)  
  0x00007fb1a08771ea:   (bad)  
  0x00007fb1a08771eb:   (bad)  
  0x00007fb1a08771ec:   (bad)  
  0x00007fb1a08771ed:   (bad)  
  0x00007fb1a08771ee:   (bad)  
  0x00007fb1a08771ef:   incl   (%rax)
  0x00007fb1a08771f1:   add    %eax,(%rdx)
  0x00007fb1a08771f3:   add    (%rax),%ecx
  0x00007fb1a08771f5:   or     %ecx,(%rdx)
  0x00007fb1a08771f7:   or     %edi,%edi
  0x00007fb1a08771f9:   (bad)  
  0x00007fb1a08771fa:   (bad)  
  0x00007fb1a08771fb:   (bad)  
  0x00007fb1a08771fc:   (bad)  
  0x00007fb1a08771fd:   (bad)  
  0x00007fb1a08771fe:   (bad)  
  0x00007fb1a08771ff:   (bad)  
  0x00007fb1a0877200:   (bad)  
  0x00007fb1a0877201:   (bad)  
  0x00007fb1a0877202:   (bad)  
  0x00007fb1a0877203:   (bad)  
  0x00007fb1a0877204:   (bad)  
  0x00007fb1a0877205:   (bad)  
  0x00007fb1a0877206:   (bad)  
  0x00007fb1a0877207:   incl   (%rax)
  0x00007fb1a0877209:   add    %eax,(%rdx)
  0x00007fb1a087720b:   add    (%rax),%ecx
  0x00007fb1a087720d:   or     %ecx,(%rdx)
  0x00007fb1a087720f:   or     %edi,%edi
  0x00007fb1a0877211:   (bad)  
  0x00007fb1a0877212:   (bad)  
  0x00007fb1a0877213:   (bad)  
  0x00007fb1a0877214:   (bad)  
  0x00007fb1a0877215:   (bad)  
  0x00007fb1a0877216:   (bad)  
  0x00007fb1a0877217:   incl   (%rax)
  0x00007fb1a0877219:   add    %eax,(%rdx)
  0x00007fb1a087721b:   add    (%rax),%ecx
  0x00007fb1a087721d:   or     %ecx,(%rdx)
  0x00007fb1a087721f:   .byte 0xb
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha256_implCompress [0x00007fb1a0877220, 0x00007fb1a087834f] (4399 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0877220:   push   %rbp
  0x00007fb1a0877221:   mov    %rsp,%rbp
  0x00007fb1a0877224:   sub    $0x20,%rsp
  0x00007fb1a0877228:   push   %rcx
  0x00007fb1a0877229:   push   %rdx
  0x00007fb1a087722a:   push   %rbx
  0x00007fb1a087722b:   push   %rbp
  0x00007fb1a087722c:   push   %r12
  0x00007fb1a087722e:   push   %r13
  0x00007fb1a0877230:   push   %r14
  0x00007fb1a0877232:   push   %r15
  0x00007fb1a0877234:   mov    %rsp,%rax
  0x00007fb1a0877237:   sub    $0x220,%rsp
  0x00007fb1a087723e:   and    $0xffffffffffffffe0,%rsp
  0x00007fb1a0877242:   mov    %rax,0x218(%rsp)
  0x00007fb1a087724a:   mov    %rcx,%r9
  0x00007fb1a087724d:   mov    %rdx,%r8
  0x00007fb1a0877250:   mov    %rsi,%rdx
  0x00007fb1a0877253:   mov    %rdi,%rcx
  0x00007fb1a0877256:   lea    (%rcx),%rcx
  0x00007fb1a0877259:   mov    %rdx,%rdx
  0x00007fb1a087725c:   xor    %r8,%r8
  0x00007fb1a087725f:   add    $0x40,%r8
  0x00007fb1a0877263:   lea    -0x40(%rcx,%r8,1),%r8
  0x00007fb1a0877268:   mov    %r8,0x200(%rsp)
  0x00007fb1a0877270:   cmp    %r8,%rcx
  0x00007fb1a0877273:   je     Stub::sha256_implCompress+4309 0x00007fb1a08782f5
  0x00007fb1a0877279:   mov    (%rdx),%eax
  0x00007fb1a087727b:   mov    0x4(%rdx),%ebx
  0x00007fb1a087727e:   mov    0x8(%rdx),%edi
  0x00007fb1a0877281:   mov    0xc(%rdx),%esi
  0x00007fb1a0877284:   mov    0x10(%rdx),%r8d
  0x00007fb1a0877288:   mov    0x14(%rdx),%r9d
  0x00007fb1a087728c:   mov    0x1c(%rdx),%r11d
  0x00007fb1a0877290:   vmovdqu -0xd8(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007fb1a0877298:   vmovdqu -0xc0(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007fb1a08771e0
  0x00007fb1a08772a0:   vmovdqu -0xa8(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007fb1a0877200
  0x00007fb1a08772a8:   mov    0x18(%rdx),%r10d
  0x00007fb1a08772ac:   mov    %rdx,0x210(%rsp)
  0x00007fb1a08772b4:   movabs $0x7fb1a4f454c0,%rbp
  0x00007fb1a08772be:   vmovdqu (%rcx),%ymm0
  0x00007fb1a08772c2:   vmovdqu 0x20(%rcx),%ymm1
  0x00007fb1a08772c7:   vmovdqu 0x40(%rcx),%ymm2
  0x00007fb1a08772cc:   vmovdqu 0x60(%rcx),%ymm3
  0x00007fb1a08772d1:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007fb1a08772d6:   vpshufb %ymm13,%ymm1,%ymm1
  0x00007fb1a08772db:   vpshufb %ymm13,%ymm2,%ymm2
  0x00007fb1a08772e0:   vpshufb %ymm13,%ymm3,%ymm3
  0x00007fb1a08772e5:   vperm2i128 $0x20,%ymm2,%ymm0,%ymm4
  0x00007fb1a08772eb:   vperm2i128 $0x31,%ymm2,%ymm0,%ymm5
  0x00007fb1a08772f1:   vperm2i128 $0x20,%ymm3,%ymm1,%ymm6
  0x00007fb1a08772f7:   vperm2i128 $0x31,%ymm3,%ymm1,%ymm7
  0x00007fb1a08772fd:   add    $0x40,%rcx
  0x00007fb1a0877301:   mov    %rcx,0x208(%rsp)
  0x00007fb1a0877309:   xor    %rdx,%rdx
  0x00007fb1a087730c:   nopl   0x0(%rax)
  0x00007fb1a0877310:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007fb1a0877316:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007fb1a087731b:   mov    %eax,%ecx
  0x00007fb1a087731d:   rorx   $0x19,%r8d,%r13d
  0x00007fb1a0877323:   rorx   $0xb,%r8d,%r14d
  0x00007fb1a0877329:   add    (%rsp,%rdx,1),%r11d
  0x00007fb1a087732d:   or     %edi,%ecx
  0x00007fb1a087732f:   mov    %r9d,%r15d
  0x00007fb1a0877332:   rorx   $0xd,%eax,%r12d
  0x00007fb1a0877338:   xor    %r14d,%r13d
  0x00007fb1a087733b:   xor    %r10d,%r15d
  0x00007fb1a087733e:   rorx   $0x6,%r8d,%r14d
  0x00007fb1a0877344:   and    %r8d,%r15d
  0x00007fb1a0877347:   xor    %r14d,%r13d
  0x00007fb1a087734a:   rorx   $0x16,%eax,%r14d
  0x00007fb1a0877350:   add    %r11d,%esi
  0x00007fb1a0877353:   and    %ebx,%ecx
  0x00007fb1a0877355:   xor    %r12d,%r14d
  0x00007fb1a0877358:   rorx   $0x2,%eax,%r12d
  0x00007fb1a087735e:   xor    %r10d,%r15d
  0x00007fb1a0877361:   xor    %r12d,%r14d
  0x00007fb1a0877364:   mov    %eax,%r12d
  0x00007fb1a0877367:   and    %edi,%r12d
  0x00007fb1a087736a:   add    %r13d,%r15d
  0x00007fb1a087736d:   or     %r12d,%ecx
  0x00007fb1a0877370:   add    %r14d,%r11d
  0x00007fb1a0877373:   add    %r15d,%esi
  0x00007fb1a0877376:   add    %r15d,%r11d
  0x00007fb1a0877379:   add    %ecx,%r11d
  0x00007fb1a087737c:   vpalignr $0x4,%ymm6,%ymm7,%ymm0
  0x00007fb1a0877382:   vpaddd %ymm4,%ymm0,%ymm0
  0x00007fb1a0877386:   vpalignr $0x4,%ymm4,%ymm5,%ymm1
  0x00007fb1a087738c:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fb1a0877391:   vpslld $0x19,%ymm1,%ymm3
  0x00007fb1a0877396:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a087739a:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fb1a087739f:   mov    %r11d,%ecx
  0x00007fb1a08773a2:   rorx   $0x19,%esi,%r13d
  0x00007fb1a08773a8:   rorx   $0xb,%esi,%r14d
  0x00007fb1a08773ae:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007fb1a08773b3:   or     %ebx,%ecx
  0x00007fb1a08773b5:   mov    %r8d,%r15d
  0x00007fb1a08773b8:   rorx   $0xd,%r11d,%r12d
  0x00007fb1a08773be:   xor    %r14d,%r13d
  0x00007fb1a08773c1:   xor    %r9d,%r15d
  0x00007fb1a08773c4:   rorx   $0x6,%esi,%r14d
  0x00007fb1a08773ca:   and    %esi,%r15d
  0x00007fb1a08773cd:   xor    %r14d,%r13d
  0x00007fb1a08773d0:   rorx   $0x16,%r11d,%r14d
  0x00007fb1a08773d6:   add    %r10d,%edi
  0x00007fb1a08773d9:   and    %eax,%ecx
  0x00007fb1a08773db:   xor    %r12d,%r14d
  0x00007fb1a08773de:   rorx   $0x2,%r11d,%r12d
  0x00007fb1a08773e4:   xor    %r9d,%r15d
  0x00007fb1a08773e7:   xor    %r12d,%r14d
  0x00007fb1a08773ea:   mov    %r11d,%r12d
  0x00007fb1a08773ed:   and    %ebx,%r12d
  0x00007fb1a08773f0:   add    %r13d,%r15d
  0x00007fb1a08773f3:   or     %r12d,%ecx
  0x00007fb1a08773f6:   add    %r14d,%r10d
  0x00007fb1a08773f9:   add    %r15d,%edi
  0x00007fb1a08773fc:   add    %r15d,%r10d
  0x00007fb1a08773ff:   add    %ecx,%r10d
  0x00007fb1a0877402:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fb1a0877407:   vpslld $0xe,%ymm1,%ymm1
  0x00007fb1a087740c:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fb1a0877410:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fb1a0877414:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fb1a0877419:   vpshufd $0xfa,%ymm7,%ymm2
  0x00007fb1a087741e:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fb1a0877422:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fb1a0877427:   mov    %r10d,%ecx
  0x00007fb1a087742a:   rorx   $0x19,%edi,%r13d
  0x00007fb1a0877430:   rorx   $0xb,%edi,%r14d
  0x00007fb1a0877436:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007fb1a087743b:   or     %eax,%ecx
  0x00007fb1a087743d:   mov    %esi,%r15d
  0x00007fb1a0877440:   rorx   $0xd,%r10d,%r12d
  0x00007fb1a0877446:   xor    %r14d,%r13d
  0x00007fb1a0877449:   xor    %r8d,%r15d
  0x00007fb1a087744c:   rorx   $0x6,%edi,%r14d
  0x00007fb1a0877452:   and    %edi,%r15d
  0x00007fb1a0877455:   xor    %r14d,%r13d
  0x00007fb1a0877458:   rorx   $0x16,%r10d,%r14d
  0x00007fb1a087745e:   add    %r9d,%ebx
  0x00007fb1a0877461:   and    %r11d,%ecx
  0x00007fb1a0877464:   xor    %r12d,%r14d
  0x00007fb1a0877467:   rorx   $0x2,%r10d,%r12d
  0x00007fb1a087746d:   xor    %r8d,%r15d
  0x00007fb1a0877470:   xor    %r12d,%r14d
  0x00007fb1a0877473:   mov    %r10d,%r12d
  0x00007fb1a0877476:   and    %eax,%r12d
  0x00007fb1a0877479:   add    %r13d,%r15d
  0x00007fb1a087747c:   or     %r12d,%ecx
  0x00007fb1a087747f:   add    %r14d,%r9d
  0x00007fb1a0877482:   add    %r15d,%ebx
  0x00007fb1a0877485:   add    %r15d,%r9d
  0x00007fb1a0877488:   add    %ecx,%r9d
  0x00007fb1a087748b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0877490:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a0877495:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a0877499:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fb1a087749d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fb1a08774a2:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fb1a08774a7:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fb1a08774ac:   mov    %r9d,%ecx
  0x00007fb1a08774af:   rorx   $0x19,%ebx,%r13d
  0x00007fb1a08774b5:   rorx   $0xb,%ebx,%r14d
  0x00007fb1a08774bb:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007fb1a08774c0:   or     %r11d,%ecx
  0x00007fb1a08774c3:   mov    %edi,%r15d
  0x00007fb1a08774c6:   rorx   $0xd,%r9d,%r12d
  0x00007fb1a08774cc:   xor    %r14d,%r13d
  0x00007fb1a08774cf:   xor    %esi,%r15d
  0x00007fb1a08774d2:   rorx   $0x6,%ebx,%r14d
  0x00007fb1a08774d8:   and    %ebx,%r15d
  0x00007fb1a08774db:   xor    %r14d,%r13d
  0x00007fb1a08774de:   rorx   $0x16,%r9d,%r14d
  0x00007fb1a08774e4:   add    %r8d,%eax
  0x00007fb1a08774e7:   and    %r10d,%ecx
  0x00007fb1a08774ea:   xor    %r12d,%r14d
  0x00007fb1a08774ed:   rorx   $0x2,%r9d,%r12d
  0x00007fb1a08774f3:   xor    %esi,%r15d
  0x00007fb1a08774f6:   xor    %r12d,%r14d
  0x00007fb1a08774f9:   mov    %r9d,%r12d
  0x00007fb1a08774fc:   and    %r11d,%r12d
  0x00007fb1a08774ff:   add    %r13d,%r15d
  0x00007fb1a0877502:   or     %r12d,%ecx
  0x00007fb1a0877505:   add    %r14d,%r8d
  0x00007fb1a0877508:   add    %r15d,%eax
  0x00007fb1a087750b:   add    %r15d,%r8d
  0x00007fb1a087750e:   add    %ecx,%r8d
  0x00007fb1a0877511:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fb1a0877516:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a087751b:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a0877520:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a0877524:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fb1a0877528:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fb1a087752d:   vpaddd %ymm0,%ymm11,%ymm4
  0x00007fb1a0877531:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007fb1a0877537:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007fb1a087753d:   mov    %r8d,%ecx
  0x00007fb1a0877540:   rorx   $0x19,%eax,%r13d
  0x00007fb1a0877546:   rorx   $0xb,%eax,%r14d
  0x00007fb1a087754c:   add    0x20(%rsp,%rdx,1),%esi
  0x00007fb1a0877550:   or     %r10d,%ecx
  0x00007fb1a0877553:   mov    %ebx,%r15d
  0x00007fb1a0877556:   rorx   $0xd,%r8d,%r12d
  0x00007fb1a087755c:   xor    %r14d,%r13d
  0x00007fb1a087755f:   xor    %edi,%r15d
  0x00007fb1a0877562:   rorx   $0x6,%eax,%r14d
  0x00007fb1a0877568:   and    %eax,%r15d
  0x00007fb1a087756b:   xor    %r14d,%r13d
  0x00007fb1a087756e:   rorx   $0x16,%r8d,%r14d
  0x00007fb1a0877574:   add    %esi,%r11d
  0x00007fb1a0877577:   and    %r9d,%ecx
  0x00007fb1a087757a:   xor    %r12d,%r14d
  0x00007fb1a087757d:   rorx   $0x2,%r8d,%r12d
  0x00007fb1a0877583:   xor    %edi,%r15d
  0x00007fb1a0877586:   xor    %r12d,%r14d
  0x00007fb1a0877589:   mov    %r8d,%r12d
  0x00007fb1a087758c:   and    %r10d,%r12d
  0x00007fb1a087758f:   add    %r13d,%r15d
  0x00007fb1a0877592:   or     %r12d,%ecx
  0x00007fb1a0877595:   add    %r14d,%esi
  0x00007fb1a0877598:   add    %r15d,%r11d
  0x00007fb1a087759b:   add    %r15d,%esi
  0x00007fb1a087759e:   add    %ecx,%esi
  0x00007fb1a08775a0:   vpalignr $0x4,%ymm7,%ymm4,%ymm0
  0x00007fb1a08775a6:   vpaddd %ymm5,%ymm0,%ymm0
  0x00007fb1a08775aa:   vpalignr $0x4,%ymm5,%ymm6,%ymm1
  0x00007fb1a08775b0:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fb1a08775b5:   vpslld $0x19,%ymm1,%ymm3
  0x00007fb1a08775ba:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a08775be:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fb1a08775c3:   mov    %esi,%ecx
  0x00007fb1a08775c5:   rorx   $0x19,%r11d,%r13d
  0x00007fb1a08775cb:   rorx   $0xb,%r11d,%r14d
  0x00007fb1a08775d1:   add    0x24(%rsp,%rdx,1),%edi
  0x00007fb1a08775d5:   or     %r9d,%ecx
  0x00007fb1a08775d8:   mov    %eax,%r15d
  0x00007fb1a08775db:   rorx   $0xd,%esi,%r12d
  0x00007fb1a08775e1:   xor    %r14d,%r13d
  0x00007fb1a08775e4:   xor    %ebx,%r15d
  0x00007fb1a08775e7:   rorx   $0x6,%r11d,%r14d
  0x00007fb1a08775ed:   and    %r11d,%r15d
  0x00007fb1a08775f0:   xor    %r14d,%r13d
  0x00007fb1a08775f3:   rorx   $0x16,%esi,%r14d
  0x00007fb1a08775f9:   add    %edi,%r10d
  0x00007fb1a08775fc:   and    %r8d,%ecx
  0x00007fb1a08775ff:   xor    %r12d,%r14d
  0x00007fb1a0877602:   rorx   $0x2,%esi,%r12d
  0x00007fb1a0877608:   xor    %ebx,%r15d
  0x00007fb1a087760b:   xor    %r12d,%r14d
  0x00007fb1a087760e:   mov    %esi,%r12d
  0x00007fb1a0877611:   and    %r9d,%r12d
  0x00007fb1a0877614:   add    %r13d,%r15d
  0x00007fb1a0877617:   or     %r12d,%ecx
  0x00007fb1a087761a:   add    %r14d,%edi
  0x00007fb1a087761d:   add    %r15d,%r10d
  0x00007fb1a0877620:   add    %r15d,%edi
  0x00007fb1a0877623:   add    %ecx,%edi
  0x00007fb1a0877625:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fb1a087762a:   vpslld $0xe,%ymm1,%ymm1
  0x00007fb1a087762f:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fb1a0877633:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fb1a0877637:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fb1a087763c:   vpshufd $0xfa,%ymm4,%ymm2
  0x00007fb1a0877641:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fb1a0877645:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fb1a087764a:   mov    %edi,%ecx
  0x00007fb1a087764c:   rorx   $0x19,%r10d,%r13d
  0x00007fb1a0877652:   rorx   $0xb,%r10d,%r14d
  0x00007fb1a0877658:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007fb1a087765c:   or     %r8d,%ecx
  0x00007fb1a087765f:   mov    %r11d,%r15d
  0x00007fb1a0877662:   rorx   $0xd,%edi,%r12d
  0x00007fb1a0877668:   xor    %r14d,%r13d
  0x00007fb1a087766b:   xor    %eax,%r15d
  0x00007fb1a087766e:   rorx   $0x6,%r10d,%r14d
  0x00007fb1a0877674:   and    %r10d,%r15d
  0x00007fb1a0877677:   xor    %r14d,%r13d
  0x00007fb1a087767a:   rorx   $0x16,%edi,%r14d
  0x00007fb1a0877680:   add    %ebx,%r9d
  0x00007fb1a0877683:   and    %esi,%ecx
  0x00007fb1a0877685:   xor    %r12d,%r14d
  0x00007fb1a0877688:   rorx   $0x2,%edi,%r12d
  0x00007fb1a087768e:   xor    %eax,%r15d
  0x00007fb1a0877691:   xor    %r12d,%r14d
  0x00007fb1a0877694:   mov    %edi,%r12d
  0x00007fb1a0877697:   and    %r8d,%r12d
  0x00007fb1a087769a:   add    %r13d,%r15d
  0x00007fb1a087769d:   or     %r12d,%ecx
  0x00007fb1a08776a0:   add    %r14d,%ebx
  0x00007fb1a08776a3:   add    %r15d,%r9d
  0x00007fb1a08776a6:   add    %r15d,%ebx
  0x00007fb1a08776a9:   add    %ecx,%ebx
  0x00007fb1a08776ab:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a08776b0:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a08776b5:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a08776b9:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fb1a08776bd:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fb1a08776c2:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fb1a08776c7:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fb1a08776cc:   mov    %ebx,%ecx
  0x00007fb1a08776ce:   rorx   $0x19,%r9d,%r13d
  0x00007fb1a08776d4:   rorx   $0xb,%r9d,%r14d
  0x00007fb1a08776da:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007fb1a08776de:   or     %esi,%ecx
  0x00007fb1a08776e0:   mov    %r10d,%r15d
  0x00007fb1a08776e3:   rorx   $0xd,%ebx,%r12d
  0x00007fb1a08776e9:   xor    %r14d,%r13d
  0x00007fb1a08776ec:   xor    %r11d,%r15d
  0x00007fb1a08776ef:   rorx   $0x6,%r9d,%r14d
  0x00007fb1a08776f5:   and    %r9d,%r15d
  0x00007fb1a08776f8:   xor    %r14d,%r13d
  0x00007fb1a08776fb:   rorx   $0x16,%ebx,%r14d
  0x00007fb1a0877701:   add    %eax,%r8d
  0x00007fb1a0877704:   and    %edi,%ecx
  0x00007fb1a0877706:   xor    %r12d,%r14d
  0x00007fb1a0877709:   rorx   $0x2,%ebx,%r12d
  0x00007fb1a087770f:   xor    %r11d,%r15d
  0x00007fb1a0877712:   xor    %r12d,%r14d
  0x00007fb1a0877715:   mov    %ebx,%r12d
  0x00007fb1a0877718:   and    %esi,%r12d
  0x00007fb1a087771b:   add    %r13d,%r15d
  0x00007fb1a087771e:   or     %r12d,%ecx
  0x00007fb1a0877721:   add    %r14d,%eax
  0x00007fb1a0877724:   add    %r15d,%r8d
  0x00007fb1a0877727:   add    %r15d,%eax
  0x00007fb1a087772a:   add    %ecx,%eax
  0x00007fb1a087772c:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fb1a0877731:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0877736:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a087773b:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a087773f:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fb1a0877743:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fb1a0877748:   vpaddd %ymm0,%ymm11,%ymm5
  0x00007fb1a087774c:   vpaddd 0x40(%rbp,%rdx,1),%ymm6,%ymm9
  0x00007fb1a0877752:   vmovdqu %ymm9,0x40(%rsp,%rdx,1)
  0x00007fb1a0877758:   mov    %eax,%ecx
  0x00007fb1a087775a:   rorx   $0x19,%r8d,%r13d
  0x00007fb1a0877760:   rorx   $0xb,%r8d,%r14d
  0x00007fb1a0877766:   add    0x40(%rsp,%rdx,1),%r11d
  0x00007fb1a087776b:   or     %edi,%ecx
  0x00007fb1a087776d:   mov    %r9d,%r15d
  0x00007fb1a0877770:   rorx   $0xd,%eax,%r12d
  0x00007fb1a0877776:   xor    %r14d,%r13d
  0x00007fb1a0877779:   xor    %r10d,%r15d
  0x00007fb1a087777c:   rorx   $0x6,%r8d,%r14d
  0x00007fb1a0877782:   and    %r8d,%r15d
  0x00007fb1a0877785:   xor    %r14d,%r13d
  0x00007fb1a0877788:   rorx   $0x16,%eax,%r14d
  0x00007fb1a087778e:   add    %r11d,%esi
  0x00007fb1a0877791:   and    %ebx,%ecx
  0x00007fb1a0877793:   xor    %r12d,%r14d
  0x00007fb1a0877796:   rorx   $0x2,%eax,%r12d
  0x00007fb1a087779c:   xor    %r10d,%r15d
  0x00007fb1a087779f:   xor    %r12d,%r14d
  0x00007fb1a08777a2:   mov    %eax,%r12d
  0x00007fb1a08777a5:   and    %edi,%r12d
  0x00007fb1a08777a8:   add    %r13d,%r15d
  0x00007fb1a08777ab:   or     %r12d,%ecx
  0x00007fb1a08777ae:   add    %r14d,%r11d
  0x00007fb1a08777b1:   add    %r15d,%esi
  0x00007fb1a08777b4:   add    %r15d,%r11d
  0x00007fb1a08777b7:   add    %ecx,%r11d
  0x00007fb1a08777ba:   vpalignr $0x4,%ymm4,%ymm5,%ymm0
  0x00007fb1a08777c0:   vpaddd %ymm6,%ymm0,%ymm0
  0x00007fb1a08777c4:   vpalignr $0x4,%ymm6,%ymm7,%ymm1
  0x00007fb1a08777ca:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fb1a08777cf:   vpslld $0x19,%ymm1,%ymm3
  0x00007fb1a08777d4:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a08777d8:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fb1a08777dd:   mov    %r11d,%ecx
  0x00007fb1a08777e0:   rorx   $0x19,%esi,%r13d
  0x00007fb1a08777e6:   rorx   $0xb,%esi,%r14d
  0x00007fb1a08777ec:   add    0x44(%rsp,%rdx,1),%r10d
  0x00007fb1a08777f1:   or     %ebx,%ecx
  0x00007fb1a08777f3:   mov    %r8d,%r15d
  0x00007fb1a08777f6:   rorx   $0xd,%r11d,%r12d
  0x00007fb1a08777fc:   xor    %r14d,%r13d
  0x00007fb1a08777ff:   xor    %r9d,%r15d
  0x00007fb1a0877802:   rorx   $0x6,%esi,%r14d
  0x00007fb1a0877808:   and    %esi,%r15d
  0x00007fb1a087780b:   xor    %r14d,%r13d
  0x00007fb1a087780e:   rorx   $0x16,%r11d,%r14d
  0x00007fb1a0877814:   add    %r10d,%edi
  0x00007fb1a0877817:   and    %eax,%ecx
  0x00007fb1a0877819:   xor    %r12d,%r14d
  0x00007fb1a087781c:   rorx   $0x2,%r11d,%r12d
  0x00007fb1a0877822:   xor    %r9d,%r15d
  0x00007fb1a0877825:   xor    %r12d,%r14d
  0x00007fb1a0877828:   mov    %r11d,%r12d
  0x00007fb1a087782b:   and    %ebx,%r12d
  0x00007fb1a087782e:   add    %r13d,%r15d
  0x00007fb1a0877831:   or     %r12d,%ecx
  0x00007fb1a0877834:   add    %r14d,%r10d
  0x00007fb1a0877837:   add    %r15d,%edi
  0x00007fb1a087783a:   add    %r15d,%r10d
  0x00007fb1a087783d:   add    %ecx,%r10d
  0x00007fb1a0877840:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fb1a0877845:   vpslld $0xe,%ymm1,%ymm1
  0x00007fb1a087784a:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fb1a087784e:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fb1a0877852:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fb1a0877857:   vpshufd $0xfa,%ymm5,%ymm2
  0x00007fb1a087785c:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fb1a0877860:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fb1a0877865:   mov    %r10d,%ecx
  0x00007fb1a0877868:   rorx   $0x19,%edi,%r13d
  0x00007fb1a087786e:   rorx   $0xb,%edi,%r14d
  0x00007fb1a0877874:   add    0x48(%rsp,%rdx,1),%r9d
  0x00007fb1a0877879:   or     %eax,%ecx
  0x00007fb1a087787b:   mov    %esi,%r15d
  0x00007fb1a087787e:   rorx   $0xd,%r10d,%r12d
  0x00007fb1a0877884:   xor    %r14d,%r13d
  0x00007fb1a0877887:   xor    %r8d,%r15d
  0x00007fb1a087788a:   rorx   $0x6,%edi,%r14d
  0x00007fb1a0877890:   and    %edi,%r15d
  0x00007fb1a0877893:   xor    %r14d,%r13d
  0x00007fb1a0877896:   rorx   $0x16,%r10d,%r14d
  0x00007fb1a087789c:   add    %r9d,%ebx
  0x00007fb1a087789f:   and    %r11d,%ecx
  0x00007fb1a08778a2:   xor    %r12d,%r14d
  0x00007fb1a08778a5:   rorx   $0x2,%r10d,%r12d
  0x00007fb1a08778ab:   xor    %r8d,%r15d
  0x00007fb1a08778ae:   xor    %r12d,%r14d
  0x00007fb1a08778b1:   mov    %r10d,%r12d
  0x00007fb1a08778b4:   and    %eax,%r12d
  0x00007fb1a08778b7:   add    %r13d,%r15d
  0x00007fb1a08778ba:   or     %r12d,%ecx
  0x00007fb1a08778bd:   add    %r14d,%r9d
  0x00007fb1a08778c0:   add    %r15d,%ebx
  0x00007fb1a08778c3:   add    %r15d,%r9d
  0x00007fb1a08778c6:   add    %ecx,%r9d
  0x00007fb1a08778c9:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a08778ce:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a08778d3:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a08778d7:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fb1a08778db:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fb1a08778e0:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fb1a08778e5:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fb1a08778ea:   mov    %r9d,%ecx
  0x00007fb1a08778ed:   rorx   $0x19,%ebx,%r13d
  0x00007fb1a08778f3:   rorx   $0xb,%ebx,%r14d
  0x00007fb1a08778f9:   add    0x4c(%rsp,%rdx,1),%r8d
  0x00007fb1a08778fe:   or     %r11d,%ecx
  0x00007fb1a0877901:   mov    %edi,%r15d
  0x00007fb1a0877904:   rorx   $0xd,%r9d,%r12d
  0x00007fb1a087790a:   xor    %r14d,%r13d
  0x00007fb1a087790d:   xor    %esi,%r15d
  0x00007fb1a0877910:   rorx   $0x6,%ebx,%r14d
  0x00007fb1a0877916:   and    %ebx,%r15d
  0x00007fb1a0877919:   xor    %r14d,%r13d
  0x00007fb1a087791c:   rorx   $0x16,%r9d,%r14d
  0x00007fb1a0877922:   add    %r8d,%eax
  0x00007fb1a0877925:   and    %r10d,%ecx
  0x00007fb1a0877928:   xor    %r12d,%r14d
  0x00007fb1a087792b:   rorx   $0x2,%r9d,%r12d
  0x00007fb1a0877931:   xor    %esi,%r15d
  0x00007fb1a0877934:   xor    %r12d,%r14d
  0x00007fb1a0877937:   mov    %r9d,%r12d
  0x00007fb1a087793a:   and    %r11d,%r12d
  0x00007fb1a087793d:   add    %r13d,%r15d
  0x00007fb1a0877940:   or     %r12d,%ecx
  0x00007fb1a0877943:   add    %r14d,%r8d
  0x00007fb1a0877946:   add    %r15d,%eax
  0x00007fb1a0877949:   add    %r15d,%r8d
  0x00007fb1a087794c:   add    %ecx,%r8d
  0x00007fb1a087794f:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fb1a0877954:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0877959:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a087795e:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a0877962:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fb1a0877966:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fb1a087796b:   vpaddd %ymm0,%ymm11,%ymm6
  0x00007fb1a087796f:   vpaddd 0x60(%rbp,%rdx,1),%ymm7,%ymm9
  0x00007fb1a0877975:   vmovdqu %ymm9,0x60(%rsp,%rdx,1)
  0x00007fb1a087797b:   mov    %r8d,%ecx
  0x00007fb1a087797e:   rorx   $0x19,%eax,%r13d
  0x00007fb1a0877984:   rorx   $0xb,%eax,%r14d
  0x00007fb1a087798a:   add    0x60(%rsp,%rdx,1),%esi
  0x00007fb1a087798e:   or     %r10d,%ecx
  0x00007fb1a0877991:   mov    %ebx,%r15d
  0x00007fb1a0877994:   rorx   $0xd,%r8d,%r12d
  0x00007fb1a087799a:   xor    %r14d,%r13d
  0x00007fb1a087799d:   xor    %edi,%r15d
  0x00007fb1a08779a0:   rorx   $0x6,%eax,%r14d
  0x00007fb1a08779a6:   and    %eax,%r15d
  0x00007fb1a08779a9:   xor    %r14d,%r13d
  0x00007fb1a08779ac:   rorx   $0x16,%r8d,%r14d
  0x00007fb1a08779b2:   add    %esi,%r11d
  0x00007fb1a08779b5:   and    %r9d,%ecx
  0x00007fb1a08779b8:   xor    %r12d,%r14d
  0x00007fb1a08779bb:   rorx   $0x2,%r8d,%r12d
  0x00007fb1a08779c1:   xor    %edi,%r15d
  0x00007fb1a08779c4:   xor    %r12d,%r14d
  0x00007fb1a08779c7:   mov    %r8d,%r12d
  0x00007fb1a08779ca:   and    %r10d,%r12d
  0x00007fb1a08779cd:   add    %r13d,%r15d
  0x00007fb1a08779d0:   or     %r12d,%ecx
  0x00007fb1a08779d3:   add    %r14d,%esi
  0x00007fb1a08779d6:   add    %r15d,%r11d
  0x00007fb1a08779d9:   add    %r15d,%esi
  0x00007fb1a08779dc:   add    %ecx,%esi
  0x00007fb1a08779de:   vpalignr $0x4,%ymm5,%ymm6,%ymm0
  0x00007fb1a08779e4:   vpaddd %ymm7,%ymm0,%ymm0
  0x00007fb1a08779e8:   vpalignr $0x4,%ymm7,%ymm4,%ymm1
  0x00007fb1a08779ee:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fb1a08779f3:   vpslld $0x19,%ymm1,%ymm3
  0x00007fb1a08779f8:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a08779fc:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fb1a0877a01:   mov    %esi,%ecx
  0x00007fb1a0877a03:   rorx   $0x19,%r11d,%r13d
  0x00007fb1a0877a09:   rorx   $0xb,%r11d,%r14d
  0x00007fb1a0877a0f:   add    0x64(%rsp,%rdx,1),%edi
  0x00007fb1a0877a13:   or     %r9d,%ecx
  0x00007fb1a0877a16:   mov    %eax,%r15d
  0x00007fb1a0877a19:   rorx   $0xd,%esi,%r12d
  0x00007fb1a0877a1f:   xor    %r14d,%r13d
  0x00007fb1a0877a22:   xor    %ebx,%r15d
  0x00007fb1a0877a25:   rorx   $0x6,%r11d,%r14d
  0x00007fb1a0877a2b:   and    %r11d,%r15d
  0x00007fb1a0877a2e:   xor    %r14d,%r13d
  0x00007fb1a0877a31:   rorx   $0x16,%esi,%r14d
  0x00007fb1a0877a37:   add    %edi,%r10d
  0x00007fb1a0877a3a:   and    %r8d,%ecx
  0x00007fb1a0877a3d:   xor    %r12d,%r14d
  0x00007fb1a0877a40:   rorx   $0x2,%esi,%r12d
  0x00007fb1a0877a46:   xor    %ebx,%r15d
  0x00007fb1a0877a49:   xor    %r12d,%r14d
  0x00007fb1a0877a4c:   mov    %esi,%r12d
  0x00007fb1a0877a4f:   and    %r9d,%r12d
  0x00007fb1a0877a52:   add    %r13d,%r15d
  0x00007fb1a0877a55:   or     %r12d,%ecx
  0x00007fb1a0877a58:   add    %r14d,%edi
  0x00007fb1a0877a5b:   add    %r15d,%r10d
  0x00007fb1a0877a5e:   add    %r15d,%edi
  0x00007fb1a0877a61:   add    %ecx,%edi
  0x00007fb1a0877a63:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fb1a0877a68:   vpslld $0xe,%ymm1,%ymm1
  0x00007fb1a0877a6d:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fb1a0877a71:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fb1a0877a75:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fb1a0877a7a:   vpshufd $0xfa,%ymm6,%ymm2
  0x00007fb1a0877a7f:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fb1a0877a83:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fb1a0877a88:   mov    %edi,%ecx
  0x00007fb1a0877a8a:   rorx   $0x19,%r10d,%r13d
  0x00007fb1a0877a90:   rorx   $0xb,%r10d,%r14d
  0x00007fb1a0877a96:   add    0x68(%rsp,%rdx,1),%ebx
  0x00007fb1a0877a9a:   or     %r8d,%ecx
  0x00007fb1a0877a9d:   mov    %r11d,%r15d
  0x00007fb1a0877aa0:   rorx   $0xd,%edi,%r12d
  0x00007fb1a0877aa6:   xor    %r14d,%r13d
  0x00007fb1a0877aa9:   xor    %eax,%r15d
  0x00007fb1a0877aac:   rorx   $0x6,%r10d,%r14d
  0x00007fb1a0877ab2:   and    %r10d,%r15d
  0x00007fb1a0877ab5:   xor    %r14d,%r13d
  0x00007fb1a0877ab8:   rorx   $0x16,%edi,%r14d
  0x00007fb1a0877abe:   add    %ebx,%r9d
  0x00007fb1a0877ac1:   and    %esi,%ecx
  0x00007fb1a0877ac3:   xor    %r12d,%r14d
  0x00007fb1a0877ac6:   rorx   $0x2,%edi,%r12d
  0x00007fb1a0877acc:   xor    %eax,%r15d
  0x00007fb1a0877acf:   xor    %r12d,%r14d
  0x00007fb1a0877ad2:   mov    %edi,%r12d
  0x00007fb1a0877ad5:   and    %r8d,%r12d
  0x00007fb1a0877ad8:   add    %r13d,%r15d
  0x00007fb1a0877adb:   or     %r12d,%ecx
  0x00007fb1a0877ade:   add    %r14d,%ebx
  0x00007fb1a0877ae1:   add    %r15d,%r9d
  0x00007fb1a0877ae4:   add    %r15d,%ebx
  0x00007fb1a0877ae7:   add    %ecx,%ebx
  0x00007fb1a0877ae9:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0877aee:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a0877af3:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a0877af7:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fb1a0877afb:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fb1a0877b00:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fb1a0877b05:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fb1a0877b0a:   mov    %ebx,%ecx
  0x00007fb1a0877b0c:   rorx   $0x19,%r9d,%r13d
  0x00007fb1a0877b12:   rorx   $0xb,%r9d,%r14d
  0x00007fb1a0877b18:   add    0x6c(%rsp,%rdx,1),%eax
  0x00007fb1a0877b1c:   or     %esi,%ecx
  0x00007fb1a0877b1e:   mov    %r10d,%r15d
  0x00007fb1a0877b21:   rorx   $0xd,%ebx,%r12d
  0x00007fb1a0877b27:   xor    %r14d,%r13d
  0x00007fb1a0877b2a:   xor    %r11d,%r15d
  0x00007fb1a0877b2d:   rorx   $0x6,%r9d,%r14d
  0x00007fb1a0877b33:   and    %r9d,%r15d
  0x00007fb1a0877b36:   xor    %r14d,%r13d
  0x00007fb1a0877b39:   rorx   $0x16,%ebx,%r14d
  0x00007fb1a0877b3f:   add    %eax,%r8d
  0x00007fb1a0877b42:   and    %edi,%ecx
  0x00007fb1a0877b44:   xor    %r12d,%r14d
  0x00007fb1a0877b47:   rorx   $0x2,%ebx,%r12d
  0x00007fb1a0877b4d:   xor    %r11d,%r15d
  0x00007fb1a0877b50:   xor    %r12d,%r14d
  0x00007fb1a0877b53:   mov    %ebx,%r12d
  0x00007fb1a0877b56:   and    %esi,%r12d
  0x00007fb1a0877b59:   add    %r13d,%r15d
  0x00007fb1a0877b5c:   or     %r12d,%ecx
  0x00007fb1a0877b5f:   add    %r14d,%eax
  0x00007fb1a0877b62:   add    %r15d,%r8d
  0x00007fb1a0877b65:   add    %r15d,%eax
  0x00007fb1a0877b68:   add    %ecx,%eax
  0x00007fb1a0877b6a:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fb1a0877b6f:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0877b74:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a0877b79:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a0877b7d:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fb1a0877b81:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fb1a0877b86:   vpaddd %ymm0,%ymm11,%ymm7
  0x00007fb1a0877b8a:   add    $0x80,%rdx
  0x00007fb1a0877b91:   cmp    $0x180,%rdx
  0x00007fb1a0877b98:   jb     Stub::sha256_implCompress+240 0x00007fb1a0877310
  0x00007fb1a0877b9e:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007fb1a0877ba4:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007fb1a0877ba9:   mov    %r9d,%r15d
  0x00007fb1a0877bac:   rorx   $0x19,%r8d,%r13d
  0x00007fb1a0877bb2:   rorx   $0xb,%r8d,%r14d
  0x00007fb1a0877bb8:   xor    %r10d,%r15d
  0x00007fb1a0877bbb:   xor    %r14d,%r13d
  0x00007fb1a0877bbe:   rorx   $0x6,%r8d,%r14d
  0x00007fb1a0877bc4:   and    %r8d,%r15d
  0x00007fb1a0877bc7:   xor    %r14d,%r13d
  0x00007fb1a0877bca:   rorx   $0xd,%eax,%r12d
  0x00007fb1a0877bd0:   xor    %r10d,%r15d
  0x00007fb1a0877bd3:   rorx   $0x16,%eax,%r14d
  0x00007fb1a0877bd9:   mov    %eax,%ecx
  0x00007fb1a0877bdb:   xor    %r12d,%r14d
  0x00007fb1a0877bde:   rorx   $0x2,%eax,%r12d
  0x00007fb1a0877be4:   add    (%rsp,%rdx,1),%r11d
  0x00007fb1a0877be8:   or     %edi,%ecx
  0x00007fb1a0877bea:   xor    %r12d,%r14d
  0x00007fb1a0877bed:   mov    %eax,%r12d
  0x00007fb1a0877bf0:   and    %ebx,%ecx
  0x00007fb1a0877bf2:   and    %edi,%r12d
  0x00007fb1a0877bf5:   add    %r13d,%r15d
  0x00007fb1a0877bf8:   add    %r11d,%esi
  0x00007fb1a0877bfb:   or     %r12d,%ecx
  0x00007fb1a0877bfe:   add    %r14d,%r11d
  0x00007fb1a0877c01:   add    %r15d,%esi
  0x00007fb1a0877c04:   add    %r15d,%r11d
  0x00007fb1a0877c07:   mov    %r8d,%r15d
  0x00007fb1a0877c0a:   rorx   $0x19,%esi,%r13d
  0x00007fb1a0877c10:   rorx   $0xb,%esi,%r14d
  0x00007fb1a0877c16:   xor    %r9d,%r15d
  0x00007fb1a0877c19:   xor    %r14d,%r13d
  0x00007fb1a0877c1c:   rorx   $0x6,%esi,%r14d
  0x00007fb1a0877c22:   and    %esi,%r15d
  0x00007fb1a0877c25:   add    %ecx,%r11d
  0x00007fb1a0877c28:   xor    %r14d,%r13d
  0x00007fb1a0877c2b:   rorx   $0xd,%r11d,%r12d
  0x00007fb1a0877c31:   xor    %r9d,%r15d
  0x00007fb1a0877c34:   rorx   $0x16,%r11d,%r14d
  0x00007fb1a0877c3a:   mov    %r11d,%ecx
  0x00007fb1a0877c3d:   xor    %r12d,%r14d
  0x00007fb1a0877c40:   rorx   $0x2,%r11d,%r12d
  0x00007fb1a0877c46:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007fb1a0877c4b:   or     %ebx,%ecx
  0x00007fb1a0877c4d:   xor    %r12d,%r14d
  0x00007fb1a0877c50:   mov    %r11d,%r12d
  0x00007fb1a0877c53:   and    %eax,%ecx
  0x00007fb1a0877c55:   and    %ebx,%r12d
  0x00007fb1a0877c58:   add    %r13d,%r15d
  0x00007fb1a0877c5b:   add    %r10d,%edi
  0x00007fb1a0877c5e:   or     %r12d,%ecx
  0x00007fb1a0877c61:   add    %r14d,%r10d
  0x00007fb1a0877c64:   add    %r15d,%edi
  0x00007fb1a0877c67:   add    %r15d,%r10d
  0x00007fb1a0877c6a:   mov    %esi,%r15d
  0x00007fb1a0877c6d:   rorx   $0x19,%edi,%r13d
  0x00007fb1a0877c73:   rorx   $0xb,%edi,%r14d
  0x00007fb1a0877c79:   xor    %r8d,%r15d
  0x00007fb1a0877c7c:   xor    %r14d,%r13d
  0x00007fb1a0877c7f:   rorx   $0x6,%edi,%r14d
  0x00007fb1a0877c85:   and    %edi,%r15d
  0x00007fb1a0877c88:   add    %ecx,%r10d
  0x00007fb1a0877c8b:   xor    %r14d,%r13d
  0x00007fb1a0877c8e:   rorx   $0xd,%r10d,%r12d
  0x00007fb1a0877c94:   xor    %r8d,%r15d
  0x00007fb1a0877c97:   rorx   $0x16,%r10d,%r14d
  0x00007fb1a0877c9d:   mov    %r10d,%ecx
  0x00007fb1a0877ca0:   xor    %r12d,%r14d
  0x00007fb1a0877ca3:   rorx   $0x2,%r10d,%r12d
  0x00007fb1a0877ca9:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007fb1a0877cae:   or     %eax,%ecx
  0x00007fb1a0877cb0:   xor    %r12d,%r14d
  0x00007fb1a0877cb3:   mov    %r10d,%r12d
  0x00007fb1a0877cb6:   and    %r11d,%ecx
  0x00007fb1a0877cb9:   and    %eax,%r12d
  0x00007fb1a0877cbc:   add    %r13d,%r15d
  0x00007fb1a0877cbf:   add    %r9d,%ebx
  0x00007fb1a0877cc2:   or     %r12d,%ecx
  0x00007fb1a0877cc5:   add    %r14d,%r9d
  0x00007fb1a0877cc8:   add    %r15d,%ebx
  0x00007fb1a0877ccb:   add    %r15d,%r9d
  0x00007fb1a0877cce:   mov    %edi,%r15d
  0x00007fb1a0877cd1:   rorx   $0x19,%ebx,%r13d
  0x00007fb1a0877cd7:   rorx   $0xb,%ebx,%r14d
  0x00007fb1a0877cdd:   xor    %esi,%r15d
  0x00007fb1a0877ce0:   xor    %r14d,%r13d
  0x00007fb1a0877ce3:   rorx   $0x6,%ebx,%r14d
  0x00007fb1a0877ce9:   and    %ebx,%r15d
  0x00007fb1a0877cec:   add    %ecx,%r9d
  0x00007fb1a0877cef:   xor    %r14d,%r13d
  0x00007fb1a0877cf2:   rorx   $0xd,%r9d,%r12d
  0x00007fb1a0877cf8:   xor    %esi,%r15d
  0x00007fb1a0877cfb:   rorx   $0x16,%r9d,%r14d
  0x00007fb1a0877d01:   mov    %r9d,%ecx
  0x00007fb1a0877d04:   xor    %r12d,%r14d
  0x00007fb1a0877d07:   rorx   $0x2,%r9d,%r12d
  0x00007fb1a0877d0d:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007fb1a0877d12:   or     %r11d,%ecx
  0x00007fb1a0877d15:   xor    %r12d,%r14d
  0x00007fb1a0877d18:   mov    %r9d,%r12d
  0x00007fb1a0877d1b:   and    %r10d,%ecx
  0x00007fb1a0877d1e:   and    %r11d,%r12d
  0x00007fb1a0877d21:   add    %r13d,%r15d
  0x00007fb1a0877d24:   add    %r8d,%eax
  0x00007fb1a0877d27:   or     %r12d,%ecx
  0x00007fb1a0877d2a:   add    %r14d,%r8d
  0x00007fb1a0877d2d:   add    %r15d,%eax
  0x00007fb1a0877d30:   add    %r15d,%r8d
  0x00007fb1a0877d33:   add    %ecx,%r8d
  0x00007fb1a0877d36:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007fb1a0877d3c:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007fb1a0877d42:   mov    %ebx,%r15d
  0x00007fb1a0877d45:   rorx   $0x19,%eax,%r13d
  0x00007fb1a0877d4b:   rorx   $0xb,%eax,%r14d
  0x00007fb1a0877d51:   xor    %edi,%r15d
  0x00007fb1a0877d54:   xor    %r14d,%r13d
  0x00007fb1a0877d57:   rorx   $0x6,%eax,%r14d
  0x00007fb1a0877d5d:   and    %eax,%r15d
  0x00007fb1a0877d60:   xor    %r14d,%r13d
  0x00007fb1a0877d63:   rorx   $0xd,%r8d,%r12d
  0x00007fb1a0877d69:   xor    %edi,%r15d
  0x00007fb1a0877d6c:   rorx   $0x16,%r8d,%r14d
  0x00007fb1a0877d72:   mov    %r8d,%ecx
  0x00007fb1a0877d75:   xor    %r12d,%r14d
  0x00007fb1a0877d78:   rorx   $0x2,%r8d,%r12d
  0x00007fb1a0877d7e:   add    0x20(%rsp,%rdx,1),%esi
  0x00007fb1a0877d82:   or     %r10d,%ecx
  0x00007fb1a0877d85:   xor    %r12d,%r14d
  0x00007fb1a0877d88:   mov    %r8d,%r12d
  0x00007fb1a0877d8b:   and    %r9d,%ecx
  0x00007fb1a0877d8e:   and    %r10d,%r12d
  0x00007fb1a0877d91:   add    %r13d,%r15d
  0x00007fb1a0877d94:   add    %esi,%r11d
  0x00007fb1a0877d97:   or     %r12d,%ecx
  0x00007fb1a0877d9a:   add    %r14d,%esi
  0x00007fb1a0877d9d:   add    %r15d,%r11d
  0x00007fb1a0877da0:   add    %r15d,%esi
  0x00007fb1a0877da3:   mov    %eax,%r15d
  0x00007fb1a0877da6:   rorx   $0x19,%r11d,%r13d
  0x00007fb1a0877dac:   rorx   $0xb,%r11d,%r14d
  0x00007fb1a0877db2:   xor    %ebx,%r15d
  0x00007fb1a0877db5:   xor    %r14d,%r13d
  0x00007fb1a0877db8:   rorx   $0x6,%r11d,%r14d
  0x00007fb1a0877dbe:   and    %r11d,%r15d
  0x00007fb1a0877dc1:   add    %ecx,%esi
  0x00007fb1a0877dc3:   xor    %r14d,%r13d
  0x00007fb1a0877dc6:   rorx   $0xd,%esi,%r12d
  0x00007fb1a0877dcc:   xor    %ebx,%r15d
  0x00007fb1a0877dcf:   rorx   $0x16,%esi,%r14d
  0x00007fb1a0877dd5:   mov    %esi,%ecx
  0x00007fb1a0877dd7:   xor    %r12d,%r14d
  0x00007fb1a0877dda:   rorx   $0x2,%esi,%r12d
  0x00007fb1a0877de0:   add    0x24(%rsp,%rdx,1),%edi
  0x00007fb1a0877de4:   or     %r9d,%ecx
  0x00007fb1a0877de7:   xor    %r12d,%r14d
  0x00007fb1a0877dea:   mov    %esi,%r12d
  0x00007fb1a0877ded:   and    %r8d,%ecx
  0x00007fb1a0877df0:   and    %r9d,%r12d
  0x00007fb1a0877df3:   add    %r13d,%r15d
  0x00007fb1a0877df6:   add    %edi,%r10d
  0x00007fb1a0877df9:   or     %r12d,%ecx
  0x00007fb1a0877dfc:   add    %r14d,%edi
  0x00007fb1a0877dff:   add    %r15d,%r10d
  0x00007fb1a0877e02:   add    %r15d,%edi
  0x00007fb1a0877e05:   mov    %r11d,%r15d
  0x00007fb1a0877e08:   rorx   $0x19,%r10d,%r13d
  0x00007fb1a0877e0e:   rorx   $0xb,%r10d,%r14d
  0x00007fb1a0877e14:   xor    %eax,%r15d
  0x00007fb1a0877e17:   xor    %r14d,%r13d
  0x00007fb1a0877e1a:   rorx   $0x6,%r10d,%r14d
  0x00007fb1a0877e20:   and    %r10d,%r15d
  0x00007fb1a0877e23:   add    %ecx,%edi
  0x00007fb1a0877e25:   xor    %r14d,%r13d
  0x00007fb1a0877e28:   rorx   $0xd,%edi,%r12d
  0x00007fb1a0877e2e:   xor    %eax,%r15d
  0x00007fb1a0877e31:   rorx   $0x16,%edi,%r14d
  0x00007fb1a0877e37:   mov    %edi,%ecx
  0x00007fb1a0877e39:   xor    %r12d,%r14d
  0x00007fb1a0877e3c:   rorx   $0x2,%edi,%r12d
  0x00007fb1a0877e42:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007fb1a0877e46:   or     %r8d,%ecx
  0x00007fb1a0877e49:   xor    %r12d,%r14d
  0x00007fb1a0877e4c:   mov    %edi,%r12d
  0x00007fb1a0877e4f:   and    %esi,%ecx
  0x00007fb1a0877e51:   and    %r8d,%r12d
  0x00007fb1a0877e54:   add    %r13d,%r15d
  0x00007fb1a0877e57:   add    %ebx,%r9d
  0x00007fb1a0877e5a:   or     %r12d,%ecx
  0x00007fb1a0877e5d:   add    %r14d,%ebx
  0x00007fb1a0877e60:   add    %r15d,%r9d
  0x00007fb1a0877e63:   add    %r15d,%ebx
  0x00007fb1a0877e66:   mov    %r10d,%r15d
  0x00007fb1a0877e69:   rorx   $0x19,%r9d,%r13d
  0x00007fb1a0877e6f:   rorx   $0xb,%r9d,%r14d
  0x00007fb1a0877e75:   xor    %r11d,%r15d
  0x00007fb1a0877e78:   xor    %r14d,%r13d
  0x00007fb1a0877e7b:   rorx   $0x6,%r9d,%r14d
  0x00007fb1a0877e81:   and    %r9d,%r15d
  0x00007fb1a0877e84:   add    %ecx,%ebx
  0x00007fb1a0877e86:   xor    %r14d,%r13d
  0x00007fb1a0877e89:   rorx   $0xd,%ebx,%r12d
  0x00007fb1a0877e8f:   xor    %r11d,%r15d
  0x00007fb1a0877e92:   rorx   $0x16,%ebx,%r14d
  0x00007fb1a0877e98:   mov    %ebx,%ecx
  0x00007fb1a0877e9a:   xor    %r12d,%r14d
  0x00007fb1a0877e9d:   rorx   $0x2,%ebx,%r12d
  0x00007fb1a0877ea3:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007fb1a0877ea7:   or     %esi,%ecx
  0x00007fb1a0877ea9:   xor    %r12d,%r14d
  0x00007fb1a0877eac:   mov    %ebx,%r12d
  0x00007fb1a0877eaf:   and    %edi,%ecx
  0x00007fb1a0877eb1:   and    %esi,%r12d
  0x00007fb1a0877eb4:   add    %r13d,%r15d
  0x00007fb1a0877eb7:   add    %eax,%r8d
  0x00007fb1a0877eba:   or     %r12d,%ecx
  0x00007fb1a0877ebd:   add    %r14d,%eax
  0x00007fb1a0877ec0:   add    %r15d,%r8d
  0x00007fb1a0877ec3:   add    %r15d,%eax
  0x00007fb1a0877ec6:   add    %ecx,%eax
  0x00007fb1a0877ec8:   add    $0x40,%rdx
  0x00007fb1a0877ecc:   vmovdqu %ymm6,%ymm4
  0x00007fb1a0877ed0:   vmovdqu %ymm7,%ymm5
  0x00007fb1a0877ed4:   cmp    $0x200,%rdx
  0x00007fb1a0877edb:   jb     Stub::sha256_implCompress+2430 0x00007fb1a0877b9e
  0x00007fb1a0877ee1:   mov    0x210(%rsp),%rdx
  0x00007fb1a0877ee9:   mov    0x208(%rsp),%rcx
  0x00007fb1a0877ef1:   add    (%rdx),%eax
  0x00007fb1a0877ef3:   mov    %eax,(%rdx)
  0x00007fb1a0877ef5:   add    0x4(%rdx),%ebx
  0x00007fb1a0877ef8:   mov    %ebx,0x4(%rdx)
  0x00007fb1a0877efb:   add    0x8(%rdx),%edi
  0x00007fb1a0877efe:   mov    %edi,0x8(%rdx)
  0x00007fb1a0877f01:   add    0xc(%rdx),%esi
  0x00007fb1a0877f04:   mov    %esi,0xc(%rdx)
  0x00007fb1a0877f07:   add    0x10(%rdx),%r8d
  0x00007fb1a0877f0b:   mov    %r8d,0x10(%rdx)
  0x00007fb1a0877f0f:   add    0x14(%rdx),%r9d
  0x00007fb1a0877f13:   mov    %r9d,0x14(%rdx)
  0x00007fb1a0877f17:   add    0x18(%rdx),%r10d
  0x00007fb1a0877f1b:   mov    %r10d,0x18(%rdx)
  0x00007fb1a0877f1f:   add    0x1c(%rdx),%r11d
  0x00007fb1a0877f23:   mov    %r11d,0x1c(%rdx)
  0x00007fb1a0877f27:   cmp    0x200(%rsp),%rcx
  0x00007fb1a0877f2f:   ja     Stub::sha256_implCompress+4370 0x00007fb1a0878332
  0x00007fb1a0877f35:   xor    %rdx,%rdx
  0x00007fb1a0877f38:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a0877f40:   mov    %r9d,%r15d
  0x00007fb1a0877f43:   rorx   $0x19,%r8d,%r13d
  0x00007fb1a0877f49:   rorx   $0xb,%r8d,%r14d
  0x00007fb1a0877f4f:   xor    %r10d,%r15d
  0x00007fb1a0877f52:   xor    %r14d,%r13d
  0x00007fb1a0877f55:   rorx   $0x6,%r8d,%r14d
  0x00007fb1a0877f5b:   and    %r8d,%r15d
  0x00007fb1a0877f5e:   xor    %r14d,%r13d
  0x00007fb1a0877f61:   rorx   $0xd,%eax,%r12d
  0x00007fb1a0877f67:   xor    %r10d,%r15d
  0x00007fb1a0877f6a:   rorx   $0x16,%eax,%r14d
  0x00007fb1a0877f70:   mov    %eax,%ecx
  0x00007fb1a0877f72:   xor    %r12d,%r14d
  0x00007fb1a0877f75:   rorx   $0x2,%eax,%r12d
  0x00007fb1a0877f7b:   add    0x10(%rsp,%rdx,1),%r11d
  0x00007fb1a0877f80:   or     %edi,%ecx
  0x00007fb1a0877f82:   xor    %r12d,%r14d
  0x00007fb1a0877f85:   mov    %eax,%r12d
  0x00007fb1a0877f88:   and    %ebx,%ecx
  0x00007fb1a0877f8a:   and    %edi,%r12d
  0x00007fb1a0877f8d:   add    %r13d,%r15d
  0x00007fb1a0877f90:   add    %r11d,%esi
  0x00007fb1a0877f93:   or     %r12d,%ecx
  0x00007fb1a0877f96:   add    %r14d,%r11d
  0x00007fb1a0877f99:   add    %r15d,%esi
  0x00007fb1a0877f9c:   add    %r15d,%r11d
  0x00007fb1a0877f9f:   mov    %r8d,%r15d
  0x00007fb1a0877fa2:   rorx   $0x19,%esi,%r13d
  0x00007fb1a0877fa8:   rorx   $0xb,%esi,%r14d
  0x00007fb1a0877fae:   xor    %r9d,%r15d
  0x00007fb1a0877fb1:   xor    %r14d,%r13d
  0x00007fb1a0877fb4:   rorx   $0x6,%esi,%r14d
  0x00007fb1a0877fba:   and    %esi,%r15d
  0x00007fb1a0877fbd:   add    %ecx,%r11d
  0x00007fb1a0877fc0:   xor    %r14d,%r13d
  0x00007fb1a0877fc3:   rorx   $0xd,%r11d,%r12d
  0x00007fb1a0877fc9:   xor    %r9d,%r15d
  0x00007fb1a0877fcc:   rorx   $0x16,%r11d,%r14d
  0x00007fb1a0877fd2:   mov    %r11d,%ecx
  0x00007fb1a0877fd5:   xor    %r12d,%r14d
  0x00007fb1a0877fd8:   rorx   $0x2,%r11d,%r12d
  0x00007fb1a0877fde:   add    0x14(%rsp,%rdx,1),%r10d
  0x00007fb1a0877fe3:   or     %ebx,%ecx
  0x00007fb1a0877fe5:   xor    %r12d,%r14d
  0x00007fb1a0877fe8:   mov    %r11d,%r12d
  0x00007fb1a0877feb:   and    %eax,%ecx
  0x00007fb1a0877fed:   and    %ebx,%r12d
  0x00007fb1a0877ff0:   add    %r13d,%r15d
  0x00007fb1a0877ff3:   add    %r10d,%edi
  0x00007fb1a0877ff6:   or     %r12d,%ecx
  0x00007fb1a0877ff9:   add    %r14d,%r10d
  0x00007fb1a0877ffc:   add    %r15d,%edi
  0x00007fb1a0877fff:   add    %r15d,%r10d
  0x00007fb1a0878002:   mov    %esi,%r15d
  0x00007fb1a0878005:   rorx   $0x19,%edi,%r13d
  0x00007fb1a087800b:   rorx   $0xb,%edi,%r14d
  0x00007fb1a0878011:   xor    %r8d,%r15d
  0x00007fb1a0878014:   xor    %r14d,%r13d
  0x00007fb1a0878017:   rorx   $0x6,%edi,%r14d
  0x00007fb1a087801d:   and    %edi,%r15d
  0x00007fb1a0878020:   add    %ecx,%r10d
  0x00007fb1a0878023:   xor    %r14d,%r13d
  0x00007fb1a0878026:   rorx   $0xd,%r10d,%r12d
  0x00007fb1a087802c:   xor    %r8d,%r15d
  0x00007fb1a087802f:   rorx   $0x16,%r10d,%r14d
  0x00007fb1a0878035:   mov    %r10d,%ecx
  0x00007fb1a0878038:   xor    %r12d,%r14d
  0x00007fb1a087803b:   rorx   $0x2,%r10d,%r12d
  0x00007fb1a0878041:   add    0x18(%rsp,%rdx,1),%r9d
  0x00007fb1a0878046:   or     %eax,%ecx
  0x00007fb1a0878048:   xor    %r12d,%r14d
  0x00007fb1a087804b:   mov    %r10d,%r12d
  0x00007fb1a087804e:   and    %r11d,%ecx
  0x00007fb1a0878051:   and    %eax,%r12d
  0x00007fb1a0878054:   add    %r13d,%r15d
  0x00007fb1a0878057:   add    %r9d,%ebx
  0x00007fb1a087805a:   or     %r12d,%ecx
  0x00007fb1a087805d:   add    %r14d,%r9d
  0x00007fb1a0878060:   add    %r15d,%ebx
  0x00007fb1a0878063:   add    %r15d,%r9d
  0x00007fb1a0878066:   mov    %edi,%r15d
  0x00007fb1a0878069:   rorx   $0x19,%ebx,%r13d
  0x00007fb1a087806f:   rorx   $0xb,%ebx,%r14d
  0x00007fb1a0878075:   xor    %esi,%r15d
  0x00007fb1a0878078:   xor    %r14d,%r13d
  0x00007fb1a087807b:   rorx   $0x6,%ebx,%r14d
  0x00007fb1a0878081:   and    %ebx,%r15d
  0x00007fb1a0878084:   add    %ecx,%r9d
  0x00007fb1a0878087:   xor    %r14d,%r13d
  0x00007fb1a087808a:   rorx   $0xd,%r9d,%r12d
  0x00007fb1a0878090:   xor    %esi,%r15d
  0x00007fb1a0878093:   rorx   $0x16,%r9d,%r14d
  0x00007fb1a0878099:   mov    %r9d,%ecx
  0x00007fb1a087809c:   xor    %r12d,%r14d
  0x00007fb1a087809f:   rorx   $0x2,%r9d,%r12d
  0x00007fb1a08780a5:   add    0x1c(%rsp,%rdx,1),%r8d
  0x00007fb1a08780aa:   or     %r11d,%ecx
  0x00007fb1a08780ad:   xor    %r12d,%r14d
  0x00007fb1a08780b0:   mov    %r9d,%r12d
  0x00007fb1a08780b3:   and    %r10d,%ecx
  0x00007fb1a08780b6:   and    %r11d,%r12d
  0x00007fb1a08780b9:   add    %r13d,%r15d
  0x00007fb1a08780bc:   add    %r8d,%eax
  0x00007fb1a08780bf:   or     %r12d,%ecx
  0x00007fb1a08780c2:   add    %r14d,%r8d
  0x00007fb1a08780c5:   add    %r15d,%eax
  0x00007fb1a08780c8:   add    %r15d,%r8d
  0x00007fb1a08780cb:   add    %ecx,%r8d
  0x00007fb1a08780ce:   mov    %ebx,%r15d
  0x00007fb1a08780d1:   rorx   $0x19,%eax,%r13d
  0x00007fb1a08780d7:   rorx   $0xb,%eax,%r14d
  0x00007fb1a08780dd:   xor    %edi,%r15d
  0x00007fb1a08780e0:   xor    %r14d,%r13d
  0x00007fb1a08780e3:   rorx   $0x6,%eax,%r14d
  0x00007fb1a08780e9:   and    %eax,%r15d
  0x00007fb1a08780ec:   xor    %r14d,%r13d
  0x00007fb1a08780ef:   rorx   $0xd,%r8d,%r12d
  0x00007fb1a08780f5:   xor    %edi,%r15d
  0x00007fb1a08780f8:   rorx   $0x16,%r8d,%r14d
  0x00007fb1a08780fe:   mov    %r8d,%ecx
  0x00007fb1a0878101:   xor    %r12d,%r14d
  0x00007fb1a0878104:   rorx   $0x2,%r8d,%r12d
  0x00007fb1a087810a:   add    0x30(%rsp,%rdx,1),%esi
  0x00007fb1a087810e:   or     %r10d,%ecx
  0x00007fb1a0878111:   xor    %r12d,%r14d
  0x00007fb1a0878114:   mov    %r8d,%r12d
  0x00007fb1a0878117:   and    %r9d,%ecx
  0x00007fb1a087811a:   and    %r10d,%r12d
  0x00007fb1a087811d:   add    %r13d,%r15d
  0x00007fb1a0878120:   add    %esi,%r11d
  0x00007fb1a0878123:   or     %r12d,%ecx
  0x00007fb1a0878126:   add    %r14d,%esi
  0x00007fb1a0878129:   add    %r15d,%r11d
  0x00007fb1a087812c:   add    %r15d,%esi
  0x00007fb1a087812f:   mov    %eax,%r15d
  0x00007fb1a0878132:   rorx   $0x19,%r11d,%r13d
  0x00007fb1a0878138:   rorx   $0xb,%r11d,%r14d
  0x00007fb1a087813e:   xor    %ebx,%r15d
  0x00007fb1a0878141:   xor    %r14d,%r13d
  0x00007fb1a0878144:   rorx   $0x6,%r11d,%r14d
  0x00007fb1a087814a:   and    %r11d,%r15d
  0x00007fb1a087814d:   add    %ecx,%esi
  0x00007fb1a087814f:   xor    %r14d,%r13d
  0x00007fb1a0878152:   rorx   $0xd,%esi,%r12d
  0x00007fb1a0878158:   xor    %ebx,%r15d
  0x00007fb1a087815b:   rorx   $0x16,%esi,%r14d
  0x00007fb1a0878161:   mov    %esi,%ecx
  0x00007fb1a0878163:   xor    %r12d,%r14d
  0x00007fb1a0878166:   rorx   $0x2,%esi,%r12d
  0x00007fb1a087816c:   add    0x34(%rsp,%rdx,1),%edi
  0x00007fb1a0878170:   or     %r9d,%ecx
  0x00007fb1a0878173:   xor    %r12d,%r14d
  0x00007fb1a0878176:   mov    %esi,%r12d
  0x00007fb1a0878179:   and    %r8d,%ecx
  0x00007fb1a087817c:   and    %r9d,%r12d
  0x00007fb1a087817f:   add    %r13d,%r15d
  0x00007fb1a0878182:   add    %edi,%r10d
  0x00007fb1a0878185:   or     %r12d,%ecx
  0x00007fb1a0878188:   add    %r14d,%edi
  0x00007fb1a087818b:   add    %r15d,%r10d
  0x00007fb1a087818e:   add    %r15d,%edi
  0x00007fb1a0878191:   mov    %r11d,%r15d
  0x00007fb1a0878194:   rorx   $0x19,%r10d,%r13d
  0x00007fb1a087819a:   rorx   $0xb,%r10d,%r14d
  0x00007fb1a08781a0:   xor    %eax,%r15d
  0x00007fb1a08781a3:   xor    %r14d,%r13d
  0x00007fb1a08781a6:   rorx   $0x6,%r10d,%r14d
  0x00007fb1a08781ac:   and    %r10d,%r15d
  0x00007fb1a08781af:   add    %ecx,%edi
  0x00007fb1a08781b1:   xor    %r14d,%r13d
  0x00007fb1a08781b4:   rorx   $0xd,%edi,%r12d
  0x00007fb1a08781ba:   xor    %eax,%r15d
  0x00007fb1a08781bd:   rorx   $0x16,%edi,%r14d
  0x00007fb1a08781c3:   mov    %edi,%ecx
  0x00007fb1a08781c5:   xor    %r12d,%r14d
  0x00007fb1a08781c8:   rorx   $0x2,%edi,%r12d
  0x00007fb1a08781ce:   add    0x38(%rsp,%rdx,1),%ebx
  0x00007fb1a08781d2:   or     %r8d,%ecx
  0x00007fb1a08781d5:   xor    %r12d,%r14d
  0x00007fb1a08781d8:   mov    %edi,%r12d
  0x00007fb1a08781db:   and    %esi,%ecx
  0x00007fb1a08781dd:   and    %r8d,%r12d
  0x00007fb1a08781e0:   add    %r13d,%r15d
  0x00007fb1a08781e3:   add    %ebx,%r9d
  0x00007fb1a08781e6:   or     %r12d,%ecx
  0x00007fb1a08781e9:   add    %r14d,%ebx
  0x00007fb1a08781ec:   add    %r15d,%r9d
  0x00007fb1a08781ef:   add    %r15d,%ebx
  0x00007fb1a08781f2:   mov    %r10d,%r15d
  0x00007fb1a08781f5:   rorx   $0x19,%r9d,%r13d
  0x00007fb1a08781fb:   rorx   $0xb,%r9d,%r14d
  0x00007fb1a0878201:   xor    %r11d,%r15d
  0x00007fb1a0878204:   xor    %r14d,%r13d
  0x00007fb1a0878207:   rorx   $0x6,%r9d,%r14d
  0x00007fb1a087820d:   and    %r9d,%r15d
  0x00007fb1a0878210:   add    %ecx,%ebx
  0x00007fb1a0878212:   xor    %r14d,%r13d
  0x00007fb1a0878215:   rorx   $0xd,%ebx,%r12d
  0x00007fb1a087821b:   xor    %r11d,%r15d
  0x00007fb1a087821e:   rorx   $0x16,%ebx,%r14d
  0x00007fb1a0878224:   mov    %ebx,%ecx
  0x00007fb1a0878226:   xor    %r12d,%r14d
  0x00007fb1a0878229:   rorx   $0x2,%ebx,%r12d
  0x00007fb1a087822f:   add    0x3c(%rsp,%rdx,1),%eax
  0x00007fb1a0878233:   or     %esi,%ecx
  0x00007fb1a0878235:   xor    %r12d,%r14d
  0x00007fb1a0878238:   mov    %ebx,%r12d
  0x00007fb1a087823b:   and    %edi,%ecx
  0x00007fb1a087823d:   and    %esi,%r12d
  0x00007fb1a0878240:   add    %r13d,%r15d
  0x00007fb1a0878243:   add    %eax,%r8d
  0x00007fb1a0878246:   or     %r12d,%ecx
  0x00007fb1a0878249:   add    %r14d,%eax
  0x00007fb1a087824c:   add    %r15d,%r8d
  0x00007fb1a087824f:   add    %r15d,%eax
  0x00007fb1a0878252:   add    %ecx,%eax
  0x00007fb1a0878254:   add    $0x40,%rdx
  0x00007fb1a0878258:   cmp    $0x200,%rdx
  0x00007fb1a087825f:   jb     Stub::sha256_implCompress+3360 0x00007fb1a0877f40
  0x00007fb1a0878265:   mov    0x210(%rsp),%rdx
  0x00007fb1a087826d:   mov    0x208(%rsp),%rcx
  0x00007fb1a0878275:   add    $0x40,%rcx
  0x00007fb1a0878279:   add    (%rdx),%eax
  0x00007fb1a087827b:   mov    %eax,(%rdx)
  0x00007fb1a087827d:   add    0x4(%rdx),%ebx
  0x00007fb1a0878280:   mov    %ebx,0x4(%rdx)
  0x00007fb1a0878283:   add    0x8(%rdx),%edi
  0x00007fb1a0878286:   mov    %edi,0x8(%rdx)
  0x00007fb1a0878289:   add    0xc(%rdx),%esi
  0x00007fb1a087828c:   mov    %esi,0xc(%rdx)
  0x00007fb1a087828f:   add    0x10(%rdx),%r8d
  0x00007fb1a0878293:   mov    %r8d,0x10(%rdx)
  0x00007fb1a0878297:   add    0x14(%rdx),%r9d
  0x00007fb1a087829b:   mov    %r9d,0x14(%rdx)
  0x00007fb1a087829f:   add    0x18(%rdx),%r10d
  0x00007fb1a08782a3:   mov    %r10d,0x18(%rdx)
  0x00007fb1a08782a7:   add    0x1c(%rdx),%r11d
  0x00007fb1a08782ab:   mov    %r11d,0x1c(%rdx)
  0x00007fb1a08782af:   cmp    0x200(%rsp),%rcx
  0x00007fb1a08782b7:   jb     Stub::sha256_implCompress+148 0x00007fb1a08772b4
  0x00007fb1a08782bd:   ja     Stub::sha256_implCompress+4370 0x00007fb1a0878332
  0x00007fb1a08782bf:   movabs $0x7fb1a4f454c0,%rbp
  0x00007fb1a08782c9:   vmovdqu (%rcx),%xmm4
  0x00007fb1a08782cd:   vmovdqu 0x10(%rcx),%xmm5
  0x00007fb1a08782d2:   vmovdqu 0x20(%rcx),%xmm6
  0x00007fb1a08782d7:   vmovdqu 0x30(%rcx),%xmm7
  0x00007fb1a08782dc:   vpshufb %xmm13,%xmm4,%xmm4
  0x00007fb1a08782e1:   vpshufb %xmm13,%xmm5,%xmm5
  0x00007fb1a08782e6:   vpshufb %xmm13,%xmm6,%xmm6
  0x00007fb1a08782eb:   vpshufb %xmm13,%xmm7,%xmm7
  0x00007fb1a08782f0:   jmpq   Stub::sha256_implCompress+221 0x00007fb1a08772fd
  0x00007fb1a08782f5:   mov    (%rdx),%eax
  0x00007fb1a08782f7:   mov    0x4(%rdx),%ebx
  0x00007fb1a08782fa:   mov    0x8(%rdx),%edi
  0x00007fb1a08782fd:   mov    0xc(%rdx),%esi
  0x00007fb1a0878300:   mov    0x10(%rdx),%r8d
  0x00007fb1a0878304:   mov    0x14(%rdx),%r9d
  0x00007fb1a0878308:   mov    0x1c(%rdx),%r11d
  0x00007fb1a087830c:   vmovdqu -0x1154(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007fb1a0878314:   vmovdqu -0x113c(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007fb1a08771e0
  0x00007fb1a087831c:   vmovdqu -0x1124(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007fb1a0877200
  0x00007fb1a0878324:   mov    0x18(%rdx),%r10d
  0x00007fb1a0878328:   mov    %rdx,0x210(%rsp)
  0x00007fb1a0878330:   jmp    Stub::sha256_implCompress+4255 0x00007fb1a08782bf
  0x00007fb1a0878332:   mov    0x218(%rsp),%rsp
  0x00007fb1a087833a:   pop    %r15
  0x00007fb1a087833c:   pop    %r14
  0x00007fb1a087833e:   pop    %r13
  0x00007fb1a0878340:   pop    %r12
  0x00007fb1a0878342:   pop    %rbp
  0x00007fb1a0878343:   pop    %rbx
  0x00007fb1a0878344:   pop    %rdx
  0x00007fb1a0878345:   pop    %rcx
  0x00007fb1a0878346:   add    $0x20,%rsp
  0x00007fb1a087834a:   vzeroupper 
  0x00007fb1a087834d:   leaveq 
  0x00007fb1a087834e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha256_implCompressMB [0x00007fb1a0878360, 0x00007fb1a08794bd] (4445 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0878360:   push   %rbp
  0x00007fb1a0878361:   mov    %rsp,%rbp
  0x00007fb1a0878364:   sub    $0x20,%rsp
  0x00007fb1a0878368:   push   %rcx
  0x00007fb1a0878369:   push   %rdx
  0x00007fb1a087836a:   push   %rbx
  0x00007fb1a087836b:   push   %rbp
  0x00007fb1a087836c:   push   %r12
  0x00007fb1a087836e:   push   %r13
  0x00007fb1a0878370:   push   %r14
  0x00007fb1a0878372:   push   %r15
  0x00007fb1a0878374:   mov    %rsp,%rax
  0x00007fb1a0878377:   sub    $0x220,%rsp
  0x00007fb1a087837e:   and    $0xffffffffffffffe0,%rsp
  0x00007fb1a0878382:   mov    %rax,0x218(%rsp)
  0x00007fb1a087838a:   mov    %rcx,%r9
  0x00007fb1a087838d:   mov    %rdx,%r8
  0x00007fb1a0878390:   mov    %rsi,%rdx
  0x00007fb1a0878393:   mov    %rdi,%rcx
  0x00007fb1a0878396:   lea    (%rcx),%rcx
  0x00007fb1a0878399:   mov    %rdx,%rdx
  0x00007fb1a087839c:   xor    %rax,%rax
  0x00007fb1a087839f:   cmp    %r9,%r8
  0x00007fb1a08783a2:   jae    Stub::sha256_implCompressMB+78 0x00007fb1a08783ae
  0x00007fb1a08783a4:   add    $0x40,%r8
  0x00007fb1a08783a8:   add    $0x40,%rax
  0x00007fb1a08783ac:   jmp    Stub::sha256_implCompressMB+63 0x00007fb1a087839f
  0x00007fb1a08783ae:   mov    %rax,%r8
  0x00007fb1a08783b1:   cmp    $0x0,%r8
  0x00007fb1a08783b5:   je     Stub::sha256_implCompressMB+4402 0x00007fb1a0879492
  0x00007fb1a08783bb:   lea    -0x40(%rcx,%r8,1),%r8
  0x00007fb1a08783c0:   mov    %r8,0x200(%rsp)
  0x00007fb1a08783c8:   cmp    %r8,%rcx
  0x00007fb1a08783cb:   je     Stub::sha256_implCompressMB+4341 0x00007fb1a0879455
  0x00007fb1a08783d1:   mov    (%rdx),%eax
  0x00007fb1a08783d3:   mov    0x4(%rdx),%ebx
  0x00007fb1a08783d6:   mov    0x8(%rdx),%edi
  0x00007fb1a08783d9:   mov    0xc(%rdx),%esi
  0x00007fb1a08783dc:   mov    0x10(%rdx),%r8d
  0x00007fb1a08783e0:   mov    0x14(%rdx),%r9d
  0x00007fb1a08783e4:   mov    0x1c(%rdx),%r11d
  0x00007fb1a08783e8:   vmovdqu -0x1230(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007fb1a08783f0:   vmovdqu -0x1218(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007fb1a08771e0
  0x00007fb1a08783f8:   vmovdqu -0x1200(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007fb1a0877200
  0x00007fb1a0878400:   mov    0x18(%rdx),%r10d
  0x00007fb1a0878404:   mov    %rdx,0x210(%rsp)
  0x00007fb1a087840c:   movabs $0x7fb1a4f454c0,%rbp
  0x00007fb1a0878416:   vmovdqu (%rcx),%ymm0
  0x00007fb1a087841a:   vmovdqu 0x20(%rcx),%ymm1
  0x00007fb1a087841f:   vmovdqu 0x40(%rcx),%ymm2
  0x00007fb1a0878424:   vmovdqu 0x60(%rcx),%ymm3
  0x00007fb1a0878429:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007fb1a087842e:   vpshufb %ymm13,%ymm1,%ymm1
  0x00007fb1a0878433:   vpshufb %ymm13,%ymm2,%ymm2
  0x00007fb1a0878438:   vpshufb %ymm13,%ymm3,%ymm3
  0x00007fb1a087843d:   vperm2i128 $0x20,%ymm2,%ymm0,%ymm4
  0x00007fb1a0878443:   vperm2i128 $0x31,%ymm2,%ymm0,%ymm5
  0x00007fb1a0878449:   vperm2i128 $0x20,%ymm3,%ymm1,%ymm6
  0x00007fb1a087844f:   vperm2i128 $0x31,%ymm3,%ymm1,%ymm7
  0x00007fb1a0878455:   add    $0x40,%rcx
  0x00007fb1a0878459:   mov    %rcx,0x208(%rsp)
  0x00007fb1a0878461:   xor    %rdx,%rdx
  0x00007fb1a0878464:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a087846c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0878470:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007fb1a0878476:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007fb1a087847b:   mov    %eax,%ecx
  0x00007fb1a087847d:   rorx   $0x19,%r8d,%r13d
  0x00007fb1a0878483:   rorx   $0xb,%r8d,%r14d
  0x00007fb1a0878489:   add    (%rsp,%rdx,1),%r11d
  0x00007fb1a087848d:   or     %edi,%ecx
  0x00007fb1a087848f:   mov    %r9d,%r15d
  0x00007fb1a0878492:   rorx   $0xd,%eax,%r12d
  0x00007fb1a0878498:   xor    %r14d,%r13d
  0x00007fb1a087849b:   xor    %r10d,%r15d
  0x00007fb1a087849e:   rorx   $0x6,%r8d,%r14d
  0x00007fb1a08784a4:   and    %r8d,%r15d
  0x00007fb1a08784a7:   xor    %r14d,%r13d
  0x00007fb1a08784aa:   rorx   $0x16,%eax,%r14d
  0x00007fb1a08784b0:   add    %r11d,%esi
  0x00007fb1a08784b3:   and    %ebx,%ecx
  0x00007fb1a08784b5:   xor    %r12d,%r14d
  0x00007fb1a08784b8:   rorx   $0x2,%eax,%r12d
  0x00007fb1a08784be:   xor    %r10d,%r15d
  0x00007fb1a08784c1:   xor    %r12d,%r14d
  0x00007fb1a08784c4:   mov    %eax,%r12d
  0x00007fb1a08784c7:   and    %edi,%r12d
  0x00007fb1a08784ca:   add    %r13d,%r15d
  0x00007fb1a08784cd:   or     %r12d,%ecx
  0x00007fb1a08784d0:   add    %r14d,%r11d
  0x00007fb1a08784d3:   add    %r15d,%esi
  0x00007fb1a08784d6:   add    %r15d,%r11d
  0x00007fb1a08784d9:   add    %ecx,%r11d
  0x00007fb1a08784dc:   vpalignr $0x4,%ymm6,%ymm7,%ymm0
  0x00007fb1a08784e2:   vpaddd %ymm4,%ymm0,%ymm0
  0x00007fb1a08784e6:   vpalignr $0x4,%ymm4,%ymm5,%ymm1
  0x00007fb1a08784ec:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fb1a08784f1:   vpslld $0x19,%ymm1,%ymm3
  0x00007fb1a08784f6:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a08784fa:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fb1a08784ff:   mov    %r11d,%ecx
  0x00007fb1a0878502:   rorx   $0x19,%esi,%r13d
  0x00007fb1a0878508:   rorx   $0xb,%esi,%r14d
  0x00007fb1a087850e:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007fb1a0878513:   or     %ebx,%ecx
  0x00007fb1a0878515:   mov    %r8d,%r15d
  0x00007fb1a0878518:   rorx   $0xd,%r11d,%r12d
  0x00007fb1a087851e:   xor    %r14d,%r13d
  0x00007fb1a0878521:   xor    %r9d,%r15d
  0x00007fb1a0878524:   rorx   $0x6,%esi,%r14d
  0x00007fb1a087852a:   and    %esi,%r15d
  0x00007fb1a087852d:   xor    %r14d,%r13d
  0x00007fb1a0878530:   rorx   $0x16,%r11d,%r14d
  0x00007fb1a0878536:   add    %r10d,%edi
  0x00007fb1a0878539:   and    %eax,%ecx
  0x00007fb1a087853b:   xor    %r12d,%r14d
  0x00007fb1a087853e:   rorx   $0x2,%r11d,%r12d
  0x00007fb1a0878544:   xor    %r9d,%r15d
  0x00007fb1a0878547:   xor    %r12d,%r14d
  0x00007fb1a087854a:   mov    %r11d,%r12d
  0x00007fb1a087854d:   and    %ebx,%r12d
  0x00007fb1a0878550:   add    %r13d,%r15d
  0x00007fb1a0878553:   or     %r12d,%ecx
  0x00007fb1a0878556:   add    %r14d,%r10d
  0x00007fb1a0878559:   add    %r15d,%edi
  0x00007fb1a087855c:   add    %r15d,%r10d
  0x00007fb1a087855f:   add    %ecx,%r10d
  0x00007fb1a0878562:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fb1a0878567:   vpslld $0xe,%ymm1,%ymm1
  0x00007fb1a087856c:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fb1a0878570:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fb1a0878574:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fb1a0878579:   vpshufd $0xfa,%ymm7,%ymm2
  0x00007fb1a087857e:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fb1a0878582:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fb1a0878587:   mov    %r10d,%ecx
  0x00007fb1a087858a:   rorx   $0x19,%edi,%r13d
  0x00007fb1a0878590:   rorx   $0xb,%edi,%r14d
  0x00007fb1a0878596:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007fb1a087859b:   or     %eax,%ecx
  0x00007fb1a087859d:   mov    %esi,%r15d
  0x00007fb1a08785a0:   rorx   $0xd,%r10d,%r12d
  0x00007fb1a08785a6:   xor    %r14d,%r13d
  0x00007fb1a08785a9:   xor    %r8d,%r15d
  0x00007fb1a08785ac:   rorx   $0x6,%edi,%r14d
  0x00007fb1a08785b2:   and    %edi,%r15d
  0x00007fb1a08785b5:   xor    %r14d,%r13d
  0x00007fb1a08785b8:   rorx   $0x16,%r10d,%r14d
  0x00007fb1a08785be:   add    %r9d,%ebx
  0x00007fb1a08785c1:   and    %r11d,%ecx
  0x00007fb1a08785c4:   xor    %r12d,%r14d
  0x00007fb1a08785c7:   rorx   $0x2,%r10d,%r12d
  0x00007fb1a08785cd:   xor    %r8d,%r15d
  0x00007fb1a08785d0:   xor    %r12d,%r14d
  0x00007fb1a08785d3:   mov    %r10d,%r12d
  0x00007fb1a08785d6:   and    %eax,%r12d
  0x00007fb1a08785d9:   add    %r13d,%r15d
  0x00007fb1a08785dc:   or     %r12d,%ecx
  0x00007fb1a08785df:   add    %r14d,%r9d
  0x00007fb1a08785e2:   add    %r15d,%ebx
  0x00007fb1a08785e5:   add    %r15d,%r9d
  0x00007fb1a08785e8:   add    %ecx,%r9d
  0x00007fb1a08785eb:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a08785f0:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a08785f5:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a08785f9:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fb1a08785fd:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fb1a0878602:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fb1a0878607:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fb1a087860c:   mov    %r9d,%ecx
  0x00007fb1a087860f:   rorx   $0x19,%ebx,%r13d
  0x00007fb1a0878615:   rorx   $0xb,%ebx,%r14d
  0x00007fb1a087861b:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007fb1a0878620:   or     %r11d,%ecx
  0x00007fb1a0878623:   mov    %edi,%r15d
  0x00007fb1a0878626:   rorx   $0xd,%r9d,%r12d
  0x00007fb1a087862c:   xor    %r14d,%r13d
  0x00007fb1a087862f:   xor    %esi,%r15d
  0x00007fb1a0878632:   rorx   $0x6,%ebx,%r14d
  0x00007fb1a0878638:   and    %ebx,%r15d
  0x00007fb1a087863b:   xor    %r14d,%r13d
  0x00007fb1a087863e:   rorx   $0x16,%r9d,%r14d
  0x00007fb1a0878644:   add    %r8d,%eax
  0x00007fb1a0878647:   and    %r10d,%ecx
  0x00007fb1a087864a:   xor    %r12d,%r14d
  0x00007fb1a087864d:   rorx   $0x2,%r9d,%r12d
  0x00007fb1a0878653:   xor    %esi,%r15d
  0x00007fb1a0878656:   xor    %r12d,%r14d
  0x00007fb1a0878659:   mov    %r9d,%r12d
  0x00007fb1a087865c:   and    %r11d,%r12d
  0x00007fb1a087865f:   add    %r13d,%r15d
  0x00007fb1a0878662:   or     %r12d,%ecx
  0x00007fb1a0878665:   add    %r14d,%r8d
  0x00007fb1a0878668:   add    %r15d,%eax
  0x00007fb1a087866b:   add    %r15d,%r8d
  0x00007fb1a087866e:   add    %ecx,%r8d
  0x00007fb1a0878671:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fb1a0878676:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a087867b:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a0878680:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a0878684:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fb1a0878688:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fb1a087868d:   vpaddd %ymm0,%ymm11,%ymm4
  0x00007fb1a0878691:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007fb1a0878697:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007fb1a087869d:   mov    %r8d,%ecx
  0x00007fb1a08786a0:   rorx   $0x19,%eax,%r13d
  0x00007fb1a08786a6:   rorx   $0xb,%eax,%r14d
  0x00007fb1a08786ac:   add    0x20(%rsp,%rdx,1),%esi
  0x00007fb1a08786b0:   or     %r10d,%ecx
  0x00007fb1a08786b3:   mov    %ebx,%r15d
  0x00007fb1a08786b6:   rorx   $0xd,%r8d,%r12d
  0x00007fb1a08786bc:   xor    %r14d,%r13d
  0x00007fb1a08786bf:   xor    %edi,%r15d
  0x00007fb1a08786c2:   rorx   $0x6,%eax,%r14d
  0x00007fb1a08786c8:   and    %eax,%r15d
  0x00007fb1a08786cb:   xor    %r14d,%r13d
  0x00007fb1a08786ce:   rorx   $0x16,%r8d,%r14d
  0x00007fb1a08786d4:   add    %esi,%r11d
  0x00007fb1a08786d7:   and    %r9d,%ecx
  0x00007fb1a08786da:   xor    %r12d,%r14d
  0x00007fb1a08786dd:   rorx   $0x2,%r8d,%r12d
  0x00007fb1a08786e3:   xor    %edi,%r15d
  0x00007fb1a08786e6:   xor    %r12d,%r14d
  0x00007fb1a08786e9:   mov    %r8d,%r12d
  0x00007fb1a08786ec:   and    %r10d,%r12d
  0x00007fb1a08786ef:   add    %r13d,%r15d
  0x00007fb1a08786f2:   or     %r12d,%ecx
  0x00007fb1a08786f5:   add    %r14d,%esi
  0x00007fb1a08786f8:   add    %r15d,%r11d
  0x00007fb1a08786fb:   add    %r15d,%esi
  0x00007fb1a08786fe:   add    %ecx,%esi
  0x00007fb1a0878700:   vpalignr $0x4,%ymm7,%ymm4,%ymm0
  0x00007fb1a0878706:   vpaddd %ymm5,%ymm0,%ymm0
  0x00007fb1a087870a:   vpalignr $0x4,%ymm5,%ymm6,%ymm1
  0x00007fb1a0878710:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fb1a0878715:   vpslld $0x19,%ymm1,%ymm3
  0x00007fb1a087871a:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a087871e:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fb1a0878723:   mov    %esi,%ecx
  0x00007fb1a0878725:   rorx   $0x19,%r11d,%r13d
  0x00007fb1a087872b:   rorx   $0xb,%r11d,%r14d
  0x00007fb1a0878731:   add    0x24(%rsp,%rdx,1),%edi
  0x00007fb1a0878735:   or     %r9d,%ecx
  0x00007fb1a0878738:   mov    %eax,%r15d
  0x00007fb1a087873b:   rorx   $0xd,%esi,%r12d
  0x00007fb1a0878741:   xor    %r14d,%r13d
  0x00007fb1a0878744:   xor    %ebx,%r15d
  0x00007fb1a0878747:   rorx   $0x6,%r11d,%r14d
  0x00007fb1a087874d:   and    %r11d,%r15d
  0x00007fb1a0878750:   xor    %r14d,%r13d
  0x00007fb1a0878753:   rorx   $0x16,%esi,%r14d
  0x00007fb1a0878759:   add    %edi,%r10d
  0x00007fb1a087875c:   and    %r8d,%ecx
  0x00007fb1a087875f:   xor    %r12d,%r14d
  0x00007fb1a0878762:   rorx   $0x2,%esi,%r12d
  0x00007fb1a0878768:   xor    %ebx,%r15d
  0x00007fb1a087876b:   xor    %r12d,%r14d
  0x00007fb1a087876e:   mov    %esi,%r12d
  0x00007fb1a0878771:   and    %r9d,%r12d
  0x00007fb1a0878774:   add    %r13d,%r15d
  0x00007fb1a0878777:   or     %r12d,%ecx
  0x00007fb1a087877a:   add    %r14d,%edi
  0x00007fb1a087877d:   add    %r15d,%r10d
  0x00007fb1a0878780:   add    %r15d,%edi
  0x00007fb1a0878783:   add    %ecx,%edi
  0x00007fb1a0878785:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fb1a087878a:   vpslld $0xe,%ymm1,%ymm1
  0x00007fb1a087878f:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fb1a0878793:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fb1a0878797:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fb1a087879c:   vpshufd $0xfa,%ymm4,%ymm2
  0x00007fb1a08787a1:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fb1a08787a5:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fb1a08787aa:   mov    %edi,%ecx
  0x00007fb1a08787ac:   rorx   $0x19,%r10d,%r13d
  0x00007fb1a08787b2:   rorx   $0xb,%r10d,%r14d
  0x00007fb1a08787b8:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007fb1a08787bc:   or     %r8d,%ecx
  0x00007fb1a08787bf:   mov    %r11d,%r15d
  0x00007fb1a08787c2:   rorx   $0xd,%edi,%r12d
  0x00007fb1a08787c8:   xor    %r14d,%r13d
  0x00007fb1a08787cb:   xor    %eax,%r15d
  0x00007fb1a08787ce:   rorx   $0x6,%r10d,%r14d
  0x00007fb1a08787d4:   and    %r10d,%r15d
  0x00007fb1a08787d7:   xor    %r14d,%r13d
  0x00007fb1a08787da:   rorx   $0x16,%edi,%r14d
  0x00007fb1a08787e0:   add    %ebx,%r9d
  0x00007fb1a08787e3:   and    %esi,%ecx
  0x00007fb1a08787e5:   xor    %r12d,%r14d
  0x00007fb1a08787e8:   rorx   $0x2,%edi,%r12d
  0x00007fb1a08787ee:   xor    %eax,%r15d
  0x00007fb1a08787f1:   xor    %r12d,%r14d
  0x00007fb1a08787f4:   mov    %edi,%r12d
  0x00007fb1a08787f7:   and    %r8d,%r12d
  0x00007fb1a08787fa:   add    %r13d,%r15d
  0x00007fb1a08787fd:   or     %r12d,%ecx
  0x00007fb1a0878800:   add    %r14d,%ebx
  0x00007fb1a0878803:   add    %r15d,%r9d
  0x00007fb1a0878806:   add    %r15d,%ebx
  0x00007fb1a0878809:   add    %ecx,%ebx
  0x00007fb1a087880b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0878810:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a0878815:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a0878819:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fb1a087881d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fb1a0878822:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fb1a0878827:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fb1a087882c:   mov    %ebx,%ecx
  0x00007fb1a087882e:   rorx   $0x19,%r9d,%r13d
  0x00007fb1a0878834:   rorx   $0xb,%r9d,%r14d
  0x00007fb1a087883a:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007fb1a087883e:   or     %esi,%ecx
  0x00007fb1a0878840:   mov    %r10d,%r15d
  0x00007fb1a0878843:   rorx   $0xd,%ebx,%r12d
  0x00007fb1a0878849:   xor    %r14d,%r13d
  0x00007fb1a087884c:   xor    %r11d,%r15d
  0x00007fb1a087884f:   rorx   $0x6,%r9d,%r14d
  0x00007fb1a0878855:   and    %r9d,%r15d
  0x00007fb1a0878858:   xor    %r14d,%r13d
  0x00007fb1a087885b:   rorx   $0x16,%ebx,%r14d
  0x00007fb1a0878861:   add    %eax,%r8d
  0x00007fb1a0878864:   and    %edi,%ecx
  0x00007fb1a0878866:   xor    %r12d,%r14d
  0x00007fb1a0878869:   rorx   $0x2,%ebx,%r12d
  0x00007fb1a087886f:   xor    %r11d,%r15d
  0x00007fb1a0878872:   xor    %r12d,%r14d
  0x00007fb1a0878875:   mov    %ebx,%r12d
  0x00007fb1a0878878:   and    %esi,%r12d
  0x00007fb1a087887b:   add    %r13d,%r15d
  0x00007fb1a087887e:   or     %r12d,%ecx
  0x00007fb1a0878881:   add    %r14d,%eax
  0x00007fb1a0878884:   add    %r15d,%r8d
  0x00007fb1a0878887:   add    %r15d,%eax
  0x00007fb1a087888a:   add    %ecx,%eax
  0x00007fb1a087888c:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fb1a0878891:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0878896:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a087889b:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a087889f:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fb1a08788a3:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fb1a08788a8:   vpaddd %ymm0,%ymm11,%ymm5
  0x00007fb1a08788ac:   vpaddd 0x40(%rbp,%rdx,1),%ymm6,%ymm9
  0x00007fb1a08788b2:   vmovdqu %ymm9,0x40(%rsp,%rdx,1)
  0x00007fb1a08788b8:   mov    %eax,%ecx
  0x00007fb1a08788ba:   rorx   $0x19,%r8d,%r13d
  0x00007fb1a08788c0:   rorx   $0xb,%r8d,%r14d
  0x00007fb1a08788c6:   add    0x40(%rsp,%rdx,1),%r11d
  0x00007fb1a08788cb:   or     %edi,%ecx
  0x00007fb1a08788cd:   mov    %r9d,%r15d
  0x00007fb1a08788d0:   rorx   $0xd,%eax,%r12d
  0x00007fb1a08788d6:   xor    %r14d,%r13d
  0x00007fb1a08788d9:   xor    %r10d,%r15d
  0x00007fb1a08788dc:   rorx   $0x6,%r8d,%r14d
  0x00007fb1a08788e2:   and    %r8d,%r15d
  0x00007fb1a08788e5:   xor    %r14d,%r13d
  0x00007fb1a08788e8:   rorx   $0x16,%eax,%r14d
  0x00007fb1a08788ee:   add    %r11d,%esi
  0x00007fb1a08788f1:   and    %ebx,%ecx
  0x00007fb1a08788f3:   xor    %r12d,%r14d
  0x00007fb1a08788f6:   rorx   $0x2,%eax,%r12d
  0x00007fb1a08788fc:   xor    %r10d,%r15d
  0x00007fb1a08788ff:   xor    %r12d,%r14d
  0x00007fb1a0878902:   mov    %eax,%r12d
  0x00007fb1a0878905:   and    %edi,%r12d
  0x00007fb1a0878908:   add    %r13d,%r15d
  0x00007fb1a087890b:   or     %r12d,%ecx
  0x00007fb1a087890e:   add    %r14d,%r11d
  0x00007fb1a0878911:   add    %r15d,%esi
  0x00007fb1a0878914:   add    %r15d,%r11d
  0x00007fb1a0878917:   add    %ecx,%r11d
  0x00007fb1a087891a:   vpalignr $0x4,%ymm4,%ymm5,%ymm0
  0x00007fb1a0878920:   vpaddd %ymm6,%ymm0,%ymm0
  0x00007fb1a0878924:   vpalignr $0x4,%ymm6,%ymm7,%ymm1
  0x00007fb1a087892a:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fb1a087892f:   vpslld $0x19,%ymm1,%ymm3
  0x00007fb1a0878934:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a0878938:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fb1a087893d:   mov    %r11d,%ecx
  0x00007fb1a0878940:   rorx   $0x19,%esi,%r13d
  0x00007fb1a0878946:   rorx   $0xb,%esi,%r14d
  0x00007fb1a087894c:   add    0x44(%rsp,%rdx,1),%r10d
  0x00007fb1a0878951:   or     %ebx,%ecx
  0x00007fb1a0878953:   mov    %r8d,%r15d
  0x00007fb1a0878956:   rorx   $0xd,%r11d,%r12d
  0x00007fb1a087895c:   xor    %r14d,%r13d
  0x00007fb1a087895f:   xor    %r9d,%r15d
  0x00007fb1a0878962:   rorx   $0x6,%esi,%r14d
  0x00007fb1a0878968:   and    %esi,%r15d
  0x00007fb1a087896b:   xor    %r14d,%r13d
  0x00007fb1a087896e:   rorx   $0x16,%r11d,%r14d
  0x00007fb1a0878974:   add    %r10d,%edi
  0x00007fb1a0878977:   and    %eax,%ecx
  0x00007fb1a0878979:   xor    %r12d,%r14d
  0x00007fb1a087897c:   rorx   $0x2,%r11d,%r12d
  0x00007fb1a0878982:   xor    %r9d,%r15d
  0x00007fb1a0878985:   xor    %r12d,%r14d
  0x00007fb1a0878988:   mov    %r11d,%r12d
  0x00007fb1a087898b:   and    %ebx,%r12d
  0x00007fb1a087898e:   add    %r13d,%r15d
  0x00007fb1a0878991:   or     %r12d,%ecx
  0x00007fb1a0878994:   add    %r14d,%r10d
  0x00007fb1a0878997:   add    %r15d,%edi
  0x00007fb1a087899a:   add    %r15d,%r10d
  0x00007fb1a087899d:   add    %ecx,%r10d
  0x00007fb1a08789a0:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fb1a08789a5:   vpslld $0xe,%ymm1,%ymm1
  0x00007fb1a08789aa:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fb1a08789ae:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fb1a08789b2:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fb1a08789b7:   vpshufd $0xfa,%ymm5,%ymm2
  0x00007fb1a08789bc:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fb1a08789c0:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fb1a08789c5:   mov    %r10d,%ecx
  0x00007fb1a08789c8:   rorx   $0x19,%edi,%r13d
  0x00007fb1a08789ce:   rorx   $0xb,%edi,%r14d
  0x00007fb1a08789d4:   add    0x48(%rsp,%rdx,1),%r9d
  0x00007fb1a08789d9:   or     %eax,%ecx
  0x00007fb1a08789db:   mov    %esi,%r15d
  0x00007fb1a08789de:   rorx   $0xd,%r10d,%r12d
  0x00007fb1a08789e4:   xor    %r14d,%r13d
  0x00007fb1a08789e7:   xor    %r8d,%r15d
  0x00007fb1a08789ea:   rorx   $0x6,%edi,%r14d
  0x00007fb1a08789f0:   and    %edi,%r15d
  0x00007fb1a08789f3:   xor    %r14d,%r13d
  0x00007fb1a08789f6:   rorx   $0x16,%r10d,%r14d
  0x00007fb1a08789fc:   add    %r9d,%ebx
  0x00007fb1a08789ff:   and    %r11d,%ecx
  0x00007fb1a0878a02:   xor    %r12d,%r14d
  0x00007fb1a0878a05:   rorx   $0x2,%r10d,%r12d
  0x00007fb1a0878a0b:   xor    %r8d,%r15d
  0x00007fb1a0878a0e:   xor    %r12d,%r14d
  0x00007fb1a0878a11:   mov    %r10d,%r12d
  0x00007fb1a0878a14:   and    %eax,%r12d
  0x00007fb1a0878a17:   add    %r13d,%r15d
  0x00007fb1a0878a1a:   or     %r12d,%ecx
  0x00007fb1a0878a1d:   add    %r14d,%r9d
  0x00007fb1a0878a20:   add    %r15d,%ebx
  0x00007fb1a0878a23:   add    %r15d,%r9d
  0x00007fb1a0878a26:   add    %ecx,%r9d
  0x00007fb1a0878a29:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0878a2e:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a0878a33:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a0878a37:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fb1a0878a3b:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fb1a0878a40:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fb1a0878a45:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fb1a0878a4a:   mov    %r9d,%ecx
  0x00007fb1a0878a4d:   rorx   $0x19,%ebx,%r13d
  0x00007fb1a0878a53:   rorx   $0xb,%ebx,%r14d
  0x00007fb1a0878a59:   add    0x4c(%rsp,%rdx,1),%r8d
  0x00007fb1a0878a5e:   or     %r11d,%ecx
  0x00007fb1a0878a61:   mov    %edi,%r15d
  0x00007fb1a0878a64:   rorx   $0xd,%r9d,%r12d
  0x00007fb1a0878a6a:   xor    %r14d,%r13d
  0x00007fb1a0878a6d:   xor    %esi,%r15d
  0x00007fb1a0878a70:   rorx   $0x6,%ebx,%r14d
  0x00007fb1a0878a76:   and    %ebx,%r15d
  0x00007fb1a0878a79:   xor    %r14d,%r13d
  0x00007fb1a0878a7c:   rorx   $0x16,%r9d,%r14d
  0x00007fb1a0878a82:   add    %r8d,%eax
  0x00007fb1a0878a85:   and    %r10d,%ecx
  0x00007fb1a0878a88:   xor    %r12d,%r14d
  0x00007fb1a0878a8b:   rorx   $0x2,%r9d,%r12d
  0x00007fb1a0878a91:   xor    %esi,%r15d
  0x00007fb1a0878a94:   xor    %r12d,%r14d
  0x00007fb1a0878a97:   mov    %r9d,%r12d
  0x00007fb1a0878a9a:   and    %r11d,%r12d
  0x00007fb1a0878a9d:   add    %r13d,%r15d
  0x00007fb1a0878aa0:   or     %r12d,%ecx
  0x00007fb1a0878aa3:   add    %r14d,%r8d
  0x00007fb1a0878aa6:   add    %r15d,%eax
  0x00007fb1a0878aa9:   add    %r15d,%r8d
  0x00007fb1a0878aac:   add    %ecx,%r8d
  0x00007fb1a0878aaf:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fb1a0878ab4:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0878ab9:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a0878abe:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a0878ac2:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fb1a0878ac6:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fb1a0878acb:   vpaddd %ymm0,%ymm11,%ymm6
  0x00007fb1a0878acf:   vpaddd 0x60(%rbp,%rdx,1),%ymm7,%ymm9
  0x00007fb1a0878ad5:   vmovdqu %ymm9,0x60(%rsp,%rdx,1)
  0x00007fb1a0878adb:   mov    %r8d,%ecx
  0x00007fb1a0878ade:   rorx   $0x19,%eax,%r13d
  0x00007fb1a0878ae4:   rorx   $0xb,%eax,%r14d
  0x00007fb1a0878aea:   add    0x60(%rsp,%rdx,1),%esi
  0x00007fb1a0878aee:   or     %r10d,%ecx
  0x00007fb1a0878af1:   mov    %ebx,%r15d
  0x00007fb1a0878af4:   rorx   $0xd,%r8d,%r12d
  0x00007fb1a0878afa:   xor    %r14d,%r13d
  0x00007fb1a0878afd:   xor    %edi,%r15d
  0x00007fb1a0878b00:   rorx   $0x6,%eax,%r14d
  0x00007fb1a0878b06:   and    %eax,%r15d
  0x00007fb1a0878b09:   xor    %r14d,%r13d
  0x00007fb1a0878b0c:   rorx   $0x16,%r8d,%r14d
  0x00007fb1a0878b12:   add    %esi,%r11d
  0x00007fb1a0878b15:   and    %r9d,%ecx
  0x00007fb1a0878b18:   xor    %r12d,%r14d
  0x00007fb1a0878b1b:   rorx   $0x2,%r8d,%r12d
  0x00007fb1a0878b21:   xor    %edi,%r15d
  0x00007fb1a0878b24:   xor    %r12d,%r14d
  0x00007fb1a0878b27:   mov    %r8d,%r12d
  0x00007fb1a0878b2a:   and    %r10d,%r12d
  0x00007fb1a0878b2d:   add    %r13d,%r15d
  0x00007fb1a0878b30:   or     %r12d,%ecx
  0x00007fb1a0878b33:   add    %r14d,%esi
  0x00007fb1a0878b36:   add    %r15d,%r11d
  0x00007fb1a0878b39:   add    %r15d,%esi
  0x00007fb1a0878b3c:   add    %ecx,%esi
  0x00007fb1a0878b3e:   vpalignr $0x4,%ymm5,%ymm6,%ymm0
  0x00007fb1a0878b44:   vpaddd %ymm7,%ymm0,%ymm0
  0x00007fb1a0878b48:   vpalignr $0x4,%ymm7,%ymm4,%ymm1
  0x00007fb1a0878b4e:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fb1a0878b53:   vpslld $0x19,%ymm1,%ymm3
  0x00007fb1a0878b58:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a0878b5c:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fb1a0878b61:   mov    %esi,%ecx
  0x00007fb1a0878b63:   rorx   $0x19,%r11d,%r13d
  0x00007fb1a0878b69:   rorx   $0xb,%r11d,%r14d
  0x00007fb1a0878b6f:   add    0x64(%rsp,%rdx,1),%edi
  0x00007fb1a0878b73:   or     %r9d,%ecx
  0x00007fb1a0878b76:   mov    %eax,%r15d
  0x00007fb1a0878b79:   rorx   $0xd,%esi,%r12d
  0x00007fb1a0878b7f:   xor    %r14d,%r13d
  0x00007fb1a0878b82:   xor    %ebx,%r15d
  0x00007fb1a0878b85:   rorx   $0x6,%r11d,%r14d
  0x00007fb1a0878b8b:   and    %r11d,%r15d
  0x00007fb1a0878b8e:   xor    %r14d,%r13d
  0x00007fb1a0878b91:   rorx   $0x16,%esi,%r14d
  0x00007fb1a0878b97:   add    %edi,%r10d
  0x00007fb1a0878b9a:   and    %r8d,%ecx
  0x00007fb1a0878b9d:   xor    %r12d,%r14d
  0x00007fb1a0878ba0:   rorx   $0x2,%esi,%r12d
  0x00007fb1a0878ba6:   xor    %ebx,%r15d
  0x00007fb1a0878ba9:   xor    %r12d,%r14d
  0x00007fb1a0878bac:   mov    %esi,%r12d
  0x00007fb1a0878baf:   and    %r9d,%r12d
  0x00007fb1a0878bb2:   add    %r13d,%r15d
  0x00007fb1a0878bb5:   or     %r12d,%ecx
  0x00007fb1a0878bb8:   add    %r14d,%edi
  0x00007fb1a0878bbb:   add    %r15d,%r10d
  0x00007fb1a0878bbe:   add    %r15d,%edi
  0x00007fb1a0878bc1:   add    %ecx,%edi
  0x00007fb1a0878bc3:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fb1a0878bc8:   vpslld $0xe,%ymm1,%ymm1
  0x00007fb1a0878bcd:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fb1a0878bd1:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fb1a0878bd5:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fb1a0878bda:   vpshufd $0xfa,%ymm6,%ymm2
  0x00007fb1a0878bdf:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fb1a0878be3:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fb1a0878be8:   mov    %edi,%ecx
  0x00007fb1a0878bea:   rorx   $0x19,%r10d,%r13d
  0x00007fb1a0878bf0:   rorx   $0xb,%r10d,%r14d
  0x00007fb1a0878bf6:   add    0x68(%rsp,%rdx,1),%ebx
  0x00007fb1a0878bfa:   or     %r8d,%ecx
  0x00007fb1a0878bfd:   mov    %r11d,%r15d
  0x00007fb1a0878c00:   rorx   $0xd,%edi,%r12d
  0x00007fb1a0878c06:   xor    %r14d,%r13d
  0x00007fb1a0878c09:   xor    %eax,%r15d
  0x00007fb1a0878c0c:   rorx   $0x6,%r10d,%r14d
  0x00007fb1a0878c12:   and    %r10d,%r15d
  0x00007fb1a0878c15:   xor    %r14d,%r13d
  0x00007fb1a0878c18:   rorx   $0x16,%edi,%r14d
  0x00007fb1a0878c1e:   add    %ebx,%r9d
  0x00007fb1a0878c21:   and    %esi,%ecx
  0x00007fb1a0878c23:   xor    %r12d,%r14d
  0x00007fb1a0878c26:   rorx   $0x2,%edi,%r12d
  0x00007fb1a0878c2c:   xor    %eax,%r15d
  0x00007fb1a0878c2f:   xor    %r12d,%r14d
  0x00007fb1a0878c32:   mov    %edi,%r12d
  0x00007fb1a0878c35:   and    %r8d,%r12d
  0x00007fb1a0878c38:   add    %r13d,%r15d
  0x00007fb1a0878c3b:   or     %r12d,%ecx
  0x00007fb1a0878c3e:   add    %r14d,%ebx
  0x00007fb1a0878c41:   add    %r15d,%r9d
  0x00007fb1a0878c44:   add    %r15d,%ebx
  0x00007fb1a0878c47:   add    %ecx,%ebx
  0x00007fb1a0878c49:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0878c4e:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a0878c53:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a0878c57:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fb1a0878c5b:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fb1a0878c60:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fb1a0878c65:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fb1a0878c6a:   mov    %ebx,%ecx
  0x00007fb1a0878c6c:   rorx   $0x19,%r9d,%r13d
  0x00007fb1a0878c72:   rorx   $0xb,%r9d,%r14d
  0x00007fb1a0878c78:   add    0x6c(%rsp,%rdx,1),%eax
  0x00007fb1a0878c7c:   or     %esi,%ecx
  0x00007fb1a0878c7e:   mov    %r10d,%r15d
  0x00007fb1a0878c81:   rorx   $0xd,%ebx,%r12d
  0x00007fb1a0878c87:   xor    %r14d,%r13d
  0x00007fb1a0878c8a:   xor    %r11d,%r15d
  0x00007fb1a0878c8d:   rorx   $0x6,%r9d,%r14d
  0x00007fb1a0878c93:   and    %r9d,%r15d
  0x00007fb1a0878c96:   xor    %r14d,%r13d
  0x00007fb1a0878c99:   rorx   $0x16,%ebx,%r14d
  0x00007fb1a0878c9f:   add    %eax,%r8d
  0x00007fb1a0878ca2:   and    %edi,%ecx
  0x00007fb1a0878ca4:   xor    %r12d,%r14d
  0x00007fb1a0878ca7:   rorx   $0x2,%ebx,%r12d
  0x00007fb1a0878cad:   xor    %r11d,%r15d
  0x00007fb1a0878cb0:   xor    %r12d,%r14d
  0x00007fb1a0878cb3:   mov    %ebx,%r12d
  0x00007fb1a0878cb6:   and    %esi,%r12d
  0x00007fb1a0878cb9:   add    %r13d,%r15d
  0x00007fb1a0878cbc:   or     %r12d,%ecx
  0x00007fb1a0878cbf:   add    %r14d,%eax
  0x00007fb1a0878cc2:   add    %r15d,%r8d
  0x00007fb1a0878cc5:   add    %r15d,%eax
  0x00007fb1a0878cc8:   add    %ecx,%eax
  0x00007fb1a0878cca:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fb1a0878ccf:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0878cd4:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fb1a0878cd9:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fb1a0878cdd:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fb1a0878ce1:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fb1a0878ce6:   vpaddd %ymm0,%ymm11,%ymm7
  0x00007fb1a0878cea:   add    $0x80,%rdx
  0x00007fb1a0878cf1:   cmp    $0x180,%rdx
  0x00007fb1a0878cf8:   jb     Stub::sha256_implCompressMB+272 0x00007fb1a0878470
  0x00007fb1a0878cfe:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007fb1a0878d04:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007fb1a0878d09:   mov    %r9d,%r15d
  0x00007fb1a0878d0c:   rorx   $0x19,%r8d,%r13d
  0x00007fb1a0878d12:   rorx   $0xb,%r8d,%r14d
  0x00007fb1a0878d18:   xor    %r10d,%r15d
  0x00007fb1a0878d1b:   xor    %r14d,%r13d
  0x00007fb1a0878d1e:   rorx   $0x6,%r8d,%r14d
  0x00007fb1a0878d24:   and    %r8d,%r15d
  0x00007fb1a0878d27:   xor    %r14d,%r13d
  0x00007fb1a0878d2a:   rorx   $0xd,%eax,%r12d
  0x00007fb1a0878d30:   xor    %r10d,%r15d
  0x00007fb1a0878d33:   rorx   $0x16,%eax,%r14d
  0x00007fb1a0878d39:   mov    %eax,%ecx
  0x00007fb1a0878d3b:   xor    %r12d,%r14d
  0x00007fb1a0878d3e:   rorx   $0x2,%eax,%r12d
  0x00007fb1a0878d44:   add    (%rsp,%rdx,1),%r11d
  0x00007fb1a0878d48:   or     %edi,%ecx
  0x00007fb1a0878d4a:   xor    %r12d,%r14d
  0x00007fb1a0878d4d:   mov    %eax,%r12d
  0x00007fb1a0878d50:   and    %ebx,%ecx
  0x00007fb1a0878d52:   and    %edi,%r12d
  0x00007fb1a0878d55:   add    %r13d,%r15d
  0x00007fb1a0878d58:   add    %r11d,%esi
  0x00007fb1a0878d5b:   or     %r12d,%ecx
  0x00007fb1a0878d5e:   add    %r14d,%r11d
  0x00007fb1a0878d61:   add    %r15d,%esi
  0x00007fb1a0878d64:   add    %r15d,%r11d
  0x00007fb1a0878d67:   mov    %r8d,%r15d
  0x00007fb1a0878d6a:   rorx   $0x19,%esi,%r13d
  0x00007fb1a0878d70:   rorx   $0xb,%esi,%r14d
  0x00007fb1a0878d76:   xor    %r9d,%r15d
  0x00007fb1a0878d79:   xor    %r14d,%r13d
  0x00007fb1a0878d7c:   rorx   $0x6,%esi,%r14d
  0x00007fb1a0878d82:   and    %esi,%r15d
  0x00007fb1a0878d85:   add    %ecx,%r11d
  0x00007fb1a0878d88:   xor    %r14d,%r13d
  0x00007fb1a0878d8b:   rorx   $0xd,%r11d,%r12d
  0x00007fb1a0878d91:   xor    %r9d,%r15d
  0x00007fb1a0878d94:   rorx   $0x16,%r11d,%r14d
  0x00007fb1a0878d9a:   mov    %r11d,%ecx
  0x00007fb1a0878d9d:   xor    %r12d,%r14d
  0x00007fb1a0878da0:   rorx   $0x2,%r11d,%r12d
  0x00007fb1a0878da6:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007fb1a0878dab:   or     %ebx,%ecx
  0x00007fb1a0878dad:   xor    %r12d,%r14d
  0x00007fb1a0878db0:   mov    %r11d,%r12d
  0x00007fb1a0878db3:   and    %eax,%ecx
  0x00007fb1a0878db5:   and    %ebx,%r12d
  0x00007fb1a0878db8:   add    %r13d,%r15d
  0x00007fb1a0878dbb:   add    %r10d,%edi
  0x00007fb1a0878dbe:   or     %r12d,%ecx
  0x00007fb1a0878dc1:   add    %r14d,%r10d
  0x00007fb1a0878dc4:   add    %r15d,%edi
  0x00007fb1a0878dc7:   add    %r15d,%r10d
  0x00007fb1a0878dca:   mov    %esi,%r15d
  0x00007fb1a0878dcd:   rorx   $0x19,%edi,%r13d
  0x00007fb1a0878dd3:   rorx   $0xb,%edi,%r14d
  0x00007fb1a0878dd9:   xor    %r8d,%r15d
  0x00007fb1a0878ddc:   xor    %r14d,%r13d
  0x00007fb1a0878ddf:   rorx   $0x6,%edi,%r14d
  0x00007fb1a0878de5:   and    %edi,%r15d
  0x00007fb1a0878de8:   add    %ecx,%r10d
  0x00007fb1a0878deb:   xor    %r14d,%r13d
  0x00007fb1a0878dee:   rorx   $0xd,%r10d,%r12d
  0x00007fb1a0878df4:   xor    %r8d,%r15d
  0x00007fb1a0878df7:   rorx   $0x16,%r10d,%r14d
  0x00007fb1a0878dfd:   mov    %r10d,%ecx
  0x00007fb1a0878e00:   xor    %r12d,%r14d
  0x00007fb1a0878e03:   rorx   $0x2,%r10d,%r12d
  0x00007fb1a0878e09:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007fb1a0878e0e:   or     %eax,%ecx
  0x00007fb1a0878e10:   xor    %r12d,%r14d
  0x00007fb1a0878e13:   mov    %r10d,%r12d
  0x00007fb1a0878e16:   and    %r11d,%ecx
  0x00007fb1a0878e19:   and    %eax,%r12d
  0x00007fb1a0878e1c:   add    %r13d,%r15d
  0x00007fb1a0878e1f:   add    %r9d,%ebx
  0x00007fb1a0878e22:   or     %r12d,%ecx
  0x00007fb1a0878e25:   add    %r14d,%r9d
  0x00007fb1a0878e28:   add    %r15d,%ebx
  0x00007fb1a0878e2b:   add    %r15d,%r9d
  0x00007fb1a0878e2e:   mov    %edi,%r15d
  0x00007fb1a0878e31:   rorx   $0x19,%ebx,%r13d
  0x00007fb1a0878e37:   rorx   $0xb,%ebx,%r14d
  0x00007fb1a0878e3d:   xor    %esi,%r15d
  0x00007fb1a0878e40:   xor    %r14d,%r13d
  0x00007fb1a0878e43:   rorx   $0x6,%ebx,%r14d
  0x00007fb1a0878e49:   and    %ebx,%r15d
  0x00007fb1a0878e4c:   add    %ecx,%r9d
  0x00007fb1a0878e4f:   xor    %r14d,%r13d
  0x00007fb1a0878e52:   rorx   $0xd,%r9d,%r12d
  0x00007fb1a0878e58:   xor    %esi,%r15d
  0x00007fb1a0878e5b:   rorx   $0x16,%r9d,%r14d
  0x00007fb1a0878e61:   mov    %r9d,%ecx
  0x00007fb1a0878e64:   xor    %r12d,%r14d
  0x00007fb1a0878e67:   rorx   $0x2,%r9d,%r12d
  0x00007fb1a0878e6d:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007fb1a0878e72:   or     %r11d,%ecx
  0x00007fb1a0878e75:   xor    %r12d,%r14d
  0x00007fb1a0878e78:   mov    %r9d,%r12d
  0x00007fb1a0878e7b:   and    %r10d,%ecx
  0x00007fb1a0878e7e:   and    %r11d,%r12d
  0x00007fb1a0878e81:   add    %r13d,%r15d
  0x00007fb1a0878e84:   add    %r8d,%eax
  0x00007fb1a0878e87:   or     %r12d,%ecx
  0x00007fb1a0878e8a:   add    %r14d,%r8d
  0x00007fb1a0878e8d:   add    %r15d,%eax
  0x00007fb1a0878e90:   add    %r15d,%r8d
  0x00007fb1a0878e93:   add    %ecx,%r8d
  0x00007fb1a0878e96:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007fb1a0878e9c:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007fb1a0878ea2:   mov    %ebx,%r15d
  0x00007fb1a0878ea5:   rorx   $0x19,%eax,%r13d
  0x00007fb1a0878eab:   rorx   $0xb,%eax,%r14d
  0x00007fb1a0878eb1:   xor    %edi,%r15d
  0x00007fb1a0878eb4:   xor    %r14d,%r13d
  0x00007fb1a0878eb7:   rorx   $0x6,%eax,%r14d
  0x00007fb1a0878ebd:   and    %eax,%r15d
  0x00007fb1a0878ec0:   xor    %r14d,%r13d
  0x00007fb1a0878ec3:   rorx   $0xd,%r8d,%r12d
  0x00007fb1a0878ec9:   xor    %edi,%r15d
  0x00007fb1a0878ecc:   rorx   $0x16,%r8d,%r14d
  0x00007fb1a0878ed2:   mov    %r8d,%ecx
  0x00007fb1a0878ed5:   xor    %r12d,%r14d
  0x00007fb1a0878ed8:   rorx   $0x2,%r8d,%r12d
  0x00007fb1a0878ede:   add    0x20(%rsp,%rdx,1),%esi
  0x00007fb1a0878ee2:   or     %r10d,%ecx
  0x00007fb1a0878ee5:   xor    %r12d,%r14d
  0x00007fb1a0878ee8:   mov    %r8d,%r12d
  0x00007fb1a0878eeb:   and    %r9d,%ecx
  0x00007fb1a0878eee:   and    %r10d,%r12d
  0x00007fb1a0878ef1:   add    %r13d,%r15d
  0x00007fb1a0878ef4:   add    %esi,%r11d
  0x00007fb1a0878ef7:   or     %r12d,%ecx
  0x00007fb1a0878efa:   add    %r14d,%esi
  0x00007fb1a0878efd:   add    %r15d,%r11d
  0x00007fb1a0878f00:   add    %r15d,%esi
  0x00007fb1a0878f03:   mov    %eax,%r15d
  0x00007fb1a0878f06:   rorx   $0x19,%r11d,%r13d
  0x00007fb1a0878f0c:   rorx   $0xb,%r11d,%r14d
  0x00007fb1a0878f12:   xor    %ebx,%r15d
  0x00007fb1a0878f15:   xor    %r14d,%r13d
  0x00007fb1a0878f18:   rorx   $0x6,%r11d,%r14d
  0x00007fb1a0878f1e:   and    %r11d,%r15d
  0x00007fb1a0878f21:   add    %ecx,%esi
  0x00007fb1a0878f23:   xor    %r14d,%r13d
  0x00007fb1a0878f26:   rorx   $0xd,%esi,%r12d
  0x00007fb1a0878f2c:   xor    %ebx,%r15d
  0x00007fb1a0878f2f:   rorx   $0x16,%esi,%r14d
  0x00007fb1a0878f35:   mov    %esi,%ecx
  0x00007fb1a0878f37:   xor    %r12d,%r14d
  0x00007fb1a0878f3a:   rorx   $0x2,%esi,%r12d
  0x00007fb1a0878f40:   add    0x24(%rsp,%rdx,1),%edi
  0x00007fb1a0878f44:   or     %r9d,%ecx
  0x00007fb1a0878f47:   xor    %r12d,%r14d
  0x00007fb1a0878f4a:   mov    %esi,%r12d
  0x00007fb1a0878f4d:   and    %r8d,%ecx
  0x00007fb1a0878f50:   and    %r9d,%r12d
  0x00007fb1a0878f53:   add    %r13d,%r15d
  0x00007fb1a0878f56:   add    %edi,%r10d
  0x00007fb1a0878f59:   or     %r12d,%ecx
  0x00007fb1a0878f5c:   add    %r14d,%edi
  0x00007fb1a0878f5f:   add    %r15d,%r10d
  0x00007fb1a0878f62:   add    %r15d,%edi
  0x00007fb1a0878f65:   mov    %r11d,%r15d
  0x00007fb1a0878f68:   rorx   $0x19,%r10d,%r13d
  0x00007fb1a0878f6e:   rorx   $0xb,%r10d,%r14d
  0x00007fb1a0878f74:   xor    %eax,%r15d
  0x00007fb1a0878f77:   xor    %r14d,%r13d
  0x00007fb1a0878f7a:   rorx   $0x6,%r10d,%r14d
  0x00007fb1a0878f80:   and    %r10d,%r15d
  0x00007fb1a0878f83:   add    %ecx,%edi
  0x00007fb1a0878f85:   xor    %r14d,%r13d
  0x00007fb1a0878f88:   rorx   $0xd,%edi,%r12d
  0x00007fb1a0878f8e:   xor    %eax,%r15d
  0x00007fb1a0878f91:   rorx   $0x16,%edi,%r14d
  0x00007fb1a0878f97:   mov    %edi,%ecx
  0x00007fb1a0878f99:   xor    %r12d,%r14d
  0x00007fb1a0878f9c:   rorx   $0x2,%edi,%r12d
  0x00007fb1a0878fa2:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007fb1a0878fa6:   or     %r8d,%ecx
  0x00007fb1a0878fa9:   xor    %r12d,%r14d
  0x00007fb1a0878fac:   mov    %edi,%r12d
  0x00007fb1a0878faf:   and    %esi,%ecx
  0x00007fb1a0878fb1:   and    %r8d,%r12d
  0x00007fb1a0878fb4:   add    %r13d,%r15d
  0x00007fb1a0878fb7:   add    %ebx,%r9d
  0x00007fb1a0878fba:   or     %r12d,%ecx
  0x00007fb1a0878fbd:   add    %r14d,%ebx
  0x00007fb1a0878fc0:   add    %r15d,%r9d
  0x00007fb1a0878fc3:   add    %r15d,%ebx
  0x00007fb1a0878fc6:   mov    %r10d,%r15d
  0x00007fb1a0878fc9:   rorx   $0x19,%r9d,%r13d
  0x00007fb1a0878fcf:   rorx   $0xb,%r9d,%r14d
  0x00007fb1a0878fd5:   xor    %r11d,%r15d
  0x00007fb1a0878fd8:   xor    %r14d,%r13d
  0x00007fb1a0878fdb:   rorx   $0x6,%r9d,%r14d
  0x00007fb1a0878fe1:   and    %r9d,%r15d
  0x00007fb1a0878fe4:   add    %ecx,%ebx
  0x00007fb1a0878fe6:   xor    %r14d,%r13d
  0x00007fb1a0878fe9:   rorx   $0xd,%ebx,%r12d
  0x00007fb1a0878fef:   xor    %r11d,%r15d
  0x00007fb1a0878ff2:   rorx   $0x16,%ebx,%r14d
  0x00007fb1a0878ff8:   mov    %ebx,%ecx
  0x00007fb1a0878ffa:   xor    %r12d,%r14d
  0x00007fb1a0878ffd:   rorx   $0x2,%ebx,%r12d
  0x00007fb1a0879003:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007fb1a0879007:   or     %esi,%ecx
  0x00007fb1a0879009:   xor    %r12d,%r14d
  0x00007fb1a087900c:   mov    %ebx,%r12d
  0x00007fb1a087900f:   and    %edi,%ecx
  0x00007fb1a0879011:   and    %esi,%r12d
  0x00007fb1a0879014:   add    %r13d,%r15d
  0x00007fb1a0879017:   add    %eax,%r8d
  0x00007fb1a087901a:   or     %r12d,%ecx
  0x00007fb1a087901d:   add    %r14d,%eax
  0x00007fb1a0879020:   add    %r15d,%r8d
  0x00007fb1a0879023:   add    %r15d,%eax
  0x00007fb1a0879026:   add    %ecx,%eax
  0x00007fb1a0879028:   add    $0x40,%rdx
  0x00007fb1a087902c:   vmovdqu %ymm6,%ymm4
  0x00007fb1a0879030:   vmovdqu %ymm7,%ymm5
  0x00007fb1a0879034:   cmp    $0x200,%rdx
  0x00007fb1a087903b:   jb     Stub::sha256_implCompressMB+2462 0x00007fb1a0878cfe
  0x00007fb1a0879041:   mov    0x210(%rsp),%rdx
  0x00007fb1a0879049:   mov    0x208(%rsp),%rcx
  0x00007fb1a0879051:   add    (%rdx),%eax
  0x00007fb1a0879053:   mov    %eax,(%rdx)
  0x00007fb1a0879055:   add    0x4(%rdx),%ebx
  0x00007fb1a0879058:   mov    %ebx,0x4(%rdx)
  0x00007fb1a087905b:   add    0x8(%rdx),%edi
  0x00007fb1a087905e:   mov    %edi,0x8(%rdx)
  0x00007fb1a0879061:   add    0xc(%rdx),%esi
  0x00007fb1a0879064:   mov    %esi,0xc(%rdx)
  0x00007fb1a0879067:   add    0x10(%rdx),%r8d
  0x00007fb1a087906b:   mov    %r8d,0x10(%rdx)
  0x00007fb1a087906f:   add    0x14(%rdx),%r9d
  0x00007fb1a0879073:   mov    %r9d,0x14(%rdx)
  0x00007fb1a0879077:   add    0x18(%rdx),%r10d
  0x00007fb1a087907b:   mov    %r10d,0x18(%rdx)
  0x00007fb1a087907f:   add    0x1c(%rdx),%r11d
  0x00007fb1a0879083:   mov    %r11d,0x1c(%rdx)
  0x00007fb1a0879087:   cmp    0x200(%rsp),%rcx
  0x00007fb1a087908f:   ja     Stub::sha256_implCompressMB+4402 0x00007fb1a0879492
  0x00007fb1a0879095:   xor    %rdx,%rdx
  0x00007fb1a0879098:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a08790a0:   mov    %r9d,%r15d
  0x00007fb1a08790a3:   rorx   $0x19,%r8d,%r13d
  0x00007fb1a08790a9:   rorx   $0xb,%r8d,%r14d
  0x00007fb1a08790af:   xor    %r10d,%r15d
  0x00007fb1a08790b2:   xor    %r14d,%r13d
  0x00007fb1a08790b5:   rorx   $0x6,%r8d,%r14d
  0x00007fb1a08790bb:   and    %r8d,%r15d
  0x00007fb1a08790be:   xor    %r14d,%r13d
  0x00007fb1a08790c1:   rorx   $0xd,%eax,%r12d
  0x00007fb1a08790c7:   xor    %r10d,%r15d
  0x00007fb1a08790ca:   rorx   $0x16,%eax,%r14d
  0x00007fb1a08790d0:   mov    %eax,%ecx
  0x00007fb1a08790d2:   xor    %r12d,%r14d
  0x00007fb1a08790d5:   rorx   $0x2,%eax,%r12d
  0x00007fb1a08790db:   add    0x10(%rsp,%rdx,1),%r11d
  0x00007fb1a08790e0:   or     %edi,%ecx
  0x00007fb1a08790e2:   xor    %r12d,%r14d
  0x00007fb1a08790e5:   mov    %eax,%r12d
  0x00007fb1a08790e8:   and    %ebx,%ecx
  0x00007fb1a08790ea:   and    %edi,%r12d
  0x00007fb1a08790ed:   add    %r13d,%r15d
  0x00007fb1a08790f0:   add    %r11d,%esi
  0x00007fb1a08790f3:   or     %r12d,%ecx
  0x00007fb1a08790f6:   add    %r14d,%r11d
  0x00007fb1a08790f9:   add    %r15d,%esi
  0x00007fb1a08790fc:   add    %r15d,%r11d
  0x00007fb1a08790ff:   mov    %r8d,%r15d
  0x00007fb1a0879102:   rorx   $0x19,%esi,%r13d
  0x00007fb1a0879108:   rorx   $0xb,%esi,%r14d
  0x00007fb1a087910e:   xor    %r9d,%r15d
  0x00007fb1a0879111:   xor    %r14d,%r13d
  0x00007fb1a0879114:   rorx   $0x6,%esi,%r14d
  0x00007fb1a087911a:   and    %esi,%r15d
  0x00007fb1a087911d:   add    %ecx,%r11d
  0x00007fb1a0879120:   xor    %r14d,%r13d
  0x00007fb1a0879123:   rorx   $0xd,%r11d,%r12d
  0x00007fb1a0879129:   xor    %r9d,%r15d
  0x00007fb1a087912c:   rorx   $0x16,%r11d,%r14d
  0x00007fb1a0879132:   mov    %r11d,%ecx
  0x00007fb1a0879135:   xor    %r12d,%r14d
  0x00007fb1a0879138:   rorx   $0x2,%r11d,%r12d
  0x00007fb1a087913e:   add    0x14(%rsp,%rdx,1),%r10d
  0x00007fb1a0879143:   or     %ebx,%ecx
  0x00007fb1a0879145:   xor    %r12d,%r14d
  0x00007fb1a0879148:   mov    %r11d,%r12d
  0x00007fb1a087914b:   and    %eax,%ecx
  0x00007fb1a087914d:   and    %ebx,%r12d
  0x00007fb1a0879150:   add    %r13d,%r15d
  0x00007fb1a0879153:   add    %r10d,%edi
  0x00007fb1a0879156:   or     %r12d,%ecx
  0x00007fb1a0879159:   add    %r14d,%r10d
  0x00007fb1a087915c:   add    %r15d,%edi
  0x00007fb1a087915f:   add    %r15d,%r10d
  0x00007fb1a0879162:   mov    %esi,%r15d
  0x00007fb1a0879165:   rorx   $0x19,%edi,%r13d
  0x00007fb1a087916b:   rorx   $0xb,%edi,%r14d
  0x00007fb1a0879171:   xor    %r8d,%r15d
  0x00007fb1a0879174:   xor    %r14d,%r13d
  0x00007fb1a0879177:   rorx   $0x6,%edi,%r14d
  0x00007fb1a087917d:   and    %edi,%r15d
  0x00007fb1a0879180:   add    %ecx,%r10d
  0x00007fb1a0879183:   xor    %r14d,%r13d
  0x00007fb1a0879186:   rorx   $0xd,%r10d,%r12d
  0x00007fb1a087918c:   xor    %r8d,%r15d
  0x00007fb1a087918f:   rorx   $0x16,%r10d,%r14d
  0x00007fb1a0879195:   mov    %r10d,%ecx
  0x00007fb1a0879198:   xor    %r12d,%r14d
  0x00007fb1a087919b:   rorx   $0x2,%r10d,%r12d
  0x00007fb1a08791a1:   add    0x18(%rsp,%rdx,1),%r9d
  0x00007fb1a08791a6:   or     %eax,%ecx
  0x00007fb1a08791a8:   xor    %r12d,%r14d
  0x00007fb1a08791ab:   mov    %r10d,%r12d
  0x00007fb1a08791ae:   and    %r11d,%ecx
  0x00007fb1a08791b1:   and    %eax,%r12d
  0x00007fb1a08791b4:   add    %r13d,%r15d
  0x00007fb1a08791b7:   add    %r9d,%ebx
  0x00007fb1a08791ba:   or     %r12d,%ecx
  0x00007fb1a08791bd:   add    %r14d,%r9d
  0x00007fb1a08791c0:   add    %r15d,%ebx
  0x00007fb1a08791c3:   add    %r15d,%r9d
  0x00007fb1a08791c6:   mov    %edi,%r15d
  0x00007fb1a08791c9:   rorx   $0x19,%ebx,%r13d
  0x00007fb1a08791cf:   rorx   $0xb,%ebx,%r14d
  0x00007fb1a08791d5:   xor    %esi,%r15d
  0x00007fb1a08791d8:   xor    %r14d,%r13d
  0x00007fb1a08791db:   rorx   $0x6,%ebx,%r14d
  0x00007fb1a08791e1:   and    %ebx,%r15d
  0x00007fb1a08791e4:   add    %ecx,%r9d
  0x00007fb1a08791e7:   xor    %r14d,%r13d
  0x00007fb1a08791ea:   rorx   $0xd,%r9d,%r12d
  0x00007fb1a08791f0:   xor    %esi,%r15d
  0x00007fb1a08791f3:   rorx   $0x16,%r9d,%r14d
  0x00007fb1a08791f9:   mov    %r9d,%ecx
  0x00007fb1a08791fc:   xor    %r12d,%r14d
  0x00007fb1a08791ff:   rorx   $0x2,%r9d,%r12d
  0x00007fb1a0879205:   add    0x1c(%rsp,%rdx,1),%r8d
  0x00007fb1a087920a:   or     %r11d,%ecx
  0x00007fb1a087920d:   xor    %r12d,%r14d
  0x00007fb1a0879210:   mov    %r9d,%r12d
  0x00007fb1a0879213:   and    %r10d,%ecx
  0x00007fb1a0879216:   and    %r11d,%r12d
  0x00007fb1a0879219:   add    %r13d,%r15d
  0x00007fb1a087921c:   add    %r8d,%eax
  0x00007fb1a087921f:   or     %r12d,%ecx
  0x00007fb1a0879222:   add    %r14d,%r8d
  0x00007fb1a0879225:   add    %r15d,%eax
  0x00007fb1a0879228:   add    %r15d,%r8d
  0x00007fb1a087922b:   add    %ecx,%r8d
  0x00007fb1a087922e:   mov    %ebx,%r15d
  0x00007fb1a0879231:   rorx   $0x19,%eax,%r13d
  0x00007fb1a0879237:   rorx   $0xb,%eax,%r14d
  0x00007fb1a087923d:   xor    %edi,%r15d
  0x00007fb1a0879240:   xor    %r14d,%r13d
  0x00007fb1a0879243:   rorx   $0x6,%eax,%r14d
  0x00007fb1a0879249:   and    %eax,%r15d
  0x00007fb1a087924c:   xor    %r14d,%r13d
  0x00007fb1a087924f:   rorx   $0xd,%r8d,%r12d
  0x00007fb1a0879255:   xor    %edi,%r15d
  0x00007fb1a0879258:   rorx   $0x16,%r8d,%r14d
  0x00007fb1a087925e:   mov    %r8d,%ecx
  0x00007fb1a0879261:   xor    %r12d,%r14d
  0x00007fb1a0879264:   rorx   $0x2,%r8d,%r12d
  0x00007fb1a087926a:   add    0x30(%rsp,%rdx,1),%esi
  0x00007fb1a087926e:   or     %r10d,%ecx
  0x00007fb1a0879271:   xor    %r12d,%r14d
  0x00007fb1a0879274:   mov    %r8d,%r12d
  0x00007fb1a0879277:   and    %r9d,%ecx
  0x00007fb1a087927a:   and    %r10d,%r12d
  0x00007fb1a087927d:   add    %r13d,%r15d
  0x00007fb1a0879280:   add    %esi,%r11d
  0x00007fb1a0879283:   or     %r12d,%ecx
  0x00007fb1a0879286:   add    %r14d,%esi
  0x00007fb1a0879289:   add    %r15d,%r11d
  0x00007fb1a087928c:   add    %r15d,%esi
  0x00007fb1a087928f:   mov    %eax,%r15d
  0x00007fb1a0879292:   rorx   $0x19,%r11d,%r13d
  0x00007fb1a0879298:   rorx   $0xb,%r11d,%r14d
  0x00007fb1a087929e:   xor    %ebx,%r15d
  0x00007fb1a08792a1:   xor    %r14d,%r13d
  0x00007fb1a08792a4:   rorx   $0x6,%r11d,%r14d
  0x00007fb1a08792aa:   and    %r11d,%r15d
  0x00007fb1a08792ad:   add    %ecx,%esi
  0x00007fb1a08792af:   xor    %r14d,%r13d
  0x00007fb1a08792b2:   rorx   $0xd,%esi,%r12d
  0x00007fb1a08792b8:   xor    %ebx,%r15d
  0x00007fb1a08792bb:   rorx   $0x16,%esi,%r14d
  0x00007fb1a08792c1:   mov    %esi,%ecx
  0x00007fb1a08792c3:   xor    %r12d,%r14d
  0x00007fb1a08792c6:   rorx   $0x2,%esi,%r12d
  0x00007fb1a08792cc:   add    0x34(%rsp,%rdx,1),%edi
  0x00007fb1a08792d0:   or     %r9d,%ecx
  0x00007fb1a08792d3:   xor    %r12d,%r14d
  0x00007fb1a08792d6:   mov    %esi,%r12d
  0x00007fb1a08792d9:   and    %r8d,%ecx
  0x00007fb1a08792dc:   and    %r9d,%r12d
  0x00007fb1a08792df:   add    %r13d,%r15d
  0x00007fb1a08792e2:   add    %edi,%r10d
  0x00007fb1a08792e5:   or     %r12d,%ecx
  0x00007fb1a08792e8:   add    %r14d,%edi
  0x00007fb1a08792eb:   add    %r15d,%r10d
  0x00007fb1a08792ee:   add    %r15d,%edi
  0x00007fb1a08792f1:   mov    %r11d,%r15d
  0x00007fb1a08792f4:   rorx   $0x19,%r10d,%r13d
  0x00007fb1a08792fa:   rorx   $0xb,%r10d,%r14d
  0x00007fb1a0879300:   xor    %eax,%r15d
  0x00007fb1a0879303:   xor    %r14d,%r13d
  0x00007fb1a0879306:   rorx   $0x6,%r10d,%r14d
  0x00007fb1a087930c:   and    %r10d,%r15d
  0x00007fb1a087930f:   add    %ecx,%edi
  0x00007fb1a0879311:   xor    %r14d,%r13d
  0x00007fb1a0879314:   rorx   $0xd,%edi,%r12d
  0x00007fb1a087931a:   xor    %eax,%r15d
  0x00007fb1a087931d:   rorx   $0x16,%edi,%r14d
  0x00007fb1a0879323:   mov    %edi,%ecx
  0x00007fb1a0879325:   xor    %r12d,%r14d
  0x00007fb1a0879328:   rorx   $0x2,%edi,%r12d
  0x00007fb1a087932e:   add    0x38(%rsp,%rdx,1),%ebx
  0x00007fb1a0879332:   or     %r8d,%ecx
  0x00007fb1a0879335:   xor    %r12d,%r14d
  0x00007fb1a0879338:   mov    %edi,%r12d
  0x00007fb1a087933b:   and    %esi,%ecx
  0x00007fb1a087933d:   and    %r8d,%r12d
  0x00007fb1a0879340:   add    %r13d,%r15d
  0x00007fb1a0879343:   add    %ebx,%r9d
  0x00007fb1a0879346:   or     %r12d,%ecx
  0x00007fb1a0879349:   add    %r14d,%ebx
  0x00007fb1a087934c:   add    %r15d,%r9d
  0x00007fb1a087934f:   add    %r15d,%ebx
  0x00007fb1a0879352:   mov    %r10d,%r15d
  0x00007fb1a0879355:   rorx   $0x19,%r9d,%r13d
  0x00007fb1a087935b:   rorx   $0xb,%r9d,%r14d
  0x00007fb1a0879361:   xor    %r11d,%r15d
  0x00007fb1a0879364:   xor    %r14d,%r13d
  0x00007fb1a0879367:   rorx   $0x6,%r9d,%r14d
  0x00007fb1a087936d:   and    %r9d,%r15d
  0x00007fb1a0879370:   add    %ecx,%ebx
  0x00007fb1a0879372:   xor    %r14d,%r13d
  0x00007fb1a0879375:   rorx   $0xd,%ebx,%r12d
  0x00007fb1a087937b:   xor    %r11d,%r15d
  0x00007fb1a087937e:   rorx   $0x16,%ebx,%r14d
  0x00007fb1a0879384:   mov    %ebx,%ecx
  0x00007fb1a0879386:   xor    %r12d,%r14d
  0x00007fb1a0879389:   rorx   $0x2,%ebx,%r12d
  0x00007fb1a087938f:   add    0x3c(%rsp,%rdx,1),%eax
  0x00007fb1a0879393:   or     %esi,%ecx
  0x00007fb1a0879395:   xor    %r12d,%r14d
  0x00007fb1a0879398:   mov    %ebx,%r12d
  0x00007fb1a087939b:   and    %edi,%ecx
  0x00007fb1a087939d:   and    %esi,%r12d
  0x00007fb1a08793a0:   add    %r13d,%r15d
  0x00007fb1a08793a3:   add    %eax,%r8d
  0x00007fb1a08793a6:   or     %r12d,%ecx
  0x00007fb1a08793a9:   add    %r14d,%eax
  0x00007fb1a08793ac:   add    %r15d,%r8d
  0x00007fb1a08793af:   add    %r15d,%eax
  0x00007fb1a08793b2:   add    %ecx,%eax
  0x00007fb1a08793b4:   add    $0x40,%rdx
  0x00007fb1a08793b8:   cmp    $0x200,%rdx
  0x00007fb1a08793bf:   jb     Stub::sha256_implCompressMB+3392 0x00007fb1a08790a0
  0x00007fb1a08793c5:   mov    0x210(%rsp),%rdx
  0x00007fb1a08793cd:   mov    0x208(%rsp),%rcx
  0x00007fb1a08793d5:   add    $0x40,%rcx
  0x00007fb1a08793d9:   add    (%rdx),%eax
  0x00007fb1a08793db:   mov    %eax,(%rdx)
  0x00007fb1a08793dd:   add    0x4(%rdx),%ebx
  0x00007fb1a08793e0:   mov    %ebx,0x4(%rdx)
  0x00007fb1a08793e3:   add    0x8(%rdx),%edi
  0x00007fb1a08793e6:   mov    %edi,0x8(%rdx)
  0x00007fb1a08793e9:   add    0xc(%rdx),%esi
  0x00007fb1a08793ec:   mov    %esi,0xc(%rdx)
  0x00007fb1a08793ef:   add    0x10(%rdx),%r8d
  0x00007fb1a08793f3:   mov    %r8d,0x10(%rdx)
  0x00007fb1a08793f7:   add    0x14(%rdx),%r9d
  0x00007fb1a08793fb:   mov    %r9d,0x14(%rdx)
  0x00007fb1a08793ff:   add    0x18(%rdx),%r10d
  0x00007fb1a0879403:   mov    %r10d,0x18(%rdx)
  0x00007fb1a0879407:   add    0x1c(%rdx),%r11d
  0x00007fb1a087940b:   mov    %r11d,0x1c(%rdx)
  0x00007fb1a087940f:   cmp    0x200(%rsp),%rcx
  0x00007fb1a0879417:   jb     Stub::sha256_implCompressMB+172 0x00007fb1a087840c
  0x00007fb1a087941d:   ja     Stub::sha256_implCompressMB+4402 0x00007fb1a0879492
  0x00007fb1a087941f:   movabs $0x7fb1a4f454c0,%rbp
  0x00007fb1a0879429:   vmovdqu (%rcx),%xmm4
  0x00007fb1a087942d:   vmovdqu 0x10(%rcx),%xmm5
  0x00007fb1a0879432:   vmovdqu 0x20(%rcx),%xmm6
  0x00007fb1a0879437:   vmovdqu 0x30(%rcx),%xmm7
  0x00007fb1a087943c:   vpshufb %xmm13,%xmm4,%xmm4
  0x00007fb1a0879441:   vpshufb %xmm13,%xmm5,%xmm5
  0x00007fb1a0879446:   vpshufb %xmm13,%xmm6,%xmm6
  0x00007fb1a087944b:   vpshufb %xmm13,%xmm7,%xmm7
  0x00007fb1a0879450:   jmpq   Stub::sha256_implCompressMB+245 0x00007fb1a0878455
  0x00007fb1a0879455:   mov    (%rdx),%eax
  0x00007fb1a0879457:   mov    0x4(%rdx),%ebx
  0x00007fb1a087945a:   mov    0x8(%rdx),%edi
  0x00007fb1a087945d:   mov    0xc(%rdx),%esi
  0x00007fb1a0879460:   mov    0x10(%rdx),%r8d
  0x00007fb1a0879464:   mov    0x14(%rdx),%r9d
  0x00007fb1a0879468:   mov    0x1c(%rdx),%r11d
  0x00007fb1a087946c:   vmovdqu -0x22b4(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007fb1a0879474:   vmovdqu -0x229c(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007fb1a08771e0
  0x00007fb1a087947c:   vmovdqu -0x2284(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007fb1a0877200
  0x00007fb1a0879484:   mov    0x18(%rdx),%r10d
  0x00007fb1a0879488:   mov    %rdx,0x210(%rsp)
  0x00007fb1a0879490:   jmp    Stub::sha256_implCompressMB+4287 0x00007fb1a087941f
  0x00007fb1a0879492:   mov    0x218(%rsp),%rsp
  0x00007fb1a087949a:   pop    %r15
  0x00007fb1a087949c:   pop    %r14
  0x00007fb1a087949e:   pop    %r13
  0x00007fb1a08794a0:   pop    %r12
  0x00007fb1a08794a2:   pop    %rbp
  0x00007fb1a08794a3:   pop    %rbx
  0x00007fb1a08794a4:   pop    %rdx
  0x00007fb1a08794a5:   pop    %rcx
  0x00007fb1a08794a6:   mov    %rdx,%rax
  0x00007fb1a08794a9:   cmp    %rcx,%rax
  0x00007fb1a08794ac:   jae    Stub::sha256_implCompressMB+4436 0x00007fb1a08794b4
  0x00007fb1a08794ae:   add    $0x40,%rax
  0x00007fb1a08794b2:   jmp    Stub::sha256_implCompressMB+4425 0x00007fb1a08794a9
  0x00007fb1a08794b4:   add    $0x20,%rsp
  0x00007fb1a08794b8:   vzeroupper 
  0x00007fb1a08794bb:   leaveq 
  0x00007fb1a08794bc:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::pshuffle_byte_flip_mask_sha512 [0x00007fb1a08794e0, 0x00007fb1a0879520] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08794e0:   (bad)  
  0x00007fb1a08794e1:   (bad)  
  0x00007fb1a08794e2:   add    $0x1020304,%eax
  0x00007fb1a08794e7:   add    %cl,(%rdi)
  0x00007fb1a08794e9:   (bad)  
  0x00007fb1a08794ea:   or     $0x90a0b0c,%eax
  0x00007fb1a08794ef:   or     %dl,(%rdi)
  0x00007fb1a08794f1:   (bad)  
  0x00007fb1a08794f2:   adc    $0x11121314,%eax
  0x00007fb1a08794f7:   adc    %bl,(%rdi)
  0x00007fb1a08794f9:   (bad)  
  0x00007fb1a08794fa:   sbb    $0x191a1b1c,%eax
  0x00007fb1a08794ff:   sbb    %al,(%rax)
  0x00007fb1a0879501:   add    %al,(%rax)
  0x00007fb1a0879503:   add    %al,(%rax)
  0x00007fb1a0879505:   add    %al,(%rax)
  0x00007fb1a0879507:   add    %al,(%rax)
  0x00007fb1a0879509:   add    %al,(%rax)
  0x00007fb1a087950b:   add    %al,(%rax)
  0x00007fb1a087950d:   add    %al,(%rax)
  0x00007fb1a087950f:   add    %bh,%bh
  0x00007fb1a0879511:   (bad)  
  0x00007fb1a0879512:   (bad)  
  0x00007fb1a0879513:   (bad)  
  0x00007fb1a0879514:   (bad)  
  0x00007fb1a0879515:   (bad)  
  0x00007fb1a0879516:   (bad)  
  0x00007fb1a0879517:   (bad)  
  0x00007fb1a0879518:   (bad)  
  0x00007fb1a0879519:   (bad)  
  0x00007fb1a087951a:   (bad)  
  0x00007fb1a087951b:   (bad)  
  0x00007fb1a087951c:   (bad)  
  0x00007fb1a087951d:   (bad)  
  0x00007fb1a087951e:   (bad)  
  0x00007fb1a087951f:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha512_implCompress [0x00007fb1a0879520, 0x00007fb1a087a335] (3605 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0879520:   push   %rbp
  0x00007fb1a0879521:   mov    %rsp,%rbp
  0x00007fb1a0879524:   push   %rdx
  0x00007fb1a0879525:   push   %rcx
  0x00007fb1a0879526:   mov    %rsp,%rax
  0x00007fb1a0879529:   sub    $0x70,%rsp
  0x00007fb1a087952d:   and    $0xffffffffffffffe0,%rsp
  0x00007fb1a0879531:   mov    %rax,0x38(%rsp)
  0x00007fb1a0879536:   mov    %rbp,0x40(%rsp)
  0x00007fb1a087953b:   mov    %rbx,0x48(%rsp)
  0x00007fb1a0879540:   mov    %r12,0x50(%rsp)
  0x00007fb1a0879545:   mov    %r13,0x58(%rsp)
  0x00007fb1a087954a:   mov    %r14,0x60(%rsp)
  0x00007fb1a087954f:   mov    %r15,0x68(%rsp)
  0x00007fb1a0879554:   vpblendd $0xf0,%xmm1,%xmm0,%xmm0
  0x00007fb1a087955a:   vpblendd $0xf0,%ymm1,%ymm0,%ymm0
  0x00007fb1a0879560:   xor    %rdx,%rdx
  0x00007fb1a0879563:   add    $0x80,%rdx
  0x00007fb1a087956a:   add    %rdi,%rdx
  0x00007fb1a087956d:   mov    %rdx,0x30(%rsp)
  0x00007fb1a0879572:   mov    (%rsi),%rax
  0x00007fb1a0879575:   mov    0x8(%rsi),%rbx
  0x00007fb1a0879579:   mov    0x10(%rsi),%rcx
  0x00007fb1a087957d:   mov    0x18(%rsi),%r8
  0x00007fb1a0879581:   mov    0x20(%rsi),%rdx
  0x00007fb1a0879585:   mov    0x28(%rsi),%r9
  0x00007fb1a0879589:   mov    0x38(%rsi),%r11
  0x00007fb1a087958d:   vmovdqu -0xb5(%rip),%ymm9        # Stub::pshuffle_byte_flip_mask_sha512
  0x00007fb1a0879595:   vmovdqu -0x9d(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask_sha512+32 0x00007fb1a0879500
  0x00007fb1a087959d:   mov    0x30(%rsi),%r10
  0x00007fb1a08795a1:   movabs $0x7fb1a4ef0140,%rbp
  0x00007fb1a08795ab:   vmovdqu (%rdi),%ymm4
  0x00007fb1a08795af:   vpshufb %ymm9,%ymm4,%ymm4
  0x00007fb1a08795b4:   vmovdqu 0x20(%rdi),%ymm5
  0x00007fb1a08795b9:   vpshufb %ymm9,%ymm5,%ymm5
  0x00007fb1a08795be:   vmovdqu 0x40(%rdi),%ymm6
  0x00007fb1a08795c3:   vpshufb %ymm9,%ymm6,%ymm6
  0x00007fb1a08795c8:   vmovdqu 0x60(%rdi),%ymm7
  0x00007fb1a08795cd:   vpshufb %ymm9,%ymm7,%ymm7
  0x00007fb1a08795d2:   mov    %rdi,0x28(%rsp)
  0x00007fb1a08795d7:   movq   $0x4,0x20(%rsp)
  0x00007fb1a08795e0:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007fb1a08795e5:   vmovdqu %ymm0,(%rsp)
  0x00007fb1a08795ea:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm0
  0x00007fb1a08795f0:   vpalignr $0x8,%ymm6,%ymm0,%ymm0
  0x00007fb1a08795f6:   vpaddq %ymm4,%ymm0,%ymm0
  0x00007fb1a08795fa:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm1
  0x00007fb1a0879600:   vpalignr $0x8,%ymm4,%ymm1,%ymm1
  0x00007fb1a0879606:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fb1a087960b:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fb1a0879610:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a0879614:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fb1a0879619:   mov    %rax,%rdi
  0x00007fb1a087961c:   rorx   $0x29,%rdx,%r13
  0x00007fb1a0879622:   rorx   $0x12,%rdx,%r14
  0x00007fb1a0879628:   add    (%rsp),%r11
  0x00007fb1a087962c:   or     %rcx,%rdi
  0x00007fb1a087962f:   mov    %r9,%r15
  0x00007fb1a0879632:   xor    %r10,%r15
  0x00007fb1a0879635:   rorx   $0x22,%rax,%r12
  0x00007fb1a087963b:   xor    %r14,%r13
  0x00007fb1a087963e:   rorx   $0xe,%rdx,%r14
  0x00007fb1a0879644:   and    %rdx,%r15
  0x00007fb1a0879647:   add    %r11,%r8
  0x00007fb1a087964a:   and    %rbx,%rdi
  0x00007fb1a087964d:   xor    %r14,%r13
  0x00007fb1a0879650:   rorx   $0x27,%rax,%r14
  0x00007fb1a0879656:   xor    %r12,%r14
  0x00007fb1a0879659:   rorx   $0x1c,%rax,%r12
  0x00007fb1a087965f:   xor    %r10,%r15
  0x00007fb1a0879662:   xor    %r12,%r14
  0x00007fb1a0879665:   mov    %rax,%r12
  0x00007fb1a0879668:   and    %rcx,%r12
  0x00007fb1a087966b:   add    %r13,%r15
  0x00007fb1a087966e:   or     %r12,%rdi
  0x00007fb1a0879671:   add    %r14,%r11
  0x00007fb1a0879674:   add    %r15,%r8
  0x00007fb1a0879677:   add    %r15,%r11
  0x00007fb1a087967a:   add    %rdi,%r11
  0x00007fb1a087967d:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fb1a0879682:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fb1a0879687:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fb1a087968b:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fb1a0879690:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fb1a0879694:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fb1a0879698:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm4
  0x00007fb1a087969e:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fb1a08796a3:   vperm2f128 $0x11,%ymm7,%ymm7,%ymm2
  0x00007fb1a08796a9:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fb1a08796ae:   mov    %r11,%rdi
  0x00007fb1a08796b1:   rorx   $0x29,%r8,%r13
  0x00007fb1a08796b7:   rorx   $0x12,%r8,%r14
  0x00007fb1a08796bd:   add    0x8(%rsp),%r10
  0x00007fb1a08796c2:   or     %rbx,%rdi
  0x00007fb1a08796c5:   mov    %rdx,%r15
  0x00007fb1a08796c8:   xor    %r9,%r15
  0x00007fb1a08796cb:   rorx   $0x22,%r11,%r12
  0x00007fb1a08796d1:   xor    %r14,%r13
  0x00007fb1a08796d4:   rorx   $0xe,%r8,%r14
  0x00007fb1a08796da:   and    %r8,%r15
  0x00007fb1a08796dd:   add    %r10,%rcx
  0x00007fb1a08796e0:   and    %rax,%rdi
  0x00007fb1a08796e3:   xor    %r14,%r13
  0x00007fb1a08796e6:   rorx   $0x27,%r11,%r14
  0x00007fb1a08796ec:   xor    %r12,%r14
  0x00007fb1a08796ef:   rorx   $0x1c,%r11,%r12
  0x00007fb1a08796f5:   xor    %r9,%r15
  0x00007fb1a08796f8:   xor    %r12,%r14
  0x00007fb1a08796fb:   mov    %r11,%r12
  0x00007fb1a08796fe:   and    %rbx,%r12
  0x00007fb1a0879701:   add    %r13,%r15
  0x00007fb1a0879704:   or     %r12,%rdi
  0x00007fb1a0879707:   add    %r14,%r10
  0x00007fb1a087970a:   add    %r15,%rcx
  0x00007fb1a087970d:   add    %r15,%r10
  0x00007fb1a0879710:   add    %rdi,%r10
  0x00007fb1a0879713:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0879718:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fb1a087971d:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a0879721:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879725:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fb1a087972a:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fb1a087972f:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a0879733:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879737:   vpaddq %ymm8,%ymm4,%ymm4
  0x00007fb1a087973c:   vpsrlq $0x6,%ymm4,%ymm8
  0x00007fb1a0879741:   mov    %r10,%rdi
  0x00007fb1a0879744:   rorx   $0x29,%rcx,%r13
  0x00007fb1a087974a:   rorx   $0x12,%rcx,%r14
  0x00007fb1a0879750:   add    0x10(%rsp),%r9
  0x00007fb1a0879755:   or     %rax,%rdi
  0x00007fb1a0879758:   mov    %r8,%r15
  0x00007fb1a087975b:   xor    %rdx,%r15
  0x00007fb1a087975e:   rorx   $0x22,%r10,%r12
  0x00007fb1a0879764:   xor    %r14,%r13
  0x00007fb1a0879767:   rorx   $0xe,%rcx,%r14
  0x00007fb1a087976d:   and    %rcx,%r15
  0x00007fb1a0879770:   add    %r9,%rbx
  0x00007fb1a0879773:   and    %r11,%rdi
  0x00007fb1a0879776:   xor    %r14,%r13
  0x00007fb1a0879779:   rorx   $0x27,%r10,%r14
  0x00007fb1a087977f:   xor    %r12,%r14
  0x00007fb1a0879782:   rorx   $0x1c,%r10,%r12
  0x00007fb1a0879788:   xor    %rdx,%r15
  0x00007fb1a087978b:   xor    %r12,%r14
  0x00007fb1a087978e:   mov    %r10,%r12
  0x00007fb1a0879791:   and    %rax,%r12
  0x00007fb1a0879794:   add    %r13,%r15
  0x00007fb1a0879797:   or     %r12,%rdi
  0x00007fb1a087979a:   add    %r14,%r9
  0x00007fb1a087979d:   add    %r15,%rbx
  0x00007fb1a08797a0:   add    %r15,%r9
  0x00007fb1a08797a3:   add    %rdi,%r9
  0x00007fb1a08797a6:   vpsrlq $0x13,%ymm4,%ymm3
  0x00007fb1a08797ab:   vpsllq $0x2d,%ymm4,%ymm1
  0x00007fb1a08797b0:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a08797b4:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a08797b8:   vpsrlq $0x3d,%ymm4,%ymm3
  0x00007fb1a08797bd:   vpsllq $0x3,%ymm4,%ymm1
  0x00007fb1a08797c2:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a08797c6:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a08797ca:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fb1a08797cf:   vpblendd $0xf0,%ymm2,%ymm4,%ymm4
  0x00007fb1a08797d5:   mov    %r9,%rdi
  0x00007fb1a08797d8:   rorx   $0x29,%rbx,%r13
  0x00007fb1a08797de:   rorx   $0x12,%rbx,%r14
  0x00007fb1a08797e4:   add    0x18(%rsp),%rdx
  0x00007fb1a08797e9:   or     %r11,%rdi
  0x00007fb1a08797ec:   mov    %rcx,%r15
  0x00007fb1a08797ef:   xor    %r8,%r15
  0x00007fb1a08797f2:   rorx   $0x22,%r9,%r12
  0x00007fb1a08797f8:   xor    %r14,%r13
  0x00007fb1a08797fb:   rorx   $0xe,%rbx,%r14
  0x00007fb1a0879801:   and    %rbx,%r15
  0x00007fb1a0879804:   add    %rdx,%rax
  0x00007fb1a0879807:   and    %r10,%rdi
  0x00007fb1a087980a:   xor    %r14,%r13
  0x00007fb1a087980d:   rorx   $0x27,%r9,%r14
  0x00007fb1a0879813:   xor    %r12,%r14
  0x00007fb1a0879816:   rorx   $0x1c,%r9,%r12
  0x00007fb1a087981c:   xor    %r8,%r15
  0x00007fb1a087981f:   xor    %r12,%r14
  0x00007fb1a0879822:   mov    %r9,%r12
  0x00007fb1a0879825:   and    %r11,%r12
  0x00007fb1a0879828:   add    %r13,%r15
  0x00007fb1a087982b:   or     %r12,%rdi
  0x00007fb1a087982e:   add    %r14,%rdx
  0x00007fb1a0879831:   add    %r15,%rax
  0x00007fb1a0879834:   add    %r15,%rdx
  0x00007fb1a0879837:   add    %rdi,%rdx
  0x00007fb1a087983a:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007fb1a087983f:   vmovdqu %ymm0,(%rsp)
  0x00007fb1a0879844:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm0
  0x00007fb1a087984a:   vpalignr $0x8,%ymm7,%ymm0,%ymm0
  0x00007fb1a0879850:   vpaddq %ymm5,%ymm0,%ymm0
  0x00007fb1a0879854:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm1
  0x00007fb1a087985a:   vpalignr $0x8,%ymm5,%ymm1,%ymm1
  0x00007fb1a0879860:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fb1a0879865:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fb1a087986a:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a087986e:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fb1a0879873:   mov    %rdx,%rdi
  0x00007fb1a0879876:   rorx   $0x29,%rax,%r13
  0x00007fb1a087987c:   rorx   $0x12,%rax,%r14
  0x00007fb1a0879882:   add    (%rsp),%r8
  0x00007fb1a0879886:   or     %r10,%rdi
  0x00007fb1a0879889:   mov    %rbx,%r15
  0x00007fb1a087988c:   xor    %rcx,%r15
  0x00007fb1a087988f:   rorx   $0x22,%rdx,%r12
  0x00007fb1a0879895:   xor    %r14,%r13
  0x00007fb1a0879898:   rorx   $0xe,%rax,%r14
  0x00007fb1a087989e:   and    %rax,%r15
  0x00007fb1a08798a1:   add    %r8,%r11
  0x00007fb1a08798a4:   and    %r9,%rdi
  0x00007fb1a08798a7:   xor    %r14,%r13
  0x00007fb1a08798aa:   rorx   $0x27,%rdx,%r14
  0x00007fb1a08798b0:   xor    %r12,%r14
  0x00007fb1a08798b3:   rorx   $0x1c,%rdx,%r12
  0x00007fb1a08798b9:   xor    %rcx,%r15
  0x00007fb1a08798bc:   xor    %r12,%r14
  0x00007fb1a08798bf:   mov    %rdx,%r12
  0x00007fb1a08798c2:   and    %r10,%r12
  0x00007fb1a08798c5:   add    %r13,%r15
  0x00007fb1a08798c8:   or     %r12,%rdi
  0x00007fb1a08798cb:   add    %r14,%r8
  0x00007fb1a08798ce:   add    %r15,%r11
  0x00007fb1a08798d1:   add    %r15,%r8
  0x00007fb1a08798d4:   add    %rdi,%r8
  0x00007fb1a08798d7:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fb1a08798dc:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fb1a08798e1:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fb1a08798e5:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fb1a08798ea:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fb1a08798ee:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fb1a08798f2:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm5
  0x00007fb1a08798f8:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fb1a08798fd:   vperm2f128 $0x11,%ymm4,%ymm4,%ymm2
  0x00007fb1a0879903:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fb1a0879908:   mov    %r8,%rdi
  0x00007fb1a087990b:   rorx   $0x29,%r11,%r13
  0x00007fb1a0879911:   rorx   $0x12,%r11,%r14
  0x00007fb1a0879917:   add    0x8(%rsp),%rcx
  0x00007fb1a087991c:   or     %r9,%rdi
  0x00007fb1a087991f:   mov    %rax,%r15
  0x00007fb1a0879922:   xor    %rbx,%r15
  0x00007fb1a0879925:   rorx   $0x22,%r8,%r12
  0x00007fb1a087992b:   xor    %r14,%r13
  0x00007fb1a087992e:   rorx   $0xe,%r11,%r14
  0x00007fb1a0879934:   and    %r11,%r15
  0x00007fb1a0879937:   add    %rcx,%r10
  0x00007fb1a087993a:   and    %rdx,%rdi
  0x00007fb1a087993d:   xor    %r14,%r13
  0x00007fb1a0879940:   rorx   $0x27,%r8,%r14
  0x00007fb1a0879946:   xor    %r12,%r14
  0x00007fb1a0879949:   rorx   $0x1c,%r8,%r12
  0x00007fb1a087994f:   xor    %rbx,%r15
  0x00007fb1a0879952:   xor    %r12,%r14
  0x00007fb1a0879955:   mov    %r8,%r12
  0x00007fb1a0879958:   and    %r9,%r12
  0x00007fb1a087995b:   add    %r13,%r15
  0x00007fb1a087995e:   or     %r12,%rdi
  0x00007fb1a0879961:   add    %r14,%rcx
  0x00007fb1a0879964:   add    %r15,%r10
  0x00007fb1a0879967:   add    %r15,%rcx
  0x00007fb1a087996a:   add    %rdi,%rcx
  0x00007fb1a087996d:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0879972:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fb1a0879977:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087997b:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087997f:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fb1a0879984:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fb1a0879989:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087998d:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879991:   vpaddq %ymm8,%ymm5,%ymm5
  0x00007fb1a0879996:   vpsrlq $0x6,%ymm5,%ymm8
  0x00007fb1a087999b:   mov    %rcx,%rdi
  0x00007fb1a087999e:   rorx   $0x29,%r10,%r13
  0x00007fb1a08799a4:   rorx   $0x12,%r10,%r14
  0x00007fb1a08799aa:   add    0x10(%rsp),%rbx
  0x00007fb1a08799af:   or     %rdx,%rdi
  0x00007fb1a08799b2:   mov    %r11,%r15
  0x00007fb1a08799b5:   xor    %rax,%r15
  0x00007fb1a08799b8:   rorx   $0x22,%rcx,%r12
  0x00007fb1a08799be:   xor    %r14,%r13
  0x00007fb1a08799c1:   rorx   $0xe,%r10,%r14
  0x00007fb1a08799c7:   and    %r10,%r15
  0x00007fb1a08799ca:   add    %rbx,%r9
  0x00007fb1a08799cd:   and    %r8,%rdi
  0x00007fb1a08799d0:   xor    %r14,%r13
  0x00007fb1a08799d3:   rorx   $0x27,%rcx,%r14
  0x00007fb1a08799d9:   xor    %r12,%r14
  0x00007fb1a08799dc:   rorx   $0x1c,%rcx,%r12
  0x00007fb1a08799e2:   xor    %rax,%r15
  0x00007fb1a08799e5:   xor    %r12,%r14
  0x00007fb1a08799e8:   mov    %rcx,%r12
  0x00007fb1a08799eb:   and    %rdx,%r12
  0x00007fb1a08799ee:   add    %r13,%r15
  0x00007fb1a08799f1:   or     %r12,%rdi
  0x00007fb1a08799f4:   add    %r14,%rbx
  0x00007fb1a08799f7:   add    %r15,%r9
  0x00007fb1a08799fa:   add    %r15,%rbx
  0x00007fb1a08799fd:   add    %rdi,%rbx
  0x00007fb1a0879a00:   vpsrlq $0x13,%ymm5,%ymm3
  0x00007fb1a0879a05:   vpsllq $0x2d,%ymm5,%ymm1
  0x00007fb1a0879a0a:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a0879a0e:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879a12:   vpsrlq $0x3d,%ymm5,%ymm3
  0x00007fb1a0879a17:   vpsllq $0x3,%ymm5,%ymm1
  0x00007fb1a0879a1c:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a0879a20:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879a24:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fb1a0879a29:   vpblendd $0xf0,%ymm2,%ymm5,%ymm5
  0x00007fb1a0879a2f:   mov    %rbx,%rdi
  0x00007fb1a0879a32:   rorx   $0x29,%r9,%r13
  0x00007fb1a0879a38:   rorx   $0x12,%r9,%r14
  0x00007fb1a0879a3e:   add    0x18(%rsp),%rax
  0x00007fb1a0879a43:   or     %r8,%rdi
  0x00007fb1a0879a46:   mov    %r10,%r15
  0x00007fb1a0879a49:   xor    %r11,%r15
  0x00007fb1a0879a4c:   rorx   $0x22,%rbx,%r12
  0x00007fb1a0879a52:   xor    %r14,%r13
  0x00007fb1a0879a55:   rorx   $0xe,%r9,%r14
  0x00007fb1a0879a5b:   and    %r9,%r15
  0x00007fb1a0879a5e:   add    %rax,%rdx
  0x00007fb1a0879a61:   and    %rcx,%rdi
  0x00007fb1a0879a64:   xor    %r14,%r13
  0x00007fb1a0879a67:   rorx   $0x27,%rbx,%r14
  0x00007fb1a0879a6d:   xor    %r12,%r14
  0x00007fb1a0879a70:   rorx   $0x1c,%rbx,%r12
  0x00007fb1a0879a76:   xor    %r11,%r15
  0x00007fb1a0879a79:   xor    %r12,%r14
  0x00007fb1a0879a7c:   mov    %rbx,%r12
  0x00007fb1a0879a7f:   and    %r8,%r12
  0x00007fb1a0879a82:   add    %r13,%r15
  0x00007fb1a0879a85:   or     %r12,%rdi
  0x00007fb1a0879a88:   add    %r14,%rax
  0x00007fb1a0879a8b:   add    %r15,%rdx
  0x00007fb1a0879a8e:   add    %r15,%rax
  0x00007fb1a0879a91:   add    %rdi,%rax
  0x00007fb1a0879a94:   vpaddq 0x40(%rbp),%ymm6,%ymm0
  0x00007fb1a0879a99:   vmovdqu %ymm0,(%rsp)
  0x00007fb1a0879a9e:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm0
  0x00007fb1a0879aa4:   vpalignr $0x8,%ymm4,%ymm0,%ymm0
  0x00007fb1a0879aaa:   vpaddq %ymm6,%ymm0,%ymm0
  0x00007fb1a0879aae:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm1
  0x00007fb1a0879ab4:   vpalignr $0x8,%ymm6,%ymm1,%ymm1
  0x00007fb1a0879aba:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fb1a0879abf:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fb1a0879ac4:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a0879ac8:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fb1a0879acd:   mov    %rax,%rdi
  0x00007fb1a0879ad0:   rorx   $0x29,%rdx,%r13
  0x00007fb1a0879ad6:   rorx   $0x12,%rdx,%r14
  0x00007fb1a0879adc:   add    (%rsp),%r11
  0x00007fb1a0879ae0:   or     %rcx,%rdi
  0x00007fb1a0879ae3:   mov    %r9,%r15
  0x00007fb1a0879ae6:   xor    %r10,%r15
  0x00007fb1a0879ae9:   rorx   $0x22,%rax,%r12
  0x00007fb1a0879aef:   xor    %r14,%r13
  0x00007fb1a0879af2:   rorx   $0xe,%rdx,%r14
  0x00007fb1a0879af8:   and    %rdx,%r15
  0x00007fb1a0879afb:   add    %r11,%r8
  0x00007fb1a0879afe:   and    %rbx,%rdi
  0x00007fb1a0879b01:   xor    %r14,%r13
  0x00007fb1a0879b04:   rorx   $0x27,%rax,%r14
  0x00007fb1a0879b0a:   xor    %r12,%r14
  0x00007fb1a0879b0d:   rorx   $0x1c,%rax,%r12
  0x00007fb1a0879b13:   xor    %r10,%r15
  0x00007fb1a0879b16:   xor    %r12,%r14
  0x00007fb1a0879b19:   mov    %rax,%r12
  0x00007fb1a0879b1c:   and    %rcx,%r12
  0x00007fb1a0879b1f:   add    %r13,%r15
  0x00007fb1a0879b22:   or     %r12,%rdi
  0x00007fb1a0879b25:   add    %r14,%r11
  0x00007fb1a0879b28:   add    %r15,%r8
  0x00007fb1a0879b2b:   add    %r15,%r11
  0x00007fb1a0879b2e:   add    %rdi,%r11
  0x00007fb1a0879b31:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fb1a0879b36:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fb1a0879b3b:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fb1a0879b3f:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fb1a0879b44:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fb1a0879b48:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fb1a0879b4c:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm6
  0x00007fb1a0879b52:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fb1a0879b57:   vperm2f128 $0x11,%ymm5,%ymm5,%ymm2
  0x00007fb1a0879b5d:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fb1a0879b62:   mov    %r11,%rdi
  0x00007fb1a0879b65:   rorx   $0x29,%r8,%r13
  0x00007fb1a0879b6b:   rorx   $0x12,%r8,%r14
  0x00007fb1a0879b71:   add    0x8(%rsp),%r10
  0x00007fb1a0879b76:   or     %rbx,%rdi
  0x00007fb1a0879b79:   mov    %rdx,%r15
  0x00007fb1a0879b7c:   xor    %r9,%r15
  0x00007fb1a0879b7f:   rorx   $0x22,%r11,%r12
  0x00007fb1a0879b85:   xor    %r14,%r13
  0x00007fb1a0879b88:   rorx   $0xe,%r8,%r14
  0x00007fb1a0879b8e:   and    %r8,%r15
  0x00007fb1a0879b91:   add    %r10,%rcx
  0x00007fb1a0879b94:   and    %rax,%rdi
  0x00007fb1a0879b97:   xor    %r14,%r13
  0x00007fb1a0879b9a:   rorx   $0x27,%r11,%r14
  0x00007fb1a0879ba0:   xor    %r12,%r14
  0x00007fb1a0879ba3:   rorx   $0x1c,%r11,%r12
  0x00007fb1a0879ba9:   xor    %r9,%r15
  0x00007fb1a0879bac:   xor    %r12,%r14
  0x00007fb1a0879baf:   mov    %r11,%r12
  0x00007fb1a0879bb2:   and    %rbx,%r12
  0x00007fb1a0879bb5:   add    %r13,%r15
  0x00007fb1a0879bb8:   or     %r12,%rdi
  0x00007fb1a0879bbb:   add    %r14,%r10
  0x00007fb1a0879bbe:   add    %r15,%rcx
  0x00007fb1a0879bc1:   add    %r15,%r10
  0x00007fb1a0879bc4:   add    %rdi,%r10
  0x00007fb1a0879bc7:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0879bcc:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fb1a0879bd1:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a0879bd5:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879bd9:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fb1a0879bde:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fb1a0879be3:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a0879be7:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879beb:   vpaddq %ymm8,%ymm6,%ymm6
  0x00007fb1a0879bf0:   vpsrlq $0x6,%ymm6,%ymm8
  0x00007fb1a0879bf5:   mov    %r10,%rdi
  0x00007fb1a0879bf8:   rorx   $0x29,%rcx,%r13
  0x00007fb1a0879bfe:   rorx   $0x12,%rcx,%r14
  0x00007fb1a0879c04:   add    0x10(%rsp),%r9
  0x00007fb1a0879c09:   or     %rax,%rdi
  0x00007fb1a0879c0c:   mov    %r8,%r15
  0x00007fb1a0879c0f:   xor    %rdx,%r15
  0x00007fb1a0879c12:   rorx   $0x22,%r10,%r12
  0x00007fb1a0879c18:   xor    %r14,%r13
  0x00007fb1a0879c1b:   rorx   $0xe,%rcx,%r14
  0x00007fb1a0879c21:   and    %rcx,%r15
  0x00007fb1a0879c24:   add    %r9,%rbx
  0x00007fb1a0879c27:   and    %r11,%rdi
  0x00007fb1a0879c2a:   xor    %r14,%r13
  0x00007fb1a0879c2d:   rorx   $0x27,%r10,%r14
  0x00007fb1a0879c33:   xor    %r12,%r14
  0x00007fb1a0879c36:   rorx   $0x1c,%r10,%r12
  0x00007fb1a0879c3c:   xor    %rdx,%r15
  0x00007fb1a0879c3f:   xor    %r12,%r14
  0x00007fb1a0879c42:   mov    %r10,%r12
  0x00007fb1a0879c45:   and    %rax,%r12
  0x00007fb1a0879c48:   add    %r13,%r15
  0x00007fb1a0879c4b:   or     %r12,%rdi
  0x00007fb1a0879c4e:   add    %r14,%r9
  0x00007fb1a0879c51:   add    %r15,%rbx
  0x00007fb1a0879c54:   add    %r15,%r9
  0x00007fb1a0879c57:   add    %rdi,%r9
  0x00007fb1a0879c5a:   vpsrlq $0x13,%ymm6,%ymm3
  0x00007fb1a0879c5f:   vpsllq $0x2d,%ymm6,%ymm1
  0x00007fb1a0879c64:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a0879c68:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879c6c:   vpsrlq $0x3d,%ymm6,%ymm3
  0x00007fb1a0879c71:   vpsllq $0x3,%ymm6,%ymm1
  0x00007fb1a0879c76:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a0879c7a:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879c7e:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fb1a0879c83:   vpblendd $0xf0,%ymm2,%ymm6,%ymm6
  0x00007fb1a0879c89:   mov    %r9,%rdi
  0x00007fb1a0879c8c:   rorx   $0x29,%rbx,%r13
  0x00007fb1a0879c92:   rorx   $0x12,%rbx,%r14
  0x00007fb1a0879c98:   add    0x18(%rsp),%rdx
  0x00007fb1a0879c9d:   or     %r11,%rdi
  0x00007fb1a0879ca0:   mov    %rcx,%r15
  0x00007fb1a0879ca3:   xor    %r8,%r15
  0x00007fb1a0879ca6:   rorx   $0x22,%r9,%r12
  0x00007fb1a0879cac:   xor    %r14,%r13
  0x00007fb1a0879caf:   rorx   $0xe,%rbx,%r14
  0x00007fb1a0879cb5:   and    %rbx,%r15
  0x00007fb1a0879cb8:   add    %rdx,%rax
  0x00007fb1a0879cbb:   and    %r10,%rdi
  0x00007fb1a0879cbe:   xor    %r14,%r13
  0x00007fb1a0879cc1:   rorx   $0x27,%r9,%r14
  0x00007fb1a0879cc7:   xor    %r12,%r14
  0x00007fb1a0879cca:   rorx   $0x1c,%r9,%r12
  0x00007fb1a0879cd0:   xor    %r8,%r15
  0x00007fb1a0879cd3:   xor    %r12,%r14
  0x00007fb1a0879cd6:   mov    %r9,%r12
  0x00007fb1a0879cd9:   and    %r11,%r12
  0x00007fb1a0879cdc:   add    %r13,%r15
  0x00007fb1a0879cdf:   or     %r12,%rdi
  0x00007fb1a0879ce2:   add    %r14,%rdx
  0x00007fb1a0879ce5:   add    %r15,%rax
  0x00007fb1a0879ce8:   add    %r15,%rdx
  0x00007fb1a0879ceb:   add    %rdi,%rdx
  0x00007fb1a0879cee:   vpaddq 0x60(%rbp),%ymm7,%ymm0
  0x00007fb1a0879cf3:   vmovdqu %ymm0,(%rsp)
  0x00007fb1a0879cf8:   add    $0x80,%rbp
  0x00007fb1a0879cff:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm0
  0x00007fb1a0879d05:   vpalignr $0x8,%ymm5,%ymm0,%ymm0
  0x00007fb1a0879d0b:   vpaddq %ymm7,%ymm0,%ymm0
  0x00007fb1a0879d0f:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm1
  0x00007fb1a0879d15:   vpalignr $0x8,%ymm7,%ymm1,%ymm1
  0x00007fb1a0879d1b:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fb1a0879d20:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fb1a0879d25:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a0879d29:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fb1a0879d2e:   mov    %rdx,%rdi
  0x00007fb1a0879d31:   rorx   $0x29,%rax,%r13
  0x00007fb1a0879d37:   rorx   $0x12,%rax,%r14
  0x00007fb1a0879d3d:   add    (%rsp),%r8
  0x00007fb1a0879d41:   or     %r10,%rdi
  0x00007fb1a0879d44:   mov    %rbx,%r15
  0x00007fb1a0879d47:   xor    %rcx,%r15
  0x00007fb1a0879d4a:   rorx   $0x22,%rdx,%r12
  0x00007fb1a0879d50:   xor    %r14,%r13
  0x00007fb1a0879d53:   rorx   $0xe,%rax,%r14
  0x00007fb1a0879d59:   and    %rax,%r15
  0x00007fb1a0879d5c:   add    %r8,%r11
  0x00007fb1a0879d5f:   and    %r9,%rdi
  0x00007fb1a0879d62:   xor    %r14,%r13
  0x00007fb1a0879d65:   rorx   $0x27,%rdx,%r14
  0x00007fb1a0879d6b:   xor    %r12,%r14
  0x00007fb1a0879d6e:   rorx   $0x1c,%rdx,%r12
  0x00007fb1a0879d74:   xor    %rcx,%r15
  0x00007fb1a0879d77:   xor    %r12,%r14
  0x00007fb1a0879d7a:   mov    %rdx,%r12
  0x00007fb1a0879d7d:   and    %r10,%r12
  0x00007fb1a0879d80:   add    %r13,%r15
  0x00007fb1a0879d83:   or     %r12,%rdi
  0x00007fb1a0879d86:   add    %r14,%r8
  0x00007fb1a0879d89:   add    %r15,%r11
  0x00007fb1a0879d8c:   add    %r15,%r8
  0x00007fb1a0879d8f:   add    %rdi,%r8
  0x00007fb1a0879d92:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fb1a0879d97:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fb1a0879d9c:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fb1a0879da0:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fb1a0879da5:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fb1a0879da9:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fb1a0879dad:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm7
  0x00007fb1a0879db3:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fb1a0879db8:   vperm2f128 $0x11,%ymm6,%ymm6,%ymm2
  0x00007fb1a0879dbe:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fb1a0879dc3:   mov    %r8,%rdi
  0x00007fb1a0879dc6:   rorx   $0x29,%r11,%r13
  0x00007fb1a0879dcc:   rorx   $0x12,%r11,%r14
  0x00007fb1a0879dd2:   add    0x8(%rsp),%rcx
  0x00007fb1a0879dd7:   or     %r9,%rdi
  0x00007fb1a0879dda:   mov    %rax,%r15
  0x00007fb1a0879ddd:   xor    %rbx,%r15
  0x00007fb1a0879de0:   rorx   $0x22,%r8,%r12
  0x00007fb1a0879de6:   xor    %r14,%r13
  0x00007fb1a0879de9:   rorx   $0xe,%r11,%r14
  0x00007fb1a0879def:   and    %r11,%r15
  0x00007fb1a0879df2:   add    %rcx,%r10
  0x00007fb1a0879df5:   and    %rdx,%rdi
  0x00007fb1a0879df8:   xor    %r14,%r13
  0x00007fb1a0879dfb:   rorx   $0x27,%r8,%r14
  0x00007fb1a0879e01:   xor    %r12,%r14
  0x00007fb1a0879e04:   rorx   $0x1c,%r8,%r12
  0x00007fb1a0879e0a:   xor    %rbx,%r15
  0x00007fb1a0879e0d:   xor    %r12,%r14
  0x00007fb1a0879e10:   mov    %r8,%r12
  0x00007fb1a0879e13:   and    %r9,%r12
  0x00007fb1a0879e16:   add    %r13,%r15
  0x00007fb1a0879e19:   or     %r12,%rdi
  0x00007fb1a0879e1c:   add    %r14,%rcx
  0x00007fb1a0879e1f:   add    %r15,%r10
  0x00007fb1a0879e22:   add    %r15,%rcx
  0x00007fb1a0879e25:   add    %rdi,%rcx
  0x00007fb1a0879e28:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a0879e2d:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fb1a0879e32:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a0879e36:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879e3a:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fb1a0879e3f:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fb1a0879e44:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a0879e48:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879e4c:   vpaddq %ymm8,%ymm7,%ymm7
  0x00007fb1a0879e51:   vpsrlq $0x6,%ymm7,%ymm8
  0x00007fb1a0879e56:   mov    %rcx,%rdi
  0x00007fb1a0879e59:   rorx   $0x29,%r10,%r13
  0x00007fb1a0879e5f:   rorx   $0x12,%r10,%r14
  0x00007fb1a0879e65:   add    0x10(%rsp),%rbx
  0x00007fb1a0879e6a:   or     %rdx,%rdi
  0x00007fb1a0879e6d:   mov    %r11,%r15
  0x00007fb1a0879e70:   xor    %rax,%r15
  0x00007fb1a0879e73:   rorx   $0x22,%rcx,%r12
  0x00007fb1a0879e79:   xor    %r14,%r13
  0x00007fb1a0879e7c:   rorx   $0xe,%r10,%r14
  0x00007fb1a0879e82:   and    %r10,%r15
  0x00007fb1a0879e85:   add    %rbx,%r9
  0x00007fb1a0879e88:   and    %r8,%rdi
  0x00007fb1a0879e8b:   xor    %r14,%r13
  0x00007fb1a0879e8e:   rorx   $0x27,%rcx,%r14
  0x00007fb1a0879e94:   xor    %r12,%r14
  0x00007fb1a0879e97:   rorx   $0x1c,%rcx,%r12
  0x00007fb1a0879e9d:   xor    %rax,%r15
  0x00007fb1a0879ea0:   xor    %r12,%r14
  0x00007fb1a0879ea3:   mov    %rcx,%r12
  0x00007fb1a0879ea6:   and    %rdx,%r12
  0x00007fb1a0879ea9:   add    %r13,%r15
  0x00007fb1a0879eac:   or     %r12,%rdi
  0x00007fb1a0879eaf:   add    %r14,%rbx
  0x00007fb1a0879eb2:   add    %r15,%r9
  0x00007fb1a0879eb5:   add    %r15,%rbx
  0x00007fb1a0879eb8:   add    %rdi,%rbx
  0x00007fb1a0879ebb:   vpsrlq $0x13,%ymm7,%ymm3
  0x00007fb1a0879ec0:   vpsllq $0x2d,%ymm7,%ymm1
  0x00007fb1a0879ec5:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a0879ec9:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879ecd:   vpsrlq $0x3d,%ymm7,%ymm3
  0x00007fb1a0879ed2:   vpsllq $0x3,%ymm7,%ymm1
  0x00007fb1a0879ed7:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a0879edb:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a0879edf:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fb1a0879ee4:   vpblendd $0xf0,%ymm2,%ymm7,%ymm7
  0x00007fb1a0879eea:   mov    %rbx,%rdi
  0x00007fb1a0879eed:   rorx   $0x29,%r9,%r13
  0x00007fb1a0879ef3:   rorx   $0x12,%r9,%r14
  0x00007fb1a0879ef9:   add    0x18(%rsp),%rax
  0x00007fb1a0879efe:   or     %r8,%rdi
  0x00007fb1a0879f01:   mov    %r10,%r15
  0x00007fb1a0879f04:   xor    %r11,%r15
  0x00007fb1a0879f07:   rorx   $0x22,%rbx,%r12
  0x00007fb1a0879f0d:   xor    %r14,%r13
  0x00007fb1a0879f10:   rorx   $0xe,%r9,%r14
  0x00007fb1a0879f16:   and    %r9,%r15
  0x00007fb1a0879f19:   add    %rax,%rdx
  0x00007fb1a0879f1c:   and    %rcx,%rdi
  0x00007fb1a0879f1f:   xor    %r14,%r13
  0x00007fb1a0879f22:   rorx   $0x27,%rbx,%r14
  0x00007fb1a0879f28:   xor    %r12,%r14
  0x00007fb1a0879f2b:   rorx   $0x1c,%rbx,%r12
  0x00007fb1a0879f31:   xor    %r11,%r15
  0x00007fb1a0879f34:   xor    %r12,%r14
  0x00007fb1a0879f37:   mov    %rbx,%r12
  0x00007fb1a0879f3a:   and    %r8,%r12
  0x00007fb1a0879f3d:   add    %r13,%r15
  0x00007fb1a0879f40:   or     %r12,%rdi
  0x00007fb1a0879f43:   add    %r14,%rax
  0x00007fb1a0879f46:   add    %r15,%rdx
  0x00007fb1a0879f49:   add    %r15,%rax
  0x00007fb1a0879f4c:   add    %rdi,%rax
  0x00007fb1a0879f4f:   subq   $0x1,0x20(%rsp)
  0x00007fb1a0879f55:   jne    Stub::sha512_implCompress+192 0x00007fb1a08795e0
  0x00007fb1a0879f5b:   movq   $0x2,0x20(%rsp)
  0x00007fb1a0879f64:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007fb1a0879f69:   vmovdqu %ymm0,(%rsp)
  0x00007fb1a0879f6e:   mov    %r9,%r15
  0x00007fb1a0879f71:   rorx   $0x29,%rdx,%r13
  0x00007fb1a0879f77:   rorx   $0x12,%rdx,%r14
  0x00007fb1a0879f7d:   xor    %r10,%r15
  0x00007fb1a0879f80:   xor    %r14,%r13
  0x00007fb1a0879f83:   rorx   $0xe,%rdx,%r14
  0x00007fb1a0879f89:   and    %rdx,%r15
  0x00007fb1a0879f8c:   xor    %r14,%r13
  0x00007fb1a0879f8f:   rorx   $0x22,%rax,%r12
  0x00007fb1a0879f95:   xor    %r10,%r15
  0x00007fb1a0879f98:   rorx   $0x27,%rax,%r14
  0x00007fb1a0879f9e:   mov    %rax,%rdi
  0x00007fb1a0879fa1:   xor    %r12,%r14
  0x00007fb1a0879fa4:   rorx   $0x1c,%rax,%r12
  0x00007fb1a0879faa:   add    (%rsp),%r11
  0x00007fb1a0879fae:   or     %rcx,%rdi
  0x00007fb1a0879fb1:   xor    %r12,%r14
  0x00007fb1a0879fb4:   mov    %rax,%r12
  0x00007fb1a0879fb7:   and    %rbx,%rdi
  0x00007fb1a0879fba:   and    %rcx,%r12
  0x00007fb1a0879fbd:   add    %r13,%r15
  0x00007fb1a0879fc0:   add    %r11,%r8
  0x00007fb1a0879fc3:   or     %r12,%rdi
  0x00007fb1a0879fc6:   add    %r14,%r11
  0x00007fb1a0879fc9:   add    %r15,%r8
  0x00007fb1a0879fcc:   add    %r15,%r11
  0x00007fb1a0879fcf:   mov    %rdx,%r15
  0x00007fb1a0879fd2:   rorx   $0x29,%r8,%r13
  0x00007fb1a0879fd8:   rorx   $0x12,%r8,%r14
  0x00007fb1a0879fde:   xor    %r9,%r15
  0x00007fb1a0879fe1:   xor    %r14,%r13
  0x00007fb1a0879fe4:   rorx   $0xe,%r8,%r14
  0x00007fb1a0879fea:   and    %r8,%r15
  0x00007fb1a0879fed:   add    %rdi,%r11
  0x00007fb1a0879ff0:   xor    %r14,%r13
  0x00007fb1a0879ff3:   rorx   $0x22,%r11,%r12
  0x00007fb1a0879ff9:   xor    %r9,%r15
  0x00007fb1a0879ffc:   rorx   $0x27,%r11,%r14
  0x00007fb1a087a002:   mov    %r11,%rdi
  0x00007fb1a087a005:   xor    %r12,%r14
  0x00007fb1a087a008:   rorx   $0x1c,%r11,%r12
  0x00007fb1a087a00e:   add    0x8(%rsp),%r10
  0x00007fb1a087a013:   or     %rbx,%rdi
  0x00007fb1a087a016:   xor    %r12,%r14
  0x00007fb1a087a019:   mov    %r11,%r12
  0x00007fb1a087a01c:   and    %rax,%rdi
  0x00007fb1a087a01f:   and    %rbx,%r12
  0x00007fb1a087a022:   add    %r13,%r15
  0x00007fb1a087a025:   add    %r10,%rcx
  0x00007fb1a087a028:   or     %r12,%rdi
  0x00007fb1a087a02b:   add    %r14,%r10
  0x00007fb1a087a02e:   add    %r15,%rcx
  0x00007fb1a087a031:   add    %r15,%r10
  0x00007fb1a087a034:   mov    %r8,%r15
  0x00007fb1a087a037:   rorx   $0x29,%rcx,%r13
  0x00007fb1a087a03d:   rorx   $0x12,%rcx,%r14
  0x00007fb1a087a043:   xor    %rdx,%r15
  0x00007fb1a087a046:   xor    %r14,%r13
  0x00007fb1a087a049:   rorx   $0xe,%rcx,%r14
  0x00007fb1a087a04f:   and    %rcx,%r15
  0x00007fb1a087a052:   add    %rdi,%r10
  0x00007fb1a087a055:   xor    %r14,%r13
  0x00007fb1a087a058:   rorx   $0x22,%r10,%r12
  0x00007fb1a087a05e:   xor    %rdx,%r15
  0x00007fb1a087a061:   rorx   $0x27,%r10,%r14
  0x00007fb1a087a067:   mov    %r10,%rdi
  0x00007fb1a087a06a:   xor    %r12,%r14
  0x00007fb1a087a06d:   rorx   $0x1c,%r10,%r12
  0x00007fb1a087a073:   add    0x10(%rsp),%r9
  0x00007fb1a087a078:   or     %rax,%rdi
  0x00007fb1a087a07b:   xor    %r12,%r14
  0x00007fb1a087a07e:   mov    %r10,%r12
  0x00007fb1a087a081:   and    %r11,%rdi
  0x00007fb1a087a084:   and    %rax,%r12
  0x00007fb1a087a087:   add    %r13,%r15
  0x00007fb1a087a08a:   add    %r9,%rbx
  0x00007fb1a087a08d:   or     %r12,%rdi
  0x00007fb1a087a090:   add    %r14,%r9
  0x00007fb1a087a093:   add    %r15,%rbx
  0x00007fb1a087a096:   add    %r15,%r9
  0x00007fb1a087a099:   mov    %rcx,%r15
  0x00007fb1a087a09c:   rorx   $0x29,%rbx,%r13
  0x00007fb1a087a0a2:   rorx   $0x12,%rbx,%r14
  0x00007fb1a087a0a8:   xor    %r8,%r15
  0x00007fb1a087a0ab:   xor    %r14,%r13
  0x00007fb1a087a0ae:   rorx   $0xe,%rbx,%r14
  0x00007fb1a087a0b4:   and    %rbx,%r15
  0x00007fb1a087a0b7:   add    %rdi,%r9
  0x00007fb1a087a0ba:   xor    %r14,%r13
  0x00007fb1a087a0bd:   rorx   $0x22,%r9,%r12
  0x00007fb1a087a0c3:   xor    %r8,%r15
  0x00007fb1a087a0c6:   rorx   $0x27,%r9,%r14
  0x00007fb1a087a0cc:   mov    %r9,%rdi
  0x00007fb1a087a0cf:   xor    %r12,%r14
  0x00007fb1a087a0d2:   rorx   $0x1c,%r9,%r12
  0x00007fb1a087a0d8:   add    0x18(%rsp),%rdx
  0x00007fb1a087a0dd:   or     %r11,%rdi
  0x00007fb1a087a0e0:   xor    %r12,%r14
  0x00007fb1a087a0e3:   mov    %r9,%r12
  0x00007fb1a087a0e6:   and    %r10,%rdi
  0x00007fb1a087a0e9:   and    %r11,%r12
  0x00007fb1a087a0ec:   add    %r13,%r15
  0x00007fb1a087a0ef:   add    %rdx,%rax
  0x00007fb1a087a0f2:   or     %r12,%rdi
  0x00007fb1a087a0f5:   add    %r14,%rdx
  0x00007fb1a087a0f8:   add    %r15,%rax
  0x00007fb1a087a0fb:   add    %r15,%rdx
  0x00007fb1a087a0fe:   add    %rdi,%rdx
  0x00007fb1a087a101:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007fb1a087a106:   vmovdqu %ymm0,(%rsp)
  0x00007fb1a087a10b:   add    $0x40,%rbp
  0x00007fb1a087a10f:   mov    %rbx,%r15
  0x00007fb1a087a112:   rorx   $0x29,%rax,%r13
  0x00007fb1a087a118:   rorx   $0x12,%rax,%r14
  0x00007fb1a087a11e:   xor    %rcx,%r15
  0x00007fb1a087a121:   xor    %r14,%r13
  0x00007fb1a087a124:   rorx   $0xe,%rax,%r14
  0x00007fb1a087a12a:   and    %rax,%r15
  0x00007fb1a087a12d:   xor    %r14,%r13
  0x00007fb1a087a130:   rorx   $0x22,%rdx,%r12
  0x00007fb1a087a136:   xor    %rcx,%r15
  0x00007fb1a087a139:   rorx   $0x27,%rdx,%r14
  0x00007fb1a087a13f:   mov    %rdx,%rdi
  0x00007fb1a087a142:   xor    %r12,%r14
  0x00007fb1a087a145:   rorx   $0x1c,%rdx,%r12
  0x00007fb1a087a14b:   add    (%rsp),%r8
  0x00007fb1a087a14f:   or     %r10,%rdi
  0x00007fb1a087a152:   xor    %r12,%r14
  0x00007fb1a087a155:   mov    %rdx,%r12
  0x00007fb1a087a158:   and    %r9,%rdi
  0x00007fb1a087a15b:   and    %r10,%r12
  0x00007fb1a087a15e:   add    %r13,%r15
  0x00007fb1a087a161:   add    %r8,%r11
  0x00007fb1a087a164:   or     %r12,%rdi
  0x00007fb1a087a167:   add    %r14,%r8
  0x00007fb1a087a16a:   add    %r15,%r11
  0x00007fb1a087a16d:   add    %r15,%r8
  0x00007fb1a087a170:   mov    %rax,%r15
  0x00007fb1a087a173:   rorx   $0x29,%r11,%r13
  0x00007fb1a087a179:   rorx   $0x12,%r11,%r14
  0x00007fb1a087a17f:   xor    %rbx,%r15
  0x00007fb1a087a182:   xor    %r14,%r13
  0x00007fb1a087a185:   rorx   $0xe,%r11,%r14
  0x00007fb1a087a18b:   and    %r11,%r15
  0x00007fb1a087a18e:   add    %rdi,%r8
  0x00007fb1a087a191:   xor    %r14,%r13
  0x00007fb1a087a194:   rorx   $0x22,%r8,%r12
  0x00007fb1a087a19a:   xor    %rbx,%r15
  0x00007fb1a087a19d:   rorx   $0x27,%r8,%r14
  0x00007fb1a087a1a3:   mov    %r8,%rdi
  0x00007fb1a087a1a6:   xor    %r12,%r14
  0x00007fb1a087a1a9:   rorx   $0x1c,%r8,%r12
  0x00007fb1a087a1af:   add    0x8(%rsp),%rcx
  0x00007fb1a087a1b4:   or     %r9,%rdi
  0x00007fb1a087a1b7:   xor    %r12,%r14
  0x00007fb1a087a1ba:   mov    %r8,%r12
  0x00007fb1a087a1bd:   and    %rdx,%rdi
  0x00007fb1a087a1c0:   and    %r9,%r12
  0x00007fb1a087a1c3:   add    %r13,%r15
  0x00007fb1a087a1c6:   add    %rcx,%r10
  0x00007fb1a087a1c9:   or     %r12,%rdi
  0x00007fb1a087a1cc:   add    %r14,%rcx
  0x00007fb1a087a1cf:   add    %r15,%r10
  0x00007fb1a087a1d2:   add    %r15,%rcx
  0x00007fb1a087a1d5:   mov    %r11,%r15
  0x00007fb1a087a1d8:   rorx   $0x29,%r10,%r13
  0x00007fb1a087a1de:   rorx   $0x12,%r10,%r14
  0x00007fb1a087a1e4:   xor    %rax,%r15
  0x00007fb1a087a1e7:   xor    %r14,%r13
  0x00007fb1a087a1ea:   rorx   $0xe,%r10,%r14
  0x00007fb1a087a1f0:   and    %r10,%r15
  0x00007fb1a087a1f3:   add    %rdi,%rcx
  0x00007fb1a087a1f6:   xor    %r14,%r13
  0x00007fb1a087a1f9:   rorx   $0x22,%rcx,%r12
  0x00007fb1a087a1ff:   xor    %rax,%r15
  0x00007fb1a087a202:   rorx   $0x27,%rcx,%r14
  0x00007fb1a087a208:   mov    %rcx,%rdi
  0x00007fb1a087a20b:   xor    %r12,%r14
  0x00007fb1a087a20e:   rorx   $0x1c,%rcx,%r12
  0x00007fb1a087a214:   add    0x10(%rsp),%rbx
  0x00007fb1a087a219:   or     %rdx,%rdi
  0x00007fb1a087a21c:   xor    %r12,%r14
  0x00007fb1a087a21f:   mov    %rcx,%r12
  0x00007fb1a087a222:   and    %r8,%rdi
  0x00007fb1a087a225:   and    %rdx,%r12
  0x00007fb1a087a228:   add    %r13,%r15
  0x00007fb1a087a22b:   add    %rbx,%r9
  0x00007fb1a087a22e:   or     %r12,%rdi
  0x00007fb1a087a231:   add    %r14,%rbx
  0x00007fb1a087a234:   add    %r15,%r9
  0x00007fb1a087a237:   add    %r15,%rbx
  0x00007fb1a087a23a:   mov    %r10,%r15
  0x00007fb1a087a23d:   rorx   $0x29,%r9,%r13
  0x00007fb1a087a243:   rorx   $0x12,%r9,%r14
  0x00007fb1a087a249:   xor    %r11,%r15
  0x00007fb1a087a24c:   xor    %r14,%r13
  0x00007fb1a087a24f:   rorx   $0xe,%r9,%r14
  0x00007fb1a087a255:   and    %r9,%r15
  0x00007fb1a087a258:   add    %rdi,%rbx
  0x00007fb1a087a25b:   xor    %r14,%r13
  0x00007fb1a087a25e:   rorx   $0x22,%rbx,%r12
  0x00007fb1a087a264:   xor    %r11,%r15
  0x00007fb1a087a267:   rorx   $0x27,%rbx,%r14
  0x00007fb1a087a26d:   mov    %rbx,%rdi
  0x00007fb1a087a270:   xor    %r12,%r14
  0x00007fb1a087a273:   rorx   $0x1c,%rbx,%r12
  0x00007fb1a087a279:   add    0x18(%rsp),%rax
  0x00007fb1a087a27e:   or     %r8,%rdi
  0x00007fb1a087a281:   xor    %r12,%r14
  0x00007fb1a087a284:   mov    %rbx,%r12
  0x00007fb1a087a287:   and    %rcx,%rdi
  0x00007fb1a087a28a:   and    %r8,%r12
  0x00007fb1a087a28d:   add    %r13,%r15
  0x00007fb1a087a290:   add    %rax,%rdx
  0x00007fb1a087a293:   or     %r12,%rdi
  0x00007fb1a087a296:   add    %r14,%rax
  0x00007fb1a087a299:   add    %r15,%rdx
  0x00007fb1a087a29c:   add    %r15,%rax
  0x00007fb1a087a29f:   add    %rdi,%rax
  0x00007fb1a087a2a2:   vmovdqu %ymm6,%ymm4
  0x00007fb1a087a2a6:   vmovdqu %ymm7,%ymm5
  0x00007fb1a087a2aa:   subq   $0x1,0x20(%rsp)
  0x00007fb1a087a2b0:   jne    Stub::sha512_implCompress+2628 0x00007fb1a0879f64
  0x00007fb1a087a2b6:   add    (%rsi),%rax
  0x00007fb1a087a2b9:   mov    %rax,(%rsi)
  0x00007fb1a087a2bc:   add    0x8(%rsi),%rbx
  0x00007fb1a087a2c0:   mov    %rbx,0x8(%rsi)
  0x00007fb1a087a2c4:   add    0x10(%rsi),%rcx
  0x00007fb1a087a2c8:   mov    %rcx,0x10(%rsi)
  0x00007fb1a087a2cc:   add    0x18(%rsi),%r8
  0x00007fb1a087a2d0:   mov    %r8,0x18(%rsi)
  0x00007fb1a087a2d4:   add    0x20(%rsi),%rdx
  0x00007fb1a087a2d8:   mov    %rdx,0x20(%rsi)
  0x00007fb1a087a2dc:   add    0x28(%rsi),%r9
  0x00007fb1a087a2e0:   mov    %r9,0x28(%rsi)
  0x00007fb1a087a2e4:   add    0x30(%rsi),%r10
  0x00007fb1a087a2e8:   mov    %r10,0x30(%rsi)
  0x00007fb1a087a2ec:   add    0x38(%rsi),%r11
  0x00007fb1a087a2f0:   mov    %r11,0x38(%rsi)
  0x00007fb1a087a2f4:   mov    0x28(%rsp),%rdi
  0x00007fb1a087a2f9:   add    $0x80,%rdi
  0x00007fb1a087a300:   cmp    0x30(%rsp),%rdi
  0x00007fb1a087a305:   jne    Stub::sha512_implCompress+129 0x00007fb1a08795a1
  0x00007fb1a087a30b:   mov    0x40(%rsp),%rbp
  0x00007fb1a087a310:   mov    0x48(%rsp),%rbx
  0x00007fb1a087a315:   mov    0x50(%rsp),%r12
  0x00007fb1a087a31a:   mov    0x58(%rsp),%r13
  0x00007fb1a087a31f:   mov    0x60(%rsp),%r14
  0x00007fb1a087a324:   mov    0x68(%rsp),%r15
  0x00007fb1a087a329:   mov    0x38(%rsp),%rsp
  0x00007fb1a087a32e:   pop    %rcx
  0x00007fb1a087a32f:   pop    %rdx
  0x00007fb1a087a330:   vzeroupper 
  0x00007fb1a087a333:   leaveq 
  0x00007fb1a087a334:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha512_implCompressMB [0x00007fb1a087a340, 0x00007fb1a087b185] (3653 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087a340:   push   %rbp
  0x00007fb1a087a341:   mov    %rsp,%rbp
  0x00007fb1a087a344:   push   %rdx
  0x00007fb1a087a345:   push   %rcx
  0x00007fb1a087a346:   mov    %rsp,%rax
  0x00007fb1a087a349:   sub    $0x70,%rsp
  0x00007fb1a087a34d:   and    $0xffffffffffffffe0,%rsp
  0x00007fb1a087a351:   mov    %rax,0x38(%rsp)
  0x00007fb1a087a356:   mov    %rbp,0x40(%rsp)
  0x00007fb1a087a35b:   mov    %rbx,0x48(%rsp)
  0x00007fb1a087a360:   mov    %r12,0x50(%rsp)
  0x00007fb1a087a365:   mov    %r13,0x58(%rsp)
  0x00007fb1a087a36a:   mov    %r14,0x60(%rsp)
  0x00007fb1a087a36f:   mov    %r15,0x68(%rsp)
  0x00007fb1a087a374:   vpblendd $0xf0,%xmm1,%xmm0,%xmm0
  0x00007fb1a087a37a:   vpblendd $0xf0,%ymm1,%ymm0,%ymm0
  0x00007fb1a087a380:   xor    %rax,%rax
  0x00007fb1a087a383:   cmp    %rcx,%rdx
  0x00007fb1a087a386:   jae    Stub::sha512_implCompressMB+87 0x00007fb1a087a397
  0x00007fb1a087a388:   add    $0x80,%rdx
  0x00007fb1a087a38f:   add    $0x80,%rax
  0x00007fb1a087a395:   jmp    Stub::sha512_implCompressMB+67 0x00007fb1a087a383
  0x00007fb1a087a397:   mov    %rax,%rdx
  0x00007fb1a087a39a:   cmp    $0x0,%rdx
  0x00007fb1a087a39e:   je     Stub::sha512_implCompressMB+3595 0x00007fb1a087b14b
  0x00007fb1a087a3a4:   add    %rdi,%rdx
  0x00007fb1a087a3a7:   mov    %rdx,0x30(%rsp)
  0x00007fb1a087a3ac:   mov    (%rsi),%rax
  0x00007fb1a087a3af:   mov    0x8(%rsi),%rbx
  0x00007fb1a087a3b3:   mov    0x10(%rsi),%rcx
  0x00007fb1a087a3b7:   mov    0x18(%rsi),%r8
  0x00007fb1a087a3bb:   mov    0x20(%rsi),%rdx
  0x00007fb1a087a3bf:   mov    0x28(%rsi),%r9
  0x00007fb1a087a3c3:   mov    0x38(%rsi),%r11
  0x00007fb1a087a3c7:   vmovdqu -0xeef(%rip),%ymm9        # Stub::pshuffle_byte_flip_mask_sha512
  0x00007fb1a087a3cf:   vmovdqu -0xed7(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask_sha512+32 0x00007fb1a0879500
  0x00007fb1a087a3d7:   mov    0x30(%rsi),%r10
  0x00007fb1a087a3db:   movabs $0x7fb1a4ef0140,%rbp
  0x00007fb1a087a3e5:   vmovdqu (%rdi),%ymm4
  0x00007fb1a087a3e9:   vpshufb %ymm9,%ymm4,%ymm4
  0x00007fb1a087a3ee:   vmovdqu 0x20(%rdi),%ymm5
  0x00007fb1a087a3f3:   vpshufb %ymm9,%ymm5,%ymm5
  0x00007fb1a087a3f8:   vmovdqu 0x40(%rdi),%ymm6
  0x00007fb1a087a3fd:   vpshufb %ymm9,%ymm6,%ymm6
  0x00007fb1a087a402:   vmovdqu 0x60(%rdi),%ymm7
  0x00007fb1a087a407:   vpshufb %ymm9,%ymm7,%ymm7
  0x00007fb1a087a40c:   mov    %rdi,0x28(%rsp)
  0x00007fb1a087a411:   movq   $0x4,0x20(%rsp)
  0x00007fb1a087a41a:   nopw   0x0(%rax,%rax,1)
  0x00007fb1a087a420:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007fb1a087a425:   vmovdqu %ymm0,(%rsp)
  0x00007fb1a087a42a:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm0
  0x00007fb1a087a430:   vpalignr $0x8,%ymm6,%ymm0,%ymm0
  0x00007fb1a087a436:   vpaddq %ymm4,%ymm0,%ymm0
  0x00007fb1a087a43a:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm1
  0x00007fb1a087a440:   vpalignr $0x8,%ymm4,%ymm1,%ymm1
  0x00007fb1a087a446:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fb1a087a44b:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fb1a087a450:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a087a454:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fb1a087a459:   mov    %rax,%rdi
  0x00007fb1a087a45c:   rorx   $0x29,%rdx,%r13
  0x00007fb1a087a462:   rorx   $0x12,%rdx,%r14
  0x00007fb1a087a468:   add    (%rsp),%r11
  0x00007fb1a087a46c:   or     %rcx,%rdi
  0x00007fb1a087a46f:   mov    %r9,%r15
  0x00007fb1a087a472:   xor    %r10,%r15
  0x00007fb1a087a475:   rorx   $0x22,%rax,%r12
  0x00007fb1a087a47b:   xor    %r14,%r13
  0x00007fb1a087a47e:   rorx   $0xe,%rdx,%r14
  0x00007fb1a087a484:   and    %rdx,%r15
  0x00007fb1a087a487:   add    %r11,%r8
  0x00007fb1a087a48a:   and    %rbx,%rdi
  0x00007fb1a087a48d:   xor    %r14,%r13
  0x00007fb1a087a490:   rorx   $0x27,%rax,%r14
  0x00007fb1a087a496:   xor    %r12,%r14
  0x00007fb1a087a499:   rorx   $0x1c,%rax,%r12
  0x00007fb1a087a49f:   xor    %r10,%r15
  0x00007fb1a087a4a2:   xor    %r12,%r14
  0x00007fb1a087a4a5:   mov    %rax,%r12
  0x00007fb1a087a4a8:   and    %rcx,%r12
  0x00007fb1a087a4ab:   add    %r13,%r15
  0x00007fb1a087a4ae:   or     %r12,%rdi
  0x00007fb1a087a4b1:   add    %r14,%r11
  0x00007fb1a087a4b4:   add    %r15,%r8
  0x00007fb1a087a4b7:   add    %r15,%r11
  0x00007fb1a087a4ba:   add    %rdi,%r11
  0x00007fb1a087a4bd:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fb1a087a4c2:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fb1a087a4c7:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fb1a087a4cb:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fb1a087a4d0:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fb1a087a4d4:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fb1a087a4d8:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm4
  0x00007fb1a087a4de:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fb1a087a4e3:   vperm2f128 $0x11,%ymm7,%ymm7,%ymm2
  0x00007fb1a087a4e9:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fb1a087a4ee:   mov    %r11,%rdi
  0x00007fb1a087a4f1:   rorx   $0x29,%r8,%r13
  0x00007fb1a087a4f7:   rorx   $0x12,%r8,%r14
  0x00007fb1a087a4fd:   add    0x8(%rsp),%r10
  0x00007fb1a087a502:   or     %rbx,%rdi
  0x00007fb1a087a505:   mov    %rdx,%r15
  0x00007fb1a087a508:   xor    %r9,%r15
  0x00007fb1a087a50b:   rorx   $0x22,%r11,%r12
  0x00007fb1a087a511:   xor    %r14,%r13
  0x00007fb1a087a514:   rorx   $0xe,%r8,%r14
  0x00007fb1a087a51a:   and    %r8,%r15
  0x00007fb1a087a51d:   add    %r10,%rcx
  0x00007fb1a087a520:   and    %rax,%rdi
  0x00007fb1a087a523:   xor    %r14,%r13
  0x00007fb1a087a526:   rorx   $0x27,%r11,%r14
  0x00007fb1a087a52c:   xor    %r12,%r14
  0x00007fb1a087a52f:   rorx   $0x1c,%r11,%r12
  0x00007fb1a087a535:   xor    %r9,%r15
  0x00007fb1a087a538:   xor    %r12,%r14
  0x00007fb1a087a53b:   mov    %r11,%r12
  0x00007fb1a087a53e:   and    %rbx,%r12
  0x00007fb1a087a541:   add    %r13,%r15
  0x00007fb1a087a544:   or     %r12,%rdi
  0x00007fb1a087a547:   add    %r14,%r10
  0x00007fb1a087a54a:   add    %r15,%rcx
  0x00007fb1a087a54d:   add    %r15,%r10
  0x00007fb1a087a550:   add    %rdi,%r10
  0x00007fb1a087a553:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a087a558:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fb1a087a55d:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087a561:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087a565:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fb1a087a56a:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fb1a087a56f:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087a573:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087a577:   vpaddq %ymm8,%ymm4,%ymm4
  0x00007fb1a087a57c:   vpsrlq $0x6,%ymm4,%ymm8
  0x00007fb1a087a581:   mov    %r10,%rdi
  0x00007fb1a087a584:   rorx   $0x29,%rcx,%r13
  0x00007fb1a087a58a:   rorx   $0x12,%rcx,%r14
  0x00007fb1a087a590:   add    0x10(%rsp),%r9
  0x00007fb1a087a595:   or     %rax,%rdi
  0x00007fb1a087a598:   mov    %r8,%r15
  0x00007fb1a087a59b:   xor    %rdx,%r15
  0x00007fb1a087a59e:   rorx   $0x22,%r10,%r12
  0x00007fb1a087a5a4:   xor    %r14,%r13
  0x00007fb1a087a5a7:   rorx   $0xe,%rcx,%r14
  0x00007fb1a087a5ad:   and    %rcx,%r15
  0x00007fb1a087a5b0:   add    %r9,%rbx
  0x00007fb1a087a5b3:   and    %r11,%rdi
  0x00007fb1a087a5b6:   xor    %r14,%r13
  0x00007fb1a087a5b9:   rorx   $0x27,%r10,%r14
  0x00007fb1a087a5bf:   xor    %r12,%r14
  0x00007fb1a087a5c2:   rorx   $0x1c,%r10,%r12
  0x00007fb1a087a5c8:   xor    %rdx,%r15
  0x00007fb1a087a5cb:   xor    %r12,%r14
  0x00007fb1a087a5ce:   mov    %r10,%r12
  0x00007fb1a087a5d1:   and    %rax,%r12
  0x00007fb1a087a5d4:   add    %r13,%r15
  0x00007fb1a087a5d7:   or     %r12,%rdi
  0x00007fb1a087a5da:   add    %r14,%r9
  0x00007fb1a087a5dd:   add    %r15,%rbx
  0x00007fb1a087a5e0:   add    %r15,%r9
  0x00007fb1a087a5e3:   add    %rdi,%r9
  0x00007fb1a087a5e6:   vpsrlq $0x13,%ymm4,%ymm3
  0x00007fb1a087a5eb:   vpsllq $0x2d,%ymm4,%ymm1
  0x00007fb1a087a5f0:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087a5f4:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087a5f8:   vpsrlq $0x3d,%ymm4,%ymm3
  0x00007fb1a087a5fd:   vpsllq $0x3,%ymm4,%ymm1
  0x00007fb1a087a602:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087a606:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087a60a:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fb1a087a60f:   vpblendd $0xf0,%ymm2,%ymm4,%ymm4
  0x00007fb1a087a615:   mov    %r9,%rdi
  0x00007fb1a087a618:   rorx   $0x29,%rbx,%r13
  0x00007fb1a087a61e:   rorx   $0x12,%rbx,%r14
  0x00007fb1a087a624:   add    0x18(%rsp),%rdx
  0x00007fb1a087a629:   or     %r11,%rdi
  0x00007fb1a087a62c:   mov    %rcx,%r15
  0x00007fb1a087a62f:   xor    %r8,%r15
  0x00007fb1a087a632:   rorx   $0x22,%r9,%r12
  0x00007fb1a087a638:   xor    %r14,%r13
  0x00007fb1a087a63b:   rorx   $0xe,%rbx,%r14
  0x00007fb1a087a641:   and    %rbx,%r15
  0x00007fb1a087a644:   add    %rdx,%rax
  0x00007fb1a087a647:   and    %r10,%rdi
  0x00007fb1a087a64a:   xor    %r14,%r13
  0x00007fb1a087a64d:   rorx   $0x27,%r9,%r14
  0x00007fb1a087a653:   xor    %r12,%r14
  0x00007fb1a087a656:   rorx   $0x1c,%r9,%r12
  0x00007fb1a087a65c:   xor    %r8,%r15
  0x00007fb1a087a65f:   xor    %r12,%r14
  0x00007fb1a087a662:   mov    %r9,%r12
  0x00007fb1a087a665:   and    %r11,%r12
  0x00007fb1a087a668:   add    %r13,%r15
  0x00007fb1a087a66b:   or     %r12,%rdi
  0x00007fb1a087a66e:   add    %r14,%rdx
  0x00007fb1a087a671:   add    %r15,%rax
  0x00007fb1a087a674:   add    %r15,%rdx
  0x00007fb1a087a677:   add    %rdi,%rdx
  0x00007fb1a087a67a:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007fb1a087a67f:   vmovdqu %ymm0,(%rsp)
  0x00007fb1a087a684:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm0
  0x00007fb1a087a68a:   vpalignr $0x8,%ymm7,%ymm0,%ymm0
  0x00007fb1a087a690:   vpaddq %ymm5,%ymm0,%ymm0
  0x00007fb1a087a694:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm1
  0x00007fb1a087a69a:   vpalignr $0x8,%ymm5,%ymm1,%ymm1
  0x00007fb1a087a6a0:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fb1a087a6a5:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fb1a087a6aa:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a087a6ae:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fb1a087a6b3:   mov    %rdx,%rdi
  0x00007fb1a087a6b6:   rorx   $0x29,%rax,%r13
  0x00007fb1a087a6bc:   rorx   $0x12,%rax,%r14
  0x00007fb1a087a6c2:   add    (%rsp),%r8
  0x00007fb1a087a6c6:   or     %r10,%rdi
  0x00007fb1a087a6c9:   mov    %rbx,%r15
  0x00007fb1a087a6cc:   xor    %rcx,%r15
  0x00007fb1a087a6cf:   rorx   $0x22,%rdx,%r12
  0x00007fb1a087a6d5:   xor    %r14,%r13
  0x00007fb1a087a6d8:   rorx   $0xe,%rax,%r14
  0x00007fb1a087a6de:   and    %rax,%r15
  0x00007fb1a087a6e1:   add    %r8,%r11
  0x00007fb1a087a6e4:   and    %r9,%rdi
  0x00007fb1a087a6e7:   xor    %r14,%r13
  0x00007fb1a087a6ea:   rorx   $0x27,%rdx,%r14
  0x00007fb1a087a6f0:   xor    %r12,%r14
  0x00007fb1a087a6f3:   rorx   $0x1c,%rdx,%r12
  0x00007fb1a087a6f9:   xor    %rcx,%r15
  0x00007fb1a087a6fc:   xor    %r12,%r14
  0x00007fb1a087a6ff:   mov    %rdx,%r12
  0x00007fb1a087a702:   and    %r10,%r12
  0x00007fb1a087a705:   add    %r13,%r15
  0x00007fb1a087a708:   or     %r12,%rdi
  0x00007fb1a087a70b:   add    %r14,%r8
  0x00007fb1a087a70e:   add    %r15,%r11
  0x00007fb1a087a711:   add    %r15,%r8
  0x00007fb1a087a714:   add    %rdi,%r8
  0x00007fb1a087a717:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fb1a087a71c:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fb1a087a721:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fb1a087a725:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fb1a087a72a:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fb1a087a72e:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fb1a087a732:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm5
  0x00007fb1a087a738:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fb1a087a73d:   vperm2f128 $0x11,%ymm4,%ymm4,%ymm2
  0x00007fb1a087a743:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fb1a087a748:   mov    %r8,%rdi
  0x00007fb1a087a74b:   rorx   $0x29,%r11,%r13
  0x00007fb1a087a751:   rorx   $0x12,%r11,%r14
  0x00007fb1a087a757:   add    0x8(%rsp),%rcx
  0x00007fb1a087a75c:   or     %r9,%rdi
  0x00007fb1a087a75f:   mov    %rax,%r15
  0x00007fb1a087a762:   xor    %rbx,%r15
  0x00007fb1a087a765:   rorx   $0x22,%r8,%r12
  0x00007fb1a087a76b:   xor    %r14,%r13
  0x00007fb1a087a76e:   rorx   $0xe,%r11,%r14
  0x00007fb1a087a774:   and    %r11,%r15
  0x00007fb1a087a777:   add    %rcx,%r10
  0x00007fb1a087a77a:   and    %rdx,%rdi
  0x00007fb1a087a77d:   xor    %r14,%r13
  0x00007fb1a087a780:   rorx   $0x27,%r8,%r14
  0x00007fb1a087a786:   xor    %r12,%r14
  0x00007fb1a087a789:   rorx   $0x1c,%r8,%r12
  0x00007fb1a087a78f:   xor    %rbx,%r15
  0x00007fb1a087a792:   xor    %r12,%r14
  0x00007fb1a087a795:   mov    %r8,%r12
  0x00007fb1a087a798:   and    %r9,%r12
  0x00007fb1a087a79b:   add    %r13,%r15
  0x00007fb1a087a79e:   or     %r12,%rdi
  0x00007fb1a087a7a1:   add    %r14,%rcx
  0x00007fb1a087a7a4:   add    %r15,%r10
  0x00007fb1a087a7a7:   add    %r15,%rcx
  0x00007fb1a087a7aa:   add    %rdi,%rcx
  0x00007fb1a087a7ad:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a087a7b2:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fb1a087a7b7:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087a7bb:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087a7bf:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fb1a087a7c4:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fb1a087a7c9:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087a7cd:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087a7d1:   vpaddq %ymm8,%ymm5,%ymm5
  0x00007fb1a087a7d6:   vpsrlq $0x6,%ymm5,%ymm8
  0x00007fb1a087a7db:   mov    %rcx,%rdi
  0x00007fb1a087a7de:   rorx   $0x29,%r10,%r13
  0x00007fb1a087a7e4:   rorx   $0x12,%r10,%r14
  0x00007fb1a087a7ea:   add    0x10(%rsp),%rbx
  0x00007fb1a087a7ef:   or     %rdx,%rdi
  0x00007fb1a087a7f2:   mov    %r11,%r15
  0x00007fb1a087a7f5:   xor    %rax,%r15
  0x00007fb1a087a7f8:   rorx   $0x22,%rcx,%r12
  0x00007fb1a087a7fe:   xor    %r14,%r13
  0x00007fb1a087a801:   rorx   $0xe,%r10,%r14
  0x00007fb1a087a807:   and    %r10,%r15
  0x00007fb1a087a80a:   add    %rbx,%r9
  0x00007fb1a087a80d:   and    %r8,%rdi
  0x00007fb1a087a810:   xor    %r14,%r13
  0x00007fb1a087a813:   rorx   $0x27,%rcx,%r14
  0x00007fb1a087a819:   xor    %r12,%r14
  0x00007fb1a087a81c:   rorx   $0x1c,%rcx,%r12
  0x00007fb1a087a822:   xor    %rax,%r15
  0x00007fb1a087a825:   xor    %r12,%r14
  0x00007fb1a087a828:   mov    %rcx,%r12
  0x00007fb1a087a82b:   and    %rdx,%r12
  0x00007fb1a087a82e:   add    %r13,%r15
  0x00007fb1a087a831:   or     %r12,%rdi
  0x00007fb1a087a834:   add    %r14,%rbx
  0x00007fb1a087a837:   add    %r15,%r9
  0x00007fb1a087a83a:   add    %r15,%rbx
  0x00007fb1a087a83d:   add    %rdi,%rbx
  0x00007fb1a087a840:   vpsrlq $0x13,%ymm5,%ymm3
  0x00007fb1a087a845:   vpsllq $0x2d,%ymm5,%ymm1
  0x00007fb1a087a84a:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087a84e:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087a852:   vpsrlq $0x3d,%ymm5,%ymm3
  0x00007fb1a087a857:   vpsllq $0x3,%ymm5,%ymm1
  0x00007fb1a087a85c:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087a860:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087a864:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fb1a087a869:   vpblendd $0xf0,%ymm2,%ymm5,%ymm5
  0x00007fb1a087a86f:   mov    %rbx,%rdi
  0x00007fb1a087a872:   rorx   $0x29,%r9,%r13
  0x00007fb1a087a878:   rorx   $0x12,%r9,%r14
  0x00007fb1a087a87e:   add    0x18(%rsp),%rax
  0x00007fb1a087a883:   or     %r8,%rdi
  0x00007fb1a087a886:   mov    %r10,%r15
  0x00007fb1a087a889:   xor    %r11,%r15
  0x00007fb1a087a88c:   rorx   $0x22,%rbx,%r12
  0x00007fb1a087a892:   xor    %r14,%r13
  0x00007fb1a087a895:   rorx   $0xe,%r9,%r14
  0x00007fb1a087a89b:   and    %r9,%r15
  0x00007fb1a087a89e:   add    %rax,%rdx
  0x00007fb1a087a8a1:   and    %rcx,%rdi
  0x00007fb1a087a8a4:   xor    %r14,%r13
  0x00007fb1a087a8a7:   rorx   $0x27,%rbx,%r14
  0x00007fb1a087a8ad:   xor    %r12,%r14
  0x00007fb1a087a8b0:   rorx   $0x1c,%rbx,%r12
  0x00007fb1a087a8b6:   xor    %r11,%r15
  0x00007fb1a087a8b9:   xor    %r12,%r14
  0x00007fb1a087a8bc:   mov    %rbx,%r12
  0x00007fb1a087a8bf:   and    %r8,%r12
  0x00007fb1a087a8c2:   add    %r13,%r15
  0x00007fb1a087a8c5:   or     %r12,%rdi
  0x00007fb1a087a8c8:   add    %r14,%rax
  0x00007fb1a087a8cb:   add    %r15,%rdx
  0x00007fb1a087a8ce:   add    %r15,%rax
  0x00007fb1a087a8d1:   add    %rdi,%rax
  0x00007fb1a087a8d4:   vpaddq 0x40(%rbp),%ymm6,%ymm0
  0x00007fb1a087a8d9:   vmovdqu %ymm0,(%rsp)
  0x00007fb1a087a8de:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm0
  0x00007fb1a087a8e4:   vpalignr $0x8,%ymm4,%ymm0,%ymm0
  0x00007fb1a087a8ea:   vpaddq %ymm6,%ymm0,%ymm0
  0x00007fb1a087a8ee:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm1
  0x00007fb1a087a8f4:   vpalignr $0x8,%ymm6,%ymm1,%ymm1
  0x00007fb1a087a8fa:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fb1a087a8ff:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fb1a087a904:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a087a908:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fb1a087a90d:   mov    %rax,%rdi
  0x00007fb1a087a910:   rorx   $0x29,%rdx,%r13
  0x00007fb1a087a916:   rorx   $0x12,%rdx,%r14
  0x00007fb1a087a91c:   add    (%rsp),%r11
  0x00007fb1a087a920:   or     %rcx,%rdi
  0x00007fb1a087a923:   mov    %r9,%r15
  0x00007fb1a087a926:   xor    %r10,%r15
  0x00007fb1a087a929:   rorx   $0x22,%rax,%r12
  0x00007fb1a087a92f:   xor    %r14,%r13
  0x00007fb1a087a932:   rorx   $0xe,%rdx,%r14
  0x00007fb1a087a938:   and    %rdx,%r15
  0x00007fb1a087a93b:   add    %r11,%r8
  0x00007fb1a087a93e:   and    %rbx,%rdi
  0x00007fb1a087a941:   xor    %r14,%r13
  0x00007fb1a087a944:   rorx   $0x27,%rax,%r14
  0x00007fb1a087a94a:   xor    %r12,%r14
  0x00007fb1a087a94d:   rorx   $0x1c,%rax,%r12
  0x00007fb1a087a953:   xor    %r10,%r15
  0x00007fb1a087a956:   xor    %r12,%r14
  0x00007fb1a087a959:   mov    %rax,%r12
  0x00007fb1a087a95c:   and    %rcx,%r12
  0x00007fb1a087a95f:   add    %r13,%r15
  0x00007fb1a087a962:   or     %r12,%rdi
  0x00007fb1a087a965:   add    %r14,%r11
  0x00007fb1a087a968:   add    %r15,%r8
  0x00007fb1a087a96b:   add    %r15,%r11
  0x00007fb1a087a96e:   add    %rdi,%r11
  0x00007fb1a087a971:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fb1a087a976:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fb1a087a97b:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fb1a087a97f:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fb1a087a984:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fb1a087a988:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fb1a087a98c:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm6
  0x00007fb1a087a992:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fb1a087a997:   vperm2f128 $0x11,%ymm5,%ymm5,%ymm2
  0x00007fb1a087a99d:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fb1a087a9a2:   mov    %r11,%rdi
  0x00007fb1a087a9a5:   rorx   $0x29,%r8,%r13
  0x00007fb1a087a9ab:   rorx   $0x12,%r8,%r14
  0x00007fb1a087a9b1:   add    0x8(%rsp),%r10
  0x00007fb1a087a9b6:   or     %rbx,%rdi
  0x00007fb1a087a9b9:   mov    %rdx,%r15
  0x00007fb1a087a9bc:   xor    %r9,%r15
  0x00007fb1a087a9bf:   rorx   $0x22,%r11,%r12
  0x00007fb1a087a9c5:   xor    %r14,%r13
  0x00007fb1a087a9c8:   rorx   $0xe,%r8,%r14
  0x00007fb1a087a9ce:   and    %r8,%r15
  0x00007fb1a087a9d1:   add    %r10,%rcx
  0x00007fb1a087a9d4:   and    %rax,%rdi
  0x00007fb1a087a9d7:   xor    %r14,%r13
  0x00007fb1a087a9da:   rorx   $0x27,%r11,%r14
  0x00007fb1a087a9e0:   xor    %r12,%r14
  0x00007fb1a087a9e3:   rorx   $0x1c,%r11,%r12
  0x00007fb1a087a9e9:   xor    %r9,%r15
  0x00007fb1a087a9ec:   xor    %r12,%r14
  0x00007fb1a087a9ef:   mov    %r11,%r12
  0x00007fb1a087a9f2:   and    %rbx,%r12
  0x00007fb1a087a9f5:   add    %r13,%r15
  0x00007fb1a087a9f8:   or     %r12,%rdi
  0x00007fb1a087a9fb:   add    %r14,%r10
  0x00007fb1a087a9fe:   add    %r15,%rcx
  0x00007fb1a087aa01:   add    %r15,%r10
  0x00007fb1a087aa04:   add    %rdi,%r10
  0x00007fb1a087aa07:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a087aa0c:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fb1a087aa11:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087aa15:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087aa19:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fb1a087aa1e:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fb1a087aa23:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087aa27:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087aa2b:   vpaddq %ymm8,%ymm6,%ymm6
  0x00007fb1a087aa30:   vpsrlq $0x6,%ymm6,%ymm8
  0x00007fb1a087aa35:   mov    %r10,%rdi
  0x00007fb1a087aa38:   rorx   $0x29,%rcx,%r13
  0x00007fb1a087aa3e:   rorx   $0x12,%rcx,%r14
  0x00007fb1a087aa44:   add    0x10(%rsp),%r9
  0x00007fb1a087aa49:   or     %rax,%rdi
  0x00007fb1a087aa4c:   mov    %r8,%r15
  0x00007fb1a087aa4f:   xor    %rdx,%r15
  0x00007fb1a087aa52:   rorx   $0x22,%r10,%r12
  0x00007fb1a087aa58:   xor    %r14,%r13
  0x00007fb1a087aa5b:   rorx   $0xe,%rcx,%r14
  0x00007fb1a087aa61:   and    %rcx,%r15
  0x00007fb1a087aa64:   add    %r9,%rbx
  0x00007fb1a087aa67:   and    %r11,%rdi
  0x00007fb1a087aa6a:   xor    %r14,%r13
  0x00007fb1a087aa6d:   rorx   $0x27,%r10,%r14
  0x00007fb1a087aa73:   xor    %r12,%r14
  0x00007fb1a087aa76:   rorx   $0x1c,%r10,%r12
  0x00007fb1a087aa7c:   xor    %rdx,%r15
  0x00007fb1a087aa7f:   xor    %r12,%r14
  0x00007fb1a087aa82:   mov    %r10,%r12
  0x00007fb1a087aa85:   and    %rax,%r12
  0x00007fb1a087aa88:   add    %r13,%r15
  0x00007fb1a087aa8b:   or     %r12,%rdi
  0x00007fb1a087aa8e:   add    %r14,%r9
  0x00007fb1a087aa91:   add    %r15,%rbx
  0x00007fb1a087aa94:   add    %r15,%r9
  0x00007fb1a087aa97:   add    %rdi,%r9
  0x00007fb1a087aa9a:   vpsrlq $0x13,%ymm6,%ymm3
  0x00007fb1a087aa9f:   vpsllq $0x2d,%ymm6,%ymm1
  0x00007fb1a087aaa4:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087aaa8:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087aaac:   vpsrlq $0x3d,%ymm6,%ymm3
  0x00007fb1a087aab1:   vpsllq $0x3,%ymm6,%ymm1
  0x00007fb1a087aab6:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087aaba:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087aabe:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fb1a087aac3:   vpblendd $0xf0,%ymm2,%ymm6,%ymm6
  0x00007fb1a087aac9:   mov    %r9,%rdi
  0x00007fb1a087aacc:   rorx   $0x29,%rbx,%r13
  0x00007fb1a087aad2:   rorx   $0x12,%rbx,%r14
  0x00007fb1a087aad8:   add    0x18(%rsp),%rdx
  0x00007fb1a087aadd:   or     %r11,%rdi
  0x00007fb1a087aae0:   mov    %rcx,%r15
  0x00007fb1a087aae3:   xor    %r8,%r15
  0x00007fb1a087aae6:   rorx   $0x22,%r9,%r12
  0x00007fb1a087aaec:   xor    %r14,%r13
  0x00007fb1a087aaef:   rorx   $0xe,%rbx,%r14
  0x00007fb1a087aaf5:   and    %rbx,%r15
  0x00007fb1a087aaf8:   add    %rdx,%rax
  0x00007fb1a087aafb:   and    %r10,%rdi
  0x00007fb1a087aafe:   xor    %r14,%r13
  0x00007fb1a087ab01:   rorx   $0x27,%r9,%r14
  0x00007fb1a087ab07:   xor    %r12,%r14
  0x00007fb1a087ab0a:   rorx   $0x1c,%r9,%r12
  0x00007fb1a087ab10:   xor    %r8,%r15
  0x00007fb1a087ab13:   xor    %r12,%r14
  0x00007fb1a087ab16:   mov    %r9,%r12
  0x00007fb1a087ab19:   and    %r11,%r12
  0x00007fb1a087ab1c:   add    %r13,%r15
  0x00007fb1a087ab1f:   or     %r12,%rdi
  0x00007fb1a087ab22:   add    %r14,%rdx
  0x00007fb1a087ab25:   add    %r15,%rax
  0x00007fb1a087ab28:   add    %r15,%rdx
  0x00007fb1a087ab2b:   add    %rdi,%rdx
  0x00007fb1a087ab2e:   vpaddq 0x60(%rbp),%ymm7,%ymm0
  0x00007fb1a087ab33:   vmovdqu %ymm0,(%rsp)
  0x00007fb1a087ab38:   add    $0x80,%rbp
  0x00007fb1a087ab3f:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm0
  0x00007fb1a087ab45:   vpalignr $0x8,%ymm5,%ymm0,%ymm0
  0x00007fb1a087ab4b:   vpaddq %ymm7,%ymm0,%ymm0
  0x00007fb1a087ab4f:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm1
  0x00007fb1a087ab55:   vpalignr $0x8,%ymm7,%ymm1,%ymm1
  0x00007fb1a087ab5b:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fb1a087ab60:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fb1a087ab65:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fb1a087ab69:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fb1a087ab6e:   mov    %rdx,%rdi
  0x00007fb1a087ab71:   rorx   $0x29,%rax,%r13
  0x00007fb1a087ab77:   rorx   $0x12,%rax,%r14
  0x00007fb1a087ab7d:   add    (%rsp),%r8
  0x00007fb1a087ab81:   or     %r10,%rdi
  0x00007fb1a087ab84:   mov    %rbx,%r15
  0x00007fb1a087ab87:   xor    %rcx,%r15
  0x00007fb1a087ab8a:   rorx   $0x22,%rdx,%r12
  0x00007fb1a087ab90:   xor    %r14,%r13
  0x00007fb1a087ab93:   rorx   $0xe,%rax,%r14
  0x00007fb1a087ab99:   and    %rax,%r15
  0x00007fb1a087ab9c:   add    %r8,%r11
  0x00007fb1a087ab9f:   and    %r9,%rdi
  0x00007fb1a087aba2:   xor    %r14,%r13
  0x00007fb1a087aba5:   rorx   $0x27,%rdx,%r14
  0x00007fb1a087abab:   xor    %r12,%r14
  0x00007fb1a087abae:   rorx   $0x1c,%rdx,%r12
  0x00007fb1a087abb4:   xor    %rcx,%r15
  0x00007fb1a087abb7:   xor    %r12,%r14
  0x00007fb1a087abba:   mov    %rdx,%r12
  0x00007fb1a087abbd:   and    %r10,%r12
  0x00007fb1a087abc0:   add    %r13,%r15
  0x00007fb1a087abc3:   or     %r12,%rdi
  0x00007fb1a087abc6:   add    %r14,%r8
  0x00007fb1a087abc9:   add    %r15,%r11
  0x00007fb1a087abcc:   add    %r15,%r8
  0x00007fb1a087abcf:   add    %rdi,%r8
  0x00007fb1a087abd2:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fb1a087abd7:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fb1a087abdc:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fb1a087abe0:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fb1a087abe5:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fb1a087abe9:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fb1a087abed:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm7
  0x00007fb1a087abf3:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fb1a087abf8:   vperm2f128 $0x11,%ymm6,%ymm6,%ymm2
  0x00007fb1a087abfe:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fb1a087ac03:   mov    %r8,%rdi
  0x00007fb1a087ac06:   rorx   $0x29,%r11,%r13
  0x00007fb1a087ac0c:   rorx   $0x12,%r11,%r14
  0x00007fb1a087ac12:   add    0x8(%rsp),%rcx
  0x00007fb1a087ac17:   or     %r9,%rdi
  0x00007fb1a087ac1a:   mov    %rax,%r15
  0x00007fb1a087ac1d:   xor    %rbx,%r15
  0x00007fb1a087ac20:   rorx   $0x22,%r8,%r12
  0x00007fb1a087ac26:   xor    %r14,%r13
  0x00007fb1a087ac29:   rorx   $0xe,%r11,%r14
  0x00007fb1a087ac2f:   and    %r11,%r15
  0x00007fb1a087ac32:   add    %rcx,%r10
  0x00007fb1a087ac35:   and    %rdx,%rdi
  0x00007fb1a087ac38:   xor    %r14,%r13
  0x00007fb1a087ac3b:   rorx   $0x27,%r8,%r14
  0x00007fb1a087ac41:   xor    %r12,%r14
  0x00007fb1a087ac44:   rorx   $0x1c,%r8,%r12
  0x00007fb1a087ac4a:   xor    %rbx,%r15
  0x00007fb1a087ac4d:   xor    %r12,%r14
  0x00007fb1a087ac50:   mov    %r8,%r12
  0x00007fb1a087ac53:   and    %r9,%r12
  0x00007fb1a087ac56:   add    %r13,%r15
  0x00007fb1a087ac59:   or     %r12,%rdi
  0x00007fb1a087ac5c:   add    %r14,%rcx
  0x00007fb1a087ac5f:   add    %r15,%r10
  0x00007fb1a087ac62:   add    %r15,%rcx
  0x00007fb1a087ac65:   add    %rdi,%rcx
  0x00007fb1a087ac68:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fb1a087ac6d:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fb1a087ac72:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087ac76:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087ac7a:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fb1a087ac7f:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fb1a087ac84:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087ac88:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087ac8c:   vpaddq %ymm8,%ymm7,%ymm7
  0x00007fb1a087ac91:   vpsrlq $0x6,%ymm7,%ymm8
  0x00007fb1a087ac96:   mov    %rcx,%rdi
  0x00007fb1a087ac99:   rorx   $0x29,%r10,%r13
  0x00007fb1a087ac9f:   rorx   $0x12,%r10,%r14
  0x00007fb1a087aca5:   add    0x10(%rsp),%rbx
  0x00007fb1a087acaa:   or     %rdx,%rdi
  0x00007fb1a087acad:   mov    %r11,%r15
  0x00007fb1a087acb0:   xor    %rax,%r15
  0x00007fb1a087acb3:   rorx   $0x22,%rcx,%r12
  0x00007fb1a087acb9:   xor    %r14,%r13
  0x00007fb1a087acbc:   rorx   $0xe,%r10,%r14
  0x00007fb1a087acc2:   and    %r10,%r15
  0x00007fb1a087acc5:   add    %rbx,%r9
  0x00007fb1a087acc8:   and    %r8,%rdi
  0x00007fb1a087accb:   xor    %r14,%r13
  0x00007fb1a087acce:   rorx   $0x27,%rcx,%r14
  0x00007fb1a087acd4:   xor    %r12,%r14
  0x00007fb1a087acd7:   rorx   $0x1c,%rcx,%r12
  0x00007fb1a087acdd:   xor    %rax,%r15
  0x00007fb1a087ace0:   xor    %r12,%r14
  0x00007fb1a087ace3:   mov    %rcx,%r12
  0x00007fb1a087ace6:   and    %rdx,%r12
  0x00007fb1a087ace9:   add    %r13,%r15
  0x00007fb1a087acec:   or     %r12,%rdi
  0x00007fb1a087acef:   add    %r14,%rbx
  0x00007fb1a087acf2:   add    %r15,%r9
  0x00007fb1a087acf5:   add    %r15,%rbx
  0x00007fb1a087acf8:   add    %rdi,%rbx
  0x00007fb1a087acfb:   vpsrlq $0x13,%ymm7,%ymm3
  0x00007fb1a087ad00:   vpsllq $0x2d,%ymm7,%ymm1
  0x00007fb1a087ad05:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087ad09:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087ad0d:   vpsrlq $0x3d,%ymm7,%ymm3
  0x00007fb1a087ad12:   vpsllq $0x3,%ymm7,%ymm1
  0x00007fb1a087ad17:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fb1a087ad1b:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fb1a087ad1f:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fb1a087ad24:   vpblendd $0xf0,%ymm2,%ymm7,%ymm7
  0x00007fb1a087ad2a:   mov    %rbx,%rdi
  0x00007fb1a087ad2d:   rorx   $0x29,%r9,%r13
  0x00007fb1a087ad33:   rorx   $0x12,%r9,%r14
  0x00007fb1a087ad39:   add    0x18(%rsp),%rax
  0x00007fb1a087ad3e:   or     %r8,%rdi
  0x00007fb1a087ad41:   mov    %r10,%r15
  0x00007fb1a087ad44:   xor    %r11,%r15
  0x00007fb1a087ad47:   rorx   $0x22,%rbx,%r12
  0x00007fb1a087ad4d:   xor    %r14,%r13
  0x00007fb1a087ad50:   rorx   $0xe,%r9,%r14
  0x00007fb1a087ad56:   and    %r9,%r15
  0x00007fb1a087ad59:   add    %rax,%rdx
  0x00007fb1a087ad5c:   and    %rcx,%rdi
  0x00007fb1a087ad5f:   xor    %r14,%r13
  0x00007fb1a087ad62:   rorx   $0x27,%rbx,%r14
  0x00007fb1a087ad68:   xor    %r12,%r14
  0x00007fb1a087ad6b:   rorx   $0x1c,%rbx,%r12
  0x00007fb1a087ad71:   xor    %r11,%r15
  0x00007fb1a087ad74:   xor    %r12,%r14
  0x00007fb1a087ad77:   mov    %rbx,%r12
  0x00007fb1a087ad7a:   and    %r8,%r12
  0x00007fb1a087ad7d:   add    %r13,%r15
  0x00007fb1a087ad80:   or     %r12,%rdi
  0x00007fb1a087ad83:   add    %r14,%rax
  0x00007fb1a087ad86:   add    %r15,%rdx
  0x00007fb1a087ad89:   add    %r15,%rax
  0x00007fb1a087ad8c:   add    %rdi,%rax
  0x00007fb1a087ad8f:   subq   $0x1,0x20(%rsp)
  0x00007fb1a087ad95:   jne    Stub::sha512_implCompressMB+224 0x00007fb1a087a420
  0x00007fb1a087ad9b:   movq   $0x2,0x20(%rsp)
  0x00007fb1a087ada4:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007fb1a087ada9:   vmovdqu %ymm0,(%rsp)
  0x00007fb1a087adae:   mov    %r9,%r15
  0x00007fb1a087adb1:   rorx   $0x29,%rdx,%r13
  0x00007fb1a087adb7:   rorx   $0x12,%rdx,%r14
  0x00007fb1a087adbd:   xor    %r10,%r15
  0x00007fb1a087adc0:   xor    %r14,%r13
  0x00007fb1a087adc3:   rorx   $0xe,%rdx,%r14
  0x00007fb1a087adc9:   and    %rdx,%r15
  0x00007fb1a087adcc:   xor    %r14,%r13
  0x00007fb1a087adcf:   rorx   $0x22,%rax,%r12
  0x00007fb1a087add5:   xor    %r10,%r15
  0x00007fb1a087add8:   rorx   $0x27,%rax,%r14
  0x00007fb1a087adde:   mov    %rax,%rdi
  0x00007fb1a087ade1:   xor    %r12,%r14
  0x00007fb1a087ade4:   rorx   $0x1c,%rax,%r12
  0x00007fb1a087adea:   add    (%rsp),%r11
  0x00007fb1a087adee:   or     %rcx,%rdi
  0x00007fb1a087adf1:   xor    %r12,%r14
  0x00007fb1a087adf4:   mov    %rax,%r12
  0x00007fb1a087adf7:   and    %rbx,%rdi
  0x00007fb1a087adfa:   and    %rcx,%r12
  0x00007fb1a087adfd:   add    %r13,%r15
  0x00007fb1a087ae00:   add    %r11,%r8
  0x00007fb1a087ae03:   or     %r12,%rdi
  0x00007fb1a087ae06:   add    %r14,%r11
  0x00007fb1a087ae09:   add    %r15,%r8
  0x00007fb1a087ae0c:   add    %r15,%r11
  0x00007fb1a087ae0f:   mov    %rdx,%r15
  0x00007fb1a087ae12:   rorx   $0x29,%r8,%r13
  0x00007fb1a087ae18:   rorx   $0x12,%r8,%r14
  0x00007fb1a087ae1e:   xor    %r9,%r15
  0x00007fb1a087ae21:   xor    %r14,%r13
  0x00007fb1a087ae24:   rorx   $0xe,%r8,%r14
  0x00007fb1a087ae2a:   and    %r8,%r15
  0x00007fb1a087ae2d:   add    %rdi,%r11
  0x00007fb1a087ae30:   xor    %r14,%r13
  0x00007fb1a087ae33:   rorx   $0x22,%r11,%r12
  0x00007fb1a087ae39:   xor    %r9,%r15
  0x00007fb1a087ae3c:   rorx   $0x27,%r11,%r14
  0x00007fb1a087ae42:   mov    %r11,%rdi
  0x00007fb1a087ae45:   xor    %r12,%r14
  0x00007fb1a087ae48:   rorx   $0x1c,%r11,%r12
  0x00007fb1a087ae4e:   add    0x8(%rsp),%r10
  0x00007fb1a087ae53:   or     %rbx,%rdi
  0x00007fb1a087ae56:   xor    %r12,%r14
  0x00007fb1a087ae59:   mov    %r11,%r12
  0x00007fb1a087ae5c:   and    %rax,%rdi
  0x00007fb1a087ae5f:   and    %rbx,%r12
  0x00007fb1a087ae62:   add    %r13,%r15
  0x00007fb1a087ae65:   add    %r10,%rcx
  0x00007fb1a087ae68:   or     %r12,%rdi
  0x00007fb1a087ae6b:   add    %r14,%r10
  0x00007fb1a087ae6e:   add    %r15,%rcx
  0x00007fb1a087ae71:   add    %r15,%r10
  0x00007fb1a087ae74:   mov    %r8,%r15
  0x00007fb1a087ae77:   rorx   $0x29,%rcx,%r13
  0x00007fb1a087ae7d:   rorx   $0x12,%rcx,%r14
  0x00007fb1a087ae83:   xor    %rdx,%r15
  0x00007fb1a087ae86:   xor    %r14,%r13
  0x00007fb1a087ae89:   rorx   $0xe,%rcx,%r14
  0x00007fb1a087ae8f:   and    %rcx,%r15
  0x00007fb1a087ae92:   add    %rdi,%r10
  0x00007fb1a087ae95:   xor    %r14,%r13
  0x00007fb1a087ae98:   rorx   $0x22,%r10,%r12
  0x00007fb1a087ae9e:   xor    %rdx,%r15
  0x00007fb1a087aea1:   rorx   $0x27,%r10,%r14
  0x00007fb1a087aea7:   mov    %r10,%rdi
  0x00007fb1a087aeaa:   xor    %r12,%r14
  0x00007fb1a087aead:   rorx   $0x1c,%r10,%r12
  0x00007fb1a087aeb3:   add    0x10(%rsp),%r9
  0x00007fb1a087aeb8:   or     %rax,%rdi
  0x00007fb1a087aebb:   xor    %r12,%r14
  0x00007fb1a087aebe:   mov    %r10,%r12
  0x00007fb1a087aec1:   and    %r11,%rdi
  0x00007fb1a087aec4:   and    %rax,%r12
  0x00007fb1a087aec7:   add    %r13,%r15
  0x00007fb1a087aeca:   add    %r9,%rbx
  0x00007fb1a087aecd:   or     %r12,%rdi
  0x00007fb1a087aed0:   add    %r14,%r9
  0x00007fb1a087aed3:   add    %r15,%rbx
  0x00007fb1a087aed6:   add    %r15,%r9
  0x00007fb1a087aed9:   mov    %rcx,%r15
  0x00007fb1a087aedc:   rorx   $0x29,%rbx,%r13
  0x00007fb1a087aee2:   rorx   $0x12,%rbx,%r14
  0x00007fb1a087aee8:   xor    %r8,%r15
  0x00007fb1a087aeeb:   xor    %r14,%r13
  0x00007fb1a087aeee:   rorx   $0xe,%rbx,%r14
  0x00007fb1a087aef4:   and    %rbx,%r15
  0x00007fb1a087aef7:   add    %rdi,%r9
  0x00007fb1a087aefa:   xor    %r14,%r13
  0x00007fb1a087aefd:   rorx   $0x22,%r9,%r12
  0x00007fb1a087af03:   xor    %r8,%r15
  0x00007fb1a087af06:   rorx   $0x27,%r9,%r14
  0x00007fb1a087af0c:   mov    %r9,%rdi
  0x00007fb1a087af0f:   xor    %r12,%r14
  0x00007fb1a087af12:   rorx   $0x1c,%r9,%r12
  0x00007fb1a087af18:   add    0x18(%rsp),%rdx
  0x00007fb1a087af1d:   or     %r11,%rdi
  0x00007fb1a087af20:   xor    %r12,%r14
  0x00007fb1a087af23:   mov    %r9,%r12
  0x00007fb1a087af26:   and    %r10,%rdi
  0x00007fb1a087af29:   and    %r11,%r12
  0x00007fb1a087af2c:   add    %r13,%r15
  0x00007fb1a087af2f:   add    %rdx,%rax
  0x00007fb1a087af32:   or     %r12,%rdi
  0x00007fb1a087af35:   add    %r14,%rdx
  0x00007fb1a087af38:   add    %r15,%rax
  0x00007fb1a087af3b:   add    %r15,%rdx
  0x00007fb1a087af3e:   add    %rdi,%rdx
  0x00007fb1a087af41:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007fb1a087af46:   vmovdqu %ymm0,(%rsp)
  0x00007fb1a087af4b:   add    $0x40,%rbp
  0x00007fb1a087af4f:   mov    %rbx,%r15
  0x00007fb1a087af52:   rorx   $0x29,%rax,%r13
  0x00007fb1a087af58:   rorx   $0x12,%rax,%r14
  0x00007fb1a087af5e:   xor    %rcx,%r15
  0x00007fb1a087af61:   xor    %r14,%r13
  0x00007fb1a087af64:   rorx   $0xe,%rax,%r14
  0x00007fb1a087af6a:   and    %rax,%r15
  0x00007fb1a087af6d:   xor    %r14,%r13
  0x00007fb1a087af70:   rorx   $0x22,%rdx,%r12
  0x00007fb1a087af76:   xor    %rcx,%r15
  0x00007fb1a087af79:   rorx   $0x27,%rdx,%r14
  0x00007fb1a087af7f:   mov    %rdx,%rdi
  0x00007fb1a087af82:   xor    %r12,%r14
  0x00007fb1a087af85:   rorx   $0x1c,%rdx,%r12
  0x00007fb1a087af8b:   add    (%rsp),%r8
  0x00007fb1a087af8f:   or     %r10,%rdi
  0x00007fb1a087af92:   xor    %r12,%r14
  0x00007fb1a087af95:   mov    %rdx,%r12
  0x00007fb1a087af98:   and    %r9,%rdi
  0x00007fb1a087af9b:   and    %r10,%r12
  0x00007fb1a087af9e:   add    %r13,%r15
  0x00007fb1a087afa1:   add    %r8,%r11
  0x00007fb1a087afa4:   or     %r12,%rdi
  0x00007fb1a087afa7:   add    %r14,%r8
  0x00007fb1a087afaa:   add    %r15,%r11
  0x00007fb1a087afad:   add    %r15,%r8
  0x00007fb1a087afb0:   mov    %rax,%r15
  0x00007fb1a087afb3:   rorx   $0x29,%r11,%r13
  0x00007fb1a087afb9:   rorx   $0x12,%r11,%r14
  0x00007fb1a087afbf:   xor    %rbx,%r15
  0x00007fb1a087afc2:   xor    %r14,%r13
  0x00007fb1a087afc5:   rorx   $0xe,%r11,%r14
  0x00007fb1a087afcb:   and    %r11,%r15
  0x00007fb1a087afce:   add    %rdi,%r8
  0x00007fb1a087afd1:   xor    %r14,%r13
  0x00007fb1a087afd4:   rorx   $0x22,%r8,%r12
  0x00007fb1a087afda:   xor    %rbx,%r15
  0x00007fb1a087afdd:   rorx   $0x27,%r8,%r14
  0x00007fb1a087afe3:   mov    %r8,%rdi
  0x00007fb1a087afe6:   xor    %r12,%r14
  0x00007fb1a087afe9:   rorx   $0x1c,%r8,%r12
  0x00007fb1a087afef:   add    0x8(%rsp),%rcx
  0x00007fb1a087aff4:   or     %r9,%rdi
  0x00007fb1a087aff7:   xor    %r12,%r14
  0x00007fb1a087affa:   mov    %r8,%r12
  0x00007fb1a087affd:   and    %rdx,%rdi
  0x00007fb1a087b000:   and    %r9,%r12
  0x00007fb1a087b003:   add    %r13,%r15
  0x00007fb1a087b006:   add    %rcx,%r10
  0x00007fb1a087b009:   or     %r12,%rdi
  0x00007fb1a087b00c:   add    %r14,%rcx
  0x00007fb1a087b00f:   add    %r15,%r10
  0x00007fb1a087b012:   add    %r15,%rcx
  0x00007fb1a087b015:   mov    %r11,%r15
  0x00007fb1a087b018:   rorx   $0x29,%r10,%r13
  0x00007fb1a087b01e:   rorx   $0x12,%r10,%r14
  0x00007fb1a087b024:   xor    %rax,%r15
  0x00007fb1a087b027:   xor    %r14,%r13
  0x00007fb1a087b02a:   rorx   $0xe,%r10,%r14
  0x00007fb1a087b030:   and    %r10,%r15
  0x00007fb1a087b033:   add    %rdi,%rcx
  0x00007fb1a087b036:   xor    %r14,%r13
  0x00007fb1a087b039:   rorx   $0x22,%rcx,%r12
  0x00007fb1a087b03f:   xor    %rax,%r15
  0x00007fb1a087b042:   rorx   $0x27,%rcx,%r14
  0x00007fb1a087b048:   mov    %rcx,%rdi
  0x00007fb1a087b04b:   xor    %r12,%r14
  0x00007fb1a087b04e:   rorx   $0x1c,%rcx,%r12
  0x00007fb1a087b054:   add    0x10(%rsp),%rbx
  0x00007fb1a087b059:   or     %rdx,%rdi
  0x00007fb1a087b05c:   xor    %r12,%r14
  0x00007fb1a087b05f:   mov    %rcx,%r12
  0x00007fb1a087b062:   and    %r8,%rdi
  0x00007fb1a087b065:   and    %rdx,%r12
  0x00007fb1a087b068:   add    %r13,%r15
  0x00007fb1a087b06b:   add    %rbx,%r9
  0x00007fb1a087b06e:   or     %r12,%rdi
  0x00007fb1a087b071:   add    %r14,%rbx
  0x00007fb1a087b074:   add    %r15,%r9
  0x00007fb1a087b077:   add    %r15,%rbx
  0x00007fb1a087b07a:   mov    %r10,%r15
  0x00007fb1a087b07d:   rorx   $0x29,%r9,%r13
  0x00007fb1a087b083:   rorx   $0x12,%r9,%r14
  0x00007fb1a087b089:   xor    %r11,%r15
  0x00007fb1a087b08c:   xor    %r14,%r13
  0x00007fb1a087b08f:   rorx   $0xe,%r9,%r14
  0x00007fb1a087b095:   and    %r9,%r15
  0x00007fb1a087b098:   add    %rdi,%rbx
  0x00007fb1a087b09b:   xor    %r14,%r13
  0x00007fb1a087b09e:   rorx   $0x22,%rbx,%r12
  0x00007fb1a087b0a4:   xor    %r11,%r15
  0x00007fb1a087b0a7:   rorx   $0x27,%rbx,%r14
  0x00007fb1a087b0ad:   mov    %rbx,%rdi
  0x00007fb1a087b0b0:   xor    %r12,%r14
  0x00007fb1a087b0b3:   rorx   $0x1c,%rbx,%r12
  0x00007fb1a087b0b9:   add    0x18(%rsp),%rax
  0x00007fb1a087b0be:   or     %r8,%rdi
  0x00007fb1a087b0c1:   xor    %r12,%r14
  0x00007fb1a087b0c4:   mov    %rbx,%r12
  0x00007fb1a087b0c7:   and    %rcx,%rdi
  0x00007fb1a087b0ca:   and    %r8,%r12
  0x00007fb1a087b0cd:   add    %r13,%r15
  0x00007fb1a087b0d0:   add    %rax,%rdx
  0x00007fb1a087b0d3:   or     %r12,%rdi
  0x00007fb1a087b0d6:   add    %r14,%rax
  0x00007fb1a087b0d9:   add    %r15,%rdx
  0x00007fb1a087b0dc:   add    %r15,%rax
  0x00007fb1a087b0df:   add    %rdi,%rax
  0x00007fb1a087b0e2:   vmovdqu %ymm6,%ymm4
  0x00007fb1a087b0e6:   vmovdqu %ymm7,%ymm5
  0x00007fb1a087b0ea:   subq   $0x1,0x20(%rsp)
  0x00007fb1a087b0f0:   jne    Stub::sha512_implCompressMB+2660 0x00007fb1a087ada4
  0x00007fb1a087b0f6:   add    (%rsi),%rax
  0x00007fb1a087b0f9:   mov    %rax,(%rsi)
  0x00007fb1a087b0fc:   add    0x8(%rsi),%rbx
  0x00007fb1a087b100:   mov    %rbx,0x8(%rsi)
  0x00007fb1a087b104:   add    0x10(%rsi),%rcx
  0x00007fb1a087b108:   mov    %rcx,0x10(%rsi)
  0x00007fb1a087b10c:   add    0x18(%rsi),%r8
  0x00007fb1a087b110:   mov    %r8,0x18(%rsi)
  0x00007fb1a087b114:   add    0x20(%rsi),%rdx
  0x00007fb1a087b118:   mov    %rdx,0x20(%rsi)
  0x00007fb1a087b11c:   add    0x28(%rsi),%r9
  0x00007fb1a087b120:   mov    %r9,0x28(%rsi)
  0x00007fb1a087b124:   add    0x30(%rsi),%r10
  0x00007fb1a087b128:   mov    %r10,0x30(%rsi)
  0x00007fb1a087b12c:   add    0x38(%rsi),%r11
  0x00007fb1a087b130:   mov    %r11,0x38(%rsi)
  0x00007fb1a087b134:   mov    0x28(%rsp),%rdi
  0x00007fb1a087b139:   add    $0x80,%rdi
  0x00007fb1a087b140:   cmp    0x30(%rsp),%rdi
  0x00007fb1a087b145:   jne    Stub::sha512_implCompressMB+155 0x00007fb1a087a3db
  0x00007fb1a087b14b:   mov    0x40(%rsp),%rbp
  0x00007fb1a087b150:   mov    0x48(%rsp),%rbx
  0x00007fb1a087b155:   mov    0x50(%rsp),%r12
  0x00007fb1a087b15a:   mov    0x58(%rsp),%r13
  0x00007fb1a087b15f:   mov    0x60(%rsp),%r14
  0x00007fb1a087b164:   mov    0x68(%rsp),%r15
  0x00007fb1a087b169:   mov    0x38(%rsp),%rsp
  0x00007fb1a087b16e:   pop    %rcx
  0x00007fb1a087b16f:   pop    %rdx
  0x00007fb1a087b170:   mov    %rdx,%rax
  0x00007fb1a087b173:   cmp    %rcx,%rax
  0x00007fb1a087b176:   jae    Stub::sha512_implCompressMB+3648 0x00007fb1a087b180
  0x00007fb1a087b178:   add    $0x80,%rax
  0x00007fb1a087b17e:   jmp    Stub::sha512_implCompressMB+3635 0x00007fb1a087b173
  0x00007fb1a087b180:   vzeroupper 
  0x00007fb1a087b183:   leaveq 
  0x00007fb1a087b184:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_shuffle_base64 [0x00007fb1a087b1c0, 0x00007fb1a087b1e0] (32 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087b1c0:   add    $0x8050604,%eax
  0x00007fb1a087b1c5:   (bad)  
  0x00007fb1a087b1c6:   or     %ecx,(%rax)
  0x00007fb1a087b1c8:   or     (%rdx),%ecx
  0x00007fb1a087b1ca:   or     $0xb,%al
  0x00007fb1a087b1cc:   (bad)  
  0x00007fb1a087b1cd:   or     $0x10e0f,%eax
  0x00007fb1a087b1d2:   add    (%rcx),%al
  0x00007fb1a087b1d4:   add    $0x3,%al
  0x00007fb1a087b1d6:   add    $0x8060704,%eax
  0x00007fb1a087b1db:   (bad)  
  0x00007fb1a087b1dc:   or     (%rcx),%cl
  0x00007fb1a087b1de:   or     (%rdx),%ecx
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_input_mask_base64 [0x00007fb1a087b1e0, 0x00007fb1a087b200] (32 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087b1e0:   add    %al,(%rax)
  0x00007fb1a087b1e2:   add    %al,(%rax)
  0x00007fb1a087b1e4:   add    %al,(%rax)
  0x00007fb1a087b1e6:   add    %al,-0x80000000(%rax)
  0x00007fb1a087b1ec:   add    %al,(%rax)
  0x00007fb1a087b1ee:   add    %al,-0x80000000(%rax)
  0x00007fb1a087b1f4:   add    %al,(%rax)
  0x00007fb1a087b1f6:   add    %al,-0x80000000(%rax)
  0x00007fb1a087b1fc:   add    %al,(%rax)
  0x00007fb1a087b1fe:   .byte 0x0
  0x00007fb1a087b1ff:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_lut_base64 [0x00007fb1a087b200, 0x00007fb1a087b240] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087b200:   rex.B
  0x00007fb1a087b201:   rex.RXB cld 
  0x00007fb1a087b203:   cld    
  0x00007fb1a087b204:   cld    
  0x00007fb1a087b205:   cld    
  0x00007fb1a087b206:   cld    
  0x00007fb1a087b207:   cld    
  0x00007fb1a087b208:   cld    
  0x00007fb1a087b209:   cld    
  0x00007fb1a087b20a:   cld    
  0x00007fb1a087b20b:   cld    
  0x00007fb1a087b20c:   in     (%dx),%eax
  0x00007fb1a087b20d:   lock add %al,(%rax)
  0x00007fb1a087b210:   rex.B
  0x00007fb1a087b211:   rex.RXB cld 
  0x00007fb1a087b213:   cld    
  0x00007fb1a087b214:   cld    
  0x00007fb1a087b215:   cld    
  0x00007fb1a087b216:   cld    
  0x00007fb1a087b217:   cld    
  0x00007fb1a087b218:   cld    
  0x00007fb1a087b219:   cld    
  0x00007fb1a087b21a:   cld    
  0x00007fb1a087b21b:   cld    
  0x00007fb1a087b21c:   in     (%dx),%eax
  0x00007fb1a087b21d:   lock add %al,(%rax)
  0x00007fb1a087b220:   rex.B
  0x00007fb1a087b221:   rex.RXB cld 
  0x00007fb1a087b223:   cld    
  0x00007fb1a087b224:   cld    
  0x00007fb1a087b225:   cld    
  0x00007fb1a087b226:   cld    
  0x00007fb1a087b227:   cld    
  0x00007fb1a087b228:   cld    
  0x00007fb1a087b229:   cld    
  0x00007fb1a087b22a:   cld    
  0x00007fb1a087b22b:   cld    
  0x00007fb1a087b22c:   out    %eax,(%dx)
  0x00007fb1a087b22d:   and    %al,(%rax)
  0x00007fb1a087b22f:   add    %al,0x47(%rcx)
  0x00007fb1a087b232:   cld    
  0x00007fb1a087b233:   cld    
  0x00007fb1a087b234:   cld    
  0x00007fb1a087b235:   cld    
  0x00007fb1a087b236:   cld    
  0x00007fb1a087b237:   cld    
  0x00007fb1a087b238:   cld    
  0x00007fb1a087b239:   cld    
  0x00007fb1a087b23a:   cld    
  0x00007fb1a087b23b:   cld    
  0x00007fb1a087b23c:   out    %eax,(%dx)
  0x00007fb1a087b23d:   and    %al,(%rax)
  0x00007fb1a087b23f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::AVX2_tables_base64 [0x00007fb1a087b240, 0x00007fb1a087b2f0] (176 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087b240:   (bad)  
  0x00007fb1a087b241:   (bad)  
  0x00007fb1a087b242:   (bad)  
  0x00007fb1a087b243:   (bad)  
  0x00007fb1a087b244:   (bad)  
  0x00007fb1a087b245:   (bad)  
  0x00007fb1a087b246:   (bad)  
  0x00007fb1a087b247:   (bad)  
  0x00007fb1a087b248:   pop    %rdi
  0x00007fb1a087b249:   pop    %rdi
  0x00007fb1a087b24a:   pop    %rdi
  0x00007fb1a087b24b:   pop    %rdi
  0x00007fb1a087b24c:   pop    %rdi
  0x00007fb1a087b24d:   pop    %rdi
  0x00007fb1a087b24e:   pop    %rdi
  0x00007fb1a087b24f:   pop    %rdi
  0x00007fb1a087b250:   add    %al,(%rax)
  0x00007fb1a087b252:   add    %al,(%rax)
  0x00007fb1a087b254:   add    %eax,(%rax)
  0x00007fb1a087b256:   add    %al,(%rax)
  0x00007fb1a087b258:   add    (%rax),%al
  0x00007fb1a087b25a:   add    %al,(%rax)
  0x00007fb1a087b25c:   add    $0x0,%al
  0x00007fb1a087b25e:   add    %al,(%rax)
  0x00007fb1a087b260:   add    $0x6000000,%eax
  0x00007fb1a087b265:   add    %al,(%rax)
  0x00007fb1a087b267:   add    %bh,%bh
  0x00007fb1a087b269:   (bad)  
  0x00007fb1a087b26a:   (bad)  
  0x00007fb1a087b26b:   (bad)  
  0x00007fb1a087b26c:   (bad)  
  0x00007fb1a087b26d:   (bad)  
  0x00007fb1a087b26e:   (bad)  
  0x00007fb1a087b26f:   callq  *(%rax)
  0x00007fb1a087b271:   adc    %al,(%rcx)
  0x00007fb1a087b273:   add    (%rax,%rcx,1),%al
  0x00007fb1a087b276:   add    $0x8,%al
  0x00007fb1a087b278:   adc    %dl,(%rax)
  0x00007fb1a087b27a:   adc    %dl,(%rax)
  0x00007fb1a087b27c:   adc    %dl,(%rax)
  0x00007fb1a087b27e:   adc    %dl,(%rax)
  0x00007fb1a087b280:   adc    %dl,(%rax)
  0x00007fb1a087b282:   add    %eax,(%rdx)
  0x00007fb1a087b284:   add    $0x8,%al
  0x00007fb1a087b286:   add    $0x8,%al
  0x00007fb1a087b288:   adc    %dl,(%rax)
  0x00007fb1a087b28a:   adc    %dl,(%rax)
  0x00007fb1a087b28c:   adc    %dl,(%rax)
  0x00007fb1a087b28e:   adc    %dl,(%rax)
  0x00007fb1a087b290:   rex add %eax,0x1(%rax)
  0x00007fb1a087b294:   rex add %eax,0x1(%rax)
  0x00007fb1a087b298:   rex add %eax,0x1(%rax)
  0x00007fb1a087b29c:   rex add %eax,0x1(%rax)
  0x00007fb1a087b2a0:   rex add %eax,0x1(%rax)
  0x00007fb1a087b2a4:   rex add %eax,0x1(%rax)
  0x00007fb1a087b2a8:   rex add %eax,0x1(%rax)
  0x00007fb1a087b2ac:   rex add %eax,0x1(%rax)
  0x00007fb1a087b2b0:   add    %dl,(%rax)
  0x00007fb1a087b2b2:   add    %eax,(%rax)
  0x00007fb1a087b2b4:   add    %dl,(%rax)
  0x00007fb1a087b2b6:   add    %eax,(%rax)
  0x00007fb1a087b2b8:   add    %dl,(%rax)
  0x00007fb1a087b2ba:   add    %eax,(%rax)
  0x00007fb1a087b2bc:   add    %dl,(%rax)
  0x00007fb1a087b2be:   add    %eax,(%rax)
  0x00007fb1a087b2c0:   add    %dl,(%rax)
  0x00007fb1a087b2c2:   add    %eax,(%rax)
  0x00007fb1a087b2c4:   add    %dl,(%rax)
  0x00007fb1a087b2c6:   add    %eax,(%rax)
  0x00007fb1a087b2c8:   add    %dl,(%rax)
  0x00007fb1a087b2ca:   add    %eax,(%rax)
  0x00007fb1a087b2cc:   add    %dl,(%rax)
  0x00007fb1a087b2ce:   add    %eax,(%rax)
  0x00007fb1a087b2d0:   add    (%rcx),%al
  0x00007fb1a087b2d2:   add    %al,(%rsi)
  0x00007fb1a087b2d4:   add    $0x8090a04,%eax
  0x00007fb1a087b2d9:   (bad)  
  0x00007fb1a087b2da:   or     $0xffffff0c,%eax
  0x00007fb1a087b2df:   incl   (%rdx)
  0x00007fb1a087b2e1:   add    %eax,(%rax)
  0x00007fb1a087b2e3:   (bad)  
  0x00007fb1a087b2e4:   add    $0x8090a04,%eax
  0x00007fb1a087b2e9:   (bad)  
  0x00007fb1a087b2ea:   or     $0xffffff0c,%eax
  0x00007fb1a087b2ef:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::AVX2_tables_URL_base64 [0x00007fb1a087b340, 0x00007fb1a087b3c0] (128 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087b340:   adc    $0x11111111,%eax
  0x00007fb1a087b345:   adc    %edx,(%rcx)
  0x00007fb1a087b347:   adc    %edx,(%rcx)
  0x00007fb1a087b349:   adc    %edx,(%rbx)
  0x00007fb1a087b34b:   sbb    (%rbx),%bl
  0x00007fb1a087b34d:   sbb    (%rbx),%ebx
  0x00007fb1a087b34f:   sbb    0x11111111(%rip),%dl        # 0x00007fb1b198c466
  0x00007fb1a087b355:   adc    %edx,(%rcx)
  0x00007fb1a087b357:   adc    %edx,(%rcx)
  0x00007fb1a087b359:   adc    %edx,(%rbx)
  0x00007fb1a087b35b:   sbb    (%rbx),%bl
  0x00007fb1a087b35d:   sbb    (%rbx),%ebx
  0x00007fb1a087b35f:   sbb    (%rax),%al
  0x00007fb1a087b361:   adc    %dl,(%rbx)
  0x00007fb1a087b363:   add    $0xbf,%al
  0x00007fb1a087b365:   mov    $0xb9b9,%edi
  0x00007fb1a087b36a:   add    %al,(%rax)
  0x00007fb1a087b36c:   add    %al,(%rax)
  0x00007fb1a087b36e:   add    %al,(%rax)
  0x00007fb1a087b370:   add    %dl,(%rax)
  0x00007fb1a087b372:   adc    (%rdi,%rdi,4),%eax
  0x00007fb1a087b375:   mov    $0xb9b9,%edi
  0x00007fb1a087b37a:   add    %al,(%rax)
  0x00007fb1a087b37c:   add    %al,(%rax)
  0x00007fb1a087b37e:   add    %al,(%rax)
  0x00007fb1a087b380:   adc    $0x11111111,%eax
  0x00007fb1a087b385:   adc    %edx,(%rcx)
  0x00007fb1a087b387:   adc    %edx,(%rcx)
  0x00007fb1a087b389:   adc    %edx,(%rbx)
  0x00007fb1a087b38b:   sbb    (%rbx),%ebx
  0x00007fb1a087b38d:   sbb    (%rbx),%bl
  0x00007fb1a087b38f:   sbb    0x11111111(%rip),%edx        # 0x00007fb1b198c4a6
  0x00007fb1a087b395:   adc    %edx,(%rcx)
  0x00007fb1a087b397:   adc    %edx,(%rcx)
  0x00007fb1a087b399:   adc    %edx,(%rbx)
  0x00007fb1a087b39b:   sbb    (%rbx),%ebx
  0x00007fb1a087b39d:   sbb    (%rbx),%bl
  0x00007fb1a087b39f:   sbb    (%rax),%eax
  0x00007fb1a087b3a1:   adc    %dl,(%rcx)
  0x00007fb1a087b3a3:   add    $0xbf,%al
  0x00007fb1a087b3a5:   mov    $0xb9b9,%edi
  0x00007fb1a087b3aa:   add    %al,(%rax)
  0x00007fb1a087b3ac:   add    %al,(%rax)
  0x00007fb1a087b3ae:   add    %al,(%rax)
  0x00007fb1a087b3b0:   add    %dl,(%rax)
  0x00007fb1a087b3b2:   adc    %eax,(%rdi,%rdi,4)
  0x00007fb1a087b3b5:   mov    $0xb9b9,%edi
  0x00007fb1a087b3ba:   add    %al,(%rax)
  0x00007fb1a087b3bc:   add    %al,(%rax)
  0x00007fb1a087b3be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::encoding_table_base64 [0x00007fb1a087b3c0, 0x00007fb1a087b440] (128 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087b3c0:   rex.B
  0x00007fb1a087b3c1:   rex.X
  0x00007fb1a087b3c2:   rex.XB
  0x00007fb1a087b3c3:   rex.R
  0x00007fb1a087b3c4:   rex.RB
  0x00007fb1a087b3c5:   rex.RX
  0x00007fb1a087b3c6:   rex.RXB
  0x00007fb1a087b3c7:   rex.W
  0x00007fb1a087b3c8:   rex.WB
  0x00007fb1a087b3c9:   rex.WX
  0x00007fb1a087b3ca:   rex.WXB
  0x00007fb1a087b3cb:   rex.WR
  0x00007fb1a087b3cc:   rex.WRB
  0x00007fb1a087b3cd:   rex.WRX
  0x00007fb1a087b3ce:   rex.WRXB push %r8
  0x00007fb1a087b3d0:   push   %rcx
  0x00007fb1a087b3d1:   push   %rdx
  0x00007fb1a087b3d2:   push   %rbx
  0x00007fb1a087b3d3:   push   %rsp
  0x00007fb1a087b3d4:   push   %rbp
  0x00007fb1a087b3d5:   push   %rsi
  0x00007fb1a087b3d6:   push   %rdi
  0x00007fb1a087b3d7:   pop    %rax
  0x00007fb1a087b3d8:   pop    %rcx
  0x00007fb1a087b3d9:   pop    %rdx
  0x00007fb1a087b3da:   (bad)  
  0x00007fb1a087b3db:   (bad)  {%k5}
  0x00007fb1a087b3e0:   addr32 pushq $0x6c6b6a69
  0x00007fb1a087b3e6:   insl   (%dx),%es:(%rdi)
  0x00007fb1a087b3e7:   outsb  %ds:(%rsi),(%dx)
  0x00007fb1a087b3e8:   outsl  %ds:(%rsi),(%dx)
  0x00007fb1a087b3e9:   jo     Stub::<unknown> 0x00007fb1a087b45c
  0x00007fb1a087b3eb:   jb     Stub::<unknown> 0x00007fb1a087b460
  0x00007fb1a087b3ed:   je     Stub::<unknown> 0x00007fb1a087b464
  0x00007fb1a087b3ef:   jbe    Stub::<unknown> 0x00007fb1a087b468
  0x00007fb1a087b3f1:   js     Stub::<unknown> 0x00007fb1a087b46c
  0x00007fb1a087b3f3:   jp     Stub::encoding_table_base64+101 0x00007fb1a087b425
  0x00007fb1a087b3f5:   xor    %esi,(%rdx)
  0x00007fb1a087b3f7:   xor    0x39383736(,%rsi,1),%esi
  0x00007fb1a087b3fe:   sub    (%rdi),%ebp
  0x00007fb1a087b400:   rex.B
  0x00007fb1a087b401:   rex.X
  0x00007fb1a087b402:   rex.XB
  0x00007fb1a087b403:   rex.R
  0x00007fb1a087b404:   rex.RB
  0x00007fb1a087b405:   rex.RX
  0x00007fb1a087b406:   rex.RXB
  0x00007fb1a087b407:   rex.W
  0x00007fb1a087b408:   rex.WB
  0x00007fb1a087b409:   rex.WX
  0x00007fb1a087b40a:   rex.WXB
  0x00007fb1a087b40b:   rex.WR
  0x00007fb1a087b40c:   rex.WRB
  0x00007fb1a087b40d:   rex.WRX
  0x00007fb1a087b40e:   rex.WRXB push %r8
  0x00007fb1a087b410:   push   %rcx
  0x00007fb1a087b411:   push   %rdx
  0x00007fb1a087b412:   push   %rbx
  0x00007fb1a087b413:   push   %rsp
  0x00007fb1a087b414:   push   %rbp
  0x00007fb1a087b415:   push   %rsi
  0x00007fb1a087b416:   push   %rdi
  0x00007fb1a087b417:   pop    %rax
  0x00007fb1a087b418:   pop    %rcx
  0x00007fb1a087b419:   pop    %rdx
  0x00007fb1a087b41a:   (bad)  
  0x00007fb1a087b41b:   (bad)  {%k5}
  0x00007fb1a087b420:   addr32 pushq $0x6c6b6a69
  0x00007fb1a087b426:   insl   (%dx),%es:(%rdi)
  0x00007fb1a087b427:   outsb  %ds:(%rsi),(%dx)
  0x00007fb1a087b428:   outsl  %ds:(%rsi),(%dx)
  0x00007fb1a087b429:   jo     Stub::<unknown> 0x00007fb1a087b49c
  0x00007fb1a087b42b:   jb     Stub::<unknown> 0x00007fb1a087b4a0
  0x00007fb1a087b42d:   je     Stub::<unknown> 0x00007fb1a087b4a4
  0x00007fb1a087b42f:   jbe    Stub::<unknown> 0x00007fb1a087b4a8
  0x00007fb1a087b431:   js     Stub::<unknown> 0x00007fb1a087b4ac
  0x00007fb1a087b433:   jp     Stub::<unknown> 0x00007fb1a087b465
  0x00007fb1a087b435:   xor    %esi,(%rdx)
  0x00007fb1a087b437:   xor    0x39383736(,%rsi,1),%esi
  0x00007fb1a087b43e:   .byte 0x2d
  0x00007fb1a087b43f:   pop    %rdi
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::decoding_table_base64 [0x00007fb1a087b440, 0x00007fb1a087b640] (512 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087b440:   (bad)  
  0x00007fb1a087b441:   (bad)  
  0x00007fb1a087b442:   (bad)  
  0x00007fb1a087b443:   (bad)  
  0x00007fb1a087b444:   (bad)  
  0x00007fb1a087b445:   (bad)  
  0x00007fb1a087b446:   (bad)  
  0x00007fb1a087b447:   (bad)  
  0x00007fb1a087b448:   (bad)  
  0x00007fb1a087b449:   (bad)  
  0x00007fb1a087b44a:   (bad)  
  0x00007fb1a087b44b:   (bad)  
  0x00007fb1a087b44c:   (bad)  
  0x00007fb1a087b44d:   (bad)  
  0x00007fb1a087b44e:   (bad)  
  0x00007fb1a087b44f:   (bad)  
  0x00007fb1a087b450:   (bad)  
  0x00007fb1a087b451:   (bad)  
  0x00007fb1a087b452:   (bad)  
  0x00007fb1a087b453:   (bad)  
  0x00007fb1a087b454:   (bad)  
  0x00007fb1a087b455:   (bad)  
  0x00007fb1a087b456:   (bad)  
  0x00007fb1a087b457:   (bad)  
  0x00007fb1a087b458:   (bad)  
  0x00007fb1a087b459:   (bad)  
  0x00007fb1a087b45a:   (bad)  
  0x00007fb1a087b45b:   (bad)  
  0x00007fb1a087b45c:   (bad)  
  0x00007fb1a087b45d:   (bad)  
  0x00007fb1a087b45e:   (bad)  
  0x00007fb1a087b45f:   (bad)  
  0x00007fb1a087b460:   (bad)  
  0x00007fb1a087b461:   (bad)  
  0x00007fb1a087b462:   (bad)  
  0x00007fb1a087b463:   (bad)  
  0x00007fb1a087b464:   (bad)  
  0x00007fb1a087b465:   (bad)  
  0x00007fb1a087b466:   (bad)  
  0x00007fb1a087b467:   (bad)  
  0x00007fb1a087b468:   (bad)  
  0x00007fb1a087b469:   (bad)  
  0x00007fb1a087b46a:   (bad)  
  0x00007fb1a087b46b:   ds (bad) 
  0x00007fb1a087b46d:   (bad)  
  0x00007fb1a087b46e:   (bad)  
  0x00007fb1a087b46f:   (bad)  
  0x00007fb1a087b470:   xor    $0x35,%al
  0x00007fb1a087b472:   ss (bad) 
  0x00007fb1a087b474:   cmp    %bh,(%rcx)
  0x00007fb1a087b476:   cmp    (%rbx),%bh
  0x00007fb1a087b478:   cmp    $0x3d,%al
  0x00007fb1a087b47a:   (bad)  
  0x00007fb1a087b47b:   (bad)  
  0x00007fb1a087b47c:   (bad)  
  0x00007fb1a087b47d:   (bad)  
  0x00007fb1a087b47e:   (bad)  
  0x00007fb1a087b47f:   (bad)  
  0x00007fb1a087b480:   incl   (%rax)
  0x00007fb1a087b482:   add    %eax,(%rdx)
  0x00007fb1a087b484:   add    0x9080706(,%rax,1),%eax
  0x00007fb1a087b48b:   or     (%rbx),%cl
  0x00007fb1a087b48d:   or     $0xd,%al
  0x00007fb1a087b48f:   (bad)  
  0x00007fb1a087b490:   movups (%rcx),%xmm2
  0x00007fb1a087b493:   adc    (%rbx),%dl
  0x00007fb1a087b495:   adc    $0x15,%al
  0x00007fb1a087b497:   (bad)  
  0x00007fb1a087b498:   (bad)  
  0x00007fb1a087b499:   sbb    %bl,(%rcx)
  0x00007fb1a087b49b:   (bad)  
  0x00007fb1a087b49c:   (bad)  
  0x00007fb1a087b49d:   (bad)  
  0x00007fb1a087b49e:   (bad)  
  0x00007fb1a087b49f:   (bad)  
  0x00007fb1a087b4a0:   lcall  *(%rdx)
  0x00007fb1a087b4a2:   sbb    0x21201f1e(,%rbx,1),%ebx
  0x00007fb1a087b4a9:   and    (%rbx),%ah
  0x00007fb1a087b4ab:   and    $0x25,%al
  0x00007fb1a087b4ad:   es (bad) 
  0x00007fb1a087b4af:   sub    %ch,(%rcx)
  0x00007fb1a087b4b1:   sub    (%rbx),%ch
  0x00007fb1a087b4b3:   sub    $0x2d,%al
  0x00007fb1a087b4b5:   cs (bad) 
  0x00007fb1a087b4b7:   xor    %dh,(%rcx)
  0x00007fb1a087b4b9:   xor    (%rbx),%dh
  0x00007fb1a087b4bb:   (bad)  
  0x00007fb1a087b4bc:   (bad)  
  0x00007fb1a087b4bd:   (bad)  
  0x00007fb1a087b4be:   (bad)  
  0x00007fb1a087b4bf:   (bad)  
  0x00007fb1a087b4c0:   (bad)  
  0x00007fb1a087b4c1:   (bad)  
  0x00007fb1a087b4c2:   (bad)  
  0x00007fb1a087b4c3:   (bad)  
  0x00007fb1a087b4c4:   (bad)  
  0x00007fb1a087b4c5:   (bad)  
  0x00007fb1a087b4c6:   (bad)  
  0x00007fb1a087b4c7:   (bad)  
  0x00007fb1a087b4c8:   (bad)  
  0x00007fb1a087b4c9:   (bad)  
  0x00007fb1a087b4ca:   (bad)  
  0x00007fb1a087b4cb:   (bad)  
  0x00007fb1a087b4cc:   (bad)  
  0x00007fb1a087b4cd:   (bad)  
  0x00007fb1a087b4ce:   (bad)  
  0x00007fb1a087b4cf:   (bad)  
  0x00007fb1a087b4d0:   (bad)  
  0x00007fb1a087b4d1:   (bad)  
  0x00007fb1a087b4d2:   (bad)  
  0x00007fb1a087b4d3:   (bad)  
  0x00007fb1a087b4d4:   (bad)  
  0x00007fb1a087b4d5:   (bad)  
  0x00007fb1a087b4d6:   (bad)  
  0x00007fb1a087b4d7:   (bad)  
  0x00007fb1a087b4d8:   (bad)  
  0x00007fb1a087b4d9:   (bad)  
  0x00007fb1a087b4da:   (bad)  
  0x00007fb1a087b4db:   (bad)  
  0x00007fb1a087b4dc:   (bad)  
  0x00007fb1a087b4dd:   (bad)  
  0x00007fb1a087b4de:   (bad)  
  0x00007fb1a087b4df:   (bad)  
  0x00007fb1a087b4e0:   (bad)  
  0x00007fb1a087b4e1:   (bad)  
  0x00007fb1a087b4e2:   (bad)  
  0x00007fb1a087b4e3:   (bad)  
  0x00007fb1a087b4e4:   (bad)  
  0x00007fb1a087b4e5:   (bad)  
  0x00007fb1a087b4e6:   (bad)  
  0x00007fb1a087b4e7:   (bad)  
  0x00007fb1a087b4e8:   (bad)  
  0x00007fb1a087b4e9:   (bad)  
  0x00007fb1a087b4ea:   (bad)  
  0x00007fb1a087b4eb:   (bad)  
  0x00007fb1a087b4ec:   (bad)  
  0x00007fb1a087b4ed:   (bad)  
  0x00007fb1a087b4ee:   (bad)  
  0x00007fb1a087b4ef:   (bad)  
  0x00007fb1a087b4f0:   (bad)  
  0x00007fb1a087b4f1:   (bad)  
  0x00007fb1a087b4f2:   (bad)  
  0x00007fb1a087b4f3:   (bad)  
  0x00007fb1a087b4f4:   (bad)  
  0x00007fb1a087b4f5:   (bad)  
  0x00007fb1a087b4f6:   (bad)  
  0x00007fb1a087b4f7:   (bad)  
  0x00007fb1a087b4f8:   (bad)  
  0x00007fb1a087b4f9:   (bad)  
  0x00007fb1a087b4fa:   (bad)  
  0x00007fb1a087b4fb:   (bad)  
  0x00007fb1a087b4fc:   (bad)  
  0x00007fb1a087b4fd:   (bad)  
  0x00007fb1a087b4fe:   (bad)  
  0x00007fb1a087b4ff:   (bad)  
  0x00007fb1a087b500:   (bad)  
  0x00007fb1a087b501:   (bad)  
  0x00007fb1a087b502:   (bad)  
  0x00007fb1a087b503:   (bad)  
  0x00007fb1a087b504:   (bad)  
  0x00007fb1a087b505:   (bad)  
  0x00007fb1a087b506:   (bad)  
  0x00007fb1a087b507:   (bad)  
  0x00007fb1a087b508:   (bad)  
  0x00007fb1a087b509:   (bad)  
  0x00007fb1a087b50a:   (bad)  
  0x00007fb1a087b50b:   (bad)  
  0x00007fb1a087b50c:   (bad)  
  0x00007fb1a087b50d:   (bad)  
  0x00007fb1a087b50e:   (bad)  
  0x00007fb1a087b50f:   (bad)  
  0x00007fb1a087b510:   (bad)  
  0x00007fb1a087b511:   (bad)  
  0x00007fb1a087b512:   (bad)  
  0x00007fb1a087b513:   (bad)  
  0x00007fb1a087b514:   (bad)  
  0x00007fb1a087b515:   (bad)  
  0x00007fb1a087b516:   (bad)  
  0x00007fb1a087b517:   (bad)  
  0x00007fb1a087b518:   (bad)  
  0x00007fb1a087b519:   (bad)  
  0x00007fb1a087b51a:   (bad)  
  0x00007fb1a087b51b:   (bad)  
  0x00007fb1a087b51c:   (bad)  
  0x00007fb1a087b51d:   (bad)  
  0x00007fb1a087b51e:   (bad)  
  0x00007fb1a087b51f:   (bad)  
  0x00007fb1a087b520:   (bad)  
  0x00007fb1a087b521:   (bad)  
  0x00007fb1a087b522:   (bad)  
  0x00007fb1a087b523:   (bad)  
  0x00007fb1a087b524:   (bad)  
  0x00007fb1a087b525:   (bad)  
  0x00007fb1a087b526:   (bad)  
  0x00007fb1a087b527:   (bad)  
  0x00007fb1a087b528:   (bad)  
  0x00007fb1a087b529:   (bad)  
  0x00007fb1a087b52a:   (bad)  
  0x00007fb1a087b52b:   (bad)  
  0x00007fb1a087b52c:   (bad)  
  0x00007fb1a087b52d:   (bad)  
  0x00007fb1a087b52e:   (bad)  
  0x00007fb1a087b52f:   (bad)  
  0x00007fb1a087b530:   (bad)  
  0x00007fb1a087b531:   (bad)  
  0x00007fb1a087b532:   (bad)  
  0x00007fb1a087b533:   (bad)  
  0x00007fb1a087b534:   (bad)  
  0x00007fb1a087b535:   (bad)  
  0x00007fb1a087b536:   (bad)  
  0x00007fb1a087b537:   (bad)  
  0x00007fb1a087b538:   (bad)  
  0x00007fb1a087b539:   (bad)  
  0x00007fb1a087b53a:   (bad)  
  0x00007fb1a087b53b:   (bad)  
  0x00007fb1a087b53c:   (bad)  
  0x00007fb1a087b53d:   (bad)  
  0x00007fb1a087b53e:   (bad)  
  0x00007fb1a087b53f:   (bad)  
  0x00007fb1a087b540:   (bad)  
  0x00007fb1a087b541:   (bad)  
  0x00007fb1a087b542:   (bad)  
  0x00007fb1a087b543:   (bad)  
  0x00007fb1a087b544:   (bad)  
  0x00007fb1a087b545:   (bad)  
  0x00007fb1a087b546:   (bad)  
  0x00007fb1a087b547:   (bad)  
  0x00007fb1a087b548:   (bad)  
  0x00007fb1a087b549:   (bad)  
  0x00007fb1a087b54a:   (bad)  
  0x00007fb1a087b54b:   (bad)  
  0x00007fb1a087b54c:   (bad)  
  0x00007fb1a087b54d:   (bad)  
  0x00007fb1a087b54e:   (bad)  
  0x00007fb1a087b54f:   (bad)  
  0x00007fb1a087b550:   (bad)  
  0x00007fb1a087b551:   (bad)  
  0x00007fb1a087b552:   (bad)  
  0x00007fb1a087b553:   (bad)  
  0x00007fb1a087b554:   (bad)  
  0x00007fb1a087b555:   (bad)  
  0x00007fb1a087b556:   (bad)  
  0x00007fb1a087b557:   (bad)  
  0x00007fb1a087b558:   (bad)  
  0x00007fb1a087b559:   (bad)  
  0x00007fb1a087b55a:   (bad)  
  0x00007fb1a087b55b:   (bad)  
  0x00007fb1a087b55c:   (bad)  
  0x00007fb1a087b55d:   (bad)  
  0x00007fb1a087b55e:   (bad)  
  0x00007fb1a087b55f:   (bad)  
  0x00007fb1a087b560:   (bad)  
  0x00007fb1a087b561:   (bad)  
  0x00007fb1a087b562:   (bad)  
  0x00007fb1a087b563:   (bad)  
  0x00007fb1a087b564:   (bad)  
  0x00007fb1a087b565:   (bad)  
  0x00007fb1a087b566:   (bad)  
  0x00007fb1a087b567:   (bad)  
  0x00007fb1a087b568:   (bad)  
  0x00007fb1a087b569:   (bad)  
  0x00007fb1a087b56a:   (bad)  
  0x00007fb1a087b56b:   (bad)  
  0x00007fb1a087b56c:   (bad)  
  0x00007fb1a087b56d:   ds (bad) 
  0x00007fb1a087b56f:   pushq  0x39383736(,%rsi,1)
  0x00007fb1a087b576:   cmp    (%rbx),%bh
  0x00007fb1a087b578:   cmp    $0x3d,%al
  0x00007fb1a087b57a:   (bad)  
  0x00007fb1a087b57b:   (bad)  
  0x00007fb1a087b57c:   (bad)  
  0x00007fb1a087b57d:   (bad)  
  0x00007fb1a087b57e:   (bad)  
  0x00007fb1a087b57f:   (bad)  
  0x00007fb1a087b580:   incl   (%rax)
  0x00007fb1a087b582:   add    %eax,(%rdx)
  0x00007fb1a087b584:   add    0x9080706(,%rax,1),%eax
  0x00007fb1a087b58b:   or     (%rbx),%cl
  0x00007fb1a087b58d:   or     $0xd,%al
  0x00007fb1a087b58f:   (bad)  
  0x00007fb1a087b590:   movups (%rcx),%xmm2
  0x00007fb1a087b593:   adc    (%rbx),%dl
  0x00007fb1a087b595:   adc    $0x15,%al
  0x00007fb1a087b597:   (bad)  
  0x00007fb1a087b598:   (bad)  
  0x00007fb1a087b599:   sbb    %bl,(%rcx)
  0x00007fb1a087b59b:   (bad)  
  0x00007fb1a087b59c:   (bad)  
  0x00007fb1a087b59d:   (bad)  
  0x00007fb1a087b59e:   (bad)  
  0x00007fb1a087b59f:   (bad)  
  0x00007fb1a087b5a0:   lcall  *(%rdx)
  0x00007fb1a087b5a2:   sbb    0x21201f1e(,%rbx,1),%ebx
  0x00007fb1a087b5a9:   and    (%rbx),%ah
  0x00007fb1a087b5ab:   and    $0x25,%al
  0x00007fb1a087b5ad:   es (bad) 
  0x00007fb1a087b5af:   sub    %ch,(%rcx)
  0x00007fb1a087b5b1:   sub    (%rbx),%ch
  0x00007fb1a087b5b3:   sub    $0x2d,%al
  0x00007fb1a087b5b5:   cs (bad) 
  0x00007fb1a087b5b7:   xor    %dh,(%rcx)
  0x00007fb1a087b5b9:   xor    (%rbx),%dh
  0x00007fb1a087b5bb:   (bad)  
  0x00007fb1a087b5bc:   (bad)  
  0x00007fb1a087b5bd:   (bad)  
  0x00007fb1a087b5be:   (bad)  
  0x00007fb1a087b5bf:   (bad)  
  0x00007fb1a087b5c0:   (bad)  
  0x00007fb1a087b5c1:   (bad)  
  0x00007fb1a087b5c2:   (bad)  
  0x00007fb1a087b5c3:   (bad)  
  0x00007fb1a087b5c4:   (bad)  
  0x00007fb1a087b5c5:   (bad)  
  0x00007fb1a087b5c6:   (bad)  
  0x00007fb1a087b5c7:   (bad)  
  0x00007fb1a087b5c8:   (bad)  
  0x00007fb1a087b5c9:   (bad)  
  0x00007fb1a087b5ca:   (bad)  
  0x00007fb1a087b5cb:   (bad)  
  0x00007fb1a087b5cc:   (bad)  
  0x00007fb1a087b5cd:   (bad)  
  0x00007fb1a087b5ce:   (bad)  
  0x00007fb1a087b5cf:   (bad)  
  0x00007fb1a087b5d0:   (bad)  
  0x00007fb1a087b5d1:   (bad)  
  0x00007fb1a087b5d2:   (bad)  
  0x00007fb1a087b5d3:   (bad)  
  0x00007fb1a087b5d4:   (bad)  
  0x00007fb1a087b5d5:   (bad)  
  0x00007fb1a087b5d6:   (bad)  
  0x00007fb1a087b5d7:   (bad)  
  0x00007fb1a087b5d8:   (bad)  
  0x00007fb1a087b5d9:   (bad)  
  0x00007fb1a087b5da:   (bad)  
  0x00007fb1a087b5db:   (bad)  
  0x00007fb1a087b5dc:   (bad)  
  0x00007fb1a087b5dd:   (bad)  
  0x00007fb1a087b5de:   (bad)  
  0x00007fb1a087b5df:   (bad)  
  0x00007fb1a087b5e0:   (bad)  
  0x00007fb1a087b5e1:   (bad)  
  0x00007fb1a087b5e2:   (bad)  
  0x00007fb1a087b5e3:   (bad)  
  0x00007fb1a087b5e4:   (bad)  
  0x00007fb1a087b5e5:   (bad)  
  0x00007fb1a087b5e6:   (bad)  
  0x00007fb1a087b5e7:   (bad)  
  0x00007fb1a087b5e8:   (bad)  
  0x00007fb1a087b5e9:   (bad)  
  0x00007fb1a087b5ea:   (bad)  
  0x00007fb1a087b5eb:   (bad)  
  0x00007fb1a087b5ec:   (bad)  
  0x00007fb1a087b5ed:   (bad)  
  0x00007fb1a087b5ee:   (bad)  
  0x00007fb1a087b5ef:   (bad)  
  0x00007fb1a087b5f0:   (bad)  
  0x00007fb1a087b5f1:   (bad)  
  0x00007fb1a087b5f2:   (bad)  
  0x00007fb1a087b5f3:   (bad)  
  0x00007fb1a087b5f4:   (bad)  
  0x00007fb1a087b5f5:   (bad)  
  0x00007fb1a087b5f6:   (bad)  
  0x00007fb1a087b5f7:   (bad)  
  0x00007fb1a087b5f8:   (bad)  
  0x00007fb1a087b5f9:   (bad)  
  0x00007fb1a087b5fa:   (bad)  
  0x00007fb1a087b5fb:   (bad)  
  0x00007fb1a087b5fc:   (bad)  
  0x00007fb1a087b5fd:   (bad)  
  0x00007fb1a087b5fe:   (bad)  
  0x00007fb1a087b5ff:   (bad)  
  0x00007fb1a087b600:   (bad)  
  0x00007fb1a087b601:   (bad)  
  0x00007fb1a087b602:   (bad)  
  0x00007fb1a087b603:   (bad)  
  0x00007fb1a087b604:   (bad)  
  0x00007fb1a087b605:   (bad)  
  0x00007fb1a087b606:   (bad)  
  0x00007fb1a087b607:   (bad)  
  0x00007fb1a087b608:   (bad)  
  0x00007fb1a087b609:   (bad)  
  0x00007fb1a087b60a:   (bad)  
  0x00007fb1a087b60b:   (bad)  
  0x00007fb1a087b60c:   (bad)  
  0x00007fb1a087b60d:   (bad)  
  0x00007fb1a087b60e:   (bad)  
  0x00007fb1a087b60f:   (bad)  
  0x00007fb1a087b610:   (bad)  
  0x00007fb1a087b611:   (bad)  
  0x00007fb1a087b612:   (bad)  
  0x00007fb1a087b613:   (bad)  
  0x00007fb1a087b614:   (bad)  
  0x00007fb1a087b615:   (bad)  
  0x00007fb1a087b616:   (bad)  
  0x00007fb1a087b617:   (bad)  
  0x00007fb1a087b618:   (bad)  
  0x00007fb1a087b619:   (bad)  
  0x00007fb1a087b61a:   (bad)  
  0x00007fb1a087b61b:   (bad)  
  0x00007fb1a087b61c:   (bad)  
  0x00007fb1a087b61d:   (bad)  
  0x00007fb1a087b61e:   (bad)  
  0x00007fb1a087b61f:   (bad)  
  0x00007fb1a087b620:   (bad)  
  0x00007fb1a087b621:   (bad)  
  0x00007fb1a087b622:   (bad)  
  0x00007fb1a087b623:   (bad)  
  0x00007fb1a087b624:   (bad)  
  0x00007fb1a087b625:   (bad)  
  0x00007fb1a087b626:   (bad)  
  0x00007fb1a087b627:   (bad)  
  0x00007fb1a087b628:   (bad)  
  0x00007fb1a087b629:   (bad)  
  0x00007fb1a087b62a:   (bad)  
  0x00007fb1a087b62b:   (bad)  
  0x00007fb1a087b62c:   (bad)  
  0x00007fb1a087b62d:   (bad)  
  0x00007fb1a087b62e:   (bad)  
  0x00007fb1a087b62f:   (bad)  
  0x00007fb1a087b630:   (bad)  
  0x00007fb1a087b631:   (bad)  
  0x00007fb1a087b632:   (bad)  
  0x00007fb1a087b633:   (bad)  
  0x00007fb1a087b634:   (bad)  
  0x00007fb1a087b635:   (bad)  
  0x00007fb1a087b636:   (bad)  
  0x00007fb1a087b637:   (bad)  
  0x00007fb1a087b638:   (bad)  
  0x00007fb1a087b639:   (bad)  
  0x00007fb1a087b63a:   (bad)  
  0x00007fb1a087b63b:   (bad)  
  0x00007fb1a087b63c:   (bad)  
  0x00007fb1a087b63d:   (bad)  
  0x00007fb1a087b63e:   (bad)  
  0x00007fb1a087b63f:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::implEncode [0x00007fb1a087b640, 0x00007fb1a087b856] (534 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087b640:   push   %rbp
  0x00007fb1a087b641:   mov    %rsp,%rbp
  0x00007fb1a087b644:   push   %r12
  0x00007fb1a087b646:   push   %r13
  0x00007fb1a087b648:   push   %r14
  0x00007fb1a087b64a:   push   %r15
  0x00007fb1a087b64c:   mov    %edx,%r14d
  0x00007fb1a087b64f:   sub    %esi,%r14d
  0x00007fb1a087b652:   cmp    $0x0,%r14d
  0x00007fb1a087b656:   jle    Stub::implEncode+524 0x00007fb1a087b84c
  0x00007fb1a087b65c:   cmp    $0x1f,%r14d
  0x00007fb1a087b660:   jbe    Stub::implEncode+365 0x00007fb1a087b7ad
  0x00007fb1a087b666:   vmovdqu -0x4ae(%rip),%ymm9        # Stub::avx2_shuffle_base64
  0x00007fb1a087b66e:   mov    $0xfc0fc00,%eax
  0x00007fb1a087b673:   vmovd  %eax,%xmm8
  0x00007fb1a087b677:   vmovdqu -0x49f(%rip),%ymm1        # Stub::avx2_input_mask_base64
  0x00007fb1a087b67f:   vpbroadcastd %xmm8,%ymm8
  0x00007fb1a087b684:   mov    $0x4000040,%eax
  0x00007fb1a087b689:   sub    $0x18,%r14d
  0x00007fb1a087b68d:   vmovd  %eax,%xmm7
  0x00007fb1a087b691:   vpbroadcastd %xmm7,%ymm7
  0x00007fb1a087b696:   vpmaskmovd -0x4(%rdi,%rsi,1),%ymm1,%ymm1
  0x00007fb1a087b69d:   vpshufb %ymm9,%ymm1,%ymm1
  0x00007fb1a087b6a2:   add    $0x18,%esi
  0x00007fb1a087b6a5:   mov    $0x3f03f0,%eax
  0x00007fb1a087b6aa:   vmovd  %eax,%xmm6
  0x00007fb1a087b6ae:   vpbroadcastd %xmm6,%ymm6
  0x00007fb1a087b6b3:   mov    $0x1000010,%eax
  0x00007fb1a087b6b8:   vmovd  %eax,%xmm5
  0x00007fb1a087b6bc:   vpbroadcastd %xmm5,%ymm5
  0x00007fb1a087b6c1:   vpand  %ymm1,%ymm8,%ymm0
  0x00007fb1a087b6c5:   mov    $0x19191919,%eax
  0x00007fb1a087b6ca:   vmovd  %eax,%xmm3
  0x00007fb1a087b6ce:   vpbroadcastd %xmm3,%ymm3
  0x00007fb1a087b6d3:   mov    $0x33333333,%eax
  0x00007fb1a087b6d8:   vmovd  %eax,%xmm4
  0x00007fb1a087b6dc:   vpbroadcastd %xmm4,%ymm4
  0x00007fb1a087b6e1:   vpmulhuw %ymm7,%ymm0,%ymm2
  0x00007fb1a087b6e5:   vpand  %ymm1,%ymm6,%ymm0
  0x00007fb1a087b6e9:   vpmullw %ymm0,%ymm5,%ymm0
  0x00007fb1a087b6ed:   vpor   %ymm2,%ymm0,%ymm0
  0x00007fb1a087b6f1:   vpcmpgtb %ymm3,%ymm0,%ymm2
  0x00007fb1a087b6f5:   vpsubusb %ymm4,%ymm0,%ymm1
  0x00007fb1a087b6f9:   vpsubb %ymm2,%ymm1,%ymm1
  0x00007fb1a087b6fd:   movabs $0x7fb1a087b200,%r11
  0x00007fb1a087b707:   mov    %r9d,%r15d
  0x00007fb1a087b70a:   shl    $0x5,%r15d
  0x00007fb1a087b70e:   vmovdqu (%r11,%r15,1),%ymm2
  0x00007fb1a087b714:   vpshufb %ymm1,%ymm2,%ymm1
  0x00007fb1a087b719:   vpaddb %ymm0,%ymm1,%ymm0
  0x00007fb1a087b71d:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007fb1a087b723:   add    $0x20,%r8d
  0x00007fb1a087b727:   cmp    $0x1f,%r14d
  0x00007fb1a087b72b:   jbe    Stub::implEncode+365 0x00007fb1a087b7ad
  0x00007fb1a087b731:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087b73c:   data16 data16 xchg %ax,%ax
  0x00007fb1a087b740:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087b74b:   data16 data16 xchg %ax,%ax
  0x00007fb1a087b74f:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087b75a:   data16 data16 xchg %ax,%ax
  0x00007fb1a087b75e:   xchg   %ax,%ax
  0x00007fb1a087b760:   vmovdqu -0x4(%rdi,%rsi,1),%ymm1
  0x00007fb1a087b766:   sub    $0x18,%r14d
  0x00007fb1a087b76a:   add    $0x18,%esi
  0x00007fb1a087b76d:   vpshufb %ymm9,%ymm1,%ymm1
  0x00007fb1a087b772:   vpand  %ymm1,%ymm8,%ymm0
  0x00007fb1a087b776:   vpmulhuw %ymm7,%ymm0,%ymm10
  0x00007fb1a087b77a:   vpand  %ymm1,%ymm6,%ymm0
  0x00007fb1a087b77e:   vpmullw %ymm0,%ymm5,%ymm0
  0x00007fb1a087b782:   vpor   %ymm10,%ymm0,%ymm0
  0x00007fb1a087b787:   vpcmpgtb %ymm3,%ymm0,%ymm10
  0x00007fb1a087b78b:   vpsubusb %ymm4,%ymm0,%ymm1
  0x00007fb1a087b78f:   vpsubb %ymm10,%ymm1,%ymm1
  0x00007fb1a087b794:   vpshufb %ymm1,%ymm2,%ymm1
  0x00007fb1a087b799:   vpaddb %ymm0,%ymm1,%ymm0
  0x00007fb1a087b79d:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007fb1a087b7a3:   add    $0x20,%r8d
  0x00007fb1a087b7a7:   cmp    $0x1f,%r14d
  0x00007fb1a087b7ab:   ja     Stub::implEncode+288 0x00007fb1a087b760
  0x00007fb1a087b7ad:   vzeroupper 
  0x00007fb1a087b7b0:   cmp    $0x3,%r14d
  0x00007fb1a087b7b4:   jb     Stub::implEncode+524 0x00007fb1a087b84c
  0x00007fb1a087b7ba:   movabs $0x7fb1a087b3c0,%r11
  0x00007fb1a087b7c4:   mov    %r9d,%r15d
  0x00007fb1a087b7c7:   shl    $0x6,%r15d
  0x00007fb1a087b7cb:   add    %r15,%r11
  0x00007fb1a087b7ce:   movzbl (%rdi,%rsi,1),%r15d
  0x00007fb1a087b7d3:   movzbl 0x1(%rdi,%rsi,1),%r10d
  0x00007fb1a087b7d9:   movzbl 0x2(%rdi,%rsi,1),%r13d
  0x00007fb1a087b7df:   mov    %r10d,%eax
  0x00007fb1a087b7e2:   shl    $0x18,%r10d
  0x00007fb1a087b7e6:   or     %r10d,%eax
  0x00007fb1a087b7e9:   sub    $0x3,%r14d
  0x00007fb1a087b7ed:   shl    $0x8,%r15d
  0x00007fb1a087b7f1:   shl    $0x10,%r13d
  0x00007fb1a087b7f5:   or     %r15d,%eax
  0x00007fb1a087b7f8:   add    $0x3,%esi
  0x00007fb1a087b7fb:   or     %r13d,%eax
  0x00007fb1a087b7fe:   shr    $0x10,%r13d
  0x00007fb1a087b802:   and    $0x3f,%r13d
  0x00007fb1a087b806:   shr    $0xa,%r15d
  0x00007fb1a087b80a:   movzbl (%r11,%r13,1),%r13d
  0x00007fb1a087b80f:   movzbl (%r11,%r15,1),%r15d
  0x00007fb1a087b814:   mov    %r13b,0x3(%rcx,%r8,1)
  0x00007fb1a087b819:   shr    $0x4,%eax
  0x00007fb1a087b81c:   mov    %eax,%r10d
  0x00007fb1a087b81f:   and    $0x3f,%eax
  0x00007fb1a087b822:   mov    %r15b,(%rcx,%r8,1)
  0x00007fb1a087b826:   movzbl (%r11,%rax,1),%eax
  0x00007fb1a087b82b:   shr    $0x12,%r10d
  0x00007fb1a087b82f:   and    $0x3f,%r10d
  0x00007fb1a087b833:   movzbl (%r11,%r10,1),%r10d
  0x00007fb1a087b838:   mov    %al,0x1(%rcx,%r8,1)
  0x00007fb1a087b83d:   mov    %r10b,0x2(%rcx,%r8,1)
  0x00007fb1a087b842:   add    $0x4,%r8d
  0x00007fb1a087b846:   cmp    $0x3,%r14d
  0x00007fb1a087b84a:   jae    Stub::implEncode+398 0x00007fb1a087b7ce
  0x00007fb1a087b84c:   pop    %r15
  0x00007fb1a087b84e:   pop    %r14
  0x00007fb1a087b850:   pop    %r13
  0x00007fb1a087b852:   pop    %r12
  0x00007fb1a087b854:   leaveq 
  0x00007fb1a087b855:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::implDecode [0x00007fb1a087b860, 0x00007fb1a087ba64] (516 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087b860:   push   %rbp
  0x00007fb1a087b861:   mov    %rsp,%rbp
  0x00007fb1a087b864:   push   %r12
  0x00007fb1a087b866:   push   %r13
  0x00007fb1a087b868:   push   %r14
  0x00007fb1a087b86a:   push   %r15
  0x00007fb1a087b86c:   push   %rbx
  0x00007fb1a087b86d:   mov    0x10(%rbp),%ebx
  0x00007fb1a087b870:   mov    %edx,%r14d
  0x00007fb1a087b873:   sub    %esi,%r14d
  0x00007fb1a087b876:   push   %rcx
  0x00007fb1a087b877:   sub    $0x2c,%r14d
  0x00007fb1a087b87b:   cmp    $0x0,%r14d
  0x00007fb1a087b87f:   jbe    Stub::implDecode+287 0x00007fb1a087b97f
  0x00007fb1a087b885:   cmp    $0x0,%ebx
  0x00007fb1a087b888:   jne    Stub::implDecode+287 0x00007fb1a087b97f
  0x00007fb1a087b88e:   shl    $0x3,%r9d
  0x00007fb1a087b892:   movabs $0x7fb1a087b240,%r13
  0x00007fb1a087b89c:   vpbroadcastq 0x0(%r13,%r9,1),%ymm4
  0x00007fb1a087b8a3:   vmovdqu %ymm4,%ymm10
  0x00007fb1a087b8a7:   vmovdqu 0x10(%r13),%ymm12
  0x00007fb1a087b8ad:   vmovdqu 0x30(%r13),%ymm9
  0x00007fb1a087b8b3:   vmovdqu 0x50(%r13),%ymm7
  0x00007fb1a087b8b9:   vmovdqu 0x70(%r13),%ymm6
  0x00007fb1a087b8bf:   vmovdqu 0x90(%r13),%ymm13
  0x00007fb1a087b8c8:   movabs $0x7fb1a087b340,%r13
  0x00007fb1a087b8d2:   shl    $0x2,%r9d
  0x00007fb1a087b8d6:   vmovdqu 0x0(%r13,%r9,1),%ymm11
  0x00007fb1a087b8dd:   vmovdqu 0x20(%r13,%r9,1),%ymm8
  0x00007fb1a087b8e4:   shr    $0x5,%r9d
  0x00007fb1a087b8e8:   jmpq   Stub::implDecode+239 0x00007fb1a087b94f
  0x00007fb1a087b8ed:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087b8f8:   data16 data16 xchg %ax,%ax
  0x00007fb1a087b8fc:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087b907:   data16 data16 xchg %ax,%ax
  0x00007fb1a087b90b:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087b916:   data16 data16 xchg %ax,%ax
  0x00007fb1a087b91a:   nopw   0x0(%rax,%rax,1)
  0x00007fb1a087b920:   vpaddb %ymm2,%ymm0,%ymm0
  0x00007fb1a087b924:   vpmaddubsw %ymm7,%ymm0,%ymm0
  0x00007fb1a087b929:   vpmaddwd %ymm6,%ymm0,%ymm0
  0x00007fb1a087b92d:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007fb1a087b932:   vpermd %ymm0,%ymm12,%ymm0
  0x00007fb1a087b937:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007fb1a087b93d:   add    $0x20,%rdi
  0x00007fb1a087b941:   add    $0x18,%rcx
  0x00007fb1a087b945:   sub    $0x20,%r14d
  0x00007fb1a087b949:   jbe    Stub::implDecode+287 0x00007fb1a087b97f
  0x00007fb1a087b94f:   vmovdqu (%rdi,%rsi,1),%ymm2
  0x00007fb1a087b954:   vpsrld $0x4,%ymm2,%ymm1
  0x00007fb1a087b959:   vpand  %ymm1,%ymm4,%ymm1
  0x00007fb1a087b95d:   vpand  %ymm4,%ymm2,%ymm3
  0x00007fb1a087b961:   vpcmpeqb %ymm2,%ymm10,%ymm0
  0x00007fb1a087b965:   vpshufb %ymm3,%ymm11,%ymm3
  0x00007fb1a087b96a:   vpshufb %ymm1,%ymm9,%ymm5
  0x00007fb1a087b96f:   vptest %ymm5,%ymm3
  0x00007fb1a087b974:   vpaddb %ymm1,%ymm0,%ymm0
  0x00007fb1a087b978:   vpshufb %ymm0,%ymm8,%ymm0
  0x00007fb1a087b97d:   je     Stub::implDecode+192 0x00007fb1a087b920
  0x00007fb1a087b97f:   add    $0x2c,%r14d
  0x00007fb1a087b983:   vzeroupper 
  0x00007fb1a087b986:   shr    $0x2,%r14d
  0x00007fb1a087b98a:   cmp    $0x0,%r14d
  0x00007fb1a087b98e:   jle    Stub::implDecode+498 0x00007fb1a087ba52
  0x00007fb1a087b994:   shl    $0x8,%r9d
  0x00007fb1a087b998:   movabs $0x7fb1a087b440,%r11
  0x00007fb1a087b9a2:   add    %r9,%r11
  0x00007fb1a087b9a5:   jmpq   Stub::implDecode+443 0x00007fb1a087ba1b
  0x00007fb1a087b9aa:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087b9b5:   data16 data16 xchg %ax,%ax
  0x00007fb1a087b9b9:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087b9c4:   data16 data16 xchg %ax,%ax
  0x00007fb1a087b9c8:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087b9d3:   data16 data16 xchg %ax,%ax
  0x00007fb1a087b9d7:   nopw   0x0(%rax,%rax,1)
  0x00007fb1a087b9e0:   shl    $0x12,%r13d
  0x00007fb1a087b9e4:   shl    $0xc,%r15d
  0x00007fb1a087b9e8:   shl    $0x6,%edx
  0x00007fb1a087b9eb:   or     %r15d,%r13d
  0x00007fb1a087b9ee:   or     %edx,%r13d
  0x00007fb1a087b9f1:   or     %r9d,%r13d
  0x00007fb1a087b9f4:   add    $0x4,%rdi
  0x00007fb1a087b9f8:   mov    %r13b,0x2(%rcx,%r8,1)
  0x00007fb1a087b9fd:   shr    $0x8,%r13d
  0x00007fb1a087ba01:   mov    %r13b,0x1(%rcx,%r8,1)
  0x00007fb1a087ba06:   shr    $0x8,%r13d
  0x00007fb1a087ba0a:   mov    %r13b,(%rcx,%r8,1)
  0x00007fb1a087ba0e:   add    $0x3,%rcx
  0x00007fb1a087ba12:   dec    %r14d
  0x00007fb1a087ba15:   je     Stub::implDecode+498 0x00007fb1a087ba52
  0x00007fb1a087ba1b:   movzbl (%rdi,%rsi,1),%r13d
  0x00007fb1a087ba20:   movzbl 0x1(%rdi,%rsi,1),%r15d
  0x00007fb1a087ba26:   movsbl (%r11,%r13,1),%r13d
  0x00007fb1a087ba2b:   movsbl (%r11,%r15,1),%r15d
  0x00007fb1a087ba30:   movzbl 0x2(%rdi,%rsi,1),%edx
  0x00007fb1a087ba35:   movzbl 0x3(%rdi,%rsi,1),%r9d
  0x00007fb1a087ba3b:   movsbl (%r11,%rdx,1),%edx
  0x00007fb1a087ba40:   movsbl (%r11,%r9,1),%r9d
  0x00007fb1a087ba45:   mov    %r13,%rax
  0x00007fb1a087ba48:   or     %r15d,%eax
  0x00007fb1a087ba4b:   or     %edx,%eax
  0x00007fb1a087ba4d:   or     %r9d,%eax
  0x00007fb1a087ba50:   jns    Stub::implDecode+384 0x00007fb1a087b9e0
  0x00007fb1a087ba52:   pop    %rax
  0x00007fb1a087ba53:   sub    %rax,%rcx
  0x00007fb1a087ba56:   mov    %rcx,%rax
  0x00007fb1a087ba59:   pop    %rbx
  0x00007fb1a087ba5a:   pop    %r15
  0x00007fb1a087ba5c:   pop    %r14
  0x00007fb1a087ba5e:   pop    %r13
  0x00007fb1a087ba60:   pop    %r12
  0x00007fb1a087ba62:   leaveq 
  0x00007fb1a087ba63:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::nmethod_entry_barrier [0x00007fb1a087ba80, 0x00007fb1a087bc2d] (429 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087ba80:   pushq  $0xffffffffffffffff
  0x00007fb1a087ba85:   push   %rbp
  0x00007fb1a087ba86:   mov    %rsp,%rbp
  0x00007fb1a087ba89:   push   %rdi
  0x00007fb1a087ba8a:   lea    0x18(%rsp),%rdi
  0x00007fb1a087ba8f:   sub    $0x80,%rsp
  0x00007fb1a087ba96:   mov    %rax,0x78(%rsp)
  0x00007fb1a087ba9b:   mov    %rcx,0x70(%rsp)
  0x00007fb1a087baa0:   mov    %rdx,0x68(%rsp)
  0x00007fb1a087baa5:   mov    %rbx,0x60(%rsp)
  0x00007fb1a087baaa:   mov    %rbp,0x50(%rsp)
  0x00007fb1a087baaf:   mov    %rsi,0x48(%rsp)
  0x00007fb1a087bab4:   mov    %rdi,0x40(%rsp)
  0x00007fb1a087bab9:   mov    %r8,0x38(%rsp)
  0x00007fb1a087babe:   mov    %r9,0x30(%rsp)
  0x00007fb1a087bac3:   mov    %r10,0x28(%rsp)
  0x00007fb1a087bac8:   mov    %r11,0x20(%rsp)
  0x00007fb1a087bacd:   mov    %r12,0x18(%rsp)
  0x00007fb1a087bad2:   mov    %r13,0x10(%rsp)
  0x00007fb1a087bad7:   mov    %r14,0x8(%rsp)
  0x00007fb1a087badc:   mov    %r15,(%rsp)
  0x00007fb1a087bae0:   sub    $0x80,%rsp
  0x00007fb1a087bae7:   vmovdqu %xmm7,0x70(%rsp)
  0x00007fb1a087baed:   vmovdqu %xmm6,0x60(%rsp)
  0x00007fb1a087baf3:   vmovdqu %xmm5,0x50(%rsp)
  0x00007fb1a087baf9:   vmovdqu %xmm4,0x40(%rsp)
  0x00007fb1a087baff:   vmovdqu %xmm3,0x30(%rsp)
  0x00007fb1a087bb05:   vmovdqu %xmm2,0x20(%rsp)
  0x00007fb1a087bb0b:   vmovdqu %xmm1,0x10(%rsp)
  0x00007fb1a087bb11:   vmovdqu %xmm0,(%rsp)
  0x00007fb1a087bb16:   test   $0xf,%spl
  0x00007fb1a087bb1a:   je     Stub::nmethod_entry_barrier+178 0x00007fb1a087bb32
  0x00007fb1a087bb20:   sub    $0x8,%rsp
  0x00007fb1a087bb24:   callq  0x00007fb1a3f902e0 = BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)
  0x00007fb1a087bb29:   add    $0x8,%rsp
  0x00007fb1a087bb2d:   jmpq   Stub::nmethod_entry_barrier+183 0x00007fb1a087bb37
  0x00007fb1a087bb32:   callq  0x00007fb1a3f902e0 = BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)
  0x00007fb1a087bb37:   vmovdqu (%rsp),%xmm0
  0x00007fb1a087bb3c:   vmovdqu 0x10(%rsp),%xmm1
  0x00007fb1a087bb42:   vmovdqu 0x20(%rsp),%xmm2
  0x00007fb1a087bb48:   vmovdqu 0x30(%rsp),%xmm3
  0x00007fb1a087bb4e:   vmovdqu 0x40(%rsp),%xmm4
  0x00007fb1a087bb54:   vmovdqu 0x50(%rsp),%xmm5
  0x00007fb1a087bb5a:   vmovdqu 0x60(%rsp),%xmm6
  0x00007fb1a087bb60:   vmovdqu 0x70(%rsp),%xmm7
  0x00007fb1a087bb66:   add    $0x80,%rsp
  0x00007fb1a087bb6d:   cmp    $0x1,%eax
  0x00007fb1a087bb70:   je     Stub::nmethod_entry_barrier+334 0x00007fb1a087bbce
  0x00007fb1a087bb76:   mov    (%rsp),%r15
  0x00007fb1a087bb7a:   mov    0x8(%rsp),%r14
  0x00007fb1a087bb7f:   mov    0x10(%rsp),%r13
  0x00007fb1a087bb84:   mov    0x18(%rsp),%r12
  0x00007fb1a087bb89:   mov    0x20(%rsp),%r11
  0x00007fb1a087bb8e:   mov    0x28(%rsp),%r10
  0x00007fb1a087bb93:   mov    0x30(%rsp),%r9
  0x00007fb1a087bb98:   mov    0x38(%rsp),%r8
  0x00007fb1a087bb9d:   mov    0x40(%rsp),%rdi
  0x00007fb1a087bba2:   mov    0x48(%rsp),%rsi
  0x00007fb1a087bba7:   mov    0x50(%rsp),%rbp
  0x00007fb1a087bbac:   mov    0x60(%rsp),%rbx
  0x00007fb1a087bbb1:   mov    0x68(%rsp),%rdx
  0x00007fb1a087bbb6:   mov    0x70(%rsp),%rcx
  0x00007fb1a087bbbb:   mov    0x78(%rsp),%rax
  0x00007fb1a087bbc0:   add    $0x80,%rsp
  0x00007fb1a087bbc7:   pop    %rdi
  0x00007fb1a087bbc8:   leaveq 
  0x00007fb1a087bbc9:   add    $0x8,%rsp
  0x00007fb1a087bbcd:   retq   
  0x00007fb1a087bbce:   mov    (%rsp),%r15
  0x00007fb1a087bbd2:   mov    0x8(%rsp),%r14
  0x00007fb1a087bbd7:   mov    0x10(%rsp),%r13
  0x00007fb1a087bbdc:   mov    0x18(%rsp),%r12
  0x00007fb1a087bbe1:   mov    0x20(%rsp),%r11
  0x00007fb1a087bbe6:   mov    0x28(%rsp),%r10
  0x00007fb1a087bbeb:   mov    0x30(%rsp),%r9
  0x00007fb1a087bbf0:   mov    0x38(%rsp),%r8
  0x00007fb1a087bbf5:   mov    0x40(%rsp),%rdi
  0x00007fb1a087bbfa:   mov    0x48(%rsp),%rsi
  0x00007fb1a087bbff:   mov    0x50(%rsp),%rbp
  0x00007fb1a087bc04:   mov    0x60(%rsp),%rbx
  0x00007fb1a087bc09:   mov    0x68(%rsp),%rdx
  0x00007fb1a087bc0e:   mov    0x70(%rsp),%rcx
  0x00007fb1a087bc13:   mov    0x78(%rsp),%rax
  0x00007fb1a087bc18:   add    $0x80,%rsp
  0x00007fb1a087bc1f:   pop    %rdi
  0x00007fb1a087bc20:   leaveq 
  0x00007fb1a087bc21:   test   %rsp,(%rsp)
  0x00007fb1a087bc25:   mov    (%rsp),%rsp
  0x00007fb1a087bc29:   jmpq   *-0x8(%rsp)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::multiplyToLen [0x00007fb1a087bc40, 0x00007fb1a087be6f] (559 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087bc40:   push   %rbp
  0x00007fb1a087bc41:   mov    %rsp,%rbp
  0x00007fb1a087bc44:   mov    %r9,%r11
  0x00007fb1a087bc47:   mov    %rsi,%rax
  0x00007fb1a087bc4a:   mov    %rdx,%rsi
  0x00007fb1a087bc4d:   push   %r12
  0x00007fb1a087bc4f:   push   %r13
  0x00007fb1a087bc51:   push   %r14
  0x00007fb1a087bc53:   push   %r15
  0x00007fb1a087bc55:   push   %rbx
  0x00007fb1a087bc56:   push   %rax
  0x00007fb1a087bc57:   push   %r11
  0x00007fb1a087bc59:   mov    %ecx,%r12d
  0x00007fb1a087bc5c:   mov    %r11d,%r13d
  0x00007fb1a087bc5f:   xor    %rbx,%rbx
  0x00007fb1a087bc62:   mov    %eax,%r14d
  0x00007fb1a087bc65:   dec    %r14d
  0x00007fb1a087bc68:   js     Stub::multiplyToLen+545 0x00007fb1a087be61
  0x00007fb1a087bc6e:   dec    %r14d
  0x00007fb1a087bc71:   js     Stub::multiplyToLen+129 0x00007fb1a087bcc1
  0x00007fb1a087bc77:   mov    (%rdi,%r14,4),%r11
  0x00007fb1a087bc7b:   ror    $0x20,%r11
  0x00007fb1a087bc7f:   dec    %r12d
  0x00007fb1a087bc82:   js     Stub::multiplyToLen+134 0x00007fb1a087bcc6
  0x00007fb1a087bc88:   dec    %r12d
  0x00007fb1a087bc8b:   js     Stub::multiplyToLen+124 0x00007fb1a087bcbc
  0x00007fb1a087bc91:   mov    (%rsi,%r12,4),%r15
  0x00007fb1a087bc95:   ror    $0x20,%r15
  0x00007fb1a087bc99:   mov    %r11,%rax
  0x00007fb1a087bc9c:   mul    %r15
  0x00007fb1a087bc9f:   add    %rbx,%rax
  0x00007fb1a087bca2:   adc    $0x0,%rdx
  0x00007fb1a087bca6:   sub    $0x2,%r13d
  0x00007fb1a087bcaa:   mov    %eax,0x4(%r8,%r13,4)
  0x00007fb1a087bcaf:   shr    $0x20,%rax
  0x00007fb1a087bcb3:   mov    %eax,(%r8,%r13,4)
  0x00007fb1a087bcb7:   mov    %rdx,%rbx
  0x00007fb1a087bcba:   jmp    Stub::multiplyToLen+63 0x00007fb1a087bc7f
  0x00007fb1a087bcbc:   mov    (%rsi),%r15d
  0x00007fb1a087bcbf:   jmp    Stub::multiplyToLen+89 0x00007fb1a087bc99
  0x00007fb1a087bcc1:   mov    (%rdi),%r11d
  0x00007fb1a087bcc4:   jmp    Stub::multiplyToLen+63 0x00007fb1a087bc7f
  0x00007fb1a087bcc6:   test   %r13d,%r13d
  0x00007fb1a087bcc9:   je     Stub::multiplyToLen+169 0x00007fb1a087bce9
  0x00007fb1a087bccf:   sub    $0x1,%r13d
  0x00007fb1a087bcd3:   je     Stub::multiplyToLen+165 0x00007fb1a087bce5
  0x00007fb1a087bcd9:   mov    %ebx,(%r8,%r13,4)
  0x00007fb1a087bcdd:   shr    $0x20,%rbx
  0x00007fb1a087bce1:   sub    $0x1,%r13d
  0x00007fb1a087bce5:   mov    %ebx,(%r8,%r13,4)
  0x00007fb1a087bce9:   xor    %ebx,%ebx
  0x00007fb1a087bceb:   mov    %ecx,%r12d
  0x00007fb1a087bcee:   sub    $0x1,%r14d
  0x00007fb1a087bcf2:   js     Stub::multiplyToLen+545 0x00007fb1a087be61
  0x00007fb1a087bcf8:   push   %r8
  0x00007fb1a087bcfa:   lea    0x4(%r8,%r14,4),%r8
  0x00007fb1a087bcff:   sub    $0x1,%r14d
  0x00007fb1a087bd03:   js     Stub::multiplyToLen+538 0x00007fb1a087be5a
  0x00007fb1a087bd09:   mov    (%rdi,%r14,4),%rdx
  0x00007fb1a087bd0d:   rorx   $0x20,%rdx,%rdx
  0x00007fb1a087bd13:   push   %rdi
  0x00007fb1a087bd14:   push   %r14
  0x00007fb1a087bd16:   push   %rcx
  0x00007fb1a087bd17:   mov    %r12d,%ecx
  0x00007fb1a087bd1a:   and    $0xfffffffc,%ecx
  0x00007fb1a087bd1d:   shr    $0x2,%ecx
  0x00007fb1a087bd20:   sub    $0x1,%ecx
  0x00007fb1a087bd23:   js     Stub::multiplyToLen+365 0x00007fb1a087bdad
  0x00007fb1a087bd29:   sub    $0x4,%r12d
  0x00007fb1a087bd2d:   mov    0x8(%rsi,%r12,4),%rax
  0x00007fb1a087bd32:   rorx   $0x20,%rax,%rax
  0x00007fb1a087bd38:   mov    (%rsi,%r12,4),%r13
  0x00007fb1a087bd3c:   rorx   $0x20,%r13,%r13
  0x00007fb1a087bd42:   mulx   %rax,%r14,%r15
  0x00007fb1a087bd47:   mulx   %r13,%r11,%rdi
  0x00007fb1a087bd4c:   mov    0x8(%r8,%r12,4),%rax
  0x00007fb1a087bd51:   rorx   $0x20,%rax,%rax
  0x00007fb1a087bd57:   mov    (%r8,%r12,4),%r13
  0x00007fb1a087bd5b:   rorx   $0x20,%r13,%r13
  0x00007fb1a087bd61:   adcx   %rbx,%r14
  0x00007fb1a087bd67:   adox   %rax,%r14
  0x00007fb1a087bd6d:   adcx   %r11,%r15
  0x00007fb1a087bd73:   adox   %r13,%r15
  0x00007fb1a087bd79:   mov    $0x0,%ebx
  0x00007fb1a087bd7e:   adcx   %rbx,%rdi
  0x00007fb1a087bd84:   adox   %rbx,%rdi
  0x00007fb1a087bd8a:   mov    %rdi,%rbx
  0x00007fb1a087bd8d:   mov    %r14d,0xc(%r8,%r12,4)
  0x00007fb1a087bd92:   shr    $0x20,%r14
  0x00007fb1a087bd96:   mov    %r14d,0x8(%r8,%r12,4)
  0x00007fb1a087bd9b:   mov    %r15d,0x4(%r8,%r12,4)
  0x00007fb1a087bda0:   shr    $0x20,%r15
  0x00007fb1a087bda4:   mov    %r15d,(%r8,%r12,4)
  0x00007fb1a087bda8:   jmpq   Stub::multiplyToLen+224 0x00007fb1a087bd20
  0x00007fb1a087bdad:   and    $0x3,%r12d
  0x00007fb1a087bdb1:   je     Stub::multiplyToLen+503 0x00007fb1a087be37
  0x00007fb1a087bdb7:   sub    $0x2,%r12d
  0x00007fb1a087bdbb:   js     Stub::multiplyToLen+440 0x00007fb1a087bdf8
  0x00007fb1a087bdc1:   mov    (%rsi,%r12,4),%rax
  0x00007fb1a087bdc5:   rorx   $0x20,%rax,%rax
  0x00007fb1a087bdcb:   mulx   %rax,%r14,%r15
  0x00007fb1a087bdd0:   mov    (%r8,%r12,4),%r13
  0x00007fb1a087bdd4:   rorx   $0x20,%r13,%r13
  0x00007fb1a087bdda:   add    %rbx,%r14
  0x00007fb1a087bddd:   adc    $0x0,%r15
  0x00007fb1a087bde1:   add    %r13,%r14
  0x00007fb1a087bde4:   adc    $0x0,%r15
  0x00007fb1a087bde8:   mov    %r14d,0x4(%r8,%r12,4)
  0x00007fb1a087bded:   shr    $0x20,%r14
  0x00007fb1a087bdf1:   mov    %r14d,(%r8,%r12,4)
  0x00007fb1a087bdf5:   mov    %r15,%rbx
  0x00007fb1a087bdf8:   add    $0x2,%r12d
  0x00007fb1a087bdfc:   and    $0x1,%r12d
  0x00007fb1a087be00:   sub    $0x1,%r12d
  0x00007fb1a087be04:   js     Stub::multiplyToLen+503 0x00007fb1a087be37
  0x00007fb1a087be0a:   mov    (%rsi,%r12,4),%r15d
  0x00007fb1a087be0e:   mulx   %r15,%r14,%rdi
  0x00007fb1a087be13:   mov    (%r8,%r12,4),%r15d
  0x00007fb1a087be17:   add    %r15,%r14
  0x00007fb1a087be1a:   adc    $0x0,%rdi
  0x00007fb1a087be1e:   add    %rbx,%r14
  0x00007fb1a087be21:   adc    $0x0,%rdi
  0x00007fb1a087be25:   mov    %r14d,(%r8,%r12,4)
  0x00007fb1a087be29:   shr    $0x20,%r14
  0x00007fb1a087be2d:   shl    $0x20,%rdi
  0x00007fb1a087be31:   or     %rdi,%r14
  0x00007fb1a087be34:   mov    %r14,%rbx
  0x00007fb1a087be37:   pop    %rcx
  0x00007fb1a087be38:   pop    %rax
  0x00007fb1a087be39:   pop    %rdi
  0x00007fb1a087be3a:   pop    %r8
  0x00007fb1a087be3c:   mov    %eax,%r14d
  0x00007fb1a087be3f:   add    $0x1,%r14d
  0x00007fb1a087be43:   mov    %ebx,(%r8,%r14,4)
  0x00007fb1a087be47:   sub    $0x1,%r14d
  0x00007fb1a087be4b:   js     Stub::multiplyToLen+545 0x00007fb1a087be61
  0x00007fb1a087be4d:   shr    $0x20,%rbx
  0x00007fb1a087be51:   mov    %ebx,(%r8,%r14,4)
  0x00007fb1a087be55:   jmpq   Stub::multiplyToLen+169 0x00007fb1a087bce9
  0x00007fb1a087be5a:   mov    (%rdi),%edx
  0x00007fb1a087be5c:   jmpq   Stub::multiplyToLen+211 0x00007fb1a087bd13
  0x00007fb1a087be61:   pop    %r11
  0x00007fb1a087be63:   pop    %rax
  0x00007fb1a087be64:   pop    %rbx
  0x00007fb1a087be65:   pop    %r15
  0x00007fb1a087be67:   pop    %r14
  0x00007fb1a087be69:   pop    %r13
  0x00007fb1a087be6b:   pop    %r12
  0x00007fb1a087be6d:   leaveq 
  0x00007fb1a087be6e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::squareToLen [0x00007fb1a087be80, 0x00007fb1a087bf9f] (287 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087be80:   push   %rbp
  0x00007fb1a087be81:   mov    %rsp,%rbp
  0x00007fb1a087be84:   mov    %rdx,%r8
  0x00007fb1a087be87:   push   %r12
  0x00007fb1a087be89:   push   %r13
  0x00007fb1a087be8b:   push   %r14
  0x00007fb1a087be8d:   push   %r15
  0x00007fb1a087be8f:   push   %rbx
  0x00007fb1a087be90:   xor    %rbx,%rbx
  0x00007fb1a087be93:   xor    %rdx,%rdx
  0x00007fb1a087be96:   xor    %r12d,%r12d
  0x00007fb1a087be99:   xor    %r15d,%r15d
  0x00007fb1a087be9c:   test   $0x1,%sil
  0x00007fb1a087bea0:   je     Stub::squareToLen+60 0x00007fb1a087bebc
  0x00007fb1a087bea2:   mov    (%rdi,%r12,4),%eax
  0x00007fb1a087bea6:   imul   %rax,%rax
  0x00007fb1a087beaa:   shr    %rax
  0x00007fb1a087bead:   adc    $0x0,%rbx
  0x00007fb1a087beb1:   mov    %rax,(%r8,%r15,4)
  0x00007fb1a087beb5:   inc    %r12d
  0x00007fb1a087beb8:   add    $0x2,%r15d
  0x00007fb1a087bebc:   cmp    %rsi,%r12
  0x00007fb1a087bebf:   je     Stub::squareToLen+108 0x00007fb1a087beec
  0x00007fb1a087bec1:   mov    (%rdi,%r12,4),%rax
  0x00007fb1a087bec5:   ror    $0x20,%rax
  0x00007fb1a087bec9:   mul    %rax
  0x00007fb1a087becc:   shr    %rbx
  0x00007fb1a087becf:   rcr    %rdx
  0x00007fb1a087bed2:   rcr    %rax
  0x00007fb1a087bed5:   adc    $0x0,%rbx
  0x00007fb1a087bed9:   mov    %rdx,(%r8,%r15,4)
  0x00007fb1a087bedd:   mov    %rax,0x8(%r8,%r15,4)
  0x00007fb1a087bee2:   add    $0x2,%r12d
  0x00007fb1a087bee6:   add    $0x4,%r15d
  0x00007fb1a087beea:   jmp    Stub::squareToLen+60 0x00007fb1a087bebc
  0x00007fb1a087beec:   push   %rcx
  0x00007fb1a087beed:   push   %rsi
  0x00007fb1a087beee:   add    $0x2,%ecx
  0x00007fb1a087bef1:   xor    %rbx,%rbx
  0x00007fb1a087bef4:   sub    $0x4,%ecx
  0x00007fb1a087bef7:   sub    $0x2,%esi
  0x00007fb1a087befa:   push   %rcx
  0x00007fb1a087befb:   push   %rsi
  0x00007fb1a087befc:   cmp    $0x0,%esi
  0x00007fb1a087beff:   jle    Stub::squareToLen+225 0x00007fb1a087bf61
  0x00007fb1a087bf01:   mov    (%rdi,%rsi,4),%rdx
  0x00007fb1a087bf05:   rorx   $0x20,%rdx,%rdx
  0x00007fb1a087bf0b:   dec    %esi
  0x00007fb1a087bf0d:   js     Stub::squareToLen+190 0x00007fb1a087bf3e
  0x00007fb1a087bf0f:   dec    %esi
  0x00007fb1a087bf11:   js     Stub::squareToLen+220 0x00007fb1a087bf5c
  0x00007fb1a087bf13:   mov    (%rdi,%rsi,4),%r15
  0x00007fb1a087bf17:   ror    $0x20,%r15
  0x00007fb1a087bf1b:   sub    $0x2,%ecx
  0x00007fb1a087bf1e:   mov    (%r8,%rcx,4),%r14
  0x00007fb1a087bf22:   mulx   %r15,%r15,%r13
  0x00007fb1a087bf27:   add    %rbx,%r14
  0x00007fb1a087bf2a:   adc    $0x0,%r13
  0x00007fb1a087bf2e:   add    %r15,%r14
  0x00007fb1a087bf31:   adc    $0x0,%r13
  0x00007fb1a087bf35:   mov    %r13,%rbx
  0x00007fb1a087bf38:   mov    %r14,(%r8,%rcx,4)
  0x00007fb1a087bf3c:   jmp    Stub::squareToLen+139 0x00007fb1a087bf0b
  0x00007fb1a087bf3e:   mov    $0x1,%r12d
  0x00007fb1a087bf44:   sub    $0x2,%ecx
  0x00007fb1a087bf47:   add    %rbx,(%r8,%rcx,4)
  0x00007fb1a087bf4b:   jae    Stub::squareToLen+216 0x00007fb1a087bf58
  0x00007fb1a087bf4d:   sub    $0x2,%ecx
  0x00007fb1a087bf50:   js     Stub::squareToLen+216 0x00007fb1a087bf58
  0x00007fb1a087bf52:   add    %r12,(%r8,%rcx,4)
  0x00007fb1a087bf56:   jmp    Stub::squareToLen+203 0x00007fb1a087bf4b
  0x00007fb1a087bf58:   pop    %rsi
  0x00007fb1a087bf59:   pop    %rcx
  0x00007fb1a087bf5a:   jmp    Stub::squareToLen+113 0x00007fb1a087bef1
  0x00007fb1a087bf5c:   mov    (%rdi),%r15d
  0x00007fb1a087bf5f:   jmp    Stub::squareToLen+155 0x00007fb1a087bf1b
  0x00007fb1a087bf61:   pop    %rsi
  0x00007fb1a087bf62:   pop    %rcx
  0x00007fb1a087bf63:   pop    %rsi
  0x00007fb1a087bf64:   pop    %rcx
  0x00007fb1a087bf65:   mov    %ecx,%r14d
  0x00007fb1a087bf68:   xor    %r12d,%r12d
  0x00007fb1a087bf6b:   dec    %r14d
  0x00007fb1a087bf6e:   dec    %r14d
  0x00007fb1a087bf71:   js     Stub::squareToLen+262 0x00007fb1a087bf86
  0x00007fb1a087bf73:   mov    (%r8,%r14,4),%r13
  0x00007fb1a087bf77:   rcl    %r13
  0x00007fb1a087bf7a:   rorx   $0x20,%r13,%r13
  0x00007fb1a087bf80:   mov    %r13,(%r8,%r14,4)
  0x00007fb1a087bf84:   jmp    Stub::squareToLen+235 0x00007fb1a087bf6b
  0x00007fb1a087bf86:   mov    -0x4(%rdi,%rsi,4),%r14d
  0x00007fb1a087bf8b:   and    $0x1,%r14d
  0x00007fb1a087bf8f:   or     %r14d,-0x4(%r8,%rcx,4)
  0x00007fb1a087bf94:   pop    %rbx
  0x00007fb1a087bf95:   pop    %r15
  0x00007fb1a087bf97:   pop    %r14
  0x00007fb1a087bf99:   pop    %r13
  0x00007fb1a087bf9b:   pop    %r12
  0x00007fb1a087bf9d:   leaveq 
  0x00007fb1a087bf9e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::mulAdd [0x00007fb1a087bfa0, 0x00007fb1a087c097] (247 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087bfa0:   push   %rbp
  0x00007fb1a087bfa1:   mov    %rsp,%rbp
  0x00007fb1a087bfa4:   mov    %rdx,%r11
  0x00007fb1a087bfa7:   push   %r12
  0x00007fb1a087bfa9:   push   %r13
  0x00007fb1a087bfab:   push   %r14
  0x00007fb1a087bfad:   push   %r15
  0x00007fb1a087bfaf:   push   %rbx
  0x00007fb1a087bfb0:   mov    %r8d,%edx
  0x00007fb1a087bfb3:   xor    %rbx,%rbx
  0x00007fb1a087bfb6:   mov    %ecx,%r12d
  0x00007fb1a087bfb9:   shr    $0x2,%r12d
  0x00007fb1a087bfbd:   sub    $0x1,%r12d
  0x00007fb1a087bfc1:   js     Stub::mulAdd+139 0x00007fb1a087c02b
  0x00007fb1a087bfc3:   sub    $0x4,%ecx
  0x00007fb1a087bfc6:   sub    $0x4,%r11d
  0x00007fb1a087bfca:   mov    0x8(%rsi,%rcx,4),%r15
  0x00007fb1a087bfcf:   ror    $0x20,%r15
  0x00007fb1a087bfd3:   mov    0x8(%rdi,%r11,4),%r14
  0x00007fb1a087bfd8:   ror    $0x20,%r14
  0x00007fb1a087bfdc:   mulx   %r15,%r15,%rax
  0x00007fb1a087bfe1:   add    %rbx,%r14
  0x00007fb1a087bfe4:   adc    $0x0,%rax
  0x00007fb1a087bfe8:   add    %r15,%r14
  0x00007fb1a087bfeb:   adc    $0x0,%rax
  0x00007fb1a087bfef:   mov    %rax,%rbx
  0x00007fb1a087bff2:   ror    $0x20,%r14
  0x00007fb1a087bff6:   mov    %r14,0x8(%rdi,%r11,4)
  0x00007fb1a087bffb:   mov    (%rsi,%rcx,4),%r15
  0x00007fb1a087bfff:   ror    $0x20,%r15
  0x00007fb1a087c003:   mov    (%rdi,%r11,4),%r14
  0x00007fb1a087c007:   ror    $0x20,%r14
  0x00007fb1a087c00b:   mulx   %r15,%r15,%rax
  0x00007fb1a087c010:   add    %rbx,%r14
  0x00007fb1a087c013:   adc    $0x0,%rax
  0x00007fb1a087c017:   add    %r15,%r14
  0x00007fb1a087c01a:   adc    $0x0,%rax
  0x00007fb1a087c01e:   mov    %rax,%rbx
  0x00007fb1a087c021:   ror    $0x20,%r14
  0x00007fb1a087c025:   mov    %r14,(%rdi,%r11,4)
  0x00007fb1a087c029:   jmp    Stub::mulAdd+29 0x00007fb1a087bfbd
  0x00007fb1a087c02b:   dec    %ecx
  0x00007fb1a087c02d:   js     Stub::mulAdd+234 0x00007fb1a087c08a
  0x00007fb1a087c02f:   dec    %ecx
  0x00007fb1a087c031:   js     Stub::mulAdd+201 0x00007fb1a087c069
  0x00007fb1a087c033:   mov    (%rsi,%rcx,4),%r15
  0x00007fb1a087c037:   ror    $0x20,%r15
  0x00007fb1a087c03b:   sub    $0x2,%r11d
  0x00007fb1a087c03f:   mov    (%rdi,%r11,4),%r14
  0x00007fb1a087c043:   ror    $0x20,%r14
  0x00007fb1a087c047:   mulx   %r15,%r15,%rax
  0x00007fb1a087c04c:   add    %rbx,%r14
  0x00007fb1a087c04f:   adc    $0x0,%rax
  0x00007fb1a087c053:   add    %r15,%r14
  0x00007fb1a087c056:   adc    $0x0,%rax
  0x00007fb1a087c05a:   mov    %rax,%rbx
  0x00007fb1a087c05d:   ror    $0x20,%r14
  0x00007fb1a087c061:   mov    %r14,(%rdi,%r11,4)
  0x00007fb1a087c065:   test   %ecx,%ecx
  0x00007fb1a087c067:   je     Stub::mulAdd+234 0x00007fb1a087c08a
  0x00007fb1a087c069:   mov    (%rsi),%r15d
  0x00007fb1a087c06c:   mov    -0x4(%rdi,%r11,4),%r14d
  0x00007fb1a087c071:   mov    %r8d,%eax
  0x00007fb1a087c074:   mul    %r15d
  0x00007fb1a087c077:   add    %ebx,%r14d
  0x00007fb1a087c07a:   adc    $0x0,%edx
  0x00007fb1a087c07d:   add    %eax,%r14d
  0x00007fb1a087c080:   adc    $0x0,%edx
  0x00007fb1a087c083:   mov    %edx,%ebx
  0x00007fb1a087c085:   mov    %r14d,-0x4(%rdi,%r11,4)
  0x00007fb1a087c08a:   mov    %ebx,%eax
  0x00007fb1a087c08c:   pop    %rbx
  0x00007fb1a087c08d:   pop    %r15
  0x00007fb1a087c08f:   pop    %r14
  0x00007fb1a087c091:   pop    %r13
  0x00007fb1a087c093:   pop    %r12
  0x00007fb1a087c095:   leaveq 
  0x00007fb1a087c096:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vectorizedMismatch [0x00007fb1a087c0a0, 0x00007fb1a087c234] (404 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087c0a0:   push   %rbp
  0x00007fb1a087c0a1:   mov    %rsp,%rbp
  0x00007fb1a087c0a4:   shl    %cl,%rdx
  0x00007fb1a087c0a7:   xor    %rax,%rax
  0x00007fb1a087c0aa:   cmp    $0x8,%rdx
  0x00007fb1a087c0ae:   je     Stub::vectorizedMismatch+148 0x00007fb1a087c134
  0x00007fb1a087c0b4:   jl     Stub::vectorizedMismatch+182 0x00007fb1a087c156
  0x00007fb1a087c0ba:   cmp    $0x10,%rdx
  0x00007fb1a087c0be:   je     Stub::vectorizedMismatch+103 0x00007fb1a087c107
  0x00007fb1a087c0c4:   jl     Stub::vectorizedMismatch+148 0x00007fb1a087c134
  0x00007fb1a087c0ca:   cmp    $0x20,%rdx
  0x00007fb1a087c0ce:   jl     Stub::vectorizedMismatch+97 0x00007fb1a087c101
  0x00007fb1a087c0d0:   sub    $0x20,%rdx
  0x00007fb1a087c0d4:   vmovdqu (%rdi,%rax,1),%ymm0
  0x00007fb1a087c0d9:   vmovdqu (%rsi,%rax,1),%ymm1
  0x00007fb1a087c0de:   vpxor  %ymm1,%ymm0,%ymm2
  0x00007fb1a087c0e2:   vptest %ymm2,%ymm2
  0x00007fb1a087c0e7:   jne    Stub::vectorizedMismatch+314 0x00007fb1a087c1da
  0x00007fb1a087c0ed:   add    $0x20,%rax
  0x00007fb1a087c0f1:   sub    $0x20,%rdx
  0x00007fb1a087c0f5:   jge    Stub::vectorizedMismatch+52 0x00007fb1a087c0d4
  0x00007fb1a087c0f7:   add    $0x20,%rdx
  0x00007fb1a087c0fb:   je     Stub::vectorizedMismatch+389 0x00007fb1a087c225
  0x00007fb1a087c101:   cmp    $0x10,%rdx
  0x00007fb1a087c105:   jl     Stub::vectorizedMismatch+142 0x00007fb1a087c12e
  0x00007fb1a087c107:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fb1a087c10c:   vmovdqu (%rsi,%rax,1),%xmm1
  0x00007fb1a087c111:   vpxor  %xmm1,%xmm0,%xmm2
  0x00007fb1a087c115:   vptest %xmm2,%xmm2
  0x00007fb1a087c11a:   jne    Stub::vectorizedMismatch+345 0x00007fb1a087c1f9
  0x00007fb1a087c120:   add    $0x10,%rax
  0x00007fb1a087c124:   sub    $0x10,%rdx
  0x00007fb1a087c128:   je     Stub::vectorizedMismatch+389 0x00007fb1a087c225
  0x00007fb1a087c12e:   cmp    $0x8,%rdx
  0x00007fb1a087c132:   jl     Stub::vectorizedMismatch+182 0x00007fb1a087c156
  0x00007fb1a087c134:   mov    (%rdi,%rax,1),%r8
  0x00007fb1a087c138:   mov    (%rsi,%rax,1),%r9
  0x00007fb1a087c13c:   xor    %r9,%r8
  0x00007fb1a087c13f:   test   %r8,%r8
  0x00007fb1a087c142:   jne    Stub::vectorizedMismatch+373 0x00007fb1a087c215
  0x00007fb1a087c148:   add    $0x8,%rax
  0x00007fb1a087c14c:   sub    $0x8,%rdx
  0x00007fb1a087c150:   je     Stub::vectorizedMismatch+389 0x00007fb1a087c225
  0x00007fb1a087c156:   cmp    $0x4,%rdx
  0x00007fb1a087c15a:   jl     Stub::vectorizedMismatch+219 0x00007fb1a087c17b
  0x00007fb1a087c15c:   mov    (%rdi,%rax,1),%r8d
  0x00007fb1a087c160:   xor    (%rsi,%rax,1),%r8d
  0x00007fb1a087c164:   test   %r8d,%r8d
  0x00007fb1a087c167:   jne    Stub::vectorizedMismatch+373 0x00007fb1a087c215
  0x00007fb1a087c16d:   add    $0x4,%rax
  0x00007fb1a087c171:   sub    $0x4,%rdx
  0x00007fb1a087c175:   je     Stub::vectorizedMismatch+389 0x00007fb1a087c225
  0x00007fb1a087c17b:   movzbl (%rdi,%rax,1),%r8d
  0x00007fb1a087c180:   movzbl (%rsi,%rax,1),%r9d
  0x00007fb1a087c185:   xor    %r9d,%r8d
  0x00007fb1a087c188:   test   %r8d,%r8d
  0x00007fb1a087c18b:   jne    Stub::vectorizedMismatch+384 0x00007fb1a087c220
  0x00007fb1a087c191:   dec    %rdx
  0x00007fb1a087c194:   je     Stub::vectorizedMismatch+389 0x00007fb1a087c225
  0x00007fb1a087c19a:   inc    %rax
  0x00007fb1a087c19d:   movzbl (%rdi,%rax,1),%r8d
  0x00007fb1a087c1a2:   movzbl (%rsi,%rax,1),%r9d
  0x00007fb1a087c1a7:   xor    %r9d,%r8d
  0x00007fb1a087c1aa:   test   %r8d,%r8d
  0x00007fb1a087c1ad:   jne    Stub::vectorizedMismatch+384 0x00007fb1a087c220
  0x00007fb1a087c1b3:   dec    %rdx
  0x00007fb1a087c1b6:   je     Stub::vectorizedMismatch+389 0x00007fb1a087c225
  0x00007fb1a087c1bc:   inc    %rax
  0x00007fb1a087c1bf:   movzbl (%rdi,%rax,1),%r8d
  0x00007fb1a087c1c4:   movzbl (%rsi,%rax,1),%r9d
  0x00007fb1a087c1c9:   xor    %r9d,%r8d
  0x00007fb1a087c1cc:   test   %r8d,%r8d
  0x00007fb1a087c1cf:   jne    Stub::vectorizedMismatch+384 0x00007fb1a087c220
  0x00007fb1a087c1d5:   jmpq   Stub::vectorizedMismatch+389 0x00007fb1a087c225
  0x00007fb1a087c1da:   vpcmpeqb %ymm2,%ymm2,%ymm2
  0x00007fb1a087c1de:   vpcmpeqb %ymm1,%ymm0,%ymm0
  0x00007fb1a087c1e2:   vpxor  %ymm2,%ymm0,%ymm0
  0x00007fb1a087c1e6:   vpmovmskb %ymm0,%r8d
  0x00007fb1a087c1ea:   bsf    %r8,%r8
  0x00007fb1a087c1ee:   add    %r8,%rax
  0x00007fb1a087c1f1:   shr    %cl,%rax
  0x00007fb1a087c1f4:   jmpq   Stub::vectorizedMismatch+399 0x00007fb1a087c22f
  0x00007fb1a087c1f9:   vpcmpeqb %xmm2,%xmm2,%xmm2
  0x00007fb1a087c1fd:   vpcmpeqb %xmm1,%xmm0,%xmm0
  0x00007fb1a087c201:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fb1a087c205:   vpmovmskb %xmm0,%r8d
  0x00007fb1a087c209:   bsf    %r8,%r8
  0x00007fb1a087c20d:   add    %r8,%rax
  0x00007fb1a087c210:   shr    %cl,%rax
  0x00007fb1a087c213:   jmp    Stub::vectorizedMismatch+399 0x00007fb1a087c22f
  0x00007fb1a087c215:   bsf    %r8,%r8
  0x00007fb1a087c219:   shr    $0x3,%r8
  0x00007fb1a087c21d:   add    %r8,%rax
  0x00007fb1a087c220:   shr    %cl,%rax
  0x00007fb1a087c223:   jmp    Stub::vectorizedMismatch+399 0x00007fb1a087c22f
  0x00007fb1a087c225:   movabs $0xffffffffffffffff,%rax
  0x00007fb1a087c22f:   vzeroupper 
  0x00007fb1a087c232:   leaveq 
  0x00007fb1a087c233:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_invokeGeneric [0x00007fb1a0870500, 0x00007fb1a0870501] (1 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0870500:   hlt    
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_invokeBasic [0x00007fb1a0870501, 0x00007fb1a0870556] (85 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0870501:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087050c:   data16 data16 xchg %ax,%ax
  0x00007fb1a0870510:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a087051b:   data16 data16 xchg %ax,%ax
  0x00007fb1a087051f:   nop
  0x00007fb1a0870520:   mov    0x8(%rbx),%rdx
  0x00007fb1a0870524:   movzwl 0x2c(%rdx),%edx
  0x00007fb1a0870528:   mov    (%rsp,%rdx,8),%rcx
  0x00007fb1a087052c:   mov    0x14(%rcx),%ebx
  0x00007fb1a087052f:   shl    $0x3,%rbx
  0x00007fb1a0870533:   mov    0x28(%rbx),%ebx
  0x00007fb1a0870536:   shl    $0x3,%rbx
  0x00007fb1a087053a:   mov    0x24(%rbx),%ebx
  0x00007fb1a087053d:   shl    $0x3,%rbx
  0x00007fb1a0870541:   mov    0x10(%rbx),%rbx
  0x00007fb1a0870545:   test   %rbx,%rbx
  0x00007fb1a0870548:   je     0x00007fb1a0870551
  0x00007fb1a087054e:   jmpq   *0x50(%rbx)
  0x00007fb1a0870551:   jmpq   0x00007fb1a0871c00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToVirtual [0x00007fb1a0870556, 0x00007fb1a087059d] (71 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a0870556:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a0870560:   mov    0x8(%rbx),%rdx
  0x00007fb1a0870564:   movzwl 0x2c(%rdx),%edx
  0x00007fb1a0870568:   mov    (%rsp,%rdx,8),%rcx
  0x00007fb1a087056c:   pop    %rax
  0x00007fb1a087056d:   pop    %rbx
  0x00007fb1a087056e:   push   %rax
  0x00007fb1a087056f:   mov    0x8(%rcx),%r10d
  0x00007fb1a0870573:   movabs $0x800000000,%r11
  0x00007fb1a087057d:   add    %r11,%r10
  0x00007fb1a0870580:   mov    0x10(%rbx),%r11
  0x00007fb1a0870584:   mov    0x1c0(%r10,%r11,8),%rbx
  0x00007fb1a087058c:   test   %rbx,%rbx
  0x00007fb1a087058f:   je     0x00007fb1a0870598
  0x00007fb1a0870595:   jmpq   *0x50(%rbx)
  0x00007fb1a0870598:   jmpq   0x00007fb1a0871c00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToStatic [0x00007fb1a087059d, 0x00007fb1a08705bf] (34 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087059d:   data16 xchg %ax,%ax
  0x00007fb1a08705a0:   pop    %rax
  0x00007fb1a08705a1:   pop    %rbx
  0x00007fb1a08705a2:   push   %rax
  0x00007fb1a08705a3:   mov    0x24(%rbx),%ebx
  0x00007fb1a08705a6:   shl    $0x3,%rbx
  0x00007fb1a08705aa:   mov    0x10(%rbx),%rbx
  0x00007fb1a08705ae:   test   %rbx,%rbx
  0x00007fb1a08705b1:   je     0x00007fb1a08705ba
  0x00007fb1a08705b7:   jmpq   *0x50(%rbx)
  0x00007fb1a08705ba:   jmpq   0x00007fb1a0871c00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToSpecial [0x00007fb1a08705bf, 0x00007fb1a08705ee] (47 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08705bf:   nop
  0x00007fb1a08705c0:   mov    0x8(%rbx),%rdx
  0x00007fb1a08705c4:   movzwl 0x2c(%rdx),%edx
  0x00007fb1a08705c8:   mov    (%rsp,%rdx,8),%rcx
  0x00007fb1a08705cc:   pop    %rax
  0x00007fb1a08705cd:   pop    %rbx
  0x00007fb1a08705ce:   push   %rax
  0x00007fb1a08705cf:   cmp    (%rcx),%rax
  0x00007fb1a08705d2:   mov    0x24(%rbx),%ebx
  0x00007fb1a08705d5:   shl    $0x3,%rbx
  0x00007fb1a08705d9:   mov    0x10(%rbx),%rbx
  0x00007fb1a08705dd:   test   %rbx,%rbx
  0x00007fb1a08705e0:   je     0x00007fb1a08705e9
  0x00007fb1a08705e6:   jmpq   *0x50(%rbx)
  0x00007fb1a08705e9:   jmpq   0x00007fb1a0871c00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToInterface [0x00007fb1a08705ee, 0x00007fb1a087067d] (143 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a08705ee:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fb1a08705f9:   data16 data16 xchg %ax,%ax
  0x00007fb1a08705fd:   data16 xchg %ax,%ax
  0x00007fb1a0870600:   mov    0x8(%rbx),%rdx
  0x00007fb1a0870604:   movzwl 0x2c(%rdx),%edx
  0x00007fb1a0870608:   mov    (%rsp,%rdx,8),%rcx
  0x00007fb1a087060c:   pop    %rax
  0x00007fb1a087060d:   pop    %rbx
  0x00007fb1a087060e:   push   %rax
  0x00007fb1a087060f:   mov    0x8(%rcx),%r10d
  0x00007fb1a0870613:   movabs $0x800000000,%r11
  0x00007fb1a087061d:   add    %r11,%r10
  0x00007fb1a0870620:   mov    0x18(%rbx),%eax
  0x00007fb1a0870623:   shl    $0x3,%rax
  0x00007fb1a0870627:   mov    0x10(%rax),%rax
  0x00007fb1a087062b:   mov    0x10(%rbx),%rbx
  0x00007fb1a087062f:   mov    0xa0(%r10),%r11d
  0x00007fb1a0870636:   lea    0x1c0(%r10,%r11,8),%r11
  0x00007fb1a087063e:   lea    (%r10,%rbx,8),%r10
  0x00007fb1a0870642:   mov    (%r11),%rbx
  0x00007fb1a0870645:   cmp    %rbx,%rax
  0x00007fb1a0870648:   je     0x00007fb1a087065f
  0x00007fb1a087064a:   test   %rbx,%rbx
  0x00007fb1a087064d:   je     0x00007fb1a0870678
  0x00007fb1a0870653:   add    $0x10,%r11
  0x00007fb1a0870657:   mov    (%r11),%rbx
  0x00007fb1a087065a:   cmp    %rbx,%rax
  0x00007fb1a087065d:   jne    0x00007fb1a087064a
  0x00007fb1a087065f:   mov    0x8(%r11),%r11d
  0x00007fb1a0870663:   mov    (%r10,%r11,1),%rbx
  0x00007fb1a0870667:   test   %rbx,%rbx
  0x00007fb1a087066a:   je     0x00007fb1a0870673
  0x00007fb1a0870670:   jmpq   *0x50(%rbx)
  0x00007fb1a0870673:   jmpq   0x00007fb1a0871c00
  0x00007fb1a0870678:   jmpq   0x00007fb1a0871900
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToNative [0x00007fb1a087067d, 0x00007fb1a087067e] (1 bytes)
--------------------------------------------------------------------------------
  0x00007fb1a087067d:   hlt    
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding ExceptionBlob 0x00007fb1a08c1910
--------------------------------------------------------------------------------
  0x00007fb1a08c1980:   push   %rdx
  0x00007fb1a08c1981:   sub    $0x8,%rsp
  0x00007fb1a08c1985:   mov    %rbp,(%rsp)
  0x00007fb1a08c1989:   mov    %rax,0x428(%r15)
  0x00007fb1a08c1990:   mov    %rdx,0x430(%r15)
  0x00007fb1a08c1997:   vzeroupper 
  0x00007fb1a08c199a:   movabs $0x7fb1a08c1997,%r10
  0x00007fb1a08c19a4:   mov    %r10,0x2c8(%r15)
  0x00007fb1a08c19ab:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08c19b2:   mov    %r15,%rdi
  0x00007fb1a08c19b5:   and    $0xfffffffffffffff0,%rsp
  0x00007fb1a08c19b9:   callq  0x00007fb1a485f550 = OptoRuntime::handle_exception_C(JavaThread*)
  0x00007fb1a08c19be:   movq   $0x0,0x2c0(%r15)
  0x00007fb1a08c19c9:   movq   $0x0,0x2c8(%r15)
  0x00007fb1a08c19d4:   vzeroupper 
  0x00007fb1a08c19d7:   mov    (%rsp),%rbp
  0x00007fb1a08c19db:   add    $0x8,%rsp
  0x00007fb1a08c19df:   pop    %rdx
  0x00007fb1a08c19e0:   mov    %rax,%r8
  0x00007fb1a08c19e3:   mov    0x428(%r15),%rax
  0x00007fb1a08c19ea:   mov    0x430(%r15),%rdx
  0x00007fb1a08c19f1:   movq   $0x0,0x428(%r15)
  0x00007fb1a08c19fc:   jmpq   *%r8
  0x00007fb1a08c19ff:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 23 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_instance_Java 0x00007fb1a08c8010
--------------------------------------------------------------------------------
  0x00007fb1a08c8080:   sub    $0x8,%rsp
  0x00007fb1a08c8087:   mov    %rbp,(%rsp)
  0x00007fb1a08c808b:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08c8092:   mov    %rsi,%rdi
  0x00007fb1a08c8095:   mov    %r15,%rsi
  0x00007fb1a08c8098:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a08c80a0:   movabs $0x7fb1a485d020,%r10
  0x00007fb1a08c80aa:   callq  *%r10
  0x00007fb1a08c80ad:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08c80b4:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08c80bb:   mov    0x318(%r15),%rax
  0x00007fb1a08c80c2:   mov    %r12,0x318(%r15)
  0x00007fb1a08c80c9:   cmp    0x8(%r15),%r12
  0x00007fb1a08c80cd:   jne    0x00007fb1a08c80d1
  0x00007fb1a08c80cf:   pop    %rbp
  0x00007fb1a08c80d0:   retq   
  0x00007fb1a08c80d1:   xor    %ebx,%ebx
  0x00007fb1a08c80d3:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08c80dd:   pop    %rbp
  0x00007fb1a08c80de:   jmpq   *%r10
  0x00007fb1a08c80e1:   hlt    
  0x00007fb1a08c80e2:   hlt    
  0x00007fb1a08c80e3:   hlt    
  0x00007fb1a08c80e4:   hlt    
  0x00007fb1a08c80e5:   hlt    
  0x00007fb1a08c80e6:   hlt    
  0x00007fb1a08c80e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_array_Java 0x00007fb1a08c5510
--------------------------------------------------------------------------------
  0x00007fb1a08c5580:   sub    $0x8,%rsp
  0x00007fb1a08c5587:   mov    %rbp,(%rsp)
  0x00007fb1a08c558b:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08c5592:   mov    %rsi,%rdi
  0x00007fb1a08c5595:   mov    %edx,%esi
  0x00007fb1a08c5597:   mov    %r15,%rdx
  0x00007fb1a08c559a:   nopw   0x0(%rax,%rax,1)
  0x00007fb1a08c55a0:   movabs $0x7fb1a485d240,%r10
  0x00007fb1a08c55aa:   callq  *%r10
  0x00007fb1a08c55ad:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08c55b4:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08c55bb:   mov    0x318(%r15),%rax
  0x00007fb1a08c55c2:   mov    %r12,0x318(%r15)
  0x00007fb1a08c55c9:   cmp    0x8(%r15),%r12
  0x00007fb1a08c55cd:   jne    0x00007fb1a08c55d1
  0x00007fb1a08c55cf:   pop    %rbp
  0x00007fb1a08c55d0:   retq   
  0x00007fb1a08c55d1:   xor    %ebx,%ebx
  0x00007fb1a08c55d3:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08c55dd:   pop    %rbp
  0x00007fb1a08c55de:   jmpq   *%r10
  0x00007fb1a08c55e1:   hlt    
  0x00007fb1a08c55e2:   hlt    
  0x00007fb1a08c55e3:   hlt    
  0x00007fb1a08c55e4:   hlt    
  0x00007fb1a08c55e5:   hlt    
  0x00007fb1a08c55e6:   hlt    
  0x00007fb1a08c55e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_array_nozero_Java 0x00007fb1a08cd110
--------------------------------------------------------------------------------
  0x00007fb1a08cd180:   sub    $0x8,%rsp
  0x00007fb1a08cd187:   mov    %rbp,(%rsp)
  0x00007fb1a08cd18b:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08cd192:   mov    %rsi,%rdi
  0x00007fb1a08cd195:   mov    %edx,%esi
  0x00007fb1a08cd197:   mov    %r15,%rdx
  0x00007fb1a08cd19a:   nopw   0x0(%rax,%rax,1)
  0x00007fb1a08cd1a0:   movabs $0x7fb1a485e110,%r10
  0x00007fb1a08cd1aa:   callq  *%r10
  0x00007fb1a08cd1ad:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08cd1b4:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08cd1bb:   mov    0x318(%r15),%rax
  0x00007fb1a08cd1c2:   mov    %r12,0x318(%r15)
  0x00007fb1a08cd1c9:   cmp    0x8(%r15),%r12
  0x00007fb1a08cd1cd:   jne    0x00007fb1a08cd1d1
  0x00007fb1a08cd1cf:   pop    %rbp
  0x00007fb1a08cd1d0:   retq   
  0x00007fb1a08cd1d1:   xor    %ebx,%ebx
  0x00007fb1a08cd1d3:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08cd1dd:   pop    %rbp
  0x00007fb1a08cd1de:   jmpq   *%r10
  0x00007fb1a08cd1e1:   hlt    
  0x00007fb1a08cd1e2:   hlt    
  0x00007fb1a08cd1e3:   hlt    
  0x00007fb1a08cd1e4:   hlt    
  0x00007fb1a08cd1e5:   hlt    
  0x00007fb1a08cd1e6:   hlt    
  0x00007fb1a08cd1e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray2_Java 0x00007fb1a08cd410
--------------------------------------------------------------------------------
  0x00007fb1a08cd480:   sub    $0x8,%rsp
  0x00007fb1a08cd487:   mov    %rbp,(%rsp)
  0x00007fb1a08cd48b:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08cd492:   mov    %rsi,%rdi
  0x00007fb1a08cd495:   mov    %edx,%esi
  0x00007fb1a08cd497:   mov    %ecx,%edx
  0x00007fb1a08cd499:   mov    %r15,%rcx
  0x00007fb1a08cd49c:   nopl   0x0(%rax)
  0x00007fb1a08cd4a0:   movabs $0x7fb1a485d3f0,%r10
  0x00007fb1a08cd4aa:   callq  *%r10
  0x00007fb1a08cd4ad:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08cd4b4:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08cd4bb:   mov    0x318(%r15),%rax
  0x00007fb1a08cd4c2:   mov    %r12,0x318(%r15)
  0x00007fb1a08cd4c9:   cmp    0x8(%r15),%r12
  0x00007fb1a08cd4cd:   jne    0x00007fb1a08cd4d1
  0x00007fb1a08cd4cf:   pop    %rbp
  0x00007fb1a08cd4d0:   retq   
  0x00007fb1a08cd4d1:   xor    %ebx,%ebx
  0x00007fb1a08cd4d3:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08cd4dd:   pop    %rbp
  0x00007fb1a08cd4de:   jmpq   *%r10
  0x00007fb1a08cd4e1:   hlt    
  0x00007fb1a08cd4e2:   hlt    
  0x00007fb1a08cd4e3:   hlt    
  0x00007fb1a08cd4e4:   hlt    
  0x00007fb1a08cd4e5:   hlt    
  0x00007fb1a08cd4e6:   hlt    
  0x00007fb1a08cd4e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray3_Java 0x00007fb1a08c6690
--------------------------------------------------------------------------------
  0x00007fb1a08c6700:   sub    $0x8,%rsp
  0x00007fb1a08c6707:   mov    %rbp,(%rsp)
  0x00007fb1a08c670b:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08c6712:   mov    %rsi,%rdi
  0x00007fb1a08c6715:   mov    %edx,%esi
  0x00007fb1a08c6717:   mov    %ecx,%edx
  0x00007fb1a08c6719:   mov    %r8d,%ecx
  0x00007fb1a08c671c:   mov    %r15,%r8
  0x00007fb1a08c671f:   nop
  0x00007fb1a08c6720:   movabs $0x7fb1a485d570,%r10
  0x00007fb1a08c672a:   callq  *%r10
  0x00007fb1a08c672d:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08c6734:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08c673b:   mov    0x318(%r15),%rax
  0x00007fb1a08c6742:   mov    %r12,0x318(%r15)
  0x00007fb1a08c6749:   cmp    0x8(%r15),%r12
  0x00007fb1a08c674d:   jne    0x00007fb1a08c6751
  0x00007fb1a08c674f:   pop    %rbp
  0x00007fb1a08c6750:   retq   
  0x00007fb1a08c6751:   xor    %ebx,%ebx
  0x00007fb1a08c6753:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08c675d:   pop    %rbp
  0x00007fb1a08c675e:   jmpq   *%r10
  0x00007fb1a08c6761:   hlt    
  0x00007fb1a08c6762:   hlt    
  0x00007fb1a08c6763:   hlt    
  0x00007fb1a08c6764:   hlt    
  0x00007fb1a08c6765:   hlt    
  0x00007fb1a08c6766:   hlt    
  0x00007fb1a08c6767:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray4_Java 0x00007fb1a08d0990
--------------------------------------------------------------------------------
  0x00007fb1a08d0a00:   sub    $0x8,%rsp
  0x00007fb1a08d0a07:   mov    %rbp,(%rsp)
  0x00007fb1a08d0a0b:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08d0a12:   mov    %rsi,%rdi
  0x00007fb1a08d0a15:   mov    %edx,%esi
  0x00007fb1a08d0a17:   mov    %ecx,%edx
  0x00007fb1a08d0a19:   mov    %r8d,%ecx
  0x00007fb1a08d0a1c:   mov    %r9d,%r8d
  0x00007fb1a08d0a1f:   mov    %r15,%r9
  0x00007fb1a08d0a22:   movabs $0x7fb1a485d6f0,%r10
  0x00007fb1a08d0a2c:   callq  *%r10
  0x00007fb1a08d0a2f:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08d0a36:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08d0a3d:   mov    0x318(%r15),%rax
  0x00007fb1a08d0a44:   mov    %r12,0x318(%r15)
  0x00007fb1a08d0a4b:   cmp    0x8(%r15),%r12
  0x00007fb1a08d0a4f:   jne    0x00007fb1a08d0a53
  0x00007fb1a08d0a51:   pop    %rbp
  0x00007fb1a08d0a52:   retq   
  0x00007fb1a08d0a53:   xor    %ebx,%ebx
  0x00007fb1a08d0a55:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08d0a5f:   pop    %rbp
  0x00007fb1a08d0a60:   jmpq   *%r10
  0x00007fb1a08d0a63:   hlt    
  0x00007fb1a08d0a64:   hlt    
  0x00007fb1a08d0a65:   hlt    
  0x00007fb1a08d0a66:   hlt    
  0x00007fb1a08d0a67:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 47 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray5_Java 0x00007fb1a08d1f10
--------------------------------------------------------------------------------
  0x00007fb1a08d1f80:   sub    $0x18,%rsp
  0x00007fb1a08d1f87:   mov    %rbp,0x10(%rsp)
  0x00007fb1a08d1f8c:   mov    %edi,%r10d
  0x00007fb1a08d1f8f:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08d1f96:   mov    %rsi,%rdi
  0x00007fb1a08d1f99:   mov    %edx,%esi
  0x00007fb1a08d1f9b:   mov    %ecx,%edx
  0x00007fb1a08d1f9d:   mov    %r8d,%ecx
  0x00007fb1a08d1fa0:   mov    %r9d,%r8d
  0x00007fb1a08d1fa3:   mov    %r10d,%r9d
  0x00007fb1a08d1fa6:   mov    %r15,(%rsp)
  0x00007fb1a08d1faa:   movabs $0x7fb1a485d880,%r10
  0x00007fb1a08d1fb4:   callq  *%r10
  0x00007fb1a08d1fb7:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08d1fbe:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08d1fc5:   mov    0x318(%r15),%rax
  0x00007fb1a08d1fcc:   mov    %r12,0x318(%r15)
  0x00007fb1a08d1fd3:   cmp    0x8(%r15),%r12
  0x00007fb1a08d1fd7:   jne    0x00007fb1a08d1fdf
  0x00007fb1a08d1fd9:   add    $0x10,%rsp
  0x00007fb1a08d1fdd:   pop    %rbp
  0x00007fb1a08d1fde:   retq   
  0x00007fb1a08d1fdf:   xor    %ebx,%ebx
  0x00007fb1a08d1fe1:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08d1feb:   add    $0x10,%rsp
  0x00007fb1a08d1fef:   pop    %rbp
  0x00007fb1a08d1ff0:   jmpq   *%r10
  0x00007fb1a08d1ff3:   hlt    
  0x00007fb1a08d1ff4:   hlt    
  0x00007fb1a08d1ff5:   hlt    
  0x00007fb1a08d1ff6:   hlt    
  0x00007fb1a08d1ff7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 55 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarrayN_Java 0x00007fb1a08ca590
--------------------------------------------------------------------------------
  0x00007fb1a08ca600:   sub    $0x8,%rsp
  0x00007fb1a08ca607:   mov    %rbp,(%rsp)
  0x00007fb1a08ca60b:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08ca612:   mov    %rsi,%rdi
  0x00007fb1a08ca615:   mov    %rdx,%rsi
  0x00007fb1a08ca618:   mov    %r15,%rdx
  0x00007fb1a08ca61b:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a08ca620:   movabs $0x7fb1a485da20,%r10
  0x00007fb1a08ca62a:   callq  *%r10
  0x00007fb1a08ca62d:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08ca634:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08ca63b:   mov    0x318(%r15),%rax
  0x00007fb1a08ca642:   mov    %r12,0x318(%r15)
  0x00007fb1a08ca649:   cmp    0x8(%r15),%r12
  0x00007fb1a08ca64d:   jne    0x00007fb1a08ca651
  0x00007fb1a08ca64f:   pop    %rbp
  0x00007fb1a08ca650:   retq   
  0x00007fb1a08ca651:   xor    %ebx,%ebx
  0x00007fb1a08ca653:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08ca65d:   pop    %rbp
  0x00007fb1a08ca65e:   jmpq   *%r10
  0x00007fb1a08ca661:   hlt    
  0x00007fb1a08ca662:   hlt    
  0x00007fb1a08ca663:   hlt    
  0x00007fb1a08ca664:   hlt    
  0x00007fb1a08ca665:   hlt    
  0x00007fb1a08ca666:   hlt    
  0x00007fb1a08ca667:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _complete_monitor_locking_Java 0x00007fb1a08d8010
--------------------------------------------------------------------------------
  0x00007fb1a08d8080:   sub    $0x8,%rsp
  0x00007fb1a08d8087:   mov    %rbp,(%rsp)
  0x00007fb1a08d808b:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08d8092:   mov    %rsi,%rdi
  0x00007fb1a08d8095:   mov    %rdx,%rsi
  0x00007fb1a08d8098:   mov    %r15,%rdx
  0x00007fb1a08d809b:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a08d80a0:   movabs $0x7fb1a4870470,%r10
  0x00007fb1a08d80aa:   callq  *%r10
  0x00007fb1a08d80ad:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08d80b4:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08d80bb:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a08d80c0:   cmp    0x8(%r15),%r12
  0x00007fb1a08d80c4:   jne    0x00007fb1a08d80c8
  0x00007fb1a08d80c6:   pop    %rbp
  0x00007fb1a08d80c7:   retq   
  0x00007fb1a08d80c8:   xor    %ebx,%ebx
  0x00007fb1a08d80ca:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08d80d4:   pop    %rbp
  0x00007fb1a08d80d5:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _monitor_notify_Java 0x00007fb1a08d5010
--------------------------------------------------------------------------------
  0x00007fb1a08d5080:   sub    $0x8,%rsp
  0x00007fb1a08d5087:   mov    %rbp,(%rsp)
  0x00007fb1a08d508b:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08d5092:   mov    %rsi,%rdi
  0x00007fb1a08d5095:   mov    %r15,%rsi
  0x00007fb1a08d5098:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a08d50a0:   movabs $0x7fb1a485b360,%r10
  0x00007fb1a08d50aa:   callq  *%r10
  0x00007fb1a08d50ad:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08d50b4:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08d50bb:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a08d50c0:   cmp    0x8(%r15),%r12
  0x00007fb1a08d50c4:   jne    0x00007fb1a08d50c8
  0x00007fb1a08d50c6:   pop    %rbp
  0x00007fb1a08d50c7:   retq   
  0x00007fb1a08d50c8:   xor    %ebx,%ebx
  0x00007fb1a08d50ca:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08d50d4:   pop    %rbp
  0x00007fb1a08d50d5:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _monitor_notifyAll_Java 0x00007fb1a08cf590
--------------------------------------------------------------------------------
  0x00007fb1a08cf600:   sub    $0x8,%rsp
  0x00007fb1a08cf607:   mov    %rbp,(%rsp)
  0x00007fb1a08cf60b:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08cf612:   mov    %rsi,%rdi
  0x00007fb1a08cf615:   mov    %r15,%rsi
  0x00007fb1a08cf618:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a08cf620:   movabs $0x7fb1a485b160,%r10
  0x00007fb1a08cf62a:   callq  *%r10
  0x00007fb1a08cf62d:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08cf634:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08cf63b:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a08cf640:   cmp    0x8(%r15),%r12
  0x00007fb1a08cf644:   jne    0x00007fb1a08cf648
  0x00007fb1a08cf646:   pop    %rbp
  0x00007fb1a08cf647:   retq   
  0x00007fb1a08cf648:   xor    %ebx,%ebx
  0x00007fb1a08cf64a:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08cf654:   pop    %rbp
  0x00007fb1a08cf655:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _rethrow_Java 0x00007fb1a08cf290
--------------------------------------------------------------------------------
  0x00007fb1a08cf300:   sub    $0x18,%rsp
  0x00007fb1a08cf307:   mov    %rbp,0x10(%rsp)
  0x00007fb1a08cf30c:   rex.W pushq 0x18(%rsp)
  0x00007fb1a08cf311:   rex.W popq (%rsp)
  0x00007fb1a08cf315:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08cf31c:   mov    %rsi,%rdi
  0x00007fb1a08cf31f:   mov    %r15,%rsi
  0x00007fb1a08cf322:   mov    (%rsp),%rdx
  0x00007fb1a08cf326:   movabs $0x7fb1a485ada0,%r10
  0x00007fb1a08cf330:   callq  *%r10
  0x00007fb1a08cf333:   mov    %rax,%r10
  0x00007fb1a08cf336:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08cf33d:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08cf344:   mov    0x318(%r15),%rax
  0x00007fb1a08cf34b:   mov    %r12,0x318(%r15)
  0x00007fb1a08cf352:   cmp    0x8(%r15),%r12
  0x00007fb1a08cf356:   jne    0x00007fb1a08cf361
  0x00007fb1a08cf358:   add    $0x10,%rsp
  0x00007fb1a08cf35c:   pop    %rbp
  0x00007fb1a08cf35d:   pop    %rdx
  0x00007fb1a08cf35e:   jmpq   *%r10
  0x00007fb1a08cf361:   xor    %ebx,%ebx
  0x00007fb1a08cf363:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08cf36d:   add    $0x10,%rsp
  0x00007fb1a08cf371:   pop    %rbp
  0x00007fb1a08cf372:   jmpq   *%r10
  0x00007fb1a08cf375:   hlt    
  0x00007fb1a08cf376:   hlt    
  0x00007fb1a08cf377:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 51 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _slow_arraycopy_Java 0x00007fb1a08ce990
--------------------------------------------------------------------------------
  0x00007fb1a08cea00:   sub    $0x8,%rsp
  0x00007fb1a08cea07:   mov    %rbp,(%rsp)
  0x00007fb1a08cea0b:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08cea12:   mov    %rsi,%rdi
  0x00007fb1a08cea15:   mov    %edx,%esi
  0x00007fb1a08cea17:   mov    %rcx,%rdx
  0x00007fb1a08cea1a:   mov    %r8d,%ecx
  0x00007fb1a08cea1d:   mov    %r9d,%r8d
  0x00007fb1a08cea20:   mov    %r15,%r9
  0x00007fb1a08cea23:   movabs $0x7fb1a486ffa0,%r10
  0x00007fb1a08cea2d:   callq  *%r10
  0x00007fb1a08cea30:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08cea37:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08cea3e:   xchg   %ax,%ax
  0x00007fb1a08cea40:   cmp    0x8(%r15),%r12
  0x00007fb1a08cea44:   jne    0x00007fb1a08cea48
  0x00007fb1a08cea46:   pop    %rbp
  0x00007fb1a08cea47:   retq   
  0x00007fb1a08cea48:   xor    %ebx,%ebx
  0x00007fb1a08cea4a:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08cea54:   pop    %rbp
  0x00007fb1a08cea55:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 48 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _register_finalizer_Java 0x00007fb1a08ce010
--------------------------------------------------------------------------------
  0x00007fb1a08ce080:   sub    $0x8,%rsp
  0x00007fb1a08ce087:   mov    %rbp,(%rsp)
  0x00007fb1a08ce08b:   mov    %rsp,0x2c0(%r15)
  0x00007fb1a08ce092:   mov    %rsi,%rdi
  0x00007fb1a08ce095:   mov    %r15,%rsi
  0x00007fb1a08ce098:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a08ce0a0:   movabs $0x7fb1a485b090,%r10
  0x00007fb1a08ce0aa:   callq  *%r10
  0x00007fb1a08ce0ad:   mov    %r12,0x2c0(%r15)
  0x00007fb1a08ce0b4:   mov    %r12,0x2c8(%r15)
  0x00007fb1a08ce0bb:   nopl   0x0(%rax,%rax,1)
  0x00007fb1a08ce0c0:   cmp    0x8(%r15),%r12
  0x00007fb1a08ce0c4:   jne    0x00007fb1a08ce0c8
  0x00007fb1a08ce0c6:   pop    %rbp
  0x00007fb1a08ce0c7:   retq   
  0x00007fb1a08ce0c8:   xor    %ebx,%ebx
  0x00007fb1a08ce0ca:   movabs $0x7fb1a0832c00,%r10
  0x00007fb1a08ce0d4:   pop    %rbp
  0x00007fb1a08ce0d5:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

[Time]  33 ms  [Res] 20000
- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ICache::flush_icache_stub [0x00007fa5c5000080, 0x00007fa5c500009d] (29 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000080:   test   %esi,%esi
  0x00007fa5c5000082:   je     0x00007fa5c5000099
  0x00007fa5c5000088:   mfence 
  0x00007fa5c500008b:   clflush (%rdi)
  0x00007fa5c500008e:   add    $0x40,%rdi
  0x00007fa5c5000092:   dec    %esi
  0x00007fa5c5000094:   jne    0x00007fa5c500008b
  0x00007fa5c5000096:   mfence 
  0x00007fa5c5000099:   mov    %rdx,%rax
  0x00007fa5c500009c:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::get_cpu_info_stub [0x00007fa5c5000380, 0x00007fa5c500061c] (668 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000380:   push   %rbp
  0x00007fa5c5000381:   mov    %rdi,%rbp
  0x00007fa5c5000384:   push   %rbx
  0x00007fa5c5000385:   push   %rsi
  0x00007fa5c5000386:   pushfq 
  0x00007fa5c5000387:   pop    %rax
  0x00007fa5c5000388:   push   %rax
  0x00007fa5c5000389:   mov    %rax,%rcx
  0x00007fa5c500038c:   xor    $0x40000,%eax
  0x00007fa5c5000391:   push   %rax
  0x00007fa5c5000392:   popfq  
  0x00007fa5c5000393:   pushfq 
  0x00007fa5c5000394:   pop    %rax
  0x00007fa5c5000395:   cmp    %rcx,%rax
  0x00007fa5c5000398:   jne    0x00007fa5c50003a7
  0x00007fa5c500039a:   mov    $0x300,%eax
  0x00007fa5c500039f:   mov    %eax,0x10(%rbp)
  0x00007fa5c50003a2:   jmpq   0x00007fa5c500059d
  0x00007fa5c50003a7:   mov    %rcx,%rax
  0x00007fa5c50003aa:   xor    $0x200000,%eax
  0x00007fa5c50003af:   push   %rax
  0x00007fa5c50003b0:   popfq  
  0x00007fa5c50003b1:   pushfq 
  0x00007fa5c50003b2:   pop    %rax
  0x00007fa5c50003b3:   cmp    %rax,%rcx
  0x00007fa5c50003b6:   jne    0x00007fa5c50003c5
  0x00007fa5c50003b8:   mov    $0x400,%eax
  0x00007fa5c50003bd:   mov    %eax,0x10(%rbp)
  0x00007fa5c50003c0:   jmpq   0x00007fa5c500059d
  0x00007fa5c50003c5:   xor    %eax,%eax
  0x00007fa5c50003c7:   cpuid  
  0x00007fa5c50003c9:   or     %eax,%eax
  0x00007fa5c50003cb:   je     0x00007fa5c50003b8
  0x00007fa5c50003cd:   lea    0x0(%rbp),%rsi
  0x00007fa5c50003d1:   mov    %eax,(%rsi)
  0x00007fa5c50003d3:   mov    %ebx,0x4(%rsi)
  0x00007fa5c50003d6:   mov    %ecx,0x8(%rsi)
  0x00007fa5c50003d9:   mov    %edx,0xc(%rsi)
  0x00007fa5c50003dc:   cmp    $0xa,%eax
  0x00007fa5c50003df:   jbe    0x00007fa5c500044b
  0x00007fa5c50003e1:   mov    $0xb,%eax
  0x00007fa5c50003e6:   xor    %ecx,%ecx
  0x00007fa5c50003e8:   cpuid  
  0x00007fa5c50003ea:   lea    0x40(%rbp),%rsi
  0x00007fa5c50003ee:   mov    %eax,(%rsi)
  0x00007fa5c50003f0:   mov    %ebx,0x4(%rsi)
  0x00007fa5c50003f3:   mov    %ecx,0x8(%rsi)
  0x00007fa5c50003f6:   mov    %edx,0xc(%rsi)
  0x00007fa5c50003f9:   mov    $0xb,%eax
  0x00007fa5c50003fe:   mov    $0x1,%ecx
  0x00007fa5c5000403:   cpuid  
  0x00007fa5c5000405:   push   %rax
  0x00007fa5c5000406:   and    $0x1f,%eax
  0x00007fa5c5000409:   or     %ebx,%eax
  0x00007fa5c500040b:   and    $0xffff,%eax
  0x00007fa5c5000410:   pop    %rax
  0x00007fa5c5000411:   je     0x00007fa5c500044b
  0x00007fa5c5000413:   lea    0x50(%rbp),%rsi
  0x00007fa5c5000417:   mov    %eax,(%rsi)
  0x00007fa5c5000419:   mov    %ebx,0x4(%rsi)
  0x00007fa5c500041c:   mov    %ecx,0x8(%rsi)
  0x00007fa5c500041f:   mov    %edx,0xc(%rsi)
  0x00007fa5c5000422:   mov    $0xb,%eax
  0x00007fa5c5000427:   mov    $0x2,%ecx
  0x00007fa5c500042c:   cpuid  
  0x00007fa5c500042e:   push   %rax
  0x00007fa5c500042f:   and    $0x1f,%eax
  0x00007fa5c5000432:   or     %ebx,%eax
  0x00007fa5c5000434:   and    $0xffff,%eax
  0x00007fa5c5000439:   pop    %rax
  0x00007fa5c500043a:   je     0x00007fa5c500044b
  0x00007fa5c500043c:   lea    0x60(%rbp),%rsi
  0x00007fa5c5000440:   mov    %eax,(%rsi)
  0x00007fa5c5000442:   mov    %ebx,0x4(%rsi)
  0x00007fa5c5000445:   mov    %ecx,0x8(%rsi)
  0x00007fa5c5000448:   mov    %edx,0xc(%rsi)
  0x00007fa5c500044b:   mov    $0x4,%eax
  0x00007fa5c5000450:   cmp    0x0(%rbp),%eax
  0x00007fa5c5000453:   jg     0x00007fa5c5000471
  0x00007fa5c5000455:   xor    %ecx,%ecx
  0x00007fa5c5000457:   cpuid  
  0x00007fa5c5000459:   push   %rax
  0x00007fa5c500045a:   and    $0x1f,%eax
  0x00007fa5c500045d:   or     %eax,%eax
  0x00007fa5c500045f:   pop    %rax
  0x00007fa5c5000460:   je     0x00007fa5c5000471
  0x00007fa5c5000462:   lea    0x20(%rbp),%rsi
  0x00007fa5c5000466:   mov    %eax,(%rsi)
  0x00007fa5c5000468:   mov    %ebx,0x4(%rsi)
  0x00007fa5c500046b:   mov    %ecx,0x8(%rsi)
  0x00007fa5c500046e:   mov    %edx,0xc(%rsi)
  0x00007fa5c5000471:   mov    $0x1,%eax
  0x00007fa5c5000476:   cpuid  
  0x00007fa5c5000478:   lea    0x10(%rbp),%rsi
  0x00007fa5c500047c:   mov    %eax,(%rsi)
  0x00007fa5c500047e:   mov    %ebx,0x4(%rsi)
  0x00007fa5c5000481:   mov    %ecx,0x8(%rsi)
  0x00007fa5c5000484:   mov    %edx,0xc(%rsi)
  0x00007fa5c5000487:   and    $0x18000000,%ecx
  0x00007fa5c500048d:   cmp    $0x18000000,%ecx
  0x00007fa5c5000493:   jne    0x00007fa5c50004a6
  0x00007fa5c5000495:   xor    %ecx,%ecx
  0x00007fa5c5000497:   xgetbv 
  0x00007fa5c500049a:   lea    0x100(%rbp),%rsi
  0x00007fa5c50004a1:   mov    %eax,(%rsi)
  0x00007fa5c50004a3:   mov    %edx,0x4(%rsi)
  0x00007fa5c50004a6:   mov    $0x7,%eax
  0x00007fa5c50004ab:   cmp    0x0(%rbp),%eax
  0x00007fa5c50004ae:   jg     0x00007fa5c50004c3
  0x00007fa5c50004b0:   xor    %ecx,%ecx
  0x00007fa5c50004b2:   cpuid  
  0x00007fa5c50004b4:   lea    0x30(%rbp),%rsi
  0x00007fa5c50004b8:   mov    %eax,(%rsi)
  0x00007fa5c50004ba:   mov    %ebx,0x4(%rsi)
  0x00007fa5c50004bd:   mov    %ecx,0x8(%rsi)
  0x00007fa5c50004c0:   mov    %edx,0xc(%rsi)
  0x00007fa5c50004c3:   mov    $0x80000000,%eax
  0x00007fa5c50004c8:   cpuid  
  0x00007fa5c50004ca:   cmp    $0x80000000,%eax
  0x00007fa5c50004cf:   jbe    0x00007fa5c500059d
  0x00007fa5c50004d5:   cmp    $0x80000004,%eax
  0x00007fa5c50004da:   jbe    0x00007fa5c5000560
  0x00007fa5c50004e0:   cmp    $0x80000006,%eax
  0x00007fa5c50004e5:   jbe    0x00007fa5c5000547
  0x00007fa5c50004e7:   cmp    $0x80000007,%eax
  0x00007fa5c50004ec:   jbe    0x00007fa5c500052e
  0x00007fa5c50004ee:   cmp    $0x80000008,%eax
  0x00007fa5c50004f3:   jbe    0x00007fa5c5000515
  0x00007fa5c50004f5:   cmp    $0x8000001e,%eax
  0x00007fa5c50004fa:   jb     0x00007fa5c5000515
  0x00007fa5c50004fc:   mov    $0x8000001e,%eax
  0x00007fa5c5000501:   cpuid  
  0x00007fa5c5000503:   lea    0xf0(%rbp),%rsi
  0x00007fa5c500050a:   mov    %eax,(%rsi)
  0x00007fa5c500050c:   mov    %ebx,0x4(%rsi)
  0x00007fa5c500050f:   mov    %ecx,0x8(%rsi)
  0x00007fa5c5000512:   mov    %edx,0xc(%rsi)
  0x00007fa5c5000515:   mov    $0x80000008,%eax
  0x00007fa5c500051a:   cpuid  
  0x00007fa5c500051c:   lea    0xe0(%rbp),%rsi
  0x00007fa5c5000523:   mov    %eax,(%rsi)
  0x00007fa5c5000525:   mov    %ebx,0x4(%rsi)
  0x00007fa5c5000528:   mov    %ecx,0x8(%rsi)
  0x00007fa5c500052b:   mov    %edx,0xc(%rsi)
  0x00007fa5c500052e:   mov    $0x80000007,%eax
  0x00007fa5c5000533:   cpuid  
  0x00007fa5c5000535:   lea    0xd0(%rbp),%rsi
  0x00007fa5c500053c:   mov    %eax,(%rsi)
  0x00007fa5c500053e:   mov    %ebx,0x4(%rsi)
  0x00007fa5c5000541:   mov    %ecx,0x8(%rsi)
  0x00007fa5c5000544:   mov    %edx,0xc(%rsi)
  0x00007fa5c5000547:   mov    $0x80000005,%eax
  0x00007fa5c500054c:   cpuid  
  0x00007fa5c500054e:   lea    0xc0(%rbp),%rsi
  0x00007fa5c5000555:   mov    %eax,(%rsi)
  0x00007fa5c5000557:   mov    %ebx,0x4(%rsi)
  0x00007fa5c500055a:   mov    %ecx,0x8(%rsi)
  0x00007fa5c500055d:   mov    %edx,0xc(%rsi)
  0x00007fa5c5000560:   mov    $0x80000001,%eax
  0x00007fa5c5000565:   cpuid  
  0x00007fa5c5000567:   lea    0x80(%rbp),%rsi
  0x00007fa5c500056e:   mov    %eax,(%rsi)
  0x00007fa5c5000570:   mov    %ebx,0x4(%rsi)
  0x00007fa5c5000573:   mov    %ecx,0x8(%rsi)
  0x00007fa5c5000576:   mov    %edx,0xc(%rsi)
  0x00007fa5c5000579:   lea    0x10(%rbp),%rsi
  0x00007fa5c500057d:   mov    $0x18000000,%ecx
  0x00007fa5c5000582:   and    0x8(%rsi),%ecx
  0x00007fa5c5000585:   cmp    $0x18000000,%ecx
  0x00007fa5c500058b:   jne    0x00007fa5c500059d
  0x00007fa5c500058d:   mov    $0x6,%eax
  0x00007fa5c5000592:   and    0x100(%rbp),%eax
  0x00007fa5c5000598:   cmp    $0x6,%eax
  0x00007fa5c500059b:   je     0x00007fa5c50005a2
  0x00007fa5c500059d:   jmpq   0x00007fa5c5000617
  0x00007fa5c50005a2:   mov    $0xcafebabe,%ecx
  0x00007fa5c50005a7:   vmovd  %ecx,%xmm0
  0x00007fa5c50005ab:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fa5c50005b0:   vinsertf128 $0x1,%xmm0,%ymm0,%ymm0
  0x00007fa5c50005b6:   vmovdqu %ymm0,%ymm7
  0x00007fa5c50005ba:   vmovdqu %ymm0,%ymm8
  0x00007fa5c50005be:   vmovdqu %ymm0,%ymm15
  0x00007fa5c50005c2:   xor    %esi,%esi
  0x00007fa5c50005c4:   mov    (%rsi),%eax
  0x00007fa5c50005c6:   lea    0x108(%rbp),%rsi
  0x00007fa5c50005cd:   vmovdqu %ymm0,(%rsi)
  0x00007fa5c50005d1:   vmovdqu %ymm7,0x20(%rsi)
  0x00007fa5c50005d6:   vmovdqu %ymm8,0x40(%rsi)
  0x00007fa5c50005db:   vmovdqu %ymm15,0x60(%rsi)
  0x00007fa5c50005e0:   lea    0x0(%rbp),%rsi
  0x00007fa5c50005e4:   cmpl   $0x756e6547,0x4(%rsi)
  0x00007fa5c50005eb:   jne    0x00007fa5c5000617
  0x00007fa5c50005f1:   mov    $0xfff0ff0,%ecx
  0x00007fa5c50005f6:   lea    0x10(%rbp),%rsi
  0x00007fa5c50005fa:   and    (%rsi),%ecx
  0x00007fa5c50005fc:   cmp    $0x50670,%ecx
  0x00007fa5c5000602:   je     0x00007fa5c5000617
  0x00007fa5c5000608:   cmp    $0x80650,%ecx
  0x00007fa5c500060e:   je     0x00007fa5c5000617
  0x00007fa5c5000614:   vzeroupper 
  0x00007fa5c5000617:   popfq  
  0x00007fa5c5000618:   pop    %rsi
  0x00007fa5c5000619:   pop    %rbx
  0x00007fa5c500061a:   pop    %rbp
  0x00007fa5c500061b:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::detect_virt_stub [0x00007fa5c500061c, 0x00007fa5c5000636] (26 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c500061c:   push   %rbp
  0x00007fa5c500061d:   push   %rbx
  0x00007fa5c500061e:   push   %rsi
  0x00007fa5c500061f:   mov    %rdi,%rax
  0x00007fa5c5000622:   mov    %rsi,%rsi
  0x00007fa5c5000625:   cpuid  
  0x00007fa5c5000627:   mov    %eax,(%rsi)
  0x00007fa5c5000629:   mov    %ebx,0x4(%rsi)
  0x00007fa5c500062c:   mov    %ecx,0x8(%rsi)
  0x00007fa5c500062f:   mov    %edx,0xc(%rsi)
  0x00007fa5c5000632:   pop    %rsi
  0x00007fa5c5000633:   pop    %rbx
  0x00007fa5c5000634:   pop    %rbp
  0x00007fa5c5000635:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::forward exception [0x00007fa5c5000c00, 0x00007fa5c5000c3d] (61 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000c00:   mov    (%rsp),%rdi
  0x00007fa5c5000c04:   mov    %rdi,%rsi
  0x00007fa5c5000c07:   mov    %r15,%rdi
  0x00007fa5c5000c0a:   test   $0xf,%spl
  0x00007fa5c5000c0e:   je     0x00007fa5c5000c26
  0x00007fa5c5000c14:   sub    $0x8,%rsp
  0x00007fa5c5000c18:   callq  0x00007fa5ce3eadb0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x00007fa5c5000c1d:   add    $0x8,%rsp
  0x00007fa5c5000c21:   jmpq   0x00007fa5c5000c2b
  0x00007fa5c5000c26:   callq  0x00007fa5ce3eadb0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x00007fa5c5000c2b:   mov    %rax,%rbx
  0x00007fa5c5000c2e:   pop    %rdx
  0x00007fa5c5000c2f:   mov    0x8(%r15),%rax
  0x00007fa5c5000c33:   movq   $0x0,0x8(%r15)
  0x00007fa5c5000c3b:   jmpq   *%rbx
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::call_stub [0x00007fa5c5000c3d, 0x00007fa5c5000d2a] (237 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000c3d:   push   %rbp
  0x00007fa5c5000c3e:   mov    %rsp,%rbp
  0x00007fa5c5000c41:   sub    $0x60,%rsp
  0x00007fa5c5000c45:   mov    %r9,-0x8(%rbp)
  0x00007fa5c5000c49:   mov    %r8,-0x10(%rbp)
  0x00007fa5c5000c4d:   mov    %rcx,-0x18(%rbp)
  0x00007fa5c5000c51:   mov    %edx,-0x20(%rbp)
  0x00007fa5c5000c54:   mov    %rsi,-0x28(%rbp)
  0x00007fa5c5000c58:   mov    %rdi,-0x30(%rbp)
  0x00007fa5c5000c5c:   mov    %rbx,-0x38(%rbp)
  0x00007fa5c5000c60:   mov    %r12,-0x40(%rbp)
  0x00007fa5c5000c64:   mov    %r13,-0x48(%rbp)
  0x00007fa5c5000c68:   mov    %r14,-0x50(%rbp)
  0x00007fa5c5000c6c:   mov    %r15,-0x58(%rbp)
  0x00007fa5c5000c70:   vstmxcsr -0x60(%rbp)
  0x00007fa5c5000c75:   mov    -0x60(%rbp),%eax
  0x00007fa5c5000c78:   and    $0xffc0,%eax
  0x00007fa5c5000c7d:   cmp    0x9ac42e5(%rip),%eax        # 0x00007fa5ceac4f68
  0x00007fa5c5000c83:   je     0x00007fa5c5000c91
  0x00007fa5c5000c89:   vldmxcsr 0x9ac42d7(%rip)        # 0x00007fa5ceac4f68
  0x00007fa5c5000c91:   mov    0x18(%rbp),%r15
  0x00007fa5c5000c95:   mov    0x9a55374(%rip),%r12        # 0x00007fa5cea56010
  0x00007fa5c5000c9c:   mov    0x10(%rbp),%ecx
  0x00007fa5c5000c9f:   test   %ecx,%ecx
  0x00007fa5c5000ca1:   je     0x00007fa5c5000cb9
  0x00007fa5c5000ca7:   mov    -0x8(%rbp),%rdx
  0x00007fa5c5000cab:   mov    %ecx,%esi
  0x00007fa5c5000cad:   mov    (%rdx),%rax
  0x00007fa5c5000cb0:   add    $0x8,%rdx
  0x00007fa5c5000cb4:   dec    %esi
  0x00007fa5c5000cb6:   push   %rax
  0x00007fa5c5000cb7:   jne    0x00007fa5c5000cad
  0x00007fa5c5000cb9:   mov    -0x18(%rbp),%rbx
  0x00007fa5c5000cbd:   mov    -0x10(%rbp),%rsi
  0x00007fa5c5000cc1:   mov    %rsp,%r13
  0x00007fa5c5000cc4:   callq  *%rsi
  0x00007fa5c5000cc6:   mov    -0x28(%rbp),%rdi
  0x00007fa5c5000cca:   mov    -0x20(%rbp),%esi
  0x00007fa5c5000ccd:   cmp    $0xc,%esi
  0x00007fa5c5000cd0:   je     0x00007fa5c5000d19
  0x00007fa5c5000cd6:   cmp    $0xb,%esi
  0x00007fa5c5000cd9:   je     0x00007fa5c5000d19
  0x00007fa5c5000cdf:   cmp    $0x6,%esi
  0x00007fa5c5000ce2:   je     0x00007fa5c5000d1e
  0x00007fa5c5000ce8:   cmp    $0x7,%esi
  0x00007fa5c5000ceb:   je     0x00007fa5c5000d24
  0x00007fa5c5000cf1:   mov    %eax,(%rdi)
  0x00007fa5c5000cf3:   lea    -0x60(%rbp),%rsp
  0x00007fa5c5000cf7:   mov    -0x58(%rbp),%r15
  0x00007fa5c5000cfb:   mov    -0x50(%rbp),%r14
  0x00007fa5c5000cff:   mov    -0x48(%rbp),%r13
  0x00007fa5c5000d03:   mov    -0x40(%rbp),%r12
  0x00007fa5c5000d07:   mov    -0x38(%rbp),%rbx
  0x00007fa5c5000d0b:   vldmxcsr -0x60(%rbp)
  0x00007fa5c5000d10:   add    $0x60,%rsp
  0x00007fa5c5000d14:   vzeroupper 
  0x00007fa5c5000d17:   pop    %rbp
  0x00007fa5c5000d18:   retq   
  0x00007fa5c5000d19:   mov    %rax,(%rdi)
  0x00007fa5c5000d1c:   jmp    0x00007fa5c5000cf3
  0x00007fa5c5000d1e:   vmovss %xmm0,(%rdi)
  0x00007fa5c5000d22:   jmp    0x00007fa5c5000cf3
  0x00007fa5c5000d24:   vmovsd %xmm0,(%rdi)
  0x00007fa5c5000d28:   jmp    0x00007fa5c5000cf3
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::catch_exception [0x00007fa5c5000d2a, 0x00007fa5c5000d49] (31 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000d2a:   mov    %rax,0x8(%r15)
  0x00007fa5c5000d2e:   movabs $0x7fa5ce779ca0,%r10
  0x00007fa5c5000d38:   mov    %r10,0x10(%r15)
  0x00007fa5c5000d3c:   movl   $0x1cb,0x18(%r15)
  0x00007fa5c5000d44:   jmpq   0x00007fa5c5000cc6
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::orderaccess_fence [0x00007fa5c5000d49, 0x00007fa5c5000d50] (7 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000d49:   lock addl $0x0,-0x40(%rsp)
  0x00007fa5c5000d4f:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::get_previous_sp [0x00007fa5c5000d50, 0x00007fa5c5000d58] (8 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000d50:   mov    %rsp,%rax
  0x00007fa5c5000d53:   add    $0x8,%rax
  0x00007fa5c5000d57:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::verify_mxcsr [0x00007fa5c5000d58, 0x00007fa5c5000d59] (1 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000d58:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::f2i_fixup [0x00007fa5c5000d59, 0x00007fa5c5000d91] (56 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000d59:   push   %rax
  0x00007fa5c5000d5a:   push   %rcx
  0x00007fa5c5000d5b:   push   %rdx
  0x00007fa5c5000d5c:   push   %rsi
  0x00007fa5c5000d5d:   mov    $0x7f800000,%eax
  0x00007fa5c5000d62:   xor    %ecx,%ecx
  0x00007fa5c5000d64:   mov    0x28(%rsp),%edx
  0x00007fa5c5000d68:   mov    %edx,%esi
  0x00007fa5c5000d6a:   and    $0x7fffffff,%esi
  0x00007fa5c5000d70:   cmp    %esi,%eax
  0x00007fa5c5000d72:   js     0x00007fa5c5000d87
  0x00007fa5c5000d78:   test   %edx,%edx
  0x00007fa5c5000d7a:   mov    $0x80000000,%ecx
  0x00007fa5c5000d7f:   mov    $0x7fffffff,%eax
  0x00007fa5c5000d84:   cmovns %eax,%ecx
  0x00007fa5c5000d87:   mov    %rcx,0x28(%rsp)
  0x00007fa5c5000d8c:   pop    %rsi
  0x00007fa5c5000d8d:   pop    %rdx
  0x00007fa5c5000d8e:   pop    %rcx
  0x00007fa5c5000d8f:   pop    %rax
  0x00007fa5c5000d90:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::f2l_fixup [0x00007fa5c5000d91, 0x00007fa5c5000dd4] (67 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000d91:   push   %rax
  0x00007fa5c5000d92:   push   %rcx
  0x00007fa5c5000d93:   push   %rdx
  0x00007fa5c5000d94:   push   %rsi
  0x00007fa5c5000d95:   mov    $0x7f800000,%eax
  0x00007fa5c5000d9a:   xor    %ecx,%ecx
  0x00007fa5c5000d9c:   mov    0x28(%rsp),%edx
  0x00007fa5c5000da0:   mov    %edx,%esi
  0x00007fa5c5000da2:   and    $0x7fffffff,%esi
  0x00007fa5c5000da8:   cmp    %esi,%eax
  0x00007fa5c5000daa:   js     0x00007fa5c5000dca
  0x00007fa5c5000db0:   test   %edx,%edx
  0x00007fa5c5000db2:   movabs $0x8000000000000000,%rcx
  0x00007fa5c5000dbc:   movabs $0x7fffffffffffffff,%rax
  0x00007fa5c5000dc6:   cmovns %rax,%rcx
  0x00007fa5c5000dca:   mov    %rcx,0x28(%rsp)
  0x00007fa5c5000dcf:   pop    %rsi
  0x00007fa5c5000dd0:   pop    %rdx
  0x00007fa5c5000dd1:   pop    %rcx
  0x00007fa5c5000dd2:   pop    %rax
  0x00007fa5c5000dd3:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::d2i_fixup [0x00007fa5c5000dd4, 0x00007fa5c5000e24] (80 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000dd4:   push   %rax
  0x00007fa5c5000dd5:   push   %rcx
  0x00007fa5c5000dd6:   push   %rdx
  0x00007fa5c5000dd7:   push   %rsi
  0x00007fa5c5000dd8:   push   %rdi
  0x00007fa5c5000dd9:   mov    $0x7ff00000,%eax
  0x00007fa5c5000dde:   mov    0x30(%rsp),%rdx
  0x00007fa5c5000de3:   mov    %edx,%ecx
  0x00007fa5c5000de5:   mov    %rdx,%rsi
  0x00007fa5c5000de8:   mov    %rdx,%rdi
  0x00007fa5c5000deb:   neg    %ecx
  0x00007fa5c5000ded:   shr    $0x20,%rsi
  0x00007fa5c5000df1:   or     %edx,%ecx
  0x00007fa5c5000df3:   and    $0x7fffffff,%esi
  0x00007fa5c5000df9:   xor    %edx,%edx
  0x00007fa5c5000dfb:   shr    $0x1f,%ecx
  0x00007fa5c5000dfe:   or     %ecx,%esi
  0x00007fa5c5000e00:   cmp    %esi,%eax
  0x00007fa5c5000e02:   js     0x00007fa5c5000e19
  0x00007fa5c5000e08:   test   %rdi,%rdi
  0x00007fa5c5000e0b:   mov    $0x80000000,%edx
  0x00007fa5c5000e10:   mov    $0x7fffffff,%eax
  0x00007fa5c5000e15:   cmovns %rax,%rdx
  0x00007fa5c5000e19:   mov    %rdx,0x30(%rsp)
  0x00007fa5c5000e1e:   pop    %rdi
  0x00007fa5c5000e1f:   pop    %rsi
  0x00007fa5c5000e20:   pop    %rdx
  0x00007fa5c5000e21:   pop    %rcx
  0x00007fa5c5000e22:   pop    %rax
  0x00007fa5c5000e23:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::d2l_fixup [0x00007fa5c5000e24, 0x00007fa5c5000e7e] (90 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000e24:   push   %rax
  0x00007fa5c5000e25:   push   %rcx
  0x00007fa5c5000e26:   push   %rdx
  0x00007fa5c5000e27:   push   %rsi
  0x00007fa5c5000e28:   push   %rdi
  0x00007fa5c5000e29:   mov    $0x7ff00000,%eax
  0x00007fa5c5000e2e:   mov    0x30(%rsp),%rdx
  0x00007fa5c5000e33:   mov    %edx,%ecx
  0x00007fa5c5000e35:   mov    %rdx,%rsi
  0x00007fa5c5000e38:   mov    %rdx,%rdi
  0x00007fa5c5000e3b:   neg    %ecx
  0x00007fa5c5000e3d:   shr    $0x20,%rsi
  0x00007fa5c5000e41:   or     %edx,%ecx
  0x00007fa5c5000e43:   and    $0x7fffffff,%esi
  0x00007fa5c5000e49:   xor    %edx,%edx
  0x00007fa5c5000e4b:   shr    $0x1f,%ecx
  0x00007fa5c5000e4e:   or     %ecx,%esi
  0x00007fa5c5000e50:   cmp    %esi,%eax
  0x00007fa5c5000e52:   js     0x00007fa5c5000e73
  0x00007fa5c5000e58:   test   %rdi,%rdi
  0x00007fa5c5000e5b:   movabs $0x8000000000000000,%rdx
  0x00007fa5c5000e65:   movabs $0x7fffffffffffffff,%rax
  0x00007fa5c5000e6f:   cmovns %rax,%rdx
  0x00007fa5c5000e73:   mov    %rdx,0x30(%rsp)
  0x00007fa5c5000e78:   pop    %rdi
  0x00007fa5c5000e79:   pop    %rsi
  0x00007fa5c5000e7a:   pop    %rdx
  0x00007fa5c5000e7b:   pop    %rcx
  0x00007fa5c5000e7c:   pop    %rax
  0x00007fa5c5000e7d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::float_sign_mask [0x00007fa5c5000e80, 0x00007fa5c5000e90] (16 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000e80:   (bad)  
  0x00007fa5c5000e81:   (bad)  
  0x00007fa5c5000e82:   (bad)  
  0x00007fa5c5000e83:   jg     0x00007fa5c5000e84
  0x00007fa5c5000e85:   (bad)  
  0x00007fa5c5000e86:   (bad)  
  0x00007fa5c5000e87:   jg     0x00007fa5c5000e88
  0x00007fa5c5000e89:   (bad)  
  0x00007fa5c5000e8a:   (bad)  
  0x00007fa5c5000e8b:   jg     0x00007fa5c5000e8c
  0x00007fa5c5000e8d:   (bad)  
  0x00007fa5c5000e8e:   (bad)  
  0x00007fa5c5000e8f:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::float_sign_flip [0x00007fa5c5000ea0, 0x00007fa5c5000eb0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000ea0:   add    %al,(%rax)
  0x00007fa5c5000ea2:   add    %al,-0x80000000(%rax)
  0x00007fa5c5000ea8:   add    %al,(%rax)
  0x00007fa5c5000eaa:   add    %al,-0x80000000(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::double_sign_mask [0x00007fa5c5000ec0, 0x00007fa5c5000ed0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000ec0:   (bad)  
  0x00007fa5c5000ec1:   (bad)  
  0x00007fa5c5000ec2:   (bad)  
  0x00007fa5c5000ec3:   (bad)  
  0x00007fa5c5000ec4:   (bad)  
  0x00007fa5c5000ec5:   (bad)  
  0x00007fa5c5000ec6:   (bad)  
  0x00007fa5c5000ec7:   jg     0x00007fa5c5000ec8
  0x00007fa5c5000ec9:   (bad)  
  0x00007fa5c5000eca:   (bad)  
  0x00007fa5c5000ecb:   (bad)  
  0x00007fa5c5000ecc:   (bad)  
  0x00007fa5c5000ecd:   (bad)  
  0x00007fa5c5000ece:   (bad)  
  0x00007fa5c5000ecf:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::double_sign_flip [0x00007fa5c5000ee0, 0x00007fa5c5000ef0] (16 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000ee0:   add    %al,(%rax)
  0x00007fa5c5000ee2:   add    %al,(%rax)
  0x00007fa5c5000ee4:   add    %al,(%rax)
  0x00007fa5c5000ee6:   add    %al,0x0(%rax)
  0x00007fa5c5000eec:   add    %al,(%rax)
  0x00007fa5c5000eee:   .byte 0x0
  0x00007fa5c5000eef:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - StackOverflowError throw_exception 0x00007fa5c5008610
--------------------------------------------------------------------------------
  0x00007fa5c5008680:   push   %rbp
  0x00007fa5c5008681:   mov    %rsp,%rbp
  0x00007fa5c5008684:   sub    $0x0,%rsp
  0x00007fa5c5008688:   vzeroupper 
  0x00007fa5c500868b:   mov    %rbp,0x2d0(%r15)
  0x00007fa5c5008692:   movabs $0x7fa5c5008688,%r10
  0x00007fa5c500869c:   mov    %r10,0x2c8(%r15)
  0x00007fa5c50086a3:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c50086aa:   and    $0xfffffffffffffff0,%rsp
  0x00007fa5c50086ae:   mov    %r15,%rdi
  0x00007fa5c50086b1:   callq  0x00007fa5ce3f12a0 = SharedRuntime::throw_StackOverflowError(JavaThread*)
  0x00007fa5c50086b6:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c50086c1:   movq   $0x0,0x2d0(%r15)
  0x00007fa5c50086cc:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c50086d7:   vzeroupper 
  0x00007fa5c50086da:   leaveq 
  0x00007fa5c50086db:   jmpq   0x00007fa5c5000c00
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - delayed StackOverflowError throw_exception 0x00007fa5c5008910
--------------------------------------------------------------------------------
  0x00007fa5c5008980:   push   %rbp
  0x00007fa5c5008981:   mov    %rsp,%rbp
  0x00007fa5c5008984:   sub    $0x0,%rsp
  0x00007fa5c5008988:   vzeroupper 
  0x00007fa5c500898b:   mov    %rbp,0x2d0(%r15)
  0x00007fa5c5008992:   movabs $0x7fa5c5008988,%r10
  0x00007fa5c500899c:   mov    %r10,0x2c8(%r15)
  0x00007fa5c50089a3:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c50089aa:   and    $0xfffffffffffffff0,%rsp
  0x00007fa5c50089ae:   mov    %r15,%rdi
  0x00007fa5c50089b1:   callq  0x00007fa5ce3f1460 = SharedRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007fa5c50089b6:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c50089c1:   movq   $0x0,0x2d0(%r15)
  0x00007fa5c50089cc:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c50089d7:   vzeroupper 
  0x00007fa5c50089da:   leaveq 
  0x00007fa5c50089db:   jmpq   0x00007fa5c5000c00
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesCRC32 [0x00007fa5c5000f00, 0x00007fa5c5001170] (624 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5000f00:   push   %rbp
  0x00007fa5c5000f01:   mov    %rsp,%rbp
  0x00007fa5c5000f04:   movabs $0x7fa5cea6c780,%rcx
  0x00007fa5c5000f0e:   not    %edi
  0x00007fa5c5000f10:   cmp    $0x10,%edx
  0x00007fa5c5000f13:   jl     0x00007fa5c500114a
  0x00007fa5c5000f19:   mov    %esi,%r11d
  0x00007fa5c5000f1c:   and    $0xf,%r11d
  0x00007fa5c5000f20:   je     0x00007fa5c5000f44
  0x00007fa5c5000f22:   sub    $0x10,%r11d
  0x00007fa5c5000f26:   add    %r11d,%edx
  0x00007fa5c5000f29:   data16 xchg %ax,%ax
  0x00007fa5c5000f2c:   movsbl (%rsi),%eax
  0x00007fa5c5000f2f:   xor    %edi,%eax
  0x00007fa5c5000f31:   and    $0xff,%eax
  0x00007fa5c5000f36:   shr    $0x8,%edi
  0x00007fa5c5000f39:   xor    (%rcx,%rax,4),%edi
  0x00007fa5c5000f3c:   inc    %rsi
  0x00007fa5c5000f3f:   inc    %r11d
  0x00007fa5c5000f42:   jl     0x00007fa5c5000f2c
  0x00007fa5c5000f44:   mov    %edx,%r11d
  0x00007fa5c5000f47:   shr    $0x4,%edx
  0x00007fa5c5000f4a:   je     0x00007fa5c5001147
  0x00007fa5c5000f50:   vmovdqa (%rsi),%xmm1
  0x00007fa5c5000f54:   vmovd  %xmm1,%eax
  0x00007fa5c5000f58:   xor    %eax,%edi
  0x00007fa5c5000f5a:   vpinsrd $0x0,%edi,%xmm1,%xmm1
  0x00007fa5c5000f60:   add    $0x10,%rsi
  0x00007fa5c5000f64:   sub    $0x4,%edx
  0x00007fa5c5000f67:   jl     0x00007fa5c5001060
  0x00007fa5c5000f6d:   vmovdqa (%rsi),%xmm2
  0x00007fa5c5000f71:   vmovdqa 0x10(%rsi),%xmm3
  0x00007fa5c5000f76:   vmovdqa 0x20(%rsi),%xmm4
  0x00007fa5c5000f7b:   add    $0x30,%rsi
  0x00007fa5c5000f7f:   sub    $0x3,%edx
  0x00007fa5c5000f82:   jle    0x00007fa5c500101c
  0x00007fa5c5000f88:   vmovdqu 0x9a6bc10(%rip),%xmm0        # 0x00007fa5cea6cba0
  0x00007fa5c5000f90:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c5000f9b:   data16 data16 xchg %ax,%ax
  0x00007fa5c5000f9f:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c5000faa:   data16 data16 xchg %ax,%ax
  0x00007fa5c5000fae:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c5000fb9:   data16 data16 xchg %ax,%ax
  0x00007fa5c5000fbd:   data16 xchg %ax,%ax
  0x00007fa5c5000fc0:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007fa5c5000fc6:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007fa5c5000fcc:   vpxor  (%rsi),%xmm1,%xmm1
  0x00007fa5c5000fd0:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007fa5c5000fd4:   vpclmulhqhqdq %xmm2,%xmm0,%xmm5
  0x00007fa5c5000fda:   vpclmullqlqdq %xmm2,%xmm0,%xmm2
  0x00007fa5c5000fe0:   vpxor  0x10(%rsi),%xmm2,%xmm2
  0x00007fa5c5000fe5:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007fa5c5000fe9:   vpclmulhqhqdq %xmm3,%xmm0,%xmm5
  0x00007fa5c5000fef:   vpclmullqlqdq %xmm3,%xmm0,%xmm3
  0x00007fa5c5000ff5:   vpxor  0x20(%rsi),%xmm3,%xmm3
  0x00007fa5c5000ffa:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007fa5c5000ffe:   vpclmulhqhqdq %xmm4,%xmm0,%xmm5
  0x00007fa5c5001004:   vpclmullqlqdq %xmm4,%xmm0,%xmm4
  0x00007fa5c500100a:   vpxor  0x30(%rsi),%xmm4,%xmm4
  0x00007fa5c500100f:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007fa5c5001013:   add    $0x40,%rsi
  0x00007fa5c5001017:   sub    $0x4,%edx
  0x00007fa5c500101a:   jg     0x00007fa5c5000fc0
  0x00007fa5c500101c:   vmovdqu 0x9a6bb6c(%rip),%xmm0        # 0x00007fa5cea6cb90
  0x00007fa5c5001024:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007fa5c500102a:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007fa5c5001030:   vpxor  %xmm2,%xmm1,%xmm1
  0x00007fa5c5001034:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007fa5c5001038:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007fa5c500103e:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007fa5c5001044:   vpxor  %xmm3,%xmm1,%xmm1
  0x00007fa5c5001048:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007fa5c500104c:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007fa5c5001052:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007fa5c5001058:   vpxor  %xmm4,%xmm1,%xmm1
  0x00007fa5c500105c:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007fa5c5001060:   add    $0x3,%edx
  0x00007fa5c5001063:   jle    0x00007fa5c5001089
  0x00007fa5c5001065:   vmovdqu 0x9a6bb23(%rip),%xmm0        # 0x00007fa5cea6cb90
  0x00007fa5c500106d:   vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007fa5c5001073:   vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007fa5c5001079:   vpxor  (%rsi),%xmm1,%xmm1
  0x00007fa5c500107d:   vpxor  %xmm5,%xmm1,%xmm1
  0x00007fa5c5001081:   add    $0x10,%rsi
  0x00007fa5c5001085:   dec    %edx
  0x00007fa5c5001087:   jg     0x00007fa5c500106d
  0x00007fa5c5001089:   vmovdqu 0x9a6baef(%rip),%xmm0        # 0x00007fa5cea6cb80
  0x00007fa5c5001091:   vpclmulhqlqdq %xmm1,%xmm0,%xmm2
  0x00007fa5c5001097:   vpand  %xmm2,%xmm0,%xmm3
  0x00007fa5c500109b:   vpclmulhqlqdq %xmm3,%xmm0,%xmm0
  0x00007fa5c50010a1:   vpsrldq $0x8,%xmm1,%xmm1
  0x00007fa5c50010a6:   vpsrldq $0x4,%xmm2,%xmm2
  0x00007fa5c50010ab:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c50010af:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fa5c50010b3:   vmovd  %xmm0,%eax
  0x00007fa5c50010b7:   and    $0xff,%eax
  0x00007fa5c50010bc:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007fa5c50010c1:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007fa5c50010c6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c50010ca:   vmovd  %xmm0,%eax
  0x00007fa5c50010ce:   and    $0xff,%eax
  0x00007fa5c50010d3:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007fa5c50010d8:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007fa5c50010dd:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c50010e1:   vmovd  %xmm0,%eax
  0x00007fa5c50010e5:   and    $0xff,%eax
  0x00007fa5c50010ea:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007fa5c50010ef:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007fa5c50010f4:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c50010f8:   vmovd  %xmm0,%eax
  0x00007fa5c50010fc:   and    $0xff,%eax
  0x00007fa5c5001101:   vmovd  (%rcx,%rax,4),%xmm1
  0x00007fa5c5001106:   vpsrldq $0x1,%xmm0,%xmm0
  0x00007fa5c500110b:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c500110f:   vmovd  %xmm0,%edi
  0x00007fa5c5001113:   mov    %edi,%eax
  0x00007fa5c5001115:   and    $0xff,%eax
  0x00007fa5c500111a:   shr    $0x8,%edi
  0x00007fa5c500111d:   xor    (%rcx,%rax,4),%edi
  0x00007fa5c5001120:   mov    %edi,%eax
  0x00007fa5c5001122:   and    $0xff,%eax
  0x00007fa5c5001127:   shr    $0x8,%edi
  0x00007fa5c500112a:   xor    (%rcx,%rax,4),%edi
  0x00007fa5c500112d:   mov    %edi,%eax
  0x00007fa5c500112f:   and    $0xff,%eax
  0x00007fa5c5001134:   shr    $0x8,%edi
  0x00007fa5c5001137:   xor    (%rcx,%rax,4),%edi
  0x00007fa5c500113a:   mov    %edi,%eax
  0x00007fa5c500113c:   and    $0xff,%eax
  0x00007fa5c5001141:   shr    $0x8,%edi
  0x00007fa5c5001144:   xor    (%rcx,%rax,4),%edi
  0x00007fa5c5001147:   mov    %r11d,%edx
  0x00007fa5c500114a:   and    $0xf,%edx
  0x00007fa5c500114d:   je     0x00007fa5c5001167
  0x00007fa5c500114f:   nop
  0x00007fa5c5001150:   movsbl (%rsi),%eax
  0x00007fa5c5001153:   xor    %edi,%eax
  0x00007fa5c5001155:   and    $0xff,%eax
  0x00007fa5c500115a:   shr    $0x8,%edi
  0x00007fa5c500115d:   xor    (%rcx,%rax,4),%edi
  0x00007fa5c5001160:   inc    %rsi
  0x00007fa5c5001163:   dec    %edx
  0x00007fa5c5001165:   jg     0x00007fa5c5001150
  0x00007fa5c5001167:   not    %edi
  0x00007fa5c5001169:   mov    %edi,%eax
  0x00007fa5c500116b:   vzeroupper 
  0x00007fa5c500116e:   leaveq 
  0x00007fa5c500116f:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesCRC32C [0x00007fa5c5001180, 0x00007fa5c50013e4] (612 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5001180:   push   %rbp
  0x00007fa5c5001181:   mov    %rsp,%rbp
  0x00007fa5c5001184:   cmp    $0x1800,%edx
  0x00007fa5c500118a:   jl     0x00007fa5c5001235
  0x00007fa5c5001190:   xor    %eax,%eax
  0x00007fa5c5001192:   xor    %r9d,%r9d
  0x00007fa5c5001195:   mov    %rsi,%r10
  0x00007fa5c5001198:   add    $0x800,%r10
  0x00007fa5c500119f:   crc32q (%rsi),%rdi
  0x00007fa5c50011a5:   crc32q 0x800(%rsi),%rax
  0x00007fa5c50011af:   crc32q 0x1000(%rsi),%r9
  0x00007fa5c50011b9:   add    $0x8,%rsi
  0x00007fa5c50011bd:   cmp    %r10,%rsi
  0x00007fa5c50011c0:   jl     0x00007fa5c500119f
  0x00007fa5c50011c2:   vmovd  %edi,%xmm0
  0x00007fa5c50011c6:   mov    $0x35d73a62,%r11d
  0x00007fa5c50011cc:   vmovd  %r11d,%xmm2
  0x00007fa5c50011d1:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007fa5c50011d7:   vmovq  %xmm0,%rdi
  0x00007fa5c50011dc:   vmovd  %eax,%xmm1
  0x00007fa5c50011e0:   mov    $0xd65762a,%r11d
  0x00007fa5c50011e6:   vmovd  %r11d,%xmm2
  0x00007fa5c50011eb:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007fa5c50011f1:   vmovq  %xmm1,%rax
  0x00007fa5c50011f6:   shl    %rdi
  0x00007fa5c50011f9:   mov    %edi,%r11d
  0x00007fa5c50011fc:   shr    $0x20,%rdi
  0x00007fa5c5001200:   xor    %ecx,%ecx
  0x00007fa5c5001202:   crc32l %r11d,%ecx
  0x00007fa5c5001208:   xor    %ecx,%edi
  0x00007fa5c500120a:   shl    %rax
  0x00007fa5c500120d:   mov    %eax,%r11d
  0x00007fa5c5001210:   shr    $0x20,%rax
  0x00007fa5c5001214:   xor    %ecx,%ecx
  0x00007fa5c5001216:   crc32l %r11d,%ecx
  0x00007fa5c500121c:   xor    %ecx,%eax
  0x00007fa5c500121e:   xor    %eax,%edi
  0x00007fa5c5001220:   xor    %r9d,%edi
  0x00007fa5c5001223:   add    $0x1000,%rsi
  0x00007fa5c500122a:   sub    $0x1800,%edx
  0x00007fa5c5001230:   jmpq   0x00007fa5c5001184
  0x00007fa5c5001235:   cmp    $0x6f0,%edx
  0x00007fa5c500123b:   jl     0x00007fa5c50012e6
  0x00007fa5c5001241:   xor    %eax,%eax
  0x00007fa5c5001243:   xor    %r9d,%r9d
  0x00007fa5c5001246:   mov    %rsi,%r10
  0x00007fa5c5001249:   add    $0x250,%r10
  0x00007fa5c5001250:   crc32q (%rsi),%rdi
  0x00007fa5c5001256:   crc32q 0x250(%rsi),%rax
  0x00007fa5c5001260:   crc32q 0x4a0(%rsi),%r9
  0x00007fa5c500126a:   add    $0x8,%rsi
  0x00007fa5c500126e:   cmp    %r10,%rsi
  0x00007fa5c5001271:   jl     0x00007fa5c5001250
  0x00007fa5c5001273:   vmovd  %edi,%xmm0
  0x00007fa5c5001277:   mov    $0x3babc3e6,%r11d
  0x00007fa5c500127d:   vmovd  %r11d,%xmm2
  0x00007fa5c5001282:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007fa5c5001288:   vmovq  %xmm0,%rdi
  0x00007fa5c500128d:   vmovd  %eax,%xmm1
  0x00007fa5c5001291:   mov    $0x1230a27d,%r11d
  0x00007fa5c5001297:   vmovd  %r11d,%xmm2
  0x00007fa5c500129c:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007fa5c50012a2:   vmovq  %xmm1,%rax
  0x00007fa5c50012a7:   shl    %rdi
  0x00007fa5c50012aa:   mov    %edi,%r11d
  0x00007fa5c50012ad:   shr    $0x20,%rdi
  0x00007fa5c50012b1:   xor    %ecx,%ecx
  0x00007fa5c50012b3:   crc32l %r11d,%ecx
  0x00007fa5c50012b9:   xor    %ecx,%edi
  0x00007fa5c50012bb:   shl    %rax
  0x00007fa5c50012be:   mov    %eax,%r11d
  0x00007fa5c50012c1:   shr    $0x20,%rax
  0x00007fa5c50012c5:   xor    %ecx,%ecx
  0x00007fa5c50012c7:   crc32l %r11d,%ecx
  0x00007fa5c50012cd:   xor    %ecx,%eax
  0x00007fa5c50012cf:   xor    %eax,%edi
  0x00007fa5c50012d1:   xor    %r9d,%edi
  0x00007fa5c50012d4:   add    $0x4a0,%rsi
  0x00007fa5c50012db:   sub    $0x6f0,%edx
  0x00007fa5c50012e1:   jmpq   0x00007fa5c5001235
  0x00007fa5c50012e6:   cmp    $0xd8,%edx
  0x00007fa5c50012ec:   jl     0x00007fa5c5001391
  0x00007fa5c50012f2:   xor    %eax,%eax
  0x00007fa5c50012f4:   xor    %r9d,%r9d
  0x00007fa5c50012f7:   mov    %rsi,%r10
  0x00007fa5c50012fa:   add    $0x48,%r10
  0x00007fa5c50012fe:   crc32q (%rsi),%rdi
  0x00007fa5c5001304:   crc32q 0x48(%rsi),%rax
  0x00007fa5c500130b:   crc32q 0x90(%rsi),%r9
  0x00007fa5c5001315:   add    $0x8,%rsi
  0x00007fa5c5001319:   cmp    %r10,%rsi
  0x00007fa5c500131c:   jl     0x00007fa5c50012fe
  0x00007fa5c500131e:   vmovd  %edi,%xmm0
  0x00007fa5c5001322:   mov    $0xe55ef1f3,%r11d
  0x00007fa5c5001328:   vmovd  %r11d,%xmm2
  0x00007fa5c500132d:   vpclmullqlqdq %xmm2,%xmm0,%xmm0
  0x00007fa5c5001333:   vmovq  %xmm0,%rdi
  0x00007fa5c5001338:   vmovd  %eax,%xmm1
  0x00007fa5c500133c:   mov    $0x8cfaa965,%r11d
  0x00007fa5c5001342:   vmovd  %r11d,%xmm2
  0x00007fa5c5001347:   vpclmullqlqdq %xmm2,%xmm1,%xmm1
  0x00007fa5c500134d:   vmovq  %xmm1,%rax
  0x00007fa5c5001352:   shl    %rdi
  0x00007fa5c5001355:   mov    %edi,%r11d
  0x00007fa5c5001358:   shr    $0x20,%rdi
  0x00007fa5c500135c:   xor    %ecx,%ecx
  0x00007fa5c500135e:   crc32l %r11d,%ecx
  0x00007fa5c5001364:   xor    %ecx,%edi
  0x00007fa5c5001366:   shl    %rax
  0x00007fa5c5001369:   mov    %eax,%r11d
  0x00007fa5c500136c:   shr    $0x20,%rax
  0x00007fa5c5001370:   xor    %ecx,%ecx
  0x00007fa5c5001372:   crc32l %r11d,%ecx
  0x00007fa5c5001378:   xor    %ecx,%eax
  0x00007fa5c500137a:   xor    %eax,%edi
  0x00007fa5c500137c:   xor    %r9d,%edi
  0x00007fa5c500137f:   add    $0x90,%rsi
  0x00007fa5c5001386:   sub    $0xd8,%edx
  0x00007fa5c500138c:   jmpq   0x00007fa5c50012e6
  0x00007fa5c5001391:   mov    %edx,%eax
  0x00007fa5c5001393:   and    $0x7,%eax
  0x00007fa5c5001396:   neg    %eax
  0x00007fa5c5001398:   add    %edx,%eax
  0x00007fa5c500139a:   add    %rsi,%rax
  0x00007fa5c500139d:   cmp    %rax,%rsi
  0x00007fa5c50013a0:   jge    0x00007fa5c50013bf
  0x00007fa5c50013a2:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c50013ac:   data16 data16 xchg %ax,%ax
  0x00007fa5c50013b0:   crc32q (%rsi),%rdi
  0x00007fa5c50013b6:   add    $0x8,%rsi
  0x00007fa5c50013ba:   cmp    %rax,%rsi
  0x00007fa5c50013bd:   jl     0x00007fa5c50013b0
  0x00007fa5c50013bf:   and    $0x7,%edx
  0x00007fa5c50013c2:   mov    $0x1,%r9d
  0x00007fa5c50013c8:   cmp    %edx,%r9d
  0x00007fa5c50013cb:   jg     0x00007fa5c50013dd
  0x00007fa5c50013cd:   crc32b (%rsi),%edi
  0x00007fa5c50013d2:   inc    %rsi
  0x00007fa5c50013d5:   inc    %r9d
  0x00007fa5c50013d8:   cmp    %edx,%r9d
  0x00007fa5c50013db:   jle    0x00007fa5c50013cd
  0x00007fa5c50013dd:   mov    %edi,%eax
  0x00007fa5c50013df:   vzeroupper 
  0x00007fa5c50013e2:   leaveq 
  0x00007fa5c50013e3:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::updateBytesAdler32 [0x00007fa5c5001400, 0x00007fa5c50015e7] (487 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5001400:   push   %rbp
  0x00007fa5c5001401:   mov    %rsp,%rbp
  0x00007fa5c5001404:   vmovq  %r12,%xmm8
  0x00007fa5c5001409:   vmovq  %r13,%xmm9
  0x00007fa5c500140e:   vmovq  %r14,%xmm10
  0x00007fa5c5001413:   vmovdqu 0x9a63f85(%rip),%ymm6        # 0x00007fa5cea653a0
  0x00007fa5c500141b:   vmovdqu 0x9a63f5d(%rip),%ymm7        # 0x00007fa5cea65380
  0x00007fa5c5001423:   mov    %rsi,%r9
  0x00007fa5c5001426:   mov    %edx,%r10d
  0x00007fa5c5001429:   mov    %edi,%r8d
  0x00007fa5c500142c:   shr    $0x10,%r8d
  0x00007fa5c5001430:   and    $0xffff,%edi
  0x00007fa5c5001436:   cmp    $0x20,%r10d
  0x00007fa5c500143a:   jb     0x00007fa5c500154f
  0x00007fa5c5001440:   vmovd  %edi,%xmm0
  0x00007fa5c5001444:   mov    $0x15b0,%r11d
  0x00007fa5c500144a:   cmp    %r10d,%r11d
  0x00007fa5c500144d:   cmova  %r10d,%r11d
  0x00007fa5c5001451:   lea    -0xf(%r11,%r9,1),%r13
  0x00007fa5c5001456:   cmp    %r13,%r9
  0x00007fa5c5001459:   jae    0x00007fa5c50014ac
  0x00007fa5c500145f:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c500146a:   data16 data16 xchg %ax,%ax
  0x00007fa5c500146e:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c5001479:   data16 data16 xchg %ax,%ax
  0x00007fa5c500147d:   data16 xchg %ax,%ax
  0x00007fa5c5001480:   vpxor  %ymm1,%ymm1,%ymm1
  0x00007fa5c5001484:   vbroadcastf128 (%r9),%ymm4
  0x00007fa5c5001489:   add    $0x10,%r9
  0x00007fa5c500148d:   vpshufb %ymm6,%ymm4,%ymm2
  0x00007fa5c5001492:   vpaddd %ymm2,%ymm0,%ymm0
  0x00007fa5c5001496:   vpaddd %ymm0,%ymm1,%ymm1
  0x00007fa5c500149a:   vpshufb %ymm7,%ymm4,%ymm3
  0x00007fa5c500149f:   vpaddd %ymm3,%ymm0,%ymm0
  0x00007fa5c50014a3:   vpaddd %ymm0,%ymm1,%ymm1
  0x00007fa5c50014a7:   cmp    %r13,%r9
  0x00007fa5c50014aa:   jb     0x00007fa5c5001484
  0x00007fa5c50014ac:   vpslld $0x3,%ymm1,%ymm1
  0x00007fa5c50014b1:   vpmulld 0x9a63f06(%rip),%ymm0,%ymm4        # 0x00007fa5cea653c0
  0x00007fa5c50014ba:   vextracti128 $0x1,%ymm0,%xmm2
  0x00007fa5c50014c0:   vextracti128 $0x1,%ymm1,%xmm3
  0x00007fa5c50014c6:   vextracti128 $0x1,%ymm4,%xmm5
  0x00007fa5c50014cc:   vpaddd %xmm2,%xmm0,%xmm0
  0x00007fa5c50014d0:   vpaddd %xmm3,%xmm1,%xmm1
  0x00007fa5c50014d4:   vpaddd %xmm5,%xmm4,%xmm4
  0x00007fa5c50014d8:   vphaddd %xmm0,%xmm0,%xmm0
  0x00007fa5c50014dd:   vphaddd %xmm1,%xmm1,%xmm1
  0x00007fa5c50014e2:   vphaddd %xmm4,%xmm4,%xmm4
  0x00007fa5c50014e7:   vphaddd %xmm0,%xmm0,%xmm0
  0x00007fa5c50014ec:   vphaddd %xmm1,%xmm1,%xmm1
  0x00007fa5c50014f1:   vphaddd %xmm4,%xmm4,%xmm4
  0x00007fa5c50014f6:   vpsubd %xmm4,%xmm1,%xmm1
  0x00007fa5c50014fa:   add    $0xf,%r13
  0x00007fa5c50014fe:   test   $0xf,%r11b
  0x00007fa5c5001502:   jne    0x00007fa5c5001564
  0x00007fa5c5001508:   sub    %r11d,%r10d
  0x00007fa5c500150b:   vmovd  %xmm0,%eax
  0x00007fa5c500150f:   xor    %edx,%edx
  0x00007fa5c5001511:   mov    $0xfff1,%ecx
  0x00007fa5c5001516:   div    %ecx
  0x00007fa5c5001518:   mov    %edx,%r12d
  0x00007fa5c500151b:   vmovd  %xmm1,%eax
  0x00007fa5c500151f:   add    %r8d,%eax
  0x00007fa5c5001522:   xor    %edx,%edx
  0x00007fa5c5001524:   mov    $0xfff1,%ecx
  0x00007fa5c5001529:   div    %ecx
  0x00007fa5c500152b:   mov    %edx,%r8d
  0x00007fa5c500152e:   test   %r10d,%r10d
  0x00007fa5c5001531:   je     0x00007fa5c5001541
  0x00007fa5c5001537:   vmovd  %r12d,%xmm0
  0x00007fa5c500153c:   jmpq   0x00007fa5c5001444
  0x00007fa5c5001541:   mov    %r8d,%eax
  0x00007fa5c5001544:   shl    $0x10,%eax
  0x00007fa5c5001547:   or     %r12d,%eax
  0x00007fa5c500154a:   jmpq   0x00007fa5c50015d6
  0x00007fa5c500154f:   mov    %edi,%r12d
  0x00007fa5c5001552:   lea    (%r9,%r10,1),%r13
  0x00007fa5c5001556:   test   %r10d,%r10d
  0x00007fa5c5001559:   jne    0x00007fa5c50015a0
  0x00007fa5c500155f:   jmpq   0x00007fa5c50015b3
  0x00007fa5c5001564:   vmovd  %xmm0,%r12d
  0x00007fa5c5001569:   vmovd  %xmm1,%eax
  0x00007fa5c500156d:   add    %eax,%r8d
  0x00007fa5c5001570:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c500157b:   data16 data16 xchg %ax,%ax
  0x00007fa5c500157f:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c500158a:   data16 data16 xchg %ax,%ax
  0x00007fa5c500158e:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c5001599:   data16 data16 xchg %ax,%ax
  0x00007fa5c500159d:   data16 xchg %ax,%ax
  0x00007fa5c50015a0:   movzbl (%r9),%eax
  0x00007fa5c50015a4:   add    %eax,%r12d
  0x00007fa5c50015a7:   add    $0x1,%r9
  0x00007fa5c50015ab:   add    %r12d,%r8d
  0x00007fa5c50015ae:   cmp    %r13,%r9
  0x00007fa5c50015b1:   jb     0x00007fa5c50015a0
  0x00007fa5c50015b3:   mov    %r12d,%eax
  0x00007fa5c50015b6:   xor    %edx,%edx
  0x00007fa5c50015b8:   mov    $0xfff1,%ecx
  0x00007fa5c50015bd:   div    %ecx
  0x00007fa5c50015bf:   mov    %edx,%r12d
  0x00007fa5c50015c2:   mov    %r8d,%eax
  0x00007fa5c50015c5:   xor    %edx,%edx
  0x00007fa5c50015c7:   mov    $0xfff1,%ecx
  0x00007fa5c50015cc:   div    %ecx
  0x00007fa5c50015ce:   shl    $0x10,%edx
  0x00007fa5c50015d1:   or     %r12d,%edx
  0x00007fa5c50015d4:   mov    %edx,%eax
  0x00007fa5c50015d6:   vmovq  %xmm10,%r14
  0x00007fa5c50015db:   vmovq  %xmm9,%r13
  0x00007fa5c50015e0:   vmovq  %xmm8,%r12
  0x00007fa5c50015e5:   leaveq 
  0x00007fa5c50015e6:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmSin [0x00007fa5c50015e7, 0x00007fa5c5001c76] (1679 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50015e7:   push   %rbp
  0x00007fa5c50015e8:   mov    %rsp,%rbp
  0x00007fa5c50015eb:   push   %rbx
  0x00007fa5c50015ec:   sub    $0x10,%rsp
  0x00007fa5c50015f0:   vmovsd %xmm0,0x8(%rsp)
  0x00007fa5c50015f6:   mov    0xc(%rsp),%eax
  0x00007fa5c50015fa:   vmovq  0x9a64a4e(%rip),%xmm1        # 0x00007fa5cea66050
  0x00007fa5c5001602:   vmovq  0x9a64aa6(%rip),%xmm2        # 0x00007fa5cea660b0
  0x00007fa5c500160a:   and    $0x7fff0000,%eax
  0x00007fa5c500160f:   sub    $0x30300000,%eax
  0x00007fa5c5001614:   cmp    $0x10c50000,%eax
  0x00007fa5c5001619:   ja     0x00007fa5c5001769
  0x00007fa5c500161f:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007fa5c5001623:   vmovdqu 0x9a64ab5(%rip),%xmm5        # 0x00007fa5cea660e0
  0x00007fa5c500162b:   vmovq  0x9a64a9d(%rip),%xmm4        # 0x00007fa5cea660d0
  0x00007fa5c5001633:   vpand  %xmm0,%xmm4,%xmm4
  0x00007fa5c5001637:   vpor   %xmm4,%xmm5,%xmm5
  0x00007fa5c500163b:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007fa5c500163f:   vcvttsd2si %xmm1,%edx
  0x00007fa5c5001643:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007fa5c5001647:   vmovdqu 0x9a649e1(%rip),%xmm6        # 0x00007fa5cea66030
  0x00007fa5c500164f:   movabs $0x3fb921fb54400000,%r8
  0x00007fa5c5001659:   vmovq  %r8,%xmm3
  0x00007fa5c500165e:   vmovdqu 0x9a64a0a(%rip),%xmm5        # 0x00007fa5cea66070
  0x00007fa5c5001666:   vpshufd $0x44,%xmm0,%xmm4
  0x00007fa5c500166b:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007fa5c500166f:   vmovddup %xmm1,%xmm1
  0x00007fa5c5001673:   and    $0x3f,%edx
  0x00007fa5c5001676:   shl    $0x5,%edx
  0x00007fa5c5001679:   movabs $0x7fa5cea65780,%rax
  0x00007fa5c5001683:   add    %rdx,%rax
  0x00007fa5c5001686:   vmulpd %xmm1,%xmm6,%xmm6
  0x00007fa5c500168a:   vmulsd 0x9a64996(%rip),%xmm1,%xmm1        # 0x00007fa5cea66028
  0x00007fa5c5001692:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fa5c5001696:   vmovq  0x8(%rax),%xmm7
  0x00007fa5c500169b:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007fa5c500169f:   vmovddup %xmm4,%xmm3
  0x00007fa5c50016a3:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007fa5c50016a7:   vpshufd $0x44,%xmm0,%xmm0
  0x00007fa5c50016ac:   vmovdqu (%rax),%xmm2
  0x00007fa5c50016b0:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c50016b4:   vsubpd %xmm6,%xmm0,%xmm0
  0x00007fa5c50016b8:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007fa5c50016bc:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fa5c50016c0:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c50016c4:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c50016c8:   vsubsd %xmm6,%xmm3,%xmm3
  0x00007fa5c50016cc:   vmovdqu 0x9a649bc(%rip),%xmm6        # 0x00007fa5cea66090
  0x00007fa5c50016d4:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007fa5c50016d8:   vmovq  0x18(%rax),%xmm3
  0x00007fa5c50016dd:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fa5c50016e1:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007fa5c50016e5:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007fa5c50016e9:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007fa5c50016ed:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007fa5c50016f1:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007fa5c50016f5:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c50016f9:   vaddpd 0x9a6497f(%rip),%xmm5,%xmm5        # 0x00007fa5cea66080
  0x00007fa5c5001701:   vmulsd (%rax),%xmm4,%xmm4
  0x00007fa5c5001705:   vaddpd 0x9a64993(%rip),%xmm6,%xmm6        # 0x00007fa5cea660a0
  0x00007fa5c500170d:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5001711:   vmovdqu %xmm3,%xmm0
  0x00007fa5c5001715:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007fa5c500171a:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007fa5c500171e:   vmovdqu %xmm4,%xmm7
  0x00007fa5c5001722:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007fa5c5001726:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007fa5c500172a:   vmovq  0x8(%rax),%xmm5
  0x00007fa5c500172f:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007fa5c5001733:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fa5c5001737:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007fa5c500173c:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007fa5c5001740:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fa5c5001744:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007fa5c5001748:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fa5c500174c:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fa5c5001750:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fa5c5001754:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007fa5c5001758:   vmovdqu %xmm4,%xmm0
  0x00007fa5c500175c:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fa5c5001760:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fa5c5001764:   jmpq   0x00007fa5c5001c6f
  0x00007fa5c5001769:   jg     0x00007fa5c50017a7
  0x00007fa5c500176f:   shr    $0x14,%eax
  0x00007fa5c5001772:   cmp    $0xcfd,%eax
  0x00007fa5c5001777:   jne    0x00007fa5c500178a
  0x00007fa5c500177d:   vmulsd 0x9a691db(%rip),%xmm0,%xmm0        # 0x00007fa5cea6a960
  0x00007fa5c5001785:   jmpq   0x00007fa5c5001c6f
  0x00007fa5c500178a:   vmovq  0x9a64936(%rip),%xmm3        # 0x00007fa5cea660c8
  0x00007fa5c5001792:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007fa5c5001796:   vsubsd %xmm0,%xmm3,%xmm3
  0x00007fa5c500179a:   vmulsd 0x9a6491e(%rip),%xmm3,%xmm3        # 0x00007fa5cea660c0
  0x00007fa5c50017a2:   jmpq   0x00007fa5c5001c6f
  0x00007fa5c50017a7:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c50017ac:   and    $0x7ff0,%eax
  0x00007fa5c50017b1:   cmp    $0x7ff0,%eax
  0x00007fa5c50017b6:   je     0x00007fa5c5001c5c
  0x00007fa5c50017bc:   vpextrw $0x3,%xmm0,%ecx
  0x00007fa5c50017c1:   and    $0x7ff0,%ecx
  0x00007fa5c50017c7:   sub    $0x3f60,%ecx
  0x00007fa5c50017cd:   shr    $0x7,%ecx
  0x00007fa5c50017d0:   and    $0xfffc,%ecx
  0x00007fa5c50017d6:   movabs $0x7fa5cea65f80,%r11
  0x00007fa5c50017e0:   add    %r11,%rcx
  0x00007fa5c50017e3:   vmovq  %xmm0,%rax
  0x00007fa5c50017e8:   mov    0x14(%rcx),%r10d
  0x00007fa5c50017ec:   mov    0x18(%rcx),%r8d
  0x00007fa5c50017f0:   mov    %eax,%edx
  0x00007fa5c50017f2:   shr    $0x15,%rax
  0x00007fa5c50017f6:   or     $0x80000000,%eax
  0x00007fa5c50017fb:   shr    $0xb,%eax
  0x00007fa5c50017fe:   mov    %r10d,%r9d
  0x00007fa5c5001801:   imul   %rdx,%r10
  0x00007fa5c5001805:   imul   %rax,%r9
  0x00007fa5c5001809:   imul   %rax,%r8
  0x00007fa5c500180d:   mov    0x10(%rcx),%esi
  0x00007fa5c5001810:   mov    0xc(%rcx),%edi
  0x00007fa5c5001813:   mov    %r10d,%r11d
  0x00007fa5c5001816:   shr    $0x20,%r10
  0x00007fa5c500181a:   add    %r10,%r9
  0x00007fa5c500181d:   add    %r8,%r11
  0x00007fa5c5001820:   mov    %r11d,%r8d
  0x00007fa5c5001823:   shr    $0x20,%r11
  0x00007fa5c5001827:   add    %r11,%r9
  0x00007fa5c500182a:   mov    %esi,%r10d
  0x00007fa5c500182d:   imul   %rdx,%rsi
  0x00007fa5c5001831:   imul   %rax,%r10
  0x00007fa5c5001835:   mov    %edi,%r11d
  0x00007fa5c5001838:   imul   %rdx,%rdi
  0x00007fa5c500183c:   mov    %esi,%ebx
  0x00007fa5c500183e:   shr    $0x20,%rsi
  0x00007fa5c5001842:   add    %rbx,%r9
  0x00007fa5c5001845:   mov    %r9d,%ebx
  0x00007fa5c5001848:   shr    $0x20,%r9
  0x00007fa5c500184c:   add    %rsi,%r10
  0x00007fa5c500184f:   add    %r9,%r10
  0x00007fa5c5001852:   shl    $0x20,%rbx
  0x00007fa5c5001856:   or     %rbx,%r8
  0x00007fa5c5001859:   imul   %rax,%r11
  0x00007fa5c500185d:   mov    0x8(%rcx),%r9d
  0x00007fa5c5001861:   mov    0x4(%rcx),%esi
  0x00007fa5c5001864:   mov    %edi,%ebx
  0x00007fa5c5001866:   shr    $0x20,%rdi
  0x00007fa5c500186a:   add    %rbx,%r10
  0x00007fa5c500186d:   mov    %r10d,%ebx
  0x00007fa5c5001870:   shr    $0x20,%r10
  0x00007fa5c5001874:   add    %rdi,%r11
  0x00007fa5c5001877:   add    %r10,%r11
  0x00007fa5c500187a:   mov    %r9,%rdi
  0x00007fa5c500187d:   imul   %rdx,%r9
  0x00007fa5c5001881:   imul   %rax,%rdi
  0x00007fa5c5001885:   mov    %r9d,%r10d
  0x00007fa5c5001888:   shr    $0x20,%r9
  0x00007fa5c500188c:   add    %r10,%r11
  0x00007fa5c500188f:   mov    %r11d,%r10d
  0x00007fa5c5001892:   shr    $0x20,%r11
  0x00007fa5c5001896:   add    %r9,%rdi
  0x00007fa5c5001899:   add    %r11,%rdi
  0x00007fa5c500189c:   mov    %rsi,%r9
  0x00007fa5c500189f:   imul   %rdx,%rsi
  0x00007fa5c50018a3:   imul   %rax,%r9
  0x00007fa5c50018a7:   shl    $0x20,%r10
  0x00007fa5c50018ab:   or     %rbx,%r10
  0x00007fa5c50018ae:   mov    (%rcx),%eax
  0x00007fa5c50018b0:   mov    %esi,%r11d
  0x00007fa5c50018b3:   shr    $0x20,%rsi
  0x00007fa5c50018b7:   add    %r11,%rdi
  0x00007fa5c50018ba:   mov    %edi,%r11d
  0x00007fa5c50018bd:   shr    $0x20,%rdi
  0x00007fa5c50018c1:   add    %rsi,%r9
  0x00007fa5c50018c4:   add    %rdi,%r9
  0x00007fa5c50018c7:   imul   %rax,%rdx
  0x00007fa5c50018cb:   vpextrw $0x3,%xmm0,%ebx
  0x00007fa5c50018d0:   movabs $0x7fa5cea65f80,%rdi
  0x00007fa5c50018da:   sub    %rdi,%rcx
  0x00007fa5c50018dd:   add    %ecx,%ecx
  0x00007fa5c50018df:   add    %ecx,%ecx
  0x00007fa5c50018e1:   add    %ecx,%ecx
  0x00007fa5c50018e3:   add    $0x13,%ecx
  0x00007fa5c50018e6:   mov    $0x8000,%esi
  0x00007fa5c50018eb:   and    %ebx,%esi
  0x00007fa5c50018ed:   shr    $0x4,%ebx
  0x00007fa5c50018f0:   and    $0x7ff,%ebx
  0x00007fa5c50018f6:   sub    $0x3ff,%ebx
  0x00007fa5c50018fc:   sub    %ebx,%ecx
  0x00007fa5c50018fe:   add    %rdx,%r9
  0x00007fa5c5001901:   mov    %ecx,%edx
  0x00007fa5c5001903:   add    $0x20,%edx
  0x00007fa5c5001906:   cmp    $0x1,%ecx
  0x00007fa5c5001909:   jl     0x00007fa5c5001bac
  0x00007fa5c500190f:   neg    %ecx
  0x00007fa5c5001911:   add    $0x1d,%ecx
  0x00007fa5c5001914:   shl    %cl,%r9d
  0x00007fa5c5001917:   mov    %r9d,%edi
  0x00007fa5c500191a:   and    $0x1fffffff,%r9d
  0x00007fa5c5001921:   test   $0x10000000,%r9d
  0x00007fa5c5001928:   jne    0x00007fa5c5001bd9
  0x00007fa5c500192e:   shr    %cl,%r9d
  0x00007fa5c5001931:   mov    $0x0,%ebx
  0x00007fa5c5001936:   shl    $0x20,%r9
  0x00007fa5c500193a:   or     %r11,%r9
  0x00007fa5c500193d:   cmp    $0x0,%r9
  0x00007fa5c5001941:   je     0x00007fa5c5001b50
  0x00007fa5c5001947:   bsr    %r9,%r11
  0x00007fa5c500194b:   mov    $0x1d,%ecx
  0x00007fa5c5001950:   sub    %r11d,%ecx
  0x00007fa5c5001953:   jle    0x00007fa5c5001b89
  0x00007fa5c5001959:   shl    %cl,%r9
  0x00007fa5c500195c:   mov    %r10,%rax
  0x00007fa5c500195f:   shl    %cl,%r10
  0x00007fa5c5001962:   add    %ecx,%edx
  0x00007fa5c5001964:   neg    %ecx
  0x00007fa5c5001966:   add    $0x40,%ecx
  0x00007fa5c5001969:   shr    %cl,%rax
  0x00007fa5c500196c:   shr    %cl,%r8
  0x00007fa5c500196f:   or     %rax,%r9
  0x00007fa5c5001972:   or     %r8,%r10
  0x00007fa5c5001975:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007fa5c500197a:   shr    %r10
  0x00007fa5c500197d:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007fa5c5001982:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007fa5c5001986:   shl    $0x4,%edx
  0x00007fa5c5001989:   neg    %edx
  0x00007fa5c500198b:   add    $0x3ff0,%edx
  0x00007fa5c5001991:   or     %esi,%edx
  0x00007fa5c5001993:   xor    %ebx,%edx
  0x00007fa5c5001995:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007fa5c500199a:   vmovq  0x9a646b6(%rip),%xmm2        # 0x00007fa5cea66058
  0x00007fa5c50019a2:   vmovq  0x9a646b6(%rip),%xmm6        # 0x00007fa5cea66060
  0x00007fa5c50019aa:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007fa5c50019ae:   sub    $0x3f0,%edx
  0x00007fa5c50019b4:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007fa5c50019b9:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007fa5c50019bd:   shl    $0x10,%esi
  0x00007fa5c50019c0:   sar    $0x1f,%esi
  0x00007fa5c50019c3:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007fa5c50019c7:   vmovdqu %xmm0,%xmm1
  0x00007fa5c50019cb:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007fa5c50019cf:   shr    $0x1d,%edi
  0x00007fa5c50019d2:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fa5c50019d6:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007fa5c50019da:   add    %esi,%edi
  0x00007fa5c50019dc:   xor    %esi,%edi
  0x00007fa5c50019de:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007fa5c50019e2:   mov    %edi,%eax
  0x00007fa5c50019e4:   vaddsd %xmm3,%xmm6,%xmm6
  0x00007fa5c50019e8:   vmovdqu %xmm0,%xmm2
  0x00007fa5c50019ec:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fa5c50019f0:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007fa5c50019f4:   vaddsd %xmm2,%xmm6,%xmm6
  0x00007fa5c50019f8:   vmovq  0x9a64650(%rip),%xmm1        # 0x00007fa5cea66050
  0x00007fa5c5001a00:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007fa5c5001a04:   vmovq  0x9a646d4(%rip),%xmm5        # 0x00007fa5cea660e0
  0x00007fa5c5001a0c:   vmovq  0x9a646bc(%rip),%xmm4        # 0x00007fa5cea660d0
  0x00007fa5c5001a14:   vpand  %xmm0,%xmm4,%xmm4
  0x00007fa5c5001a18:   vpor   %xmm4,%xmm5,%xmm5
  0x00007fa5c5001a1c:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007fa5c5001a20:   vcvttsd2si %xmm1,%edx
  0x00007fa5c5001a24:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007fa5c5001a28:   vmovq  0x9a64610(%rip),%xmm3        # 0x00007fa5cea66040
  0x00007fa5c5001a30:   vmovdqu 0x9a645f8(%rip),%xmm2        # 0x00007fa5cea66030
  0x00007fa5c5001a38:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007fa5c5001a3c:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007fa5c5001a40:   shl    $0x3,%eax
  0x00007fa5c5001a43:   add    $0x1c7600,%edx
  0x00007fa5c5001a49:   vmovdqu %xmm0,%xmm4
  0x00007fa5c5001a4d:   add    %eax,%edx
  0x00007fa5c5001a4f:   and    $0x3f,%edx
  0x00007fa5c5001a52:   vmovdqu 0x9a64616(%rip),%xmm5        # 0x00007fa5cea66070
  0x00007fa5c5001a5a:   movabs $0x7fa5cea65780,%rax
  0x00007fa5c5001a64:   shl    $0x5,%edx
  0x00007fa5c5001a67:   add    %rdx,%rax
  0x00007fa5c5001a6a:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007fa5c5001a6e:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007fa5c5001a72:   vmulsd 0x9a645ae(%rip),%xmm1,%xmm1        # 0x00007fa5cea66028
  0x00007fa5c5001a7a:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fa5c5001a7e:   vmovq  0x8(%rax),%xmm7
  0x00007fa5c5001a83:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5001a87:   vmovdqu %xmm4,%xmm3
  0x00007fa5c5001a8b:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007fa5c5001a8f:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5001a93:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007fa5c5001a97:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007fa5c5001a9b:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fa5c5001a9f:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5001aa3:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5001aa7:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007fa5c5001aab:   vmovdqu (%rax),%xmm2
  0x00007fa5c5001aaf:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007fa5c5001ab3:   vmovq  0x18(%rax),%xmm3
  0x00007fa5c5001ab8:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fa5c5001abc:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007fa5c5001ac0:   vsubsd %xmm6,%xmm1,%xmm1
  0x00007fa5c5001ac4:   vmovdqu 0x9a645c4(%rip),%xmm6        # 0x00007fa5cea66090
  0x00007fa5c5001acc:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007fa5c5001ad0:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007fa5c5001ad4:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007fa5c5001ad8:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007fa5c5001adc:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5001ae0:   vaddpd 0x9a64598(%rip),%xmm5,%xmm5        # 0x00007fa5cea66080
  0x00007fa5c5001ae8:   vmulsd (%rax),%xmm4,%xmm4
  0x00007fa5c5001aec:   vaddpd 0x9a645ac(%rip),%xmm6,%xmm6        # 0x00007fa5cea660a0
  0x00007fa5c5001af4:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5001af8:   vmovdqu %xmm3,%xmm0
  0x00007fa5c5001afc:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007fa5c5001b01:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007fa5c5001b05:   vmovdqu %xmm4,%xmm7
  0x00007fa5c5001b09:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007fa5c5001b0d:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007fa5c5001b11:   vmovq  0x8(%rax),%xmm5
  0x00007fa5c5001b16:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007fa5c5001b1a:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fa5c5001b1e:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007fa5c5001b23:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007fa5c5001b27:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fa5c5001b2b:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007fa5c5001b2f:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fa5c5001b33:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fa5c5001b37:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fa5c5001b3b:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007fa5c5001b3f:   vmovdqu %xmm4,%xmm0
  0x00007fa5c5001b43:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fa5c5001b47:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fa5c5001b4b:   jmpq   0x00007fa5c5001c6f
  0x00007fa5c5001b50:   add    $0x40,%edx
  0x00007fa5c5001b53:   mov    %r10,%r9
  0x00007fa5c5001b56:   mov    %r8,%r10
  0x00007fa5c5001b59:   mov    $0x0,%r8d
  0x00007fa5c5001b5f:   cmp    $0x0,%r9
  0x00007fa5c5001b63:   jne    0x00007fa5c5001947
  0x00007fa5c5001b69:   add    $0x40,%edx
  0x00007fa5c5001b6c:   mov    %r10,%r9
  0x00007fa5c5001b6f:   mov    %r8,%r10
  0x00007fa5c5001b72:   cmp    $0x0,%r9
  0x00007fa5c5001b76:   jne    0x00007fa5c5001947
  0x00007fa5c5001b7c:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5001b80:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007fa5c5001b84:   jmpq   0x00007fa5c50019f8
  0x00007fa5c5001b89:   je     0x00007fa5c5001975
  0x00007fa5c5001b8f:   neg    %ecx
  0x00007fa5c5001b91:   shr    %cl,%r10
  0x00007fa5c5001b94:   mov    %r9,%rax
  0x00007fa5c5001b97:   shr    %cl,%r9
  0x00007fa5c5001b9a:   sub    %ecx,%edx
  0x00007fa5c5001b9c:   neg    %ecx
  0x00007fa5c5001b9e:   add    $0x40,%ecx
  0x00007fa5c5001ba1:   shl    %cl,%rax
  0x00007fa5c5001ba4:   or     %rax,%r10
  0x00007fa5c5001ba7:   jmpq   0x00007fa5c5001975
  0x00007fa5c5001bac:   neg    %ecx
  0x00007fa5c5001bae:   shl    $0x20,%r9
  0x00007fa5c5001bb2:   or     %r11,%r9
  0x00007fa5c5001bb5:   shl    %cl,%r9
  0x00007fa5c5001bb8:   mov    %r9,%rdi
  0x00007fa5c5001bbb:   test   $0x80000000,%r9d
  0x00007fa5c5001bc2:   jne    0x00007fa5c5001c1b
  0x00007fa5c5001bc8:   shr    %cl,%r9d
  0x00007fa5c5001bcb:   mov    $0x0,%ebx
  0x00007fa5c5001bd0:   shr    $0x3,%rdi
  0x00007fa5c5001bd4:   jmpq   0x00007fa5c500193d
  0x00007fa5c5001bd9:   shr    %cl,%r9d
  0x00007fa5c5001bdc:   mov    $0x20000000,%ebx
  0x00007fa5c5001be1:   shr    %cl,%ebx
  0x00007fa5c5001be3:   shl    $0x20,%r9
  0x00007fa5c5001be7:   or     %r11,%r9
  0x00007fa5c5001bea:   shl    $0x20,%rbx
  0x00007fa5c5001bee:   add    $0x20000000,%edi
  0x00007fa5c5001bf4:   mov    $0x0,%ecx
  0x00007fa5c5001bf9:   mov    $0x0,%r11d
  0x00007fa5c5001bff:   sub    %r8,%rcx
  0x00007fa5c5001c02:   sbb    %r10,%r11
  0x00007fa5c5001c05:   sbb    %r9,%rbx
  0x00007fa5c5001c08:   mov    %rcx,%r8
  0x00007fa5c5001c0b:   mov    %r11,%r10
  0x00007fa5c5001c0e:   mov    %rbx,%r9
  0x00007fa5c5001c11:   mov    $0x8000,%ebx
  0x00007fa5c5001c16:   jmpq   0x00007fa5c500193d
  0x00007fa5c5001c1b:   shr    %cl,%r9d
  0x00007fa5c5001c1e:   movabs $0x100000000,%rbx
  0x00007fa5c5001c28:   shr    %cl,%rbx
  0x00007fa5c5001c2b:   mov    $0x0,%ecx
  0x00007fa5c5001c30:   mov    $0x0,%r11d
  0x00007fa5c5001c36:   sub    %r8,%rcx
  0x00007fa5c5001c39:   sbb    %r10,%r11
  0x00007fa5c5001c3c:   sbb    %r9,%rbx
  0x00007fa5c5001c3f:   mov    %rcx,%r8
  0x00007fa5c5001c42:   mov    %r11,%r10
  0x00007fa5c5001c45:   mov    %rbx,%r9
  0x00007fa5c5001c48:   mov    $0x8000,%ebx
  0x00007fa5c5001c4d:   shr    $0x3,%rdi
  0x00007fa5c5001c51:   add    $0x20000000,%edi
  0x00007fa5c5001c57:   jmpq   0x00007fa5c500193d
  0x00007fa5c5001c5c:   vmovq  0x8(%rsp),%xmm0
  0x00007fa5c5001c62:   vmulsd 0x9a643de(%rip),%xmm0,%xmm0        # 0x00007fa5cea66048
  0x00007fa5c5001c6a:   vmovq  %xmm0,(%rsp)
  0x00007fa5c5001c6f:   add    $0x10,%rsp
  0x00007fa5c5001c73:   pop    %rbx
  0x00007fa5c5001c74:   leaveq 
  0x00007fa5c5001c75:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmCos [0x00007fa5c5001c76, 0x00007fa5c50022e7] (1649 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5001c76:   push   %rbp
  0x00007fa5c5001c77:   mov    %rsp,%rbp
  0x00007fa5c5001c7a:   push   %rbx
  0x00007fa5c5001c7b:   sub    $0x10,%rsp
  0x00007fa5c5001c7f:   vmovsd %xmm0,0x8(%rsp)
  0x00007fa5c5001c85:   mov    0xc(%rsp),%eax
  0x00007fa5c5001c89:   vmovq  0x9a643bf(%rip),%xmm1        # 0x00007fa5cea66050
  0x00007fa5c5001c91:   and    $0x7fff0000,%eax
  0x00007fa5c5001c96:   sub    $0x30300000,%eax
  0x00007fa5c5001c9b:   cmp    $0x10c50000,%eax
  0x00007fa5c5001ca0:   ja     0x00007fa5c5001dec
  0x00007fa5c5001ca6:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007fa5c5001caa:   vmovdqu 0x9a6442e(%rip),%xmm5        # 0x00007fa5cea660e0
  0x00007fa5c5001cb2:   vmovq  0x9a64416(%rip),%xmm4        # 0x00007fa5cea660d0
  0x00007fa5c5001cba:   vpand  %xmm0,%xmm4,%xmm4
  0x00007fa5c5001cbe:   vpor   %xmm4,%xmm5,%xmm5
  0x00007fa5c5001cc2:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007fa5c5001cc6:   vcvttsd2si %xmm1,%edx
  0x00007fa5c5001cca:   vcvtsi2sd %edx,%xmm1,%xmm1
  0x00007fa5c5001cce:   vmovdqu 0x9a6435a(%rip),%xmm2        # 0x00007fa5cea66030
  0x00007fa5c5001cd6:   vmovq  0x9a64362(%rip),%xmm3        # 0x00007fa5cea66040
  0x00007fa5c5001cde:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007fa5c5001ce2:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007fa5c5001ce6:   add    $0x1c7610,%rdx
  0x00007fa5c5001ced:   vmovdqu %xmm0,%xmm4
  0x00007fa5c5001cf1:   and    $0x3f,%rdx
  0x00007fa5c5001cf5:   vmovdqu 0x9a64373(%rip),%xmm5        # 0x00007fa5cea66070
  0x00007fa5c5001cfd:   movabs $0x7fa5cea65780,%rax
  0x00007fa5c5001d07:   shl    $0x5,%rdx
  0x00007fa5c5001d0b:   add    %rdx,%rax
  0x00007fa5c5001d0e:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007fa5c5001d12:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007fa5c5001d16:   vmulsd 0x9a6430a(%rip),%xmm1,%xmm1        # 0x00007fa5cea66028
  0x00007fa5c5001d1e:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fa5c5001d22:   vmovq  0x8(%rax),%xmm7
  0x00007fa5c5001d27:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5001d2b:   vmovdqu %xmm4,%xmm3
  0x00007fa5c5001d2f:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007fa5c5001d33:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5001d37:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007fa5c5001d3b:   vmovdqu 0x9a6434d(%rip),%xmm6        # 0x00007fa5cea66090
  0x00007fa5c5001d43:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007fa5c5001d47:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fa5c5001d4b:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5001d4f:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5001d53:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007fa5c5001d57:   vmovdqu (%rax),%xmm2
  0x00007fa5c5001d5b:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007fa5c5001d5f:   vmovq  0x18(%rax),%xmm3
  0x00007fa5c5001d64:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fa5c5001d68:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007fa5c5001d6c:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007fa5c5001d70:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007fa5c5001d74:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007fa5c5001d78:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007fa5c5001d7c:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5001d80:   vaddpd 0x9a642f8(%rip),%xmm5,%xmm5        # 0x00007fa5cea66080
  0x00007fa5c5001d88:   vmulsd (%rax),%xmm4,%xmm4
  0x00007fa5c5001d8c:   vaddpd 0x9a6430c(%rip),%xmm6,%xmm6        # 0x00007fa5cea660a0
  0x00007fa5c5001d94:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5001d98:   vmovdqu %xmm3,%xmm0
  0x00007fa5c5001d9c:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007fa5c5001da1:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007fa5c5001da5:   vmovdqu %xmm4,%xmm7
  0x00007fa5c5001da9:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007fa5c5001dad:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007fa5c5001db1:   vmovq  0x8(%rax),%xmm5
  0x00007fa5c5001db6:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007fa5c5001dba:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fa5c5001dbe:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007fa5c5001dc3:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007fa5c5001dc7:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fa5c5001dcb:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007fa5c5001dcf:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fa5c5001dd3:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fa5c5001dd7:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fa5c5001ddb:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007fa5c5001ddf:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fa5c5001de3:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007fa5c5001de7:   jmpq   0x00007fa5c50022e0
  0x00007fa5c5001dec:   jg     0x00007fa5c5001e16
  0x00007fa5c5001df2:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5001df7:   and    $0x7fff,%eax
  0x00007fa5c5001dfc:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c5001e01:   vmovq  0x9a642e7(%rip),%xmm1        # 0x00007fa5cea660f0
  0x00007fa5c5001e09:   vsubsd %xmm0,%xmm1,%xmm1
  0x00007fa5c5001e0d:   vmovdqu %xmm1,%xmm0
  0x00007fa5c5001e11:   jmpq   0x00007fa5c50022e0
  0x00007fa5c5001e16:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5001e1b:   and    $0x7ff0,%eax
  0x00007fa5c5001e20:   cmp    $0x7ff0,%eax
  0x00007fa5c5001e25:   je     0x00007fa5c50022cd
  0x00007fa5c5001e2b:   vpextrw $0x3,%xmm0,%ecx
  0x00007fa5c5001e30:   and    $0x7ff0,%ecx
  0x00007fa5c5001e36:   sub    $0x3f60,%ecx
  0x00007fa5c5001e3c:   shr    $0x7,%ecx
  0x00007fa5c5001e3f:   and    $0xfffc,%ecx
  0x00007fa5c5001e45:   movabs $0x7fa5cea65f80,%r11
  0x00007fa5c5001e4f:   add    %r11,%rcx
  0x00007fa5c5001e52:   vmovq  %xmm0,%rax
  0x00007fa5c5001e57:   mov    0x14(%rcx),%r10d
  0x00007fa5c5001e5b:   mov    0x18(%rcx),%r8d
  0x00007fa5c5001e5f:   mov    %eax,%edx
  0x00007fa5c5001e61:   shr    $0x15,%rax
  0x00007fa5c5001e65:   or     $0x80000000,%eax
  0x00007fa5c5001e6a:   shr    $0xb,%eax
  0x00007fa5c5001e6d:   mov    %r10d,%r9d
  0x00007fa5c5001e70:   imul   %rdx,%r10
  0x00007fa5c5001e74:   imul   %rax,%r9
  0x00007fa5c5001e78:   imul   %rax,%r8
  0x00007fa5c5001e7c:   mov    0x10(%rcx),%esi
  0x00007fa5c5001e7f:   mov    0xc(%rcx),%edi
  0x00007fa5c5001e82:   mov    %r10d,%r11d
  0x00007fa5c5001e85:   shr    $0x20,%r10
  0x00007fa5c5001e89:   add    %r10,%r9
  0x00007fa5c5001e8c:   add    %r8,%r11
  0x00007fa5c5001e8f:   mov    %r11d,%r8d
  0x00007fa5c5001e92:   shr    $0x20,%r11
  0x00007fa5c5001e96:   add    %r11,%r9
  0x00007fa5c5001e99:   mov    %esi,%r10d
  0x00007fa5c5001e9c:   imul   %rdx,%rsi
  0x00007fa5c5001ea0:   imul   %rax,%r10
  0x00007fa5c5001ea4:   mov    %edi,%r11d
  0x00007fa5c5001ea7:   imul   %rdx,%rdi
  0x00007fa5c5001eab:   mov    %esi,%ebx
  0x00007fa5c5001ead:   shr    $0x20,%rsi
  0x00007fa5c5001eb1:   add    %rbx,%r9
  0x00007fa5c5001eb4:   mov    %r9d,%ebx
  0x00007fa5c5001eb7:   shr    $0x20,%r9
  0x00007fa5c5001ebb:   add    %rsi,%r10
  0x00007fa5c5001ebe:   add    %r9,%r10
  0x00007fa5c5001ec1:   shl    $0x20,%rbx
  0x00007fa5c5001ec5:   or     %rbx,%r8
  0x00007fa5c5001ec8:   imul   %rax,%r11
  0x00007fa5c5001ecc:   mov    0x8(%rcx),%r9d
  0x00007fa5c5001ed0:   mov    0x4(%rcx),%esi
  0x00007fa5c5001ed3:   mov    %edi,%ebx
  0x00007fa5c5001ed5:   shr    $0x20,%rdi
  0x00007fa5c5001ed9:   add    %rbx,%r10
  0x00007fa5c5001edc:   mov    %r10d,%ebx
  0x00007fa5c5001edf:   shr    $0x20,%r10
  0x00007fa5c5001ee3:   add    %rdi,%r11
  0x00007fa5c5001ee6:   add    %r10,%r11
  0x00007fa5c5001ee9:   mov    %r9,%rdi
  0x00007fa5c5001eec:   imul   %rdx,%r9
  0x00007fa5c5001ef0:   imul   %rax,%rdi
  0x00007fa5c5001ef4:   mov    %r9d,%r10d
  0x00007fa5c5001ef7:   shr    $0x20,%r9
  0x00007fa5c5001efb:   add    %r10,%r11
  0x00007fa5c5001efe:   mov    %r11d,%r10d
  0x00007fa5c5001f01:   shr    $0x20,%r11
  0x00007fa5c5001f05:   add    %r9,%rdi
  0x00007fa5c5001f08:   add    %r11,%rdi
  0x00007fa5c5001f0b:   mov    %rsi,%r9
  0x00007fa5c5001f0e:   imul   %rdx,%rsi
  0x00007fa5c5001f12:   imul   %rax,%r9
  0x00007fa5c5001f16:   shl    $0x20,%r10
  0x00007fa5c5001f1a:   or     %rbx,%r10
  0x00007fa5c5001f1d:   mov    (%rcx),%eax
  0x00007fa5c5001f1f:   mov    %esi,%r11d
  0x00007fa5c5001f22:   shr    $0x20,%rsi
  0x00007fa5c5001f26:   add    %r11,%rdi
  0x00007fa5c5001f29:   mov    %edi,%r11d
  0x00007fa5c5001f2c:   shr    $0x20,%rdi
  0x00007fa5c5001f30:   add    %rsi,%r9
  0x00007fa5c5001f33:   add    %rdi,%r9
  0x00007fa5c5001f36:   imul   %rax,%rdx
  0x00007fa5c5001f3a:   vpextrw $0x3,%xmm0,%ebx
  0x00007fa5c5001f3f:   movabs $0x7fa5cea65f80,%rdi
  0x00007fa5c5001f49:   sub    %rdi,%rcx
  0x00007fa5c5001f4c:   add    %ecx,%ecx
  0x00007fa5c5001f4e:   add    %ecx,%ecx
  0x00007fa5c5001f50:   add    %ecx,%ecx
  0x00007fa5c5001f52:   add    $0x13,%ecx
  0x00007fa5c5001f55:   mov    $0x8000,%esi
  0x00007fa5c5001f5a:   and    %ebx,%esi
  0x00007fa5c5001f5c:   shr    $0x4,%ebx
  0x00007fa5c5001f5f:   and    $0x7ff,%ebx
  0x00007fa5c5001f65:   sub    $0x3ff,%ebx
  0x00007fa5c5001f6b:   sub    %ebx,%ecx
  0x00007fa5c5001f6d:   add    %rdx,%r9
  0x00007fa5c5001f70:   mov    %ecx,%edx
  0x00007fa5c5001f72:   add    $0x20,%edx
  0x00007fa5c5001f75:   cmp    $0x1,%ecx
  0x00007fa5c5001f78:   jl     0x00007fa5c500221d
  0x00007fa5c5001f7e:   neg    %ecx
  0x00007fa5c5001f80:   add    $0x1d,%ecx
  0x00007fa5c5001f83:   shl    %cl,%r9d
  0x00007fa5c5001f86:   mov    %r9d,%edi
  0x00007fa5c5001f89:   and    $0x1fffffff,%r9d
  0x00007fa5c5001f90:   test   $0x10000000,%r9d
  0x00007fa5c5001f97:   jne    0x00007fa5c500224a
  0x00007fa5c5001f9d:   shr    %cl,%r9d
  0x00007fa5c5001fa0:   mov    $0x0,%ebx
  0x00007fa5c5001fa5:   shl    $0x20,%r9
  0x00007fa5c5001fa9:   or     %r11,%r9
  0x00007fa5c5001fac:   cmp    $0x0,%r9
  0x00007fa5c5001fb0:   je     0x00007fa5c50021c1
  0x00007fa5c5001fb6:   bsr    %r9,%r11
  0x00007fa5c5001fba:   mov    $0x1d,%ecx
  0x00007fa5c5001fbf:   sub    %r11d,%ecx
  0x00007fa5c5001fc2:   jle    0x00007fa5c50021fa
  0x00007fa5c5001fc8:   shl    %cl,%r9
  0x00007fa5c5001fcb:   mov    %r10,%rax
  0x00007fa5c5001fce:   shl    %cl,%r10
  0x00007fa5c5001fd1:   add    %ecx,%edx
  0x00007fa5c5001fd3:   neg    %ecx
  0x00007fa5c5001fd5:   add    $0x40,%ecx
  0x00007fa5c5001fd8:   shr    %cl,%rax
  0x00007fa5c5001fdb:   shr    %cl,%r8
  0x00007fa5c5001fde:   or     %rax,%r9
  0x00007fa5c5001fe1:   or     %r8,%r10
  0x00007fa5c5001fe4:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007fa5c5001fe9:   shr    %r10
  0x00007fa5c5001fec:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007fa5c5001ff1:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007fa5c5001ff5:   shl    $0x4,%edx
  0x00007fa5c5001ff8:   neg    %edx
  0x00007fa5c5001ffa:   add    $0x3ff0,%edx
  0x00007fa5c5002000:   or     %esi,%edx
  0x00007fa5c5002002:   xor    %ebx,%edx
  0x00007fa5c5002004:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007fa5c5002009:   vmovq  0x9a64047(%rip),%xmm2        # 0x00007fa5cea66058
  0x00007fa5c5002011:   vmovq  0x9a64047(%rip),%xmm6        # 0x00007fa5cea66060
  0x00007fa5c5002019:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007fa5c500201d:   sub    $0x3f0,%edx
  0x00007fa5c5002023:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007fa5c5002028:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007fa5c500202c:   shl    $0x10,%esi
  0x00007fa5c500202f:   sar    $0x1f,%esi
  0x00007fa5c5002032:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007fa5c5002036:   vmovdqu %xmm0,%xmm1
  0x00007fa5c500203a:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007fa5c500203e:   shr    $0x1d,%edi
  0x00007fa5c5002041:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fa5c5002045:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007fa5c5002049:   add    %esi,%edi
  0x00007fa5c500204b:   xor    %esi,%edi
  0x00007fa5c500204d:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007fa5c5002051:   mov    %edi,%eax
  0x00007fa5c5002053:   vaddsd %xmm3,%xmm6,%xmm6
  0x00007fa5c5002057:   vmovdqu %xmm0,%xmm2
  0x00007fa5c500205b:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fa5c500205f:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007fa5c5002063:   vaddsd %xmm2,%xmm6,%xmm6
  0x00007fa5c5002067:   vmovq  0x9a63fe1(%rip),%xmm1        # 0x00007fa5cea66050
  0x00007fa5c500206f:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007fa5c5002073:   vmovq  0x9a64065(%rip),%xmm5        # 0x00007fa5cea660e0
  0x00007fa5c500207b:   vmovq  0x9a6404d(%rip),%xmm4        # 0x00007fa5cea660d0
  0x00007fa5c5002083:   vpand  %xmm0,%xmm4,%xmm4
  0x00007fa5c5002087:   vpor   %xmm4,%xmm5,%xmm5
  0x00007fa5c500208b:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007fa5c500208f:   vcvttsd2si %xmm1,%rdx
  0x00007fa5c5002094:   vcvtsi2sd %rdx,%xmm1,%xmm1
  0x00007fa5c5002099:   vmovq  0x9a63f9f(%rip),%xmm3        # 0x00007fa5cea66040
  0x00007fa5c50020a1:   vmovdqu 0x9a63f87(%rip),%xmm2        # 0x00007fa5cea66030
  0x00007fa5c50020a9:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007fa5c50020ad:   vunpcklpd %xmm1,%xmm1,%xmm1
  0x00007fa5c50020b1:   shl    $0x3,%eax
  0x00007fa5c50020b4:   add    $0x1c7610,%edx
  0x00007fa5c50020ba:   vmovdqu %xmm0,%xmm4
  0x00007fa5c50020be:   add    %eax,%edx
  0x00007fa5c50020c0:   and    $0x3f,%edx
  0x00007fa5c50020c3:   vmovdqu 0x9a63fa5(%rip),%xmm5        # 0x00007fa5cea66070
  0x00007fa5c50020cb:   movabs $0x7fa5cea65780,%rax
  0x00007fa5c50020d5:   shl    $0x5,%edx
  0x00007fa5c50020d8:   add    %rdx,%rax
  0x00007fa5c50020db:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007fa5c50020df:   vsubsd %xmm3,%xmm0,%xmm0
  0x00007fa5c50020e3:   vmulsd 0x9a63f3d(%rip),%xmm1,%xmm1        # 0x00007fa5cea66028
  0x00007fa5c50020eb:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fa5c50020ef:   vmovq  0x8(%rax),%xmm7
  0x00007fa5c50020f4:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007fa5c50020f8:   vmovdqu %xmm4,%xmm3
  0x00007fa5c50020fc:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007fa5c5002100:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5002104:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007fa5c5002108:   vmulsd %xmm4,%xmm7,%xmm7
  0x00007fa5c500210c:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fa5c5002110:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5002114:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002118:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007fa5c500211c:   vmovdqu (%rax),%xmm2
  0x00007fa5c5002120:   vsubsd %xmm3,%xmm1,%xmm1
  0x00007fa5c5002124:   vmovq  0x18(%rax),%xmm3
  0x00007fa5c5002129:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fa5c500212d:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007fa5c5002131:   vsubsd %xmm6,%xmm1,%xmm1
  0x00007fa5c5002135:   vmovdqu 0x9a63f53(%rip),%xmm6        # 0x00007fa5cea66090
  0x00007fa5c500213d:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007fa5c5002141:   vmulpd %xmm0,%xmm6,%xmm6
  0x00007fa5c5002145:   vmulsd %xmm4,%xmm3,%xmm3
  0x00007fa5c5002149:   vmulpd %xmm0,%xmm2,%xmm2
  0x00007fa5c500214d:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002151:   vaddpd 0x9a63f27(%rip),%xmm5,%xmm5        # 0x00007fa5cea66080
  0x00007fa5c5002159:   vmulsd (%rax),%xmm4,%xmm4
  0x00007fa5c500215d:   vaddpd 0x9a63f3b(%rip),%xmm6,%xmm6        # 0x00007fa5cea660a0
  0x00007fa5c5002165:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5002169:   vmovdqu %xmm3,%xmm0
  0x00007fa5c500216d:   vaddsd 0x8(%rax),%xmm3,%xmm3
  0x00007fa5c5002172:   vmulpd %xmm7,%xmm1,%xmm1
  0x00007fa5c5002176:   vmovdqu %xmm4,%xmm7
  0x00007fa5c500217a:   vaddsd %xmm3,%xmm4,%xmm4
  0x00007fa5c500217e:   vaddpd %xmm5,%xmm6,%xmm6
  0x00007fa5c5002182:   vmovq  0x8(%rax),%xmm5
  0x00007fa5c5002187:   vsubsd %xmm3,%xmm5,%xmm5
  0x00007fa5c500218b:   vsubsd %xmm4,%xmm3,%xmm3
  0x00007fa5c500218f:   vaddsd 0x10(%rax),%xmm1,%xmm1
  0x00007fa5c5002194:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007fa5c5002198:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fa5c500219c:   vaddsd %xmm7,%xmm3,%xmm3
  0x00007fa5c50021a0:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fa5c50021a4:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fa5c50021a8:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fa5c50021ac:   vunpckhpd %xmm6,%xmm6,%xmm6
  0x00007fa5c50021b0:   vmovdqu %xmm4,%xmm0
  0x00007fa5c50021b4:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fa5c50021b8:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fa5c50021bc:   jmpq   0x00007fa5c50022e0
  0x00007fa5c50021c1:   add    $0x40,%edx
  0x00007fa5c50021c4:   mov    %r10,%r9
  0x00007fa5c50021c7:   mov    %r8,%r10
  0x00007fa5c50021ca:   mov    $0x0,%r8d
  0x00007fa5c50021d0:   cmp    $0x0,%r9
  0x00007fa5c50021d4:   jne    0x00007fa5c5001fb6
  0x00007fa5c50021da:   add    $0x40,%edx
  0x00007fa5c50021dd:   mov    %r10,%r9
  0x00007fa5c50021e0:   mov    %r8,%r10
  0x00007fa5c50021e3:   cmp    $0x0,%r9
  0x00007fa5c50021e7:   jne    0x00007fa5c5001fb6
  0x00007fa5c50021ed:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c50021f1:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007fa5c50021f5:   jmpq   0x00007fa5c5002067
  0x00007fa5c50021fa:   je     0x00007fa5c5001fe4
  0x00007fa5c5002200:   neg    %ecx
  0x00007fa5c5002202:   shr    %cl,%r10
  0x00007fa5c5002205:   mov    %r9,%rax
  0x00007fa5c5002208:   shr    %cl,%r9
  0x00007fa5c500220b:   sub    %ecx,%edx
  0x00007fa5c500220d:   neg    %ecx
  0x00007fa5c500220f:   add    $0x40,%ecx
  0x00007fa5c5002212:   shl    %cl,%rax
  0x00007fa5c5002215:   or     %rax,%r10
  0x00007fa5c5002218:   jmpq   0x00007fa5c5001fe4
  0x00007fa5c500221d:   neg    %ecx
  0x00007fa5c500221f:   shl    $0x20,%r9
  0x00007fa5c5002223:   or     %r11,%r9
  0x00007fa5c5002226:   shl    %cl,%r9
  0x00007fa5c5002229:   mov    %r9,%rdi
  0x00007fa5c500222c:   test   $0x80000000,%r9d
  0x00007fa5c5002233:   jne    0x00007fa5c500228c
  0x00007fa5c5002239:   shr    %cl,%r9d
  0x00007fa5c500223c:   mov    $0x0,%ebx
  0x00007fa5c5002241:   shr    $0x3,%rdi
  0x00007fa5c5002245:   jmpq   0x00007fa5c5001fac
  0x00007fa5c500224a:   shr    %cl,%r9d
  0x00007fa5c500224d:   mov    $0x20000000,%ebx
  0x00007fa5c5002252:   shr    %cl,%ebx
  0x00007fa5c5002254:   shl    $0x20,%r9
  0x00007fa5c5002258:   or     %r11,%r9
  0x00007fa5c500225b:   shl    $0x20,%rbx
  0x00007fa5c500225f:   add    $0x20000000,%edi
  0x00007fa5c5002265:   mov    $0x0,%ecx
  0x00007fa5c500226a:   mov    $0x0,%r11d
  0x00007fa5c5002270:   sub    %r8,%rcx
  0x00007fa5c5002273:   sbb    %r10,%r11
  0x00007fa5c5002276:   sbb    %r9,%rbx
  0x00007fa5c5002279:   mov    %rcx,%r8
  0x00007fa5c500227c:   mov    %r11,%r10
  0x00007fa5c500227f:   mov    %rbx,%r9
  0x00007fa5c5002282:   mov    $0x8000,%ebx
  0x00007fa5c5002287:   jmpq   0x00007fa5c5001fac
  0x00007fa5c500228c:   shr    %cl,%r9d
  0x00007fa5c500228f:   movabs $0x100000000,%rbx
  0x00007fa5c5002299:   shr    %cl,%rbx
  0x00007fa5c500229c:   mov    $0x0,%ecx
  0x00007fa5c50022a1:   mov    $0x0,%r11d
  0x00007fa5c50022a7:   sub    %r8,%rcx
  0x00007fa5c50022aa:   sbb    %r10,%r11
  0x00007fa5c50022ad:   sbb    %r9,%rbx
  0x00007fa5c50022b0:   mov    %rcx,%r8
  0x00007fa5c50022b3:   mov    %r11,%r10
  0x00007fa5c50022b6:   mov    %rbx,%r9
  0x00007fa5c50022b9:   mov    $0x8000,%ebx
  0x00007fa5c50022be:   shr    $0x3,%rdi
  0x00007fa5c50022c2:   add    $0x20000000,%edi
  0x00007fa5c50022c8:   jmpq   0x00007fa5c5001fac
  0x00007fa5c50022cd:   vmovsd 0x8(%rsp),%xmm0
  0x00007fa5c50022d3:   vmulsd 0x9a63d6d(%rip),%xmm0,%xmm0        # 0x00007fa5cea66048
  0x00007fa5c50022db:   vmovq  %xmm0,(%rsp)
  0x00007fa5c50022e0:   add    $0x10,%rsp
  0x00007fa5c50022e4:   pop    %rbx
  0x00007fa5c50022e5:   leaveq 
  0x00007fa5c50022e6:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmTan [0x00007fa5c50022e7, 0x00007fa5c5002b2f] (2120 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50022e7:   push   %rbp
  0x00007fa5c50022e8:   mov    %rsp,%rbp
  0x00007fa5c50022eb:   push   %rbx
  0x00007fa5c50022ec:   sub    $0x10,%rsp
  0x00007fa5c50022f0:   vmovsd %xmm0,0x8(%rsp)
  0x00007fa5c50022f6:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c50022fb:   and    $0x7fff,%eax
  0x00007fa5c5002300:   sub    $0x3fba,%eax
  0x00007fa5c5002305:   cmp    $0x10e,%eax
  0x00007fa5c500230a:   ja     0x00007fa5c5002511
  0x00007fa5c5002310:   vmovdqu 0x9a63dc8(%rip),%xmm5        # 0x00007fa5cea660e0
  0x00007fa5c5002318:   vmovdqu 0x9a69d20(%rip),%xmm6        # 0x00007fa5cea6c040
  0x00007fa5c5002320:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002324:   vmovdqu 0x9a69d04(%rip),%xmm4        # 0x00007fa5cea6c030
  0x00007fa5c500232c:   vandpd %xmm0,%xmm4,%xmm4
  0x00007fa5c5002330:   vmovdqu 0x9a69ce8(%rip),%xmm1        # 0x00007fa5cea6c020
  0x00007fa5c5002338:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fa5c500233c:   vpor   %xmm4,%xmm5,%xmm5
  0x00007fa5c5002340:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007fa5c5002344:   vmovdqu %xmm1,%xmm7
  0x00007fa5c5002348:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007fa5c500234c:   vcvttsd2si %xmm7,%edx
  0x00007fa5c5002350:   (bad)  
  0x00007fa5c5002354:   leaveq 
  0x00007fa5c5002355:   vcvtdq2pd %xmm1,%xmm1
  0x00007fa5c5002359:   vmulpd %xmm6,%xmm1,%xmm1
  0x00007fa5c500235d:   vmovdqu 0x9a69cab(%rip),%xmm3        # 0x00007fa5cea6c010
  0x00007fa5c5002365:   vmovq  0x9a68603(%rip),%xmm5        # 0x00007fa5cea6a970
  0x00007fa5c500236d:   add    $0x72900,%rdx
  0x00007fa5c5002374:   vmovdqu 0x9a69c84(%rip),%xmm4        # 0x00007fa5cea6c000
  0x00007fa5c500237c:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007fa5c5002380:   and    $0x1f,%rdx
  0x00007fa5c5002384:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007fa5c5002388:   mov    %rdx,%rcx
  0x00007fa5c500238b:   vmulpd %xmm1,%xmm4,%xmm4
  0x00007fa5c500238f:   shl    %rcx
  0x00007fa5c5002392:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007fa5c5002396:   vmulpd 0x9a69c52(%rip),%xmm1,%xmm1        # 0x00007fa5cea6bff0
  0x00007fa5c500239e:   add    %rcx,%rdx
  0x00007fa5c50023a1:   shl    $0x2,%rcx
  0x00007fa5c50023a5:   add    %rcx,%rdx
  0x00007fa5c50023a8:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fa5c50023ac:   vmovdqu %xmm0,%xmm2
  0x00007fa5c50023b0:   vsubpd %xmm4,%xmm0,%xmm0
  0x00007fa5c50023b4:   vmovq  0x9a63d34(%rip),%xmm6        # 0x00007fa5cea660f0
  0x00007fa5c50023bc:   shl    $0x4,%rdx
  0x00007fa5c50023c0:   movabs $0x7fa5cea6a9f0,%rax
  0x00007fa5c50023ca:   vandpd 0x9a6860e(%rip),%xmm5,%xmm5        # 0x00007fa5cea6a9e0
  0x00007fa5c50023d2:   vmovdqu %xmm0,%xmm3
  0x00007fa5c50023d6:   add    %rdx,%rax
  0x00007fa5c50023d9:   vsubpd %xmm0,%xmm2,%xmm2
  0x00007fa5c50023dd:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007fa5c50023e1:   vdivsd %xmm5,%xmm6,%xmm6
  0x00007fa5c50023e5:   vsubpd %xmm4,%xmm2,%xmm2
  0x00007fa5c50023e9:   vmovdqu 0x10(%rax),%xmm7
  0x00007fa5c50023ee:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007fa5c50023f2:   vmulpd %xmm0,%xmm7,%xmm7
  0x00007fa5c50023f6:   vsubpd %xmm1,%xmm2,%xmm2
  0x00007fa5c50023fa:   vmovdqu 0x30(%rax),%xmm1
  0x00007fa5c50023ff:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fa5c5002403:   vmovdqu 0x60(%rax),%xmm4
  0x00007fa5c5002408:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007fa5c500240c:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fa5c5002410:   vmovdqu %xmm0,%xmm3
  0x00007fa5c5002414:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002418:   vaddpd (%rax),%xmm7,%xmm7
  0x00007fa5c500241c:   vaddpd 0x20(%rax),%xmm1,%xmm1
  0x00007fa5c5002421:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fa5c5002425:   vaddpd 0x50(%rax),%xmm4,%xmm4
  0x00007fa5c500242a:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007fa5c500242e:   vmovdqu 0x70(%rax),%xmm1
  0x00007fa5c5002433:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fa5c5002437:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c500243b:   vaddpd %xmm1,%xmm4,%xmm4
  0x00007fa5c500243f:   vmovdqu 0x40(%rax),%xmm1
  0x00007fa5c5002444:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fa5c5002448:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007fa5c500244c:   vmovdqu %xmm3,%xmm1
  0x00007fa5c5002450:   vmulpd %xmm0,%xmm3,%xmm3
  0x00007fa5c5002454:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002458:   vmulpd 0x90(%rax),%xmm1,%xmm1
  0x00007fa5c5002460:   vmulpd %xmm3,%xmm4,%xmm4
  0x00007fa5c5002464:   vmovdqu %xmm1,%xmm3
  0x00007fa5c5002468:   vaddpd %xmm4,%xmm7,%xmm7
  0x00007fa5c500246c:   vmovdqu %xmm1,%xmm4
  0x00007fa5c5002470:   vmulsd %xmm7,%xmm0,%xmm0
  0x00007fa5c5002474:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007fa5c5002478:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fa5c500247c:   vunpckhpd %xmm1,%xmm1,%xmm1
  0x00007fa5c5002480:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007fa5c5002484:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fa5c5002488:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fa5c500248c:   vmovdqu %xmm2,%xmm4
  0x00007fa5c5002490:   vmovq  0x90(%rax),%xmm7
  0x00007fa5c5002498:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007fa5c500249c:   vaddsd 0x98(%rax),%xmm7,%xmm7
  0x00007fa5c50024a4:   vmulsd %xmm2,%xmm7,%xmm7
  0x00007fa5c50024a8:   vaddsd 0x88(%rax),%xmm7,%xmm7
  0x00007fa5c50024b0:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007fa5c50024b4:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fa5c50024b8:   vmovq  0x9a63c30(%rip),%xmm7        # 0x00007fa5cea660f0
  0x00007fa5c50024c0:   vmulsd %xmm6,%xmm4,%xmm4
  0x00007fa5c50024c4:   vmovq  0xa8(%rax),%xmm2
  0x00007fa5c50024cc:   vandpd %xmm6,%xmm2,%xmm2
  0x00007fa5c50024d0:   vmulsd %xmm2,%xmm5,%xmm5
  0x00007fa5c50024d4:   vmulsd 0xa0(%rax),%xmm6,%xmm6
  0x00007fa5c50024dc:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007fa5c50024e0:   vsubsd 0x80(%rax),%xmm2,%xmm2
  0x00007fa5c50024e8:   vsubsd %xmm4,%xmm7,%xmm7
  0x00007fa5c50024ec:   vmulsd %xmm6,%xmm7,%xmm7
  0x00007fa5c50024f0:   vmovdqu %xmm3,%xmm4
  0x00007fa5c50024f4:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007fa5c50024f8:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fa5c50024fc:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007fa5c5002500:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007fa5c5002504:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007fa5c5002508:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fa5c500250c:   jmpq   0x00007fa5c5002b28
  0x00007fa5c5002511:   jg     0x00007fa5c50025ba
  0x00007fa5c5002517:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c500251c:   mov    %eax,%edx
  0x00007fa5c500251e:   and    $0x7ff0,%eax
  0x00007fa5c5002523:   je     0x00007fa5c50025ad
  0x00007fa5c5002529:   and    $0x7fff,%edx
  0x00007fa5c500252f:   cmp    $0x3e20,%edx
  0x00007fa5c5002535:   jb     0x00007fa5c5002590
  0x00007fa5c500253b:   vmovdqu %xmm0,%xmm2
  0x00007fa5c500253f:   vmovdqu %xmm0,%xmm3
  0x00007fa5c5002543:   vmovq  0x9a68485(%rip),%xmm1        # 0x00007fa5cea6a9d0
  0x00007fa5c500254b:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007fa5c500254f:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007fa5c5002553:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fa5c5002557:   vaddsd 0x9a68461(%rip),%xmm1,%xmm1        # 0x00007fa5cea6a9c0
  0x00007fa5c500255f:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fa5c5002563:   vaddsd 0x9a68445(%rip),%xmm1,%xmm1        # 0x00007fa5cea6a9b0
  0x00007fa5c500256b:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fa5c500256f:   vaddsd 0x9a68429(%rip),%xmm1,%xmm1        # 0x00007fa5cea6a9a0
  0x00007fa5c5002577:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fa5c500257b:   vaddsd 0x9a6840d(%rip),%xmm1,%xmm1        # 0x00007fa5cea6a990
  0x00007fa5c5002583:   vmulsd %xmm3,%xmm1,%xmm1
  0x00007fa5c5002587:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fa5c500258b:   jmpq   0x00007fa5c5002b28
  0x00007fa5c5002590:   vmovq  0x9a63b30(%rip),%xmm3        # 0x00007fa5cea660c8
  0x00007fa5c5002598:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007fa5c500259c:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fa5c50025a0:   vmulsd 0x9a63b18(%rip),%xmm0,%xmm0        # 0x00007fa5cea660c0
  0x00007fa5c50025a8:   jmpq   0x00007fa5c5002b28
  0x00007fa5c50025ad:   vmovdqu %xmm0,%xmm1
  0x00007fa5c50025b1:   vmulsd %xmm1,%xmm1,%xmm1
  0x00007fa5c50025b5:   jmpq   0x00007fa5c5002b28
  0x00007fa5c50025ba:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c50025bf:   and    $0x7ff0,%eax
  0x00007fa5c50025c4:   cmp    $0x7ff0,%eax
  0x00007fa5c50025c9:   je     0x00007fa5c5002b15
  0x00007fa5c50025cf:   vpextrw $0x3,%xmm0,%ecx
  0x00007fa5c50025d4:   and    $0x7ff0,%ecx
  0x00007fa5c50025da:   sub    $0x3f60,%ecx
  0x00007fa5c50025e0:   shr    $0x7,%ecx
  0x00007fa5c50025e3:   and    $0xfffc,%ecx
  0x00007fa5c50025e9:   movabs $0x7fa5cea65f80,%r11
  0x00007fa5c50025f3:   add    %r11,%rcx
  0x00007fa5c50025f6:   vmovq  %xmm0,%rax
  0x00007fa5c50025fb:   mov    0x14(%rcx),%r10d
  0x00007fa5c50025ff:   mov    0x18(%rcx),%r8d
  0x00007fa5c5002603:   mov    %eax,%edx
  0x00007fa5c5002605:   shr    $0x15,%rax
  0x00007fa5c5002609:   or     $0x80000000,%eax
  0x00007fa5c500260e:   shr    $0xb,%eax
  0x00007fa5c5002611:   mov    %r10d,%r9d
  0x00007fa5c5002614:   imul   %rdx,%r10
  0x00007fa5c5002618:   imul   %rax,%r9
  0x00007fa5c500261c:   imul   %rax,%r8
  0x00007fa5c5002620:   mov    0x10(%rcx),%esi
  0x00007fa5c5002623:   mov    0xc(%rcx),%edi
  0x00007fa5c5002626:   mov    %r10d,%r11d
  0x00007fa5c5002629:   shr    $0x20,%r10
  0x00007fa5c500262d:   add    %r10,%r9
  0x00007fa5c5002630:   add    %r8,%r11
  0x00007fa5c5002633:   mov    %r11d,%r8d
  0x00007fa5c5002636:   shr    $0x20,%r11
  0x00007fa5c500263a:   add    %r11,%r9
  0x00007fa5c500263d:   mov    %esi,%r10d
  0x00007fa5c5002640:   imul   %rdx,%rsi
  0x00007fa5c5002644:   imul   %rax,%r10
  0x00007fa5c5002648:   mov    %edi,%r11d
  0x00007fa5c500264b:   imul   %rdx,%rdi
  0x00007fa5c500264f:   mov    %esi,%ebx
  0x00007fa5c5002651:   shr    $0x20,%rsi
  0x00007fa5c5002655:   add    %rbx,%r9
  0x00007fa5c5002658:   mov    %r9d,%ebx
  0x00007fa5c500265b:   shr    $0x20,%r9
  0x00007fa5c500265f:   add    %rsi,%r10
  0x00007fa5c5002662:   add    %r9,%r10
  0x00007fa5c5002665:   shl    $0x20,%rbx
  0x00007fa5c5002669:   or     %rbx,%r8
  0x00007fa5c500266c:   imul   %rax,%r11
  0x00007fa5c5002670:   mov    0x8(%rcx),%r9d
  0x00007fa5c5002674:   mov    0x4(%rcx),%esi
  0x00007fa5c5002677:   mov    %edi,%ebx
  0x00007fa5c5002679:   shr    $0x20,%rdi
  0x00007fa5c500267d:   add    %rbx,%r10
  0x00007fa5c5002680:   mov    %r10d,%ebx
  0x00007fa5c5002683:   shr    $0x20,%r10
  0x00007fa5c5002687:   add    %rdi,%r11
  0x00007fa5c500268a:   add    %r10,%r11
  0x00007fa5c500268d:   mov    %r9,%rdi
  0x00007fa5c5002690:   imul   %rdx,%r9
  0x00007fa5c5002694:   imul   %rax,%rdi
  0x00007fa5c5002698:   mov    %r9d,%r10d
  0x00007fa5c500269b:   shr    $0x20,%r9
  0x00007fa5c500269f:   add    %r10,%r11
  0x00007fa5c50026a2:   mov    %r11d,%r10d
  0x00007fa5c50026a5:   shr    $0x20,%r11
  0x00007fa5c50026a9:   add    %r9,%rdi
  0x00007fa5c50026ac:   add    %r11,%rdi
  0x00007fa5c50026af:   mov    %rsi,%r9
  0x00007fa5c50026b2:   imul   %rdx,%rsi
  0x00007fa5c50026b6:   imul   %rax,%r9
  0x00007fa5c50026ba:   shl    $0x20,%r10
  0x00007fa5c50026be:   or     %rbx,%r10
  0x00007fa5c50026c1:   mov    (%rcx),%eax
  0x00007fa5c50026c3:   mov    %esi,%r11d
  0x00007fa5c50026c6:   shr    $0x20,%rsi
  0x00007fa5c50026ca:   add    %r11,%rdi
  0x00007fa5c50026cd:   mov    %edi,%r11d
  0x00007fa5c50026d0:   shr    $0x20,%rdi
  0x00007fa5c50026d4:   add    %rsi,%r9
  0x00007fa5c50026d7:   add    %rdi,%r9
  0x00007fa5c50026da:   imul   %rax,%rdx
  0x00007fa5c50026de:   vpextrw $0x3,%xmm0,%ebx
  0x00007fa5c50026e3:   movabs $0x7fa5cea65f80,%rdi
  0x00007fa5c50026ed:   sub    %rdi,%rcx
  0x00007fa5c50026f0:   add    %ecx,%ecx
  0x00007fa5c50026f2:   add    %ecx,%ecx
  0x00007fa5c50026f4:   add    %ecx,%ecx
  0x00007fa5c50026f6:   add    $0x13,%ecx
  0x00007fa5c50026f9:   mov    $0x8000,%esi
  0x00007fa5c50026fe:   and    %ebx,%esi
  0x00007fa5c5002700:   shr    $0x4,%ebx
  0x00007fa5c5002703:   and    $0x7ff,%ebx
  0x00007fa5c5002709:   sub    $0x3ff,%ebx
  0x00007fa5c500270f:   sub    %ebx,%ecx
  0x00007fa5c5002711:   add    %rdx,%r9
  0x00007fa5c5002714:   mov    %ecx,%edx
  0x00007fa5c5002716:   add    $0x20,%edx
  0x00007fa5c5002719:   cmp    $0x0,%ecx
  0x00007fa5c500271c:   jl     0x00007fa5c5002a65
  0x00007fa5c5002722:   neg    %ecx
  0x00007fa5c5002724:   add    $0x1d,%ecx
  0x00007fa5c5002727:   shl    %cl,%r9d
  0x00007fa5c500272a:   mov    %r9d,%edi
  0x00007fa5c500272d:   and    $0x3fffffff,%r9d
  0x00007fa5c5002734:   test   $0x20000000,%r9d
  0x00007fa5c500273b:   jne    0x00007fa5c5002a92
  0x00007fa5c5002741:   shr    %cl,%r9d
  0x00007fa5c5002744:   mov    $0x0,%ebx
  0x00007fa5c5002749:   shl    $0x20,%r9
  0x00007fa5c500274d:   or     %r11,%r9
  0x00007fa5c5002750:   cmp    $0x0,%r9
  0x00007fa5c5002754:   je     0x00007fa5c5002a11
  0x00007fa5c500275a:   bsr    %r9,%r11
  0x00007fa5c500275e:   mov    $0x1d,%ecx
  0x00007fa5c5002763:   sub    %r11d,%ecx
  0x00007fa5c5002766:   jle    0x00007fa5c5002a42
  0x00007fa5c500276c:   shl    %cl,%r9
  0x00007fa5c500276f:   mov    %r10,%rax
  0x00007fa5c5002772:   shl    %cl,%r10
  0x00007fa5c5002775:   add    %ecx,%edx
  0x00007fa5c5002777:   neg    %ecx
  0x00007fa5c5002779:   add    $0x40,%ecx
  0x00007fa5c500277c:   shr    %cl,%rax
  0x00007fa5c500277f:   shr    %cl,%r8
  0x00007fa5c5002782:   or     %rax,%r9
  0x00007fa5c5002785:   or     %r8,%r10
  0x00007fa5c5002788:   vcvtsi2sd %r9,%xmm0,%xmm0
  0x00007fa5c500278d:   shr    %r10
  0x00007fa5c5002790:   vcvtsi2sd %r10,%xmm3,%xmm3
  0x00007fa5c5002795:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007fa5c5002799:   shl    $0x4,%edx
  0x00007fa5c500279c:   neg    %edx
  0x00007fa5c500279e:   add    $0x3ff0,%edx
  0x00007fa5c50027a4:   or     %esi,%edx
  0x00007fa5c50027a6:   xor    %ebx,%edx
  0x00007fa5c50027a8:   vpinsrw $0x3,%edx,%xmm4,%xmm4
  0x00007fa5c50027ad:   vmovq  0x9a681c3(%rip),%xmm2        # 0x00007fa5cea6a978
  0x00007fa5c50027b5:   vmovq  0x9a681c3(%rip),%xmm7        # 0x00007fa5cea6a980
  0x00007fa5c50027bd:   vxorpd %xmm5,%xmm5,%xmm5
  0x00007fa5c50027c1:   sub    $0x3f0,%edx
  0x00007fa5c50027c7:   vpinsrw $0x3,%edx,%xmm5,%xmm5
  0x00007fa5c50027cc:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007fa5c50027d0:   shl    $0x10,%esi
  0x00007fa5c50027d3:   sar    $0x1f,%esi
  0x00007fa5c50027d6:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007fa5c50027da:   vmovdqu %xmm0,%xmm1
  0x00007fa5c50027de:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007fa5c50027e2:   shr    $0x1e,%edi
  0x00007fa5c50027e5:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fa5c50027e9:   vmulsd %xmm2,%xmm3,%xmm3
  0x00007fa5c50027ed:   add    %esi,%edi
  0x00007fa5c50027ef:   xor    %esi,%edi
  0x00007fa5c50027f1:   vmulsd %xmm1,%xmm7,%xmm7
  0x00007fa5c50027f5:   mov    %edi,%eax
  0x00007fa5c50027f7:   vaddsd %xmm3,%xmm7,%xmm7
  0x00007fa5c50027fb:   vmovdqu %xmm0,%xmm2
  0x00007fa5c50027ff:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fa5c5002803:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007fa5c5002807:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007fa5c500280b:   vmovdqu 0x9a6980d(%rip),%xmm1        # 0x00007fa5cea6c020
  0x00007fa5c5002813:   vmovddup %xmm0,%xmm0
  0x00007fa5c5002817:   vmovdqu 0x9a69811(%rip),%xmm4        # 0x00007fa5cea6c030
  0x00007fa5c500281f:   vandpd %xmm0,%xmm4,%xmm4
  0x00007fa5c5002823:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fa5c5002827:   vmovddup %xmm7,%xmm7
  0x00007fa5c500282b:   vmovdqu 0x9a638ad(%rip),%xmm5        # 0x00007fa5cea660e0
  0x00007fa5c5002833:   vmovdqu 0x9a69805(%rip),%xmm6        # 0x00007fa5cea6c040
  0x00007fa5c500283b:   vpor   %xmm4,%xmm5,%xmm5
  0x00007fa5c500283f:   vaddpd %xmm5,%xmm1,%xmm1
  0x00007fa5c5002843:   vmovdqu %xmm1,%xmm5
  0x00007fa5c5002847:   vunpckhpd %xmm5,%xmm5,%xmm5
  0x00007fa5c500284b:   vcvttsd2si %xmm5,%edx
  0x00007fa5c500284f:   (bad)  
  0x00007fa5c5002853:   leaveq 
  0x00007fa5c5002854:   vcvtdq2pd %xmm1,%xmm1
  0x00007fa5c5002858:   vmulpd %xmm6,%xmm1,%xmm1
  0x00007fa5c500285c:   vmovdqu 0x9a697ac(%rip),%xmm3        # 0x00007fa5cea6c010
  0x00007fa5c5002864:   vmovq  0x9a68104(%rip),%xmm5        # 0x00007fa5cea6a970
  0x00007fa5c500286c:   shl    $0x4,%eax
  0x00007fa5c500286f:   add    $0x72900,%edx
  0x00007fa5c5002875:   vmovdqu 0x9a69783(%rip),%xmm4        # 0x00007fa5cea6c000
  0x00007fa5c500287d:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007fa5c5002881:   add    %eax,%edx
  0x00007fa5c5002883:   and    $0x1f,%edx
  0x00007fa5c5002886:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007fa5c500288a:   mov    %edx,%ecx
  0x00007fa5c500288c:   vmulpd %xmm1,%xmm4,%xmm4
  0x00007fa5c5002890:   shl    %ecx
  0x00007fa5c5002892:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007fa5c5002896:   vmulpd 0x9a69752(%rip),%xmm1,%xmm1        # 0x00007fa5cea6bff0
  0x00007fa5c500289e:   add    %ecx,%edx
  0x00007fa5c50028a0:   shl    $0x2,%ecx
  0x00007fa5c50028a3:   add    %ecx,%edx
  0x00007fa5c50028a5:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fa5c50028a9:   vmovdqu %xmm0,%xmm2
  0x00007fa5c50028ad:   vsubpd %xmm4,%xmm0,%xmm0
  0x00007fa5c50028b1:   vmovq  0x9a63837(%rip),%xmm6        # 0x00007fa5cea660f0
  0x00007fa5c50028b9:   shl    $0x4,%edx
  0x00007fa5c50028bc:   movabs $0x7fa5cea6a9f0,%rax
  0x00007fa5c50028c6:   vandpd 0x9a68112(%rip),%xmm5,%xmm5        # 0x00007fa5cea6a9e0
  0x00007fa5c50028ce:   vmovdqu %xmm0,%xmm3
  0x00007fa5c50028d2:   add    %rdx,%rax
  0x00007fa5c50028d5:   vsubpd %xmm0,%xmm2,%xmm2
  0x00007fa5c50028d9:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007fa5c50028dd:   vdivsd %xmm5,%xmm6,%xmm6
  0x00007fa5c50028e1:   vsubpd %xmm4,%xmm2,%xmm2
  0x00007fa5c50028e5:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007fa5c50028e9:   vsubpd %xmm1,%xmm2,%xmm2
  0x00007fa5c50028ed:   vmovdqu 0x30(%rax),%xmm1
  0x00007fa5c50028f2:   vaddpd %xmm7,%xmm2,%xmm2
  0x00007fa5c50028f6:   vmovdqu 0x10(%rax),%xmm7
  0x00007fa5c50028fb:   vmulpd %xmm0,%xmm7,%xmm7
  0x00007fa5c50028ff:   vmovdqu 0x60(%rax),%xmm4
  0x00007fa5c5002904:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fa5c5002908:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007fa5c500290c:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fa5c5002910:   vmovdqu %xmm0,%xmm3
  0x00007fa5c5002914:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002918:   vaddpd (%rax),%xmm7,%xmm7
  0x00007fa5c500291c:   vaddpd 0x20(%rax),%xmm1,%xmm1
  0x00007fa5c5002921:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fa5c5002925:   vaddpd 0x50(%rax),%xmm4,%xmm4
  0x00007fa5c500292a:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007fa5c500292e:   vmovdqu 0x70(%rax),%xmm1
  0x00007fa5c5002933:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fa5c5002937:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c500293b:   vaddpd %xmm1,%xmm4,%xmm4
  0x00007fa5c500293f:   vmovdqu 0x40(%rax),%xmm1
  0x00007fa5c5002944:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fa5c5002948:   vaddpd %xmm1,%xmm7,%xmm7
  0x00007fa5c500294c:   vmovdqu %xmm3,%xmm1
  0x00007fa5c5002950:   vmulpd %xmm0,%xmm3,%xmm3
  0x00007fa5c5002954:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002958:   vmulpd 0x90(%rax),%xmm1,%xmm1
  0x00007fa5c5002960:   vmulpd %xmm3,%xmm4,%xmm4
  0x00007fa5c5002964:   vmovdqu %xmm1,%xmm3
  0x00007fa5c5002968:   vaddpd %xmm4,%xmm7,%xmm7
  0x00007fa5c500296c:   vmovdqu %xmm1,%xmm4
  0x00007fa5c5002970:   vmulsd %xmm7,%xmm0,%xmm0
  0x00007fa5c5002974:   vunpckhpd %xmm7,%xmm7,%xmm7
  0x00007fa5c5002978:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fa5c500297c:   vunpckhpd %xmm1,%xmm1,%xmm1
  0x00007fa5c5002980:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007fa5c5002984:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fa5c5002988:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fa5c500298c:   vmovdqu %xmm2,%xmm4
  0x00007fa5c5002990:   vmovq  0x90(%rax),%xmm7
  0x00007fa5c5002998:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007fa5c500299c:   vaddsd 0x98(%rax),%xmm7,%xmm7
  0x00007fa5c50029a4:   vmulsd %xmm2,%xmm7,%xmm7
  0x00007fa5c50029a8:   vaddsd 0x88(%rax),%xmm7,%xmm7
  0x00007fa5c50029b0:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007fa5c50029b4:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fa5c50029b8:   vmovq  0x9a63730(%rip),%xmm7        # 0x00007fa5cea660f0
  0x00007fa5c50029c0:   vmulsd %xmm6,%xmm4,%xmm4
  0x00007fa5c50029c4:   vmovq  0xa8(%rax),%xmm2
  0x00007fa5c50029cc:   vandpd %xmm6,%xmm2,%xmm2
  0x00007fa5c50029d0:   vmulsd %xmm2,%xmm5,%xmm5
  0x00007fa5c50029d4:   vmulsd 0xa0(%rax),%xmm6,%xmm6
  0x00007fa5c50029dc:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007fa5c50029e0:   vsubsd 0x80(%rax),%xmm2,%xmm2
  0x00007fa5c50029e8:   vsubsd %xmm4,%xmm7,%xmm7
  0x00007fa5c50029ec:   vmulsd %xmm6,%xmm7,%xmm7
  0x00007fa5c50029f0:   vmovdqu %xmm3,%xmm4
  0x00007fa5c50029f4:   vsubsd %xmm2,%xmm3,%xmm3
  0x00007fa5c50029f8:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fa5c50029fc:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007fa5c5002a00:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007fa5c5002a04:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007fa5c5002a08:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fa5c5002a0c:   jmpq   0x00007fa5c5002b28
  0x00007fa5c5002a11:   add    $0x40,%edx
  0x00007fa5c5002a14:   mov    %r10,%r9
  0x00007fa5c5002a17:   mov    %r8,%r10
  0x00007fa5c5002a1a:   mov    $0x0,%r8d
  0x00007fa5c5002a20:   cmp    $0x0,%r9
  0x00007fa5c5002a24:   jne    0x00007fa5c500275a
  0x00007fa5c5002a2a:   add    $0x40,%edx
  0x00007fa5c5002a2d:   mov    %r10,%r9
  0x00007fa5c5002a30:   mov    %r8,%r10
  0x00007fa5c5002a33:   cmp    $0x0,%r9
  0x00007fa5c5002a37:   jne    0x00007fa5c500275a
  0x00007fa5c5002a3d:   jmpq   0x00007fa5c5002788
  0x00007fa5c5002a42:   je     0x00007fa5c5002788
  0x00007fa5c5002a48:   neg    %ecx
  0x00007fa5c5002a4a:   shr    %cl,%r10
  0x00007fa5c5002a4d:   mov    %r9,%rax
  0x00007fa5c5002a50:   shr    %cl,%r9
  0x00007fa5c5002a53:   sub    %ecx,%edx
  0x00007fa5c5002a55:   neg    %ecx
  0x00007fa5c5002a57:   add    $0x40,%ecx
  0x00007fa5c5002a5a:   shl    %cl,%rax
  0x00007fa5c5002a5d:   or     %rax,%r10
  0x00007fa5c5002a60:   jmpq   0x00007fa5c5002788
  0x00007fa5c5002a65:   not    %ecx
  0x00007fa5c5002a67:   shl    $0x20,%r9
  0x00007fa5c5002a6b:   or     %r11,%r9
  0x00007fa5c5002a6e:   shl    %cl,%r9
  0x00007fa5c5002a71:   mov    %r9,%rdi
  0x00007fa5c5002a74:   test   $0x80000000,%r9d
  0x00007fa5c5002a7b:   jne    0x00007fa5c5002ad4
  0x00007fa5c5002a81:   shr    %cl,%r9d
  0x00007fa5c5002a84:   mov    $0x0,%ebx
  0x00007fa5c5002a89:   shr    $0x2,%rdi
  0x00007fa5c5002a8d:   jmpq   0x00007fa5c5002750
  0x00007fa5c5002a92:   shr    %cl,%r9d
  0x00007fa5c5002a95:   mov    $0x40000000,%ebx
  0x00007fa5c5002a9a:   shr    %cl,%ebx
  0x00007fa5c5002a9c:   shl    $0x20,%r9
  0x00007fa5c5002aa0:   or     %r11,%r9
  0x00007fa5c5002aa3:   shl    $0x20,%rbx
  0x00007fa5c5002aa7:   add    $0x40000000,%edi
  0x00007fa5c5002aad:   mov    $0x0,%ecx
  0x00007fa5c5002ab2:   mov    $0x0,%r11d
  0x00007fa5c5002ab8:   sub    %r8,%rcx
  0x00007fa5c5002abb:   sbb    %r10,%r11
  0x00007fa5c5002abe:   sbb    %r9,%rbx
  0x00007fa5c5002ac1:   mov    %rcx,%r8
  0x00007fa5c5002ac4:   mov    %r11,%r10
  0x00007fa5c5002ac7:   mov    %rbx,%r9
  0x00007fa5c5002aca:   mov    $0x8000,%ebx
  0x00007fa5c5002acf:   jmpq   0x00007fa5c5002750
  0x00007fa5c5002ad4:   shr    %cl,%r9d
  0x00007fa5c5002ad7:   movabs $0x100000000,%rbx
  0x00007fa5c5002ae1:   shr    %cl,%rbx
  0x00007fa5c5002ae4:   mov    $0x0,%ecx
  0x00007fa5c5002ae9:   mov    $0x0,%r11d
  0x00007fa5c5002aef:   sub    %r8,%rcx
  0x00007fa5c5002af2:   sbb    %r10,%r11
  0x00007fa5c5002af5:   sbb    %r9,%rbx
  0x00007fa5c5002af8:   mov    %rcx,%r8
  0x00007fa5c5002afb:   mov    %r11,%r10
  0x00007fa5c5002afe:   mov    %rbx,%r9
  0x00007fa5c5002b01:   mov    $0x8000,%ebx
  0x00007fa5c5002b06:   shr    $0x2,%rdi
  0x00007fa5c5002b0a:   add    $0x40000000,%edi
  0x00007fa5c5002b10:   jmpq   0x00007fa5c5002750
  0x00007fa5c5002b15:   vmovq  0x8(%rsp),%xmm0
  0x00007fa5c5002b1b:   vmulsd 0x9a63525(%rip),%xmm0,%xmm0        # 0x00007fa5cea66048
  0x00007fa5c5002b23:   vmovq  %xmm0,(%rsp)
  0x00007fa5c5002b28:   add    $0x10,%rsp
  0x00007fa5c5002b2c:   pop    %rbx
  0x00007fa5c5002b2d:   leaveq 
  0x00007fa5c5002b2e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmExp [0x00007fa5c5002b2f, 0x00007fa5c5002e4f] (800 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5002b2f:   push   %rbp
  0x00007fa5c5002b30:   mov    %rsp,%rbp
  0x00007fa5c5002b33:   sub    $0x18,%rsp
  0x00007fa5c5002b37:   vmovsd %xmm0,0x8(%rsp)
  0x00007fa5c5002b3d:   vunpcklpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002b41:   vmovdqu 0x9a63aa7(%rip),%xmm1        # 0x00007fa5cea665f0
  0x00007fa5c5002b49:   vmovdqu 0x9a63aaf(%rip),%xmm2        # 0x00007fa5cea66600
  0x00007fa5c5002b51:   vmovdqu 0x9a63ab7(%rip),%xmm3        # 0x00007fa5cea66610
  0x00007fa5c5002b59:   vmovdqu 0x9a6354f(%rip),%xmm6        # 0x00007fa5cea660b0
  0x00007fa5c5002b61:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5002b66:   and    $0x7fff,%eax
  0x00007fa5c5002b6b:   mov    $0x408f,%edx
  0x00007fa5c5002b70:   sub    %eax,%edx
  0x00007fa5c5002b72:   sub    $0x3c90,%eax
  0x00007fa5c5002b77:   or     %eax,%edx
  0x00007fa5c5002b79:   cmp    $0x80000000,%edx
  0x00007fa5c5002b7f:   jae    0x00007fa5c5002e16
  0x00007fa5c5002b85:   vmulpd %xmm0,%xmm1,%xmm1
  0x00007fa5c5002b89:   vaddpd %xmm6,%xmm1,%xmm1
  0x00007fa5c5002b8d:   vmovapd %xmm1,%xmm7
  0x00007fa5c5002b91:   vsubpd %xmm6,%xmm1,%xmm1
  0x00007fa5c5002b95:   vmulpd %xmm1,%xmm2,%xmm2
  0x00007fa5c5002b99:   vmovdqu 0x9a63a8f(%rip),%xmm4        # 0x00007fa5cea66630
  0x00007fa5c5002ba1:   vmulpd %xmm1,%xmm3,%xmm3
  0x00007fa5c5002ba5:   vmovdqu 0x9a63a93(%rip),%xmm5        # 0x00007fa5cea66640
  0x00007fa5c5002bad:   vsubpd %xmm2,%xmm0,%xmm0
  0x00007fa5c5002bb1:   vmovd  %xmm7,%eax
  0x00007fa5c5002bb5:   mov    %eax,%ecx
  0x00007fa5c5002bb7:   and    $0x3f,%ecx
  0x00007fa5c5002bba:   shl    $0x4,%ecx
  0x00007fa5c5002bbd:   sar    $0x6,%eax
  0x00007fa5c5002bc0:   mov    %eax,%edx
  0x00007fa5c5002bc2:   vmovdqu 0x9a63a16(%rip),%xmm6        # 0x00007fa5cea665e0
  0x00007fa5c5002bca:   vpand  %xmm6,%xmm7,%xmm7
  0x00007fa5c5002bce:   vmovdqu 0x9a639fa(%rip),%xmm6        # 0x00007fa5cea665d0
  0x00007fa5c5002bd6:   vpaddq %xmm6,%xmm7,%xmm7
  0x00007fa5c5002bda:   (bad)  
  0x00007fa5c5002bde:   imull  (%rsi)
  0x00007fa5c5002be0:   vsubpd %xmm3,%xmm0,%xmm0
  0x00007fa5c5002be4:   movabs $0x7fa5cea661d0,%r11
  0x00007fa5c5002bee:   vmovdqu (%rcx,%r11,1),%xmm2
  0x00007fa5c5002bf4:   vmulpd %xmm0,%xmm4,%xmm4
  0x00007fa5c5002bf8:   vmovapd %xmm0,%xmm6
  0x00007fa5c5002bfc:   vmovapd %xmm0,%xmm1
  0x00007fa5c5002c00:   vmulpd %xmm6,%xmm6,%xmm6
  0x00007fa5c5002c04:   vmulpd %xmm6,%xmm0,%xmm0
  0x00007fa5c5002c08:   vaddpd %xmm4,%xmm5,%xmm5
  0x00007fa5c5002c0c:   vmulsd %xmm6,%xmm0,%xmm0
  0x00007fa5c5002c10:   vmulpd 0x9a63a08(%rip),%xmm6,%xmm6        # 0x00007fa5cea66620
  0x00007fa5c5002c18:   vaddsd %xmm2,%xmm1,%xmm1
  0x00007fa5c5002c1c:   vunpckhpd %xmm2,%xmm2,%xmm2
  0x00007fa5c5002c20:   vmulpd %xmm5,%xmm0,%xmm0
  0x00007fa5c5002c24:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007fa5c5002c28:   vpor   %xmm7,%xmm2,%xmm2
  0x00007fa5c5002c2c:   vunpckhpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002c30:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fa5c5002c34:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fa5c5002c38:   add    $0x37e,%edx
  0x00007fa5c5002c3e:   cmp    $0x77c,%edx
  0x00007fa5c5002c44:   ja     0x00007fa5c5002c57
  0x00007fa5c5002c4a:   vmulsd %xmm2,%xmm0,%xmm0
  0x00007fa5c5002c4e:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007fa5c5002c52:   jmpq   0x00007fa5c5002e49
  0x00007fa5c5002c57:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007fa5c5002c5b:   vmovdqu 0x9a6355d(%rip),%xmm4        # 0x00007fa5cea661c0
  0x00007fa5c5002c63:   mov    $0xfffffc02,%edx
  0x00007fa5c5002c68:   sub    %eax,%edx
  0x00007fa5c5002c6a:   vmovd  %edx,%xmm5
  0x00007fa5c5002c6e:   vpsllq %xmm5,%xmm4,%xmm4
  0x00007fa5c5002c72:   mov    %eax,%ecx
  0x00007fa5c5002c74:   sar    %eax
  0x00007fa5c5002c76:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007fa5c5002c7b:   vmovdqu 0x9a6352d(%rip),%xmm6        # 0x00007fa5cea661b0
  0x00007fa5c5002c83:   (bad)  
  0x00007fa5c5002c87:   repz add $0xc5,%al
  0x00007fa5c5002c8a:   jmpq   0x00007fa5c0c60089
  0x00007fa5c5002c8f:   pop    %rcx
  0x00007fa5c5002c90:   retq   $0xfa83
  0x00007fa5c5002c93:   xor    $0xf,%al
  0x00007fa5c5002c95:   (bad)  
  0x00007fa5c5002c99:   add    %al,%ch
  0x00007fa5c5002c9b:   (bad)  
  0x00007fa5c5002c9d:   loop   0x00007fa5c5002c64
  0x00007fa5c5002c9f:   loope  0x00007fa5c5002c9f
  0x00007fa5c5002ca1:   faddp  %st,%st(5)
  0x00007fa5c5002ca3:   jmp    0x00007fa5c5002d01
  0x00007fa5c5002ca5:   (bad)  
  0x00007fa5c5002ca6:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007fa5c5002caa:   cmp    $0x3ff,%ecx
  0x00007fa5c5002cb0:   jge    0x00007fa5c5002d40
  0x00007fa5c5002cb6:   vpextrw $0x3,%xmm0,%ecx
  0x00007fa5c5002cbb:   and    $0x8000,%ecx
  0x00007fa5c5002cc1:   or     %ecx,%edx
  0x00007fa5c5002cc3:   cmp    $0x0,%edx
  0x00007fa5c5002cc6:   je     0x00007fa5c5002d33
  0x00007fa5c5002ccc:   vmovapd %xmm0,%xmm6
  0x00007fa5c5002cd0:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007fa5c5002cd4:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007fa5c5002cd8:   vpextrw $0x3,%xmm0,%ecx
  0x00007fa5c5002cdd:   and    $0x7ff0,%ecx
  0x00007fa5c5002ce3:   cmp    $0x0,%ecx
  0x00007fa5c5002ce6:   je     0x00007fa5c5002cf1
  0x00007fa5c5002cec:   jmpq   0x00007fa5c5002e49
  0x00007fa5c5002cf1:   vmulsd %xmm3,%xmm6,%xmm6
  0x00007fa5c5002cf5:   vmulsd %xmm3,%xmm4,%xmm4
  0x00007fa5c5002cf9:   vmovdqu %xmm6,%xmm0
  0x00007fa5c5002cfd:   vpxor  %xmm4,%xmm6,%xmm6
  0x00007fa5c5002d01:   vpsrad $0x1f,%xmm6,%xmm6
  0x00007fa5c5002d06:   vpshufd $0x55,%xmm6,%xmm6
  0x00007fa5c5002d0b:   (bad)  
  0x00007fa5c5002d0f:   lock add %eax,%ebp
  0x00007fa5c5002d12:   stc    
  0x00007fa5c5002d13:   jae    0x00007fa5c5002ce5
  0x00007fa5c5002d15:   add    %eax,%ebp
  0x00007fa5c5002d17:   stc    
  0x00007fa5c5002d18:   out    %eax,(%dx)
  0x00007fa5c5002d19:   mov    $0xc9,%ch
  0x00007fa5c5002d1c:   jae    0x00007fa5c5002cf4
  0x00007fa5c5002d1e:   (bad)  
  0x00007fa5c5002d1f:   vpaddq %xmm6,%xmm0,%xmm0
  0x00007fa5c5002d23:   vpaddq %xmm4,%xmm0,%xmm0
  0x00007fa5c5002d27:   movl   $0xf,(%rsp)
  0x00007fa5c5002d2e:   jmpq   0x00007fa5c5002e3d
  0x00007fa5c5002d33:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007fa5c5002d37:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007fa5c5002d3b:   jmpq   0x00007fa5c5002e49
  0x00007fa5c5002d40:   vaddsd %xmm4,%xmm0,%xmm0
  0x00007fa5c5002d44:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007fa5c5002d48:   vpextrw $0x3,%xmm0,%ecx
  0x00007fa5c5002d4d:   and    $0x7ff0,%ecx
  0x00007fa5c5002d53:   cmp    $0x7ff0,%ecx
  0x00007fa5c5002d59:   jae    0x00007fa5c5002da2
  0x00007fa5c5002d5f:   jmpq   0x00007fa5c5002e49
  0x00007fa5c5002d64:   vpaddd %xmm6,%xmm3,%xmm3
  0x00007fa5c5002d68:   vaddpd %xmm2,%xmm0,%xmm0
  0x00007fa5c5002d6c:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007fa5c5002d70:   movl   $0xf,(%rsp)
  0x00007fa5c5002d77:   jmpq   0x00007fa5c5002e3d
  0x00007fa5c5002d7c:   cmp    $0x7ff00000,%eax
  0x00007fa5c5002d81:   jae    0x00007fa5c5002dc6
  0x00007fa5c5002d87:   mov    0xc(%rsp),%eax
  0x00007fa5c5002d8b:   cmp    $0x80000000,%eax
  0x00007fa5c5002d90:   jae    0x00007fa5c5002dae
  0x00007fa5c5002d96:   vmovsd 0x9a63402(%rip),%xmm0        # 0x00007fa5cea661a0
  0x00007fa5c5002d9e:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002da2:   movl   $0xe,(%rsp)
  0x00007fa5c5002da9:   jmpq   0x00007fa5c5002e3d
  0x00007fa5c5002dae:   vmovsd 0x9a633e2(%rip),%xmm0        # 0x00007fa5cea66198
  0x00007fa5c5002db6:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002dba:   movl   $0xf,(%rsp)
  0x00007fa5c5002dc1:   jmpq   0x00007fa5c5002e3d
  0x00007fa5c5002dc6:   mov    0x8(%rsp),%edx
  0x00007fa5c5002dca:   cmp    $0x7ff00000,%eax
  0x00007fa5c5002dcf:   ja     0x00007fa5c5002e07
  0x00007fa5c5002dd5:   cmp    $0x0,%edx
  0x00007fa5c5002dd8:   jne    0x00007fa5c5002e07
  0x00007fa5c5002dde:   mov    0xc(%rsp),%eax
  0x00007fa5c5002de2:   cmp    $0x7ff00000,%eax
  0x00007fa5c5002de7:   jne    0x00007fa5c5002dfa
  0x00007fa5c5002ded:   vmovsd 0x9a6339b(%rip),%xmm0        # 0x00007fa5cea66190
  0x00007fa5c5002df5:   jmpq   0x00007fa5c5002e49
  0x00007fa5c5002dfa:   vmovsd 0x9abdf3e(%rip),%xmm0        # 0x00007fa5ceac0d40
  0x00007fa5c5002e02:   jmpq   0x00007fa5c5002e49
  0x00007fa5c5002e07:   vmovsd 0x8(%rsp),%xmm0
  0x00007fa5c5002e0d:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002e11:   jmpq   0x00007fa5c5002e49
  0x00007fa5c5002e16:   mov    0xc(%rsp),%eax
  0x00007fa5c5002e1a:   and    $0x7fffffff,%eax
  0x00007fa5c5002e1f:   cmp    $0x40900000,%eax
  0x00007fa5c5002e24:   jae    0x00007fa5c5002d7c
  0x00007fa5c5002e2a:   vmovsd %xmm0,0x8(%rsp)
  0x00007fa5c5002e30:   vaddsd 0x9a632b8(%rip),%xmm0,%xmm0        # 0x00007fa5cea660f0
  0x00007fa5c5002e38:   jmpq   0x00007fa5c5002e49
  0x00007fa5c5002e3d:   vmovq  %xmm0,0x10(%rsp)
  0x00007fa5c5002e43:   vmovq  0x10(%rsp),%xmm0
  0x00007fa5c5002e49:   add    $0x18,%rsp
  0x00007fa5c5002e4d:   leaveq 
  0x00007fa5c5002e4e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmPow [0x00007fa5c5002e4f, 0x00007fa5c5003f43] (4340 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5002e4f:   push   %rbp
  0x00007fa5c5002e50:   mov    %rsp,%rbp
  0x00007fa5c5002e53:   sub    $0x28,%rsp
  0x00007fa5c5002e57:   vmovsd %xmm0,0x8(%rsp)
  0x00007fa5c5002e5d:   vmovsd %xmm1,0x10(%rsp)
  0x00007fa5c5002e63:   vmovq  %xmm1,%r8
  0x00007fa5c5002e68:   cmp    0x9a649d9(%rip),%r8        # 0x00007fa5cea67848
  0x00007fa5c5002e6f:   jne    0x00007fa5c5002e7a
  0x00007fa5c5002e71:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002e75:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c5002e7a:   cmp    0x9a649bf(%rip),%r8        # 0x00007fa5cea67840
  0x00007fa5c5002e81:   jne    0x00007fa5c5002e9a
  0x00007fa5c5002e83:   vmovq  %xmm0,%r9
  0x00007fa5c5002e88:   cmp    0x9abdeb9(%rip),%r9        # 0x00007fa5ceac0d48
  0x00007fa5c5002e8f:   jl     0x00007fa5c5002e9a
  0x00007fa5c5002e91:   vsqrtsd %xmm0,%xmm0,%xmm0
  0x00007fa5c5002e95:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c5002e9a:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5002e9f:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fa5c5002ea3:   movabs $0x3ff0000000000000,%r9
  0x00007fa5c5002ead:   vmovq  %r9,%xmm2
  0x00007fa5c5002eb2:   mov    $0x3fb90000,%r8d
  0x00007fa5c5002eb8:   vmovq  %r8,%xmm7
  0x00007fa5c5002ebd:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c5002ec1:   movabs $0x77f0000000000000,%r10
  0x00007fa5c5002ecb:   vmovq  %r10,%xmm1
  0x00007fa5c5002ed0:   vmovdqu %xmm0,%xmm3
  0x00007fa5c5002ed4:   mov    $0x7ff0,%edx
  0x00007fa5c5002ed9:   and    %eax,%edx
  0x00007fa5c5002edb:   sub    $0x3ff0,%edx
  0x00007fa5c5002ee1:   mov    %edx,%ecx
  0x00007fa5c5002ee3:   sar    $0x1f,%edx
  0x00007fa5c5002ee6:   add    %edx,%ecx
  0x00007fa5c5002ee8:   xor    %edx,%ecx
  0x00007fa5c5002eea:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fa5c5002eee:   vmovdqu 0x9a67a5a(%rip),%xmm6        # 0x00007fa5cea6a950
  0x00007fa5c5002ef6:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fa5c5002efb:   vmovq  0x9a67a3d(%rip),%xmm2        # 0x00007fa5cea6a940
  0x00007fa5c5002f03:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fa5c5002f08:   add    $0x10,%ecx
  0x00007fa5c5002f0b:   bsr    %ecx,%ecx
  0x00007fa5c5002f0e:   vrcpps %xmm0,%xmm0
  0x00007fa5c5002f12:   (bad)  
  0x00007fa5c5002f16:   repz or $0x41,%al
  0x00007fa5c5002f19:   mov    $0x2000,%ebx
  0x00007fa5c5002f1e:   vmovq  %r11,%xmm4
  0x00007fa5c5002f23:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007fa5c5002f28:   sub    $0x10,%eax
  0x00007fa5c5002f2b:   cmp    $0x7fe0,%eax
  0x00007fa5c5002f30:   jae    0x00007fa5c5003145
  0x00007fa5c5002f36:   mov    $0x0,%r8d
  0x00007fa5c5002f3c:   vmulss %xmm7,%xmm0,%xmm0
  0x00007fa5c5002f40:   mov    $0xffffffff,%edx
  0x00007fa5c5002f45:   sub    $0x4,%ecx
  0x00007fa5c5002f48:   shl    %cl,%edx
  0x00007fa5c5002f4a:   shl    $0x20,%rdx
  0x00007fa5c5002f4e:   vmovq  %rdx,%xmm5
  0x00007fa5c5002f53:   vpor   %xmm1,%xmm3,%xmm3
  0x00007fa5c5002f57:   sub    $0x3fdf,%eax
  0x00007fa5c5002f5c:   cmp    $0x1,%eax
  0x00007fa5c5002f5f:   jbe    0x00007fa5c5003b5a
  0x00007fa5c5002f65:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007fa5c5002f69:   vpand  %xmm3,%xmm5,%xmm5
  0x00007fa5c5002f6d:   vmovd  %xmm0,%edx
  0x00007fa5c5002f71:   (bad)  
  0x00007fa5c5002f75:   lock sbb $0xdd5ce3c5,%eax
  0x00007fa5c5002f7b:   vpand  %xmm6,%xmm0,%xmm0
  0x00007fa5c5002f7f:   sub    $0x1,%eax
  0x00007fa5c5002f82:   sar    $0x4,%eax
  0x00007fa5c5002f85:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007fa5c5002f89:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5002f8d:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007fa5c5002f91:   vmovdqu 0x9a668d7(%rip),%xmm1        # 0x00007fa5cea69870
  0x00007fa5c5002f99:   movabs $0x7fa5cea67860,%r11
  0x00007fa5c5002fa3:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007fa5c5002fa7:   vmovdqu 0x9a668d1(%rip),%xmm4        # 0x00007fa5cea69880
  0x00007fa5c5002faf:   mov    %eax,%ecx
  0x00007fa5c5002fb1:   sar    $0x1f,%eax
  0x00007fa5c5002fb4:   add    %eax,%ecx
  0x00007fa5c5002fb6:   xor    %ecx,%eax
  0x00007fa5c5002fb8:   add    $0x1,%eax
  0x00007fa5c5002fbb:   bsr    %eax,%eax
  0x00007fa5c5002fbe:   vunpcklpd %xmm3,%xmm5,%xmm5
  0x00007fa5c5002fc2:   vmovdqu 0x9a668c6(%rip),%xmm6        # 0x00007fa5cea69890
  0x00007fa5c5002fca:   vaddsd %xmm5,%xmm3,%xmm3
  0x00007fa5c5002fce:   and    $0xffc000,%edx
  0x00007fa5c5002fd4:   shr    $0xa,%edx
  0x00007fa5c5002fd7:   vaddpd -0xe40(%r11,%rdx,1),%xmm5,%xmm5
  0x00007fa5c5002fe1:   vmovdqu 0x9a668b7(%rip),%xmm0        # 0x00007fa5cea698a0
  0x00007fa5c5002fe9:   vpshufd $0x44,%xmm3,%xmm2
  0x00007fa5c5002fee:   vmulsd %xmm3,%xmm3,%xmm3
  0x00007fa5c5002ff2:   vmulpd %xmm2,%xmm1,%xmm1
  0x00007fa5c5002ff6:   vmulpd %xmm2,%xmm4,%xmm4
  0x00007fa5c5002ffa:   vaddsd %xmm7,%xmm5,%xmm5
  0x00007fa5c5002ffe:   vmulsd %xmm3,%xmm2,%xmm2
  0x00007fa5c5003002:   vaddpd %xmm1,%xmm6,%xmm6
  0x00007fa5c5003006:   vmulsd %xmm3,%xmm3,%xmm3
  0x00007fa5c500300a:   vaddpd %xmm4,%xmm0,%xmm0
  0x00007fa5c500300e:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c5003014:   mov    0x16(%rsp),%cx
  0x00007fa5c5003019:   vpshufd $0xee,%xmm5,%xmm7
  0x00007fa5c500301e:   vmovq  0x9a6790a(%rip),%xmm4        # 0x00007fa5cea6a930
  0x00007fa5c5003026:   vmulpd %xmm2,%xmm6,%xmm6
  0x00007fa5c500302a:   vpshufd $0x44,%xmm3,%xmm3
  0x00007fa5c500302f:   vmulpd %xmm2,%xmm0,%xmm0
  0x00007fa5c5003033:   shl    $0x4,%eax
  0x00007fa5c5003036:   sub    $0x3e00,%eax
  0x00007fa5c500303b:   and    $0x7ff0,%ecx
  0x00007fa5c5003041:   add    %ecx,%eax
  0x00007fa5c5003043:   vmulpd %xmm6,%xmm3,%xmm3
  0x00007fa5c5003047:   cmp    $0x270,%eax
  0x00007fa5c500304c:   jae    0x00007fa5c5003306
  0x00007fa5c5003052:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007fa5c5003056:   mov    $0x42b8,%edx
  0x00007fa5c500305b:   vpinsrw $0x3,%edx,%xmm6,%xmm6
  0x00007fa5c5003060:   vmovdqu %xmm1,%xmm2
  0x00007fa5c5003064:   vpand  %xmm1,%xmm4,%xmm4
  0x00007fa5c5003068:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007fa5c500306c:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007fa5c5003070:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fa5c5003074:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007fa5c5003078:   vmovdqu %xmm6,%xmm7
  0x00007fa5c500307c:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007fa5c5003080:   movabs $0x7fa5cea69930,%r11
  0x00007fa5c500308a:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007fa5c500308e:   vmovd  %xmm6,%edx
  0x00007fa5c5003092:   vsubsd %xmm7,%xmm6,%xmm6
  0x00007fa5c5003096:   vpshufd $0xee,%xmm3,%xmm0
  0x00007fa5c500309b:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007fa5c500309f:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fa5c50030a3:   mov    %edx,%ecx
  0x00007fa5c50030a5:   and    $0xff,%edx
  0x00007fa5c50030ab:   add    %edx,%edx
  0x00007fa5c50030ad:   vmovdqu (%r11,%rdx,8),%xmm5
  0x00007fa5c50030b3:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007fa5c50030b7:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007fa5c50030bb:   vmovdqu 0x9a6683d(%rip),%xmm7        # 0x00007fa5cea69900
  0x00007fa5c50030c3:   vmovdqu 0x9a66845(%rip),%xmm3        # 0x00007fa5cea69910
  0x00007fa5c50030cb:   shl    $0xc,%ecx
  0x00007fa5c50030ce:   xor    %r8d,%ecx
  0x00007fa5c50030d1:   and    $0xfff00000,%ecx
  0x00007fa5c50030d7:   vmovq  %rcx,%xmm6
  0x00007fa5c50030dc:   vaddsd %xmm4,%xmm2,%xmm2
  0x00007fa5c50030e0:   movabs $0x3fe62e42fefa39ef,%r9
  0x00007fa5c50030ea:   vmovq  %r9,%xmm1
  0x00007fa5c50030ef:   vpshufd $0x44,%xmm2,%xmm0
  0x00007fa5c50030f4:   vpshufd $0x44,%xmm2,%xmm4
  0x00007fa5c50030f9:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fa5c50030fd:   vpshufd $0x11,%xmm6,%xmm6
  0x00007fa5c5003102:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003106:   vmulpd %xmm4,%xmm7,%xmm7
  0x00007fa5c500310a:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007fa5c500310e:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007fa5c5003112:   vpshufd $0xee,%xmm5,%xmm6
  0x00007fa5c5003117:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fa5c500311b:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007fa5c500311f:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fa5c5003123:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007fa5c5003127:   vpshufd $0xee,%xmm0,%xmm3
  0x00007fa5c500312c:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007fa5c5003130:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007fa5c5003134:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fa5c5003138:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fa5c500313c:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fa5c5003140:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c5003145:   add    $0x10,%eax
  0x00007fa5c5003148:   mov    $0x7ff0,%edx
  0x00007fa5c500314d:   and    %eax,%edx
  0x00007fa5c500314f:   cmp    $0x7ff0,%edx
  0x00007fa5c5003155:   je     0x00007fa5c500347e
  0x00007fa5c500315b:   test   $0x8000,%eax
  0x00007fa5c5003160:   jne    0x00007fa5c5003717
  0x00007fa5c5003166:   vmovq  0x8(%rsp),%xmm0
  0x00007fa5c500316c:   vmovq  0x8(%rsp),%xmm3
  0x00007fa5c5003172:   vmovd  %xmm3,%edx
  0x00007fa5c5003176:   vpsrlq $0x20,%xmm3,%xmm3
  0x00007fa5c500317b:   vmovd  %xmm3,%ecx
  0x00007fa5c500317f:   or     %ecx,%edx
  0x00007fa5c5003181:   cmp    $0x0,%edx
  0x00007fa5c5003184:   je     0x00007fa5c5003955
  0x00007fa5c500318a:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007fa5c500318e:   mov    $0x47f0,%eax
  0x00007fa5c5003193:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007fa5c5003198:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007fa5c500319c:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fa5c50031a0:   mov    $0x3ff0,%eax
  0x00007fa5c50031a5:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007fa5c50031aa:   vmovdqu %xmm0,%xmm3
  0x00007fa5c50031ae:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c50031b3:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fa5c50031b7:   mov    $0x47f0,%ecx
  0x00007fa5c50031bc:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fa5c50031c1:   vmovq  0x9a67777(%rip),%xmm2        # 0x00007fa5cea6a940
  0x00007fa5c50031c9:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fa5c50031ce:   vrcpps %xmm0,%xmm0
  0x00007fa5c50031d2:   (bad)  
  0x00007fa5c50031d6:   repz or $0xc5,%al
  0x00007fa5c50031d9:   cli    
  0x00007fa5c50031da:   outsl  %ds:(%rsi),(%dx)
  0x00007fa5c50031db:   xor    $0x9a67770,%eax
  0x00007fa5c50031e0:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007fa5c50031e5:   vmulss %xmm7,%xmm0,%xmm0
  0x00007fa5c50031e9:   mov    $0xfffffc00,%edx
  0x00007fa5c50031ee:   vmovd  %edx,%xmm5
  0x00007fa5c50031f2:   vpor   %xmm1,%xmm3,%xmm3
  0x00007fa5c50031f6:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007fa5c50031fa:   (bad)  
  0x00007fa5c50031fe:   cmc    
  0x00007fa5c50031ff:   and    %al,%ch
  0x00007fa5c5003201:   stc    
  0x00007fa5c5003202:   jle    0x00007fa5c50031c6
  0x00007fa5c5003204:   (bad)  
  0x00007fa5c5003208:   lock sbb $0xebdbd1c5,%eax
  0x00007fa5c500320e:   mov    $0x0,%r8d
  0x00007fa5c5003214:   vpand  %xmm6,%xmm0,%xmm0
  0x00007fa5c5003218:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007fa5c500321c:   and    $0x7ff0,%eax
  0x00007fa5c5003221:   sub    $0x47f0,%eax
  0x00007fa5c5003226:   sar    $0x4,%eax
  0x00007fa5c5003229:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007fa5c500322d:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5003231:   jmpq   0x00007fa5c5002f8d
  0x00007fa5c5003236:   vmovq  0x8(%rsp),%xmm0
  0x00007fa5c500323c:   vmovq  0x8(%rsp),%xmm3
  0x00007fa5c5003242:   vmovd  %xmm3,%edx
  0x00007fa5c5003246:   vpsrlq $0x20,%xmm3,%xmm3
  0x00007fa5c500324b:   vmovd  %xmm3,%ecx
  0x00007fa5c500324f:   or     %ecx,%edx
  0x00007fa5c5003251:   cmp    $0x0,%edx
  0x00007fa5c5003254:   je     0x00007fa5c5003955
  0x00007fa5c500325a:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007fa5c500325e:   mov    $0x47f0,%eax
  0x00007fa5c5003263:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007fa5c5003268:   vmulsd %xmm3,%xmm0,%xmm0
  0x00007fa5c500326c:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fa5c5003270:   mov    $0x3ff0,%eax
  0x00007fa5c5003275:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007fa5c500327a:   vmovdqu %xmm0,%xmm3
  0x00007fa5c500327e:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5003283:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fa5c5003287:   mov    $0x47f0,%ecx
  0x00007fa5c500328c:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fa5c5003291:   vmovq  0x9a676a7(%rip),%xmm2        # 0x00007fa5cea6a940
  0x00007fa5c5003299:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fa5c500329e:   vrcpps %xmm0,%xmm0
  0x00007fa5c50032a2:   (bad)  
  0x00007fa5c50032a6:   repz or $0xc5,%al
  0x00007fa5c50032a9:   cli    
  0x00007fa5c50032aa:   outsl  %ds:(%rsi),(%dx)
  0x00007fa5c50032ab:   xor    $0x9a676a0,%eax
  0x00007fa5c50032b0:   vpsrlq $0xc,%xmm3,%xmm3
  0x00007fa5c50032b5:   vmulss %xmm7,%xmm0,%xmm0
  0x00007fa5c50032b9:   mov    $0xfffffc00,%edx
  0x00007fa5c50032be:   vmovd  %edx,%xmm5
  0x00007fa5c50032c2:   vpor   %xmm1,%xmm3,%xmm3
  0x00007fa5c50032c6:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007fa5c50032ca:   (bad)  
  0x00007fa5c50032ce:   cmc    
  0x00007fa5c50032cf:   and    %al,%ch
  0x00007fa5c50032d1:   stc    
  0x00007fa5c50032d2:   jle    0x00007fa5c5003296
  0x00007fa5c50032d4:   (bad)  
  0x00007fa5c50032d8:   lock sbb $0xebdbd1c5,%eax
  0x00007fa5c50032de:   mov    $0x80000000,%r8d
  0x00007fa5c50032e4:   vpand  %xmm6,%xmm0,%xmm0
  0x00007fa5c50032e8:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007fa5c50032ec:   and    $0x7ff0,%eax
  0x00007fa5c50032f1:   sub    $0x47f0,%eax
  0x00007fa5c50032f6:   sar    $0x4,%eax
  0x00007fa5c50032f9:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007fa5c50032fd:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5003301:   jmpq   0x00007fa5c5002f8d
  0x00007fa5c5003306:   cmp    $0x0,%eax
  0x00007fa5c5003309:   jl     0x00007fa5c50038c7
  0x00007fa5c500330f:   cmp    $0x2f0,%eax
  0x00007fa5c5003314:   jae    0x00007fa5c5003a57
  0x00007fa5c500331a:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fa5c500331e:   vmovq  0x9a665aa(%rip),%xmm2        # 0x00007fa5cea698d0
  0x00007fa5c5003326:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007fa5c500332a:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007fa5c500332e:   mov    $0x42b8,%eax
  0x00007fa5c5003333:   vpinsrw $0x3,%eax,%xmm6,%xmm6
  0x00007fa5c5003338:   vpshufd $0xee,%xmm3,%xmm0
  0x00007fa5c500333d:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fa5c5003341:   vmovdqu %xmm5,%xmm3
  0x00007fa5c5003345:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fa5c5003349:   vmovdqu %xmm2,%xmm4
  0x00007fa5c500334d:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007fa5c5003351:   vmovdqu %xmm5,%xmm7
  0x00007fa5c5003355:   vpand  %xmm2,%xmm5,%xmm5
  0x00007fa5c5003359:   vmovdqu %xmm1,%xmm2
  0x00007fa5c500335d:   vpand  %xmm1,%xmm4,%xmm4
  0x00007fa5c5003361:   vsubsd %xmm5,%xmm7,%xmm7
  0x00007fa5c5003365:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fa5c5003369:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007fa5c500336d:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007fa5c5003371:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fa5c5003375:   vmulsd %xmm0,%xmm2,%xmm2
  0x00007fa5c5003379:   vmovdqu %xmm6,%xmm7
  0x00007fa5c500337d:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007fa5c5003381:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007fa5c5003385:   vmovd  %xmm6,%eax
  0x00007fa5c5003389:   vsubsd %xmm7,%xmm6,%xmm6
  0x00007fa5c500338d:   movabs $0x7fa5cea69930,%r11
  0x00007fa5c5003397:   vaddsd %xmm1,%xmm2,%xmm2
  0x00007fa5c500339b:   vmovdqu 0x9a6655d(%rip),%xmm7        # 0x00007fa5cea69900
  0x00007fa5c50033a3:   vmovdqu 0x9a66565(%rip),%xmm3        # 0x00007fa5cea69910
  0x00007fa5c50033ab:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007fa5c50033af:   vpextrw $0x3,%xmm6,%edx
  0x00007fa5c50033b4:   mov    %eax,%ecx
  0x00007fa5c50033b6:   and    $0xff,%eax
  0x00007fa5c50033bb:   add    %eax,%eax
  0x00007fa5c50033bd:   vmovdqu (%r11,%rax,8),%xmm5
  0x00007fa5c50033c3:   vaddsd %xmm4,%xmm2,%xmm2
  0x00007fa5c50033c7:   sar    $0x8,%ecx
  0x00007fa5c50033ca:   mov    %ecx,%eax
  0x00007fa5c50033cc:   sar    %ecx
  0x00007fa5c50033ce:   sub    %ecx,%eax
  0x00007fa5c50033d0:   shl    $0x14,%ecx
  0x00007fa5c50033d3:   xor    %r8d,%ecx
  0x00007fa5c50033d6:   vmovd  %ecx,%xmm6
  0x00007fa5c50033da:   vmovq  0x9a6653e(%rip),%xmm1        # 0x00007fa5cea69920
  0x00007fa5c50033e2:   and    $0x7fff,%edx
  0x00007fa5c50033e8:   cmp    $0x4091,%edx
  0x00007fa5c50033ee:   ja     0x00007fa5c5003a57
  0x00007fa5c50033f4:   vpshufd $0x44,%xmm2,%xmm0
  0x00007fa5c50033f9:   vpshufd $0x44,%xmm2,%xmm4
  0x00007fa5c50033fe:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003402:   vmulpd %xmm4,%xmm7,%xmm7
  0x00007fa5c5003406:   vpshufd $0x11,%xmm6,%xmm6
  0x00007fa5c500340b:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fa5c500340f:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003413:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007fa5c5003417:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007fa5c500341b:   vmulsd %xmm5,%xmm1,%xmm1
  0x00007fa5c500341f:   vpshufd $0xee,%xmm5,%xmm6
  0x00007fa5c5003424:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007fa5c5003428:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fa5c500342c:   vpshufd $0xee,%xmm0,%xmm3
  0x00007fa5c5003431:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007fa5c5003435:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007fa5c5003439:   shl    $0x4,%eax
  0x00007fa5c500343c:   vxorpd %xmm4,%xmm4,%xmm4
  0x00007fa5c5003440:   add    $0x3ff0,%eax
  0x00007fa5c5003445:   vpinsrw $0x3,%eax,%xmm4,%xmm4
  0x00007fa5c500344a:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fa5c500344e:   vaddsd %xmm3,%xmm0,%xmm0
  0x00007fa5c5003452:   vmovdqu %xmm0,%xmm1
  0x00007fa5c5003456:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fa5c500345a:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007fa5c500345e:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5003463:   and    $0x7ff0,%eax
  0x00007fa5c5003468:   je     0x00007fa5c5003af8
  0x00007fa5c500346e:   cmp    $0x7ff0,%eax
  0x00007fa5c5003473:   je     0x00007fa5c5003ab2
  0x00007fa5c5003479:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c500347e:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c5003484:   vmovq  0x8(%rsp),%xmm0
  0x00007fa5c500348a:   vmovdqu %xmm0,%xmm2
  0x00007fa5c500348e:   vmovd  %xmm2,%eax
  0x00007fa5c5003492:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007fa5c5003497:   vmovd  %xmm2,%edx
  0x00007fa5c500349b:   or     %edx,%eax
  0x00007fa5c500349d:   je     0x00007fa5c50034ee
  0x00007fa5c50034a3:   vmovd  %xmm1,%eax
  0x00007fa5c50034a7:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fa5c50034ac:   vmovd  %xmm1,%edx
  0x00007fa5c50034b0:   mov    %edx,%ecx
  0x00007fa5c50034b2:   add    %edx,%edx
  0x00007fa5c50034b4:   or     %edx,%eax
  0x00007fa5c50034b6:   je     0x00007fa5c50034c5
  0x00007fa5c50034bc:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007fa5c50034c0:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c50034c5:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c50034c9:   mov    $0x3ff0,%eax
  0x00007fa5c50034ce:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c50034d3:   movl   $0x1d,(%rsp)
  0x00007fa5c50034da:   jmpq   0x00007fa5c5003f31
  0x00007fa5c50034df:   vmovq  0x10(%rsp),%xmm0
  0x00007fa5c50034e5:   vaddpd %xmm0,%xmm0,%xmm0
  0x00007fa5c50034e9:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c50034ee:   vmovd  %xmm1,%eax
  0x00007fa5c50034f2:   vmovdqu %xmm1,%xmm2
  0x00007fa5c50034f6:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fa5c50034fb:   vmovd  %xmm1,%edx
  0x00007fa5c50034ff:   mov    %edx,%ecx
  0x00007fa5c5003501:   add    %edx,%edx
  0x00007fa5c5003503:   or     %edx,%eax
  0x00007fa5c5003505:   je     0x00007fa5c50038ab
  0x00007fa5c500350b:   vpextrw $0x3,%xmm2,%eax
  0x00007fa5c5003510:   and    $0x7ff0,%eax
  0x00007fa5c5003515:   cmp    $0x7ff0,%eax
  0x00007fa5c500351a:   jne    0x00007fa5c5003531
  0x00007fa5c5003520:   vmovd  %xmm2,%eax
  0x00007fa5c5003524:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007fa5c5003529:   vmovd  %xmm2,%edx
  0x00007fa5c500352d:   or     %edx,%eax
  0x00007fa5c500352f:   jne    0x00007fa5c50034df
  0x00007fa5c5003531:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5003536:   test   $0x8000,%eax
  0x00007fa5c500353b:   jne    0x00007fa5c5003571
  0x00007fa5c5003541:   test   $0x80000000,%ecx
  0x00007fa5c5003547:   jne    0x00007fa5c50038be
  0x00007fa5c500354d:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c5003552:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c5003558:   vmovd  %xmm1,%eax
  0x00007fa5c500355c:   test   $0x1,%al
  0x00007fa5c500355e:   jne    0x00007fa5c500360f
  0x00007fa5c5003564:   test   $0x2,%al
  0x00007fa5c5003566:   jne    0x00007fa5c50035e1
  0x00007fa5c500356c:   jmpq   0x00007fa5c500360f
  0x00007fa5c5003571:   shr    $0x14,%ecx
  0x00007fa5c5003574:   and    $0x7ff,%ecx
  0x00007fa5c500357a:   cmp    $0x433,%ecx
  0x00007fa5c5003580:   ja     0x00007fa5c500360f
  0x00007fa5c5003586:   je     0x00007fa5c5003638
  0x00007fa5c500358c:   cmp    $0x432,%ecx
  0x00007fa5c5003592:   ja     0x00007fa5c5003552
  0x00007fa5c5003594:   cmp    $0x3ff,%ecx
  0x00007fa5c500359a:   jb     0x00007fa5c500360f
  0x00007fa5c50035a0:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c50035a6:   mov    $0x4338,%eax
  0x00007fa5c50035ab:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007fa5c50035af:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007fa5c50035b4:   vmovdqu %xmm3,%xmm4
  0x00007fa5c50035b8:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007fa5c50035bc:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fa5c50035c0:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fa5c50035c4:   vpextrw $0x3,%xmm1,%eax
  0x00007fa5c50035c9:   and    $0x7ff0,%eax
  0x00007fa5c50035ce:   jne    0x00007fa5c500360f
  0x00007fa5c50035d4:   vmovd  %xmm3,%eax
  0x00007fa5c50035d8:   and    $0x1,%eax
  0x00007fa5c50035db:   je     0x00007fa5c500360f
  0x00007fa5c50035e1:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c50035e7:   vpextrw $0x3,%xmm1,%eax
  0x00007fa5c50035ec:   and    $0x8000,%eax
  0x00007fa5c50035f1:   jne    0x00007fa5c50035fc
  0x00007fa5c50035f7:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c50035fc:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003600:   mov    $0x8000,%eax
  0x00007fa5c5003605:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c500360a:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c500360f:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c5003615:   vpextrw $0x3,%xmm1,%eax
  0x00007fa5c500361a:   and    $0x8000,%eax
  0x00007fa5c500361f:   jne    0x00007fa5c50038be
  0x00007fa5c5003625:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003629:   mov    $0x7ff0,%eax
  0x00007fa5c500362e:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c5003633:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c5003638:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c500363e:   vmovd  %xmm1,%eax
  0x00007fa5c5003642:   and    $0x1,%eax
  0x00007fa5c5003645:   je     0x00007fa5c500360f
  0x00007fa5c5003647:   jmp    0x00007fa5c50035e1
  0x00007fa5c5003649:   vmovd  %xmm1,%eax
  0x00007fa5c500364d:   vpsrlq $0x14,%xmm1,%xmm1
  0x00007fa5c5003652:   vmovd  %xmm1,%edx
  0x00007fa5c5003656:   or     %edx,%eax
  0x00007fa5c5003658:   je     0x00007fa5c500366d
  0x00007fa5c500365e:   vmovq  0x10(%rsp),%xmm0
  0x00007fa5c5003664:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003668:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c500366d:   vmovq  0x8(%rsp),%xmm0
  0x00007fa5c5003673:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5003678:   cmp    $0xbff0,%eax
  0x00007fa5c500367d:   jne    0x00007fa5c50036ab
  0x00007fa5c5003683:   vmovd  %xmm0,%ecx
  0x00007fa5c5003687:   vpsrlq $0x14,%xmm0,%xmm0
  0x00007fa5c500368c:   vmovd  %xmm0,%edx
  0x00007fa5c5003690:   or     %edx,%ecx
  0x00007fa5c5003692:   jne    0x00007fa5c50036ab
  0x00007fa5c5003698:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c500369c:   mov    $0x7ff8,%eax
  0x00007fa5c50036a1:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c50036a6:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c50036ab:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c50036b1:   and    $0x7ff0,%eax
  0x00007fa5c50036b6:   sub    $0x3ff0,%eax
  0x00007fa5c50036bb:   vpextrw $0x3,%xmm1,%edx
  0x00007fa5c50036c0:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c50036c4:   xor    %edx,%eax
  0x00007fa5c50036c6:   and    $0x8000,%eax
  0x00007fa5c50036cb:   je     0x00007fa5c50036d6
  0x00007fa5c50036d1:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c50036d6:   mov    $0x7ff0,%ecx
  0x00007fa5c50036db:   vpinsrw $0x3,%ecx,%xmm0,%xmm0
  0x00007fa5c50036e0:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c50036e5:   vmovd  %xmm1,%eax
  0x00007fa5c50036e9:   cmp    $0x4320,%edx
  0x00007fa5c50036ef:   ja     0x00007fa5c500370a
  0x00007fa5c50036f5:   test   $0x1,%al
  0x00007fa5c50036f7:   jne    0x00007fa5c5003829
  0x00007fa5c50036fd:   test   $0x2,%al
  0x00007fa5c50036ff:   je     0x00007fa5c500384b
  0x00007fa5c5003705:   jmpq   0x00007fa5c50037c9
  0x00007fa5c500370a:   test   $0x1,%al
  0x00007fa5c500370c:   je     0x00007fa5c500384b
  0x00007fa5c5003712:   jmpq   0x00007fa5c50037c9
  0x00007fa5c5003717:   vmovq  0x8(%rsp),%xmm2
  0x00007fa5c500371d:   vmovd  %xmm2,%eax
  0x00007fa5c5003721:   vpsrlq $0x1f,%xmm2,%xmm2
  0x00007fa5c5003726:   vmovd  %xmm2,%ecx
  0x00007fa5c500372a:   or     %ecx,%eax
  0x00007fa5c500372c:   je     0x00007fa5c5003955
  0x00007fa5c5003732:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c5003738:   vpextrw $0x3,%xmm1,%edx
  0x00007fa5c500373d:   vmovd  %xmm1,%eax
  0x00007fa5c5003741:   vmovdqu %xmm1,%xmm2
  0x00007fa5c5003745:   vpsrlq $0x20,%xmm2,%xmm2
  0x00007fa5c500374a:   vmovd  %xmm2,%ecx
  0x00007fa5c500374e:   add    %ecx,%ecx
  0x00007fa5c5003750:   or     %eax,%ecx
  0x00007fa5c5003752:   je     0x00007fa5c5003928
  0x00007fa5c5003758:   and    $0x7ff0,%edx
  0x00007fa5c500375e:   cmp    $0x7ff0,%edx
  0x00007fa5c5003764:   je     0x00007fa5c5003649
  0x00007fa5c500376a:   cmp    $0x4330,%edx
  0x00007fa5c5003770:   ja     0x00007fa5c500384b
  0x00007fa5c5003776:   cmp    $0x4320,%edx
  0x00007fa5c500377c:   jae    0x00007fa5c50036e5
  0x00007fa5c5003782:   cmp    $0x3ff0,%edx
  0x00007fa5c5003788:   jb     0x00007fa5c5003829
  0x00007fa5c500378e:   mov    $0x4338,%eax
  0x00007fa5c5003793:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fa5c5003797:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007fa5c500379c:   vmovdqu %xmm2,%xmm4
  0x00007fa5c50037a0:   vaddsd %xmm1,%xmm2,%xmm2
  0x00007fa5c50037a4:   vsubsd %xmm2,%xmm4,%xmm4
  0x00007fa5c50037a8:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fa5c50037ac:   vpextrw $0x3,%xmm1,%eax
  0x00007fa5c50037b1:   and    $0x7fff,%eax
  0x00007fa5c50037b6:   jne    0x00007fa5c5003829
  0x00007fa5c50037bc:   vmovd  %xmm2,%eax
  0x00007fa5c50037c0:   and    $0x1,%eax
  0x00007fa5c50037c3:   je     0x00007fa5c500384b
  0x00007fa5c50037c9:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c50037cd:   mov    $0x77f0,%edx
  0x00007fa5c50037d2:   vpinsrw $0x3,%edx,%xmm1,%xmm1
  0x00007fa5c50037d7:   vmovq  0x9a67161(%rip),%xmm2        # 0x00007fa5cea6a940
  0x00007fa5c50037df:   vmovq  0x8(%rsp),%xmm4
  0x00007fa5c50037e5:   vpextrw $0x3,%xmm4,%eax
  0x00007fa5c50037ea:   mov    $0x2000,%edx
  0x00007fa5c50037ef:   vmovd  %edx,%xmm4
  0x00007fa5c50037f3:   and    $0x7fff,%eax
  0x00007fa5c50037f8:   sub    $0x10,%eax
  0x00007fa5c50037fb:   jl     0x00007fa5c5003236
  0x00007fa5c5003801:   mov    %eax,%edx
  0x00007fa5c5003803:   and    $0x7ff0,%edx
  0x00007fa5c5003809:   sub    $0x3ff0,%edx
  0x00007fa5c500380f:   mov    %edx,%ecx
  0x00007fa5c5003811:   sar    $0x1f,%edx
  0x00007fa5c5003814:   add    %edx,%ecx
  0x00007fa5c5003816:   xor    %edx,%ecx
  0x00007fa5c5003818:   add    $0x10,%ecx
  0x00007fa5c500381b:   bsr    %ecx,%ecx
  0x00007fa5c500381e:   mov    $0x80000000,%r8d
  0x00007fa5c5003824:   jmpq   0x00007fa5c5002f3c
  0x00007fa5c5003829:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c500382d:   mov    $0x7ff0,%eax
  0x00007fa5c5003832:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fa5c5003837:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c500383b:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007fa5c500383f:   movl   $0x1c,(%rsp)
  0x00007fa5c5003846:   jmpq   0x00007fa5c5003f31
  0x00007fa5c500384b:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c500384f:   mov    $0x77f0,%edx
  0x00007fa5c5003854:   vpinsrw $0x3,%edx,%xmm1,%xmm1
  0x00007fa5c5003859:   vmovq  0x9a670df(%rip),%xmm2        # 0x00007fa5cea6a940
  0x00007fa5c5003861:   vmovq  0x8(%rsp),%xmm4
  0x00007fa5c5003867:   vpextrw $0x3,%xmm4,%eax
  0x00007fa5c500386c:   mov    $0x2000,%edx
  0x00007fa5c5003871:   vmovd  %edx,%xmm4
  0x00007fa5c5003875:   and    $0x7fff,%eax
  0x00007fa5c500387a:   sub    $0x10,%eax
  0x00007fa5c500387d:   jl     0x00007fa5c5003166
  0x00007fa5c5003883:   mov    %eax,%edx
  0x00007fa5c5003885:   and    $0x7ff0,%edx
  0x00007fa5c500388b:   sub    $0x3ff0,%edx
  0x00007fa5c5003891:   mov    %edx,%ecx
  0x00007fa5c5003893:   sar    $0x1f,%edx
  0x00007fa5c5003896:   add    %edx,%ecx
  0x00007fa5c5003898:   xor    %edx,%ecx
  0x00007fa5c500389a:   add    $0x10,%ecx
  0x00007fa5c500389d:   bsr    %ecx,%ecx
  0x00007fa5c50038a0:   mov    $0x0,%r8d
  0x00007fa5c50038a6:   jmpq   0x00007fa5c5002f3c
  0x00007fa5c50038ab:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c50038af:   mov    $0x3ff0,%eax
  0x00007fa5c50038b4:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c50038b9:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c50038be:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c50038c2:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c50038c7:   add    $0x180,%eax
  0x00007fa5c50038cc:   cmp    $0x0,%eax
  0x00007fa5c50038cf:   jl     0x00007fa5c5003928
  0x00007fa5c50038d5:   vmulsd %xmm1,%xmm5,%xmm5
  0x00007fa5c50038d9:   vaddsd %xmm7,%xmm0,%xmm0
  0x00007fa5c50038dd:   shr    $0x1f,%r8d
  0x00007fa5c50038e1:   vaddpd %xmm0,%xmm3,%xmm3
  0x00007fa5c50038e5:   vpshufd $0xee,%xmm3,%xmm0
  0x00007fa5c50038ea:   vaddsd %xmm0,%xmm3,%xmm3
  0x00007fa5c50038ee:   movabs $0x7fa5cea67850,%r11
  0x00007fa5c50038f8:   vmovq  (%r11,%r8,8),%xmm4
  0x00007fa5c50038fe:   vmulsd %xmm3,%xmm1,%xmm1
  0x00007fa5c5003902:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003906:   mov    $0x3ff0,%eax
  0x00007fa5c500390b:   shl    $0xf,%r8d
  0x00007fa5c500390f:   or     %r8d,%eax
  0x00007fa5c5003912:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c5003917:   vaddsd %xmm1,%xmm5,%xmm5
  0x00007fa5c500391b:   vmulsd %xmm4,%xmm5,%xmm5
  0x00007fa5c500391f:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fa5c5003923:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c5003928:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c500392c:   mov    $0x3ff0,%eax
  0x00007fa5c5003931:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c5003936:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c500393b:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c500393f:   mov    $0x3ff0,%eax
  0x00007fa5c5003944:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c5003949:   movl   $0x1a,(%rsp)
  0x00007fa5c5003950:   jmpq   0x00007fa5c5003f31
  0x00007fa5c5003955:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c500395b:   vmovdqu %xmm1,%xmm2
  0x00007fa5c500395f:   vpextrw $0x3,%xmm1,%eax
  0x00007fa5c5003964:   and    $0x7ff0,%eax
  0x00007fa5c5003969:   cmp    $0x7ff0,%eax
  0x00007fa5c500396e:   jne    0x00007fa5c5003989
  0x00007fa5c5003974:   vmovd  %xmm2,%eax
  0x00007fa5c5003978:   vpsrlq $0x14,%xmm2,%xmm2
  0x00007fa5c500397d:   vmovd  %xmm2,%edx
  0x00007fa5c5003981:   or     %edx,%eax
  0x00007fa5c5003983:   jne    0x00007fa5c50034df
  0x00007fa5c5003989:   vmovd  %xmm1,%eax
  0x00007fa5c500398d:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fa5c5003992:   vmovd  %xmm1,%edx
  0x00007fa5c5003996:   mov    %edx,%ecx
  0x00007fa5c5003998:   add    %edx,%edx
  0x00007fa5c500399a:   or     %edx,%eax
  0x00007fa5c500399c:   je     0x00007fa5c500393b
  0x00007fa5c500399e:   shr    $0x15,%edx
  0x00007fa5c50039a1:   cmp    $0x433,%edx
  0x00007fa5c50039a7:   ja     0x00007fa5c5003a25
  0x00007fa5c50039ad:   je     0x00007fa5c5003a17
  0x00007fa5c50039b3:   cmp    $0x3ff,%edx
  0x00007fa5c50039b9:   jb     0x00007fa5c5003a25
  0x00007fa5c50039bf:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c50039c5:   mov    $0x4338,%eax
  0x00007fa5c50039ca:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007fa5c50039ce:   vpinsrw $0x3,%eax,%xmm3,%xmm3
  0x00007fa5c50039d3:   vmovdqu %xmm3,%xmm4
  0x00007fa5c50039d7:   vaddsd %xmm1,%xmm3,%xmm3
  0x00007fa5c50039db:   vsubsd %xmm3,%xmm4,%xmm4
  0x00007fa5c50039df:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fa5c50039e3:   vpextrw $0x3,%xmm1,%eax
  0x00007fa5c50039e8:   and    $0x7ff0,%eax
  0x00007fa5c50039ed:   jne    0x00007fa5c5003a25
  0x00007fa5c50039f3:   vmovd  %xmm3,%eax
  0x00007fa5c50039f7:   and    $0x1,%eax
  0x00007fa5c50039fa:   je     0x00007fa5c5003a25
  0x00007fa5c5003a00:   vmovq  0x8(%rsp),%xmm0
  0x00007fa5c5003a06:   test   $0x80000000,%ecx
  0x00007fa5c5003a0c:   jne    0x00007fa5c5003a35
  0x00007fa5c5003a12:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c5003a17:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c5003a1d:   vmovd  %xmm1,%eax
  0x00007fa5c5003a21:   test   $0x1,%al
  0x00007fa5c5003a23:   jne    0x00007fa5c5003a00
  0x00007fa5c5003a25:   test   $0x80000000,%ecx
  0x00007fa5c5003a2b:   je     0x00007fa5c50038be
  0x00007fa5c5003a31:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003a35:   mov    $0x3ff0,%eax
  0x00007fa5c5003a3a:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c5003a3e:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fa5c5003a43:   vdivsd %xmm0,%xmm1,%xmm1
  0x00007fa5c5003a47:   vmovdqu %xmm1,%xmm0
  0x00007fa5c5003a4b:   movl   $0x1b,(%rsp)
  0x00007fa5c5003a52:   jmpq   0x00007fa5c5003f31
  0x00007fa5c5003a57:   vmovq  0x8(%rsp),%xmm2
  0x00007fa5c5003a5d:   vmovq  0x10(%rsp),%xmm6
  0x00007fa5c5003a63:   vpextrw $0x3,%xmm2,%eax
  0x00007fa5c5003a68:   vpextrw $0x3,%xmm6,%edx
  0x00007fa5c5003a6d:   mov    $0x7ff0,%ecx
  0x00007fa5c5003a72:   and    %edx,%ecx
  0x00007fa5c5003a74:   cmp    $0x7ff0,%ecx
  0x00007fa5c5003a7a:   je     0x00007fa5c5003e77
  0x00007fa5c5003a80:   and    $0x7ff0,%eax
  0x00007fa5c5003a85:   sub    $0x3ff0,%eax
  0x00007fa5c5003a8a:   xor    %eax,%edx
  0x00007fa5c5003a8c:   test   $0x8000,%edx
  0x00007fa5c5003a92:   jne    0x00007fa5c5003abe
  0x00007fa5c5003a98:   mov    $0x7fe0,%eax
  0x00007fa5c5003a9d:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c5003aa2:   shr    $0x10,%r8d
  0x00007fa5c5003aa6:   or     %r8d,%eax
  0x00007fa5c5003aa9:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fa5c5003aae:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007fa5c5003ab2:   movl   $0x18,(%rsp)
  0x00007fa5c5003ab9:   jmpq   0x00007fa5c5003f31
  0x00007fa5c5003abe:   mov    $0x10,%eax
  0x00007fa5c5003ac3:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c5003ac8:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003acc:   test   $0x80000000,%r8d
  0x00007fa5c5003ad3:   je     0x00007fa5c5003aec
  0x00007fa5c5003ad9:   movabs $0x8000000000000000,%r9
  0x00007fa5c5003ae3:   vmovq  %r9,%xmm2
  0x00007fa5c5003ae8:   vxorpd %xmm2,%xmm0,%xmm0
  0x00007fa5c5003aec:   movl   $0x19,(%rsp)
  0x00007fa5c5003af3:   jmpq   0x00007fa5c5003f31
  0x00007fa5c5003af8:   vpextrw $0x3,%xmm5,%ecx
  0x00007fa5c5003afd:   vpextrw $0x3,%xmm4,%edx
  0x00007fa5c5003b02:   mov    $0xffffffff,%eax
  0x00007fa5c5003b07:   and    $0x7ff0,%ecx
  0x00007fa5c5003b0d:   sub    $0x3ff0,%ecx
  0x00007fa5c5003b13:   and    $0x7ff0,%edx
  0x00007fa5c5003b19:   add    %ecx,%edx
  0x00007fa5c5003b1b:   mov    $0xffffffe1,%ecx
  0x00007fa5c5003b20:   sar    $0x4,%edx
  0x00007fa5c5003b23:   sub    %edx,%ecx
  0x00007fa5c5003b25:   jle    0x00007fa5c5003b36
  0x00007fa5c5003b2b:   cmp    $0x14,%ecx
  0x00007fa5c5003b2e:   ja     0x00007fa5c5003b58
  0x00007fa5c5003b34:   shl    %cl,%eax
  0x00007fa5c5003b36:   vmovd  %eax,%xmm0
  0x00007fa5c5003b3a:   (bad)  
  0x00007fa5c5003b3e:   lock and %al,%ch
  0x00007fa5c5003b41:   stc    
  0x00007fa5c5003b42:   fcmovnb %st(5),%st
  0x00007fa5c5003b44:   vsubsd %xmm0,%xmm5,%xmm5
  0x00007fa5c5003b48:   vaddsd %xmm1,%xmm5,%xmm5
  0x00007fa5c5003b4c:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007fa5c5003b50:   vmulsd %xmm4,%xmm5,%xmm5
  0x00007fa5c5003b54:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fa5c5003b58:   jmp    0x00007fa5c5003aec
  0x00007fa5c5003b5a:   mov    0x16(%rsp),%cx
  0x00007fa5c5003b5f:   mov    $0x80000000,%edx
  0x00007fa5c5003b64:   vmovd  %edx,%xmm1
  0x00007fa5c5003b68:   vxorpd %xmm7,%xmm7,%xmm7
  0x00007fa5c5003b6c:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007fa5c5003b70:   vmovd  %xmm0,%edx
  0x00007fa5c5003b74:   (bad)  
  0x00007fa5c5003b78:   lock sbb $0xcbd4f1c5,%eax
  0x00007fa5c5003b7e:   vpand  %xmm1,%xmm5,%xmm5
  0x00007fa5c5003b82:   and    $0x7ff0,%ecx
  0x00007fa5c5003b88:   cmp    $0x40b0,%ecx
  0x00007fa5c5003b8e:   jl     0x00007fa5c5002f77
  0x00007fa5c5003b94:   vpand  %xmm6,%xmm0,%xmm0
  0x00007fa5c5003b98:   vsubsd %xmm5,%xmm3,%xmm3
  0x00007fa5c5003b9c:   add    $0x3fdf,%eax
  0x00007fa5c5003ba1:   shr    $0x4,%eax
  0x00007fa5c5003ba4:   sub    $0x3fe,%eax
  0x00007fa5c5003ba9:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007fa5c5003bad:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5003bb1:   movabs $0x7fa5cea67860,%r11
  0x00007fa5c5003bbb:   vmovq  0x9a65d2d(%rip),%xmm4        # 0x00007fa5cea698f0
  0x00007fa5c5003bc3:   vmulsd %xmm0,%xmm3,%xmm3
  0x00007fa5c5003bc7:   vmovq  0x9a65d21(%rip),%xmm6        # 0x00007fa5cea698f0
  0x00007fa5c5003bcf:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007fa5c5003bd3:   vmovq  0x9a65d1d(%rip),%xmm1        # 0x00007fa5cea698f8
  0x00007fa5c5003bdb:   vpshufd $0x44,%xmm3,%xmm2
  0x00007fa5c5003be0:   vunpcklpd %xmm3,%xmm5,%xmm5
  0x00007fa5c5003be4:   vaddsd %xmm5,%xmm3,%xmm3
  0x00007fa5c5003be8:   vmovq  0x9a65d08(%rip),%xmm0        # 0x00007fa5cea698f8
  0x00007fa5c5003bf0:   and    $0xffc000,%edx
  0x00007fa5c5003bf6:   shr    $0xa,%edx
  0x00007fa5c5003bf9:   vaddpd -0xe40(%r11,%rdx,1),%xmm7,%xmm7
  0x00007fa5c5003c03:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007fa5c5003c07:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007fa5c5003c0b:   vmulsd %xmm2,%xmm6,%xmm6
  0x00007fa5c5003c0f:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fa5c5003c13:   vmovdqu %xmm5,%xmm2
  0x00007fa5c5003c17:   vmulsd %xmm5,%xmm4,%xmm4
  0x00007fa5c5003c1b:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fa5c5003c1f:   vmovdqu %xmm7,%xmm0
  0x00007fa5c5003c23:   vaddsd %xmm3,%xmm2,%xmm2
  0x00007fa5c5003c27:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007fa5c5003c2b:   vmulsd %xmm2,%xmm6,%xmm6
  0x00007fa5c5003c2f:   vsubsd %xmm7,%xmm0,%xmm0
  0x00007fa5c5003c33:   vmovdqu %xmm7,%xmm2
  0x00007fa5c5003c37:   vaddsd %xmm4,%xmm7,%xmm7
  0x00007fa5c5003c3b:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fa5c5003c3f:   vsubsd %xmm7,%xmm2,%xmm2
  0x00007fa5c5003c43:   vaddsd %xmm2,%xmm4,%xmm4
  0x00007fa5c5003c47:   vpshufd $0xee,%xmm5,%xmm2
  0x00007fa5c5003c4c:   vmovdqu %xmm7,%xmm5
  0x00007fa5c5003c50:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007fa5c5003c54:   vaddsd %xmm0,%xmm4,%xmm4
  0x00007fa5c5003c58:   vmovdqu 0x9a65c10(%rip),%xmm0        # 0x00007fa5cea69870
  0x00007fa5c5003c60:   vsubsd %xmm7,%xmm5,%xmm5
  0x00007fa5c5003c64:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007fa5c5003c68:   vmovdqu %xmm7,%xmm4
  0x00007fa5c5003c6c:   vaddsd %xmm2,%xmm5,%xmm5
  0x00007fa5c5003c70:   vaddsd %xmm1,%xmm7,%xmm7
  0x00007fa5c5003c74:   vmovdqu 0x9a65c34(%rip),%xmm2        # 0x00007fa5cea698b0
  0x00007fa5c5003c7c:   vsubsd %xmm7,%xmm4,%xmm4
  0x00007fa5c5003c80:   vaddsd %xmm5,%xmm6,%xmm6
  0x00007fa5c5003c84:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007fa5c5003c88:   vpshufd $0xee,%xmm7,%xmm5
  0x00007fa5c5003c8d:   vmovapd %xmm7,%xmm1
  0x00007fa5c5003c91:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007fa5c5003c95:   vsubsd %xmm7,%xmm1,%xmm1
  0x00007fa5c5003c99:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fa5c5003c9d:   vmovdqu 0x9a65c1b(%rip),%xmm5        # 0x00007fa5cea698c0
  0x00007fa5c5003ca5:   vpshufd $0x44,%xmm3,%xmm3
  0x00007fa5c5003caa:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007fa5c5003cae:   vaddsd %xmm1,%xmm6,%xmm6
  0x00007fa5c5003cb2:   vmovdqu 0x9a65bd6(%rip),%xmm1        # 0x00007fa5cea69890
  0x00007fa5c5003cba:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007fa5c5003cbe:   vmulpd %xmm3,%xmm2,%xmm2
  0x00007fa5c5003cc2:   vpshufd $0x44,%xmm3,%xmm4
  0x00007fa5c5003cc7:   vmulpd %xmm3,%xmm3,%xmm3
  0x00007fa5c5003ccb:   vaddpd %xmm1,%xmm0,%xmm0
  0x00007fa5c5003ccf:   vaddpd %xmm2,%xmm5,%xmm5
  0x00007fa5c5003cd3:   vmulsd %xmm3,%xmm4,%xmm4
  0x00007fa5c5003cd7:   vmovq  0x9a65c01(%rip),%xmm2        # 0x00007fa5cea698e0
  0x00007fa5c5003cdf:   vmulpd %xmm3,%xmm3,%xmm3
  0x00007fa5c5003ce3:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c5003ce9:   mov    0x16(%rsp),%cx
  0x00007fa5c5003cee:   vmulpd %xmm4,%xmm0,%xmm0
  0x00007fa5c5003cf2:   vpextrw $0x3,%xmm7,%eax
  0x00007fa5c5003cf7:   vmulpd %xmm4,%xmm5,%xmm5
  0x00007fa5c5003cfb:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007fa5c5003cff:   vmovq  0x9a66c31(%rip),%xmm4        # 0x00007fa5cea6a938
  0x00007fa5c5003d07:   vpand  %xmm7,%xmm2,%xmm2
  0x00007fa5c5003d0b:   vaddsd %xmm6,%xmm5,%xmm5
  0x00007fa5c5003d0f:   vsubsd %xmm2,%xmm7,%xmm7
  0x00007fa5c5003d13:   vaddpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5003d17:   and    $0x7ff0,%eax
  0x00007fa5c5003d1c:   sub    $0x3ff0,%eax
  0x00007fa5c5003d21:   and    $0x7ff0,%ecx
  0x00007fa5c5003d27:   cmp    $0x7ff0,%ecx
  0x00007fa5c5003d2d:   je     0x00007fa5c5003e77
  0x00007fa5c5003d33:   add    %eax,%ecx
  0x00007fa5c5003d35:   cmp    $0x40c0,%ecx
  0x00007fa5c5003d3b:   jae    0x00007fa5c5003edc
  0x00007fa5c5003d41:   vpshufd $0xee,%xmm5,%xmm0
  0x00007fa5c5003d46:   vpand  %xmm1,%xmm4,%xmm4
  0x00007fa5c5003d4a:   vmovdqu %xmm1,%xmm3
  0x00007fa5c5003d4e:   vaddsd %xmm0,%xmm5,%xmm5
  0x00007fa5c5003d52:   vsubsd %xmm4,%xmm1,%xmm1
  0x00007fa5c5003d56:   vxorpd %xmm6,%xmm6,%xmm6
  0x00007fa5c5003d5a:   mov    $0x42b8,%edx
  0x00007fa5c5003d5f:   vpinsrw $0x3,%edx,%xmm6,%xmm6
  0x00007fa5c5003d64:   vaddsd %xmm5,%xmm7,%xmm7
  0x00007fa5c5003d68:   vmulsd %xmm2,%xmm4,%xmm4
  0x00007fa5c5003d6c:   vmulsd %xmm2,%xmm1,%xmm1
  0x00007fa5c5003d70:   vmovdqu %xmm6,%xmm5
  0x00007fa5c5003d74:   vmulsd %xmm7,%xmm3,%xmm3
  0x00007fa5c5003d78:   vaddsd %xmm4,%xmm6,%xmm6
  0x00007fa5c5003d7c:   vaddsd %xmm3,%xmm1,%xmm1
  0x00007fa5c5003d80:   vmovdqu 0x9a65b78(%rip),%xmm7        # 0x00007fa5cea69900
  0x00007fa5c5003d88:   vmovd  %xmm6,%edx
  0x00007fa5c5003d8c:   vsubsd %xmm5,%xmm6,%xmm6
  0x00007fa5c5003d90:   movabs $0x7fa5cea69930,%r11
  0x00007fa5c5003d9a:   vmovdqu 0x9a65b6e(%rip),%xmm3        # 0x00007fa5cea69910
  0x00007fa5c5003da2:   vmovq  0x9a65b76(%rip),%xmm2        # 0x00007fa5cea69920
  0x00007fa5c5003daa:   vsubsd %xmm6,%xmm4,%xmm4
  0x00007fa5c5003dae:   mov    %edx,%ecx
  0x00007fa5c5003db0:   and    $0xff,%edx
  0x00007fa5c5003db6:   add    %edx,%edx
  0x00007fa5c5003db8:   vmovdqu (%r11,%rdx,8),%xmm5
  0x00007fa5c5003dbe:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007fa5c5003dc2:   vpextrw $0x3,%xmm6,%edx
  0x00007fa5c5003dc7:   shr    $0x8,%ecx
  0x00007fa5c5003dca:   mov    %ecx,%eax
  0x00007fa5c5003dcc:   shr    %ecx
  0x00007fa5c5003dce:   sub    %ecx,%eax
  0x00007fa5c5003dd0:   shl    $0x14,%ecx
  0x00007fa5c5003dd3:   vmovd  %ecx,%xmm6
  0x00007fa5c5003dd7:   vpshufd $0x44,%xmm4,%xmm0
  0x00007fa5c5003ddc:   vpshufd $0x44,%xmm4,%xmm1
  0x00007fa5c5003de1:   vmulpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003de5:   vmulpd %xmm1,%xmm7,%xmm7
  0x00007fa5c5003de9:   vpshufd $0x11,%xmm6,%xmm6
  0x00007fa5c5003dee:   vmulsd %xmm4,%xmm2,%xmm2
  0x00007fa5c5003df2:   and    $0x7fff,%edx
  0x00007fa5c5003df8:   cmp    $0x4091,%edx
  0x00007fa5c5003dfe:   ja     0x00007fa5c5003a57
  0x00007fa5c5003e04:   vmulsd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003e08:   vpaddd %xmm6,%xmm5,%xmm5
  0x00007fa5c5003e0c:   vaddpd %xmm7,%xmm3,%xmm3
  0x00007fa5c5003e10:   vmulsd %xmm5,%xmm2,%xmm2
  0x00007fa5c5003e14:   vpshufd $0xee,%xmm5,%xmm6
  0x00007fa5c5003e19:   vmulpd %xmm3,%xmm0,%xmm0
  0x00007fa5c5003e1d:   vaddsd %xmm6,%xmm2,%xmm2
  0x00007fa5c5003e21:   vpshufd $0xee,%xmm0,%xmm3
  0x00007fa5c5003e26:   add    $0x3ff,%eax
  0x00007fa5c5003e2b:   shl    $0x14,%eax
  0x00007fa5c5003e2e:   or     %r8d,%eax
  0x00007fa5c5003e31:   vmovd  %eax,%xmm4
  0x00007fa5c5003e35:   vmulsd %xmm5,%xmm0,%xmm0
  0x00007fa5c5003e39:   vmulsd %xmm5,%xmm3,%xmm3
  0x00007fa5c5003e3d:   vaddsd %xmm2,%xmm0,%xmm0
  0x00007fa5c5003e41:   (bad)  
  0x00007fa5c5003e45:   hlt    
  0x00007fa5c5003e46:   and    %al,%ch
  0x00007fa5c5003e48:   sti    
  0x00007fa5c5003e49:   pop    %rax
  0x00007fa5c5003e4a:   retq   
  0x00007fa5c5003e4b:   vmovdqu %xmm0,%xmm1
  0x00007fa5c5003e4f:   vaddsd %xmm5,%xmm0,%xmm0
  0x00007fa5c5003e53:   vmulsd %xmm4,%xmm0,%xmm0
  0x00007fa5c5003e57:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5003e5c:   and    $0x7ff0,%eax
  0x00007fa5c5003e61:   je     0x00007fa5c5003af8
  0x00007fa5c5003e67:   cmp    $0x7ff0,%eax
  0x00007fa5c5003e6c:   je     0x00007fa5c5003ab2
  0x00007fa5c5003e72:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c5003e77:   vmovq  0x8(%rsp),%xmm0
  0x00007fa5c5003e7d:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fa5c5003e81:   mov    $0xbff0,%eax
  0x00007fa5c5003e86:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007fa5c5003e8b:   vaddsd %xmm0,%xmm2,%xmm2
  0x00007fa5c5003e8f:   vpextrw $0x3,%xmm2,%eax
  0x00007fa5c5003e94:   cmp    $0x0,%eax
  0x00007fa5c5003e97:   jne    0x00007fa5c5003eb0
  0x00007fa5c5003e9d:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003ea1:   mov    $0x7ff8,%eax
  0x00007fa5c5003ea6:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c5003eab:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c5003eb0:   vmovq  0x10(%rsp),%xmm1
  0x00007fa5c5003eb6:   vmovd  %xmm1,%edx
  0x00007fa5c5003eba:   vmovdqu %xmm1,%xmm3
  0x00007fa5c5003ebe:   vpsrlq $0x14,%xmm3,%xmm3
  0x00007fa5c5003ec3:   vmovd  %xmm3,%ecx
  0x00007fa5c5003ec7:   or     %edx,%ecx
  0x00007fa5c5003ec9:   je     0x00007fa5c5003ef8
  0x00007fa5c5003ecf:   vaddsd %xmm1,%xmm1,%xmm1
  0x00007fa5c5003ed3:   vmovdqu %xmm1,%xmm0
  0x00007fa5c5003ed7:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c5003edc:   vpextrw $0x3,%xmm1,%eax
  0x00007fa5c5003ee1:   vpextrw $0x3,%xmm2,%ecx
  0x00007fa5c5003ee6:   xor    %ecx,%eax
  0x00007fa5c5003ee8:   test   $0x8000,%eax
  0x00007fa5c5003eed:   je     0x00007fa5c5003a98
  0x00007fa5c5003ef3:   jmpq   0x00007fa5c5003abe
  0x00007fa5c5003ef8:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5003efd:   and    $0x7ff0,%eax
  0x00007fa5c5003f02:   vpextrw $0x3,%xmm1,%edx
  0x00007fa5c5003f07:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5003f0b:   sub    $0x3ff0,%eax
  0x00007fa5c5003f10:   xor    %edx,%eax
  0x00007fa5c5003f12:   test   $0x8000,%eax
  0x00007fa5c5003f17:   je     0x00007fa5c5003f22
  0x00007fa5c5003f1d:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c5003f22:   mov    $0x7ff0,%edx
  0x00007fa5c5003f27:   vpinsrw $0x3,%edx,%xmm0,%xmm0
  0x00007fa5c5003f2c:   jmpq   0x00007fa5c5003f3d
  0x00007fa5c5003f31:   vmovq  %xmm0,0x18(%rsp)
  0x00007fa5c5003f37:   vmovq  0x18(%rsp),%xmm0
  0x00007fa5c5003f3d:   add    $0x28,%rsp
  0x00007fa5c5003f41:   leaveq 
  0x00007fa5c5003f42:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmLog [0x00007fa5c5003f43, 0x00007fa5c50041b7] (628 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5003f43:   push   %rbp
  0x00007fa5c5003f44:   mov    %rsp,%rbp
  0x00007fa5c5003f47:   sub    $0x18,%rsp
  0x00007fa5c5003f4b:   vmovsd %xmm0,(%rsp)
  0x00007fa5c5003f50:   movabs $0x3ff0000000000000,%rax
  0x00007fa5c5003f5a:   vmovq  %rax,%xmm2
  0x00007fa5c5003f5f:   movabs $0x77f0000000000000,%rdx
  0x00007fa5c5003f69:   vmovq  %rdx,%xmm3
  0x00007fa5c5003f6e:   mov    $0x8000,%ecx
  0x00007fa5c5003f73:   vmovd  %ecx,%xmm4
  0x00007fa5c5003f77:   movabs $0xffffe00000000000,%r11
  0x00007fa5c5003f81:   vmovq  %r11,%xmm5
  0x00007fa5c5003f86:   vmovdqu %xmm0,%xmm1
  0x00007fa5c5003f8a:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5003f8f:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fa5c5003f93:   mov    $0x3fe0,%ecx
  0x00007fa5c5003f98:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fa5c5003f9d:   movabs $0x7fa5cea66f40,%r8
  0x00007fa5c5003fa7:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fa5c5003fac:   vrcpps %xmm0,%xmm0
  0x00007fa5c5003fb0:   (bad)  
  0x00007fa5c5003fb4:   icebp  
  0x00007fa5c5003fb5:   or     $0xc5,%al
  0x00007fa5c5003fb7:   stc    
  0x00007fa5c5003fb8:   jo     0x00007fa5c5003faf
  0x00007fa5c5003fba:   in     $0xc5,%al
  0x00007fa5c5003fbc:   icebp  
  0x00007fa5c5003fbd:   jae    0x00007fa5c5003f90
  0x00007fa5c5003fbf:   or     $0x83,%al
  0x00007fa5c5003fc1:   callq  0x00007fa644e07cd6
  0x00007fa5c5003fc6:   add    %al,(%rax)
  0x00007fa5c5003fc8:   jae    0x00007fa5c50040a1
  0x00007fa5c5003fce:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007fa5c5003fd2:   vpor   %xmm3,%xmm1,%xmm1
  0x00007fa5c5003fd6:   vmovd  %xmm0,%edx
  0x00007fa5c5003fda:   (bad)  
  0x00007fa5c5003fde:   lock sbb $0xe9dbd1c5,%eax
  0x00007fa5c5003fe4:   vpand  %xmm6,%xmm0,%xmm0
  0x00007fa5c5003fe8:   vsubsd %xmm5,%xmm1,%xmm1
  0x00007fa5c5003fec:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c5003ff0:   and    $0x7ff0,%eax
  0x00007fa5c5003ff5:   sub    %ecx,%eax
  0x00007fa5c5003ff7:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007fa5c5003ffb:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007fa5c5003fff:   vmovq  0x9a62f29(%rip),%xmm6        # 0x00007fa5cea66f30
  0x00007fa5c5004007:   vmovdqu 0x9a62ef1(%rip),%xmm3        # 0x00007fa5cea66f00
  0x00007fa5c500400f:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007fa5c5004013:   and    $0xff0000,%edx
  0x00007fa5c5004019:   shr    $0xc,%edx
  0x00007fa5c500401c:   vmovdqu (%r8,%rdx,1),%xmm0
  0x00007fa5c5004022:   vmovdqu 0x9a62ee6(%rip),%xmm4        # 0x00007fa5cea66f10
  0x00007fa5c500402a:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fa5c500402e:   vmovdqu 0x9a62eea(%rip),%xmm2        # 0x00007fa5cea66f20
  0x00007fa5c5004036:   vmulsd %xmm7,%xmm6,%xmm6
  0x00007fa5c500403a:   vmovddup %xmm1,%xmm5
  0x00007fa5c500403e:   vmulsd 0x9a62ef2(%rip),%xmm7,%xmm7        # 0x00007fa5cea66f38
  0x00007fa5c5004046:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007fa5c500404a:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fa5c500404e:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007fa5c5004052:   vmulpd %xmm5,%xmm5,%xmm5
  0x00007fa5c5004056:   vmovddup %xmm0,%xmm6
  0x00007fa5c500405a:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fa5c500405e:   vaddpd %xmm2,%xmm4,%xmm4
  0x00007fa5c5004062:   vmulpd %xmm5,%xmm3,%xmm3
  0x00007fa5c5004066:   vsubsd %xmm0,%xmm6,%xmm6
  0x00007fa5c500406a:   vmulsd %xmm1,%xmm4,%xmm4
  0x00007fa5c500406e:   vpshufd $0xee,%xmm0,%xmm2
  0x00007fa5c5004073:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fa5c5004077:   vmulsd %xmm5,%xmm5,%xmm5
  0x00007fa5c500407b:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007fa5c500407f:   vaddpd %xmm3,%xmm4,%xmm4
  0x00007fa5c5004083:   vaddsd %xmm7,%xmm1,%xmm1
  0x00007fa5c5004087:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007fa5c500408b:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fa5c500408f:   vpshufd $0xee,%xmm4,%xmm5
  0x00007fa5c5004094:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fa5c5004098:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fa5c500409c:   jmpq   0x00007fa5c50041b1
  0x00007fa5c50040a1:   vmovq  (%rsp),%xmm0
  0x00007fa5c50040a6:   vmovq  (%rsp),%xmm1
  0x00007fa5c50040ab:   add    $0x10,%eax
  0x00007fa5c50040ae:   cmp    $0x8000,%eax
  0x00007fa5c50040b3:   jae    0x00007fa5c500413e
  0x00007fa5c50040b9:   cmp    $0x10,%eax
  0x00007fa5c50040bc:   jb     0x00007fa5c50040d7
  0x00007fa5c50040c2:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007fa5c50040c6:   jmpq   0x00007fa5c50041b1
  0x00007fa5c50040cb:   ja     0x00007fa5c50040c2
  0x00007fa5c50040cd:   cmp    $0x0,%edx
  0x00007fa5c50040d0:   ja     0x00007fa5c50040c2
  0x00007fa5c50040d2:   jmpq   0x00007fa5c5004164
  0x00007fa5c50040d7:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c50040db:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007fa5c50040df:   vmovd  %xmm1,%edx
  0x00007fa5c50040e3:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fa5c50040e8:   vmovd  %xmm1,%ecx
  0x00007fa5c50040ec:   or     %ecx,%edx
  0x00007fa5c50040ee:   cmp    $0x0,%edx
  0x00007fa5c50040f1:   je     0x00007fa5c5004187
  0x00007fa5c50040f7:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c50040fb:   mov    $0x47f0,%eax
  0x00007fa5c5004100:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fa5c5004105:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007fa5c5004109:   vmovdqu %xmm0,%xmm1
  0x00007fa5c500410d:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5004112:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fa5c5004116:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fa5c500411b:   mov    $0x47f0,%ecx
  0x00007fa5c5004120:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fa5c5004125:   vrcpps %xmm0,%xmm0
  0x00007fa5c5004129:   (bad)  
  0x00007fa5c500412d:   icebp  
  0x00007fa5c500412e:   or     $0xc5,%al
  0x00007fa5c5004130:   stc    
  0x00007fa5c5004131:   jo     0x00007fa5c5004128
  0x00007fa5c5004133:   in     $0xc5,%al
  0x00007fa5c5004135:   icebp  
  0x00007fa5c5004136:   jae    0x00007fa5c5004109
  0x00007fa5c5004138:   or     $0xe9,%al
  0x00007fa5c500413a:   nop
  0x00007fa5c500413b:   (bad)  
  0x00007fa5c500413c:   (bad)  
  0x00007fa5c500413d:   inc    %ebp
  0x00007fa5c500413f:   stc    
  0x00007fa5c5004140:   jle    0x00007fa5c500410c
  0x00007fa5c5004142:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fa5c5004147:   vmovd  %xmm1,%ecx
  0x00007fa5c500414b:   add    %ecx,%ecx
  0x00007fa5c500414d:   cmp    $0xffe00000,%ecx
  0x00007fa5c5004153:   jae    0x00007fa5c50040cb
  0x00007fa5c5004159:   or     %ecx,%edx
  0x00007fa5c500415b:   cmp    $0x0,%edx
  0x00007fa5c500415e:   je     0x00007fa5c5004187
  0x00007fa5c5004164:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c5004168:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c500416c:   mov    $0x7ff0,%eax
  0x00007fa5c5004171:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fa5c5004176:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007fa5c500417a:   movl   $0x3,0x10(%rsp)
  0x00007fa5c5004182:   jmpq   0x00007fa5c50041a5
  0x00007fa5c5004187:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c500418b:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c500418f:   mov    $0xbff0,%eax
  0x00007fa5c5004194:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c5004199:   vdivsd %xmm1,%xmm0,%xmm0
  0x00007fa5c500419d:   movl   $0x2,0x10(%rsp)
  0x00007fa5c50041a5:   vmovq  %xmm0,0x8(%rsp)
  0x00007fa5c50041ab:   vmovq  0x8(%rsp),%xmm0
  0x00007fa5c50041b1:   add    $0x18,%rsp
  0x00007fa5c50041b5:   leaveq 
  0x00007fa5c50041b6:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::libmLog10 [0x00007fa5c50041b7, 0x00007fa5c5004463] (684 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50041b7:   push   %rbp
  0x00007fa5c50041b8:   mov    %rsp,%rbp
  0x00007fa5c50041bb:   sub    $0x18,%rsp
  0x00007fa5c50041bf:   vmovsd %xmm0,(%rsp)
  0x00007fa5c50041c4:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fa5c50041c8:   mov    $0x3ff0,%eax
  0x00007fa5c50041cd:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007fa5c50041d2:   mov    $0x3ede0000,%ecx
  0x00007fa5c50041d7:   vmovd  %ecx,%xmm7
  0x00007fa5c50041db:   vxorpd %xmm3,%xmm3,%xmm3
  0x00007fa5c50041df:   mov    $0x77f0,%edx
  0x00007fa5c50041e4:   vpinsrw $0x3,%edx,%xmm3,%xmm3
  0x00007fa5c50041e9:   vmovdqu %xmm0,%xmm1
  0x00007fa5c50041ed:   mov    $0x8000,%edx
  0x00007fa5c50041f2:   vmovd  %edx,%xmm4
  0x00007fa5c50041f6:   vmovdqu 0x9a62cf2(%rip),%xmm5        # 0x00007fa5cea66ef0
  0x00007fa5c50041fe:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c5004203:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fa5c5004207:   mov    $0x3fe0,%ecx
  0x00007fa5c500420c:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fa5c5004211:   vmovdqu 0x9a62cc7(%rip),%xmm2        # 0x00007fa5cea66ee0
  0x00007fa5c5004219:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fa5c500421e:   vrcpps %xmm0,%xmm0
  0x00007fa5c5004222:   (bad)  
  0x00007fa5c5004226:   icebp  
  0x00007fa5c5004227:   or     $0xc5,%al
  0x00007fa5c5004229:   stc    
  0x00007fa5c500422a:   jo     0x00007fa5c5004221
  0x00007fa5c500422c:   rex.WRX vpsrlq $0xc,%xmm1,%xmm1
  0x00007fa5c5004232:   sub    $0x10,%eax
  0x00007fa5c5004235:   cmp    $0x7fe0,%eax
  0x00007fa5c500423a:   jae    0x00007fa5c5004337
  0x00007fa5c5004240:   vmulss %xmm7,%xmm0,%xmm0
  0x00007fa5c5004244:   vpor   %xmm3,%xmm1,%xmm1
  0x00007fa5c5004248:   movabs $0x7fa5cea666d0,%r11
  0x00007fa5c5004252:   vandpd %xmm1,%xmm5,%xmm5
  0x00007fa5c5004256:   vpaddd %xmm4,%xmm0,%xmm0
  0x00007fa5c500425a:   vsubsd %xmm5,%xmm1,%xmm1
  0x00007fa5c500425e:   vmovd  %xmm0,%edx
  0x00007fa5c5004262:   (bad)  
  0x00007fa5c5004266:   lock sbb $0xc654f9c5,%eax
  0x00007fa5c500426c:   and    $0x7ff0,%eax
  0x00007fa5c5004271:   sub    %ecx,%eax
  0x00007fa5c5004273:   vcvtsi2sd %eax,%xmm7,%xmm7
  0x00007fa5c5004277:   vmulpd %xmm0,%xmm5,%xmm5
  0x00007fa5c500427b:   vmulsd %xmm0,%xmm1,%xmm1
  0x00007fa5c500427f:   vmovq  0x9a62439(%rip),%xmm6        # 0x00007fa5cea666c0
  0x00007fa5c5004287:   vmovdqu 0x9a62401(%rip),%xmm3        # 0x00007fa5cea66690
  0x00007fa5c500428f:   vsubsd %xmm2,%xmm5,%xmm5
  0x00007fa5c5004293:   and    $0xff0000,%edx
  0x00007fa5c5004299:   shr    $0xc,%edx
  0x00007fa5c500429c:   vmovdqu -0x5e0(%r11,%rdx,1),%xmm0
  0x00007fa5c50042a6:   vmovdqu 0x9a623f2(%rip),%xmm4        # 0x00007fa5cea666a0
  0x00007fa5c50042ae:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fa5c50042b2:   vmovdqu 0x9a623f6(%rip),%xmm2        # 0x00007fa5cea666b0
  0x00007fa5c50042ba:   vmulsd %xmm7,%xmm6,%xmm6
  0x00007fa5c50042be:   vpshufd $0x44,%xmm1,%xmm5
  0x00007fa5c50042c3:   vmulsd 0x9a623fd(%rip),%xmm7,%xmm7        # 0x00007fa5cea666c8
  0x00007fa5c50042cb:   vmulsd %xmm1,%xmm3,%xmm3
  0x00007fa5c50042cf:   vaddsd %xmm6,%xmm0,%xmm0
  0x00007fa5c50042d3:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007fa5c50042d7:   vmovq  0x9a62c09(%rip),%xmm6        # 0x00007fa5cea66ee8
  0x00007fa5c50042df:   vmulpd %xmm5,%xmm5,%xmm5
  0x00007fa5c50042e3:   vaddpd %xmm2,%xmm4,%xmm4
  0x00007fa5c50042e7:   vmulpd %xmm5,%xmm3,%xmm3
  0x00007fa5c50042eb:   vpshufd $0xe4,%xmm0,%xmm2
  0x00007fa5c50042f0:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fa5c50042f4:   vmulsd %xmm1,%xmm4,%xmm4
  0x00007fa5c50042f8:   vsubsd %xmm0,%xmm2,%xmm2
  0x00007fa5c50042fc:   vmulsd %xmm1,%xmm6,%xmm6
  0x00007fa5c5004300:   vaddsd %xmm2,%xmm1,%xmm1
  0x00007fa5c5004304:   vpshufd $0xee,%xmm0,%xmm2
  0x00007fa5c5004309:   vmulsd %xmm5,%xmm5,%xmm5
  0x00007fa5c500430d:   vaddsd %xmm2,%xmm7,%xmm7
  0x00007fa5c5004311:   vaddsd %xmm6,%xmm1,%xmm1
  0x00007fa5c5004315:   vaddpd %xmm3,%xmm4,%xmm4
  0x00007fa5c5004319:   vaddsd %xmm7,%xmm1,%xmm1
  0x00007fa5c500431d:   vmulpd %xmm5,%xmm4,%xmm4
  0x00007fa5c5004321:   vaddsd %xmm4,%xmm1,%xmm1
  0x00007fa5c5004325:   vpshufd $0xee,%xmm4,%xmm5
  0x00007fa5c500432a:   vaddsd %xmm5,%xmm1,%xmm1
  0x00007fa5c500432e:   vaddsd %xmm1,%xmm0,%xmm0
  0x00007fa5c5004332:   jmpq   0x00007fa5c500445d
  0x00007fa5c5004337:   vmovq  (%rsp),%xmm0
  0x00007fa5c500433c:   vmovq  (%rsp),%xmm1
  0x00007fa5c5004341:   add    $0x10,%eax
  0x00007fa5c5004344:   cmp    $0x8000,%eax
  0x00007fa5c5004349:   jae    0x00007fa5c50043ea
  0x00007fa5c500434f:   cmp    $0x10,%eax
  0x00007fa5c5004352:   jb     0x00007fa5c500436d
  0x00007fa5c5004358:   vaddsd %xmm0,%xmm0,%xmm0
  0x00007fa5c500435c:   jmpq   0x00007fa5c500445d
  0x00007fa5c5004361:   ja     0x00007fa5c5004358
  0x00007fa5c5004363:   cmp    $0x0,%edx
  0x00007fa5c5004366:   ja     0x00007fa5c5004358
  0x00007fa5c5004368:   jmpq   0x00007fa5c5004410
  0x00007fa5c500436d:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c5004371:   vaddsd %xmm0,%xmm1,%xmm1
  0x00007fa5c5004375:   vmovd  %xmm1,%edx
  0x00007fa5c5004379:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fa5c500437e:   vmovd  %xmm1,%ecx
  0x00007fa5c5004382:   or     %ecx,%edx
  0x00007fa5c5004384:   cmp    $0x0,%edx
  0x00007fa5c5004387:   je     0x00007fa5c5004433
  0x00007fa5c500438d:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c5004391:   mov    $0x47f0,%eax
  0x00007fa5c5004396:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fa5c500439b:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007fa5c500439f:   vxorpd %xmm2,%xmm2,%xmm2
  0x00007fa5c50043a3:   mov    $0x3ff0,%eax
  0x00007fa5c50043a8:   vpinsrw $0x3,%eax,%xmm2,%xmm2
  0x00007fa5c50043ad:   vmovdqu %xmm0,%xmm1
  0x00007fa5c50043b1:   vpextrw $0x3,%xmm0,%eax
  0x00007fa5c50043b6:   vpor   %xmm2,%xmm0,%xmm0
  0x00007fa5c50043ba:   mov    $0x47f0,%ecx
  0x00007fa5c50043bf:   vpsrlq $0x1b,%xmm0,%xmm0
  0x00007fa5c50043c4:   vmovdqu 0x9a62b14(%rip),%xmm2        # 0x00007fa5cea66ee0
  0x00007fa5c50043cc:   vpsrld $0x2,%xmm0,%xmm0
  0x00007fa5c50043d1:   vrcpps %xmm0,%xmm0
  0x00007fa5c50043d5:   (bad)  
  0x00007fa5c50043d9:   icebp  
  0x00007fa5c50043da:   or     $0xc5,%al
  0x00007fa5c50043dc:   stc    
  0x00007fa5c50043dd:   jo     0x00007fa5c50043d4
  0x00007fa5c50043df:   rex.WRX vpsrlq $0xc,%xmm1,%xmm1
  0x00007fa5c50043e5:   jmpq   0x00007fa5c5004240
  0x00007fa5c50043ea:   vmovd  %xmm1,%edx
  0x00007fa5c50043ee:   vpsrlq $0x20,%xmm1,%xmm1
  0x00007fa5c50043f3:   vmovd  %xmm1,%ecx
  0x00007fa5c50043f7:   add    %ecx,%ecx
  0x00007fa5c50043f9:   cmp    $0xffe00000,%ecx
  0x00007fa5c50043ff:   jae    0x00007fa5c5004361
  0x00007fa5c5004405:   or     %ecx,%edx
  0x00007fa5c5004407:   cmp    $0x0,%edx
  0x00007fa5c500440a:   je     0x00007fa5c5004433
  0x00007fa5c5004410:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c5004414:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c5004418:   mov    $0x7ff0,%eax
  0x00007fa5c500441d:   vpinsrw $0x3,%eax,%xmm1,%xmm1
  0x00007fa5c5004422:   vmulsd %xmm1,%xmm0,%xmm0
  0x00007fa5c5004426:   movl   $0x9,0x10(%rsp)
  0x00007fa5c500442e:   jmpq   0x00007fa5c5004451
  0x00007fa5c5004433:   vxorpd %xmm1,%xmm1,%xmm1
  0x00007fa5c5004437:   vxorpd %xmm0,%xmm0,%xmm0
  0x00007fa5c500443b:   mov    $0xbff0,%eax
  0x00007fa5c5004440:   vpinsrw $0x3,%eax,%xmm0,%xmm0
  0x00007fa5c5004445:   vdivsd %xmm1,%xmm0,%xmm0
  0x00007fa5c5004449:   movl   $0x8,0x10(%rsp)
  0x00007fa5c5004451:   vmovq  %xmm0,0x8(%rsp)
  0x00007fa5c5004457:   vmovq  0x8(%rsp),%xmm0
  0x00007fa5c500445d:   add    $0x18,%rsp
  0x00007fa5c5004461:   leaveq 
  0x00007fa5c5004462:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VM_Version::getCPUIDNameInfo_stub [0x00007fa5c5008300, 0x00007fa5c50083df] (223 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5008300:   push   %rbp
  0x00007fa5c5008301:   mov    %rdi,%rbp
  0x00007fa5c5008304:   push   %rbx
  0x00007fa5c5008305:   push   %rsi
  0x00007fa5c5008306:   pushfq 
  0x00007fa5c5008307:   pop    %rax
  0x00007fa5c5008308:   push   %rax
  0x00007fa5c5008309:   mov    %rax,%rcx
  0x00007fa5c500830c:   xor    $0x40000,%eax
  0x00007fa5c5008311:   push   %rax
  0x00007fa5c5008312:   popfq  
  0x00007fa5c5008313:   pushfq 
  0x00007fa5c5008314:   pop    %rax
  0x00007fa5c5008315:   cmp    %rcx,%rax
  0x00007fa5c5008318:   jne    0x00007fa5c5008324
  0x00007fa5c500831a:   mov    $0x300,%eax
  0x00007fa5c500831f:   jmpq   0x00007fa5c50083da
  0x00007fa5c5008324:   mov    %rcx,%rax
  0x00007fa5c5008327:   xor    $0x200000,%eax
  0x00007fa5c500832c:   push   %rax
  0x00007fa5c500832d:   popfq  
  0x00007fa5c500832e:   pushfq 
  0x00007fa5c500832f:   pop    %rax
  0x00007fa5c5008330:   cmp    %rax,%rcx
  0x00007fa5c5008333:   jne    0x00007fa5c500833f
  0x00007fa5c5008335:   mov    $0x400,%eax
  0x00007fa5c500833a:   jmpq   0x00007fa5c50083da
  0x00007fa5c500833f:   xor    %eax,%eax
  0x00007fa5c5008341:   cpuid  
  0x00007fa5c5008343:   or     %eax,%eax
  0x00007fa5c5008345:   je     0x00007fa5c5008335
  0x00007fa5c5008347:   mov    $0x80000000,%eax
  0x00007fa5c500834c:   cpuid  
  0x00007fa5c500834e:   cmp    $0x80000004,%eax
  0x00007fa5c5008353:   jb     0x00007fa5c50083da
  0x00007fa5c5008359:   mov    $0x80000002,%eax
  0x00007fa5c500835e:   cpuid  
  0x00007fa5c5008360:   lea    0x90(%rbp),%rsi
  0x00007fa5c5008367:   mov    %eax,(%rsi)
  0x00007fa5c5008369:   lea    0x94(%rbp),%rsi
  0x00007fa5c5008370:   mov    %ebx,(%rsi)
  0x00007fa5c5008372:   lea    0x98(%rbp),%rsi
  0x00007fa5c5008379:   mov    %ecx,(%rsi)
  0x00007fa5c500837b:   lea    0x9c(%rbp),%rsi
  0x00007fa5c5008382:   mov    %edx,(%rsi)
  0x00007fa5c5008384:   mov    $0x80000003,%eax
  0x00007fa5c5008389:   cpuid  
  0x00007fa5c500838b:   lea    0xa0(%rbp),%rsi
  0x00007fa5c5008392:   mov    %eax,(%rsi)
  0x00007fa5c5008394:   lea    0xa4(%rbp),%rsi
  0x00007fa5c500839b:   mov    %ebx,(%rsi)
  0x00007fa5c500839d:   lea    0xa8(%rbp),%rsi
  0x00007fa5c50083a4:   mov    %ecx,(%rsi)
  0x00007fa5c50083a6:   lea    0xac(%rbp),%rsi
  0x00007fa5c50083ad:   mov    %edx,(%rsi)
  0x00007fa5c50083af:   mov    $0x80000004,%eax
  0x00007fa5c50083b4:   cpuid  
  0x00007fa5c50083b6:   lea    0xb0(%rbp),%rsi
  0x00007fa5c50083bd:   mov    %eax,(%rsi)
  0x00007fa5c50083bf:   lea    0xb4(%rbp),%rsi
  0x00007fa5c50083c6:   mov    %ebx,(%rsi)
  0x00007fa5c50083c8:   lea    0xb8(%rbp),%rsi
  0x00007fa5c50083cf:   mov    %ecx,(%rsi)
  0x00007fa5c50083d1:   lea    0xbc(%rbp),%rsi
  0x00007fa5c50083d8:   mov    %edx,(%rsi)
  0x00007fa5c50083da:   popfq  
  0x00007fa5c50083db:   pop    %rsi
  0x00007fa5c50083dc:   pop    %rbx
  0x00007fa5c50083dd:   pop    %rbp
  0x00007fa5c50083de:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - jfr_write_checkpoint 0x00007fa5c501cc10
--------------------------------------------------------------------------------
  0x00007fa5c501cc80:   push   %rbp
  0x00007fa5c501cc81:   mov    %rsp,%rbp
  0x00007fa5c501cc84:   vzeroupper 
  0x00007fa5c501cc87:   mov    %rbp,0x2d0(%r15)
  0x00007fa5c501cc8e:   movabs $0x7fa5c501cc84,%r10
  0x00007fa5c501cc98:   mov    %r10,0x2c8(%r15)
  0x00007fa5c501cc9f:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c501cca6:   mov    %r15,%rdi
  0x00007fa5c501cca9:   test   $0xf,%spl
  0x00007fa5c501ccad:   je     0x00007fa5c501ccc5
  0x00007fa5c501ccb3:   sub    $0x8,%rsp
  0x00007fa5c501ccb7:   callq  0x00007fa5cdf91420 = JfrIntrinsicSupport::write_checkpoint(JavaThread*)
  0x00007fa5c501ccbc:   add    $0x8,%rsp
  0x00007fa5c501ccc0:   jmpq   0x00007fa5c501ccca
  0x00007fa5c501ccc5:   callq  0x00007fa5cdf91420 = JfrIntrinsicSupport::write_checkpoint(JavaThread*)
  0x00007fa5c501ccca:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c501ccd5:   movq   $0x0,0x2d0(%r15)
  0x00007fa5c501cce0:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c501cceb:   vzeroupper 
  0x00007fa5c501ccee:   test   %rax,%rax
  0x00007fa5c501ccf1:   je     0x00007fa5c501ccfb
  0x00007fa5c501ccf7:   mov    -0x2(%rax),%rax
  0x00007fa5c501ccfb:   leaveq 
  0x00007fa5c501ccfc:   retq   
  0x00007fa5c501ccfd:   hlt    
  0x00007fa5c501ccfe:   hlt    
  0x00007fa5c501ccff:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 4 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - wrong_method_stub 0x00007fa5c501c690
--------------------------------------------------------------------------------
  0x00007fa5c501c700:   push   %rbp
  0x00007fa5c501c701:   mov    %rsp,%rbp
  0x00007fa5c501c704:   pushfq 
  0x00007fa5c501c705:   sub    $0x8,%rsp
  0x00007fa5c501c709:   sub    $0x80,%rsp
  0x00007fa5c501c710:   mov    %rax,0x78(%rsp)
  0x00007fa5c501c715:   mov    %rcx,0x70(%rsp)
  0x00007fa5c501c71a:   mov    %rdx,0x68(%rsp)
  0x00007fa5c501c71f:   mov    %rbx,0x60(%rsp)
  0x00007fa5c501c724:   mov    %rbp,0x50(%rsp)
  0x00007fa5c501c729:   mov    %rsi,0x48(%rsp)
  0x00007fa5c501c72e:   mov    %rdi,0x40(%rsp)
  0x00007fa5c501c733:   mov    %r8,0x38(%rsp)
  0x00007fa5c501c738:   mov    %r9,0x30(%rsp)
  0x00007fa5c501c73d:   mov    %r10,0x28(%rsp)
  0x00007fa5c501c742:   mov    %r11,0x20(%rsp)
  0x00007fa5c501c747:   mov    %r12,0x18(%rsp)
  0x00007fa5c501c74c:   mov    %r13,0x10(%rsp)
  0x00007fa5c501c751:   mov    %r14,0x8(%rsp)
  0x00007fa5c501c756:   mov    %r15,(%rsp)
  0x00007fa5c501c75a:   sub    $0xa80,%rsp
  0x00007fa5c501c761:   fxsave64 (%rsp)
  0x00007fa5c501c766:   vzeroupper 
  0x00007fa5c501c769:   vzeroupper 
  0x00007fa5c501c76c:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c501c773:   mov    %r15,%rdi
  0x00007fa5c501c776:   callq  0x00007fa5ce3efb00 = SharedRuntime::handle_wrong_method(JavaThread*)
  0x00007fa5c501c77b:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c501c786:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c501c791:   vzeroupper 
  0x00007fa5c501c794:   cmpq   $0x0,0x8(%r15)
  0x00007fa5c501c799:   jne    0x00007fa5c501c829
  0x00007fa5c501c79f:   mov    0x320(%r15),%rbx
  0x00007fa5c501c7a6:   movq   $0x0,0x320(%r15)
  0x00007fa5c501c7b1:   mov    %rbx,0xae0(%rsp)
  0x00007fa5c501c7b9:   mov    %rax,0xaf8(%rsp)
  0x00007fa5c501c7c1:   vzeroupper 
  0x00007fa5c501c7c4:   fxrstor64 (%rsp)
  0x00007fa5c501c7c9:   add    $0xa80,%rsp
  0x00007fa5c501c7d0:   mov    (%rsp),%r15
  0x00007fa5c501c7d4:   mov    0x8(%rsp),%r14
  0x00007fa5c501c7d9:   mov    0x10(%rsp),%r13
  0x00007fa5c501c7de:   mov    0x18(%rsp),%r12
  0x00007fa5c501c7e3:   mov    0x20(%rsp),%r11
  0x00007fa5c501c7e8:   mov    0x28(%rsp),%r10
  0x00007fa5c501c7ed:   mov    0x30(%rsp),%r9
  0x00007fa5c501c7f2:   mov    0x38(%rsp),%r8
  0x00007fa5c501c7f7:   mov    0x40(%rsp),%rdi
  0x00007fa5c501c7fc:   mov    0x48(%rsp),%rsi
  0x00007fa5c501c801:   mov    0x50(%rsp),%rbp
  0x00007fa5c501c806:   mov    0x60(%rsp),%rbx
  0x00007fa5c501c80b:   mov    0x68(%rsp),%rdx
  0x00007fa5c501c810:   mov    0x70(%rsp),%rcx
  0x00007fa5c501c815:   mov    0x78(%rsp),%rax
  0x00007fa5c501c81a:   add    $0x80,%rsp
  0x00007fa5c501c821:   add    $0x8,%rsp
  0x00007fa5c501c825:   popfq  
  0x00007fa5c501c826:   pop    %rbp
  0x00007fa5c501c827:   jmpq   *%rax
  0x00007fa5c501c829:   vzeroupper 
  0x00007fa5c501c82c:   fxrstor64 (%rsp)
  0x00007fa5c501c831:   add    $0xa80,%rsp
  0x00007fa5c501c838:   mov    (%rsp),%r15
  0x00007fa5c501c83c:   mov    0x8(%rsp),%r14
  0x00007fa5c501c841:   mov    0x10(%rsp),%r13
  0x00007fa5c501c846:   mov    0x18(%rsp),%r12
  0x00007fa5c501c84b:   mov    0x20(%rsp),%r11
  0x00007fa5c501c850:   mov    0x28(%rsp),%r10
  0x00007fa5c501c855:   mov    0x30(%rsp),%r9
  0x00007fa5c501c85a:   mov    0x38(%rsp),%r8
  0x00007fa5c501c85f:   mov    0x40(%rsp),%rdi
  0x00007fa5c501c864:   mov    0x48(%rsp),%rsi
  0x00007fa5c501c869:   mov    0x50(%rsp),%rbp
  0x00007fa5c501c86e:   mov    0x60(%rsp),%rbx
  0x00007fa5c501c873:   mov    0x68(%rsp),%rdx
  0x00007fa5c501c878:   mov    0x70(%rsp),%rcx
  0x00007fa5c501c87d:   mov    0x78(%rsp),%rax
  0x00007fa5c501c882:   add    $0x80,%rsp
  0x00007fa5c501c889:   add    $0x8,%rsp
  0x00007fa5c501c88d:   popfq  
  0x00007fa5c501c88e:   pop    %rbp
  0x00007fa5c501c88f:   movq   $0x0,0x318(%r15)
  0x00007fa5c501c89a:   mov    0x8(%r15),%rax
  0x00007fa5c501c89e:   jmpq   0x00007fa5c5000c00
  0x00007fa5c501c8a3:   hlt    
  0x00007fa5c501c8a4:   hlt    
  0x00007fa5c501c8a5:   hlt    
  0x00007fa5c501c8a6:   hlt    
  0x00007fa5c501c8a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - wrong_method_abstract_stub 0x00007fa5c5063190
--------------------------------------------------------------------------------
  0x00007fa5c5063200:   push   %rbp
  0x00007fa5c5063201:   mov    %rsp,%rbp
  0x00007fa5c5063204:   pushfq 
  0x00007fa5c5063205:   sub    $0x8,%rsp
  0x00007fa5c5063209:   sub    $0x80,%rsp
  0x00007fa5c5063210:   mov    %rax,0x78(%rsp)
  0x00007fa5c5063215:   mov    %rcx,0x70(%rsp)
  0x00007fa5c506321a:   mov    %rdx,0x68(%rsp)
  0x00007fa5c506321f:   mov    %rbx,0x60(%rsp)
  0x00007fa5c5063224:   mov    %rbp,0x50(%rsp)
  0x00007fa5c5063229:   mov    %rsi,0x48(%rsp)
  0x00007fa5c506322e:   mov    %rdi,0x40(%rsp)
  0x00007fa5c5063233:   mov    %r8,0x38(%rsp)
  0x00007fa5c5063238:   mov    %r9,0x30(%rsp)
  0x00007fa5c506323d:   mov    %r10,0x28(%rsp)
  0x00007fa5c5063242:   mov    %r11,0x20(%rsp)
  0x00007fa5c5063247:   mov    %r12,0x18(%rsp)
  0x00007fa5c506324c:   mov    %r13,0x10(%rsp)
  0x00007fa5c5063251:   mov    %r14,0x8(%rsp)
  0x00007fa5c5063256:   mov    %r15,(%rsp)
  0x00007fa5c506325a:   sub    $0xa80,%rsp
  0x00007fa5c5063261:   fxsave64 (%rsp)
  0x00007fa5c5063266:   vzeroupper 
  0x00007fa5c5063269:   vzeroupper 
  0x00007fa5c506326c:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5063273:   mov    %r15,%rdi
  0x00007fa5c5063276:   callq  0x00007fa5ce3ee6e0 = SharedRuntime::handle_wrong_method_abstract(JavaThread*)
  0x00007fa5c506327b:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c5063286:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c5063291:   vzeroupper 
  0x00007fa5c5063294:   cmpq   $0x0,0x8(%r15)
  0x00007fa5c5063299:   jne    0x00007fa5c5063329
  0x00007fa5c506329f:   mov    0x320(%r15),%rbx
  0x00007fa5c50632a6:   movq   $0x0,0x320(%r15)
  0x00007fa5c50632b1:   mov    %rbx,0xae0(%rsp)
  0x00007fa5c50632b9:   mov    %rax,0xaf8(%rsp)
  0x00007fa5c50632c1:   vzeroupper 
  0x00007fa5c50632c4:   fxrstor64 (%rsp)
  0x00007fa5c50632c9:   add    $0xa80,%rsp
  0x00007fa5c50632d0:   mov    (%rsp),%r15
  0x00007fa5c50632d4:   mov    0x8(%rsp),%r14
  0x00007fa5c50632d9:   mov    0x10(%rsp),%r13
  0x00007fa5c50632de:   mov    0x18(%rsp),%r12
  0x00007fa5c50632e3:   mov    0x20(%rsp),%r11
  0x00007fa5c50632e8:   mov    0x28(%rsp),%r10
  0x00007fa5c50632ed:   mov    0x30(%rsp),%r9
  0x00007fa5c50632f2:   mov    0x38(%rsp),%r8
  0x00007fa5c50632f7:   mov    0x40(%rsp),%rdi
  0x00007fa5c50632fc:   mov    0x48(%rsp),%rsi
  0x00007fa5c5063301:   mov    0x50(%rsp),%rbp
  0x00007fa5c5063306:   mov    0x60(%rsp),%rbx
  0x00007fa5c506330b:   mov    0x68(%rsp),%rdx
  0x00007fa5c5063310:   mov    0x70(%rsp),%rcx
  0x00007fa5c5063315:   mov    0x78(%rsp),%rax
  0x00007fa5c506331a:   add    $0x80,%rsp
  0x00007fa5c5063321:   add    $0x8,%rsp
  0x00007fa5c5063325:   popfq  
  0x00007fa5c5063326:   pop    %rbp
  0x00007fa5c5063327:   jmpq   *%rax
  0x00007fa5c5063329:   vzeroupper 
  0x00007fa5c506332c:   fxrstor64 (%rsp)
  0x00007fa5c5063331:   add    $0xa80,%rsp
  0x00007fa5c5063338:   mov    (%rsp),%r15
  0x00007fa5c506333c:   mov    0x8(%rsp),%r14
  0x00007fa5c5063341:   mov    0x10(%rsp),%r13
  0x00007fa5c5063346:   mov    0x18(%rsp),%r12
  0x00007fa5c506334b:   mov    0x20(%rsp),%r11
  0x00007fa5c5063350:   mov    0x28(%rsp),%r10
  0x00007fa5c5063355:   mov    0x30(%rsp),%r9
  0x00007fa5c506335a:   mov    0x38(%rsp),%r8
  0x00007fa5c506335f:   mov    0x40(%rsp),%rdi
  0x00007fa5c5063364:   mov    0x48(%rsp),%rsi
  0x00007fa5c5063369:   mov    0x50(%rsp),%rbp
  0x00007fa5c506336e:   mov    0x60(%rsp),%rbx
  0x00007fa5c5063373:   mov    0x68(%rsp),%rdx
  0x00007fa5c5063378:   mov    0x70(%rsp),%rcx
  0x00007fa5c506337d:   mov    0x78(%rsp),%rax
  0x00007fa5c5063382:   add    $0x80,%rsp
  0x00007fa5c5063389:   add    $0x8,%rsp
  0x00007fa5c506338d:   popfq  
  0x00007fa5c506338e:   pop    %rbp
  0x00007fa5c506338f:   movq   $0x0,0x318(%r15)
  0x00007fa5c506339a:   mov    0x8(%r15),%rax
  0x00007fa5c506339e:   jmpq   0x00007fa5c5000c00
  0x00007fa5c50633a3:   hlt    
  0x00007fa5c50633a4:   hlt    
  0x00007fa5c50633a5:   hlt    
  0x00007fa5c50633a6:   hlt    
  0x00007fa5c50633a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - ic_miss_stub 0x00007fa5c5063490
--------------------------------------------------------------------------------
  0x00007fa5c5063500:   push   %rbp
  0x00007fa5c5063501:   mov    %rsp,%rbp
  0x00007fa5c5063504:   pushfq 
  0x00007fa5c5063505:   sub    $0x8,%rsp
  0x00007fa5c5063509:   sub    $0x80,%rsp
  0x00007fa5c5063510:   mov    %rax,0x78(%rsp)
  0x00007fa5c5063515:   mov    %rcx,0x70(%rsp)
  0x00007fa5c506351a:   mov    %rdx,0x68(%rsp)
  0x00007fa5c506351f:   mov    %rbx,0x60(%rsp)
  0x00007fa5c5063524:   mov    %rbp,0x50(%rsp)
  0x00007fa5c5063529:   mov    %rsi,0x48(%rsp)
  0x00007fa5c506352e:   mov    %rdi,0x40(%rsp)
  0x00007fa5c5063533:   mov    %r8,0x38(%rsp)
  0x00007fa5c5063538:   mov    %r9,0x30(%rsp)
  0x00007fa5c506353d:   mov    %r10,0x28(%rsp)
  0x00007fa5c5063542:   mov    %r11,0x20(%rsp)
  0x00007fa5c5063547:   mov    %r12,0x18(%rsp)
  0x00007fa5c506354c:   mov    %r13,0x10(%rsp)
  0x00007fa5c5063551:   mov    %r14,0x8(%rsp)
  0x00007fa5c5063556:   mov    %r15,(%rsp)
  0x00007fa5c506355a:   sub    $0xa80,%rsp
  0x00007fa5c5063561:   fxsave64 (%rsp)
  0x00007fa5c5063566:   vzeroupper 
  0x00007fa5c5063569:   vzeroupper 
  0x00007fa5c506356c:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5063573:   mov    %r15,%rdi
  0x00007fa5c5063576:   callq  0x00007fa5ce3f19a0 = SharedRuntime::handle_wrong_method_ic_miss(JavaThread*)
  0x00007fa5c506357b:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c5063586:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c5063591:   vzeroupper 
  0x00007fa5c5063594:   cmpq   $0x0,0x8(%r15)
  0x00007fa5c5063599:   jne    0x00007fa5c5063629
  0x00007fa5c506359f:   mov    0x320(%r15),%rbx
  0x00007fa5c50635a6:   movq   $0x0,0x320(%r15)
  0x00007fa5c50635b1:   mov    %rbx,0xae0(%rsp)
  0x00007fa5c50635b9:   mov    %rax,0xaf8(%rsp)
  0x00007fa5c50635c1:   vzeroupper 
  0x00007fa5c50635c4:   fxrstor64 (%rsp)
  0x00007fa5c50635c9:   add    $0xa80,%rsp
  0x00007fa5c50635d0:   mov    (%rsp),%r15
  0x00007fa5c50635d4:   mov    0x8(%rsp),%r14
  0x00007fa5c50635d9:   mov    0x10(%rsp),%r13
  0x00007fa5c50635de:   mov    0x18(%rsp),%r12
  0x00007fa5c50635e3:   mov    0x20(%rsp),%r11
  0x00007fa5c50635e8:   mov    0x28(%rsp),%r10
  0x00007fa5c50635ed:   mov    0x30(%rsp),%r9
  0x00007fa5c50635f2:   mov    0x38(%rsp),%r8
  0x00007fa5c50635f7:   mov    0x40(%rsp),%rdi
  0x00007fa5c50635fc:   mov    0x48(%rsp),%rsi
  0x00007fa5c5063601:   mov    0x50(%rsp),%rbp
  0x00007fa5c5063606:   mov    0x60(%rsp),%rbx
  0x00007fa5c506360b:   mov    0x68(%rsp),%rdx
  0x00007fa5c5063610:   mov    0x70(%rsp),%rcx
  0x00007fa5c5063615:   mov    0x78(%rsp),%rax
  0x00007fa5c506361a:   add    $0x80,%rsp
  0x00007fa5c5063621:   add    $0x8,%rsp
  0x00007fa5c5063625:   popfq  
  0x00007fa5c5063626:   pop    %rbp
  0x00007fa5c5063627:   jmpq   *%rax
  0x00007fa5c5063629:   vzeroupper 
  0x00007fa5c506362c:   fxrstor64 (%rsp)
  0x00007fa5c5063631:   add    $0xa80,%rsp
  0x00007fa5c5063638:   mov    (%rsp),%r15
  0x00007fa5c506363c:   mov    0x8(%rsp),%r14
  0x00007fa5c5063641:   mov    0x10(%rsp),%r13
  0x00007fa5c5063646:   mov    0x18(%rsp),%r12
  0x00007fa5c506364b:   mov    0x20(%rsp),%r11
  0x00007fa5c5063650:   mov    0x28(%rsp),%r10
  0x00007fa5c5063655:   mov    0x30(%rsp),%r9
  0x00007fa5c506365a:   mov    0x38(%rsp),%r8
  0x00007fa5c506365f:   mov    0x40(%rsp),%rdi
  0x00007fa5c5063664:   mov    0x48(%rsp),%rsi
  0x00007fa5c5063669:   mov    0x50(%rsp),%rbp
  0x00007fa5c506366e:   mov    0x60(%rsp),%rbx
  0x00007fa5c5063673:   mov    0x68(%rsp),%rdx
  0x00007fa5c5063678:   mov    0x70(%rsp),%rcx
  0x00007fa5c506367d:   mov    0x78(%rsp),%rax
  0x00007fa5c5063682:   add    $0x80,%rsp
  0x00007fa5c5063689:   add    $0x8,%rsp
  0x00007fa5c506368d:   popfq  
  0x00007fa5c506368e:   pop    %rbp
  0x00007fa5c506368f:   movq   $0x0,0x318(%r15)
  0x00007fa5c506369a:   mov    0x8(%r15),%rax
  0x00007fa5c506369e:   jmpq   0x00007fa5c5000c00
  0x00007fa5c50636a3:   hlt    
  0x00007fa5c50636a4:   hlt    
  0x00007fa5c50636a5:   hlt    
  0x00007fa5c50636a6:   hlt    
  0x00007fa5c50636a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_opt_virtual_call 0x00007fa5c5063790
--------------------------------------------------------------------------------
  0x00007fa5c5063800:   push   %rbp
  0x00007fa5c5063801:   mov    %rsp,%rbp
  0x00007fa5c5063804:   pushfq 
  0x00007fa5c5063805:   sub    $0x8,%rsp
  0x00007fa5c5063809:   sub    $0x80,%rsp
  0x00007fa5c5063810:   mov    %rax,0x78(%rsp)
  0x00007fa5c5063815:   mov    %rcx,0x70(%rsp)
  0x00007fa5c506381a:   mov    %rdx,0x68(%rsp)
  0x00007fa5c506381f:   mov    %rbx,0x60(%rsp)
  0x00007fa5c5063824:   mov    %rbp,0x50(%rsp)
  0x00007fa5c5063829:   mov    %rsi,0x48(%rsp)
  0x00007fa5c506382e:   mov    %rdi,0x40(%rsp)
  0x00007fa5c5063833:   mov    %r8,0x38(%rsp)
  0x00007fa5c5063838:   mov    %r9,0x30(%rsp)
  0x00007fa5c506383d:   mov    %r10,0x28(%rsp)
  0x00007fa5c5063842:   mov    %r11,0x20(%rsp)
  0x00007fa5c5063847:   mov    %r12,0x18(%rsp)
  0x00007fa5c506384c:   mov    %r13,0x10(%rsp)
  0x00007fa5c5063851:   mov    %r14,0x8(%rsp)
  0x00007fa5c5063856:   mov    %r15,(%rsp)
  0x00007fa5c506385a:   sub    $0xa80,%rsp
  0x00007fa5c5063861:   fxsave64 (%rsp)
  0x00007fa5c5063866:   vzeroupper 
  0x00007fa5c5063869:   vzeroupper 
  0x00007fa5c506386c:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5063873:   mov    %r15,%rdi
  0x00007fa5c5063876:   callq  0x00007fa5ce3f0730 = SharedRuntime::resolve_opt_virtual_call_C(JavaThread*)
  0x00007fa5c506387b:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c5063886:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c5063891:   vzeroupper 
  0x00007fa5c5063894:   cmpq   $0x0,0x8(%r15)
  0x00007fa5c5063899:   jne    0x00007fa5c5063929
  0x00007fa5c506389f:   mov    0x320(%r15),%rbx
  0x00007fa5c50638a6:   movq   $0x0,0x320(%r15)
  0x00007fa5c50638b1:   mov    %rbx,0xae0(%rsp)
  0x00007fa5c50638b9:   mov    %rax,0xaf8(%rsp)
  0x00007fa5c50638c1:   vzeroupper 
  0x00007fa5c50638c4:   fxrstor64 (%rsp)
  0x00007fa5c50638c9:   add    $0xa80,%rsp
  0x00007fa5c50638d0:   mov    (%rsp),%r15
  0x00007fa5c50638d4:   mov    0x8(%rsp),%r14
  0x00007fa5c50638d9:   mov    0x10(%rsp),%r13
  0x00007fa5c50638de:   mov    0x18(%rsp),%r12
  0x00007fa5c50638e3:   mov    0x20(%rsp),%r11
  0x00007fa5c50638e8:   mov    0x28(%rsp),%r10
  0x00007fa5c50638ed:   mov    0x30(%rsp),%r9
  0x00007fa5c50638f2:   mov    0x38(%rsp),%r8
  0x00007fa5c50638f7:   mov    0x40(%rsp),%rdi
  0x00007fa5c50638fc:   mov    0x48(%rsp),%rsi
  0x00007fa5c5063901:   mov    0x50(%rsp),%rbp
  0x00007fa5c5063906:   mov    0x60(%rsp),%rbx
  0x00007fa5c506390b:   mov    0x68(%rsp),%rdx
  0x00007fa5c5063910:   mov    0x70(%rsp),%rcx
  0x00007fa5c5063915:   mov    0x78(%rsp),%rax
  0x00007fa5c506391a:   add    $0x80,%rsp
  0x00007fa5c5063921:   add    $0x8,%rsp
  0x00007fa5c5063925:   popfq  
  0x00007fa5c5063926:   pop    %rbp
  0x00007fa5c5063927:   jmpq   *%rax
  0x00007fa5c5063929:   vzeroupper 
  0x00007fa5c506392c:   fxrstor64 (%rsp)
  0x00007fa5c5063931:   add    $0xa80,%rsp
  0x00007fa5c5063938:   mov    (%rsp),%r15
  0x00007fa5c506393c:   mov    0x8(%rsp),%r14
  0x00007fa5c5063941:   mov    0x10(%rsp),%r13
  0x00007fa5c5063946:   mov    0x18(%rsp),%r12
  0x00007fa5c506394b:   mov    0x20(%rsp),%r11
  0x00007fa5c5063950:   mov    0x28(%rsp),%r10
  0x00007fa5c5063955:   mov    0x30(%rsp),%r9
  0x00007fa5c506395a:   mov    0x38(%rsp),%r8
  0x00007fa5c506395f:   mov    0x40(%rsp),%rdi
  0x00007fa5c5063964:   mov    0x48(%rsp),%rsi
  0x00007fa5c5063969:   mov    0x50(%rsp),%rbp
  0x00007fa5c506396e:   mov    0x60(%rsp),%rbx
  0x00007fa5c5063973:   mov    0x68(%rsp),%rdx
  0x00007fa5c5063978:   mov    0x70(%rsp),%rcx
  0x00007fa5c506397d:   mov    0x78(%rsp),%rax
  0x00007fa5c5063982:   add    $0x80,%rsp
  0x00007fa5c5063989:   add    $0x8,%rsp
  0x00007fa5c506398d:   popfq  
  0x00007fa5c506398e:   pop    %rbp
  0x00007fa5c506398f:   movq   $0x0,0x318(%r15)
  0x00007fa5c506399a:   mov    0x8(%r15),%rax
  0x00007fa5c506399e:   jmpq   0x00007fa5c5000c00
  0x00007fa5c50639a3:   hlt    
  0x00007fa5c50639a4:   hlt    
  0x00007fa5c50639a5:   hlt    
  0x00007fa5c50639a6:   hlt    
  0x00007fa5c50639a7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_virtual_call 0x00007fa5c5063a90
--------------------------------------------------------------------------------
  0x00007fa5c5063b00:   push   %rbp
  0x00007fa5c5063b01:   mov    %rsp,%rbp
  0x00007fa5c5063b04:   pushfq 
  0x00007fa5c5063b05:   sub    $0x8,%rsp
  0x00007fa5c5063b09:   sub    $0x80,%rsp
  0x00007fa5c5063b10:   mov    %rax,0x78(%rsp)
  0x00007fa5c5063b15:   mov    %rcx,0x70(%rsp)
  0x00007fa5c5063b1a:   mov    %rdx,0x68(%rsp)
  0x00007fa5c5063b1f:   mov    %rbx,0x60(%rsp)
  0x00007fa5c5063b24:   mov    %rbp,0x50(%rsp)
  0x00007fa5c5063b29:   mov    %rsi,0x48(%rsp)
  0x00007fa5c5063b2e:   mov    %rdi,0x40(%rsp)
  0x00007fa5c5063b33:   mov    %r8,0x38(%rsp)
  0x00007fa5c5063b38:   mov    %r9,0x30(%rsp)
  0x00007fa5c5063b3d:   mov    %r10,0x28(%rsp)
  0x00007fa5c5063b42:   mov    %r11,0x20(%rsp)
  0x00007fa5c5063b47:   mov    %r12,0x18(%rsp)
  0x00007fa5c5063b4c:   mov    %r13,0x10(%rsp)
  0x00007fa5c5063b51:   mov    %r14,0x8(%rsp)
  0x00007fa5c5063b56:   mov    %r15,(%rsp)
  0x00007fa5c5063b5a:   sub    $0xa80,%rsp
  0x00007fa5c5063b61:   fxsave64 (%rsp)
  0x00007fa5c5063b66:   vzeroupper 
  0x00007fa5c5063b69:   vzeroupper 
  0x00007fa5c5063b6c:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5063b73:   mov    %r15,%rdi
  0x00007fa5c5063b76:   callq  0x00007fa5ce3f0570 = SharedRuntime::resolve_virtual_call_C(JavaThread*)
  0x00007fa5c5063b7b:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c5063b86:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c5063b91:   vzeroupper 
  0x00007fa5c5063b94:   cmpq   $0x0,0x8(%r15)
  0x00007fa5c5063b99:   jne    0x00007fa5c5063c29
  0x00007fa5c5063b9f:   mov    0x320(%r15),%rbx
  0x00007fa5c5063ba6:   movq   $0x0,0x320(%r15)
  0x00007fa5c5063bb1:   mov    %rbx,0xae0(%rsp)
  0x00007fa5c5063bb9:   mov    %rax,0xaf8(%rsp)
  0x00007fa5c5063bc1:   vzeroupper 
  0x00007fa5c5063bc4:   fxrstor64 (%rsp)
  0x00007fa5c5063bc9:   add    $0xa80,%rsp
  0x00007fa5c5063bd0:   mov    (%rsp),%r15
  0x00007fa5c5063bd4:   mov    0x8(%rsp),%r14
  0x00007fa5c5063bd9:   mov    0x10(%rsp),%r13
  0x00007fa5c5063bde:   mov    0x18(%rsp),%r12
  0x00007fa5c5063be3:   mov    0x20(%rsp),%r11
  0x00007fa5c5063be8:   mov    0x28(%rsp),%r10
  0x00007fa5c5063bed:   mov    0x30(%rsp),%r9
  0x00007fa5c5063bf2:   mov    0x38(%rsp),%r8
  0x00007fa5c5063bf7:   mov    0x40(%rsp),%rdi
  0x00007fa5c5063bfc:   mov    0x48(%rsp),%rsi
  0x00007fa5c5063c01:   mov    0x50(%rsp),%rbp
  0x00007fa5c5063c06:   mov    0x60(%rsp),%rbx
  0x00007fa5c5063c0b:   mov    0x68(%rsp),%rdx
  0x00007fa5c5063c10:   mov    0x70(%rsp),%rcx
  0x00007fa5c5063c15:   mov    0x78(%rsp),%rax
  0x00007fa5c5063c1a:   add    $0x80,%rsp
  0x00007fa5c5063c21:   add    $0x8,%rsp
  0x00007fa5c5063c25:   popfq  
  0x00007fa5c5063c26:   pop    %rbp
  0x00007fa5c5063c27:   jmpq   *%rax
  0x00007fa5c5063c29:   vzeroupper 
  0x00007fa5c5063c2c:   fxrstor64 (%rsp)
  0x00007fa5c5063c31:   add    $0xa80,%rsp
  0x00007fa5c5063c38:   mov    (%rsp),%r15
  0x00007fa5c5063c3c:   mov    0x8(%rsp),%r14
  0x00007fa5c5063c41:   mov    0x10(%rsp),%r13
  0x00007fa5c5063c46:   mov    0x18(%rsp),%r12
  0x00007fa5c5063c4b:   mov    0x20(%rsp),%r11
  0x00007fa5c5063c50:   mov    0x28(%rsp),%r10
  0x00007fa5c5063c55:   mov    0x30(%rsp),%r9
  0x00007fa5c5063c5a:   mov    0x38(%rsp),%r8
  0x00007fa5c5063c5f:   mov    0x40(%rsp),%rdi
  0x00007fa5c5063c64:   mov    0x48(%rsp),%rsi
  0x00007fa5c5063c69:   mov    0x50(%rsp),%rbp
  0x00007fa5c5063c6e:   mov    0x60(%rsp),%rbx
  0x00007fa5c5063c73:   mov    0x68(%rsp),%rdx
  0x00007fa5c5063c78:   mov    0x70(%rsp),%rcx
  0x00007fa5c5063c7d:   mov    0x78(%rsp),%rax
  0x00007fa5c5063c82:   add    $0x80,%rsp
  0x00007fa5c5063c89:   add    $0x8,%rsp
  0x00007fa5c5063c8d:   popfq  
  0x00007fa5c5063c8e:   pop    %rbp
  0x00007fa5c5063c8f:   movq   $0x0,0x318(%r15)
  0x00007fa5c5063c9a:   mov    0x8(%r15),%rax
  0x00007fa5c5063c9e:   jmpq   0x00007fa5c5000c00
  0x00007fa5c5063ca3:   hlt    
  0x00007fa5c5063ca4:   hlt    
  0x00007fa5c5063ca5:   hlt    
  0x00007fa5c5063ca6:   hlt    
  0x00007fa5c5063ca7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - resolve_static_call 0x00007fa5c5063d90
--------------------------------------------------------------------------------
  0x00007fa5c5063e00:   push   %rbp
  0x00007fa5c5063e01:   mov    %rsp,%rbp
  0x00007fa5c5063e04:   pushfq 
  0x00007fa5c5063e05:   sub    $0x8,%rsp
  0x00007fa5c5063e09:   sub    $0x80,%rsp
  0x00007fa5c5063e10:   mov    %rax,0x78(%rsp)
  0x00007fa5c5063e15:   mov    %rcx,0x70(%rsp)
  0x00007fa5c5063e1a:   mov    %rdx,0x68(%rsp)
  0x00007fa5c5063e1f:   mov    %rbx,0x60(%rsp)
  0x00007fa5c5063e24:   mov    %rbp,0x50(%rsp)
  0x00007fa5c5063e29:   mov    %rsi,0x48(%rsp)
  0x00007fa5c5063e2e:   mov    %rdi,0x40(%rsp)
  0x00007fa5c5063e33:   mov    %r8,0x38(%rsp)
  0x00007fa5c5063e38:   mov    %r9,0x30(%rsp)
  0x00007fa5c5063e3d:   mov    %r10,0x28(%rsp)
  0x00007fa5c5063e42:   mov    %r11,0x20(%rsp)
  0x00007fa5c5063e47:   mov    %r12,0x18(%rsp)
  0x00007fa5c5063e4c:   mov    %r13,0x10(%rsp)
  0x00007fa5c5063e51:   mov    %r14,0x8(%rsp)
  0x00007fa5c5063e56:   mov    %r15,(%rsp)
  0x00007fa5c5063e5a:   sub    $0xa80,%rsp
  0x00007fa5c5063e61:   fxsave64 (%rsp)
  0x00007fa5c5063e66:   vzeroupper 
  0x00007fa5c5063e69:   vzeroupper 
  0x00007fa5c5063e6c:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5063e73:   mov    %r15,%rdi
  0x00007fa5c5063e76:   callq  0x00007fa5ce3f02e0 = SharedRuntime::resolve_static_call_C(JavaThread*)
  0x00007fa5c5063e7b:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c5063e86:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c5063e91:   vzeroupper 
  0x00007fa5c5063e94:   cmpq   $0x0,0x8(%r15)
  0x00007fa5c5063e99:   jne    0x00007fa5c5063f29
  0x00007fa5c5063e9f:   mov    0x320(%r15),%rbx
  0x00007fa5c5063ea6:   movq   $0x0,0x320(%r15)
  0x00007fa5c5063eb1:   mov    %rbx,0xae0(%rsp)
  0x00007fa5c5063eb9:   mov    %rax,0xaf8(%rsp)
  0x00007fa5c5063ec1:   vzeroupper 
  0x00007fa5c5063ec4:   fxrstor64 (%rsp)
  0x00007fa5c5063ec9:   add    $0xa80,%rsp
  0x00007fa5c5063ed0:   mov    (%rsp),%r15
  0x00007fa5c5063ed4:   mov    0x8(%rsp),%r14
  0x00007fa5c5063ed9:   mov    0x10(%rsp),%r13
  0x00007fa5c5063ede:   mov    0x18(%rsp),%r12
  0x00007fa5c5063ee3:   mov    0x20(%rsp),%r11
  0x00007fa5c5063ee8:   mov    0x28(%rsp),%r10
  0x00007fa5c5063eed:   mov    0x30(%rsp),%r9
  0x00007fa5c5063ef2:   mov    0x38(%rsp),%r8
  0x00007fa5c5063ef7:   mov    0x40(%rsp),%rdi
  0x00007fa5c5063efc:   mov    0x48(%rsp),%rsi
  0x00007fa5c5063f01:   mov    0x50(%rsp),%rbp
  0x00007fa5c5063f06:   mov    0x60(%rsp),%rbx
  0x00007fa5c5063f0b:   mov    0x68(%rsp),%rdx
  0x00007fa5c5063f10:   mov    0x70(%rsp),%rcx
  0x00007fa5c5063f15:   mov    0x78(%rsp),%rax
  0x00007fa5c5063f1a:   add    $0x80,%rsp
  0x00007fa5c5063f21:   add    $0x8,%rsp
  0x00007fa5c5063f25:   popfq  
  0x00007fa5c5063f26:   pop    %rbp
  0x00007fa5c5063f27:   jmpq   *%rax
  0x00007fa5c5063f29:   vzeroupper 
  0x00007fa5c5063f2c:   fxrstor64 (%rsp)
  0x00007fa5c5063f31:   add    $0xa80,%rsp
  0x00007fa5c5063f38:   mov    (%rsp),%r15
  0x00007fa5c5063f3c:   mov    0x8(%rsp),%r14
  0x00007fa5c5063f41:   mov    0x10(%rsp),%r13
  0x00007fa5c5063f46:   mov    0x18(%rsp),%r12
  0x00007fa5c5063f4b:   mov    0x20(%rsp),%r11
  0x00007fa5c5063f50:   mov    0x28(%rsp),%r10
  0x00007fa5c5063f55:   mov    0x30(%rsp),%r9
  0x00007fa5c5063f5a:   mov    0x38(%rsp),%r8
  0x00007fa5c5063f5f:   mov    0x40(%rsp),%rdi
  0x00007fa5c5063f64:   mov    0x48(%rsp),%rsi
  0x00007fa5c5063f69:   mov    0x50(%rsp),%rbp
  0x00007fa5c5063f6e:   mov    0x60(%rsp),%rbx
  0x00007fa5c5063f73:   mov    0x68(%rsp),%rdx
  0x00007fa5c5063f78:   mov    0x70(%rsp),%rcx
  0x00007fa5c5063f7d:   mov    0x78(%rsp),%rax
  0x00007fa5c5063f82:   add    $0x80,%rsp
  0x00007fa5c5063f89:   add    $0x8,%rsp
  0x00007fa5c5063f8d:   popfq  
  0x00007fa5c5063f8e:   pop    %rbp
  0x00007fa5c5063f8f:   movq   $0x0,0x318(%r15)
  0x00007fa5c5063f9a:   mov    0x8(%r15),%rax
  0x00007fa5c5063f9e:   jmpq   0x00007fa5c5000c00
  0x00007fa5c5063fa3:   hlt    
  0x00007fa5c5063fa4:   hlt    
  0x00007fa5c5063fa5:   hlt    
  0x00007fa5c5063fa6:   hlt    
  0x00007fa5c5063fa7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007fa5c5069c90
--------------------------------------------------------------------------------
  0x00007fa5c5069d00:   push   %rbx
  0x00007fa5c5069d01:   push   %rbp
  0x00007fa5c5069d02:   mov    %rsp,%rbp
  0x00007fa5c5069d05:   pushfq 
  0x00007fa5c5069d06:   sub    $0x8,%rsp
  0x00007fa5c5069d0a:   sub    $0x80,%rsp
  0x00007fa5c5069d11:   mov    %rax,0x78(%rsp)
  0x00007fa5c5069d16:   mov    %rcx,0x70(%rsp)
  0x00007fa5c5069d1b:   mov    %rdx,0x68(%rsp)
  0x00007fa5c5069d20:   mov    %rbx,0x60(%rsp)
  0x00007fa5c5069d25:   mov    %rbp,0x50(%rsp)
  0x00007fa5c5069d2a:   mov    %rsi,0x48(%rsp)
  0x00007fa5c5069d2f:   mov    %rdi,0x40(%rsp)
  0x00007fa5c5069d34:   mov    %r8,0x38(%rsp)
  0x00007fa5c5069d39:   mov    %r9,0x30(%rsp)
  0x00007fa5c5069d3e:   mov    %r10,0x28(%rsp)
  0x00007fa5c5069d43:   mov    %r11,0x20(%rsp)
  0x00007fa5c5069d48:   mov    %r12,0x18(%rsp)
  0x00007fa5c5069d4d:   mov    %r13,0x10(%rsp)
  0x00007fa5c5069d52:   mov    %r14,0x8(%rsp)
  0x00007fa5c5069d57:   mov    %r15,(%rsp)
  0x00007fa5c5069d5b:   sub    $0xa80,%rsp
  0x00007fa5c5069d62:   fxsave64 (%rsp)
  0x00007fa5c5069d67:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007fa5c5069d72:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007fa5c5069d7d:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007fa5c5069d88:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007fa5c5069d93:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007fa5c5069d9e:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007fa5c5069da9:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007fa5c5069db4:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007fa5c5069dbf:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007fa5c5069dca:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007fa5c5069dd5:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007fa5c5069de0:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007fa5c5069deb:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007fa5c5069df6:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007fa5c5069e01:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007fa5c5069e0c:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007fa5c5069e17:   vzeroupper 
  0x00007fa5c5069e1a:   vzeroupper 
  0x00007fa5c5069e1d:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5069e24:   mov    0x390(%r15),%rbx
  0x00007fa5c5069e2b:   mov    %rbx,0x8(%rbp)
  0x00007fa5c5069e2f:   mov    %r15,%rdi
  0x00007fa5c5069e32:   callq  0x00007fa5ce3dd2e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007fa5c5069e37:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c5069e42:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c5069e4d:   vzeroupper 
  0x00007fa5c5069e50:   cmpq   $0x0,0x8(%r15)
  0x00007fa5c5069e55:   je     0x00007fa5c5069f76
  0x00007fa5c5069e5b:   vzeroupper 
  0x00007fa5c5069e5e:   vinsertf128 $0x1,0x240(%rsp),%ymm0,%ymm0
  0x00007fa5c5069e69:   vinsertf128 $0x1,0x250(%rsp),%ymm1,%ymm1
  0x00007fa5c5069e74:   vinsertf128 $0x1,0x260(%rsp),%ymm2,%ymm2
  0x00007fa5c5069e7f:   vinsertf128 $0x1,0x270(%rsp),%ymm3,%ymm3
  0x00007fa5c5069e8a:   vinsertf128 $0x1,0x280(%rsp),%ymm4,%ymm4
  0x00007fa5c5069e95:   vinsertf128 $0x1,0x290(%rsp),%ymm5,%ymm5
  0x00007fa5c5069ea0:   vinsertf128 $0x1,0x2a0(%rsp),%ymm6,%ymm6
  0x00007fa5c5069eab:   vinsertf128 $0x1,0x2b0(%rsp),%ymm7,%ymm7
  0x00007fa5c5069eb6:   vinsertf128 $0x1,0x2c0(%rsp),%ymm8,%ymm8
  0x00007fa5c5069ec1:   vinsertf128 $0x1,0x2d0(%rsp),%ymm9,%ymm9
  0x00007fa5c5069ecc:   vinsertf128 $0x1,0x2e0(%rsp),%ymm10,%ymm10
  0x00007fa5c5069ed7:   vinsertf128 $0x1,0x2f0(%rsp),%ymm11,%ymm11
  0x00007fa5c5069ee2:   vinsertf128 $0x1,0x300(%rsp),%ymm12,%ymm12
  0x00007fa5c5069eed:   vinsertf128 $0x1,0x310(%rsp),%ymm13,%ymm13
  0x00007fa5c5069ef8:   vinsertf128 $0x1,0x320(%rsp),%ymm14,%ymm14
  0x00007fa5c5069f03:   vinsertf128 $0x1,0x330(%rsp),%ymm15,%ymm15
  0x00007fa5c5069f0e:   fxrstor64 (%rsp)
  0x00007fa5c5069f13:   add    $0xa80,%rsp
  0x00007fa5c5069f1a:   mov    (%rsp),%r15
  0x00007fa5c5069f1e:   mov    0x8(%rsp),%r14
  0x00007fa5c5069f23:   mov    0x10(%rsp),%r13
  0x00007fa5c5069f28:   mov    0x18(%rsp),%r12
  0x00007fa5c5069f2d:   mov    0x20(%rsp),%r11
  0x00007fa5c5069f32:   mov    0x28(%rsp),%r10
  0x00007fa5c5069f37:   mov    0x30(%rsp),%r9
  0x00007fa5c5069f3c:   mov    0x38(%rsp),%r8
  0x00007fa5c5069f41:   mov    0x40(%rsp),%rdi
  0x00007fa5c5069f46:   mov    0x48(%rsp),%rsi
  0x00007fa5c5069f4b:   mov    0x50(%rsp),%rbp
  0x00007fa5c5069f50:   mov    0x60(%rsp),%rbx
  0x00007fa5c5069f55:   mov    0x68(%rsp),%rdx
  0x00007fa5c5069f5a:   mov    0x70(%rsp),%rcx
  0x00007fa5c5069f5f:   mov    0x78(%rsp),%rax
  0x00007fa5c5069f64:   add    $0x80,%rsp
  0x00007fa5c5069f6b:   add    $0x8,%rsp
  0x00007fa5c5069f6f:   popfq  
  0x00007fa5c5069f70:   pop    %rbp
  0x00007fa5c5069f71:   jmpq   0x00007fa5c5000c00
  0x00007fa5c5069f76:   cmp    0x8(%rbp),%rbx
  0x00007fa5c5069f7a:   jne    0x00007fa5c5069fac
  0x00007fa5c5069f7c:   cmpb   $0x41,(%rbx)
  0x00007fa5c5069f7f:   jne    0x00007fa5c5069f89
  0x00007fa5c5069f85:   add    $0x1,%rbx
  0x00007fa5c5069f89:   movzbq 0x1(%rbx),%rcx
  0x00007fa5c5069f8e:   and    $0x7,%rcx
  0x00007fa5c5069f92:   sub    $0x4,%rcx
  0x00007fa5c5069f96:   cmp    $0x1,%rcx
  0x00007fa5c5069f9a:   ja     0x00007fa5c5069fa4
  0x00007fa5c5069fa0:   add    $0x1,%rbx
  0x00007fa5c5069fa4:   add    $0x2,%rbx
  0x00007fa5c5069fa8:   mov    %rbx,0x8(%rbp)
  0x00007fa5c5069fac:   vzeroupper 
  0x00007fa5c5069faf:   vinsertf128 $0x1,0x240(%rsp),%ymm0,%ymm0
  0x00007fa5c5069fba:   vinsertf128 $0x1,0x250(%rsp),%ymm1,%ymm1
  0x00007fa5c5069fc5:   vinsertf128 $0x1,0x260(%rsp),%ymm2,%ymm2
  0x00007fa5c5069fd0:   vinsertf128 $0x1,0x270(%rsp),%ymm3,%ymm3
  0x00007fa5c5069fdb:   vinsertf128 $0x1,0x280(%rsp),%ymm4,%ymm4
  0x00007fa5c5069fe6:   vinsertf128 $0x1,0x290(%rsp),%ymm5,%ymm5
  0x00007fa5c5069ff1:   vinsertf128 $0x1,0x2a0(%rsp),%ymm6,%ymm6
  0x00007fa5c5069ffc:   vinsertf128 $0x1,0x2b0(%rsp),%ymm7,%ymm7
  0x00007fa5c506a007:   vinsertf128 $0x1,0x2c0(%rsp),%ymm8,%ymm8
  0x00007fa5c506a012:   vinsertf128 $0x1,0x2d0(%rsp),%ymm9,%ymm9
  0x00007fa5c506a01d:   vinsertf128 $0x1,0x2e0(%rsp),%ymm10,%ymm10
  0x00007fa5c506a028:   vinsertf128 $0x1,0x2f0(%rsp),%ymm11,%ymm11
  0x00007fa5c506a033:   vinsertf128 $0x1,0x300(%rsp),%ymm12,%ymm12
  0x00007fa5c506a03e:   vinsertf128 $0x1,0x310(%rsp),%ymm13,%ymm13
  0x00007fa5c506a049:   vinsertf128 $0x1,0x320(%rsp),%ymm14,%ymm14
  0x00007fa5c506a054:   vinsertf128 $0x1,0x330(%rsp),%ymm15,%ymm15
  0x00007fa5c506a05f:   fxrstor64 (%rsp)
  0x00007fa5c506a064:   add    $0xa80,%rsp
  0x00007fa5c506a06b:   mov    (%rsp),%r15
  0x00007fa5c506a06f:   mov    0x8(%rsp),%r14
  0x00007fa5c506a074:   mov    0x10(%rsp),%r13
  0x00007fa5c506a079:   mov    0x18(%rsp),%r12
  0x00007fa5c506a07e:   mov    0x20(%rsp),%r11
  0x00007fa5c506a083:   mov    0x28(%rsp),%r10
  0x00007fa5c506a088:   mov    0x30(%rsp),%r9
  0x00007fa5c506a08d:   mov    0x38(%rsp),%r8
  0x00007fa5c506a092:   mov    0x40(%rsp),%rdi
  0x00007fa5c506a097:   mov    0x48(%rsp),%rsi
  0x00007fa5c506a09c:   mov    0x50(%rsp),%rbp
  0x00007fa5c506a0a1:   mov    0x60(%rsp),%rbx
  0x00007fa5c506a0a6:   mov    0x68(%rsp),%rdx
  0x00007fa5c506a0ab:   mov    0x70(%rsp),%rcx
  0x00007fa5c506a0b0:   mov    0x78(%rsp),%rax
  0x00007fa5c506a0b5:   add    $0x80,%rsp
  0x00007fa5c506a0bc:   add    $0x8,%rsp
  0x00007fa5c506a0c0:   popfq  
  0x00007fa5c506a0c1:   pop    %rbp
  0x00007fa5c506a0c2:   retq   
  0x00007fa5c506a0c3:   hlt    
  0x00007fa5c506a0c4:   hlt    
  0x00007fa5c506a0c5:   hlt    
  0x00007fa5c506a0c6:   hlt    
  0x00007fa5c506a0c7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [576]=Callers_xmm0 [592]=Callers_xmm1 [608]=Callers_xmm2 [624]=Callers_xmm3 [640]=Callers_xmm4 [656]=Callers_xmm5 [672]=Callers_xmm6 [688]=Callers_xmm7 [704]=Callers_xmm8 [720]=Callers_xmm9 [736]=Callers_xmm10 [752]=Callers_xmm11 [768]=Callers_xmm12 [784]=Callers_xmm13 [800]=Callers_xmm14 [816]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 311 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007fa5c506a110
--------------------------------------------------------------------------------
  0x00007fa5c506a180:   push   %rbx
  0x00007fa5c506a181:   push   %rbp
  0x00007fa5c506a182:   mov    %rsp,%rbp
  0x00007fa5c506a185:   pushfq 
  0x00007fa5c506a186:   sub    $0x8,%rsp
  0x00007fa5c506a18a:   sub    $0x80,%rsp
  0x00007fa5c506a191:   mov    %rax,0x78(%rsp)
  0x00007fa5c506a196:   mov    %rcx,0x70(%rsp)
  0x00007fa5c506a19b:   mov    %rdx,0x68(%rsp)
  0x00007fa5c506a1a0:   mov    %rbx,0x60(%rsp)
  0x00007fa5c506a1a5:   mov    %rbp,0x50(%rsp)
  0x00007fa5c506a1aa:   mov    %rsi,0x48(%rsp)
  0x00007fa5c506a1af:   mov    %rdi,0x40(%rsp)
  0x00007fa5c506a1b4:   mov    %r8,0x38(%rsp)
  0x00007fa5c506a1b9:   mov    %r9,0x30(%rsp)
  0x00007fa5c506a1be:   mov    %r10,0x28(%rsp)
  0x00007fa5c506a1c3:   mov    %r11,0x20(%rsp)
  0x00007fa5c506a1c8:   mov    %r12,0x18(%rsp)
  0x00007fa5c506a1cd:   mov    %r13,0x10(%rsp)
  0x00007fa5c506a1d2:   mov    %r14,0x8(%rsp)
  0x00007fa5c506a1d7:   mov    %r15,(%rsp)
  0x00007fa5c506a1db:   sub    $0xa80,%rsp
  0x00007fa5c506a1e2:   fxsave64 (%rsp)
  0x00007fa5c506a1e7:   vzeroupper 
  0x00007fa5c506a1ea:   vzeroupper 
  0x00007fa5c506a1ed:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c506a1f4:   mov    0x390(%r15),%rbx
  0x00007fa5c506a1fb:   mov    %rbx,0x8(%rbp)
  0x00007fa5c506a1ff:   mov    %r15,%rdi
  0x00007fa5c506a202:   callq  0x00007fa5ce3dd2e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007fa5c506a207:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c506a212:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c506a21d:   vzeroupper 
  0x00007fa5c506a220:   cmpq   $0x0,0x8(%r15)
  0x00007fa5c506a225:   je     0x00007fa5c506a296
  0x00007fa5c506a22b:   vzeroupper 
  0x00007fa5c506a22e:   fxrstor64 (%rsp)
  0x00007fa5c506a233:   add    $0xa80,%rsp
  0x00007fa5c506a23a:   mov    (%rsp),%r15
  0x00007fa5c506a23e:   mov    0x8(%rsp),%r14
  0x00007fa5c506a243:   mov    0x10(%rsp),%r13
  0x00007fa5c506a248:   mov    0x18(%rsp),%r12
  0x00007fa5c506a24d:   mov    0x20(%rsp),%r11
  0x00007fa5c506a252:   mov    0x28(%rsp),%r10
  0x00007fa5c506a257:   mov    0x30(%rsp),%r9
  0x00007fa5c506a25c:   mov    0x38(%rsp),%r8
  0x00007fa5c506a261:   mov    0x40(%rsp),%rdi
  0x00007fa5c506a266:   mov    0x48(%rsp),%rsi
  0x00007fa5c506a26b:   mov    0x50(%rsp),%rbp
  0x00007fa5c506a270:   mov    0x60(%rsp),%rbx
  0x00007fa5c506a275:   mov    0x68(%rsp),%rdx
  0x00007fa5c506a27a:   mov    0x70(%rsp),%rcx
  0x00007fa5c506a27f:   mov    0x78(%rsp),%rax
  0x00007fa5c506a284:   add    $0x80,%rsp
  0x00007fa5c506a28b:   add    $0x8,%rsp
  0x00007fa5c506a28f:   popfq  
  0x00007fa5c506a290:   pop    %rbp
  0x00007fa5c506a291:   jmpq   0x00007fa5c5000c00
  0x00007fa5c506a296:   cmp    0x8(%rbp),%rbx
  0x00007fa5c506a29a:   jne    0x00007fa5c506a2cc
  0x00007fa5c506a29c:   cmpb   $0x41,(%rbx)
  0x00007fa5c506a29f:   jne    0x00007fa5c506a2a9
  0x00007fa5c506a2a5:   add    $0x1,%rbx
  0x00007fa5c506a2a9:   movzbq 0x1(%rbx),%rcx
  0x00007fa5c506a2ae:   and    $0x7,%rcx
  0x00007fa5c506a2b2:   sub    $0x4,%rcx
  0x00007fa5c506a2b6:   cmp    $0x1,%rcx
  0x00007fa5c506a2ba:   ja     0x00007fa5c506a2c4
  0x00007fa5c506a2c0:   add    $0x1,%rbx
  0x00007fa5c506a2c4:   add    $0x2,%rbx
  0x00007fa5c506a2c8:   mov    %rbx,0x8(%rbp)
  0x00007fa5c506a2cc:   vzeroupper 
  0x00007fa5c506a2cf:   fxrstor64 (%rsp)
  0x00007fa5c506a2d4:   add    $0xa80,%rsp
  0x00007fa5c506a2db:   mov    (%rsp),%r15
  0x00007fa5c506a2df:   mov    0x8(%rsp),%r14
  0x00007fa5c506a2e4:   mov    0x10(%rsp),%r13
  0x00007fa5c506a2e9:   mov    0x18(%rsp),%r12
  0x00007fa5c506a2ee:   mov    0x20(%rsp),%r11
  0x00007fa5c506a2f3:   mov    0x28(%rsp),%r10
  0x00007fa5c506a2f8:   mov    0x30(%rsp),%r9
  0x00007fa5c506a2fd:   mov    0x38(%rsp),%r8
  0x00007fa5c506a302:   mov    0x40(%rsp),%rdi
  0x00007fa5c506a307:   mov    0x48(%rsp),%rsi
  0x00007fa5c506a30c:   mov    0x50(%rsp),%rbp
  0x00007fa5c506a311:   mov    0x60(%rsp),%rbx
  0x00007fa5c506a316:   mov    0x68(%rsp),%rdx
  0x00007fa5c506a31b:   mov    0x70(%rsp),%rcx
  0x00007fa5c506a320:   mov    0x78(%rsp),%rax
  0x00007fa5c506a325:   add    $0x80,%rsp
  0x00007fa5c506a32c:   add    $0x8,%rsp
  0x00007fa5c506a330:   popfq  
  0x00007fa5c506a331:   pop    %rbp
  0x00007fa5c506a332:   retq   
  0x00007fa5c506a333:   hlt    
  0x00007fa5c506a334:   hlt    
  0x00007fa5c506a335:   hlt    
  0x00007fa5c506a336:   hlt    
  0x00007fa5c506a337:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 135 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding SafepointBlob 0x00007fa5c506a410
--------------------------------------------------------------------------------
  0x00007fa5c506a480:   push   %rbp
  0x00007fa5c506a481:   mov    %rsp,%rbp
  0x00007fa5c506a484:   pushfq 
  0x00007fa5c506a485:   sub    $0x8,%rsp
  0x00007fa5c506a489:   sub    $0x80,%rsp
  0x00007fa5c506a490:   mov    %rax,0x78(%rsp)
  0x00007fa5c506a495:   mov    %rcx,0x70(%rsp)
  0x00007fa5c506a49a:   mov    %rdx,0x68(%rsp)
  0x00007fa5c506a49f:   mov    %rbx,0x60(%rsp)
  0x00007fa5c506a4a4:   mov    %rbp,0x50(%rsp)
  0x00007fa5c506a4a9:   mov    %rsi,0x48(%rsp)
  0x00007fa5c506a4ae:   mov    %rdi,0x40(%rsp)
  0x00007fa5c506a4b3:   mov    %r8,0x38(%rsp)
  0x00007fa5c506a4b8:   mov    %r9,0x30(%rsp)
  0x00007fa5c506a4bd:   mov    %r10,0x28(%rsp)
  0x00007fa5c506a4c2:   mov    %r11,0x20(%rsp)
  0x00007fa5c506a4c7:   mov    %r12,0x18(%rsp)
  0x00007fa5c506a4cc:   mov    %r13,0x10(%rsp)
  0x00007fa5c506a4d1:   mov    %r14,0x8(%rsp)
  0x00007fa5c506a4d6:   mov    %r15,(%rsp)
  0x00007fa5c506a4da:   sub    $0xa80,%rsp
  0x00007fa5c506a4e1:   fxsave64 (%rsp)
  0x00007fa5c506a4e6:   vzeroupper 
  0x00007fa5c506a4e9:   vzeroupper 
  0x00007fa5c506a4ec:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c506a4f3:   mov    %r15,%rdi
  0x00007fa5c506a4f6:   callq  0x00007fa5ce3dd2e0 = SafepointSynchronize::handle_polling_page_exception(JavaThread*)
  0x00007fa5c506a4fb:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c506a506:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c506a511:   vzeroupper 
  0x00007fa5c506a514:   cmpq   $0x0,0x8(%r15)
  0x00007fa5c506a519:   je     0x00007fa5c506a58a
  0x00007fa5c506a51f:   vzeroupper 
  0x00007fa5c506a522:   fxrstor64 (%rsp)
  0x00007fa5c506a527:   add    $0xa80,%rsp
  0x00007fa5c506a52e:   mov    (%rsp),%r15
  0x00007fa5c506a532:   mov    0x8(%rsp),%r14
  0x00007fa5c506a537:   mov    0x10(%rsp),%r13
  0x00007fa5c506a53c:   mov    0x18(%rsp),%r12
  0x00007fa5c506a541:   mov    0x20(%rsp),%r11
  0x00007fa5c506a546:   mov    0x28(%rsp),%r10
  0x00007fa5c506a54b:   mov    0x30(%rsp),%r9
  0x00007fa5c506a550:   mov    0x38(%rsp),%r8
  0x00007fa5c506a555:   mov    0x40(%rsp),%rdi
  0x00007fa5c506a55a:   mov    0x48(%rsp),%rsi
  0x00007fa5c506a55f:   mov    0x50(%rsp),%rbp
  0x00007fa5c506a564:   mov    0x60(%rsp),%rbx
  0x00007fa5c506a569:   mov    0x68(%rsp),%rdx
  0x00007fa5c506a56e:   mov    0x70(%rsp),%rcx
  0x00007fa5c506a573:   mov    0x78(%rsp),%rax
  0x00007fa5c506a578:   add    $0x80,%rsp
  0x00007fa5c506a57f:   add    $0x8,%rsp
  0x00007fa5c506a583:   popfq  
  0x00007fa5c506a584:   pop    %rbp
  0x00007fa5c506a585:   jmpq   0x00007fa5c5000c00
  0x00007fa5c506a58a:   vzeroupper 
  0x00007fa5c506a58d:   fxrstor64 (%rsp)
  0x00007fa5c506a592:   add    $0xa80,%rsp
  0x00007fa5c506a599:   mov    (%rsp),%r15
  0x00007fa5c506a59d:   mov    0x8(%rsp),%r14
  0x00007fa5c506a5a2:   mov    0x10(%rsp),%r13
  0x00007fa5c506a5a7:   mov    0x18(%rsp),%r12
  0x00007fa5c506a5ac:   mov    0x20(%rsp),%r11
  0x00007fa5c506a5b1:   mov    0x28(%rsp),%r10
  0x00007fa5c506a5b6:   mov    0x30(%rsp),%r9
  0x00007fa5c506a5bb:   mov    0x38(%rsp),%r8
  0x00007fa5c506a5c0:   mov    0x40(%rsp),%rdi
  0x00007fa5c506a5c5:   mov    0x48(%rsp),%rsi
  0x00007fa5c506a5ca:   mov    0x50(%rsp),%rbp
  0x00007fa5c506a5cf:   mov    0x60(%rsp),%rbx
  0x00007fa5c506a5d4:   mov    0x68(%rsp),%rdx
  0x00007fa5c506a5d9:   mov    0x70(%rsp),%rcx
  0x00007fa5c506a5de:   mov    0x78(%rsp),%rax
  0x00007fa5c506a5e3:   add    $0x80,%rsp
  0x00007fa5c506a5ea:   add    $0x8,%rsp
  0x00007fa5c506a5ee:   popfq  
  0x00007fa5c506a5ef:   pop    %rbp
  0x00007fa5c506a5f0:   retq   
  0x00007fa5c506a5f1:   hlt    
  0x00007fa5c506a5f2:   hlt    
  0x00007fa5c506a5f3:   hlt    
  0x00007fa5c506a5f4:   hlt    
  0x00007fa5c506a5f5:   hlt    
  0x00007fa5c506a5f6:   hlt    
  0x00007fa5c506a5f7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 123 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding DeoptimizationBlob 0x00007fa5c5069690
--------------------------------------------------------------------------------
  0x00007fa5c5069720:   push   %rbp
  0x00007fa5c5069721:   mov    %rsp,%rbp
  0x00007fa5c5069724:   pushfq 
  0x00007fa5c5069725:   sub    $0x8,%rsp
  0x00007fa5c5069729:   sub    $0x80,%rsp
  0x00007fa5c5069730:   mov    %rax,0x78(%rsp)
  0x00007fa5c5069735:   mov    %rcx,0x70(%rsp)
  0x00007fa5c506973a:   mov    %rdx,0x68(%rsp)
  0x00007fa5c506973f:   mov    %rbx,0x60(%rsp)
  0x00007fa5c5069744:   mov    %rbp,0x50(%rsp)
  0x00007fa5c5069749:   mov    %rsi,0x48(%rsp)
  0x00007fa5c506974e:   mov    %rdi,0x40(%rsp)
  0x00007fa5c5069753:   mov    %r8,0x38(%rsp)
  0x00007fa5c5069758:   mov    %r9,0x30(%rsp)
  0x00007fa5c506975d:   mov    %r10,0x28(%rsp)
  0x00007fa5c5069762:   mov    %r11,0x20(%rsp)
  0x00007fa5c5069767:   mov    %r12,0x18(%rsp)
  0x00007fa5c506976c:   mov    %r13,0x10(%rsp)
  0x00007fa5c5069771:   mov    %r14,0x8(%rsp)
  0x00007fa5c5069776:   mov    %r15,(%rsp)
  0x00007fa5c506977a:   sub    $0xa80,%rsp
  0x00007fa5c5069781:   fxsave64 (%rsp)
  0x00007fa5c5069786:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007fa5c5069791:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007fa5c506979c:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007fa5c50697a7:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007fa5c50697b2:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007fa5c50697bd:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007fa5c50697c8:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007fa5c50697d3:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007fa5c50697de:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007fa5c50697e9:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007fa5c50697f4:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007fa5c50697ff:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007fa5c506980a:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007fa5c5069815:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007fa5c5069820:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007fa5c506982b:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007fa5c5069836:   vzeroupper 
  0x00007fa5c5069839:   mov    $0x0,%r14d
  0x00007fa5c506983f:   jmpq   0x00007fa5c5069ab0
  0x00007fa5c5069844:   push   %rbp
  0x00007fa5c5069845:   mov    %rsp,%rbp
  0x00007fa5c5069848:   pushfq 
  0x00007fa5c5069849:   sub    $0x8,%rsp
  0x00007fa5c506984d:   sub    $0x80,%rsp
  0x00007fa5c5069854:   mov    %rax,0x78(%rsp)
  0x00007fa5c5069859:   mov    %rcx,0x70(%rsp)
  0x00007fa5c506985e:   mov    %rdx,0x68(%rsp)
  0x00007fa5c5069863:   mov    %rbx,0x60(%rsp)
  0x00007fa5c5069868:   mov    %rbp,0x50(%rsp)
  0x00007fa5c506986d:   mov    %rsi,0x48(%rsp)
  0x00007fa5c5069872:   mov    %rdi,0x40(%rsp)
  0x00007fa5c5069877:   mov    %r8,0x38(%rsp)
  0x00007fa5c506987c:   mov    %r9,0x30(%rsp)
  0x00007fa5c5069881:   mov    %r10,0x28(%rsp)
  0x00007fa5c5069886:   mov    %r11,0x20(%rsp)
  0x00007fa5c506988b:   mov    %r12,0x18(%rsp)
  0x00007fa5c5069890:   mov    %r13,0x10(%rsp)
  0x00007fa5c5069895:   mov    %r14,0x8(%rsp)
  0x00007fa5c506989a:   mov    %r15,(%rsp)
  0x00007fa5c506989e:   sub    $0xa80,%rsp
  0x00007fa5c50698a5:   fxsave64 (%rsp)
  0x00007fa5c50698aa:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007fa5c50698b5:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007fa5c50698c0:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007fa5c50698cb:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007fa5c50698d6:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007fa5c50698e1:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007fa5c50698ec:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007fa5c50698f7:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007fa5c5069902:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007fa5c506990d:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007fa5c5069918:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007fa5c5069923:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007fa5c506992e:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007fa5c5069939:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007fa5c5069944:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007fa5c506994f:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007fa5c506995a:   vzeroupper 
  0x00007fa5c506995d:   mov    $0x3,%r14d
  0x00007fa5c5069963:   jmpq   0x00007fa5c5069ab0
  0x00007fa5c5069968:   mov    %rdx,0x430(%r15)
  0x00007fa5c506996f:   mov    %rax,0x428(%r15)
  0x00007fa5c5069976:   pushq  $0x0
  0x00007fa5c506997b:   push   %rbp
  0x00007fa5c506997c:   mov    %rsp,%rbp
  0x00007fa5c506997f:   pushfq 
  0x00007fa5c5069980:   sub    $0x8,%rsp
  0x00007fa5c5069984:   sub    $0x80,%rsp
  0x00007fa5c506998b:   mov    %rax,0x78(%rsp)
  0x00007fa5c5069990:   mov    %rcx,0x70(%rsp)
  0x00007fa5c5069995:   mov    %rdx,0x68(%rsp)
  0x00007fa5c506999a:   mov    %rbx,0x60(%rsp)
  0x00007fa5c506999f:   mov    %rbp,0x50(%rsp)
  0x00007fa5c50699a4:   mov    %rsi,0x48(%rsp)
  0x00007fa5c50699a9:   mov    %rdi,0x40(%rsp)
  0x00007fa5c50699ae:   mov    %r8,0x38(%rsp)
  0x00007fa5c50699b3:   mov    %r9,0x30(%rsp)
  0x00007fa5c50699b8:   mov    %r10,0x28(%rsp)
  0x00007fa5c50699bd:   mov    %r11,0x20(%rsp)
  0x00007fa5c50699c2:   mov    %r12,0x18(%rsp)
  0x00007fa5c50699c7:   mov    %r13,0x10(%rsp)
  0x00007fa5c50699cc:   mov    %r14,0x8(%rsp)
  0x00007fa5c50699d1:   mov    %r15,(%rsp)
  0x00007fa5c50699d5:   sub    $0xa80,%rsp
  0x00007fa5c50699dc:   fxsave64 (%rsp)
  0x00007fa5c50699e1:   vextractf128 $0x1,%ymm0,0x240(%rsp)
  0x00007fa5c50699ec:   vextractf128 $0x1,%ymm1,0x250(%rsp)
  0x00007fa5c50699f7:   vextractf128 $0x1,%ymm2,0x260(%rsp)
  0x00007fa5c5069a02:   vextractf128 $0x1,%ymm3,0x270(%rsp)
  0x00007fa5c5069a0d:   vextractf128 $0x1,%ymm4,0x280(%rsp)
  0x00007fa5c5069a18:   vextractf128 $0x1,%ymm5,0x290(%rsp)
  0x00007fa5c5069a23:   vextractf128 $0x1,%ymm6,0x2a0(%rsp)
  0x00007fa5c5069a2e:   vextractf128 $0x1,%ymm7,0x2b0(%rsp)
  0x00007fa5c5069a39:   vextractf128 $0x1,%ymm8,0x2c0(%rsp)
  0x00007fa5c5069a44:   vextractf128 $0x1,%ymm9,0x2d0(%rsp)
  0x00007fa5c5069a4f:   vextractf128 $0x1,%ymm10,0x2e0(%rsp)
  0x00007fa5c5069a5a:   vextractf128 $0x1,%ymm11,0x2f0(%rsp)
  0x00007fa5c5069a65:   vextractf128 $0x1,%ymm12,0x300(%rsp)
  0x00007fa5c5069a70:   vextractf128 $0x1,%ymm13,0x310(%rsp)
  0x00007fa5c5069a7b:   vextractf128 $0x1,%ymm14,0x320(%rsp)
  0x00007fa5c5069a86:   vextractf128 $0x1,%ymm15,0x330(%rsp)
  0x00007fa5c5069a91:   vzeroupper 
  0x00007fa5c5069a94:   mov    $0x1,%r14d
  0x00007fa5c5069a9a:   mov    0x430(%r15),%rdx
  0x00007fa5c5069aa1:   mov    %rdx,0x8(%rbp)
  0x00007fa5c5069aa5:   movq   $0x0,0x430(%r15)
  0x00007fa5c5069ab0:   vzeroupper 
  0x00007fa5c5069ab3:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5069aba:   mov    %r15,%rdi
  0x00007fa5c5069abd:   mov    %r14d,%esi
  0x00007fa5c5069ac0:   callq  0x00007fa5cdd2b170 = Deoptimization::fetch_unroll_info(JavaThread*, int)
  0x00007fa5c5069ac5:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c5069ad0:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c5069adb:   vzeroupper 
  0x00007fa5c5069ade:   mov    %rax,%rdi
  0x00007fa5c5069ae1:   mov    0x3c(%rdi),%r14d
  0x00007fa5c5069ae5:   cmp    $0x1,%r14d
  0x00007fa5c5069ae9:   jne    0x00007fa5c5069b23
  0x00007fa5c5069aef:   mov    0x428(%r15),%rax
  0x00007fa5c5069af6:   mov    0x430(%r15),%rdx
  0x00007fa5c5069afd:   movq   $0x0,0x428(%r15)
  0x00007fa5c5069b08:   movq   $0x0,0x430(%r15)
  0x00007fa5c5069b13:   mov    %rax,0xaf8(%rsp)
  0x00007fa5c5069b1b:   mov    %rdx,0xae8(%rsp)
  0x00007fa5c5069b23:   vmovsd 0xa0(%rsp),%xmm0
  0x00007fa5c5069b2c:   mov    0xaf8(%rsp),%rax
  0x00007fa5c5069b34:   mov    0xae8(%rsp),%rdx
  0x00007fa5c5069b3c:   add    $0xb18,%rsp
  0x00007fa5c5069b43:   mov    (%rdi),%ecx
  0x00007fa5c5069b45:   add    %rcx,%rsp
  0x00007fa5c5069b48:   mov    0x30(%rdi),%rbp
  0x00007fa5c5069b4c:   mov    0x18(%rdi),%rcx
  0x00007fa5c5069b50:   add    $0x8,%rsp
  0x00007fa5c5069b54:   mov    0x10(%rdi),%rsi
  0x00007fa5c5069b58:   mov    0x8(%rdi),%edx
  0x00007fa5c5069b5b:   mov    %rsp,%r8
  0x00007fa5c5069b5e:   mov    0x4(%rdi),%ebx
  0x00007fa5c5069b61:   sub    %rbx,%rsp
  0x00007fa5c5069b64:   mov    (%rsi),%rbx
  0x00007fa5c5069b67:   sub    $0x10,%rbx
  0x00007fa5c5069b6b:   rex.W pushq (%rcx)
  0x00007fa5c5069b6e:   push   %rbp
  0x00007fa5c5069b6f:   mov    %rsp,%rbp
  0x00007fa5c5069b72:   sub    %rbx,%rsp
  0x00007fa5c5069b75:   movq   $0x0,-0x10(%rbp)
  0x00007fa5c5069b7d:   mov    %r8,-0x8(%rbp)
  0x00007fa5c5069b81:   mov    %rsp,%r8
  0x00007fa5c5069b84:   add    $0x8,%rsi
  0x00007fa5c5069b88:   add    $0x8,%rcx
  0x00007fa5c5069b8c:   dec    %edx
  0x00007fa5c5069b8e:   jne    0x00007fa5c5069b64
  0x00007fa5c5069b90:   rex.W pushq (%rcx)
  0x00007fa5c5069b93:   push   %rbp
  0x00007fa5c5069b94:   mov    %rsp,%rbp
  0x00007fa5c5069b97:   sub    $0xb10,%rsp
  0x00007fa5c5069b9e:   vmovsd %xmm0,0xa0(%rsp)
  0x00007fa5c5069ba7:   mov    %rax,0xaf8(%rsp)
  0x00007fa5c5069baf:   vzeroupper 
  0x00007fa5c5069bb2:   mov    %rbp,0x2d0(%r15)
  0x00007fa5c5069bb9:   movabs $0x7fa5c5069baf,%r10
  0x00007fa5c5069bc3:   mov    %r10,0x2c8(%r15)
  0x00007fa5c5069bca:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5069bd1:   and    $0xfffffffffffffff0,%rsp
  0x00007fa5c5069bd5:   mov    %r15,%rdi
  0x00007fa5c5069bd8:   mov    %r14d,%esi
  0x00007fa5c5069bdb:   callq  0x00007fa5cdd23710 = Deoptimization::unpack_frames(JavaThread*, int)
  0x00007fa5c5069be0:   mov    0x2c0(%r15),%rsp
  0x00007fa5c5069be7:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c5069bf2:   movq   $0x0,0x2d0(%r15)
  0x00007fa5c5069bfd:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c5069c08:   vzeroupper 
  0x00007fa5c5069c0b:   vmovsd 0xa0(%rsp),%xmm0
  0x00007fa5c5069c14:   mov    0xaf8(%rsp),%rax
  0x00007fa5c5069c1c:   mov    0xae8(%rsp),%rdx
  0x00007fa5c5069c24:   leaveq 
  0x00007fa5c5069c25:   retq   
  0x00007fa5c5069c26:   hlt    
  0x00007fa5c5069c27:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 2 OopMaps

ImmutableOopMap {[2808]=Callers_rax [2800]=Callers_rcx [2792]=Callers_rdx [2784]=Callers_rbx [2760]=Callers_rsi [2752]=Callers_rdi [2744]=Callers_r8 [2736]=Callers_r9 [2728]=Callers_r10 [2720]=Callers_r11 [2712]=Callers_r12 [2704]=Callers_r13 [2696]=Callers_r14 [2688]=Callers_r15 [160]=Callers_xmm0 [176]=Callers_xmm1 [192]=Callers_xmm2 [208]=Callers_xmm3 [224]=Callers_xmm4 [240]=Callers_xmm5 [256]=Callers_xmm6 [272]=Callers_xmm7 [288]=Callers_xmm8 [304]=Callers_xmm9 [320]=Callers_xmm10 [336]=Callers_xmm11 [352]=Callers_xmm12 [368]=Callers_xmm13 [384]=Callers_xmm14 [400]=Callers_xmm15 [576]=Callers_xmm0 [592]=Callers_xmm1 [608]=Callers_xmm2 [624]=Callers_xmm3 [640]=Callers_xmm4 [656]=Callers_xmm5 [672]=Callers_xmm6 [688]=Callers_xmm7 [704]=Callers_xmm8 [720]=Callers_xmm9 [736]=Callers_xmm10 [752]=Callers_xmm11 [768]=Callers_xmm12 [784]=Callers_xmm13 [800]=Callers_xmm14 [816]=Callers_xmm15 [2812]=Callers_rax [2804]=Callers_rcx [2796]=Callers_rdx [2788]=Callers_rbx [2764]=Callers_rsi [2756]=Callers_rdi [2748]=Callers_r8 [2740]=Callers_r9 [2732]=Callers_r10 [2724]=Callers_r11 [2716]=Callers_r12 [2708]=Callers_r13 [2700]=Callers_r14 [2692]=Callers_r15 [164]=Callers_xmm0 [180]=Callers_xmm1 [196]=Callers_xmm2 [212]=Callers_xmm3 [228]=Callers_xmm4 [244]=Callers_xmm5 [260]=Callers_xmm6 [276]=Callers_xmm7 [292]=Callers_xmm8 [308]=Callers_xmm9 [324]=Callers_xmm10 [340]=Callers_xmm11 [356]=Callers_xmm12 [372]=Callers_xmm13 [388]=Callers_xmm14 [404]=Callers_xmm15 } pc offsets: 933 
ImmutableOopMap {} pc offsets: 1167 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding UncommonTrapBlob 0x00007fa5c5069310
--------------------------------------------------------------------------------
  0x00007fa5c5069380:   sub    $0x8,%rsp
  0x00007fa5c5069384:   mov    %rbp,(%rsp)
  0x00007fa5c5069388:   mov    %esi,%esi
  0x00007fa5c506938a:   vzeroupper 
  0x00007fa5c506938d:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5069394:   mov    %r15,%rdi
  0x00007fa5c5069397:   mov    $0x2,%edx
  0x00007fa5c506939c:   callq  0x00007fa5cdd2b200 = Deoptimization::uncommon_trap(JavaThread*, int, int)
  0x00007fa5c50693a1:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c50693ac:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c50693b7:   vzeroupper 
  0x00007fa5c50693ba:   mov    %rax,%rdi
  0x00007fa5c50693bd:   add    $0x8,%rsp
  0x00007fa5c50693c1:   mov    (%rdi),%ecx
  0x00007fa5c50693c3:   add    %rcx,%rsp
  0x00007fa5c50693c6:   mov    0x30(%rdi),%rbp
  0x00007fa5c50693ca:   mov    0x18(%rdi),%rcx
  0x00007fa5c50693ce:   add    $0x8,%rsp
  0x00007fa5c50693d2:   mov    0x10(%rdi),%rsi
  0x00007fa5c50693d6:   mov    0x8(%rdi),%edx
  0x00007fa5c50693d9:   mov    %rsp,%r8
  0x00007fa5c50693dc:   mov    0x4(%rdi),%ebx
  0x00007fa5c50693df:   sub    %rbx,%rsp
  0x00007fa5c50693e2:   mov    (%rsi),%rbx
  0x00007fa5c50693e5:   sub    $0x10,%rbx
  0x00007fa5c50693e9:   rex.W pushq (%rcx)
  0x00007fa5c50693ec:   push   %rbp
  0x00007fa5c50693ed:   mov    %rsp,%rbp
  0x00007fa5c50693f0:   sub    %rbx,%rsp
  0x00007fa5c50693f3:   mov    %r8,-0x8(%rbp)
  0x00007fa5c50693f7:   movq   $0x0,-0x10(%rbp)
  0x00007fa5c50693ff:   mov    %rsp,%r8
  0x00007fa5c5069402:   add    $0x8,%rsi
  0x00007fa5c5069406:   add    $0x8,%rcx
  0x00007fa5c506940a:   dec    %edx
  0x00007fa5c506940c:   jne    0x00007fa5c50693e2
  0x00007fa5c506940e:   rex.W pushq (%rcx)
  0x00007fa5c5069411:   push   %rbp
  0x00007fa5c5069412:   mov    %rsp,%rbp
  0x00007fa5c5069415:   sub    $0x0,%rsp
  0x00007fa5c5069419:   vzeroupper 
  0x00007fa5c506941c:   mov    %rbp,0x2d0(%r15)
  0x00007fa5c5069423:   movabs $0x7fa5c5069419,%r10
  0x00007fa5c506942d:   mov    %r10,0x2c8(%r15)
  0x00007fa5c5069434:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c506943b:   and    $0xfffffffffffffff0,%rsp
  0x00007fa5c506943f:   mov    %r15,%rdi
  0x00007fa5c5069442:   mov    $0x2,%esi
  0x00007fa5c5069447:   callq  0x00007fa5cdd23710 = Deoptimization::unpack_frames(JavaThread*, int)
  0x00007fa5c506944c:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c5069457:   movq   $0x0,0x2d0(%r15)
  0x00007fa5c5069462:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c506946d:   vzeroupper 
  0x00007fa5c5069470:   leaveq 
  0x00007fa5c5069471:   retq   
  0x00007fa5c5069472:   hlt    
  0x00007fa5c5069473:   hlt    
  0x00007fa5c5069474:   hlt    
  0x00007fa5c5069475:   hlt    
  0x00007fa5c5069476:   hlt    
  0x00007fa5c5069477:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 2 OopMaps

ImmutableOopMap {} pc offsets: 33 153 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - AbstractMethodError throw_exception 0x00007fa5c503fb90
--------------------------------------------------------------------------------
  0x00007fa5c503fc00:   push   %rbp
  0x00007fa5c503fc01:   mov    %rsp,%rbp
  0x00007fa5c503fc04:   sub    $0x0,%rsp
  0x00007fa5c503fc08:   vzeroupper 
  0x00007fa5c503fc0b:   mov    %rbp,0x2d0(%r15)
  0x00007fa5c503fc12:   movabs $0x7fa5c503fc08,%r10
  0x00007fa5c503fc1c:   mov    %r10,0x2c8(%r15)
  0x00007fa5c503fc23:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c503fc2a:   and    $0xfffffffffffffff0,%rsp
  0x00007fa5c503fc2e:   mov    %r15,%rdi
  0x00007fa5c503fc31:   callq  0x00007fa5ce3f0ea0 = SharedRuntime::throw_AbstractMethodError(JavaThread*)
  0x00007fa5c503fc36:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c503fc41:   movq   $0x0,0x2d0(%r15)
  0x00007fa5c503fc4c:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c503fc57:   vzeroupper 
  0x00007fa5c503fc5a:   leaveq 
  0x00007fa5c503fc5b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - IncompatibleClassChangeError throw_exception 0x00007fa5c503f890
--------------------------------------------------------------------------------
  0x00007fa5c503f900:   push   %rbp
  0x00007fa5c503f901:   mov    %rsp,%rbp
  0x00007fa5c503f904:   sub    $0x0,%rsp
  0x00007fa5c503f908:   vzeroupper 
  0x00007fa5c503f90b:   mov    %rbp,0x2d0(%r15)
  0x00007fa5c503f912:   movabs $0x7fa5c503f908,%r10
  0x00007fa5c503f91c:   mov    %r10,0x2c8(%r15)
  0x00007fa5c503f923:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c503f92a:   and    $0xfffffffffffffff0,%rsp
  0x00007fa5c503f92e:   mov    %r15,%rdi
  0x00007fa5c503f931:   callq  0x00007fa5ce3f10a0 = SharedRuntime::throw_IncompatibleClassChangeError(JavaThread*)
  0x00007fa5c503f936:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c503f941:   movq   $0x0,0x2d0(%r15)
  0x00007fa5c503f94c:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c503f957:   vzeroupper 
  0x00007fa5c503f95a:   leaveq 
  0x00007fa5c503f95b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - NullPointerException at call throw_exception 0x00007fa5c503f590
--------------------------------------------------------------------------------
  0x00007fa5c503f600:   push   %rbp
  0x00007fa5c503f601:   mov    %rsp,%rbp
  0x00007fa5c503f604:   sub    $0x0,%rsp
  0x00007fa5c503f608:   vzeroupper 
  0x00007fa5c503f60b:   mov    %rbp,0x2d0(%r15)
  0x00007fa5c503f612:   movabs $0x7fa5c503f608,%r10
  0x00007fa5c503f61c:   mov    %r10,0x2c8(%r15)
  0x00007fa5c503f623:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c503f62a:   and    $0xfffffffffffffff0,%rsp
  0x00007fa5c503f62e:   mov    %r15,%rdi
  0x00007fa5c503f631:   callq  0x00007fa5ce3f0da0 = SharedRuntime::throw_NullPointerException_at_call(JavaThread*)
  0x00007fa5c503f636:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c503f641:   movq   $0x0,0x2d0(%r15)
  0x00007fa5c503f64c:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c503f657:   vzeroupper 
  0x00007fa5c503f65a:   leaveq 
  0x00007fa5c503f65b:   jmpq   Stub::forward exception
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 8 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_float_sign_mask [0x00007fa5c5040280, 0x00007fa5c50402c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040280:   (bad)  
  0x00007fa5c5040281:   (bad)  
  0x00007fa5c5040282:   (bad)  
  0x00007fa5c5040283:   jg     Stub::vector_float_sign_mask+4 0x00007fa5c5040284
  0x00007fa5c5040285:   (bad)  
  0x00007fa5c5040286:   (bad)  
  0x00007fa5c5040287:   jg     Stub::vector_float_sign_mask+8 0x00007fa5c5040288
  0x00007fa5c5040289:   (bad)  
  0x00007fa5c504028a:   (bad)  
  0x00007fa5c504028b:   jg     Stub::vector_float_sign_mask+12 0x00007fa5c504028c
  0x00007fa5c504028d:   (bad)  
  0x00007fa5c504028e:   (bad)  
  0x00007fa5c504028f:   jg     Stub::vector_float_sign_mask+16 0x00007fa5c5040290
  0x00007fa5c5040291:   (bad)  
  0x00007fa5c5040292:   (bad)  
  0x00007fa5c5040293:   jg     Stub::vector_float_sign_mask+20 0x00007fa5c5040294
  0x00007fa5c5040295:   (bad)  
  0x00007fa5c5040296:   (bad)  
  0x00007fa5c5040297:   jg     Stub::vector_float_sign_mask+24 0x00007fa5c5040298
  0x00007fa5c5040299:   (bad)  
  0x00007fa5c504029a:   (bad)  
  0x00007fa5c504029b:   jg     Stub::vector_float_sign_mask+28 0x00007fa5c504029c
  0x00007fa5c504029d:   (bad)  
  0x00007fa5c504029e:   (bad)  
  0x00007fa5c504029f:   jg     Stub::vector_float_sign_mask+32 0x00007fa5c50402a0
  0x00007fa5c50402a1:   (bad)  
  0x00007fa5c50402a2:   (bad)  
  0x00007fa5c50402a3:   jg     Stub::vector_float_sign_mask+36 0x00007fa5c50402a4
  0x00007fa5c50402a5:   (bad)  
  0x00007fa5c50402a6:   (bad)  
  0x00007fa5c50402a7:   jg     Stub::vector_float_sign_mask+40 0x00007fa5c50402a8
  0x00007fa5c50402a9:   (bad)  
  0x00007fa5c50402aa:   (bad)  
  0x00007fa5c50402ab:   jg     Stub::vector_float_sign_mask+44 0x00007fa5c50402ac
  0x00007fa5c50402ad:   (bad)  
  0x00007fa5c50402ae:   (bad)  
  0x00007fa5c50402af:   jg     Stub::vector_float_sign_mask+48 0x00007fa5c50402b0
  0x00007fa5c50402b1:   (bad)  
  0x00007fa5c50402b2:   (bad)  
  0x00007fa5c50402b3:   jg     Stub::vector_float_sign_mask+52 0x00007fa5c50402b4
  0x00007fa5c50402b5:   (bad)  
  0x00007fa5c50402b6:   (bad)  
  0x00007fa5c50402b7:   jg     Stub::vector_float_sign_mask+56 0x00007fa5c50402b8
  0x00007fa5c50402b9:   (bad)  
  0x00007fa5c50402ba:   (bad)  
  0x00007fa5c50402bb:   jg     Stub::vector_float_sign_mask+60 0x00007fa5c50402bc
  0x00007fa5c50402bd:   (bad)  
  0x00007fa5c50402be:   (bad)  
  0x00007fa5c50402bf:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_float_sign_flip [0x00007fa5c50402c0, 0x00007fa5c5040300] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50402c0:   add    %al,(%rax)
  0x00007fa5c50402c2:   add    %al,-0x80000000(%rax)
  0x00007fa5c50402c8:   add    %al,(%rax)
  0x00007fa5c50402ca:   add    %al,-0x80000000(%rax)
  0x00007fa5c50402d0:   add    %al,(%rax)
  0x00007fa5c50402d2:   add    %al,-0x80000000(%rax)
  0x00007fa5c50402d8:   add    %al,(%rax)
  0x00007fa5c50402da:   add    %al,-0x80000000(%rax)
  0x00007fa5c50402e0:   add    %al,(%rax)
  0x00007fa5c50402e2:   add    %al,-0x80000000(%rax)
  0x00007fa5c50402e8:   add    %al,(%rax)
  0x00007fa5c50402ea:   add    %al,-0x80000000(%rax)
  0x00007fa5c50402f0:   add    %al,(%rax)
  0x00007fa5c50402f2:   add    %al,-0x80000000(%rax)
  0x00007fa5c50402f8:   add    %al,(%rax)
  0x00007fa5c50402fa:   add    %al,-0x80000000(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_double_sign_mask [0x00007fa5c5040300, 0x00007fa5c5040340] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040300:   (bad)  
  0x00007fa5c5040301:   (bad)  
  0x00007fa5c5040302:   (bad)  
  0x00007fa5c5040303:   (bad)  
  0x00007fa5c5040304:   (bad)  
  0x00007fa5c5040305:   (bad)  
  0x00007fa5c5040306:   (bad)  
  0x00007fa5c5040307:   jg     Stub::vector_double_sign_mask+8 0x00007fa5c5040308
  0x00007fa5c5040309:   (bad)  
  0x00007fa5c504030a:   (bad)  
  0x00007fa5c504030b:   (bad)  
  0x00007fa5c504030c:   (bad)  
  0x00007fa5c504030d:   (bad)  
  0x00007fa5c504030e:   (bad)  
  0x00007fa5c504030f:   jg     Stub::vector_double_sign_mask+16 0x00007fa5c5040310
  0x00007fa5c5040311:   (bad)  
  0x00007fa5c5040312:   (bad)  
  0x00007fa5c5040313:   (bad)  
  0x00007fa5c5040314:   (bad)  
  0x00007fa5c5040315:   (bad)  
  0x00007fa5c5040316:   (bad)  
  0x00007fa5c5040317:   jg     Stub::vector_double_sign_mask+24 0x00007fa5c5040318
  0x00007fa5c5040319:   (bad)  
  0x00007fa5c504031a:   (bad)  
  0x00007fa5c504031b:   (bad)  
  0x00007fa5c504031c:   (bad)  
  0x00007fa5c504031d:   (bad)  
  0x00007fa5c504031e:   (bad)  
  0x00007fa5c504031f:   jg     Stub::vector_double_sign_mask+32 0x00007fa5c5040320
  0x00007fa5c5040321:   (bad)  
  0x00007fa5c5040322:   (bad)  
  0x00007fa5c5040323:   (bad)  
  0x00007fa5c5040324:   (bad)  
  0x00007fa5c5040325:   (bad)  
  0x00007fa5c5040326:   (bad)  
  0x00007fa5c5040327:   jg     Stub::vector_double_sign_mask+40 0x00007fa5c5040328
  0x00007fa5c5040329:   (bad)  
  0x00007fa5c504032a:   (bad)  
  0x00007fa5c504032b:   (bad)  
  0x00007fa5c504032c:   (bad)  
  0x00007fa5c504032d:   (bad)  
  0x00007fa5c504032e:   (bad)  
  0x00007fa5c504032f:   jg     Stub::vector_double_sign_mask+48 0x00007fa5c5040330
  0x00007fa5c5040331:   (bad)  
  0x00007fa5c5040332:   (bad)  
  0x00007fa5c5040333:   (bad)  
  0x00007fa5c5040334:   (bad)  
  0x00007fa5c5040335:   (bad)  
  0x00007fa5c5040336:   (bad)  
  0x00007fa5c5040337:   jg     Stub::vector_double_sign_mask+56 0x00007fa5c5040338
  0x00007fa5c5040339:   (bad)  
  0x00007fa5c504033a:   (bad)  
  0x00007fa5c504033b:   (bad)  
  0x00007fa5c504033c:   (bad)  
  0x00007fa5c504033d:   (bad)  
  0x00007fa5c504033e:   (bad)  
  0x00007fa5c504033f:   .byte 0x7f
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_double_sign_flip [0x00007fa5c5040340, 0x00007fa5c5040380] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040340:   add    %al,(%rax)
  0x00007fa5c5040342:   add    %al,(%rax)
  0x00007fa5c5040344:   add    %al,(%rax)
  0x00007fa5c5040346:   add    %al,0x0(%rax)
  0x00007fa5c504034c:   add    %al,(%rax)
  0x00007fa5c504034e:   add    %al,0x0(%rax)
  0x00007fa5c5040354:   add    %al,(%rax)
  0x00007fa5c5040356:   add    %al,0x0(%rax)
  0x00007fa5c504035c:   add    %al,(%rax)
  0x00007fa5c504035e:   add    %al,0x0(%rax)
  0x00007fa5c5040364:   add    %al,(%rax)
  0x00007fa5c5040366:   add    %al,0x0(%rax)
  0x00007fa5c504036c:   add    %al,(%rax)
  0x00007fa5c504036e:   add    %al,0x0(%rax)
  0x00007fa5c5040374:   add    %al,(%rax)
  0x00007fa5c5040376:   add    %al,0x0(%rax)
  0x00007fa5c504037c:   add    %al,(%rax)
  0x00007fa5c504037e:   .byte 0x0
  0x00007fa5c504037f:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_all_bits_set [0x00007fa5c5040380, 0x00007fa5c50403c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040380:   (bad)  
  0x00007fa5c5040381:   (bad)  
  0x00007fa5c5040382:   (bad)  
  0x00007fa5c5040383:   (bad)  
  0x00007fa5c5040384:   (bad)  
  0x00007fa5c5040385:   (bad)  
  0x00007fa5c5040386:   (bad)  
  0x00007fa5c5040387:   (bad)  
  0x00007fa5c5040388:   (bad)  
  0x00007fa5c5040389:   (bad)  
  0x00007fa5c504038a:   (bad)  
  0x00007fa5c504038b:   (bad)  
  0x00007fa5c504038c:   (bad)  
  0x00007fa5c504038d:   (bad)  
  0x00007fa5c504038e:   (bad)  
  0x00007fa5c504038f:   (bad)  
  0x00007fa5c5040390:   (bad)  
  0x00007fa5c5040391:   (bad)  
  0x00007fa5c5040392:   (bad)  
  0x00007fa5c5040393:   (bad)  
  0x00007fa5c5040394:   (bad)  
  0x00007fa5c5040395:   (bad)  
  0x00007fa5c5040396:   (bad)  
  0x00007fa5c5040397:   (bad)  
  0x00007fa5c5040398:   (bad)  
  0x00007fa5c5040399:   (bad)  
  0x00007fa5c504039a:   (bad)  
  0x00007fa5c504039b:   (bad)  
  0x00007fa5c504039c:   (bad)  
  0x00007fa5c504039d:   (bad)  
  0x00007fa5c504039e:   (bad)  
  0x00007fa5c504039f:   (bad)  
  0x00007fa5c50403a0:   (bad)  
  0x00007fa5c50403a1:   (bad)  
  0x00007fa5c50403a2:   (bad)  
  0x00007fa5c50403a3:   (bad)  
  0x00007fa5c50403a4:   (bad)  
  0x00007fa5c50403a5:   (bad)  
  0x00007fa5c50403a6:   (bad)  
  0x00007fa5c50403a7:   (bad)  
  0x00007fa5c50403a8:   (bad)  
  0x00007fa5c50403a9:   (bad)  
  0x00007fa5c50403aa:   (bad)  
  0x00007fa5c50403ab:   (bad)  
  0x00007fa5c50403ac:   (bad)  
  0x00007fa5c50403ad:   (bad)  
  0x00007fa5c50403ae:   (bad)  
  0x00007fa5c50403af:   (bad)  
  0x00007fa5c50403b0:   (bad)  
  0x00007fa5c50403b1:   (bad)  
  0x00007fa5c50403b2:   (bad)  
  0x00007fa5c50403b3:   (bad)  
  0x00007fa5c50403b4:   (bad)  
  0x00007fa5c50403b5:   (bad)  
  0x00007fa5c50403b6:   (bad)  
  0x00007fa5c50403b7:   (bad)  
  0x00007fa5c50403b8:   (bad)  
  0x00007fa5c50403b9:   (bad)  
  0x00007fa5c50403ba:   (bad)  
  0x00007fa5c50403bb:   (bad)  
  0x00007fa5c50403bc:   (bad)  
  0x00007fa5c50403bd:   (bad)  
  0x00007fa5c50403be:   (bad)  
  0x00007fa5c50403bf:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_mask_cmp_bits [0x00007fa5c50403c0, 0x00007fa5c5040400] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50403c0:   add    %eax,(%rax)
  0x00007fa5c50403c2:   add    %al,(%rax)
  0x00007fa5c50403c4:   add    %eax,(%rax)
  0x00007fa5c50403c6:   add    %al,(%rax)
  0x00007fa5c50403c8:   add    %eax,(%rax)
  0x00007fa5c50403ca:   add    %al,(%rax)
  0x00007fa5c50403cc:   add    %eax,(%rax)
  0x00007fa5c50403ce:   add    %al,(%rax)
  0x00007fa5c50403d0:   add    %eax,(%rax)
  0x00007fa5c50403d2:   add    %al,(%rax)
  0x00007fa5c50403d4:   add    %eax,(%rax)
  0x00007fa5c50403d6:   add    %al,(%rax)
  0x00007fa5c50403d8:   add    %eax,(%rax)
  0x00007fa5c50403da:   add    %al,(%rax)
  0x00007fa5c50403dc:   add    %eax,(%rax)
  0x00007fa5c50403de:   add    %al,(%rax)
  0x00007fa5c50403e0:   add    %eax,(%rax)
  0x00007fa5c50403e2:   add    %al,(%rax)
  0x00007fa5c50403e4:   add    %eax,(%rax)
  0x00007fa5c50403e6:   add    %al,(%rax)
  0x00007fa5c50403e8:   add    %eax,(%rax)
  0x00007fa5c50403ea:   add    %al,(%rax)
  0x00007fa5c50403ec:   add    %eax,(%rax)
  0x00007fa5c50403ee:   add    %al,(%rax)
  0x00007fa5c50403f0:   add    %eax,(%rax)
  0x00007fa5c50403f2:   add    %al,(%rax)
  0x00007fa5c50403f4:   add    %eax,(%rax)
  0x00007fa5c50403f6:   add    %al,(%rax)
  0x00007fa5c50403f8:   add    %eax,(%rax)
  0x00007fa5c50403fa:   add    %al,(%rax)
  0x00007fa5c50403fc:   add    %eax,(%rax)
  0x00007fa5c50403fe:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_short_to_byte_mask [0x00007fa5c5040400, 0x00007fa5c5040440] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040400:   incl   (%rax)
  0x00007fa5c5040402:   incl   (%rax)
  0x00007fa5c5040404:   incl   (%rax)
  0x00007fa5c5040406:   incl   (%rax)
  0x00007fa5c5040408:   incl   (%rax)
  0x00007fa5c504040a:   incl   (%rax)
  0x00007fa5c504040c:   incl   (%rax)
  0x00007fa5c504040e:   incl   (%rax)
  0x00007fa5c5040410:   incl   (%rax)
  0x00007fa5c5040412:   incl   (%rax)
  0x00007fa5c5040414:   incl   (%rax)
  0x00007fa5c5040416:   incl   (%rax)
  0x00007fa5c5040418:   incl   (%rax)
  0x00007fa5c504041a:   incl   (%rax)
  0x00007fa5c504041c:   incl   (%rax)
  0x00007fa5c504041e:   incl   (%rax)
  0x00007fa5c5040420:   incl   (%rax)
  0x00007fa5c5040422:   incl   (%rax)
  0x00007fa5c5040424:   incl   (%rax)
  0x00007fa5c5040426:   incl   (%rax)
  0x00007fa5c5040428:   incl   (%rax)
  0x00007fa5c504042a:   incl   (%rax)
  0x00007fa5c504042c:   incl   (%rax)
  0x00007fa5c504042e:   incl   (%rax)
  0x00007fa5c5040430:   incl   (%rax)
  0x00007fa5c5040432:   incl   (%rax)
  0x00007fa5c5040434:   incl   (%rax)
  0x00007fa5c5040436:   incl   (%rax)
  0x00007fa5c5040438:   incl   (%rax)
  0x00007fa5c504043a:   incl   (%rax)
  0x00007fa5c504043c:   incl   (%rax)
  0x00007fa5c504043e:   incl   (%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_byte_perm_mask [0x00007fa5c5040440, 0x00007fa5c5040480] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040440:   add    %eax,(%rax)
  0x00007fa5c5040442:   add    %al,(%rax)
  0x00007fa5c5040444:   add    %al,(%rax)
  0x00007fa5c5040446:   add    %al,(%rax)
  0x00007fa5c5040448:   add    (%rax),%eax
  0x00007fa5c504044a:   add    %al,(%rax)
  0x00007fa5c504044c:   add    %al,(%rax)
  0x00007fa5c504044e:   add    %al,(%rax)
  0x00007fa5c5040450:   add    $0x0,%eax
  0x00007fa5c5040455:   add    %al,(%rax)
  0x00007fa5c5040457:   add    %al,(%rdi)
  0x00007fa5c5040459:   add    %al,(%rax)
  0x00007fa5c504045b:   add    %al,(%rax)
  0x00007fa5c504045d:   add    %al,(%rax)
  0x00007fa5c504045f:   add    %al,(%rax)
  0x00007fa5c5040461:   add    %al,(%rax)
  0x00007fa5c5040463:   add    %al,(%rax)
  0x00007fa5c5040465:   add    %al,(%rax)
  0x00007fa5c5040467:   add    %al,(%rdx)
  0x00007fa5c5040469:   add    %al,(%rax)
  0x00007fa5c504046b:   add    %al,(%rax)
  0x00007fa5c504046d:   add    %al,(%rax)
  0x00007fa5c504046f:   add    %al,(%rax,%rax,1)
  0x00007fa5c5040472:   add    %al,(%rax)
  0x00007fa5c5040474:   add    %al,(%rax)
  0x00007fa5c5040476:   add    %al,(%rax)
  0x00007fa5c5040478:   (bad)  
  0x00007fa5c5040479:   add    %al,(%rax)
  0x00007fa5c504047b:   add    %al,(%rax)
  0x00007fa5c504047d:   add    %al,(%rax)
  0x00007fa5c504047f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_to_byte_mask [0x00007fa5c5040480, 0x00007fa5c50404c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040480:   incl   (%rax)
  0x00007fa5c5040482:   add    %al,(%rax)
  0x00007fa5c5040484:   incl   (%rax)
  0x00007fa5c5040486:   add    %al,(%rax)
  0x00007fa5c5040488:   incl   (%rax)
  0x00007fa5c504048a:   add    %al,(%rax)
  0x00007fa5c504048c:   incl   (%rax)
  0x00007fa5c504048e:   add    %al,(%rax)
  0x00007fa5c5040490:   incl   (%rax)
  0x00007fa5c5040492:   add    %al,(%rax)
  0x00007fa5c5040494:   incl   (%rax)
  0x00007fa5c5040496:   add    %al,(%rax)
  0x00007fa5c5040498:   incl   (%rax)
  0x00007fa5c504049a:   add    %al,(%rax)
  0x00007fa5c504049c:   incl   (%rax)
  0x00007fa5c504049e:   add    %al,(%rax)
  0x00007fa5c50404a0:   incl   (%rax)
  0x00007fa5c50404a2:   add    %al,(%rax)
  0x00007fa5c50404a4:   incl   (%rax)
  0x00007fa5c50404a6:   add    %al,(%rax)
  0x00007fa5c50404a8:   incl   (%rax)
  0x00007fa5c50404aa:   add    %al,(%rax)
  0x00007fa5c50404ac:   incl   (%rax)
  0x00007fa5c50404ae:   add    %al,(%rax)
  0x00007fa5c50404b0:   incl   (%rax)
  0x00007fa5c50404b2:   add    %al,(%rax)
  0x00007fa5c50404b4:   incl   (%rax)
  0x00007fa5c50404b6:   add    %al,(%rax)
  0x00007fa5c50404b8:   incl   (%rax)
  0x00007fa5c50404ba:   add    %al,(%rax)
  0x00007fa5c50404bc:   incl   (%rax)
  0x00007fa5c50404be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_to_short_mask [0x00007fa5c50404c0, 0x00007fa5c5040500] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50404c0:   (bad)  
  0x00007fa5c50404c1:   incl   (%rax)
  0x00007fa5c50404c3:   add    %bh,%bh
  0x00007fa5c50404c5:   incl   (%rax)
  0x00007fa5c50404c7:   add    %bh,%bh
  0x00007fa5c50404c9:   incl   (%rax)
  0x00007fa5c50404cb:   add    %bh,%bh
  0x00007fa5c50404cd:   incl   (%rax)
  0x00007fa5c50404cf:   add    %bh,%bh
  0x00007fa5c50404d1:   incl   (%rax)
  0x00007fa5c50404d3:   add    %bh,%bh
  0x00007fa5c50404d5:   incl   (%rax)
  0x00007fa5c50404d7:   add    %bh,%bh
  0x00007fa5c50404d9:   incl   (%rax)
  0x00007fa5c50404db:   add    %bh,%bh
  0x00007fa5c50404dd:   incl   (%rax)
  0x00007fa5c50404df:   add    %bh,%bh
  0x00007fa5c50404e1:   incl   (%rax)
  0x00007fa5c50404e3:   add    %bh,%bh
  0x00007fa5c50404e5:   incl   (%rax)
  0x00007fa5c50404e7:   add    %bh,%bh
  0x00007fa5c50404e9:   incl   (%rax)
  0x00007fa5c50404eb:   add    %bh,%bh
  0x00007fa5c50404ed:   incl   (%rax)
  0x00007fa5c50404ef:   add    %bh,%bh
  0x00007fa5c50404f1:   incl   (%rax)
  0x00007fa5c50404f3:   add    %bh,%bh
  0x00007fa5c50404f5:   incl   (%rax)
  0x00007fa5c50404f7:   add    %bh,%bh
  0x00007fa5c50404f9:   incl   (%rax)
  0x00007fa5c50404fb:   add    %bh,%bh
  0x00007fa5c50404fd:   incl   (%rax)
  0x00007fa5c50404ff:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_32_bit_mask [0x00007fa5c5040500, 0x00007fa5c5040540] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040500:   (bad)  
  0x00007fa5c5040501:   (bad)  
  0x00007fa5c5040502:   (bad)  
  0x00007fa5c5040503:   incl   (%rax)
  0x00007fa5c5040505:   add    %al,(%rax)
  0x00007fa5c5040507:   add    %al,(%rax)
  0x00007fa5c5040509:   add    %al,(%rax)
  0x00007fa5c504050b:   add    %al,(%rax)
  0x00007fa5c504050d:   add    %al,(%rax)
  0x00007fa5c504050f:   add    %al,(%rax)
  0x00007fa5c5040511:   add    %al,(%rax)
  0x00007fa5c5040513:   add    %al,(%rax)
  0x00007fa5c5040515:   add    %al,(%rax)
  0x00007fa5c5040517:   add    %al,(%rax)
  0x00007fa5c5040519:   add    %al,(%rax)
  0x00007fa5c504051b:   add    %al,(%rax)
  0x00007fa5c504051d:   add    %al,(%rax)
  0x00007fa5c504051f:   add    %al,(%rax)
  0x00007fa5c5040521:   add    %al,(%rax)
  0x00007fa5c5040523:   add    %al,(%rax)
  0x00007fa5c5040525:   add    %al,(%rax)
  0x00007fa5c5040527:   add    %al,(%rax)
  0x00007fa5c5040529:   add    %al,(%rax)
  0x00007fa5c504052b:   add    %al,(%rax)
  0x00007fa5c504052d:   add    %al,(%rax)
  0x00007fa5c504052f:   add    %al,(%rax)
  0x00007fa5c5040531:   add    %al,(%rax)
  0x00007fa5c5040533:   add    %al,(%rax)
  0x00007fa5c5040535:   add    %al,(%rax)
  0x00007fa5c5040537:   add    %al,(%rax)
  0x00007fa5c5040539:   add    %al,(%rax)
  0x00007fa5c504053b:   add    %al,(%rax)
  0x00007fa5c504053d:   add    %al,(%rax)
  0x00007fa5c504053f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_64_bit_mask [0x00007fa5c5040540, 0x00007fa5c5040580] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040540:   (bad)  
  0x00007fa5c5040541:   (bad)  
  0x00007fa5c5040542:   (bad)  
  0x00007fa5c5040543:   (bad)  
  0x00007fa5c5040544:   (bad)  
  0x00007fa5c5040545:   (bad)  
  0x00007fa5c5040546:   (bad)  
  0x00007fa5c5040547:   incl   (%rax)
  0x00007fa5c5040549:   add    %al,(%rax)
  0x00007fa5c504054b:   add    %al,(%rax)
  0x00007fa5c504054d:   add    %al,(%rax)
  0x00007fa5c504054f:   add    %al,(%rax)
  0x00007fa5c5040551:   add    %al,(%rax)
  0x00007fa5c5040553:   add    %al,(%rax)
  0x00007fa5c5040555:   add    %al,(%rax)
  0x00007fa5c5040557:   add    %al,(%rax)
  0x00007fa5c5040559:   add    %al,(%rax)
  0x00007fa5c504055b:   add    %al,(%rax)
  0x00007fa5c504055d:   add    %al,(%rax)
  0x00007fa5c504055f:   add    %al,(%rax)
  0x00007fa5c5040561:   add    %al,(%rax)
  0x00007fa5c5040563:   add    %al,(%rax)
  0x00007fa5c5040565:   add    %al,(%rax)
  0x00007fa5c5040567:   add    %al,(%rax)
  0x00007fa5c5040569:   add    %al,(%rax)
  0x00007fa5c504056b:   add    %al,(%rax)
  0x00007fa5c504056d:   add    %al,(%rax)
  0x00007fa5c504056f:   add    %al,(%rax)
  0x00007fa5c5040571:   add    %al,(%rax)
  0x00007fa5c5040573:   add    %al,(%rax)
  0x00007fa5c5040575:   add    %al,(%rax)
  0x00007fa5c5040577:   add    %al,(%rax)
  0x00007fa5c5040579:   add    %al,(%rax)
  0x00007fa5c504057b:   add    %al,(%rax)
  0x00007fa5c504057d:   add    %al,(%rax)
  0x00007fa5c504057f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_int_shuffle_mask [0x00007fa5c5040580, 0x00007fa5c50405c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040580:   add    %al,(%rcx)
  0x00007fa5c5040582:   add    (%rbx),%al
  0x00007fa5c5040584:   add    %al,(%rcx)
  0x00007fa5c5040586:   add    (%rbx),%al
  0x00007fa5c5040588:   add    %al,(%rcx)
  0x00007fa5c504058a:   add    (%rbx),%al
  0x00007fa5c504058c:   add    %al,(%rcx)
  0x00007fa5c504058e:   add    (%rbx),%al
  0x00007fa5c5040590:   add    %al,(%rcx)
  0x00007fa5c5040592:   add    (%rbx),%al
  0x00007fa5c5040594:   add    %al,(%rcx)
  0x00007fa5c5040596:   add    (%rbx),%al
  0x00007fa5c5040598:   add    %al,(%rcx)
  0x00007fa5c504059a:   add    (%rbx),%al
  0x00007fa5c504059c:   add    %al,(%rcx)
  0x00007fa5c504059e:   add    (%rbx),%al
  0x00007fa5c50405a0:   add    %al,(%rcx)
  0x00007fa5c50405a2:   add    (%rbx),%al
  0x00007fa5c50405a4:   add    %al,(%rcx)
  0x00007fa5c50405a6:   add    (%rbx),%al
  0x00007fa5c50405a8:   add    %al,(%rcx)
  0x00007fa5c50405aa:   add    (%rbx),%al
  0x00007fa5c50405ac:   add    %al,(%rcx)
  0x00007fa5c50405ae:   add    (%rbx),%al
  0x00007fa5c50405b0:   add    %al,(%rcx)
  0x00007fa5c50405b2:   add    (%rbx),%al
  0x00007fa5c50405b4:   add    %al,(%rcx)
  0x00007fa5c50405b6:   add    (%rbx),%al
  0x00007fa5c50405b8:   add    %al,(%rcx)
  0x00007fa5c50405ba:   add    (%rbx),%al
  0x00007fa5c50405bc:   add    %al,(%rcx)
  0x00007fa5c50405be:   add    (%rbx),%al
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_byte_shuffle_mask [0x00007fa5c50405c0, 0x00007fa5c50405e0] (32 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50405c0:   jo     Stub::<unknown> 0x00007fa5c5040632
  0x00007fa5c50405c2:   jo     Stub::<unknown> 0x00007fa5c5040634
  0x00007fa5c50405c4:   jo     Stub::<unknown> 0x00007fa5c5040636
  0x00007fa5c50405c6:   jo     Stub::<unknown> 0x00007fa5c5040638
  0x00007fa5c50405c8:   jo     Stub::<unknown> 0x00007fa5c504063a
  0x00007fa5c50405ca:   jo     Stub::<unknown> 0x00007fa5c504063c
  0x00007fa5c50405cc:   jo     Stub::<unknown> 0x00007fa5c504063e
  0x00007fa5c50405ce:   jo     Stub::<unknown> 0x00007fa5c5040640
  0x00007fa5c50405d0:   lock lock lock lock lock lock lock lock lock lock lock lock lock lock
  0x00007fa5c50405de:   lock
  0x00007fa5c50405df:   lock
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_short_shuffle_mask [0x00007fa5c50405e0, 0x00007fa5c5040620] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50405e0:   add    %al,(%rcx)
  0x00007fa5c50405e2:   add    %al,(%rcx)
  0x00007fa5c50405e4:   add    %al,(%rcx)
  0x00007fa5c50405e6:   add    %al,(%rcx)
  0x00007fa5c50405e8:   add    %al,(%rcx)
  0x00007fa5c50405ea:   add    %al,(%rcx)
  0x00007fa5c50405ec:   add    %al,(%rcx)
  0x00007fa5c50405ee:   add    %al,(%rcx)
  0x00007fa5c50405f0:   add    %al,(%rcx)
  0x00007fa5c50405f2:   add    %al,(%rcx)
  0x00007fa5c50405f4:   add    %al,(%rcx)
  0x00007fa5c50405f6:   add    %al,(%rcx)
  0x00007fa5c50405f8:   add    %al,(%rcx)
  0x00007fa5c50405fa:   add    %al,(%rcx)
  0x00007fa5c50405fc:   add    %al,(%rcx)
  0x00007fa5c50405fe:   add    %al,(%rcx)
  0x00007fa5c5040600:   add    %al,(%rcx)
  0x00007fa5c5040602:   add    %al,(%rcx)
  0x00007fa5c5040604:   add    %al,(%rcx)
  0x00007fa5c5040606:   add    %al,(%rcx)
  0x00007fa5c5040608:   add    %al,(%rcx)
  0x00007fa5c504060a:   add    %al,(%rcx)
  0x00007fa5c504060c:   add    %al,(%rcx)
  0x00007fa5c504060e:   add    %al,(%rcx)
  0x00007fa5c5040610:   add    %al,(%rcx)
  0x00007fa5c5040612:   add    %al,(%rcx)
  0x00007fa5c5040614:   add    %al,(%rcx)
  0x00007fa5c5040616:   add    %al,(%rcx)
  0x00007fa5c5040618:   add    %al,(%rcx)
  0x00007fa5c504061a:   add    %al,(%rcx)
  0x00007fa5c504061c:   add    %al,(%rcx)
  0x00007fa5c504061e:   add    %al,(%rcx)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_long_shuffle_mask [0x00007fa5c5040620, 0x00007fa5c5040660] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040620:   add    %al,(%rax)
  0x00007fa5c5040622:   add    %al,(%rax)
  0x00007fa5c5040624:   add    %eax,(%rax)
  0x00007fa5c5040626:   add    %al,(%rax)
  0x00007fa5c5040628:   add    %al,(%rax)
  0x00007fa5c504062a:   add    %al,(%rax)
  0x00007fa5c504062c:   add    %eax,(%rax)
  0x00007fa5c504062e:   add    %al,(%rax)
  0x00007fa5c5040630:   add    %al,(%rax)
  0x00007fa5c5040632:   add    %al,(%rax)
  0x00007fa5c5040634:   add    %eax,(%rax)
  0x00007fa5c5040636:   add    %al,(%rax)
  0x00007fa5c5040638:   add    %al,(%rax)
  0x00007fa5c504063a:   add    %al,(%rax)
  0x00007fa5c504063c:   add    %eax,(%rax)
  0x00007fa5c504063e:   add    %al,(%rax)
  0x00007fa5c5040640:   add    %al,(%rax)
  0x00007fa5c5040642:   add    %al,(%rax)
  0x00007fa5c5040644:   add    %eax,(%rax)
  0x00007fa5c5040646:   add    %al,(%rax)
  0x00007fa5c5040648:   add    %al,(%rax)
  0x00007fa5c504064a:   add    %al,(%rax)
  0x00007fa5c504064c:   add    %eax,(%rax)
  0x00007fa5c504064e:   add    %al,(%rax)
  0x00007fa5c5040650:   add    %al,(%rax)
  0x00007fa5c5040652:   add    %al,(%rax)
  0x00007fa5c5040654:   add    %eax,(%rax)
  0x00007fa5c5040656:   add    %al,(%rax)
  0x00007fa5c5040658:   add    %al,(%rax)
  0x00007fa5c504065a:   add    %al,(%rax)
  0x00007fa5c504065c:   add    %eax,(%rax)
  0x00007fa5c504065e:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vector_long_sign_mask [0x00007fa5c5040660, 0x00007fa5c50406a0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040660:   add    %al,(%rax)
  0x00007fa5c5040662:   add    %al,(%rax)
  0x00007fa5c5040664:   add    %al,(%rax)
  0x00007fa5c5040666:   add    %al,0x0(%rax)
  0x00007fa5c504066c:   add    %al,(%rax)
  0x00007fa5c504066e:   add    %al,0x0(%rax)
  0x00007fa5c5040674:   add    %al,(%rax)
  0x00007fa5c5040676:   add    %al,0x0(%rax)
  0x00007fa5c504067c:   add    %al,(%rax)
  0x00007fa5c504067e:   add    %al,0x0(%rax)
  0x00007fa5c5040684:   add    %al,(%rax)
  0x00007fa5c5040686:   add    %al,0x0(%rax)
  0x00007fa5c504068c:   add    %al,(%rax)
  0x00007fa5c504068e:   add    %al,0x0(%rax)
  0x00007fa5c5040694:   add    %al,(%rax)
  0x00007fa5c5040696:   add    %al,0x0(%rax)
  0x00007fa5c504069c:   add    %al,(%rax)
  0x00007fa5c504069e:   .byte 0x0
  0x00007fa5c504069f:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::iota_indices [0x00007fa5c50406a0, 0x00007fa5c5040820] (384 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50406a0:   add    %al,(%rcx)
  0x00007fa5c50406a2:   add    (%rbx),%al
  0x00007fa5c50406a4:   add    $0x5,%al
  0x00007fa5c50406a6:   (bad)  
  0x00007fa5c50406a7:   (bad)  
  0x00007fa5c50406a8:   or     %cl,(%rcx)
  0x00007fa5c50406aa:   or     (%rbx),%cl
  0x00007fa5c50406ac:   or     $0xd,%al
  0x00007fa5c50406ae:   (bad)  
  0x00007fa5c50406af:   movups (%rcx),%xmm2
  0x00007fa5c50406b2:   adc    (%rbx),%dl
  0x00007fa5c50406b4:   adc    $0x15,%al
  0x00007fa5c50406b6:   (bad)  
  0x00007fa5c50406b7:   (bad)  
  0x00007fa5c50406b8:   sbb    %bl,(%rcx)
  0x00007fa5c50406ba:   sbb    (%rbx),%bl
  0x00007fa5c50406bc:   sbb    $0x1d,%al
  0x00007fa5c50406be:   (bad)  
  0x00007fa5c50406bf:   (bad)  
  0x00007fa5c50406c0:   and    %ah,(%rcx)
  0x00007fa5c50406c2:   and    (%rbx),%ah
  0x00007fa5c50406c4:   and    $0x25,%al
  0x00007fa5c50406c6:   es (bad) 
  0x00007fa5c50406c8:   sub    %ch,(%rcx)
  0x00007fa5c50406ca:   sub    (%rbx),%ch
  0x00007fa5c50406cc:   sub    $0x2d,%al
  0x00007fa5c50406ce:   cs (bad) 
  0x00007fa5c50406d0:   xor    %dh,(%rcx)
  0x00007fa5c50406d2:   xor    (%rbx),%dh
  0x00007fa5c50406d4:   xor    $0x35,%al
  0x00007fa5c50406d6:   ss (bad) 
  0x00007fa5c50406d8:   cmp    %bh,(%rcx)
  0x00007fa5c50406da:   cmp    (%rbx),%bh
  0x00007fa5c50406dc:   cmp    $0x3d,%al
  0x00007fa5c50406de:   ds (bad) 
  0x00007fa5c50406e0:   add    %al,(%rax)
  0x00007fa5c50406e2:   add    %eax,(%rax)
  0x00007fa5c50406e4:   add    (%rax),%al
  0x00007fa5c50406e6:   add    (%rax),%eax
  0x00007fa5c50406e8:   add    $0x0,%al
  0x00007fa5c50406ea:   add    $0x7000600,%eax
  0x00007fa5c50406ef:   add    %cl,(%rax)
  0x00007fa5c50406f1:   add    %cl,(%rcx)
  0x00007fa5c50406f3:   add    %cl,(%rdx)
  0x00007fa5c50406f5:   add    %cl,(%rbx)
  0x00007fa5c50406f7:   add    %cl,(%rax,%rax,1)
  0x00007fa5c50406fa:   or     $0xf000e00,%eax
  0x00007fa5c50406ff:   add    %dl,(%rax)
  0x00007fa5c5040701:   add    %dl,(%rcx)
  0x00007fa5c5040703:   add    %dl,(%rdx)
  0x00007fa5c5040705:   add    %dl,(%rbx)
  0x00007fa5c5040707:   add    %dl,(%rax,%rax,1)
  0x00007fa5c504070a:   adc    $0x17001600,%eax
  0x00007fa5c504070f:   add    %bl,(%rax)
  0x00007fa5c5040711:   add    %bl,(%rcx)
  0x00007fa5c5040713:   add    %bl,(%rdx)
  0x00007fa5c5040715:   add    %bl,(%rbx)
  0x00007fa5c5040717:   add    %bl,(%rax,%rax,1)
  0x00007fa5c504071a:   sbb    $0x1f001e00,%eax
  0x00007fa5c504071f:   add    %al,(%rax)
  0x00007fa5c5040721:   add    %al,(%rax)
  0x00007fa5c5040723:   add    %al,(%rcx)
  0x00007fa5c5040725:   add    %al,(%rax)
  0x00007fa5c5040727:   add    %al,(%rdx)
  0x00007fa5c5040729:   add    %al,(%rax)
  0x00007fa5c504072b:   add    %al,(%rbx)
  0x00007fa5c504072d:   add    %al,(%rax)
  0x00007fa5c504072f:   add    %al,(%rax,%rax,1)
  0x00007fa5c5040732:   add    %al,(%rax)
  0x00007fa5c5040734:   add    $0x6000000,%eax
  0x00007fa5c5040739:   add    %al,(%rax)
  0x00007fa5c504073b:   add    %al,(%rdi)
  0x00007fa5c504073d:   add    %al,(%rax)
  0x00007fa5c504073f:   add    %cl,(%rax)
  0x00007fa5c5040741:   add    %al,(%rax)
  0x00007fa5c5040743:   add    %cl,(%rcx)
  0x00007fa5c5040745:   add    %al,(%rax)
  0x00007fa5c5040747:   add    %cl,(%rdx)
  0x00007fa5c5040749:   add    %al,(%rax)
  0x00007fa5c504074b:   add    %cl,(%rbx)
  0x00007fa5c504074d:   add    %al,(%rax)
  0x00007fa5c504074f:   add    %cl,(%rax,%rax,1)
  0x00007fa5c5040752:   add    %al,(%rax)
  0x00007fa5c5040754:   or     $0xe000000,%eax
  0x00007fa5c5040759:   add    %al,(%rax)
  0x00007fa5c504075b:   add    %cl,(%rdi)
  0x00007fa5c504075d:   add    %al,(%rax)
  0x00007fa5c504075f:   add    %al,(%rax)
  0x00007fa5c5040761:   add    %al,(%rax)
  0x00007fa5c5040763:   add    %al,(%rax)
  0x00007fa5c5040765:   add    %al,(%rax)
  0x00007fa5c5040767:   add    %al,(%rcx)
  0x00007fa5c5040769:   add    %al,(%rax)
  0x00007fa5c504076b:   add    %al,(%rax)
  0x00007fa5c504076d:   add    %al,(%rax)
  0x00007fa5c504076f:   add    %al,(%rdx)
  0x00007fa5c5040771:   add    %al,(%rax)
  0x00007fa5c5040773:   add    %al,(%rax)
  0x00007fa5c5040775:   add    %al,(%rax)
  0x00007fa5c5040777:   add    %al,(%rbx)
  0x00007fa5c5040779:   add    %al,(%rax)
  0x00007fa5c504077b:   add    %al,(%rax)
  0x00007fa5c504077d:   add    %al,(%rax)
  0x00007fa5c504077f:   add    %al,(%rax,%rax,1)
  0x00007fa5c5040782:   add    %al,(%rax)
  0x00007fa5c5040784:   add    %al,(%rax)
  0x00007fa5c5040786:   add    %al,(%rax)
  0x00007fa5c5040788:   add    $0x0,%eax
  0x00007fa5c504078d:   add    %al,(%rax)
  0x00007fa5c504078f:   add    %al,(%rsi)
  0x00007fa5c5040791:   add    %al,(%rax)
  0x00007fa5c5040793:   add    %al,(%rax)
  0x00007fa5c5040795:   add    %al,(%rax)
  0x00007fa5c5040797:   add    %al,(%rdi)
  0x00007fa5c5040799:   add    %al,(%rax)
  0x00007fa5c504079b:   add    %al,(%rax)
  0x00007fa5c504079d:   add    %al,(%rax)
  0x00007fa5c504079f:   add    %al,(%rax)
  0x00007fa5c50407a1:   add    %al,(%rax)
  0x00007fa5c50407a3:   add    %al,(%rax)
  0x00007fa5c50407a5:   add    %al,0x3f(%rax)
  0x00007fa5c50407ab:   add    %al,(%rax)
  0x00007fa5c50407ae:   rex
  0x00007fa5c50407af:   add    %al,(%rax)
  0x00007fa5c50407b2:   addb   $0x0,0x0(%rax)
  0x00007fa5c50407b6:   movabs 0xe0000040c0000040,%al
  0x00007fa5c50407bf:   add    %al,(%rax)
  0x00007fa5c50407c2:   add    %al,0x0(%rcx)
  0x00007fa5c50407c5:   add    %dl,(%rax)
  0x00007fa5c50407c7:   add    %al,(%r8)
  0x00007fa5c50407ca:   and    %al,0x0(%rcx)
  0x00007fa5c50407cd:   add    %dh,(%rax)
  0x00007fa5c50407cf:   add    %al,(%r8)
  0x00007fa5c50407d2:   rex
  0x00007fa5c50407d3:   add    %al,(%r8)
  0x00007fa5c50407d6:   push   %rax
  0x00007fa5c50407d7:   add    %al,(%r8)
  0x00007fa5c50407da:   (bad)  
  0x00007fa5c50407db:   add    %al,(%r8)
  0x00007fa5c50407de:   jo     Stub::<unknown> 0x00007fa5c5040821
  0x00007fa5c50407e0:   add    %al,(%rax)
  0x00007fa5c50407e2:   add    %al,(%rax)
  0x00007fa5c50407e4:   add    %al,(%rax)
  0x00007fa5c50407e6:   add    %al,(%rax)
  0x00007fa5c50407e8:   add    %al,(%rax)
  0x00007fa5c50407ea:   add    %al,(%rax)
  0x00007fa5c50407ec:   add    %al,(%rax)
  0x00007fa5c50407ee:   lock (bad) 
  0x00007fa5c50407f0:   add    %al,(%rax)
  0x00007fa5c50407f2:   add    %al,(%rax)
  0x00007fa5c50407f4:   add    %al,(%rax)
  0x00007fa5c50407f6:   add    %al,0x0(%rax)
  0x00007fa5c50407f9:   add    %al,(%rax)
  0x00007fa5c50407fb:   add    %al,(%rax)
  0x00007fa5c50407fd:   add    %cl,(%rax)
  0x00007fa5c50407ff:   add    %al,(%rax)
  0x00007fa5c5040802:   add    %al,(%rax)
  0x00007fa5c5040804:   add    %al,(%rax)
  0x00007fa5c5040806:   adc    %al,0x0(%rax)
  0x00007fa5c5040809:   add    %al,(%rax)
  0x00007fa5c504080b:   add    %al,(%rax)
  0x00007fa5c504080d:   add    %dl,(%rax,%rax,2)
  0x00007fa5c5040810:   add    %al,(%rax)
  0x00007fa5c5040812:   add    %al,(%rax)
  0x00007fa5c5040814:   add    %al,(%rax)
  0x00007fa5c5040816:   sbb    %al,0x0(%rax)
  0x00007fa5c5040819:   add    %al,(%rax)
  0x00007fa5c504081b:   add    %al,(%rax)
  0x00007fa5c504081d:   add    %bl,(%rax,%rax,2)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::count_leading_zeros_lut [0x00007fa5c5040880, 0x00007fa5c50408c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040880:   add    $0x3,%al
  0x00007fa5c5040882:   add    (%rdx),%al
  0x00007fa5c5040884:   add    %eax,(%rcx)
  0x00007fa5c5040886:   add    %eax,(%rcx)
  0x00007fa5c5040888:   add    %al,(%rax)
  0x00007fa5c504088a:   add    %al,(%rax)
  0x00007fa5c504088c:   add    %al,(%rax)
  0x00007fa5c504088e:   add    %al,(%rax)
  0x00007fa5c5040890:   add    $0x3,%al
  0x00007fa5c5040892:   add    (%rdx),%al
  0x00007fa5c5040894:   add    %eax,(%rcx)
  0x00007fa5c5040896:   add    %eax,(%rcx)
  0x00007fa5c5040898:   add    %al,(%rax)
  0x00007fa5c504089a:   add    %al,(%rax)
  0x00007fa5c504089c:   add    %al,(%rax)
  0x00007fa5c504089e:   add    %al,(%rax)
  0x00007fa5c50408a0:   add    $0x3,%al
  0x00007fa5c50408a2:   add    (%rdx),%al
  0x00007fa5c50408a4:   add    %eax,(%rcx)
  0x00007fa5c50408a6:   add    %eax,(%rcx)
  0x00007fa5c50408a8:   add    %al,(%rax)
  0x00007fa5c50408aa:   add    %al,(%rax)
  0x00007fa5c50408ac:   add    %al,(%rax)
  0x00007fa5c50408ae:   add    %al,(%rax)
  0x00007fa5c50408b0:   add    $0x3,%al
  0x00007fa5c50408b2:   add    (%rdx),%al
  0x00007fa5c50408b4:   add    %eax,(%rcx)
  0x00007fa5c50408b6:   add    %eax,(%rcx)
  0x00007fa5c50408b8:   add    %al,(%rax)
  0x00007fa5c50408ba:   add    %al,(%rax)
  0x00007fa5c50408bc:   add    %al,(%rax)
  0x00007fa5c50408be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::reverse_bit_lut [0x00007fa5c50408c0, 0x00007fa5c5040900] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50408c0:   add    %cl,(%rax)
  0x00007fa5c50408c2:   add    $0xc,%al
  0x00007fa5c50408c4:   add    (%rdx),%cl
  0x00007fa5c50408c6:   (bad)  
  0x00007fa5c50408c7:   (bad)  
  0x00007fa5c50408c8:   add    %ecx,(%rcx)
  0x00007fa5c50408ca:   add    $0x70b030d,%eax
  0x00007fa5c50408cf:   str    (%rax)
  0x00007fa5c50408d2:   add    $0xc,%al
  0x00007fa5c50408d4:   add    (%rdx),%cl
  0x00007fa5c50408d6:   (bad)  
  0x00007fa5c50408d7:   (bad)  
  0x00007fa5c50408d8:   add    %ecx,(%rcx)
  0x00007fa5c50408da:   add    $0x70b030d,%eax
  0x00007fa5c50408df:   str    (%rax)
  0x00007fa5c50408e2:   add    $0xc,%al
  0x00007fa5c50408e4:   add    (%rdx),%cl
  0x00007fa5c50408e6:   (bad)  
  0x00007fa5c50408e7:   (bad)  
  0x00007fa5c50408e8:   add    %ecx,(%rcx)
  0x00007fa5c50408ea:   add    $0x70b030d,%eax
  0x00007fa5c50408ef:   str    (%rax)
  0x00007fa5c50408f2:   add    $0xc,%al
  0x00007fa5c50408f4:   add    (%rdx),%cl
  0x00007fa5c50408f6:   (bad)  
  0x00007fa5c50408f7:   (bad)  
  0x00007fa5c50408f8:   add    %ecx,(%rcx)
  0x00007fa5c50408fa:   add    $0x70b030d,%eax
  0x00007fa5c50408ff:   .byte 0xf
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_long [0x00007fa5c5040900, 0x00007fa5c5040940] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040900:   (bad)  
  0x00007fa5c5040901:   (bad)  
  0x00007fa5c5040902:   add    $0x1020304,%eax
  0x00007fa5c5040907:   add    %cl,(%rdi)
  0x00007fa5c5040909:   (bad)  
  0x00007fa5c504090a:   or     $0x90a0b0c,%eax
  0x00007fa5c504090f:   or     %al,(%rdi)
  0x00007fa5c5040911:   (bad)  
  0x00007fa5c5040912:   add    $0x1020304,%eax
  0x00007fa5c5040917:   add    %cl,(%rdi)
  0x00007fa5c5040919:   (bad)  
  0x00007fa5c504091a:   or     $0x90a0b0c,%eax
  0x00007fa5c504091f:   or     %al,(%rdi)
  0x00007fa5c5040921:   (bad)  
  0x00007fa5c5040922:   add    $0x1020304,%eax
  0x00007fa5c5040927:   add    %cl,(%rdi)
  0x00007fa5c5040929:   (bad)  
  0x00007fa5c504092a:   or     $0x90a0b0c,%eax
  0x00007fa5c504092f:   or     %al,(%rdi)
  0x00007fa5c5040931:   (bad)  
  0x00007fa5c5040932:   add    $0x1020304,%eax
  0x00007fa5c5040937:   add    %cl,(%rdi)
  0x00007fa5c5040939:   (bad)  
  0x00007fa5c504093a:   or     $0x90a0b0c,%eax
  0x00007fa5c504093f:   .byte 0x8
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_int [0x00007fa5c5040940, 0x00007fa5c5040980] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040940:   add    (%rdx),%eax
  0x00007fa5c5040942:   add    %eax,(%rax)
  0x00007fa5c5040944:   (bad)  
  0x00007fa5c5040945:   (bad)  
  0x00007fa5c5040946:   add    $0x90a0b04,%eax
  0x00007fa5c504094b:   or     %cl,(%rdi)
  0x00007fa5c504094d:   (bad)  
  0x00007fa5c504094e:   or     $0x102030c,%eax
  0x00007fa5c5040953:   add    %al,(%rdi)
  0x00007fa5c5040955:   (bad)  
  0x00007fa5c5040956:   add    $0x90a0b04,%eax
  0x00007fa5c504095b:   or     %cl,(%rdi)
  0x00007fa5c504095d:   (bad)  
  0x00007fa5c504095e:   or     $0x102030c,%eax
  0x00007fa5c5040963:   add    %al,(%rdi)
  0x00007fa5c5040965:   (bad)  
  0x00007fa5c5040966:   add    $0x90a0b04,%eax
  0x00007fa5c504096b:   or     %cl,(%rdi)
  0x00007fa5c504096d:   (bad)  
  0x00007fa5c504096e:   or     $0x102030c,%eax
  0x00007fa5c5040973:   add    %al,(%rdi)
  0x00007fa5c5040975:   (bad)  
  0x00007fa5c5040976:   add    $0x90a0b04,%eax
  0x00007fa5c504097b:   or     %cl,(%rdi)
  0x00007fa5c504097d:   (bad)  
  0x00007fa5c504097e:   .byte 0xd
  0x00007fa5c504097f:   .byte 0xc
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::perm_mask_short [0x00007fa5c5040980, 0x00007fa5c50409c0] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040980:   add    %eax,(%rax)
  0x00007fa5c5040982:   add    (%rdx),%eax
  0x00007fa5c5040984:   add    $0x9060704,%eax
  0x00007fa5c5040989:   or     %cl,(%rbx)
  0x00007fa5c504098b:   or     0x10e0f0c(%rip),%cl        # 0x00007fa5c612189d
  0x00007fa5c5040991:   add    %al,(%rbx)
  0x00007fa5c5040993:   add    0x9060704(%rip),%al        # 0x00007fa5ce0a109d = JVMCIEnv::set_BytecodeFrame_AFTER_BCI(int)+13
  0x00007fa5c5040999:   or     %cl,(%rbx)
  0x00007fa5c504099b:   or     0x10e0f0c(%rip),%cl        # 0x00007fa5c61218ad
  0x00007fa5c50409a1:   add    %al,(%rbx)
  0x00007fa5c50409a3:   add    0x9060704(%rip),%al        # 0x00007fa5ce0a10ad
  0x00007fa5c50409a9:   or     %cl,(%rbx)
  0x00007fa5c50409ab:   or     0x10e0f0c(%rip),%cl        # 0x00007fa5c61218bd
  0x00007fa5c50409b1:   add    %al,(%rbx)
  0x00007fa5c50409b3:   add    0x9060704(%rip),%al        # 0x00007fa5ce0a10bd = JVMCIEnv::get_BytecodeFrame_AFTER_EXCEPTION_BCI()+13
  0x00007fa5c50409b9:   or     %cl,(%rbx)
  0x00007fa5c50409bb:   .byte 0xa
  0x00007fa5c50409bc:   .byte 0xd
  0x00007fa5c50409bd:   or     $0xf,%al
  0x00007fa5c50409bf:   (bad)  
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::popcount_lut [0x00007fa5c50409c0, 0x00007fa5c5040a00] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50409c0:   add    %al,(%rcx)
  0x00007fa5c50409c2:   add    %eax,(%rdx)
  0x00007fa5c50409c4:   add    %eax,(%rdx)
  0x00007fa5c50409c6:   add    (%rbx),%al
  0x00007fa5c50409c8:   add    %eax,(%rdx)
  0x00007fa5c50409ca:   add    (%rbx),%al
  0x00007fa5c50409cc:   add    (%rbx),%al
  0x00007fa5c50409ce:   add    (%rax,%rax,1),%eax
  0x00007fa5c50409d1:   add    %eax,(%rcx)
  0x00007fa5c50409d3:   add    (%rcx),%al
  0x00007fa5c50409d5:   add    (%rdx),%al
  0x00007fa5c50409d7:   add    (%rcx),%eax
  0x00007fa5c50409d9:   add    (%rdx),%al
  0x00007fa5c50409db:   add    (%rdx),%eax
  0x00007fa5c50409dd:   add    (%rbx),%eax
  0x00007fa5c50409df:   add    $0x0,%al
  0x00007fa5c50409e1:   add    %eax,(%rcx)
  0x00007fa5c50409e3:   add    (%rcx),%al
  0x00007fa5c50409e5:   add    (%rdx),%al
  0x00007fa5c50409e7:   add    (%rcx),%eax
  0x00007fa5c50409e9:   add    (%rdx),%al
  0x00007fa5c50409eb:   add    (%rdx),%eax
  0x00007fa5c50409ed:   add    (%rbx),%eax
  0x00007fa5c50409ef:   add    $0x0,%al
  0x00007fa5c50409f1:   add    %eax,(%rcx)
  0x00007fa5c50409f3:   add    (%rcx),%al
  0x00007fa5c50409f5:   add    (%rdx),%al
  0x00007fa5c50409f7:   add    (%rcx),%eax
  0x00007fa5c50409f9:   add    (%rdx),%al
  0x00007fa5c50409fb:   add    (%rdx),%eax
  0x00007fa5c50409fd:   add    (%rbx),%eax
  0x00007fa5c50409ff:   .byte 0x4
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::_data_cache_writeback [0x00007fa5c5040a00, 0x00007fa5c5040a0a] (10 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040a00:   push   %rbp
  0x00007fa5c5040a01:   mov    %rsp,%rbp
  0x00007fa5c5040a04:   clwb   (%rdi)
  0x00007fa5c5040a08:   leaveq 
  0x00007fa5c5040a09:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::_data_cache_writeback_sync [0x00007fa5c5040a20, 0x00007fa5c5040a32] (18 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040a20:   push   %rbp
  0x00007fa5c5040a21:   mov    %rsp,%rbp
  0x00007fa5c5040a24:   cmp    $0x0,%edi
  0x00007fa5c5040a27:   jne    Stub::_data_cache_writeback_sync+16 0x00007fa5c5040a30
  0x00007fa5c5040a2d:   sfence 
  0x00007fa5c5040a30:   leaveq 
  0x00007fa5c5040a31:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_disjoint_arraycopy [0x00007fa5c5040a40, 0x00007fa5c5040af3] (179 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040a40:   push   %rbp
  0x00007fa5c5040a41:   mov    %rsp,%rbp
  0x00007fa5c5040a44:   mov    %rdx,%rcx
  0x00007fa5c5040a47:   shr    $0x3,%rdx
  0x00007fa5c5040a4b:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007fa5c5040a50:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007fa5c5040a55:   neg    %rdx
  0x00007fa5c5040a58:   jmpq   Stub::jbyte_disjoint_arraycopy+136 0x00007fa5c5040ac8
  0x00007fa5c5040a5d:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007fa5c5040a62:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007fa5c5040a67:   inc    %rdx
  0x00007fa5c5040a6a:   jne    Stub::jbyte_disjoint_arraycopy+29 0x00007fa5c5040a5d
  0x00007fa5c5040a6c:   test   $0x4,%cl
  0x00007fa5c5040a6f:   je     Stub::jbyte_disjoint_arraycopy+63 0x00007fa5c5040a7f
  0x00007fa5c5040a71:   mov    0x8(%rdi),%eax
  0x00007fa5c5040a74:   mov    %eax,0x8(%rsi)
  0x00007fa5c5040a77:   add    $0x4,%rdi
  0x00007fa5c5040a7b:   add    $0x4,%rsi
  0x00007fa5c5040a7f:   test   $0x2,%cl
  0x00007fa5c5040a82:   je     Stub::jbyte_disjoint_arraycopy+84 0x00007fa5c5040a94
  0x00007fa5c5040a84:   mov    0x8(%rdi),%ax
  0x00007fa5c5040a88:   mov    %ax,0x8(%rsi)
  0x00007fa5c5040a8c:   add    $0x2,%rdi
  0x00007fa5c5040a90:   add    $0x2,%rsi
  0x00007fa5c5040a94:   test   $0x1,%cl
  0x00007fa5c5040a97:   je     Stub::jbyte_disjoint_arraycopy+95 0x00007fa5c5040a9f
  0x00007fa5c5040a99:   mov    0x8(%rdi),%al
  0x00007fa5c5040a9c:   mov    %al,0x8(%rsi)
  0x00007fa5c5040a9f:   xor    %rax,%rax
  0x00007fa5c5040aa2:   vzeroupper 
  0x00007fa5c5040aa5:   leaveq 
  0x00007fa5c5040aa6:   retq   
  0x00007fa5c5040aa7:   nopw   0x0(%rax,%rax,1)
  0x00007fa5c5040ab0:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007fa5c5040ab6:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007fa5c5040abc:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007fa5c5040ac2:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007fa5c5040ac8:   add    $0x8,%rdx
  0x00007fa5c5040acc:   jle    Stub::jbyte_disjoint_arraycopy+112 0x00007fa5c5040ab0
  0x00007fa5c5040ace:   sub    $0x4,%rdx
  0x00007fa5c5040ad2:   jg     Stub::jbyte_disjoint_arraycopy+164 0x00007fa5c5040ae4
  0x00007fa5c5040ad4:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007fa5c5040ada:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007fa5c5040ae0:   add    $0x4,%rdx
  0x00007fa5c5040ae4:   sub    $0x4,%rdx
  0x00007fa5c5040ae8:   jl     Stub::jbyte_disjoint_arraycopy+29 0x00007fa5c5040a5d
  0x00007fa5c5040aee:   jmpq   Stub::jbyte_disjoint_arraycopy+44 0x00007fa5c5040a6c
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_arraycopy [0x00007fa5c5040b00, 0x00007fa5c5040bbe] (190 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040b00:   push   %rbp
  0x00007fa5c5040b01:   mov    %rsp,%rbp
  0x00007fa5c5040b04:   cmp    %rdi,%rsi
  0x00007fa5c5040b07:   lea    (%rdi,%rdx,1),%rax
  0x00007fa5c5040b0b:   jbe    Stub::jbyte_disjoint_arraycopy+4 0x00007fa5c5040a44
  0x00007fa5c5040b11:   cmp    %rax,%rsi
  0x00007fa5c5040b14:   jae    Stub::jbyte_disjoint_arraycopy+4 0x00007fa5c5040a44
  0x00007fa5c5040b1a:   mov    %rdx,%rcx
  0x00007fa5c5040b1d:   shr    $0x3,%rdx
  0x00007fa5c5040b21:   test   $0x1,%cl
  0x00007fa5c5040b24:   je     Stub::jbyte_arraycopy+53 0x00007fa5c5040b35
  0x00007fa5c5040b2a:   mov    -0x1(%rdi,%rcx,1),%al
  0x00007fa5c5040b2e:   mov    %al,-0x1(%rsi,%rcx,1)
  0x00007fa5c5040b32:   dec    %rcx
  0x00007fa5c5040b35:   test   $0x2,%cl
  0x00007fa5c5040b38:   je     Stub::jbyte_arraycopy+72 0x00007fa5c5040b48
  0x00007fa5c5040b3e:   mov    -0x2(%rdi,%rcx,1),%ax
  0x00007fa5c5040b43:   mov    %ax,-0x2(%rsi,%rcx,1)
  0x00007fa5c5040b48:   test   $0x4,%cl
  0x00007fa5c5040b4b:   je     Stub::jbyte_arraycopy+150 0x00007fa5c5040b96
  0x00007fa5c5040b51:   mov    (%rdi,%rdx,8),%eax
  0x00007fa5c5040b54:   mov    %eax,(%rsi,%rdx,8)
  0x00007fa5c5040b57:   jmpq   Stub::jbyte_arraycopy+150 0x00007fa5c5040b96
  0x00007fa5c5040b5c:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007fa5c5040b61:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007fa5c5040b66:   dec    %rdx
  0x00007fa5c5040b69:   jne    Stub::jbyte_arraycopy+92 0x00007fa5c5040b5c
  0x00007fa5c5040b6b:   xor    %rax,%rax
  0x00007fa5c5040b6e:   vzeroupper 
  0x00007fa5c5040b71:   leaveq 
  0x00007fa5c5040b72:   retq   
  0x00007fa5c5040b73:   nopw   0x0(%rax,%rax,1)
  0x00007fa5c5040b7c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5040b80:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007fa5c5040b86:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007fa5c5040b8c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007fa5c5040b91:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007fa5c5040b96:   sub    $0x8,%rdx
  0x00007fa5c5040b9a:   jge    Stub::jbyte_arraycopy+128 0x00007fa5c5040b80
  0x00007fa5c5040b9c:   add    $0x4,%rdx
  0x00007fa5c5040ba0:   jl     Stub::jbyte_arraycopy+176 0x00007fa5c5040bb0
  0x00007fa5c5040ba2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007fa5c5040ba7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007fa5c5040bac:   sub    $0x4,%rdx
  0x00007fa5c5040bb0:   add    $0x4,%rdx
  0x00007fa5c5040bb4:   jg     Stub::jbyte_arraycopy+92 0x00007fa5c5040b5c
  0x00007fa5c5040bb6:   xor    %rax,%rax
  0x00007fa5c5040bb9:   vzeroupper 
  0x00007fa5c5040bbc:   leaveq 
  0x00007fa5c5040bbd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_disjoint_arraycopy [0x00007fa5c5040bc0, 0x00007fa5c5040c5c] (156 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040bc0:   push   %rbp
  0x00007fa5c5040bc1:   mov    %rsp,%rbp
  0x00007fa5c5040bc4:   mov    %rdx,%rcx
  0x00007fa5c5040bc7:   shr    $0x2,%rdx
  0x00007fa5c5040bcb:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007fa5c5040bd0:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007fa5c5040bd5:   neg    %rdx
  0x00007fa5c5040bd8:   jmpq   Stub::jshort_disjoint_arraycopy+120 0x00007fa5c5040c38
  0x00007fa5c5040bdd:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007fa5c5040be2:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007fa5c5040be7:   inc    %rdx
  0x00007fa5c5040bea:   jne    Stub::jshort_disjoint_arraycopy+29 0x00007fa5c5040bdd
  0x00007fa5c5040bec:   test   $0x2,%cl
  0x00007fa5c5040bef:   je     Stub::jshort_disjoint_arraycopy+63 0x00007fa5c5040bff
  0x00007fa5c5040bf1:   mov    0x8(%rdi),%eax
  0x00007fa5c5040bf4:   mov    %eax,0x8(%rsi)
  0x00007fa5c5040bf7:   add    $0x4,%rdi
  0x00007fa5c5040bfb:   add    $0x4,%rsi
  0x00007fa5c5040bff:   test   $0x1,%cl
  0x00007fa5c5040c02:   je     Stub::jshort_disjoint_arraycopy+76 0x00007fa5c5040c0c
  0x00007fa5c5040c04:   mov    0x8(%rdi),%ax
  0x00007fa5c5040c08:   mov    %ax,0x8(%rsi)
  0x00007fa5c5040c0c:   xor    %rax,%rax
  0x00007fa5c5040c0f:   vzeroupper 
  0x00007fa5c5040c12:   leaveq 
  0x00007fa5c5040c13:   retq   
  0x00007fa5c5040c14:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c5040c1c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5040c20:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007fa5c5040c26:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007fa5c5040c2c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007fa5c5040c32:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007fa5c5040c38:   add    $0x8,%rdx
  0x00007fa5c5040c3c:   jle    Stub::jshort_disjoint_arraycopy+96 0x00007fa5c5040c20
  0x00007fa5c5040c3e:   sub    $0x4,%rdx
  0x00007fa5c5040c42:   jg     Stub::jshort_disjoint_arraycopy+148 0x00007fa5c5040c54
  0x00007fa5c5040c44:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007fa5c5040c4a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007fa5c5040c50:   add    $0x4,%rdx
  0x00007fa5c5040c54:   sub    $0x4,%rdx
  0x00007fa5c5040c58:   jl     Stub::jshort_disjoint_arraycopy+29 0x00007fa5c5040bdd
  0x00007fa5c5040c5a:   jmp    Stub::jshort_disjoint_arraycopy+44 0x00007fa5c5040bec
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_arraycopy [0x00007fa5c5040c60, 0x00007fa5c5040cfe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040c60:   push   %rbp
  0x00007fa5c5040c61:   mov    %rsp,%rbp
  0x00007fa5c5040c64:   cmp    %rdi,%rsi
  0x00007fa5c5040c67:   lea    (%rdi,%rdx,2),%rax
  0x00007fa5c5040c6b:   jbe    Stub::jshort_disjoint_arraycopy+4 0x00007fa5c5040bc4
  0x00007fa5c5040c71:   cmp    %rax,%rsi
  0x00007fa5c5040c74:   jae    Stub::jshort_disjoint_arraycopy+4 0x00007fa5c5040bc4
  0x00007fa5c5040c7a:   mov    %rdx,%rcx
  0x00007fa5c5040c7d:   shr    $0x2,%rdx
  0x00007fa5c5040c81:   test   $0x1,%cl
  0x00007fa5c5040c84:   je     Stub::jshort_arraycopy+48 0x00007fa5c5040c90
  0x00007fa5c5040c86:   mov    -0x2(%rdi,%rcx,2),%ax
  0x00007fa5c5040c8b:   mov    %ax,-0x2(%rsi,%rcx,2)
  0x00007fa5c5040c90:   test   $0x2,%cl
  0x00007fa5c5040c93:   je     Stub::jshort_arraycopy+118 0x00007fa5c5040cd6
  0x00007fa5c5040c99:   mov    (%rdi,%rdx,8),%eax
  0x00007fa5c5040c9c:   mov    %eax,(%rsi,%rdx,8)
  0x00007fa5c5040c9f:   jmpq   Stub::jshort_arraycopy+118 0x00007fa5c5040cd6
  0x00007fa5c5040ca4:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007fa5c5040ca9:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007fa5c5040cae:   dec    %rdx
  0x00007fa5c5040cb1:   jne    Stub::jshort_arraycopy+68 0x00007fa5c5040ca4
  0x00007fa5c5040cb3:   xor    %rax,%rax
  0x00007fa5c5040cb6:   vzeroupper 
  0x00007fa5c5040cb9:   leaveq 
  0x00007fa5c5040cba:   retq   
  0x00007fa5c5040cbb:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c5040cc0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007fa5c5040cc6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007fa5c5040ccc:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007fa5c5040cd1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007fa5c5040cd6:   sub    $0x8,%rdx
  0x00007fa5c5040cda:   jge    Stub::jshort_arraycopy+96 0x00007fa5c5040cc0
  0x00007fa5c5040cdc:   add    $0x4,%rdx
  0x00007fa5c5040ce0:   jl     Stub::jshort_arraycopy+144 0x00007fa5c5040cf0
  0x00007fa5c5040ce2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007fa5c5040ce7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007fa5c5040cec:   sub    $0x4,%rdx
  0x00007fa5c5040cf0:   add    $0x4,%rdx
  0x00007fa5c5040cf4:   jg     Stub::jshort_arraycopy+68 0x00007fa5c5040ca4
  0x00007fa5c5040cf6:   xor    %rax,%rax
  0x00007fa5c5040cf9:   vzeroupper 
  0x00007fa5c5040cfc:   leaveq 
  0x00007fa5c5040cfd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_disjoint_arraycopy [0x00007fa5c5040d00, 0x00007fa5c5040d7c] (124 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040d00:   push   %rbp
  0x00007fa5c5040d01:   mov    %rsp,%rbp
  0x00007fa5c5040d04:   mov    %rdx,%rcx
  0x00007fa5c5040d07:   shr    %rdx
  0x00007fa5c5040d0a:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007fa5c5040d0f:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007fa5c5040d14:   neg    %rdx
  0x00007fa5c5040d17:   jmpq   Stub::jint_disjoint_arraycopy+88 0x00007fa5c5040d58
  0x00007fa5c5040d1c:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007fa5c5040d21:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007fa5c5040d26:   inc    %rdx
  0x00007fa5c5040d29:   jne    Stub::jint_disjoint_arraycopy+28 0x00007fa5c5040d1c
  0x00007fa5c5040d2b:   test   $0x1,%cl
  0x00007fa5c5040d2e:   je     Stub::jint_disjoint_arraycopy+54 0x00007fa5c5040d36
  0x00007fa5c5040d30:   mov    0x8(%rdi),%eax
  0x00007fa5c5040d33:   mov    %eax,0x8(%rsi)
  0x00007fa5c5040d36:   vzeroupper 
  0x00007fa5c5040d39:   xor    %rax,%rax
  0x00007fa5c5040d3c:   leaveq 
  0x00007fa5c5040d3d:   retq   
  0x00007fa5c5040d3e:   xchg   %ax,%ax
  0x00007fa5c5040d40:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007fa5c5040d46:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007fa5c5040d4c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007fa5c5040d52:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007fa5c5040d58:   add    $0x8,%rdx
  0x00007fa5c5040d5c:   jle    Stub::jint_disjoint_arraycopy+64 0x00007fa5c5040d40
  0x00007fa5c5040d5e:   sub    $0x4,%rdx
  0x00007fa5c5040d62:   jg     Stub::jint_disjoint_arraycopy+116 0x00007fa5c5040d74
  0x00007fa5c5040d64:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007fa5c5040d6a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007fa5c5040d70:   add    $0x4,%rdx
  0x00007fa5c5040d74:   sub    $0x4,%rdx
  0x00007fa5c5040d78:   jl     Stub::jint_disjoint_arraycopy+28 0x00007fa5c5040d1c
  0x00007fa5c5040d7a:   jmp    Stub::jint_disjoint_arraycopy+43 0x00007fa5c5040d2b
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_arraycopy [0x00007fa5c5040d80, 0x00007fa5c5040e0e] (142 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040d80:   push   %rbp
  0x00007fa5c5040d81:   mov    %rsp,%rbp
  0x00007fa5c5040d84:   cmp    %rdi,%rsi
  0x00007fa5c5040d87:   lea    (%rdi,%rdx,4),%rax
  0x00007fa5c5040d8b:   jbe    Stub::jint_disjoint_arraycopy+4 0x00007fa5c5040d04
  0x00007fa5c5040d91:   cmp    %rax,%rsi
  0x00007fa5c5040d94:   jae    Stub::jint_disjoint_arraycopy+4 0x00007fa5c5040d04
  0x00007fa5c5040d9a:   mov    %rdx,%rcx
  0x00007fa5c5040d9d:   shr    %rdx
  0x00007fa5c5040da0:   test   $0x1,%cl
  0x00007fa5c5040da3:   je     Stub::jint_arraycopy+102 0x00007fa5c5040de6
  0x00007fa5c5040da9:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007fa5c5040dad:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007fa5c5040db1:   jmpq   Stub::jint_arraycopy+102 0x00007fa5c5040de6
  0x00007fa5c5040db6:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007fa5c5040dbb:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007fa5c5040dc0:   dec    %rdx
  0x00007fa5c5040dc3:   jne    Stub::jint_arraycopy+54 0x00007fa5c5040db6
  0x00007fa5c5040dc5:   xor    %rax,%rax
  0x00007fa5c5040dc8:   vzeroupper 
  0x00007fa5c5040dcb:   leaveq 
  0x00007fa5c5040dcc:   retq   
  0x00007fa5c5040dcd:   data16 xchg %ax,%ax
  0x00007fa5c5040dd0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007fa5c5040dd6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007fa5c5040ddc:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007fa5c5040de1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007fa5c5040de6:   sub    $0x8,%rdx
  0x00007fa5c5040dea:   jge    Stub::jint_arraycopy+80 0x00007fa5c5040dd0
  0x00007fa5c5040dec:   add    $0x4,%rdx
  0x00007fa5c5040df0:   jl     Stub::jint_arraycopy+128 0x00007fa5c5040e00
  0x00007fa5c5040df2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007fa5c5040df7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007fa5c5040dfc:   sub    $0x4,%rdx
  0x00007fa5c5040e00:   add    $0x4,%rdx
  0x00007fa5c5040e04:   jg     Stub::jint_arraycopy+54 0x00007fa5c5040db6
  0x00007fa5c5040e06:   xor    %rax,%rax
  0x00007fa5c5040e09:   vzeroupper 
  0x00007fa5c5040e0c:   leaveq 
  0x00007fa5c5040e0d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jlong_disjoint_arraycopy [0x00007fa5c5040e20, 0x00007fa5c5040e92] (114 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040e20:   push   %rbp
  0x00007fa5c5040e21:   mov    %rsp,%rbp
  0x00007fa5c5040e24:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007fa5c5040e29:   lea    -0x8(%rsi,%rdx,8),%rcx
  0x00007fa5c5040e2e:   neg    %rdx
  0x00007fa5c5040e31:   jmpq   Stub::jlong_disjoint_arraycopy+72 0x00007fa5c5040e68
  0x00007fa5c5040e36:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007fa5c5040e3b:   mov    %rax,0x8(%rcx,%rdx,8)
  0x00007fa5c5040e40:   inc    %rdx
  0x00007fa5c5040e43:   jne    Stub::jlong_disjoint_arraycopy+22 0x00007fa5c5040e36
  0x00007fa5c5040e45:   xor    %rax,%rax
  0x00007fa5c5040e48:   vzeroupper 
  0x00007fa5c5040e4b:   leaveq 
  0x00007fa5c5040e4c:   retq   
  0x00007fa5c5040e4d:   data16 xchg %ax,%ax
  0x00007fa5c5040e50:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007fa5c5040e56:   vmovdqu %ymm0,-0x38(%rcx,%rdx,8)
  0x00007fa5c5040e5c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007fa5c5040e62:   vmovdqu %ymm1,-0x18(%rcx,%rdx,8)
  0x00007fa5c5040e68:   add    $0x8,%rdx
  0x00007fa5c5040e6c:   jle    Stub::jlong_disjoint_arraycopy+48 0x00007fa5c5040e50
  0x00007fa5c5040e6e:   sub    $0x4,%rdx
  0x00007fa5c5040e72:   jg     Stub::jlong_disjoint_arraycopy+100 0x00007fa5c5040e84
  0x00007fa5c5040e74:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007fa5c5040e7a:   vmovdqu %ymm0,-0x18(%rcx,%rdx,8)
  0x00007fa5c5040e80:   add    $0x4,%rdx
  0x00007fa5c5040e84:   sub    $0x4,%rdx
  0x00007fa5c5040e88:   jl     Stub::jlong_disjoint_arraycopy+22 0x00007fa5c5040e36
  0x00007fa5c5040e8a:   vzeroupper 
  0x00007fa5c5040e8d:   xor    %rax,%rax
  0x00007fa5c5040e90:   leaveq 
  0x00007fa5c5040e91:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jlong_arraycopy [0x00007fa5c5040ea0, 0x00007fa5c5040f1e] (126 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040ea0:   push   %rbp
  0x00007fa5c5040ea1:   mov    %rsp,%rbp
  0x00007fa5c5040ea4:   cmp    %rdi,%rsi
  0x00007fa5c5040ea7:   lea    (%rdi,%rdx,8),%rax
  0x00007fa5c5040eab:   jbe    Stub::jlong_disjoint_arraycopy+4 0x00007fa5c5040e24
  0x00007fa5c5040eb1:   cmp    %rax,%rsi
  0x00007fa5c5040eb4:   jae    Stub::jlong_disjoint_arraycopy+4 0x00007fa5c5040e24
  0x00007fa5c5040eba:   jmpq   Stub::jlong_arraycopy+86 0x00007fa5c5040ef6
  0x00007fa5c5040ebf:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007fa5c5040ec4:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007fa5c5040ec9:   dec    %rdx
  0x00007fa5c5040ecc:   jne    Stub::jlong_arraycopy+31 0x00007fa5c5040ebf
  0x00007fa5c5040ece:   xor    %rax,%rax
  0x00007fa5c5040ed1:   vzeroupper 
  0x00007fa5c5040ed4:   leaveq 
  0x00007fa5c5040ed5:   retq   
  0x00007fa5c5040ed6:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c5040ee0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007fa5c5040ee6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007fa5c5040eec:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007fa5c5040ef1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007fa5c5040ef6:   sub    $0x8,%rdx
  0x00007fa5c5040efa:   jge    Stub::jlong_arraycopy+64 0x00007fa5c5040ee0
  0x00007fa5c5040efc:   add    $0x4,%rdx
  0x00007fa5c5040f00:   jl     Stub::jlong_arraycopy+112 0x00007fa5c5040f10
  0x00007fa5c5040f02:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007fa5c5040f07:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007fa5c5040f0c:   sub    $0x4,%rdx
  0x00007fa5c5040f10:   add    $0x4,%rdx
  0x00007fa5c5040f14:   jg     Stub::jlong_arraycopy+31 0x00007fa5c5040ebf
  0x00007fa5c5040f16:   vzeroupper 
  0x00007fa5c5040f19:   xor    %rax,%rax
  0x00007fa5c5040f1c:   leaveq 
  0x00007fa5c5040f1d:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_disjoint_arraycopy [0x00007fa5c5040f20, 0x00007fa5c50410c3] (419 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5040f20:   push   %rbp
  0x00007fa5c5040f21:   mov    %rsp,%rbp
  0x00007fa5c5040f24:   mov    %rsi,%r11
  0x00007fa5c5040f27:   cmpb   $0x0,0x40(%r15)
  0x00007fa5c5040f2c:   je     Stub::oop_disjoint_arraycopy+156 0x00007fa5c5040fbc
  0x00007fa5c5040f32:   sub    $0x50,%rsp
  0x00007fa5c5040f36:   mov    %rax,(%rsp)
  0x00007fa5c5040f3a:   mov    %rcx,0x8(%rsp)
  0x00007fa5c5040f3f:   mov    %rdx,0x10(%rsp)
  0x00007fa5c5040f44:   mov    %rsi,0x18(%rsp)
  0x00007fa5c5040f49:   mov    %rdi,0x20(%rsp)
  0x00007fa5c5040f4e:   mov    %r8,0x28(%rsp)
  0x00007fa5c5040f53:   mov    %r9,0x30(%rsp)
  0x00007fa5c5040f58:   mov    %r10,0x38(%rsp)
  0x00007fa5c5040f5d:   mov    %r11,0x40(%rsp)
  0x00007fa5c5040f62:   mov    %rsi,%rdi
  0x00007fa5c5040f65:   mov    %rdx,%rsi
  0x00007fa5c5040f68:   test   $0xf,%spl
  0x00007fa5c5040f6c:   je     Stub::oop_disjoint_arraycopy+100 0x00007fa5c5040f84
  0x00007fa5c5040f72:   sub    $0x8,%rsp
  0x00007fa5c5040f76:   callq  0x00007fa5cde0ed00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007fa5c5040f7b:   add    $0x8,%rsp
  0x00007fa5c5040f7f:   jmpq   Stub::oop_disjoint_arraycopy+105 0x00007fa5c5040f89
  0x00007fa5c5040f84:   callq  0x00007fa5cde0ed00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007fa5c5040f89:   mov    0x40(%rsp),%r11
  0x00007fa5c5040f8e:   mov    0x38(%rsp),%r10
  0x00007fa5c5040f93:   mov    0x30(%rsp),%r9
  0x00007fa5c5040f98:   mov    0x28(%rsp),%r8
  0x00007fa5c5040f9d:   mov    0x20(%rsp),%rdi
  0x00007fa5c5040fa2:   mov    0x18(%rsp),%rsi
  0x00007fa5c5040fa7:   mov    0x10(%rsp),%rdx
  0x00007fa5c5040fac:   mov    0x8(%rsp),%rcx
  0x00007fa5c5040fb1:   mov    (%rsp),%rax
  0x00007fa5c5040fb5:   add    $0x50,%rsp
  0x00007fa5c5040fb9:   vzeroupper 
  0x00007fa5c5040fbc:   mov    %rdx,%rcx
  0x00007fa5c5040fbf:   shr    %rdx
  0x00007fa5c5040fc2:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007fa5c5040fc7:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007fa5c5040fcc:   neg    %rdx
  0x00007fa5c5040fcf:   jmpq   Stub::oop_disjoint_arraycopy+376 0x00007fa5c5041098
  0x00007fa5c5040fd4:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007fa5c5040fd9:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007fa5c5040fde:   inc    %rdx
  0x00007fa5c5040fe1:   jne    Stub::oop_disjoint_arraycopy+180 0x00007fa5c5040fd4
  0x00007fa5c5040fe3:   test   $0x1,%cl
  0x00007fa5c5040fe6:   je     Stub::oop_disjoint_arraycopy+206 0x00007fa5c5040fee
  0x00007fa5c5040fe8:   mov    0x8(%rdi),%eax
  0x00007fa5c5040feb:   mov    %eax,0x8(%rsi)
  0x00007fa5c5040fee:   sub    $0x50,%rsp
  0x00007fa5c5040ff2:   mov    %rax,(%rsp)
  0x00007fa5c5040ff6:   mov    %rcx,0x8(%rsp)
  0x00007fa5c5040ffb:   mov    %rdx,0x10(%rsp)
  0x00007fa5c5041000:   mov    %rsi,0x18(%rsp)
  0x00007fa5c5041005:   mov    %rdi,0x20(%rsp)
  0x00007fa5c504100a:   mov    %r8,0x28(%rsp)
  0x00007fa5c504100f:   mov    %r9,0x30(%rsp)
  0x00007fa5c5041014:   mov    %r10,0x38(%rsp)
  0x00007fa5c5041019:   mov    %r11,0x40(%rsp)
  0x00007fa5c504101e:   mov    %r11,%rdi
  0x00007fa5c5041021:   mov    %rcx,%rsi
  0x00007fa5c5041024:   test   $0xf,%spl
  0x00007fa5c5041028:   je     Stub::oop_disjoint_arraycopy+288 0x00007fa5c5041040
  0x00007fa5c504102e:   sub    $0x8,%rsp
  0x00007fa5c5041032:   callq  0x00007fa5cde0ed30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fa5c5041037:   add    $0x8,%rsp
  0x00007fa5c504103b:   jmpq   Stub::oop_disjoint_arraycopy+293 0x00007fa5c5041045
  0x00007fa5c5041040:   callq  0x00007fa5cde0ed30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fa5c5041045:   mov    0x40(%rsp),%r11
  0x00007fa5c504104a:   mov    0x38(%rsp),%r10
  0x00007fa5c504104f:   mov    0x30(%rsp),%r9
  0x00007fa5c5041054:   mov    0x28(%rsp),%r8
  0x00007fa5c5041059:   mov    0x20(%rsp),%rdi
  0x00007fa5c504105e:   mov    0x18(%rsp),%rsi
  0x00007fa5c5041063:   mov    0x10(%rsp),%rdx
  0x00007fa5c5041068:   mov    0x8(%rsp),%rcx
  0x00007fa5c504106d:   mov    (%rsp),%rax
  0x00007fa5c5041071:   add    $0x50,%rsp
  0x00007fa5c5041075:   vzeroupper 
  0x00007fa5c5041078:   vzeroupper 
  0x00007fa5c504107b:   xor    %rax,%rax
  0x00007fa5c504107e:   leaveq 
  0x00007fa5c504107f:   retq   
  0x00007fa5c5041080:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007fa5c5041086:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007fa5c504108c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007fa5c5041092:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007fa5c5041098:   add    $0x8,%rdx
  0x00007fa5c504109c:   jle    Stub::oop_disjoint_arraycopy+352 0x00007fa5c5041080
  0x00007fa5c504109e:   sub    $0x4,%rdx
  0x00007fa5c50410a2:   jg     Stub::oop_disjoint_arraycopy+404 0x00007fa5c50410b4
  0x00007fa5c50410a4:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007fa5c50410aa:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007fa5c50410b0:   add    $0x4,%rdx
  0x00007fa5c50410b4:   sub    $0x4,%rdx
  0x00007fa5c50410b8:   jl     Stub::oop_disjoint_arraycopy+180 0x00007fa5c5040fd4
  0x00007fa5c50410be:   jmpq   Stub::oop_disjoint_arraycopy+195 0x00007fa5c5040fe3
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_arraycopy [0x00007fa5c50410e0, 0x00007fa5c5041298] (440 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50410e0:   push   %rbp
  0x00007fa5c50410e1:   mov    %rsp,%rbp
  0x00007fa5c50410e4:   cmp    %rdi,%rsi
  0x00007fa5c50410e7:   lea    (%rdi,%rdx,4),%rax
  0x00007fa5c50410eb:   jbe    Stub::oop_disjoint_arraycopy+4 0x00007fa5c5040f24
  0x00007fa5c50410f1:   cmp    %rax,%rsi
  0x00007fa5c50410f4:   jae    Stub::oop_disjoint_arraycopy+4 0x00007fa5c5040f24
  0x00007fa5c50410fa:   cmpb   $0x0,0x40(%r15)
  0x00007fa5c50410ff:   je     Stub::oop_arraycopy+175 0x00007fa5c504118f
  0x00007fa5c5041105:   sub    $0x50,%rsp
  0x00007fa5c5041109:   mov    %rax,(%rsp)
  0x00007fa5c504110d:   mov    %rcx,0x8(%rsp)
  0x00007fa5c5041112:   mov    %rdx,0x10(%rsp)
  0x00007fa5c5041117:   mov    %rsi,0x18(%rsp)
  0x00007fa5c504111c:   mov    %rdi,0x20(%rsp)
  0x00007fa5c5041121:   mov    %r8,0x28(%rsp)
  0x00007fa5c5041126:   mov    %r9,0x30(%rsp)
  0x00007fa5c504112b:   mov    %r10,0x38(%rsp)
  0x00007fa5c5041130:   mov    %r11,0x40(%rsp)
  0x00007fa5c5041135:   mov    %rsi,%rdi
  0x00007fa5c5041138:   mov    %rdx,%rsi
  0x00007fa5c504113b:   test   $0xf,%spl
  0x00007fa5c504113f:   je     Stub::oop_arraycopy+119 0x00007fa5c5041157
  0x00007fa5c5041145:   sub    $0x8,%rsp
  0x00007fa5c5041149:   callq  0x00007fa5cde0ed00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007fa5c504114e:   add    $0x8,%rsp
  0x00007fa5c5041152:   jmpq   Stub::oop_arraycopy+124 0x00007fa5c504115c
  0x00007fa5c5041157:   callq  0x00007fa5cde0ed00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007fa5c504115c:   mov    0x40(%rsp),%r11
  0x00007fa5c5041161:   mov    0x38(%rsp),%r10
  0x00007fa5c5041166:   mov    0x30(%rsp),%r9
  0x00007fa5c504116b:   mov    0x28(%rsp),%r8
  0x00007fa5c5041170:   mov    0x20(%rsp),%rdi
  0x00007fa5c5041175:   mov    0x18(%rsp),%rsi
  0x00007fa5c504117a:   mov    0x10(%rsp),%rdx
  0x00007fa5c504117f:   mov    0x8(%rsp),%rcx
  0x00007fa5c5041184:   mov    (%rsp),%rax
  0x00007fa5c5041188:   add    $0x50,%rsp
  0x00007fa5c504118c:   vzeroupper 
  0x00007fa5c504118f:   mov    %rdx,%rcx
  0x00007fa5c5041192:   shr    %rdx
  0x00007fa5c5041195:   test   $0x1,%cl
  0x00007fa5c5041198:   je     Stub::oop_arraycopy+262 0x00007fa5c50411e6
  0x00007fa5c504119e:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007fa5c50411a2:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007fa5c50411a6:   jmpq   Stub::oop_arraycopy+262 0x00007fa5c50411e6
  0x00007fa5c50411ab:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007fa5c50411b0:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007fa5c50411b5:   dec    %rdx
  0x00007fa5c50411b8:   jne    Stub::oop_arraycopy+203 0x00007fa5c50411ab
  0x00007fa5c50411ba:   jmpq   Stub::oop_arraycopy+294 0x00007fa5c5041206
  0x00007fa5c50411bf:   xor    %rax,%rax
  0x00007fa5c50411c2:   vzeroupper 
  0x00007fa5c50411c5:   leaveq 
  0x00007fa5c50411c6:   retq   
  0x00007fa5c50411c7:   nopw   0x0(%rax,%rax,1)
  0x00007fa5c50411d0:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007fa5c50411d6:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007fa5c50411dc:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007fa5c50411e1:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007fa5c50411e6:   sub    $0x8,%rdx
  0x00007fa5c50411ea:   jge    Stub::oop_arraycopy+240 0x00007fa5c50411d0
  0x00007fa5c50411ec:   add    $0x4,%rdx
  0x00007fa5c50411f0:   jl     Stub::oop_arraycopy+288 0x00007fa5c5041200
  0x00007fa5c50411f2:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007fa5c50411f7:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007fa5c50411fc:   sub    $0x4,%rdx
  0x00007fa5c5041200:   add    $0x4,%rdx
  0x00007fa5c5041204:   jg     Stub::oop_arraycopy+203 0x00007fa5c50411ab
  0x00007fa5c5041206:   sub    $0x50,%rsp
  0x00007fa5c504120a:   mov    %rax,(%rsp)
  0x00007fa5c504120e:   mov    %rcx,0x8(%rsp)
  0x00007fa5c5041213:   mov    %rdx,0x10(%rsp)
  0x00007fa5c5041218:   mov    %rsi,0x18(%rsp)
  0x00007fa5c504121d:   mov    %rdi,0x20(%rsp)
  0x00007fa5c5041222:   mov    %r8,0x28(%rsp)
  0x00007fa5c5041227:   mov    %r9,0x30(%rsp)
  0x00007fa5c504122c:   mov    %r10,0x38(%rsp)
  0x00007fa5c5041231:   mov    %r11,0x40(%rsp)
  0x00007fa5c5041236:   mov    %rsi,%rdi
  0x00007fa5c5041239:   mov    %rcx,%rsi
  0x00007fa5c504123c:   test   $0xf,%spl
  0x00007fa5c5041240:   je     Stub::oop_arraycopy+376 0x00007fa5c5041258
  0x00007fa5c5041246:   sub    $0x8,%rsp
  0x00007fa5c504124a:   callq  0x00007fa5cde0ed30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fa5c504124f:   add    $0x8,%rsp
  0x00007fa5c5041253:   jmpq   Stub::oop_arraycopy+381 0x00007fa5c504125d
  0x00007fa5c5041258:   callq  0x00007fa5cde0ed30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fa5c504125d:   mov    0x40(%rsp),%r11
  0x00007fa5c5041262:   mov    0x38(%rsp),%r10
  0x00007fa5c5041267:   mov    0x30(%rsp),%r9
  0x00007fa5c504126c:   mov    0x28(%rsp),%r8
  0x00007fa5c5041271:   mov    0x20(%rsp),%rdi
  0x00007fa5c5041276:   mov    0x18(%rsp),%rsi
  0x00007fa5c504127b:   mov    0x10(%rsp),%rdx
  0x00007fa5c5041280:   mov    0x8(%rsp),%rcx
  0x00007fa5c5041285:   mov    (%rsp),%rax
  0x00007fa5c5041289:   add    $0x50,%rsp
  0x00007fa5c504128d:   vzeroupper 
  0x00007fa5c5041290:   xor    %rax,%rax
  0x00007fa5c5041293:   vzeroupper 
  0x00007fa5c5041296:   leaveq 
  0x00007fa5c5041297:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_disjoint_arraycopy_uninit [0x00007fa5c50412a0, 0x00007fa5c50413b3] (275 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50412a0:   push   %rbp
  0x00007fa5c50412a1:   mov    %rsp,%rbp
  0x00007fa5c50412a4:   mov    %rsi,%r11
  0x00007fa5c50412a7:   mov    %rdx,%rcx
  0x00007fa5c50412aa:   shr    %rdx
  0x00007fa5c50412ad:   lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007fa5c50412b2:   lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007fa5c50412b7:   neg    %rdx
  0x00007fa5c50412ba:   jmpq   Stub::oop_disjoint_arraycopy_uninit+232 0x00007fa5c5041388
  0x00007fa5c50412bf:   mov    0x8(%rdi,%rdx,8),%rax
  0x00007fa5c50412c4:   mov    %rax,0x8(%rsi,%rdx,8)
  0x00007fa5c50412c9:   inc    %rdx
  0x00007fa5c50412cc:   jne    Stub::oop_disjoint_arraycopy_uninit+31 0x00007fa5c50412bf
  0x00007fa5c50412ce:   test   $0x1,%cl
  0x00007fa5c50412d1:   je     Stub::oop_disjoint_arraycopy_uninit+57 0x00007fa5c50412d9
  0x00007fa5c50412d3:   mov    0x8(%rdi),%eax
  0x00007fa5c50412d6:   mov    %eax,0x8(%rsi)
  0x00007fa5c50412d9:   sub    $0x50,%rsp
  0x00007fa5c50412dd:   mov    %rax,(%rsp)
  0x00007fa5c50412e1:   mov    %rcx,0x8(%rsp)
  0x00007fa5c50412e6:   mov    %rdx,0x10(%rsp)
  0x00007fa5c50412eb:   mov    %rsi,0x18(%rsp)
  0x00007fa5c50412f0:   mov    %rdi,0x20(%rsp)
  0x00007fa5c50412f5:   mov    %r8,0x28(%rsp)
  0x00007fa5c50412fa:   mov    %r9,0x30(%rsp)
  0x00007fa5c50412ff:   mov    %r10,0x38(%rsp)
  0x00007fa5c5041304:   mov    %r11,0x40(%rsp)
  0x00007fa5c5041309:   mov    %r11,%rdi
  0x00007fa5c504130c:   mov    %rcx,%rsi
  0x00007fa5c504130f:   test   $0xf,%spl
  0x00007fa5c5041313:   je     Stub::oop_disjoint_arraycopy_uninit+139 0x00007fa5c504132b
  0x00007fa5c5041319:   sub    $0x8,%rsp
  0x00007fa5c504131d:   callq  0x00007fa5cde0ed30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fa5c5041322:   add    $0x8,%rsp
  0x00007fa5c5041326:   jmpq   Stub::oop_disjoint_arraycopy_uninit+144 0x00007fa5c5041330
  0x00007fa5c504132b:   callq  0x00007fa5cde0ed30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fa5c5041330:   mov    0x40(%rsp),%r11
  0x00007fa5c5041335:   mov    0x38(%rsp),%r10
  0x00007fa5c504133a:   mov    0x30(%rsp),%r9
  0x00007fa5c504133f:   mov    0x28(%rsp),%r8
  0x00007fa5c5041344:   mov    0x20(%rsp),%rdi
  0x00007fa5c5041349:   mov    0x18(%rsp),%rsi
  0x00007fa5c504134e:   mov    0x10(%rsp),%rdx
  0x00007fa5c5041353:   mov    0x8(%rsp),%rcx
  0x00007fa5c5041358:   mov    (%rsp),%rax
  0x00007fa5c504135c:   add    $0x50,%rsp
  0x00007fa5c5041360:   vzeroupper 
  0x00007fa5c5041363:   vzeroupper 
  0x00007fa5c5041366:   xor    %rax,%rax
  0x00007fa5c5041369:   leaveq 
  0x00007fa5c504136a:   retq   
  0x00007fa5c504136b:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c5041370:   vmovdqu -0x38(%rdi,%rdx,8),%ymm0
  0x00007fa5c5041376:   vmovdqu %ymm0,-0x38(%rsi,%rdx,8)
  0x00007fa5c504137c:   vmovdqu -0x18(%rdi,%rdx,8),%ymm1
  0x00007fa5c5041382:   vmovdqu %ymm1,-0x18(%rsi,%rdx,8)
  0x00007fa5c5041388:   add    $0x8,%rdx
  0x00007fa5c504138c:   jle    Stub::oop_disjoint_arraycopy_uninit+208 0x00007fa5c5041370
  0x00007fa5c504138e:   sub    $0x4,%rdx
  0x00007fa5c5041392:   jg     Stub::oop_disjoint_arraycopy_uninit+260 0x00007fa5c50413a4
  0x00007fa5c5041394:   vmovdqu -0x18(%rdi,%rdx,8),%ymm0
  0x00007fa5c504139a:   vmovdqu %ymm0,-0x18(%rsi,%rdx,8)
  0x00007fa5c50413a0:   add    $0x4,%rdx
  0x00007fa5c50413a4:   sub    $0x4,%rdx
  0x00007fa5c50413a8:   jl     Stub::oop_disjoint_arraycopy_uninit+31 0x00007fa5c50412bf
  0x00007fa5c50413ae:   jmpq   Stub::oop_disjoint_arraycopy_uninit+46 0x00007fa5c50412ce
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::oop_arraycopy_uninit [0x00007fa5c50413c0, 0x00007fa5c50414e8] (296 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50413c0:   push   %rbp
  0x00007fa5c50413c1:   mov    %rsp,%rbp
  0x00007fa5c50413c4:   cmp    %rdi,%rsi
  0x00007fa5c50413c7:   lea    (%rdi,%rdx,4),%rax
  0x00007fa5c50413cb:   jbe    Stub::oop_disjoint_arraycopy_uninit+4 0x00007fa5c50412a4
  0x00007fa5c50413d1:   cmp    %rax,%rsi
  0x00007fa5c50413d4:   jae    Stub::oop_disjoint_arraycopy_uninit+4 0x00007fa5c50412a4
  0x00007fa5c50413da:   mov    %rdx,%rcx
  0x00007fa5c50413dd:   shr    %rdx
  0x00007fa5c50413e0:   test   $0x1,%cl
  0x00007fa5c50413e3:   je     Stub::oop_arraycopy_uninit+118 0x00007fa5c5041436
  0x00007fa5c50413e9:   mov    -0x4(%rdi,%rcx,4),%eax
  0x00007fa5c50413ed:   mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007fa5c50413f1:   jmpq   Stub::oop_arraycopy_uninit+118 0x00007fa5c5041436
  0x00007fa5c50413f6:   mov    -0x8(%rdi,%rdx,8),%rax
  0x00007fa5c50413fb:   mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007fa5c5041400:   dec    %rdx
  0x00007fa5c5041403:   jne    Stub::oop_arraycopy_uninit+54 0x00007fa5c50413f6
  0x00007fa5c5041405:   jmpq   Stub::oop_arraycopy_uninit+150 0x00007fa5c5041456
  0x00007fa5c504140a:   xor    %rax,%rax
  0x00007fa5c504140d:   vzeroupper 
  0x00007fa5c5041410:   leaveq 
  0x00007fa5c5041411:   retq   
  0x00007fa5c5041412:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c504141c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5041420:   vmovdqu 0x20(%rdi,%rdx,8),%ymm0
  0x00007fa5c5041426:   vmovdqu %ymm0,0x20(%rsi,%rdx,8)
  0x00007fa5c504142c:   vmovdqu (%rdi,%rdx,8),%ymm1
  0x00007fa5c5041431:   vmovdqu %ymm1,(%rsi,%rdx,8)
  0x00007fa5c5041436:   sub    $0x8,%rdx
  0x00007fa5c504143a:   jge    Stub::oop_arraycopy_uninit+96 0x00007fa5c5041420
  0x00007fa5c504143c:   add    $0x4,%rdx
  0x00007fa5c5041440:   jl     Stub::oop_arraycopy_uninit+144 0x00007fa5c5041450
  0x00007fa5c5041442:   vmovdqu (%rdi,%rdx,8),%ymm0
  0x00007fa5c5041447:   vmovdqu %ymm0,(%rsi,%rdx,8)
  0x00007fa5c504144c:   sub    $0x4,%rdx
  0x00007fa5c5041450:   add    $0x4,%rdx
  0x00007fa5c5041454:   jg     Stub::oop_arraycopy_uninit+54 0x00007fa5c50413f6
  0x00007fa5c5041456:   sub    $0x50,%rsp
  0x00007fa5c504145a:   mov    %rax,(%rsp)
  0x00007fa5c504145e:   mov    %rcx,0x8(%rsp)
  0x00007fa5c5041463:   mov    %rdx,0x10(%rsp)
  0x00007fa5c5041468:   mov    %rsi,0x18(%rsp)
  0x00007fa5c504146d:   mov    %rdi,0x20(%rsp)
  0x00007fa5c5041472:   mov    %r8,0x28(%rsp)
  0x00007fa5c5041477:   mov    %r9,0x30(%rsp)
  0x00007fa5c504147c:   mov    %r10,0x38(%rsp)
  0x00007fa5c5041481:   mov    %r11,0x40(%rsp)
  0x00007fa5c5041486:   mov    %rsi,%rdi
  0x00007fa5c5041489:   mov    %rcx,%rsi
  0x00007fa5c504148c:   test   $0xf,%spl
  0x00007fa5c5041490:   je     Stub::oop_arraycopy_uninit+232 0x00007fa5c50414a8
  0x00007fa5c5041496:   sub    $0x8,%rsp
  0x00007fa5c504149a:   callq  0x00007fa5cde0ed30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fa5c504149f:   add    $0x8,%rsp
  0x00007fa5c50414a3:   jmpq   Stub::oop_arraycopy_uninit+237 0x00007fa5c50414ad
  0x00007fa5c50414a8:   callq  0x00007fa5cde0ed30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fa5c50414ad:   mov    0x40(%rsp),%r11
  0x00007fa5c50414b2:   mov    0x38(%rsp),%r10
  0x00007fa5c50414b7:   mov    0x30(%rsp),%r9
  0x00007fa5c50414bc:   mov    0x28(%rsp),%r8
  0x00007fa5c50414c1:   mov    0x20(%rsp),%rdi
  0x00007fa5c50414c6:   mov    0x18(%rsp),%rsi
  0x00007fa5c50414cb:   mov    0x10(%rsp),%rdx
  0x00007fa5c50414d0:   mov    0x8(%rsp),%rcx
  0x00007fa5c50414d5:   mov    (%rsp),%rax
  0x00007fa5c50414d9:   add    $0x50,%rsp
  0x00007fa5c50414dd:   vzeroupper 
  0x00007fa5c50414e0:   xor    %rax,%rax
  0x00007fa5c50414e3:   vzeroupper 
  0x00007fa5c50414e6:   leaveq 
  0x00007fa5c50414e7:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::checkcast_arraycopy [0x00007fa5c5041500, 0x00007fa5c50416e1] (481 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5041500:   push   %rbp
  0x00007fa5c5041501:   mov    %rsp,%rbp
  0x00007fa5c5041504:   sub    $0x18,%rsp
  0x00007fa5c5041508:   mov    %r13,(%rsp)
  0x00007fa5c504150c:   mov    %r14,0x8(%rsp)
  0x00007fa5c5041511:   mov    %r10,0x10(%rsp)
  0x00007fa5c5041516:   cmpb   $0x0,0x40(%r15)
  0x00007fa5c504151b:   je     Stub::checkcast_arraycopy+171 0x00007fa5c50415ab
  0x00007fa5c5041521:   sub    $0x50,%rsp
  0x00007fa5c5041525:   mov    %rax,(%rsp)
  0x00007fa5c5041529:   mov    %rcx,0x8(%rsp)
  0x00007fa5c504152e:   mov    %rdx,0x10(%rsp)
  0x00007fa5c5041533:   mov    %rsi,0x18(%rsp)
  0x00007fa5c5041538:   mov    %rdi,0x20(%rsp)
  0x00007fa5c504153d:   mov    %r8,0x28(%rsp)
  0x00007fa5c5041542:   mov    %r9,0x30(%rsp)
  0x00007fa5c5041547:   mov    %r10,0x38(%rsp)
  0x00007fa5c504154c:   mov    %r11,0x40(%rsp)
  0x00007fa5c5041551:   mov    %rsi,%rdi
  0x00007fa5c5041554:   mov    %rdx,%rsi
  0x00007fa5c5041557:   test   $0xf,%spl
  0x00007fa5c504155b:   je     Stub::checkcast_arraycopy+115 0x00007fa5c5041573
  0x00007fa5c5041561:   sub    $0x8,%rsp
  0x00007fa5c5041565:   callq  0x00007fa5cde0ed00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007fa5c504156a:   add    $0x8,%rsp
  0x00007fa5c504156e:   jmpq   Stub::checkcast_arraycopy+120 0x00007fa5c5041578
  0x00007fa5c5041573:   callq  0x00007fa5cde0ed00 = G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop*, unsigned long)
  0x00007fa5c5041578:   mov    0x40(%rsp),%r11
  0x00007fa5c504157d:   mov    0x38(%rsp),%r10
  0x00007fa5c5041582:   mov    0x30(%rsp),%r9
  0x00007fa5c5041587:   mov    0x28(%rsp),%r8
  0x00007fa5c504158c:   mov    0x20(%rsp),%rdi
  0x00007fa5c5041591:   mov    0x18(%rsp),%rsi
  0x00007fa5c5041596:   mov    0x10(%rsp),%rdx
  0x00007fa5c504159b:   mov    0x8(%rsp),%rcx
  0x00007fa5c50415a0:   mov    (%rsp),%rax
  0x00007fa5c50415a4:   add    $0x50,%rsp
  0x00007fa5c50415a8:   vzeroupper 
  0x00007fa5c50415ab:   lea    (%rdi,%rdx,4),%rdi
  0x00007fa5c50415af:   lea    (%rsi,%rdx,4),%r13
  0x00007fa5c50415b3:   mov    %rdx,%r14
  0x00007fa5c50415b6:   neg    %rdx
  0x00007fa5c50415b9:   jne    Stub::checkcast_arraycopy+226 0x00007fa5c50415e2
  0x00007fa5c50415bf:   xor    %rax,%rax
  0x00007fa5c50415c2:   jmpq   Stub::checkcast_arraycopy+465 0x00007fa5c50416d1
  0x00007fa5c50415c7:   nopw   0x0(%rax,%rax,1)
  0x00007fa5c50415d0:   shr    $0x3,%rax
  0x00007fa5c50415d4:   mov    %eax,0x0(%r13,%rdx,4)
  0x00007fa5c50415d9:   inc    %rdx
  0x00007fa5c50415dc:   je     Stub::checkcast_arraycopy+324 0x00007fa5c5041644
  0x00007fa5c50415e2:   mov    (%rdi,%rdx,4),%eax
  0x00007fa5c50415e5:   shl    $0x3,%rax
  0x00007fa5c50415e9:   test   %rax,%rax
  0x00007fa5c50415ec:   je     Stub::checkcast_arraycopy+208 0x00007fa5c50415d0
  0x00007fa5c50415ee:   mov    0x8(%rax),%r11d
  0x00007fa5c50415f2:   movabs $0x800000000,%r10
  0x00007fa5c50415fc:   add    %r10,%r11
  0x00007fa5c50415ff:   cmp    %r8,%r11
  0x00007fa5c5041602:   je     Stub::checkcast_arraycopy+208 0x00007fa5c50415d0
  0x00007fa5c5041604:   cmp    (%r11,%rcx,1),%r8
  0x00007fa5c5041608:   je     Stub::checkcast_arraycopy+208 0x00007fa5c50415d0
  0x00007fa5c504160a:   cmp    $0x20,%ecx
  0x00007fa5c504160d:   jne    Stub::checkcast_arraycopy+308 0x00007fa5c5041634
  0x00007fa5c5041613:   push   %rax
  0x00007fa5c5041614:   mov    %r8,%rax
  0x00007fa5c5041617:   push   %rcx
  0x00007fa5c5041618:   push   %rdi
  0x00007fa5c5041619:   mov    0x28(%r11),%rdi
  0x00007fa5c504161d:   mov    (%rdi),%ecx
  0x00007fa5c504161f:   add    $0x8,%rdi
  0x00007fa5c5041623:   test   %rax,%rax
  0x00007fa5c5041626:   repnz scas %es:(%rdi),%rax
  0x00007fa5c5041629:   pop    %rdi
  0x00007fa5c504162a:   pop    %rcx
  0x00007fa5c504162b:   pop    %rax
  0x00007fa5c504162c:   jne    Stub::checkcast_arraycopy+308 0x00007fa5c5041634
  0x00007fa5c504162e:   mov    %r8,0x20(%r11)
  0x00007fa5c5041632:   jmp    Stub::checkcast_arraycopy+208 0x00007fa5c50415d0
  0x00007fa5c5041634:   add    %rdx,%r14
  0x00007fa5c5041637:   mov    %r14,%rax
  0x00007fa5c504163a:   not    %rax
  0x00007fa5c504163d:   jne    Stub::checkcast_arraycopy+327 0x00007fa5c5041647
  0x00007fa5c504163f:   jmpq   Stub::checkcast_arraycopy+465 0x00007fa5c50416d1
  0x00007fa5c5041644:   xor    %rax,%rax
  0x00007fa5c5041647:   sub    $0x50,%rsp
  0x00007fa5c504164b:   mov    %rax,(%rsp)
  0x00007fa5c504164f:   mov    %rcx,0x8(%rsp)
  0x00007fa5c5041654:   mov    %rdx,0x10(%rsp)
  0x00007fa5c5041659:   mov    %rsi,0x18(%rsp)
  0x00007fa5c504165e:   mov    %rdi,0x20(%rsp)
  0x00007fa5c5041663:   mov    %r8,0x28(%rsp)
  0x00007fa5c5041668:   mov    %r9,0x30(%rsp)
  0x00007fa5c504166d:   mov    %r10,0x38(%rsp)
  0x00007fa5c5041672:   mov    %r11,0x40(%rsp)
  0x00007fa5c5041677:   mov    %rsi,%rdi
  0x00007fa5c504167a:   mov    %r14,%rsi
  0x00007fa5c504167d:   test   $0xf,%spl
  0x00007fa5c5041681:   je     Stub::checkcast_arraycopy+409 0x00007fa5c5041699
  0x00007fa5c5041687:   sub    $0x8,%rsp
  0x00007fa5c504168b:   callq  0x00007fa5cde0ed30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fa5c5041690:   add    $0x8,%rsp
  0x00007fa5c5041694:   jmpq   Stub::checkcast_arraycopy+414 0x00007fa5c504169e
  0x00007fa5c5041699:   callq  0x00007fa5cde0ed30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fa5c504169e:   mov    0x40(%rsp),%r11
  0x00007fa5c50416a3:   mov    0x38(%rsp),%r10
  0x00007fa5c50416a8:   mov    0x30(%rsp),%r9
  0x00007fa5c50416ad:   mov    0x28(%rsp),%r8
  0x00007fa5c50416b2:   mov    0x20(%rsp),%rdi
  0x00007fa5c50416b7:   mov    0x18(%rsp),%rsi
  0x00007fa5c50416bc:   mov    0x10(%rsp),%rdx
  0x00007fa5c50416c1:   mov    0x8(%rsp),%rcx
  0x00007fa5c50416c6:   mov    (%rsp),%rax
  0x00007fa5c50416ca:   add    $0x50,%rsp
  0x00007fa5c50416ce:   vzeroupper 
  0x00007fa5c50416d1:   mov    (%rsp),%r13
  0x00007fa5c50416d5:   mov    0x8(%rsp),%r14
  0x00007fa5c50416da:   mov    0x10(%rsp),%r10
  0x00007fa5c50416df:   leaveq 
  0x00007fa5c50416e0:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::checkcast_arraycopy_uninit [0x00007fa5c5041700, 0x00007fa5c5041851] (337 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5041700:   push   %rbp
  0x00007fa5c5041701:   mov    %rsp,%rbp
  0x00007fa5c5041704:   sub    $0x18,%rsp
  0x00007fa5c5041708:   mov    %r13,(%rsp)
  0x00007fa5c504170c:   mov    %r14,0x8(%rsp)
  0x00007fa5c5041711:   mov    %r10,0x10(%rsp)
  0x00007fa5c5041716:   lea    (%rdi,%rdx,4),%rdi
  0x00007fa5c504171a:   lea    (%rsi,%rdx,4),%r13
  0x00007fa5c504171e:   mov    %rdx,%r14
  0x00007fa5c5041721:   neg    %rdx
  0x00007fa5c5041724:   jne    Stub::checkcast_arraycopy_uninit+82 0x00007fa5c5041752
  0x00007fa5c504172a:   xor    %rax,%rax
  0x00007fa5c504172d:   jmpq   Stub::checkcast_arraycopy_uninit+321 0x00007fa5c5041841
  0x00007fa5c5041732:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c504173c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5041740:   shr    $0x3,%rax
  0x00007fa5c5041744:   mov    %eax,0x0(%r13,%rdx,4)
  0x00007fa5c5041749:   inc    %rdx
  0x00007fa5c504174c:   je     Stub::checkcast_arraycopy_uninit+180 0x00007fa5c50417b4
  0x00007fa5c5041752:   mov    (%rdi,%rdx,4),%eax
  0x00007fa5c5041755:   shl    $0x3,%rax
  0x00007fa5c5041759:   test   %rax,%rax
  0x00007fa5c504175c:   je     Stub::checkcast_arraycopy_uninit+64 0x00007fa5c5041740
  0x00007fa5c504175e:   mov    0x8(%rax),%r11d
  0x00007fa5c5041762:   movabs $0x800000000,%r10
  0x00007fa5c504176c:   add    %r10,%r11
  0x00007fa5c504176f:   cmp    %r8,%r11
  0x00007fa5c5041772:   je     Stub::checkcast_arraycopy_uninit+64 0x00007fa5c5041740
  0x00007fa5c5041774:   cmp    (%r11,%rcx,1),%r8
  0x00007fa5c5041778:   je     Stub::checkcast_arraycopy_uninit+64 0x00007fa5c5041740
  0x00007fa5c504177a:   cmp    $0x20,%ecx
  0x00007fa5c504177d:   jne    Stub::checkcast_arraycopy_uninit+164 0x00007fa5c50417a4
  0x00007fa5c5041783:   push   %rax
  0x00007fa5c5041784:   mov    %r8,%rax
  0x00007fa5c5041787:   push   %rcx
  0x00007fa5c5041788:   push   %rdi
  0x00007fa5c5041789:   mov    0x28(%r11),%rdi
  0x00007fa5c504178d:   mov    (%rdi),%ecx
  0x00007fa5c504178f:   add    $0x8,%rdi
  0x00007fa5c5041793:   test   %rax,%rax
  0x00007fa5c5041796:   repnz scas %es:(%rdi),%rax
  0x00007fa5c5041799:   pop    %rdi
  0x00007fa5c504179a:   pop    %rcx
  0x00007fa5c504179b:   pop    %rax
  0x00007fa5c504179c:   jne    Stub::checkcast_arraycopy_uninit+164 0x00007fa5c50417a4
  0x00007fa5c504179e:   mov    %r8,0x20(%r11)
  0x00007fa5c50417a2:   jmp    Stub::checkcast_arraycopy_uninit+64 0x00007fa5c5041740
  0x00007fa5c50417a4:   add    %rdx,%r14
  0x00007fa5c50417a7:   mov    %r14,%rax
  0x00007fa5c50417aa:   not    %rax
  0x00007fa5c50417ad:   jne    Stub::checkcast_arraycopy_uninit+183 0x00007fa5c50417b7
  0x00007fa5c50417af:   jmpq   Stub::checkcast_arraycopy_uninit+321 0x00007fa5c5041841
  0x00007fa5c50417b4:   xor    %rax,%rax
  0x00007fa5c50417b7:   sub    $0x50,%rsp
  0x00007fa5c50417bb:   mov    %rax,(%rsp)
  0x00007fa5c50417bf:   mov    %rcx,0x8(%rsp)
  0x00007fa5c50417c4:   mov    %rdx,0x10(%rsp)
  0x00007fa5c50417c9:   mov    %rsi,0x18(%rsp)
  0x00007fa5c50417ce:   mov    %rdi,0x20(%rsp)
  0x00007fa5c50417d3:   mov    %r8,0x28(%rsp)
  0x00007fa5c50417d8:   mov    %r9,0x30(%rsp)
  0x00007fa5c50417dd:   mov    %r10,0x38(%rsp)
  0x00007fa5c50417e2:   mov    %r11,0x40(%rsp)
  0x00007fa5c50417e7:   mov    %rsi,%rdi
  0x00007fa5c50417ea:   mov    %r14,%rsi
  0x00007fa5c50417ed:   test   $0xf,%spl
  0x00007fa5c50417f1:   je     Stub::checkcast_arraycopy_uninit+265 0x00007fa5c5041809
  0x00007fa5c50417f7:   sub    $0x8,%rsp
  0x00007fa5c50417fb:   callq  0x00007fa5cde0ed30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fa5c5041800:   add    $0x8,%rsp
  0x00007fa5c5041804:   jmpq   Stub::checkcast_arraycopy_uninit+270 0x00007fa5c504180e
  0x00007fa5c5041809:   callq  0x00007fa5cde0ed30 = G1BarrierSetRuntime::write_ref_array_post_entry(HeapWordImpl**, unsigned long)
  0x00007fa5c504180e:   mov    0x40(%rsp),%r11
  0x00007fa5c5041813:   mov    0x38(%rsp),%r10
  0x00007fa5c5041818:   mov    0x30(%rsp),%r9
  0x00007fa5c504181d:   mov    0x28(%rsp),%r8
  0x00007fa5c5041822:   mov    0x20(%rsp),%rdi
  0x00007fa5c5041827:   mov    0x18(%rsp),%rsi
  0x00007fa5c504182c:   mov    0x10(%rsp),%rdx
  0x00007fa5c5041831:   mov    0x8(%rsp),%rcx
  0x00007fa5c5041836:   mov    (%rsp),%rax
  0x00007fa5c504183a:   add    $0x50,%rsp
  0x00007fa5c504183e:   vzeroupper 
  0x00007fa5c5041841:   mov    (%rsp),%r13
  0x00007fa5c5041845:   mov    0x8(%rsp),%r14
  0x00007fa5c504184a:   mov    0x10(%rsp),%r10
  0x00007fa5c504184f:   leaveq 
  0x00007fa5c5041850:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::unsafe_arraycopy [0x00007fa5c5041860, 0x00007fa5c5041897] (55 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5041860:   push   %rbp
  0x00007fa5c5041861:   mov    %rsp,%rbp
  0x00007fa5c5041864:   mov    %rdi,%rax
  0x00007fa5c5041867:   or     %rsi,%rax
  0x00007fa5c504186a:   or     %rdx,%rax
  0x00007fa5c504186d:   test   $0x7,%al
  0x00007fa5c504186f:   je     Stub::unsafe_arraycopy+46 0x00007fa5c504188e
  0x00007fa5c5041871:   test   $0x3,%al
  0x00007fa5c5041873:   je     Stub::unsafe_arraycopy+37 0x00007fa5c5041885
  0x00007fa5c5041875:   test   $0x1,%al
  0x00007fa5c5041877:   jne    Stub::jbyte_arraycopy+4 0x00007fa5c5040b04
  0x00007fa5c504187d:   shr    %rdx
  0x00007fa5c5041880:   jmpq   Stub::jshort_arraycopy+4 0x00007fa5c5040c64
  0x00007fa5c5041885:   shr    $0x2,%rdx
  0x00007fa5c5041889:   jmpq   Stub::jint_arraycopy+4 0x00007fa5c5040d84
  0x00007fa5c504188e:   shr    $0x3,%rdx
  0x00007fa5c5041892:   jmpq   Stub::jlong_arraycopy+4 0x00007fa5c5040ea4
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::generic_arraycopy [0x00007fa5c504189b, 0x00007fa5c5041a84] (489 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c504189b:   jmpq   Stub::generic_arraycopy+481 0x00007fa5c5041a7c
  0x00007fa5c50418a0:   push   %rbp
  0x00007fa5c50418a1:   mov    %rsp,%rbp
  0x00007fa5c50418a4:   test   %rdi,%rdi
  0x00007fa5c50418a7:   je     Stub::generic_arraycopy
  0x00007fa5c50418a9:   test   %esi,%esi
  0x00007fa5c50418ab:   js     Stub::generic_arraycopy
  0x00007fa5c50418ad:   test   %rdx,%rdx
  0x00007fa5c50418b0:   je     Stub::generic_arraycopy
  0x00007fa5c50418b2:   test   %ecx,%ecx
  0x00007fa5c50418b4:   js     Stub::generic_arraycopy
  0x00007fa5c50418b6:   mov    %r8d,%r11d
  0x00007fa5c50418b9:   test   %r11d,%r11d
  0x00007fa5c50418bc:   js     Stub::generic_arraycopy
  0x00007fa5c50418be:   mov    0x8(%rdi),%r10d
  0x00007fa5c50418c2:   movabs $0x800000000,%r9
  0x00007fa5c50418cc:   add    %r9,%r10
  0x00007fa5c50418cf:   cmpl   $0x80100c02,0x8(%r10)
  0x00007fa5c50418d7:   je     Stub::generic_arraycopy+244 0x00007fa5c504198f
  0x00007fa5c50418dd:   mov    0x8(%rdx),%eax
  0x00007fa5c50418e0:   movabs $0x800000000,%r9
  0x00007fa5c50418ea:   add    %r9,%rax
  0x00007fa5c50418ed:   cmp    %rax,%r10
  0x00007fa5c50418f0:   jne    Stub::generic_arraycopy+481 0x00007fa5c5041a7c
  0x00007fa5c50418f6:   mov    0x8(%r10),%eax
  0x00007fa5c50418fa:   cmp    $0x0,%eax
  0x00007fa5c50418fd:   jge    Stub::generic_arraycopy+481 0x00007fa5c5041a7c
  0x00007fa5c5041903:   mov    %r11d,%r10d
  0x00007fa5c5041906:   add    %esi,%r10d
  0x00007fa5c5041909:   cmp    0xc(%rdi),%r10d
  0x00007fa5c504190d:   ja     Stub::generic_arraycopy+481 0x00007fa5c5041a7c
  0x00007fa5c5041913:   mov    %r11d,%r10d
  0x00007fa5c5041916:   add    %ecx,%r10d
  0x00007fa5c5041919:   cmp    0xc(%rdx),%r10d
  0x00007fa5c504191d:   ja     Stub::generic_arraycopy+481 0x00007fa5c5041a7c
  0x00007fa5c5041923:   movslq %esi,%rsi
  0x00007fa5c5041926:   movslq %ecx,%rcx
  0x00007fa5c5041929:   mov    %eax,%r10d
  0x00007fa5c504192c:   shr    $0x10,%r10d
  0x00007fa5c5041930:   and    $0xff,%r10
  0x00007fa5c5041937:   add    %r10,%rdi
  0x00007fa5c504193a:   add    %r10,%rdx
  0x00007fa5c504193d:   and    $0x3f,%eax
  0x00007fa5c5041940:   cmp    $0x0,%eax
  0x00007fa5c5041943:   jne    Stub::generic_arraycopy+186 0x00007fa5c5041955
  0x00007fa5c5041945:   lea    (%rdi,%rsi,1),%rdi
  0x00007fa5c5041949:   lea    (%rdx,%rcx,1),%rsi
  0x00007fa5c504194d:   movslq %r11d,%rdx
  0x00007fa5c5041950:   jmpq   Stub::jbyte_arraycopy+4 0x00007fa5c5040b04
  0x00007fa5c5041955:   cmp    $0x1,%eax
  0x00007fa5c5041958:   jne    Stub::generic_arraycopy+207 0x00007fa5c504196a
  0x00007fa5c504195a:   lea    (%rdi,%rsi,2),%rdi
  0x00007fa5c504195e:   lea    (%rdx,%rcx,2),%rsi
  0x00007fa5c5041962:   movslq %r11d,%rdx
  0x00007fa5c5041965:   jmpq   Stub::jshort_arraycopy+4 0x00007fa5c5040c64
  0x00007fa5c504196a:   cmp    $0x2,%eax
  0x00007fa5c504196d:   jne    Stub::generic_arraycopy+228 0x00007fa5c504197f
  0x00007fa5c504196f:   lea    (%rdi,%rsi,4),%rdi
  0x00007fa5c5041973:   lea    (%rdx,%rcx,4),%rsi
  0x00007fa5c5041977:   movslq %r11d,%rdx
  0x00007fa5c504197a:   jmpq   Stub::jint_arraycopy+4 0x00007fa5c5040d84
  0x00007fa5c504197f:   lea    (%rdi,%rsi,8),%rdi
  0x00007fa5c5041983:   lea    (%rdx,%rcx,8),%rsi
  0x00007fa5c5041987:   movslq %r11d,%rdx
  0x00007fa5c504198a:   jmpq   Stub::jlong_arraycopy+4 0x00007fa5c5040ea4
  0x00007fa5c504198f:   mov    0x8(%rdx),%eax
  0x00007fa5c5041992:   movabs $0x800000000,%r9
  0x00007fa5c504199c:   add    %r9,%rax
  0x00007fa5c504199f:   cmp    %rax,%r10
  0x00007fa5c50419a2:   jne    Stub::generic_arraycopy+325 0x00007fa5c50419e0
  0x00007fa5c50419a8:   mov    %r11d,%r10d
  0x00007fa5c50419ab:   add    %esi,%r10d
  0x00007fa5c50419ae:   cmp    0xc(%rdi),%r10d
  0x00007fa5c50419b2:   ja     Stub::generic_arraycopy+481 0x00007fa5c5041a7c
  0x00007fa5c50419b8:   mov    %r11d,%r10d
  0x00007fa5c50419bb:   add    %ecx,%r10d
  0x00007fa5c50419be:   cmp    0xc(%rdx),%r10d
  0x00007fa5c50419c2:   ja     Stub::generic_arraycopy+481 0x00007fa5c5041a7c
  0x00007fa5c50419c8:   movslq %esi,%rsi
  0x00007fa5c50419cb:   movslq %ecx,%rcx
  0x00007fa5c50419ce:   lea    0x10(%rdi,%rsi,4),%rdi
  0x00007fa5c50419d3:   lea    0x10(%rdx,%rcx,4),%rsi
  0x00007fa5c50419d8:   movslq %r11d,%rdx
  0x00007fa5c50419db:   jmpq   Stub::oop_arraycopy+4 0x00007fa5c50410e4
  0x00007fa5c50419e0:   cmpl   $0x80100c02,0x8(%rax)
  0x00007fa5c50419e7:   jne    Stub::generic_arraycopy+481 0x00007fa5c5041a7c
  0x00007fa5c50419ed:   mov    %r11d,%eax
  0x00007fa5c50419f0:   add    %esi,%eax
  0x00007fa5c50419f2:   cmp    0xc(%rdi),%eax
  0x00007fa5c50419f5:   ja     Stub::generic_arraycopy+481 0x00007fa5c5041a7c
  0x00007fa5c50419fb:   mov    %r11d,%eax
  0x00007fa5c50419fe:   add    %ecx,%eax
  0x00007fa5c5041a00:   cmp    0xc(%rdx),%eax
  0x00007fa5c5041a03:   ja     Stub::generic_arraycopy+481 0x00007fa5c5041a7c
  0x00007fa5c5041a09:   movslq %esi,%rsi
  0x00007fa5c5041a0c:   movslq %ecx,%rcx
  0x00007fa5c5041a0f:   mov    0x8(%rdx),%r11d
  0x00007fa5c5041a13:   movabs $0x800000000,%r9
  0x00007fa5c5041a1d:   add    %r9,%r11
  0x00007fa5c5041a20:   lea    0x10(%rdi,%rsi,4),%rdi
  0x00007fa5c5041a25:   lea    0x10(%rdx,%rcx,4),%rsi
  0x00007fa5c5041a2a:   mov    %r8d,%edx
  0x00007fa5c5041a2d:   mov    0x14(%r11),%ecx
  0x00007fa5c5041a31:   cmp    %r11,%r10
  0x00007fa5c5041a34:   je     Stub::generic_arraycopy+320 0x00007fa5c50419db
  0x00007fa5c5041a36:   cmp    (%r10,%rcx,1),%r11
  0x00007fa5c5041a3a:   je     Stub::generic_arraycopy+320 0x00007fa5c50419db
  0x00007fa5c5041a3c:   cmp    $0x20,%ecx
  0x00007fa5c5041a3f:   jne    Stub::generic_arraycopy+462 0x00007fa5c5041a69
  0x00007fa5c5041a45:   push   %rax
  0x00007fa5c5041a46:   mov    %r11,%rax
  0x00007fa5c5041a49:   push   %rcx
  0x00007fa5c5041a4a:   push   %rdi
  0x00007fa5c5041a4b:   mov    0x28(%r10),%rdi
  0x00007fa5c5041a4f:   mov    (%rdi),%ecx
  0x00007fa5c5041a51:   add    $0x8,%rdi
  0x00007fa5c5041a55:   test   %rax,%rax
  0x00007fa5c5041a58:   repnz scas %es:(%rdi),%rax
  0x00007fa5c5041a5b:   pop    %rdi
  0x00007fa5c5041a5c:   pop    %rcx
  0x00007fa5c5041a5d:   pop    %rax
  0x00007fa5c5041a5e:   jne    Stub::generic_arraycopy+462 0x00007fa5c5041a69
  0x00007fa5c5041a60:   mov    %r11,0x20(%r10)
  0x00007fa5c5041a64:   jmpq   Stub::generic_arraycopy+320 0x00007fa5c50419db
  0x00007fa5c5041a69:   mov    0xd0(%r11),%r11
  0x00007fa5c5041a70:   mov    0x14(%r11),%ecx
  0x00007fa5c5041a74:   mov    %r11,%r8
  0x00007fa5c5041a77:   jmpq   Stub::checkcast_arraycopy+4 0x00007fa5c5041504
  0x00007fa5c5041a7c:   xor    %rax,%rax
  0x00007fa5c5041a7f:   not    %rax
  0x00007fa5c5041a82:   leaveq 
  0x00007fa5c5041a83:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jbyte_fill [0x00007fa5c5041aa0, 0x00007fa5c5041b4b] (171 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5041aa0:   mov    %rdx,%r11
  0x00007fa5c5041aa3:   push   %rbp
  0x00007fa5c5041aa4:   mov    %rsp,%rbp
  0x00007fa5c5041aa7:   and    $0xff,%esi
  0x00007fa5c5041aad:   mov    %esi,%eax
  0x00007fa5c5041aaf:   shl    $0x8,%eax
  0x00007fa5c5041ab2:   or     %eax,%esi
  0x00007fa5c5041ab4:   mov    %esi,%eax
  0x00007fa5c5041ab6:   shl    $0x10,%eax
  0x00007fa5c5041ab9:   or     %eax,%esi
  0x00007fa5c5041abb:   cmp    $0x8,%r11d
  0x00007fa5c5041abf:   jb     Stub::jbyte_fill+132 0x00007fa5c5041b24
  0x00007fa5c5041ac5:   vmovd  %esi,%xmm0
  0x00007fa5c5041ac9:   vpbroadcastd %xmm0,%ymm0
  0x00007fa5c5041ace:   sub    $0x40,%r11d
  0x00007fa5c5041ad2:   jl     Stub::jbyte_fill+83 0x00007fa5c5041af3
  0x00007fa5c5041ad8:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c5041ae0:   vmovdqu %ymm0,(%rdi)
  0x00007fa5c5041ae4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007fa5c5041ae9:   add    $0x40,%rdi
  0x00007fa5c5041aed:   sub    $0x40,%r11d
  0x00007fa5c5041af1:   jge    Stub::jbyte_fill+64 0x00007fa5c5041ae0
  0x00007fa5c5041af3:   add    $0x20,%r11d
  0x00007fa5c5041af7:   jl     Stub::jbyte_fill+101 0x00007fa5c5041b05
  0x00007fa5c5041af9:   vmovdqu %ymm0,(%rdi)
  0x00007fa5c5041afd:   add    $0x20,%rdi
  0x00007fa5c5041b01:   sub    $0x20,%r11d
  0x00007fa5c5041b05:   vmovd  %esi,%xmm0
  0x00007fa5c5041b09:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fa5c5041b0e:   add    $0x20,%r11d
  0x00007fa5c5041b12:   je     Stub::jbyte_fill+166 0x00007fa5c5041b46
  0x00007fa5c5041b14:   jmp    Stub::jbyte_fill+126 0x00007fa5c5041b1e
  0x00007fa5c5041b16:   vmovq  %xmm0,(%rdi)
  0x00007fa5c5041b1a:   add    $0x8,%rdi
  0x00007fa5c5041b1e:   sub    $0x8,%r11d
  0x00007fa5c5041b22:   jge    Stub::jbyte_fill+118 0x00007fa5c5041b16
  0x00007fa5c5041b24:   test   $0x4,%r11b
  0x00007fa5c5041b28:   je     Stub::jbyte_fill+144 0x00007fa5c5041b30
  0x00007fa5c5041b2a:   mov    %esi,(%rdi)
  0x00007fa5c5041b2c:   add    $0x4,%rdi
  0x00007fa5c5041b30:   test   $0x2,%r11b
  0x00007fa5c5041b34:   je     Stub::jbyte_fill+157 0x00007fa5c5041b3d
  0x00007fa5c5041b36:   mov    %si,(%rdi)
  0x00007fa5c5041b39:   add    $0x2,%rdi
  0x00007fa5c5041b3d:   test   $0x1,%r11b
  0x00007fa5c5041b41:   je     Stub::jbyte_fill+166 0x00007fa5c5041b46
  0x00007fa5c5041b43:   mov    %sil,(%rdi)
  0x00007fa5c5041b46:   vzeroupper 
  0x00007fa5c5041b49:   leaveq 
  0x00007fa5c5041b4a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jshort_fill [0x00007fa5c5041b60, 0x00007fa5c5041bfe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5041b60:   mov    %rdx,%r11
  0x00007fa5c5041b63:   push   %rbp
  0x00007fa5c5041b64:   mov    %rsp,%rbp
  0x00007fa5c5041b67:   and    $0xffff,%esi
  0x00007fa5c5041b6d:   mov    %esi,%eax
  0x00007fa5c5041b6f:   shl    $0x10,%eax
  0x00007fa5c5041b72:   or     %eax,%esi
  0x00007fa5c5041b74:   cmp    $0x4,%r11d
  0x00007fa5c5041b78:   jb     Stub::jshort_fill+132 0x00007fa5c5041be4
  0x00007fa5c5041b7e:   vmovd  %esi,%xmm0
  0x00007fa5c5041b82:   vpbroadcastd %xmm0,%ymm0
  0x00007fa5c5041b87:   sub    $0x20,%r11d
  0x00007fa5c5041b8b:   jl     Stub::jshort_fill+83 0x00007fa5c5041bb3
  0x00007fa5c5041b91:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c5041b9c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5041ba0:   vmovdqu %ymm0,(%rdi)
  0x00007fa5c5041ba4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007fa5c5041ba9:   add    $0x40,%rdi
  0x00007fa5c5041bad:   sub    $0x20,%r11d
  0x00007fa5c5041bb1:   jge    Stub::jshort_fill+64 0x00007fa5c5041ba0
  0x00007fa5c5041bb3:   add    $0x10,%r11d
  0x00007fa5c5041bb7:   jl     Stub::jshort_fill+101 0x00007fa5c5041bc5
  0x00007fa5c5041bb9:   vmovdqu %ymm0,(%rdi)
  0x00007fa5c5041bbd:   add    $0x20,%rdi
  0x00007fa5c5041bc1:   sub    $0x10,%r11d
  0x00007fa5c5041bc5:   vmovd  %esi,%xmm0
  0x00007fa5c5041bc9:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fa5c5041bce:   add    $0x10,%r11d
  0x00007fa5c5041bd2:   je     Stub::jshort_fill+153 0x00007fa5c5041bf9
  0x00007fa5c5041bd4:   jmp    Stub::jshort_fill+126 0x00007fa5c5041bde
  0x00007fa5c5041bd6:   vmovq  %xmm0,(%rdi)
  0x00007fa5c5041bda:   add    $0x8,%rdi
  0x00007fa5c5041bde:   sub    $0x4,%r11d
  0x00007fa5c5041be2:   jge    Stub::jshort_fill+118 0x00007fa5c5041bd6
  0x00007fa5c5041be4:   test   $0x2,%r11b
  0x00007fa5c5041be8:   je     Stub::jshort_fill+144 0x00007fa5c5041bf0
  0x00007fa5c5041bea:   mov    %esi,(%rdi)
  0x00007fa5c5041bec:   add    $0x4,%rdi
  0x00007fa5c5041bf0:   test   $0x1,%r11b
  0x00007fa5c5041bf4:   je     Stub::jshort_fill+153 0x00007fa5c5041bf9
  0x00007fa5c5041bf6:   mov    %si,(%rdi)
  0x00007fa5c5041bf9:   vzeroupper 
  0x00007fa5c5041bfc:   leaveq 
  0x00007fa5c5041bfd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::jint_fill [0x00007fa5c5041c00, 0x00007fa5c5041c81] (129 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5041c00:   mov    %rdx,%r11
  0x00007fa5c5041c03:   push   %rbp
  0x00007fa5c5041c04:   mov    %rsp,%rbp
  0x00007fa5c5041c07:   cmp    $0x2,%r11d
  0x00007fa5c5041c0b:   jb     Stub::jint_fill+116 0x00007fa5c5041c74
  0x00007fa5c5041c11:   vmovd  %esi,%xmm0
  0x00007fa5c5041c15:   vpbroadcastd %xmm0,%ymm0
  0x00007fa5c5041c1a:   sub    $0x10,%r11d
  0x00007fa5c5041c1e:   jl     Stub::jint_fill+67 0x00007fa5c5041c43
  0x00007fa5c5041c24:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c5041c2c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5041c30:   vmovdqu %ymm0,(%rdi)
  0x00007fa5c5041c34:   vmovdqu %ymm0,0x20(%rdi)
  0x00007fa5c5041c39:   add    $0x40,%rdi
  0x00007fa5c5041c3d:   sub    $0x10,%r11d
  0x00007fa5c5041c41:   jge    Stub::jint_fill+48 0x00007fa5c5041c30
  0x00007fa5c5041c43:   add    $0x8,%r11d
  0x00007fa5c5041c47:   jl     Stub::jint_fill+85 0x00007fa5c5041c55
  0x00007fa5c5041c49:   vmovdqu %ymm0,(%rdi)
  0x00007fa5c5041c4d:   add    $0x20,%rdi
  0x00007fa5c5041c51:   sub    $0x8,%r11d
  0x00007fa5c5041c55:   vmovd  %esi,%xmm0
  0x00007fa5c5041c59:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fa5c5041c5e:   add    $0x8,%r11d
  0x00007fa5c5041c62:   je     Stub::jint_fill+124 0x00007fa5c5041c7c
  0x00007fa5c5041c64:   jmp    Stub::jint_fill+110 0x00007fa5c5041c6e
  0x00007fa5c5041c66:   vmovq  %xmm0,(%rdi)
  0x00007fa5c5041c6a:   add    $0x8,%rdi
  0x00007fa5c5041c6e:   sub    $0x2,%r11d
  0x00007fa5c5041c72:   jge    Stub::jint_fill+102 0x00007fa5c5041c66
  0x00007fa5c5041c74:   test   $0x1,%r11b
  0x00007fa5c5041c78:   je     Stub::jint_fill+124 0x00007fa5c5041c7c
  0x00007fa5c5041c7a:   mov    %esi,(%rdi)
  0x00007fa5c5041c7c:   vzeroupper 
  0x00007fa5c5041c7f:   leaveq 
  0x00007fa5c5041c80:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jbyte_fill [0x00007fa5c5041ca0, 0x00007fa5c5041d4b] (171 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5041ca0:   mov    %rdx,%r11
  0x00007fa5c5041ca3:   push   %rbp
  0x00007fa5c5041ca4:   mov    %rsp,%rbp
  0x00007fa5c5041ca7:   and    $0xff,%esi
  0x00007fa5c5041cad:   mov    %esi,%eax
  0x00007fa5c5041caf:   shl    $0x8,%eax
  0x00007fa5c5041cb2:   or     %eax,%esi
  0x00007fa5c5041cb4:   mov    %esi,%eax
  0x00007fa5c5041cb6:   shl    $0x10,%eax
  0x00007fa5c5041cb9:   or     %eax,%esi
  0x00007fa5c5041cbb:   cmp    $0x8,%r11d
  0x00007fa5c5041cbf:   jb     Stub::arrayof_jbyte_fill+132 0x00007fa5c5041d24
  0x00007fa5c5041cc5:   vmovd  %esi,%xmm0
  0x00007fa5c5041cc9:   vpbroadcastd %xmm0,%ymm0
  0x00007fa5c5041cce:   sub    $0x40,%r11d
  0x00007fa5c5041cd2:   jl     Stub::arrayof_jbyte_fill+83 0x00007fa5c5041cf3
  0x00007fa5c5041cd8:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c5041ce0:   vmovdqu %ymm0,(%rdi)
  0x00007fa5c5041ce4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007fa5c5041ce9:   add    $0x40,%rdi
  0x00007fa5c5041ced:   sub    $0x40,%r11d
  0x00007fa5c5041cf1:   jge    Stub::arrayof_jbyte_fill+64 0x00007fa5c5041ce0
  0x00007fa5c5041cf3:   add    $0x20,%r11d
  0x00007fa5c5041cf7:   jl     Stub::arrayof_jbyte_fill+101 0x00007fa5c5041d05
  0x00007fa5c5041cf9:   vmovdqu %ymm0,(%rdi)
  0x00007fa5c5041cfd:   add    $0x20,%rdi
  0x00007fa5c5041d01:   sub    $0x20,%r11d
  0x00007fa5c5041d05:   vmovd  %esi,%xmm0
  0x00007fa5c5041d09:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fa5c5041d0e:   add    $0x20,%r11d
  0x00007fa5c5041d12:   je     Stub::arrayof_jbyte_fill+166 0x00007fa5c5041d46
  0x00007fa5c5041d14:   jmp    Stub::arrayof_jbyte_fill+126 0x00007fa5c5041d1e
  0x00007fa5c5041d16:   vmovq  %xmm0,(%rdi)
  0x00007fa5c5041d1a:   add    $0x8,%rdi
  0x00007fa5c5041d1e:   sub    $0x8,%r11d
  0x00007fa5c5041d22:   jge    Stub::arrayof_jbyte_fill+118 0x00007fa5c5041d16
  0x00007fa5c5041d24:   test   $0x4,%r11b
  0x00007fa5c5041d28:   je     Stub::arrayof_jbyte_fill+144 0x00007fa5c5041d30
  0x00007fa5c5041d2a:   mov    %esi,(%rdi)
  0x00007fa5c5041d2c:   add    $0x4,%rdi
  0x00007fa5c5041d30:   test   $0x2,%r11b
  0x00007fa5c5041d34:   je     Stub::arrayof_jbyte_fill+157 0x00007fa5c5041d3d
  0x00007fa5c5041d36:   mov    %si,(%rdi)
  0x00007fa5c5041d39:   add    $0x2,%rdi
  0x00007fa5c5041d3d:   test   $0x1,%r11b
  0x00007fa5c5041d41:   je     Stub::arrayof_jbyte_fill+166 0x00007fa5c5041d46
  0x00007fa5c5041d43:   mov    %sil,(%rdi)
  0x00007fa5c5041d46:   vzeroupper 
  0x00007fa5c5041d49:   leaveq 
  0x00007fa5c5041d4a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jshort_fill [0x00007fa5c5041d60, 0x00007fa5c5041dfe] (158 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5041d60:   mov    %rdx,%r11
  0x00007fa5c5041d63:   push   %rbp
  0x00007fa5c5041d64:   mov    %rsp,%rbp
  0x00007fa5c5041d67:   and    $0xffff,%esi
  0x00007fa5c5041d6d:   mov    %esi,%eax
  0x00007fa5c5041d6f:   shl    $0x10,%eax
  0x00007fa5c5041d72:   or     %eax,%esi
  0x00007fa5c5041d74:   cmp    $0x4,%r11d
  0x00007fa5c5041d78:   jb     Stub::arrayof_jshort_fill+132 0x00007fa5c5041de4
  0x00007fa5c5041d7e:   vmovd  %esi,%xmm0
  0x00007fa5c5041d82:   vpbroadcastd %xmm0,%ymm0
  0x00007fa5c5041d87:   sub    $0x20,%r11d
  0x00007fa5c5041d8b:   jl     Stub::arrayof_jshort_fill+83 0x00007fa5c5041db3
  0x00007fa5c5041d91:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c5041d9c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5041da0:   vmovdqu %ymm0,(%rdi)
  0x00007fa5c5041da4:   vmovdqu %ymm0,0x20(%rdi)
  0x00007fa5c5041da9:   add    $0x40,%rdi
  0x00007fa5c5041dad:   sub    $0x20,%r11d
  0x00007fa5c5041db1:   jge    Stub::arrayof_jshort_fill+64 0x00007fa5c5041da0
  0x00007fa5c5041db3:   add    $0x10,%r11d
  0x00007fa5c5041db7:   jl     Stub::arrayof_jshort_fill+101 0x00007fa5c5041dc5
  0x00007fa5c5041db9:   vmovdqu %ymm0,(%rdi)
  0x00007fa5c5041dbd:   add    $0x20,%rdi
  0x00007fa5c5041dc1:   sub    $0x10,%r11d
  0x00007fa5c5041dc5:   vmovd  %esi,%xmm0
  0x00007fa5c5041dc9:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fa5c5041dce:   add    $0x10,%r11d
  0x00007fa5c5041dd2:   je     Stub::arrayof_jshort_fill+153 0x00007fa5c5041df9
  0x00007fa5c5041dd4:   jmp    Stub::arrayof_jshort_fill+126 0x00007fa5c5041dde
  0x00007fa5c5041dd6:   vmovq  %xmm0,(%rdi)
  0x00007fa5c5041dda:   add    $0x8,%rdi
  0x00007fa5c5041dde:   sub    $0x4,%r11d
  0x00007fa5c5041de2:   jge    Stub::arrayof_jshort_fill+118 0x00007fa5c5041dd6
  0x00007fa5c5041de4:   test   $0x2,%r11b
  0x00007fa5c5041de8:   je     Stub::arrayof_jshort_fill+144 0x00007fa5c5041df0
  0x00007fa5c5041dea:   mov    %esi,(%rdi)
  0x00007fa5c5041dec:   add    $0x4,%rdi
  0x00007fa5c5041df0:   test   $0x1,%r11b
  0x00007fa5c5041df4:   je     Stub::arrayof_jshort_fill+153 0x00007fa5c5041df9
  0x00007fa5c5041df6:   mov    %si,(%rdi)
  0x00007fa5c5041df9:   vzeroupper 
  0x00007fa5c5041dfc:   leaveq 
  0x00007fa5c5041dfd:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::arrayof_jint_fill [0x00007fa5c5041e00, 0x00007fa5c5041e81] (129 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5041e00:   mov    %rdx,%r11
  0x00007fa5c5041e03:   push   %rbp
  0x00007fa5c5041e04:   mov    %rsp,%rbp
  0x00007fa5c5041e07:   cmp    $0x2,%r11d
  0x00007fa5c5041e0b:   jb     Stub::arrayof_jint_fill+116 0x00007fa5c5041e74
  0x00007fa5c5041e11:   vmovd  %esi,%xmm0
  0x00007fa5c5041e15:   vpbroadcastd %xmm0,%ymm0
  0x00007fa5c5041e1a:   sub    $0x10,%r11d
  0x00007fa5c5041e1e:   jl     Stub::arrayof_jint_fill+67 0x00007fa5c5041e43
  0x00007fa5c5041e24:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c5041e2c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5041e30:   vmovdqu %ymm0,(%rdi)
  0x00007fa5c5041e34:   vmovdqu %ymm0,0x20(%rdi)
  0x00007fa5c5041e39:   add    $0x40,%rdi
  0x00007fa5c5041e3d:   sub    $0x10,%r11d
  0x00007fa5c5041e41:   jge    Stub::arrayof_jint_fill+48 0x00007fa5c5041e30
  0x00007fa5c5041e43:   add    $0x8,%r11d
  0x00007fa5c5041e47:   jl     Stub::arrayof_jint_fill+85 0x00007fa5c5041e55
  0x00007fa5c5041e49:   vmovdqu %ymm0,(%rdi)
  0x00007fa5c5041e4d:   add    $0x20,%rdi
  0x00007fa5c5041e51:   sub    $0x8,%r11d
  0x00007fa5c5041e55:   vmovd  %esi,%xmm0
  0x00007fa5c5041e59:   vpshufd $0x0,%xmm0,%xmm0
  0x00007fa5c5041e5e:   add    $0x8,%r11d
  0x00007fa5c5041e62:   je     Stub::arrayof_jint_fill+124 0x00007fa5c5041e7c
  0x00007fa5c5041e64:   jmp    Stub::arrayof_jint_fill+110 0x00007fa5c5041e6e
  0x00007fa5c5041e66:   vmovq  %xmm0,(%rdi)
  0x00007fa5c5041e6a:   add    $0x8,%rdi
  0x00007fa5c5041e6e:   sub    $0x2,%r11d
  0x00007fa5c5041e72:   jge    Stub::arrayof_jint_fill+102 0x00007fa5c5041e66
  0x00007fa5c5041e74:   test   $0x1,%r11b
  0x00007fa5c5041e78:   je     Stub::arrayof_jint_fill+124 0x00007fa5c5041e7c
  0x00007fa5c5041e7a:   mov    %esi,(%rdi)
  0x00007fa5c5041e7c:   vzeroupper 
  0x00007fa5c5041e7f:   leaveq 
  0x00007fa5c5041e80:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::aescrypt_encryptBlock [0x00007fa5c5041ea0, 0x00007fa5c5041fba] (282 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5041ea0:   push   %rbp
  0x00007fa5c5041ea1:   mov    %rsp,%rbp
  0x00007fa5c5041ea4:   mov    -0x4(%rdx),%eax
  0x00007fa5c5041ea7:   vmovdqu 0x9a23791(%rip),%xmm1        # 0x00007fa5cea65640
  0x00007fa5c5041eaf:   vmovdqu (%rdi),%xmm0
  0x00007fa5c5041eb3:   vmovdqu (%rdx),%xmm2
  0x00007fa5c5041eb7:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fa5c5041ebc:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fa5c5041ec0:   vmovdqu 0x10(%rdx),%xmm2
  0x00007fa5c5041ec5:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fa5c5041eca:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fa5c5041ecf:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5041ed4:   vmovdqu 0x30(%rdx),%xmm4
  0x00007fa5c5041ed9:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c5041ede:   vmovdqu 0x40(%rdx),%xmm5
  0x00007fa5c5041ee3:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007fa5c5041ee8:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007fa5c5041eed:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fa5c5041ef2:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007fa5c5041ef7:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007fa5c5041efc:   vmovdqu 0x50(%rdx),%xmm2
  0x00007fa5c5041f01:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fa5c5041f06:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fa5c5041f0b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5041f10:   vmovdqu 0x70(%rdx),%xmm4
  0x00007fa5c5041f15:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c5041f1a:   vmovdqu 0x80(%rdx),%xmm5
  0x00007fa5c5041f22:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007fa5c5041f27:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007fa5c5041f2c:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fa5c5041f31:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007fa5c5041f36:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007fa5c5041f3b:   vmovdqu 0x90(%rdx),%xmm2
  0x00007fa5c5041f43:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fa5c5041f48:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fa5c5041f50:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5041f55:   cmp    $0x2c,%eax
  0x00007fa5c5041f58:   je     Stub::aescrypt_encryptBlock+263 0x00007fa5c5041fa7
  0x00007fa5c5041f5a:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007fa5c5041f5f:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fa5c5041f64:   vmovdqu 0xb0(%rdx),%xmm2
  0x00007fa5c5041f6c:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fa5c5041f71:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007fa5c5041f79:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5041f7e:   cmp    $0x34,%eax
  0x00007fa5c5041f81:   je     Stub::aescrypt_encryptBlock+263 0x00007fa5c5041fa7
  0x00007fa5c5041f83:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007fa5c5041f88:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fa5c5041f8d:   vmovdqu 0xd0(%rdx),%xmm2
  0x00007fa5c5041f95:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fa5c5041f9a:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007fa5c5041fa2:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5041fa7:   vaesenc %xmm2,%xmm0,%xmm0
  0x00007fa5c5041fac:   vaesenclast %xmm3,%xmm0,%xmm0
  0x00007fa5c5041fb1:   vmovdqu %xmm0,(%rsi)
  0x00007fa5c5041fb5:   xor    %rax,%rax
  0x00007fa5c5041fb8:   leaveq 
  0x00007fa5c5041fb9:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::aescrypt_decryptBlock [0x00007fa5c5041fc0, 0x00007fa5c50420da] (282 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5041fc0:   push   %rbp
  0x00007fa5c5041fc1:   mov    %rsp,%rbp
  0x00007fa5c5041fc4:   mov    -0x4(%rdx),%eax
  0x00007fa5c5041fc7:   vmovdqu 0x9a23671(%rip),%xmm1        # 0x00007fa5cea65640
  0x00007fa5c5041fcf:   vmovdqu (%rdi),%xmm0
  0x00007fa5c5041fd3:   vmovdqu 0x10(%rdx),%xmm2
  0x00007fa5c5041fd8:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fa5c5041fdd:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fa5c5041fe2:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5041fe7:   vmovdqu 0x30(%rdx),%xmm4
  0x00007fa5c5041fec:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c5041ff1:   vmovdqu 0x40(%rdx),%xmm5
  0x00007fa5c5041ff6:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007fa5c5041ffb:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fa5c5041fff:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fa5c5042004:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007fa5c5042009:   vaesdec %xmm5,%xmm0,%xmm0
  0x00007fa5c504200e:   vmovdqu 0x50(%rdx),%xmm2
  0x00007fa5c5042013:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fa5c5042018:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fa5c504201d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042022:   vmovdqu 0x70(%rdx),%xmm4
  0x00007fa5c5042027:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c504202c:   vmovdqu 0x80(%rdx),%xmm5
  0x00007fa5c5042034:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007fa5c5042039:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007fa5c504203e:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fa5c5042043:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007fa5c5042048:   vaesdec %xmm5,%xmm0,%xmm0
  0x00007fa5c504204d:   vmovdqu 0x90(%rdx),%xmm2
  0x00007fa5c5042055:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fa5c504205a:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fa5c5042062:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042067:   vmovdqu (%rdx),%xmm4
  0x00007fa5c504206b:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c5042070:   cmp    $0x2c,%eax
  0x00007fa5c5042073:   je     Stub::aescrypt_decryptBlock+258 0x00007fa5c50420c2
  0x00007fa5c5042075:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007fa5c504207a:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fa5c504207f:   vmovdqu 0xb0(%rdx),%xmm2
  0x00007fa5c5042087:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fa5c504208c:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007fa5c5042094:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042099:   cmp    $0x34,%eax
  0x00007fa5c504209c:   je     Stub::aescrypt_decryptBlock+258 0x00007fa5c50420c2
  0x00007fa5c504209e:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007fa5c50420a3:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fa5c50420a8:   vmovdqu 0xd0(%rdx),%xmm2
  0x00007fa5c50420b0:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fa5c50420b5:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007fa5c50420bd:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c50420c2:   vaesdec %xmm2,%xmm0,%xmm0
  0x00007fa5c50420c7:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fa5c50420cc:   vaesdeclast %xmm4,%xmm0,%xmm0
  0x00007fa5c50420d1:   vmovdqu %xmm0,(%rsi)
  0x00007fa5c50420d5:   xor    %rax,%rax
  0x00007fa5c50420d8:   leaveq 
  0x00007fa5c50420d9:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::cipherBlockChaining_encryptAESCrypt [0x00007fa5c50420e0, 0x00007fa5c5042308] (552 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50420e0:   push   %rbp
  0x00007fa5c50420e1:   mov    %rsp,%rbp
  0x00007fa5c50420e4:   push   %r8
  0x00007fa5c50420e6:   vmovdqu 0x9a23552(%rip),%xmm1        # 0x00007fa5cea65640
  0x00007fa5c50420ee:   vmovdqu (%rdx),%xmm2
  0x00007fa5c50420f2:   vpshufb %xmm1,%xmm2,%xmm2
  0x00007fa5c50420f7:   vmovdqu 0x10(%rdx),%xmm3
  0x00007fa5c50420fc:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042101:   vmovdqu 0x20(%rdx),%xmm4
  0x00007fa5c5042106:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c504210b:   vmovdqu 0x30(%rdx),%xmm5
  0x00007fa5c5042110:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007fa5c5042115:   vmovdqu 0x40(%rdx),%xmm6
  0x00007fa5c504211a:   vpshufb %xmm1,%xmm6,%xmm6
  0x00007fa5c504211f:   vmovdqu 0x50(%rdx),%xmm7
  0x00007fa5c5042124:   vpshufb %xmm1,%xmm7,%xmm7
  0x00007fa5c5042129:   vmovdqu 0x60(%rdx),%xmm8
  0x00007fa5c504212e:   vpshufb %xmm1,%xmm8,%xmm8
  0x00007fa5c5042133:   vmovdqu 0x70(%rdx),%xmm9
  0x00007fa5c5042138:   vpshufb %xmm1,%xmm9,%xmm9
  0x00007fa5c504213d:   vmovdqu 0x80(%rdx),%xmm10
  0x00007fa5c5042145:   vpshufb %xmm1,%xmm10,%xmm10
  0x00007fa5c504214a:   vmovdqu 0x90(%rdx),%xmm11
  0x00007fa5c5042152:   vpshufb %xmm1,%xmm11,%xmm11
  0x00007fa5c5042157:   vmovdqu 0xa0(%rdx),%xmm12
  0x00007fa5c504215f:   vpshufb %xmm1,%xmm12,%xmm12
  0x00007fa5c5042164:   vmovdqu (%rcx),%xmm0
  0x00007fa5c5042168:   mov    -0x4(%rdx),%eax
  0x00007fa5c504216b:   cmp    $0x2c,%eax
  0x00007fa5c504216e:   jne    Stub::cipherBlockChaining_encryptAESCrypt+245 0x00007fa5c50421d5
  0x00007fa5c5042174:   movabs $0x0,%rax
  0x00007fa5c504217e:   xchg   %ax,%ax
  0x00007fa5c5042180:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007fa5c5042185:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c5042189:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fa5c504218d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fa5c5042192:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007fa5c5042197:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007fa5c504219c:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007fa5c50421a1:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007fa5c50421a6:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007fa5c50421ab:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007fa5c50421b0:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007fa5c50421b5:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007fa5c50421ba:   vaesenclast %xmm12,%xmm0,%xmm0
  0x00007fa5c50421bf:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fa5c50421c4:   add    $0x10,%rax
  0x00007fa5c50421c8:   sub    $0x10,%r8
  0x00007fa5c50421cc:   jne    Stub::cipherBlockChaining_encryptAESCrypt+160 0x00007fa5c5042180
  0x00007fa5c50421ce:   vmovdqu %xmm0,(%rcx)
  0x00007fa5c50421d2:   pop    %rax
  0x00007fa5c50421d3:   leaveq 
  0x00007fa5c50421d4:   retq   
  0x00007fa5c50421d5:   vmovdqu 0xb0(%rdx),%xmm13
  0x00007fa5c50421dd:   vpshufb %xmm1,%xmm13,%xmm13
  0x00007fa5c50421e2:   vmovdqu 0xc0(%rdx),%xmm14
  0x00007fa5c50421ea:   vpshufb %xmm1,%xmm14,%xmm14
  0x00007fa5c50421ef:   cmp    $0x34,%eax
  0x00007fa5c50421f2:   jne    Stub::cipherBlockChaining_encryptAESCrypt+397 0x00007fa5c504226d
  0x00007fa5c50421f8:   movabs $0x0,%rax
  0x00007fa5c5042202:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c504220c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5042210:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007fa5c5042215:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c5042219:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fa5c504221d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fa5c5042222:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007fa5c5042227:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007fa5c504222c:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007fa5c5042231:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007fa5c5042236:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007fa5c504223b:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007fa5c5042240:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007fa5c5042245:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007fa5c504224a:   vaesenc %xmm12,%xmm0,%xmm0
  0x00007fa5c504224f:   vaesenc %xmm13,%xmm0,%xmm0
  0x00007fa5c5042254:   vaesenclast %xmm14,%xmm0,%xmm0
  0x00007fa5c5042259:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fa5c504225e:   add    $0x10,%rax
  0x00007fa5c5042262:   sub    $0x10,%r8
  0x00007fa5c5042266:   jne    Stub::cipherBlockChaining_encryptAESCrypt+304 0x00007fa5c5042210
  0x00007fa5c5042268:   jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x00007fa5c50421ce
  0x00007fa5c504226d:   vmovdqu 0xd0(%rdx),%xmm15
  0x00007fa5c5042275:   vpshufb %xmm1,%xmm15,%xmm15
  0x00007fa5c504227a:   movabs $0x0,%rax
  0x00007fa5c5042284:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c504228c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5042290:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007fa5c5042295:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c5042299:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fa5c504229d:   vaesenc %xmm3,%xmm0,%xmm0
  0x00007fa5c50422a2:   vaesenc %xmm4,%xmm0,%xmm0
  0x00007fa5c50422a7:   vaesenc %xmm5,%xmm0,%xmm0
  0x00007fa5c50422ac:   vaesenc %xmm6,%xmm0,%xmm0
  0x00007fa5c50422b1:   vaesenc %xmm7,%xmm0,%xmm0
  0x00007fa5c50422b6:   vaesenc %xmm8,%xmm0,%xmm0
  0x00007fa5c50422bb:   vaesenc %xmm9,%xmm0,%xmm0
  0x00007fa5c50422c0:   vaesenc %xmm10,%xmm0,%xmm0
  0x00007fa5c50422c5:   vaesenc %xmm11,%xmm0,%xmm0
  0x00007fa5c50422ca:   vaesenc %xmm12,%xmm0,%xmm0
  0x00007fa5c50422cf:   vaesenc %xmm13,%xmm0,%xmm0
  0x00007fa5c50422d4:   vaesenc %xmm14,%xmm0,%xmm0
  0x00007fa5c50422d9:   vaesenc %xmm15,%xmm0,%xmm0
  0x00007fa5c50422de:   vmovdqu 0xe0(%rdx),%xmm1
  0x00007fa5c50422e6:   vpshufb 0x9a23351(%rip),%xmm1,%xmm1        # 0x00007fa5cea65640
  0x00007fa5c50422ef:   vaesenclast %xmm1,%xmm0,%xmm0
  0x00007fa5c50422f4:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fa5c50422f9:   add    $0x10,%rax
  0x00007fa5c50422fd:   sub    $0x10,%r8
  0x00007fa5c5042301:   jne    Stub::cipherBlockChaining_encryptAESCrypt+432 0x00007fa5c5042290
  0x00007fa5c5042303:   jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x00007fa5c50421ce
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::cipherBlockChaining_decryptAESCrypt [0x00007fa5c5042320, 0x00007fa5c5042ae9] (1993 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5042320:   push   %rbp
  0x00007fa5c5042321:   mov    %rsp,%rbp
  0x00007fa5c5042324:   push   %r8
  0x00007fa5c5042326:   push   %rbx
  0x00007fa5c5042327:   vmovdqu 0x9a23311(%rip),%xmm1        # 0x00007fa5cea65640
  0x00007fa5c504232f:   vmovdqu 0x10(%rdx),%xmm5
  0x00007fa5c5042334:   vpshufb %xmm1,%xmm5,%xmm5
  0x00007fa5c5042339:   vmovdqu 0x20(%rdx),%xmm6
  0x00007fa5c504233e:   vpshufb %xmm1,%xmm6,%xmm6
  0x00007fa5c5042343:   vmovdqu 0x30(%rdx),%xmm7
  0x00007fa5c5042348:   vpshufb %xmm1,%xmm7,%xmm7
  0x00007fa5c504234d:   vmovdqu 0x40(%rdx),%xmm8
  0x00007fa5c5042352:   vpshufb %xmm1,%xmm8,%xmm8
  0x00007fa5c5042357:   vmovdqu 0x50(%rdx),%xmm9
  0x00007fa5c504235c:   vpshufb %xmm1,%xmm9,%xmm9
  0x00007fa5c5042361:   vmovdqu 0x60(%rdx),%xmm10
  0x00007fa5c5042366:   vpshufb %xmm1,%xmm10,%xmm10
  0x00007fa5c504236b:   vmovdqu 0x70(%rdx),%xmm11
  0x00007fa5c5042370:   vpshufb %xmm1,%xmm11,%xmm11
  0x00007fa5c5042375:   vmovdqu 0x80(%rdx),%xmm12
  0x00007fa5c504237d:   vpshufb %xmm1,%xmm12,%xmm12
  0x00007fa5c5042382:   vmovdqu 0x90(%rdx),%xmm13
  0x00007fa5c504238a:   vpshufb %xmm1,%xmm13,%xmm13
  0x00007fa5c504238f:   vmovdqu 0xa0(%rdx),%xmm14
  0x00007fa5c5042397:   vpshufb %xmm1,%xmm14,%xmm14
  0x00007fa5c504239c:   vmovdqu (%rdx),%xmm15
  0x00007fa5c50423a0:   vpshufb %xmm1,%xmm15,%xmm15
  0x00007fa5c50423a5:   vmovdqu (%rcx),%xmm1
  0x00007fa5c50423a9:   xor    %rax,%rax
  0x00007fa5c50423ac:   mov    -0x4(%rdx),%ebx
  0x00007fa5c50423af:   cmp    $0x34,%ebx
  0x00007fa5c50423b2:   je     Stub::cipherBlockChaining_decryptAESCrypt+603 0x00007fa5c504257b
  0x00007fa5c50423b8:   cmp    $0x3c,%ebx
  0x00007fa5c50423bb:   je     Stub::cipherBlockChaining_decryptAESCrypt+1221 0x00007fa5c50427e5
  0x00007fa5c50423c1:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c50423cc:   data16 data16 xchg %ax,%ax
  0x00007fa5c50423d0:   cmp    $0x40,%r8
  0x00007fa5c50423d4:   jl     Stub::cipherBlockChaining_decryptAESCrypt+500 0x00007fa5c5042514
  0x00007fa5c50423da:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fa5c50423df:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007fa5c50423e5:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007fa5c50423eb:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007fa5c50423f1:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007fa5c50423f5:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007fa5c50423f9:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007fa5c50423fd:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007fa5c5042401:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007fa5c5042406:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007fa5c504240b:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007fa5c5042410:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007fa5c5042415:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007fa5c504241a:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007fa5c504241f:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007fa5c5042424:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007fa5c5042429:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007fa5c504242e:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007fa5c5042433:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007fa5c5042438:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007fa5c504243d:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007fa5c5042442:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007fa5c5042447:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007fa5c504244c:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007fa5c5042451:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007fa5c5042456:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007fa5c504245b:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007fa5c5042460:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007fa5c5042465:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007fa5c504246a:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007fa5c504246f:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007fa5c5042474:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007fa5c5042479:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007fa5c504247e:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007fa5c5042483:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007fa5c5042488:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007fa5c504248d:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007fa5c5042492:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007fa5c5042497:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007fa5c504249c:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007fa5c50424a1:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007fa5c50424a6:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007fa5c50424ab:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007fa5c50424b0:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007fa5c50424b5:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007fa5c50424ba:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007fa5c50424bf:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007fa5c50424c4:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007fa5c50424c9:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c50424cd:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007fa5c50424d2:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007fa5c50424d6:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007fa5c50424dc:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007fa5c50424e0:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007fa5c50424e6:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007fa5c50424ea:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007fa5c50424f0:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fa5c50424f5:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007fa5c50424fb:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007fa5c5042501:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007fa5c5042507:   add    $0x40,%rax
  0x00007fa5c504250b:   sub    $0x40,%r8
  0x00007fa5c504250f:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+176 0x00007fa5c50423d0
  0x00007fa5c5042514:   cmp    $0x0,%r8
  0x00007fa5c5042518:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007fa5c5042ae1
  0x00007fa5c504251e:   xchg   %ax,%ax
  0x00007fa5c5042520:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fa5c5042525:   vmovdqa %xmm0,%xmm2
  0x00007fa5c5042529:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007fa5c504252d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007fa5c5042532:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007fa5c5042537:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007fa5c504253c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007fa5c5042541:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007fa5c5042546:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007fa5c504254b:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007fa5c5042550:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007fa5c5042555:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007fa5c504255a:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007fa5c504255f:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c5042563:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fa5c5042568:   vmovdqa %xmm2,%xmm1
  0x00007fa5c504256c:   add    $0x10,%rax
  0x00007fa5c5042570:   sub    $0x10,%r8
  0x00007fa5c5042574:   jne    Stub::cipherBlockChaining_decryptAESCrypt+512 0x00007fa5c5042520
  0x00007fa5c5042576:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007fa5c5042ae1
  0x00007fa5c504257b:   cmp    $0x40,%r8
  0x00007fa5c504257f:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1075 0x00007fa5c5042753
  0x00007fa5c5042585:   sub    $0x30,%rsp
  0x00007fa5c5042589:   vmovdqu %xmm15,(%rsp)
  0x00007fa5c504258e:   vmovdqu 0xb0(%rdx),%xmm15
  0x00007fa5c5042596:   vpshufb 0x9a230a1(%rip),%xmm15,%xmm15        # 0x00007fa5cea65640
  0x00007fa5c504259f:   vmovdqu %xmm15,0x10(%rsp)
  0x00007fa5c50425a5:   vmovdqu 0xc0(%rdx),%xmm1
  0x00007fa5c50425ad:   vpshufb 0x9a2308a(%rip),%xmm1,%xmm1        # 0x00007fa5cea65640
  0x00007fa5c50425b6:   vmovdqu %xmm1,0x20(%rsp)
  0x00007fa5c50425bc:   nopl   0x0(%rax)
  0x00007fa5c50425c0:   cmp    $0x40,%r8
  0x00007fa5c50425c4:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1061 0x00007fa5c5042745
  0x00007fa5c50425ca:   vmovdqu 0x10(%rsp),%xmm15
  0x00007fa5c50425d0:   vmovdqu 0x20(%rsp),%xmm1
  0x00007fa5c50425d6:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fa5c50425db:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007fa5c50425e1:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007fa5c50425e7:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007fa5c50425ed:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007fa5c50425f1:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007fa5c50425f5:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007fa5c50425f9:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007fa5c50425fd:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007fa5c5042602:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007fa5c5042607:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007fa5c504260c:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007fa5c5042611:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007fa5c5042616:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007fa5c504261b:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007fa5c5042620:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007fa5c5042625:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007fa5c504262a:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007fa5c504262f:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007fa5c5042634:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007fa5c5042639:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007fa5c504263e:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007fa5c5042643:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007fa5c5042648:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007fa5c504264d:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007fa5c5042652:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007fa5c5042657:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007fa5c504265c:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007fa5c5042661:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007fa5c5042666:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007fa5c504266b:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007fa5c5042670:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007fa5c5042675:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007fa5c504267a:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007fa5c504267f:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007fa5c5042684:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007fa5c5042689:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007fa5c504268e:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007fa5c5042693:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007fa5c5042698:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007fa5c504269d:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007fa5c50426a2:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007fa5c50426a7:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007fa5c50426ac:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007fa5c50426b1:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007fa5c50426b6:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007fa5c50426bb:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007fa5c50426c0:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007fa5c50426c5:   vmovdqu (%rsp),%xmm15
  0x00007fa5c50426ca:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007fa5c50426cf:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007fa5c50426d4:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007fa5c50426d9:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007fa5c50426de:   vmovdqu (%rcx),%xmm1
  0x00007fa5c50426e2:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007fa5c50426e7:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007fa5c50426ec:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007fa5c50426f1:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007fa5c50426f6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c50426fa:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007fa5c50426ff:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007fa5c5042703:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007fa5c5042709:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007fa5c504270d:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007fa5c5042713:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007fa5c5042717:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007fa5c504271d:   vmovdqu %xmm1,(%rcx)
  0x00007fa5c5042721:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fa5c5042726:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007fa5c504272c:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007fa5c5042732:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007fa5c5042738:   add    $0x40,%rax
  0x00007fa5c504273c:   sub    $0x40,%r8
  0x00007fa5c5042740:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+672 0x00007fa5c50425c0
  0x00007fa5c5042745:   add    $0x30,%rsp
  0x00007fa5c5042749:   cmp    $0x0,%r8
  0x00007fa5c504274d:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007fa5c5042ae1
  0x00007fa5c5042753:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007fa5c504275b:   vpshufb 0x9a22edc(%rip),%xmm3,%xmm3        # 0x00007fa5cea65640
  0x00007fa5c5042764:   vmovdqu 0xc0(%rdx),%xmm4
  0x00007fa5c504276c:   vpshufb 0x9a22ecb(%rip),%xmm4,%xmm4        # 0x00007fa5cea65640
  0x00007fa5c5042775:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c5042780:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fa5c5042785:   vmovdqa %xmm0,%xmm2
  0x00007fa5c5042789:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007fa5c504278d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007fa5c5042792:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007fa5c5042797:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007fa5c504279c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007fa5c50427a1:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007fa5c50427a6:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007fa5c50427ab:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007fa5c50427b0:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007fa5c50427b5:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007fa5c50427ba:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fa5c50427bf:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007fa5c50427c4:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007fa5c50427c9:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c50427cd:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fa5c50427d2:   vmovdqa %xmm2,%xmm1
  0x00007fa5c50427d6:   add    $0x10,%rax
  0x00007fa5c50427da:   sub    $0x10,%r8
  0x00007fa5c50427de:   jne    Stub::cipherBlockChaining_decryptAESCrypt+1120 0x00007fa5c5042780
  0x00007fa5c50427e0:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007fa5c5042ae1
  0x00007fa5c50427e5:   cmp    $0x40,%r8
  0x00007fa5c50427e9:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1799 0x00007fa5c5042a27
  0x00007fa5c50427ef:   sub    $0x50,%rsp
  0x00007fa5c50427f3:   vmovdqu %xmm15,(%rsp)
  0x00007fa5c50427f8:   vmovdqu 0xd0(%rdx),%xmm15
  0x00007fa5c5042800:   vpshufb 0x9a22e37(%rip),%xmm15,%xmm15        # 0x00007fa5cea65640
  0x00007fa5c5042809:   vmovdqu %xmm15,0x30(%rsp)
  0x00007fa5c504280f:   vmovdqu 0xe0(%rdx),%xmm1
  0x00007fa5c5042817:   vpshufb 0x9a22e20(%rip),%xmm1,%xmm1        # 0x00007fa5cea65640
  0x00007fa5c5042820:   vmovdqu %xmm1,0x40(%rsp)
  0x00007fa5c5042826:   vmovdqu 0xb0(%rdx),%xmm15
  0x00007fa5c504282e:   vpshufb 0x9a22e09(%rip),%xmm15,%xmm15        # 0x00007fa5cea65640
  0x00007fa5c5042837:   vmovdqu %xmm15,0x10(%rsp)
  0x00007fa5c504283d:   vmovdqu 0xc0(%rdx),%xmm1
  0x00007fa5c5042845:   vpshufb 0x9a22df2(%rip),%xmm1,%xmm1        # 0x00007fa5cea65640
  0x00007fa5c504284e:   vmovdqu %xmm1,0x20(%rsp)
  0x00007fa5c5042854:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c504285c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5042860:   cmp    $0x40,%r8
  0x00007fa5c5042864:   jl     Stub::cipherBlockChaining_decryptAESCrypt+1785 0x00007fa5c5042a19
  0x00007fa5c504286a:   vmovdqu 0x10(%rsp),%xmm15
  0x00007fa5c5042870:   vmovdqu 0x20(%rsp),%xmm1
  0x00007fa5c5042876:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fa5c504287b:   vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007fa5c5042881:   vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007fa5c5042887:   vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007fa5c504288d:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007fa5c5042891:   vpxor  %xmm5,%xmm2,%xmm2
  0x00007fa5c5042895:   vpxor  %xmm5,%xmm3,%xmm3
  0x00007fa5c5042899:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007fa5c504289d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007fa5c50428a2:   vaesdec %xmm6,%xmm2,%xmm2
  0x00007fa5c50428a7:   vaesdec %xmm6,%xmm3,%xmm3
  0x00007fa5c50428ac:   vaesdec %xmm6,%xmm4,%xmm4
  0x00007fa5c50428b1:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007fa5c50428b6:   vaesdec %xmm7,%xmm2,%xmm2
  0x00007fa5c50428bb:   vaesdec %xmm7,%xmm3,%xmm3
  0x00007fa5c50428c0:   vaesdec %xmm7,%xmm4,%xmm4
  0x00007fa5c50428c5:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007fa5c50428ca:   vaesdec %xmm8,%xmm2,%xmm2
  0x00007fa5c50428cf:   vaesdec %xmm8,%xmm3,%xmm3
  0x00007fa5c50428d4:   vaesdec %xmm8,%xmm4,%xmm4
  0x00007fa5c50428d9:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007fa5c50428de:   vaesdec %xmm9,%xmm2,%xmm2
  0x00007fa5c50428e3:   vaesdec %xmm9,%xmm3,%xmm3
  0x00007fa5c50428e8:   vaesdec %xmm9,%xmm4,%xmm4
  0x00007fa5c50428ed:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007fa5c50428f2:   vaesdec %xmm10,%xmm2,%xmm2
  0x00007fa5c50428f7:   vaesdec %xmm10,%xmm3,%xmm3
  0x00007fa5c50428fc:   vaesdec %xmm10,%xmm4,%xmm4
  0x00007fa5c5042901:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007fa5c5042906:   vaesdec %xmm11,%xmm2,%xmm2
  0x00007fa5c504290b:   vaesdec %xmm11,%xmm3,%xmm3
  0x00007fa5c5042910:   vaesdec %xmm11,%xmm4,%xmm4
  0x00007fa5c5042915:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007fa5c504291a:   vaesdec %xmm12,%xmm2,%xmm2
  0x00007fa5c504291f:   vaesdec %xmm12,%xmm3,%xmm3
  0x00007fa5c5042924:   vaesdec %xmm12,%xmm4,%xmm4
  0x00007fa5c5042929:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007fa5c504292e:   vaesdec %xmm13,%xmm2,%xmm2
  0x00007fa5c5042933:   vaesdec %xmm13,%xmm3,%xmm3
  0x00007fa5c5042938:   vaesdec %xmm13,%xmm4,%xmm4
  0x00007fa5c504293d:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007fa5c5042942:   vaesdec %xmm14,%xmm2,%xmm2
  0x00007fa5c5042947:   vaesdec %xmm14,%xmm3,%xmm3
  0x00007fa5c504294c:   vaesdec %xmm14,%xmm4,%xmm4
  0x00007fa5c5042951:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007fa5c5042956:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007fa5c504295b:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007fa5c5042960:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007fa5c5042965:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007fa5c504296a:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007fa5c504296f:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007fa5c5042974:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007fa5c5042979:   vmovdqu 0x30(%rsp),%xmm15
  0x00007fa5c504297f:   vmovdqu 0x40(%rsp),%xmm1
  0x00007fa5c5042985:   vaesdec %xmm15,%xmm0,%xmm0
  0x00007fa5c504298a:   vaesdec %xmm15,%xmm2,%xmm2
  0x00007fa5c504298f:   vaesdec %xmm15,%xmm3,%xmm3
  0x00007fa5c5042994:   vaesdec %xmm15,%xmm4,%xmm4
  0x00007fa5c5042999:   vmovdqu (%rsp),%xmm15
  0x00007fa5c504299e:   vaesdec %xmm1,%xmm0,%xmm0
  0x00007fa5c50429a3:   vaesdec %xmm1,%xmm2,%xmm2
  0x00007fa5c50429a8:   vaesdec %xmm1,%xmm3,%xmm3
  0x00007fa5c50429ad:   vaesdec %xmm1,%xmm4,%xmm4
  0x00007fa5c50429b2:   vmovdqu (%rcx),%xmm1
  0x00007fa5c50429b6:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007fa5c50429bb:   vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007fa5c50429c0:   vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007fa5c50429c5:   vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007fa5c50429ca:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c50429ce:   vmovdqu (%rdi,%rax,1),%xmm1
  0x00007fa5c50429d3:   vpxor  %xmm1,%xmm2,%xmm2
  0x00007fa5c50429d7:   vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007fa5c50429dd:   vpxor  %xmm1,%xmm3,%xmm3
  0x00007fa5c50429e1:   vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007fa5c50429e7:   vpxor  %xmm1,%xmm4,%xmm4
  0x00007fa5c50429eb:   vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007fa5c50429f1:   vmovdqu %xmm1,(%rcx)
  0x00007fa5c50429f5:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fa5c50429fa:   vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007fa5c5042a00:   vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007fa5c5042a06:   vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007fa5c5042a0c:   add    $0x40,%rax
  0x00007fa5c5042a10:   sub    $0x40,%r8
  0x00007fa5c5042a14:   jmpq   Stub::cipherBlockChaining_decryptAESCrypt+1344 0x00007fa5c5042860
  0x00007fa5c5042a19:   add    $0x50,%rsp
  0x00007fa5c5042a1d:   cmp    $0x0,%r8
  0x00007fa5c5042a21:   je     Stub::cipherBlockChaining_decryptAESCrypt+1985 0x00007fa5c5042ae1
  0x00007fa5c5042a27:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007fa5c5042a2f:   vpshufb 0x9a22c08(%rip),%xmm3,%xmm3        # 0x00007fa5cea65640
  0x00007fa5c5042a38:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c5042a40:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fa5c5042a45:   vmovdqa %xmm0,%xmm2
  0x00007fa5c5042a49:   vpxor  %xmm5,%xmm0,%xmm0
  0x00007fa5c5042a4d:   vaesdec %xmm6,%xmm0,%xmm0
  0x00007fa5c5042a52:   vaesdec %xmm7,%xmm0,%xmm0
  0x00007fa5c5042a57:   vaesdec %xmm8,%xmm0,%xmm0
  0x00007fa5c5042a5c:   vaesdec %xmm9,%xmm0,%xmm0
  0x00007fa5c5042a61:   vaesdec %xmm10,%xmm0,%xmm0
  0x00007fa5c5042a66:   vaesdec %xmm11,%xmm0,%xmm0
  0x00007fa5c5042a6b:   vaesdec %xmm12,%xmm0,%xmm0
  0x00007fa5c5042a70:   vaesdec %xmm13,%xmm0,%xmm0
  0x00007fa5c5042a75:   vaesdec %xmm14,%xmm0,%xmm0
  0x00007fa5c5042a7a:   vaesdec %xmm3,%xmm0,%xmm0
  0x00007fa5c5042a7f:   vmovdqu 0xc0(%rdx),%xmm4
  0x00007fa5c5042a87:   vpshufb 0x9a22bb0(%rip),%xmm4,%xmm4        # 0x00007fa5cea65640
  0x00007fa5c5042a90:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007fa5c5042a95:   vmovdqu 0xd0(%rdx),%xmm4
  0x00007fa5c5042a9d:   vpshufb 0x9a22b9a(%rip),%xmm4,%xmm4        # 0x00007fa5cea65640
  0x00007fa5c5042aa6:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007fa5c5042aab:   vmovdqu 0xe0(%rdx),%xmm4
  0x00007fa5c5042ab3:   vpshufb 0x9a22b84(%rip),%xmm4,%xmm4        # 0x00007fa5cea65640
  0x00007fa5c5042abc:   vaesdec %xmm4,%xmm0,%xmm0
  0x00007fa5c5042ac1:   vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007fa5c5042ac6:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c5042aca:   vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007fa5c5042acf:   vmovdqa %xmm2,%xmm1
  0x00007fa5c5042ad3:   add    $0x10,%rax
  0x00007fa5c5042ad7:   sub    $0x10,%r8
  0x00007fa5c5042adb:   jne    Stub::cipherBlockChaining_decryptAESCrypt+1824 0x00007fa5c5042a40
  0x00007fa5c5042ae1:   vmovdqu %xmm1,(%rcx)
  0x00007fa5c5042ae5:   pop    %rbx
  0x00007fa5c5042ae6:   pop    %rax
  0x00007fa5c5042ae7:   leaveq 
  0x00007fa5c5042ae8:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::counterMode_AESCrypt [0x00007fa5c5042b00, 0x00007fa5c5043cb9] (4537 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5042b00:   push   %rbp
  0x00007fa5c5042b01:   mov    %rsp,%rbp
  0x00007fa5c5042b04:   push   %r8
  0x00007fa5c5042b06:   mov    0x10(%rbp),%r10
  0x00007fa5c5042b0a:   mov    (%r10),%r11d
  0x00007fa5c5042b0d:   push   %rbx
  0x00007fa5c5042b0e:   vmovdqu (%rcx),%xmm2
  0x00007fa5c5042b12:   vmovdqu 0x9a22ae6(%rip),%xmm0        # 0x00007fa5cea65600
  0x00007fa5c5042b1a:   vpshufb %xmm0,%xmm2,%xmm2
  0x00007fa5c5042b1f:   movabs $0x0,%rax
  0x00007fa5c5042b29:   cmp    $0x10,%r11
  0x00007fa5c5042b2d:   jae    Stub::counterMode_AESCrypt+85 0x00007fa5c5042b55
  0x00007fa5c5042b33:   cmp    $0x0,%r8
  0x00007fa5c5042b37:   jle    Stub::counterMode_AESCrypt+85 0x00007fa5c5042b55
  0x00007fa5c5042b3d:   mov    (%r9,%r11,1),%bl
  0x00007fa5c5042b41:   xor    (%rdi,%rax,1),%bl
  0x00007fa5c5042b44:   mov    %bl,(%rsi,%rax,1)
  0x00007fa5c5042b47:   add    $0x1,%rax
  0x00007fa5c5042b4b:   add    $0x1,%r11
  0x00007fa5c5042b4f:   sub    $0x1,%r8
  0x00007fa5c5042b53:   jmp    Stub::counterMode_AESCrypt+41 0x00007fa5c5042b29
  0x00007fa5c5042b55:   mov    %r11d,(%r10)
  0x00007fa5c5042b58:   vmovdqu 0x9a22ae0(%rip),%xmm1        # 0x00007fa5cea65640
  0x00007fa5c5042b60:   mov    -0x4(%rdx),%ebx
  0x00007fa5c5042b63:   cmp    $0x34,%ebx
  0x00007fa5c5042b66:   je     Stub::counterMode_AESCrypt+1472 0x00007fa5c50430c0
  0x00007fa5c5042b6c:   cmp    $0x3c,%ebx
  0x00007fa5c5042b6f:   je     Stub::counterMode_AESCrypt+2944 0x00007fa5c5043680
  0x00007fa5c5042b75:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c5042b80:   cmp    $0x60,%r8
  0x00007fa5c5042b84:   jl     Stub::counterMode_AESCrypt+976 0x00007fa5c5042ed0
  0x00007fa5c5042b8a:   vmovdqu (%rdx),%xmm3
  0x00007fa5c5042b8e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042b93:   vmovdqa %xmm2,%xmm5
  0x00007fa5c5042b97:   vmovdqa %xmm2,%xmm6
  0x00007fa5c5042b9b:   vmovdqa %xmm2,%xmm7
  0x00007fa5c5042b9f:   vmovdqa %xmm2,%xmm8
  0x00007fa5c5042ba3:   vmovdqa %xmm2,%xmm9
  0x00007fa5c5042ba7:   vmovdqa %xmm2,%xmm10
  0x00007fa5c5042bab:   vpextrq $0x0,%xmm6,%rbx
  0x00007fa5c5042bb1:   add    $0x1,%rbx
  0x00007fa5c5042bb5:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007fa5c5042bbb:   jae    Stub::counterMode_AESCrypt+209 0x00007fa5c5042bd1
  0x00007fa5c5042bc1:   vpextrq $0x1,%xmm6,%rbx
  0x00007fa5c5042bc7:   add    $0x1,%rbx
  0x00007fa5c5042bcb:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007fa5c5042bd1:   vpextrq $0x0,%xmm7,%rbx
  0x00007fa5c5042bd7:   add    $0x2,%rbx
  0x00007fa5c5042bdb:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007fa5c5042be1:   jae    Stub::counterMode_AESCrypt+247 0x00007fa5c5042bf7
  0x00007fa5c5042be7:   vpextrq $0x1,%xmm7,%rbx
  0x00007fa5c5042bed:   add    $0x1,%rbx
  0x00007fa5c5042bf1:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007fa5c5042bf7:   vpextrq $0x0,%xmm8,%rbx
  0x00007fa5c5042bfd:   add    $0x3,%rbx
  0x00007fa5c5042c01:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007fa5c5042c07:   jae    Stub::counterMode_AESCrypt+285 0x00007fa5c5042c1d
  0x00007fa5c5042c0d:   vpextrq $0x1,%xmm8,%rbx
  0x00007fa5c5042c13:   add    $0x1,%rbx
  0x00007fa5c5042c17:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007fa5c5042c1d:   vpextrq $0x0,%xmm9,%rbx
  0x00007fa5c5042c23:   add    $0x4,%rbx
  0x00007fa5c5042c27:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007fa5c5042c2d:   jae    Stub::counterMode_AESCrypt+323 0x00007fa5c5042c43
  0x00007fa5c5042c33:   vpextrq $0x1,%xmm9,%rbx
  0x00007fa5c5042c39:   add    $0x1,%rbx
  0x00007fa5c5042c3d:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007fa5c5042c43:   vpextrq $0x0,%xmm10,%rbx
  0x00007fa5c5042c49:   add    $0x5,%rbx
  0x00007fa5c5042c4d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007fa5c5042c53:   jae    Stub::counterMode_AESCrypt+361 0x00007fa5c5042c69
  0x00007fa5c5042c59:   vpextrq $0x1,%xmm10,%rbx
  0x00007fa5c5042c5f:   add    $0x1,%rbx
  0x00007fa5c5042c63:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007fa5c5042c69:   vpextrq $0x0,%xmm2,%rbx
  0x00007fa5c5042c6f:   add    $0x6,%rbx
  0x00007fa5c5042c73:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007fa5c5042c79:   jae    Stub::counterMode_AESCrypt+399 0x00007fa5c5042c8f
  0x00007fa5c5042c7f:   vpextrq $0x1,%xmm2,%rbx
  0x00007fa5c5042c85:   add    $0x1,%rbx
  0x00007fa5c5042c89:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007fa5c5042c8f:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007fa5c5042c94:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007fa5c5042c99:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007fa5c5042c9e:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007fa5c5042ca3:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007fa5c5042ca8:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007fa5c5042cad:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007fa5c5042cb1:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007fa5c5042cb5:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007fa5c5042cb9:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007fa5c5042cbd:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007fa5c5042cc1:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007fa5c5042cc5:   vmovdqu 0x10(%rdx),%xmm4
  0x00007fa5c5042cca:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c5042ccf:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fa5c5042cd4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042cd9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c5042cde:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c5042ce3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c5042ce8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c5042ced:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c5042cf2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c5042cf7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042cfc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c5042d01:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c5042d06:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c5042d0b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c5042d10:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c5042d15:   vmovdqu 0x30(%rdx),%xmm4
  0x00007fa5c5042d1a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c5042d1f:   vmovdqu 0x40(%rdx),%xmm3
  0x00007fa5c5042d24:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042d29:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c5042d2e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c5042d33:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c5042d38:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c5042d3d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c5042d42:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c5042d47:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042d4c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c5042d51:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c5042d56:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c5042d5b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c5042d60:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c5042d65:   vmovdqu 0x50(%rdx),%xmm4
  0x00007fa5c5042d6a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c5042d6f:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fa5c5042d74:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042d79:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c5042d7e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c5042d83:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c5042d88:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c5042d8d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c5042d92:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c5042d97:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042d9c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c5042da1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c5042da6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c5042dab:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c5042db0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c5042db5:   vmovdqu 0x70(%rdx),%xmm4
  0x00007fa5c5042dba:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c5042dbf:   vmovdqu 0x80(%rdx),%xmm3
  0x00007fa5c5042dc7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042dcc:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c5042dd1:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c5042dd6:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c5042ddb:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c5042de0:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c5042de5:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c5042dea:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042def:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c5042df4:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c5042df9:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c5042dfe:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c5042e03:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c5042e08:   vmovdqu 0x90(%rdx),%xmm4
  0x00007fa5c5042e10:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c5042e15:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fa5c5042e1d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042e22:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c5042e27:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c5042e2c:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c5042e31:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c5042e36:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c5042e3b:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c5042e40:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007fa5c5042e45:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007fa5c5042e4a:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007fa5c5042e4f:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007fa5c5042e54:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007fa5c5042e59:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007fa5c5042e5e:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007fa5c5042e63:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007fa5c5042e69:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007fa5c5042e6f:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007fa5c5042e75:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007fa5c5042e7b:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007fa5c5042e81:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fa5c5042e86:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007fa5c5042e8b:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007fa5c5042e90:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007fa5c5042e95:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007fa5c5042e99:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007fa5c5042e9d:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007fa5c5042ea2:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007fa5c5042ea8:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007fa5c5042eae:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007fa5c5042eb4:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007fa5c5042eba:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007fa5c5042ec0:   add    $0x60,%rax
  0x00007fa5c5042ec4:   sub    $0x60,%r8
  0x00007fa5c5042ec8:   jmpq   Stub::counterMode_AESCrypt+128 0x00007fa5c5042b80
  0x00007fa5c5042ecd:   data16 xchg %ax,%ax
  0x00007fa5c5042ed0:   cmp    $0x0,%r8
  0x00007fa5c5042ed4:   jle    Stub::counterMode_AESCrypt+4524 0x00007fa5c5043cac
  0x00007fa5c5042eda:   vmovdqu (%rdx),%xmm3
  0x00007fa5c5042ede:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042ee3:   vmovdqa %xmm2,%xmm5
  0x00007fa5c5042ee7:   vpextrq $0x0,%xmm2,%rbx
  0x00007fa5c5042eed:   add    $0x1,%rbx
  0x00007fa5c5042ef1:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007fa5c5042ef7:   jae    Stub::counterMode_AESCrypt+1037 0x00007fa5c5042f0d
  0x00007fa5c5042efd:   vpextrq $0x1,%xmm2,%rbx
  0x00007fa5c5042f03:   add    $0x1,%rbx
  0x00007fa5c5042f07:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007fa5c5042f0d:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007fa5c5042f12:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007fa5c5042f16:   vmovdqu 0x10(%rdx),%xmm3
  0x00007fa5c5042f1b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042f20:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042f25:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fa5c5042f2a:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042f2f:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042f34:   vmovdqu 0x30(%rdx),%xmm3
  0x00007fa5c5042f39:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042f3e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042f43:   vmovdqu 0x40(%rdx),%xmm3
  0x00007fa5c5042f48:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042f4d:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042f52:   vmovdqu 0x50(%rdx),%xmm3
  0x00007fa5c5042f57:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042f5c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042f61:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fa5c5042f66:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042f6b:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042f70:   vmovdqu 0x70(%rdx),%xmm3
  0x00007fa5c5042f75:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042f7a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042f7f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007fa5c5042f87:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042f8c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042f91:   vmovdqu 0x90(%rdx),%xmm3
  0x00007fa5c5042f99:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042f9e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5042fa3:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fa5c5042fab:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5042fb0:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007fa5c5042fb5:   cmp    $0x10,%r8
  0x00007fa5c5042fb9:   jl     Stub::counterMode_AESCrypt+1243 0x00007fa5c5042fdb
  0x00007fa5c5042fbf:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007fa5c5042fc4:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fa5c5042fc9:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007fa5c5042fce:   add    $0x10,%rax
  0x00007fa5c5042fd2:   sub    $0x10,%r8
  0x00007fa5c5042fd6:   jmpq   Stub::counterMode_AESCrypt+976 0x00007fa5c5042ed0
  0x00007fa5c5042fdb:   add    %r8,%rax
  0x00007fa5c5042fde:   test   $0x8,%r8b
  0x00007fa5c5042fe2:   je     Stub::counterMode_AESCrypt+1267 0x00007fa5c5042ff3
  0x00007fa5c5042fe8:   sub    $0x8,%rax
  0x00007fa5c5042fec:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fa5c5042ff3:   test   $0x4,%r8b
  0x00007fa5c5042ff7:   je     Stub::counterMode_AESCrypt+1294 0x00007fa5c504300e
  0x00007fa5c5042ffd:   sub    $0x4,%rax
  0x00007fa5c5043001:   vpslldq $0x4,%xmm11,%xmm11
  0x00007fa5c5043007:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fa5c504300e:   test   $0x2,%r8b
  0x00007fa5c5043012:   je     Stub::counterMode_AESCrypt+1320 0x00007fa5c5043028
  0x00007fa5c5043018:   sub    $0x2,%rax
  0x00007fa5c504301c:   vpslldq $0x2,%xmm11,%xmm11
  0x00007fa5c5043022:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fa5c5043028:   test   $0x1,%r8b
  0x00007fa5c504302c:   je     Stub::counterMode_AESCrypt+1347 0x00007fa5c5043043
  0x00007fa5c5043032:   sub    $0x1,%rax
  0x00007fa5c5043036:   vpslldq $0x1,%xmm11,%xmm11
  0x00007fa5c504303c:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fa5c5043043:   vmovdqu %xmm5,(%r9)
  0x00007fa5c5043048:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fa5c504304d:   test   $0x8,%r8b
  0x00007fa5c5043051:   je     Stub::counterMode_AESCrypt+1383 0x00007fa5c5043067
  0x00007fa5c5043057:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fa5c504305e:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007fa5c5043063:   add    $0x8,%rax
  0x00007fa5c5043067:   test   $0x4,%r8b
  0x00007fa5c504306b:   je     Stub::counterMode_AESCrypt+1409 0x00007fa5c5043081
  0x00007fa5c5043071:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fa5c5043078:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007fa5c504307d:   add    $0x4,%rax
  0x00007fa5c5043081:   test   $0x2,%r8b
  0x00007fa5c5043085:   je     Stub::counterMode_AESCrypt+1435 0x00007fa5c504309b
  0x00007fa5c504308b:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fa5c5043092:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007fa5c5043097:   add    $0x2,%rax
  0x00007fa5c504309b:   test   $0x1,%r8b
  0x00007fa5c504309f:   je     Stub::counterMode_AESCrypt+1452 0x00007fa5c50430ac
  0x00007fa5c50430a5:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fa5c50430ac:   mov    %r8d,(%r10)
  0x00007fa5c50430af:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007fa5c5043cac
  0x00007fa5c50430b4:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c50430bc:   data16 data16 xchg %ax,%ax
  0x00007fa5c50430c0:   cmp    $0x60,%r8
  0x00007fa5c50430c4:   jl     Stub::counterMode_AESCrypt+2416 0x00007fa5c5043470
  0x00007fa5c50430ca:   vmovdqu (%rdx),%xmm3
  0x00007fa5c50430ce:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c50430d3:   vmovdqa %xmm2,%xmm5
  0x00007fa5c50430d7:   vmovdqa %xmm2,%xmm6
  0x00007fa5c50430db:   vmovdqa %xmm2,%xmm7
  0x00007fa5c50430df:   vmovdqa %xmm2,%xmm8
  0x00007fa5c50430e3:   vmovdqa %xmm2,%xmm9
  0x00007fa5c50430e7:   vmovdqa %xmm2,%xmm10
  0x00007fa5c50430eb:   vpextrq $0x0,%xmm6,%rbx
  0x00007fa5c50430f1:   add    $0x1,%rbx
  0x00007fa5c50430f5:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007fa5c50430fb:   jae    Stub::counterMode_AESCrypt+1553 0x00007fa5c5043111
  0x00007fa5c5043101:   vpextrq $0x1,%xmm6,%rbx
  0x00007fa5c5043107:   add    $0x1,%rbx
  0x00007fa5c504310b:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007fa5c5043111:   vpextrq $0x0,%xmm7,%rbx
  0x00007fa5c5043117:   add    $0x2,%rbx
  0x00007fa5c504311b:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007fa5c5043121:   jae    Stub::counterMode_AESCrypt+1591 0x00007fa5c5043137
  0x00007fa5c5043127:   vpextrq $0x1,%xmm7,%rbx
  0x00007fa5c504312d:   add    $0x1,%rbx
  0x00007fa5c5043131:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007fa5c5043137:   vpextrq $0x0,%xmm8,%rbx
  0x00007fa5c504313d:   add    $0x3,%rbx
  0x00007fa5c5043141:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007fa5c5043147:   jae    Stub::counterMode_AESCrypt+1629 0x00007fa5c504315d
  0x00007fa5c504314d:   vpextrq $0x1,%xmm8,%rbx
  0x00007fa5c5043153:   add    $0x1,%rbx
  0x00007fa5c5043157:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007fa5c504315d:   vpextrq $0x0,%xmm9,%rbx
  0x00007fa5c5043163:   add    $0x4,%rbx
  0x00007fa5c5043167:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007fa5c504316d:   jae    Stub::counterMode_AESCrypt+1667 0x00007fa5c5043183
  0x00007fa5c5043173:   vpextrq $0x1,%xmm9,%rbx
  0x00007fa5c5043179:   add    $0x1,%rbx
  0x00007fa5c504317d:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007fa5c5043183:   vpextrq $0x0,%xmm10,%rbx
  0x00007fa5c5043189:   add    $0x5,%rbx
  0x00007fa5c504318d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007fa5c5043193:   jae    Stub::counterMode_AESCrypt+1705 0x00007fa5c50431a9
  0x00007fa5c5043199:   vpextrq $0x1,%xmm10,%rbx
  0x00007fa5c504319f:   add    $0x1,%rbx
  0x00007fa5c50431a3:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007fa5c50431a9:   vpextrq $0x0,%xmm2,%rbx
  0x00007fa5c50431af:   add    $0x6,%rbx
  0x00007fa5c50431b3:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007fa5c50431b9:   jae    Stub::counterMode_AESCrypt+1743 0x00007fa5c50431cf
  0x00007fa5c50431bf:   vpextrq $0x1,%xmm2,%rbx
  0x00007fa5c50431c5:   add    $0x1,%rbx
  0x00007fa5c50431c9:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007fa5c50431cf:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007fa5c50431d4:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007fa5c50431d9:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007fa5c50431de:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007fa5c50431e3:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007fa5c50431e8:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007fa5c50431ed:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007fa5c50431f1:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007fa5c50431f5:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007fa5c50431f9:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007fa5c50431fd:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007fa5c5043201:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007fa5c5043205:   vmovdqu 0x10(%rdx),%xmm4
  0x00007fa5c504320a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c504320f:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fa5c5043214:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043219:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c504321e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c5043223:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c5043228:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c504322d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c5043232:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c5043237:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c504323c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c5043241:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c5043246:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c504324b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c5043250:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c5043255:   vmovdqu 0x30(%rdx),%xmm4
  0x00007fa5c504325a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c504325f:   vmovdqu 0x40(%rdx),%xmm3
  0x00007fa5c5043264:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043269:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c504326e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c5043273:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c5043278:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c504327d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c5043282:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c5043287:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c504328c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c5043291:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c5043296:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c504329b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c50432a0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c50432a5:   vmovdqu 0x50(%rdx),%xmm4
  0x00007fa5c50432aa:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c50432af:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fa5c50432b4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c50432b9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c50432be:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c50432c3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c50432c8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c50432cd:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c50432d2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c50432d7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c50432dc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c50432e1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c50432e6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c50432eb:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c50432f0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c50432f5:   vmovdqu 0x70(%rdx),%xmm4
  0x00007fa5c50432fa:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c50432ff:   vmovdqu 0x80(%rdx),%xmm3
  0x00007fa5c5043307:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c504330c:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c5043311:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c5043316:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c504331b:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c5043320:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c5043325:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c504332a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c504332f:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c5043334:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c5043339:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c504333e:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c5043343:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c5043348:   vmovdqu 0x90(%rdx),%xmm4
  0x00007fa5c5043350:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c5043355:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fa5c504335d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043362:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c5043367:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c504336c:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c5043371:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c5043376:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c504337b:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c5043380:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043385:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c504338a:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c504338f:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c5043394:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c5043399:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c504339e:   vmovdqu 0xb0(%rdx),%xmm4
  0x00007fa5c50433a6:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c50433ab:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007fa5c50433b3:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c50433b8:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c50433bd:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c50433c2:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c50433c7:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c50433cc:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c50433d1:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c50433d6:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007fa5c50433db:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007fa5c50433e0:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007fa5c50433e5:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007fa5c50433ea:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007fa5c50433ef:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007fa5c50433f4:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007fa5c50433f9:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007fa5c50433ff:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007fa5c5043405:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007fa5c504340b:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007fa5c5043411:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007fa5c5043417:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fa5c504341c:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007fa5c5043421:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007fa5c5043426:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007fa5c504342b:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007fa5c504342f:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007fa5c5043433:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007fa5c5043438:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007fa5c504343e:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007fa5c5043444:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007fa5c504344a:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007fa5c5043450:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007fa5c5043456:   add    $0x60,%rax
  0x00007fa5c504345a:   sub    $0x60,%r8
  0x00007fa5c504345e:   jmpq   Stub::counterMode_AESCrypt+1472 0x00007fa5c50430c0
  0x00007fa5c5043463:   nopw   0x0(%rax,%rax,1)
  0x00007fa5c504346c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5043470:   cmp    $0x0,%r8
  0x00007fa5c5043474:   jle    Stub::counterMode_AESCrypt+4524 0x00007fa5c5043cac
  0x00007fa5c504347a:   vmovdqu (%rdx),%xmm3
  0x00007fa5c504347e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043483:   vmovdqa %xmm2,%xmm5
  0x00007fa5c5043487:   vpextrq $0x0,%xmm2,%rbx
  0x00007fa5c504348d:   add    $0x1,%rbx
  0x00007fa5c5043491:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007fa5c5043497:   jae    Stub::counterMode_AESCrypt+2477 0x00007fa5c50434ad
  0x00007fa5c504349d:   vpextrq $0x1,%xmm2,%rbx
  0x00007fa5c50434a3:   add    $0x1,%rbx
  0x00007fa5c50434a7:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007fa5c50434ad:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007fa5c50434b2:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007fa5c50434b6:   vmovdqu 0x10(%rdx),%xmm3
  0x00007fa5c50434bb:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c50434c0:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c50434c5:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fa5c50434ca:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c50434cf:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c50434d4:   vmovdqu 0x30(%rdx),%xmm3
  0x00007fa5c50434d9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c50434de:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c50434e3:   vmovdqu 0x40(%rdx),%xmm3
  0x00007fa5c50434e8:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c50434ed:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c50434f2:   vmovdqu 0x50(%rdx),%xmm3
  0x00007fa5c50434f7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c50434fc:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043501:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fa5c5043506:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c504350b:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043510:   vmovdqu 0x70(%rdx),%xmm3
  0x00007fa5c5043515:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c504351a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c504351f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007fa5c5043527:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c504352c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043531:   vmovdqu 0x90(%rdx),%xmm3
  0x00007fa5c5043539:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c504353e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043543:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fa5c504354b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043550:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043555:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007fa5c504355d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043562:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043567:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007fa5c504356f:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043574:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007fa5c5043579:   cmp    $0x10,%r8
  0x00007fa5c504357d:   jl     Stub::counterMode_AESCrypt+2719 0x00007fa5c504359f
  0x00007fa5c5043583:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007fa5c5043588:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fa5c504358d:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007fa5c5043592:   add    $0x10,%rax
  0x00007fa5c5043596:   sub    $0x10,%r8
  0x00007fa5c504359a:   jmpq   Stub::counterMode_AESCrypt+2416 0x00007fa5c5043470
  0x00007fa5c504359f:   add    %r8,%rax
  0x00007fa5c50435a2:   test   $0x8,%r8b
  0x00007fa5c50435a6:   je     Stub::counterMode_AESCrypt+2743 0x00007fa5c50435b7
  0x00007fa5c50435ac:   sub    $0x8,%rax
  0x00007fa5c50435b0:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fa5c50435b7:   test   $0x4,%r8b
  0x00007fa5c50435bb:   je     Stub::counterMode_AESCrypt+2770 0x00007fa5c50435d2
  0x00007fa5c50435c1:   sub    $0x4,%rax
  0x00007fa5c50435c5:   vpslldq $0x4,%xmm11,%xmm11
  0x00007fa5c50435cb:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fa5c50435d2:   test   $0x2,%r8b
  0x00007fa5c50435d6:   je     Stub::counterMode_AESCrypt+2796 0x00007fa5c50435ec
  0x00007fa5c50435dc:   sub    $0x2,%rax
  0x00007fa5c50435e0:   vpslldq $0x2,%xmm11,%xmm11
  0x00007fa5c50435e6:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fa5c50435ec:   test   $0x1,%r8b
  0x00007fa5c50435f0:   je     Stub::counterMode_AESCrypt+2823 0x00007fa5c5043607
  0x00007fa5c50435f6:   sub    $0x1,%rax
  0x00007fa5c50435fa:   vpslldq $0x1,%xmm11,%xmm11
  0x00007fa5c5043600:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fa5c5043607:   vmovdqu %xmm5,(%r9)
  0x00007fa5c504360c:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fa5c5043611:   test   $0x8,%r8b
  0x00007fa5c5043615:   je     Stub::counterMode_AESCrypt+2859 0x00007fa5c504362b
  0x00007fa5c504361b:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fa5c5043622:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007fa5c5043627:   add    $0x8,%rax
  0x00007fa5c504362b:   test   $0x4,%r8b
  0x00007fa5c504362f:   je     Stub::counterMode_AESCrypt+2885 0x00007fa5c5043645
  0x00007fa5c5043635:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fa5c504363c:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007fa5c5043641:   add    $0x4,%rax
  0x00007fa5c5043645:   test   $0x2,%r8b
  0x00007fa5c5043649:   je     Stub::counterMode_AESCrypt+2911 0x00007fa5c504365f
  0x00007fa5c504364f:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fa5c5043656:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007fa5c504365b:   add    $0x2,%rax
  0x00007fa5c504365f:   test   $0x1,%r8b
  0x00007fa5c5043663:   je     Stub::counterMode_AESCrypt+2928 0x00007fa5c5043670
  0x00007fa5c5043669:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fa5c5043670:   mov    %r8d,(%r10)
  0x00007fa5c5043673:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007fa5c5043cac
  0x00007fa5c5043678:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c5043680:   cmp    $0x60,%r8
  0x00007fa5c5043684:   jl     Stub::counterMode_AESCrypt+3968 0x00007fa5c5043a80
  0x00007fa5c504368a:   vmovdqu (%rdx),%xmm3
  0x00007fa5c504368e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043693:   vmovdqa %xmm2,%xmm5
  0x00007fa5c5043697:   vmovdqa %xmm2,%xmm6
  0x00007fa5c504369b:   vmovdqa %xmm2,%xmm7
  0x00007fa5c504369f:   vmovdqa %xmm2,%xmm8
  0x00007fa5c50436a3:   vmovdqa %xmm2,%xmm9
  0x00007fa5c50436a7:   vmovdqa %xmm2,%xmm10
  0x00007fa5c50436ab:   vpextrq $0x0,%xmm6,%rbx
  0x00007fa5c50436b1:   add    $0x1,%rbx
  0x00007fa5c50436b5:   vpinsrq $0x0,%rbx,%xmm6,%xmm6
  0x00007fa5c50436bb:   jae    Stub::counterMode_AESCrypt+3025 0x00007fa5c50436d1
  0x00007fa5c50436c1:   vpextrq $0x1,%xmm6,%rbx
  0x00007fa5c50436c7:   add    $0x1,%rbx
  0x00007fa5c50436cb:   vpinsrq $0x1,%rbx,%xmm6,%xmm6
  0x00007fa5c50436d1:   vpextrq $0x0,%xmm7,%rbx
  0x00007fa5c50436d7:   add    $0x2,%rbx
  0x00007fa5c50436db:   vpinsrq $0x0,%rbx,%xmm7,%xmm7
  0x00007fa5c50436e1:   jae    Stub::counterMode_AESCrypt+3063 0x00007fa5c50436f7
  0x00007fa5c50436e7:   vpextrq $0x1,%xmm7,%rbx
  0x00007fa5c50436ed:   add    $0x1,%rbx
  0x00007fa5c50436f1:   vpinsrq $0x1,%rbx,%xmm7,%xmm7
  0x00007fa5c50436f7:   vpextrq $0x0,%xmm8,%rbx
  0x00007fa5c50436fd:   add    $0x3,%rbx
  0x00007fa5c5043701:   vpinsrq $0x0,%rbx,%xmm8,%xmm8
  0x00007fa5c5043707:   jae    Stub::counterMode_AESCrypt+3101 0x00007fa5c504371d
  0x00007fa5c504370d:   vpextrq $0x1,%xmm8,%rbx
  0x00007fa5c5043713:   add    $0x1,%rbx
  0x00007fa5c5043717:   vpinsrq $0x1,%rbx,%xmm8,%xmm8
  0x00007fa5c504371d:   vpextrq $0x0,%xmm9,%rbx
  0x00007fa5c5043723:   add    $0x4,%rbx
  0x00007fa5c5043727:   vpinsrq $0x0,%rbx,%xmm9,%xmm9
  0x00007fa5c504372d:   jae    Stub::counterMode_AESCrypt+3139 0x00007fa5c5043743
  0x00007fa5c5043733:   vpextrq $0x1,%xmm9,%rbx
  0x00007fa5c5043739:   add    $0x1,%rbx
  0x00007fa5c504373d:   vpinsrq $0x1,%rbx,%xmm9,%xmm9
  0x00007fa5c5043743:   vpextrq $0x0,%xmm10,%rbx
  0x00007fa5c5043749:   add    $0x5,%rbx
  0x00007fa5c504374d:   vpinsrq $0x0,%rbx,%xmm10,%xmm10
  0x00007fa5c5043753:   jae    Stub::counterMode_AESCrypt+3177 0x00007fa5c5043769
  0x00007fa5c5043759:   vpextrq $0x1,%xmm10,%rbx
  0x00007fa5c504375f:   add    $0x1,%rbx
  0x00007fa5c5043763:   vpinsrq $0x1,%rbx,%xmm10,%xmm10
  0x00007fa5c5043769:   vpextrq $0x0,%xmm2,%rbx
  0x00007fa5c504376f:   add    $0x6,%rbx
  0x00007fa5c5043773:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007fa5c5043779:   jae    Stub::counterMode_AESCrypt+3215 0x00007fa5c504378f
  0x00007fa5c504377f:   vpextrq $0x1,%xmm2,%rbx
  0x00007fa5c5043785:   add    $0x1,%rbx
  0x00007fa5c5043789:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007fa5c504378f:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007fa5c5043794:   vpshufb %xmm0,%xmm6,%xmm6
  0x00007fa5c5043799:   vpshufb %xmm0,%xmm7,%xmm7
  0x00007fa5c504379e:   vpshufb %xmm0,%xmm8,%xmm8
  0x00007fa5c50437a3:   vpshufb %xmm0,%xmm9,%xmm9
  0x00007fa5c50437a8:   vpshufb %xmm0,%xmm10,%xmm10
  0x00007fa5c50437ad:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007fa5c50437b1:   vpxor  %xmm3,%xmm6,%xmm6
  0x00007fa5c50437b5:   vpxor  %xmm3,%xmm7,%xmm7
  0x00007fa5c50437b9:   vpxor  %xmm3,%xmm8,%xmm8
  0x00007fa5c50437bd:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007fa5c50437c1:   vpxor  %xmm3,%xmm10,%xmm10
  0x00007fa5c50437c5:   vmovdqu 0x10(%rdx),%xmm4
  0x00007fa5c50437ca:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c50437cf:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fa5c50437d4:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c50437d9:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c50437de:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c50437e3:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c50437e8:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c50437ed:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c50437f2:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c50437f7:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c50437fc:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c5043801:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c5043806:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c504380b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c5043810:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c5043815:   vmovdqu 0x30(%rdx),%xmm4
  0x00007fa5c504381a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c504381f:   vmovdqu 0x40(%rdx),%xmm3
  0x00007fa5c5043824:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043829:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c504382e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c5043833:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c5043838:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c504383d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c5043842:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c5043847:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c504384c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c5043851:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c5043856:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c504385b:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c5043860:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c5043865:   vmovdqu 0x50(%rdx),%xmm4
  0x00007fa5c504386a:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c504386f:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fa5c5043874:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043879:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c504387e:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c5043883:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c5043888:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c504388d:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c5043892:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c5043897:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c504389c:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c50438a1:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c50438a6:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c50438ab:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c50438b0:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c50438b5:   vmovdqu 0x70(%rdx),%xmm4
  0x00007fa5c50438ba:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c50438bf:   vmovdqu 0x80(%rdx),%xmm3
  0x00007fa5c50438c7:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c50438cc:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c50438d1:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c50438d6:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c50438db:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c50438e0:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c50438e5:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c50438ea:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c50438ef:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c50438f4:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c50438f9:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c50438fe:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c5043903:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c5043908:   vmovdqu 0x90(%rdx),%xmm4
  0x00007fa5c5043910:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c5043915:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fa5c504391d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043922:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c5043927:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c504392c:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c5043931:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c5043936:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c504393b:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c5043940:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043945:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c504394a:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c504394f:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c5043954:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c5043959:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c504395e:   vmovdqu 0xb0(%rdx),%xmm4
  0x00007fa5c5043966:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c504396b:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007fa5c5043973:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043978:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c504397d:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c5043982:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c5043987:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c504398c:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c5043991:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c5043996:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c504399b:   vaesenc %xmm3,%xmm6,%xmm6
  0x00007fa5c50439a0:   vaesenc %xmm3,%xmm7,%xmm7
  0x00007fa5c50439a5:   vaesenc %xmm3,%xmm8,%xmm8
  0x00007fa5c50439aa:   vaesenc %xmm3,%xmm9,%xmm9
  0x00007fa5c50439af:   vaesenc %xmm3,%xmm10,%xmm10
  0x00007fa5c50439b4:   vmovdqu 0xd0(%rdx),%xmm4
  0x00007fa5c50439bc:   vpshufb %xmm1,%xmm4,%xmm4
  0x00007fa5c50439c1:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007fa5c50439c9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c50439ce:   vaesenc %xmm4,%xmm5,%xmm5
  0x00007fa5c50439d3:   vaesenc %xmm4,%xmm6,%xmm6
  0x00007fa5c50439d8:   vaesenc %xmm4,%xmm7,%xmm7
  0x00007fa5c50439dd:   vaesenc %xmm4,%xmm8,%xmm8
  0x00007fa5c50439e2:   vaesenc %xmm4,%xmm9,%xmm9
  0x00007fa5c50439e7:   vaesenc %xmm4,%xmm10,%xmm10
  0x00007fa5c50439ec:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007fa5c50439f1:   vaesenclast %xmm3,%xmm6,%xmm6
  0x00007fa5c50439f6:   vaesenclast %xmm3,%xmm7,%xmm7
  0x00007fa5c50439fb:   vaesenclast %xmm3,%xmm8,%xmm8
  0x00007fa5c5043a00:   vaesenclast %xmm3,%xmm9,%xmm9
  0x00007fa5c5043a05:   vaesenclast %xmm3,%xmm10,%xmm10
  0x00007fa5c5043a0a:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007fa5c5043a0f:   vmovdqu 0x10(%rdi,%rax,1),%xmm12
  0x00007fa5c5043a15:   vmovdqu 0x20(%rdi,%rax,1),%xmm13
  0x00007fa5c5043a1b:   vmovdqu 0x30(%rdi,%rax,1),%xmm14
  0x00007fa5c5043a21:   vmovdqu 0x40(%rdi,%rax,1),%xmm3
  0x00007fa5c5043a27:   vmovdqu 0x50(%rdi,%rax,1),%xmm4
  0x00007fa5c5043a2d:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fa5c5043a32:   vpxor  %xmm12,%xmm6,%xmm6
  0x00007fa5c5043a37:   vpxor  %xmm13,%xmm7,%xmm7
  0x00007fa5c5043a3c:   vpxor  %xmm14,%xmm8,%xmm8
  0x00007fa5c5043a41:   vpxor  %xmm3,%xmm9,%xmm9
  0x00007fa5c5043a45:   vpxor  %xmm4,%xmm10,%xmm10
  0x00007fa5c5043a49:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007fa5c5043a4e:   vmovdqu %xmm6,0x10(%rsi,%rax,1)
  0x00007fa5c5043a54:   vmovdqu %xmm7,0x20(%rsi,%rax,1)
  0x00007fa5c5043a5a:   vmovdqu %xmm8,0x30(%rsi,%rax,1)
  0x00007fa5c5043a60:   vmovdqu %xmm9,0x40(%rsi,%rax,1)
  0x00007fa5c5043a66:   vmovdqu %xmm10,0x50(%rsi,%rax,1)
  0x00007fa5c5043a6c:   add    $0x60,%rax
  0x00007fa5c5043a70:   sub    $0x60,%r8
  0x00007fa5c5043a74:   jmpq   Stub::counterMode_AESCrypt+2944 0x00007fa5c5043680
  0x00007fa5c5043a79:   nopl   0x0(%rax)
  0x00007fa5c5043a80:   cmp    $0x0,%r8
  0x00007fa5c5043a84:   jle    Stub::counterMode_AESCrypt+4524 0x00007fa5c5043cac
  0x00007fa5c5043a8a:   vmovdqu (%rdx),%xmm3
  0x00007fa5c5043a8e:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043a93:   vmovdqa %xmm2,%xmm5
  0x00007fa5c5043a97:   vpextrq $0x0,%xmm2,%rbx
  0x00007fa5c5043a9d:   add    $0x1,%rbx
  0x00007fa5c5043aa1:   vpinsrq $0x0,%rbx,%xmm2,%xmm2
  0x00007fa5c5043aa7:   jae    Stub::counterMode_AESCrypt+4029 0x00007fa5c5043abd
  0x00007fa5c5043aad:   vpextrq $0x1,%xmm2,%rbx
  0x00007fa5c5043ab3:   add    $0x1,%rbx
  0x00007fa5c5043ab7:   vpinsrq $0x1,%rbx,%xmm2,%xmm2
  0x00007fa5c5043abd:   vpshufb %xmm0,%xmm5,%xmm5
  0x00007fa5c5043ac2:   vpxor  %xmm3,%xmm5,%xmm5
  0x00007fa5c5043ac6:   vmovdqu 0x10(%rdx),%xmm3
  0x00007fa5c5043acb:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043ad0:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043ad5:   vmovdqu 0x20(%rdx),%xmm3
  0x00007fa5c5043ada:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043adf:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043ae4:   vmovdqu 0x30(%rdx),%xmm3
  0x00007fa5c5043ae9:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043aee:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043af3:   vmovdqu 0x40(%rdx),%xmm3
  0x00007fa5c5043af8:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043afd:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043b02:   vmovdqu 0x50(%rdx),%xmm3
  0x00007fa5c5043b07:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043b0c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043b11:   vmovdqu 0x60(%rdx),%xmm3
  0x00007fa5c5043b16:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043b1b:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043b20:   vmovdqu 0x70(%rdx),%xmm3
  0x00007fa5c5043b25:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043b2a:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043b2f:   vmovdqu 0x80(%rdx),%xmm3
  0x00007fa5c5043b37:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043b3c:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043b41:   vmovdqu 0x90(%rdx),%xmm3
  0x00007fa5c5043b49:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043b4e:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043b53:   vmovdqu 0xa0(%rdx),%xmm3
  0x00007fa5c5043b5b:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043b60:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043b65:   vmovdqu 0xb0(%rdx),%xmm3
  0x00007fa5c5043b6d:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043b72:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043b77:   vmovdqu 0xc0(%rdx),%xmm3
  0x00007fa5c5043b7f:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043b84:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043b89:   vmovdqu 0xd0(%rdx),%xmm3
  0x00007fa5c5043b91:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043b96:   vaesenc %xmm3,%xmm5,%xmm5
  0x00007fa5c5043b9b:   vmovdqu 0xe0(%rdx),%xmm3
  0x00007fa5c5043ba3:   vpshufb %xmm1,%xmm3,%xmm3
  0x00007fa5c5043ba8:   vaesenclast %xmm3,%xmm5,%xmm5
  0x00007fa5c5043bad:   cmp    $0x10,%r8
  0x00007fa5c5043bb1:   jl     Stub::counterMode_AESCrypt+4307 0x00007fa5c5043bd3
  0x00007fa5c5043bb7:   vmovdqu (%rdi,%rax,1),%xmm11
  0x00007fa5c5043bbc:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fa5c5043bc1:   vmovdqu %xmm5,(%rsi,%rax,1)
  0x00007fa5c5043bc6:   add    $0x10,%rax
  0x00007fa5c5043bca:   sub    $0x10,%r8
  0x00007fa5c5043bce:   jmpq   Stub::counterMode_AESCrypt+3968 0x00007fa5c5043a80
  0x00007fa5c5043bd3:   add    %r8,%rax
  0x00007fa5c5043bd6:   test   $0x8,%r8b
  0x00007fa5c5043bda:   je     Stub::counterMode_AESCrypt+4331 0x00007fa5c5043beb
  0x00007fa5c5043be0:   sub    $0x8,%rax
  0x00007fa5c5043be4:   vpinsrq $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fa5c5043beb:   test   $0x4,%r8b
  0x00007fa5c5043bef:   je     Stub::counterMode_AESCrypt+4358 0x00007fa5c5043c06
  0x00007fa5c5043bf5:   sub    $0x4,%rax
  0x00007fa5c5043bf9:   vpslldq $0x4,%xmm11,%xmm11
  0x00007fa5c5043bff:   vpinsrd $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fa5c5043c06:   test   $0x2,%r8b
  0x00007fa5c5043c0a:   je     Stub::counterMode_AESCrypt+4384 0x00007fa5c5043c20
  0x00007fa5c5043c10:   sub    $0x2,%rax
  0x00007fa5c5043c14:   vpslldq $0x2,%xmm11,%xmm11
  0x00007fa5c5043c1a:   vpinsrw $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fa5c5043c20:   test   $0x1,%r8b
  0x00007fa5c5043c24:   je     Stub::counterMode_AESCrypt+4411 0x00007fa5c5043c3b
  0x00007fa5c5043c2a:   sub    $0x1,%rax
  0x00007fa5c5043c2e:   vpslldq $0x1,%xmm11,%xmm11
  0x00007fa5c5043c34:   vpinsrb $0x0,(%rdi,%rax,1),%xmm11,%xmm11
  0x00007fa5c5043c3b:   vmovdqu %xmm5,(%r9)
  0x00007fa5c5043c40:   vpxor  %xmm11,%xmm5,%xmm5
  0x00007fa5c5043c45:   test   $0x8,%r8b
  0x00007fa5c5043c49:   je     Stub::counterMode_AESCrypt+4447 0x00007fa5c5043c5f
  0x00007fa5c5043c4f:   vpextrq $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fa5c5043c56:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007fa5c5043c5b:   add    $0x8,%rax
  0x00007fa5c5043c5f:   test   $0x4,%r8b
  0x00007fa5c5043c63:   je     Stub::counterMode_AESCrypt+4473 0x00007fa5c5043c79
  0x00007fa5c5043c69:   vpextrd $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fa5c5043c70:   vpsrldq $0x4,%xmm5,%xmm5
  0x00007fa5c5043c75:   add    $0x4,%rax
  0x00007fa5c5043c79:   test   $0x2,%r8b
  0x00007fa5c5043c7d:   je     Stub::counterMode_AESCrypt+4499 0x00007fa5c5043c93
  0x00007fa5c5043c83:   vpextrw $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fa5c5043c8a:   vpsrldq $0x2,%xmm5,%xmm5
  0x00007fa5c5043c8f:   add    $0x2,%rax
  0x00007fa5c5043c93:   test   $0x1,%r8b
  0x00007fa5c5043c97:   je     Stub::counterMode_AESCrypt+4516 0x00007fa5c5043ca4
  0x00007fa5c5043c9d:   vpextrb $0x0,%xmm5,(%rsi,%rax,1)
  0x00007fa5c5043ca4:   mov    %r8d,(%r10)
  0x00007fa5c5043ca7:   jmpq   Stub::counterMode_AESCrypt+4524 0x00007fa5c5043cac
  0x00007fa5c5043cac:   vpshufb %xmm0,%xmm2,%xmm2
  0x00007fa5c5043cb1:   vmovdqu %xmm2,(%rcx)
  0x00007fa5c5043cb5:   pop    %rbx
  0x00007fa5c5043cb6:   pop    %rax
  0x00007fa5c5043cb7:   leaveq 
  0x00007fa5c5043cb8:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::ghash_processBlocks [0x00007fa5c5043cc0, 0x00007fa5c504414c] (1164 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5043cc0:   push   %rbp
  0x00007fa5c5043cc1:   mov    %rsp,%rbp
  0x00007fa5c5043cc4:   push   %rbx
  0x00007fa5c5043cc5:   test   %rcx,%rcx
  0x00007fa5c5043cc8:   je     Stub::ghash_processBlocks+1144 0x00007fa5c5044138
  0x00007fa5c5043cce:   vmovdqu 0x10(%rsi),%xmm5
  0x00007fa5c5043cd3:   vptest %xmm5,%xmm5
  0x00007fa5c5043cd8:   jne    Stub::ghash_processBlocks+35 0x00007fa5c5043ce3
  0x00007fa5c5043cde:   callq  Stub::ghash_processBlocks+839 0x00007fa5c5044007
  0x00007fa5c5043ce3:   vmovdqu 0x9a22985(%rip),%xmm14        # 0x00007fa5cea66670
  0x00007fa5c5043ceb:   vmovdqu (%rdi),%xmm0
  0x00007fa5c5043cef:   vpshufb %xmm14,%xmm0,%xmm0
  0x00007fa5c5043cf4:   cmp    $0x8,%ecx
  0x00007fa5c5043cf7:   jb     Stub::ghash_processBlocks+648 0x00007fa5c5043f48
  0x00007fa5c5043cfd:   vmovdqu 0x80(%rsi),%xmm5
  0x00007fa5c5043d05:   vptest %xmm5,%xmm5
  0x00007fa5c5043d0a:   jne    Stub::ghash_processBlocks+85 0x00007fa5c5043d15
  0x00007fa5c5043d10:   callq  Stub::ghash_processBlocks+932 0x00007fa5c5044064
  0x00007fa5c5043d15:   sub    $0x8,%ecx
  0x00007fa5c5043d18:   vmovdqu 0x9a22940(%rip),%xmm2        # 0x00007fa5cea66660
  0x00007fa5c5043d20:   vmovdqu 0x70(%rdx),%xmm1
  0x00007fa5c5043d25:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fa5c5043d2a:   vmovdqu 0x10(%rsi),%xmm15
  0x00007fa5c5043d2f:   vpclmulhqlqdq %xmm15,%xmm1,%xmm5
  0x00007fa5c5043d35:   vpclmullqlqdq %xmm15,%xmm1,%xmm3
  0x00007fa5c5043d3b:   vpclmulhqhqdq %xmm15,%xmm1,%xmm4
  0x00007fa5c5043d41:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043d47:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043d4b:   vmovdqu 0x60(%rdx),%xmm1
  0x00007fa5c5043d50:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fa5c5043d55:   vmovdqu 0x20(%rsi),%xmm15
  0x00007fa5c5043d5a:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043d60:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043d64:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043d6a:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fa5c5043d6e:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043d74:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fa5c5043d78:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043d7e:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043d82:   vmovdqu 0x50(%rdx),%xmm1
  0x00007fa5c5043d87:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fa5c5043d8c:   vmovdqu 0x30(%rsi),%xmm15
  0x00007fa5c5043d91:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043d97:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043d9b:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043da1:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fa5c5043da5:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043dab:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fa5c5043daf:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043db5:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043db9:   vmovdqu 0x40(%rdx),%xmm1
  0x00007fa5c5043dbe:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fa5c5043dc3:   vmovdqu 0x40(%rsi),%xmm15
  0x00007fa5c5043dc8:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043dce:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043dd2:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043dd8:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fa5c5043ddc:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043de2:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fa5c5043de6:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043dec:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043df0:   vmovdqu 0x30(%rdx),%xmm1
  0x00007fa5c5043df5:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fa5c5043dfa:   vmovdqu 0x50(%rsi),%xmm15
  0x00007fa5c5043dff:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043e05:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043e09:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043e0f:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fa5c5043e13:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043e19:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fa5c5043e1d:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043e23:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043e27:   vmovdqu 0x20(%rdx),%xmm1
  0x00007fa5c5043e2c:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fa5c5043e31:   vmovdqu 0x60(%rsi),%xmm15
  0x00007fa5c5043e36:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043e3c:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043e40:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043e46:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fa5c5043e4a:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043e50:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fa5c5043e54:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043e5a:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043e5e:   vmovdqu 0x10(%rdx),%xmm1
  0x00007fa5c5043e63:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fa5c5043e68:   vmovdqu 0x70(%rsi),%xmm15
  0x00007fa5c5043e6d:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043e73:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043e77:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043e7d:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fa5c5043e81:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043e87:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fa5c5043e8b:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043e91:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043e95:   vmovdqu (%rdx),%xmm1
  0x00007fa5c5043e99:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fa5c5043e9e:   vpxor  %xmm0,%xmm1,%xmm1
  0x00007fa5c5043ea2:   vmovdqu 0x80(%rsi),%xmm15
  0x00007fa5c5043eaa:   vpclmulhqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043eb0:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043eb4:   vpclmullqlqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043eba:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fa5c5043ebe:   vpclmulhqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043ec4:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fa5c5043ec8:   vpclmullqhqdq %xmm15,%xmm1,%xmm6
  0x00007fa5c5043ece:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043ed2:   vpslldq $0x8,%xmm5,%xmm6
  0x00007fa5c5043ed7:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007fa5c5043edc:   vpxor  %xmm6,%xmm3,%xmm3
  0x00007fa5c5043ee0:   vpxor  %xmm5,%xmm4,%xmm4
  0x00007fa5c5043ee4:   vpslld $0x1f,%xmm3,%xmm8
  0x00007fa5c5043ee9:   vpslld $0x1e,%xmm3,%xmm9
  0x00007fa5c5043eee:   vpslld $0x19,%xmm3,%xmm10
  0x00007fa5c5043ef3:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007fa5c5043ef8:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007fa5c5043efd:   vpslldq $0xc,%xmm8,%xmm9
  0x00007fa5c5043f03:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007fa5c5043f09:   vpxor  %xmm9,%xmm3,%xmm3
  0x00007fa5c5043f0e:   vpsrld $0x1,%xmm3,%xmm9
  0x00007fa5c5043f13:   vpsrld $0x2,%xmm3,%xmm10
  0x00007fa5c5043f18:   vpsrld $0x7,%xmm3,%xmm5
  0x00007fa5c5043f1d:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007fa5c5043f22:   vpxor  %xmm5,%xmm9,%xmm9
  0x00007fa5c5043f26:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007fa5c5043f2b:   vpxor  %xmm3,%xmm9,%xmm3
  0x00007fa5c5043f2f:   vpxor  %xmm4,%xmm3,%xmm0
  0x00007fa5c5043f33:   lea    0x80(%rdx),%rdx
  0x00007fa5c5043f3a:   cmp    $0x8,%ecx
  0x00007fa5c5043f3d:   jb     Stub::ghash_processBlocks+648 0x00007fa5c5043f48
  0x00007fa5c5043f43:   jmpq   Stub::ghash_processBlocks+85 0x00007fa5c5043d15
  0x00007fa5c5043f48:   vmovdqu 0x10(%rsi),%xmm3
  0x00007fa5c5043f4d:   vmovdqu 0x9a2270b(%rip),%xmm2        # 0x00007fa5cea66660
  0x00007fa5c5043f55:   cmp    $0x0,%ecx
  0x00007fa5c5043f58:   je     Stub::ghash_processBlocks+697 0x00007fa5c5043f79
  0x00007fa5c5043f5e:   sub    $0x1,%ecx
  0x00007fa5c5043f61:   vmovdqu (%rdx),%xmm1
  0x00007fa5c5043f65:   vpshufb %xmm2,%xmm1,%xmm1
  0x00007fa5c5043f6a:   vpxor  %xmm1,%xmm0,%xmm0
  0x00007fa5c5043f6e:   callq  Stub::ghash_processBlocks+711 0x00007fa5c5043f87
  0x00007fa5c5043f73:   add    $0x10,%rdx
  0x00007fa5c5043f77:   jmp    Stub::ghash_processBlocks+661 0x00007fa5c5043f55
  0x00007fa5c5043f79:   vpshufb %xmm14,%xmm0,%xmm0
  0x00007fa5c5043f7e:   vmovdqu %xmm0,(%rdi)
  0x00007fa5c5043f82:   jmpq   Stub::ghash_processBlocks+1144 0x00007fa5c5044138
  0x00007fa5c5043f87:   vpclmullqlqdq %xmm3,%xmm0,%xmm4
  0x00007fa5c5043f8d:   vpclmulhqhqdq %xmm3,%xmm0,%xmm7
  0x00007fa5c5043f93:   vpclmullqhqdq %xmm3,%xmm0,%xmm5
  0x00007fa5c5043f99:   vpclmulhqlqdq %xmm3,%xmm0,%xmm6
  0x00007fa5c5043f9f:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c5043fa3:   vpslldq $0x8,%xmm5,%xmm6
  0x00007fa5c5043fa8:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007fa5c5043fad:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fa5c5043fb1:   vpxor  %xmm5,%xmm7,%xmm7
  0x00007fa5c5043fb5:   vpslld $0x1f,%xmm4,%xmm8
  0x00007fa5c5043fba:   vpslld $0x1e,%xmm4,%xmm9
  0x00007fa5c5043fbf:   vpslld $0x19,%xmm4,%xmm10
  0x00007fa5c5043fc4:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007fa5c5043fc9:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007fa5c5043fce:   vpslldq $0xc,%xmm8,%xmm9
  0x00007fa5c5043fd4:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007fa5c5043fda:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007fa5c5043fdf:   vpsrld $0x1,%xmm4,%xmm9
  0x00007fa5c5043fe4:   vpsrld $0x2,%xmm4,%xmm10
  0x00007fa5c5043fe9:   vpsrld $0x7,%xmm4,%xmm11
  0x00007fa5c5043fee:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007fa5c5043ff3:   vpxor  %xmm11,%xmm9,%xmm9
  0x00007fa5c5043ff8:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007fa5c5043ffd:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007fa5c5044002:   vpxor  %xmm4,%xmm7,%xmm0
  0x00007fa5c5044006:   retq   
  0x00007fa5c5044007:   vmovdqu (%rsi),%xmm13
  0x00007fa5c504400b:   vmovdqu 0x9a2265d(%rip),%xmm10        # 0x00007fa5cea66670
  0x00007fa5c5044013:   vpshufb %xmm10,%xmm13,%xmm13
  0x00007fa5c5044018:   vpsrld $0x7,%xmm13,%xmm3
  0x00007fa5c504401e:   vmovdqu 0x9a2265a(%rip),%xmm4        # 0x00007fa5cea66680
  0x00007fa5c5044026:   vpshufb %xmm4,%xmm3,%xmm3
  0x00007fa5c504402b:   mov    $0xff00,%eax
  0x00007fa5c5044030:   vmovd  %eax,%xmm4
  0x00007fa5c5044034:   vpshufb %xmm3,%xmm4,%xmm4
  0x00007fa5c5044039:   vmovdqu 0x9a2260f(%rip),%xmm5        # 0x00007fa5cea66650
  0x00007fa5c5044041:   vpand  %xmm4,%xmm5,%xmm5
  0x00007fa5c5044045:   vpsrld $0x1f,%xmm13,%xmm3
  0x00007fa5c504404b:   vpslld $0x1,%xmm13,%xmm4
  0x00007fa5c5044051:   vpslldq $0x4,%xmm3,%xmm3
  0x00007fa5c5044056:   vpxor  %xmm3,%xmm4,%xmm13
  0x00007fa5c504405a:   vpxor  %xmm5,%xmm13,%xmm13
  0x00007fa5c504405e:   vmovdqu %xmm13,0x10(%rsi)
  0x00007fa5c5044063:   retq   
  0x00007fa5c5044064:   vmovdqu 0x10(%rsi),%xmm13
  0x00007fa5c5044069:   vmovdqu %xmm13,%xmm1
  0x00007fa5c504406e:   callq  Stub::ghash_processBlocks+1016 0x00007fa5c50440b8
  0x00007fa5c5044073:   vmovdqu %xmm13,0x20(%rsi)
  0x00007fa5c5044078:   callq  Stub::ghash_processBlocks+1016 0x00007fa5c50440b8
  0x00007fa5c504407d:   vmovdqu %xmm13,0x30(%rsi)
  0x00007fa5c5044082:   callq  Stub::ghash_processBlocks+1016 0x00007fa5c50440b8
  0x00007fa5c5044087:   vmovdqu %xmm13,0x40(%rsi)
  0x00007fa5c504408c:   callq  Stub::ghash_processBlocks+1016 0x00007fa5c50440b8
  0x00007fa5c5044091:   vmovdqu %xmm13,0x50(%rsi)
  0x00007fa5c5044096:   callq  Stub::ghash_processBlocks+1016 0x00007fa5c50440b8
  0x00007fa5c504409b:   vmovdqu %xmm13,0x60(%rsi)
  0x00007fa5c50440a0:   callq  Stub::ghash_processBlocks+1016 0x00007fa5c50440b8
  0x00007fa5c50440a5:   vmovdqu %xmm13,0x70(%rsi)
  0x00007fa5c50440aa:   callq  Stub::ghash_processBlocks+1016 0x00007fa5c50440b8
  0x00007fa5c50440af:   vmovdqu %xmm13,0x80(%rsi)
  0x00007fa5c50440b7:   retq   
  0x00007fa5c50440b8:   vpclmullqlqdq %xmm1,%xmm13,%xmm4
  0x00007fa5c50440be:   vpclmulhqhqdq %xmm1,%xmm13,%xmm7
  0x00007fa5c50440c4:   vpclmullqhqdq %xmm1,%xmm13,%xmm5
  0x00007fa5c50440ca:   vpclmulhqlqdq %xmm1,%xmm13,%xmm6
  0x00007fa5c50440d0:   vpxor  %xmm6,%xmm5,%xmm5
  0x00007fa5c50440d4:   vpslldq $0x8,%xmm5,%xmm6
  0x00007fa5c50440d9:   vpsrldq $0x8,%xmm5,%xmm5
  0x00007fa5c50440de:   vpxor  %xmm6,%xmm4,%xmm4
  0x00007fa5c50440e2:   vpxor  %xmm5,%xmm7,%xmm7
  0x00007fa5c50440e6:   vpslld $0x1f,%xmm4,%xmm8
  0x00007fa5c50440eb:   vpslld $0x1e,%xmm4,%xmm9
  0x00007fa5c50440f0:   vpslld $0x19,%xmm4,%xmm10
  0x00007fa5c50440f5:   vpxor  %xmm9,%xmm8,%xmm8
  0x00007fa5c50440fa:   vpxor  %xmm10,%xmm8,%xmm8
  0x00007fa5c50440ff:   vpslldq $0xc,%xmm8,%xmm9
  0x00007fa5c5044105:   vpsrldq $0x4,%xmm8,%xmm8
  0x00007fa5c504410b:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007fa5c5044110:   vpsrld $0x1,%xmm4,%xmm9
  0x00007fa5c5044115:   vpsrld $0x2,%xmm4,%xmm10
  0x00007fa5c504411a:   vpsrld $0x7,%xmm4,%xmm11
  0x00007fa5c504411f:   vpxor  %xmm10,%xmm9,%xmm9
  0x00007fa5c5044124:   vpxor  %xmm11,%xmm9,%xmm9
  0x00007fa5c5044129:   vpxor  %xmm8,%xmm9,%xmm9
  0x00007fa5c504412e:   vpxor  %xmm9,%xmm4,%xmm4
  0x00007fa5c5044133:   vpxor  %xmm4,%xmm7,%xmm13
  0x00007fa5c5044137:   retq   
  0x00007fa5c5044138:   vpxor  %xmm0,%xmm0,%xmm0
  0x00007fa5c504413c:   vpxor  %xmm1,%xmm1,%xmm1
  0x00007fa5c5044140:   vpxor  %xmm3,%xmm3,%xmm3
  0x00007fa5c5044144:   vpxor  %xmm15,%xmm15,%xmm15
  0x00007fa5c5044149:   pop    %rbx
  0x00007fa5c504414a:   leaveq 
  0x00007fa5c504414b:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::chacha20Block [0x00007fa5c5044160, 0x00007fa5c5044401] (673 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5044160:   push   %rbp
  0x00007fa5c5044161:   mov    %rsp,%rbp
  0x00007fa5c5044164:   movabs $0x7fa5cea65680,%r9
  0x00007fa5c504416e:   movabs $0x7fa5cea65740,%rax
  0x00007fa5c5044178:   vbroadcastf128 (%rdi),%ymm0
  0x00007fa5c504417d:   vbroadcastf128 0x10(%rdi),%ymm1
  0x00007fa5c5044183:   vbroadcastf128 0x20(%rdi),%ymm2
  0x00007fa5c5044189:   vbroadcastf128 0x30(%rdi),%ymm3
  0x00007fa5c504418f:   vpaddd (%rax),%ymm3,%ymm3
  0x00007fa5c5044193:   vpaddd 0x20(%rax),%ymm3,%ymm13
  0x00007fa5c5044198:   vmovdqu %ymm0,%ymm4
  0x00007fa5c504419c:   vmovdqu %ymm1,%ymm5
  0x00007fa5c50441a0:   vmovdqu %ymm2,%ymm6
  0x00007fa5c50441a4:   vmovdqu %ymm3,%ymm7
  0x00007fa5c50441a8:   vmovdqu %ymm0,%ymm8
  0x00007fa5c50441ac:   vmovdqu %ymm1,%ymm9
  0x00007fa5c50441b0:   vmovdqu %ymm2,%ymm10
  0x00007fa5c50441b4:   vmovdqu %ymm13,%ymm11
  0x00007fa5c50441b9:   vmovdqu (%r9),%ymm14
  0x00007fa5c50441be:   vmovdqu 0x20(%r9),%ymm15
  0x00007fa5c50441c4:   mov    $0xa,%r8d
  0x00007fa5c50441ca:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007fa5c50441ce:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007fa5c50441d2:   vpshufb %ymm15,%ymm7,%ymm7
  0x00007fa5c50441d7:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007fa5c50441db:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007fa5c50441df:   vpsrld $0x14,%ymm5,%ymm12
  0x00007fa5c50441e4:   vpslld $0xc,%ymm5,%ymm5
  0x00007fa5c50441e9:   vpor   %ymm12,%ymm5,%ymm5
  0x00007fa5c50441ee:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007fa5c50441f2:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007fa5c50441f6:   vpshufb %ymm14,%ymm7,%ymm7
  0x00007fa5c50441fb:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007fa5c50441ff:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007fa5c5044203:   vpsrld $0x19,%ymm5,%ymm12
  0x00007fa5c5044208:   vpslld $0x7,%ymm5,%ymm5
  0x00007fa5c504420d:   vpor   %ymm12,%ymm5,%ymm5
  0x00007fa5c5044212:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007fa5c5044217:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007fa5c504421c:   vpshufb %ymm15,%ymm11,%ymm11
  0x00007fa5c5044221:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007fa5c5044226:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007fa5c504422b:   vpsrld $0x14,%ymm9,%ymm12
  0x00007fa5c5044231:   vpslld $0xc,%ymm9,%ymm9
  0x00007fa5c5044237:   vpor   %ymm12,%ymm9,%ymm9
  0x00007fa5c504423c:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007fa5c5044241:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007fa5c5044246:   vpshufb %ymm14,%ymm11,%ymm11
  0x00007fa5c504424b:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007fa5c5044250:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007fa5c5044255:   vpsrld $0x19,%ymm9,%ymm12
  0x00007fa5c504425b:   vpslld $0x7,%ymm9,%ymm9
  0x00007fa5c5044261:   vpor   %ymm12,%ymm9,%ymm9
  0x00007fa5c5044266:   vpshufd $0x39,%ymm5,%ymm5
  0x00007fa5c504426b:   vpshufd $0x4e,%ymm6,%ymm6
  0x00007fa5c5044270:   vpshufd $0x93,%ymm7,%ymm7
  0x00007fa5c5044275:   vpshufd $0x39,%ymm9,%ymm9
  0x00007fa5c504427b:   vpshufd $0x4e,%ymm10,%ymm10
  0x00007fa5c5044281:   vpshufd $0x93,%ymm11,%ymm11
  0x00007fa5c5044287:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007fa5c504428b:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007fa5c504428f:   vpshufb %ymm15,%ymm7,%ymm7
  0x00007fa5c5044294:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007fa5c5044298:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007fa5c504429c:   vpsrld $0x14,%ymm5,%ymm12
  0x00007fa5c50442a1:   vpslld $0xc,%ymm5,%ymm5
  0x00007fa5c50442a6:   vpor   %ymm12,%ymm5,%ymm5
  0x00007fa5c50442ab:   vpaddd %ymm5,%ymm4,%ymm4
  0x00007fa5c50442af:   vpxor  %ymm4,%ymm7,%ymm7
  0x00007fa5c50442b3:   vpshufb %ymm14,%ymm7,%ymm7
  0x00007fa5c50442b8:   vpaddd %ymm7,%ymm6,%ymm6
  0x00007fa5c50442bc:   vpxor  %ymm6,%ymm5,%ymm5
  0x00007fa5c50442c0:   vpsrld $0x19,%ymm5,%ymm12
  0x00007fa5c50442c5:   vpslld $0x7,%ymm5,%ymm5
  0x00007fa5c50442ca:   vpor   %ymm12,%ymm5,%ymm5
  0x00007fa5c50442cf:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007fa5c50442d4:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007fa5c50442d9:   vpshufb %ymm15,%ymm11,%ymm11
  0x00007fa5c50442de:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007fa5c50442e3:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007fa5c50442e8:   vpsrld $0x14,%ymm9,%ymm12
  0x00007fa5c50442ee:   vpslld $0xc,%ymm9,%ymm9
  0x00007fa5c50442f4:   vpor   %ymm12,%ymm9,%ymm9
  0x00007fa5c50442f9:   vpaddd %ymm9,%ymm8,%ymm8
  0x00007fa5c50442fe:   vpxor  %ymm8,%ymm11,%ymm11
  0x00007fa5c5044303:   vpshufb %ymm14,%ymm11,%ymm11
  0x00007fa5c5044308:   vpaddd %ymm11,%ymm10,%ymm10
  0x00007fa5c504430d:   vpxor  %ymm10,%ymm9,%ymm9
  0x00007fa5c5044312:   vpsrld $0x19,%ymm9,%ymm12
  0x00007fa5c5044318:   vpslld $0x7,%ymm9,%ymm9
  0x00007fa5c504431e:   vpor   %ymm12,%ymm9,%ymm9
  0x00007fa5c5044323:   vpshufd $0x93,%ymm5,%ymm5
  0x00007fa5c5044328:   vpshufd $0x4e,%ymm6,%ymm6
  0x00007fa5c504432d:   vpshufd $0x39,%ymm7,%ymm7
  0x00007fa5c5044332:   vpshufd $0x93,%ymm9,%ymm9
  0x00007fa5c5044338:   vpshufd $0x4e,%ymm10,%ymm10
  0x00007fa5c504433e:   vpshufd $0x39,%ymm11,%ymm11
  0x00007fa5c5044344:   dec    %r8
  0x00007fa5c5044347:   jne    Stub::chacha20Block+106 0x00007fa5c50441ca
  0x00007fa5c504434d:   vpaddd %ymm0,%ymm4,%ymm4
  0x00007fa5c5044351:   vpaddd %ymm1,%ymm5,%ymm5
  0x00007fa5c5044355:   vpaddd %ymm2,%ymm6,%ymm6
  0x00007fa5c5044359:   vpaddd %ymm3,%ymm7,%ymm7
  0x00007fa5c504435d:   vpaddd %ymm0,%ymm8,%ymm8
  0x00007fa5c5044361:   vpaddd %ymm1,%ymm9,%ymm9
  0x00007fa5c5044365:   vpaddd %ymm2,%ymm10,%ymm10
  0x00007fa5c5044369:   vpaddd %ymm13,%ymm11,%ymm11
  0x00007fa5c504436e:   vextracti128 $0x0,%ymm4,(%rsi)
  0x00007fa5c5044374:   vextracti128 $0x1,%ymm4,0x40(%rsi)
  0x00007fa5c504437b:   vextracti128 $0x0,%ymm5,0x10(%rsi)
  0x00007fa5c5044382:   vextracti128 $0x1,%ymm5,0x50(%rsi)
  0x00007fa5c5044389:   vextracti128 $0x0,%ymm6,0x20(%rsi)
  0x00007fa5c5044390:   vextracti128 $0x1,%ymm6,0x60(%rsi)
  0x00007fa5c5044397:   vextracti128 $0x0,%ymm7,0x30(%rsi)
  0x00007fa5c504439e:   vextracti128 $0x1,%ymm7,0x70(%rsi)
  0x00007fa5c50443a5:   vextracti128 $0x0,%ymm8,0x80(%rsi)
  0x00007fa5c50443af:   vextracti128 $0x1,%ymm8,0xc0(%rsi)
  0x00007fa5c50443b9:   vextracti128 $0x0,%ymm9,0x90(%rsi)
  0x00007fa5c50443c3:   vextracti128 $0x1,%ymm9,0xd0(%rsi)
  0x00007fa5c50443cd:   vextracti128 $0x0,%ymm10,0xa0(%rsi)
  0x00007fa5c50443d7:   vextracti128 $0x1,%ymm10,0xe0(%rsi)
  0x00007fa5c50443e1:   vextracti128 $0x0,%ymm11,0xb0(%rsi)
  0x00007fa5c50443eb:   vextracti128 $0x1,%ymm11,0xf0(%rsi)
  0x00007fa5c50443f5:   movabs $0x100,%rax
  0x00007fa5c50443ff:   leaveq 
  0x00007fa5c5044400:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::md5_implCompress [0x00007fa5c5044420, 0x00007fa5c5044aa9] (1673 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5044420:   push   %rbp
  0x00007fa5c5044421:   mov    %rsp,%rbp
  0x00007fa5c5044424:   push   %rbx
  0x00007fa5c5044425:   push   %rdi
  0x00007fa5c5044426:   push   %rsi
  0x00007fa5c5044427:   push   %r15
  0x00007fa5c5044429:   sub    $0x10,%rsp
  0x00007fa5c504442d:   mov    %rdi,%r15
  0x00007fa5c5044430:   mov    %rsi,(%rsp)
  0x00007fa5c5044434:   mov    (%rsp),%rdi
  0x00007fa5c5044438:   mov    (%rdi),%eax
  0x00007fa5c504443a:   mov    0x4(%rdi),%ebx
  0x00007fa5c504443d:   mov    0x8(%rdi),%ecx
  0x00007fa5c5044440:   mov    0xc(%rdi),%edx
  0x00007fa5c5044443:   add    $0xd76aa478,%eax
  0x00007fa5c5044448:   mov    %ecx,%esi
  0x00007fa5c504444a:   add    (%r15),%eax
  0x00007fa5c504444d:   xor    %edx,%esi
  0x00007fa5c504444f:   and    %ebx,%esi
  0x00007fa5c5044451:   xor    %edx,%esi
  0x00007fa5c5044453:   add    %esi,%eax
  0x00007fa5c5044455:   rol    $0x7,%eax
  0x00007fa5c5044458:   add    %ebx,%eax
  0x00007fa5c504445a:   add    $0xe8c7b756,%edx
  0x00007fa5c5044460:   mov    %ebx,%esi
  0x00007fa5c5044462:   add    0x4(%r15),%edx
  0x00007fa5c5044466:   xor    %ecx,%esi
  0x00007fa5c5044468:   and    %eax,%esi
  0x00007fa5c504446a:   xor    %ecx,%esi
  0x00007fa5c504446c:   add    %esi,%edx
  0x00007fa5c504446e:   rol    $0xc,%edx
  0x00007fa5c5044471:   add    %eax,%edx
  0x00007fa5c5044473:   add    $0x242070db,%ecx
  0x00007fa5c5044479:   mov    %eax,%esi
  0x00007fa5c504447b:   add    0x8(%r15),%ecx
  0x00007fa5c504447f:   xor    %ebx,%esi
  0x00007fa5c5044481:   and    %edx,%esi
  0x00007fa5c5044483:   xor    %ebx,%esi
  0x00007fa5c5044485:   add    %esi,%ecx
  0x00007fa5c5044487:   rol    $0x11,%ecx
  0x00007fa5c504448a:   add    %edx,%ecx
  0x00007fa5c504448c:   add    $0xc1bdceee,%ebx
  0x00007fa5c5044492:   mov    %edx,%esi
  0x00007fa5c5044494:   add    0xc(%r15),%ebx
  0x00007fa5c5044498:   xor    %eax,%esi
  0x00007fa5c504449a:   and    %ecx,%esi
  0x00007fa5c504449c:   xor    %eax,%esi
  0x00007fa5c504449e:   add    %esi,%ebx
  0x00007fa5c50444a0:   rol    $0x16,%ebx
  0x00007fa5c50444a3:   add    %ecx,%ebx
  0x00007fa5c50444a5:   add    $0xf57c0faf,%eax
  0x00007fa5c50444aa:   mov    %ecx,%esi
  0x00007fa5c50444ac:   add    0x10(%r15),%eax
  0x00007fa5c50444b0:   xor    %edx,%esi
  0x00007fa5c50444b2:   and    %ebx,%esi
  0x00007fa5c50444b4:   xor    %edx,%esi
  0x00007fa5c50444b6:   add    %esi,%eax
  0x00007fa5c50444b8:   rol    $0x7,%eax
  0x00007fa5c50444bb:   add    %ebx,%eax
  0x00007fa5c50444bd:   add    $0x4787c62a,%edx
  0x00007fa5c50444c3:   mov    %ebx,%esi
  0x00007fa5c50444c5:   add    0x14(%r15),%edx
  0x00007fa5c50444c9:   xor    %ecx,%esi
  0x00007fa5c50444cb:   and    %eax,%esi
  0x00007fa5c50444cd:   xor    %ecx,%esi
  0x00007fa5c50444cf:   add    %esi,%edx
  0x00007fa5c50444d1:   rol    $0xc,%edx
  0x00007fa5c50444d4:   add    %eax,%edx
  0x00007fa5c50444d6:   add    $0xa8304613,%ecx
  0x00007fa5c50444dc:   mov    %eax,%esi
  0x00007fa5c50444de:   add    0x18(%r15),%ecx
  0x00007fa5c50444e2:   xor    %ebx,%esi
  0x00007fa5c50444e4:   and    %edx,%esi
  0x00007fa5c50444e6:   xor    %ebx,%esi
  0x00007fa5c50444e8:   add    %esi,%ecx
  0x00007fa5c50444ea:   rol    $0x11,%ecx
  0x00007fa5c50444ed:   add    %edx,%ecx
  0x00007fa5c50444ef:   add    $0xfd469501,%ebx
  0x00007fa5c50444f5:   mov    %edx,%esi
  0x00007fa5c50444f7:   add    0x1c(%r15),%ebx
  0x00007fa5c50444fb:   xor    %eax,%esi
  0x00007fa5c50444fd:   and    %ecx,%esi
  0x00007fa5c50444ff:   xor    %eax,%esi
  0x00007fa5c5044501:   add    %esi,%ebx
  0x00007fa5c5044503:   rol    $0x16,%ebx
  0x00007fa5c5044506:   add    %ecx,%ebx
  0x00007fa5c5044508:   add    $0x698098d8,%eax
  0x00007fa5c504450d:   mov    %ecx,%esi
  0x00007fa5c504450f:   add    0x20(%r15),%eax
  0x00007fa5c5044513:   xor    %edx,%esi
  0x00007fa5c5044515:   and    %ebx,%esi
  0x00007fa5c5044517:   xor    %edx,%esi
  0x00007fa5c5044519:   add    %esi,%eax
  0x00007fa5c504451b:   rol    $0x7,%eax
  0x00007fa5c504451e:   add    %ebx,%eax
  0x00007fa5c5044520:   add    $0x8b44f7af,%edx
  0x00007fa5c5044526:   mov    %ebx,%esi
  0x00007fa5c5044528:   add    0x24(%r15),%edx
  0x00007fa5c504452c:   xor    %ecx,%esi
  0x00007fa5c504452e:   and    %eax,%esi
  0x00007fa5c5044530:   xor    %ecx,%esi
  0x00007fa5c5044532:   add    %esi,%edx
  0x00007fa5c5044534:   rol    $0xc,%edx
  0x00007fa5c5044537:   add    %eax,%edx
  0x00007fa5c5044539:   add    $0xffff5bb1,%ecx
  0x00007fa5c504453f:   mov    %eax,%esi
  0x00007fa5c5044541:   add    0x28(%r15),%ecx
  0x00007fa5c5044545:   xor    %ebx,%esi
  0x00007fa5c5044547:   and    %edx,%esi
  0x00007fa5c5044549:   xor    %ebx,%esi
  0x00007fa5c504454b:   add    %esi,%ecx
  0x00007fa5c504454d:   rol    $0x11,%ecx
  0x00007fa5c5044550:   add    %edx,%ecx
  0x00007fa5c5044552:   add    $0x895cd7be,%ebx
  0x00007fa5c5044558:   mov    %edx,%esi
  0x00007fa5c504455a:   add    0x2c(%r15),%ebx
  0x00007fa5c504455e:   xor    %eax,%esi
  0x00007fa5c5044560:   and    %ecx,%esi
  0x00007fa5c5044562:   xor    %eax,%esi
  0x00007fa5c5044564:   add    %esi,%ebx
  0x00007fa5c5044566:   rol    $0x16,%ebx
  0x00007fa5c5044569:   add    %ecx,%ebx
  0x00007fa5c504456b:   add    $0x6b901122,%eax
  0x00007fa5c5044570:   mov    %ecx,%esi
  0x00007fa5c5044572:   add    0x30(%r15),%eax
  0x00007fa5c5044576:   xor    %edx,%esi
  0x00007fa5c5044578:   and    %ebx,%esi
  0x00007fa5c504457a:   xor    %edx,%esi
  0x00007fa5c504457c:   add    %esi,%eax
  0x00007fa5c504457e:   rol    $0x7,%eax
  0x00007fa5c5044581:   add    %ebx,%eax
  0x00007fa5c5044583:   add    $0xfd987193,%edx
  0x00007fa5c5044589:   mov    %ebx,%esi
  0x00007fa5c504458b:   add    0x34(%r15),%edx
  0x00007fa5c504458f:   xor    %ecx,%esi
  0x00007fa5c5044591:   and    %eax,%esi
  0x00007fa5c5044593:   xor    %ecx,%esi
  0x00007fa5c5044595:   add    %esi,%edx
  0x00007fa5c5044597:   rol    $0xc,%edx
  0x00007fa5c504459a:   add    %eax,%edx
  0x00007fa5c504459c:   add    $0xa679438e,%ecx
  0x00007fa5c50445a2:   mov    %eax,%esi
  0x00007fa5c50445a4:   add    0x38(%r15),%ecx
  0x00007fa5c50445a8:   xor    %ebx,%esi
  0x00007fa5c50445aa:   and    %edx,%esi
  0x00007fa5c50445ac:   xor    %ebx,%esi
  0x00007fa5c50445ae:   add    %esi,%ecx
  0x00007fa5c50445b0:   rol    $0x11,%ecx
  0x00007fa5c50445b3:   add    %edx,%ecx
  0x00007fa5c50445b5:   add    $0x49b40821,%ebx
  0x00007fa5c50445bb:   mov    %edx,%esi
  0x00007fa5c50445bd:   add    0x3c(%r15),%ebx
  0x00007fa5c50445c1:   xor    %eax,%esi
  0x00007fa5c50445c3:   and    %ecx,%esi
  0x00007fa5c50445c5:   xor    %eax,%esi
  0x00007fa5c50445c7:   add    %esi,%ebx
  0x00007fa5c50445c9:   rol    $0x16,%ebx
  0x00007fa5c50445cc:   add    %ecx,%ebx
  0x00007fa5c50445ce:   add    $0xf61e2562,%eax
  0x00007fa5c50445d3:   mov    %edx,%esi
  0x00007fa5c50445d5:   mov    %edx,%edi
  0x00007fa5c50445d7:   add    0x4(%r15),%eax
  0x00007fa5c50445db:   not    %esi
  0x00007fa5c50445dd:   and    %ebx,%edi
  0x00007fa5c50445df:   and    %ecx,%esi
  0x00007fa5c50445e1:   or     %edi,%esi
  0x00007fa5c50445e3:   add    %esi,%eax
  0x00007fa5c50445e5:   rol    $0x5,%eax
  0x00007fa5c50445e8:   add    %ebx,%eax
  0x00007fa5c50445ea:   add    $0xc040b340,%edx
  0x00007fa5c50445f0:   mov    %ecx,%esi
  0x00007fa5c50445f2:   mov    %ecx,%edi
  0x00007fa5c50445f4:   add    0x18(%r15),%edx
  0x00007fa5c50445f8:   not    %esi
  0x00007fa5c50445fa:   and    %eax,%edi
  0x00007fa5c50445fc:   and    %ebx,%esi
  0x00007fa5c50445fe:   or     %edi,%esi
  0x00007fa5c5044600:   add    %esi,%edx
  0x00007fa5c5044602:   rol    $0x9,%edx
  0x00007fa5c5044605:   add    %eax,%edx
  0x00007fa5c5044607:   add    $0x265e5a51,%ecx
  0x00007fa5c504460d:   mov    %ebx,%esi
  0x00007fa5c504460f:   mov    %ebx,%edi
  0x00007fa5c5044611:   add    0x2c(%r15),%ecx
  0x00007fa5c5044615:   not    %esi
  0x00007fa5c5044617:   and    %edx,%edi
  0x00007fa5c5044619:   and    %eax,%esi
  0x00007fa5c504461b:   or     %edi,%esi
  0x00007fa5c504461d:   add    %esi,%ecx
  0x00007fa5c504461f:   rol    $0xe,%ecx
  0x00007fa5c5044622:   add    %edx,%ecx
  0x00007fa5c5044624:   add    $0xe9b6c7aa,%ebx
  0x00007fa5c504462a:   mov    %eax,%esi
  0x00007fa5c504462c:   mov    %eax,%edi
  0x00007fa5c504462e:   add    (%r15),%ebx
  0x00007fa5c5044631:   not    %esi
  0x00007fa5c5044633:   and    %ecx,%edi
  0x00007fa5c5044635:   and    %edx,%esi
  0x00007fa5c5044637:   or     %edi,%esi
  0x00007fa5c5044639:   add    %esi,%ebx
  0x00007fa5c504463b:   rol    $0x14,%ebx
  0x00007fa5c504463e:   add    %ecx,%ebx
  0x00007fa5c5044640:   add    $0xd62f105d,%eax
  0x00007fa5c5044645:   mov    %edx,%esi
  0x00007fa5c5044647:   mov    %edx,%edi
  0x00007fa5c5044649:   add    0x14(%r15),%eax
  0x00007fa5c504464d:   not    %esi
  0x00007fa5c504464f:   and    %ebx,%edi
  0x00007fa5c5044651:   and    %ecx,%esi
  0x00007fa5c5044653:   or     %edi,%esi
  0x00007fa5c5044655:   add    %esi,%eax
  0x00007fa5c5044657:   rol    $0x5,%eax
  0x00007fa5c504465a:   add    %ebx,%eax
  0x00007fa5c504465c:   add    $0x2441453,%edx
  0x00007fa5c5044662:   mov    %ecx,%esi
  0x00007fa5c5044664:   mov    %ecx,%edi
  0x00007fa5c5044666:   add    0x28(%r15),%edx
  0x00007fa5c504466a:   not    %esi
  0x00007fa5c504466c:   and    %eax,%edi
  0x00007fa5c504466e:   and    %ebx,%esi
  0x00007fa5c5044670:   or     %edi,%esi
  0x00007fa5c5044672:   add    %esi,%edx
  0x00007fa5c5044674:   rol    $0x9,%edx
  0x00007fa5c5044677:   add    %eax,%edx
  0x00007fa5c5044679:   add    $0xd8a1e681,%ecx
  0x00007fa5c504467f:   mov    %ebx,%esi
  0x00007fa5c5044681:   mov    %ebx,%edi
  0x00007fa5c5044683:   add    0x3c(%r15),%ecx
  0x00007fa5c5044687:   not    %esi
  0x00007fa5c5044689:   and    %edx,%edi
  0x00007fa5c504468b:   and    %eax,%esi
  0x00007fa5c504468d:   or     %edi,%esi
  0x00007fa5c504468f:   add    %esi,%ecx
  0x00007fa5c5044691:   rol    $0xe,%ecx
  0x00007fa5c5044694:   add    %edx,%ecx
  0x00007fa5c5044696:   add    $0xe7d3fbc8,%ebx
  0x00007fa5c504469c:   mov    %eax,%esi
  0x00007fa5c504469e:   mov    %eax,%edi
  0x00007fa5c50446a0:   add    0x10(%r15),%ebx
  0x00007fa5c50446a4:   not    %esi
  0x00007fa5c50446a6:   and    %ecx,%edi
  0x00007fa5c50446a8:   and    %edx,%esi
  0x00007fa5c50446aa:   or     %edi,%esi
  0x00007fa5c50446ac:   add    %esi,%ebx
  0x00007fa5c50446ae:   rol    $0x14,%ebx
  0x00007fa5c50446b1:   add    %ecx,%ebx
  0x00007fa5c50446b3:   add    $0x21e1cde6,%eax
  0x00007fa5c50446b8:   mov    %edx,%esi
  0x00007fa5c50446ba:   mov    %edx,%edi
  0x00007fa5c50446bc:   add    0x24(%r15),%eax
  0x00007fa5c50446c0:   not    %esi
  0x00007fa5c50446c2:   and    %ebx,%edi
  0x00007fa5c50446c4:   and    %ecx,%esi
  0x00007fa5c50446c6:   or     %edi,%esi
  0x00007fa5c50446c8:   add    %esi,%eax
  0x00007fa5c50446ca:   rol    $0x5,%eax
  0x00007fa5c50446cd:   add    %ebx,%eax
  0x00007fa5c50446cf:   add    $0xc33707d6,%edx
  0x00007fa5c50446d5:   mov    %ecx,%esi
  0x00007fa5c50446d7:   mov    %ecx,%edi
  0x00007fa5c50446d9:   add    0x38(%r15),%edx
  0x00007fa5c50446dd:   not    %esi
  0x00007fa5c50446df:   and    %eax,%edi
  0x00007fa5c50446e1:   and    %ebx,%esi
  0x00007fa5c50446e3:   or     %edi,%esi
  0x00007fa5c50446e5:   add    %esi,%edx
  0x00007fa5c50446e7:   rol    $0x9,%edx
  0x00007fa5c50446ea:   add    %eax,%edx
  0x00007fa5c50446ec:   add    $0xf4d50d87,%ecx
  0x00007fa5c50446f2:   mov    %ebx,%esi
  0x00007fa5c50446f4:   mov    %ebx,%edi
  0x00007fa5c50446f6:   add    0xc(%r15),%ecx
  0x00007fa5c50446fa:   not    %esi
  0x00007fa5c50446fc:   and    %edx,%edi
  0x00007fa5c50446fe:   and    %eax,%esi
  0x00007fa5c5044700:   or     %edi,%esi
  0x00007fa5c5044702:   add    %esi,%ecx
  0x00007fa5c5044704:   rol    $0xe,%ecx
  0x00007fa5c5044707:   add    %edx,%ecx
  0x00007fa5c5044709:   add    $0x455a14ed,%ebx
  0x00007fa5c504470f:   mov    %eax,%esi
  0x00007fa5c5044711:   mov    %eax,%edi
  0x00007fa5c5044713:   add    0x20(%r15),%ebx
  0x00007fa5c5044717:   not    %esi
  0x00007fa5c5044719:   and    %ecx,%edi
  0x00007fa5c504471b:   and    %edx,%esi
  0x00007fa5c504471d:   or     %edi,%esi
  0x00007fa5c504471f:   add    %esi,%ebx
  0x00007fa5c5044721:   rol    $0x14,%ebx
  0x00007fa5c5044724:   add    %ecx,%ebx
  0x00007fa5c5044726:   add    $0xa9e3e905,%eax
  0x00007fa5c504472b:   mov    %edx,%esi
  0x00007fa5c504472d:   mov    %edx,%edi
  0x00007fa5c504472f:   add    0x34(%r15),%eax
  0x00007fa5c5044733:   not    %esi
  0x00007fa5c5044735:   and    %ebx,%edi
  0x00007fa5c5044737:   and    %ecx,%esi
  0x00007fa5c5044739:   or     %edi,%esi
  0x00007fa5c504473b:   add    %esi,%eax
  0x00007fa5c504473d:   rol    $0x5,%eax
  0x00007fa5c5044740:   add    %ebx,%eax
  0x00007fa5c5044742:   add    $0xfcefa3f8,%edx
  0x00007fa5c5044748:   mov    %ecx,%esi
  0x00007fa5c504474a:   mov    %ecx,%edi
  0x00007fa5c504474c:   add    0x8(%r15),%edx
  0x00007fa5c5044750:   not    %esi
  0x00007fa5c5044752:   and    %eax,%edi
  0x00007fa5c5044754:   and    %ebx,%esi
  0x00007fa5c5044756:   or     %edi,%esi
  0x00007fa5c5044758:   add    %esi,%edx
  0x00007fa5c504475a:   rol    $0x9,%edx
  0x00007fa5c504475d:   add    %eax,%edx
  0x00007fa5c504475f:   add    $0x676f02d9,%ecx
  0x00007fa5c5044765:   mov    %ebx,%esi
  0x00007fa5c5044767:   mov    %ebx,%edi
  0x00007fa5c5044769:   add    0x1c(%r15),%ecx
  0x00007fa5c504476d:   not    %esi
  0x00007fa5c504476f:   and    %edx,%edi
  0x00007fa5c5044771:   and    %eax,%esi
  0x00007fa5c5044773:   or     %edi,%esi
  0x00007fa5c5044775:   add    %esi,%ecx
  0x00007fa5c5044777:   rol    $0xe,%ecx
  0x00007fa5c504477a:   add    %edx,%ecx
  0x00007fa5c504477c:   add    $0x8d2a4c8a,%ebx
  0x00007fa5c5044782:   mov    %eax,%esi
  0x00007fa5c5044784:   mov    %eax,%edi
  0x00007fa5c5044786:   add    0x30(%r15),%ebx
  0x00007fa5c504478a:   not    %esi
  0x00007fa5c504478c:   and    %ecx,%edi
  0x00007fa5c504478e:   and    %edx,%esi
  0x00007fa5c5044790:   or     %edi,%esi
  0x00007fa5c5044792:   add    %esi,%ebx
  0x00007fa5c5044794:   rol    $0x14,%ebx
  0x00007fa5c5044797:   add    %ecx,%ebx
  0x00007fa5c5044799:   add    $0xfffa3942,%eax
  0x00007fa5c504479e:   mov    %ecx,%esi
  0x00007fa5c50447a0:   add    0x14(%r15),%eax
  0x00007fa5c50447a4:   xor    %edx,%esi
  0x00007fa5c50447a6:   xor    %ebx,%esi
  0x00007fa5c50447a8:   add    %esi,%eax
  0x00007fa5c50447aa:   rol    $0x4,%eax
  0x00007fa5c50447ad:   add    %ebx,%eax
  0x00007fa5c50447af:   add    $0x8771f681,%edx
  0x00007fa5c50447b5:   mov    %ebx,%esi
  0x00007fa5c50447b7:   add    0x20(%r15),%edx
  0x00007fa5c50447bb:   xor    %ecx,%esi
  0x00007fa5c50447bd:   xor    %eax,%esi
  0x00007fa5c50447bf:   add    %esi,%edx
  0x00007fa5c50447c1:   rol    $0xb,%edx
  0x00007fa5c50447c4:   add    %eax,%edx
  0x00007fa5c50447c6:   add    $0x6d9d6122,%ecx
  0x00007fa5c50447cc:   mov    %eax,%esi
  0x00007fa5c50447ce:   add    0x2c(%r15),%ecx
  0x00007fa5c50447d2:   xor    %ebx,%esi
  0x00007fa5c50447d4:   xor    %edx,%esi
  0x00007fa5c50447d6:   add    %esi,%ecx
  0x00007fa5c50447d8:   rol    $0x10,%ecx
  0x00007fa5c50447db:   add    %edx,%ecx
  0x00007fa5c50447dd:   add    $0xfde5380c,%ebx
  0x00007fa5c50447e3:   mov    %edx,%esi
  0x00007fa5c50447e5:   add    0x38(%r15),%ebx
  0x00007fa5c50447e9:   xor    %eax,%esi
  0x00007fa5c50447eb:   xor    %ecx,%esi
  0x00007fa5c50447ed:   add    %esi,%ebx
  0x00007fa5c50447ef:   rol    $0x17,%ebx
  0x00007fa5c50447f2:   add    %ecx,%ebx
  0x00007fa5c50447f4:   add    $0xa4beea44,%eax
  0x00007fa5c50447f9:   mov    %ecx,%esi
  0x00007fa5c50447fb:   add    0x4(%r15),%eax
  0x00007fa5c50447ff:   xor    %edx,%esi
  0x00007fa5c5044801:   xor    %ebx,%esi
  0x00007fa5c5044803:   add    %esi,%eax
  0x00007fa5c5044805:   rol    $0x4,%eax
  0x00007fa5c5044808:   add    %ebx,%eax
  0x00007fa5c504480a:   add    $0x4bdecfa9,%edx
  0x00007fa5c5044810:   mov    %ebx,%esi
  0x00007fa5c5044812:   add    0x10(%r15),%edx
  0x00007fa5c5044816:   xor    %ecx,%esi
  0x00007fa5c5044818:   xor    %eax,%esi
  0x00007fa5c504481a:   add    %esi,%edx
  0x00007fa5c504481c:   rol    $0xb,%edx
  0x00007fa5c504481f:   add    %eax,%edx
  0x00007fa5c5044821:   add    $0xf6bb4b60,%ecx
  0x00007fa5c5044827:   mov    %eax,%esi
  0x00007fa5c5044829:   add    0x1c(%r15),%ecx
  0x00007fa5c504482d:   xor    %ebx,%esi
  0x00007fa5c504482f:   xor    %edx,%esi
  0x00007fa5c5044831:   add    %esi,%ecx
  0x00007fa5c5044833:   rol    $0x10,%ecx
  0x00007fa5c5044836:   add    %edx,%ecx
  0x00007fa5c5044838:   add    $0xbebfbc70,%ebx
  0x00007fa5c504483e:   mov    %edx,%esi
  0x00007fa5c5044840:   add    0x28(%r15),%ebx
  0x00007fa5c5044844:   xor    %eax,%esi
  0x00007fa5c5044846:   xor    %ecx,%esi
  0x00007fa5c5044848:   add    %esi,%ebx
  0x00007fa5c504484a:   rol    $0x17,%ebx
  0x00007fa5c504484d:   add    %ecx,%ebx
  0x00007fa5c504484f:   add    $0x289b7ec6,%eax
  0x00007fa5c5044854:   mov    %ecx,%esi
  0x00007fa5c5044856:   add    0x34(%r15),%eax
  0x00007fa5c504485a:   xor    %edx,%esi
  0x00007fa5c504485c:   xor    %ebx,%esi
  0x00007fa5c504485e:   add    %esi,%eax
  0x00007fa5c5044860:   rol    $0x4,%eax
  0x00007fa5c5044863:   add    %ebx,%eax
  0x00007fa5c5044865:   add    $0xeaa127fa,%edx
  0x00007fa5c504486b:   mov    %ebx,%esi
  0x00007fa5c504486d:   add    (%r15),%edx
  0x00007fa5c5044870:   xor    %ecx,%esi
  0x00007fa5c5044872:   xor    %eax,%esi
  0x00007fa5c5044874:   add    %esi,%edx
  0x00007fa5c5044876:   rol    $0xb,%edx
  0x00007fa5c5044879:   add    %eax,%edx
  0x00007fa5c504487b:   add    $0xd4ef3085,%ecx
  0x00007fa5c5044881:   mov    %eax,%esi
  0x00007fa5c5044883:   add    0xc(%r15),%ecx
  0x00007fa5c5044887:   xor    %ebx,%esi
  0x00007fa5c5044889:   xor    %edx,%esi
  0x00007fa5c504488b:   add    %esi,%ecx
  0x00007fa5c504488d:   rol    $0x10,%ecx
  0x00007fa5c5044890:   add    %edx,%ecx
  0x00007fa5c5044892:   add    $0x4881d05,%ebx
  0x00007fa5c5044898:   mov    %edx,%esi
  0x00007fa5c504489a:   add    0x18(%r15),%ebx
  0x00007fa5c504489e:   xor    %eax,%esi
  0x00007fa5c50448a0:   xor    %ecx,%esi
  0x00007fa5c50448a2:   add    %esi,%ebx
  0x00007fa5c50448a4:   rol    $0x17,%ebx
  0x00007fa5c50448a7:   add    %ecx,%ebx
  0x00007fa5c50448a9:   add    $0xd9d4d039,%eax
  0x00007fa5c50448ae:   mov    %ecx,%esi
  0x00007fa5c50448b0:   add    0x24(%r15),%eax
  0x00007fa5c50448b4:   xor    %edx,%esi
  0x00007fa5c50448b6:   xor    %ebx,%esi
  0x00007fa5c50448b8:   add    %esi,%eax
  0x00007fa5c50448ba:   rol    $0x4,%eax
  0x00007fa5c50448bd:   add    %ebx,%eax
  0x00007fa5c50448bf:   add    $0xe6db99e5,%edx
  0x00007fa5c50448c5:   mov    %ebx,%esi
  0x00007fa5c50448c7:   add    0x30(%r15),%edx
  0x00007fa5c50448cb:   xor    %ecx,%esi
  0x00007fa5c50448cd:   xor    %eax,%esi
  0x00007fa5c50448cf:   add    %esi,%edx
  0x00007fa5c50448d1:   rol    $0xb,%edx
  0x00007fa5c50448d4:   add    %eax,%edx
  0x00007fa5c50448d6:   add    $0x1fa27cf8,%ecx
  0x00007fa5c50448dc:   mov    %eax,%esi
  0x00007fa5c50448de:   add    0x3c(%r15),%ecx
  0x00007fa5c50448e2:   xor    %ebx,%esi
  0x00007fa5c50448e4:   xor    %edx,%esi
  0x00007fa5c50448e6:   add    %esi,%ecx
  0x00007fa5c50448e8:   rol    $0x10,%ecx
  0x00007fa5c50448eb:   add    %edx,%ecx
  0x00007fa5c50448ed:   add    $0xc4ac5665,%ebx
  0x00007fa5c50448f3:   mov    %edx,%esi
  0x00007fa5c50448f5:   add    0x8(%r15),%ebx
  0x00007fa5c50448f9:   xor    %eax,%esi
  0x00007fa5c50448fb:   xor    %ecx,%esi
  0x00007fa5c50448fd:   add    %esi,%ebx
  0x00007fa5c50448ff:   rol    $0x17,%ebx
  0x00007fa5c5044902:   add    %ecx,%ebx
  0x00007fa5c5044904:   add    $0xf4292244,%eax
  0x00007fa5c5044909:   mov    %edx,%esi
  0x00007fa5c504490b:   not    %esi
  0x00007fa5c504490d:   add    (%r15),%eax
  0x00007fa5c5044910:   or     %ebx,%esi
  0x00007fa5c5044912:   xor    %ecx,%esi
  0x00007fa5c5044914:   add    %esi,%eax
  0x00007fa5c5044916:   rol    $0x6,%eax
  0x00007fa5c5044919:   add    %ebx,%eax
  0x00007fa5c504491b:   add    $0x432aff97,%edx
  0x00007fa5c5044921:   mov    %ecx,%esi
  0x00007fa5c5044923:   not    %esi
  0x00007fa5c5044925:   add    0x1c(%r15),%edx
  0x00007fa5c5044929:   or     %eax,%esi
  0x00007fa5c504492b:   xor    %ebx,%esi
  0x00007fa5c504492d:   add    %esi,%edx
  0x00007fa5c504492f:   rol    $0xa,%edx
  0x00007fa5c5044932:   add    %eax,%edx
  0x00007fa5c5044934:   add    $0xab9423a7,%ecx
  0x00007fa5c504493a:   mov    %ebx,%esi
  0x00007fa5c504493c:   not    %esi
  0x00007fa5c504493e:   add    0x38(%r15),%ecx
  0x00007fa5c5044942:   or     %edx,%esi
  0x00007fa5c5044944:   xor    %eax,%esi
  0x00007fa5c5044946:   add    %esi,%ecx
  0x00007fa5c5044948:   rol    $0xf,%ecx
  0x00007fa5c504494b:   add    %edx,%ecx
  0x00007fa5c504494d:   add    $0xfc93a039,%ebx
  0x00007fa5c5044953:   mov    %eax,%esi
  0x00007fa5c5044955:   not    %esi
  0x00007fa5c5044957:   add    0x14(%r15),%ebx
  0x00007fa5c504495b:   or     %ecx,%esi
  0x00007fa5c504495d:   xor    %edx,%esi
  0x00007fa5c504495f:   add    %esi,%ebx
  0x00007fa5c5044961:   rol    $0x15,%ebx
  0x00007fa5c5044964:   add    %ecx,%ebx
  0x00007fa5c5044966:   add    $0x655b59c3,%eax
  0x00007fa5c504496b:   mov    %edx,%esi
  0x00007fa5c504496d:   not    %esi
  0x00007fa5c504496f:   add    0x30(%r15),%eax
  0x00007fa5c5044973:   or     %ebx,%esi
  0x00007fa5c5044975:   xor    %ecx,%esi
  0x00007fa5c5044977:   add    %esi,%eax
  0x00007fa5c5044979:   rol    $0x6,%eax
  0x00007fa5c504497c:   add    %ebx,%eax
  0x00007fa5c504497e:   add    $0x8f0ccc92,%edx
  0x00007fa5c5044984:   mov    %ecx,%esi
  0x00007fa5c5044986:   not    %esi
  0x00007fa5c5044988:   add    0xc(%r15),%edx
  0x00007fa5c504498c:   or     %eax,%esi
  0x00007fa5c504498e:   xor    %ebx,%esi
  0x00007fa5c5044990:   add    %esi,%edx
  0x00007fa5c5044992:   rol    $0xa,%edx
  0x00007fa5c5044995:   add    %eax,%edx
  0x00007fa5c5044997:   add    $0xffeff47d,%ecx
  0x00007fa5c504499d:   mov    %ebx,%esi
  0x00007fa5c504499f:   not    %esi
  0x00007fa5c50449a1:   add    0x28(%r15),%ecx
  0x00007fa5c50449a5:   or     %edx,%esi
  0x00007fa5c50449a7:   xor    %eax,%esi
  0x00007fa5c50449a9:   add    %esi,%ecx
  0x00007fa5c50449ab:   rol    $0xf,%ecx
  0x00007fa5c50449ae:   add    %edx,%ecx
  0x00007fa5c50449b0:   add    $0x85845dd1,%ebx
  0x00007fa5c50449b6:   mov    %eax,%esi
  0x00007fa5c50449b8:   not    %esi
  0x00007fa5c50449ba:   add    0x4(%r15),%ebx
  0x00007fa5c50449be:   or     %ecx,%esi
  0x00007fa5c50449c0:   xor    %edx,%esi
  0x00007fa5c50449c2:   add    %esi,%ebx
  0x00007fa5c50449c4:   rol    $0x15,%ebx
  0x00007fa5c50449c7:   add    %ecx,%ebx
  0x00007fa5c50449c9:   add    $0x6fa87e4f,%eax
  0x00007fa5c50449ce:   mov    %edx,%esi
  0x00007fa5c50449d0:   not    %esi
  0x00007fa5c50449d2:   add    0x20(%r15),%eax
  0x00007fa5c50449d6:   or     %ebx,%esi
  0x00007fa5c50449d8:   xor    %ecx,%esi
  0x00007fa5c50449da:   add    %esi,%eax
  0x00007fa5c50449dc:   rol    $0x6,%eax
  0x00007fa5c50449df:   add    %ebx,%eax
  0x00007fa5c50449e1:   add    $0xfe2ce6e0,%edx
  0x00007fa5c50449e7:   mov    %ecx,%esi
  0x00007fa5c50449e9:   not    %esi
  0x00007fa5c50449eb:   add    0x3c(%r15),%edx
  0x00007fa5c50449ef:   or     %eax,%esi
  0x00007fa5c50449f1:   xor    %ebx,%esi
  0x00007fa5c50449f3:   add    %esi,%edx
  0x00007fa5c50449f5:   rol    $0xa,%edx
  0x00007fa5c50449f8:   add    %eax,%edx
  0x00007fa5c50449fa:   add    $0xa3014314,%ecx
  0x00007fa5c5044a00:   mov    %ebx,%esi
  0x00007fa5c5044a02:   not    %esi
  0x00007fa5c5044a04:   add    0x18(%r15),%ecx
  0x00007fa5c5044a08:   or     %edx,%esi
  0x00007fa5c5044a0a:   xor    %eax,%esi
  0x00007fa5c5044a0c:   add    %esi,%ecx
  0x00007fa5c5044a0e:   rol    $0xf,%ecx
  0x00007fa5c5044a11:   add    %edx,%ecx
  0x00007fa5c5044a13:   add    $0x4e0811a1,%ebx
  0x00007fa5c5044a19:   mov    %eax,%esi
  0x00007fa5c5044a1b:   not    %esi
  0x00007fa5c5044a1d:   add    0x34(%r15),%ebx
  0x00007fa5c5044a21:   or     %ecx,%esi
  0x00007fa5c5044a23:   xor    %edx,%esi
  0x00007fa5c5044a25:   add    %esi,%ebx
  0x00007fa5c5044a27:   rol    $0x15,%ebx
  0x00007fa5c5044a2a:   add    %ecx,%ebx
  0x00007fa5c5044a2c:   add    $0xf7537e82,%eax
  0x00007fa5c5044a31:   mov    %edx,%esi
  0x00007fa5c5044a33:   not    %esi
  0x00007fa5c5044a35:   add    0x10(%r15),%eax
  0x00007fa5c5044a39:   or     %ebx,%esi
  0x00007fa5c5044a3b:   xor    %ecx,%esi
  0x00007fa5c5044a3d:   add    %esi,%eax
  0x00007fa5c5044a3f:   rol    $0x6,%eax
  0x00007fa5c5044a42:   add    %ebx,%eax
  0x00007fa5c5044a44:   add    $0xbd3af235,%edx
  0x00007fa5c5044a4a:   mov    %ecx,%esi
  0x00007fa5c5044a4c:   not    %esi
  0x00007fa5c5044a4e:   add    0x2c(%r15),%edx
  0x00007fa5c5044a52:   or     %eax,%esi
  0x00007fa5c5044a54:   xor    %ebx,%esi
  0x00007fa5c5044a56:   add    %esi,%edx
  0x00007fa5c5044a58:   rol    $0xa,%edx
  0x00007fa5c5044a5b:   add    %eax,%edx
  0x00007fa5c5044a5d:   add    $0x2ad7d2bb,%ecx
  0x00007fa5c5044a63:   mov    %ebx,%esi
  0x00007fa5c5044a65:   not    %esi
  0x00007fa5c5044a67:   add    0x8(%r15),%ecx
  0x00007fa5c5044a6b:   or     %edx,%esi
  0x00007fa5c5044a6d:   xor    %eax,%esi
  0x00007fa5c5044a6f:   add    %esi,%ecx
  0x00007fa5c5044a71:   rol    $0xf,%ecx
  0x00007fa5c5044a74:   add    %edx,%ecx
  0x00007fa5c5044a76:   add    $0xeb86d391,%ebx
  0x00007fa5c5044a7c:   mov    %eax,%esi
  0x00007fa5c5044a7e:   not    %esi
  0x00007fa5c5044a80:   add    0x24(%r15),%ebx
  0x00007fa5c5044a84:   or     %ecx,%esi
  0x00007fa5c5044a86:   xor    %edx,%esi
  0x00007fa5c5044a88:   add    %esi,%ebx
  0x00007fa5c5044a8a:   rol    $0x15,%ebx
  0x00007fa5c5044a8d:   add    %ecx,%ebx
  0x00007fa5c5044a8f:   mov    (%rsp),%rdi
  0x00007fa5c5044a93:   add    %eax,(%rdi)
  0x00007fa5c5044a95:   add    %ebx,0x4(%rdi)
  0x00007fa5c5044a98:   add    %ecx,0x8(%rdi)
  0x00007fa5c5044a9b:   add    %edx,0xc(%rdi)
  0x00007fa5c5044a9e:   add    $0x10,%rsp
  0x00007fa5c5044aa2:   pop    %r15
  0x00007fa5c5044aa4:   pop    %rsi
  0x00007fa5c5044aa5:   pop    %rdi
  0x00007fa5c5044aa6:   pop    %rbx
  0x00007fa5c5044aa7:   leaveq 
  0x00007fa5c5044aa8:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::md5_implCompressMB [0x00007fa5c5044ac0, 0x00007fa5c504516b] (1707 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5044ac0:   push   %rbp
  0x00007fa5c5044ac1:   mov    %rsp,%rbp
  0x00007fa5c5044ac4:   push   %rbx
  0x00007fa5c5044ac5:   push   %rdi
  0x00007fa5c5044ac6:   push   %rsi
  0x00007fa5c5044ac7:   push   %r15
  0x00007fa5c5044ac9:   sub    $0x10,%rsp
  0x00007fa5c5044acd:   mov    %rdi,%r15
  0x00007fa5c5044ad0:   mov    %rsi,(%rsp)
  0x00007fa5c5044ad4:   mov    %edx,0x8(%rsp)
  0x00007fa5c5044ad8:   mov    %ecx,0xc(%rsp)
  0x00007fa5c5044adc:   mov    (%rsp),%rdi
  0x00007fa5c5044ae0:   mov    (%rdi),%eax
  0x00007fa5c5044ae2:   mov    0x4(%rdi),%ebx
  0x00007fa5c5044ae5:   mov    0x8(%rdi),%ecx
  0x00007fa5c5044ae8:   mov    0xc(%rdi),%edx
  0x00007fa5c5044aeb:   add    $0xd76aa478,%eax
  0x00007fa5c5044af0:   mov    %ecx,%esi
  0x00007fa5c5044af2:   add    (%r15),%eax
  0x00007fa5c5044af5:   xor    %edx,%esi
  0x00007fa5c5044af7:   and    %ebx,%esi
  0x00007fa5c5044af9:   xor    %edx,%esi
  0x00007fa5c5044afb:   add    %esi,%eax
  0x00007fa5c5044afd:   rol    $0x7,%eax
  0x00007fa5c5044b00:   add    %ebx,%eax
  0x00007fa5c5044b02:   add    $0xe8c7b756,%edx
  0x00007fa5c5044b08:   mov    %ebx,%esi
  0x00007fa5c5044b0a:   add    0x4(%r15),%edx
  0x00007fa5c5044b0e:   xor    %ecx,%esi
  0x00007fa5c5044b10:   and    %eax,%esi
  0x00007fa5c5044b12:   xor    %ecx,%esi
  0x00007fa5c5044b14:   add    %esi,%edx
  0x00007fa5c5044b16:   rol    $0xc,%edx
  0x00007fa5c5044b19:   add    %eax,%edx
  0x00007fa5c5044b1b:   add    $0x242070db,%ecx
  0x00007fa5c5044b21:   mov    %eax,%esi
  0x00007fa5c5044b23:   add    0x8(%r15),%ecx
  0x00007fa5c5044b27:   xor    %ebx,%esi
  0x00007fa5c5044b29:   and    %edx,%esi
  0x00007fa5c5044b2b:   xor    %ebx,%esi
  0x00007fa5c5044b2d:   add    %esi,%ecx
  0x00007fa5c5044b2f:   rol    $0x11,%ecx
  0x00007fa5c5044b32:   add    %edx,%ecx
  0x00007fa5c5044b34:   add    $0xc1bdceee,%ebx
  0x00007fa5c5044b3a:   mov    %edx,%esi
  0x00007fa5c5044b3c:   add    0xc(%r15),%ebx
  0x00007fa5c5044b40:   xor    %eax,%esi
  0x00007fa5c5044b42:   and    %ecx,%esi
  0x00007fa5c5044b44:   xor    %eax,%esi
  0x00007fa5c5044b46:   add    %esi,%ebx
  0x00007fa5c5044b48:   rol    $0x16,%ebx
  0x00007fa5c5044b4b:   add    %ecx,%ebx
  0x00007fa5c5044b4d:   add    $0xf57c0faf,%eax
  0x00007fa5c5044b52:   mov    %ecx,%esi
  0x00007fa5c5044b54:   add    0x10(%r15),%eax
  0x00007fa5c5044b58:   xor    %edx,%esi
  0x00007fa5c5044b5a:   and    %ebx,%esi
  0x00007fa5c5044b5c:   xor    %edx,%esi
  0x00007fa5c5044b5e:   add    %esi,%eax
  0x00007fa5c5044b60:   rol    $0x7,%eax
  0x00007fa5c5044b63:   add    %ebx,%eax
  0x00007fa5c5044b65:   add    $0x4787c62a,%edx
  0x00007fa5c5044b6b:   mov    %ebx,%esi
  0x00007fa5c5044b6d:   add    0x14(%r15),%edx
  0x00007fa5c5044b71:   xor    %ecx,%esi
  0x00007fa5c5044b73:   and    %eax,%esi
  0x00007fa5c5044b75:   xor    %ecx,%esi
  0x00007fa5c5044b77:   add    %esi,%edx
  0x00007fa5c5044b79:   rol    $0xc,%edx
  0x00007fa5c5044b7c:   add    %eax,%edx
  0x00007fa5c5044b7e:   add    $0xa8304613,%ecx
  0x00007fa5c5044b84:   mov    %eax,%esi
  0x00007fa5c5044b86:   add    0x18(%r15),%ecx
  0x00007fa5c5044b8a:   xor    %ebx,%esi
  0x00007fa5c5044b8c:   and    %edx,%esi
  0x00007fa5c5044b8e:   xor    %ebx,%esi
  0x00007fa5c5044b90:   add    %esi,%ecx
  0x00007fa5c5044b92:   rol    $0x11,%ecx
  0x00007fa5c5044b95:   add    %edx,%ecx
  0x00007fa5c5044b97:   add    $0xfd469501,%ebx
  0x00007fa5c5044b9d:   mov    %edx,%esi
  0x00007fa5c5044b9f:   add    0x1c(%r15),%ebx
  0x00007fa5c5044ba3:   xor    %eax,%esi
  0x00007fa5c5044ba5:   and    %ecx,%esi
  0x00007fa5c5044ba7:   xor    %eax,%esi
  0x00007fa5c5044ba9:   add    %esi,%ebx
  0x00007fa5c5044bab:   rol    $0x16,%ebx
  0x00007fa5c5044bae:   add    %ecx,%ebx
  0x00007fa5c5044bb0:   add    $0x698098d8,%eax
  0x00007fa5c5044bb5:   mov    %ecx,%esi
  0x00007fa5c5044bb7:   add    0x20(%r15),%eax
  0x00007fa5c5044bbb:   xor    %edx,%esi
  0x00007fa5c5044bbd:   and    %ebx,%esi
  0x00007fa5c5044bbf:   xor    %edx,%esi
  0x00007fa5c5044bc1:   add    %esi,%eax
  0x00007fa5c5044bc3:   rol    $0x7,%eax
  0x00007fa5c5044bc6:   add    %ebx,%eax
  0x00007fa5c5044bc8:   add    $0x8b44f7af,%edx
  0x00007fa5c5044bce:   mov    %ebx,%esi
  0x00007fa5c5044bd0:   add    0x24(%r15),%edx
  0x00007fa5c5044bd4:   xor    %ecx,%esi
  0x00007fa5c5044bd6:   and    %eax,%esi
  0x00007fa5c5044bd8:   xor    %ecx,%esi
  0x00007fa5c5044bda:   add    %esi,%edx
  0x00007fa5c5044bdc:   rol    $0xc,%edx
  0x00007fa5c5044bdf:   add    %eax,%edx
  0x00007fa5c5044be1:   add    $0xffff5bb1,%ecx
  0x00007fa5c5044be7:   mov    %eax,%esi
  0x00007fa5c5044be9:   add    0x28(%r15),%ecx
  0x00007fa5c5044bed:   xor    %ebx,%esi
  0x00007fa5c5044bef:   and    %edx,%esi
  0x00007fa5c5044bf1:   xor    %ebx,%esi
  0x00007fa5c5044bf3:   add    %esi,%ecx
  0x00007fa5c5044bf5:   rol    $0x11,%ecx
  0x00007fa5c5044bf8:   add    %edx,%ecx
  0x00007fa5c5044bfa:   add    $0x895cd7be,%ebx
  0x00007fa5c5044c00:   mov    %edx,%esi
  0x00007fa5c5044c02:   add    0x2c(%r15),%ebx
  0x00007fa5c5044c06:   xor    %eax,%esi
  0x00007fa5c5044c08:   and    %ecx,%esi
  0x00007fa5c5044c0a:   xor    %eax,%esi
  0x00007fa5c5044c0c:   add    %esi,%ebx
  0x00007fa5c5044c0e:   rol    $0x16,%ebx
  0x00007fa5c5044c11:   add    %ecx,%ebx
  0x00007fa5c5044c13:   add    $0x6b901122,%eax
  0x00007fa5c5044c18:   mov    %ecx,%esi
  0x00007fa5c5044c1a:   add    0x30(%r15),%eax
  0x00007fa5c5044c1e:   xor    %edx,%esi
  0x00007fa5c5044c20:   and    %ebx,%esi
  0x00007fa5c5044c22:   xor    %edx,%esi
  0x00007fa5c5044c24:   add    %esi,%eax
  0x00007fa5c5044c26:   rol    $0x7,%eax
  0x00007fa5c5044c29:   add    %ebx,%eax
  0x00007fa5c5044c2b:   add    $0xfd987193,%edx
  0x00007fa5c5044c31:   mov    %ebx,%esi
  0x00007fa5c5044c33:   add    0x34(%r15),%edx
  0x00007fa5c5044c37:   xor    %ecx,%esi
  0x00007fa5c5044c39:   and    %eax,%esi
  0x00007fa5c5044c3b:   xor    %ecx,%esi
  0x00007fa5c5044c3d:   add    %esi,%edx
  0x00007fa5c5044c3f:   rol    $0xc,%edx
  0x00007fa5c5044c42:   add    %eax,%edx
  0x00007fa5c5044c44:   add    $0xa679438e,%ecx
  0x00007fa5c5044c4a:   mov    %eax,%esi
  0x00007fa5c5044c4c:   add    0x38(%r15),%ecx
  0x00007fa5c5044c50:   xor    %ebx,%esi
  0x00007fa5c5044c52:   and    %edx,%esi
  0x00007fa5c5044c54:   xor    %ebx,%esi
  0x00007fa5c5044c56:   add    %esi,%ecx
  0x00007fa5c5044c58:   rol    $0x11,%ecx
  0x00007fa5c5044c5b:   add    %edx,%ecx
  0x00007fa5c5044c5d:   add    $0x49b40821,%ebx
  0x00007fa5c5044c63:   mov    %edx,%esi
  0x00007fa5c5044c65:   add    0x3c(%r15),%ebx
  0x00007fa5c5044c69:   xor    %eax,%esi
  0x00007fa5c5044c6b:   and    %ecx,%esi
  0x00007fa5c5044c6d:   xor    %eax,%esi
  0x00007fa5c5044c6f:   add    %esi,%ebx
  0x00007fa5c5044c71:   rol    $0x16,%ebx
  0x00007fa5c5044c74:   add    %ecx,%ebx
  0x00007fa5c5044c76:   add    $0xf61e2562,%eax
  0x00007fa5c5044c7b:   mov    %edx,%esi
  0x00007fa5c5044c7d:   mov    %edx,%edi
  0x00007fa5c5044c7f:   add    0x4(%r15),%eax
  0x00007fa5c5044c83:   not    %esi
  0x00007fa5c5044c85:   and    %ebx,%edi
  0x00007fa5c5044c87:   and    %ecx,%esi
  0x00007fa5c5044c89:   or     %edi,%esi
  0x00007fa5c5044c8b:   add    %esi,%eax
  0x00007fa5c5044c8d:   rol    $0x5,%eax
  0x00007fa5c5044c90:   add    %ebx,%eax
  0x00007fa5c5044c92:   add    $0xc040b340,%edx
  0x00007fa5c5044c98:   mov    %ecx,%esi
  0x00007fa5c5044c9a:   mov    %ecx,%edi
  0x00007fa5c5044c9c:   add    0x18(%r15),%edx
  0x00007fa5c5044ca0:   not    %esi
  0x00007fa5c5044ca2:   and    %eax,%edi
  0x00007fa5c5044ca4:   and    %ebx,%esi
  0x00007fa5c5044ca6:   or     %edi,%esi
  0x00007fa5c5044ca8:   add    %esi,%edx
  0x00007fa5c5044caa:   rol    $0x9,%edx
  0x00007fa5c5044cad:   add    %eax,%edx
  0x00007fa5c5044caf:   add    $0x265e5a51,%ecx
  0x00007fa5c5044cb5:   mov    %ebx,%esi
  0x00007fa5c5044cb7:   mov    %ebx,%edi
  0x00007fa5c5044cb9:   add    0x2c(%r15),%ecx
  0x00007fa5c5044cbd:   not    %esi
  0x00007fa5c5044cbf:   and    %edx,%edi
  0x00007fa5c5044cc1:   and    %eax,%esi
  0x00007fa5c5044cc3:   or     %edi,%esi
  0x00007fa5c5044cc5:   add    %esi,%ecx
  0x00007fa5c5044cc7:   rol    $0xe,%ecx
  0x00007fa5c5044cca:   add    %edx,%ecx
  0x00007fa5c5044ccc:   add    $0xe9b6c7aa,%ebx
  0x00007fa5c5044cd2:   mov    %eax,%esi
  0x00007fa5c5044cd4:   mov    %eax,%edi
  0x00007fa5c5044cd6:   add    (%r15),%ebx
  0x00007fa5c5044cd9:   not    %esi
  0x00007fa5c5044cdb:   and    %ecx,%edi
  0x00007fa5c5044cdd:   and    %edx,%esi
  0x00007fa5c5044cdf:   or     %edi,%esi
  0x00007fa5c5044ce1:   add    %esi,%ebx
  0x00007fa5c5044ce3:   rol    $0x14,%ebx
  0x00007fa5c5044ce6:   add    %ecx,%ebx
  0x00007fa5c5044ce8:   add    $0xd62f105d,%eax
  0x00007fa5c5044ced:   mov    %edx,%esi
  0x00007fa5c5044cef:   mov    %edx,%edi
  0x00007fa5c5044cf1:   add    0x14(%r15),%eax
  0x00007fa5c5044cf5:   not    %esi
  0x00007fa5c5044cf7:   and    %ebx,%edi
  0x00007fa5c5044cf9:   and    %ecx,%esi
  0x00007fa5c5044cfb:   or     %edi,%esi
  0x00007fa5c5044cfd:   add    %esi,%eax
  0x00007fa5c5044cff:   rol    $0x5,%eax
  0x00007fa5c5044d02:   add    %ebx,%eax
  0x00007fa5c5044d04:   add    $0x2441453,%edx
  0x00007fa5c5044d0a:   mov    %ecx,%esi
  0x00007fa5c5044d0c:   mov    %ecx,%edi
  0x00007fa5c5044d0e:   add    0x28(%r15),%edx
  0x00007fa5c5044d12:   not    %esi
  0x00007fa5c5044d14:   and    %eax,%edi
  0x00007fa5c5044d16:   and    %ebx,%esi
  0x00007fa5c5044d18:   or     %edi,%esi
  0x00007fa5c5044d1a:   add    %esi,%edx
  0x00007fa5c5044d1c:   rol    $0x9,%edx
  0x00007fa5c5044d1f:   add    %eax,%edx
  0x00007fa5c5044d21:   add    $0xd8a1e681,%ecx
  0x00007fa5c5044d27:   mov    %ebx,%esi
  0x00007fa5c5044d29:   mov    %ebx,%edi
  0x00007fa5c5044d2b:   add    0x3c(%r15),%ecx
  0x00007fa5c5044d2f:   not    %esi
  0x00007fa5c5044d31:   and    %edx,%edi
  0x00007fa5c5044d33:   and    %eax,%esi
  0x00007fa5c5044d35:   or     %edi,%esi
  0x00007fa5c5044d37:   add    %esi,%ecx
  0x00007fa5c5044d39:   rol    $0xe,%ecx
  0x00007fa5c5044d3c:   add    %edx,%ecx
  0x00007fa5c5044d3e:   add    $0xe7d3fbc8,%ebx
  0x00007fa5c5044d44:   mov    %eax,%esi
  0x00007fa5c5044d46:   mov    %eax,%edi
  0x00007fa5c5044d48:   add    0x10(%r15),%ebx
  0x00007fa5c5044d4c:   not    %esi
  0x00007fa5c5044d4e:   and    %ecx,%edi
  0x00007fa5c5044d50:   and    %edx,%esi
  0x00007fa5c5044d52:   or     %edi,%esi
  0x00007fa5c5044d54:   add    %esi,%ebx
  0x00007fa5c5044d56:   rol    $0x14,%ebx
  0x00007fa5c5044d59:   add    %ecx,%ebx
  0x00007fa5c5044d5b:   add    $0x21e1cde6,%eax
  0x00007fa5c5044d60:   mov    %edx,%esi
  0x00007fa5c5044d62:   mov    %edx,%edi
  0x00007fa5c5044d64:   add    0x24(%r15),%eax
  0x00007fa5c5044d68:   not    %esi
  0x00007fa5c5044d6a:   and    %ebx,%edi
  0x00007fa5c5044d6c:   and    %ecx,%esi
  0x00007fa5c5044d6e:   or     %edi,%esi
  0x00007fa5c5044d70:   add    %esi,%eax
  0x00007fa5c5044d72:   rol    $0x5,%eax
  0x00007fa5c5044d75:   add    %ebx,%eax
  0x00007fa5c5044d77:   add    $0xc33707d6,%edx
  0x00007fa5c5044d7d:   mov    %ecx,%esi
  0x00007fa5c5044d7f:   mov    %ecx,%edi
  0x00007fa5c5044d81:   add    0x38(%r15),%edx
  0x00007fa5c5044d85:   not    %esi
  0x00007fa5c5044d87:   and    %eax,%edi
  0x00007fa5c5044d89:   and    %ebx,%esi
  0x00007fa5c5044d8b:   or     %edi,%esi
  0x00007fa5c5044d8d:   add    %esi,%edx
  0x00007fa5c5044d8f:   rol    $0x9,%edx
  0x00007fa5c5044d92:   add    %eax,%edx
  0x00007fa5c5044d94:   add    $0xf4d50d87,%ecx
  0x00007fa5c5044d9a:   mov    %ebx,%esi
  0x00007fa5c5044d9c:   mov    %ebx,%edi
  0x00007fa5c5044d9e:   add    0xc(%r15),%ecx
  0x00007fa5c5044da2:   not    %esi
  0x00007fa5c5044da4:   and    %edx,%edi
  0x00007fa5c5044da6:   and    %eax,%esi
  0x00007fa5c5044da8:   or     %edi,%esi
  0x00007fa5c5044daa:   add    %esi,%ecx
  0x00007fa5c5044dac:   rol    $0xe,%ecx
  0x00007fa5c5044daf:   add    %edx,%ecx
  0x00007fa5c5044db1:   add    $0x455a14ed,%ebx
  0x00007fa5c5044db7:   mov    %eax,%esi
  0x00007fa5c5044db9:   mov    %eax,%edi
  0x00007fa5c5044dbb:   add    0x20(%r15),%ebx
  0x00007fa5c5044dbf:   not    %esi
  0x00007fa5c5044dc1:   and    %ecx,%edi
  0x00007fa5c5044dc3:   and    %edx,%esi
  0x00007fa5c5044dc5:   or     %edi,%esi
  0x00007fa5c5044dc7:   add    %esi,%ebx
  0x00007fa5c5044dc9:   rol    $0x14,%ebx
  0x00007fa5c5044dcc:   add    %ecx,%ebx
  0x00007fa5c5044dce:   add    $0xa9e3e905,%eax
  0x00007fa5c5044dd3:   mov    %edx,%esi
  0x00007fa5c5044dd5:   mov    %edx,%edi
  0x00007fa5c5044dd7:   add    0x34(%r15),%eax
  0x00007fa5c5044ddb:   not    %esi
  0x00007fa5c5044ddd:   and    %ebx,%edi
  0x00007fa5c5044ddf:   and    %ecx,%esi
  0x00007fa5c5044de1:   or     %edi,%esi
  0x00007fa5c5044de3:   add    %esi,%eax
  0x00007fa5c5044de5:   rol    $0x5,%eax
  0x00007fa5c5044de8:   add    %ebx,%eax
  0x00007fa5c5044dea:   add    $0xfcefa3f8,%edx
  0x00007fa5c5044df0:   mov    %ecx,%esi
  0x00007fa5c5044df2:   mov    %ecx,%edi
  0x00007fa5c5044df4:   add    0x8(%r15),%edx
  0x00007fa5c5044df8:   not    %esi
  0x00007fa5c5044dfa:   and    %eax,%edi
  0x00007fa5c5044dfc:   and    %ebx,%esi
  0x00007fa5c5044dfe:   or     %edi,%esi
  0x00007fa5c5044e00:   add    %esi,%edx
  0x00007fa5c5044e02:   rol    $0x9,%edx
  0x00007fa5c5044e05:   add    %eax,%edx
  0x00007fa5c5044e07:   add    $0x676f02d9,%ecx
  0x00007fa5c5044e0d:   mov    %ebx,%esi
  0x00007fa5c5044e0f:   mov    %ebx,%edi
  0x00007fa5c5044e11:   add    0x1c(%r15),%ecx
  0x00007fa5c5044e15:   not    %esi
  0x00007fa5c5044e17:   and    %edx,%edi
  0x00007fa5c5044e19:   and    %eax,%esi
  0x00007fa5c5044e1b:   or     %edi,%esi
  0x00007fa5c5044e1d:   add    %esi,%ecx
  0x00007fa5c5044e1f:   rol    $0xe,%ecx
  0x00007fa5c5044e22:   add    %edx,%ecx
  0x00007fa5c5044e24:   add    $0x8d2a4c8a,%ebx
  0x00007fa5c5044e2a:   mov    %eax,%esi
  0x00007fa5c5044e2c:   mov    %eax,%edi
  0x00007fa5c5044e2e:   add    0x30(%r15),%ebx
  0x00007fa5c5044e32:   not    %esi
  0x00007fa5c5044e34:   and    %ecx,%edi
  0x00007fa5c5044e36:   and    %edx,%esi
  0x00007fa5c5044e38:   or     %edi,%esi
  0x00007fa5c5044e3a:   add    %esi,%ebx
  0x00007fa5c5044e3c:   rol    $0x14,%ebx
  0x00007fa5c5044e3f:   add    %ecx,%ebx
  0x00007fa5c5044e41:   add    $0xfffa3942,%eax
  0x00007fa5c5044e46:   mov    %ecx,%esi
  0x00007fa5c5044e48:   add    0x14(%r15),%eax
  0x00007fa5c5044e4c:   xor    %edx,%esi
  0x00007fa5c5044e4e:   xor    %ebx,%esi
  0x00007fa5c5044e50:   add    %esi,%eax
  0x00007fa5c5044e52:   rol    $0x4,%eax
  0x00007fa5c5044e55:   add    %ebx,%eax
  0x00007fa5c5044e57:   add    $0x8771f681,%edx
  0x00007fa5c5044e5d:   mov    %ebx,%esi
  0x00007fa5c5044e5f:   add    0x20(%r15),%edx
  0x00007fa5c5044e63:   xor    %ecx,%esi
  0x00007fa5c5044e65:   xor    %eax,%esi
  0x00007fa5c5044e67:   add    %esi,%edx
  0x00007fa5c5044e69:   rol    $0xb,%edx
  0x00007fa5c5044e6c:   add    %eax,%edx
  0x00007fa5c5044e6e:   add    $0x6d9d6122,%ecx
  0x00007fa5c5044e74:   mov    %eax,%esi
  0x00007fa5c5044e76:   add    0x2c(%r15),%ecx
  0x00007fa5c5044e7a:   xor    %ebx,%esi
  0x00007fa5c5044e7c:   xor    %edx,%esi
  0x00007fa5c5044e7e:   add    %esi,%ecx
  0x00007fa5c5044e80:   rol    $0x10,%ecx
  0x00007fa5c5044e83:   add    %edx,%ecx
  0x00007fa5c5044e85:   add    $0xfde5380c,%ebx
  0x00007fa5c5044e8b:   mov    %edx,%esi
  0x00007fa5c5044e8d:   add    0x38(%r15),%ebx
  0x00007fa5c5044e91:   xor    %eax,%esi
  0x00007fa5c5044e93:   xor    %ecx,%esi
  0x00007fa5c5044e95:   add    %esi,%ebx
  0x00007fa5c5044e97:   rol    $0x17,%ebx
  0x00007fa5c5044e9a:   add    %ecx,%ebx
  0x00007fa5c5044e9c:   add    $0xa4beea44,%eax
  0x00007fa5c5044ea1:   mov    %ecx,%esi
  0x00007fa5c5044ea3:   add    0x4(%r15),%eax
  0x00007fa5c5044ea7:   xor    %edx,%esi
  0x00007fa5c5044ea9:   xor    %ebx,%esi
  0x00007fa5c5044eab:   add    %esi,%eax
  0x00007fa5c5044ead:   rol    $0x4,%eax
  0x00007fa5c5044eb0:   add    %ebx,%eax
  0x00007fa5c5044eb2:   add    $0x4bdecfa9,%edx
  0x00007fa5c5044eb8:   mov    %ebx,%esi
  0x00007fa5c5044eba:   add    0x10(%r15),%edx
  0x00007fa5c5044ebe:   xor    %ecx,%esi
  0x00007fa5c5044ec0:   xor    %eax,%esi
  0x00007fa5c5044ec2:   add    %esi,%edx
  0x00007fa5c5044ec4:   rol    $0xb,%edx
  0x00007fa5c5044ec7:   add    %eax,%edx
  0x00007fa5c5044ec9:   add    $0xf6bb4b60,%ecx
  0x00007fa5c5044ecf:   mov    %eax,%esi
  0x00007fa5c5044ed1:   add    0x1c(%r15),%ecx
  0x00007fa5c5044ed5:   xor    %ebx,%esi
  0x00007fa5c5044ed7:   xor    %edx,%esi
  0x00007fa5c5044ed9:   add    %esi,%ecx
  0x00007fa5c5044edb:   rol    $0x10,%ecx
  0x00007fa5c5044ede:   add    %edx,%ecx
  0x00007fa5c5044ee0:   add    $0xbebfbc70,%ebx
  0x00007fa5c5044ee6:   mov    %edx,%esi
  0x00007fa5c5044ee8:   add    0x28(%r15),%ebx
  0x00007fa5c5044eec:   xor    %eax,%esi
  0x00007fa5c5044eee:   xor    %ecx,%esi
  0x00007fa5c5044ef0:   add    %esi,%ebx
  0x00007fa5c5044ef2:   rol    $0x17,%ebx
  0x00007fa5c5044ef5:   add    %ecx,%ebx
  0x00007fa5c5044ef7:   add    $0x289b7ec6,%eax
  0x00007fa5c5044efc:   mov    %ecx,%esi
  0x00007fa5c5044efe:   add    0x34(%r15),%eax
  0x00007fa5c5044f02:   xor    %edx,%esi
  0x00007fa5c5044f04:   xor    %ebx,%esi
  0x00007fa5c5044f06:   add    %esi,%eax
  0x00007fa5c5044f08:   rol    $0x4,%eax
  0x00007fa5c5044f0b:   add    %ebx,%eax
  0x00007fa5c5044f0d:   add    $0xeaa127fa,%edx
  0x00007fa5c5044f13:   mov    %ebx,%esi
  0x00007fa5c5044f15:   add    (%r15),%edx
  0x00007fa5c5044f18:   xor    %ecx,%esi
  0x00007fa5c5044f1a:   xor    %eax,%esi
  0x00007fa5c5044f1c:   add    %esi,%edx
  0x00007fa5c5044f1e:   rol    $0xb,%edx
  0x00007fa5c5044f21:   add    %eax,%edx
  0x00007fa5c5044f23:   add    $0xd4ef3085,%ecx
  0x00007fa5c5044f29:   mov    %eax,%esi
  0x00007fa5c5044f2b:   add    0xc(%r15),%ecx
  0x00007fa5c5044f2f:   xor    %ebx,%esi
  0x00007fa5c5044f31:   xor    %edx,%esi
  0x00007fa5c5044f33:   add    %esi,%ecx
  0x00007fa5c5044f35:   rol    $0x10,%ecx
  0x00007fa5c5044f38:   add    %edx,%ecx
  0x00007fa5c5044f3a:   add    $0x4881d05,%ebx
  0x00007fa5c5044f40:   mov    %edx,%esi
  0x00007fa5c5044f42:   add    0x18(%r15),%ebx
  0x00007fa5c5044f46:   xor    %eax,%esi
  0x00007fa5c5044f48:   xor    %ecx,%esi
  0x00007fa5c5044f4a:   add    %esi,%ebx
  0x00007fa5c5044f4c:   rol    $0x17,%ebx
  0x00007fa5c5044f4f:   add    %ecx,%ebx
  0x00007fa5c5044f51:   add    $0xd9d4d039,%eax
  0x00007fa5c5044f56:   mov    %ecx,%esi
  0x00007fa5c5044f58:   add    0x24(%r15),%eax
  0x00007fa5c5044f5c:   xor    %edx,%esi
  0x00007fa5c5044f5e:   xor    %ebx,%esi
  0x00007fa5c5044f60:   add    %esi,%eax
  0x00007fa5c5044f62:   rol    $0x4,%eax
  0x00007fa5c5044f65:   add    %ebx,%eax
  0x00007fa5c5044f67:   add    $0xe6db99e5,%edx
  0x00007fa5c5044f6d:   mov    %ebx,%esi
  0x00007fa5c5044f6f:   add    0x30(%r15),%edx
  0x00007fa5c5044f73:   xor    %ecx,%esi
  0x00007fa5c5044f75:   xor    %eax,%esi
  0x00007fa5c5044f77:   add    %esi,%edx
  0x00007fa5c5044f79:   rol    $0xb,%edx
  0x00007fa5c5044f7c:   add    %eax,%edx
  0x00007fa5c5044f7e:   add    $0x1fa27cf8,%ecx
  0x00007fa5c5044f84:   mov    %eax,%esi
  0x00007fa5c5044f86:   add    0x3c(%r15),%ecx
  0x00007fa5c5044f8a:   xor    %ebx,%esi
  0x00007fa5c5044f8c:   xor    %edx,%esi
  0x00007fa5c5044f8e:   add    %esi,%ecx
  0x00007fa5c5044f90:   rol    $0x10,%ecx
  0x00007fa5c5044f93:   add    %edx,%ecx
  0x00007fa5c5044f95:   add    $0xc4ac5665,%ebx
  0x00007fa5c5044f9b:   mov    %edx,%esi
  0x00007fa5c5044f9d:   add    0x8(%r15),%ebx
  0x00007fa5c5044fa1:   xor    %eax,%esi
  0x00007fa5c5044fa3:   xor    %ecx,%esi
  0x00007fa5c5044fa5:   add    %esi,%ebx
  0x00007fa5c5044fa7:   rol    $0x17,%ebx
  0x00007fa5c5044faa:   add    %ecx,%ebx
  0x00007fa5c5044fac:   add    $0xf4292244,%eax
  0x00007fa5c5044fb1:   mov    %edx,%esi
  0x00007fa5c5044fb3:   not    %esi
  0x00007fa5c5044fb5:   add    (%r15),%eax
  0x00007fa5c5044fb8:   or     %ebx,%esi
  0x00007fa5c5044fba:   xor    %ecx,%esi
  0x00007fa5c5044fbc:   add    %esi,%eax
  0x00007fa5c5044fbe:   rol    $0x6,%eax
  0x00007fa5c5044fc1:   add    %ebx,%eax
  0x00007fa5c5044fc3:   add    $0x432aff97,%edx
  0x00007fa5c5044fc9:   mov    %ecx,%esi
  0x00007fa5c5044fcb:   not    %esi
  0x00007fa5c5044fcd:   add    0x1c(%r15),%edx
  0x00007fa5c5044fd1:   or     %eax,%esi
  0x00007fa5c5044fd3:   xor    %ebx,%esi
  0x00007fa5c5044fd5:   add    %esi,%edx
  0x00007fa5c5044fd7:   rol    $0xa,%edx
  0x00007fa5c5044fda:   add    %eax,%edx
  0x00007fa5c5044fdc:   add    $0xab9423a7,%ecx
  0x00007fa5c5044fe2:   mov    %ebx,%esi
  0x00007fa5c5044fe4:   not    %esi
  0x00007fa5c5044fe6:   add    0x38(%r15),%ecx
  0x00007fa5c5044fea:   or     %edx,%esi
  0x00007fa5c5044fec:   xor    %eax,%esi
  0x00007fa5c5044fee:   add    %esi,%ecx
  0x00007fa5c5044ff0:   rol    $0xf,%ecx
  0x00007fa5c5044ff3:   add    %edx,%ecx
  0x00007fa5c5044ff5:   add    $0xfc93a039,%ebx
  0x00007fa5c5044ffb:   mov    %eax,%esi
  0x00007fa5c5044ffd:   not    %esi
  0x00007fa5c5044fff:   add    0x14(%r15),%ebx
  0x00007fa5c5045003:   or     %ecx,%esi
  0x00007fa5c5045005:   xor    %edx,%esi
  0x00007fa5c5045007:   add    %esi,%ebx
  0x00007fa5c5045009:   rol    $0x15,%ebx
  0x00007fa5c504500c:   add    %ecx,%ebx
  0x00007fa5c504500e:   add    $0x655b59c3,%eax
  0x00007fa5c5045013:   mov    %edx,%esi
  0x00007fa5c5045015:   not    %esi
  0x00007fa5c5045017:   add    0x30(%r15),%eax
  0x00007fa5c504501b:   or     %ebx,%esi
  0x00007fa5c504501d:   xor    %ecx,%esi
  0x00007fa5c504501f:   add    %esi,%eax
  0x00007fa5c5045021:   rol    $0x6,%eax
  0x00007fa5c5045024:   add    %ebx,%eax
  0x00007fa5c5045026:   add    $0x8f0ccc92,%edx
  0x00007fa5c504502c:   mov    %ecx,%esi
  0x00007fa5c504502e:   not    %esi
  0x00007fa5c5045030:   add    0xc(%r15),%edx
  0x00007fa5c5045034:   or     %eax,%esi
  0x00007fa5c5045036:   xor    %ebx,%esi
  0x00007fa5c5045038:   add    %esi,%edx
  0x00007fa5c504503a:   rol    $0xa,%edx
  0x00007fa5c504503d:   add    %eax,%edx
  0x00007fa5c504503f:   add    $0xffeff47d,%ecx
  0x00007fa5c5045045:   mov    %ebx,%esi
  0x00007fa5c5045047:   not    %esi
  0x00007fa5c5045049:   add    0x28(%r15),%ecx
  0x00007fa5c504504d:   or     %edx,%esi
  0x00007fa5c504504f:   xor    %eax,%esi
  0x00007fa5c5045051:   add    %esi,%ecx
  0x00007fa5c5045053:   rol    $0xf,%ecx
  0x00007fa5c5045056:   add    %edx,%ecx
  0x00007fa5c5045058:   add    $0x85845dd1,%ebx
  0x00007fa5c504505e:   mov    %eax,%esi
  0x00007fa5c5045060:   not    %esi
  0x00007fa5c5045062:   add    0x4(%r15),%ebx
  0x00007fa5c5045066:   or     %ecx,%esi
  0x00007fa5c5045068:   xor    %edx,%esi
  0x00007fa5c504506a:   add    %esi,%ebx
  0x00007fa5c504506c:   rol    $0x15,%ebx
  0x00007fa5c504506f:   add    %ecx,%ebx
  0x00007fa5c5045071:   add    $0x6fa87e4f,%eax
  0x00007fa5c5045076:   mov    %edx,%esi
  0x00007fa5c5045078:   not    %esi
  0x00007fa5c504507a:   add    0x20(%r15),%eax
  0x00007fa5c504507e:   or     %ebx,%esi
  0x00007fa5c5045080:   xor    %ecx,%esi
  0x00007fa5c5045082:   add    %esi,%eax
  0x00007fa5c5045084:   rol    $0x6,%eax
  0x00007fa5c5045087:   add    %ebx,%eax
  0x00007fa5c5045089:   add    $0xfe2ce6e0,%edx
  0x00007fa5c504508f:   mov    %ecx,%esi
  0x00007fa5c5045091:   not    %esi
  0x00007fa5c5045093:   add    0x3c(%r15),%edx
  0x00007fa5c5045097:   or     %eax,%esi
  0x00007fa5c5045099:   xor    %ebx,%esi
  0x00007fa5c504509b:   add    %esi,%edx
  0x00007fa5c504509d:   rol    $0xa,%edx
  0x00007fa5c50450a0:   add    %eax,%edx
  0x00007fa5c50450a2:   add    $0xa3014314,%ecx
  0x00007fa5c50450a8:   mov    %ebx,%esi
  0x00007fa5c50450aa:   not    %esi
  0x00007fa5c50450ac:   add    0x18(%r15),%ecx
  0x00007fa5c50450b0:   or     %edx,%esi
  0x00007fa5c50450b2:   xor    %eax,%esi
  0x00007fa5c50450b4:   add    %esi,%ecx
  0x00007fa5c50450b6:   rol    $0xf,%ecx
  0x00007fa5c50450b9:   add    %edx,%ecx
  0x00007fa5c50450bb:   add    $0x4e0811a1,%ebx
  0x00007fa5c50450c1:   mov    %eax,%esi
  0x00007fa5c50450c3:   not    %esi
  0x00007fa5c50450c5:   add    0x34(%r15),%ebx
  0x00007fa5c50450c9:   or     %ecx,%esi
  0x00007fa5c50450cb:   xor    %edx,%esi
  0x00007fa5c50450cd:   add    %esi,%ebx
  0x00007fa5c50450cf:   rol    $0x15,%ebx
  0x00007fa5c50450d2:   add    %ecx,%ebx
  0x00007fa5c50450d4:   add    $0xf7537e82,%eax
  0x00007fa5c50450d9:   mov    %edx,%esi
  0x00007fa5c50450db:   not    %esi
  0x00007fa5c50450dd:   add    0x10(%r15),%eax
  0x00007fa5c50450e1:   or     %ebx,%esi
  0x00007fa5c50450e3:   xor    %ecx,%esi
  0x00007fa5c50450e5:   add    %esi,%eax
  0x00007fa5c50450e7:   rol    $0x6,%eax
  0x00007fa5c50450ea:   add    %ebx,%eax
  0x00007fa5c50450ec:   add    $0xbd3af235,%edx
  0x00007fa5c50450f2:   mov    %ecx,%esi
  0x00007fa5c50450f4:   not    %esi
  0x00007fa5c50450f6:   add    0x2c(%r15),%edx
  0x00007fa5c50450fa:   or     %eax,%esi
  0x00007fa5c50450fc:   xor    %ebx,%esi
  0x00007fa5c50450fe:   add    %esi,%edx
  0x00007fa5c5045100:   rol    $0xa,%edx
  0x00007fa5c5045103:   add    %eax,%edx
  0x00007fa5c5045105:   add    $0x2ad7d2bb,%ecx
  0x00007fa5c504510b:   mov    %ebx,%esi
  0x00007fa5c504510d:   not    %esi
  0x00007fa5c504510f:   add    0x8(%r15),%ecx
  0x00007fa5c5045113:   or     %edx,%esi
  0x00007fa5c5045115:   xor    %eax,%esi
  0x00007fa5c5045117:   add    %esi,%ecx
  0x00007fa5c5045119:   rol    $0xf,%ecx
  0x00007fa5c504511c:   add    %edx,%ecx
  0x00007fa5c504511e:   add    $0xeb86d391,%ebx
  0x00007fa5c5045124:   mov    %eax,%esi
  0x00007fa5c5045126:   not    %esi
  0x00007fa5c5045128:   add    0x24(%r15),%ebx
  0x00007fa5c504512c:   or     %ecx,%esi
  0x00007fa5c504512e:   xor    %edx,%esi
  0x00007fa5c5045130:   add    %esi,%ebx
  0x00007fa5c5045132:   rol    $0x15,%ebx
  0x00007fa5c5045135:   add    %ecx,%ebx
  0x00007fa5c5045137:   mov    (%rsp),%rdi
  0x00007fa5c504513b:   add    %eax,(%rdi)
  0x00007fa5c504513d:   add    %ebx,0x4(%rdi)
  0x00007fa5c5045140:   add    %ecx,0x8(%rdi)
  0x00007fa5c5045143:   add    %edx,0xc(%rdi)
  0x00007fa5c5045146:   add    $0x40,%r15
  0x00007fa5c504514a:   addl   $0x40,0x8(%rsp)
  0x00007fa5c504514f:   mov    0x8(%rsp),%esi
  0x00007fa5c5045153:   cmp    0xc(%rsp),%esi
  0x00007fa5c5045157:   jbe    Stub::md5_implCompressMB+28 0x00007fa5c5044adc
  0x00007fa5c504515d:   mov    %rsi,%rax
  0x00007fa5c5045160:   add    $0x10,%rsp
  0x00007fa5c5045164:   pop    %r15
  0x00007fa5c5045166:   pop    %rsi
  0x00007fa5c5045167:   pop    %rdi
  0x00007fa5c5045168:   pop    %rbx
  0x00007fa5c5045169:   leaveq 
  0x00007fa5c504516a:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::pshuffle_byte_flip_mask [0x00007fa5c50451c0, 0x00007fa5c5045220] (96 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50451c0:   add    (%rdx),%eax
  0x00007fa5c50451c2:   add    %eax,(%rax)
  0x00007fa5c50451c4:   (bad)  
  0x00007fa5c50451c5:   (bad)  
  0x00007fa5c50451c6:   add    $0x90a0b04,%eax
  0x00007fa5c50451cb:   or     %cl,(%rdi)
  0x00007fa5c50451cd:   (bad)  
  0x00007fa5c50451ce:   or     $0x102030c,%eax
  0x00007fa5c50451d3:   add    %al,(%rdi)
  0x00007fa5c50451d5:   (bad)  
  0x00007fa5c50451d6:   add    $0x90a0b04,%eax
  0x00007fa5c50451db:   or     %cl,(%rdi)
  0x00007fa5c50451dd:   (bad)  
  0x00007fa5c50451de:   or     $0x201000c,%eax
  0x00007fa5c50451e3:   add    (%rax),%ecx
  0x00007fa5c50451e5:   or     %ecx,(%rdx)
  0x00007fa5c50451e7:   or     %edi,%edi
  0x00007fa5c50451e9:   (bad)  
  0x00007fa5c50451ea:   (bad)  
  0x00007fa5c50451eb:   (bad)  
  0x00007fa5c50451ec:   (bad)  
  0x00007fa5c50451ed:   (bad)  
  0x00007fa5c50451ee:   (bad)  
  0x00007fa5c50451ef:   incl   (%rax)
  0x00007fa5c50451f1:   add    %eax,(%rdx)
  0x00007fa5c50451f3:   add    (%rax),%ecx
  0x00007fa5c50451f5:   or     %ecx,(%rdx)
  0x00007fa5c50451f7:   or     %edi,%edi
  0x00007fa5c50451f9:   (bad)  
  0x00007fa5c50451fa:   (bad)  
  0x00007fa5c50451fb:   (bad)  
  0x00007fa5c50451fc:   (bad)  
  0x00007fa5c50451fd:   (bad)  
  0x00007fa5c50451fe:   (bad)  
  0x00007fa5c50451ff:   (bad)  
  0x00007fa5c5045200:   (bad)  
  0x00007fa5c5045201:   (bad)  
  0x00007fa5c5045202:   (bad)  
  0x00007fa5c5045203:   (bad)  
  0x00007fa5c5045204:   (bad)  
  0x00007fa5c5045205:   (bad)  
  0x00007fa5c5045206:   (bad)  
  0x00007fa5c5045207:   incl   (%rax)
  0x00007fa5c5045209:   add    %eax,(%rdx)
  0x00007fa5c504520b:   add    (%rax),%ecx
  0x00007fa5c504520d:   or     %ecx,(%rdx)
  0x00007fa5c504520f:   or     %edi,%edi
  0x00007fa5c5045211:   (bad)  
  0x00007fa5c5045212:   (bad)  
  0x00007fa5c5045213:   (bad)  
  0x00007fa5c5045214:   (bad)  
  0x00007fa5c5045215:   (bad)  
  0x00007fa5c5045216:   (bad)  
  0x00007fa5c5045217:   incl   (%rax)
  0x00007fa5c5045219:   add    %eax,(%rdx)
  0x00007fa5c504521b:   add    (%rax),%ecx
  0x00007fa5c504521d:   or     %ecx,(%rdx)
  0x00007fa5c504521f:   .byte 0xb
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha256_implCompress [0x00007fa5c5045220, 0x00007fa5c504634f] (4399 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5045220:   push   %rbp
  0x00007fa5c5045221:   mov    %rsp,%rbp
  0x00007fa5c5045224:   sub    $0x20,%rsp
  0x00007fa5c5045228:   push   %rcx
  0x00007fa5c5045229:   push   %rdx
  0x00007fa5c504522a:   push   %rbx
  0x00007fa5c504522b:   push   %rbp
  0x00007fa5c504522c:   push   %r12
  0x00007fa5c504522e:   push   %r13
  0x00007fa5c5045230:   push   %r14
  0x00007fa5c5045232:   push   %r15
  0x00007fa5c5045234:   mov    %rsp,%rax
  0x00007fa5c5045237:   sub    $0x220,%rsp
  0x00007fa5c504523e:   and    $0xffffffffffffffe0,%rsp
  0x00007fa5c5045242:   mov    %rax,0x218(%rsp)
  0x00007fa5c504524a:   mov    %rcx,%r9
  0x00007fa5c504524d:   mov    %rdx,%r8
  0x00007fa5c5045250:   mov    %rsi,%rdx
  0x00007fa5c5045253:   mov    %rdi,%rcx
  0x00007fa5c5045256:   lea    (%rcx),%rcx
  0x00007fa5c5045259:   mov    %rdx,%rdx
  0x00007fa5c504525c:   xor    %r8,%r8
  0x00007fa5c504525f:   add    $0x40,%r8
  0x00007fa5c5045263:   lea    -0x40(%rcx,%r8,1),%r8
  0x00007fa5c5045268:   mov    %r8,0x200(%rsp)
  0x00007fa5c5045270:   cmp    %r8,%rcx
  0x00007fa5c5045273:   je     Stub::sha256_implCompress+4309 0x00007fa5c50462f5
  0x00007fa5c5045279:   mov    (%rdx),%eax
  0x00007fa5c504527b:   mov    0x4(%rdx),%ebx
  0x00007fa5c504527e:   mov    0x8(%rdx),%edi
  0x00007fa5c5045281:   mov    0xc(%rdx),%esi
  0x00007fa5c5045284:   mov    0x10(%rdx),%r8d
  0x00007fa5c5045288:   mov    0x14(%rdx),%r9d
  0x00007fa5c504528c:   mov    0x1c(%rdx),%r11d
  0x00007fa5c5045290:   vmovdqu -0xd8(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007fa5c5045298:   vmovdqu -0xc0(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007fa5c50451e0
  0x00007fa5c50452a0:   vmovdqu -0xa8(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007fa5c5045200
  0x00007fa5c50452a8:   mov    0x18(%rdx),%r10d
  0x00007fa5c50452ac:   mov    %rdx,0x210(%rsp)
  0x00007fa5c50452b4:   movabs $0x7fa5ceac14c0,%rbp
  0x00007fa5c50452be:   vmovdqu (%rcx),%ymm0
  0x00007fa5c50452c2:   vmovdqu 0x20(%rcx),%ymm1
  0x00007fa5c50452c7:   vmovdqu 0x40(%rcx),%ymm2
  0x00007fa5c50452cc:   vmovdqu 0x60(%rcx),%ymm3
  0x00007fa5c50452d1:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007fa5c50452d6:   vpshufb %ymm13,%ymm1,%ymm1
  0x00007fa5c50452db:   vpshufb %ymm13,%ymm2,%ymm2
  0x00007fa5c50452e0:   vpshufb %ymm13,%ymm3,%ymm3
  0x00007fa5c50452e5:   vperm2i128 $0x20,%ymm2,%ymm0,%ymm4
  0x00007fa5c50452eb:   vperm2i128 $0x31,%ymm2,%ymm0,%ymm5
  0x00007fa5c50452f1:   vperm2i128 $0x20,%ymm3,%ymm1,%ymm6
  0x00007fa5c50452f7:   vperm2i128 $0x31,%ymm3,%ymm1,%ymm7
  0x00007fa5c50452fd:   add    $0x40,%rcx
  0x00007fa5c5045301:   mov    %rcx,0x208(%rsp)
  0x00007fa5c5045309:   xor    %rdx,%rdx
  0x00007fa5c504530c:   nopl   0x0(%rax)
  0x00007fa5c5045310:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007fa5c5045316:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007fa5c504531b:   mov    %eax,%ecx
  0x00007fa5c504531d:   rorx   $0x19,%r8d,%r13d
  0x00007fa5c5045323:   rorx   $0xb,%r8d,%r14d
  0x00007fa5c5045329:   add    (%rsp,%rdx,1),%r11d
  0x00007fa5c504532d:   or     %edi,%ecx
  0x00007fa5c504532f:   mov    %r9d,%r15d
  0x00007fa5c5045332:   rorx   $0xd,%eax,%r12d
  0x00007fa5c5045338:   xor    %r14d,%r13d
  0x00007fa5c504533b:   xor    %r10d,%r15d
  0x00007fa5c504533e:   rorx   $0x6,%r8d,%r14d
  0x00007fa5c5045344:   and    %r8d,%r15d
  0x00007fa5c5045347:   xor    %r14d,%r13d
  0x00007fa5c504534a:   rorx   $0x16,%eax,%r14d
  0x00007fa5c5045350:   add    %r11d,%esi
  0x00007fa5c5045353:   and    %ebx,%ecx
  0x00007fa5c5045355:   xor    %r12d,%r14d
  0x00007fa5c5045358:   rorx   $0x2,%eax,%r12d
  0x00007fa5c504535e:   xor    %r10d,%r15d
  0x00007fa5c5045361:   xor    %r12d,%r14d
  0x00007fa5c5045364:   mov    %eax,%r12d
  0x00007fa5c5045367:   and    %edi,%r12d
  0x00007fa5c504536a:   add    %r13d,%r15d
  0x00007fa5c504536d:   or     %r12d,%ecx
  0x00007fa5c5045370:   add    %r14d,%r11d
  0x00007fa5c5045373:   add    %r15d,%esi
  0x00007fa5c5045376:   add    %r15d,%r11d
  0x00007fa5c5045379:   add    %ecx,%r11d
  0x00007fa5c504537c:   vpalignr $0x4,%ymm6,%ymm7,%ymm0
  0x00007fa5c5045382:   vpaddd %ymm4,%ymm0,%ymm0
  0x00007fa5c5045386:   vpalignr $0x4,%ymm4,%ymm5,%ymm1
  0x00007fa5c504538c:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fa5c5045391:   vpslld $0x19,%ymm1,%ymm3
  0x00007fa5c5045396:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c504539a:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fa5c504539f:   mov    %r11d,%ecx
  0x00007fa5c50453a2:   rorx   $0x19,%esi,%r13d
  0x00007fa5c50453a8:   rorx   $0xb,%esi,%r14d
  0x00007fa5c50453ae:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007fa5c50453b3:   or     %ebx,%ecx
  0x00007fa5c50453b5:   mov    %r8d,%r15d
  0x00007fa5c50453b8:   rorx   $0xd,%r11d,%r12d
  0x00007fa5c50453be:   xor    %r14d,%r13d
  0x00007fa5c50453c1:   xor    %r9d,%r15d
  0x00007fa5c50453c4:   rorx   $0x6,%esi,%r14d
  0x00007fa5c50453ca:   and    %esi,%r15d
  0x00007fa5c50453cd:   xor    %r14d,%r13d
  0x00007fa5c50453d0:   rorx   $0x16,%r11d,%r14d
  0x00007fa5c50453d6:   add    %r10d,%edi
  0x00007fa5c50453d9:   and    %eax,%ecx
  0x00007fa5c50453db:   xor    %r12d,%r14d
  0x00007fa5c50453de:   rorx   $0x2,%r11d,%r12d
  0x00007fa5c50453e4:   xor    %r9d,%r15d
  0x00007fa5c50453e7:   xor    %r12d,%r14d
  0x00007fa5c50453ea:   mov    %r11d,%r12d
  0x00007fa5c50453ed:   and    %ebx,%r12d
  0x00007fa5c50453f0:   add    %r13d,%r15d
  0x00007fa5c50453f3:   or     %r12d,%ecx
  0x00007fa5c50453f6:   add    %r14d,%r10d
  0x00007fa5c50453f9:   add    %r15d,%edi
  0x00007fa5c50453fc:   add    %r15d,%r10d
  0x00007fa5c50453ff:   add    %ecx,%r10d
  0x00007fa5c5045402:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fa5c5045407:   vpslld $0xe,%ymm1,%ymm1
  0x00007fa5c504540c:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fa5c5045410:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fa5c5045414:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fa5c5045419:   vpshufd $0xfa,%ymm7,%ymm2
  0x00007fa5c504541e:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fa5c5045422:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fa5c5045427:   mov    %r10d,%ecx
  0x00007fa5c504542a:   rorx   $0x19,%edi,%r13d
  0x00007fa5c5045430:   rorx   $0xb,%edi,%r14d
  0x00007fa5c5045436:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007fa5c504543b:   or     %eax,%ecx
  0x00007fa5c504543d:   mov    %esi,%r15d
  0x00007fa5c5045440:   rorx   $0xd,%r10d,%r12d
  0x00007fa5c5045446:   xor    %r14d,%r13d
  0x00007fa5c5045449:   xor    %r8d,%r15d
  0x00007fa5c504544c:   rorx   $0x6,%edi,%r14d
  0x00007fa5c5045452:   and    %edi,%r15d
  0x00007fa5c5045455:   xor    %r14d,%r13d
  0x00007fa5c5045458:   rorx   $0x16,%r10d,%r14d
  0x00007fa5c504545e:   add    %r9d,%ebx
  0x00007fa5c5045461:   and    %r11d,%ecx
  0x00007fa5c5045464:   xor    %r12d,%r14d
  0x00007fa5c5045467:   rorx   $0x2,%r10d,%r12d
  0x00007fa5c504546d:   xor    %r8d,%r15d
  0x00007fa5c5045470:   xor    %r12d,%r14d
  0x00007fa5c5045473:   mov    %r10d,%r12d
  0x00007fa5c5045476:   and    %eax,%r12d
  0x00007fa5c5045479:   add    %r13d,%r15d
  0x00007fa5c504547c:   or     %r12d,%ecx
  0x00007fa5c504547f:   add    %r14d,%r9d
  0x00007fa5c5045482:   add    %r15d,%ebx
  0x00007fa5c5045485:   add    %r15d,%r9d
  0x00007fa5c5045488:   add    %ecx,%r9d
  0x00007fa5c504548b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5045490:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c5045495:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c5045499:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fa5c504549d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fa5c50454a2:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fa5c50454a7:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fa5c50454ac:   mov    %r9d,%ecx
  0x00007fa5c50454af:   rorx   $0x19,%ebx,%r13d
  0x00007fa5c50454b5:   rorx   $0xb,%ebx,%r14d
  0x00007fa5c50454bb:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007fa5c50454c0:   or     %r11d,%ecx
  0x00007fa5c50454c3:   mov    %edi,%r15d
  0x00007fa5c50454c6:   rorx   $0xd,%r9d,%r12d
  0x00007fa5c50454cc:   xor    %r14d,%r13d
  0x00007fa5c50454cf:   xor    %esi,%r15d
  0x00007fa5c50454d2:   rorx   $0x6,%ebx,%r14d
  0x00007fa5c50454d8:   and    %ebx,%r15d
  0x00007fa5c50454db:   xor    %r14d,%r13d
  0x00007fa5c50454de:   rorx   $0x16,%r9d,%r14d
  0x00007fa5c50454e4:   add    %r8d,%eax
  0x00007fa5c50454e7:   and    %r10d,%ecx
  0x00007fa5c50454ea:   xor    %r12d,%r14d
  0x00007fa5c50454ed:   rorx   $0x2,%r9d,%r12d
  0x00007fa5c50454f3:   xor    %esi,%r15d
  0x00007fa5c50454f6:   xor    %r12d,%r14d
  0x00007fa5c50454f9:   mov    %r9d,%r12d
  0x00007fa5c50454fc:   and    %r11d,%r12d
  0x00007fa5c50454ff:   add    %r13d,%r15d
  0x00007fa5c5045502:   or     %r12d,%ecx
  0x00007fa5c5045505:   add    %r14d,%r8d
  0x00007fa5c5045508:   add    %r15d,%eax
  0x00007fa5c504550b:   add    %r15d,%r8d
  0x00007fa5c504550e:   add    %ecx,%r8d
  0x00007fa5c5045511:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fa5c5045516:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c504551b:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c5045520:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c5045524:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fa5c5045528:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fa5c504552d:   vpaddd %ymm0,%ymm11,%ymm4
  0x00007fa5c5045531:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007fa5c5045537:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007fa5c504553d:   mov    %r8d,%ecx
  0x00007fa5c5045540:   rorx   $0x19,%eax,%r13d
  0x00007fa5c5045546:   rorx   $0xb,%eax,%r14d
  0x00007fa5c504554c:   add    0x20(%rsp,%rdx,1),%esi
  0x00007fa5c5045550:   or     %r10d,%ecx
  0x00007fa5c5045553:   mov    %ebx,%r15d
  0x00007fa5c5045556:   rorx   $0xd,%r8d,%r12d
  0x00007fa5c504555c:   xor    %r14d,%r13d
  0x00007fa5c504555f:   xor    %edi,%r15d
  0x00007fa5c5045562:   rorx   $0x6,%eax,%r14d
  0x00007fa5c5045568:   and    %eax,%r15d
  0x00007fa5c504556b:   xor    %r14d,%r13d
  0x00007fa5c504556e:   rorx   $0x16,%r8d,%r14d
  0x00007fa5c5045574:   add    %esi,%r11d
  0x00007fa5c5045577:   and    %r9d,%ecx
  0x00007fa5c504557a:   xor    %r12d,%r14d
  0x00007fa5c504557d:   rorx   $0x2,%r8d,%r12d
  0x00007fa5c5045583:   xor    %edi,%r15d
  0x00007fa5c5045586:   xor    %r12d,%r14d
  0x00007fa5c5045589:   mov    %r8d,%r12d
  0x00007fa5c504558c:   and    %r10d,%r12d
  0x00007fa5c504558f:   add    %r13d,%r15d
  0x00007fa5c5045592:   or     %r12d,%ecx
  0x00007fa5c5045595:   add    %r14d,%esi
  0x00007fa5c5045598:   add    %r15d,%r11d
  0x00007fa5c504559b:   add    %r15d,%esi
  0x00007fa5c504559e:   add    %ecx,%esi
  0x00007fa5c50455a0:   vpalignr $0x4,%ymm7,%ymm4,%ymm0
  0x00007fa5c50455a6:   vpaddd %ymm5,%ymm0,%ymm0
  0x00007fa5c50455aa:   vpalignr $0x4,%ymm5,%ymm6,%ymm1
  0x00007fa5c50455b0:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fa5c50455b5:   vpslld $0x19,%ymm1,%ymm3
  0x00007fa5c50455ba:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c50455be:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fa5c50455c3:   mov    %esi,%ecx
  0x00007fa5c50455c5:   rorx   $0x19,%r11d,%r13d
  0x00007fa5c50455cb:   rorx   $0xb,%r11d,%r14d
  0x00007fa5c50455d1:   add    0x24(%rsp,%rdx,1),%edi
  0x00007fa5c50455d5:   or     %r9d,%ecx
  0x00007fa5c50455d8:   mov    %eax,%r15d
  0x00007fa5c50455db:   rorx   $0xd,%esi,%r12d
  0x00007fa5c50455e1:   xor    %r14d,%r13d
  0x00007fa5c50455e4:   xor    %ebx,%r15d
  0x00007fa5c50455e7:   rorx   $0x6,%r11d,%r14d
  0x00007fa5c50455ed:   and    %r11d,%r15d
  0x00007fa5c50455f0:   xor    %r14d,%r13d
  0x00007fa5c50455f3:   rorx   $0x16,%esi,%r14d
  0x00007fa5c50455f9:   add    %edi,%r10d
  0x00007fa5c50455fc:   and    %r8d,%ecx
  0x00007fa5c50455ff:   xor    %r12d,%r14d
  0x00007fa5c5045602:   rorx   $0x2,%esi,%r12d
  0x00007fa5c5045608:   xor    %ebx,%r15d
  0x00007fa5c504560b:   xor    %r12d,%r14d
  0x00007fa5c504560e:   mov    %esi,%r12d
  0x00007fa5c5045611:   and    %r9d,%r12d
  0x00007fa5c5045614:   add    %r13d,%r15d
  0x00007fa5c5045617:   or     %r12d,%ecx
  0x00007fa5c504561a:   add    %r14d,%edi
  0x00007fa5c504561d:   add    %r15d,%r10d
  0x00007fa5c5045620:   add    %r15d,%edi
  0x00007fa5c5045623:   add    %ecx,%edi
  0x00007fa5c5045625:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fa5c504562a:   vpslld $0xe,%ymm1,%ymm1
  0x00007fa5c504562f:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fa5c5045633:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fa5c5045637:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fa5c504563c:   vpshufd $0xfa,%ymm4,%ymm2
  0x00007fa5c5045641:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fa5c5045645:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fa5c504564a:   mov    %edi,%ecx
  0x00007fa5c504564c:   rorx   $0x19,%r10d,%r13d
  0x00007fa5c5045652:   rorx   $0xb,%r10d,%r14d
  0x00007fa5c5045658:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007fa5c504565c:   or     %r8d,%ecx
  0x00007fa5c504565f:   mov    %r11d,%r15d
  0x00007fa5c5045662:   rorx   $0xd,%edi,%r12d
  0x00007fa5c5045668:   xor    %r14d,%r13d
  0x00007fa5c504566b:   xor    %eax,%r15d
  0x00007fa5c504566e:   rorx   $0x6,%r10d,%r14d
  0x00007fa5c5045674:   and    %r10d,%r15d
  0x00007fa5c5045677:   xor    %r14d,%r13d
  0x00007fa5c504567a:   rorx   $0x16,%edi,%r14d
  0x00007fa5c5045680:   add    %ebx,%r9d
  0x00007fa5c5045683:   and    %esi,%ecx
  0x00007fa5c5045685:   xor    %r12d,%r14d
  0x00007fa5c5045688:   rorx   $0x2,%edi,%r12d
  0x00007fa5c504568e:   xor    %eax,%r15d
  0x00007fa5c5045691:   xor    %r12d,%r14d
  0x00007fa5c5045694:   mov    %edi,%r12d
  0x00007fa5c5045697:   and    %r8d,%r12d
  0x00007fa5c504569a:   add    %r13d,%r15d
  0x00007fa5c504569d:   or     %r12d,%ecx
  0x00007fa5c50456a0:   add    %r14d,%ebx
  0x00007fa5c50456a3:   add    %r15d,%r9d
  0x00007fa5c50456a6:   add    %r15d,%ebx
  0x00007fa5c50456a9:   add    %ecx,%ebx
  0x00007fa5c50456ab:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c50456b0:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c50456b5:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c50456b9:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fa5c50456bd:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fa5c50456c2:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fa5c50456c7:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fa5c50456cc:   mov    %ebx,%ecx
  0x00007fa5c50456ce:   rorx   $0x19,%r9d,%r13d
  0x00007fa5c50456d4:   rorx   $0xb,%r9d,%r14d
  0x00007fa5c50456da:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007fa5c50456de:   or     %esi,%ecx
  0x00007fa5c50456e0:   mov    %r10d,%r15d
  0x00007fa5c50456e3:   rorx   $0xd,%ebx,%r12d
  0x00007fa5c50456e9:   xor    %r14d,%r13d
  0x00007fa5c50456ec:   xor    %r11d,%r15d
  0x00007fa5c50456ef:   rorx   $0x6,%r9d,%r14d
  0x00007fa5c50456f5:   and    %r9d,%r15d
  0x00007fa5c50456f8:   xor    %r14d,%r13d
  0x00007fa5c50456fb:   rorx   $0x16,%ebx,%r14d
  0x00007fa5c5045701:   add    %eax,%r8d
  0x00007fa5c5045704:   and    %edi,%ecx
  0x00007fa5c5045706:   xor    %r12d,%r14d
  0x00007fa5c5045709:   rorx   $0x2,%ebx,%r12d
  0x00007fa5c504570f:   xor    %r11d,%r15d
  0x00007fa5c5045712:   xor    %r12d,%r14d
  0x00007fa5c5045715:   mov    %ebx,%r12d
  0x00007fa5c5045718:   and    %esi,%r12d
  0x00007fa5c504571b:   add    %r13d,%r15d
  0x00007fa5c504571e:   or     %r12d,%ecx
  0x00007fa5c5045721:   add    %r14d,%eax
  0x00007fa5c5045724:   add    %r15d,%r8d
  0x00007fa5c5045727:   add    %r15d,%eax
  0x00007fa5c504572a:   add    %ecx,%eax
  0x00007fa5c504572c:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fa5c5045731:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5045736:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c504573b:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c504573f:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fa5c5045743:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fa5c5045748:   vpaddd %ymm0,%ymm11,%ymm5
  0x00007fa5c504574c:   vpaddd 0x40(%rbp,%rdx,1),%ymm6,%ymm9
  0x00007fa5c5045752:   vmovdqu %ymm9,0x40(%rsp,%rdx,1)
  0x00007fa5c5045758:   mov    %eax,%ecx
  0x00007fa5c504575a:   rorx   $0x19,%r8d,%r13d
  0x00007fa5c5045760:   rorx   $0xb,%r8d,%r14d
  0x00007fa5c5045766:   add    0x40(%rsp,%rdx,1),%r11d
  0x00007fa5c504576b:   or     %edi,%ecx
  0x00007fa5c504576d:   mov    %r9d,%r15d
  0x00007fa5c5045770:   rorx   $0xd,%eax,%r12d
  0x00007fa5c5045776:   xor    %r14d,%r13d
  0x00007fa5c5045779:   xor    %r10d,%r15d
  0x00007fa5c504577c:   rorx   $0x6,%r8d,%r14d
  0x00007fa5c5045782:   and    %r8d,%r15d
  0x00007fa5c5045785:   xor    %r14d,%r13d
  0x00007fa5c5045788:   rorx   $0x16,%eax,%r14d
  0x00007fa5c504578e:   add    %r11d,%esi
  0x00007fa5c5045791:   and    %ebx,%ecx
  0x00007fa5c5045793:   xor    %r12d,%r14d
  0x00007fa5c5045796:   rorx   $0x2,%eax,%r12d
  0x00007fa5c504579c:   xor    %r10d,%r15d
  0x00007fa5c504579f:   xor    %r12d,%r14d
  0x00007fa5c50457a2:   mov    %eax,%r12d
  0x00007fa5c50457a5:   and    %edi,%r12d
  0x00007fa5c50457a8:   add    %r13d,%r15d
  0x00007fa5c50457ab:   or     %r12d,%ecx
  0x00007fa5c50457ae:   add    %r14d,%r11d
  0x00007fa5c50457b1:   add    %r15d,%esi
  0x00007fa5c50457b4:   add    %r15d,%r11d
  0x00007fa5c50457b7:   add    %ecx,%r11d
  0x00007fa5c50457ba:   vpalignr $0x4,%ymm4,%ymm5,%ymm0
  0x00007fa5c50457c0:   vpaddd %ymm6,%ymm0,%ymm0
  0x00007fa5c50457c4:   vpalignr $0x4,%ymm6,%ymm7,%ymm1
  0x00007fa5c50457ca:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fa5c50457cf:   vpslld $0x19,%ymm1,%ymm3
  0x00007fa5c50457d4:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c50457d8:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fa5c50457dd:   mov    %r11d,%ecx
  0x00007fa5c50457e0:   rorx   $0x19,%esi,%r13d
  0x00007fa5c50457e6:   rorx   $0xb,%esi,%r14d
  0x00007fa5c50457ec:   add    0x44(%rsp,%rdx,1),%r10d
  0x00007fa5c50457f1:   or     %ebx,%ecx
  0x00007fa5c50457f3:   mov    %r8d,%r15d
  0x00007fa5c50457f6:   rorx   $0xd,%r11d,%r12d
  0x00007fa5c50457fc:   xor    %r14d,%r13d
  0x00007fa5c50457ff:   xor    %r9d,%r15d
  0x00007fa5c5045802:   rorx   $0x6,%esi,%r14d
  0x00007fa5c5045808:   and    %esi,%r15d
  0x00007fa5c504580b:   xor    %r14d,%r13d
  0x00007fa5c504580e:   rorx   $0x16,%r11d,%r14d
  0x00007fa5c5045814:   add    %r10d,%edi
  0x00007fa5c5045817:   and    %eax,%ecx
  0x00007fa5c5045819:   xor    %r12d,%r14d
  0x00007fa5c504581c:   rorx   $0x2,%r11d,%r12d
  0x00007fa5c5045822:   xor    %r9d,%r15d
  0x00007fa5c5045825:   xor    %r12d,%r14d
  0x00007fa5c5045828:   mov    %r11d,%r12d
  0x00007fa5c504582b:   and    %ebx,%r12d
  0x00007fa5c504582e:   add    %r13d,%r15d
  0x00007fa5c5045831:   or     %r12d,%ecx
  0x00007fa5c5045834:   add    %r14d,%r10d
  0x00007fa5c5045837:   add    %r15d,%edi
  0x00007fa5c504583a:   add    %r15d,%r10d
  0x00007fa5c504583d:   add    %ecx,%r10d
  0x00007fa5c5045840:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fa5c5045845:   vpslld $0xe,%ymm1,%ymm1
  0x00007fa5c504584a:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fa5c504584e:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fa5c5045852:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fa5c5045857:   vpshufd $0xfa,%ymm5,%ymm2
  0x00007fa5c504585c:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fa5c5045860:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fa5c5045865:   mov    %r10d,%ecx
  0x00007fa5c5045868:   rorx   $0x19,%edi,%r13d
  0x00007fa5c504586e:   rorx   $0xb,%edi,%r14d
  0x00007fa5c5045874:   add    0x48(%rsp,%rdx,1),%r9d
  0x00007fa5c5045879:   or     %eax,%ecx
  0x00007fa5c504587b:   mov    %esi,%r15d
  0x00007fa5c504587e:   rorx   $0xd,%r10d,%r12d
  0x00007fa5c5045884:   xor    %r14d,%r13d
  0x00007fa5c5045887:   xor    %r8d,%r15d
  0x00007fa5c504588a:   rorx   $0x6,%edi,%r14d
  0x00007fa5c5045890:   and    %edi,%r15d
  0x00007fa5c5045893:   xor    %r14d,%r13d
  0x00007fa5c5045896:   rorx   $0x16,%r10d,%r14d
  0x00007fa5c504589c:   add    %r9d,%ebx
  0x00007fa5c504589f:   and    %r11d,%ecx
  0x00007fa5c50458a2:   xor    %r12d,%r14d
  0x00007fa5c50458a5:   rorx   $0x2,%r10d,%r12d
  0x00007fa5c50458ab:   xor    %r8d,%r15d
  0x00007fa5c50458ae:   xor    %r12d,%r14d
  0x00007fa5c50458b1:   mov    %r10d,%r12d
  0x00007fa5c50458b4:   and    %eax,%r12d
  0x00007fa5c50458b7:   add    %r13d,%r15d
  0x00007fa5c50458ba:   or     %r12d,%ecx
  0x00007fa5c50458bd:   add    %r14d,%r9d
  0x00007fa5c50458c0:   add    %r15d,%ebx
  0x00007fa5c50458c3:   add    %r15d,%r9d
  0x00007fa5c50458c6:   add    %ecx,%r9d
  0x00007fa5c50458c9:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c50458ce:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c50458d3:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c50458d7:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fa5c50458db:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fa5c50458e0:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fa5c50458e5:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fa5c50458ea:   mov    %r9d,%ecx
  0x00007fa5c50458ed:   rorx   $0x19,%ebx,%r13d
  0x00007fa5c50458f3:   rorx   $0xb,%ebx,%r14d
  0x00007fa5c50458f9:   add    0x4c(%rsp,%rdx,1),%r8d
  0x00007fa5c50458fe:   or     %r11d,%ecx
  0x00007fa5c5045901:   mov    %edi,%r15d
  0x00007fa5c5045904:   rorx   $0xd,%r9d,%r12d
  0x00007fa5c504590a:   xor    %r14d,%r13d
  0x00007fa5c504590d:   xor    %esi,%r15d
  0x00007fa5c5045910:   rorx   $0x6,%ebx,%r14d
  0x00007fa5c5045916:   and    %ebx,%r15d
  0x00007fa5c5045919:   xor    %r14d,%r13d
  0x00007fa5c504591c:   rorx   $0x16,%r9d,%r14d
  0x00007fa5c5045922:   add    %r8d,%eax
  0x00007fa5c5045925:   and    %r10d,%ecx
  0x00007fa5c5045928:   xor    %r12d,%r14d
  0x00007fa5c504592b:   rorx   $0x2,%r9d,%r12d
  0x00007fa5c5045931:   xor    %esi,%r15d
  0x00007fa5c5045934:   xor    %r12d,%r14d
  0x00007fa5c5045937:   mov    %r9d,%r12d
  0x00007fa5c504593a:   and    %r11d,%r12d
  0x00007fa5c504593d:   add    %r13d,%r15d
  0x00007fa5c5045940:   or     %r12d,%ecx
  0x00007fa5c5045943:   add    %r14d,%r8d
  0x00007fa5c5045946:   add    %r15d,%eax
  0x00007fa5c5045949:   add    %r15d,%r8d
  0x00007fa5c504594c:   add    %ecx,%r8d
  0x00007fa5c504594f:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fa5c5045954:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5045959:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c504595e:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c5045962:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fa5c5045966:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fa5c504596b:   vpaddd %ymm0,%ymm11,%ymm6
  0x00007fa5c504596f:   vpaddd 0x60(%rbp,%rdx,1),%ymm7,%ymm9
  0x00007fa5c5045975:   vmovdqu %ymm9,0x60(%rsp,%rdx,1)
  0x00007fa5c504597b:   mov    %r8d,%ecx
  0x00007fa5c504597e:   rorx   $0x19,%eax,%r13d
  0x00007fa5c5045984:   rorx   $0xb,%eax,%r14d
  0x00007fa5c504598a:   add    0x60(%rsp,%rdx,1),%esi
  0x00007fa5c504598e:   or     %r10d,%ecx
  0x00007fa5c5045991:   mov    %ebx,%r15d
  0x00007fa5c5045994:   rorx   $0xd,%r8d,%r12d
  0x00007fa5c504599a:   xor    %r14d,%r13d
  0x00007fa5c504599d:   xor    %edi,%r15d
  0x00007fa5c50459a0:   rorx   $0x6,%eax,%r14d
  0x00007fa5c50459a6:   and    %eax,%r15d
  0x00007fa5c50459a9:   xor    %r14d,%r13d
  0x00007fa5c50459ac:   rorx   $0x16,%r8d,%r14d
  0x00007fa5c50459b2:   add    %esi,%r11d
  0x00007fa5c50459b5:   and    %r9d,%ecx
  0x00007fa5c50459b8:   xor    %r12d,%r14d
  0x00007fa5c50459bb:   rorx   $0x2,%r8d,%r12d
  0x00007fa5c50459c1:   xor    %edi,%r15d
  0x00007fa5c50459c4:   xor    %r12d,%r14d
  0x00007fa5c50459c7:   mov    %r8d,%r12d
  0x00007fa5c50459ca:   and    %r10d,%r12d
  0x00007fa5c50459cd:   add    %r13d,%r15d
  0x00007fa5c50459d0:   or     %r12d,%ecx
  0x00007fa5c50459d3:   add    %r14d,%esi
  0x00007fa5c50459d6:   add    %r15d,%r11d
  0x00007fa5c50459d9:   add    %r15d,%esi
  0x00007fa5c50459dc:   add    %ecx,%esi
  0x00007fa5c50459de:   vpalignr $0x4,%ymm5,%ymm6,%ymm0
  0x00007fa5c50459e4:   vpaddd %ymm7,%ymm0,%ymm0
  0x00007fa5c50459e8:   vpalignr $0x4,%ymm7,%ymm4,%ymm1
  0x00007fa5c50459ee:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fa5c50459f3:   vpslld $0x19,%ymm1,%ymm3
  0x00007fa5c50459f8:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c50459fc:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fa5c5045a01:   mov    %esi,%ecx
  0x00007fa5c5045a03:   rorx   $0x19,%r11d,%r13d
  0x00007fa5c5045a09:   rorx   $0xb,%r11d,%r14d
  0x00007fa5c5045a0f:   add    0x64(%rsp,%rdx,1),%edi
  0x00007fa5c5045a13:   or     %r9d,%ecx
  0x00007fa5c5045a16:   mov    %eax,%r15d
  0x00007fa5c5045a19:   rorx   $0xd,%esi,%r12d
  0x00007fa5c5045a1f:   xor    %r14d,%r13d
  0x00007fa5c5045a22:   xor    %ebx,%r15d
  0x00007fa5c5045a25:   rorx   $0x6,%r11d,%r14d
  0x00007fa5c5045a2b:   and    %r11d,%r15d
  0x00007fa5c5045a2e:   xor    %r14d,%r13d
  0x00007fa5c5045a31:   rorx   $0x16,%esi,%r14d
  0x00007fa5c5045a37:   add    %edi,%r10d
  0x00007fa5c5045a3a:   and    %r8d,%ecx
  0x00007fa5c5045a3d:   xor    %r12d,%r14d
  0x00007fa5c5045a40:   rorx   $0x2,%esi,%r12d
  0x00007fa5c5045a46:   xor    %ebx,%r15d
  0x00007fa5c5045a49:   xor    %r12d,%r14d
  0x00007fa5c5045a4c:   mov    %esi,%r12d
  0x00007fa5c5045a4f:   and    %r9d,%r12d
  0x00007fa5c5045a52:   add    %r13d,%r15d
  0x00007fa5c5045a55:   or     %r12d,%ecx
  0x00007fa5c5045a58:   add    %r14d,%edi
  0x00007fa5c5045a5b:   add    %r15d,%r10d
  0x00007fa5c5045a5e:   add    %r15d,%edi
  0x00007fa5c5045a61:   add    %ecx,%edi
  0x00007fa5c5045a63:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fa5c5045a68:   vpslld $0xe,%ymm1,%ymm1
  0x00007fa5c5045a6d:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fa5c5045a71:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fa5c5045a75:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fa5c5045a7a:   vpshufd $0xfa,%ymm6,%ymm2
  0x00007fa5c5045a7f:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fa5c5045a83:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fa5c5045a88:   mov    %edi,%ecx
  0x00007fa5c5045a8a:   rorx   $0x19,%r10d,%r13d
  0x00007fa5c5045a90:   rorx   $0xb,%r10d,%r14d
  0x00007fa5c5045a96:   add    0x68(%rsp,%rdx,1),%ebx
  0x00007fa5c5045a9a:   or     %r8d,%ecx
  0x00007fa5c5045a9d:   mov    %r11d,%r15d
  0x00007fa5c5045aa0:   rorx   $0xd,%edi,%r12d
  0x00007fa5c5045aa6:   xor    %r14d,%r13d
  0x00007fa5c5045aa9:   xor    %eax,%r15d
  0x00007fa5c5045aac:   rorx   $0x6,%r10d,%r14d
  0x00007fa5c5045ab2:   and    %r10d,%r15d
  0x00007fa5c5045ab5:   xor    %r14d,%r13d
  0x00007fa5c5045ab8:   rorx   $0x16,%edi,%r14d
  0x00007fa5c5045abe:   add    %ebx,%r9d
  0x00007fa5c5045ac1:   and    %esi,%ecx
  0x00007fa5c5045ac3:   xor    %r12d,%r14d
  0x00007fa5c5045ac6:   rorx   $0x2,%edi,%r12d
  0x00007fa5c5045acc:   xor    %eax,%r15d
  0x00007fa5c5045acf:   xor    %r12d,%r14d
  0x00007fa5c5045ad2:   mov    %edi,%r12d
  0x00007fa5c5045ad5:   and    %r8d,%r12d
  0x00007fa5c5045ad8:   add    %r13d,%r15d
  0x00007fa5c5045adb:   or     %r12d,%ecx
  0x00007fa5c5045ade:   add    %r14d,%ebx
  0x00007fa5c5045ae1:   add    %r15d,%r9d
  0x00007fa5c5045ae4:   add    %r15d,%ebx
  0x00007fa5c5045ae7:   add    %ecx,%ebx
  0x00007fa5c5045ae9:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5045aee:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c5045af3:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c5045af7:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fa5c5045afb:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fa5c5045b00:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fa5c5045b05:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fa5c5045b0a:   mov    %ebx,%ecx
  0x00007fa5c5045b0c:   rorx   $0x19,%r9d,%r13d
  0x00007fa5c5045b12:   rorx   $0xb,%r9d,%r14d
  0x00007fa5c5045b18:   add    0x6c(%rsp,%rdx,1),%eax
  0x00007fa5c5045b1c:   or     %esi,%ecx
  0x00007fa5c5045b1e:   mov    %r10d,%r15d
  0x00007fa5c5045b21:   rorx   $0xd,%ebx,%r12d
  0x00007fa5c5045b27:   xor    %r14d,%r13d
  0x00007fa5c5045b2a:   xor    %r11d,%r15d
  0x00007fa5c5045b2d:   rorx   $0x6,%r9d,%r14d
  0x00007fa5c5045b33:   and    %r9d,%r15d
  0x00007fa5c5045b36:   xor    %r14d,%r13d
  0x00007fa5c5045b39:   rorx   $0x16,%ebx,%r14d
  0x00007fa5c5045b3f:   add    %eax,%r8d
  0x00007fa5c5045b42:   and    %edi,%ecx
  0x00007fa5c5045b44:   xor    %r12d,%r14d
  0x00007fa5c5045b47:   rorx   $0x2,%ebx,%r12d
  0x00007fa5c5045b4d:   xor    %r11d,%r15d
  0x00007fa5c5045b50:   xor    %r12d,%r14d
  0x00007fa5c5045b53:   mov    %ebx,%r12d
  0x00007fa5c5045b56:   and    %esi,%r12d
  0x00007fa5c5045b59:   add    %r13d,%r15d
  0x00007fa5c5045b5c:   or     %r12d,%ecx
  0x00007fa5c5045b5f:   add    %r14d,%eax
  0x00007fa5c5045b62:   add    %r15d,%r8d
  0x00007fa5c5045b65:   add    %r15d,%eax
  0x00007fa5c5045b68:   add    %ecx,%eax
  0x00007fa5c5045b6a:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fa5c5045b6f:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5045b74:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c5045b79:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c5045b7d:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fa5c5045b81:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fa5c5045b86:   vpaddd %ymm0,%ymm11,%ymm7
  0x00007fa5c5045b8a:   add    $0x80,%rdx
  0x00007fa5c5045b91:   cmp    $0x180,%rdx
  0x00007fa5c5045b98:   jb     Stub::sha256_implCompress+240 0x00007fa5c5045310
  0x00007fa5c5045b9e:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007fa5c5045ba4:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007fa5c5045ba9:   mov    %r9d,%r15d
  0x00007fa5c5045bac:   rorx   $0x19,%r8d,%r13d
  0x00007fa5c5045bb2:   rorx   $0xb,%r8d,%r14d
  0x00007fa5c5045bb8:   xor    %r10d,%r15d
  0x00007fa5c5045bbb:   xor    %r14d,%r13d
  0x00007fa5c5045bbe:   rorx   $0x6,%r8d,%r14d
  0x00007fa5c5045bc4:   and    %r8d,%r15d
  0x00007fa5c5045bc7:   xor    %r14d,%r13d
  0x00007fa5c5045bca:   rorx   $0xd,%eax,%r12d
  0x00007fa5c5045bd0:   xor    %r10d,%r15d
  0x00007fa5c5045bd3:   rorx   $0x16,%eax,%r14d
  0x00007fa5c5045bd9:   mov    %eax,%ecx
  0x00007fa5c5045bdb:   xor    %r12d,%r14d
  0x00007fa5c5045bde:   rorx   $0x2,%eax,%r12d
  0x00007fa5c5045be4:   add    (%rsp,%rdx,1),%r11d
  0x00007fa5c5045be8:   or     %edi,%ecx
  0x00007fa5c5045bea:   xor    %r12d,%r14d
  0x00007fa5c5045bed:   mov    %eax,%r12d
  0x00007fa5c5045bf0:   and    %ebx,%ecx
  0x00007fa5c5045bf2:   and    %edi,%r12d
  0x00007fa5c5045bf5:   add    %r13d,%r15d
  0x00007fa5c5045bf8:   add    %r11d,%esi
  0x00007fa5c5045bfb:   or     %r12d,%ecx
  0x00007fa5c5045bfe:   add    %r14d,%r11d
  0x00007fa5c5045c01:   add    %r15d,%esi
  0x00007fa5c5045c04:   add    %r15d,%r11d
  0x00007fa5c5045c07:   mov    %r8d,%r15d
  0x00007fa5c5045c0a:   rorx   $0x19,%esi,%r13d
  0x00007fa5c5045c10:   rorx   $0xb,%esi,%r14d
  0x00007fa5c5045c16:   xor    %r9d,%r15d
  0x00007fa5c5045c19:   xor    %r14d,%r13d
  0x00007fa5c5045c1c:   rorx   $0x6,%esi,%r14d
  0x00007fa5c5045c22:   and    %esi,%r15d
  0x00007fa5c5045c25:   add    %ecx,%r11d
  0x00007fa5c5045c28:   xor    %r14d,%r13d
  0x00007fa5c5045c2b:   rorx   $0xd,%r11d,%r12d
  0x00007fa5c5045c31:   xor    %r9d,%r15d
  0x00007fa5c5045c34:   rorx   $0x16,%r11d,%r14d
  0x00007fa5c5045c3a:   mov    %r11d,%ecx
  0x00007fa5c5045c3d:   xor    %r12d,%r14d
  0x00007fa5c5045c40:   rorx   $0x2,%r11d,%r12d
  0x00007fa5c5045c46:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007fa5c5045c4b:   or     %ebx,%ecx
  0x00007fa5c5045c4d:   xor    %r12d,%r14d
  0x00007fa5c5045c50:   mov    %r11d,%r12d
  0x00007fa5c5045c53:   and    %eax,%ecx
  0x00007fa5c5045c55:   and    %ebx,%r12d
  0x00007fa5c5045c58:   add    %r13d,%r15d
  0x00007fa5c5045c5b:   add    %r10d,%edi
  0x00007fa5c5045c5e:   or     %r12d,%ecx
  0x00007fa5c5045c61:   add    %r14d,%r10d
  0x00007fa5c5045c64:   add    %r15d,%edi
  0x00007fa5c5045c67:   add    %r15d,%r10d
  0x00007fa5c5045c6a:   mov    %esi,%r15d
  0x00007fa5c5045c6d:   rorx   $0x19,%edi,%r13d
  0x00007fa5c5045c73:   rorx   $0xb,%edi,%r14d
  0x00007fa5c5045c79:   xor    %r8d,%r15d
  0x00007fa5c5045c7c:   xor    %r14d,%r13d
  0x00007fa5c5045c7f:   rorx   $0x6,%edi,%r14d
  0x00007fa5c5045c85:   and    %edi,%r15d
  0x00007fa5c5045c88:   add    %ecx,%r10d
  0x00007fa5c5045c8b:   xor    %r14d,%r13d
  0x00007fa5c5045c8e:   rorx   $0xd,%r10d,%r12d
  0x00007fa5c5045c94:   xor    %r8d,%r15d
  0x00007fa5c5045c97:   rorx   $0x16,%r10d,%r14d
  0x00007fa5c5045c9d:   mov    %r10d,%ecx
  0x00007fa5c5045ca0:   xor    %r12d,%r14d
  0x00007fa5c5045ca3:   rorx   $0x2,%r10d,%r12d
  0x00007fa5c5045ca9:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007fa5c5045cae:   or     %eax,%ecx
  0x00007fa5c5045cb0:   xor    %r12d,%r14d
  0x00007fa5c5045cb3:   mov    %r10d,%r12d
  0x00007fa5c5045cb6:   and    %r11d,%ecx
  0x00007fa5c5045cb9:   and    %eax,%r12d
  0x00007fa5c5045cbc:   add    %r13d,%r15d
  0x00007fa5c5045cbf:   add    %r9d,%ebx
  0x00007fa5c5045cc2:   or     %r12d,%ecx
  0x00007fa5c5045cc5:   add    %r14d,%r9d
  0x00007fa5c5045cc8:   add    %r15d,%ebx
  0x00007fa5c5045ccb:   add    %r15d,%r9d
  0x00007fa5c5045cce:   mov    %edi,%r15d
  0x00007fa5c5045cd1:   rorx   $0x19,%ebx,%r13d
  0x00007fa5c5045cd7:   rorx   $0xb,%ebx,%r14d
  0x00007fa5c5045cdd:   xor    %esi,%r15d
  0x00007fa5c5045ce0:   xor    %r14d,%r13d
  0x00007fa5c5045ce3:   rorx   $0x6,%ebx,%r14d
  0x00007fa5c5045ce9:   and    %ebx,%r15d
  0x00007fa5c5045cec:   add    %ecx,%r9d
  0x00007fa5c5045cef:   xor    %r14d,%r13d
  0x00007fa5c5045cf2:   rorx   $0xd,%r9d,%r12d
  0x00007fa5c5045cf8:   xor    %esi,%r15d
  0x00007fa5c5045cfb:   rorx   $0x16,%r9d,%r14d
  0x00007fa5c5045d01:   mov    %r9d,%ecx
  0x00007fa5c5045d04:   xor    %r12d,%r14d
  0x00007fa5c5045d07:   rorx   $0x2,%r9d,%r12d
  0x00007fa5c5045d0d:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007fa5c5045d12:   or     %r11d,%ecx
  0x00007fa5c5045d15:   xor    %r12d,%r14d
  0x00007fa5c5045d18:   mov    %r9d,%r12d
  0x00007fa5c5045d1b:   and    %r10d,%ecx
  0x00007fa5c5045d1e:   and    %r11d,%r12d
  0x00007fa5c5045d21:   add    %r13d,%r15d
  0x00007fa5c5045d24:   add    %r8d,%eax
  0x00007fa5c5045d27:   or     %r12d,%ecx
  0x00007fa5c5045d2a:   add    %r14d,%r8d
  0x00007fa5c5045d2d:   add    %r15d,%eax
  0x00007fa5c5045d30:   add    %r15d,%r8d
  0x00007fa5c5045d33:   add    %ecx,%r8d
  0x00007fa5c5045d36:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007fa5c5045d3c:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007fa5c5045d42:   mov    %ebx,%r15d
  0x00007fa5c5045d45:   rorx   $0x19,%eax,%r13d
  0x00007fa5c5045d4b:   rorx   $0xb,%eax,%r14d
  0x00007fa5c5045d51:   xor    %edi,%r15d
  0x00007fa5c5045d54:   xor    %r14d,%r13d
  0x00007fa5c5045d57:   rorx   $0x6,%eax,%r14d
  0x00007fa5c5045d5d:   and    %eax,%r15d
  0x00007fa5c5045d60:   xor    %r14d,%r13d
  0x00007fa5c5045d63:   rorx   $0xd,%r8d,%r12d
  0x00007fa5c5045d69:   xor    %edi,%r15d
  0x00007fa5c5045d6c:   rorx   $0x16,%r8d,%r14d
  0x00007fa5c5045d72:   mov    %r8d,%ecx
  0x00007fa5c5045d75:   xor    %r12d,%r14d
  0x00007fa5c5045d78:   rorx   $0x2,%r8d,%r12d
  0x00007fa5c5045d7e:   add    0x20(%rsp,%rdx,1),%esi
  0x00007fa5c5045d82:   or     %r10d,%ecx
  0x00007fa5c5045d85:   xor    %r12d,%r14d
  0x00007fa5c5045d88:   mov    %r8d,%r12d
  0x00007fa5c5045d8b:   and    %r9d,%ecx
  0x00007fa5c5045d8e:   and    %r10d,%r12d
  0x00007fa5c5045d91:   add    %r13d,%r15d
  0x00007fa5c5045d94:   add    %esi,%r11d
  0x00007fa5c5045d97:   or     %r12d,%ecx
  0x00007fa5c5045d9a:   add    %r14d,%esi
  0x00007fa5c5045d9d:   add    %r15d,%r11d
  0x00007fa5c5045da0:   add    %r15d,%esi
  0x00007fa5c5045da3:   mov    %eax,%r15d
  0x00007fa5c5045da6:   rorx   $0x19,%r11d,%r13d
  0x00007fa5c5045dac:   rorx   $0xb,%r11d,%r14d
  0x00007fa5c5045db2:   xor    %ebx,%r15d
  0x00007fa5c5045db5:   xor    %r14d,%r13d
  0x00007fa5c5045db8:   rorx   $0x6,%r11d,%r14d
  0x00007fa5c5045dbe:   and    %r11d,%r15d
  0x00007fa5c5045dc1:   add    %ecx,%esi
  0x00007fa5c5045dc3:   xor    %r14d,%r13d
  0x00007fa5c5045dc6:   rorx   $0xd,%esi,%r12d
  0x00007fa5c5045dcc:   xor    %ebx,%r15d
  0x00007fa5c5045dcf:   rorx   $0x16,%esi,%r14d
  0x00007fa5c5045dd5:   mov    %esi,%ecx
  0x00007fa5c5045dd7:   xor    %r12d,%r14d
  0x00007fa5c5045dda:   rorx   $0x2,%esi,%r12d
  0x00007fa5c5045de0:   add    0x24(%rsp,%rdx,1),%edi
  0x00007fa5c5045de4:   or     %r9d,%ecx
  0x00007fa5c5045de7:   xor    %r12d,%r14d
  0x00007fa5c5045dea:   mov    %esi,%r12d
  0x00007fa5c5045ded:   and    %r8d,%ecx
  0x00007fa5c5045df0:   and    %r9d,%r12d
  0x00007fa5c5045df3:   add    %r13d,%r15d
  0x00007fa5c5045df6:   add    %edi,%r10d
  0x00007fa5c5045df9:   or     %r12d,%ecx
  0x00007fa5c5045dfc:   add    %r14d,%edi
  0x00007fa5c5045dff:   add    %r15d,%r10d
  0x00007fa5c5045e02:   add    %r15d,%edi
  0x00007fa5c5045e05:   mov    %r11d,%r15d
  0x00007fa5c5045e08:   rorx   $0x19,%r10d,%r13d
  0x00007fa5c5045e0e:   rorx   $0xb,%r10d,%r14d
  0x00007fa5c5045e14:   xor    %eax,%r15d
  0x00007fa5c5045e17:   xor    %r14d,%r13d
  0x00007fa5c5045e1a:   rorx   $0x6,%r10d,%r14d
  0x00007fa5c5045e20:   and    %r10d,%r15d
  0x00007fa5c5045e23:   add    %ecx,%edi
  0x00007fa5c5045e25:   xor    %r14d,%r13d
  0x00007fa5c5045e28:   rorx   $0xd,%edi,%r12d
  0x00007fa5c5045e2e:   xor    %eax,%r15d
  0x00007fa5c5045e31:   rorx   $0x16,%edi,%r14d
  0x00007fa5c5045e37:   mov    %edi,%ecx
  0x00007fa5c5045e39:   xor    %r12d,%r14d
  0x00007fa5c5045e3c:   rorx   $0x2,%edi,%r12d
  0x00007fa5c5045e42:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007fa5c5045e46:   or     %r8d,%ecx
  0x00007fa5c5045e49:   xor    %r12d,%r14d
  0x00007fa5c5045e4c:   mov    %edi,%r12d
  0x00007fa5c5045e4f:   and    %esi,%ecx
  0x00007fa5c5045e51:   and    %r8d,%r12d
  0x00007fa5c5045e54:   add    %r13d,%r15d
  0x00007fa5c5045e57:   add    %ebx,%r9d
  0x00007fa5c5045e5a:   or     %r12d,%ecx
  0x00007fa5c5045e5d:   add    %r14d,%ebx
  0x00007fa5c5045e60:   add    %r15d,%r9d
  0x00007fa5c5045e63:   add    %r15d,%ebx
  0x00007fa5c5045e66:   mov    %r10d,%r15d
  0x00007fa5c5045e69:   rorx   $0x19,%r9d,%r13d
  0x00007fa5c5045e6f:   rorx   $0xb,%r9d,%r14d
  0x00007fa5c5045e75:   xor    %r11d,%r15d
  0x00007fa5c5045e78:   xor    %r14d,%r13d
  0x00007fa5c5045e7b:   rorx   $0x6,%r9d,%r14d
  0x00007fa5c5045e81:   and    %r9d,%r15d
  0x00007fa5c5045e84:   add    %ecx,%ebx
  0x00007fa5c5045e86:   xor    %r14d,%r13d
  0x00007fa5c5045e89:   rorx   $0xd,%ebx,%r12d
  0x00007fa5c5045e8f:   xor    %r11d,%r15d
  0x00007fa5c5045e92:   rorx   $0x16,%ebx,%r14d
  0x00007fa5c5045e98:   mov    %ebx,%ecx
  0x00007fa5c5045e9a:   xor    %r12d,%r14d
  0x00007fa5c5045e9d:   rorx   $0x2,%ebx,%r12d
  0x00007fa5c5045ea3:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007fa5c5045ea7:   or     %esi,%ecx
  0x00007fa5c5045ea9:   xor    %r12d,%r14d
  0x00007fa5c5045eac:   mov    %ebx,%r12d
  0x00007fa5c5045eaf:   and    %edi,%ecx
  0x00007fa5c5045eb1:   and    %esi,%r12d
  0x00007fa5c5045eb4:   add    %r13d,%r15d
  0x00007fa5c5045eb7:   add    %eax,%r8d
  0x00007fa5c5045eba:   or     %r12d,%ecx
  0x00007fa5c5045ebd:   add    %r14d,%eax
  0x00007fa5c5045ec0:   add    %r15d,%r8d
  0x00007fa5c5045ec3:   add    %r15d,%eax
  0x00007fa5c5045ec6:   add    %ecx,%eax
  0x00007fa5c5045ec8:   add    $0x40,%rdx
  0x00007fa5c5045ecc:   vmovdqu %ymm6,%ymm4
  0x00007fa5c5045ed0:   vmovdqu %ymm7,%ymm5
  0x00007fa5c5045ed4:   cmp    $0x200,%rdx
  0x00007fa5c5045edb:   jb     Stub::sha256_implCompress+2430 0x00007fa5c5045b9e
  0x00007fa5c5045ee1:   mov    0x210(%rsp),%rdx
  0x00007fa5c5045ee9:   mov    0x208(%rsp),%rcx
  0x00007fa5c5045ef1:   add    (%rdx),%eax
  0x00007fa5c5045ef3:   mov    %eax,(%rdx)
  0x00007fa5c5045ef5:   add    0x4(%rdx),%ebx
  0x00007fa5c5045ef8:   mov    %ebx,0x4(%rdx)
  0x00007fa5c5045efb:   add    0x8(%rdx),%edi
  0x00007fa5c5045efe:   mov    %edi,0x8(%rdx)
  0x00007fa5c5045f01:   add    0xc(%rdx),%esi
  0x00007fa5c5045f04:   mov    %esi,0xc(%rdx)
  0x00007fa5c5045f07:   add    0x10(%rdx),%r8d
  0x00007fa5c5045f0b:   mov    %r8d,0x10(%rdx)
  0x00007fa5c5045f0f:   add    0x14(%rdx),%r9d
  0x00007fa5c5045f13:   mov    %r9d,0x14(%rdx)
  0x00007fa5c5045f17:   add    0x18(%rdx),%r10d
  0x00007fa5c5045f1b:   mov    %r10d,0x18(%rdx)
  0x00007fa5c5045f1f:   add    0x1c(%rdx),%r11d
  0x00007fa5c5045f23:   mov    %r11d,0x1c(%rdx)
  0x00007fa5c5045f27:   cmp    0x200(%rsp),%rcx
  0x00007fa5c5045f2f:   ja     Stub::sha256_implCompress+4370 0x00007fa5c5046332
  0x00007fa5c5045f35:   xor    %rdx,%rdx
  0x00007fa5c5045f38:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c5045f40:   mov    %r9d,%r15d
  0x00007fa5c5045f43:   rorx   $0x19,%r8d,%r13d
  0x00007fa5c5045f49:   rorx   $0xb,%r8d,%r14d
  0x00007fa5c5045f4f:   xor    %r10d,%r15d
  0x00007fa5c5045f52:   xor    %r14d,%r13d
  0x00007fa5c5045f55:   rorx   $0x6,%r8d,%r14d
  0x00007fa5c5045f5b:   and    %r8d,%r15d
  0x00007fa5c5045f5e:   xor    %r14d,%r13d
  0x00007fa5c5045f61:   rorx   $0xd,%eax,%r12d
  0x00007fa5c5045f67:   xor    %r10d,%r15d
  0x00007fa5c5045f6a:   rorx   $0x16,%eax,%r14d
  0x00007fa5c5045f70:   mov    %eax,%ecx
  0x00007fa5c5045f72:   xor    %r12d,%r14d
  0x00007fa5c5045f75:   rorx   $0x2,%eax,%r12d
  0x00007fa5c5045f7b:   add    0x10(%rsp,%rdx,1),%r11d
  0x00007fa5c5045f80:   or     %edi,%ecx
  0x00007fa5c5045f82:   xor    %r12d,%r14d
  0x00007fa5c5045f85:   mov    %eax,%r12d
  0x00007fa5c5045f88:   and    %ebx,%ecx
  0x00007fa5c5045f8a:   and    %edi,%r12d
  0x00007fa5c5045f8d:   add    %r13d,%r15d
  0x00007fa5c5045f90:   add    %r11d,%esi
  0x00007fa5c5045f93:   or     %r12d,%ecx
  0x00007fa5c5045f96:   add    %r14d,%r11d
  0x00007fa5c5045f99:   add    %r15d,%esi
  0x00007fa5c5045f9c:   add    %r15d,%r11d
  0x00007fa5c5045f9f:   mov    %r8d,%r15d
  0x00007fa5c5045fa2:   rorx   $0x19,%esi,%r13d
  0x00007fa5c5045fa8:   rorx   $0xb,%esi,%r14d
  0x00007fa5c5045fae:   xor    %r9d,%r15d
  0x00007fa5c5045fb1:   xor    %r14d,%r13d
  0x00007fa5c5045fb4:   rorx   $0x6,%esi,%r14d
  0x00007fa5c5045fba:   and    %esi,%r15d
  0x00007fa5c5045fbd:   add    %ecx,%r11d
  0x00007fa5c5045fc0:   xor    %r14d,%r13d
  0x00007fa5c5045fc3:   rorx   $0xd,%r11d,%r12d
  0x00007fa5c5045fc9:   xor    %r9d,%r15d
  0x00007fa5c5045fcc:   rorx   $0x16,%r11d,%r14d
  0x00007fa5c5045fd2:   mov    %r11d,%ecx
  0x00007fa5c5045fd5:   xor    %r12d,%r14d
  0x00007fa5c5045fd8:   rorx   $0x2,%r11d,%r12d
  0x00007fa5c5045fde:   add    0x14(%rsp,%rdx,1),%r10d
  0x00007fa5c5045fe3:   or     %ebx,%ecx
  0x00007fa5c5045fe5:   xor    %r12d,%r14d
  0x00007fa5c5045fe8:   mov    %r11d,%r12d
  0x00007fa5c5045feb:   and    %eax,%ecx
  0x00007fa5c5045fed:   and    %ebx,%r12d
  0x00007fa5c5045ff0:   add    %r13d,%r15d
  0x00007fa5c5045ff3:   add    %r10d,%edi
  0x00007fa5c5045ff6:   or     %r12d,%ecx
  0x00007fa5c5045ff9:   add    %r14d,%r10d
  0x00007fa5c5045ffc:   add    %r15d,%edi
  0x00007fa5c5045fff:   add    %r15d,%r10d
  0x00007fa5c5046002:   mov    %esi,%r15d
  0x00007fa5c5046005:   rorx   $0x19,%edi,%r13d
  0x00007fa5c504600b:   rorx   $0xb,%edi,%r14d
  0x00007fa5c5046011:   xor    %r8d,%r15d
  0x00007fa5c5046014:   xor    %r14d,%r13d
  0x00007fa5c5046017:   rorx   $0x6,%edi,%r14d
  0x00007fa5c504601d:   and    %edi,%r15d
  0x00007fa5c5046020:   add    %ecx,%r10d
  0x00007fa5c5046023:   xor    %r14d,%r13d
  0x00007fa5c5046026:   rorx   $0xd,%r10d,%r12d
  0x00007fa5c504602c:   xor    %r8d,%r15d
  0x00007fa5c504602f:   rorx   $0x16,%r10d,%r14d
  0x00007fa5c5046035:   mov    %r10d,%ecx
  0x00007fa5c5046038:   xor    %r12d,%r14d
  0x00007fa5c504603b:   rorx   $0x2,%r10d,%r12d
  0x00007fa5c5046041:   add    0x18(%rsp,%rdx,1),%r9d
  0x00007fa5c5046046:   or     %eax,%ecx
  0x00007fa5c5046048:   xor    %r12d,%r14d
  0x00007fa5c504604b:   mov    %r10d,%r12d
  0x00007fa5c504604e:   and    %r11d,%ecx
  0x00007fa5c5046051:   and    %eax,%r12d
  0x00007fa5c5046054:   add    %r13d,%r15d
  0x00007fa5c5046057:   add    %r9d,%ebx
  0x00007fa5c504605a:   or     %r12d,%ecx
  0x00007fa5c504605d:   add    %r14d,%r9d
  0x00007fa5c5046060:   add    %r15d,%ebx
  0x00007fa5c5046063:   add    %r15d,%r9d
  0x00007fa5c5046066:   mov    %edi,%r15d
  0x00007fa5c5046069:   rorx   $0x19,%ebx,%r13d
  0x00007fa5c504606f:   rorx   $0xb,%ebx,%r14d
  0x00007fa5c5046075:   xor    %esi,%r15d
  0x00007fa5c5046078:   xor    %r14d,%r13d
  0x00007fa5c504607b:   rorx   $0x6,%ebx,%r14d
  0x00007fa5c5046081:   and    %ebx,%r15d
  0x00007fa5c5046084:   add    %ecx,%r9d
  0x00007fa5c5046087:   xor    %r14d,%r13d
  0x00007fa5c504608a:   rorx   $0xd,%r9d,%r12d
  0x00007fa5c5046090:   xor    %esi,%r15d
  0x00007fa5c5046093:   rorx   $0x16,%r9d,%r14d
  0x00007fa5c5046099:   mov    %r9d,%ecx
  0x00007fa5c504609c:   xor    %r12d,%r14d
  0x00007fa5c504609f:   rorx   $0x2,%r9d,%r12d
  0x00007fa5c50460a5:   add    0x1c(%rsp,%rdx,1),%r8d
  0x00007fa5c50460aa:   or     %r11d,%ecx
  0x00007fa5c50460ad:   xor    %r12d,%r14d
  0x00007fa5c50460b0:   mov    %r9d,%r12d
  0x00007fa5c50460b3:   and    %r10d,%ecx
  0x00007fa5c50460b6:   and    %r11d,%r12d
  0x00007fa5c50460b9:   add    %r13d,%r15d
  0x00007fa5c50460bc:   add    %r8d,%eax
  0x00007fa5c50460bf:   or     %r12d,%ecx
  0x00007fa5c50460c2:   add    %r14d,%r8d
  0x00007fa5c50460c5:   add    %r15d,%eax
  0x00007fa5c50460c8:   add    %r15d,%r8d
  0x00007fa5c50460cb:   add    %ecx,%r8d
  0x00007fa5c50460ce:   mov    %ebx,%r15d
  0x00007fa5c50460d1:   rorx   $0x19,%eax,%r13d
  0x00007fa5c50460d7:   rorx   $0xb,%eax,%r14d
  0x00007fa5c50460dd:   xor    %edi,%r15d
  0x00007fa5c50460e0:   xor    %r14d,%r13d
  0x00007fa5c50460e3:   rorx   $0x6,%eax,%r14d
  0x00007fa5c50460e9:   and    %eax,%r15d
  0x00007fa5c50460ec:   xor    %r14d,%r13d
  0x00007fa5c50460ef:   rorx   $0xd,%r8d,%r12d
  0x00007fa5c50460f5:   xor    %edi,%r15d
  0x00007fa5c50460f8:   rorx   $0x16,%r8d,%r14d
  0x00007fa5c50460fe:   mov    %r8d,%ecx
  0x00007fa5c5046101:   xor    %r12d,%r14d
  0x00007fa5c5046104:   rorx   $0x2,%r8d,%r12d
  0x00007fa5c504610a:   add    0x30(%rsp,%rdx,1),%esi
  0x00007fa5c504610e:   or     %r10d,%ecx
  0x00007fa5c5046111:   xor    %r12d,%r14d
  0x00007fa5c5046114:   mov    %r8d,%r12d
  0x00007fa5c5046117:   and    %r9d,%ecx
  0x00007fa5c504611a:   and    %r10d,%r12d
  0x00007fa5c504611d:   add    %r13d,%r15d
  0x00007fa5c5046120:   add    %esi,%r11d
  0x00007fa5c5046123:   or     %r12d,%ecx
  0x00007fa5c5046126:   add    %r14d,%esi
  0x00007fa5c5046129:   add    %r15d,%r11d
  0x00007fa5c504612c:   add    %r15d,%esi
  0x00007fa5c504612f:   mov    %eax,%r15d
  0x00007fa5c5046132:   rorx   $0x19,%r11d,%r13d
  0x00007fa5c5046138:   rorx   $0xb,%r11d,%r14d
  0x00007fa5c504613e:   xor    %ebx,%r15d
  0x00007fa5c5046141:   xor    %r14d,%r13d
  0x00007fa5c5046144:   rorx   $0x6,%r11d,%r14d
  0x00007fa5c504614a:   and    %r11d,%r15d
  0x00007fa5c504614d:   add    %ecx,%esi
  0x00007fa5c504614f:   xor    %r14d,%r13d
  0x00007fa5c5046152:   rorx   $0xd,%esi,%r12d
  0x00007fa5c5046158:   xor    %ebx,%r15d
  0x00007fa5c504615b:   rorx   $0x16,%esi,%r14d
  0x00007fa5c5046161:   mov    %esi,%ecx
  0x00007fa5c5046163:   xor    %r12d,%r14d
  0x00007fa5c5046166:   rorx   $0x2,%esi,%r12d
  0x00007fa5c504616c:   add    0x34(%rsp,%rdx,1),%edi
  0x00007fa5c5046170:   or     %r9d,%ecx
  0x00007fa5c5046173:   xor    %r12d,%r14d
  0x00007fa5c5046176:   mov    %esi,%r12d
  0x00007fa5c5046179:   and    %r8d,%ecx
  0x00007fa5c504617c:   and    %r9d,%r12d
  0x00007fa5c504617f:   add    %r13d,%r15d
  0x00007fa5c5046182:   add    %edi,%r10d
  0x00007fa5c5046185:   or     %r12d,%ecx
  0x00007fa5c5046188:   add    %r14d,%edi
  0x00007fa5c504618b:   add    %r15d,%r10d
  0x00007fa5c504618e:   add    %r15d,%edi
  0x00007fa5c5046191:   mov    %r11d,%r15d
  0x00007fa5c5046194:   rorx   $0x19,%r10d,%r13d
  0x00007fa5c504619a:   rorx   $0xb,%r10d,%r14d
  0x00007fa5c50461a0:   xor    %eax,%r15d
  0x00007fa5c50461a3:   xor    %r14d,%r13d
  0x00007fa5c50461a6:   rorx   $0x6,%r10d,%r14d
  0x00007fa5c50461ac:   and    %r10d,%r15d
  0x00007fa5c50461af:   add    %ecx,%edi
  0x00007fa5c50461b1:   xor    %r14d,%r13d
  0x00007fa5c50461b4:   rorx   $0xd,%edi,%r12d
  0x00007fa5c50461ba:   xor    %eax,%r15d
  0x00007fa5c50461bd:   rorx   $0x16,%edi,%r14d
  0x00007fa5c50461c3:   mov    %edi,%ecx
  0x00007fa5c50461c5:   xor    %r12d,%r14d
  0x00007fa5c50461c8:   rorx   $0x2,%edi,%r12d
  0x00007fa5c50461ce:   add    0x38(%rsp,%rdx,1),%ebx
  0x00007fa5c50461d2:   or     %r8d,%ecx
  0x00007fa5c50461d5:   xor    %r12d,%r14d
  0x00007fa5c50461d8:   mov    %edi,%r12d
  0x00007fa5c50461db:   and    %esi,%ecx
  0x00007fa5c50461dd:   and    %r8d,%r12d
  0x00007fa5c50461e0:   add    %r13d,%r15d
  0x00007fa5c50461e3:   add    %ebx,%r9d
  0x00007fa5c50461e6:   or     %r12d,%ecx
  0x00007fa5c50461e9:   add    %r14d,%ebx
  0x00007fa5c50461ec:   add    %r15d,%r9d
  0x00007fa5c50461ef:   add    %r15d,%ebx
  0x00007fa5c50461f2:   mov    %r10d,%r15d
  0x00007fa5c50461f5:   rorx   $0x19,%r9d,%r13d
  0x00007fa5c50461fb:   rorx   $0xb,%r9d,%r14d
  0x00007fa5c5046201:   xor    %r11d,%r15d
  0x00007fa5c5046204:   xor    %r14d,%r13d
  0x00007fa5c5046207:   rorx   $0x6,%r9d,%r14d
  0x00007fa5c504620d:   and    %r9d,%r15d
  0x00007fa5c5046210:   add    %ecx,%ebx
  0x00007fa5c5046212:   xor    %r14d,%r13d
  0x00007fa5c5046215:   rorx   $0xd,%ebx,%r12d
  0x00007fa5c504621b:   xor    %r11d,%r15d
  0x00007fa5c504621e:   rorx   $0x16,%ebx,%r14d
  0x00007fa5c5046224:   mov    %ebx,%ecx
  0x00007fa5c5046226:   xor    %r12d,%r14d
  0x00007fa5c5046229:   rorx   $0x2,%ebx,%r12d
  0x00007fa5c504622f:   add    0x3c(%rsp,%rdx,1),%eax
  0x00007fa5c5046233:   or     %esi,%ecx
  0x00007fa5c5046235:   xor    %r12d,%r14d
  0x00007fa5c5046238:   mov    %ebx,%r12d
  0x00007fa5c504623b:   and    %edi,%ecx
  0x00007fa5c504623d:   and    %esi,%r12d
  0x00007fa5c5046240:   add    %r13d,%r15d
  0x00007fa5c5046243:   add    %eax,%r8d
  0x00007fa5c5046246:   or     %r12d,%ecx
  0x00007fa5c5046249:   add    %r14d,%eax
  0x00007fa5c504624c:   add    %r15d,%r8d
  0x00007fa5c504624f:   add    %r15d,%eax
  0x00007fa5c5046252:   add    %ecx,%eax
  0x00007fa5c5046254:   add    $0x40,%rdx
  0x00007fa5c5046258:   cmp    $0x200,%rdx
  0x00007fa5c504625f:   jb     Stub::sha256_implCompress+3360 0x00007fa5c5045f40
  0x00007fa5c5046265:   mov    0x210(%rsp),%rdx
  0x00007fa5c504626d:   mov    0x208(%rsp),%rcx
  0x00007fa5c5046275:   add    $0x40,%rcx
  0x00007fa5c5046279:   add    (%rdx),%eax
  0x00007fa5c504627b:   mov    %eax,(%rdx)
  0x00007fa5c504627d:   add    0x4(%rdx),%ebx
  0x00007fa5c5046280:   mov    %ebx,0x4(%rdx)
  0x00007fa5c5046283:   add    0x8(%rdx),%edi
  0x00007fa5c5046286:   mov    %edi,0x8(%rdx)
  0x00007fa5c5046289:   add    0xc(%rdx),%esi
  0x00007fa5c504628c:   mov    %esi,0xc(%rdx)
  0x00007fa5c504628f:   add    0x10(%rdx),%r8d
  0x00007fa5c5046293:   mov    %r8d,0x10(%rdx)
  0x00007fa5c5046297:   add    0x14(%rdx),%r9d
  0x00007fa5c504629b:   mov    %r9d,0x14(%rdx)
  0x00007fa5c504629f:   add    0x18(%rdx),%r10d
  0x00007fa5c50462a3:   mov    %r10d,0x18(%rdx)
  0x00007fa5c50462a7:   add    0x1c(%rdx),%r11d
  0x00007fa5c50462ab:   mov    %r11d,0x1c(%rdx)
  0x00007fa5c50462af:   cmp    0x200(%rsp),%rcx
  0x00007fa5c50462b7:   jb     Stub::sha256_implCompress+148 0x00007fa5c50452b4
  0x00007fa5c50462bd:   ja     Stub::sha256_implCompress+4370 0x00007fa5c5046332
  0x00007fa5c50462bf:   movabs $0x7fa5ceac14c0,%rbp
  0x00007fa5c50462c9:   vmovdqu (%rcx),%xmm4
  0x00007fa5c50462cd:   vmovdqu 0x10(%rcx),%xmm5
  0x00007fa5c50462d2:   vmovdqu 0x20(%rcx),%xmm6
  0x00007fa5c50462d7:   vmovdqu 0x30(%rcx),%xmm7
  0x00007fa5c50462dc:   vpshufb %xmm13,%xmm4,%xmm4
  0x00007fa5c50462e1:   vpshufb %xmm13,%xmm5,%xmm5
  0x00007fa5c50462e6:   vpshufb %xmm13,%xmm6,%xmm6
  0x00007fa5c50462eb:   vpshufb %xmm13,%xmm7,%xmm7
  0x00007fa5c50462f0:   jmpq   Stub::sha256_implCompress+221 0x00007fa5c50452fd
  0x00007fa5c50462f5:   mov    (%rdx),%eax
  0x00007fa5c50462f7:   mov    0x4(%rdx),%ebx
  0x00007fa5c50462fa:   mov    0x8(%rdx),%edi
  0x00007fa5c50462fd:   mov    0xc(%rdx),%esi
  0x00007fa5c5046300:   mov    0x10(%rdx),%r8d
  0x00007fa5c5046304:   mov    0x14(%rdx),%r9d
  0x00007fa5c5046308:   mov    0x1c(%rdx),%r11d
  0x00007fa5c504630c:   vmovdqu -0x1154(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007fa5c5046314:   vmovdqu -0x113c(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007fa5c50451e0
  0x00007fa5c504631c:   vmovdqu -0x1124(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007fa5c5045200
  0x00007fa5c5046324:   mov    0x18(%rdx),%r10d
  0x00007fa5c5046328:   mov    %rdx,0x210(%rsp)
  0x00007fa5c5046330:   jmp    Stub::sha256_implCompress+4255 0x00007fa5c50462bf
  0x00007fa5c5046332:   mov    0x218(%rsp),%rsp
  0x00007fa5c504633a:   pop    %r15
  0x00007fa5c504633c:   pop    %r14
  0x00007fa5c504633e:   pop    %r13
  0x00007fa5c5046340:   pop    %r12
  0x00007fa5c5046342:   pop    %rbp
  0x00007fa5c5046343:   pop    %rbx
  0x00007fa5c5046344:   pop    %rdx
  0x00007fa5c5046345:   pop    %rcx
  0x00007fa5c5046346:   add    $0x20,%rsp
  0x00007fa5c504634a:   vzeroupper 
  0x00007fa5c504634d:   leaveq 
  0x00007fa5c504634e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha256_implCompressMB [0x00007fa5c5046360, 0x00007fa5c50474bd] (4445 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5046360:   push   %rbp
  0x00007fa5c5046361:   mov    %rsp,%rbp
  0x00007fa5c5046364:   sub    $0x20,%rsp
  0x00007fa5c5046368:   push   %rcx
  0x00007fa5c5046369:   push   %rdx
  0x00007fa5c504636a:   push   %rbx
  0x00007fa5c504636b:   push   %rbp
  0x00007fa5c504636c:   push   %r12
  0x00007fa5c504636e:   push   %r13
  0x00007fa5c5046370:   push   %r14
  0x00007fa5c5046372:   push   %r15
  0x00007fa5c5046374:   mov    %rsp,%rax
  0x00007fa5c5046377:   sub    $0x220,%rsp
  0x00007fa5c504637e:   and    $0xffffffffffffffe0,%rsp
  0x00007fa5c5046382:   mov    %rax,0x218(%rsp)
  0x00007fa5c504638a:   mov    %rcx,%r9
  0x00007fa5c504638d:   mov    %rdx,%r8
  0x00007fa5c5046390:   mov    %rsi,%rdx
  0x00007fa5c5046393:   mov    %rdi,%rcx
  0x00007fa5c5046396:   lea    (%rcx),%rcx
  0x00007fa5c5046399:   mov    %rdx,%rdx
  0x00007fa5c504639c:   xor    %rax,%rax
  0x00007fa5c504639f:   cmp    %r9,%r8
  0x00007fa5c50463a2:   jae    Stub::sha256_implCompressMB+78 0x00007fa5c50463ae
  0x00007fa5c50463a4:   add    $0x40,%r8
  0x00007fa5c50463a8:   add    $0x40,%rax
  0x00007fa5c50463ac:   jmp    Stub::sha256_implCompressMB+63 0x00007fa5c504639f
  0x00007fa5c50463ae:   mov    %rax,%r8
  0x00007fa5c50463b1:   cmp    $0x0,%r8
  0x00007fa5c50463b5:   je     Stub::sha256_implCompressMB+4402 0x00007fa5c5047492
  0x00007fa5c50463bb:   lea    -0x40(%rcx,%r8,1),%r8
  0x00007fa5c50463c0:   mov    %r8,0x200(%rsp)
  0x00007fa5c50463c8:   cmp    %r8,%rcx
  0x00007fa5c50463cb:   je     Stub::sha256_implCompressMB+4341 0x00007fa5c5047455
  0x00007fa5c50463d1:   mov    (%rdx),%eax
  0x00007fa5c50463d3:   mov    0x4(%rdx),%ebx
  0x00007fa5c50463d6:   mov    0x8(%rdx),%edi
  0x00007fa5c50463d9:   mov    0xc(%rdx),%esi
  0x00007fa5c50463dc:   mov    0x10(%rdx),%r8d
  0x00007fa5c50463e0:   mov    0x14(%rdx),%r9d
  0x00007fa5c50463e4:   mov    0x1c(%rdx),%r11d
  0x00007fa5c50463e8:   vmovdqu -0x1230(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007fa5c50463f0:   vmovdqu -0x1218(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007fa5c50451e0
  0x00007fa5c50463f8:   vmovdqu -0x1200(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007fa5c5045200
  0x00007fa5c5046400:   mov    0x18(%rdx),%r10d
  0x00007fa5c5046404:   mov    %rdx,0x210(%rsp)
  0x00007fa5c504640c:   movabs $0x7fa5ceac14c0,%rbp
  0x00007fa5c5046416:   vmovdqu (%rcx),%ymm0
  0x00007fa5c504641a:   vmovdqu 0x20(%rcx),%ymm1
  0x00007fa5c504641f:   vmovdqu 0x40(%rcx),%ymm2
  0x00007fa5c5046424:   vmovdqu 0x60(%rcx),%ymm3
  0x00007fa5c5046429:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007fa5c504642e:   vpshufb %ymm13,%ymm1,%ymm1
  0x00007fa5c5046433:   vpshufb %ymm13,%ymm2,%ymm2
  0x00007fa5c5046438:   vpshufb %ymm13,%ymm3,%ymm3
  0x00007fa5c504643d:   vperm2i128 $0x20,%ymm2,%ymm0,%ymm4
  0x00007fa5c5046443:   vperm2i128 $0x31,%ymm2,%ymm0,%ymm5
  0x00007fa5c5046449:   vperm2i128 $0x20,%ymm3,%ymm1,%ymm6
  0x00007fa5c504644f:   vperm2i128 $0x31,%ymm3,%ymm1,%ymm7
  0x00007fa5c5046455:   add    $0x40,%rcx
  0x00007fa5c5046459:   mov    %rcx,0x208(%rsp)
  0x00007fa5c5046461:   xor    %rdx,%rdx
  0x00007fa5c5046464:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c504646c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5046470:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007fa5c5046476:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007fa5c504647b:   mov    %eax,%ecx
  0x00007fa5c504647d:   rorx   $0x19,%r8d,%r13d
  0x00007fa5c5046483:   rorx   $0xb,%r8d,%r14d
  0x00007fa5c5046489:   add    (%rsp,%rdx,1),%r11d
  0x00007fa5c504648d:   or     %edi,%ecx
  0x00007fa5c504648f:   mov    %r9d,%r15d
  0x00007fa5c5046492:   rorx   $0xd,%eax,%r12d
  0x00007fa5c5046498:   xor    %r14d,%r13d
  0x00007fa5c504649b:   xor    %r10d,%r15d
  0x00007fa5c504649e:   rorx   $0x6,%r8d,%r14d
  0x00007fa5c50464a4:   and    %r8d,%r15d
  0x00007fa5c50464a7:   xor    %r14d,%r13d
  0x00007fa5c50464aa:   rorx   $0x16,%eax,%r14d
  0x00007fa5c50464b0:   add    %r11d,%esi
  0x00007fa5c50464b3:   and    %ebx,%ecx
  0x00007fa5c50464b5:   xor    %r12d,%r14d
  0x00007fa5c50464b8:   rorx   $0x2,%eax,%r12d
  0x00007fa5c50464be:   xor    %r10d,%r15d
  0x00007fa5c50464c1:   xor    %r12d,%r14d
  0x00007fa5c50464c4:   mov    %eax,%r12d
  0x00007fa5c50464c7:   and    %edi,%r12d
  0x00007fa5c50464ca:   add    %r13d,%r15d
  0x00007fa5c50464cd:   or     %r12d,%ecx
  0x00007fa5c50464d0:   add    %r14d,%r11d
  0x00007fa5c50464d3:   add    %r15d,%esi
  0x00007fa5c50464d6:   add    %r15d,%r11d
  0x00007fa5c50464d9:   add    %ecx,%r11d
  0x00007fa5c50464dc:   vpalignr $0x4,%ymm6,%ymm7,%ymm0
  0x00007fa5c50464e2:   vpaddd %ymm4,%ymm0,%ymm0
  0x00007fa5c50464e6:   vpalignr $0x4,%ymm4,%ymm5,%ymm1
  0x00007fa5c50464ec:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fa5c50464f1:   vpslld $0x19,%ymm1,%ymm3
  0x00007fa5c50464f6:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c50464fa:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fa5c50464ff:   mov    %r11d,%ecx
  0x00007fa5c5046502:   rorx   $0x19,%esi,%r13d
  0x00007fa5c5046508:   rorx   $0xb,%esi,%r14d
  0x00007fa5c504650e:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007fa5c5046513:   or     %ebx,%ecx
  0x00007fa5c5046515:   mov    %r8d,%r15d
  0x00007fa5c5046518:   rorx   $0xd,%r11d,%r12d
  0x00007fa5c504651e:   xor    %r14d,%r13d
  0x00007fa5c5046521:   xor    %r9d,%r15d
  0x00007fa5c5046524:   rorx   $0x6,%esi,%r14d
  0x00007fa5c504652a:   and    %esi,%r15d
  0x00007fa5c504652d:   xor    %r14d,%r13d
  0x00007fa5c5046530:   rorx   $0x16,%r11d,%r14d
  0x00007fa5c5046536:   add    %r10d,%edi
  0x00007fa5c5046539:   and    %eax,%ecx
  0x00007fa5c504653b:   xor    %r12d,%r14d
  0x00007fa5c504653e:   rorx   $0x2,%r11d,%r12d
  0x00007fa5c5046544:   xor    %r9d,%r15d
  0x00007fa5c5046547:   xor    %r12d,%r14d
  0x00007fa5c504654a:   mov    %r11d,%r12d
  0x00007fa5c504654d:   and    %ebx,%r12d
  0x00007fa5c5046550:   add    %r13d,%r15d
  0x00007fa5c5046553:   or     %r12d,%ecx
  0x00007fa5c5046556:   add    %r14d,%r10d
  0x00007fa5c5046559:   add    %r15d,%edi
  0x00007fa5c504655c:   add    %r15d,%r10d
  0x00007fa5c504655f:   add    %ecx,%r10d
  0x00007fa5c5046562:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fa5c5046567:   vpslld $0xe,%ymm1,%ymm1
  0x00007fa5c504656c:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fa5c5046570:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fa5c5046574:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fa5c5046579:   vpshufd $0xfa,%ymm7,%ymm2
  0x00007fa5c504657e:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fa5c5046582:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fa5c5046587:   mov    %r10d,%ecx
  0x00007fa5c504658a:   rorx   $0x19,%edi,%r13d
  0x00007fa5c5046590:   rorx   $0xb,%edi,%r14d
  0x00007fa5c5046596:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007fa5c504659b:   or     %eax,%ecx
  0x00007fa5c504659d:   mov    %esi,%r15d
  0x00007fa5c50465a0:   rorx   $0xd,%r10d,%r12d
  0x00007fa5c50465a6:   xor    %r14d,%r13d
  0x00007fa5c50465a9:   xor    %r8d,%r15d
  0x00007fa5c50465ac:   rorx   $0x6,%edi,%r14d
  0x00007fa5c50465b2:   and    %edi,%r15d
  0x00007fa5c50465b5:   xor    %r14d,%r13d
  0x00007fa5c50465b8:   rorx   $0x16,%r10d,%r14d
  0x00007fa5c50465be:   add    %r9d,%ebx
  0x00007fa5c50465c1:   and    %r11d,%ecx
  0x00007fa5c50465c4:   xor    %r12d,%r14d
  0x00007fa5c50465c7:   rorx   $0x2,%r10d,%r12d
  0x00007fa5c50465cd:   xor    %r8d,%r15d
  0x00007fa5c50465d0:   xor    %r12d,%r14d
  0x00007fa5c50465d3:   mov    %r10d,%r12d
  0x00007fa5c50465d6:   and    %eax,%r12d
  0x00007fa5c50465d9:   add    %r13d,%r15d
  0x00007fa5c50465dc:   or     %r12d,%ecx
  0x00007fa5c50465df:   add    %r14d,%r9d
  0x00007fa5c50465e2:   add    %r15d,%ebx
  0x00007fa5c50465e5:   add    %r15d,%r9d
  0x00007fa5c50465e8:   add    %ecx,%r9d
  0x00007fa5c50465eb:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c50465f0:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c50465f5:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c50465f9:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fa5c50465fd:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fa5c5046602:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fa5c5046607:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fa5c504660c:   mov    %r9d,%ecx
  0x00007fa5c504660f:   rorx   $0x19,%ebx,%r13d
  0x00007fa5c5046615:   rorx   $0xb,%ebx,%r14d
  0x00007fa5c504661b:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007fa5c5046620:   or     %r11d,%ecx
  0x00007fa5c5046623:   mov    %edi,%r15d
  0x00007fa5c5046626:   rorx   $0xd,%r9d,%r12d
  0x00007fa5c504662c:   xor    %r14d,%r13d
  0x00007fa5c504662f:   xor    %esi,%r15d
  0x00007fa5c5046632:   rorx   $0x6,%ebx,%r14d
  0x00007fa5c5046638:   and    %ebx,%r15d
  0x00007fa5c504663b:   xor    %r14d,%r13d
  0x00007fa5c504663e:   rorx   $0x16,%r9d,%r14d
  0x00007fa5c5046644:   add    %r8d,%eax
  0x00007fa5c5046647:   and    %r10d,%ecx
  0x00007fa5c504664a:   xor    %r12d,%r14d
  0x00007fa5c504664d:   rorx   $0x2,%r9d,%r12d
  0x00007fa5c5046653:   xor    %esi,%r15d
  0x00007fa5c5046656:   xor    %r12d,%r14d
  0x00007fa5c5046659:   mov    %r9d,%r12d
  0x00007fa5c504665c:   and    %r11d,%r12d
  0x00007fa5c504665f:   add    %r13d,%r15d
  0x00007fa5c5046662:   or     %r12d,%ecx
  0x00007fa5c5046665:   add    %r14d,%r8d
  0x00007fa5c5046668:   add    %r15d,%eax
  0x00007fa5c504666b:   add    %r15d,%r8d
  0x00007fa5c504666e:   add    %ecx,%r8d
  0x00007fa5c5046671:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fa5c5046676:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c504667b:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c5046680:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c5046684:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fa5c5046688:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fa5c504668d:   vpaddd %ymm0,%ymm11,%ymm4
  0x00007fa5c5046691:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007fa5c5046697:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007fa5c504669d:   mov    %r8d,%ecx
  0x00007fa5c50466a0:   rorx   $0x19,%eax,%r13d
  0x00007fa5c50466a6:   rorx   $0xb,%eax,%r14d
  0x00007fa5c50466ac:   add    0x20(%rsp,%rdx,1),%esi
  0x00007fa5c50466b0:   or     %r10d,%ecx
  0x00007fa5c50466b3:   mov    %ebx,%r15d
  0x00007fa5c50466b6:   rorx   $0xd,%r8d,%r12d
  0x00007fa5c50466bc:   xor    %r14d,%r13d
  0x00007fa5c50466bf:   xor    %edi,%r15d
  0x00007fa5c50466c2:   rorx   $0x6,%eax,%r14d
  0x00007fa5c50466c8:   and    %eax,%r15d
  0x00007fa5c50466cb:   xor    %r14d,%r13d
  0x00007fa5c50466ce:   rorx   $0x16,%r8d,%r14d
  0x00007fa5c50466d4:   add    %esi,%r11d
  0x00007fa5c50466d7:   and    %r9d,%ecx
  0x00007fa5c50466da:   xor    %r12d,%r14d
  0x00007fa5c50466dd:   rorx   $0x2,%r8d,%r12d
  0x00007fa5c50466e3:   xor    %edi,%r15d
  0x00007fa5c50466e6:   xor    %r12d,%r14d
  0x00007fa5c50466e9:   mov    %r8d,%r12d
  0x00007fa5c50466ec:   and    %r10d,%r12d
  0x00007fa5c50466ef:   add    %r13d,%r15d
  0x00007fa5c50466f2:   or     %r12d,%ecx
  0x00007fa5c50466f5:   add    %r14d,%esi
  0x00007fa5c50466f8:   add    %r15d,%r11d
  0x00007fa5c50466fb:   add    %r15d,%esi
  0x00007fa5c50466fe:   add    %ecx,%esi
  0x00007fa5c5046700:   vpalignr $0x4,%ymm7,%ymm4,%ymm0
  0x00007fa5c5046706:   vpaddd %ymm5,%ymm0,%ymm0
  0x00007fa5c504670a:   vpalignr $0x4,%ymm5,%ymm6,%ymm1
  0x00007fa5c5046710:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fa5c5046715:   vpslld $0x19,%ymm1,%ymm3
  0x00007fa5c504671a:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c504671e:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fa5c5046723:   mov    %esi,%ecx
  0x00007fa5c5046725:   rorx   $0x19,%r11d,%r13d
  0x00007fa5c504672b:   rorx   $0xb,%r11d,%r14d
  0x00007fa5c5046731:   add    0x24(%rsp,%rdx,1),%edi
  0x00007fa5c5046735:   or     %r9d,%ecx
  0x00007fa5c5046738:   mov    %eax,%r15d
  0x00007fa5c504673b:   rorx   $0xd,%esi,%r12d
  0x00007fa5c5046741:   xor    %r14d,%r13d
  0x00007fa5c5046744:   xor    %ebx,%r15d
  0x00007fa5c5046747:   rorx   $0x6,%r11d,%r14d
  0x00007fa5c504674d:   and    %r11d,%r15d
  0x00007fa5c5046750:   xor    %r14d,%r13d
  0x00007fa5c5046753:   rorx   $0x16,%esi,%r14d
  0x00007fa5c5046759:   add    %edi,%r10d
  0x00007fa5c504675c:   and    %r8d,%ecx
  0x00007fa5c504675f:   xor    %r12d,%r14d
  0x00007fa5c5046762:   rorx   $0x2,%esi,%r12d
  0x00007fa5c5046768:   xor    %ebx,%r15d
  0x00007fa5c504676b:   xor    %r12d,%r14d
  0x00007fa5c504676e:   mov    %esi,%r12d
  0x00007fa5c5046771:   and    %r9d,%r12d
  0x00007fa5c5046774:   add    %r13d,%r15d
  0x00007fa5c5046777:   or     %r12d,%ecx
  0x00007fa5c504677a:   add    %r14d,%edi
  0x00007fa5c504677d:   add    %r15d,%r10d
  0x00007fa5c5046780:   add    %r15d,%edi
  0x00007fa5c5046783:   add    %ecx,%edi
  0x00007fa5c5046785:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fa5c504678a:   vpslld $0xe,%ymm1,%ymm1
  0x00007fa5c504678f:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fa5c5046793:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fa5c5046797:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fa5c504679c:   vpshufd $0xfa,%ymm4,%ymm2
  0x00007fa5c50467a1:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fa5c50467a5:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fa5c50467aa:   mov    %edi,%ecx
  0x00007fa5c50467ac:   rorx   $0x19,%r10d,%r13d
  0x00007fa5c50467b2:   rorx   $0xb,%r10d,%r14d
  0x00007fa5c50467b8:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007fa5c50467bc:   or     %r8d,%ecx
  0x00007fa5c50467bf:   mov    %r11d,%r15d
  0x00007fa5c50467c2:   rorx   $0xd,%edi,%r12d
  0x00007fa5c50467c8:   xor    %r14d,%r13d
  0x00007fa5c50467cb:   xor    %eax,%r15d
  0x00007fa5c50467ce:   rorx   $0x6,%r10d,%r14d
  0x00007fa5c50467d4:   and    %r10d,%r15d
  0x00007fa5c50467d7:   xor    %r14d,%r13d
  0x00007fa5c50467da:   rorx   $0x16,%edi,%r14d
  0x00007fa5c50467e0:   add    %ebx,%r9d
  0x00007fa5c50467e3:   and    %esi,%ecx
  0x00007fa5c50467e5:   xor    %r12d,%r14d
  0x00007fa5c50467e8:   rorx   $0x2,%edi,%r12d
  0x00007fa5c50467ee:   xor    %eax,%r15d
  0x00007fa5c50467f1:   xor    %r12d,%r14d
  0x00007fa5c50467f4:   mov    %edi,%r12d
  0x00007fa5c50467f7:   and    %r8d,%r12d
  0x00007fa5c50467fa:   add    %r13d,%r15d
  0x00007fa5c50467fd:   or     %r12d,%ecx
  0x00007fa5c5046800:   add    %r14d,%ebx
  0x00007fa5c5046803:   add    %r15d,%r9d
  0x00007fa5c5046806:   add    %r15d,%ebx
  0x00007fa5c5046809:   add    %ecx,%ebx
  0x00007fa5c504680b:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5046810:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c5046815:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c5046819:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fa5c504681d:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fa5c5046822:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fa5c5046827:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fa5c504682c:   mov    %ebx,%ecx
  0x00007fa5c504682e:   rorx   $0x19,%r9d,%r13d
  0x00007fa5c5046834:   rorx   $0xb,%r9d,%r14d
  0x00007fa5c504683a:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007fa5c504683e:   or     %esi,%ecx
  0x00007fa5c5046840:   mov    %r10d,%r15d
  0x00007fa5c5046843:   rorx   $0xd,%ebx,%r12d
  0x00007fa5c5046849:   xor    %r14d,%r13d
  0x00007fa5c504684c:   xor    %r11d,%r15d
  0x00007fa5c504684f:   rorx   $0x6,%r9d,%r14d
  0x00007fa5c5046855:   and    %r9d,%r15d
  0x00007fa5c5046858:   xor    %r14d,%r13d
  0x00007fa5c504685b:   rorx   $0x16,%ebx,%r14d
  0x00007fa5c5046861:   add    %eax,%r8d
  0x00007fa5c5046864:   and    %edi,%ecx
  0x00007fa5c5046866:   xor    %r12d,%r14d
  0x00007fa5c5046869:   rorx   $0x2,%ebx,%r12d
  0x00007fa5c504686f:   xor    %r11d,%r15d
  0x00007fa5c5046872:   xor    %r12d,%r14d
  0x00007fa5c5046875:   mov    %ebx,%r12d
  0x00007fa5c5046878:   and    %esi,%r12d
  0x00007fa5c504687b:   add    %r13d,%r15d
  0x00007fa5c504687e:   or     %r12d,%ecx
  0x00007fa5c5046881:   add    %r14d,%eax
  0x00007fa5c5046884:   add    %r15d,%r8d
  0x00007fa5c5046887:   add    %r15d,%eax
  0x00007fa5c504688a:   add    %ecx,%eax
  0x00007fa5c504688c:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fa5c5046891:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5046896:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c504689b:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c504689f:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fa5c50468a3:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fa5c50468a8:   vpaddd %ymm0,%ymm11,%ymm5
  0x00007fa5c50468ac:   vpaddd 0x40(%rbp,%rdx,1),%ymm6,%ymm9
  0x00007fa5c50468b2:   vmovdqu %ymm9,0x40(%rsp,%rdx,1)
  0x00007fa5c50468b8:   mov    %eax,%ecx
  0x00007fa5c50468ba:   rorx   $0x19,%r8d,%r13d
  0x00007fa5c50468c0:   rorx   $0xb,%r8d,%r14d
  0x00007fa5c50468c6:   add    0x40(%rsp,%rdx,1),%r11d
  0x00007fa5c50468cb:   or     %edi,%ecx
  0x00007fa5c50468cd:   mov    %r9d,%r15d
  0x00007fa5c50468d0:   rorx   $0xd,%eax,%r12d
  0x00007fa5c50468d6:   xor    %r14d,%r13d
  0x00007fa5c50468d9:   xor    %r10d,%r15d
  0x00007fa5c50468dc:   rorx   $0x6,%r8d,%r14d
  0x00007fa5c50468e2:   and    %r8d,%r15d
  0x00007fa5c50468e5:   xor    %r14d,%r13d
  0x00007fa5c50468e8:   rorx   $0x16,%eax,%r14d
  0x00007fa5c50468ee:   add    %r11d,%esi
  0x00007fa5c50468f1:   and    %ebx,%ecx
  0x00007fa5c50468f3:   xor    %r12d,%r14d
  0x00007fa5c50468f6:   rorx   $0x2,%eax,%r12d
  0x00007fa5c50468fc:   xor    %r10d,%r15d
  0x00007fa5c50468ff:   xor    %r12d,%r14d
  0x00007fa5c5046902:   mov    %eax,%r12d
  0x00007fa5c5046905:   and    %edi,%r12d
  0x00007fa5c5046908:   add    %r13d,%r15d
  0x00007fa5c504690b:   or     %r12d,%ecx
  0x00007fa5c504690e:   add    %r14d,%r11d
  0x00007fa5c5046911:   add    %r15d,%esi
  0x00007fa5c5046914:   add    %r15d,%r11d
  0x00007fa5c5046917:   add    %ecx,%r11d
  0x00007fa5c504691a:   vpalignr $0x4,%ymm4,%ymm5,%ymm0
  0x00007fa5c5046920:   vpaddd %ymm6,%ymm0,%ymm0
  0x00007fa5c5046924:   vpalignr $0x4,%ymm6,%ymm7,%ymm1
  0x00007fa5c504692a:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fa5c504692f:   vpslld $0x19,%ymm1,%ymm3
  0x00007fa5c5046934:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c5046938:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fa5c504693d:   mov    %r11d,%ecx
  0x00007fa5c5046940:   rorx   $0x19,%esi,%r13d
  0x00007fa5c5046946:   rorx   $0xb,%esi,%r14d
  0x00007fa5c504694c:   add    0x44(%rsp,%rdx,1),%r10d
  0x00007fa5c5046951:   or     %ebx,%ecx
  0x00007fa5c5046953:   mov    %r8d,%r15d
  0x00007fa5c5046956:   rorx   $0xd,%r11d,%r12d
  0x00007fa5c504695c:   xor    %r14d,%r13d
  0x00007fa5c504695f:   xor    %r9d,%r15d
  0x00007fa5c5046962:   rorx   $0x6,%esi,%r14d
  0x00007fa5c5046968:   and    %esi,%r15d
  0x00007fa5c504696b:   xor    %r14d,%r13d
  0x00007fa5c504696e:   rorx   $0x16,%r11d,%r14d
  0x00007fa5c5046974:   add    %r10d,%edi
  0x00007fa5c5046977:   and    %eax,%ecx
  0x00007fa5c5046979:   xor    %r12d,%r14d
  0x00007fa5c504697c:   rorx   $0x2,%r11d,%r12d
  0x00007fa5c5046982:   xor    %r9d,%r15d
  0x00007fa5c5046985:   xor    %r12d,%r14d
  0x00007fa5c5046988:   mov    %r11d,%r12d
  0x00007fa5c504698b:   and    %ebx,%r12d
  0x00007fa5c504698e:   add    %r13d,%r15d
  0x00007fa5c5046991:   or     %r12d,%ecx
  0x00007fa5c5046994:   add    %r14d,%r10d
  0x00007fa5c5046997:   add    %r15d,%edi
  0x00007fa5c504699a:   add    %r15d,%r10d
  0x00007fa5c504699d:   add    %ecx,%r10d
  0x00007fa5c50469a0:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fa5c50469a5:   vpslld $0xe,%ymm1,%ymm1
  0x00007fa5c50469aa:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fa5c50469ae:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fa5c50469b2:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fa5c50469b7:   vpshufd $0xfa,%ymm5,%ymm2
  0x00007fa5c50469bc:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fa5c50469c0:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fa5c50469c5:   mov    %r10d,%ecx
  0x00007fa5c50469c8:   rorx   $0x19,%edi,%r13d
  0x00007fa5c50469ce:   rorx   $0xb,%edi,%r14d
  0x00007fa5c50469d4:   add    0x48(%rsp,%rdx,1),%r9d
  0x00007fa5c50469d9:   or     %eax,%ecx
  0x00007fa5c50469db:   mov    %esi,%r15d
  0x00007fa5c50469de:   rorx   $0xd,%r10d,%r12d
  0x00007fa5c50469e4:   xor    %r14d,%r13d
  0x00007fa5c50469e7:   xor    %r8d,%r15d
  0x00007fa5c50469ea:   rorx   $0x6,%edi,%r14d
  0x00007fa5c50469f0:   and    %edi,%r15d
  0x00007fa5c50469f3:   xor    %r14d,%r13d
  0x00007fa5c50469f6:   rorx   $0x16,%r10d,%r14d
  0x00007fa5c50469fc:   add    %r9d,%ebx
  0x00007fa5c50469ff:   and    %r11d,%ecx
  0x00007fa5c5046a02:   xor    %r12d,%r14d
  0x00007fa5c5046a05:   rorx   $0x2,%r10d,%r12d
  0x00007fa5c5046a0b:   xor    %r8d,%r15d
  0x00007fa5c5046a0e:   xor    %r12d,%r14d
  0x00007fa5c5046a11:   mov    %r10d,%r12d
  0x00007fa5c5046a14:   and    %eax,%r12d
  0x00007fa5c5046a17:   add    %r13d,%r15d
  0x00007fa5c5046a1a:   or     %r12d,%ecx
  0x00007fa5c5046a1d:   add    %r14d,%r9d
  0x00007fa5c5046a20:   add    %r15d,%ebx
  0x00007fa5c5046a23:   add    %r15d,%r9d
  0x00007fa5c5046a26:   add    %ecx,%r9d
  0x00007fa5c5046a29:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5046a2e:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c5046a33:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c5046a37:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fa5c5046a3b:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fa5c5046a40:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fa5c5046a45:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fa5c5046a4a:   mov    %r9d,%ecx
  0x00007fa5c5046a4d:   rorx   $0x19,%ebx,%r13d
  0x00007fa5c5046a53:   rorx   $0xb,%ebx,%r14d
  0x00007fa5c5046a59:   add    0x4c(%rsp,%rdx,1),%r8d
  0x00007fa5c5046a5e:   or     %r11d,%ecx
  0x00007fa5c5046a61:   mov    %edi,%r15d
  0x00007fa5c5046a64:   rorx   $0xd,%r9d,%r12d
  0x00007fa5c5046a6a:   xor    %r14d,%r13d
  0x00007fa5c5046a6d:   xor    %esi,%r15d
  0x00007fa5c5046a70:   rorx   $0x6,%ebx,%r14d
  0x00007fa5c5046a76:   and    %ebx,%r15d
  0x00007fa5c5046a79:   xor    %r14d,%r13d
  0x00007fa5c5046a7c:   rorx   $0x16,%r9d,%r14d
  0x00007fa5c5046a82:   add    %r8d,%eax
  0x00007fa5c5046a85:   and    %r10d,%ecx
  0x00007fa5c5046a88:   xor    %r12d,%r14d
  0x00007fa5c5046a8b:   rorx   $0x2,%r9d,%r12d
  0x00007fa5c5046a91:   xor    %esi,%r15d
  0x00007fa5c5046a94:   xor    %r12d,%r14d
  0x00007fa5c5046a97:   mov    %r9d,%r12d
  0x00007fa5c5046a9a:   and    %r11d,%r12d
  0x00007fa5c5046a9d:   add    %r13d,%r15d
  0x00007fa5c5046aa0:   or     %r12d,%ecx
  0x00007fa5c5046aa3:   add    %r14d,%r8d
  0x00007fa5c5046aa6:   add    %r15d,%eax
  0x00007fa5c5046aa9:   add    %r15d,%r8d
  0x00007fa5c5046aac:   add    %ecx,%r8d
  0x00007fa5c5046aaf:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fa5c5046ab4:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5046ab9:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c5046abe:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c5046ac2:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fa5c5046ac6:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fa5c5046acb:   vpaddd %ymm0,%ymm11,%ymm6
  0x00007fa5c5046acf:   vpaddd 0x60(%rbp,%rdx,1),%ymm7,%ymm9
  0x00007fa5c5046ad5:   vmovdqu %ymm9,0x60(%rsp,%rdx,1)
  0x00007fa5c5046adb:   mov    %r8d,%ecx
  0x00007fa5c5046ade:   rorx   $0x19,%eax,%r13d
  0x00007fa5c5046ae4:   rorx   $0xb,%eax,%r14d
  0x00007fa5c5046aea:   add    0x60(%rsp,%rdx,1),%esi
  0x00007fa5c5046aee:   or     %r10d,%ecx
  0x00007fa5c5046af1:   mov    %ebx,%r15d
  0x00007fa5c5046af4:   rorx   $0xd,%r8d,%r12d
  0x00007fa5c5046afa:   xor    %r14d,%r13d
  0x00007fa5c5046afd:   xor    %edi,%r15d
  0x00007fa5c5046b00:   rorx   $0x6,%eax,%r14d
  0x00007fa5c5046b06:   and    %eax,%r15d
  0x00007fa5c5046b09:   xor    %r14d,%r13d
  0x00007fa5c5046b0c:   rorx   $0x16,%r8d,%r14d
  0x00007fa5c5046b12:   add    %esi,%r11d
  0x00007fa5c5046b15:   and    %r9d,%ecx
  0x00007fa5c5046b18:   xor    %r12d,%r14d
  0x00007fa5c5046b1b:   rorx   $0x2,%r8d,%r12d
  0x00007fa5c5046b21:   xor    %edi,%r15d
  0x00007fa5c5046b24:   xor    %r12d,%r14d
  0x00007fa5c5046b27:   mov    %r8d,%r12d
  0x00007fa5c5046b2a:   and    %r10d,%r12d
  0x00007fa5c5046b2d:   add    %r13d,%r15d
  0x00007fa5c5046b30:   or     %r12d,%ecx
  0x00007fa5c5046b33:   add    %r14d,%esi
  0x00007fa5c5046b36:   add    %r15d,%r11d
  0x00007fa5c5046b39:   add    %r15d,%esi
  0x00007fa5c5046b3c:   add    %ecx,%esi
  0x00007fa5c5046b3e:   vpalignr $0x4,%ymm5,%ymm6,%ymm0
  0x00007fa5c5046b44:   vpaddd %ymm7,%ymm0,%ymm0
  0x00007fa5c5046b48:   vpalignr $0x4,%ymm7,%ymm4,%ymm1
  0x00007fa5c5046b4e:   vpsrld $0x7,%ymm1,%ymm2
  0x00007fa5c5046b53:   vpslld $0x19,%ymm1,%ymm3
  0x00007fa5c5046b58:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c5046b5c:   vpsrld $0x12,%ymm1,%ymm2
  0x00007fa5c5046b61:   mov    %esi,%ecx
  0x00007fa5c5046b63:   rorx   $0x19,%r11d,%r13d
  0x00007fa5c5046b69:   rorx   $0xb,%r11d,%r14d
  0x00007fa5c5046b6f:   add    0x64(%rsp,%rdx,1),%edi
  0x00007fa5c5046b73:   or     %r9d,%ecx
  0x00007fa5c5046b76:   mov    %eax,%r15d
  0x00007fa5c5046b79:   rorx   $0xd,%esi,%r12d
  0x00007fa5c5046b7f:   xor    %r14d,%r13d
  0x00007fa5c5046b82:   xor    %ebx,%r15d
  0x00007fa5c5046b85:   rorx   $0x6,%r11d,%r14d
  0x00007fa5c5046b8b:   and    %r11d,%r15d
  0x00007fa5c5046b8e:   xor    %r14d,%r13d
  0x00007fa5c5046b91:   rorx   $0x16,%esi,%r14d
  0x00007fa5c5046b97:   add    %edi,%r10d
  0x00007fa5c5046b9a:   and    %r8d,%ecx
  0x00007fa5c5046b9d:   xor    %r12d,%r14d
  0x00007fa5c5046ba0:   rorx   $0x2,%esi,%r12d
  0x00007fa5c5046ba6:   xor    %ebx,%r15d
  0x00007fa5c5046ba9:   xor    %r12d,%r14d
  0x00007fa5c5046bac:   mov    %esi,%r12d
  0x00007fa5c5046baf:   and    %r9d,%r12d
  0x00007fa5c5046bb2:   add    %r13d,%r15d
  0x00007fa5c5046bb5:   or     %r12d,%ecx
  0x00007fa5c5046bb8:   add    %r14d,%edi
  0x00007fa5c5046bbb:   add    %r15d,%r10d
  0x00007fa5c5046bbe:   add    %r15d,%edi
  0x00007fa5c5046bc1:   add    %ecx,%edi
  0x00007fa5c5046bc3:   vpsrld $0x3,%ymm1,%ymm8
  0x00007fa5c5046bc8:   vpslld $0xe,%ymm1,%ymm1
  0x00007fa5c5046bcd:   vpxor  %ymm1,%ymm3,%ymm3
  0x00007fa5c5046bd1:   vpxor  %ymm2,%ymm3,%ymm3
  0x00007fa5c5046bd5:   vpxor  %ymm8,%ymm3,%ymm1
  0x00007fa5c5046bda:   vpshufd $0xfa,%ymm6,%ymm2
  0x00007fa5c5046bdf:   vpaddd %ymm1,%ymm0,%ymm0
  0x00007fa5c5046be3:   vpsrld $0xa,%ymm2,%ymm8
  0x00007fa5c5046be8:   mov    %edi,%ecx
  0x00007fa5c5046bea:   rorx   $0x19,%r10d,%r13d
  0x00007fa5c5046bf0:   rorx   $0xb,%r10d,%r14d
  0x00007fa5c5046bf6:   add    0x68(%rsp,%rdx,1),%ebx
  0x00007fa5c5046bfa:   or     %r8d,%ecx
  0x00007fa5c5046bfd:   mov    %r11d,%r15d
  0x00007fa5c5046c00:   rorx   $0xd,%edi,%r12d
  0x00007fa5c5046c06:   xor    %r14d,%r13d
  0x00007fa5c5046c09:   xor    %eax,%r15d
  0x00007fa5c5046c0c:   rorx   $0x6,%r10d,%r14d
  0x00007fa5c5046c12:   and    %r10d,%r15d
  0x00007fa5c5046c15:   xor    %r14d,%r13d
  0x00007fa5c5046c18:   rorx   $0x16,%edi,%r14d
  0x00007fa5c5046c1e:   add    %ebx,%r9d
  0x00007fa5c5046c21:   and    %esi,%ecx
  0x00007fa5c5046c23:   xor    %r12d,%r14d
  0x00007fa5c5046c26:   rorx   $0x2,%edi,%r12d
  0x00007fa5c5046c2c:   xor    %eax,%r15d
  0x00007fa5c5046c2f:   xor    %r12d,%r14d
  0x00007fa5c5046c32:   mov    %edi,%r12d
  0x00007fa5c5046c35:   and    %r8d,%r12d
  0x00007fa5c5046c38:   add    %r13d,%r15d
  0x00007fa5c5046c3b:   or     %r12d,%ecx
  0x00007fa5c5046c3e:   add    %r14d,%ebx
  0x00007fa5c5046c41:   add    %r15d,%r9d
  0x00007fa5c5046c44:   add    %r15d,%ebx
  0x00007fa5c5046c47:   add    %ecx,%ebx
  0x00007fa5c5046c49:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5046c4e:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c5046c53:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c5046c57:   vpxor  %ymm2,%ymm8,%ymm8
  0x00007fa5c5046c5b:   vpshufb %ymm10,%ymm8,%ymm8
  0x00007fa5c5046c60:   vpaddd %ymm8,%ymm0,%ymm0
  0x00007fa5c5046c65:   vpshufd $0x50,%ymm0,%ymm2
  0x00007fa5c5046c6a:   mov    %ebx,%ecx
  0x00007fa5c5046c6c:   rorx   $0x19,%r9d,%r13d
  0x00007fa5c5046c72:   rorx   $0xb,%r9d,%r14d
  0x00007fa5c5046c78:   add    0x6c(%rsp,%rdx,1),%eax
  0x00007fa5c5046c7c:   or     %esi,%ecx
  0x00007fa5c5046c7e:   mov    %r10d,%r15d
  0x00007fa5c5046c81:   rorx   $0xd,%ebx,%r12d
  0x00007fa5c5046c87:   xor    %r14d,%r13d
  0x00007fa5c5046c8a:   xor    %r11d,%r15d
  0x00007fa5c5046c8d:   rorx   $0x6,%r9d,%r14d
  0x00007fa5c5046c93:   and    %r9d,%r15d
  0x00007fa5c5046c96:   xor    %r14d,%r13d
  0x00007fa5c5046c99:   rorx   $0x16,%ebx,%r14d
  0x00007fa5c5046c9f:   add    %eax,%r8d
  0x00007fa5c5046ca2:   and    %edi,%ecx
  0x00007fa5c5046ca4:   xor    %r12d,%r14d
  0x00007fa5c5046ca7:   rorx   $0x2,%ebx,%r12d
  0x00007fa5c5046cad:   xor    %r11d,%r15d
  0x00007fa5c5046cb0:   xor    %r12d,%r14d
  0x00007fa5c5046cb3:   mov    %ebx,%r12d
  0x00007fa5c5046cb6:   and    %esi,%r12d
  0x00007fa5c5046cb9:   add    %r13d,%r15d
  0x00007fa5c5046cbc:   or     %r12d,%ecx
  0x00007fa5c5046cbf:   add    %r14d,%eax
  0x00007fa5c5046cc2:   add    %r15d,%r8d
  0x00007fa5c5046cc5:   add    %r15d,%eax
  0x00007fa5c5046cc8:   add    %ecx,%eax
  0x00007fa5c5046cca:   vpsrld $0xa,%ymm2,%ymm11
  0x00007fa5c5046ccf:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5046cd4:   vpsrlq $0x11,%ymm2,%ymm2
  0x00007fa5c5046cd9:   vpxor  %ymm3,%ymm2,%ymm2
  0x00007fa5c5046cdd:   vpxor  %ymm2,%ymm11,%ymm11
  0x00007fa5c5046ce1:   vpshufb %ymm12,%ymm11,%ymm11
  0x00007fa5c5046ce6:   vpaddd %ymm0,%ymm11,%ymm7
  0x00007fa5c5046cea:   add    $0x80,%rdx
  0x00007fa5c5046cf1:   cmp    $0x180,%rdx
  0x00007fa5c5046cf8:   jb     Stub::sha256_implCompressMB+272 0x00007fa5c5046470
  0x00007fa5c5046cfe:   vpaddd 0x0(%rbp,%rdx,1),%ymm4,%ymm9
  0x00007fa5c5046d04:   vmovdqu %ymm9,(%rsp,%rdx,1)
  0x00007fa5c5046d09:   mov    %r9d,%r15d
  0x00007fa5c5046d0c:   rorx   $0x19,%r8d,%r13d
  0x00007fa5c5046d12:   rorx   $0xb,%r8d,%r14d
  0x00007fa5c5046d18:   xor    %r10d,%r15d
  0x00007fa5c5046d1b:   xor    %r14d,%r13d
  0x00007fa5c5046d1e:   rorx   $0x6,%r8d,%r14d
  0x00007fa5c5046d24:   and    %r8d,%r15d
  0x00007fa5c5046d27:   xor    %r14d,%r13d
  0x00007fa5c5046d2a:   rorx   $0xd,%eax,%r12d
  0x00007fa5c5046d30:   xor    %r10d,%r15d
  0x00007fa5c5046d33:   rorx   $0x16,%eax,%r14d
  0x00007fa5c5046d39:   mov    %eax,%ecx
  0x00007fa5c5046d3b:   xor    %r12d,%r14d
  0x00007fa5c5046d3e:   rorx   $0x2,%eax,%r12d
  0x00007fa5c5046d44:   add    (%rsp,%rdx,1),%r11d
  0x00007fa5c5046d48:   or     %edi,%ecx
  0x00007fa5c5046d4a:   xor    %r12d,%r14d
  0x00007fa5c5046d4d:   mov    %eax,%r12d
  0x00007fa5c5046d50:   and    %ebx,%ecx
  0x00007fa5c5046d52:   and    %edi,%r12d
  0x00007fa5c5046d55:   add    %r13d,%r15d
  0x00007fa5c5046d58:   add    %r11d,%esi
  0x00007fa5c5046d5b:   or     %r12d,%ecx
  0x00007fa5c5046d5e:   add    %r14d,%r11d
  0x00007fa5c5046d61:   add    %r15d,%esi
  0x00007fa5c5046d64:   add    %r15d,%r11d
  0x00007fa5c5046d67:   mov    %r8d,%r15d
  0x00007fa5c5046d6a:   rorx   $0x19,%esi,%r13d
  0x00007fa5c5046d70:   rorx   $0xb,%esi,%r14d
  0x00007fa5c5046d76:   xor    %r9d,%r15d
  0x00007fa5c5046d79:   xor    %r14d,%r13d
  0x00007fa5c5046d7c:   rorx   $0x6,%esi,%r14d
  0x00007fa5c5046d82:   and    %esi,%r15d
  0x00007fa5c5046d85:   add    %ecx,%r11d
  0x00007fa5c5046d88:   xor    %r14d,%r13d
  0x00007fa5c5046d8b:   rorx   $0xd,%r11d,%r12d
  0x00007fa5c5046d91:   xor    %r9d,%r15d
  0x00007fa5c5046d94:   rorx   $0x16,%r11d,%r14d
  0x00007fa5c5046d9a:   mov    %r11d,%ecx
  0x00007fa5c5046d9d:   xor    %r12d,%r14d
  0x00007fa5c5046da0:   rorx   $0x2,%r11d,%r12d
  0x00007fa5c5046da6:   add    0x4(%rsp,%rdx,1),%r10d
  0x00007fa5c5046dab:   or     %ebx,%ecx
  0x00007fa5c5046dad:   xor    %r12d,%r14d
  0x00007fa5c5046db0:   mov    %r11d,%r12d
  0x00007fa5c5046db3:   and    %eax,%ecx
  0x00007fa5c5046db5:   and    %ebx,%r12d
  0x00007fa5c5046db8:   add    %r13d,%r15d
  0x00007fa5c5046dbb:   add    %r10d,%edi
  0x00007fa5c5046dbe:   or     %r12d,%ecx
  0x00007fa5c5046dc1:   add    %r14d,%r10d
  0x00007fa5c5046dc4:   add    %r15d,%edi
  0x00007fa5c5046dc7:   add    %r15d,%r10d
  0x00007fa5c5046dca:   mov    %esi,%r15d
  0x00007fa5c5046dcd:   rorx   $0x19,%edi,%r13d
  0x00007fa5c5046dd3:   rorx   $0xb,%edi,%r14d
  0x00007fa5c5046dd9:   xor    %r8d,%r15d
  0x00007fa5c5046ddc:   xor    %r14d,%r13d
  0x00007fa5c5046ddf:   rorx   $0x6,%edi,%r14d
  0x00007fa5c5046de5:   and    %edi,%r15d
  0x00007fa5c5046de8:   add    %ecx,%r10d
  0x00007fa5c5046deb:   xor    %r14d,%r13d
  0x00007fa5c5046dee:   rorx   $0xd,%r10d,%r12d
  0x00007fa5c5046df4:   xor    %r8d,%r15d
  0x00007fa5c5046df7:   rorx   $0x16,%r10d,%r14d
  0x00007fa5c5046dfd:   mov    %r10d,%ecx
  0x00007fa5c5046e00:   xor    %r12d,%r14d
  0x00007fa5c5046e03:   rorx   $0x2,%r10d,%r12d
  0x00007fa5c5046e09:   add    0x8(%rsp,%rdx,1),%r9d
  0x00007fa5c5046e0e:   or     %eax,%ecx
  0x00007fa5c5046e10:   xor    %r12d,%r14d
  0x00007fa5c5046e13:   mov    %r10d,%r12d
  0x00007fa5c5046e16:   and    %r11d,%ecx
  0x00007fa5c5046e19:   and    %eax,%r12d
  0x00007fa5c5046e1c:   add    %r13d,%r15d
  0x00007fa5c5046e1f:   add    %r9d,%ebx
  0x00007fa5c5046e22:   or     %r12d,%ecx
  0x00007fa5c5046e25:   add    %r14d,%r9d
  0x00007fa5c5046e28:   add    %r15d,%ebx
  0x00007fa5c5046e2b:   add    %r15d,%r9d
  0x00007fa5c5046e2e:   mov    %edi,%r15d
  0x00007fa5c5046e31:   rorx   $0x19,%ebx,%r13d
  0x00007fa5c5046e37:   rorx   $0xb,%ebx,%r14d
  0x00007fa5c5046e3d:   xor    %esi,%r15d
  0x00007fa5c5046e40:   xor    %r14d,%r13d
  0x00007fa5c5046e43:   rorx   $0x6,%ebx,%r14d
  0x00007fa5c5046e49:   and    %ebx,%r15d
  0x00007fa5c5046e4c:   add    %ecx,%r9d
  0x00007fa5c5046e4f:   xor    %r14d,%r13d
  0x00007fa5c5046e52:   rorx   $0xd,%r9d,%r12d
  0x00007fa5c5046e58:   xor    %esi,%r15d
  0x00007fa5c5046e5b:   rorx   $0x16,%r9d,%r14d
  0x00007fa5c5046e61:   mov    %r9d,%ecx
  0x00007fa5c5046e64:   xor    %r12d,%r14d
  0x00007fa5c5046e67:   rorx   $0x2,%r9d,%r12d
  0x00007fa5c5046e6d:   add    0xc(%rsp,%rdx,1),%r8d
  0x00007fa5c5046e72:   or     %r11d,%ecx
  0x00007fa5c5046e75:   xor    %r12d,%r14d
  0x00007fa5c5046e78:   mov    %r9d,%r12d
  0x00007fa5c5046e7b:   and    %r10d,%ecx
  0x00007fa5c5046e7e:   and    %r11d,%r12d
  0x00007fa5c5046e81:   add    %r13d,%r15d
  0x00007fa5c5046e84:   add    %r8d,%eax
  0x00007fa5c5046e87:   or     %r12d,%ecx
  0x00007fa5c5046e8a:   add    %r14d,%r8d
  0x00007fa5c5046e8d:   add    %r15d,%eax
  0x00007fa5c5046e90:   add    %r15d,%r8d
  0x00007fa5c5046e93:   add    %ecx,%r8d
  0x00007fa5c5046e96:   vpaddd 0x20(%rbp,%rdx,1),%ymm5,%ymm9
  0x00007fa5c5046e9c:   vmovdqu %ymm9,0x20(%rsp,%rdx,1)
  0x00007fa5c5046ea2:   mov    %ebx,%r15d
  0x00007fa5c5046ea5:   rorx   $0x19,%eax,%r13d
  0x00007fa5c5046eab:   rorx   $0xb,%eax,%r14d
  0x00007fa5c5046eb1:   xor    %edi,%r15d
  0x00007fa5c5046eb4:   xor    %r14d,%r13d
  0x00007fa5c5046eb7:   rorx   $0x6,%eax,%r14d
  0x00007fa5c5046ebd:   and    %eax,%r15d
  0x00007fa5c5046ec0:   xor    %r14d,%r13d
  0x00007fa5c5046ec3:   rorx   $0xd,%r8d,%r12d
  0x00007fa5c5046ec9:   xor    %edi,%r15d
  0x00007fa5c5046ecc:   rorx   $0x16,%r8d,%r14d
  0x00007fa5c5046ed2:   mov    %r8d,%ecx
  0x00007fa5c5046ed5:   xor    %r12d,%r14d
  0x00007fa5c5046ed8:   rorx   $0x2,%r8d,%r12d
  0x00007fa5c5046ede:   add    0x20(%rsp,%rdx,1),%esi
  0x00007fa5c5046ee2:   or     %r10d,%ecx
  0x00007fa5c5046ee5:   xor    %r12d,%r14d
  0x00007fa5c5046ee8:   mov    %r8d,%r12d
  0x00007fa5c5046eeb:   and    %r9d,%ecx
  0x00007fa5c5046eee:   and    %r10d,%r12d
  0x00007fa5c5046ef1:   add    %r13d,%r15d
  0x00007fa5c5046ef4:   add    %esi,%r11d
  0x00007fa5c5046ef7:   or     %r12d,%ecx
  0x00007fa5c5046efa:   add    %r14d,%esi
  0x00007fa5c5046efd:   add    %r15d,%r11d
  0x00007fa5c5046f00:   add    %r15d,%esi
  0x00007fa5c5046f03:   mov    %eax,%r15d
  0x00007fa5c5046f06:   rorx   $0x19,%r11d,%r13d
  0x00007fa5c5046f0c:   rorx   $0xb,%r11d,%r14d
  0x00007fa5c5046f12:   xor    %ebx,%r15d
  0x00007fa5c5046f15:   xor    %r14d,%r13d
  0x00007fa5c5046f18:   rorx   $0x6,%r11d,%r14d
  0x00007fa5c5046f1e:   and    %r11d,%r15d
  0x00007fa5c5046f21:   add    %ecx,%esi
  0x00007fa5c5046f23:   xor    %r14d,%r13d
  0x00007fa5c5046f26:   rorx   $0xd,%esi,%r12d
  0x00007fa5c5046f2c:   xor    %ebx,%r15d
  0x00007fa5c5046f2f:   rorx   $0x16,%esi,%r14d
  0x00007fa5c5046f35:   mov    %esi,%ecx
  0x00007fa5c5046f37:   xor    %r12d,%r14d
  0x00007fa5c5046f3a:   rorx   $0x2,%esi,%r12d
  0x00007fa5c5046f40:   add    0x24(%rsp,%rdx,1),%edi
  0x00007fa5c5046f44:   or     %r9d,%ecx
  0x00007fa5c5046f47:   xor    %r12d,%r14d
  0x00007fa5c5046f4a:   mov    %esi,%r12d
  0x00007fa5c5046f4d:   and    %r8d,%ecx
  0x00007fa5c5046f50:   and    %r9d,%r12d
  0x00007fa5c5046f53:   add    %r13d,%r15d
  0x00007fa5c5046f56:   add    %edi,%r10d
  0x00007fa5c5046f59:   or     %r12d,%ecx
  0x00007fa5c5046f5c:   add    %r14d,%edi
  0x00007fa5c5046f5f:   add    %r15d,%r10d
  0x00007fa5c5046f62:   add    %r15d,%edi
  0x00007fa5c5046f65:   mov    %r11d,%r15d
  0x00007fa5c5046f68:   rorx   $0x19,%r10d,%r13d
  0x00007fa5c5046f6e:   rorx   $0xb,%r10d,%r14d
  0x00007fa5c5046f74:   xor    %eax,%r15d
  0x00007fa5c5046f77:   xor    %r14d,%r13d
  0x00007fa5c5046f7a:   rorx   $0x6,%r10d,%r14d
  0x00007fa5c5046f80:   and    %r10d,%r15d
  0x00007fa5c5046f83:   add    %ecx,%edi
  0x00007fa5c5046f85:   xor    %r14d,%r13d
  0x00007fa5c5046f88:   rorx   $0xd,%edi,%r12d
  0x00007fa5c5046f8e:   xor    %eax,%r15d
  0x00007fa5c5046f91:   rorx   $0x16,%edi,%r14d
  0x00007fa5c5046f97:   mov    %edi,%ecx
  0x00007fa5c5046f99:   xor    %r12d,%r14d
  0x00007fa5c5046f9c:   rorx   $0x2,%edi,%r12d
  0x00007fa5c5046fa2:   add    0x28(%rsp,%rdx,1),%ebx
  0x00007fa5c5046fa6:   or     %r8d,%ecx
  0x00007fa5c5046fa9:   xor    %r12d,%r14d
  0x00007fa5c5046fac:   mov    %edi,%r12d
  0x00007fa5c5046faf:   and    %esi,%ecx
  0x00007fa5c5046fb1:   and    %r8d,%r12d
  0x00007fa5c5046fb4:   add    %r13d,%r15d
  0x00007fa5c5046fb7:   add    %ebx,%r9d
  0x00007fa5c5046fba:   or     %r12d,%ecx
  0x00007fa5c5046fbd:   add    %r14d,%ebx
  0x00007fa5c5046fc0:   add    %r15d,%r9d
  0x00007fa5c5046fc3:   add    %r15d,%ebx
  0x00007fa5c5046fc6:   mov    %r10d,%r15d
  0x00007fa5c5046fc9:   rorx   $0x19,%r9d,%r13d
  0x00007fa5c5046fcf:   rorx   $0xb,%r9d,%r14d
  0x00007fa5c5046fd5:   xor    %r11d,%r15d
  0x00007fa5c5046fd8:   xor    %r14d,%r13d
  0x00007fa5c5046fdb:   rorx   $0x6,%r9d,%r14d
  0x00007fa5c5046fe1:   and    %r9d,%r15d
  0x00007fa5c5046fe4:   add    %ecx,%ebx
  0x00007fa5c5046fe6:   xor    %r14d,%r13d
  0x00007fa5c5046fe9:   rorx   $0xd,%ebx,%r12d
  0x00007fa5c5046fef:   xor    %r11d,%r15d
  0x00007fa5c5046ff2:   rorx   $0x16,%ebx,%r14d
  0x00007fa5c5046ff8:   mov    %ebx,%ecx
  0x00007fa5c5046ffa:   xor    %r12d,%r14d
  0x00007fa5c5046ffd:   rorx   $0x2,%ebx,%r12d
  0x00007fa5c5047003:   add    0x2c(%rsp,%rdx,1),%eax
  0x00007fa5c5047007:   or     %esi,%ecx
  0x00007fa5c5047009:   xor    %r12d,%r14d
  0x00007fa5c504700c:   mov    %ebx,%r12d
  0x00007fa5c504700f:   and    %edi,%ecx
  0x00007fa5c5047011:   and    %esi,%r12d
  0x00007fa5c5047014:   add    %r13d,%r15d
  0x00007fa5c5047017:   add    %eax,%r8d
  0x00007fa5c504701a:   or     %r12d,%ecx
  0x00007fa5c504701d:   add    %r14d,%eax
  0x00007fa5c5047020:   add    %r15d,%r8d
  0x00007fa5c5047023:   add    %r15d,%eax
  0x00007fa5c5047026:   add    %ecx,%eax
  0x00007fa5c5047028:   add    $0x40,%rdx
  0x00007fa5c504702c:   vmovdqu %ymm6,%ymm4
  0x00007fa5c5047030:   vmovdqu %ymm7,%ymm5
  0x00007fa5c5047034:   cmp    $0x200,%rdx
  0x00007fa5c504703b:   jb     Stub::sha256_implCompressMB+2462 0x00007fa5c5046cfe
  0x00007fa5c5047041:   mov    0x210(%rsp),%rdx
  0x00007fa5c5047049:   mov    0x208(%rsp),%rcx
  0x00007fa5c5047051:   add    (%rdx),%eax
  0x00007fa5c5047053:   mov    %eax,(%rdx)
  0x00007fa5c5047055:   add    0x4(%rdx),%ebx
  0x00007fa5c5047058:   mov    %ebx,0x4(%rdx)
  0x00007fa5c504705b:   add    0x8(%rdx),%edi
  0x00007fa5c504705e:   mov    %edi,0x8(%rdx)
  0x00007fa5c5047061:   add    0xc(%rdx),%esi
  0x00007fa5c5047064:   mov    %esi,0xc(%rdx)
  0x00007fa5c5047067:   add    0x10(%rdx),%r8d
  0x00007fa5c504706b:   mov    %r8d,0x10(%rdx)
  0x00007fa5c504706f:   add    0x14(%rdx),%r9d
  0x00007fa5c5047073:   mov    %r9d,0x14(%rdx)
  0x00007fa5c5047077:   add    0x18(%rdx),%r10d
  0x00007fa5c504707b:   mov    %r10d,0x18(%rdx)
  0x00007fa5c504707f:   add    0x1c(%rdx),%r11d
  0x00007fa5c5047083:   mov    %r11d,0x1c(%rdx)
  0x00007fa5c5047087:   cmp    0x200(%rsp),%rcx
  0x00007fa5c504708f:   ja     Stub::sha256_implCompressMB+4402 0x00007fa5c5047492
  0x00007fa5c5047095:   xor    %rdx,%rdx
  0x00007fa5c5047098:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c50470a0:   mov    %r9d,%r15d
  0x00007fa5c50470a3:   rorx   $0x19,%r8d,%r13d
  0x00007fa5c50470a9:   rorx   $0xb,%r8d,%r14d
  0x00007fa5c50470af:   xor    %r10d,%r15d
  0x00007fa5c50470b2:   xor    %r14d,%r13d
  0x00007fa5c50470b5:   rorx   $0x6,%r8d,%r14d
  0x00007fa5c50470bb:   and    %r8d,%r15d
  0x00007fa5c50470be:   xor    %r14d,%r13d
  0x00007fa5c50470c1:   rorx   $0xd,%eax,%r12d
  0x00007fa5c50470c7:   xor    %r10d,%r15d
  0x00007fa5c50470ca:   rorx   $0x16,%eax,%r14d
  0x00007fa5c50470d0:   mov    %eax,%ecx
  0x00007fa5c50470d2:   xor    %r12d,%r14d
  0x00007fa5c50470d5:   rorx   $0x2,%eax,%r12d
  0x00007fa5c50470db:   add    0x10(%rsp,%rdx,1),%r11d
  0x00007fa5c50470e0:   or     %edi,%ecx
  0x00007fa5c50470e2:   xor    %r12d,%r14d
  0x00007fa5c50470e5:   mov    %eax,%r12d
  0x00007fa5c50470e8:   and    %ebx,%ecx
  0x00007fa5c50470ea:   and    %edi,%r12d
  0x00007fa5c50470ed:   add    %r13d,%r15d
  0x00007fa5c50470f0:   add    %r11d,%esi
  0x00007fa5c50470f3:   or     %r12d,%ecx
  0x00007fa5c50470f6:   add    %r14d,%r11d
  0x00007fa5c50470f9:   add    %r15d,%esi
  0x00007fa5c50470fc:   add    %r15d,%r11d
  0x00007fa5c50470ff:   mov    %r8d,%r15d
  0x00007fa5c5047102:   rorx   $0x19,%esi,%r13d
  0x00007fa5c5047108:   rorx   $0xb,%esi,%r14d
  0x00007fa5c504710e:   xor    %r9d,%r15d
  0x00007fa5c5047111:   xor    %r14d,%r13d
  0x00007fa5c5047114:   rorx   $0x6,%esi,%r14d
  0x00007fa5c504711a:   and    %esi,%r15d
  0x00007fa5c504711d:   add    %ecx,%r11d
  0x00007fa5c5047120:   xor    %r14d,%r13d
  0x00007fa5c5047123:   rorx   $0xd,%r11d,%r12d
  0x00007fa5c5047129:   xor    %r9d,%r15d
  0x00007fa5c504712c:   rorx   $0x16,%r11d,%r14d
  0x00007fa5c5047132:   mov    %r11d,%ecx
  0x00007fa5c5047135:   xor    %r12d,%r14d
  0x00007fa5c5047138:   rorx   $0x2,%r11d,%r12d
  0x00007fa5c504713e:   add    0x14(%rsp,%rdx,1),%r10d
  0x00007fa5c5047143:   or     %ebx,%ecx
  0x00007fa5c5047145:   xor    %r12d,%r14d
  0x00007fa5c5047148:   mov    %r11d,%r12d
  0x00007fa5c504714b:   and    %eax,%ecx
  0x00007fa5c504714d:   and    %ebx,%r12d
  0x00007fa5c5047150:   add    %r13d,%r15d
  0x00007fa5c5047153:   add    %r10d,%edi
  0x00007fa5c5047156:   or     %r12d,%ecx
  0x00007fa5c5047159:   add    %r14d,%r10d
  0x00007fa5c504715c:   add    %r15d,%edi
  0x00007fa5c504715f:   add    %r15d,%r10d
  0x00007fa5c5047162:   mov    %esi,%r15d
  0x00007fa5c5047165:   rorx   $0x19,%edi,%r13d
  0x00007fa5c504716b:   rorx   $0xb,%edi,%r14d
  0x00007fa5c5047171:   xor    %r8d,%r15d
  0x00007fa5c5047174:   xor    %r14d,%r13d
  0x00007fa5c5047177:   rorx   $0x6,%edi,%r14d
  0x00007fa5c504717d:   and    %edi,%r15d
  0x00007fa5c5047180:   add    %ecx,%r10d
  0x00007fa5c5047183:   xor    %r14d,%r13d
  0x00007fa5c5047186:   rorx   $0xd,%r10d,%r12d
  0x00007fa5c504718c:   xor    %r8d,%r15d
  0x00007fa5c504718f:   rorx   $0x16,%r10d,%r14d
  0x00007fa5c5047195:   mov    %r10d,%ecx
  0x00007fa5c5047198:   xor    %r12d,%r14d
  0x00007fa5c504719b:   rorx   $0x2,%r10d,%r12d
  0x00007fa5c50471a1:   add    0x18(%rsp,%rdx,1),%r9d
  0x00007fa5c50471a6:   or     %eax,%ecx
  0x00007fa5c50471a8:   xor    %r12d,%r14d
  0x00007fa5c50471ab:   mov    %r10d,%r12d
  0x00007fa5c50471ae:   and    %r11d,%ecx
  0x00007fa5c50471b1:   and    %eax,%r12d
  0x00007fa5c50471b4:   add    %r13d,%r15d
  0x00007fa5c50471b7:   add    %r9d,%ebx
  0x00007fa5c50471ba:   or     %r12d,%ecx
  0x00007fa5c50471bd:   add    %r14d,%r9d
  0x00007fa5c50471c0:   add    %r15d,%ebx
  0x00007fa5c50471c3:   add    %r15d,%r9d
  0x00007fa5c50471c6:   mov    %edi,%r15d
  0x00007fa5c50471c9:   rorx   $0x19,%ebx,%r13d
  0x00007fa5c50471cf:   rorx   $0xb,%ebx,%r14d
  0x00007fa5c50471d5:   xor    %esi,%r15d
  0x00007fa5c50471d8:   xor    %r14d,%r13d
  0x00007fa5c50471db:   rorx   $0x6,%ebx,%r14d
  0x00007fa5c50471e1:   and    %ebx,%r15d
  0x00007fa5c50471e4:   add    %ecx,%r9d
  0x00007fa5c50471e7:   xor    %r14d,%r13d
  0x00007fa5c50471ea:   rorx   $0xd,%r9d,%r12d
  0x00007fa5c50471f0:   xor    %esi,%r15d
  0x00007fa5c50471f3:   rorx   $0x16,%r9d,%r14d
  0x00007fa5c50471f9:   mov    %r9d,%ecx
  0x00007fa5c50471fc:   xor    %r12d,%r14d
  0x00007fa5c50471ff:   rorx   $0x2,%r9d,%r12d
  0x00007fa5c5047205:   add    0x1c(%rsp,%rdx,1),%r8d
  0x00007fa5c504720a:   or     %r11d,%ecx
  0x00007fa5c504720d:   xor    %r12d,%r14d
  0x00007fa5c5047210:   mov    %r9d,%r12d
  0x00007fa5c5047213:   and    %r10d,%ecx
  0x00007fa5c5047216:   and    %r11d,%r12d
  0x00007fa5c5047219:   add    %r13d,%r15d
  0x00007fa5c504721c:   add    %r8d,%eax
  0x00007fa5c504721f:   or     %r12d,%ecx
  0x00007fa5c5047222:   add    %r14d,%r8d
  0x00007fa5c5047225:   add    %r15d,%eax
  0x00007fa5c5047228:   add    %r15d,%r8d
  0x00007fa5c504722b:   add    %ecx,%r8d
  0x00007fa5c504722e:   mov    %ebx,%r15d
  0x00007fa5c5047231:   rorx   $0x19,%eax,%r13d
  0x00007fa5c5047237:   rorx   $0xb,%eax,%r14d
  0x00007fa5c504723d:   xor    %edi,%r15d
  0x00007fa5c5047240:   xor    %r14d,%r13d
  0x00007fa5c5047243:   rorx   $0x6,%eax,%r14d
  0x00007fa5c5047249:   and    %eax,%r15d
  0x00007fa5c504724c:   xor    %r14d,%r13d
  0x00007fa5c504724f:   rorx   $0xd,%r8d,%r12d
  0x00007fa5c5047255:   xor    %edi,%r15d
  0x00007fa5c5047258:   rorx   $0x16,%r8d,%r14d
  0x00007fa5c504725e:   mov    %r8d,%ecx
  0x00007fa5c5047261:   xor    %r12d,%r14d
  0x00007fa5c5047264:   rorx   $0x2,%r8d,%r12d
  0x00007fa5c504726a:   add    0x30(%rsp,%rdx,1),%esi
  0x00007fa5c504726e:   or     %r10d,%ecx
  0x00007fa5c5047271:   xor    %r12d,%r14d
  0x00007fa5c5047274:   mov    %r8d,%r12d
  0x00007fa5c5047277:   and    %r9d,%ecx
  0x00007fa5c504727a:   and    %r10d,%r12d
  0x00007fa5c504727d:   add    %r13d,%r15d
  0x00007fa5c5047280:   add    %esi,%r11d
  0x00007fa5c5047283:   or     %r12d,%ecx
  0x00007fa5c5047286:   add    %r14d,%esi
  0x00007fa5c5047289:   add    %r15d,%r11d
  0x00007fa5c504728c:   add    %r15d,%esi
  0x00007fa5c504728f:   mov    %eax,%r15d
  0x00007fa5c5047292:   rorx   $0x19,%r11d,%r13d
  0x00007fa5c5047298:   rorx   $0xb,%r11d,%r14d
  0x00007fa5c504729e:   xor    %ebx,%r15d
  0x00007fa5c50472a1:   xor    %r14d,%r13d
  0x00007fa5c50472a4:   rorx   $0x6,%r11d,%r14d
  0x00007fa5c50472aa:   and    %r11d,%r15d
  0x00007fa5c50472ad:   add    %ecx,%esi
  0x00007fa5c50472af:   xor    %r14d,%r13d
  0x00007fa5c50472b2:   rorx   $0xd,%esi,%r12d
  0x00007fa5c50472b8:   xor    %ebx,%r15d
  0x00007fa5c50472bb:   rorx   $0x16,%esi,%r14d
  0x00007fa5c50472c1:   mov    %esi,%ecx
  0x00007fa5c50472c3:   xor    %r12d,%r14d
  0x00007fa5c50472c6:   rorx   $0x2,%esi,%r12d
  0x00007fa5c50472cc:   add    0x34(%rsp,%rdx,1),%edi
  0x00007fa5c50472d0:   or     %r9d,%ecx
  0x00007fa5c50472d3:   xor    %r12d,%r14d
  0x00007fa5c50472d6:   mov    %esi,%r12d
  0x00007fa5c50472d9:   and    %r8d,%ecx
  0x00007fa5c50472dc:   and    %r9d,%r12d
  0x00007fa5c50472df:   add    %r13d,%r15d
  0x00007fa5c50472e2:   add    %edi,%r10d
  0x00007fa5c50472e5:   or     %r12d,%ecx
  0x00007fa5c50472e8:   add    %r14d,%edi
  0x00007fa5c50472eb:   add    %r15d,%r10d
  0x00007fa5c50472ee:   add    %r15d,%edi
  0x00007fa5c50472f1:   mov    %r11d,%r15d
  0x00007fa5c50472f4:   rorx   $0x19,%r10d,%r13d
  0x00007fa5c50472fa:   rorx   $0xb,%r10d,%r14d
  0x00007fa5c5047300:   xor    %eax,%r15d
  0x00007fa5c5047303:   xor    %r14d,%r13d
  0x00007fa5c5047306:   rorx   $0x6,%r10d,%r14d
  0x00007fa5c504730c:   and    %r10d,%r15d
  0x00007fa5c504730f:   add    %ecx,%edi
  0x00007fa5c5047311:   xor    %r14d,%r13d
  0x00007fa5c5047314:   rorx   $0xd,%edi,%r12d
  0x00007fa5c504731a:   xor    %eax,%r15d
  0x00007fa5c504731d:   rorx   $0x16,%edi,%r14d
  0x00007fa5c5047323:   mov    %edi,%ecx
  0x00007fa5c5047325:   xor    %r12d,%r14d
  0x00007fa5c5047328:   rorx   $0x2,%edi,%r12d
  0x00007fa5c504732e:   add    0x38(%rsp,%rdx,1),%ebx
  0x00007fa5c5047332:   or     %r8d,%ecx
  0x00007fa5c5047335:   xor    %r12d,%r14d
  0x00007fa5c5047338:   mov    %edi,%r12d
  0x00007fa5c504733b:   and    %esi,%ecx
  0x00007fa5c504733d:   and    %r8d,%r12d
  0x00007fa5c5047340:   add    %r13d,%r15d
  0x00007fa5c5047343:   add    %ebx,%r9d
  0x00007fa5c5047346:   or     %r12d,%ecx
  0x00007fa5c5047349:   add    %r14d,%ebx
  0x00007fa5c504734c:   add    %r15d,%r9d
  0x00007fa5c504734f:   add    %r15d,%ebx
  0x00007fa5c5047352:   mov    %r10d,%r15d
  0x00007fa5c5047355:   rorx   $0x19,%r9d,%r13d
  0x00007fa5c504735b:   rorx   $0xb,%r9d,%r14d
  0x00007fa5c5047361:   xor    %r11d,%r15d
  0x00007fa5c5047364:   xor    %r14d,%r13d
  0x00007fa5c5047367:   rorx   $0x6,%r9d,%r14d
  0x00007fa5c504736d:   and    %r9d,%r15d
  0x00007fa5c5047370:   add    %ecx,%ebx
  0x00007fa5c5047372:   xor    %r14d,%r13d
  0x00007fa5c5047375:   rorx   $0xd,%ebx,%r12d
  0x00007fa5c504737b:   xor    %r11d,%r15d
  0x00007fa5c504737e:   rorx   $0x16,%ebx,%r14d
  0x00007fa5c5047384:   mov    %ebx,%ecx
  0x00007fa5c5047386:   xor    %r12d,%r14d
  0x00007fa5c5047389:   rorx   $0x2,%ebx,%r12d
  0x00007fa5c504738f:   add    0x3c(%rsp,%rdx,1),%eax
  0x00007fa5c5047393:   or     %esi,%ecx
  0x00007fa5c5047395:   xor    %r12d,%r14d
  0x00007fa5c5047398:   mov    %ebx,%r12d
  0x00007fa5c504739b:   and    %edi,%ecx
  0x00007fa5c504739d:   and    %esi,%r12d
  0x00007fa5c50473a0:   add    %r13d,%r15d
  0x00007fa5c50473a3:   add    %eax,%r8d
  0x00007fa5c50473a6:   or     %r12d,%ecx
  0x00007fa5c50473a9:   add    %r14d,%eax
  0x00007fa5c50473ac:   add    %r15d,%r8d
  0x00007fa5c50473af:   add    %r15d,%eax
  0x00007fa5c50473b2:   add    %ecx,%eax
  0x00007fa5c50473b4:   add    $0x40,%rdx
  0x00007fa5c50473b8:   cmp    $0x200,%rdx
  0x00007fa5c50473bf:   jb     Stub::sha256_implCompressMB+3392 0x00007fa5c50470a0
  0x00007fa5c50473c5:   mov    0x210(%rsp),%rdx
  0x00007fa5c50473cd:   mov    0x208(%rsp),%rcx
  0x00007fa5c50473d5:   add    $0x40,%rcx
  0x00007fa5c50473d9:   add    (%rdx),%eax
  0x00007fa5c50473db:   mov    %eax,(%rdx)
  0x00007fa5c50473dd:   add    0x4(%rdx),%ebx
  0x00007fa5c50473e0:   mov    %ebx,0x4(%rdx)
  0x00007fa5c50473e3:   add    0x8(%rdx),%edi
  0x00007fa5c50473e6:   mov    %edi,0x8(%rdx)
  0x00007fa5c50473e9:   add    0xc(%rdx),%esi
  0x00007fa5c50473ec:   mov    %esi,0xc(%rdx)
  0x00007fa5c50473ef:   add    0x10(%rdx),%r8d
  0x00007fa5c50473f3:   mov    %r8d,0x10(%rdx)
  0x00007fa5c50473f7:   add    0x14(%rdx),%r9d
  0x00007fa5c50473fb:   mov    %r9d,0x14(%rdx)
  0x00007fa5c50473ff:   add    0x18(%rdx),%r10d
  0x00007fa5c5047403:   mov    %r10d,0x18(%rdx)
  0x00007fa5c5047407:   add    0x1c(%rdx),%r11d
  0x00007fa5c504740b:   mov    %r11d,0x1c(%rdx)
  0x00007fa5c504740f:   cmp    0x200(%rsp),%rcx
  0x00007fa5c5047417:   jb     Stub::sha256_implCompressMB+172 0x00007fa5c504640c
  0x00007fa5c504741d:   ja     Stub::sha256_implCompressMB+4402 0x00007fa5c5047492
  0x00007fa5c504741f:   movabs $0x7fa5ceac14c0,%rbp
  0x00007fa5c5047429:   vmovdqu (%rcx),%xmm4
  0x00007fa5c504742d:   vmovdqu 0x10(%rcx),%xmm5
  0x00007fa5c5047432:   vmovdqu 0x20(%rcx),%xmm6
  0x00007fa5c5047437:   vmovdqu 0x30(%rcx),%xmm7
  0x00007fa5c504743c:   vpshufb %xmm13,%xmm4,%xmm4
  0x00007fa5c5047441:   vpshufb %xmm13,%xmm5,%xmm5
  0x00007fa5c5047446:   vpshufb %xmm13,%xmm6,%xmm6
  0x00007fa5c504744b:   vpshufb %xmm13,%xmm7,%xmm7
  0x00007fa5c5047450:   jmpq   Stub::sha256_implCompressMB+245 0x00007fa5c5046455
  0x00007fa5c5047455:   mov    (%rdx),%eax
  0x00007fa5c5047457:   mov    0x4(%rdx),%ebx
  0x00007fa5c504745a:   mov    0x8(%rdx),%edi
  0x00007fa5c504745d:   mov    0xc(%rdx),%esi
  0x00007fa5c5047460:   mov    0x10(%rdx),%r8d
  0x00007fa5c5047464:   mov    0x14(%rdx),%r9d
  0x00007fa5c5047468:   mov    0x1c(%rdx),%r11d
  0x00007fa5c504746c:   vmovdqu -0x22b4(%rip),%ymm13        # Stub::pshuffle_byte_flip_mask
  0x00007fa5c5047474:   vmovdqu -0x229c(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask+32 0x00007fa5c50451e0
  0x00007fa5c504747c:   vmovdqu -0x2284(%rip),%ymm12        # Stub::pshuffle_byte_flip_mask+64 0x00007fa5c5045200
  0x00007fa5c5047484:   mov    0x18(%rdx),%r10d
  0x00007fa5c5047488:   mov    %rdx,0x210(%rsp)
  0x00007fa5c5047490:   jmp    Stub::sha256_implCompressMB+4287 0x00007fa5c504741f
  0x00007fa5c5047492:   mov    0x218(%rsp),%rsp
  0x00007fa5c504749a:   pop    %r15
  0x00007fa5c504749c:   pop    %r14
  0x00007fa5c504749e:   pop    %r13
  0x00007fa5c50474a0:   pop    %r12
  0x00007fa5c50474a2:   pop    %rbp
  0x00007fa5c50474a3:   pop    %rbx
  0x00007fa5c50474a4:   pop    %rdx
  0x00007fa5c50474a5:   pop    %rcx
  0x00007fa5c50474a6:   mov    %rdx,%rax
  0x00007fa5c50474a9:   cmp    %rcx,%rax
  0x00007fa5c50474ac:   jae    Stub::sha256_implCompressMB+4436 0x00007fa5c50474b4
  0x00007fa5c50474ae:   add    $0x40,%rax
  0x00007fa5c50474b2:   jmp    Stub::sha256_implCompressMB+4425 0x00007fa5c50474a9
  0x00007fa5c50474b4:   add    $0x20,%rsp
  0x00007fa5c50474b8:   vzeroupper 
  0x00007fa5c50474bb:   leaveq 
  0x00007fa5c50474bc:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::pshuffle_byte_flip_mask_sha512 [0x00007fa5c50474e0, 0x00007fa5c5047520] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50474e0:   (bad)  
  0x00007fa5c50474e1:   (bad)  
  0x00007fa5c50474e2:   add    $0x1020304,%eax
  0x00007fa5c50474e7:   add    %cl,(%rdi)
  0x00007fa5c50474e9:   (bad)  
  0x00007fa5c50474ea:   or     $0x90a0b0c,%eax
  0x00007fa5c50474ef:   or     %dl,(%rdi)
  0x00007fa5c50474f1:   (bad)  
  0x00007fa5c50474f2:   adc    $0x11121314,%eax
  0x00007fa5c50474f7:   adc    %bl,(%rdi)
  0x00007fa5c50474f9:   (bad)  
  0x00007fa5c50474fa:   sbb    $0x191a1b1c,%eax
  0x00007fa5c50474ff:   sbb    %al,(%rax)
  0x00007fa5c5047501:   add    %al,(%rax)
  0x00007fa5c5047503:   add    %al,(%rax)
  0x00007fa5c5047505:   add    %al,(%rax)
  0x00007fa5c5047507:   add    %al,(%rax)
  0x00007fa5c5047509:   add    %al,(%rax)
  0x00007fa5c504750b:   add    %al,(%rax)
  0x00007fa5c504750d:   add    %al,(%rax)
  0x00007fa5c504750f:   add    %bh,%bh
  0x00007fa5c5047511:   (bad)  
  0x00007fa5c5047512:   (bad)  
  0x00007fa5c5047513:   (bad)  
  0x00007fa5c5047514:   (bad)  
  0x00007fa5c5047515:   (bad)  
  0x00007fa5c5047516:   (bad)  
  0x00007fa5c5047517:   (bad)  
  0x00007fa5c5047518:   (bad)  
  0x00007fa5c5047519:   (bad)  
  0x00007fa5c504751a:   (bad)  
  0x00007fa5c504751b:   (bad)  
  0x00007fa5c504751c:   (bad)  
  0x00007fa5c504751d:   (bad)  
  0x00007fa5c504751e:   (bad)  
  0x00007fa5c504751f:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha512_implCompress [0x00007fa5c5047520, 0x00007fa5c5048335] (3605 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5047520:   push   %rbp
  0x00007fa5c5047521:   mov    %rsp,%rbp
  0x00007fa5c5047524:   push   %rdx
  0x00007fa5c5047525:   push   %rcx
  0x00007fa5c5047526:   mov    %rsp,%rax
  0x00007fa5c5047529:   sub    $0x70,%rsp
  0x00007fa5c504752d:   and    $0xffffffffffffffe0,%rsp
  0x00007fa5c5047531:   mov    %rax,0x38(%rsp)
  0x00007fa5c5047536:   mov    %rbp,0x40(%rsp)
  0x00007fa5c504753b:   mov    %rbx,0x48(%rsp)
  0x00007fa5c5047540:   mov    %r12,0x50(%rsp)
  0x00007fa5c5047545:   mov    %r13,0x58(%rsp)
  0x00007fa5c504754a:   mov    %r14,0x60(%rsp)
  0x00007fa5c504754f:   mov    %r15,0x68(%rsp)
  0x00007fa5c5047554:   vpblendd $0xf0,%xmm1,%xmm0,%xmm0
  0x00007fa5c504755a:   vpblendd $0xf0,%ymm1,%ymm0,%ymm0
  0x00007fa5c5047560:   xor    %rdx,%rdx
  0x00007fa5c5047563:   add    $0x80,%rdx
  0x00007fa5c504756a:   add    %rdi,%rdx
  0x00007fa5c504756d:   mov    %rdx,0x30(%rsp)
  0x00007fa5c5047572:   mov    (%rsi),%rax
  0x00007fa5c5047575:   mov    0x8(%rsi),%rbx
  0x00007fa5c5047579:   mov    0x10(%rsi),%rcx
  0x00007fa5c504757d:   mov    0x18(%rsi),%r8
  0x00007fa5c5047581:   mov    0x20(%rsi),%rdx
  0x00007fa5c5047585:   mov    0x28(%rsi),%r9
  0x00007fa5c5047589:   mov    0x38(%rsi),%r11
  0x00007fa5c504758d:   vmovdqu -0xb5(%rip),%ymm9        # Stub::pshuffle_byte_flip_mask_sha512
  0x00007fa5c5047595:   vmovdqu -0x9d(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask_sha512+32 0x00007fa5c5047500
  0x00007fa5c504759d:   mov    0x30(%rsi),%r10
  0x00007fa5c50475a1:   movabs $0x7fa5cea6c140,%rbp
  0x00007fa5c50475ab:   vmovdqu (%rdi),%ymm4
  0x00007fa5c50475af:   vpshufb %ymm9,%ymm4,%ymm4
  0x00007fa5c50475b4:   vmovdqu 0x20(%rdi),%ymm5
  0x00007fa5c50475b9:   vpshufb %ymm9,%ymm5,%ymm5
  0x00007fa5c50475be:   vmovdqu 0x40(%rdi),%ymm6
  0x00007fa5c50475c3:   vpshufb %ymm9,%ymm6,%ymm6
  0x00007fa5c50475c8:   vmovdqu 0x60(%rdi),%ymm7
  0x00007fa5c50475cd:   vpshufb %ymm9,%ymm7,%ymm7
  0x00007fa5c50475d2:   mov    %rdi,0x28(%rsp)
  0x00007fa5c50475d7:   movq   $0x4,0x20(%rsp)
  0x00007fa5c50475e0:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007fa5c50475e5:   vmovdqu %ymm0,(%rsp)
  0x00007fa5c50475ea:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm0
  0x00007fa5c50475f0:   vpalignr $0x8,%ymm6,%ymm0,%ymm0
  0x00007fa5c50475f6:   vpaddq %ymm4,%ymm0,%ymm0
  0x00007fa5c50475fa:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm1
  0x00007fa5c5047600:   vpalignr $0x8,%ymm4,%ymm1,%ymm1
  0x00007fa5c5047606:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fa5c504760b:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fa5c5047610:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c5047614:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fa5c5047619:   mov    %rax,%rdi
  0x00007fa5c504761c:   rorx   $0x29,%rdx,%r13
  0x00007fa5c5047622:   rorx   $0x12,%rdx,%r14
  0x00007fa5c5047628:   add    (%rsp),%r11
  0x00007fa5c504762c:   or     %rcx,%rdi
  0x00007fa5c504762f:   mov    %r9,%r15
  0x00007fa5c5047632:   xor    %r10,%r15
  0x00007fa5c5047635:   rorx   $0x22,%rax,%r12
  0x00007fa5c504763b:   xor    %r14,%r13
  0x00007fa5c504763e:   rorx   $0xe,%rdx,%r14
  0x00007fa5c5047644:   and    %rdx,%r15
  0x00007fa5c5047647:   add    %r11,%r8
  0x00007fa5c504764a:   and    %rbx,%rdi
  0x00007fa5c504764d:   xor    %r14,%r13
  0x00007fa5c5047650:   rorx   $0x27,%rax,%r14
  0x00007fa5c5047656:   xor    %r12,%r14
  0x00007fa5c5047659:   rorx   $0x1c,%rax,%r12
  0x00007fa5c504765f:   xor    %r10,%r15
  0x00007fa5c5047662:   xor    %r12,%r14
  0x00007fa5c5047665:   mov    %rax,%r12
  0x00007fa5c5047668:   and    %rcx,%r12
  0x00007fa5c504766b:   add    %r13,%r15
  0x00007fa5c504766e:   or     %r12,%rdi
  0x00007fa5c5047671:   add    %r14,%r11
  0x00007fa5c5047674:   add    %r15,%r8
  0x00007fa5c5047677:   add    %r15,%r11
  0x00007fa5c504767a:   add    %rdi,%r11
  0x00007fa5c504767d:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fa5c5047682:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fa5c5047687:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fa5c504768b:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fa5c5047690:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fa5c5047694:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fa5c5047698:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm4
  0x00007fa5c504769e:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fa5c50476a3:   vperm2f128 $0x11,%ymm7,%ymm7,%ymm2
  0x00007fa5c50476a9:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fa5c50476ae:   mov    %r11,%rdi
  0x00007fa5c50476b1:   rorx   $0x29,%r8,%r13
  0x00007fa5c50476b7:   rorx   $0x12,%r8,%r14
  0x00007fa5c50476bd:   add    0x8(%rsp),%r10
  0x00007fa5c50476c2:   or     %rbx,%rdi
  0x00007fa5c50476c5:   mov    %rdx,%r15
  0x00007fa5c50476c8:   xor    %r9,%r15
  0x00007fa5c50476cb:   rorx   $0x22,%r11,%r12
  0x00007fa5c50476d1:   xor    %r14,%r13
  0x00007fa5c50476d4:   rorx   $0xe,%r8,%r14
  0x00007fa5c50476da:   and    %r8,%r15
  0x00007fa5c50476dd:   add    %r10,%rcx
  0x00007fa5c50476e0:   and    %rax,%rdi
  0x00007fa5c50476e3:   xor    %r14,%r13
  0x00007fa5c50476e6:   rorx   $0x27,%r11,%r14
  0x00007fa5c50476ec:   xor    %r12,%r14
  0x00007fa5c50476ef:   rorx   $0x1c,%r11,%r12
  0x00007fa5c50476f5:   xor    %r9,%r15
  0x00007fa5c50476f8:   xor    %r12,%r14
  0x00007fa5c50476fb:   mov    %r11,%r12
  0x00007fa5c50476fe:   and    %rbx,%r12
  0x00007fa5c5047701:   add    %r13,%r15
  0x00007fa5c5047704:   or     %r12,%rdi
  0x00007fa5c5047707:   add    %r14,%r10
  0x00007fa5c504770a:   add    %r15,%rcx
  0x00007fa5c504770d:   add    %r15,%r10
  0x00007fa5c5047710:   add    %rdi,%r10
  0x00007fa5c5047713:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5047718:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fa5c504771d:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5047721:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047725:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fa5c504772a:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fa5c504772f:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5047733:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047737:   vpaddq %ymm8,%ymm4,%ymm4
  0x00007fa5c504773c:   vpsrlq $0x6,%ymm4,%ymm8
  0x00007fa5c5047741:   mov    %r10,%rdi
  0x00007fa5c5047744:   rorx   $0x29,%rcx,%r13
  0x00007fa5c504774a:   rorx   $0x12,%rcx,%r14
  0x00007fa5c5047750:   add    0x10(%rsp),%r9
  0x00007fa5c5047755:   or     %rax,%rdi
  0x00007fa5c5047758:   mov    %r8,%r15
  0x00007fa5c504775b:   xor    %rdx,%r15
  0x00007fa5c504775e:   rorx   $0x22,%r10,%r12
  0x00007fa5c5047764:   xor    %r14,%r13
  0x00007fa5c5047767:   rorx   $0xe,%rcx,%r14
  0x00007fa5c504776d:   and    %rcx,%r15
  0x00007fa5c5047770:   add    %r9,%rbx
  0x00007fa5c5047773:   and    %r11,%rdi
  0x00007fa5c5047776:   xor    %r14,%r13
  0x00007fa5c5047779:   rorx   $0x27,%r10,%r14
  0x00007fa5c504777f:   xor    %r12,%r14
  0x00007fa5c5047782:   rorx   $0x1c,%r10,%r12
  0x00007fa5c5047788:   xor    %rdx,%r15
  0x00007fa5c504778b:   xor    %r12,%r14
  0x00007fa5c504778e:   mov    %r10,%r12
  0x00007fa5c5047791:   and    %rax,%r12
  0x00007fa5c5047794:   add    %r13,%r15
  0x00007fa5c5047797:   or     %r12,%rdi
  0x00007fa5c504779a:   add    %r14,%r9
  0x00007fa5c504779d:   add    %r15,%rbx
  0x00007fa5c50477a0:   add    %r15,%r9
  0x00007fa5c50477a3:   add    %rdi,%r9
  0x00007fa5c50477a6:   vpsrlq $0x13,%ymm4,%ymm3
  0x00007fa5c50477ab:   vpsllq $0x2d,%ymm4,%ymm1
  0x00007fa5c50477b0:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c50477b4:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c50477b8:   vpsrlq $0x3d,%ymm4,%ymm3
  0x00007fa5c50477bd:   vpsllq $0x3,%ymm4,%ymm1
  0x00007fa5c50477c2:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c50477c6:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c50477ca:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fa5c50477cf:   vpblendd $0xf0,%ymm2,%ymm4,%ymm4
  0x00007fa5c50477d5:   mov    %r9,%rdi
  0x00007fa5c50477d8:   rorx   $0x29,%rbx,%r13
  0x00007fa5c50477de:   rorx   $0x12,%rbx,%r14
  0x00007fa5c50477e4:   add    0x18(%rsp),%rdx
  0x00007fa5c50477e9:   or     %r11,%rdi
  0x00007fa5c50477ec:   mov    %rcx,%r15
  0x00007fa5c50477ef:   xor    %r8,%r15
  0x00007fa5c50477f2:   rorx   $0x22,%r9,%r12
  0x00007fa5c50477f8:   xor    %r14,%r13
  0x00007fa5c50477fb:   rorx   $0xe,%rbx,%r14
  0x00007fa5c5047801:   and    %rbx,%r15
  0x00007fa5c5047804:   add    %rdx,%rax
  0x00007fa5c5047807:   and    %r10,%rdi
  0x00007fa5c504780a:   xor    %r14,%r13
  0x00007fa5c504780d:   rorx   $0x27,%r9,%r14
  0x00007fa5c5047813:   xor    %r12,%r14
  0x00007fa5c5047816:   rorx   $0x1c,%r9,%r12
  0x00007fa5c504781c:   xor    %r8,%r15
  0x00007fa5c504781f:   xor    %r12,%r14
  0x00007fa5c5047822:   mov    %r9,%r12
  0x00007fa5c5047825:   and    %r11,%r12
  0x00007fa5c5047828:   add    %r13,%r15
  0x00007fa5c504782b:   or     %r12,%rdi
  0x00007fa5c504782e:   add    %r14,%rdx
  0x00007fa5c5047831:   add    %r15,%rax
  0x00007fa5c5047834:   add    %r15,%rdx
  0x00007fa5c5047837:   add    %rdi,%rdx
  0x00007fa5c504783a:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007fa5c504783f:   vmovdqu %ymm0,(%rsp)
  0x00007fa5c5047844:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm0
  0x00007fa5c504784a:   vpalignr $0x8,%ymm7,%ymm0,%ymm0
  0x00007fa5c5047850:   vpaddq %ymm5,%ymm0,%ymm0
  0x00007fa5c5047854:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm1
  0x00007fa5c504785a:   vpalignr $0x8,%ymm5,%ymm1,%ymm1
  0x00007fa5c5047860:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fa5c5047865:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fa5c504786a:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c504786e:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fa5c5047873:   mov    %rdx,%rdi
  0x00007fa5c5047876:   rorx   $0x29,%rax,%r13
  0x00007fa5c504787c:   rorx   $0x12,%rax,%r14
  0x00007fa5c5047882:   add    (%rsp),%r8
  0x00007fa5c5047886:   or     %r10,%rdi
  0x00007fa5c5047889:   mov    %rbx,%r15
  0x00007fa5c504788c:   xor    %rcx,%r15
  0x00007fa5c504788f:   rorx   $0x22,%rdx,%r12
  0x00007fa5c5047895:   xor    %r14,%r13
  0x00007fa5c5047898:   rorx   $0xe,%rax,%r14
  0x00007fa5c504789e:   and    %rax,%r15
  0x00007fa5c50478a1:   add    %r8,%r11
  0x00007fa5c50478a4:   and    %r9,%rdi
  0x00007fa5c50478a7:   xor    %r14,%r13
  0x00007fa5c50478aa:   rorx   $0x27,%rdx,%r14
  0x00007fa5c50478b0:   xor    %r12,%r14
  0x00007fa5c50478b3:   rorx   $0x1c,%rdx,%r12
  0x00007fa5c50478b9:   xor    %rcx,%r15
  0x00007fa5c50478bc:   xor    %r12,%r14
  0x00007fa5c50478bf:   mov    %rdx,%r12
  0x00007fa5c50478c2:   and    %r10,%r12
  0x00007fa5c50478c5:   add    %r13,%r15
  0x00007fa5c50478c8:   or     %r12,%rdi
  0x00007fa5c50478cb:   add    %r14,%r8
  0x00007fa5c50478ce:   add    %r15,%r11
  0x00007fa5c50478d1:   add    %r15,%r8
  0x00007fa5c50478d4:   add    %rdi,%r8
  0x00007fa5c50478d7:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fa5c50478dc:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fa5c50478e1:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fa5c50478e5:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fa5c50478ea:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fa5c50478ee:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fa5c50478f2:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm5
  0x00007fa5c50478f8:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fa5c50478fd:   vperm2f128 $0x11,%ymm4,%ymm4,%ymm2
  0x00007fa5c5047903:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fa5c5047908:   mov    %r8,%rdi
  0x00007fa5c504790b:   rorx   $0x29,%r11,%r13
  0x00007fa5c5047911:   rorx   $0x12,%r11,%r14
  0x00007fa5c5047917:   add    0x8(%rsp),%rcx
  0x00007fa5c504791c:   or     %r9,%rdi
  0x00007fa5c504791f:   mov    %rax,%r15
  0x00007fa5c5047922:   xor    %rbx,%r15
  0x00007fa5c5047925:   rorx   $0x22,%r8,%r12
  0x00007fa5c504792b:   xor    %r14,%r13
  0x00007fa5c504792e:   rorx   $0xe,%r11,%r14
  0x00007fa5c5047934:   and    %r11,%r15
  0x00007fa5c5047937:   add    %rcx,%r10
  0x00007fa5c504793a:   and    %rdx,%rdi
  0x00007fa5c504793d:   xor    %r14,%r13
  0x00007fa5c5047940:   rorx   $0x27,%r8,%r14
  0x00007fa5c5047946:   xor    %r12,%r14
  0x00007fa5c5047949:   rorx   $0x1c,%r8,%r12
  0x00007fa5c504794f:   xor    %rbx,%r15
  0x00007fa5c5047952:   xor    %r12,%r14
  0x00007fa5c5047955:   mov    %r8,%r12
  0x00007fa5c5047958:   and    %r9,%r12
  0x00007fa5c504795b:   add    %r13,%r15
  0x00007fa5c504795e:   or     %r12,%rdi
  0x00007fa5c5047961:   add    %r14,%rcx
  0x00007fa5c5047964:   add    %r15,%r10
  0x00007fa5c5047967:   add    %r15,%rcx
  0x00007fa5c504796a:   add    %rdi,%rcx
  0x00007fa5c504796d:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5047972:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fa5c5047977:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c504797b:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c504797f:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fa5c5047984:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fa5c5047989:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c504798d:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047991:   vpaddq %ymm8,%ymm5,%ymm5
  0x00007fa5c5047996:   vpsrlq $0x6,%ymm5,%ymm8
  0x00007fa5c504799b:   mov    %rcx,%rdi
  0x00007fa5c504799e:   rorx   $0x29,%r10,%r13
  0x00007fa5c50479a4:   rorx   $0x12,%r10,%r14
  0x00007fa5c50479aa:   add    0x10(%rsp),%rbx
  0x00007fa5c50479af:   or     %rdx,%rdi
  0x00007fa5c50479b2:   mov    %r11,%r15
  0x00007fa5c50479b5:   xor    %rax,%r15
  0x00007fa5c50479b8:   rorx   $0x22,%rcx,%r12
  0x00007fa5c50479be:   xor    %r14,%r13
  0x00007fa5c50479c1:   rorx   $0xe,%r10,%r14
  0x00007fa5c50479c7:   and    %r10,%r15
  0x00007fa5c50479ca:   add    %rbx,%r9
  0x00007fa5c50479cd:   and    %r8,%rdi
  0x00007fa5c50479d0:   xor    %r14,%r13
  0x00007fa5c50479d3:   rorx   $0x27,%rcx,%r14
  0x00007fa5c50479d9:   xor    %r12,%r14
  0x00007fa5c50479dc:   rorx   $0x1c,%rcx,%r12
  0x00007fa5c50479e2:   xor    %rax,%r15
  0x00007fa5c50479e5:   xor    %r12,%r14
  0x00007fa5c50479e8:   mov    %rcx,%r12
  0x00007fa5c50479eb:   and    %rdx,%r12
  0x00007fa5c50479ee:   add    %r13,%r15
  0x00007fa5c50479f1:   or     %r12,%rdi
  0x00007fa5c50479f4:   add    %r14,%rbx
  0x00007fa5c50479f7:   add    %r15,%r9
  0x00007fa5c50479fa:   add    %r15,%rbx
  0x00007fa5c50479fd:   add    %rdi,%rbx
  0x00007fa5c5047a00:   vpsrlq $0x13,%ymm5,%ymm3
  0x00007fa5c5047a05:   vpsllq $0x2d,%ymm5,%ymm1
  0x00007fa5c5047a0a:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5047a0e:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047a12:   vpsrlq $0x3d,%ymm5,%ymm3
  0x00007fa5c5047a17:   vpsllq $0x3,%ymm5,%ymm1
  0x00007fa5c5047a1c:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5047a20:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047a24:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fa5c5047a29:   vpblendd $0xf0,%ymm2,%ymm5,%ymm5
  0x00007fa5c5047a2f:   mov    %rbx,%rdi
  0x00007fa5c5047a32:   rorx   $0x29,%r9,%r13
  0x00007fa5c5047a38:   rorx   $0x12,%r9,%r14
  0x00007fa5c5047a3e:   add    0x18(%rsp),%rax
  0x00007fa5c5047a43:   or     %r8,%rdi
  0x00007fa5c5047a46:   mov    %r10,%r15
  0x00007fa5c5047a49:   xor    %r11,%r15
  0x00007fa5c5047a4c:   rorx   $0x22,%rbx,%r12
  0x00007fa5c5047a52:   xor    %r14,%r13
  0x00007fa5c5047a55:   rorx   $0xe,%r9,%r14
  0x00007fa5c5047a5b:   and    %r9,%r15
  0x00007fa5c5047a5e:   add    %rax,%rdx
  0x00007fa5c5047a61:   and    %rcx,%rdi
  0x00007fa5c5047a64:   xor    %r14,%r13
  0x00007fa5c5047a67:   rorx   $0x27,%rbx,%r14
  0x00007fa5c5047a6d:   xor    %r12,%r14
  0x00007fa5c5047a70:   rorx   $0x1c,%rbx,%r12
  0x00007fa5c5047a76:   xor    %r11,%r15
  0x00007fa5c5047a79:   xor    %r12,%r14
  0x00007fa5c5047a7c:   mov    %rbx,%r12
  0x00007fa5c5047a7f:   and    %r8,%r12
  0x00007fa5c5047a82:   add    %r13,%r15
  0x00007fa5c5047a85:   or     %r12,%rdi
  0x00007fa5c5047a88:   add    %r14,%rax
  0x00007fa5c5047a8b:   add    %r15,%rdx
  0x00007fa5c5047a8e:   add    %r15,%rax
  0x00007fa5c5047a91:   add    %rdi,%rax
  0x00007fa5c5047a94:   vpaddq 0x40(%rbp),%ymm6,%ymm0
  0x00007fa5c5047a99:   vmovdqu %ymm0,(%rsp)
  0x00007fa5c5047a9e:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm0
  0x00007fa5c5047aa4:   vpalignr $0x8,%ymm4,%ymm0,%ymm0
  0x00007fa5c5047aaa:   vpaddq %ymm6,%ymm0,%ymm0
  0x00007fa5c5047aae:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm1
  0x00007fa5c5047ab4:   vpalignr $0x8,%ymm6,%ymm1,%ymm1
  0x00007fa5c5047aba:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fa5c5047abf:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fa5c5047ac4:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c5047ac8:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fa5c5047acd:   mov    %rax,%rdi
  0x00007fa5c5047ad0:   rorx   $0x29,%rdx,%r13
  0x00007fa5c5047ad6:   rorx   $0x12,%rdx,%r14
  0x00007fa5c5047adc:   add    (%rsp),%r11
  0x00007fa5c5047ae0:   or     %rcx,%rdi
  0x00007fa5c5047ae3:   mov    %r9,%r15
  0x00007fa5c5047ae6:   xor    %r10,%r15
  0x00007fa5c5047ae9:   rorx   $0x22,%rax,%r12
  0x00007fa5c5047aef:   xor    %r14,%r13
  0x00007fa5c5047af2:   rorx   $0xe,%rdx,%r14
  0x00007fa5c5047af8:   and    %rdx,%r15
  0x00007fa5c5047afb:   add    %r11,%r8
  0x00007fa5c5047afe:   and    %rbx,%rdi
  0x00007fa5c5047b01:   xor    %r14,%r13
  0x00007fa5c5047b04:   rorx   $0x27,%rax,%r14
  0x00007fa5c5047b0a:   xor    %r12,%r14
  0x00007fa5c5047b0d:   rorx   $0x1c,%rax,%r12
  0x00007fa5c5047b13:   xor    %r10,%r15
  0x00007fa5c5047b16:   xor    %r12,%r14
  0x00007fa5c5047b19:   mov    %rax,%r12
  0x00007fa5c5047b1c:   and    %rcx,%r12
  0x00007fa5c5047b1f:   add    %r13,%r15
  0x00007fa5c5047b22:   or     %r12,%rdi
  0x00007fa5c5047b25:   add    %r14,%r11
  0x00007fa5c5047b28:   add    %r15,%r8
  0x00007fa5c5047b2b:   add    %r15,%r11
  0x00007fa5c5047b2e:   add    %rdi,%r11
  0x00007fa5c5047b31:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fa5c5047b36:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fa5c5047b3b:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fa5c5047b3f:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fa5c5047b44:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fa5c5047b48:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fa5c5047b4c:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm6
  0x00007fa5c5047b52:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fa5c5047b57:   vperm2f128 $0x11,%ymm5,%ymm5,%ymm2
  0x00007fa5c5047b5d:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fa5c5047b62:   mov    %r11,%rdi
  0x00007fa5c5047b65:   rorx   $0x29,%r8,%r13
  0x00007fa5c5047b6b:   rorx   $0x12,%r8,%r14
  0x00007fa5c5047b71:   add    0x8(%rsp),%r10
  0x00007fa5c5047b76:   or     %rbx,%rdi
  0x00007fa5c5047b79:   mov    %rdx,%r15
  0x00007fa5c5047b7c:   xor    %r9,%r15
  0x00007fa5c5047b7f:   rorx   $0x22,%r11,%r12
  0x00007fa5c5047b85:   xor    %r14,%r13
  0x00007fa5c5047b88:   rorx   $0xe,%r8,%r14
  0x00007fa5c5047b8e:   and    %r8,%r15
  0x00007fa5c5047b91:   add    %r10,%rcx
  0x00007fa5c5047b94:   and    %rax,%rdi
  0x00007fa5c5047b97:   xor    %r14,%r13
  0x00007fa5c5047b9a:   rorx   $0x27,%r11,%r14
  0x00007fa5c5047ba0:   xor    %r12,%r14
  0x00007fa5c5047ba3:   rorx   $0x1c,%r11,%r12
  0x00007fa5c5047ba9:   xor    %r9,%r15
  0x00007fa5c5047bac:   xor    %r12,%r14
  0x00007fa5c5047baf:   mov    %r11,%r12
  0x00007fa5c5047bb2:   and    %rbx,%r12
  0x00007fa5c5047bb5:   add    %r13,%r15
  0x00007fa5c5047bb8:   or     %r12,%rdi
  0x00007fa5c5047bbb:   add    %r14,%r10
  0x00007fa5c5047bbe:   add    %r15,%rcx
  0x00007fa5c5047bc1:   add    %r15,%r10
  0x00007fa5c5047bc4:   add    %rdi,%r10
  0x00007fa5c5047bc7:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5047bcc:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fa5c5047bd1:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5047bd5:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047bd9:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fa5c5047bde:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fa5c5047be3:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5047be7:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047beb:   vpaddq %ymm8,%ymm6,%ymm6
  0x00007fa5c5047bf0:   vpsrlq $0x6,%ymm6,%ymm8
  0x00007fa5c5047bf5:   mov    %r10,%rdi
  0x00007fa5c5047bf8:   rorx   $0x29,%rcx,%r13
  0x00007fa5c5047bfe:   rorx   $0x12,%rcx,%r14
  0x00007fa5c5047c04:   add    0x10(%rsp),%r9
  0x00007fa5c5047c09:   or     %rax,%rdi
  0x00007fa5c5047c0c:   mov    %r8,%r15
  0x00007fa5c5047c0f:   xor    %rdx,%r15
  0x00007fa5c5047c12:   rorx   $0x22,%r10,%r12
  0x00007fa5c5047c18:   xor    %r14,%r13
  0x00007fa5c5047c1b:   rorx   $0xe,%rcx,%r14
  0x00007fa5c5047c21:   and    %rcx,%r15
  0x00007fa5c5047c24:   add    %r9,%rbx
  0x00007fa5c5047c27:   and    %r11,%rdi
  0x00007fa5c5047c2a:   xor    %r14,%r13
  0x00007fa5c5047c2d:   rorx   $0x27,%r10,%r14
  0x00007fa5c5047c33:   xor    %r12,%r14
  0x00007fa5c5047c36:   rorx   $0x1c,%r10,%r12
  0x00007fa5c5047c3c:   xor    %rdx,%r15
  0x00007fa5c5047c3f:   xor    %r12,%r14
  0x00007fa5c5047c42:   mov    %r10,%r12
  0x00007fa5c5047c45:   and    %rax,%r12
  0x00007fa5c5047c48:   add    %r13,%r15
  0x00007fa5c5047c4b:   or     %r12,%rdi
  0x00007fa5c5047c4e:   add    %r14,%r9
  0x00007fa5c5047c51:   add    %r15,%rbx
  0x00007fa5c5047c54:   add    %r15,%r9
  0x00007fa5c5047c57:   add    %rdi,%r9
  0x00007fa5c5047c5a:   vpsrlq $0x13,%ymm6,%ymm3
  0x00007fa5c5047c5f:   vpsllq $0x2d,%ymm6,%ymm1
  0x00007fa5c5047c64:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5047c68:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047c6c:   vpsrlq $0x3d,%ymm6,%ymm3
  0x00007fa5c5047c71:   vpsllq $0x3,%ymm6,%ymm1
  0x00007fa5c5047c76:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5047c7a:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047c7e:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fa5c5047c83:   vpblendd $0xf0,%ymm2,%ymm6,%ymm6
  0x00007fa5c5047c89:   mov    %r9,%rdi
  0x00007fa5c5047c8c:   rorx   $0x29,%rbx,%r13
  0x00007fa5c5047c92:   rorx   $0x12,%rbx,%r14
  0x00007fa5c5047c98:   add    0x18(%rsp),%rdx
  0x00007fa5c5047c9d:   or     %r11,%rdi
  0x00007fa5c5047ca0:   mov    %rcx,%r15
  0x00007fa5c5047ca3:   xor    %r8,%r15
  0x00007fa5c5047ca6:   rorx   $0x22,%r9,%r12
  0x00007fa5c5047cac:   xor    %r14,%r13
  0x00007fa5c5047caf:   rorx   $0xe,%rbx,%r14
  0x00007fa5c5047cb5:   and    %rbx,%r15
  0x00007fa5c5047cb8:   add    %rdx,%rax
  0x00007fa5c5047cbb:   and    %r10,%rdi
  0x00007fa5c5047cbe:   xor    %r14,%r13
  0x00007fa5c5047cc1:   rorx   $0x27,%r9,%r14
  0x00007fa5c5047cc7:   xor    %r12,%r14
  0x00007fa5c5047cca:   rorx   $0x1c,%r9,%r12
  0x00007fa5c5047cd0:   xor    %r8,%r15
  0x00007fa5c5047cd3:   xor    %r12,%r14
  0x00007fa5c5047cd6:   mov    %r9,%r12
  0x00007fa5c5047cd9:   and    %r11,%r12
  0x00007fa5c5047cdc:   add    %r13,%r15
  0x00007fa5c5047cdf:   or     %r12,%rdi
  0x00007fa5c5047ce2:   add    %r14,%rdx
  0x00007fa5c5047ce5:   add    %r15,%rax
  0x00007fa5c5047ce8:   add    %r15,%rdx
  0x00007fa5c5047ceb:   add    %rdi,%rdx
  0x00007fa5c5047cee:   vpaddq 0x60(%rbp),%ymm7,%ymm0
  0x00007fa5c5047cf3:   vmovdqu %ymm0,(%rsp)
  0x00007fa5c5047cf8:   add    $0x80,%rbp
  0x00007fa5c5047cff:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm0
  0x00007fa5c5047d05:   vpalignr $0x8,%ymm5,%ymm0,%ymm0
  0x00007fa5c5047d0b:   vpaddq %ymm7,%ymm0,%ymm0
  0x00007fa5c5047d0f:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm1
  0x00007fa5c5047d15:   vpalignr $0x8,%ymm7,%ymm1,%ymm1
  0x00007fa5c5047d1b:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fa5c5047d20:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fa5c5047d25:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c5047d29:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fa5c5047d2e:   mov    %rdx,%rdi
  0x00007fa5c5047d31:   rorx   $0x29,%rax,%r13
  0x00007fa5c5047d37:   rorx   $0x12,%rax,%r14
  0x00007fa5c5047d3d:   add    (%rsp),%r8
  0x00007fa5c5047d41:   or     %r10,%rdi
  0x00007fa5c5047d44:   mov    %rbx,%r15
  0x00007fa5c5047d47:   xor    %rcx,%r15
  0x00007fa5c5047d4a:   rorx   $0x22,%rdx,%r12
  0x00007fa5c5047d50:   xor    %r14,%r13
  0x00007fa5c5047d53:   rorx   $0xe,%rax,%r14
  0x00007fa5c5047d59:   and    %rax,%r15
  0x00007fa5c5047d5c:   add    %r8,%r11
  0x00007fa5c5047d5f:   and    %r9,%rdi
  0x00007fa5c5047d62:   xor    %r14,%r13
  0x00007fa5c5047d65:   rorx   $0x27,%rdx,%r14
  0x00007fa5c5047d6b:   xor    %r12,%r14
  0x00007fa5c5047d6e:   rorx   $0x1c,%rdx,%r12
  0x00007fa5c5047d74:   xor    %rcx,%r15
  0x00007fa5c5047d77:   xor    %r12,%r14
  0x00007fa5c5047d7a:   mov    %rdx,%r12
  0x00007fa5c5047d7d:   and    %r10,%r12
  0x00007fa5c5047d80:   add    %r13,%r15
  0x00007fa5c5047d83:   or     %r12,%rdi
  0x00007fa5c5047d86:   add    %r14,%r8
  0x00007fa5c5047d89:   add    %r15,%r11
  0x00007fa5c5047d8c:   add    %r15,%r8
  0x00007fa5c5047d8f:   add    %rdi,%r8
  0x00007fa5c5047d92:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fa5c5047d97:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fa5c5047d9c:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fa5c5047da0:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fa5c5047da5:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fa5c5047da9:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fa5c5047dad:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm7
  0x00007fa5c5047db3:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fa5c5047db8:   vperm2f128 $0x11,%ymm6,%ymm6,%ymm2
  0x00007fa5c5047dbe:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fa5c5047dc3:   mov    %r8,%rdi
  0x00007fa5c5047dc6:   rorx   $0x29,%r11,%r13
  0x00007fa5c5047dcc:   rorx   $0x12,%r11,%r14
  0x00007fa5c5047dd2:   add    0x8(%rsp),%rcx
  0x00007fa5c5047dd7:   or     %r9,%rdi
  0x00007fa5c5047dda:   mov    %rax,%r15
  0x00007fa5c5047ddd:   xor    %rbx,%r15
  0x00007fa5c5047de0:   rorx   $0x22,%r8,%r12
  0x00007fa5c5047de6:   xor    %r14,%r13
  0x00007fa5c5047de9:   rorx   $0xe,%r11,%r14
  0x00007fa5c5047def:   and    %r11,%r15
  0x00007fa5c5047df2:   add    %rcx,%r10
  0x00007fa5c5047df5:   and    %rdx,%rdi
  0x00007fa5c5047df8:   xor    %r14,%r13
  0x00007fa5c5047dfb:   rorx   $0x27,%r8,%r14
  0x00007fa5c5047e01:   xor    %r12,%r14
  0x00007fa5c5047e04:   rorx   $0x1c,%r8,%r12
  0x00007fa5c5047e0a:   xor    %rbx,%r15
  0x00007fa5c5047e0d:   xor    %r12,%r14
  0x00007fa5c5047e10:   mov    %r8,%r12
  0x00007fa5c5047e13:   and    %r9,%r12
  0x00007fa5c5047e16:   add    %r13,%r15
  0x00007fa5c5047e19:   or     %r12,%rdi
  0x00007fa5c5047e1c:   add    %r14,%rcx
  0x00007fa5c5047e1f:   add    %r15,%r10
  0x00007fa5c5047e22:   add    %r15,%rcx
  0x00007fa5c5047e25:   add    %rdi,%rcx
  0x00007fa5c5047e28:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5047e2d:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fa5c5047e32:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5047e36:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047e3a:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fa5c5047e3f:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fa5c5047e44:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5047e48:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047e4c:   vpaddq %ymm8,%ymm7,%ymm7
  0x00007fa5c5047e51:   vpsrlq $0x6,%ymm7,%ymm8
  0x00007fa5c5047e56:   mov    %rcx,%rdi
  0x00007fa5c5047e59:   rorx   $0x29,%r10,%r13
  0x00007fa5c5047e5f:   rorx   $0x12,%r10,%r14
  0x00007fa5c5047e65:   add    0x10(%rsp),%rbx
  0x00007fa5c5047e6a:   or     %rdx,%rdi
  0x00007fa5c5047e6d:   mov    %r11,%r15
  0x00007fa5c5047e70:   xor    %rax,%r15
  0x00007fa5c5047e73:   rorx   $0x22,%rcx,%r12
  0x00007fa5c5047e79:   xor    %r14,%r13
  0x00007fa5c5047e7c:   rorx   $0xe,%r10,%r14
  0x00007fa5c5047e82:   and    %r10,%r15
  0x00007fa5c5047e85:   add    %rbx,%r9
  0x00007fa5c5047e88:   and    %r8,%rdi
  0x00007fa5c5047e8b:   xor    %r14,%r13
  0x00007fa5c5047e8e:   rorx   $0x27,%rcx,%r14
  0x00007fa5c5047e94:   xor    %r12,%r14
  0x00007fa5c5047e97:   rorx   $0x1c,%rcx,%r12
  0x00007fa5c5047e9d:   xor    %rax,%r15
  0x00007fa5c5047ea0:   xor    %r12,%r14
  0x00007fa5c5047ea3:   mov    %rcx,%r12
  0x00007fa5c5047ea6:   and    %rdx,%r12
  0x00007fa5c5047ea9:   add    %r13,%r15
  0x00007fa5c5047eac:   or     %r12,%rdi
  0x00007fa5c5047eaf:   add    %r14,%rbx
  0x00007fa5c5047eb2:   add    %r15,%r9
  0x00007fa5c5047eb5:   add    %r15,%rbx
  0x00007fa5c5047eb8:   add    %rdi,%rbx
  0x00007fa5c5047ebb:   vpsrlq $0x13,%ymm7,%ymm3
  0x00007fa5c5047ec0:   vpsllq $0x2d,%ymm7,%ymm1
  0x00007fa5c5047ec5:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5047ec9:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047ecd:   vpsrlq $0x3d,%ymm7,%ymm3
  0x00007fa5c5047ed2:   vpsllq $0x3,%ymm7,%ymm1
  0x00007fa5c5047ed7:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5047edb:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5047edf:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fa5c5047ee4:   vpblendd $0xf0,%ymm2,%ymm7,%ymm7
  0x00007fa5c5047eea:   mov    %rbx,%rdi
  0x00007fa5c5047eed:   rorx   $0x29,%r9,%r13
  0x00007fa5c5047ef3:   rorx   $0x12,%r9,%r14
  0x00007fa5c5047ef9:   add    0x18(%rsp),%rax
  0x00007fa5c5047efe:   or     %r8,%rdi
  0x00007fa5c5047f01:   mov    %r10,%r15
  0x00007fa5c5047f04:   xor    %r11,%r15
  0x00007fa5c5047f07:   rorx   $0x22,%rbx,%r12
  0x00007fa5c5047f0d:   xor    %r14,%r13
  0x00007fa5c5047f10:   rorx   $0xe,%r9,%r14
  0x00007fa5c5047f16:   and    %r9,%r15
  0x00007fa5c5047f19:   add    %rax,%rdx
  0x00007fa5c5047f1c:   and    %rcx,%rdi
  0x00007fa5c5047f1f:   xor    %r14,%r13
  0x00007fa5c5047f22:   rorx   $0x27,%rbx,%r14
  0x00007fa5c5047f28:   xor    %r12,%r14
  0x00007fa5c5047f2b:   rorx   $0x1c,%rbx,%r12
  0x00007fa5c5047f31:   xor    %r11,%r15
  0x00007fa5c5047f34:   xor    %r12,%r14
  0x00007fa5c5047f37:   mov    %rbx,%r12
  0x00007fa5c5047f3a:   and    %r8,%r12
  0x00007fa5c5047f3d:   add    %r13,%r15
  0x00007fa5c5047f40:   or     %r12,%rdi
  0x00007fa5c5047f43:   add    %r14,%rax
  0x00007fa5c5047f46:   add    %r15,%rdx
  0x00007fa5c5047f49:   add    %r15,%rax
  0x00007fa5c5047f4c:   add    %rdi,%rax
  0x00007fa5c5047f4f:   subq   $0x1,0x20(%rsp)
  0x00007fa5c5047f55:   jne    Stub::sha512_implCompress+192 0x00007fa5c50475e0
  0x00007fa5c5047f5b:   movq   $0x2,0x20(%rsp)
  0x00007fa5c5047f64:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007fa5c5047f69:   vmovdqu %ymm0,(%rsp)
  0x00007fa5c5047f6e:   mov    %r9,%r15
  0x00007fa5c5047f71:   rorx   $0x29,%rdx,%r13
  0x00007fa5c5047f77:   rorx   $0x12,%rdx,%r14
  0x00007fa5c5047f7d:   xor    %r10,%r15
  0x00007fa5c5047f80:   xor    %r14,%r13
  0x00007fa5c5047f83:   rorx   $0xe,%rdx,%r14
  0x00007fa5c5047f89:   and    %rdx,%r15
  0x00007fa5c5047f8c:   xor    %r14,%r13
  0x00007fa5c5047f8f:   rorx   $0x22,%rax,%r12
  0x00007fa5c5047f95:   xor    %r10,%r15
  0x00007fa5c5047f98:   rorx   $0x27,%rax,%r14
  0x00007fa5c5047f9e:   mov    %rax,%rdi
  0x00007fa5c5047fa1:   xor    %r12,%r14
  0x00007fa5c5047fa4:   rorx   $0x1c,%rax,%r12
  0x00007fa5c5047faa:   add    (%rsp),%r11
  0x00007fa5c5047fae:   or     %rcx,%rdi
  0x00007fa5c5047fb1:   xor    %r12,%r14
  0x00007fa5c5047fb4:   mov    %rax,%r12
  0x00007fa5c5047fb7:   and    %rbx,%rdi
  0x00007fa5c5047fba:   and    %rcx,%r12
  0x00007fa5c5047fbd:   add    %r13,%r15
  0x00007fa5c5047fc0:   add    %r11,%r8
  0x00007fa5c5047fc3:   or     %r12,%rdi
  0x00007fa5c5047fc6:   add    %r14,%r11
  0x00007fa5c5047fc9:   add    %r15,%r8
  0x00007fa5c5047fcc:   add    %r15,%r11
  0x00007fa5c5047fcf:   mov    %rdx,%r15
  0x00007fa5c5047fd2:   rorx   $0x29,%r8,%r13
  0x00007fa5c5047fd8:   rorx   $0x12,%r8,%r14
  0x00007fa5c5047fde:   xor    %r9,%r15
  0x00007fa5c5047fe1:   xor    %r14,%r13
  0x00007fa5c5047fe4:   rorx   $0xe,%r8,%r14
  0x00007fa5c5047fea:   and    %r8,%r15
  0x00007fa5c5047fed:   add    %rdi,%r11
  0x00007fa5c5047ff0:   xor    %r14,%r13
  0x00007fa5c5047ff3:   rorx   $0x22,%r11,%r12
  0x00007fa5c5047ff9:   xor    %r9,%r15
  0x00007fa5c5047ffc:   rorx   $0x27,%r11,%r14
  0x00007fa5c5048002:   mov    %r11,%rdi
  0x00007fa5c5048005:   xor    %r12,%r14
  0x00007fa5c5048008:   rorx   $0x1c,%r11,%r12
  0x00007fa5c504800e:   add    0x8(%rsp),%r10
  0x00007fa5c5048013:   or     %rbx,%rdi
  0x00007fa5c5048016:   xor    %r12,%r14
  0x00007fa5c5048019:   mov    %r11,%r12
  0x00007fa5c504801c:   and    %rax,%rdi
  0x00007fa5c504801f:   and    %rbx,%r12
  0x00007fa5c5048022:   add    %r13,%r15
  0x00007fa5c5048025:   add    %r10,%rcx
  0x00007fa5c5048028:   or     %r12,%rdi
  0x00007fa5c504802b:   add    %r14,%r10
  0x00007fa5c504802e:   add    %r15,%rcx
  0x00007fa5c5048031:   add    %r15,%r10
  0x00007fa5c5048034:   mov    %r8,%r15
  0x00007fa5c5048037:   rorx   $0x29,%rcx,%r13
  0x00007fa5c504803d:   rorx   $0x12,%rcx,%r14
  0x00007fa5c5048043:   xor    %rdx,%r15
  0x00007fa5c5048046:   xor    %r14,%r13
  0x00007fa5c5048049:   rorx   $0xe,%rcx,%r14
  0x00007fa5c504804f:   and    %rcx,%r15
  0x00007fa5c5048052:   add    %rdi,%r10
  0x00007fa5c5048055:   xor    %r14,%r13
  0x00007fa5c5048058:   rorx   $0x22,%r10,%r12
  0x00007fa5c504805e:   xor    %rdx,%r15
  0x00007fa5c5048061:   rorx   $0x27,%r10,%r14
  0x00007fa5c5048067:   mov    %r10,%rdi
  0x00007fa5c504806a:   xor    %r12,%r14
  0x00007fa5c504806d:   rorx   $0x1c,%r10,%r12
  0x00007fa5c5048073:   add    0x10(%rsp),%r9
  0x00007fa5c5048078:   or     %rax,%rdi
  0x00007fa5c504807b:   xor    %r12,%r14
  0x00007fa5c504807e:   mov    %r10,%r12
  0x00007fa5c5048081:   and    %r11,%rdi
  0x00007fa5c5048084:   and    %rax,%r12
  0x00007fa5c5048087:   add    %r13,%r15
  0x00007fa5c504808a:   add    %r9,%rbx
  0x00007fa5c504808d:   or     %r12,%rdi
  0x00007fa5c5048090:   add    %r14,%r9
  0x00007fa5c5048093:   add    %r15,%rbx
  0x00007fa5c5048096:   add    %r15,%r9
  0x00007fa5c5048099:   mov    %rcx,%r15
  0x00007fa5c504809c:   rorx   $0x29,%rbx,%r13
  0x00007fa5c50480a2:   rorx   $0x12,%rbx,%r14
  0x00007fa5c50480a8:   xor    %r8,%r15
  0x00007fa5c50480ab:   xor    %r14,%r13
  0x00007fa5c50480ae:   rorx   $0xe,%rbx,%r14
  0x00007fa5c50480b4:   and    %rbx,%r15
  0x00007fa5c50480b7:   add    %rdi,%r9
  0x00007fa5c50480ba:   xor    %r14,%r13
  0x00007fa5c50480bd:   rorx   $0x22,%r9,%r12
  0x00007fa5c50480c3:   xor    %r8,%r15
  0x00007fa5c50480c6:   rorx   $0x27,%r9,%r14
  0x00007fa5c50480cc:   mov    %r9,%rdi
  0x00007fa5c50480cf:   xor    %r12,%r14
  0x00007fa5c50480d2:   rorx   $0x1c,%r9,%r12
  0x00007fa5c50480d8:   add    0x18(%rsp),%rdx
  0x00007fa5c50480dd:   or     %r11,%rdi
  0x00007fa5c50480e0:   xor    %r12,%r14
  0x00007fa5c50480e3:   mov    %r9,%r12
  0x00007fa5c50480e6:   and    %r10,%rdi
  0x00007fa5c50480e9:   and    %r11,%r12
  0x00007fa5c50480ec:   add    %r13,%r15
  0x00007fa5c50480ef:   add    %rdx,%rax
  0x00007fa5c50480f2:   or     %r12,%rdi
  0x00007fa5c50480f5:   add    %r14,%rdx
  0x00007fa5c50480f8:   add    %r15,%rax
  0x00007fa5c50480fb:   add    %r15,%rdx
  0x00007fa5c50480fe:   add    %rdi,%rdx
  0x00007fa5c5048101:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007fa5c5048106:   vmovdqu %ymm0,(%rsp)
  0x00007fa5c504810b:   add    $0x40,%rbp
  0x00007fa5c504810f:   mov    %rbx,%r15
  0x00007fa5c5048112:   rorx   $0x29,%rax,%r13
  0x00007fa5c5048118:   rorx   $0x12,%rax,%r14
  0x00007fa5c504811e:   xor    %rcx,%r15
  0x00007fa5c5048121:   xor    %r14,%r13
  0x00007fa5c5048124:   rorx   $0xe,%rax,%r14
  0x00007fa5c504812a:   and    %rax,%r15
  0x00007fa5c504812d:   xor    %r14,%r13
  0x00007fa5c5048130:   rorx   $0x22,%rdx,%r12
  0x00007fa5c5048136:   xor    %rcx,%r15
  0x00007fa5c5048139:   rorx   $0x27,%rdx,%r14
  0x00007fa5c504813f:   mov    %rdx,%rdi
  0x00007fa5c5048142:   xor    %r12,%r14
  0x00007fa5c5048145:   rorx   $0x1c,%rdx,%r12
  0x00007fa5c504814b:   add    (%rsp),%r8
  0x00007fa5c504814f:   or     %r10,%rdi
  0x00007fa5c5048152:   xor    %r12,%r14
  0x00007fa5c5048155:   mov    %rdx,%r12
  0x00007fa5c5048158:   and    %r9,%rdi
  0x00007fa5c504815b:   and    %r10,%r12
  0x00007fa5c504815e:   add    %r13,%r15
  0x00007fa5c5048161:   add    %r8,%r11
  0x00007fa5c5048164:   or     %r12,%rdi
  0x00007fa5c5048167:   add    %r14,%r8
  0x00007fa5c504816a:   add    %r15,%r11
  0x00007fa5c504816d:   add    %r15,%r8
  0x00007fa5c5048170:   mov    %rax,%r15
  0x00007fa5c5048173:   rorx   $0x29,%r11,%r13
  0x00007fa5c5048179:   rorx   $0x12,%r11,%r14
  0x00007fa5c504817f:   xor    %rbx,%r15
  0x00007fa5c5048182:   xor    %r14,%r13
  0x00007fa5c5048185:   rorx   $0xe,%r11,%r14
  0x00007fa5c504818b:   and    %r11,%r15
  0x00007fa5c504818e:   add    %rdi,%r8
  0x00007fa5c5048191:   xor    %r14,%r13
  0x00007fa5c5048194:   rorx   $0x22,%r8,%r12
  0x00007fa5c504819a:   xor    %rbx,%r15
  0x00007fa5c504819d:   rorx   $0x27,%r8,%r14
  0x00007fa5c50481a3:   mov    %r8,%rdi
  0x00007fa5c50481a6:   xor    %r12,%r14
  0x00007fa5c50481a9:   rorx   $0x1c,%r8,%r12
  0x00007fa5c50481af:   add    0x8(%rsp),%rcx
  0x00007fa5c50481b4:   or     %r9,%rdi
  0x00007fa5c50481b7:   xor    %r12,%r14
  0x00007fa5c50481ba:   mov    %r8,%r12
  0x00007fa5c50481bd:   and    %rdx,%rdi
  0x00007fa5c50481c0:   and    %r9,%r12
  0x00007fa5c50481c3:   add    %r13,%r15
  0x00007fa5c50481c6:   add    %rcx,%r10
  0x00007fa5c50481c9:   or     %r12,%rdi
  0x00007fa5c50481cc:   add    %r14,%rcx
  0x00007fa5c50481cf:   add    %r15,%r10
  0x00007fa5c50481d2:   add    %r15,%rcx
  0x00007fa5c50481d5:   mov    %r11,%r15
  0x00007fa5c50481d8:   rorx   $0x29,%r10,%r13
  0x00007fa5c50481de:   rorx   $0x12,%r10,%r14
  0x00007fa5c50481e4:   xor    %rax,%r15
  0x00007fa5c50481e7:   xor    %r14,%r13
  0x00007fa5c50481ea:   rorx   $0xe,%r10,%r14
  0x00007fa5c50481f0:   and    %r10,%r15
  0x00007fa5c50481f3:   add    %rdi,%rcx
  0x00007fa5c50481f6:   xor    %r14,%r13
  0x00007fa5c50481f9:   rorx   $0x22,%rcx,%r12
  0x00007fa5c50481ff:   xor    %rax,%r15
  0x00007fa5c5048202:   rorx   $0x27,%rcx,%r14
  0x00007fa5c5048208:   mov    %rcx,%rdi
  0x00007fa5c504820b:   xor    %r12,%r14
  0x00007fa5c504820e:   rorx   $0x1c,%rcx,%r12
  0x00007fa5c5048214:   add    0x10(%rsp),%rbx
  0x00007fa5c5048219:   or     %rdx,%rdi
  0x00007fa5c504821c:   xor    %r12,%r14
  0x00007fa5c504821f:   mov    %rcx,%r12
  0x00007fa5c5048222:   and    %r8,%rdi
  0x00007fa5c5048225:   and    %rdx,%r12
  0x00007fa5c5048228:   add    %r13,%r15
  0x00007fa5c504822b:   add    %rbx,%r9
  0x00007fa5c504822e:   or     %r12,%rdi
  0x00007fa5c5048231:   add    %r14,%rbx
  0x00007fa5c5048234:   add    %r15,%r9
  0x00007fa5c5048237:   add    %r15,%rbx
  0x00007fa5c504823a:   mov    %r10,%r15
  0x00007fa5c504823d:   rorx   $0x29,%r9,%r13
  0x00007fa5c5048243:   rorx   $0x12,%r9,%r14
  0x00007fa5c5048249:   xor    %r11,%r15
  0x00007fa5c504824c:   xor    %r14,%r13
  0x00007fa5c504824f:   rorx   $0xe,%r9,%r14
  0x00007fa5c5048255:   and    %r9,%r15
  0x00007fa5c5048258:   add    %rdi,%rbx
  0x00007fa5c504825b:   xor    %r14,%r13
  0x00007fa5c504825e:   rorx   $0x22,%rbx,%r12
  0x00007fa5c5048264:   xor    %r11,%r15
  0x00007fa5c5048267:   rorx   $0x27,%rbx,%r14
  0x00007fa5c504826d:   mov    %rbx,%rdi
  0x00007fa5c5048270:   xor    %r12,%r14
  0x00007fa5c5048273:   rorx   $0x1c,%rbx,%r12
  0x00007fa5c5048279:   add    0x18(%rsp),%rax
  0x00007fa5c504827e:   or     %r8,%rdi
  0x00007fa5c5048281:   xor    %r12,%r14
  0x00007fa5c5048284:   mov    %rbx,%r12
  0x00007fa5c5048287:   and    %rcx,%rdi
  0x00007fa5c504828a:   and    %r8,%r12
  0x00007fa5c504828d:   add    %r13,%r15
  0x00007fa5c5048290:   add    %rax,%rdx
  0x00007fa5c5048293:   or     %r12,%rdi
  0x00007fa5c5048296:   add    %r14,%rax
  0x00007fa5c5048299:   add    %r15,%rdx
  0x00007fa5c504829c:   add    %r15,%rax
  0x00007fa5c504829f:   add    %rdi,%rax
  0x00007fa5c50482a2:   vmovdqu %ymm6,%ymm4
  0x00007fa5c50482a6:   vmovdqu %ymm7,%ymm5
  0x00007fa5c50482aa:   subq   $0x1,0x20(%rsp)
  0x00007fa5c50482b0:   jne    Stub::sha512_implCompress+2628 0x00007fa5c5047f64
  0x00007fa5c50482b6:   add    (%rsi),%rax
  0x00007fa5c50482b9:   mov    %rax,(%rsi)
  0x00007fa5c50482bc:   add    0x8(%rsi),%rbx
  0x00007fa5c50482c0:   mov    %rbx,0x8(%rsi)
  0x00007fa5c50482c4:   add    0x10(%rsi),%rcx
  0x00007fa5c50482c8:   mov    %rcx,0x10(%rsi)
  0x00007fa5c50482cc:   add    0x18(%rsi),%r8
  0x00007fa5c50482d0:   mov    %r8,0x18(%rsi)
  0x00007fa5c50482d4:   add    0x20(%rsi),%rdx
  0x00007fa5c50482d8:   mov    %rdx,0x20(%rsi)
  0x00007fa5c50482dc:   add    0x28(%rsi),%r9
  0x00007fa5c50482e0:   mov    %r9,0x28(%rsi)
  0x00007fa5c50482e4:   add    0x30(%rsi),%r10
  0x00007fa5c50482e8:   mov    %r10,0x30(%rsi)
  0x00007fa5c50482ec:   add    0x38(%rsi),%r11
  0x00007fa5c50482f0:   mov    %r11,0x38(%rsi)
  0x00007fa5c50482f4:   mov    0x28(%rsp),%rdi
  0x00007fa5c50482f9:   add    $0x80,%rdi
  0x00007fa5c5048300:   cmp    0x30(%rsp),%rdi
  0x00007fa5c5048305:   jne    Stub::sha512_implCompress+129 0x00007fa5c50475a1
  0x00007fa5c504830b:   mov    0x40(%rsp),%rbp
  0x00007fa5c5048310:   mov    0x48(%rsp),%rbx
  0x00007fa5c5048315:   mov    0x50(%rsp),%r12
  0x00007fa5c504831a:   mov    0x58(%rsp),%r13
  0x00007fa5c504831f:   mov    0x60(%rsp),%r14
  0x00007fa5c5048324:   mov    0x68(%rsp),%r15
  0x00007fa5c5048329:   mov    0x38(%rsp),%rsp
  0x00007fa5c504832e:   pop    %rcx
  0x00007fa5c504832f:   pop    %rdx
  0x00007fa5c5048330:   vzeroupper 
  0x00007fa5c5048333:   leaveq 
  0x00007fa5c5048334:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::sha512_implCompressMB [0x00007fa5c5048340, 0x00007fa5c5049185] (3653 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5048340:   push   %rbp
  0x00007fa5c5048341:   mov    %rsp,%rbp
  0x00007fa5c5048344:   push   %rdx
  0x00007fa5c5048345:   push   %rcx
  0x00007fa5c5048346:   mov    %rsp,%rax
  0x00007fa5c5048349:   sub    $0x70,%rsp
  0x00007fa5c504834d:   and    $0xffffffffffffffe0,%rsp
  0x00007fa5c5048351:   mov    %rax,0x38(%rsp)
  0x00007fa5c5048356:   mov    %rbp,0x40(%rsp)
  0x00007fa5c504835b:   mov    %rbx,0x48(%rsp)
  0x00007fa5c5048360:   mov    %r12,0x50(%rsp)
  0x00007fa5c5048365:   mov    %r13,0x58(%rsp)
  0x00007fa5c504836a:   mov    %r14,0x60(%rsp)
  0x00007fa5c504836f:   mov    %r15,0x68(%rsp)
  0x00007fa5c5048374:   vpblendd $0xf0,%xmm1,%xmm0,%xmm0
  0x00007fa5c504837a:   vpblendd $0xf0,%ymm1,%ymm0,%ymm0
  0x00007fa5c5048380:   xor    %rax,%rax
  0x00007fa5c5048383:   cmp    %rcx,%rdx
  0x00007fa5c5048386:   jae    Stub::sha512_implCompressMB+87 0x00007fa5c5048397
  0x00007fa5c5048388:   add    $0x80,%rdx
  0x00007fa5c504838f:   add    $0x80,%rax
  0x00007fa5c5048395:   jmp    Stub::sha512_implCompressMB+67 0x00007fa5c5048383
  0x00007fa5c5048397:   mov    %rax,%rdx
  0x00007fa5c504839a:   cmp    $0x0,%rdx
  0x00007fa5c504839e:   je     Stub::sha512_implCompressMB+3595 0x00007fa5c504914b
  0x00007fa5c50483a4:   add    %rdi,%rdx
  0x00007fa5c50483a7:   mov    %rdx,0x30(%rsp)
  0x00007fa5c50483ac:   mov    (%rsi),%rax
  0x00007fa5c50483af:   mov    0x8(%rsi),%rbx
  0x00007fa5c50483b3:   mov    0x10(%rsi),%rcx
  0x00007fa5c50483b7:   mov    0x18(%rsi),%r8
  0x00007fa5c50483bb:   mov    0x20(%rsi),%rdx
  0x00007fa5c50483bf:   mov    0x28(%rsi),%r9
  0x00007fa5c50483c3:   mov    0x38(%rsi),%r11
  0x00007fa5c50483c7:   vmovdqu -0xeef(%rip),%ymm9        # Stub::pshuffle_byte_flip_mask_sha512
  0x00007fa5c50483cf:   vmovdqu -0xed7(%rip),%ymm10        # Stub::pshuffle_byte_flip_mask_sha512+32 0x00007fa5c5047500
  0x00007fa5c50483d7:   mov    0x30(%rsi),%r10
  0x00007fa5c50483db:   movabs $0x7fa5cea6c140,%rbp
  0x00007fa5c50483e5:   vmovdqu (%rdi),%ymm4
  0x00007fa5c50483e9:   vpshufb %ymm9,%ymm4,%ymm4
  0x00007fa5c50483ee:   vmovdqu 0x20(%rdi),%ymm5
  0x00007fa5c50483f3:   vpshufb %ymm9,%ymm5,%ymm5
  0x00007fa5c50483f8:   vmovdqu 0x40(%rdi),%ymm6
  0x00007fa5c50483fd:   vpshufb %ymm9,%ymm6,%ymm6
  0x00007fa5c5048402:   vmovdqu 0x60(%rdi),%ymm7
  0x00007fa5c5048407:   vpshufb %ymm9,%ymm7,%ymm7
  0x00007fa5c504840c:   mov    %rdi,0x28(%rsp)
  0x00007fa5c5048411:   movq   $0x4,0x20(%rsp)
  0x00007fa5c504841a:   nopw   0x0(%rax,%rax,1)
  0x00007fa5c5048420:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007fa5c5048425:   vmovdqu %ymm0,(%rsp)
  0x00007fa5c504842a:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm0
  0x00007fa5c5048430:   vpalignr $0x8,%ymm6,%ymm0,%ymm0
  0x00007fa5c5048436:   vpaddq %ymm4,%ymm0,%ymm0
  0x00007fa5c504843a:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm1
  0x00007fa5c5048440:   vpalignr $0x8,%ymm4,%ymm1,%ymm1
  0x00007fa5c5048446:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fa5c504844b:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fa5c5048450:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c5048454:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fa5c5048459:   mov    %rax,%rdi
  0x00007fa5c504845c:   rorx   $0x29,%rdx,%r13
  0x00007fa5c5048462:   rorx   $0x12,%rdx,%r14
  0x00007fa5c5048468:   add    (%rsp),%r11
  0x00007fa5c504846c:   or     %rcx,%rdi
  0x00007fa5c504846f:   mov    %r9,%r15
  0x00007fa5c5048472:   xor    %r10,%r15
  0x00007fa5c5048475:   rorx   $0x22,%rax,%r12
  0x00007fa5c504847b:   xor    %r14,%r13
  0x00007fa5c504847e:   rorx   $0xe,%rdx,%r14
  0x00007fa5c5048484:   and    %rdx,%r15
  0x00007fa5c5048487:   add    %r11,%r8
  0x00007fa5c504848a:   and    %rbx,%rdi
  0x00007fa5c504848d:   xor    %r14,%r13
  0x00007fa5c5048490:   rorx   $0x27,%rax,%r14
  0x00007fa5c5048496:   xor    %r12,%r14
  0x00007fa5c5048499:   rorx   $0x1c,%rax,%r12
  0x00007fa5c504849f:   xor    %r10,%r15
  0x00007fa5c50484a2:   xor    %r12,%r14
  0x00007fa5c50484a5:   mov    %rax,%r12
  0x00007fa5c50484a8:   and    %rcx,%r12
  0x00007fa5c50484ab:   add    %r13,%r15
  0x00007fa5c50484ae:   or     %r12,%rdi
  0x00007fa5c50484b1:   add    %r14,%r11
  0x00007fa5c50484b4:   add    %r15,%r8
  0x00007fa5c50484b7:   add    %r15,%r11
  0x00007fa5c50484ba:   add    %rdi,%r11
  0x00007fa5c50484bd:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fa5c50484c2:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fa5c50484c7:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fa5c50484cb:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fa5c50484d0:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fa5c50484d4:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fa5c50484d8:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm4
  0x00007fa5c50484de:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fa5c50484e3:   vperm2f128 $0x11,%ymm7,%ymm7,%ymm2
  0x00007fa5c50484e9:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fa5c50484ee:   mov    %r11,%rdi
  0x00007fa5c50484f1:   rorx   $0x29,%r8,%r13
  0x00007fa5c50484f7:   rorx   $0x12,%r8,%r14
  0x00007fa5c50484fd:   add    0x8(%rsp),%r10
  0x00007fa5c5048502:   or     %rbx,%rdi
  0x00007fa5c5048505:   mov    %rdx,%r15
  0x00007fa5c5048508:   xor    %r9,%r15
  0x00007fa5c504850b:   rorx   $0x22,%r11,%r12
  0x00007fa5c5048511:   xor    %r14,%r13
  0x00007fa5c5048514:   rorx   $0xe,%r8,%r14
  0x00007fa5c504851a:   and    %r8,%r15
  0x00007fa5c504851d:   add    %r10,%rcx
  0x00007fa5c5048520:   and    %rax,%rdi
  0x00007fa5c5048523:   xor    %r14,%r13
  0x00007fa5c5048526:   rorx   $0x27,%r11,%r14
  0x00007fa5c504852c:   xor    %r12,%r14
  0x00007fa5c504852f:   rorx   $0x1c,%r11,%r12
  0x00007fa5c5048535:   xor    %r9,%r15
  0x00007fa5c5048538:   xor    %r12,%r14
  0x00007fa5c504853b:   mov    %r11,%r12
  0x00007fa5c504853e:   and    %rbx,%r12
  0x00007fa5c5048541:   add    %r13,%r15
  0x00007fa5c5048544:   or     %r12,%rdi
  0x00007fa5c5048547:   add    %r14,%r10
  0x00007fa5c504854a:   add    %r15,%rcx
  0x00007fa5c504854d:   add    %r15,%r10
  0x00007fa5c5048550:   add    %rdi,%r10
  0x00007fa5c5048553:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5048558:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fa5c504855d:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5048561:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5048565:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fa5c504856a:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fa5c504856f:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5048573:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5048577:   vpaddq %ymm8,%ymm4,%ymm4
  0x00007fa5c504857c:   vpsrlq $0x6,%ymm4,%ymm8
  0x00007fa5c5048581:   mov    %r10,%rdi
  0x00007fa5c5048584:   rorx   $0x29,%rcx,%r13
  0x00007fa5c504858a:   rorx   $0x12,%rcx,%r14
  0x00007fa5c5048590:   add    0x10(%rsp),%r9
  0x00007fa5c5048595:   or     %rax,%rdi
  0x00007fa5c5048598:   mov    %r8,%r15
  0x00007fa5c504859b:   xor    %rdx,%r15
  0x00007fa5c504859e:   rorx   $0x22,%r10,%r12
  0x00007fa5c50485a4:   xor    %r14,%r13
  0x00007fa5c50485a7:   rorx   $0xe,%rcx,%r14
  0x00007fa5c50485ad:   and    %rcx,%r15
  0x00007fa5c50485b0:   add    %r9,%rbx
  0x00007fa5c50485b3:   and    %r11,%rdi
  0x00007fa5c50485b6:   xor    %r14,%r13
  0x00007fa5c50485b9:   rorx   $0x27,%r10,%r14
  0x00007fa5c50485bf:   xor    %r12,%r14
  0x00007fa5c50485c2:   rorx   $0x1c,%r10,%r12
  0x00007fa5c50485c8:   xor    %rdx,%r15
  0x00007fa5c50485cb:   xor    %r12,%r14
  0x00007fa5c50485ce:   mov    %r10,%r12
  0x00007fa5c50485d1:   and    %rax,%r12
  0x00007fa5c50485d4:   add    %r13,%r15
  0x00007fa5c50485d7:   or     %r12,%rdi
  0x00007fa5c50485da:   add    %r14,%r9
  0x00007fa5c50485dd:   add    %r15,%rbx
  0x00007fa5c50485e0:   add    %r15,%r9
  0x00007fa5c50485e3:   add    %rdi,%r9
  0x00007fa5c50485e6:   vpsrlq $0x13,%ymm4,%ymm3
  0x00007fa5c50485eb:   vpsllq $0x2d,%ymm4,%ymm1
  0x00007fa5c50485f0:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c50485f4:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c50485f8:   vpsrlq $0x3d,%ymm4,%ymm3
  0x00007fa5c50485fd:   vpsllq $0x3,%ymm4,%ymm1
  0x00007fa5c5048602:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5048606:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c504860a:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fa5c504860f:   vpblendd $0xf0,%ymm2,%ymm4,%ymm4
  0x00007fa5c5048615:   mov    %r9,%rdi
  0x00007fa5c5048618:   rorx   $0x29,%rbx,%r13
  0x00007fa5c504861e:   rorx   $0x12,%rbx,%r14
  0x00007fa5c5048624:   add    0x18(%rsp),%rdx
  0x00007fa5c5048629:   or     %r11,%rdi
  0x00007fa5c504862c:   mov    %rcx,%r15
  0x00007fa5c504862f:   xor    %r8,%r15
  0x00007fa5c5048632:   rorx   $0x22,%r9,%r12
  0x00007fa5c5048638:   xor    %r14,%r13
  0x00007fa5c504863b:   rorx   $0xe,%rbx,%r14
  0x00007fa5c5048641:   and    %rbx,%r15
  0x00007fa5c5048644:   add    %rdx,%rax
  0x00007fa5c5048647:   and    %r10,%rdi
  0x00007fa5c504864a:   xor    %r14,%r13
  0x00007fa5c504864d:   rorx   $0x27,%r9,%r14
  0x00007fa5c5048653:   xor    %r12,%r14
  0x00007fa5c5048656:   rorx   $0x1c,%r9,%r12
  0x00007fa5c504865c:   xor    %r8,%r15
  0x00007fa5c504865f:   xor    %r12,%r14
  0x00007fa5c5048662:   mov    %r9,%r12
  0x00007fa5c5048665:   and    %r11,%r12
  0x00007fa5c5048668:   add    %r13,%r15
  0x00007fa5c504866b:   or     %r12,%rdi
  0x00007fa5c504866e:   add    %r14,%rdx
  0x00007fa5c5048671:   add    %r15,%rax
  0x00007fa5c5048674:   add    %r15,%rdx
  0x00007fa5c5048677:   add    %rdi,%rdx
  0x00007fa5c504867a:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007fa5c504867f:   vmovdqu %ymm0,(%rsp)
  0x00007fa5c5048684:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm0
  0x00007fa5c504868a:   vpalignr $0x8,%ymm7,%ymm0,%ymm0
  0x00007fa5c5048690:   vpaddq %ymm5,%ymm0,%ymm0
  0x00007fa5c5048694:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm1
  0x00007fa5c504869a:   vpalignr $0x8,%ymm5,%ymm1,%ymm1
  0x00007fa5c50486a0:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fa5c50486a5:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fa5c50486aa:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c50486ae:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fa5c50486b3:   mov    %rdx,%rdi
  0x00007fa5c50486b6:   rorx   $0x29,%rax,%r13
  0x00007fa5c50486bc:   rorx   $0x12,%rax,%r14
  0x00007fa5c50486c2:   add    (%rsp),%r8
  0x00007fa5c50486c6:   or     %r10,%rdi
  0x00007fa5c50486c9:   mov    %rbx,%r15
  0x00007fa5c50486cc:   xor    %rcx,%r15
  0x00007fa5c50486cf:   rorx   $0x22,%rdx,%r12
  0x00007fa5c50486d5:   xor    %r14,%r13
  0x00007fa5c50486d8:   rorx   $0xe,%rax,%r14
  0x00007fa5c50486de:   and    %rax,%r15
  0x00007fa5c50486e1:   add    %r8,%r11
  0x00007fa5c50486e4:   and    %r9,%rdi
  0x00007fa5c50486e7:   xor    %r14,%r13
  0x00007fa5c50486ea:   rorx   $0x27,%rdx,%r14
  0x00007fa5c50486f0:   xor    %r12,%r14
  0x00007fa5c50486f3:   rorx   $0x1c,%rdx,%r12
  0x00007fa5c50486f9:   xor    %rcx,%r15
  0x00007fa5c50486fc:   xor    %r12,%r14
  0x00007fa5c50486ff:   mov    %rdx,%r12
  0x00007fa5c5048702:   and    %r10,%r12
  0x00007fa5c5048705:   add    %r13,%r15
  0x00007fa5c5048708:   or     %r12,%rdi
  0x00007fa5c504870b:   add    %r14,%r8
  0x00007fa5c504870e:   add    %r15,%r11
  0x00007fa5c5048711:   add    %r15,%r8
  0x00007fa5c5048714:   add    %rdi,%r8
  0x00007fa5c5048717:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fa5c504871c:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fa5c5048721:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fa5c5048725:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fa5c504872a:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fa5c504872e:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fa5c5048732:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm5
  0x00007fa5c5048738:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fa5c504873d:   vperm2f128 $0x11,%ymm4,%ymm4,%ymm2
  0x00007fa5c5048743:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fa5c5048748:   mov    %r8,%rdi
  0x00007fa5c504874b:   rorx   $0x29,%r11,%r13
  0x00007fa5c5048751:   rorx   $0x12,%r11,%r14
  0x00007fa5c5048757:   add    0x8(%rsp),%rcx
  0x00007fa5c504875c:   or     %r9,%rdi
  0x00007fa5c504875f:   mov    %rax,%r15
  0x00007fa5c5048762:   xor    %rbx,%r15
  0x00007fa5c5048765:   rorx   $0x22,%r8,%r12
  0x00007fa5c504876b:   xor    %r14,%r13
  0x00007fa5c504876e:   rorx   $0xe,%r11,%r14
  0x00007fa5c5048774:   and    %r11,%r15
  0x00007fa5c5048777:   add    %rcx,%r10
  0x00007fa5c504877a:   and    %rdx,%rdi
  0x00007fa5c504877d:   xor    %r14,%r13
  0x00007fa5c5048780:   rorx   $0x27,%r8,%r14
  0x00007fa5c5048786:   xor    %r12,%r14
  0x00007fa5c5048789:   rorx   $0x1c,%r8,%r12
  0x00007fa5c504878f:   xor    %rbx,%r15
  0x00007fa5c5048792:   xor    %r12,%r14
  0x00007fa5c5048795:   mov    %r8,%r12
  0x00007fa5c5048798:   and    %r9,%r12
  0x00007fa5c504879b:   add    %r13,%r15
  0x00007fa5c504879e:   or     %r12,%rdi
  0x00007fa5c50487a1:   add    %r14,%rcx
  0x00007fa5c50487a4:   add    %r15,%r10
  0x00007fa5c50487a7:   add    %r15,%rcx
  0x00007fa5c50487aa:   add    %rdi,%rcx
  0x00007fa5c50487ad:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c50487b2:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fa5c50487b7:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c50487bb:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c50487bf:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fa5c50487c4:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fa5c50487c9:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c50487cd:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c50487d1:   vpaddq %ymm8,%ymm5,%ymm5
  0x00007fa5c50487d6:   vpsrlq $0x6,%ymm5,%ymm8
  0x00007fa5c50487db:   mov    %rcx,%rdi
  0x00007fa5c50487de:   rorx   $0x29,%r10,%r13
  0x00007fa5c50487e4:   rorx   $0x12,%r10,%r14
  0x00007fa5c50487ea:   add    0x10(%rsp),%rbx
  0x00007fa5c50487ef:   or     %rdx,%rdi
  0x00007fa5c50487f2:   mov    %r11,%r15
  0x00007fa5c50487f5:   xor    %rax,%r15
  0x00007fa5c50487f8:   rorx   $0x22,%rcx,%r12
  0x00007fa5c50487fe:   xor    %r14,%r13
  0x00007fa5c5048801:   rorx   $0xe,%r10,%r14
  0x00007fa5c5048807:   and    %r10,%r15
  0x00007fa5c504880a:   add    %rbx,%r9
  0x00007fa5c504880d:   and    %r8,%rdi
  0x00007fa5c5048810:   xor    %r14,%r13
  0x00007fa5c5048813:   rorx   $0x27,%rcx,%r14
  0x00007fa5c5048819:   xor    %r12,%r14
  0x00007fa5c504881c:   rorx   $0x1c,%rcx,%r12
  0x00007fa5c5048822:   xor    %rax,%r15
  0x00007fa5c5048825:   xor    %r12,%r14
  0x00007fa5c5048828:   mov    %rcx,%r12
  0x00007fa5c504882b:   and    %rdx,%r12
  0x00007fa5c504882e:   add    %r13,%r15
  0x00007fa5c5048831:   or     %r12,%rdi
  0x00007fa5c5048834:   add    %r14,%rbx
  0x00007fa5c5048837:   add    %r15,%r9
  0x00007fa5c504883a:   add    %r15,%rbx
  0x00007fa5c504883d:   add    %rdi,%rbx
  0x00007fa5c5048840:   vpsrlq $0x13,%ymm5,%ymm3
  0x00007fa5c5048845:   vpsllq $0x2d,%ymm5,%ymm1
  0x00007fa5c504884a:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c504884e:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5048852:   vpsrlq $0x3d,%ymm5,%ymm3
  0x00007fa5c5048857:   vpsllq $0x3,%ymm5,%ymm1
  0x00007fa5c504885c:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5048860:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5048864:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fa5c5048869:   vpblendd $0xf0,%ymm2,%ymm5,%ymm5
  0x00007fa5c504886f:   mov    %rbx,%rdi
  0x00007fa5c5048872:   rorx   $0x29,%r9,%r13
  0x00007fa5c5048878:   rorx   $0x12,%r9,%r14
  0x00007fa5c504887e:   add    0x18(%rsp),%rax
  0x00007fa5c5048883:   or     %r8,%rdi
  0x00007fa5c5048886:   mov    %r10,%r15
  0x00007fa5c5048889:   xor    %r11,%r15
  0x00007fa5c504888c:   rorx   $0x22,%rbx,%r12
  0x00007fa5c5048892:   xor    %r14,%r13
  0x00007fa5c5048895:   rorx   $0xe,%r9,%r14
  0x00007fa5c504889b:   and    %r9,%r15
  0x00007fa5c504889e:   add    %rax,%rdx
  0x00007fa5c50488a1:   and    %rcx,%rdi
  0x00007fa5c50488a4:   xor    %r14,%r13
  0x00007fa5c50488a7:   rorx   $0x27,%rbx,%r14
  0x00007fa5c50488ad:   xor    %r12,%r14
  0x00007fa5c50488b0:   rorx   $0x1c,%rbx,%r12
  0x00007fa5c50488b6:   xor    %r11,%r15
  0x00007fa5c50488b9:   xor    %r12,%r14
  0x00007fa5c50488bc:   mov    %rbx,%r12
  0x00007fa5c50488bf:   and    %r8,%r12
  0x00007fa5c50488c2:   add    %r13,%r15
  0x00007fa5c50488c5:   or     %r12,%rdi
  0x00007fa5c50488c8:   add    %r14,%rax
  0x00007fa5c50488cb:   add    %r15,%rdx
  0x00007fa5c50488ce:   add    %r15,%rax
  0x00007fa5c50488d1:   add    %rdi,%rax
  0x00007fa5c50488d4:   vpaddq 0x40(%rbp),%ymm6,%ymm0
  0x00007fa5c50488d9:   vmovdqu %ymm0,(%rsp)
  0x00007fa5c50488de:   vperm2f128 $0x3,%ymm4,%ymm5,%ymm0
  0x00007fa5c50488e4:   vpalignr $0x8,%ymm4,%ymm0,%ymm0
  0x00007fa5c50488ea:   vpaddq %ymm6,%ymm0,%ymm0
  0x00007fa5c50488ee:   vperm2f128 $0x3,%ymm6,%ymm7,%ymm1
  0x00007fa5c50488f4:   vpalignr $0x8,%ymm6,%ymm1,%ymm1
  0x00007fa5c50488fa:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fa5c50488ff:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fa5c5048904:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c5048908:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fa5c504890d:   mov    %rax,%rdi
  0x00007fa5c5048910:   rorx   $0x29,%rdx,%r13
  0x00007fa5c5048916:   rorx   $0x12,%rdx,%r14
  0x00007fa5c504891c:   add    (%rsp),%r11
  0x00007fa5c5048920:   or     %rcx,%rdi
  0x00007fa5c5048923:   mov    %r9,%r15
  0x00007fa5c5048926:   xor    %r10,%r15
  0x00007fa5c5048929:   rorx   $0x22,%rax,%r12
  0x00007fa5c504892f:   xor    %r14,%r13
  0x00007fa5c5048932:   rorx   $0xe,%rdx,%r14
  0x00007fa5c5048938:   and    %rdx,%r15
  0x00007fa5c504893b:   add    %r11,%r8
  0x00007fa5c504893e:   and    %rbx,%rdi
  0x00007fa5c5048941:   xor    %r14,%r13
  0x00007fa5c5048944:   rorx   $0x27,%rax,%r14
  0x00007fa5c504894a:   xor    %r12,%r14
  0x00007fa5c504894d:   rorx   $0x1c,%rax,%r12
  0x00007fa5c5048953:   xor    %r10,%r15
  0x00007fa5c5048956:   xor    %r12,%r14
  0x00007fa5c5048959:   mov    %rax,%r12
  0x00007fa5c504895c:   and    %rcx,%r12
  0x00007fa5c504895f:   add    %r13,%r15
  0x00007fa5c5048962:   or     %r12,%rdi
  0x00007fa5c5048965:   add    %r14,%r11
  0x00007fa5c5048968:   add    %r15,%r8
  0x00007fa5c504896b:   add    %r15,%r11
  0x00007fa5c504896e:   add    %rdi,%r11
  0x00007fa5c5048971:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fa5c5048976:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fa5c504897b:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fa5c504897f:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fa5c5048984:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fa5c5048988:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fa5c504898c:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm6
  0x00007fa5c5048992:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fa5c5048997:   vperm2f128 $0x11,%ymm5,%ymm5,%ymm2
  0x00007fa5c504899d:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fa5c50489a2:   mov    %r11,%rdi
  0x00007fa5c50489a5:   rorx   $0x29,%r8,%r13
  0x00007fa5c50489ab:   rorx   $0x12,%r8,%r14
  0x00007fa5c50489b1:   add    0x8(%rsp),%r10
  0x00007fa5c50489b6:   or     %rbx,%rdi
  0x00007fa5c50489b9:   mov    %rdx,%r15
  0x00007fa5c50489bc:   xor    %r9,%r15
  0x00007fa5c50489bf:   rorx   $0x22,%r11,%r12
  0x00007fa5c50489c5:   xor    %r14,%r13
  0x00007fa5c50489c8:   rorx   $0xe,%r8,%r14
  0x00007fa5c50489ce:   and    %r8,%r15
  0x00007fa5c50489d1:   add    %r10,%rcx
  0x00007fa5c50489d4:   and    %rax,%rdi
  0x00007fa5c50489d7:   xor    %r14,%r13
  0x00007fa5c50489da:   rorx   $0x27,%r11,%r14
  0x00007fa5c50489e0:   xor    %r12,%r14
  0x00007fa5c50489e3:   rorx   $0x1c,%r11,%r12
  0x00007fa5c50489e9:   xor    %r9,%r15
  0x00007fa5c50489ec:   xor    %r12,%r14
  0x00007fa5c50489ef:   mov    %r11,%r12
  0x00007fa5c50489f2:   and    %rbx,%r12
  0x00007fa5c50489f5:   add    %r13,%r15
  0x00007fa5c50489f8:   or     %r12,%rdi
  0x00007fa5c50489fb:   add    %r14,%r10
  0x00007fa5c50489fe:   add    %r15,%rcx
  0x00007fa5c5048a01:   add    %r15,%r10
  0x00007fa5c5048a04:   add    %rdi,%r10
  0x00007fa5c5048a07:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5048a0c:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fa5c5048a11:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5048a15:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5048a19:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fa5c5048a1e:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fa5c5048a23:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5048a27:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5048a2b:   vpaddq %ymm8,%ymm6,%ymm6
  0x00007fa5c5048a30:   vpsrlq $0x6,%ymm6,%ymm8
  0x00007fa5c5048a35:   mov    %r10,%rdi
  0x00007fa5c5048a38:   rorx   $0x29,%rcx,%r13
  0x00007fa5c5048a3e:   rorx   $0x12,%rcx,%r14
  0x00007fa5c5048a44:   add    0x10(%rsp),%r9
  0x00007fa5c5048a49:   or     %rax,%rdi
  0x00007fa5c5048a4c:   mov    %r8,%r15
  0x00007fa5c5048a4f:   xor    %rdx,%r15
  0x00007fa5c5048a52:   rorx   $0x22,%r10,%r12
  0x00007fa5c5048a58:   xor    %r14,%r13
  0x00007fa5c5048a5b:   rorx   $0xe,%rcx,%r14
  0x00007fa5c5048a61:   and    %rcx,%r15
  0x00007fa5c5048a64:   add    %r9,%rbx
  0x00007fa5c5048a67:   and    %r11,%rdi
  0x00007fa5c5048a6a:   xor    %r14,%r13
  0x00007fa5c5048a6d:   rorx   $0x27,%r10,%r14
  0x00007fa5c5048a73:   xor    %r12,%r14
  0x00007fa5c5048a76:   rorx   $0x1c,%r10,%r12
  0x00007fa5c5048a7c:   xor    %rdx,%r15
  0x00007fa5c5048a7f:   xor    %r12,%r14
  0x00007fa5c5048a82:   mov    %r10,%r12
  0x00007fa5c5048a85:   and    %rax,%r12
  0x00007fa5c5048a88:   add    %r13,%r15
  0x00007fa5c5048a8b:   or     %r12,%rdi
  0x00007fa5c5048a8e:   add    %r14,%r9
  0x00007fa5c5048a91:   add    %r15,%rbx
  0x00007fa5c5048a94:   add    %r15,%r9
  0x00007fa5c5048a97:   add    %rdi,%r9
  0x00007fa5c5048a9a:   vpsrlq $0x13,%ymm6,%ymm3
  0x00007fa5c5048a9f:   vpsllq $0x2d,%ymm6,%ymm1
  0x00007fa5c5048aa4:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5048aa8:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5048aac:   vpsrlq $0x3d,%ymm6,%ymm3
  0x00007fa5c5048ab1:   vpsllq $0x3,%ymm6,%ymm1
  0x00007fa5c5048ab6:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5048aba:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5048abe:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fa5c5048ac3:   vpblendd $0xf0,%ymm2,%ymm6,%ymm6
  0x00007fa5c5048ac9:   mov    %r9,%rdi
  0x00007fa5c5048acc:   rorx   $0x29,%rbx,%r13
  0x00007fa5c5048ad2:   rorx   $0x12,%rbx,%r14
  0x00007fa5c5048ad8:   add    0x18(%rsp),%rdx
  0x00007fa5c5048add:   or     %r11,%rdi
  0x00007fa5c5048ae0:   mov    %rcx,%r15
  0x00007fa5c5048ae3:   xor    %r8,%r15
  0x00007fa5c5048ae6:   rorx   $0x22,%r9,%r12
  0x00007fa5c5048aec:   xor    %r14,%r13
  0x00007fa5c5048aef:   rorx   $0xe,%rbx,%r14
  0x00007fa5c5048af5:   and    %rbx,%r15
  0x00007fa5c5048af8:   add    %rdx,%rax
  0x00007fa5c5048afb:   and    %r10,%rdi
  0x00007fa5c5048afe:   xor    %r14,%r13
  0x00007fa5c5048b01:   rorx   $0x27,%r9,%r14
  0x00007fa5c5048b07:   xor    %r12,%r14
  0x00007fa5c5048b0a:   rorx   $0x1c,%r9,%r12
  0x00007fa5c5048b10:   xor    %r8,%r15
  0x00007fa5c5048b13:   xor    %r12,%r14
  0x00007fa5c5048b16:   mov    %r9,%r12
  0x00007fa5c5048b19:   and    %r11,%r12
  0x00007fa5c5048b1c:   add    %r13,%r15
  0x00007fa5c5048b1f:   or     %r12,%rdi
  0x00007fa5c5048b22:   add    %r14,%rdx
  0x00007fa5c5048b25:   add    %r15,%rax
  0x00007fa5c5048b28:   add    %r15,%rdx
  0x00007fa5c5048b2b:   add    %rdi,%rdx
  0x00007fa5c5048b2e:   vpaddq 0x60(%rbp),%ymm7,%ymm0
  0x00007fa5c5048b33:   vmovdqu %ymm0,(%rsp)
  0x00007fa5c5048b38:   add    $0x80,%rbp
  0x00007fa5c5048b3f:   vperm2f128 $0x3,%ymm5,%ymm6,%ymm0
  0x00007fa5c5048b45:   vpalignr $0x8,%ymm5,%ymm0,%ymm0
  0x00007fa5c5048b4b:   vpaddq %ymm7,%ymm0,%ymm0
  0x00007fa5c5048b4f:   vperm2f128 $0x3,%ymm7,%ymm4,%ymm1
  0x00007fa5c5048b55:   vpalignr $0x8,%ymm7,%ymm1,%ymm1
  0x00007fa5c5048b5b:   vpsrlq $0x1,%ymm1,%ymm2
  0x00007fa5c5048b60:   vpsllq $0x3f,%ymm1,%ymm3
  0x00007fa5c5048b65:   vpor   %ymm2,%ymm3,%ymm3
  0x00007fa5c5048b69:   vpsrlq $0x7,%ymm1,%ymm8
  0x00007fa5c5048b6e:   mov    %rdx,%rdi
  0x00007fa5c5048b71:   rorx   $0x29,%rax,%r13
  0x00007fa5c5048b77:   rorx   $0x12,%rax,%r14
  0x00007fa5c5048b7d:   add    (%rsp),%r8
  0x00007fa5c5048b81:   or     %r10,%rdi
  0x00007fa5c5048b84:   mov    %rbx,%r15
  0x00007fa5c5048b87:   xor    %rcx,%r15
  0x00007fa5c5048b8a:   rorx   $0x22,%rdx,%r12
  0x00007fa5c5048b90:   xor    %r14,%r13
  0x00007fa5c5048b93:   rorx   $0xe,%rax,%r14
  0x00007fa5c5048b99:   and    %rax,%r15
  0x00007fa5c5048b9c:   add    %r8,%r11
  0x00007fa5c5048b9f:   and    %r9,%rdi
  0x00007fa5c5048ba2:   xor    %r14,%r13
  0x00007fa5c5048ba5:   rorx   $0x27,%rdx,%r14
  0x00007fa5c5048bab:   xor    %r12,%r14
  0x00007fa5c5048bae:   rorx   $0x1c,%rdx,%r12
  0x00007fa5c5048bb4:   xor    %rcx,%r15
  0x00007fa5c5048bb7:   xor    %r12,%r14
  0x00007fa5c5048bba:   mov    %rdx,%r12
  0x00007fa5c5048bbd:   and    %r10,%r12
  0x00007fa5c5048bc0:   add    %r13,%r15
  0x00007fa5c5048bc3:   or     %r12,%rdi
  0x00007fa5c5048bc6:   add    %r14,%r8
  0x00007fa5c5048bc9:   add    %r15,%r11
  0x00007fa5c5048bcc:   add    %r15,%r8
  0x00007fa5c5048bcf:   add    %rdi,%r8
  0x00007fa5c5048bd2:   vpsrlq $0x8,%ymm1,%ymm2
  0x00007fa5c5048bd7:   vpsllq $0x38,%ymm1,%ymm1
  0x00007fa5c5048bdc:   vpor   %ymm2,%ymm1,%ymm1
  0x00007fa5c5048be0:   vpxor  %ymm8,%ymm3,%ymm3
  0x00007fa5c5048be5:   vpxor  %ymm1,%ymm3,%ymm1
  0x00007fa5c5048be9:   vpaddq %ymm1,%ymm0,%ymm0
  0x00007fa5c5048bed:   vperm2f128 $0x0,%ymm0,%ymm0,%ymm7
  0x00007fa5c5048bf3:   vpand  %ymm10,%ymm0,%ymm0
  0x00007fa5c5048bf8:   vperm2f128 $0x11,%ymm6,%ymm6,%ymm2
  0x00007fa5c5048bfe:   vpsrlq $0x6,%ymm2,%ymm8
  0x00007fa5c5048c03:   mov    %r8,%rdi
  0x00007fa5c5048c06:   rorx   $0x29,%r11,%r13
  0x00007fa5c5048c0c:   rorx   $0x12,%r11,%r14
  0x00007fa5c5048c12:   add    0x8(%rsp),%rcx
  0x00007fa5c5048c17:   or     %r9,%rdi
  0x00007fa5c5048c1a:   mov    %rax,%r15
  0x00007fa5c5048c1d:   xor    %rbx,%r15
  0x00007fa5c5048c20:   rorx   $0x22,%r8,%r12
  0x00007fa5c5048c26:   xor    %r14,%r13
  0x00007fa5c5048c29:   rorx   $0xe,%r11,%r14
  0x00007fa5c5048c2f:   and    %r11,%r15
  0x00007fa5c5048c32:   add    %rcx,%r10
  0x00007fa5c5048c35:   and    %rdx,%rdi
  0x00007fa5c5048c38:   xor    %r14,%r13
  0x00007fa5c5048c3b:   rorx   $0x27,%r8,%r14
  0x00007fa5c5048c41:   xor    %r12,%r14
  0x00007fa5c5048c44:   rorx   $0x1c,%r8,%r12
  0x00007fa5c5048c4a:   xor    %rbx,%r15
  0x00007fa5c5048c4d:   xor    %r12,%r14
  0x00007fa5c5048c50:   mov    %r8,%r12
  0x00007fa5c5048c53:   and    %r9,%r12
  0x00007fa5c5048c56:   add    %r13,%r15
  0x00007fa5c5048c59:   or     %r12,%rdi
  0x00007fa5c5048c5c:   add    %r14,%rcx
  0x00007fa5c5048c5f:   add    %r15,%r10
  0x00007fa5c5048c62:   add    %r15,%rcx
  0x00007fa5c5048c65:   add    %rdi,%rcx
  0x00007fa5c5048c68:   vpsrlq $0x13,%ymm2,%ymm3
  0x00007fa5c5048c6d:   vpsllq $0x2d,%ymm2,%ymm1
  0x00007fa5c5048c72:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5048c76:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5048c7a:   vpsrlq $0x3d,%ymm2,%ymm3
  0x00007fa5c5048c7f:   vpsllq $0x3,%ymm2,%ymm1
  0x00007fa5c5048c84:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5048c88:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5048c8c:   vpaddq %ymm8,%ymm7,%ymm7
  0x00007fa5c5048c91:   vpsrlq $0x6,%ymm7,%ymm8
  0x00007fa5c5048c96:   mov    %rcx,%rdi
  0x00007fa5c5048c99:   rorx   $0x29,%r10,%r13
  0x00007fa5c5048c9f:   rorx   $0x12,%r10,%r14
  0x00007fa5c5048ca5:   add    0x10(%rsp),%rbx
  0x00007fa5c5048caa:   or     %rdx,%rdi
  0x00007fa5c5048cad:   mov    %r11,%r15
  0x00007fa5c5048cb0:   xor    %rax,%r15
  0x00007fa5c5048cb3:   rorx   $0x22,%rcx,%r12
  0x00007fa5c5048cb9:   xor    %r14,%r13
  0x00007fa5c5048cbc:   rorx   $0xe,%r10,%r14
  0x00007fa5c5048cc2:   and    %r10,%r15
  0x00007fa5c5048cc5:   add    %rbx,%r9
  0x00007fa5c5048cc8:   and    %r8,%rdi
  0x00007fa5c5048ccb:   xor    %r14,%r13
  0x00007fa5c5048cce:   rorx   $0x27,%rcx,%r14
  0x00007fa5c5048cd4:   xor    %r12,%r14
  0x00007fa5c5048cd7:   rorx   $0x1c,%rcx,%r12
  0x00007fa5c5048cdd:   xor    %rax,%r15
  0x00007fa5c5048ce0:   xor    %r12,%r14
  0x00007fa5c5048ce3:   mov    %rcx,%r12
  0x00007fa5c5048ce6:   and    %rdx,%r12
  0x00007fa5c5048ce9:   add    %r13,%r15
  0x00007fa5c5048cec:   or     %r12,%rdi
  0x00007fa5c5048cef:   add    %r14,%rbx
  0x00007fa5c5048cf2:   add    %r15,%r9
  0x00007fa5c5048cf5:   add    %r15,%rbx
  0x00007fa5c5048cf8:   add    %rdi,%rbx
  0x00007fa5c5048cfb:   vpsrlq $0x13,%ymm7,%ymm3
  0x00007fa5c5048d00:   vpsllq $0x2d,%ymm7,%ymm1
  0x00007fa5c5048d05:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5048d09:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5048d0d:   vpsrlq $0x3d,%ymm7,%ymm3
  0x00007fa5c5048d12:   vpsllq $0x3,%ymm7,%ymm1
  0x00007fa5c5048d17:   vpor   %ymm1,%ymm3,%ymm3
  0x00007fa5c5048d1b:   vpxor  %ymm3,%ymm8,%ymm8
  0x00007fa5c5048d1f:   vpaddq %ymm8,%ymm0,%ymm2
  0x00007fa5c5048d24:   vpblendd $0xf0,%ymm2,%ymm7,%ymm7
  0x00007fa5c5048d2a:   mov    %rbx,%rdi
  0x00007fa5c5048d2d:   rorx   $0x29,%r9,%r13
  0x00007fa5c5048d33:   rorx   $0x12,%r9,%r14
  0x00007fa5c5048d39:   add    0x18(%rsp),%rax
  0x00007fa5c5048d3e:   or     %r8,%rdi
  0x00007fa5c5048d41:   mov    %r10,%r15
  0x00007fa5c5048d44:   xor    %r11,%r15
  0x00007fa5c5048d47:   rorx   $0x22,%rbx,%r12
  0x00007fa5c5048d4d:   xor    %r14,%r13
  0x00007fa5c5048d50:   rorx   $0xe,%r9,%r14
  0x00007fa5c5048d56:   and    %r9,%r15
  0x00007fa5c5048d59:   add    %rax,%rdx
  0x00007fa5c5048d5c:   and    %rcx,%rdi
  0x00007fa5c5048d5f:   xor    %r14,%r13
  0x00007fa5c5048d62:   rorx   $0x27,%rbx,%r14
  0x00007fa5c5048d68:   xor    %r12,%r14
  0x00007fa5c5048d6b:   rorx   $0x1c,%rbx,%r12
  0x00007fa5c5048d71:   xor    %r11,%r15
  0x00007fa5c5048d74:   xor    %r12,%r14
  0x00007fa5c5048d77:   mov    %rbx,%r12
  0x00007fa5c5048d7a:   and    %r8,%r12
  0x00007fa5c5048d7d:   add    %r13,%r15
  0x00007fa5c5048d80:   or     %r12,%rdi
  0x00007fa5c5048d83:   add    %r14,%rax
  0x00007fa5c5048d86:   add    %r15,%rdx
  0x00007fa5c5048d89:   add    %r15,%rax
  0x00007fa5c5048d8c:   add    %rdi,%rax
  0x00007fa5c5048d8f:   subq   $0x1,0x20(%rsp)
  0x00007fa5c5048d95:   jne    Stub::sha512_implCompressMB+224 0x00007fa5c5048420
  0x00007fa5c5048d9b:   movq   $0x2,0x20(%rsp)
  0x00007fa5c5048da4:   vpaddq 0x0(%rbp),%ymm4,%ymm0
  0x00007fa5c5048da9:   vmovdqu %ymm0,(%rsp)
  0x00007fa5c5048dae:   mov    %r9,%r15
  0x00007fa5c5048db1:   rorx   $0x29,%rdx,%r13
  0x00007fa5c5048db7:   rorx   $0x12,%rdx,%r14
  0x00007fa5c5048dbd:   xor    %r10,%r15
  0x00007fa5c5048dc0:   xor    %r14,%r13
  0x00007fa5c5048dc3:   rorx   $0xe,%rdx,%r14
  0x00007fa5c5048dc9:   and    %rdx,%r15
  0x00007fa5c5048dcc:   xor    %r14,%r13
  0x00007fa5c5048dcf:   rorx   $0x22,%rax,%r12
  0x00007fa5c5048dd5:   xor    %r10,%r15
  0x00007fa5c5048dd8:   rorx   $0x27,%rax,%r14
  0x00007fa5c5048dde:   mov    %rax,%rdi
  0x00007fa5c5048de1:   xor    %r12,%r14
  0x00007fa5c5048de4:   rorx   $0x1c,%rax,%r12
  0x00007fa5c5048dea:   add    (%rsp),%r11
  0x00007fa5c5048dee:   or     %rcx,%rdi
  0x00007fa5c5048df1:   xor    %r12,%r14
  0x00007fa5c5048df4:   mov    %rax,%r12
  0x00007fa5c5048df7:   and    %rbx,%rdi
  0x00007fa5c5048dfa:   and    %rcx,%r12
  0x00007fa5c5048dfd:   add    %r13,%r15
  0x00007fa5c5048e00:   add    %r11,%r8
  0x00007fa5c5048e03:   or     %r12,%rdi
  0x00007fa5c5048e06:   add    %r14,%r11
  0x00007fa5c5048e09:   add    %r15,%r8
  0x00007fa5c5048e0c:   add    %r15,%r11
  0x00007fa5c5048e0f:   mov    %rdx,%r15
  0x00007fa5c5048e12:   rorx   $0x29,%r8,%r13
  0x00007fa5c5048e18:   rorx   $0x12,%r8,%r14
  0x00007fa5c5048e1e:   xor    %r9,%r15
  0x00007fa5c5048e21:   xor    %r14,%r13
  0x00007fa5c5048e24:   rorx   $0xe,%r8,%r14
  0x00007fa5c5048e2a:   and    %r8,%r15
  0x00007fa5c5048e2d:   add    %rdi,%r11
  0x00007fa5c5048e30:   xor    %r14,%r13
  0x00007fa5c5048e33:   rorx   $0x22,%r11,%r12
  0x00007fa5c5048e39:   xor    %r9,%r15
  0x00007fa5c5048e3c:   rorx   $0x27,%r11,%r14
  0x00007fa5c5048e42:   mov    %r11,%rdi
  0x00007fa5c5048e45:   xor    %r12,%r14
  0x00007fa5c5048e48:   rorx   $0x1c,%r11,%r12
  0x00007fa5c5048e4e:   add    0x8(%rsp),%r10
  0x00007fa5c5048e53:   or     %rbx,%rdi
  0x00007fa5c5048e56:   xor    %r12,%r14
  0x00007fa5c5048e59:   mov    %r11,%r12
  0x00007fa5c5048e5c:   and    %rax,%rdi
  0x00007fa5c5048e5f:   and    %rbx,%r12
  0x00007fa5c5048e62:   add    %r13,%r15
  0x00007fa5c5048e65:   add    %r10,%rcx
  0x00007fa5c5048e68:   or     %r12,%rdi
  0x00007fa5c5048e6b:   add    %r14,%r10
  0x00007fa5c5048e6e:   add    %r15,%rcx
  0x00007fa5c5048e71:   add    %r15,%r10
  0x00007fa5c5048e74:   mov    %r8,%r15
  0x00007fa5c5048e77:   rorx   $0x29,%rcx,%r13
  0x00007fa5c5048e7d:   rorx   $0x12,%rcx,%r14
  0x00007fa5c5048e83:   xor    %rdx,%r15
  0x00007fa5c5048e86:   xor    %r14,%r13
  0x00007fa5c5048e89:   rorx   $0xe,%rcx,%r14
  0x00007fa5c5048e8f:   and    %rcx,%r15
  0x00007fa5c5048e92:   add    %rdi,%r10
  0x00007fa5c5048e95:   xor    %r14,%r13
  0x00007fa5c5048e98:   rorx   $0x22,%r10,%r12
  0x00007fa5c5048e9e:   xor    %rdx,%r15
  0x00007fa5c5048ea1:   rorx   $0x27,%r10,%r14
  0x00007fa5c5048ea7:   mov    %r10,%rdi
  0x00007fa5c5048eaa:   xor    %r12,%r14
  0x00007fa5c5048ead:   rorx   $0x1c,%r10,%r12
  0x00007fa5c5048eb3:   add    0x10(%rsp),%r9
  0x00007fa5c5048eb8:   or     %rax,%rdi
  0x00007fa5c5048ebb:   xor    %r12,%r14
  0x00007fa5c5048ebe:   mov    %r10,%r12
  0x00007fa5c5048ec1:   and    %r11,%rdi
  0x00007fa5c5048ec4:   and    %rax,%r12
  0x00007fa5c5048ec7:   add    %r13,%r15
  0x00007fa5c5048eca:   add    %r9,%rbx
  0x00007fa5c5048ecd:   or     %r12,%rdi
  0x00007fa5c5048ed0:   add    %r14,%r9
  0x00007fa5c5048ed3:   add    %r15,%rbx
  0x00007fa5c5048ed6:   add    %r15,%r9
  0x00007fa5c5048ed9:   mov    %rcx,%r15
  0x00007fa5c5048edc:   rorx   $0x29,%rbx,%r13
  0x00007fa5c5048ee2:   rorx   $0x12,%rbx,%r14
  0x00007fa5c5048ee8:   xor    %r8,%r15
  0x00007fa5c5048eeb:   xor    %r14,%r13
  0x00007fa5c5048eee:   rorx   $0xe,%rbx,%r14
  0x00007fa5c5048ef4:   and    %rbx,%r15
  0x00007fa5c5048ef7:   add    %rdi,%r9
  0x00007fa5c5048efa:   xor    %r14,%r13
  0x00007fa5c5048efd:   rorx   $0x22,%r9,%r12
  0x00007fa5c5048f03:   xor    %r8,%r15
  0x00007fa5c5048f06:   rorx   $0x27,%r9,%r14
  0x00007fa5c5048f0c:   mov    %r9,%rdi
  0x00007fa5c5048f0f:   xor    %r12,%r14
  0x00007fa5c5048f12:   rorx   $0x1c,%r9,%r12
  0x00007fa5c5048f18:   add    0x18(%rsp),%rdx
  0x00007fa5c5048f1d:   or     %r11,%rdi
  0x00007fa5c5048f20:   xor    %r12,%r14
  0x00007fa5c5048f23:   mov    %r9,%r12
  0x00007fa5c5048f26:   and    %r10,%rdi
  0x00007fa5c5048f29:   and    %r11,%r12
  0x00007fa5c5048f2c:   add    %r13,%r15
  0x00007fa5c5048f2f:   add    %rdx,%rax
  0x00007fa5c5048f32:   or     %r12,%rdi
  0x00007fa5c5048f35:   add    %r14,%rdx
  0x00007fa5c5048f38:   add    %r15,%rax
  0x00007fa5c5048f3b:   add    %r15,%rdx
  0x00007fa5c5048f3e:   add    %rdi,%rdx
  0x00007fa5c5048f41:   vpaddq 0x20(%rbp),%ymm5,%ymm0
  0x00007fa5c5048f46:   vmovdqu %ymm0,(%rsp)
  0x00007fa5c5048f4b:   add    $0x40,%rbp
  0x00007fa5c5048f4f:   mov    %rbx,%r15
  0x00007fa5c5048f52:   rorx   $0x29,%rax,%r13
  0x00007fa5c5048f58:   rorx   $0x12,%rax,%r14
  0x00007fa5c5048f5e:   xor    %rcx,%r15
  0x00007fa5c5048f61:   xor    %r14,%r13
  0x00007fa5c5048f64:   rorx   $0xe,%rax,%r14
  0x00007fa5c5048f6a:   and    %rax,%r15
  0x00007fa5c5048f6d:   xor    %r14,%r13
  0x00007fa5c5048f70:   rorx   $0x22,%rdx,%r12
  0x00007fa5c5048f76:   xor    %rcx,%r15
  0x00007fa5c5048f79:   rorx   $0x27,%rdx,%r14
  0x00007fa5c5048f7f:   mov    %rdx,%rdi
  0x00007fa5c5048f82:   xor    %r12,%r14
  0x00007fa5c5048f85:   rorx   $0x1c,%rdx,%r12
  0x00007fa5c5048f8b:   add    (%rsp),%r8
  0x00007fa5c5048f8f:   or     %r10,%rdi
  0x00007fa5c5048f92:   xor    %r12,%r14
  0x00007fa5c5048f95:   mov    %rdx,%r12
  0x00007fa5c5048f98:   and    %r9,%rdi
  0x00007fa5c5048f9b:   and    %r10,%r12
  0x00007fa5c5048f9e:   add    %r13,%r15
  0x00007fa5c5048fa1:   add    %r8,%r11
  0x00007fa5c5048fa4:   or     %r12,%rdi
  0x00007fa5c5048fa7:   add    %r14,%r8
  0x00007fa5c5048faa:   add    %r15,%r11
  0x00007fa5c5048fad:   add    %r15,%r8
  0x00007fa5c5048fb0:   mov    %rax,%r15
  0x00007fa5c5048fb3:   rorx   $0x29,%r11,%r13
  0x00007fa5c5048fb9:   rorx   $0x12,%r11,%r14
  0x00007fa5c5048fbf:   xor    %rbx,%r15
  0x00007fa5c5048fc2:   xor    %r14,%r13
  0x00007fa5c5048fc5:   rorx   $0xe,%r11,%r14
  0x00007fa5c5048fcb:   and    %r11,%r15
  0x00007fa5c5048fce:   add    %rdi,%r8
  0x00007fa5c5048fd1:   xor    %r14,%r13
  0x00007fa5c5048fd4:   rorx   $0x22,%r8,%r12
  0x00007fa5c5048fda:   xor    %rbx,%r15
  0x00007fa5c5048fdd:   rorx   $0x27,%r8,%r14
  0x00007fa5c5048fe3:   mov    %r8,%rdi
  0x00007fa5c5048fe6:   xor    %r12,%r14
  0x00007fa5c5048fe9:   rorx   $0x1c,%r8,%r12
  0x00007fa5c5048fef:   add    0x8(%rsp),%rcx
  0x00007fa5c5048ff4:   or     %r9,%rdi
  0x00007fa5c5048ff7:   xor    %r12,%r14
  0x00007fa5c5048ffa:   mov    %r8,%r12
  0x00007fa5c5048ffd:   and    %rdx,%rdi
  0x00007fa5c5049000:   and    %r9,%r12
  0x00007fa5c5049003:   add    %r13,%r15
  0x00007fa5c5049006:   add    %rcx,%r10
  0x00007fa5c5049009:   or     %r12,%rdi
  0x00007fa5c504900c:   add    %r14,%rcx
  0x00007fa5c504900f:   add    %r15,%r10
  0x00007fa5c5049012:   add    %r15,%rcx
  0x00007fa5c5049015:   mov    %r11,%r15
  0x00007fa5c5049018:   rorx   $0x29,%r10,%r13
  0x00007fa5c504901e:   rorx   $0x12,%r10,%r14
  0x00007fa5c5049024:   xor    %rax,%r15
  0x00007fa5c5049027:   xor    %r14,%r13
  0x00007fa5c504902a:   rorx   $0xe,%r10,%r14
  0x00007fa5c5049030:   and    %r10,%r15
  0x00007fa5c5049033:   add    %rdi,%rcx
  0x00007fa5c5049036:   xor    %r14,%r13
  0x00007fa5c5049039:   rorx   $0x22,%rcx,%r12
  0x00007fa5c504903f:   xor    %rax,%r15
  0x00007fa5c5049042:   rorx   $0x27,%rcx,%r14
  0x00007fa5c5049048:   mov    %rcx,%rdi
  0x00007fa5c504904b:   xor    %r12,%r14
  0x00007fa5c504904e:   rorx   $0x1c,%rcx,%r12
  0x00007fa5c5049054:   add    0x10(%rsp),%rbx
  0x00007fa5c5049059:   or     %rdx,%rdi
  0x00007fa5c504905c:   xor    %r12,%r14
  0x00007fa5c504905f:   mov    %rcx,%r12
  0x00007fa5c5049062:   and    %r8,%rdi
  0x00007fa5c5049065:   and    %rdx,%r12
  0x00007fa5c5049068:   add    %r13,%r15
  0x00007fa5c504906b:   add    %rbx,%r9
  0x00007fa5c504906e:   or     %r12,%rdi
  0x00007fa5c5049071:   add    %r14,%rbx
  0x00007fa5c5049074:   add    %r15,%r9
  0x00007fa5c5049077:   add    %r15,%rbx
  0x00007fa5c504907a:   mov    %r10,%r15
  0x00007fa5c504907d:   rorx   $0x29,%r9,%r13
  0x00007fa5c5049083:   rorx   $0x12,%r9,%r14
  0x00007fa5c5049089:   xor    %r11,%r15
  0x00007fa5c504908c:   xor    %r14,%r13
  0x00007fa5c504908f:   rorx   $0xe,%r9,%r14
  0x00007fa5c5049095:   and    %r9,%r15
  0x00007fa5c5049098:   add    %rdi,%rbx
  0x00007fa5c504909b:   xor    %r14,%r13
  0x00007fa5c504909e:   rorx   $0x22,%rbx,%r12
  0x00007fa5c50490a4:   xor    %r11,%r15
  0x00007fa5c50490a7:   rorx   $0x27,%rbx,%r14
  0x00007fa5c50490ad:   mov    %rbx,%rdi
  0x00007fa5c50490b0:   xor    %r12,%r14
  0x00007fa5c50490b3:   rorx   $0x1c,%rbx,%r12
  0x00007fa5c50490b9:   add    0x18(%rsp),%rax
  0x00007fa5c50490be:   or     %r8,%rdi
  0x00007fa5c50490c1:   xor    %r12,%r14
  0x00007fa5c50490c4:   mov    %rbx,%r12
  0x00007fa5c50490c7:   and    %rcx,%rdi
  0x00007fa5c50490ca:   and    %r8,%r12
  0x00007fa5c50490cd:   add    %r13,%r15
  0x00007fa5c50490d0:   add    %rax,%rdx
  0x00007fa5c50490d3:   or     %r12,%rdi
  0x00007fa5c50490d6:   add    %r14,%rax
  0x00007fa5c50490d9:   add    %r15,%rdx
  0x00007fa5c50490dc:   add    %r15,%rax
  0x00007fa5c50490df:   add    %rdi,%rax
  0x00007fa5c50490e2:   vmovdqu %ymm6,%ymm4
  0x00007fa5c50490e6:   vmovdqu %ymm7,%ymm5
  0x00007fa5c50490ea:   subq   $0x1,0x20(%rsp)
  0x00007fa5c50490f0:   jne    Stub::sha512_implCompressMB+2660 0x00007fa5c5048da4
  0x00007fa5c50490f6:   add    (%rsi),%rax
  0x00007fa5c50490f9:   mov    %rax,(%rsi)
  0x00007fa5c50490fc:   add    0x8(%rsi),%rbx
  0x00007fa5c5049100:   mov    %rbx,0x8(%rsi)
  0x00007fa5c5049104:   add    0x10(%rsi),%rcx
  0x00007fa5c5049108:   mov    %rcx,0x10(%rsi)
  0x00007fa5c504910c:   add    0x18(%rsi),%r8
  0x00007fa5c5049110:   mov    %r8,0x18(%rsi)
  0x00007fa5c5049114:   add    0x20(%rsi),%rdx
  0x00007fa5c5049118:   mov    %rdx,0x20(%rsi)
  0x00007fa5c504911c:   add    0x28(%rsi),%r9
  0x00007fa5c5049120:   mov    %r9,0x28(%rsi)
  0x00007fa5c5049124:   add    0x30(%rsi),%r10
  0x00007fa5c5049128:   mov    %r10,0x30(%rsi)
  0x00007fa5c504912c:   add    0x38(%rsi),%r11
  0x00007fa5c5049130:   mov    %r11,0x38(%rsi)
  0x00007fa5c5049134:   mov    0x28(%rsp),%rdi
  0x00007fa5c5049139:   add    $0x80,%rdi
  0x00007fa5c5049140:   cmp    0x30(%rsp),%rdi
  0x00007fa5c5049145:   jne    Stub::sha512_implCompressMB+155 0x00007fa5c50483db
  0x00007fa5c504914b:   mov    0x40(%rsp),%rbp
  0x00007fa5c5049150:   mov    0x48(%rsp),%rbx
  0x00007fa5c5049155:   mov    0x50(%rsp),%r12
  0x00007fa5c504915a:   mov    0x58(%rsp),%r13
  0x00007fa5c504915f:   mov    0x60(%rsp),%r14
  0x00007fa5c5049164:   mov    0x68(%rsp),%r15
  0x00007fa5c5049169:   mov    0x38(%rsp),%rsp
  0x00007fa5c504916e:   pop    %rcx
  0x00007fa5c504916f:   pop    %rdx
  0x00007fa5c5049170:   mov    %rdx,%rax
  0x00007fa5c5049173:   cmp    %rcx,%rax
  0x00007fa5c5049176:   jae    Stub::sha512_implCompressMB+3648 0x00007fa5c5049180
  0x00007fa5c5049178:   add    $0x80,%rax
  0x00007fa5c504917e:   jmp    Stub::sha512_implCompressMB+3635 0x00007fa5c5049173
  0x00007fa5c5049180:   vzeroupper 
  0x00007fa5c5049183:   leaveq 
  0x00007fa5c5049184:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_shuffle_base64 [0x00007fa5c50491c0, 0x00007fa5c50491e0] (32 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50491c0:   add    $0x8050604,%eax
  0x00007fa5c50491c5:   (bad)  
  0x00007fa5c50491c6:   or     %ecx,(%rax)
  0x00007fa5c50491c8:   or     (%rdx),%ecx
  0x00007fa5c50491ca:   or     $0xb,%al
  0x00007fa5c50491cc:   (bad)  
  0x00007fa5c50491cd:   or     $0x10e0f,%eax
  0x00007fa5c50491d2:   add    (%rcx),%al
  0x00007fa5c50491d4:   add    $0x3,%al
  0x00007fa5c50491d6:   add    $0x8060704,%eax
  0x00007fa5c50491db:   (bad)  
  0x00007fa5c50491dc:   or     (%rcx),%cl
  0x00007fa5c50491de:   or     (%rdx),%ecx
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_input_mask_base64 [0x00007fa5c50491e0, 0x00007fa5c5049200] (32 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50491e0:   add    %al,(%rax)
  0x00007fa5c50491e2:   add    %al,(%rax)
  0x00007fa5c50491e4:   add    %al,(%rax)
  0x00007fa5c50491e6:   add    %al,-0x80000000(%rax)
  0x00007fa5c50491ec:   add    %al,(%rax)
  0x00007fa5c50491ee:   add    %al,-0x80000000(%rax)
  0x00007fa5c50491f4:   add    %al,(%rax)
  0x00007fa5c50491f6:   add    %al,-0x80000000(%rax)
  0x00007fa5c50491fc:   add    %al,(%rax)
  0x00007fa5c50491fe:   .byte 0x0
  0x00007fa5c50491ff:   .byte 0x80
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::avx2_lut_base64 [0x00007fa5c5049200, 0x00007fa5c5049240] (64 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5049200:   rex.B
  0x00007fa5c5049201:   rex.RXB cld 
  0x00007fa5c5049203:   cld    
  0x00007fa5c5049204:   cld    
  0x00007fa5c5049205:   cld    
  0x00007fa5c5049206:   cld    
  0x00007fa5c5049207:   cld    
  0x00007fa5c5049208:   cld    
  0x00007fa5c5049209:   cld    
  0x00007fa5c504920a:   cld    
  0x00007fa5c504920b:   cld    
  0x00007fa5c504920c:   in     (%dx),%eax
  0x00007fa5c504920d:   lock add %al,(%rax)
  0x00007fa5c5049210:   rex.B
  0x00007fa5c5049211:   rex.RXB cld 
  0x00007fa5c5049213:   cld    
  0x00007fa5c5049214:   cld    
  0x00007fa5c5049215:   cld    
  0x00007fa5c5049216:   cld    
  0x00007fa5c5049217:   cld    
  0x00007fa5c5049218:   cld    
  0x00007fa5c5049219:   cld    
  0x00007fa5c504921a:   cld    
  0x00007fa5c504921b:   cld    
  0x00007fa5c504921c:   in     (%dx),%eax
  0x00007fa5c504921d:   lock add %al,(%rax)
  0x00007fa5c5049220:   rex.B
  0x00007fa5c5049221:   rex.RXB cld 
  0x00007fa5c5049223:   cld    
  0x00007fa5c5049224:   cld    
  0x00007fa5c5049225:   cld    
  0x00007fa5c5049226:   cld    
  0x00007fa5c5049227:   cld    
  0x00007fa5c5049228:   cld    
  0x00007fa5c5049229:   cld    
  0x00007fa5c504922a:   cld    
  0x00007fa5c504922b:   cld    
  0x00007fa5c504922c:   out    %eax,(%dx)
  0x00007fa5c504922d:   and    %al,(%rax)
  0x00007fa5c504922f:   add    %al,0x47(%rcx)
  0x00007fa5c5049232:   cld    
  0x00007fa5c5049233:   cld    
  0x00007fa5c5049234:   cld    
  0x00007fa5c5049235:   cld    
  0x00007fa5c5049236:   cld    
  0x00007fa5c5049237:   cld    
  0x00007fa5c5049238:   cld    
  0x00007fa5c5049239:   cld    
  0x00007fa5c504923a:   cld    
  0x00007fa5c504923b:   cld    
  0x00007fa5c504923c:   out    %eax,(%dx)
  0x00007fa5c504923d:   and    %al,(%rax)
  0x00007fa5c504923f:   .byte 0x0
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::AVX2_tables_base64 [0x00007fa5c5049240, 0x00007fa5c50492f0] (176 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5049240:   (bad)  
  0x00007fa5c5049241:   (bad)  
  0x00007fa5c5049242:   (bad)  
  0x00007fa5c5049243:   (bad)  
  0x00007fa5c5049244:   (bad)  
  0x00007fa5c5049245:   (bad)  
  0x00007fa5c5049246:   (bad)  
  0x00007fa5c5049247:   (bad)  
  0x00007fa5c5049248:   pop    %rdi
  0x00007fa5c5049249:   pop    %rdi
  0x00007fa5c504924a:   pop    %rdi
  0x00007fa5c504924b:   pop    %rdi
  0x00007fa5c504924c:   pop    %rdi
  0x00007fa5c504924d:   pop    %rdi
  0x00007fa5c504924e:   pop    %rdi
  0x00007fa5c504924f:   pop    %rdi
  0x00007fa5c5049250:   add    %al,(%rax)
  0x00007fa5c5049252:   add    %al,(%rax)
  0x00007fa5c5049254:   add    %eax,(%rax)
  0x00007fa5c5049256:   add    %al,(%rax)
  0x00007fa5c5049258:   add    (%rax),%al
  0x00007fa5c504925a:   add    %al,(%rax)
  0x00007fa5c504925c:   add    $0x0,%al
  0x00007fa5c504925e:   add    %al,(%rax)
  0x00007fa5c5049260:   add    $0x6000000,%eax
  0x00007fa5c5049265:   add    %al,(%rax)
  0x00007fa5c5049267:   add    %bh,%bh
  0x00007fa5c5049269:   (bad)  
  0x00007fa5c504926a:   (bad)  
  0x00007fa5c504926b:   (bad)  
  0x00007fa5c504926c:   (bad)  
  0x00007fa5c504926d:   (bad)  
  0x00007fa5c504926e:   (bad)  
  0x00007fa5c504926f:   callq  *(%rax)
  0x00007fa5c5049271:   adc    %al,(%rcx)
  0x00007fa5c5049273:   add    (%rax,%rcx,1),%al
  0x00007fa5c5049276:   add    $0x8,%al
  0x00007fa5c5049278:   adc    %dl,(%rax)
  0x00007fa5c504927a:   adc    %dl,(%rax)
  0x00007fa5c504927c:   adc    %dl,(%rax)
  0x00007fa5c504927e:   adc    %dl,(%rax)
  0x00007fa5c5049280:   adc    %dl,(%rax)
  0x00007fa5c5049282:   add    %eax,(%rdx)
  0x00007fa5c5049284:   add    $0x8,%al
  0x00007fa5c5049286:   add    $0x8,%al
  0x00007fa5c5049288:   adc    %dl,(%rax)
  0x00007fa5c504928a:   adc    %dl,(%rax)
  0x00007fa5c504928c:   adc    %dl,(%rax)
  0x00007fa5c504928e:   adc    %dl,(%rax)
  0x00007fa5c5049290:   rex add %eax,0x1(%rax)
  0x00007fa5c5049294:   rex add %eax,0x1(%rax)
  0x00007fa5c5049298:   rex add %eax,0x1(%rax)
  0x00007fa5c504929c:   rex add %eax,0x1(%rax)
  0x00007fa5c50492a0:   rex add %eax,0x1(%rax)
  0x00007fa5c50492a4:   rex add %eax,0x1(%rax)
  0x00007fa5c50492a8:   rex add %eax,0x1(%rax)
  0x00007fa5c50492ac:   rex add %eax,0x1(%rax)
  0x00007fa5c50492b0:   add    %dl,(%rax)
  0x00007fa5c50492b2:   add    %eax,(%rax)
  0x00007fa5c50492b4:   add    %dl,(%rax)
  0x00007fa5c50492b6:   add    %eax,(%rax)
  0x00007fa5c50492b8:   add    %dl,(%rax)
  0x00007fa5c50492ba:   add    %eax,(%rax)
  0x00007fa5c50492bc:   add    %dl,(%rax)
  0x00007fa5c50492be:   add    %eax,(%rax)
  0x00007fa5c50492c0:   add    %dl,(%rax)
  0x00007fa5c50492c2:   add    %eax,(%rax)
  0x00007fa5c50492c4:   add    %dl,(%rax)
  0x00007fa5c50492c6:   add    %eax,(%rax)
  0x00007fa5c50492c8:   add    %dl,(%rax)
  0x00007fa5c50492ca:   add    %eax,(%rax)
  0x00007fa5c50492cc:   add    %dl,(%rax)
  0x00007fa5c50492ce:   add    %eax,(%rax)
  0x00007fa5c50492d0:   add    (%rcx),%al
  0x00007fa5c50492d2:   add    %al,(%rsi)
  0x00007fa5c50492d4:   add    $0x8090a04,%eax
  0x00007fa5c50492d9:   (bad)  
  0x00007fa5c50492da:   or     $0xffffff0c,%eax
  0x00007fa5c50492df:   incl   (%rdx)
  0x00007fa5c50492e1:   add    %eax,(%rax)
  0x00007fa5c50492e3:   (bad)  
  0x00007fa5c50492e4:   add    $0x8090a04,%eax
  0x00007fa5c50492e9:   (bad)  
  0x00007fa5c50492ea:   or     $0xffffff0c,%eax
  0x00007fa5c50492ef:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::AVX2_tables_URL_base64 [0x00007fa5c5049340, 0x00007fa5c50493c0] (128 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5049340:   adc    $0x11111111,%eax
  0x00007fa5c5049345:   adc    %edx,(%rcx)
  0x00007fa5c5049347:   adc    %edx,(%rcx)
  0x00007fa5c5049349:   adc    %edx,(%rbx)
  0x00007fa5c504934b:   sbb    (%rbx),%bl
  0x00007fa5c504934d:   sbb    (%rbx),%ebx
  0x00007fa5c504934f:   sbb    0x11111111(%rip),%dl        # 0x00007fa5d615a466
  0x00007fa5c5049355:   adc    %edx,(%rcx)
  0x00007fa5c5049357:   adc    %edx,(%rcx)
  0x00007fa5c5049359:   adc    %edx,(%rbx)
  0x00007fa5c504935b:   sbb    (%rbx),%bl
  0x00007fa5c504935d:   sbb    (%rbx),%ebx
  0x00007fa5c504935f:   sbb    (%rax),%al
  0x00007fa5c5049361:   adc    %dl,(%rbx)
  0x00007fa5c5049363:   add    $0xbf,%al
  0x00007fa5c5049365:   mov    $0xb9b9,%edi
  0x00007fa5c504936a:   add    %al,(%rax)
  0x00007fa5c504936c:   add    %al,(%rax)
  0x00007fa5c504936e:   add    %al,(%rax)
  0x00007fa5c5049370:   add    %dl,(%rax)
  0x00007fa5c5049372:   adc    (%rdi,%rdi,4),%eax
  0x00007fa5c5049375:   mov    $0xb9b9,%edi
  0x00007fa5c504937a:   add    %al,(%rax)
  0x00007fa5c504937c:   add    %al,(%rax)
  0x00007fa5c504937e:   add    %al,(%rax)
  0x00007fa5c5049380:   adc    $0x11111111,%eax
  0x00007fa5c5049385:   adc    %edx,(%rcx)
  0x00007fa5c5049387:   adc    %edx,(%rcx)
  0x00007fa5c5049389:   adc    %edx,(%rbx)
  0x00007fa5c504938b:   sbb    (%rbx),%ebx
  0x00007fa5c504938d:   sbb    (%rbx),%bl
  0x00007fa5c504938f:   sbb    0x11111111(%rip),%edx        # 0x00007fa5d615a4a6
  0x00007fa5c5049395:   adc    %edx,(%rcx)
  0x00007fa5c5049397:   adc    %edx,(%rcx)
  0x00007fa5c5049399:   adc    %edx,(%rbx)
  0x00007fa5c504939b:   sbb    (%rbx),%ebx
  0x00007fa5c504939d:   sbb    (%rbx),%bl
  0x00007fa5c504939f:   sbb    (%rax),%eax
  0x00007fa5c50493a1:   adc    %dl,(%rcx)
  0x00007fa5c50493a3:   add    $0xbf,%al
  0x00007fa5c50493a5:   mov    $0xb9b9,%edi
  0x00007fa5c50493aa:   add    %al,(%rax)
  0x00007fa5c50493ac:   add    %al,(%rax)
  0x00007fa5c50493ae:   add    %al,(%rax)
  0x00007fa5c50493b0:   add    %dl,(%rax)
  0x00007fa5c50493b2:   adc    %eax,(%rdi,%rdi,4)
  0x00007fa5c50493b5:   mov    $0xb9b9,%edi
  0x00007fa5c50493ba:   add    %al,(%rax)
  0x00007fa5c50493bc:   add    %al,(%rax)
  0x00007fa5c50493be:   add    %al,(%rax)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::encoding_table_base64 [0x00007fa5c50493c0, 0x00007fa5c5049440] (128 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c50493c0:   rex.B
  0x00007fa5c50493c1:   rex.X
  0x00007fa5c50493c2:   rex.XB
  0x00007fa5c50493c3:   rex.R
  0x00007fa5c50493c4:   rex.RB
  0x00007fa5c50493c5:   rex.RX
  0x00007fa5c50493c6:   rex.RXB
  0x00007fa5c50493c7:   rex.W
  0x00007fa5c50493c8:   rex.WB
  0x00007fa5c50493c9:   rex.WX
  0x00007fa5c50493ca:   rex.WXB
  0x00007fa5c50493cb:   rex.WR
  0x00007fa5c50493cc:   rex.WRB
  0x00007fa5c50493cd:   rex.WRX
  0x00007fa5c50493ce:   rex.WRXB push %r8
  0x00007fa5c50493d0:   push   %rcx
  0x00007fa5c50493d1:   push   %rdx
  0x00007fa5c50493d2:   push   %rbx
  0x00007fa5c50493d3:   push   %rsp
  0x00007fa5c50493d4:   push   %rbp
  0x00007fa5c50493d5:   push   %rsi
  0x00007fa5c50493d6:   push   %rdi
  0x00007fa5c50493d7:   pop    %rax
  0x00007fa5c50493d8:   pop    %rcx
  0x00007fa5c50493d9:   pop    %rdx
  0x00007fa5c50493da:   (bad)  
  0x00007fa5c50493db:   (bad)  {%k5}
  0x00007fa5c50493e0:   addr32 pushq $0x6c6b6a69
  0x00007fa5c50493e6:   insl   (%dx),%es:(%rdi)
  0x00007fa5c50493e7:   outsb  %ds:(%rsi),(%dx)
  0x00007fa5c50493e8:   outsl  %ds:(%rsi),(%dx)
  0x00007fa5c50493e9:   jo     Stub::<unknown> 0x00007fa5c504945c
  0x00007fa5c50493eb:   jb     Stub::<unknown> 0x00007fa5c5049460
  0x00007fa5c50493ed:   je     Stub::<unknown> 0x00007fa5c5049464
  0x00007fa5c50493ef:   jbe    Stub::<unknown> 0x00007fa5c5049468
  0x00007fa5c50493f1:   js     Stub::<unknown> 0x00007fa5c504946c
  0x00007fa5c50493f3:   jp     Stub::encoding_table_base64+101 0x00007fa5c5049425
  0x00007fa5c50493f5:   xor    %esi,(%rdx)
  0x00007fa5c50493f7:   xor    0x39383736(,%rsi,1),%esi
  0x00007fa5c50493fe:   sub    (%rdi),%ebp
  0x00007fa5c5049400:   rex.B
  0x00007fa5c5049401:   rex.X
  0x00007fa5c5049402:   rex.XB
  0x00007fa5c5049403:   rex.R
  0x00007fa5c5049404:   rex.RB
  0x00007fa5c5049405:   rex.RX
  0x00007fa5c5049406:   rex.RXB
  0x00007fa5c5049407:   rex.W
  0x00007fa5c5049408:   rex.WB
  0x00007fa5c5049409:   rex.WX
  0x00007fa5c504940a:   rex.WXB
  0x00007fa5c504940b:   rex.WR
  0x00007fa5c504940c:   rex.WRB
  0x00007fa5c504940d:   rex.WRX
  0x00007fa5c504940e:   rex.WRXB push %r8
  0x00007fa5c5049410:   push   %rcx
  0x00007fa5c5049411:   push   %rdx
  0x00007fa5c5049412:   push   %rbx
  0x00007fa5c5049413:   push   %rsp
  0x00007fa5c5049414:   push   %rbp
  0x00007fa5c5049415:   push   %rsi
  0x00007fa5c5049416:   push   %rdi
  0x00007fa5c5049417:   pop    %rax
  0x00007fa5c5049418:   pop    %rcx
  0x00007fa5c5049419:   pop    %rdx
  0x00007fa5c504941a:   (bad)  
  0x00007fa5c504941b:   (bad)  {%k5}
  0x00007fa5c5049420:   addr32 pushq $0x6c6b6a69
  0x00007fa5c5049426:   insl   (%dx),%es:(%rdi)
  0x00007fa5c5049427:   outsb  %ds:(%rsi),(%dx)
  0x00007fa5c5049428:   outsl  %ds:(%rsi),(%dx)
  0x00007fa5c5049429:   jo     Stub::<unknown> 0x00007fa5c504949c
  0x00007fa5c504942b:   jb     Stub::<unknown> 0x00007fa5c50494a0
  0x00007fa5c504942d:   je     Stub::<unknown> 0x00007fa5c50494a4
  0x00007fa5c504942f:   jbe    Stub::<unknown> 0x00007fa5c50494a8
  0x00007fa5c5049431:   js     Stub::<unknown> 0x00007fa5c50494ac
  0x00007fa5c5049433:   jp     Stub::<unknown> 0x00007fa5c5049465
  0x00007fa5c5049435:   xor    %esi,(%rdx)
  0x00007fa5c5049437:   xor    0x39383736(,%rsi,1),%esi
  0x00007fa5c504943e:   .byte 0x2d
  0x00007fa5c504943f:   pop    %rdi
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::decoding_table_base64 [0x00007fa5c5049440, 0x00007fa5c5049640] (512 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5049440:   (bad)  
  0x00007fa5c5049441:   (bad)  
  0x00007fa5c5049442:   (bad)  
  0x00007fa5c5049443:   (bad)  
  0x00007fa5c5049444:   (bad)  
  0x00007fa5c5049445:   (bad)  
  0x00007fa5c5049446:   (bad)  
  0x00007fa5c5049447:   (bad)  
  0x00007fa5c5049448:   (bad)  
  0x00007fa5c5049449:   (bad)  
  0x00007fa5c504944a:   (bad)  
  0x00007fa5c504944b:   (bad)  
  0x00007fa5c504944c:   (bad)  
  0x00007fa5c504944d:   (bad)  
  0x00007fa5c504944e:   (bad)  
  0x00007fa5c504944f:   (bad)  
  0x00007fa5c5049450:   (bad)  
  0x00007fa5c5049451:   (bad)  
  0x00007fa5c5049452:   (bad)  
  0x00007fa5c5049453:   (bad)  
  0x00007fa5c5049454:   (bad)  
  0x00007fa5c5049455:   (bad)  
  0x00007fa5c5049456:   (bad)  
  0x00007fa5c5049457:   (bad)  
  0x00007fa5c5049458:   (bad)  
  0x00007fa5c5049459:   (bad)  
  0x00007fa5c504945a:   (bad)  
  0x00007fa5c504945b:   (bad)  
  0x00007fa5c504945c:   (bad)  
  0x00007fa5c504945d:   (bad)  
  0x00007fa5c504945e:   (bad)  
  0x00007fa5c504945f:   (bad)  
  0x00007fa5c5049460:   (bad)  
  0x00007fa5c5049461:   (bad)  
  0x00007fa5c5049462:   (bad)  
  0x00007fa5c5049463:   (bad)  
  0x00007fa5c5049464:   (bad)  
  0x00007fa5c5049465:   (bad)  
  0x00007fa5c5049466:   (bad)  
  0x00007fa5c5049467:   (bad)  
  0x00007fa5c5049468:   (bad)  
  0x00007fa5c5049469:   (bad)  
  0x00007fa5c504946a:   (bad)  
  0x00007fa5c504946b:   ds (bad) 
  0x00007fa5c504946d:   (bad)  
  0x00007fa5c504946e:   (bad)  
  0x00007fa5c504946f:   (bad)  
  0x00007fa5c5049470:   xor    $0x35,%al
  0x00007fa5c5049472:   ss (bad) 
  0x00007fa5c5049474:   cmp    %bh,(%rcx)
  0x00007fa5c5049476:   cmp    (%rbx),%bh
  0x00007fa5c5049478:   cmp    $0x3d,%al
  0x00007fa5c504947a:   (bad)  
  0x00007fa5c504947b:   (bad)  
  0x00007fa5c504947c:   (bad)  
  0x00007fa5c504947d:   (bad)  
  0x00007fa5c504947e:   (bad)  
  0x00007fa5c504947f:   (bad)  
  0x00007fa5c5049480:   incl   (%rax)
  0x00007fa5c5049482:   add    %eax,(%rdx)
  0x00007fa5c5049484:   add    0x9080706(,%rax,1),%eax
  0x00007fa5c504948b:   or     (%rbx),%cl
  0x00007fa5c504948d:   or     $0xd,%al
  0x00007fa5c504948f:   (bad)  
  0x00007fa5c5049490:   movups (%rcx),%xmm2
  0x00007fa5c5049493:   adc    (%rbx),%dl
  0x00007fa5c5049495:   adc    $0x15,%al
  0x00007fa5c5049497:   (bad)  
  0x00007fa5c5049498:   (bad)  
  0x00007fa5c5049499:   sbb    %bl,(%rcx)
  0x00007fa5c504949b:   (bad)  
  0x00007fa5c504949c:   (bad)  
  0x00007fa5c504949d:   (bad)  
  0x00007fa5c504949e:   (bad)  
  0x00007fa5c504949f:   (bad)  
  0x00007fa5c50494a0:   lcall  *(%rdx)
  0x00007fa5c50494a2:   sbb    0x21201f1e(,%rbx,1),%ebx
  0x00007fa5c50494a9:   and    (%rbx),%ah
  0x00007fa5c50494ab:   and    $0x25,%al
  0x00007fa5c50494ad:   es (bad) 
  0x00007fa5c50494af:   sub    %ch,(%rcx)
  0x00007fa5c50494b1:   sub    (%rbx),%ch
  0x00007fa5c50494b3:   sub    $0x2d,%al
  0x00007fa5c50494b5:   cs (bad) 
  0x00007fa5c50494b7:   xor    %dh,(%rcx)
  0x00007fa5c50494b9:   xor    (%rbx),%dh
  0x00007fa5c50494bb:   (bad)  
  0x00007fa5c50494bc:   (bad)  
  0x00007fa5c50494bd:   (bad)  
  0x00007fa5c50494be:   (bad)  
  0x00007fa5c50494bf:   (bad)  
  0x00007fa5c50494c0:   (bad)  
  0x00007fa5c50494c1:   (bad)  
  0x00007fa5c50494c2:   (bad)  
  0x00007fa5c50494c3:   (bad)  
  0x00007fa5c50494c4:   (bad)  
  0x00007fa5c50494c5:   (bad)  
  0x00007fa5c50494c6:   (bad)  
  0x00007fa5c50494c7:   (bad)  
  0x00007fa5c50494c8:   (bad)  
  0x00007fa5c50494c9:   (bad)  
  0x00007fa5c50494ca:   (bad)  
  0x00007fa5c50494cb:   (bad)  
  0x00007fa5c50494cc:   (bad)  
  0x00007fa5c50494cd:   (bad)  
  0x00007fa5c50494ce:   (bad)  
  0x00007fa5c50494cf:   (bad)  
  0x00007fa5c50494d0:   (bad)  
  0x00007fa5c50494d1:   (bad)  
  0x00007fa5c50494d2:   (bad)  
  0x00007fa5c50494d3:   (bad)  
  0x00007fa5c50494d4:   (bad)  
  0x00007fa5c50494d5:   (bad)  
  0x00007fa5c50494d6:   (bad)  
  0x00007fa5c50494d7:   (bad)  
  0x00007fa5c50494d8:   (bad)  
  0x00007fa5c50494d9:   (bad)  
  0x00007fa5c50494da:   (bad)  
  0x00007fa5c50494db:   (bad)  
  0x00007fa5c50494dc:   (bad)  
  0x00007fa5c50494dd:   (bad)  
  0x00007fa5c50494de:   (bad)  
  0x00007fa5c50494df:   (bad)  
  0x00007fa5c50494e0:   (bad)  
  0x00007fa5c50494e1:   (bad)  
  0x00007fa5c50494e2:   (bad)  
  0x00007fa5c50494e3:   (bad)  
  0x00007fa5c50494e4:   (bad)  
  0x00007fa5c50494e5:   (bad)  
  0x00007fa5c50494e6:   (bad)  
  0x00007fa5c50494e7:   (bad)  
  0x00007fa5c50494e8:   (bad)  
  0x00007fa5c50494e9:   (bad)  
  0x00007fa5c50494ea:   (bad)  
  0x00007fa5c50494eb:   (bad)  
  0x00007fa5c50494ec:   (bad)  
  0x00007fa5c50494ed:   (bad)  
  0x00007fa5c50494ee:   (bad)  
  0x00007fa5c50494ef:   (bad)  
  0x00007fa5c50494f0:   (bad)  
  0x00007fa5c50494f1:   (bad)  
  0x00007fa5c50494f2:   (bad)  
  0x00007fa5c50494f3:   (bad)  
  0x00007fa5c50494f4:   (bad)  
  0x00007fa5c50494f5:   (bad)  
  0x00007fa5c50494f6:   (bad)  
  0x00007fa5c50494f7:   (bad)  
  0x00007fa5c50494f8:   (bad)  
  0x00007fa5c50494f9:   (bad)  
  0x00007fa5c50494fa:   (bad)  
  0x00007fa5c50494fb:   (bad)  
  0x00007fa5c50494fc:   (bad)  
  0x00007fa5c50494fd:   (bad)  
  0x00007fa5c50494fe:   (bad)  
  0x00007fa5c50494ff:   (bad)  
  0x00007fa5c5049500:   (bad)  
  0x00007fa5c5049501:   (bad)  
  0x00007fa5c5049502:   (bad)  
  0x00007fa5c5049503:   (bad)  
  0x00007fa5c5049504:   (bad)  
  0x00007fa5c5049505:   (bad)  
  0x00007fa5c5049506:   (bad)  
  0x00007fa5c5049507:   (bad)  
  0x00007fa5c5049508:   (bad)  
  0x00007fa5c5049509:   (bad)  
  0x00007fa5c504950a:   (bad)  
  0x00007fa5c504950b:   (bad)  
  0x00007fa5c504950c:   (bad)  
  0x00007fa5c504950d:   (bad)  
  0x00007fa5c504950e:   (bad)  
  0x00007fa5c504950f:   (bad)  
  0x00007fa5c5049510:   (bad)  
  0x00007fa5c5049511:   (bad)  
  0x00007fa5c5049512:   (bad)  
  0x00007fa5c5049513:   (bad)  
  0x00007fa5c5049514:   (bad)  
  0x00007fa5c5049515:   (bad)  
  0x00007fa5c5049516:   (bad)  
  0x00007fa5c5049517:   (bad)  
  0x00007fa5c5049518:   (bad)  
  0x00007fa5c5049519:   (bad)  
  0x00007fa5c504951a:   (bad)  
  0x00007fa5c504951b:   (bad)  
  0x00007fa5c504951c:   (bad)  
  0x00007fa5c504951d:   (bad)  
  0x00007fa5c504951e:   (bad)  
  0x00007fa5c504951f:   (bad)  
  0x00007fa5c5049520:   (bad)  
  0x00007fa5c5049521:   (bad)  
  0x00007fa5c5049522:   (bad)  
  0x00007fa5c5049523:   (bad)  
  0x00007fa5c5049524:   (bad)  
  0x00007fa5c5049525:   (bad)  
  0x00007fa5c5049526:   (bad)  
  0x00007fa5c5049527:   (bad)  
  0x00007fa5c5049528:   (bad)  
  0x00007fa5c5049529:   (bad)  
  0x00007fa5c504952a:   (bad)  
  0x00007fa5c504952b:   (bad)  
  0x00007fa5c504952c:   (bad)  
  0x00007fa5c504952d:   (bad)  
  0x00007fa5c504952e:   (bad)  
  0x00007fa5c504952f:   (bad)  
  0x00007fa5c5049530:   (bad)  
  0x00007fa5c5049531:   (bad)  
  0x00007fa5c5049532:   (bad)  
  0x00007fa5c5049533:   (bad)  
  0x00007fa5c5049534:   (bad)  
  0x00007fa5c5049535:   (bad)  
  0x00007fa5c5049536:   (bad)  
  0x00007fa5c5049537:   (bad)  
  0x00007fa5c5049538:   (bad)  
  0x00007fa5c5049539:   (bad)  
  0x00007fa5c504953a:   (bad)  
  0x00007fa5c504953b:   (bad)  
  0x00007fa5c504953c:   (bad)  
  0x00007fa5c504953d:   (bad)  
  0x00007fa5c504953e:   (bad)  
  0x00007fa5c504953f:   (bad)  
  0x00007fa5c5049540:   (bad)  
  0x00007fa5c5049541:   (bad)  
  0x00007fa5c5049542:   (bad)  
  0x00007fa5c5049543:   (bad)  
  0x00007fa5c5049544:   (bad)  
  0x00007fa5c5049545:   (bad)  
  0x00007fa5c5049546:   (bad)  
  0x00007fa5c5049547:   (bad)  
  0x00007fa5c5049548:   (bad)  
  0x00007fa5c5049549:   (bad)  
  0x00007fa5c504954a:   (bad)  
  0x00007fa5c504954b:   (bad)  
  0x00007fa5c504954c:   (bad)  
  0x00007fa5c504954d:   (bad)  
  0x00007fa5c504954e:   (bad)  
  0x00007fa5c504954f:   (bad)  
  0x00007fa5c5049550:   (bad)  
  0x00007fa5c5049551:   (bad)  
  0x00007fa5c5049552:   (bad)  
  0x00007fa5c5049553:   (bad)  
  0x00007fa5c5049554:   (bad)  
  0x00007fa5c5049555:   (bad)  
  0x00007fa5c5049556:   (bad)  
  0x00007fa5c5049557:   (bad)  
  0x00007fa5c5049558:   (bad)  
  0x00007fa5c5049559:   (bad)  
  0x00007fa5c504955a:   (bad)  
  0x00007fa5c504955b:   (bad)  
  0x00007fa5c504955c:   (bad)  
  0x00007fa5c504955d:   (bad)  
  0x00007fa5c504955e:   (bad)  
  0x00007fa5c504955f:   (bad)  
  0x00007fa5c5049560:   (bad)  
  0x00007fa5c5049561:   (bad)  
  0x00007fa5c5049562:   (bad)  
  0x00007fa5c5049563:   (bad)  
  0x00007fa5c5049564:   (bad)  
  0x00007fa5c5049565:   (bad)  
  0x00007fa5c5049566:   (bad)  
  0x00007fa5c5049567:   (bad)  
  0x00007fa5c5049568:   (bad)  
  0x00007fa5c5049569:   (bad)  
  0x00007fa5c504956a:   (bad)  
  0x00007fa5c504956b:   (bad)  
  0x00007fa5c504956c:   (bad)  
  0x00007fa5c504956d:   ds (bad) 
  0x00007fa5c504956f:   pushq  0x39383736(,%rsi,1)
  0x00007fa5c5049576:   cmp    (%rbx),%bh
  0x00007fa5c5049578:   cmp    $0x3d,%al
  0x00007fa5c504957a:   (bad)  
  0x00007fa5c504957b:   (bad)  
  0x00007fa5c504957c:   (bad)  
  0x00007fa5c504957d:   (bad)  
  0x00007fa5c504957e:   (bad)  
  0x00007fa5c504957f:   (bad)  
  0x00007fa5c5049580:   incl   (%rax)
  0x00007fa5c5049582:   add    %eax,(%rdx)
  0x00007fa5c5049584:   add    0x9080706(,%rax,1),%eax
  0x00007fa5c504958b:   or     (%rbx),%cl
  0x00007fa5c504958d:   or     $0xd,%al
  0x00007fa5c504958f:   (bad)  
  0x00007fa5c5049590:   movups (%rcx),%xmm2
  0x00007fa5c5049593:   adc    (%rbx),%dl
  0x00007fa5c5049595:   adc    $0x15,%al
  0x00007fa5c5049597:   (bad)  
  0x00007fa5c5049598:   (bad)  
  0x00007fa5c5049599:   sbb    %bl,(%rcx)
  0x00007fa5c504959b:   (bad)  
  0x00007fa5c504959c:   (bad)  
  0x00007fa5c504959d:   (bad)  
  0x00007fa5c504959e:   (bad)  
  0x00007fa5c504959f:   (bad)  
  0x00007fa5c50495a0:   lcall  *(%rdx)
  0x00007fa5c50495a2:   sbb    0x21201f1e(,%rbx,1),%ebx
  0x00007fa5c50495a9:   and    (%rbx),%ah
  0x00007fa5c50495ab:   and    $0x25,%al
  0x00007fa5c50495ad:   es (bad) 
  0x00007fa5c50495af:   sub    %ch,(%rcx)
  0x00007fa5c50495b1:   sub    (%rbx),%ch
  0x00007fa5c50495b3:   sub    $0x2d,%al
  0x00007fa5c50495b5:   cs (bad) 
  0x00007fa5c50495b7:   xor    %dh,(%rcx)
  0x00007fa5c50495b9:   xor    (%rbx),%dh
  0x00007fa5c50495bb:   (bad)  
  0x00007fa5c50495bc:   (bad)  
  0x00007fa5c50495bd:   (bad)  
  0x00007fa5c50495be:   (bad)  
  0x00007fa5c50495bf:   (bad)  
  0x00007fa5c50495c0:   (bad)  
  0x00007fa5c50495c1:   (bad)  
  0x00007fa5c50495c2:   (bad)  
  0x00007fa5c50495c3:   (bad)  
  0x00007fa5c50495c4:   (bad)  
  0x00007fa5c50495c5:   (bad)  
  0x00007fa5c50495c6:   (bad)  
  0x00007fa5c50495c7:   (bad)  
  0x00007fa5c50495c8:   (bad)  
  0x00007fa5c50495c9:   (bad)  
  0x00007fa5c50495ca:   (bad)  
  0x00007fa5c50495cb:   (bad)  
  0x00007fa5c50495cc:   (bad)  
  0x00007fa5c50495cd:   (bad)  
  0x00007fa5c50495ce:   (bad)  
  0x00007fa5c50495cf:   (bad)  
  0x00007fa5c50495d0:   (bad)  
  0x00007fa5c50495d1:   (bad)  
  0x00007fa5c50495d2:   (bad)  
  0x00007fa5c50495d3:   (bad)  
  0x00007fa5c50495d4:   (bad)  
  0x00007fa5c50495d5:   (bad)  
  0x00007fa5c50495d6:   (bad)  
  0x00007fa5c50495d7:   (bad)  
  0x00007fa5c50495d8:   (bad)  
  0x00007fa5c50495d9:   (bad)  
  0x00007fa5c50495da:   (bad)  
  0x00007fa5c50495db:   (bad)  
  0x00007fa5c50495dc:   (bad)  
  0x00007fa5c50495dd:   (bad)  
  0x00007fa5c50495de:   (bad)  
  0x00007fa5c50495df:   (bad)  
  0x00007fa5c50495e0:   (bad)  
  0x00007fa5c50495e1:   (bad)  
  0x00007fa5c50495e2:   (bad)  
  0x00007fa5c50495e3:   (bad)  
  0x00007fa5c50495e4:   (bad)  
  0x00007fa5c50495e5:   (bad)  
  0x00007fa5c50495e6:   (bad)  
  0x00007fa5c50495e7:   (bad)  
  0x00007fa5c50495e8:   (bad)  
  0x00007fa5c50495e9:   (bad)  
  0x00007fa5c50495ea:   (bad)  
  0x00007fa5c50495eb:   (bad)  
  0x00007fa5c50495ec:   (bad)  
  0x00007fa5c50495ed:   (bad)  
  0x00007fa5c50495ee:   (bad)  
  0x00007fa5c50495ef:   (bad)  
  0x00007fa5c50495f0:   (bad)  
  0x00007fa5c50495f1:   (bad)  
  0x00007fa5c50495f2:   (bad)  
  0x00007fa5c50495f3:   (bad)  
  0x00007fa5c50495f4:   (bad)  
  0x00007fa5c50495f5:   (bad)  
  0x00007fa5c50495f6:   (bad)  
  0x00007fa5c50495f7:   (bad)  
  0x00007fa5c50495f8:   (bad)  
  0x00007fa5c50495f9:   (bad)  
  0x00007fa5c50495fa:   (bad)  
  0x00007fa5c50495fb:   (bad)  
  0x00007fa5c50495fc:   (bad)  
  0x00007fa5c50495fd:   (bad)  
  0x00007fa5c50495fe:   (bad)  
  0x00007fa5c50495ff:   (bad)  
  0x00007fa5c5049600:   (bad)  
  0x00007fa5c5049601:   (bad)  
  0x00007fa5c5049602:   (bad)  
  0x00007fa5c5049603:   (bad)  
  0x00007fa5c5049604:   (bad)  
  0x00007fa5c5049605:   (bad)  
  0x00007fa5c5049606:   (bad)  
  0x00007fa5c5049607:   (bad)  
  0x00007fa5c5049608:   (bad)  
  0x00007fa5c5049609:   (bad)  
  0x00007fa5c504960a:   (bad)  
  0x00007fa5c504960b:   (bad)  
  0x00007fa5c504960c:   (bad)  
  0x00007fa5c504960d:   (bad)  
  0x00007fa5c504960e:   (bad)  
  0x00007fa5c504960f:   (bad)  
  0x00007fa5c5049610:   (bad)  
  0x00007fa5c5049611:   (bad)  
  0x00007fa5c5049612:   (bad)  
  0x00007fa5c5049613:   (bad)  
  0x00007fa5c5049614:   (bad)  
  0x00007fa5c5049615:   (bad)  
  0x00007fa5c5049616:   (bad)  
  0x00007fa5c5049617:   (bad)  
  0x00007fa5c5049618:   (bad)  
  0x00007fa5c5049619:   (bad)  
  0x00007fa5c504961a:   (bad)  
  0x00007fa5c504961b:   (bad)  
  0x00007fa5c504961c:   (bad)  
  0x00007fa5c504961d:   (bad)  
  0x00007fa5c504961e:   (bad)  
  0x00007fa5c504961f:   (bad)  
  0x00007fa5c5049620:   (bad)  
  0x00007fa5c5049621:   (bad)  
  0x00007fa5c5049622:   (bad)  
  0x00007fa5c5049623:   (bad)  
  0x00007fa5c5049624:   (bad)  
  0x00007fa5c5049625:   (bad)  
  0x00007fa5c5049626:   (bad)  
  0x00007fa5c5049627:   (bad)  
  0x00007fa5c5049628:   (bad)  
  0x00007fa5c5049629:   (bad)  
  0x00007fa5c504962a:   (bad)  
  0x00007fa5c504962b:   (bad)  
  0x00007fa5c504962c:   (bad)  
  0x00007fa5c504962d:   (bad)  
  0x00007fa5c504962e:   (bad)  
  0x00007fa5c504962f:   (bad)  
  0x00007fa5c5049630:   (bad)  
  0x00007fa5c5049631:   (bad)  
  0x00007fa5c5049632:   (bad)  
  0x00007fa5c5049633:   (bad)  
  0x00007fa5c5049634:   (bad)  
  0x00007fa5c5049635:   (bad)  
  0x00007fa5c5049636:   (bad)  
  0x00007fa5c5049637:   (bad)  
  0x00007fa5c5049638:   (bad)  
  0x00007fa5c5049639:   (bad)  
  0x00007fa5c504963a:   (bad)  
  0x00007fa5c504963b:   (bad)  
  0x00007fa5c504963c:   (bad)  
  0x00007fa5c504963d:   (bad)  
  0x00007fa5c504963e:   (bad)  
  0x00007fa5c504963f:   .byte 0xff
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::implEncode [0x00007fa5c5049640, 0x00007fa5c5049856] (534 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5049640:   push   %rbp
  0x00007fa5c5049641:   mov    %rsp,%rbp
  0x00007fa5c5049644:   push   %r12
  0x00007fa5c5049646:   push   %r13
  0x00007fa5c5049648:   push   %r14
  0x00007fa5c504964a:   push   %r15
  0x00007fa5c504964c:   mov    %edx,%r14d
  0x00007fa5c504964f:   sub    %esi,%r14d
  0x00007fa5c5049652:   cmp    $0x0,%r14d
  0x00007fa5c5049656:   jle    Stub::implEncode+524 0x00007fa5c504984c
  0x00007fa5c504965c:   cmp    $0x1f,%r14d
  0x00007fa5c5049660:   jbe    Stub::implEncode+365 0x00007fa5c50497ad
  0x00007fa5c5049666:   vmovdqu -0x4ae(%rip),%ymm9        # Stub::avx2_shuffle_base64
  0x00007fa5c504966e:   mov    $0xfc0fc00,%eax
  0x00007fa5c5049673:   vmovd  %eax,%xmm8
  0x00007fa5c5049677:   vmovdqu -0x49f(%rip),%ymm1        # Stub::avx2_input_mask_base64
  0x00007fa5c504967f:   vpbroadcastd %xmm8,%ymm8
  0x00007fa5c5049684:   mov    $0x4000040,%eax
  0x00007fa5c5049689:   sub    $0x18,%r14d
  0x00007fa5c504968d:   vmovd  %eax,%xmm7
  0x00007fa5c5049691:   vpbroadcastd %xmm7,%ymm7
  0x00007fa5c5049696:   vpmaskmovd -0x4(%rdi,%rsi,1),%ymm1,%ymm1
  0x00007fa5c504969d:   vpshufb %ymm9,%ymm1,%ymm1
  0x00007fa5c50496a2:   add    $0x18,%esi
  0x00007fa5c50496a5:   mov    $0x3f03f0,%eax
  0x00007fa5c50496aa:   vmovd  %eax,%xmm6
  0x00007fa5c50496ae:   vpbroadcastd %xmm6,%ymm6
  0x00007fa5c50496b3:   mov    $0x1000010,%eax
  0x00007fa5c50496b8:   vmovd  %eax,%xmm5
  0x00007fa5c50496bc:   vpbroadcastd %xmm5,%ymm5
  0x00007fa5c50496c1:   vpand  %ymm1,%ymm8,%ymm0
  0x00007fa5c50496c5:   mov    $0x19191919,%eax
  0x00007fa5c50496ca:   vmovd  %eax,%xmm3
  0x00007fa5c50496ce:   vpbroadcastd %xmm3,%ymm3
  0x00007fa5c50496d3:   mov    $0x33333333,%eax
  0x00007fa5c50496d8:   vmovd  %eax,%xmm4
  0x00007fa5c50496dc:   vpbroadcastd %xmm4,%ymm4
  0x00007fa5c50496e1:   vpmulhuw %ymm7,%ymm0,%ymm2
  0x00007fa5c50496e5:   vpand  %ymm1,%ymm6,%ymm0
  0x00007fa5c50496e9:   vpmullw %ymm0,%ymm5,%ymm0
  0x00007fa5c50496ed:   vpor   %ymm2,%ymm0,%ymm0
  0x00007fa5c50496f1:   vpcmpgtb %ymm3,%ymm0,%ymm2
  0x00007fa5c50496f5:   vpsubusb %ymm4,%ymm0,%ymm1
  0x00007fa5c50496f9:   vpsubb %ymm2,%ymm1,%ymm1
  0x00007fa5c50496fd:   movabs $0x7fa5c5049200,%r11
  0x00007fa5c5049707:   mov    %r9d,%r15d
  0x00007fa5c504970a:   shl    $0x5,%r15d
  0x00007fa5c504970e:   vmovdqu (%r11,%r15,1),%ymm2
  0x00007fa5c5049714:   vpshufb %ymm1,%ymm2,%ymm1
  0x00007fa5c5049719:   vpaddb %ymm0,%ymm1,%ymm0
  0x00007fa5c504971d:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007fa5c5049723:   add    $0x20,%r8d
  0x00007fa5c5049727:   cmp    $0x1f,%r14d
  0x00007fa5c504972b:   jbe    Stub::implEncode+365 0x00007fa5c50497ad
  0x00007fa5c5049731:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c504973c:   data16 data16 xchg %ax,%ax
  0x00007fa5c5049740:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c504974b:   data16 data16 xchg %ax,%ax
  0x00007fa5c504974f:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c504975a:   data16 data16 xchg %ax,%ax
  0x00007fa5c504975e:   xchg   %ax,%ax
  0x00007fa5c5049760:   vmovdqu -0x4(%rdi,%rsi,1),%ymm1
  0x00007fa5c5049766:   sub    $0x18,%r14d
  0x00007fa5c504976a:   add    $0x18,%esi
  0x00007fa5c504976d:   vpshufb %ymm9,%ymm1,%ymm1
  0x00007fa5c5049772:   vpand  %ymm1,%ymm8,%ymm0
  0x00007fa5c5049776:   vpmulhuw %ymm7,%ymm0,%ymm10
  0x00007fa5c504977a:   vpand  %ymm1,%ymm6,%ymm0
  0x00007fa5c504977e:   vpmullw %ymm0,%ymm5,%ymm0
  0x00007fa5c5049782:   vpor   %ymm10,%ymm0,%ymm0
  0x00007fa5c5049787:   vpcmpgtb %ymm3,%ymm0,%ymm10
  0x00007fa5c504978b:   vpsubusb %ymm4,%ymm0,%ymm1
  0x00007fa5c504978f:   vpsubb %ymm10,%ymm1,%ymm1
  0x00007fa5c5049794:   vpshufb %ymm1,%ymm2,%ymm1
  0x00007fa5c5049799:   vpaddb %ymm0,%ymm1,%ymm0
  0x00007fa5c504979d:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007fa5c50497a3:   add    $0x20,%r8d
  0x00007fa5c50497a7:   cmp    $0x1f,%r14d
  0x00007fa5c50497ab:   ja     Stub::implEncode+288 0x00007fa5c5049760
  0x00007fa5c50497ad:   vzeroupper 
  0x00007fa5c50497b0:   cmp    $0x3,%r14d
  0x00007fa5c50497b4:   jb     Stub::implEncode+524 0x00007fa5c504984c
  0x00007fa5c50497ba:   movabs $0x7fa5c50493c0,%r11
  0x00007fa5c50497c4:   mov    %r9d,%r15d
  0x00007fa5c50497c7:   shl    $0x6,%r15d
  0x00007fa5c50497cb:   add    %r15,%r11
  0x00007fa5c50497ce:   movzbl (%rdi,%rsi,1),%r15d
  0x00007fa5c50497d3:   movzbl 0x1(%rdi,%rsi,1),%r10d
  0x00007fa5c50497d9:   movzbl 0x2(%rdi,%rsi,1),%r13d
  0x00007fa5c50497df:   mov    %r10d,%eax
  0x00007fa5c50497e2:   shl    $0x18,%r10d
  0x00007fa5c50497e6:   or     %r10d,%eax
  0x00007fa5c50497e9:   sub    $0x3,%r14d
  0x00007fa5c50497ed:   shl    $0x8,%r15d
  0x00007fa5c50497f1:   shl    $0x10,%r13d
  0x00007fa5c50497f5:   or     %r15d,%eax
  0x00007fa5c50497f8:   add    $0x3,%esi
  0x00007fa5c50497fb:   or     %r13d,%eax
  0x00007fa5c50497fe:   shr    $0x10,%r13d
  0x00007fa5c5049802:   and    $0x3f,%r13d
  0x00007fa5c5049806:   shr    $0xa,%r15d
  0x00007fa5c504980a:   movzbl (%r11,%r13,1),%r13d
  0x00007fa5c504980f:   movzbl (%r11,%r15,1),%r15d
  0x00007fa5c5049814:   mov    %r13b,0x3(%rcx,%r8,1)
  0x00007fa5c5049819:   shr    $0x4,%eax
  0x00007fa5c504981c:   mov    %eax,%r10d
  0x00007fa5c504981f:   and    $0x3f,%eax
  0x00007fa5c5049822:   mov    %r15b,(%rcx,%r8,1)
  0x00007fa5c5049826:   movzbl (%r11,%rax,1),%eax
  0x00007fa5c504982b:   shr    $0x12,%r10d
  0x00007fa5c504982f:   and    $0x3f,%r10d
  0x00007fa5c5049833:   movzbl (%r11,%r10,1),%r10d
  0x00007fa5c5049838:   mov    %al,0x1(%rcx,%r8,1)
  0x00007fa5c504983d:   mov    %r10b,0x2(%rcx,%r8,1)
  0x00007fa5c5049842:   add    $0x4,%r8d
  0x00007fa5c5049846:   cmp    $0x3,%r14d
  0x00007fa5c504984a:   jae    Stub::implEncode+398 0x00007fa5c50497ce
  0x00007fa5c504984c:   pop    %r15
  0x00007fa5c504984e:   pop    %r14
  0x00007fa5c5049850:   pop    %r13
  0x00007fa5c5049852:   pop    %r12
  0x00007fa5c5049854:   leaveq 
  0x00007fa5c5049855:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::implDecode [0x00007fa5c5049860, 0x00007fa5c5049a64] (516 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5049860:   push   %rbp
  0x00007fa5c5049861:   mov    %rsp,%rbp
  0x00007fa5c5049864:   push   %r12
  0x00007fa5c5049866:   push   %r13
  0x00007fa5c5049868:   push   %r14
  0x00007fa5c504986a:   push   %r15
  0x00007fa5c504986c:   push   %rbx
  0x00007fa5c504986d:   mov    0x10(%rbp),%ebx
  0x00007fa5c5049870:   mov    %edx,%r14d
  0x00007fa5c5049873:   sub    %esi,%r14d
  0x00007fa5c5049876:   push   %rcx
  0x00007fa5c5049877:   sub    $0x2c,%r14d
  0x00007fa5c504987b:   cmp    $0x0,%r14d
  0x00007fa5c504987f:   jbe    Stub::implDecode+287 0x00007fa5c504997f
  0x00007fa5c5049885:   cmp    $0x0,%ebx
  0x00007fa5c5049888:   jne    Stub::implDecode+287 0x00007fa5c504997f
  0x00007fa5c504988e:   shl    $0x3,%r9d
  0x00007fa5c5049892:   movabs $0x7fa5c5049240,%r13
  0x00007fa5c504989c:   vpbroadcastq 0x0(%r13,%r9,1),%ymm4
  0x00007fa5c50498a3:   vmovdqu %ymm4,%ymm10
  0x00007fa5c50498a7:   vmovdqu 0x10(%r13),%ymm12
  0x00007fa5c50498ad:   vmovdqu 0x30(%r13),%ymm9
  0x00007fa5c50498b3:   vmovdqu 0x50(%r13),%ymm7
  0x00007fa5c50498b9:   vmovdqu 0x70(%r13),%ymm6
  0x00007fa5c50498bf:   vmovdqu 0x90(%r13),%ymm13
  0x00007fa5c50498c8:   movabs $0x7fa5c5049340,%r13
  0x00007fa5c50498d2:   shl    $0x2,%r9d
  0x00007fa5c50498d6:   vmovdqu 0x0(%r13,%r9,1),%ymm11
  0x00007fa5c50498dd:   vmovdqu 0x20(%r13,%r9,1),%ymm8
  0x00007fa5c50498e4:   shr    $0x5,%r9d
  0x00007fa5c50498e8:   jmpq   Stub::implDecode+239 0x00007fa5c504994f
  0x00007fa5c50498ed:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c50498f8:   data16 data16 xchg %ax,%ax
  0x00007fa5c50498fc:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c5049907:   data16 data16 xchg %ax,%ax
  0x00007fa5c504990b:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c5049916:   data16 data16 xchg %ax,%ax
  0x00007fa5c504991a:   nopw   0x0(%rax,%rax,1)
  0x00007fa5c5049920:   vpaddb %ymm2,%ymm0,%ymm0
  0x00007fa5c5049924:   vpmaddubsw %ymm7,%ymm0,%ymm0
  0x00007fa5c5049929:   vpmaddwd %ymm6,%ymm0,%ymm0
  0x00007fa5c504992d:   vpshufb %ymm13,%ymm0,%ymm0
  0x00007fa5c5049932:   vpermd %ymm0,%ymm12,%ymm0
  0x00007fa5c5049937:   vmovdqu %ymm0,(%rcx,%r8,1)
  0x00007fa5c504993d:   add    $0x20,%rdi
  0x00007fa5c5049941:   add    $0x18,%rcx
  0x00007fa5c5049945:   sub    $0x20,%r14d
  0x00007fa5c5049949:   jbe    Stub::implDecode+287 0x00007fa5c504997f
  0x00007fa5c504994f:   vmovdqu (%rdi,%rsi,1),%ymm2
  0x00007fa5c5049954:   vpsrld $0x4,%ymm2,%ymm1
  0x00007fa5c5049959:   vpand  %ymm1,%ymm4,%ymm1
  0x00007fa5c504995d:   vpand  %ymm4,%ymm2,%ymm3
  0x00007fa5c5049961:   vpcmpeqb %ymm2,%ymm10,%ymm0
  0x00007fa5c5049965:   vpshufb %ymm3,%ymm11,%ymm3
  0x00007fa5c504996a:   vpshufb %ymm1,%ymm9,%ymm5
  0x00007fa5c504996f:   vptest %ymm5,%ymm3
  0x00007fa5c5049974:   vpaddb %ymm1,%ymm0,%ymm0
  0x00007fa5c5049978:   vpshufb %ymm0,%ymm8,%ymm0
  0x00007fa5c504997d:   je     Stub::implDecode+192 0x00007fa5c5049920
  0x00007fa5c504997f:   add    $0x2c,%r14d
  0x00007fa5c5049983:   vzeroupper 
  0x00007fa5c5049986:   shr    $0x2,%r14d
  0x00007fa5c504998a:   cmp    $0x0,%r14d
  0x00007fa5c504998e:   jle    Stub::implDecode+498 0x00007fa5c5049a52
  0x00007fa5c5049994:   shl    $0x8,%r9d
  0x00007fa5c5049998:   movabs $0x7fa5c5049440,%r11
  0x00007fa5c50499a2:   add    %r9,%r11
  0x00007fa5c50499a5:   jmpq   Stub::implDecode+443 0x00007fa5c5049a1b
  0x00007fa5c50499aa:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c50499b5:   data16 data16 xchg %ax,%ax
  0x00007fa5c50499b9:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c50499c4:   data16 data16 xchg %ax,%ax
  0x00007fa5c50499c8:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c50499d3:   data16 data16 xchg %ax,%ax
  0x00007fa5c50499d7:   nopw   0x0(%rax,%rax,1)
  0x00007fa5c50499e0:   shl    $0x12,%r13d
  0x00007fa5c50499e4:   shl    $0xc,%r15d
  0x00007fa5c50499e8:   shl    $0x6,%edx
  0x00007fa5c50499eb:   or     %r15d,%r13d
  0x00007fa5c50499ee:   or     %edx,%r13d
  0x00007fa5c50499f1:   or     %r9d,%r13d
  0x00007fa5c50499f4:   add    $0x4,%rdi
  0x00007fa5c50499f8:   mov    %r13b,0x2(%rcx,%r8,1)
  0x00007fa5c50499fd:   shr    $0x8,%r13d
  0x00007fa5c5049a01:   mov    %r13b,0x1(%rcx,%r8,1)
  0x00007fa5c5049a06:   shr    $0x8,%r13d
  0x00007fa5c5049a0a:   mov    %r13b,(%rcx,%r8,1)
  0x00007fa5c5049a0e:   add    $0x3,%rcx
  0x00007fa5c5049a12:   dec    %r14d
  0x00007fa5c5049a15:   je     Stub::implDecode+498 0x00007fa5c5049a52
  0x00007fa5c5049a1b:   movzbl (%rdi,%rsi,1),%r13d
  0x00007fa5c5049a20:   movzbl 0x1(%rdi,%rsi,1),%r15d
  0x00007fa5c5049a26:   movsbl (%r11,%r13,1),%r13d
  0x00007fa5c5049a2b:   movsbl (%r11,%r15,1),%r15d
  0x00007fa5c5049a30:   movzbl 0x2(%rdi,%rsi,1),%edx
  0x00007fa5c5049a35:   movzbl 0x3(%rdi,%rsi,1),%r9d
  0x00007fa5c5049a3b:   movsbl (%r11,%rdx,1),%edx
  0x00007fa5c5049a40:   movsbl (%r11,%r9,1),%r9d
  0x00007fa5c5049a45:   mov    %r13,%rax
  0x00007fa5c5049a48:   or     %r15d,%eax
  0x00007fa5c5049a4b:   or     %edx,%eax
  0x00007fa5c5049a4d:   or     %r9d,%eax
  0x00007fa5c5049a50:   jns    Stub::implDecode+384 0x00007fa5c50499e0
  0x00007fa5c5049a52:   pop    %rax
  0x00007fa5c5049a53:   sub    %rax,%rcx
  0x00007fa5c5049a56:   mov    %rcx,%rax
  0x00007fa5c5049a59:   pop    %rbx
  0x00007fa5c5049a5a:   pop    %r15
  0x00007fa5c5049a5c:   pop    %r14
  0x00007fa5c5049a5e:   pop    %r13
  0x00007fa5c5049a60:   pop    %r12
  0x00007fa5c5049a62:   leaveq 
  0x00007fa5c5049a63:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::nmethod_entry_barrier [0x00007fa5c5049a80, 0x00007fa5c5049c2d] (429 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5049a80:   pushq  $0xffffffffffffffff
  0x00007fa5c5049a85:   push   %rbp
  0x00007fa5c5049a86:   mov    %rsp,%rbp
  0x00007fa5c5049a89:   push   %rdi
  0x00007fa5c5049a8a:   lea    0x18(%rsp),%rdi
  0x00007fa5c5049a8f:   sub    $0x80,%rsp
  0x00007fa5c5049a96:   mov    %rax,0x78(%rsp)
  0x00007fa5c5049a9b:   mov    %rcx,0x70(%rsp)
  0x00007fa5c5049aa0:   mov    %rdx,0x68(%rsp)
  0x00007fa5c5049aa5:   mov    %rbx,0x60(%rsp)
  0x00007fa5c5049aaa:   mov    %rbp,0x50(%rsp)
  0x00007fa5c5049aaf:   mov    %rsi,0x48(%rsp)
  0x00007fa5c5049ab4:   mov    %rdi,0x40(%rsp)
  0x00007fa5c5049ab9:   mov    %r8,0x38(%rsp)
  0x00007fa5c5049abe:   mov    %r9,0x30(%rsp)
  0x00007fa5c5049ac3:   mov    %r10,0x28(%rsp)
  0x00007fa5c5049ac8:   mov    %r11,0x20(%rsp)
  0x00007fa5c5049acd:   mov    %r12,0x18(%rsp)
  0x00007fa5c5049ad2:   mov    %r13,0x10(%rsp)
  0x00007fa5c5049ad7:   mov    %r14,0x8(%rsp)
  0x00007fa5c5049adc:   mov    %r15,(%rsp)
  0x00007fa5c5049ae0:   sub    $0x80,%rsp
  0x00007fa5c5049ae7:   vmovdqu %xmm7,0x70(%rsp)
  0x00007fa5c5049aed:   vmovdqu %xmm6,0x60(%rsp)
  0x00007fa5c5049af3:   vmovdqu %xmm5,0x50(%rsp)
  0x00007fa5c5049af9:   vmovdqu %xmm4,0x40(%rsp)
  0x00007fa5c5049aff:   vmovdqu %xmm3,0x30(%rsp)
  0x00007fa5c5049b05:   vmovdqu %xmm2,0x20(%rsp)
  0x00007fa5c5049b0b:   vmovdqu %xmm1,0x10(%rsp)
  0x00007fa5c5049b11:   vmovdqu %xmm0,(%rsp)
  0x00007fa5c5049b16:   test   $0xf,%spl
  0x00007fa5c5049b1a:   je     Stub::nmethod_entry_barrier+178 0x00007fa5c5049b32
  0x00007fa5c5049b20:   sub    $0x8,%rsp
  0x00007fa5c5049b24:   callq  0x00007fa5cdb0c2e0 = BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)
  0x00007fa5c5049b29:   add    $0x8,%rsp
  0x00007fa5c5049b2d:   jmpq   Stub::nmethod_entry_barrier+183 0x00007fa5c5049b37
  0x00007fa5c5049b32:   callq  0x00007fa5cdb0c2e0 = BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)
  0x00007fa5c5049b37:   vmovdqu (%rsp),%xmm0
  0x00007fa5c5049b3c:   vmovdqu 0x10(%rsp),%xmm1
  0x00007fa5c5049b42:   vmovdqu 0x20(%rsp),%xmm2
  0x00007fa5c5049b48:   vmovdqu 0x30(%rsp),%xmm3
  0x00007fa5c5049b4e:   vmovdqu 0x40(%rsp),%xmm4
  0x00007fa5c5049b54:   vmovdqu 0x50(%rsp),%xmm5
  0x00007fa5c5049b5a:   vmovdqu 0x60(%rsp),%xmm6
  0x00007fa5c5049b60:   vmovdqu 0x70(%rsp),%xmm7
  0x00007fa5c5049b66:   add    $0x80,%rsp
  0x00007fa5c5049b6d:   cmp    $0x1,%eax
  0x00007fa5c5049b70:   je     Stub::nmethod_entry_barrier+334 0x00007fa5c5049bce
  0x00007fa5c5049b76:   mov    (%rsp),%r15
  0x00007fa5c5049b7a:   mov    0x8(%rsp),%r14
  0x00007fa5c5049b7f:   mov    0x10(%rsp),%r13
  0x00007fa5c5049b84:   mov    0x18(%rsp),%r12
  0x00007fa5c5049b89:   mov    0x20(%rsp),%r11
  0x00007fa5c5049b8e:   mov    0x28(%rsp),%r10
  0x00007fa5c5049b93:   mov    0x30(%rsp),%r9
  0x00007fa5c5049b98:   mov    0x38(%rsp),%r8
  0x00007fa5c5049b9d:   mov    0x40(%rsp),%rdi
  0x00007fa5c5049ba2:   mov    0x48(%rsp),%rsi
  0x00007fa5c5049ba7:   mov    0x50(%rsp),%rbp
  0x00007fa5c5049bac:   mov    0x60(%rsp),%rbx
  0x00007fa5c5049bb1:   mov    0x68(%rsp),%rdx
  0x00007fa5c5049bb6:   mov    0x70(%rsp),%rcx
  0x00007fa5c5049bbb:   mov    0x78(%rsp),%rax
  0x00007fa5c5049bc0:   add    $0x80,%rsp
  0x00007fa5c5049bc7:   pop    %rdi
  0x00007fa5c5049bc8:   leaveq 
  0x00007fa5c5049bc9:   add    $0x8,%rsp
  0x00007fa5c5049bcd:   retq   
  0x00007fa5c5049bce:   mov    (%rsp),%r15
  0x00007fa5c5049bd2:   mov    0x8(%rsp),%r14
  0x00007fa5c5049bd7:   mov    0x10(%rsp),%r13
  0x00007fa5c5049bdc:   mov    0x18(%rsp),%r12
  0x00007fa5c5049be1:   mov    0x20(%rsp),%r11
  0x00007fa5c5049be6:   mov    0x28(%rsp),%r10
  0x00007fa5c5049beb:   mov    0x30(%rsp),%r9
  0x00007fa5c5049bf0:   mov    0x38(%rsp),%r8
  0x00007fa5c5049bf5:   mov    0x40(%rsp),%rdi
  0x00007fa5c5049bfa:   mov    0x48(%rsp),%rsi
  0x00007fa5c5049bff:   mov    0x50(%rsp),%rbp
  0x00007fa5c5049c04:   mov    0x60(%rsp),%rbx
  0x00007fa5c5049c09:   mov    0x68(%rsp),%rdx
  0x00007fa5c5049c0e:   mov    0x70(%rsp),%rcx
  0x00007fa5c5049c13:   mov    0x78(%rsp),%rax
  0x00007fa5c5049c18:   add    $0x80,%rsp
  0x00007fa5c5049c1f:   pop    %rdi
  0x00007fa5c5049c20:   leaveq 
  0x00007fa5c5049c21:   test   %rsp,(%rsp)
  0x00007fa5c5049c25:   mov    (%rsp),%rsp
  0x00007fa5c5049c29:   jmpq   *-0x8(%rsp)
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::multiplyToLen [0x00007fa5c5049c40, 0x00007fa5c5049e6f] (559 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5049c40:   push   %rbp
  0x00007fa5c5049c41:   mov    %rsp,%rbp
  0x00007fa5c5049c44:   mov    %r9,%r11
  0x00007fa5c5049c47:   mov    %rsi,%rax
  0x00007fa5c5049c4a:   mov    %rdx,%rsi
  0x00007fa5c5049c4d:   push   %r12
  0x00007fa5c5049c4f:   push   %r13
  0x00007fa5c5049c51:   push   %r14
  0x00007fa5c5049c53:   push   %r15
  0x00007fa5c5049c55:   push   %rbx
  0x00007fa5c5049c56:   push   %rax
  0x00007fa5c5049c57:   push   %r11
  0x00007fa5c5049c59:   mov    %ecx,%r12d
  0x00007fa5c5049c5c:   mov    %r11d,%r13d
  0x00007fa5c5049c5f:   xor    %rbx,%rbx
  0x00007fa5c5049c62:   mov    %eax,%r14d
  0x00007fa5c5049c65:   dec    %r14d
  0x00007fa5c5049c68:   js     Stub::multiplyToLen+545 0x00007fa5c5049e61
  0x00007fa5c5049c6e:   dec    %r14d
  0x00007fa5c5049c71:   js     Stub::multiplyToLen+129 0x00007fa5c5049cc1
  0x00007fa5c5049c77:   mov    (%rdi,%r14,4),%r11
  0x00007fa5c5049c7b:   ror    $0x20,%r11
  0x00007fa5c5049c7f:   dec    %r12d
  0x00007fa5c5049c82:   js     Stub::multiplyToLen+134 0x00007fa5c5049cc6
  0x00007fa5c5049c88:   dec    %r12d
  0x00007fa5c5049c8b:   js     Stub::multiplyToLen+124 0x00007fa5c5049cbc
  0x00007fa5c5049c91:   mov    (%rsi,%r12,4),%r15
  0x00007fa5c5049c95:   ror    $0x20,%r15
  0x00007fa5c5049c99:   mov    %r11,%rax
  0x00007fa5c5049c9c:   mul    %r15
  0x00007fa5c5049c9f:   add    %rbx,%rax
  0x00007fa5c5049ca2:   adc    $0x0,%rdx
  0x00007fa5c5049ca6:   sub    $0x2,%r13d
  0x00007fa5c5049caa:   mov    %eax,0x4(%r8,%r13,4)
  0x00007fa5c5049caf:   shr    $0x20,%rax
  0x00007fa5c5049cb3:   mov    %eax,(%r8,%r13,4)
  0x00007fa5c5049cb7:   mov    %rdx,%rbx
  0x00007fa5c5049cba:   jmp    Stub::multiplyToLen+63 0x00007fa5c5049c7f
  0x00007fa5c5049cbc:   mov    (%rsi),%r15d
  0x00007fa5c5049cbf:   jmp    Stub::multiplyToLen+89 0x00007fa5c5049c99
  0x00007fa5c5049cc1:   mov    (%rdi),%r11d
  0x00007fa5c5049cc4:   jmp    Stub::multiplyToLen+63 0x00007fa5c5049c7f
  0x00007fa5c5049cc6:   test   %r13d,%r13d
  0x00007fa5c5049cc9:   je     Stub::multiplyToLen+169 0x00007fa5c5049ce9
  0x00007fa5c5049ccf:   sub    $0x1,%r13d
  0x00007fa5c5049cd3:   je     Stub::multiplyToLen+165 0x00007fa5c5049ce5
  0x00007fa5c5049cd9:   mov    %ebx,(%r8,%r13,4)
  0x00007fa5c5049cdd:   shr    $0x20,%rbx
  0x00007fa5c5049ce1:   sub    $0x1,%r13d
  0x00007fa5c5049ce5:   mov    %ebx,(%r8,%r13,4)
  0x00007fa5c5049ce9:   xor    %ebx,%ebx
  0x00007fa5c5049ceb:   mov    %ecx,%r12d
  0x00007fa5c5049cee:   sub    $0x1,%r14d
  0x00007fa5c5049cf2:   js     Stub::multiplyToLen+545 0x00007fa5c5049e61
  0x00007fa5c5049cf8:   push   %r8
  0x00007fa5c5049cfa:   lea    0x4(%r8,%r14,4),%r8
  0x00007fa5c5049cff:   sub    $0x1,%r14d
  0x00007fa5c5049d03:   js     Stub::multiplyToLen+538 0x00007fa5c5049e5a
  0x00007fa5c5049d09:   mov    (%rdi,%r14,4),%rdx
  0x00007fa5c5049d0d:   rorx   $0x20,%rdx,%rdx
  0x00007fa5c5049d13:   push   %rdi
  0x00007fa5c5049d14:   push   %r14
  0x00007fa5c5049d16:   push   %rcx
  0x00007fa5c5049d17:   mov    %r12d,%ecx
  0x00007fa5c5049d1a:   and    $0xfffffffc,%ecx
  0x00007fa5c5049d1d:   shr    $0x2,%ecx
  0x00007fa5c5049d20:   sub    $0x1,%ecx
  0x00007fa5c5049d23:   js     Stub::multiplyToLen+365 0x00007fa5c5049dad
  0x00007fa5c5049d29:   sub    $0x4,%r12d
  0x00007fa5c5049d2d:   mov    0x8(%rsi,%r12,4),%rax
  0x00007fa5c5049d32:   rorx   $0x20,%rax,%rax
  0x00007fa5c5049d38:   mov    (%rsi,%r12,4),%r13
  0x00007fa5c5049d3c:   rorx   $0x20,%r13,%r13
  0x00007fa5c5049d42:   mulx   %rax,%r14,%r15
  0x00007fa5c5049d47:   mulx   %r13,%r11,%rdi
  0x00007fa5c5049d4c:   mov    0x8(%r8,%r12,4),%rax
  0x00007fa5c5049d51:   rorx   $0x20,%rax,%rax
  0x00007fa5c5049d57:   mov    (%r8,%r12,4),%r13
  0x00007fa5c5049d5b:   rorx   $0x20,%r13,%r13
  0x00007fa5c5049d61:   adcx   %rbx,%r14
  0x00007fa5c5049d67:   adox   %rax,%r14
  0x00007fa5c5049d6d:   adcx   %r11,%r15
  0x00007fa5c5049d73:   adox   %r13,%r15
  0x00007fa5c5049d79:   mov    $0x0,%ebx
  0x00007fa5c5049d7e:   adcx   %rbx,%rdi
  0x00007fa5c5049d84:   adox   %rbx,%rdi
  0x00007fa5c5049d8a:   mov    %rdi,%rbx
  0x00007fa5c5049d8d:   mov    %r14d,0xc(%r8,%r12,4)
  0x00007fa5c5049d92:   shr    $0x20,%r14
  0x00007fa5c5049d96:   mov    %r14d,0x8(%r8,%r12,4)
  0x00007fa5c5049d9b:   mov    %r15d,0x4(%r8,%r12,4)
  0x00007fa5c5049da0:   shr    $0x20,%r15
  0x00007fa5c5049da4:   mov    %r15d,(%r8,%r12,4)
  0x00007fa5c5049da8:   jmpq   Stub::multiplyToLen+224 0x00007fa5c5049d20
  0x00007fa5c5049dad:   and    $0x3,%r12d
  0x00007fa5c5049db1:   je     Stub::multiplyToLen+503 0x00007fa5c5049e37
  0x00007fa5c5049db7:   sub    $0x2,%r12d
  0x00007fa5c5049dbb:   js     Stub::multiplyToLen+440 0x00007fa5c5049df8
  0x00007fa5c5049dc1:   mov    (%rsi,%r12,4),%rax
  0x00007fa5c5049dc5:   rorx   $0x20,%rax,%rax
  0x00007fa5c5049dcb:   mulx   %rax,%r14,%r15
  0x00007fa5c5049dd0:   mov    (%r8,%r12,4),%r13
  0x00007fa5c5049dd4:   rorx   $0x20,%r13,%r13
  0x00007fa5c5049dda:   add    %rbx,%r14
  0x00007fa5c5049ddd:   adc    $0x0,%r15
  0x00007fa5c5049de1:   add    %r13,%r14
  0x00007fa5c5049de4:   adc    $0x0,%r15
  0x00007fa5c5049de8:   mov    %r14d,0x4(%r8,%r12,4)
  0x00007fa5c5049ded:   shr    $0x20,%r14
  0x00007fa5c5049df1:   mov    %r14d,(%r8,%r12,4)
  0x00007fa5c5049df5:   mov    %r15,%rbx
  0x00007fa5c5049df8:   add    $0x2,%r12d
  0x00007fa5c5049dfc:   and    $0x1,%r12d
  0x00007fa5c5049e00:   sub    $0x1,%r12d
  0x00007fa5c5049e04:   js     Stub::multiplyToLen+503 0x00007fa5c5049e37
  0x00007fa5c5049e0a:   mov    (%rsi,%r12,4),%r15d
  0x00007fa5c5049e0e:   mulx   %r15,%r14,%rdi
  0x00007fa5c5049e13:   mov    (%r8,%r12,4),%r15d
  0x00007fa5c5049e17:   add    %r15,%r14
  0x00007fa5c5049e1a:   adc    $0x0,%rdi
  0x00007fa5c5049e1e:   add    %rbx,%r14
  0x00007fa5c5049e21:   adc    $0x0,%rdi
  0x00007fa5c5049e25:   mov    %r14d,(%r8,%r12,4)
  0x00007fa5c5049e29:   shr    $0x20,%r14
  0x00007fa5c5049e2d:   shl    $0x20,%rdi
  0x00007fa5c5049e31:   or     %rdi,%r14
  0x00007fa5c5049e34:   mov    %r14,%rbx
  0x00007fa5c5049e37:   pop    %rcx
  0x00007fa5c5049e38:   pop    %rax
  0x00007fa5c5049e39:   pop    %rdi
  0x00007fa5c5049e3a:   pop    %r8
  0x00007fa5c5049e3c:   mov    %eax,%r14d
  0x00007fa5c5049e3f:   add    $0x1,%r14d
  0x00007fa5c5049e43:   mov    %ebx,(%r8,%r14,4)
  0x00007fa5c5049e47:   sub    $0x1,%r14d
  0x00007fa5c5049e4b:   js     Stub::multiplyToLen+545 0x00007fa5c5049e61
  0x00007fa5c5049e4d:   shr    $0x20,%rbx
  0x00007fa5c5049e51:   mov    %ebx,(%r8,%r14,4)
  0x00007fa5c5049e55:   jmpq   Stub::multiplyToLen+169 0x00007fa5c5049ce9
  0x00007fa5c5049e5a:   mov    (%rdi),%edx
  0x00007fa5c5049e5c:   jmpq   Stub::multiplyToLen+211 0x00007fa5c5049d13
  0x00007fa5c5049e61:   pop    %r11
  0x00007fa5c5049e63:   pop    %rax
  0x00007fa5c5049e64:   pop    %rbx
  0x00007fa5c5049e65:   pop    %r15
  0x00007fa5c5049e67:   pop    %r14
  0x00007fa5c5049e69:   pop    %r13
  0x00007fa5c5049e6b:   pop    %r12
  0x00007fa5c5049e6d:   leaveq 
  0x00007fa5c5049e6e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::squareToLen [0x00007fa5c5049e80, 0x00007fa5c5049f9f] (287 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5049e80:   push   %rbp
  0x00007fa5c5049e81:   mov    %rsp,%rbp
  0x00007fa5c5049e84:   mov    %rdx,%r8
  0x00007fa5c5049e87:   push   %r12
  0x00007fa5c5049e89:   push   %r13
  0x00007fa5c5049e8b:   push   %r14
  0x00007fa5c5049e8d:   push   %r15
  0x00007fa5c5049e8f:   push   %rbx
  0x00007fa5c5049e90:   xor    %rbx,%rbx
  0x00007fa5c5049e93:   xor    %rdx,%rdx
  0x00007fa5c5049e96:   xor    %r12d,%r12d
  0x00007fa5c5049e99:   xor    %r15d,%r15d
  0x00007fa5c5049e9c:   test   $0x1,%sil
  0x00007fa5c5049ea0:   je     Stub::squareToLen+60 0x00007fa5c5049ebc
  0x00007fa5c5049ea2:   mov    (%rdi,%r12,4),%eax
  0x00007fa5c5049ea6:   imul   %rax,%rax
  0x00007fa5c5049eaa:   shr    %rax
  0x00007fa5c5049ead:   adc    $0x0,%rbx
  0x00007fa5c5049eb1:   mov    %rax,(%r8,%r15,4)
  0x00007fa5c5049eb5:   inc    %r12d
  0x00007fa5c5049eb8:   add    $0x2,%r15d
  0x00007fa5c5049ebc:   cmp    %rsi,%r12
  0x00007fa5c5049ebf:   je     Stub::squareToLen+108 0x00007fa5c5049eec
  0x00007fa5c5049ec1:   mov    (%rdi,%r12,4),%rax
  0x00007fa5c5049ec5:   ror    $0x20,%rax
  0x00007fa5c5049ec9:   mul    %rax
  0x00007fa5c5049ecc:   shr    %rbx
  0x00007fa5c5049ecf:   rcr    %rdx
  0x00007fa5c5049ed2:   rcr    %rax
  0x00007fa5c5049ed5:   adc    $0x0,%rbx
  0x00007fa5c5049ed9:   mov    %rdx,(%r8,%r15,4)
  0x00007fa5c5049edd:   mov    %rax,0x8(%r8,%r15,4)
  0x00007fa5c5049ee2:   add    $0x2,%r12d
  0x00007fa5c5049ee6:   add    $0x4,%r15d
  0x00007fa5c5049eea:   jmp    Stub::squareToLen+60 0x00007fa5c5049ebc
  0x00007fa5c5049eec:   push   %rcx
  0x00007fa5c5049eed:   push   %rsi
  0x00007fa5c5049eee:   add    $0x2,%ecx
  0x00007fa5c5049ef1:   xor    %rbx,%rbx
  0x00007fa5c5049ef4:   sub    $0x4,%ecx
  0x00007fa5c5049ef7:   sub    $0x2,%esi
  0x00007fa5c5049efa:   push   %rcx
  0x00007fa5c5049efb:   push   %rsi
  0x00007fa5c5049efc:   cmp    $0x0,%esi
  0x00007fa5c5049eff:   jle    Stub::squareToLen+225 0x00007fa5c5049f61
  0x00007fa5c5049f01:   mov    (%rdi,%rsi,4),%rdx
  0x00007fa5c5049f05:   rorx   $0x20,%rdx,%rdx
  0x00007fa5c5049f0b:   dec    %esi
  0x00007fa5c5049f0d:   js     Stub::squareToLen+190 0x00007fa5c5049f3e
  0x00007fa5c5049f0f:   dec    %esi
  0x00007fa5c5049f11:   js     Stub::squareToLen+220 0x00007fa5c5049f5c
  0x00007fa5c5049f13:   mov    (%rdi,%rsi,4),%r15
  0x00007fa5c5049f17:   ror    $0x20,%r15
  0x00007fa5c5049f1b:   sub    $0x2,%ecx
  0x00007fa5c5049f1e:   mov    (%r8,%rcx,4),%r14
  0x00007fa5c5049f22:   mulx   %r15,%r15,%r13
  0x00007fa5c5049f27:   add    %rbx,%r14
  0x00007fa5c5049f2a:   adc    $0x0,%r13
  0x00007fa5c5049f2e:   add    %r15,%r14
  0x00007fa5c5049f31:   adc    $0x0,%r13
  0x00007fa5c5049f35:   mov    %r13,%rbx
  0x00007fa5c5049f38:   mov    %r14,(%r8,%rcx,4)
  0x00007fa5c5049f3c:   jmp    Stub::squareToLen+139 0x00007fa5c5049f0b
  0x00007fa5c5049f3e:   mov    $0x1,%r12d
  0x00007fa5c5049f44:   sub    $0x2,%ecx
  0x00007fa5c5049f47:   add    %rbx,(%r8,%rcx,4)
  0x00007fa5c5049f4b:   jae    Stub::squareToLen+216 0x00007fa5c5049f58
  0x00007fa5c5049f4d:   sub    $0x2,%ecx
  0x00007fa5c5049f50:   js     Stub::squareToLen+216 0x00007fa5c5049f58
  0x00007fa5c5049f52:   add    %r12,(%r8,%rcx,4)
  0x00007fa5c5049f56:   jmp    Stub::squareToLen+203 0x00007fa5c5049f4b
  0x00007fa5c5049f58:   pop    %rsi
  0x00007fa5c5049f59:   pop    %rcx
  0x00007fa5c5049f5a:   jmp    Stub::squareToLen+113 0x00007fa5c5049ef1
  0x00007fa5c5049f5c:   mov    (%rdi),%r15d
  0x00007fa5c5049f5f:   jmp    Stub::squareToLen+155 0x00007fa5c5049f1b
  0x00007fa5c5049f61:   pop    %rsi
  0x00007fa5c5049f62:   pop    %rcx
  0x00007fa5c5049f63:   pop    %rsi
  0x00007fa5c5049f64:   pop    %rcx
  0x00007fa5c5049f65:   mov    %ecx,%r14d
  0x00007fa5c5049f68:   xor    %r12d,%r12d
  0x00007fa5c5049f6b:   dec    %r14d
  0x00007fa5c5049f6e:   dec    %r14d
  0x00007fa5c5049f71:   js     Stub::squareToLen+262 0x00007fa5c5049f86
  0x00007fa5c5049f73:   mov    (%r8,%r14,4),%r13
  0x00007fa5c5049f77:   rcl    %r13
  0x00007fa5c5049f7a:   rorx   $0x20,%r13,%r13
  0x00007fa5c5049f80:   mov    %r13,(%r8,%r14,4)
  0x00007fa5c5049f84:   jmp    Stub::squareToLen+235 0x00007fa5c5049f6b
  0x00007fa5c5049f86:   mov    -0x4(%rdi,%rsi,4),%r14d
  0x00007fa5c5049f8b:   and    $0x1,%r14d
  0x00007fa5c5049f8f:   or     %r14d,-0x4(%r8,%rcx,4)
  0x00007fa5c5049f94:   pop    %rbx
  0x00007fa5c5049f95:   pop    %r15
  0x00007fa5c5049f97:   pop    %r14
  0x00007fa5c5049f99:   pop    %r13
  0x00007fa5c5049f9b:   pop    %r12
  0x00007fa5c5049f9d:   leaveq 
  0x00007fa5c5049f9e:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::mulAdd [0x00007fa5c5049fa0, 0x00007fa5c504a097] (247 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c5049fa0:   push   %rbp
  0x00007fa5c5049fa1:   mov    %rsp,%rbp
  0x00007fa5c5049fa4:   mov    %rdx,%r11
  0x00007fa5c5049fa7:   push   %r12
  0x00007fa5c5049fa9:   push   %r13
  0x00007fa5c5049fab:   push   %r14
  0x00007fa5c5049fad:   push   %r15
  0x00007fa5c5049faf:   push   %rbx
  0x00007fa5c5049fb0:   mov    %r8d,%edx
  0x00007fa5c5049fb3:   xor    %rbx,%rbx
  0x00007fa5c5049fb6:   mov    %ecx,%r12d
  0x00007fa5c5049fb9:   shr    $0x2,%r12d
  0x00007fa5c5049fbd:   sub    $0x1,%r12d
  0x00007fa5c5049fc1:   js     Stub::mulAdd+139 0x00007fa5c504a02b
  0x00007fa5c5049fc3:   sub    $0x4,%ecx
  0x00007fa5c5049fc6:   sub    $0x4,%r11d
  0x00007fa5c5049fca:   mov    0x8(%rsi,%rcx,4),%r15
  0x00007fa5c5049fcf:   ror    $0x20,%r15
  0x00007fa5c5049fd3:   mov    0x8(%rdi,%r11,4),%r14
  0x00007fa5c5049fd8:   ror    $0x20,%r14
  0x00007fa5c5049fdc:   mulx   %r15,%r15,%rax
  0x00007fa5c5049fe1:   add    %rbx,%r14
  0x00007fa5c5049fe4:   adc    $0x0,%rax
  0x00007fa5c5049fe8:   add    %r15,%r14
  0x00007fa5c5049feb:   adc    $0x0,%rax
  0x00007fa5c5049fef:   mov    %rax,%rbx
  0x00007fa5c5049ff2:   ror    $0x20,%r14
  0x00007fa5c5049ff6:   mov    %r14,0x8(%rdi,%r11,4)
  0x00007fa5c5049ffb:   mov    (%rsi,%rcx,4),%r15
  0x00007fa5c5049fff:   ror    $0x20,%r15
  0x00007fa5c504a003:   mov    (%rdi,%r11,4),%r14
  0x00007fa5c504a007:   ror    $0x20,%r14
  0x00007fa5c504a00b:   mulx   %r15,%r15,%rax
  0x00007fa5c504a010:   add    %rbx,%r14
  0x00007fa5c504a013:   adc    $0x0,%rax
  0x00007fa5c504a017:   add    %r15,%r14
  0x00007fa5c504a01a:   adc    $0x0,%rax
  0x00007fa5c504a01e:   mov    %rax,%rbx
  0x00007fa5c504a021:   ror    $0x20,%r14
  0x00007fa5c504a025:   mov    %r14,(%rdi,%r11,4)
  0x00007fa5c504a029:   jmp    Stub::mulAdd+29 0x00007fa5c5049fbd
  0x00007fa5c504a02b:   dec    %ecx
  0x00007fa5c504a02d:   js     Stub::mulAdd+234 0x00007fa5c504a08a
  0x00007fa5c504a02f:   dec    %ecx
  0x00007fa5c504a031:   js     Stub::mulAdd+201 0x00007fa5c504a069
  0x00007fa5c504a033:   mov    (%rsi,%rcx,4),%r15
  0x00007fa5c504a037:   ror    $0x20,%r15
  0x00007fa5c504a03b:   sub    $0x2,%r11d
  0x00007fa5c504a03f:   mov    (%rdi,%r11,4),%r14
  0x00007fa5c504a043:   ror    $0x20,%r14
  0x00007fa5c504a047:   mulx   %r15,%r15,%rax
  0x00007fa5c504a04c:   add    %rbx,%r14
  0x00007fa5c504a04f:   adc    $0x0,%rax
  0x00007fa5c504a053:   add    %r15,%r14
  0x00007fa5c504a056:   adc    $0x0,%rax
  0x00007fa5c504a05a:   mov    %rax,%rbx
  0x00007fa5c504a05d:   ror    $0x20,%r14
  0x00007fa5c504a061:   mov    %r14,(%rdi,%r11,4)
  0x00007fa5c504a065:   test   %ecx,%ecx
  0x00007fa5c504a067:   je     Stub::mulAdd+234 0x00007fa5c504a08a
  0x00007fa5c504a069:   mov    (%rsi),%r15d
  0x00007fa5c504a06c:   mov    -0x4(%rdi,%r11,4),%r14d
  0x00007fa5c504a071:   mov    %r8d,%eax
  0x00007fa5c504a074:   mul    %r15d
  0x00007fa5c504a077:   add    %ebx,%r14d
  0x00007fa5c504a07a:   adc    $0x0,%edx
  0x00007fa5c504a07d:   add    %eax,%r14d
  0x00007fa5c504a080:   adc    $0x0,%edx
  0x00007fa5c504a083:   mov    %edx,%ebx
  0x00007fa5c504a085:   mov    %r14d,-0x4(%rdi,%r11,4)
  0x00007fa5c504a08a:   mov    %ebx,%eax
  0x00007fa5c504a08c:   pop    %rbx
  0x00007fa5c504a08d:   pop    %r15
  0x00007fa5c504a08f:   pop    %r14
  0x00007fa5c504a091:   pop    %r13
  0x00007fa5c504a093:   pop    %r12
  0x00007fa5c504a095:   leaveq 
  0x00007fa5c504a096:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
StubRoutines::vectorizedMismatch [0x00007fa5c504a0a0, 0x00007fa5c504a234] (404 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c504a0a0:   push   %rbp
  0x00007fa5c504a0a1:   mov    %rsp,%rbp
  0x00007fa5c504a0a4:   shl    %cl,%rdx
  0x00007fa5c504a0a7:   xor    %rax,%rax
  0x00007fa5c504a0aa:   cmp    $0x8,%rdx
  0x00007fa5c504a0ae:   je     Stub::vectorizedMismatch+148 0x00007fa5c504a134
  0x00007fa5c504a0b4:   jl     Stub::vectorizedMismatch+182 0x00007fa5c504a156
  0x00007fa5c504a0ba:   cmp    $0x10,%rdx
  0x00007fa5c504a0be:   je     Stub::vectorizedMismatch+103 0x00007fa5c504a107
  0x00007fa5c504a0c4:   jl     Stub::vectorizedMismatch+148 0x00007fa5c504a134
  0x00007fa5c504a0ca:   cmp    $0x20,%rdx
  0x00007fa5c504a0ce:   jl     Stub::vectorizedMismatch+97 0x00007fa5c504a101
  0x00007fa5c504a0d0:   sub    $0x20,%rdx
  0x00007fa5c504a0d4:   vmovdqu (%rdi,%rax,1),%ymm0
  0x00007fa5c504a0d9:   vmovdqu (%rsi,%rax,1),%ymm1
  0x00007fa5c504a0de:   vpxor  %ymm1,%ymm0,%ymm2
  0x00007fa5c504a0e2:   vptest %ymm2,%ymm2
  0x00007fa5c504a0e7:   jne    Stub::vectorizedMismatch+314 0x00007fa5c504a1da
  0x00007fa5c504a0ed:   add    $0x20,%rax
  0x00007fa5c504a0f1:   sub    $0x20,%rdx
  0x00007fa5c504a0f5:   jge    Stub::vectorizedMismatch+52 0x00007fa5c504a0d4
  0x00007fa5c504a0f7:   add    $0x20,%rdx
  0x00007fa5c504a0fb:   je     Stub::vectorizedMismatch+389 0x00007fa5c504a225
  0x00007fa5c504a101:   cmp    $0x10,%rdx
  0x00007fa5c504a105:   jl     Stub::vectorizedMismatch+142 0x00007fa5c504a12e
  0x00007fa5c504a107:   vmovdqu (%rdi,%rax,1),%xmm0
  0x00007fa5c504a10c:   vmovdqu (%rsi,%rax,1),%xmm1
  0x00007fa5c504a111:   vpxor  %xmm1,%xmm0,%xmm2
  0x00007fa5c504a115:   vptest %xmm2,%xmm2
  0x00007fa5c504a11a:   jne    Stub::vectorizedMismatch+345 0x00007fa5c504a1f9
  0x00007fa5c504a120:   add    $0x10,%rax
  0x00007fa5c504a124:   sub    $0x10,%rdx
  0x00007fa5c504a128:   je     Stub::vectorizedMismatch+389 0x00007fa5c504a225
  0x00007fa5c504a12e:   cmp    $0x8,%rdx
  0x00007fa5c504a132:   jl     Stub::vectorizedMismatch+182 0x00007fa5c504a156
  0x00007fa5c504a134:   mov    (%rdi,%rax,1),%r8
  0x00007fa5c504a138:   mov    (%rsi,%rax,1),%r9
  0x00007fa5c504a13c:   xor    %r9,%r8
  0x00007fa5c504a13f:   test   %r8,%r8
  0x00007fa5c504a142:   jne    Stub::vectorizedMismatch+373 0x00007fa5c504a215
  0x00007fa5c504a148:   add    $0x8,%rax
  0x00007fa5c504a14c:   sub    $0x8,%rdx
  0x00007fa5c504a150:   je     Stub::vectorizedMismatch+389 0x00007fa5c504a225
  0x00007fa5c504a156:   cmp    $0x4,%rdx
  0x00007fa5c504a15a:   jl     Stub::vectorizedMismatch+219 0x00007fa5c504a17b
  0x00007fa5c504a15c:   mov    (%rdi,%rax,1),%r8d
  0x00007fa5c504a160:   xor    (%rsi,%rax,1),%r8d
  0x00007fa5c504a164:   test   %r8d,%r8d
  0x00007fa5c504a167:   jne    Stub::vectorizedMismatch+373 0x00007fa5c504a215
  0x00007fa5c504a16d:   add    $0x4,%rax
  0x00007fa5c504a171:   sub    $0x4,%rdx
  0x00007fa5c504a175:   je     Stub::vectorizedMismatch+389 0x00007fa5c504a225
  0x00007fa5c504a17b:   movzbl (%rdi,%rax,1),%r8d
  0x00007fa5c504a180:   movzbl (%rsi,%rax,1),%r9d
  0x00007fa5c504a185:   xor    %r9d,%r8d
  0x00007fa5c504a188:   test   %r8d,%r8d
  0x00007fa5c504a18b:   jne    Stub::vectorizedMismatch+384 0x00007fa5c504a220
  0x00007fa5c504a191:   dec    %rdx
  0x00007fa5c504a194:   je     Stub::vectorizedMismatch+389 0x00007fa5c504a225
  0x00007fa5c504a19a:   inc    %rax
  0x00007fa5c504a19d:   movzbl (%rdi,%rax,1),%r8d
  0x00007fa5c504a1a2:   movzbl (%rsi,%rax,1),%r9d
  0x00007fa5c504a1a7:   xor    %r9d,%r8d
  0x00007fa5c504a1aa:   test   %r8d,%r8d
  0x00007fa5c504a1ad:   jne    Stub::vectorizedMismatch+384 0x00007fa5c504a220
  0x00007fa5c504a1b3:   dec    %rdx
  0x00007fa5c504a1b6:   je     Stub::vectorizedMismatch+389 0x00007fa5c504a225
  0x00007fa5c504a1bc:   inc    %rax
  0x00007fa5c504a1bf:   movzbl (%rdi,%rax,1),%r8d
  0x00007fa5c504a1c4:   movzbl (%rsi,%rax,1),%r9d
  0x00007fa5c504a1c9:   xor    %r9d,%r8d
  0x00007fa5c504a1cc:   test   %r8d,%r8d
  0x00007fa5c504a1cf:   jne    Stub::vectorizedMismatch+384 0x00007fa5c504a220
  0x00007fa5c504a1d5:   jmpq   Stub::vectorizedMismatch+389 0x00007fa5c504a225
  0x00007fa5c504a1da:   vpcmpeqb %ymm2,%ymm2,%ymm2
  0x00007fa5c504a1de:   vpcmpeqb %ymm1,%ymm0,%ymm0
  0x00007fa5c504a1e2:   vpxor  %ymm2,%ymm0,%ymm0
  0x00007fa5c504a1e6:   vpmovmskb %ymm0,%r8d
  0x00007fa5c504a1ea:   bsf    %r8,%r8
  0x00007fa5c504a1ee:   add    %r8,%rax
  0x00007fa5c504a1f1:   shr    %cl,%rax
  0x00007fa5c504a1f4:   jmpq   Stub::vectorizedMismatch+399 0x00007fa5c504a22f
  0x00007fa5c504a1f9:   vpcmpeqb %xmm2,%xmm2,%xmm2
  0x00007fa5c504a1fd:   vpcmpeqb %xmm1,%xmm0,%xmm0
  0x00007fa5c504a201:   vpxor  %xmm2,%xmm0,%xmm0
  0x00007fa5c504a205:   vpmovmskb %xmm0,%r8d
  0x00007fa5c504a209:   bsf    %r8,%r8
  0x00007fa5c504a20d:   add    %r8,%rax
  0x00007fa5c504a210:   shr    %cl,%rax
  0x00007fa5c504a213:   jmp    Stub::vectorizedMismatch+399 0x00007fa5c504a22f
  0x00007fa5c504a215:   bsf    %r8,%r8
  0x00007fa5c504a219:   shr    $0x3,%r8
  0x00007fa5c504a21d:   add    %r8,%rax
  0x00007fa5c504a220:   shr    %cl,%rax
  0x00007fa5c504a223:   jmp    Stub::vectorizedMismatch+399 0x00007fa5c504a22f
  0x00007fa5c504a225:   movabs $0xffffffffffffffff,%rax
  0x00007fa5c504a22f:   vzeroupper 
  0x00007fa5c504a232:   leaveq 
  0x00007fa5c504a233:   retq   
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_invokeGeneric [0x00007fa5c503e500, 0x00007fa5c503e501] (1 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c503e500:   hlt    
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_invokeBasic [0x00007fa5c503e501, 0x00007fa5c503e556] (85 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c503e501:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c503e50c:   data16 data16 xchg %ax,%ax
  0x00007fa5c503e510:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c503e51b:   data16 data16 xchg %ax,%ax
  0x00007fa5c503e51f:   nop
  0x00007fa5c503e520:   mov    0x8(%rbx),%rdx
  0x00007fa5c503e524:   movzwl 0x2c(%rdx),%edx
  0x00007fa5c503e528:   mov    (%rsp,%rdx,8),%rcx
  0x00007fa5c503e52c:   mov    0x14(%rcx),%ebx
  0x00007fa5c503e52f:   shl    $0x3,%rbx
  0x00007fa5c503e533:   mov    0x28(%rbx),%ebx
  0x00007fa5c503e536:   shl    $0x3,%rbx
  0x00007fa5c503e53a:   mov    0x24(%rbx),%ebx
  0x00007fa5c503e53d:   shl    $0x3,%rbx
  0x00007fa5c503e541:   mov    0x10(%rbx),%rbx
  0x00007fa5c503e545:   test   %rbx,%rbx
  0x00007fa5c503e548:   je     0x00007fa5c503e551
  0x00007fa5c503e54e:   jmpq   *0x50(%rbx)
  0x00007fa5c503e551:   jmpq   0x00007fa5c503fc00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToVirtual [0x00007fa5c503e556, 0x00007fa5c503e59d] (71 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c503e556:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c503e560:   mov    0x8(%rbx),%rdx
  0x00007fa5c503e564:   movzwl 0x2c(%rdx),%edx
  0x00007fa5c503e568:   mov    (%rsp,%rdx,8),%rcx
  0x00007fa5c503e56c:   pop    %rax
  0x00007fa5c503e56d:   pop    %rbx
  0x00007fa5c503e56e:   push   %rax
  0x00007fa5c503e56f:   mov    0x8(%rcx),%r10d
  0x00007fa5c503e573:   movabs $0x800000000,%r11
  0x00007fa5c503e57d:   add    %r11,%r10
  0x00007fa5c503e580:   mov    0x10(%rbx),%r11
  0x00007fa5c503e584:   mov    0x1c0(%r10,%r11,8),%rbx
  0x00007fa5c503e58c:   test   %rbx,%rbx
  0x00007fa5c503e58f:   je     0x00007fa5c503e598
  0x00007fa5c503e595:   jmpq   *0x50(%rbx)
  0x00007fa5c503e598:   jmpq   0x00007fa5c503fc00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToStatic [0x00007fa5c503e59d, 0x00007fa5c503e5bf] (34 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c503e59d:   data16 xchg %ax,%ax
  0x00007fa5c503e5a0:   pop    %rax
  0x00007fa5c503e5a1:   pop    %rbx
  0x00007fa5c503e5a2:   push   %rax
  0x00007fa5c503e5a3:   mov    0x24(%rbx),%ebx
  0x00007fa5c503e5a6:   shl    $0x3,%rbx
  0x00007fa5c503e5aa:   mov    0x10(%rbx),%rbx
  0x00007fa5c503e5ae:   test   %rbx,%rbx
  0x00007fa5c503e5b1:   je     0x00007fa5c503e5ba
  0x00007fa5c503e5b7:   jmpq   *0x50(%rbx)
  0x00007fa5c503e5ba:   jmpq   0x00007fa5c503fc00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToSpecial [0x00007fa5c503e5bf, 0x00007fa5c503e5ee] (47 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c503e5bf:   nop
  0x00007fa5c503e5c0:   mov    0x8(%rbx),%rdx
  0x00007fa5c503e5c4:   movzwl 0x2c(%rdx),%edx
  0x00007fa5c503e5c8:   mov    (%rsp,%rdx,8),%rcx
  0x00007fa5c503e5cc:   pop    %rax
  0x00007fa5c503e5cd:   pop    %rbx
  0x00007fa5c503e5ce:   push   %rax
  0x00007fa5c503e5cf:   cmp    (%rcx),%rax
  0x00007fa5c503e5d2:   mov    0x24(%rbx),%ebx
  0x00007fa5c503e5d5:   shl    $0x3,%rbx
  0x00007fa5c503e5d9:   mov    0x10(%rbx),%rbx
  0x00007fa5c503e5dd:   test   %rbx,%rbx
  0x00007fa5c503e5e0:   je     0x00007fa5c503e5e9
  0x00007fa5c503e5e6:   jmpq   *0x50(%rbx)
  0x00007fa5c503e5e9:   jmpq   0x00007fa5c503fc00
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToInterface [0x00007fa5c503e5ee, 0x00007fa5c503e67d] (143 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c503e5ee:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fa5c503e5f9:   data16 data16 xchg %ax,%ax
  0x00007fa5c503e5fd:   data16 xchg %ax,%ax
  0x00007fa5c503e600:   mov    0x8(%rbx),%rdx
  0x00007fa5c503e604:   movzwl 0x2c(%rdx),%edx
  0x00007fa5c503e608:   mov    (%rsp,%rdx,8),%rcx
  0x00007fa5c503e60c:   pop    %rax
  0x00007fa5c503e60d:   pop    %rbx
  0x00007fa5c503e60e:   push   %rax
  0x00007fa5c503e60f:   mov    0x8(%rcx),%r10d
  0x00007fa5c503e613:   movabs $0x800000000,%r11
  0x00007fa5c503e61d:   add    %r11,%r10
  0x00007fa5c503e620:   mov    0x18(%rbx),%eax
  0x00007fa5c503e623:   shl    $0x3,%rax
  0x00007fa5c503e627:   mov    0x10(%rax),%rax
  0x00007fa5c503e62b:   mov    0x10(%rbx),%rbx
  0x00007fa5c503e62f:   mov    0xa0(%r10),%r11d
  0x00007fa5c503e636:   lea    0x1c0(%r10,%r11,8),%r11
  0x00007fa5c503e63e:   lea    (%r10,%rbx,8),%r10
  0x00007fa5c503e642:   mov    (%r11),%rbx
  0x00007fa5c503e645:   cmp    %rbx,%rax
  0x00007fa5c503e648:   je     0x00007fa5c503e65f
  0x00007fa5c503e64a:   test   %rbx,%rbx
  0x00007fa5c503e64d:   je     0x00007fa5c503e678
  0x00007fa5c503e653:   add    $0x10,%r11
  0x00007fa5c503e657:   mov    (%r11),%rbx
  0x00007fa5c503e65a:   cmp    %rbx,%rax
  0x00007fa5c503e65d:   jne    0x00007fa5c503e64a
  0x00007fa5c503e65f:   mov    0x8(%r11),%r11d
  0x00007fa5c503e663:   mov    (%r10,%r11,1),%rbx
  0x00007fa5c503e667:   test   %rbx,%rbx
  0x00007fa5c503e66a:   je     0x00007fa5c503e673
  0x00007fa5c503e670:   jmpq   *0x50(%rbx)
  0x00007fa5c503e673:   jmpq   0x00007fa5c503fc00
  0x00007fa5c503e678:   jmpq   0x00007fa5c503f900
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MethodHandle::interpreter_entry::_linkToNative [0x00007fa5c503e67d, 0x00007fa5c503e67e] (1 bytes)
--------------------------------------------------------------------------------
  0x00007fa5c503e67d:   hlt    
--------------------------------------------------------------------------------
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding ExceptionBlob 0x00007fa5c508f910
--------------------------------------------------------------------------------
  0x00007fa5c508f980:   push   %rdx
  0x00007fa5c508f981:   sub    $0x8,%rsp
  0x00007fa5c508f985:   mov    %rbp,(%rsp)
  0x00007fa5c508f989:   mov    %rax,0x428(%r15)
  0x00007fa5c508f990:   mov    %rdx,0x430(%r15)
  0x00007fa5c508f997:   vzeroupper 
  0x00007fa5c508f99a:   movabs $0x7fa5c508f997,%r10
  0x00007fa5c508f9a4:   mov    %r10,0x2c8(%r15)
  0x00007fa5c508f9ab:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c508f9b2:   mov    %r15,%rdi
  0x00007fa5c508f9b5:   and    $0xfffffffffffffff0,%rsp
  0x00007fa5c508f9b9:   callq  0x00007fa5ce3db550 = OptoRuntime::handle_exception_C(JavaThread*)
  0x00007fa5c508f9be:   movq   $0x0,0x2c0(%r15)
  0x00007fa5c508f9c9:   movq   $0x0,0x2c8(%r15)
  0x00007fa5c508f9d4:   vzeroupper 
  0x00007fa5c508f9d7:   mov    (%rsp),%rbp
  0x00007fa5c508f9db:   add    $0x8,%rsp
  0x00007fa5c508f9df:   pop    %rdx
  0x00007fa5c508f9e0:   mov    %rax,%r8
  0x00007fa5c508f9e3:   mov    0x428(%r15),%rax
  0x00007fa5c508f9ea:   mov    0x430(%r15),%rdx
  0x00007fa5c508f9f1:   movq   $0x0,0x428(%r15)
  0x00007fa5c508f9fc:   jmpq   *%r8
  0x00007fa5c508f9ff:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 23 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_instance_Java 0x00007fa5c5096010
--------------------------------------------------------------------------------
  0x00007fa5c5096080:   sub    $0x8,%rsp
  0x00007fa5c5096087:   mov    %rbp,(%rsp)
  0x00007fa5c509608b:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5096092:   mov    %rsi,%rdi
  0x00007fa5c5096095:   mov    %r15,%rsi
  0x00007fa5c5096098:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c50960a0:   movabs $0x7fa5ce3d9020,%r10
  0x00007fa5c50960aa:   callq  *%r10
  0x00007fa5c50960ad:   mov    %r12,0x2c0(%r15)
  0x00007fa5c50960b4:   mov    %r12,0x2c8(%r15)
  0x00007fa5c50960bb:   mov    0x318(%r15),%rax
  0x00007fa5c50960c2:   mov    %r12,0x318(%r15)
  0x00007fa5c50960c9:   cmp    0x8(%r15),%r12
  0x00007fa5c50960cd:   jne    0x00007fa5c50960d1
  0x00007fa5c50960cf:   pop    %rbp
  0x00007fa5c50960d0:   retq   
  0x00007fa5c50960d1:   xor    %ebx,%ebx
  0x00007fa5c50960d3:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c50960dd:   pop    %rbp
  0x00007fa5c50960de:   jmpq   *%r10
  0x00007fa5c50960e1:   hlt    
  0x00007fa5c50960e2:   hlt    
  0x00007fa5c50960e3:   hlt    
  0x00007fa5c50960e4:   hlt    
  0x00007fa5c50960e5:   hlt    
  0x00007fa5c50960e6:   hlt    
  0x00007fa5c50960e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_array_Java 0x00007fa5c5097610
--------------------------------------------------------------------------------
  0x00007fa5c5097680:   sub    $0x8,%rsp
  0x00007fa5c5097687:   mov    %rbp,(%rsp)
  0x00007fa5c509768b:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5097692:   mov    %rsi,%rdi
  0x00007fa5c5097695:   mov    %edx,%esi
  0x00007fa5c5097697:   mov    %r15,%rdx
  0x00007fa5c509769a:   nopw   0x0(%rax,%rax,1)
  0x00007fa5c50976a0:   movabs $0x7fa5ce3d9240,%r10
  0x00007fa5c50976aa:   callq  *%r10
  0x00007fa5c50976ad:   mov    %r12,0x2c0(%r15)
  0x00007fa5c50976b4:   mov    %r12,0x2c8(%r15)
  0x00007fa5c50976bb:   mov    0x318(%r15),%rax
  0x00007fa5c50976c2:   mov    %r12,0x318(%r15)
  0x00007fa5c50976c9:   cmp    0x8(%r15),%r12
  0x00007fa5c50976cd:   jne    0x00007fa5c50976d1
  0x00007fa5c50976cf:   pop    %rbp
  0x00007fa5c50976d0:   retq   
  0x00007fa5c50976d1:   xor    %ebx,%ebx
  0x00007fa5c50976d3:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c50976dd:   pop    %rbp
  0x00007fa5c50976de:   jmpq   *%r10
  0x00007fa5c50976e1:   hlt    
  0x00007fa5c50976e2:   hlt    
  0x00007fa5c50976e3:   hlt    
  0x00007fa5c50976e4:   hlt    
  0x00007fa5c50976e5:   hlt    
  0x00007fa5c50976e6:   hlt    
  0x00007fa5c50976e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _new_array_nozero_Java 0x00007fa5c509af10
--------------------------------------------------------------------------------
  0x00007fa5c509af80:   sub    $0x8,%rsp
  0x00007fa5c509af87:   mov    %rbp,(%rsp)
  0x00007fa5c509af8b:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c509af92:   mov    %rsi,%rdi
  0x00007fa5c509af95:   mov    %edx,%esi
  0x00007fa5c509af97:   mov    %r15,%rdx
  0x00007fa5c509af9a:   nopw   0x0(%rax,%rax,1)
  0x00007fa5c509afa0:   movabs $0x7fa5ce3da110,%r10
  0x00007fa5c509afaa:   callq  *%r10
  0x00007fa5c509afad:   mov    %r12,0x2c0(%r15)
  0x00007fa5c509afb4:   mov    %r12,0x2c8(%r15)
  0x00007fa5c509afbb:   mov    0x318(%r15),%rax
  0x00007fa5c509afc2:   mov    %r12,0x318(%r15)
  0x00007fa5c509afc9:   cmp    0x8(%r15),%r12
  0x00007fa5c509afcd:   jne    0x00007fa5c509afd1
  0x00007fa5c509afcf:   pop    %rbp
  0x00007fa5c509afd0:   retq   
  0x00007fa5c509afd1:   xor    %ebx,%ebx
  0x00007fa5c509afd3:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c509afdd:   pop    %rbp
  0x00007fa5c509afde:   jmpq   *%r10
  0x00007fa5c509afe1:   hlt    
  0x00007fa5c509afe2:   hlt    
  0x00007fa5c509afe3:   hlt    
  0x00007fa5c509afe4:   hlt    
  0x00007fa5c509afe5:   hlt    
  0x00007fa5c509afe6:   hlt    
  0x00007fa5c509afe7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray2_Java 0x00007fa5c509b210
--------------------------------------------------------------------------------
  0x00007fa5c509b280:   sub    $0x8,%rsp
  0x00007fa5c509b287:   mov    %rbp,(%rsp)
  0x00007fa5c509b28b:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c509b292:   mov    %rsi,%rdi
  0x00007fa5c509b295:   mov    %edx,%esi
  0x00007fa5c509b297:   mov    %ecx,%edx
  0x00007fa5c509b299:   mov    %r15,%rcx
  0x00007fa5c509b29c:   nopl   0x0(%rax)
  0x00007fa5c509b2a0:   movabs $0x7fa5ce3d93f0,%r10
  0x00007fa5c509b2aa:   callq  *%r10
  0x00007fa5c509b2ad:   mov    %r12,0x2c0(%r15)
  0x00007fa5c509b2b4:   mov    %r12,0x2c8(%r15)
  0x00007fa5c509b2bb:   mov    0x318(%r15),%rax
  0x00007fa5c509b2c2:   mov    %r12,0x318(%r15)
  0x00007fa5c509b2c9:   cmp    0x8(%r15),%r12
  0x00007fa5c509b2cd:   jne    0x00007fa5c509b2d1
  0x00007fa5c509b2cf:   pop    %rbp
  0x00007fa5c509b2d0:   retq   
  0x00007fa5c509b2d1:   xor    %ebx,%ebx
  0x00007fa5c509b2d3:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c509b2dd:   pop    %rbp
  0x00007fa5c509b2de:   jmpq   *%r10
  0x00007fa5c509b2e1:   hlt    
  0x00007fa5c509b2e2:   hlt    
  0x00007fa5c509b2e3:   hlt    
  0x00007fa5c509b2e4:   hlt    
  0x00007fa5c509b2e5:   hlt    
  0x00007fa5c509b2e6:   hlt    
  0x00007fa5c509b2e7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray3_Java 0x00007fa5c5093e10
--------------------------------------------------------------------------------
  0x00007fa5c5093e80:   sub    $0x8,%rsp
  0x00007fa5c5093e87:   mov    %rbp,(%rsp)
  0x00007fa5c5093e8b:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5093e92:   mov    %rsi,%rdi
  0x00007fa5c5093e95:   mov    %edx,%esi
  0x00007fa5c5093e97:   mov    %ecx,%edx
  0x00007fa5c5093e99:   mov    %r8d,%ecx
  0x00007fa5c5093e9c:   mov    %r15,%r8
  0x00007fa5c5093e9f:   nop
  0x00007fa5c5093ea0:   movabs $0x7fa5ce3d9570,%r10
  0x00007fa5c5093eaa:   callq  *%r10
  0x00007fa5c5093ead:   mov    %r12,0x2c0(%r15)
  0x00007fa5c5093eb4:   mov    %r12,0x2c8(%r15)
  0x00007fa5c5093ebb:   mov    0x318(%r15),%rax
  0x00007fa5c5093ec2:   mov    %r12,0x318(%r15)
  0x00007fa5c5093ec9:   cmp    0x8(%r15),%r12
  0x00007fa5c5093ecd:   jne    0x00007fa5c5093ed1
  0x00007fa5c5093ecf:   pop    %rbp
  0x00007fa5c5093ed0:   retq   
  0x00007fa5c5093ed1:   xor    %ebx,%ebx
  0x00007fa5c5093ed3:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c5093edd:   pop    %rbp
  0x00007fa5c5093ede:   jmpq   *%r10
  0x00007fa5c5093ee1:   hlt    
  0x00007fa5c5093ee2:   hlt    
  0x00007fa5c5093ee3:   hlt    
  0x00007fa5c5093ee4:   hlt    
  0x00007fa5c5093ee5:   hlt    
  0x00007fa5c5093ee6:   hlt    
  0x00007fa5c5093ee7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray4_Java 0x00007fa5c509e790
--------------------------------------------------------------------------------
  0x00007fa5c509e800:   sub    $0x8,%rsp
  0x00007fa5c509e807:   mov    %rbp,(%rsp)
  0x00007fa5c509e80b:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c509e812:   mov    %rsi,%rdi
  0x00007fa5c509e815:   mov    %edx,%esi
  0x00007fa5c509e817:   mov    %ecx,%edx
  0x00007fa5c509e819:   mov    %r8d,%ecx
  0x00007fa5c509e81c:   mov    %r9d,%r8d
  0x00007fa5c509e81f:   mov    %r15,%r9
  0x00007fa5c509e822:   movabs $0x7fa5ce3d96f0,%r10
  0x00007fa5c509e82c:   callq  *%r10
  0x00007fa5c509e82f:   mov    %r12,0x2c0(%r15)
  0x00007fa5c509e836:   mov    %r12,0x2c8(%r15)
  0x00007fa5c509e83d:   mov    0x318(%r15),%rax
  0x00007fa5c509e844:   mov    %r12,0x318(%r15)
  0x00007fa5c509e84b:   cmp    0x8(%r15),%r12
  0x00007fa5c509e84f:   jne    0x00007fa5c509e853
  0x00007fa5c509e851:   pop    %rbp
  0x00007fa5c509e852:   retq   
  0x00007fa5c509e853:   xor    %ebx,%ebx
  0x00007fa5c509e855:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c509e85f:   pop    %rbp
  0x00007fa5c509e860:   jmpq   *%r10
  0x00007fa5c509e863:   hlt    
  0x00007fa5c509e864:   hlt    
  0x00007fa5c509e865:   hlt    
  0x00007fa5c509e866:   hlt    
  0x00007fa5c509e867:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 47 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarray5_Java 0x00007fa5c5095810
--------------------------------------------------------------------------------
  0x00007fa5c5095880:   sub    $0x18,%rsp
  0x00007fa5c5095887:   mov    %rbp,0x10(%rsp)
  0x00007fa5c509588c:   mov    %edi,%r10d
  0x00007fa5c509588f:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c5095896:   mov    %rsi,%rdi
  0x00007fa5c5095899:   mov    %edx,%esi
  0x00007fa5c509589b:   mov    %ecx,%edx
  0x00007fa5c509589d:   mov    %r8d,%ecx
  0x00007fa5c50958a0:   mov    %r9d,%r8d
  0x00007fa5c50958a3:   mov    %r10d,%r9d
  0x00007fa5c50958a6:   mov    %r15,(%rsp)
  0x00007fa5c50958aa:   movabs $0x7fa5ce3d9880,%r10
  0x00007fa5c50958b4:   callq  *%r10
  0x00007fa5c50958b7:   mov    %r12,0x2c0(%r15)
  0x00007fa5c50958be:   mov    %r12,0x2c8(%r15)
  0x00007fa5c50958c5:   mov    0x318(%r15),%rax
  0x00007fa5c50958cc:   mov    %r12,0x318(%r15)
  0x00007fa5c50958d3:   cmp    0x8(%r15),%r12
  0x00007fa5c50958d7:   jne    0x00007fa5c50958df
  0x00007fa5c50958d9:   add    $0x10,%rsp
  0x00007fa5c50958dd:   pop    %rbp
  0x00007fa5c50958de:   retq   
  0x00007fa5c50958df:   xor    %ebx,%ebx
  0x00007fa5c50958e1:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c50958eb:   add    $0x10,%rsp
  0x00007fa5c50958ef:   pop    %rbp
  0x00007fa5c50958f0:   jmpq   *%r10
  0x00007fa5c50958f3:   hlt    
  0x00007fa5c50958f4:   hlt    
  0x00007fa5c50958f5:   hlt    
  0x00007fa5c50958f6:   hlt    
  0x00007fa5c50958f7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 55 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _multianewarrayN_Java 0x00007fa5c509cd10
--------------------------------------------------------------------------------
  0x00007fa5c509cd80:   sub    $0x8,%rsp
  0x00007fa5c509cd87:   mov    %rbp,(%rsp)
  0x00007fa5c509cd8b:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c509cd92:   mov    %rsi,%rdi
  0x00007fa5c509cd95:   mov    %rdx,%rsi
  0x00007fa5c509cd98:   mov    %r15,%rdx
  0x00007fa5c509cd9b:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c509cda0:   movabs $0x7fa5ce3d9a20,%r10
  0x00007fa5c509cdaa:   callq  *%r10
  0x00007fa5c509cdad:   mov    %r12,0x2c0(%r15)
  0x00007fa5c509cdb4:   mov    %r12,0x2c8(%r15)
  0x00007fa5c509cdbb:   mov    0x318(%r15),%rax
  0x00007fa5c509cdc2:   mov    %r12,0x318(%r15)
  0x00007fa5c509cdc9:   cmp    0x8(%r15),%r12
  0x00007fa5c509cdcd:   jne    0x00007fa5c509cdd1
  0x00007fa5c509cdcf:   pop    %rbp
  0x00007fa5c509cdd0:   retq   
  0x00007fa5c509cdd1:   xor    %ebx,%ebx
  0x00007fa5c509cdd3:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c509cddd:   pop    %rbp
  0x00007fa5c509cdde:   jmpq   *%r10
  0x00007fa5c509cde1:   hlt    
  0x00007fa5c509cde2:   hlt    
  0x00007fa5c509cde3:   hlt    
  0x00007fa5c509cde4:   hlt    
  0x00007fa5c509cde5:   hlt    
  0x00007fa5c509cde6:   hlt    
  0x00007fa5c509cde7:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _complete_monitor_locking_Java 0x00007fa5c50a0d10
--------------------------------------------------------------------------------
  0x00007fa5c50a0d80:   sub    $0x8,%rsp
  0x00007fa5c50a0d87:   mov    %rbp,(%rsp)
  0x00007fa5c50a0d8b:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c50a0d92:   mov    %rsi,%rdi
  0x00007fa5c50a0d95:   mov    %rdx,%rsi
  0x00007fa5c50a0d98:   mov    %r15,%rdx
  0x00007fa5c50a0d9b:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c50a0da0:   movabs $0x7fa5ce3ec470,%r10
  0x00007fa5c50a0daa:   callq  *%r10
  0x00007fa5c50a0dad:   mov    %r12,0x2c0(%r15)
  0x00007fa5c50a0db4:   mov    %r12,0x2c8(%r15)
  0x00007fa5c50a0dbb:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c50a0dc0:   cmp    0x8(%r15),%r12
  0x00007fa5c50a0dc4:   jne    0x00007fa5c50a0dc8
  0x00007fa5c50a0dc6:   pop    %rbp
  0x00007fa5c50a0dc7:   retq   
  0x00007fa5c50a0dc8:   xor    %ebx,%ebx
  0x00007fa5c50a0dca:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c50a0dd4:   pop    %rbp
  0x00007fa5c50a0dd5:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _monitor_notify_Java 0x00007fa5c509f810
--------------------------------------------------------------------------------
  0x00007fa5c509f880:   sub    $0x8,%rsp
  0x00007fa5c509f887:   mov    %rbp,(%rsp)
  0x00007fa5c509f88b:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c509f892:   mov    %rsi,%rdi
  0x00007fa5c509f895:   mov    %r15,%rsi
  0x00007fa5c509f898:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c509f8a0:   movabs $0x7fa5ce3d7360,%r10
  0x00007fa5c509f8aa:   callq  *%r10
  0x00007fa5c509f8ad:   mov    %r12,0x2c0(%r15)
  0x00007fa5c509f8b4:   mov    %r12,0x2c8(%r15)
  0x00007fa5c509f8bb:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c509f8c0:   cmp    0x8(%r15),%r12
  0x00007fa5c509f8c4:   jne    0x00007fa5c509f8c8
  0x00007fa5c509f8c6:   pop    %rbp
  0x00007fa5c509f8c7:   retq   
  0x00007fa5c509f8c8:   xor    %ebx,%ebx
  0x00007fa5c509f8ca:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c509f8d4:   pop    %rbp
  0x00007fa5c509f8d5:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _monitor_notifyAll_Java 0x00007fa5c50a8390
--------------------------------------------------------------------------------
  0x00007fa5c50a8400:   sub    $0x8,%rsp
  0x00007fa5c50a8407:   mov    %rbp,(%rsp)
  0x00007fa5c50a840b:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c50a8412:   mov    %rsi,%rdi
  0x00007fa5c50a8415:   mov    %r15,%rsi
  0x00007fa5c50a8418:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c50a8420:   movabs $0x7fa5ce3d7160,%r10
  0x00007fa5c50a842a:   callq  *%r10
  0x00007fa5c50a842d:   mov    %r12,0x2c0(%r15)
  0x00007fa5c50a8434:   mov    %r12,0x2c8(%r15)
  0x00007fa5c50a843b:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c50a8440:   cmp    0x8(%r15),%r12
  0x00007fa5c50a8444:   jne    0x00007fa5c50a8448
  0x00007fa5c50a8446:   pop    %rbp
  0x00007fa5c50a8447:   retq   
  0x00007fa5c50a8448:   xor    %ebx,%ebx
  0x00007fa5c50a844a:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c50a8454:   pop    %rbp
  0x00007fa5c50a8455:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _rethrow_Java 0x00007fa5c50a8c90
--------------------------------------------------------------------------------
  0x00007fa5c50a8d00:   sub    $0x18,%rsp
  0x00007fa5c50a8d07:   mov    %rbp,0x10(%rsp)
  0x00007fa5c50a8d0c:   rex.W pushq 0x18(%rsp)
  0x00007fa5c50a8d11:   rex.W popq (%rsp)
  0x00007fa5c50a8d15:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c50a8d1c:   mov    %rsi,%rdi
  0x00007fa5c50a8d1f:   mov    %r15,%rsi
  0x00007fa5c50a8d22:   mov    (%rsp),%rdx
  0x00007fa5c50a8d26:   movabs $0x7fa5ce3d6da0,%r10
  0x00007fa5c50a8d30:   callq  *%r10
  0x00007fa5c50a8d33:   mov    %rax,%r10
  0x00007fa5c50a8d36:   mov    %r12,0x2c0(%r15)
  0x00007fa5c50a8d3d:   mov    %r12,0x2c8(%r15)
  0x00007fa5c50a8d44:   mov    0x318(%r15),%rax
  0x00007fa5c50a8d4b:   mov    %r12,0x318(%r15)
  0x00007fa5c50a8d52:   cmp    0x8(%r15),%r12
  0x00007fa5c50a8d56:   jne    0x00007fa5c50a8d61
  0x00007fa5c50a8d58:   add    $0x10,%rsp
  0x00007fa5c50a8d5c:   pop    %rbp
  0x00007fa5c50a8d5d:   pop    %rdx
  0x00007fa5c50a8d5e:   jmpq   *%r10
  0x00007fa5c50a8d61:   xor    %ebx,%ebx
  0x00007fa5c50a8d63:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c50a8d6d:   add    $0x10,%rsp
  0x00007fa5c50a8d71:   pop    %rbp
  0x00007fa5c50a8d72:   jmpq   *%r10
  0x00007fa5c50a8d75:   hlt    
  0x00007fa5c50a8d76:   hlt    
  0x00007fa5c50a8d77:   hlt    
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 51 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _slow_arraycopy_Java 0x00007fa5c50a8f90
--------------------------------------------------------------------------------
  0x00007fa5c50a9000:   sub    $0x8,%rsp
  0x00007fa5c50a9007:   mov    %rbp,(%rsp)
  0x00007fa5c50a900b:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c50a9012:   mov    %rsi,%rdi
  0x00007fa5c50a9015:   mov    %edx,%esi
  0x00007fa5c50a9017:   mov    %rcx,%rdx
  0x00007fa5c50a901a:   mov    %r8d,%ecx
  0x00007fa5c50a901d:   mov    %r9d,%r8d
  0x00007fa5c50a9020:   mov    %r15,%r9
  0x00007fa5c50a9023:   movabs $0x7fa5ce3ebfa0,%r10
  0x00007fa5c50a902d:   callq  *%r10
  0x00007fa5c50a9030:   mov    %r12,0x2c0(%r15)
  0x00007fa5c50a9037:   mov    %r12,0x2c8(%r15)
  0x00007fa5c50a903e:   xchg   %ax,%ax
  0x00007fa5c50a9040:   cmp    0x8(%r15),%r12
  0x00007fa5c50a9044:   jne    0x00007fa5c50a9048
  0x00007fa5c50a9046:   pop    %rbp
  0x00007fa5c50a9047:   retq   
  0x00007fa5c50a9048:   xor    %ebx,%ebx
  0x00007fa5c50a904a:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c50a9054:   pop    %rbp
  0x00007fa5c50a9055:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 48 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- - - [BEGIN] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Decoding RuntimeStub - _register_finalizer_Java 0x00007fa5c50a9790
--------------------------------------------------------------------------------
  0x00007fa5c50a9800:   sub    $0x8,%rsp
  0x00007fa5c50a9807:   mov    %rbp,(%rsp)
  0x00007fa5c50a980b:   mov    %rsp,0x2c0(%r15)
  0x00007fa5c50a9812:   mov    %rsi,%rdi
  0x00007fa5c50a9815:   mov    %r15,%rsi
  0x00007fa5c50a9818:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c50a9820:   movabs $0x7fa5ce3d7090,%r10
  0x00007fa5c50a982a:   callq  *%r10
  0x00007fa5c50a982d:   mov    %r12,0x2c0(%r15)
  0x00007fa5c50a9834:   mov    %r12,0x2c8(%r15)
  0x00007fa5c50a983b:   nopl   0x0(%rax,%rax,1)
  0x00007fa5c50a9840:   cmp    0x8(%r15),%r12
  0x00007fa5c50a9844:   jne    0x00007fa5c50a9848
  0x00007fa5c50a9846:   pop    %rbp
  0x00007fa5c50a9847:   retq   
  0x00007fa5c50a9848:   xor    %ebx,%ebx
  0x00007fa5c50a984a:   movabs $0x7fa5c5000c00,%r10
  0x00007fa5c50a9854:   pop    %rbp
  0x00007fa5c50a9855:   jmpq   *%r10
--------------------------------------------------------------------------------
- - - [OOP MAPS]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ImmutableOopMapSet contains 1 OopMaps

ImmutableOopMap {} pc offsets: 45 
- - - [END] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

[Time]  32 ms  [Res] 20000

 Performance counter stats for 'java -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:UseAVX=2 -XX:+PrintStubCode -cp . Base64Micro 8193' (5 runs):

          1,175.95 msec task-clock                #    1.840 CPUs utilized            ( +-  0.61% )
             2,109      context-switches          #    0.002 M/sec                    ( +-  3.66% )
               244      cpu-migrations            #    0.208 K/sec                    ( +-  6.73% )
            44,060      page-faults               #    0.037 M/sec                    ( +-  0.26% )
    3,05,54,00,354      cycles                    #    2.598 GHz                      ( +-  0.34% )
    5,04,37,00,188      instructions              #    1.65  insn per cycle           ( +-  0.27% )
      78,96,22,231      branches                  #  671.477 M/sec                    ( +-  0.33% )
       2,14,53,153      branch-misses             #    2.72% of all branches          ( +-  0.77% )

           0.63893 +- 0.00234 seconds time elapsed  ( +-  0.37% )

