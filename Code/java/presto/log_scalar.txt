CompileCommand: print test.ReadFilter_vector bool print = true
WARNING: Using incubator modules: jdk.incubator.vector

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     293  310 %           test::ReadFilter_vector @ 39 (163 bytes)
 total in heap  [0x00007fedd10ddc10,0x00007fedd10df8d0] = 7360
 relocation     [0x00007fedd10ddd60,0x00007fedd10dde20] = 192
 constants      [0x00007fedd10dde20,0x00007fedd10dde40] = 32
 main code      [0x00007fedd10dde40,0x00007fedd10deb80] = 3392
 stub code      [0x00007fedd10deb80,0x00007fedd10debb8] = 56
 oops           [0x00007fedd10debb8,0x00007fedd10dec10] = 88
 metadata       [0x00007fedd10dec10,0x00007fedd10ded60] = 336
 scopes data    [0x00007fedd10ded60,0x00007fedd10df540] = 2016
 scopes pcs     [0x00007fedd10df540,0x00007fedd10df7a0] = 608
 dependencies   [0x00007fedd10df7a0,0x00007fedd10df7d0] = 48
 handler table  [0x00007fedd10df7d0,0x00007fedd10df878] = 168
 nul chk table  [0x00007fedd10df878,0x00007fedd10df8d0] = 88

[Disassembly]
--------------------------------------------------------------------------------

[Constant Pool]
             Address          hex4                    hex8      
  0x00007fedd10dde20:   0x00000000      0x3ca0000000000000      
  0x00007fedd10dde24:   0x3ca00000                              
  0x00007fedd10dde28:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007fedd10dde2c:   0xf4f4f4f4                              
  0x00007fedd10dde30:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007fedd10dde34:   0xf4f4f4f4                              
  0x00007fedd10dde38:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007fedd10dde3c:   0xf4f4f4f4                              

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fed88401c70} 'ReadFilter_vector' '()V' in 'test'
  0x00007fedd10dde40:   callq  0x00007fede1d8df80           ;   {no_reloc}
  0x00007fedd10dde45:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fedd10dde50:   mov    %eax,-0x14000(%rsp)
  0x00007fedd10dde57:   push   %rbp
  0x00007fedd10dde58:   sub    $0x110,%rsp
  0x00007fedd10dde5f:   mov    0x30(%rsi),%rbp
  0x00007fedd10dde63:   mov    0x38(%rsi),%r11d
  0x00007fedd10dde67:   mov    %r11d,0x20(%rsp)
  0x00007fedd10dde6c:   mov    0x18(%rsi),%ebx
  0x00007fedd10dde6f:   mov    0x28(%rsi),%r10d
  0x00007fedd10dde73:   mov    %r10d,0x30(%rsp)
  0x00007fedd10dde78:   mov    0x20(%rsi),%r11d
  0x00007fedd10dde7c:   mov    %r11d,0x34(%rsp)
  0x00007fedd10dde81:   mov    %rsi,%rdi
  0x00007fedd10dde84:   vzeroupper 
  0x00007fedd10dde87:   movabs $0x7fede1e49fd0,%r10
  0x00007fedd10dde91:   callq  *%r10
  0x00007fedd10dde94:   test   %rbp,%rbp
  0x00007fedd10dde97:   je     0x00007fedd10de9d8
  0x00007fedd10dde9d:   mov    %rbp,%r8
  0x00007fedd10ddea0:   mov    0x8(%rbp),%r11d
  0x00007fedd10ddea4:   movabs $0x8010460d8,%rax            ;   {metadata('jdk/incubator/vector/VectorSpecies')}
  0x00007fedd10ddeae:   movabs $0x800000000,%rsi
  0x00007fedd10ddeb8:   add    %r11,%rsi
  0x00007fedd10ddebb:   mov    0x20(%rsi),%r10
  0x00007fedd10ddebf:   nop
  0x00007fedd10ddec0:   cmp    %rax,%r10
  0x00007fedd10ddec3:   jne    0x00007fedd10de5de
  0x00007fedd10ddec9:   mov    0x8(%r8),%r10d
  0x00007fedd10ddecd:   movabs $0x8010464c0,%r11            ;   {metadata('jdk/incubator/vector/AbstractSpecies')}
  0x00007fedd10dded7:   movabs $0x800000000,%r9
  0x00007fedd10ddee1:   add    %r10,%r9
  0x00007fedd10ddee4:   mov    0x40(%r9),%r10
  0x00007fedd10ddee8:   cmp    %r11,%r10
  0x00007fedd10ddeeb:   jne    0x00007fedd10de9db
  0x00007fedd10ddef1:   mov    %r8,%r10
  0x00007fedd10ddef4:   mov    0x8(%r10),%r11d
  0x00007fedd10ddef8:   nopl   0x0(%rax,%rax,1)
  0x00007fedd10ddf00:   cmp    $0x104c550,%r11d             ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007fedd10ddf07:   jne    0x00007fedd10de9db
  0x00007fedd10ddf0d:   mov    %r8,0x28(%rsp)
  0x00007fedd10ddf12:   mov    %r10,0x38(%rsp)
  0x00007fedd10ddf17:   mov    %r10,0x40(%rsp)
  0x00007fedd10ddf1c:   nopl   0x0(%rax)
  0x00007fedd10ddf20:   jmpq   0x00007fedd10de415
  0x00007fedd10ddf25:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007fedd10ddf2f:   mov    0x9c(%r10),%r10d
  0x00007fedd10ddf36:   mov    %r10d,0x48(%rsp)
  0x00007fedd10ddf3b:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007fedd10ddf45:   vmovsd 0x88(%r10),%xmm0
  0x00007fedd10ddf4e:   vmovsd 0x90(%r10),%xmm1
  0x00007fedd10ddf57:   mov    0x78(%r10),%r8d
  0x00007fedd10ddf5b:   mov    %r8d,0x4c(%rsp)
  0x00007fedd10ddf60:   mov    0xc(%r12,%r11,8),%r8d        ; implicit exception: dispatches to 0x00007fedd10dea84
  0x00007fedd10ddf65:   mov    %r8d,%ebp
  0x00007fedd10ddf68:   add    $0xfffffff9,%ebp
  0x00007fedd10ddf6b:   test   %ebp,%ebp
  0x00007fedd10ddf6d:   jl     0x00007fedd10de8bc
  0x00007fedd10ddf73:   cmp    $0x7,%r8d
  0x00007fedd10ddf77:   je     0x00007fedd10de7ec
  0x00007fedd10ddf7d:   mov    0xf8(%r15),%rbp
  0x00007fedd10ddf84:   vmovdqu32 0x10(%r12,%r11,8),%zmm3
  0x00007fedd10ddf8f:   mov    %rbp,%r10
  0x00007fedd10ddf92:   add    $0x18,%r10
  0x00007fedd10ddf96:   vbroadcastsd %xmm0,%zmm0
  0x00007fedd10ddf9c:   vcmpge_oqpd %zmm0,%zmm3,%k7
  0x00007fedd10ddfa3:   kmovq  %k7,0x50(%rsp)
  0x00007fedd10ddfaa:   vbroadcastsd %xmm1,%zmm0
  0x00007fedd10ddfb0:   vcmple_oqpd %zmm0,%zmm3,%k7
  0x00007fedd10ddfb7:   kmovq  %k7,0x58(%rsp)
  0x00007fedd10ddfbe:   kmovq  0x50(%rsp),%k7
  0x00007fedd10ddfc5:   vpmovm2b %k7,%xmm2
  0x00007fedd10ddfcb:   vpabsb %xmm2,%xmm2
  0x00007fedd10ddfd0:   kmovq  0x58(%rsp),%k7
  0x00007fedd10ddfd7:   vpmovm2b %k7,%xmm1
  0x00007fedd10ddfdd:   vpabsb %xmm1,%xmm1
  0x00007fedd10ddfe2:   cmp    0x108(%r15),%r10
  0x00007fedd10ddfe9:   jae    0x00007fedd10de624
  0x00007fedd10ddfef:   mov    %r10,0xf8(%r15)
  0x00007fedd10ddff6:   prefetchw 0xc0(%r10)
  0x00007fedd10ddffe:   movq   $0x1,0x0(%rbp)
  0x00007fedd10de006:   prefetchw 0x100(%r10)
  0x00007fedd10de00e:   movl   $0x1ab8,0x8(%rbp)            ;   {metadata({type array bool})}
  0x00007fedd10de015:   prefetchw 0x140(%r10)
  0x00007fedd10de01d:   movl   $0x8,0xc(%rbp)
  0x00007fedd10de024:   prefetchw 0x180(%r10)
  0x00007fedd10de02c:   mov    %rbp,%r10
  0x00007fedd10de02f:   add    $0x10,%r10
  0x00007fedd10de033:   vpxor  %ymm0,%ymm0,%ymm0
  0x00007fedd10de037:   vmovq  %xmm0,(%r10)
  0x00007fedd10de03c:   mov    0xf8(%r15),%rax
  0x00007fedd10de043:   mov    %rax,%r10
  0x00007fedd10de046:   add    $0x10,%r10
  0x00007fedd10de04a:   kmovq  0x58(%rsp),%k6
  0x00007fedd10de051:   kmovq  0x50(%rsp),%k5
  0x00007fedd10de058:   kandb  %k6,%k5,%k7
  0x00007fedd10de05c:   kmovq  %k7,0x50(%rsp)
  0x00007fedd10de063:   vpmovm2b %k7,%xmm0
  0x00007fedd10de069:   vpabsb %xmm0,%xmm0
  0x00007fedd10de06e:   vmovq  %xmm0,0x10(%rbp)
  0x00007fedd10de073:   nopw   0x0(%rax,%rax,1)
  0x00007fedd10de07c:   data16 data16 xchg %ax,%ax
  0x00007fedd10de080:   cmp    0x108(%r15),%r10
  0x00007fedd10de087:   jae    0x00007fedd10de66c
  0x00007fedd10de08d:   mov    %r10,0xf8(%r15)
  0x00007fedd10de094:   prefetchw 0xc0(%r10)
  0x00007fedd10de09c:   movq   $0x1,(%rax)
  0x00007fedd10de0a3:   movl   $0x104ac38,0x8(%rax)         ;   {metadata('jdk/incubator/vector/Double512Vector$Double512Mask')}
  0x00007fedd10de0aa:   mov    %rbp,%r10
  0x00007fedd10de0ad:   shr    $0x3,%r10
  0x00007fedd10de0b1:   mov    %r10d,0xc(%rax)
  0x00007fedd10de0b5:   mov    %rax,0x58(%rsp)
  0x00007fedd10de0ba:   mov    0xf8(%r15),%rbp
  0x00007fedd10de0c1:   mov    %rbp,%r10
  0x00007fedd10de0c4:   add    $0x50,%r10
  0x00007fedd10de0c8:   kmovq  0x50(%rsp),%k7
  0x00007fedd10de0cf:   vcompresspd %zmm3,%zmm2{%k7}{z}
  0x00007fedd10de0d5:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007fedd10de0e0:   cmp    0x108(%r15),%r10
  0x00007fedd10de0e7:   jae    0x00007fedd10de6ab
  0x00007fedd10de0ed:   mov    %r10,0xf8(%r15)
  0x00007fedd10de0f4:   prefetchw 0xc0(%r10)
  0x00007fedd10de0fc:   movq   $0x1,0x0(%rbp)
  0x00007fedd10de104:   prefetchw 0x100(%r10)
  0x00007fedd10de10c:   movl   $0x29f8,0x8(%rbp)            ;   {metadata({type array long})}
  0x00007fedd10de113:   prefetchw 0x140(%r10)
  0x00007fedd10de11b:   movl   $0x8,0xc(%rbp)
  0x00007fedd10de122:   prefetchw 0x180(%r10)
  0x00007fedd10de12a:   mov    %rbp,%r10
  0x00007fedd10de12d:   add    $0x10,%r10
  0x00007fedd10de131:   vpxor  %ymm1,%ymm1,%ymm1
  0x00007fedd10de135:   vmovdqu %ymm1,(%r10)
  0x00007fedd10de13a:   vmovdqu %ymm1,0x20(%r10)
  0x00007fedd10de140:   mov    0xf8(%r15),%rdi
  0x00007fedd10de147:   mov    %rdi,%r10
  0x00007fedd10de14a:   add    $0x10,%r10
  0x00007fedd10de14e:   vmovdqu64 %zmm2,%zmm1
  0x00007fedd10de154:   vmovdqu32 %zmm1,0x10(%rbp)
  0x00007fedd10de15e:   xchg   %ax,%ax
  0x00007fedd10de160:   cmp    0x108(%r15),%r10
  0x00007fedd10de167:   jae    0x00007fedd10de6e6
  0x00007fedd10de16d:   mov    %r10,0xf8(%r15)
  0x00007fedd10de174:   prefetchw 0xc0(%r10)
  0x00007fedd10de17c:   movq   $0x1,(%rdi)
  0x00007fedd10de183:   movl   $0x105e640,0x8(%rdi)         ;   {metadata('jdk/incubator/vector/Long512Vector')}
  0x00007fedd10de18a:   mov    %rbp,%r11
  0x00007fedd10de18d:   shr    $0x3,%r11
  0x00007fedd10de191:   mov    %r11d,0xc(%rdi)
  0x00007fedd10de195:   mov    0x4c(%rsp),%r10d
  0x00007fedd10de19a:   nopw   0x0(%rax,%rax,1)
  0x00007fedd10de1a0:   mov    0xc(%r12,%r10,8),%ebp        ; implicit exception: dispatches to 0x00007fedd10dea94
  0x00007fedd10de1a5:   add    $0xfffffff9,%ebp
  0x00007fedd10de1a8:   test   %ebp,%ebp
  0x00007fedd10de1aa:   jl     0x00007fedd10de8e4
  0x00007fedd10de1b0:   mov    0x48(%rsp),%r11d
  0x00007fedd10de1b5:   cmp    %ebp,%r11d
  0x00007fedd10de1b8:   jae    0x00007fedd10de814
  0x00007fedd10de1be:   vmovq  %xmm0,0x60(%rsp)
  0x00007fedd10de1c4:   mov    0x48(%rsp),%r10d
  0x00007fedd10de1c9:   mov    0x4c(%rsp),%r8d
  0x00007fedd10de1ce:   shl    $0x3,%r8
  0x00007fedd10de1d2:   movslq %r10d,%r10
  0x00007fedd10de1d5:   lea    0x10(,%r10,8),%r9
  0x00007fedd10de1dd:   movabs $0x11f5c5b50,%rsi            ;   {oop(a 'java/lang/Class'{0x000000011f5c5b50} = 'jdk/incubator/vector/Long512Vector')}
  0x00007fedd10de1e7:   movabs $0x7fef00310,%rdx            ;   {oop(a 'java/lang/Class'{0x00000007fef00310} = long)}
  0x00007fedd10de1f1:   mov    $0x8,%ecx
  0x00007fedd10de1f6:   mov    %r8,(%rsp)
  0x00007fedd10de1fa:   mov    %r10,0x8(%rsp)
  0x00007fedd10de1ff:   movabs $0x11f621678,%r10            ;   {oop(a 'jdk/incubator/vector/LongVector$$Lambda$59+0x00000008010686b8'{0x000000011f621678})}
  0x00007fedd10de209:   mov    %r10,0x10(%rsp)
  0x00007fedd10de20e:   xchg   %ax,%ax
  0x00007fedd10de210:   vzeroupper 
  0x00007fedd10de213:   callq  0x00007fedd10e4680           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [88]=Oop }
                                                            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.LongVector::intoArray@43 (line 3107)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {static_call}
  0x00007fedd10de218:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007fedd10de222:   mov    0x80(%r10),%r11d
  0x00007fedd10de229:   mov    0xc(%r12,%r11,8),%ebp        ; implicit exception: dispatches to 0x00007fedd10deaa4
  0x00007fedd10de22e:   mov    0x38(%rsp),%r10
  0x00007fedd10de233:   mov    0xc(%r10),%r9d
  0x00007fedd10de237:   sub    %r9d,%ebp
  0x00007fedd10de23a:   inc    %ebp
  0x00007fedd10de23c:   nopl   0x0(%rax)
  0x00007fedd10de240:   test   %ebp,%ebp
  0x00007fedd10de242:   jl     0x00007fedd10de914
  0x00007fedd10de248:   mov    0x20(%rsp),%r8d
  0x00007fedd10de24d:   cmp    %ebp,%r8d
  0x00007fedd10de250:   jae    0x00007fedd10de844
  0x00007fedd10de256:   mov    0x40(%rsp),%r10
  0x00007fedd10de25b:   mov    0x44(%r10),%r10d
  0x00007fedd10de25f:   mov    %r8d,0x48(%rsp)
  0x00007fedd10de264:   mov    0x8(%r12,%r10,8),%r8d        ; implicit exception: dispatches to 0x00007fedd10deaec
  0x00007fedd10de269:   cmp    $0x104e068,%r8d              ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x00007fedd10de270:   jne    0x00007fedd10dea00
  0x00007fedd10de276:   lea    (%r12,%r11,8),%r10
  0x00007fedd10de27a:   mov    0x48(%rsp),%r8d
  0x00007fedd10de27f:   vmovdqu 0x10(%r10,%r8,4),%ymm0
  0x00007fedd10de286:   cmp    $0x8,%r9d
  0x00007fedd10de28a:   jne    0x00007fedd10de93c
  0x00007fedd10de290:   vmovdqu %ymm0,0x80(%rsp)
  0x00007fedd10de299:   mov    0x38(%rsp),%r10
  0x00007fedd10de29e:   mov    0x30(%r10),%ebp
  0x00007fedd10de2a2:   mov    0x38(%rsp),%rsi
  0x00007fedd10de2a7:   data16 xchg %ax,%ax
  0x00007fedd10de2aa:   vzeroupper 
  0x00007fedd10de2ad:   movabs $0x80104c550,%rax
  0x00007fedd10de2b7:   callq  0x00007fedd10e6500           ; ImmutableOopMap {rbp=NarrowOop [40]=Oop [56]=Oop [64]=Oop [88]=Oop }
                                                            ;*invokevirtual elementType {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::cast@43 (line 648)
                                                            ; - test::ReadFilter_vector@124 (line 50)
                                                            ;   {virtual_call}
  0x00007fedd10de2bc:   mov    %rbp,%r9
  0x00007fedd10de2bf:   shl    $0x3,%r9
  0x00007fedd10de2c3:   mov    $0x11,%esi
  0x00007fedd10de2c8:   movabs $0x11f0ed5f8,%rdx            ;   {oop(a 'java/lang/Class'{0x000000011f0ed5f8} = 'jdk/incubator/vector/Double512Vector$Double512Mask')}
  0x00007fedd10de2d2:   movabs $0x7fef00150,%rcx            ;   {oop(a 'java/lang/Class'{0x00000007fef00150} = double)}
  0x00007fedd10de2dc:   mov    $0x8,%r8d
  0x00007fedd10de2e2:   mov    %rax,%rdi
  0x00007fedd10de2e5:   mov    $0x8,%r10d
  0x00007fedd10de2eb:   mov    %r10d,(%rsp)
  0x00007fedd10de2ef:   mov    0x58(%rsp),%r10
  0x00007fedd10de2f4:   mov    %r10,0x8(%rsp)
  0x00007fedd10de2f9:   mov    0x38(%rsp),%r10
  0x00007fedd10de2fe:   mov    %r10,0x10(%rsp)
  0x00007fedd10de303:   movabs $0x11f634dc8,%r10            ;   {oop(a 'jdk/incubator/vector/Double512Vector$Double512Mask$$Lambda$63+0x00000008010692d8'{0x000000011f634dc8})}
  0x00007fedd10de30d:   mov    %r10,0x18(%rsp)
  0x00007fedd10de312:   xchg   %ax,%ax
  0x00007fedd10de314:   vzeroupper 
  0x00007fedd10de317:   callq  0x00007fedd10deba3           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [88]=Oop }
                                                            ;*invokestatic convert {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::cast@56 (line 646)
                                                            ; - test::ReadFilter_vector@124 (line 50)
                                                            ;   {static_call}
  0x00007fedd10de31c:   nopl   0x0(%rax)
  0x00007fedd10de320:   mov    0x8(%rax),%r11d              ; implicit exception: dispatches to 0x00007fedd10deab4
  0x00007fedd10de324:   movabs $0x800000000,%r10
  0x00007fedd10de32e:   add    %r11,%r10
  0x00007fedd10de331:   mov    0x48(%r10),%r10
  0x00007fedd10de335:   movabs $0x801042418,%r11            ;   {metadata('jdk/incubator/vector/VectorMask')}
  0x00007fedd10de33f:   nop
  0x00007fedd10de340:   cmp    %r11,%r10
  0x00007fedd10de343:   jne    0x00007fedd10de968
  0x00007fedd10de349:   mov    0x8(%rax),%r10d
  0x00007fedd10de34d:   cmp    $0x104e6e0,%r10d             ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007fedd10de354:   jne    0x00007fedd10de978
  0x00007fedd10de35a:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007fedd10de364:   mov    0x7c(%r10),%r11d
  0x00007fedd10de368:   mov    0xc(%r12,%r11,8),%r10d       ; implicit exception: dispatches to 0x00007fedd10deadc
  0x00007fedd10de36d:   movabs $0x11f0de540,%r8             ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007fedd10de377:   mov    0x9c(%r8),%r8d
  0x00007fedd10de37e:   mov    0xc(%rax),%r9d
  0x00007fedd10de382:   vmovq  0x10(%r12,%r9,8),%xmm0
  0x00007fedd10de389:   add    $0xfffffff9,%r10d
  0x00007fedd10de38d:   vpxor  %xmm1,%xmm1,%xmm1
  0x00007fedd10de391:   vpsubb %xmm0,%xmm1,%xmm1
  0x00007fedd10de395:   vpmovb2m %xmm1,%k7
  0x00007fedd10de39b:   vmovdqu 0x80(%rsp),%ymm0
  0x00007fedd10de3a4:   vpcompressd %ymm0,%ymm0{%k7}{z}
  0x00007fedd10de3aa:   test   %r10d,%r10d
  0x00007fedd10de3ad:   jl     0x00007fedd10de988
  0x00007fedd10de3b3:   cmp    %r10d,%r8d
  0x00007fedd10de3b6:   jae    0x00007fedd10de86c
  0x00007fedd10de3bc:   mov    0x380(%r15),%r9
  0x00007fedd10de3c3:   mov    0x48(%rsp),%r10d
  0x00007fedd10de3c8:   add    0x34(%rsp),%r10d
  0x00007fedd10de3cd:   mov    %r8d,%ebx
  0x00007fedd10de3d0:   shl    $0x3,%r11
  0x00007fedd10de3d4:   vmovdqu %ymm0,0x10(%r11,%rbx,4)
  0x00007fedd10de3db:   kmovq  0x50(%rsp),%k7
  0x00007fedd10de3e2:   kmovq  %k7,%r11
  0x00007fedd10de3e7:   popcnt %r11,%rcx
  0x00007fedd10de3ec:   add    %r8d,%ecx
  0x00007fedd10de3ef:   movabs $0x11f0de540,%r11            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007fedd10de3f9:   mov    %ecx,0x9c(%r11)              ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::ReadFilter_vector@159 (line 38)
  0x00007fedd10de400:   test   %eax,(%r9)                   ;   {poll}
  0x00007fedd10de403:   cmp    0x30(%rsp),%r10d
  0x00007fedd10de408:   jge    0x00007fedd10de5c5
  0x00007fedd10de40e:   mov    %r10d,0x20(%rsp)
  0x00007fedd10de413:   xor    %ebx,%ebx
  0x00007fedd10de415:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007fedd10de41f:   mov    0x70(%r10),%r9d
  0x00007fedd10de423:   cmp    0x34(%rsp),%ebx
  0x00007fedd10de427:   jge    0x00007fedd10de587
  0x00007fedd10de42d:   mov    0x84(%r10),%r8d
  0x00007fedd10de434:   jmpq   0x00007fedd10de55d
  0x00007fedd10de439:   nopl   0x0(%rax)
  0x00007fedd10de440:   mov    %r11d,%r9d
  0x00007fedd10de443:   mov    0x18(%r12,%r8,8),%r11d       ; implicit exception: dispatches to 0x00007fedd10dea3c
  0x00007fedd10de448:   mov    0x10(%r12,%r11,8),%rax       ; implicit exception: dispatches to 0x00007fedd10dea4c
  0x00007fedd10de44d:   mov    %rax,%rdi
  0x00007fedd10de450:   movabs $0x5deece66d,%r10
  0x00007fedd10de45a:   imul   %r10,%rdi
  0x00007fedd10de45e:   add    $0xb,%rdi
  0x00007fedd10de462:   mov    %rdi,%r10
  0x00007fedd10de465:   movabs $0xffffffffffff,%rdx
  0x00007fedd10de46f:   and    %rdx,%r10
  0x00007fedd10de472:   lock cmpxchg %r10,0x10(%r12,%r11,8)
  0x00007fedd10de479:   sete   %r10b
  0x00007fedd10de47d:   movzbl %r10b,%r10d
  0x00007fedd10de481:   test   %r10d,%r10d
  0x00007fedd10de484:   je     0x00007fedd10de764
  0x00007fedd10de48a:   mov    0x18(%r12,%r8,8),%r11d
  0x00007fedd10de48f:   mov    0x10(%r12,%r11,8),%rax       ; implicit exception: dispatches to 0x00007fedd10dea5c
  0x00007fedd10de494:   mov    %rax,%rdx
  0x00007fedd10de497:   movabs $0x5deece66d,%r10
  0x00007fedd10de4a1:   imul   %r10,%rdx
  0x00007fedd10de4a5:   shr    $0x16,%rdi
  0x00007fedd10de4a9:   add    $0xb,%rdx
  0x00007fedd10de4ad:   mov    %rdx,%r10
  0x00007fedd10de4b0:   movabs $0xffffffffffff,%r8
  0x00007fedd10de4ba:   and    %r8,%r10
  0x00007fedd10de4bd:   lock cmpxchg %r10,0x10(%r12,%r11,8)
  0x00007fedd10de4c4:   sete   %r10b
  0x00007fedd10de4c8:   movzbl %r10b,%r10d
  0x00007fedd10de4cc:   and    $0x3ffffff,%rdi
  0x00007fedd10de4d3:   mov    %edi,%r8d
  0x00007fedd10de4d6:   movslq %r8d,%r8
  0x00007fedd10de4d9:   shl    $0x1b,%r8
  0x00007fedd10de4dd:   data16 xchg %ax,%ax
  0x00007fedd10de4e0:   test   %r10d,%r10d
  0x00007fedd10de4e3:   je     0x00007fedd10de7a8
  0x00007fedd10de4e9:   shr    $0x15,%rdx
  0x00007fedd10de4ed:   and    $0x7ffffff,%rdx
  0x00007fedd10de4f4:   mov    %edx,%r10d
  0x00007fedd10de4f7:   movslq %r10d,%r10
  0x00007fedd10de4fa:   add    %r8,%r10
  0x00007fedd10de4fd:   vcvtsi2sd %r10,%xmm0,%xmm0
  0x00007fedd10de502:   vmulsd -0x6ea(%rip),%xmm0,%xmm0        # 0x00007fedd10dde20
                                                            ;   {section_word}
  0x00007fedd10de50a:   mov    0xc(%r12,%r9,8),%r11d        ; implicit exception: dispatches to 0x00007fedd10dea6c
  0x00007fedd10de50f:   cmp    %r11d,%ebx
  0x00007fedd10de512:   jae    0x00007fedd10de726
  0x00007fedd10de518:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007fedd10de522:   mov    0x84(%r10),%r8d
  0x00007fedd10de529:   mov    0x70(%r10),%r11d
  0x00007fedd10de52d:   lea    (%r12,%r9,8),%r10
  0x00007fedd10de531:   vmovsd %xmm0,0x10(%r10,%rbx,8)
  0x00007fedd10de538:   inc    %ebx
  0x00007fedd10de53a:   cmp    %ecx,%ebx
  0x00007fedd10de53c:   nopl   0x0(%rax)
  0x00007fedd10de540:   jl     0x00007fedd10de440
  0x00007fedd10de546:   mov    0x380(%r15),%r10             ; ImmutableOopMap {r11=NarrowOop r8=NarrowOop [40]=Oop [56]=Oop [64]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::ReadFilter_vector@60 (line 39)
  0x00007fedd10de54d:   test   %eax,(%r10)                  ;   {poll}
  0x00007fedd10de550:   cmp    0x34(%rsp),%ebx
  0x00007fedd10de554:   jge    0x00007fedd10ddf25
  0x00007fedd10de55a:   mov    %r11d,%r9d
  0x00007fedd10de55d:   mov    0x34(%rsp),%ecx
  0x00007fedd10de561:   sub    %ebx,%ecx
  0x00007fedd10de563:   mov    0x34(%rsp),%r10d
  0x00007fedd10de568:   xor    %edi,%edi
  0x00007fedd10de56a:   cmp    %ebx,%r10d
  0x00007fedd10de56d:   cmovl  %edi,%ecx
  0x00007fedd10de570:   cmp    $0x3e8,%ecx
  0x00007fedd10de576:   mov    $0x3e8,%r11d
  0x00007fedd10de57c:   cmova  %r11d,%ecx
  0x00007fedd10de580:   add    %ebx,%ecx
  0x00007fedd10de582:   jmpq   0x00007fedd10de443
  0x00007fedd10de587:   mov    0x9c(%r10),%r10d
  0x00007fedd10de58e:   mov    %r10d,0x48(%rsp)
  0x00007fedd10de593:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007fedd10de59d:   vmovsd 0x88(%r10),%xmm0
  0x00007fedd10de5a6:   vmovsd 0x90(%r10),%xmm1
  0x00007fedd10de5af:   mov    0x78(%r10),%r11d
  0x00007fedd10de5b3:   mov    %r11d,0x4c(%rsp)
  0x00007fedd10de5b8:   mov    %r9d,%r11d
  0x00007fedd10de5bb:   nopl   0x0(%rax,%rax,1)
  0x00007fedd10de5c0:   jmpq   0x00007fedd10ddf60
  0x00007fedd10de5c5:   vzeroupper 
  0x00007fedd10de5c8:   add    $0x110,%rsp
  0x00007fedd10de5cf:   pop    %rbp
  0x00007fedd10de5d0:   cmp    0x378(%r15),%rsp             ;   {poll_return}
  0x00007fedd10de5d7:   ja     0x00007fedd10deb67
  0x00007fedd10de5dd:   retq   
  0x00007fedd10de5de:   mov    0x28(%rsi),%rdi
  0x00007fedd10de5e2:   mov    (%rdi),%ecx
  0x00007fedd10de5e4:   add    $0x8,%rdi
  0x00007fedd10de5e8:   test   %rax,%rax
  0x00007fedd10de5eb:   repnz scas %es:(%rdi),%rax
  0x00007fedd10de5ee:   jne    0x00007fedd10de5f8
  0x00007fedd10de5f4:   mov    %rax,0x20(%rsi)
  0x00007fedd10de5f8:   je     0x00007fedd10ddec9
  0x00007fedd10de5fe:   mov    $0xffffff8d,%esi
  0x00007fedd10de603:   mov    0x20(%rsp),%ebp
  0x00007fedd10de607:   mov    %r8,0x20(%rsp)
  0x00007fedd10de60c:   mov    0x30(%rsp),%r10d
  0x00007fedd10de611:   mov    %r10d,0x28(%rsp)
  0x00007fedd10de616:   mov    %ebx,0x30(%rsp)
  0x00007fedd10de61a:   xchg   %ax,%ax
  0x00007fedd10de61c:   vzeroupper 
  0x00007fedd10de61f:   callq  0x00007fedd1054580           ; ImmutableOopMap {[32]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@39 (line 39)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de624:   vmovq  %xmm1,0x68(%rsp)
  0x00007fedd10de62a:   vmovq  %xmm2,0x60(%rsp)
  0x00007fedd10de630:   vmovdqu64 %zmm3,0x80(%rsp)
  0x00007fedd10de638:   movabs $0x800001ab8,%rsi            ;   {metadata({type array bool})}
  0x00007fedd10de642:   mov    $0x8,%edx
  0x00007fedd10de647:   nop
  0x00007fedd10de648:   vzeroupper 
  0x00007fedd10de64b:   callq  0x00007fedd106a600           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [76]=NarrowOop }
                                                            ;*invokestatic binaryOp {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.Double512Vector$Double512Mask::and@29 (line 685)
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::and@2 (line 554)
                                                            ; - test::DoubleRange_testDoubleVector@20 (line 25)
                                                            ; - test::ReadFilter_vector@77 (line 43)
                                                            ;   {runtime_call _new_array_Java}
  0x00007fedd10de650:   mov    %rax,%rbp
  0x00007fedd10de653:   vmovdqu64 0x80(%rsp),%zmm3
  0x00007fedd10de65b:   vmovq  0x60(%rsp),%xmm2
  0x00007fedd10de661:   vmovq  0x68(%rsp),%xmm1
  0x00007fedd10de667:   jmpq   0x00007fedd10de03c
  0x00007fedd10de66c:   vmovq  %xmm0,0x58(%rsp)
  0x00007fedd10de672:   vmovdqu64 %zmm3,0x80(%rsp)
  0x00007fedd10de67a:   movabs $0x80104ac38,%rsi            ;   {metadata('jdk/incubator/vector/Double512Vector$Double512Mask')}
  0x00007fedd10de684:   vmovq  %xmm1,0x60(%rsp)
  0x00007fedd10de68a:   vmovq  %xmm2,0x68(%rsp)
  0x00007fedd10de690:   vzeroupper 
  0x00007fedd10de693:   callq  0x00007fedd106d880           ; ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop [76]=NarrowOop }
                                                            ;*invokestatic binaryOp {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.Double512Vector$Double512Mask::and@29 (line 685)
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::and@2 (line 554)
                                                            ; - test::DoubleRange_testDoubleVector@20 (line 25)
                                                            ; - test::ReadFilter_vector@77 (line 43)
                                                            ;   {runtime_call _new_instance_Java}
  0x00007fedd10de698:   vmovdqu64 0x80(%rsp),%zmm3
  0x00007fedd10de6a0:   vmovq  0x58(%rsp),%xmm0
  0x00007fedd10de6a6:   jmpq   0x00007fedd10de0aa
  0x00007fedd10de6ab:   vmovdqu64 %zmm2,0x80(%rsp)
  0x00007fedd10de6b3:   vmovq  %xmm0,0x60(%rsp)
  0x00007fedd10de6b9:   movabs $0x8000029f8,%rsi            ;   {metadata({type array long})}
  0x00007fedd10de6c3:   mov    $0x8,%edx
  0x00007fedd10de6c8:   vzeroupper 
  0x00007fedd10de6cb:   callq  0x00007fedd106a600           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [76]=NarrowOop [88]=Oop }
                                                            ;*invokestatic convert {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractVector::convert0@322 (line 730)
                                                            ; - jdk.incubator.vector.AbstractVector::asVectorRawTemplate@11 (line 179)
                                                            ; - jdk.incubator.vector.Double512Vector::asVectorRaw@2 (line 183)
                                                            ; - jdk.incubator.vector.DoubleVector::viewAsIntegralLanes@9 (line 3620)
                                                            ; - test::ReadFilter_vector@93 (line 46)
                                                            ;   {runtime_call _new_array_Java}
  0x00007fedd10de6d0:   mov    %rax,%rbp
  0x00007fedd10de6d3:   vmovq  0x60(%rsp),%xmm0
  0x00007fedd10de6d9:   vmovdqu64 0x80(%rsp),%zmm2
  0x00007fedd10de6e1:   jmpq   0x00007fedd10de140
  0x00007fedd10de6e6:   vmovdqu64 %zmm1,0x80(%rsp)
  0x00007fedd10de6ee:   vmovq  %xmm0,0x60(%rsp)
  0x00007fedd10de6f4:   movabs $0x80105e640,%rsi            ;   {metadata('jdk/incubator/vector/Long512Vector')}
  0x00007fedd10de6fe:   vmovdqu64 %zmm2,0xc0(%rsp)
  0x00007fedd10de706:   xchg   %ax,%ax
  0x00007fedd10de708:   vzeroupper 
  0x00007fedd10de70b:   callq  0x00007fedd106d880           ; ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop [76]=NarrowOop [88]=Oop }
                                                            ;*invokestatic convert {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractVector::convert0@322 (line 730)
                                                            ; - jdk.incubator.vector.AbstractVector::asVectorRawTemplate@11 (line 179)
                                                            ; - jdk.incubator.vector.Double512Vector::asVectorRaw@2 (line 183)
                                                            ; - jdk.incubator.vector.DoubleVector::viewAsIntegralLanes@9 (line 3620)
                                                            ; - test::ReadFilter_vector@93 (line 46)
                                                            ;   {runtime_call _new_instance_Java}
  0x00007fedd10de710:   mov    %rax,%rdi
  0x00007fedd10de713:   vmovq  0x60(%rsp),%xmm0
  0x00007fedd10de719:   vmovdqu64 0x80(%rsp),%zmm1
  0x00007fedd10de721:   jmpq   0x00007fedd10de18a
  0x00007fedd10de726:   mov    $0xffffffe4,%esi
  0x00007fedd10de72b:   mov    0x20(%rsp),%ebp
  0x00007fedd10de72f:   mov    0x28(%rsp),%r10
  0x00007fedd10de734:   mov    %r10,0x20(%rsp)
  0x00007fedd10de739:   mov    0x30(%rsp),%r11d
  0x00007fedd10de73e:   mov    %r11d,0x28(%rsp)
  0x00007fedd10de743:   mov    0x34(%rsp),%r10d
  0x00007fedd10de748:   mov    %r10d,0x2c(%rsp)
  0x00007fedd10de74d:   mov    %r9d,0x34(%rsp)
  0x00007fedd10de752:   mov    %ebx,0x38(%rsp)
  0x00007fedd10de756:   vmovsd %xmm0,0x40(%rsp)
  0x00007fedd10de75c:   vzeroupper 
  0x00007fedd10de75f:   callq  0x00007fedd1054580           ; ImmutableOopMap {[32]=Oop [52]=NarrowOop }
                                                            ;*dastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@56 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de764:   mov    $0xffffff45,%esi
  0x00007fedd10de769:   mov    0x20(%rsp),%ebp
  0x00007fedd10de76d:   mov    0x28(%rsp),%rcx
  0x00007fedd10de772:   mov    %rcx,0x20(%rsp)
  0x00007fedd10de777:   mov    0x30(%rsp),%edi
  0x00007fedd10de77b:   mov    %edi,0x28(%rsp)
  0x00007fedd10de77f:   mov    0x34(%rsp),%ecx
  0x00007fedd10de783:   mov    %ecx,0x2c(%rsp)
  0x00007fedd10de787:   mov    %r9d,0x34(%rsp)
  0x00007fedd10de78c:   mov    %ebx,0x38(%rsp)
  0x00007fedd10de790:   mov    %r8d,0x3c(%rsp)
  0x00007fedd10de795:   mov    %r11d,0x40(%rsp)
  0x00007fedd10de79a:   mov    %r10d,0x44(%rsp)
  0x00007fedd10de79f:   nop
  0x00007fedd10de7a0:   vzeroupper 
  0x00007fedd10de7a3:   callq  0x00007fedd1054580           ; ImmutableOopMap {[32]=Oop [52]=NarrowOop [60]=NarrowOop [64]=NarrowOop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) java.util.Random::next@35 (line 444)
                                                            ; - java.util.Random::nextDouble@3 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de7a8:   mov    $0xffffff45,%esi
  0x00007fedd10de7ad:   mov    0x20(%rsp),%ebp
  0x00007fedd10de7b1:   mov    0x28(%rsp),%rcx
  0x00007fedd10de7b6:   mov    %rcx,0x20(%rsp)
  0x00007fedd10de7bb:   mov    0x30(%rsp),%edi
  0x00007fedd10de7bf:   mov    %edi,0x28(%rsp)
  0x00007fedd10de7c3:   mov    0x34(%rsp),%ecx
  0x00007fedd10de7c7:   mov    %ecx,0x2c(%rsp)
  0x00007fedd10de7cb:   mov    %r9d,0x34(%rsp)
  0x00007fedd10de7d0:   mov    %ebx,0x38(%rsp)
  0x00007fedd10de7d4:   mov    %r8,0x40(%rsp)
  0x00007fedd10de7d9:   mov    %r11d,0x3c(%rsp)
  0x00007fedd10de7de:   mov    %r10d,0x48(%rsp)
  0x00007fedd10de7e3:   nop
  0x00007fedd10de7e4:   vzeroupper 
  0x00007fedd10de7e7:   callq  0x00007fedd1054580           ; ImmutableOopMap {[32]=Oop [52]=NarrowOop [60]=NarrowOop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) java.util.Random::next@35 (line 444)
                                                            ; - java.util.Random::nextDouble@13 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de7ec:   mov    $0xffffffe4,%esi
  0x00007fedd10de7f1:   mov    0x30(%rsp),%r8d
  0x00007fedd10de7f6:   mov    %r8d,0x24(%rsp)
  0x00007fedd10de7fb:   mov    0x34(%rsp),%r10d
  0x00007fedd10de800:   mov    %r10d,0x30(%rsp)
  0x00007fedd10de805:   mov    %r11d,0x34(%rsp)
  0x00007fedd10de80a:   xchg   %ax,%ax
  0x00007fedd10de80c:   vzeroupper 
  0x00007fedd10de80f:   callq  0x00007fedd1054580           ; ImmutableOopMap {[40]=Oop [52]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.DoubleVector::fromArray@9 (line 2773)
                                                            ; - test::ReadFilter_vector@70 (line 42)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de814:   mov    $0xffffffe4,%esi
  0x00007fedd10de819:   mov    0x30(%rsp),%r10d
  0x00007fedd10de81e:   mov    %r10d,0x24(%rsp)
  0x00007fedd10de823:   mov    0x34(%rsp),%r11d
  0x00007fedd10de828:   mov    %r11d,0x30(%rsp)
  0x00007fedd10de82d:   vmovq  %xmm0,0x40(%rsp)
  0x00007fedd10de833:   vmovdqu64 %zmm1,0x80(%rsp)
  0x00007fedd10de83b:   nop
  0x00007fedd10de83c:   vzeroupper 
  0x00007fedd10de83f:   callq  0x00007fedd1054580           ; ImmutableOopMap {[40]=Oop [76]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.LongVector::intoArray@7 (line 3105)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de844:   mov    $0xffffffe4,%esi
  0x00007fedd10de849:   mov    0x30(%rsp),%r8d
  0x00007fedd10de84e:   mov    %r8d,0x24(%rsp)
  0x00007fedd10de853:   mov    0x34(%rsp),%r10d
  0x00007fedd10de858:   mov    %r10d,0x30(%rsp)
  0x00007fedd10de85d:   mov    %r11d,0x40(%rsp)
  0x00007fedd10de862:   xchg   %ax,%ax
  0x00007fedd10de864:   vzeroupper 
  0x00007fedd10de867:   callq  0x00007fedd1054580           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2953)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de86c:   mov    $0xffffffe4,%esi
  0x00007fedd10de871:   mov    0x48(%rsp),%ebp
  0x00007fedd10de875:   mov    0x30(%rsp),%ecx
  0x00007fedd10de879:   mov    %ecx,0x20(%rsp)
  0x00007fedd10de87d:   mov    0x34(%rsp),%r9d
  0x00007fedd10de882:   mov    %r9d,0x24(%rsp)
  0x00007fedd10de887:   mov    0x38(%rsp),%r9
  0x00007fedd10de88c:   mov    %r9,0x28(%rsp)
  0x00007fedd10de891:   mov    %r11d,0x30(%rsp)
  0x00007fedd10de896:   mov    %r8d,0x34(%rsp)
  0x00007fedd10de89b:   mov    %r10d,0x38(%rsp)
  0x00007fedd10de8a0:   vmovq  0x60(%rsp),%xmm1
  0x00007fedd10de8a6:   vmovq  %xmm1,0x40(%rsp)
  0x00007fedd10de8ac:   vmovdqu %ymm0,0x60(%rsp)
  0x00007fedd10de8b2:   xchg   %ax,%ax
  0x00007fedd10de8b4:   vzeroupper 
  0x00007fedd10de8b7:   callq  0x00007fedd1054580           ; ImmutableOopMap {[40]=Oop [48]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 3226)
                                                            ; - test::ReadFilter_vector@140 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de8bc:   mov    $0xffffffcc,%esi
  0x00007fedd10de8c1:   mov    0x30(%rsp),%r8d
  0x00007fedd10de8c6:   mov    %r8d,0x24(%rsp)
  0x00007fedd10de8cb:   mov    0x34(%rsp),%r10d
  0x00007fedd10de8d0:   mov    %r10d,0x30(%rsp)
  0x00007fedd10de8d5:   mov    %r11d,0x34(%rsp)
  0x00007fedd10de8da:   xchg   %ax,%ax
  0x00007fedd10de8dc:   vzeroupper 
  0x00007fedd10de8df:   callq  0x00007fedd1054580           ; ImmutableOopMap {[40]=Oop [52]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.DoubleVector::fromArray@9 (line 2773)
                                                            ; - test::ReadFilter_vector@70 (line 42)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de8e4:   mov    $0xffffffcc,%esi
  0x00007fedd10de8e9:   mov    0x30(%rsp),%r11d
  0x00007fedd10de8ee:   mov    %r11d,0x24(%rsp)
  0x00007fedd10de8f3:   mov    0x34(%rsp),%r10d
  0x00007fedd10de8f8:   mov    %r10d,0x30(%rsp)
  0x00007fedd10de8fd:   vmovq  %xmm0,0x40(%rsp)
  0x00007fedd10de903:   vmovdqu64 %zmm1,0x80(%rsp)
  0x00007fedd10de90b:   nop
  0x00007fedd10de90c:   vzeroupper 
  0x00007fedd10de90f:   callq  0x00007fedd1054580           ; ImmutableOopMap {[40]=Oop [76]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.LongVector::intoArray@7 (line 3105)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de914:   mov    $0xffffffcc,%esi
  0x00007fedd10de919:   mov    0x30(%rsp),%r10d
  0x00007fedd10de91e:   mov    %r10d,0x24(%rsp)
  0x00007fedd10de923:   mov    0x34(%rsp),%r8d
  0x00007fedd10de928:   mov    %r8d,0x30(%rsp)
  0x00007fedd10de92d:   mov    %r11d,0x40(%rsp)
  0x00007fedd10de932:   xchg   %ax,%ax
  0x00007fedd10de934:   vzeroupper 
  0x00007fedd10de937:   callq  0x00007fedd1054580           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2953)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de93c:   mov    $0x4b,%esi
  0x00007fedd10de941:   mov    %r8d,%ebp
  0x00007fedd10de944:   mov    0x30(%rsp),%r11d
  0x00007fedd10de949:   mov    %r11d,0x20(%rsp)
  0x00007fedd10de94e:   mov    0x34(%rsp),%r10d
  0x00007fedd10de953:   mov    %r10d,0x24(%rsp)
  0x00007fedd10de958:   vmovdqu %ymm0,0x40(%rsp)
  0x00007fedd10de95e:   xchg   %ax,%ax
  0x00007fedd10de960:   vzeroupper 
  0x00007fedd10de963:   callq  0x00007fedd1054580           ; ImmutableOopMap {[56]=Oop }
                                                            ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::cast@16 (line 644)
                                                            ; - test::ReadFilter_vector@124 (line 50)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de968:   mov    $0xffffffde,%esi
  0x00007fedd10de96d:   mov    %rax,%rbp
  0x00007fedd10de970:   vzeroupper 
  0x00007fedd10de973:   callq  0x00007fedd1054580           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::cast@59 (line 646)
                                                            ; - test::ReadFilter_vector@124 (line 50)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de978:   mov    $0xffffffde,%esi
  0x00007fedd10de97d:   mov    %rax,%rbp
  0x00007fedd10de980:   vzeroupper 
  0x00007fedd10de983:   callq  0x00007fedd1054580           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::compress@4 (line 480)
                                                            ; - jdk.incubator.vector.Int256Vector::compress@2 (line 41)
                                                            ; - test::ReadFilter_vector@127 (line 50)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de988:   mov    $0xffffffcc,%esi
  0x00007fedd10de98d:   mov    0x48(%rsp),%ebp
  0x00007fedd10de991:   mov    0x30(%rsp),%ecx
  0x00007fedd10de995:   mov    %ecx,0x20(%rsp)
  0x00007fedd10de999:   mov    0x34(%rsp),%r9d
  0x00007fedd10de99e:   mov    %r9d,0x24(%rsp)
  0x00007fedd10de9a3:   mov    0x38(%rsp),%r9
  0x00007fedd10de9a8:   mov    %r9,0x28(%rsp)
  0x00007fedd10de9ad:   mov    %r11d,0x30(%rsp)
  0x00007fedd10de9b2:   mov    %r8d,0x34(%rsp)
  0x00007fedd10de9b7:   mov    %r10d,0x38(%rsp)
  0x00007fedd10de9bc:   vmovq  0x60(%rsp),%xmm1
  0x00007fedd10de9c2:   vmovq  %xmm1,0x40(%rsp)
  0x00007fedd10de9c8:   vmovdqu %ymm0,0x60(%rsp)
  0x00007fedd10de9ce:   xchg   %ax,%ax
  0x00007fedd10de9d0:   vzeroupper 
  0x00007fedd10de9d3:   callq  0x00007fedd1054580           ; ImmutableOopMap {[40]=Oop [48]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 3226)
                                                            ; - test::ReadFilter_vector@140 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10de9d8:   xor    %r8d,%r8d
  0x00007fedd10de9db:   mov    $0xffffff76,%esi
  0x00007fedd10de9e0:   mov    0x20(%rsp),%ebp
  0x00007fedd10de9e4:   mov    %r8,0x20(%rsp)
  0x00007fedd10de9e9:   mov    0x30(%rsp),%r10d
  0x00007fedd10de9ee:   mov    %r10d,0x28(%rsp)
  0x00007fedd10de9f3:   mov    %ebx,0x30(%rsp)
  0x00007fedd10de9f7:   nop
  0x00007fedd10de9f8:   vzeroupper 
  0x00007fedd10de9fb:   callq  0x00007fedd1054580           ; ImmutableOopMap {[32]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@39 (line 39)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10dea00:   mov    $0xffffffde,%esi
  0x00007fedd10dea05:   mov    0x20(%rsp),%ebp
  0x00007fedd10dea09:   mov    0x28(%rsp),%r8
  0x00007fedd10dea0e:   mov    %r8,0x20(%rsp)
  0x00007fedd10dea13:   mov    0x30(%rsp),%r9d
  0x00007fedd10dea18:   mov    %r9d,0x28(%rsp)
  0x00007fedd10dea1d:   mov    0x34(%rsp),%r8d
  0x00007fedd10dea22:   mov    %r8d,0x2c(%rsp)
  0x00007fedd10dea27:   mov    %r11d,0x34(%rsp)
  0x00007fedd10dea2c:   mov    %r10d,0x38(%rsp)
  0x00007fedd10dea31:   data16 xchg %ax,%ax
  0x00007fedd10dea34:   vzeroupper 
  0x00007fedd10dea37:   callq  0x00007fedd1054580           ; ImmutableOopMap {[32]=Oop [52]=NarrowOop [56]=NarrowOop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@4 (line 3918)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2955)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10dea3c:   mov    $0xfffffff6,%esi
  0x00007fedd10dea41:   data16 xchg %ax,%ax
  0x00007fedd10dea44:   vzeroupper 
  0x00007fedd10dea47:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*invokevirtual nextDouble {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10dea4c:   mov    $0xfffffff6,%esi
  0x00007fedd10dea51:   data16 xchg %ax,%ax
  0x00007fedd10dea54:   vzeroupper 
  0x00007fedd10dea57:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*invokevirtual get {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Random::next@8 (line 442)
                                                            ; - java.util.Random::nextDouble@3 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10dea5c:   mov    $0xfffffff6,%esi
  0x00007fedd10dea61:   data16 xchg %ax,%ax
  0x00007fedd10dea64:   vzeroupper 
  0x00007fedd10dea67:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*invokevirtual get {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Random::next@8 (line 442)
                                                            ; - java.util.Random::nextDouble@13 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10dea6c:   mov    $0xfffffff6,%esi
  0x00007fedd10dea71:   mov    %ebx,%ebp
  0x00007fedd10dea73:   vmovsd %xmm0,0x20(%rsp)
  0x00007fedd10dea79:   data16 xchg %ax,%ax
  0x00007fedd10dea7c:   vzeroupper 
  0x00007fedd10dea7f:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*dastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@56 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10dea84:   mov    $0xfffffff6,%esi
  0x00007fedd10dea89:   data16 xchg %ax,%ax
  0x00007fedd10dea8c:   vzeroupper 
  0x00007fedd10dea8f:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.DoubleVector::fromArray@8 (line 2773)
                                                            ; - test::ReadFilter_vector@70 (line 42)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10dea94:   mov    $0xfffffff6,%esi
  0x00007fedd10dea99:   data16 xchg %ax,%ax
  0x00007fedd10dea9c:   vzeroupper 
  0x00007fedd10dea9f:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.LongVector::intoArray@6 (line 3105)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10deaa4:   mov    $0xfffffff6,%esi
  0x00007fedd10deaa9:   data16 xchg %ax,%ax
  0x00007fedd10deaac:   vzeroupper 
  0x00007fedd10deaaf:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@8 (line 2953)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10deab4:   mov    $0xfffffff4,%esi
  0x00007fedd10deab9:   mov    0x48(%rsp),%ebp
  0x00007fedd10deabd:   mov    0x30(%rsp),%r10d
  0x00007fedd10deac2:   mov    %r10d,0x20(%rsp)
  0x00007fedd10deac7:   mov    0x34(%rsp),%r11d
  0x00007fedd10deacc:   mov    %r11d,0x24(%rsp)
  0x00007fedd10dead1:   data16 xchg %ax,%ax
  0x00007fedd10dead4:   vzeroupper 
  0x00007fedd10dead7:   callq  0x00007fedd1054580           ; ImmutableOopMap {[56]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::cast@59 (line 646)
                                                            ; - test::ReadFilter_vector@124 (line 50)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10deadc:   mov    $0xfffffff6,%esi
  0x00007fedd10deae1:   data16 xchg %ax,%ax
  0x00007fedd10deae4:   vzeroupper 
  0x00007fedd10deae7:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@6 (line 3226)
                                                            ; - test::ReadFilter_vector@140 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10deaec:   mov    $0xffffff45,%esi
  0x00007fedd10deaf1:   mov    0x20(%rsp),%ebp
  0x00007fedd10deaf5:   mov    0x28(%rsp),%r8
  0x00007fedd10deafa:   mov    %r8,0x20(%rsp)
  0x00007fedd10deaff:   mov    0x30(%rsp),%r8d
  0x00007fedd10deb04:   mov    %r8d,0x28(%rsp)
  0x00007fedd10deb09:   mov    0x34(%rsp),%r9d
  0x00007fedd10deb0e:   mov    %r9d,0x2c(%rsp)
  0x00007fedd10deb13:   mov    0x48(%rsp),%r8d
  0x00007fedd10deb18:   mov    %r8d,0x30(%rsp)
  0x00007fedd10deb1d:   mov    %r11d,0x34(%rsp)
  0x00007fedd10deb22:   mov    0x40(%rsp),%r11
  0x00007fedd10deb27:   mov    %r11,0x38(%rsp)
  0x00007fedd10deb2c:   mov    %r10d,0x44(%rsp)
  0x00007fedd10deb31:   data16 xchg %ax,%ax
  0x00007fedd10deb34:   vzeroupper 
  0x00007fedd10deb37:   callq  0x00007fedd1054580           ; ImmutableOopMap {[32]=Oop [52]=NarrowOop [56]=Oop [68]=NarrowOop }
                                                            ;*ifnull {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 309)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3918)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2955)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10deb3c:   jmp    0x00007fedd10deb3e
  0x00007fedd10deb3e:   mov    %rax,%rsi
  0x00007fedd10deb41:   jmp    0x00007fedd10deb57
  0x00007fedd10deb43:   jmp    0x00007fedd10deb45
  0x00007fedd10deb45:   mov    %rax,%rsi
  0x00007fedd10deb48:   jmp    0x00007fedd10deb57
  0x00007fedd10deb4a:   mov    %rax,%rsi
  0x00007fedd10deb4d:   jmp    0x00007fedd10deb57
  0x00007fedd10deb4f:   mov    %rax,%rsi
  0x00007fedd10deb52:   jmp    0x00007fedd10deb57
  0x00007fedd10deb54:   mov    %rax,%rsi
  0x00007fedd10deb57:   vzeroupper 
  0x00007fedd10deb5a:   add    $0x110,%rsp
  0x00007fedd10deb61:   pop    %rbp
  0x00007fedd10deb62:   jmpq   0x00007fedd1074000           ;   {runtime_call _rethrow_Java}
  0x00007fedd10deb67:   movabs $0x7fedd10de5d0,%r10         ;   {internal_word}
  0x00007fedd10deb71:   mov    %r10,0x390(%r15)
  0x00007fedd10deb78:   jmpq   0x00007fedd1053400           ;   {runtime_call SafepointBlob}
  0x00007fedd10deb7d:   hlt    
  0x00007fedd10deb7e:   hlt    
  0x00007fedd10deb7f:   hlt    
[Exception Handler]
  0x00007fedd10deb80:   jmpq   0x00007fedd1068d80           ;   {no_reloc}
[Deopt Handler Code]
  0x00007fedd10deb85:   callq  0x00007fedd10deb8a
  0x00007fedd10deb8a:   subq   $0x5,(%rsp)
  0x00007fedd10deb8f:   jmpq   0x00007fedd10548a0           ;   {runtime_call DeoptimizationBlob}
  0x00007fedd10deb94:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007fedd10deb9e:   jmpq   0x00007fedd10deb9e           ;   {runtime_call}
  0x00007fedd10deba3:   movabs $0x800044d70,%rbx            ;   {static_stub}
  0x00007fedd10debad:   jmpq   0x00007fedd1088014           ;   {runtime_call I2C/C2I adapters}
  0x00007fedd10debb2:   hlt    
  0x00007fedd10debb3:   hlt    
  0x00007fedd10debb4:   hlt    
  0x00007fedd10debb5:   hlt    
  0x00007fedd10debb6:   hlt    
  0x00007fedd10debb7:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     313  350             test::ReadFilter_vector (163 bytes)
 total in heap  [0x00007fedd10f5690,0x00007fedd10f6438] = 3496
 relocation     [0x00007fedd10f57e0,0x00007fedd10f5820] = 64
 constants      [0x00007fedd10f5820,0x00007fedd10f5840] = 32
 main code      [0x00007fedd10f5840,0x00007fedd10f5d58] = 1304
 stub code      [0x00007fedd10f5d58,0x00007fedd10f5d70] = 24
 oops           [0x00007fedd10f5d70,0x00007fedd10f5da0] = 48
 metadata       [0x00007fedd10f5da0,0x00007fedd10f5e80] = 224
 scopes data    [0x00007fedd10f5e80,0x00007fedd10f6248] = 968
 scopes pcs     [0x00007fedd10f6248,0x00007fedd10f63b8] = 368
 dependencies   [0x00007fedd10f63b8,0x00007fedd10f63f0] = 56
 nul chk table  [0x00007fedd10f63f0,0x00007fedd10f6438] = 72

[Disassembly]
--------------------------------------------------------------------------------

[Constant Pool]
             Address          hex4                    hex8      
  0x00007fedd10f5820:   0x00000000      0x3ca0000000000000      
  0x00007fedd10f5824:   0x3ca00000                              
  0x00007fedd10f5828:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007fedd10f582c:   0xf4f4f4f4                              
  0x00007fedd10f5830:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007fedd10f5834:   0xf4f4f4f4                              
  0x00007fedd10f5838:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007fedd10f583c:   0xf4f4f4f4                              

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fed88401c70} 'ReadFilter_vector' '()V' in 'test'
  #           [sp+0xa0]  (sp of caller)
  0x00007fedd10f5840:   mov    %eax,-0x14000(%rsp)          ;   {no_reloc}
  0x00007fedd10f5847:   push   %rbp
  0x00007fedd10f5848:   sub    $0x90,%rsp
  0x00007fedd10f584f:   movabs $0x11f0de540,%rcx            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007fedd10f5859:   mov    $0xfffffff8,%r10d
  0x00007fedd10f585f:   and    0x98(%rcx),%r10d
  0x00007fedd10f5866:   mov    %r12d,0x9c(%rcx)
  0x00007fedd10f586d:   test   %r10d,%r10d
  0x00007fedd10f5870:   jle    0x00007fedd10f5ac9
  0x00007fedd10f5876:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fedd10f5880:   cmp    $0x7ffffff8,%r10d
  0x00007fedd10f5887:   jg     0x00007fedd10f5ca8
  0x00007fedd10f588d:   movabs $0x5deece66d,%r14
  0x00007fedd10f5897:   movabs $0xffffffffffff,%rdx
  0x00007fedd10f58a1:   xor    %r11d,%r11d
  0x00007fedd10f58a4:   xor    %edi,%edi
  0x00007fedd10f58a6:   data16 nopw 0x0(%rax,%rax,1)
  0x00007fedd10f58b0:   mov    0x84(%rcx),%r8d
  0x00007fedd10f58b7:   nopw   0x0(%rax,%rax,1)
  0x00007fedd10f58c0:   mov    0x18(%r12,%r8,8),%ebx        ; implicit exception: dispatches to 0x00007fedd10f5cbc
  0x00007fedd10f58c5:   mov    0x10(%r12,%rbx,8),%rax       ; implicit exception: dispatches to 0x00007fedd10f5ccc
  0x00007fedd10f58ca:   mov    %rax,%rsi
  0x00007fedd10f58cd:   imul   %r14,%rsi
  0x00007fedd10f58d1:   mov    0x70(%rcx),%r9d
  0x00007fedd10f58d5:   add    $0xb,%rsi
  0x00007fedd10f58d9:   mov    %rsi,%rbp
  0x00007fedd10f58dc:   and    %rdx,%rbp
  0x00007fedd10f58df:   lock cmpxchg %rbp,0x10(%r12,%rbx,8)
  0x00007fedd10f58e6:   sete   %r13b
  0x00007fedd10f58ea:   movzbl %r13b,%r13d
  0x00007fedd10f58ee:   test   %r13d,%r13d
  0x00007fedd10f58f1:   je     0x00007fedd10f5b08
  0x00007fedd10f58f7:   mov    0x18(%r12,%r8,8),%r8d
  0x00007fedd10f58fc:   nopl   0x0(%rax)
  0x00007fedd10f5900:   mov    0x10(%r12,%r8,8),%rax        ; implicit exception: dispatches to 0x00007fedd10f5cdc
  0x00007fedd10f5905:   mov    %rax,%rbp
  0x00007fedd10f5908:   imul   %r14,%rbp
  0x00007fedd10f590c:   shr    $0x16,%rsi
  0x00007fedd10f5910:   add    $0xb,%rbp
  0x00007fedd10f5914:   mov    %rbp,%rbx
  0x00007fedd10f5917:   and    %rdx,%rbx
  0x00007fedd10f591a:   lock cmpxchg %rbx,0x10(%r12,%r8,8)
  0x00007fedd10f5921:   sete   %bl
  0x00007fedd10f5924:   movzbl %bl,%ebx
  0x00007fedd10f5927:   and    $0x3ffffff,%rsi
  0x00007fedd10f592e:   mov    %esi,%eax
  0x00007fedd10f5930:   movslq %eax,%rax
  0x00007fedd10f5933:   shl    $0x1b,%rax
  0x00007fedd10f5937:   test   %ebx,%ebx
  0x00007fedd10f5939:   je     0x00007fedd10f5b38
  0x00007fedd10f593f:   shr    $0x15,%rbp
  0x00007fedd10f5943:   and    $0x7ffffff,%rbp
  0x00007fedd10f594a:   mov    %ebp,%ebx
  0x00007fedd10f594c:   movslq %ebx,%r8
  0x00007fedd10f594f:   add    %rax,%r8
  0x00007fedd10f5952:   vcvtsi2sd %r8,%xmm0,%xmm0
  0x00007fedd10f5957:   vmulsd -0x13f(%rip),%xmm0,%xmm0        # 0x00007fedd10f5820
                                                            ;   {section_word}
  0x00007fedd10f595f:   nop
  0x00007fedd10f5960:   mov    0xc(%r12,%r9,8),%ebx         ; implicit exception: dispatches to 0x00007fedd10f5cec
  0x00007fedd10f5965:   cmp    %ebx,%edi
  0x00007fedd10f5967:   jae    0x00007fedd10f5ae2
  0x00007fedd10f596d:   lea    (%r12,%r9,8),%r8
  0x00007fedd10f5971:   vmovsd %xmm0,0x10(%r8,%rdi,8)
  0x00007fedd10f5978:   inc    %edi
  0x00007fedd10f597a:   nopw   0x0(%rax,%rax,1)
  0x00007fedd10f5980:   cmp    $0x8,%edi
  0x00007fedd10f5983:   jl     0x00007fedd10f58b0
  0x00007fedd10f5989:   mov    0x70(%rcx),%r8d
  0x00007fedd10f598d:   mov    0xc(%r12,%r8,8),%r9d         ; implicit exception: dispatches to 0x00007fedd10f5d00
  0x00007fedd10f5992:   mov    %r9d,%ebp
  0x00007fedd10f5995:   add    $0xfffffff9,%ebp
  0x00007fedd10f5998:   test   %ebp,%ebp
  0x00007fedd10f599a:   nopw   0x0(%rax,%rax,1)
  0x00007fedd10f59a0:   jl     0x00007fedd10f5c08
  0x00007fedd10f59a6:   cmp    $0x7,%r9d
  0x00007fedd10f59aa:   je     0x00007fedd10f5b68
  0x00007fedd10f59b0:   mov    0x78(%rcx),%ebx
  0x00007fedd10f59b3:   mov    0xc(%r12,%rbx,8),%edi        ; implicit exception: dispatches to 0x00007fedd10f5d10
  0x00007fedd10f59b8:   vmovdqu32 0x10(%r12,%r8,8),%zmm0
  0x00007fedd10f59c3:   vmovsd 0x90(%rcx),%xmm1
  0x00007fedd10f59cb:   vmovsd 0x88(%rcx),%xmm2
  0x00007fedd10f59d3:   add    $0xfffffff9,%edi
  0x00007fedd10f59d6:   vbroadcastsd %xmm2,%zmm2
  0x00007fedd10f59dc:   vbroadcastsd %xmm1,%zmm1
  0x00007fedd10f59e2:   mov    0x9c(%rcx),%r8d
  0x00007fedd10f59e9:   vcmple_oqpd %zmm1,%zmm0,%k7
  0x00007fedd10f59f0:   vcmpge_oqpd %zmm2,%zmm0,%k6
  0x00007fedd10f59f7:   kandb  %k7,%k6,%k7
  0x00007fedd10f59fb:   kmovq  %k7,%k6
  0x00007fedd10f5a00:   vcompresspd %zmm0,%zmm0{%k6}{z}
  0x00007fedd10f5a06:   vpmovm2b %k7,%xmm2
  0x00007fedd10f5a0c:   vpabsb %xmm2,%xmm2
  0x00007fedd10f5a11:   test   %edi,%edi
  0x00007fedd10f5a13:   jl     0x00007fedd10f5c24
  0x00007fedd10f5a19:   cmp    %edi,%r8d
  0x00007fedd10f5a1c:   nopl   0x0(%rax)
  0x00007fedd10f5a20:   jae    0x00007fedd10f5b84
  0x00007fedd10f5a26:   mov    0x80(%rcx),%edi
  0x00007fedd10f5a2c:   mov    %r8d,%r9d
  0x00007fedd10f5a2f:   shl    $0x3,%rbx
  0x00007fedd10f5a33:   vmovdqu32 %zmm0,0x10(%rbx,%r9,8)
  0x00007fedd10f5a3e:   xchg   %ax,%ax
  0x00007fedd10f5a40:   mov    0xc(%r12,%rdi,8),%ebp        ; implicit exception: dispatches to 0x00007fedd10f5d20
  0x00007fedd10f5a45:   add    $0xfffffff9,%ebp
  0x00007fedd10f5a48:   test   %ebp,%ebp
  0x00007fedd10f5a4a:   jl     0x00007fedd10f5c54
  0x00007fedd10f5a50:   cmp    %ebp,%r11d
  0x00007fedd10f5a53:   jae    0x00007fedd10f5bb4
  0x00007fedd10f5a59:   mov    0x7c(%rcx),%ebx
  0x00007fedd10f5a5c:   nopl   0x0(%rax)
  0x00007fedd10f5a60:   mov    0xc(%r12,%rbx,8),%ebp        ; implicit exception: dispatches to 0x00007fedd10f5d30
  0x00007fedd10f5a65:   shl    $0x3,%rdi
  0x00007fedd10f5a69:   vmovdqu 0x10(%rdi,%r11,4),%ymm0
  0x00007fedd10f5a70:   vpcompressd %ymm0,%ymm0{%k6}{z}
  0x00007fedd10f5a76:   add    $0xfffffff9,%ebp
  0x00007fedd10f5a79:   test   %ebp,%ebp
  0x00007fedd10f5a7b:   nopl   0x0(%rax,%rax,1)
  0x00007fedd10f5a80:   jl     0x00007fedd10f5c78
  0x00007fedd10f5a86:   cmp    %ebp,%r8d
  0x00007fedd10f5a89:   jae    0x00007fedd10f5bd8
  0x00007fedd10f5a8f:   mov    0x380(%r15),%rdi
  0x00007fedd10f5a96:   shl    $0x3,%rbx
  0x00007fedd10f5a9a:   vmovdqu %ymm0,0x10(%rbx,%r9,4)
  0x00007fedd10f5aa1:   kmovq  %k7,%rbx
  0x00007fedd10f5aa6:   popcnt %rbx,%r9
  0x00007fedd10f5aab:   add    %r8d,%r9d
  0x00007fedd10f5aae:   mov    %r9d,0x9c(%rcx)
  0x00007fedd10f5ab5:   add    $0x8,%r11d                   ; ImmutableOopMap {rcx=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::ReadFilter_vector@159 (line 38)
  0x00007fedd10f5ab9:   test   %eax,(%rdi)                  ;   {poll}
  0x00007fedd10f5abb:   nopl   0x0(%rax,%rax,1)
  0x00007fedd10f5ac0:   cmp    %r10d,%r11d
  0x00007fedd10f5ac3:   jl     0x00007fedd10f58a4
  0x00007fedd10f5ac9:   vzeroupper 
  0x00007fedd10f5acc:   add    $0x90,%rsp
  0x00007fedd10f5ad3:   pop    %rbp
  0x00007fedd10f5ad4:   cmp    0x378(%r15),%rsp             ;   {poll_return}
  0x00007fedd10f5adb:   ja     0x00007fedd10f5d40
  0x00007fedd10f5ae1:   retq   
  0x00007fedd10f5ae2:   mov    $0xffffffe4,%esi
  0x00007fedd10f5ae7:   mov    %r9d,(%rsp)
  0x00007fedd10f5aeb:   mov    %edi,0x4(%rsp)
  0x00007fedd10f5aef:   vmovsd %xmm0,0x8(%rsp)
  0x00007fedd10f5af5:   mov    %r11d,0x10(%rsp)
  0x00007fedd10f5afa:   mov    %r10d,0x14(%rsp)
  0x00007fedd10f5aff:   nop
  0x00007fedd10f5b00:   vzeroupper 
  0x00007fedd10f5b03:   callq  0x00007fedd1054580           ; ImmutableOopMap {[0]=NarrowOop }
                                                            ;*dastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@56 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5b08:   mov    $0xffffff45,%esi
  0x00007fedd10f5b0d:   mov    %r9d,(%rsp)
  0x00007fedd10f5b11:   mov    %edi,0x4(%rsp)
  0x00007fedd10f5b15:   mov    %r8d,0x8(%rsp)
  0x00007fedd10f5b1a:   mov    %ebx,0xc(%rsp)
  0x00007fedd10f5b1e:   mov    %r13d,0x10(%rsp)
  0x00007fedd10f5b23:   mov    %r11d,0x14(%rsp)
  0x00007fedd10f5b28:   mov    %r10d,0x18(%rsp)
  0x00007fedd10f5b2d:   data16 xchg %ax,%ax
  0x00007fedd10f5b30:   vzeroupper 
  0x00007fedd10f5b33:   callq  0x00007fedd1054580           ; ImmutableOopMap {[0]=NarrowOop [8]=NarrowOop [12]=NarrowOop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) java.util.Random::next@35 (line 444)
                                                            ; - java.util.Random::nextDouble@3 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5b38:   mov    $0xffffff45,%esi
  0x00007fedd10f5b3d:   mov    %r9d,(%rsp)
  0x00007fedd10f5b41:   mov    %edi,0x4(%rsp)
  0x00007fedd10f5b45:   mov    %rax,0x8(%rsp)
  0x00007fedd10f5b4a:   mov    %r8d,0x10(%rsp)
  0x00007fedd10f5b4f:   mov    %ebx,0x14(%rsp)
  0x00007fedd10f5b53:   mov    %r11d,0x18(%rsp)
  0x00007fedd10f5b58:   mov    %r10d,0x1c(%rsp)
  0x00007fedd10f5b5d:   data16 xchg %ax,%ax
  0x00007fedd10f5b60:   vzeroupper 
  0x00007fedd10f5b63:   callq  0x00007fedd1054580           ; ImmutableOopMap {[0]=NarrowOop [16]=NarrowOop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) java.util.Random::next@35 (line 444)
                                                            ; - java.util.Random::nextDouble@13 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5b68:   mov    $0xffffffe4,%esi
  0x00007fedd10f5b6d:   mov    %r11d,(%rsp)
  0x00007fedd10f5b71:   mov    %r10d,0x4(%rsp)
  0x00007fedd10f5b76:   mov    %r8d,0x8(%rsp)
  0x00007fedd10f5b7b:   nop
  0x00007fedd10f5b7c:   vzeroupper 
  0x00007fedd10f5b7f:   callq  0x00007fedd1054580           ; ImmutableOopMap {[8]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.DoubleVector::fromArray@9 (line 2773)
                                                            ; - test::ReadFilter_vector@70 (line 42)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5b84:   mov    $0xffffffe4,%esi
  0x00007fedd10f5b89:   mov    %r11d,%ebp
  0x00007fedd10f5b8c:   mov    %r10d,(%rsp)
  0x00007fedd10f5b90:   mov    %ebx,0x4(%rsp)
  0x00007fedd10f5b94:   mov    %r8d,0x8(%rsp)
  0x00007fedd10f5b99:   mov    %edi,0xc(%rsp)
  0x00007fedd10f5b9d:   vmovq  %xmm2,0x10(%rsp)
  0x00007fedd10f5ba3:   vmovdqu64 %zmm0,0x40(%rsp)
  0x00007fedd10f5bab:   nop
  0x00007fedd10f5bac:   vzeroupper 
  0x00007fedd10f5baf:   callq  0x00007fedd1054580           ; ImmutableOopMap {[4]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.LongVector::intoArray@7 (line 3105)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5bb4:   mov    $0xffffffe4,%esi
  0x00007fedd10f5bb9:   mov    %r10d,0x4(%rsp)
  0x00007fedd10f5bbe:   mov    %edi,0x8(%rsp)
  0x00007fedd10f5bc2:   mov    %r11d,0xc(%rsp)
  0x00007fedd10f5bc7:   vmovq  %xmm2,0x10(%rsp)
  0x00007fedd10f5bcd:   data16 xchg %ax,%ax
  0x00007fedd10f5bd0:   vzeroupper 
  0x00007fedd10f5bd3:   callq  0x00007fedd1054580           ; ImmutableOopMap {[8]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2953)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5bd8:   vmovdqu %ymm0,%ymm1
  0x00007fedd10f5bdc:   mov    $0xffffffe4,%esi
  0x00007fedd10f5be1:   mov    %r11d,(%rsp)
  0x00007fedd10f5be5:   mov    %r10d,0x4(%rsp)
  0x00007fedd10f5bea:   mov    %ebx,0x8(%rsp)
  0x00007fedd10f5bee:   mov    %r8d,0xc(%rsp)
  0x00007fedd10f5bf3:   vmovdqu %ymm1,0x20(%rsp)
  0x00007fedd10f5bf9:   vmovq  %xmm2,0x10(%rsp)
  0x00007fedd10f5bff:   nop
  0x00007fedd10f5c00:   vzeroupper 
  0x00007fedd10f5c03:   callq  0x00007fedd1054580           ; ImmutableOopMap {[8]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 3226)
                                                            ; - test::ReadFilter_vector@140 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5c08:   mov    $0xffffffcc,%esi
  0x00007fedd10f5c0d:   mov    %r11d,(%rsp)
  0x00007fedd10f5c11:   mov    %r10d,0x4(%rsp)
  0x00007fedd10f5c16:   mov    %r8d,0x8(%rsp)
  0x00007fedd10f5c1b:   nop
  0x00007fedd10f5c1c:   vzeroupper 
  0x00007fedd10f5c1f:   callq  0x00007fedd1054580           ; ImmutableOopMap {[8]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.DoubleVector::fromArray@9 (line 2773)
                                                            ; - test::ReadFilter_vector@70 (line 42)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5c24:   mov    $0xffffffcc,%esi
  0x00007fedd10f5c29:   mov    %r11d,%ebp
  0x00007fedd10f5c2c:   mov    %r10d,(%rsp)
  0x00007fedd10f5c30:   mov    %ebx,0x4(%rsp)
  0x00007fedd10f5c34:   mov    %r8d,0x8(%rsp)
  0x00007fedd10f5c39:   mov    %edi,0xc(%rsp)
  0x00007fedd10f5c3d:   vmovq  %xmm2,0x10(%rsp)
  0x00007fedd10f5c43:   vmovdqu64 %zmm0,0x40(%rsp)
  0x00007fedd10f5c4b:   nop
  0x00007fedd10f5c4c:   vzeroupper 
  0x00007fedd10f5c4f:   callq  0x00007fedd1054580           ; ImmutableOopMap {[4]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.LongVector::intoArray@7 (line 3105)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5c54:   mov    $0xffffffcc,%esi
  0x00007fedd10f5c59:   mov    %r10d,0x4(%rsp)
  0x00007fedd10f5c5e:   mov    %edi,0x8(%rsp)
  0x00007fedd10f5c62:   mov    %r11d,0xc(%rsp)
  0x00007fedd10f5c67:   vmovq  %xmm2,0x10(%rsp)
  0x00007fedd10f5c6d:   data16 xchg %ax,%ax
  0x00007fedd10f5c70:   vzeroupper 
  0x00007fedd10f5c73:   callq  0x00007fedd1054580           ; ImmutableOopMap {[8]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2953)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5c78:   vmovdqu %ymm0,%ymm1
  0x00007fedd10f5c7c:   mov    $0xffffffcc,%esi
  0x00007fedd10f5c81:   mov    %r11d,(%rsp)
  0x00007fedd10f5c85:   mov    %r10d,0x4(%rsp)
  0x00007fedd10f5c8a:   mov    %ebx,0x8(%rsp)
  0x00007fedd10f5c8e:   mov    %r8d,0xc(%rsp)
  0x00007fedd10f5c93:   vmovdqu %ymm1,0x20(%rsp)
  0x00007fedd10f5c99:   vmovq  %xmm2,0x10(%rsp)
  0x00007fedd10f5c9f:   nop
  0x00007fedd10f5ca0:   vzeroupper 
  0x00007fedd10f5ca3:   callq  0x00007fedd1054580           ; ImmutableOopMap {[8]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 3226)
                                                            ; - test::ReadFilter_vector@140 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5ca8:   mov    $0xffffff6e,%esi
  0x00007fedd10f5cad:   mov    %r10d,(%rsp)
  0x00007fedd10f5cb1:   data16 xchg %ax,%ax
  0x00007fedd10f5cb4:   vzeroupper 
  0x00007fedd10f5cb7:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::ReadFilter_vector@33 (line 38)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5cbc:   mov    $0xfffffff6,%esi
  0x00007fedd10f5cc1:   data16 xchg %ax,%ax
  0x00007fedd10f5cc4:   vzeroupper 
  0x00007fedd10f5cc7:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*invokevirtual nextDouble {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5ccc:   mov    $0xfffffff6,%esi
  0x00007fedd10f5cd1:   data16 xchg %ax,%ax
  0x00007fedd10f5cd4:   vzeroupper 
  0x00007fedd10f5cd7:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*invokevirtual get {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Random::next@8 (line 442)
                                                            ; - java.util.Random::nextDouble@3 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5cdc:   mov    $0xfffffff6,%esi
  0x00007fedd10f5ce1:   data16 xchg %ax,%ax
  0x00007fedd10f5ce4:   vzeroupper 
  0x00007fedd10f5ce7:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*invokevirtual get {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Random::next@8 (line 442)
                                                            ; - java.util.Random::nextDouble@13 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5cec:   mov    $0xfffffff6,%esi
  0x00007fedd10f5cf1:   mov    %edi,%ebp
  0x00007fedd10f5cf3:   vmovsd %xmm0,(%rsp)
  0x00007fedd10f5cf8:   vzeroupper 
  0x00007fedd10f5cfb:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*dastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@56 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5d00:   mov    $0xfffffff6,%esi
  0x00007fedd10f5d05:   data16 xchg %ax,%ax
  0x00007fedd10f5d08:   vzeroupper 
  0x00007fedd10f5d0b:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.DoubleVector::fromArray@8 (line 2773)
                                                            ; - test::ReadFilter_vector@70 (line 42)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5d10:   mov    $0xfffffff6,%esi
  0x00007fedd10f5d15:   data16 xchg %ax,%ax
  0x00007fedd10f5d18:   vzeroupper 
  0x00007fedd10f5d1b:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.LongVector::intoArray@6 (line 3105)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5d20:   mov    $0xfffffff6,%esi
  0x00007fedd10f5d25:   data16 xchg %ax,%ax
  0x00007fedd10f5d28:   vzeroupper 
  0x00007fedd10f5d2b:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@8 (line 2953)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5d30:   mov    $0xfffffff6,%esi
  0x00007fedd10f5d35:   data16 xchg %ax,%ax
  0x00007fedd10f5d38:   vzeroupper 
  0x00007fedd10f5d3b:   callq  0x00007fedd1054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@6 (line 3226)
                                                            ; - test::ReadFilter_vector@140 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fedd10f5d40:   movabs $0x7fedd10f5ad4,%r10         ;   {internal_word}
  0x00007fedd10f5d4a:   mov    %r10,0x390(%r15)
  0x00007fedd10f5d51:   jmpq   0x00007fedd1053400           ;   {runtime_call SafepointBlob}
  0x00007fedd10f5d56:   hlt    
  0x00007fedd10f5d57:   hlt    
[Exception Handler]
  0x00007fedd10f5d58:   jmpq   0x00007fedd1068d80           ;   {no_reloc}
[Deopt Handler Code]
  0x00007fedd10f5d5d:   callq  0x00007fedd10f5d62
  0x00007fedd10f5d62:   subq   $0x5,(%rsp)
  0x00007fedd10f5d67:   jmpq   0x00007fedd10548a0           ;   {runtime_call DeoptimizationBlob}
  0x00007fedd10f5d6c:   hlt    
  0x00007fedd10f5d6d:   hlt    
  0x00007fedd10f5d6e:   hlt    
  0x00007fedd10f5d6f:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
