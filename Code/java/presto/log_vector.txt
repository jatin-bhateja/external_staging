CompileCommand: print test.ReadFilter_vector bool print = true
WARNING: Using incubator modules: jdk.incubator.vector

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     288  316 %           test::ReadFilter_vector @ 39 (163 bytes)
 total in heap  [0x00007f91790eba90,0x00007f91790ed750] = 7360
 relocation     [0x00007f91790ebbe0,0x00007f91790ebca0] = 192
 constants      [0x00007f91790ebca0,0x00007f91790ebcc0] = 32
 main code      [0x00007f91790ebcc0,0x00007f91790eca00] = 3392
 stub code      [0x00007f91790eca00,0x00007f91790eca38] = 56
 oops           [0x00007f91790eca38,0x00007f91790eca90] = 88
 metadata       [0x00007f91790eca90,0x00007f91790ecbe0] = 336
 scopes data    [0x00007f91790ecbe0,0x00007f91790ed3c0] = 2016
 scopes pcs     [0x00007f91790ed3c0,0x00007f91790ed620] = 608
 dependencies   [0x00007f91790ed620,0x00007f91790ed650] = 48
 handler table  [0x00007f91790ed650,0x00007f91790ed6f8] = 168
 nul chk table  [0x00007f91790ed6f8,0x00007f91790ed750] = 88

[Disassembly]
--------------------------------------------------------------------------------

[Constant Pool]
             Address          hex4                    hex8      
  0x00007f91790ebca0:   0x00000000      0x3ca0000000000000      
  0x00007f91790ebca4:   0x3ca00000                              
  0x00007f91790ebca8:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007f91790ebcac:   0xf4f4f4f4                              
  0x00007f91790ebcb0:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007f91790ebcb4:   0xf4f4f4f4                              
  0x00007f91790ebcb8:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007f91790ebcbc:   0xf4f4f4f4                              

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007f9130401c70} 'ReadFilter_vector' '()V' in 'test'
  0x00007f91790ebcc0:   callq  0x00007f918beedf80           ;   {no_reloc}
  0x00007f91790ebcc5:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f91790ebcd0:   mov    %eax,-0x14000(%rsp)
  0x00007f91790ebcd7:   push   %rbp
  0x00007f91790ebcd8:   sub    $0x110,%rsp
  0x00007f91790ebcdf:   mov    0x30(%rsi),%rbp
  0x00007f91790ebce3:   mov    0x38(%rsi),%r11d
  0x00007f91790ebce7:   mov    %r11d,0x20(%rsp)
  0x00007f91790ebcec:   mov    0x18(%rsi),%ebx
  0x00007f91790ebcef:   mov    0x28(%rsi),%r10d
  0x00007f91790ebcf3:   mov    %r10d,0x30(%rsp)
  0x00007f91790ebcf8:   mov    0x20(%rsi),%r11d
  0x00007f91790ebcfc:   mov    %r11d,0x34(%rsp)
  0x00007f91790ebd01:   mov    %rsi,%rdi
  0x00007f91790ebd04:   vzeroupper 
  0x00007f91790ebd07:   movabs $0x7f918bfa9fd0,%r10
  0x00007f91790ebd11:   callq  *%r10
  0x00007f91790ebd14:   test   %rbp,%rbp
  0x00007f91790ebd17:   je     0x00007f91790ec858
  0x00007f91790ebd1d:   mov    %rbp,%r8
  0x00007f91790ebd20:   mov    0x8(%rbp),%r11d
  0x00007f91790ebd24:   movabs $0x8010460d8,%rax            ;   {metadata('jdk/incubator/vector/VectorSpecies')}
  0x00007f91790ebd2e:   movabs $0x800000000,%rsi
  0x00007f91790ebd38:   add    %r11,%rsi
  0x00007f91790ebd3b:   mov    0x20(%rsi),%r10
  0x00007f91790ebd3f:   nop
  0x00007f91790ebd40:   cmp    %rax,%r10
  0x00007f91790ebd43:   jne    0x00007f91790ec45e
  0x00007f91790ebd49:   mov    0x8(%r8),%r10d
  0x00007f91790ebd4d:   movabs $0x8010464c0,%r11            ;   {metadata('jdk/incubator/vector/AbstractSpecies')}
  0x00007f91790ebd57:   movabs $0x800000000,%r9
  0x00007f91790ebd61:   add    %r10,%r9
  0x00007f91790ebd64:   mov    0x40(%r9),%r10
  0x00007f91790ebd68:   cmp    %r11,%r10
  0x00007f91790ebd6b:   jne    0x00007f91790ec85b
  0x00007f91790ebd71:   mov    %r8,%r10
  0x00007f91790ebd74:   mov    0x8(%r10),%r11d
  0x00007f91790ebd78:   nopl   0x0(%rax,%rax,1)
  0x00007f91790ebd80:   cmp    $0x104c550,%r11d             ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007f91790ebd87:   jne    0x00007f91790ec85b
  0x00007f91790ebd8d:   mov    %r8,0x28(%rsp)
  0x00007f91790ebd92:   mov    %r10,0x38(%rsp)
  0x00007f91790ebd97:   mov    %r10,0x40(%rsp)
  0x00007f91790ebd9c:   nopl   0x0(%rax)
  0x00007f91790ebda0:   jmpq   0x00007f91790ec295
  0x00007f91790ebda5:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007f91790ebdaf:   mov    0x9c(%r10),%r10d
  0x00007f91790ebdb6:   mov    %r10d,0x48(%rsp)
  0x00007f91790ebdbb:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007f91790ebdc5:   vmovsd 0x88(%r10),%xmm0
  0x00007f91790ebdce:   vmovsd 0x90(%r10),%xmm1
  0x00007f91790ebdd7:   mov    0x78(%r10),%r8d
  0x00007f91790ebddb:   mov    %r8d,0x4c(%rsp)
  0x00007f91790ebde0:   mov    0xc(%r12,%r11,8),%r8d        ; implicit exception: dispatches to 0x00007f91790ec904
  0x00007f91790ebde5:   mov    %r8d,%ebp
  0x00007f91790ebde8:   add    $0xfffffff9,%ebp
  0x00007f91790ebdeb:   test   %ebp,%ebp
  0x00007f91790ebded:   jl     0x00007f91790ec73c
  0x00007f91790ebdf3:   cmp    $0x7,%r8d
  0x00007f91790ebdf7:   je     0x00007f91790ec66c
  0x00007f91790ebdfd:   mov    0xf8(%r15),%rbp
  0x00007f91790ebe04:   vmovdqu32 0x10(%r12,%r11,8),%zmm3
  0x00007f91790ebe0f:   mov    %rbp,%r10
  0x00007f91790ebe12:   add    $0x18,%r10
  0x00007f91790ebe16:   vbroadcastsd %xmm0,%zmm0
  0x00007f91790ebe1c:   vcmpge_oqpd %zmm0,%zmm3,%k7
  0x00007f91790ebe23:   kmovq  %k7,0x50(%rsp)
  0x00007f91790ebe2a:   vbroadcastsd %xmm1,%zmm0
  0x00007f91790ebe30:   vcmple_oqpd %zmm0,%zmm3,%k7
  0x00007f91790ebe37:   kmovq  %k7,0x58(%rsp)
  0x00007f91790ebe3e:   kmovq  0x50(%rsp),%k7
  0x00007f91790ebe45:   vpmovm2b %k7,%xmm2
  0x00007f91790ebe4b:   vpabsb %xmm2,%xmm2
  0x00007f91790ebe50:   kmovq  0x58(%rsp),%k7
  0x00007f91790ebe57:   vpmovm2b %k7,%xmm1
  0x00007f91790ebe5d:   vpabsb %xmm1,%xmm1
  0x00007f91790ebe62:   cmp    0x108(%r15),%r10
  0x00007f91790ebe69:   jae    0x00007f91790ec4a4
  0x00007f91790ebe6f:   mov    %r10,0xf8(%r15)
  0x00007f91790ebe76:   prefetchw 0xc0(%r10)
  0x00007f91790ebe7e:   movq   $0x1,0x0(%rbp)
  0x00007f91790ebe86:   prefetchw 0x100(%r10)
  0x00007f91790ebe8e:   movl   $0x1ab8,0x8(%rbp)            ;   {metadata({type array bool})}
  0x00007f91790ebe95:   prefetchw 0x140(%r10)
  0x00007f91790ebe9d:   movl   $0x8,0xc(%rbp)
  0x00007f91790ebea4:   prefetchw 0x180(%r10)
  0x00007f91790ebeac:   mov    %rbp,%r10
  0x00007f91790ebeaf:   add    $0x10,%r10
  0x00007f91790ebeb3:   vpxor  %ymm0,%ymm0,%ymm0
  0x00007f91790ebeb7:   vmovq  %xmm0,(%r10)
  0x00007f91790ebebc:   mov    0xf8(%r15),%rax
  0x00007f91790ebec3:   mov    %rax,%r10
  0x00007f91790ebec6:   add    $0x10,%r10
  0x00007f91790ebeca:   kmovq  0x58(%rsp),%k6
  0x00007f91790ebed1:   kmovq  0x50(%rsp),%k5
  0x00007f91790ebed8:   kandb  %k6,%k5,%k7
  0x00007f91790ebedc:   kmovq  %k7,0x50(%rsp)
  0x00007f91790ebee3:   vpmovm2b %k7,%xmm0
  0x00007f91790ebee9:   vpabsb %xmm0,%xmm0
  0x00007f91790ebeee:   vmovq  %xmm0,0x10(%rbp)
  0x00007f91790ebef3:   nopw   0x0(%rax,%rax,1)
  0x00007f91790ebefc:   data16 data16 xchg %ax,%ax
  0x00007f91790ebf00:   cmp    0x108(%r15),%r10
  0x00007f91790ebf07:   jae    0x00007f91790ec4ec
  0x00007f91790ebf0d:   mov    %r10,0xf8(%r15)
  0x00007f91790ebf14:   prefetchw 0xc0(%r10)
  0x00007f91790ebf1c:   movq   $0x1,(%rax)
  0x00007f91790ebf23:   movl   $0x104ac38,0x8(%rax)         ;   {metadata('jdk/incubator/vector/Double512Vector$Double512Mask')}
  0x00007f91790ebf2a:   mov    %rbp,%r10
  0x00007f91790ebf2d:   shr    $0x3,%r10
  0x00007f91790ebf31:   mov    %r10d,0xc(%rax)
  0x00007f91790ebf35:   mov    %rax,0x58(%rsp)
  0x00007f91790ebf3a:   mov    0xf8(%r15),%rbp
  0x00007f91790ebf41:   mov    %rbp,%r10
  0x00007f91790ebf44:   add    $0x50,%r10
  0x00007f91790ebf48:   kmovq  0x50(%rsp),%k7
  0x00007f91790ebf4f:   vcompresspd %zmm3,%zmm2{%k7}{z}
  0x00007f91790ebf55:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00007f91790ebf60:   cmp    0x108(%r15),%r10
  0x00007f91790ebf67:   jae    0x00007f91790ec52b
  0x00007f91790ebf6d:   mov    %r10,0xf8(%r15)
  0x00007f91790ebf74:   prefetchw 0xc0(%r10)
  0x00007f91790ebf7c:   movq   $0x1,0x0(%rbp)
  0x00007f91790ebf84:   prefetchw 0x100(%r10)
  0x00007f91790ebf8c:   movl   $0x29f8,0x8(%rbp)            ;   {metadata({type array long})}
  0x00007f91790ebf93:   prefetchw 0x140(%r10)
  0x00007f91790ebf9b:   movl   $0x8,0xc(%rbp)
  0x00007f91790ebfa2:   prefetchw 0x180(%r10)
  0x00007f91790ebfaa:   mov    %rbp,%r10
  0x00007f91790ebfad:   add    $0x10,%r10
  0x00007f91790ebfb1:   vpxor  %ymm1,%ymm1,%ymm1
  0x00007f91790ebfb5:   vmovdqu %ymm1,(%r10)
  0x00007f91790ebfba:   vmovdqu %ymm1,0x20(%r10)
  0x00007f91790ebfc0:   mov    0xf8(%r15),%rdi
  0x00007f91790ebfc7:   mov    %rdi,%r10
  0x00007f91790ebfca:   add    $0x10,%r10
  0x00007f91790ebfce:   vmovdqu64 %zmm2,%zmm1
  0x00007f91790ebfd4:   vmovdqu32 %zmm1,0x10(%rbp)
  0x00007f91790ebfde:   xchg   %ax,%ax
  0x00007f91790ebfe0:   cmp    0x108(%r15),%r10
  0x00007f91790ebfe7:   jae    0x00007f91790ec566
  0x00007f91790ebfed:   mov    %r10,0xf8(%r15)
  0x00007f91790ebff4:   prefetchw 0xc0(%r10)
  0x00007f91790ebffc:   movq   $0x1,(%rdi)
  0x00007f91790ec003:   movl   $0x105e640,0x8(%rdi)         ;   {metadata('jdk/incubator/vector/Long512Vector')}
  0x00007f91790ec00a:   mov    %rbp,%r11
  0x00007f91790ec00d:   shr    $0x3,%r11
  0x00007f91790ec011:   mov    %r11d,0xc(%rdi)
  0x00007f91790ec015:   mov    0x4c(%rsp),%r10d
  0x00007f91790ec01a:   nopw   0x0(%rax,%rax,1)
  0x00007f91790ec020:   mov    0xc(%r12,%r10,8),%ebp        ; implicit exception: dispatches to 0x00007f91790ec914
  0x00007f91790ec025:   add    $0xfffffff9,%ebp
  0x00007f91790ec028:   test   %ebp,%ebp
  0x00007f91790ec02a:   jl     0x00007f91790ec764
  0x00007f91790ec030:   mov    0x48(%rsp),%r11d
  0x00007f91790ec035:   cmp    %ebp,%r11d
  0x00007f91790ec038:   jae    0x00007f91790ec694
  0x00007f91790ec03e:   vmovq  %xmm0,0x60(%rsp)
  0x00007f91790ec044:   mov    0x48(%rsp),%r10d
  0x00007f91790ec049:   mov    0x4c(%rsp),%r8d
  0x00007f91790ec04e:   shl    $0x3,%r8
  0x00007f91790ec052:   movslq %r10d,%r10
  0x00007f91790ec055:   lea    0x10(,%r10,8),%r9
  0x00007f91790ec05d:   movabs $0x11f5c5b50,%rsi            ;   {oop(a 'java/lang/Class'{0x000000011f5c5b50} = 'jdk/incubator/vector/Long512Vector')}
  0x00007f91790ec067:   movabs $0x7fef00310,%rdx            ;   {oop(a 'java/lang/Class'{0x00000007fef00310} = long)}
  0x00007f91790ec071:   mov    $0x8,%ecx
  0x00007f91790ec076:   mov    %r8,(%rsp)
  0x00007f91790ec07a:   mov    %r10,0x8(%rsp)
  0x00007f91790ec07f:   movabs $0x11f621678,%r10            ;   {oop(a 'jdk/incubator/vector/LongVector$$Lambda$59+0x00000008010686b8'{0x000000011f621678})}
  0x00007f91790ec089:   mov    %r10,0x10(%rsp)
  0x00007f91790ec08e:   xchg   %ax,%ax
  0x00007f91790ec090:   vzeroupper 
  0x00007f91790ec093:   callq  0x00007f91790e2980           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [88]=Oop }
                                                            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.LongVector::intoArray@43 (line 3107)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {static_call}
  0x00007f91790ec098:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007f91790ec0a2:   mov    0x80(%r10),%r11d
  0x00007f91790ec0a9:   mov    0xc(%r12,%r11,8),%ebp        ; implicit exception: dispatches to 0x00007f91790ec924
  0x00007f91790ec0ae:   mov    0x38(%rsp),%r10
  0x00007f91790ec0b3:   mov    0xc(%r10),%r9d
  0x00007f91790ec0b7:   sub    %r9d,%ebp
  0x00007f91790ec0ba:   inc    %ebp
  0x00007f91790ec0bc:   nopl   0x0(%rax)
  0x00007f91790ec0c0:   test   %ebp,%ebp
  0x00007f91790ec0c2:   jl     0x00007f91790ec794
  0x00007f91790ec0c8:   mov    0x20(%rsp),%r8d
  0x00007f91790ec0cd:   cmp    %ebp,%r8d
  0x00007f91790ec0d0:   jae    0x00007f91790ec6c4
  0x00007f91790ec0d6:   mov    0x40(%rsp),%r10
  0x00007f91790ec0db:   mov    0x44(%r10),%r10d
  0x00007f91790ec0df:   mov    %r8d,0x48(%rsp)
  0x00007f91790ec0e4:   mov    0x8(%r12,%r10,8),%r8d        ; implicit exception: dispatches to 0x00007f91790ec96c
  0x00007f91790ec0e9:   cmp    $0x104e068,%r8d              ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x00007f91790ec0f0:   jne    0x00007f91790ec880
  0x00007f91790ec0f6:   lea    (%r12,%r11,8),%r10
  0x00007f91790ec0fa:   mov    0x48(%rsp),%r8d
  0x00007f91790ec0ff:   vmovdqu 0x10(%r10,%r8,4),%ymm0
  0x00007f91790ec106:   cmp    $0x8,%r9d
  0x00007f91790ec10a:   jne    0x00007f91790ec7bc
  0x00007f91790ec110:   vmovdqu %ymm0,0x80(%rsp)
  0x00007f91790ec119:   mov    0x38(%rsp),%r10
  0x00007f91790ec11e:   mov    0x30(%r10),%ebp
  0x00007f91790ec122:   mov    0x38(%rsp),%rsi
  0x00007f91790ec127:   data16 xchg %ax,%ax
  0x00007f91790ec12a:   vzeroupper 
  0x00007f91790ec12d:   movabs $0x80104c550,%rax
  0x00007f91790ec137:   callq  0x00007f91790e2c80           ; ImmutableOopMap {rbp=NarrowOop [40]=Oop [56]=Oop [64]=Oop [88]=Oop }
                                                            ;*invokevirtual elementType {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::cast@43 (line 648)
                                                            ; - test::ReadFilter_vector@124 (line 50)
                                                            ;   {virtual_call}
  0x00007f91790ec13c:   mov    %rbp,%r9
  0x00007f91790ec13f:   shl    $0x3,%r9
  0x00007f91790ec143:   mov    $0x11,%esi
  0x00007f91790ec148:   movabs $0x11f0ed5f8,%rdx            ;   {oop(a 'java/lang/Class'{0x000000011f0ed5f8} = 'jdk/incubator/vector/Double512Vector$Double512Mask')}
  0x00007f91790ec152:   movabs $0x7fef00150,%rcx            ;   {oop(a 'java/lang/Class'{0x00000007fef00150} = double)}
  0x00007f91790ec15c:   mov    $0x8,%r8d
  0x00007f91790ec162:   mov    %rax,%rdi
  0x00007f91790ec165:   mov    $0x8,%r10d
  0x00007f91790ec16b:   mov    %r10d,(%rsp)
  0x00007f91790ec16f:   mov    0x58(%rsp),%r10
  0x00007f91790ec174:   mov    %r10,0x8(%rsp)
  0x00007f91790ec179:   mov    0x38(%rsp),%r10
  0x00007f91790ec17e:   mov    %r10,0x10(%rsp)
  0x00007f91790ec183:   movabs $0x11f634dc8,%r10            ;   {oop(a 'jdk/incubator/vector/Double512Vector$Double512Mask$$Lambda$63+0x00000008010692d8'{0x000000011f634dc8})}
  0x00007f91790ec18d:   mov    %r10,0x18(%rsp)
  0x00007f91790ec192:   xchg   %ax,%ax
  0x00007f91790ec194:   vzeroupper 
  0x00007f91790ec197:   callq  0x00007f91790eca23           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [88]=Oop }
                                                            ;*invokestatic convert {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::cast@56 (line 646)
                                                            ; - test::ReadFilter_vector@124 (line 50)
                                                            ;   {static_call}
  0x00007f91790ec19c:   nopl   0x0(%rax)
  0x00007f91790ec1a0:   mov    0x8(%rax),%r11d              ; implicit exception: dispatches to 0x00007f91790ec934
  0x00007f91790ec1a4:   movabs $0x800000000,%r10
  0x00007f91790ec1ae:   add    %r11,%r10
  0x00007f91790ec1b1:   mov    0x48(%r10),%r10
  0x00007f91790ec1b5:   movabs $0x801042418,%r11            ;   {metadata('jdk/incubator/vector/VectorMask')}
  0x00007f91790ec1bf:   nop
  0x00007f91790ec1c0:   cmp    %r11,%r10
  0x00007f91790ec1c3:   jne    0x00007f91790ec7e8
  0x00007f91790ec1c9:   mov    0x8(%rax),%r10d
  0x00007f91790ec1cd:   cmp    $0x104e6e0,%r10d             ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007f91790ec1d4:   jne    0x00007f91790ec7f8
  0x00007f91790ec1da:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007f91790ec1e4:   mov    0x7c(%r10),%r11d
  0x00007f91790ec1e8:   mov    0xc(%r12,%r11,8),%r10d       ; implicit exception: dispatches to 0x00007f91790ec95c
  0x00007f91790ec1ed:   movabs $0x11f0de540,%r8             ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007f91790ec1f7:   mov    0x9c(%r8),%r8d
  0x00007f91790ec1fe:   mov    0xc(%rax),%r9d
  0x00007f91790ec202:   vmovq  0x10(%r12,%r9,8),%xmm0
  0x00007f91790ec209:   add    $0xfffffff9,%r10d
  0x00007f91790ec20d:   vpxor  %xmm1,%xmm1,%xmm1
  0x00007f91790ec211:   vpsubb %xmm0,%xmm1,%xmm1
  0x00007f91790ec215:   vpmovb2m %xmm1,%k7
  0x00007f91790ec21b:   vmovdqu 0x80(%rsp),%ymm0
  0x00007f91790ec224:   vpcompressd %ymm0,%ymm0{%k7}{z}
  0x00007f91790ec22a:   test   %r10d,%r10d
  0x00007f91790ec22d:   jl     0x00007f91790ec808
  0x00007f91790ec233:   cmp    %r10d,%r8d
  0x00007f91790ec236:   jae    0x00007f91790ec6ec
  0x00007f91790ec23c:   mov    0x380(%r15),%r9
  0x00007f91790ec243:   mov    0x48(%rsp),%r10d
  0x00007f91790ec248:   add    0x34(%rsp),%r10d
  0x00007f91790ec24d:   mov    %r8d,%ebx
  0x00007f91790ec250:   shl    $0x3,%r11
  0x00007f91790ec254:   vmovdqu %ymm0,0x10(%r11,%rbx,4)
  0x00007f91790ec25b:   kmovq  0x50(%rsp),%k7
  0x00007f91790ec262:   kmovq  %k7,%r11
  0x00007f91790ec267:   popcnt %r11,%rcx
  0x00007f91790ec26c:   add    %r8d,%ecx
  0x00007f91790ec26f:   movabs $0x11f0de540,%r11            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007f91790ec279:   mov    %ecx,0x9c(%r11)              ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::ReadFilter_vector@159 (line 38)
  0x00007f91790ec280:   test   %eax,(%r9)                   ;   {poll}
  0x00007f91790ec283:   cmp    0x30(%rsp),%r10d
  0x00007f91790ec288:   jge    0x00007f91790ec445
  0x00007f91790ec28e:   mov    %r10d,0x20(%rsp)
  0x00007f91790ec293:   xor    %ebx,%ebx
  0x00007f91790ec295:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007f91790ec29f:   mov    0x70(%r10),%r9d
  0x00007f91790ec2a3:   cmp    0x34(%rsp),%ebx
  0x00007f91790ec2a7:   jge    0x00007f91790ec407
  0x00007f91790ec2ad:   mov    0x84(%r10),%r8d
  0x00007f91790ec2b4:   jmpq   0x00007f91790ec3dd
  0x00007f91790ec2b9:   nopl   0x0(%rax)
  0x00007f91790ec2c0:   mov    %r11d,%r9d
  0x00007f91790ec2c3:   mov    0x18(%r12,%r8,8),%r11d       ; implicit exception: dispatches to 0x00007f91790ec8bc
  0x00007f91790ec2c8:   mov    0x10(%r12,%r11,8),%rax       ; implicit exception: dispatches to 0x00007f91790ec8cc
  0x00007f91790ec2cd:   mov    %rax,%rdi
  0x00007f91790ec2d0:   movabs $0x5deece66d,%r10
  0x00007f91790ec2da:   imul   %r10,%rdi
  0x00007f91790ec2de:   add    $0xb,%rdi
  0x00007f91790ec2e2:   mov    %rdi,%r10
  0x00007f91790ec2e5:   movabs $0xffffffffffff,%rdx
  0x00007f91790ec2ef:   and    %rdx,%r10
  0x00007f91790ec2f2:   lock cmpxchg %r10,0x10(%r12,%r11,8)
  0x00007f91790ec2f9:   sete   %r10b
  0x00007f91790ec2fd:   movzbl %r10b,%r10d
  0x00007f91790ec301:   test   %r10d,%r10d
  0x00007f91790ec304:   je     0x00007f91790ec5e4
  0x00007f91790ec30a:   mov    0x18(%r12,%r8,8),%r11d
  0x00007f91790ec30f:   mov    0x10(%r12,%r11,8),%rax       ; implicit exception: dispatches to 0x00007f91790ec8dc
  0x00007f91790ec314:   mov    %rax,%rdx
  0x00007f91790ec317:   movabs $0x5deece66d,%r10
  0x00007f91790ec321:   imul   %r10,%rdx
  0x00007f91790ec325:   shr    $0x16,%rdi
  0x00007f91790ec329:   add    $0xb,%rdx
  0x00007f91790ec32d:   mov    %rdx,%r10
  0x00007f91790ec330:   movabs $0xffffffffffff,%r8
  0x00007f91790ec33a:   and    %r8,%r10
  0x00007f91790ec33d:   lock cmpxchg %r10,0x10(%r12,%r11,8)
  0x00007f91790ec344:   sete   %r10b
  0x00007f91790ec348:   movzbl %r10b,%r10d
  0x00007f91790ec34c:   and    $0x3ffffff,%rdi
  0x00007f91790ec353:   mov    %edi,%r8d
  0x00007f91790ec356:   movslq %r8d,%r8
  0x00007f91790ec359:   shl    $0x1b,%r8
  0x00007f91790ec35d:   data16 xchg %ax,%ax
  0x00007f91790ec360:   test   %r10d,%r10d
  0x00007f91790ec363:   je     0x00007f91790ec628
  0x00007f91790ec369:   shr    $0x15,%rdx
  0x00007f91790ec36d:   and    $0x7ffffff,%rdx
  0x00007f91790ec374:   mov    %edx,%r10d
  0x00007f91790ec377:   movslq %r10d,%r10
  0x00007f91790ec37a:   add    %r8,%r10
  0x00007f91790ec37d:   vcvtsi2sd %r10,%xmm0,%xmm0
  0x00007f91790ec382:   vmulsd -0x6ea(%rip),%xmm0,%xmm0        # 0x00007f91790ebca0
                                                            ;   {section_word}
  0x00007f91790ec38a:   mov    0xc(%r12,%r9,8),%r11d        ; implicit exception: dispatches to 0x00007f91790ec8ec
  0x00007f91790ec38f:   cmp    %r11d,%ebx
  0x00007f91790ec392:   jae    0x00007f91790ec5a6
  0x00007f91790ec398:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007f91790ec3a2:   mov    0x84(%r10),%r8d
  0x00007f91790ec3a9:   mov    0x70(%r10),%r11d
  0x00007f91790ec3ad:   lea    (%r12,%r9,8),%r10
  0x00007f91790ec3b1:   vmovsd %xmm0,0x10(%r10,%rbx,8)
  0x00007f91790ec3b8:   inc    %ebx
  0x00007f91790ec3ba:   cmp    %ecx,%ebx
  0x00007f91790ec3bc:   nopl   0x0(%rax)
  0x00007f91790ec3c0:   jl     0x00007f91790ec2c0
  0x00007f91790ec3c6:   mov    0x380(%r15),%r10             ; ImmutableOopMap {r11=NarrowOop r8=NarrowOop [40]=Oop [56]=Oop [64]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::ReadFilter_vector@60 (line 39)
  0x00007f91790ec3cd:   test   %eax,(%r10)                  ;   {poll}
  0x00007f91790ec3d0:   cmp    0x34(%rsp),%ebx
  0x00007f91790ec3d4:   jge    0x00007f91790ebda5
  0x00007f91790ec3da:   mov    %r11d,%r9d
  0x00007f91790ec3dd:   mov    0x34(%rsp),%ecx
  0x00007f91790ec3e1:   sub    %ebx,%ecx
  0x00007f91790ec3e3:   mov    0x34(%rsp),%r10d
  0x00007f91790ec3e8:   xor    %edi,%edi
  0x00007f91790ec3ea:   cmp    %ebx,%r10d
  0x00007f91790ec3ed:   cmovl  %edi,%ecx
  0x00007f91790ec3f0:   cmp    $0x3e8,%ecx
  0x00007f91790ec3f6:   mov    $0x3e8,%r11d
  0x00007f91790ec3fc:   cmova  %r11d,%ecx
  0x00007f91790ec400:   add    %ebx,%ecx
  0x00007f91790ec402:   jmpq   0x00007f91790ec2c3
  0x00007f91790ec407:   mov    0x9c(%r10),%r10d
  0x00007f91790ec40e:   mov    %r10d,0x48(%rsp)
  0x00007f91790ec413:   movabs $0x11f0de540,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007f91790ec41d:   vmovsd 0x88(%r10),%xmm0
  0x00007f91790ec426:   vmovsd 0x90(%r10),%xmm1
  0x00007f91790ec42f:   mov    0x78(%r10),%r11d
  0x00007f91790ec433:   mov    %r11d,0x4c(%rsp)
  0x00007f91790ec438:   mov    %r9d,%r11d
  0x00007f91790ec43b:   nopl   0x0(%rax,%rax,1)
  0x00007f91790ec440:   jmpq   0x00007f91790ebde0
  0x00007f91790ec445:   vzeroupper 
  0x00007f91790ec448:   add    $0x110,%rsp
  0x00007f91790ec44f:   pop    %rbp
  0x00007f91790ec450:   cmp    0x378(%r15),%rsp             ;   {poll_return}
  0x00007f91790ec457:   ja     0x00007f91790ec9e7
  0x00007f91790ec45d:   retq   
  0x00007f91790ec45e:   mov    0x28(%rsi),%rdi
  0x00007f91790ec462:   mov    (%rdi),%ecx
  0x00007f91790ec464:   add    $0x8,%rdi
  0x00007f91790ec468:   test   %rax,%rax
  0x00007f91790ec46b:   repnz scas %es:(%rdi),%rax
  0x00007f91790ec46e:   jne    0x00007f91790ec478
  0x00007f91790ec474:   mov    %rax,0x20(%rsi)
  0x00007f91790ec478:   je     0x00007f91790ebd49
  0x00007f91790ec47e:   mov    $0xffffff8d,%esi
  0x00007f91790ec483:   mov    0x20(%rsp),%ebp
  0x00007f91790ec487:   mov    %r8,0x20(%rsp)
  0x00007f91790ec48c:   mov    0x30(%rsp),%r10d
  0x00007f91790ec491:   mov    %r10d,0x28(%rsp)
  0x00007f91790ec496:   mov    %ebx,0x30(%rsp)
  0x00007f91790ec49a:   xchg   %ax,%ax
  0x00007f91790ec49c:   vzeroupper 
  0x00007f91790ec49f:   callq  0x00007f9179054580           ; ImmutableOopMap {[32]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@39 (line 39)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec4a4:   vmovq  %xmm1,0x68(%rsp)
  0x00007f91790ec4aa:   vmovq  %xmm2,0x60(%rsp)
  0x00007f91790ec4b0:   vmovdqu64 %zmm3,0x80(%rsp)
  0x00007f91790ec4b8:   movabs $0x800001ab8,%rsi            ;   {metadata({type array bool})}
  0x00007f91790ec4c2:   mov    $0x8,%edx
  0x00007f91790ec4c7:   nop
  0x00007f91790ec4c8:   vzeroupper 
  0x00007f91790ec4cb:   callq  0x00007f917906a900           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [76]=NarrowOop }
                                                            ;*invokestatic binaryOp {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.Double512Vector$Double512Mask::and@29 (line 685)
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::and@2 (line 554)
                                                            ; - test::DoubleRange_testDoubleVector@20 (line 25)
                                                            ; - test::ReadFilter_vector@77 (line 43)
                                                            ;   {runtime_call _new_array_Java}
  0x00007f91790ec4d0:   mov    %rax,%rbp
  0x00007f91790ec4d3:   vmovdqu64 0x80(%rsp),%zmm3
  0x00007f91790ec4db:   vmovq  0x60(%rsp),%xmm2
  0x00007f91790ec4e1:   vmovq  0x68(%rsp),%xmm1
  0x00007f91790ec4e7:   jmpq   0x00007f91790ebebc
  0x00007f91790ec4ec:   vmovq  %xmm0,0x58(%rsp)
  0x00007f91790ec4f2:   vmovdqu64 %zmm3,0x80(%rsp)
  0x00007f91790ec4fa:   movabs $0x80104ac38,%rsi            ;   {metadata('jdk/incubator/vector/Double512Vector$Double512Mask')}
  0x00007f91790ec504:   vmovq  %xmm1,0x60(%rsp)
  0x00007f91790ec50a:   vmovq  %xmm2,0x68(%rsp)
  0x00007f91790ec510:   vzeroupper 
  0x00007f91790ec513:   callq  0x00007f917906d280           ; ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop [76]=NarrowOop }
                                                            ;*invokestatic binaryOp {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.Double512Vector$Double512Mask::and@29 (line 685)
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::and@2 (line 554)
                                                            ; - test::DoubleRange_testDoubleVector@20 (line 25)
                                                            ; - test::ReadFilter_vector@77 (line 43)
                                                            ;   {runtime_call _new_instance_Java}
  0x00007f91790ec518:   vmovdqu64 0x80(%rsp),%zmm3
  0x00007f91790ec520:   vmovq  0x58(%rsp),%xmm0
  0x00007f91790ec526:   jmpq   0x00007f91790ebf2a
  0x00007f91790ec52b:   vmovdqu64 %zmm2,0x80(%rsp)
  0x00007f91790ec533:   vmovq  %xmm0,0x60(%rsp)
  0x00007f91790ec539:   movabs $0x8000029f8,%rsi            ;   {metadata({type array long})}
  0x00007f91790ec543:   mov    $0x8,%edx
  0x00007f91790ec548:   vzeroupper 
  0x00007f91790ec54b:   callq  0x00007f917906a900           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [76]=NarrowOop [88]=Oop }
                                                            ;*invokestatic convert {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractVector::convert0@322 (line 730)
                                                            ; - jdk.incubator.vector.AbstractVector::asVectorRawTemplate@11 (line 179)
                                                            ; - jdk.incubator.vector.Double512Vector::asVectorRaw@2 (line 183)
                                                            ; - jdk.incubator.vector.DoubleVector::viewAsIntegralLanes@9 (line 3620)
                                                            ; - test::ReadFilter_vector@93 (line 46)
                                                            ;   {runtime_call _new_array_Java}
  0x00007f91790ec550:   mov    %rax,%rbp
  0x00007f91790ec553:   vmovq  0x60(%rsp),%xmm0
  0x00007f91790ec559:   vmovdqu64 0x80(%rsp),%zmm2
  0x00007f91790ec561:   jmpq   0x00007f91790ebfc0
  0x00007f91790ec566:   vmovdqu64 %zmm1,0x80(%rsp)
  0x00007f91790ec56e:   vmovq  %xmm0,0x60(%rsp)
  0x00007f91790ec574:   movabs $0x80105e640,%rsi            ;   {metadata('jdk/incubator/vector/Long512Vector')}
  0x00007f91790ec57e:   vmovdqu64 %zmm2,0xc0(%rsp)
  0x00007f91790ec586:   xchg   %ax,%ax
  0x00007f91790ec588:   vzeroupper 
  0x00007f91790ec58b:   callq  0x00007f917906d280           ; ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop [76]=NarrowOop [88]=Oop }
                                                            ;*invokestatic convert {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractVector::convert0@322 (line 730)
                                                            ; - jdk.incubator.vector.AbstractVector::asVectorRawTemplate@11 (line 179)
                                                            ; - jdk.incubator.vector.Double512Vector::asVectorRaw@2 (line 183)
                                                            ; - jdk.incubator.vector.DoubleVector::viewAsIntegralLanes@9 (line 3620)
                                                            ; - test::ReadFilter_vector@93 (line 46)
                                                            ;   {runtime_call _new_instance_Java}
  0x00007f91790ec590:   mov    %rax,%rdi
  0x00007f91790ec593:   vmovq  0x60(%rsp),%xmm0
  0x00007f91790ec599:   vmovdqu64 0x80(%rsp),%zmm1
  0x00007f91790ec5a1:   jmpq   0x00007f91790ec00a
  0x00007f91790ec5a6:   mov    $0xffffffe4,%esi
  0x00007f91790ec5ab:   mov    0x20(%rsp),%ebp
  0x00007f91790ec5af:   mov    0x28(%rsp),%r10
  0x00007f91790ec5b4:   mov    %r10,0x20(%rsp)
  0x00007f91790ec5b9:   mov    0x30(%rsp),%r11d
  0x00007f91790ec5be:   mov    %r11d,0x28(%rsp)
  0x00007f91790ec5c3:   mov    0x34(%rsp),%r10d
  0x00007f91790ec5c8:   mov    %r10d,0x2c(%rsp)
  0x00007f91790ec5cd:   mov    %r9d,0x34(%rsp)
  0x00007f91790ec5d2:   mov    %ebx,0x38(%rsp)
  0x00007f91790ec5d6:   vmovsd %xmm0,0x40(%rsp)
  0x00007f91790ec5dc:   vzeroupper 
  0x00007f91790ec5df:   callq  0x00007f9179054580           ; ImmutableOopMap {[32]=Oop [52]=NarrowOop }
                                                            ;*dastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@56 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec5e4:   mov    $0xffffff45,%esi
  0x00007f91790ec5e9:   mov    0x20(%rsp),%ebp
  0x00007f91790ec5ed:   mov    0x28(%rsp),%rcx
  0x00007f91790ec5f2:   mov    %rcx,0x20(%rsp)
  0x00007f91790ec5f7:   mov    0x30(%rsp),%edi
  0x00007f91790ec5fb:   mov    %edi,0x28(%rsp)
  0x00007f91790ec5ff:   mov    0x34(%rsp),%ecx
  0x00007f91790ec603:   mov    %ecx,0x2c(%rsp)
  0x00007f91790ec607:   mov    %r9d,0x34(%rsp)
  0x00007f91790ec60c:   mov    %ebx,0x38(%rsp)
  0x00007f91790ec610:   mov    %r8d,0x3c(%rsp)
  0x00007f91790ec615:   mov    %r11d,0x40(%rsp)
  0x00007f91790ec61a:   mov    %r10d,0x44(%rsp)
  0x00007f91790ec61f:   nop
  0x00007f91790ec620:   vzeroupper 
  0x00007f91790ec623:   callq  0x00007f9179054580           ; ImmutableOopMap {[32]=Oop [52]=NarrowOop [60]=NarrowOop [64]=NarrowOop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) java.util.Random::next@35 (line 444)
                                                            ; - java.util.Random::nextDouble@3 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec628:   mov    $0xffffff45,%esi
  0x00007f91790ec62d:   mov    0x20(%rsp),%ebp
  0x00007f91790ec631:   mov    0x28(%rsp),%rcx
  0x00007f91790ec636:   mov    %rcx,0x20(%rsp)
  0x00007f91790ec63b:   mov    0x30(%rsp),%edi
  0x00007f91790ec63f:   mov    %edi,0x28(%rsp)
  0x00007f91790ec643:   mov    0x34(%rsp),%ecx
  0x00007f91790ec647:   mov    %ecx,0x2c(%rsp)
  0x00007f91790ec64b:   mov    %r9d,0x34(%rsp)
  0x00007f91790ec650:   mov    %ebx,0x38(%rsp)
  0x00007f91790ec654:   mov    %r8,0x40(%rsp)
  0x00007f91790ec659:   mov    %r11d,0x3c(%rsp)
  0x00007f91790ec65e:   mov    %r10d,0x48(%rsp)
  0x00007f91790ec663:   nop
  0x00007f91790ec664:   vzeroupper 
  0x00007f91790ec667:   callq  0x00007f9179054580           ; ImmutableOopMap {[32]=Oop [52]=NarrowOop [60]=NarrowOop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) java.util.Random::next@35 (line 444)
                                                            ; - java.util.Random::nextDouble@13 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec66c:   mov    $0xffffffe4,%esi
  0x00007f91790ec671:   mov    0x30(%rsp),%r8d
  0x00007f91790ec676:   mov    %r8d,0x24(%rsp)
  0x00007f91790ec67b:   mov    0x34(%rsp),%r10d
  0x00007f91790ec680:   mov    %r10d,0x30(%rsp)
  0x00007f91790ec685:   mov    %r11d,0x34(%rsp)
  0x00007f91790ec68a:   xchg   %ax,%ax
  0x00007f91790ec68c:   vzeroupper 
  0x00007f91790ec68f:   callq  0x00007f9179054580           ; ImmutableOopMap {[40]=Oop [52]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.DoubleVector::fromArray@9 (line 2773)
                                                            ; - test::ReadFilter_vector@70 (line 42)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec694:   mov    $0xffffffe4,%esi
  0x00007f91790ec699:   mov    0x30(%rsp),%r10d
  0x00007f91790ec69e:   mov    %r10d,0x24(%rsp)
  0x00007f91790ec6a3:   mov    0x34(%rsp),%r11d
  0x00007f91790ec6a8:   mov    %r11d,0x30(%rsp)
  0x00007f91790ec6ad:   vmovq  %xmm0,0x40(%rsp)
  0x00007f91790ec6b3:   vmovdqu64 %zmm1,0x80(%rsp)
  0x00007f91790ec6bb:   nop
  0x00007f91790ec6bc:   vzeroupper 
  0x00007f91790ec6bf:   callq  0x00007f9179054580           ; ImmutableOopMap {[40]=Oop [76]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.LongVector::intoArray@7 (line 3105)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec6c4:   mov    $0xffffffe4,%esi
  0x00007f91790ec6c9:   mov    0x30(%rsp),%r8d
  0x00007f91790ec6ce:   mov    %r8d,0x24(%rsp)
  0x00007f91790ec6d3:   mov    0x34(%rsp),%r10d
  0x00007f91790ec6d8:   mov    %r10d,0x30(%rsp)
  0x00007f91790ec6dd:   mov    %r11d,0x40(%rsp)
  0x00007f91790ec6e2:   xchg   %ax,%ax
  0x00007f91790ec6e4:   vzeroupper 
  0x00007f91790ec6e7:   callq  0x00007f9179054580           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2953)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec6ec:   mov    $0xffffffe4,%esi
  0x00007f91790ec6f1:   mov    0x48(%rsp),%ebp
  0x00007f91790ec6f5:   mov    0x30(%rsp),%ecx
  0x00007f91790ec6f9:   mov    %ecx,0x20(%rsp)
  0x00007f91790ec6fd:   mov    0x34(%rsp),%r9d
  0x00007f91790ec702:   mov    %r9d,0x24(%rsp)
  0x00007f91790ec707:   mov    0x38(%rsp),%r9
  0x00007f91790ec70c:   mov    %r9,0x28(%rsp)
  0x00007f91790ec711:   mov    %r11d,0x30(%rsp)
  0x00007f91790ec716:   mov    %r8d,0x34(%rsp)
  0x00007f91790ec71b:   mov    %r10d,0x38(%rsp)
  0x00007f91790ec720:   vmovq  0x60(%rsp),%xmm1
  0x00007f91790ec726:   vmovq  %xmm1,0x40(%rsp)
  0x00007f91790ec72c:   vmovdqu %ymm0,0x60(%rsp)
  0x00007f91790ec732:   xchg   %ax,%ax
  0x00007f91790ec734:   vzeroupper 
  0x00007f91790ec737:   callq  0x00007f9179054580           ; ImmutableOopMap {[40]=Oop [48]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 3226)
                                                            ; - test::ReadFilter_vector@140 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec73c:   mov    $0xffffffcc,%esi
  0x00007f91790ec741:   mov    0x30(%rsp),%r8d
  0x00007f91790ec746:   mov    %r8d,0x24(%rsp)
  0x00007f91790ec74b:   mov    0x34(%rsp),%r10d
  0x00007f91790ec750:   mov    %r10d,0x30(%rsp)
  0x00007f91790ec755:   mov    %r11d,0x34(%rsp)
  0x00007f91790ec75a:   xchg   %ax,%ax
  0x00007f91790ec75c:   vzeroupper 
  0x00007f91790ec75f:   callq  0x00007f9179054580           ; ImmutableOopMap {[40]=Oop [52]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.DoubleVector::fromArray@9 (line 2773)
                                                            ; - test::ReadFilter_vector@70 (line 42)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec764:   mov    $0xffffffcc,%esi
  0x00007f91790ec769:   mov    0x30(%rsp),%r11d
  0x00007f91790ec76e:   mov    %r11d,0x24(%rsp)
  0x00007f91790ec773:   mov    0x34(%rsp),%r10d
  0x00007f91790ec778:   mov    %r10d,0x30(%rsp)
  0x00007f91790ec77d:   vmovq  %xmm0,0x40(%rsp)
  0x00007f91790ec783:   vmovdqu64 %zmm1,0x80(%rsp)
  0x00007f91790ec78b:   nop
  0x00007f91790ec78c:   vzeroupper 
  0x00007f91790ec78f:   callq  0x00007f9179054580           ; ImmutableOopMap {[40]=Oop [76]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.LongVector::intoArray@7 (line 3105)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec794:   mov    $0xffffffcc,%esi
  0x00007f91790ec799:   mov    0x30(%rsp),%r10d
  0x00007f91790ec79e:   mov    %r10d,0x24(%rsp)
  0x00007f91790ec7a3:   mov    0x34(%rsp),%r8d
  0x00007f91790ec7a8:   mov    %r8d,0x30(%rsp)
  0x00007f91790ec7ad:   mov    %r11d,0x40(%rsp)
  0x00007f91790ec7b2:   xchg   %ax,%ax
  0x00007f91790ec7b4:   vzeroupper 
  0x00007f91790ec7b7:   callq  0x00007f9179054580           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2953)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec7bc:   mov    $0x4b,%esi
  0x00007f91790ec7c1:   mov    %r8d,%ebp
  0x00007f91790ec7c4:   mov    0x30(%rsp),%r11d
  0x00007f91790ec7c9:   mov    %r11d,0x20(%rsp)
  0x00007f91790ec7ce:   mov    0x34(%rsp),%r10d
  0x00007f91790ec7d3:   mov    %r10d,0x24(%rsp)
  0x00007f91790ec7d8:   vmovdqu %ymm0,0x40(%rsp)
  0x00007f91790ec7de:   xchg   %ax,%ax
  0x00007f91790ec7e0:   vzeroupper 
  0x00007f91790ec7e3:   callq  0x00007f9179054580           ; ImmutableOopMap {[56]=Oop }
                                                            ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::cast@16 (line 644)
                                                            ; - test::ReadFilter_vector@124 (line 50)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec7e8:   mov    $0xffffffde,%esi
  0x00007f91790ec7ed:   mov    %rax,%rbp
  0x00007f91790ec7f0:   vzeroupper 
  0x00007f91790ec7f3:   callq  0x00007f9179054580           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::cast@59 (line 646)
                                                            ; - test::ReadFilter_vector@124 (line 50)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec7f8:   mov    $0xffffffde,%esi
  0x00007f91790ec7fd:   mov    %rax,%rbp
  0x00007f91790ec800:   vzeroupper 
  0x00007f91790ec803:   callq  0x00007f9179054580           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::compress@4 (line 480)
                                                            ; - jdk.incubator.vector.Int256Vector::compress@2 (line 41)
                                                            ; - test::ReadFilter_vector@127 (line 50)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec808:   mov    $0xffffffcc,%esi
  0x00007f91790ec80d:   mov    0x48(%rsp),%ebp
  0x00007f91790ec811:   mov    0x30(%rsp),%ecx
  0x00007f91790ec815:   mov    %ecx,0x20(%rsp)
  0x00007f91790ec819:   mov    0x34(%rsp),%r9d
  0x00007f91790ec81e:   mov    %r9d,0x24(%rsp)
  0x00007f91790ec823:   mov    0x38(%rsp),%r9
  0x00007f91790ec828:   mov    %r9,0x28(%rsp)
  0x00007f91790ec82d:   mov    %r11d,0x30(%rsp)
  0x00007f91790ec832:   mov    %r8d,0x34(%rsp)
  0x00007f91790ec837:   mov    %r10d,0x38(%rsp)
  0x00007f91790ec83c:   vmovq  0x60(%rsp),%xmm1
  0x00007f91790ec842:   vmovq  %xmm1,0x40(%rsp)
  0x00007f91790ec848:   vmovdqu %ymm0,0x60(%rsp)
  0x00007f91790ec84e:   xchg   %ax,%ax
  0x00007f91790ec850:   vzeroupper 
  0x00007f91790ec853:   callq  0x00007f9179054580           ; ImmutableOopMap {[40]=Oop [48]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 3226)
                                                            ; - test::ReadFilter_vector@140 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec858:   xor    %r8d,%r8d
  0x00007f91790ec85b:   mov    $0xffffff76,%esi
  0x00007f91790ec860:   mov    0x20(%rsp),%ebp
  0x00007f91790ec864:   mov    %r8,0x20(%rsp)
  0x00007f91790ec869:   mov    0x30(%rsp),%r10d
  0x00007f91790ec86e:   mov    %r10d,0x28(%rsp)
  0x00007f91790ec873:   mov    %ebx,0x30(%rsp)
  0x00007f91790ec877:   nop
  0x00007f91790ec878:   vzeroupper 
  0x00007f91790ec87b:   callq  0x00007f9179054580           ; ImmutableOopMap {[32]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@39 (line 39)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec880:   mov    $0xffffffde,%esi
  0x00007f91790ec885:   mov    0x20(%rsp),%ebp
  0x00007f91790ec889:   mov    0x28(%rsp),%r8
  0x00007f91790ec88e:   mov    %r8,0x20(%rsp)
  0x00007f91790ec893:   mov    0x30(%rsp),%r9d
  0x00007f91790ec898:   mov    %r9d,0x28(%rsp)
  0x00007f91790ec89d:   mov    0x34(%rsp),%r8d
  0x00007f91790ec8a2:   mov    %r8d,0x2c(%rsp)
  0x00007f91790ec8a7:   mov    %r11d,0x34(%rsp)
  0x00007f91790ec8ac:   mov    %r10d,0x38(%rsp)
  0x00007f91790ec8b1:   data16 xchg %ax,%ax
  0x00007f91790ec8b4:   vzeroupper 
  0x00007f91790ec8b7:   callq  0x00007f9179054580           ; ImmutableOopMap {[32]=Oop [52]=NarrowOop [56]=NarrowOop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@4 (line 3918)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2955)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec8bc:   mov    $0xfffffff6,%esi
  0x00007f91790ec8c1:   data16 xchg %ax,%ax
  0x00007f91790ec8c4:   vzeroupper 
  0x00007f91790ec8c7:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*invokevirtual nextDouble {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec8cc:   mov    $0xfffffff6,%esi
  0x00007f91790ec8d1:   data16 xchg %ax,%ax
  0x00007f91790ec8d4:   vzeroupper 
  0x00007f91790ec8d7:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*invokevirtual get {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Random::next@8 (line 442)
                                                            ; - java.util.Random::nextDouble@3 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec8dc:   mov    $0xfffffff6,%esi
  0x00007f91790ec8e1:   data16 xchg %ax,%ax
  0x00007f91790ec8e4:   vzeroupper 
  0x00007f91790ec8e7:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*invokevirtual get {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Random::next@8 (line 442)
                                                            ; - java.util.Random::nextDouble@13 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec8ec:   mov    $0xfffffff6,%esi
  0x00007f91790ec8f1:   mov    %ebx,%ebp
  0x00007f91790ec8f3:   vmovsd %xmm0,0x20(%rsp)
  0x00007f91790ec8f9:   data16 xchg %ax,%ax
  0x00007f91790ec8fc:   vzeroupper 
  0x00007f91790ec8ff:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*dastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@56 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec904:   mov    $0xfffffff6,%esi
  0x00007f91790ec909:   data16 xchg %ax,%ax
  0x00007f91790ec90c:   vzeroupper 
  0x00007f91790ec90f:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.DoubleVector::fromArray@8 (line 2773)
                                                            ; - test::ReadFilter_vector@70 (line 42)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec914:   mov    $0xfffffff6,%esi
  0x00007f91790ec919:   data16 xchg %ax,%ax
  0x00007f91790ec91c:   vzeroupper 
  0x00007f91790ec91f:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.LongVector::intoArray@6 (line 3105)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec924:   mov    $0xfffffff6,%esi
  0x00007f91790ec929:   data16 xchg %ax,%ax
  0x00007f91790ec92c:   vzeroupper 
  0x00007f91790ec92f:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@8 (line 2953)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec934:   mov    $0xfffffff4,%esi
  0x00007f91790ec939:   mov    0x48(%rsp),%ebp
  0x00007f91790ec93d:   mov    0x30(%rsp),%r10d
  0x00007f91790ec942:   mov    %r10d,0x20(%rsp)
  0x00007f91790ec947:   mov    0x34(%rsp),%r11d
  0x00007f91790ec94c:   mov    %r11d,0x24(%rsp)
  0x00007f91790ec951:   data16 xchg %ax,%ax
  0x00007f91790ec954:   vzeroupper 
  0x00007f91790ec957:   callq  0x00007f9179054580           ; ImmutableOopMap {[56]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Double512Vector$Double512Mask::cast@59 (line 646)
                                                            ; - test::ReadFilter_vector@124 (line 50)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec95c:   mov    $0xfffffff6,%esi
  0x00007f91790ec961:   data16 xchg %ax,%ax
  0x00007f91790ec964:   vzeroupper 
  0x00007f91790ec967:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@6 (line 3226)
                                                            ; - test::ReadFilter_vector@140 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec96c:   mov    $0xffffff45,%esi
  0x00007f91790ec971:   mov    0x20(%rsp),%ebp
  0x00007f91790ec975:   mov    0x28(%rsp),%r8
  0x00007f91790ec97a:   mov    %r8,0x20(%rsp)
  0x00007f91790ec97f:   mov    0x30(%rsp),%r8d
  0x00007f91790ec984:   mov    %r8d,0x28(%rsp)
  0x00007f91790ec989:   mov    0x34(%rsp),%r9d
  0x00007f91790ec98e:   mov    %r9d,0x2c(%rsp)
  0x00007f91790ec993:   mov    0x48(%rsp),%r8d
  0x00007f91790ec998:   mov    %r8d,0x30(%rsp)
  0x00007f91790ec99d:   mov    %r11d,0x34(%rsp)
  0x00007f91790ec9a2:   mov    0x40(%rsp),%r11
  0x00007f91790ec9a7:   mov    %r11,0x38(%rsp)
  0x00007f91790ec9ac:   mov    %r10d,0x44(%rsp)
  0x00007f91790ec9b1:   data16 xchg %ax,%ax
  0x00007f91790ec9b4:   vzeroupper 
  0x00007f91790ec9b7:   callq  0x00007f9179054580           ; ImmutableOopMap {[32]=Oop [52]=NarrowOop [56]=Oop [68]=NarrowOop }
                                                            ;*ifnull {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 309)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3918)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2955)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790ec9bc:   jmp    0x00007f91790ec9be
  0x00007f91790ec9be:   mov    %rax,%rsi
  0x00007f91790ec9c1:   jmp    0x00007f91790ec9d7
  0x00007f91790ec9c3:   jmp    0x00007f91790ec9c5
  0x00007f91790ec9c5:   mov    %rax,%rsi
  0x00007f91790ec9c8:   jmp    0x00007f91790ec9d7
  0x00007f91790ec9ca:   mov    %rax,%rsi
  0x00007f91790ec9cd:   jmp    0x00007f91790ec9d7
  0x00007f91790ec9cf:   mov    %rax,%rsi
  0x00007f91790ec9d2:   jmp    0x00007f91790ec9d7
  0x00007f91790ec9d4:   mov    %rax,%rsi
  0x00007f91790ec9d7:   vzeroupper 
  0x00007f91790ec9da:   add    $0x110,%rsp
  0x00007f91790ec9e1:   pop    %rbp
  0x00007f91790ec9e2:   jmpq   0x00007f9179076100           ;   {runtime_call _rethrow_Java}
  0x00007f91790ec9e7:   movabs $0x7f91790ec450,%r10         ;   {internal_word}
  0x00007f91790ec9f1:   mov    %r10,0x390(%r15)
  0x00007f91790ec9f8:   jmpq   0x00007f9179053400           ;   {runtime_call SafepointBlob}
  0x00007f91790ec9fd:   hlt    
  0x00007f91790ec9fe:   hlt    
  0x00007f91790ec9ff:   hlt    
[Exception Handler]
  0x00007f91790eca00:   jmpq   0x00007f9179068a80           ;   {no_reloc}
[Deopt Handler Code]
  0x00007f91790eca05:   callq  0x00007f91790eca0a
  0x00007f91790eca0a:   subq   $0x5,(%rsp)
  0x00007f91790eca0f:   jmpq   0x00007f91790548a0           ;   {runtime_call DeoptimizationBlob}
  0x00007f91790eca14:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f91790eca1e:   jmpq   0x00007f91790eca1e           ;   {runtime_call}
  0x00007f91790eca23:   movabs $0x800044d70,%rbx            ;   {static_stub}
  0x00007f91790eca2d:   jmpq   0x00007f917908be94           ;   {runtime_call I2C/C2I adapters}
  0x00007f91790eca32:   hlt    
  0x00007f91790eca33:   hlt    
  0x00007f91790eca34:   hlt    
  0x00007f91790eca35:   hlt    
  0x00007f91790eca36:   hlt    
  0x00007f91790eca37:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     315  354             test::ReadFilter_vector (163 bytes)
 total in heap  [0x00007f91790d3390,0x00007f91790d4138] = 3496
 relocation     [0x00007f91790d34e0,0x00007f91790d3520] = 64
 constants      [0x00007f91790d3520,0x00007f91790d3540] = 32
 main code      [0x00007f91790d3540,0x00007f91790d3a58] = 1304
 stub code      [0x00007f91790d3a58,0x00007f91790d3a70] = 24
 oops           [0x00007f91790d3a70,0x00007f91790d3aa0] = 48
 metadata       [0x00007f91790d3aa0,0x00007f91790d3b80] = 224
 scopes data    [0x00007f91790d3b80,0x00007f91790d3f48] = 968
 scopes pcs     [0x00007f91790d3f48,0x00007f91790d40b8] = 368
 dependencies   [0x00007f91790d40b8,0x00007f91790d40f0] = 56
 nul chk table  [0x00007f91790d40f0,0x00007f91790d4138] = 72

[Disassembly]
--------------------------------------------------------------------------------

[Constant Pool]
             Address          hex4                    hex8      
  0x00007f91790d3520:   0x00000000      0x3ca0000000000000      
  0x00007f91790d3524:   0x3ca00000                              
  0x00007f91790d3528:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007f91790d352c:   0xf4f4f4f4                              
  0x00007f91790d3530:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007f91790d3534:   0xf4f4f4f4                              
  0x00007f91790d3538:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007f91790d353c:   0xf4f4f4f4                              

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007f9130401c70} 'ReadFilter_vector' '()V' in 'test'
  #           [sp+0xa0]  (sp of caller)
  0x00007f91790d3540:   mov    %eax,-0x14000(%rsp)          ;   {no_reloc}
  0x00007f91790d3547:   push   %rbp
  0x00007f91790d3548:   sub    $0x90,%rsp
  0x00007f91790d354f:   movabs $0x11f0de540,%rcx            ;   {oop(a 'java/lang/Class'{0x000000011f0de540} = 'test')}
  0x00007f91790d3559:   mov    $0xfffffff8,%r10d
  0x00007f91790d355f:   and    0x98(%rcx),%r10d
  0x00007f91790d3566:   mov    %r12d,0x9c(%rcx)
  0x00007f91790d356d:   test   %r10d,%r10d
  0x00007f91790d3570:   jle    0x00007f91790d37c9
  0x00007f91790d3576:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f91790d3580:   cmp    $0x7ffffff8,%r10d
  0x00007f91790d3587:   jg     0x00007f91790d39a8
  0x00007f91790d358d:   movabs $0x5deece66d,%r14
  0x00007f91790d3597:   movabs $0xffffffffffff,%rdx
  0x00007f91790d35a1:   xor    %r11d,%r11d
  0x00007f91790d35a4:   xor    %edi,%edi
  0x00007f91790d35a6:   data16 nopw 0x0(%rax,%rax,1)
  0x00007f91790d35b0:   mov    0x84(%rcx),%r8d
  0x00007f91790d35b7:   nopw   0x0(%rax,%rax,1)
  0x00007f91790d35c0:   mov    0x18(%r12,%r8,8),%ebx        ; implicit exception: dispatches to 0x00007f91790d39bc
  0x00007f91790d35c5:   mov    0x10(%r12,%rbx,8),%rax       ; implicit exception: dispatches to 0x00007f91790d39cc
  0x00007f91790d35ca:   mov    %rax,%rsi
  0x00007f91790d35cd:   imul   %r14,%rsi
  0x00007f91790d35d1:   mov    0x70(%rcx),%r9d
  0x00007f91790d35d5:   add    $0xb,%rsi
  0x00007f91790d35d9:   mov    %rsi,%rbp
  0x00007f91790d35dc:   and    %rdx,%rbp
  0x00007f91790d35df:   lock cmpxchg %rbp,0x10(%r12,%rbx,8)
  0x00007f91790d35e6:   sete   %r13b
  0x00007f91790d35ea:   movzbl %r13b,%r13d
  0x00007f91790d35ee:   test   %r13d,%r13d
  0x00007f91790d35f1:   je     0x00007f91790d3808
  0x00007f91790d35f7:   mov    0x18(%r12,%r8,8),%r8d
  0x00007f91790d35fc:   nopl   0x0(%rax)
  0x00007f91790d3600:   mov    0x10(%r12,%r8,8),%rax        ; implicit exception: dispatches to 0x00007f91790d39dc
  0x00007f91790d3605:   mov    %rax,%rbp
  0x00007f91790d3608:   imul   %r14,%rbp
  0x00007f91790d360c:   shr    $0x16,%rsi
  0x00007f91790d3610:   add    $0xb,%rbp
  0x00007f91790d3614:   mov    %rbp,%rbx
  0x00007f91790d3617:   and    %rdx,%rbx
  0x00007f91790d361a:   lock cmpxchg %rbx,0x10(%r12,%r8,8)
  0x00007f91790d3621:   sete   %bl
  0x00007f91790d3624:   movzbl %bl,%ebx
  0x00007f91790d3627:   and    $0x3ffffff,%rsi
  0x00007f91790d362e:   mov    %esi,%eax
  0x00007f91790d3630:   movslq %eax,%rax
  0x00007f91790d3633:   shl    $0x1b,%rax
  0x00007f91790d3637:   test   %ebx,%ebx
  0x00007f91790d3639:   je     0x00007f91790d3838
  0x00007f91790d363f:   shr    $0x15,%rbp
  0x00007f91790d3643:   and    $0x7ffffff,%rbp
  0x00007f91790d364a:   mov    %ebp,%ebx
  0x00007f91790d364c:   movslq %ebx,%r8
  0x00007f91790d364f:   add    %rax,%r8
  0x00007f91790d3652:   vcvtsi2sd %r8,%xmm0,%xmm0
  0x00007f91790d3657:   vmulsd -0x13f(%rip),%xmm0,%xmm0        # 0x00007f91790d3520
                                                            ;   {section_word}
  0x00007f91790d365f:   nop
  0x00007f91790d3660:   mov    0xc(%r12,%r9,8),%ebx         ; implicit exception: dispatches to 0x00007f91790d39ec
  0x00007f91790d3665:   cmp    %ebx,%edi
  0x00007f91790d3667:   jae    0x00007f91790d37e2
  0x00007f91790d366d:   lea    (%r12,%r9,8),%r8
  0x00007f91790d3671:   vmovsd %xmm0,0x10(%r8,%rdi,8)
  0x00007f91790d3678:   inc    %edi
  0x00007f91790d367a:   nopw   0x0(%rax,%rax,1)
  0x00007f91790d3680:   cmp    $0x8,%edi
  0x00007f91790d3683:   jl     0x00007f91790d35b0
  0x00007f91790d3689:   mov    0x70(%rcx),%r8d
  0x00007f91790d368d:   mov    0xc(%r12,%r8,8),%r9d         ; implicit exception: dispatches to 0x00007f91790d3a00
  0x00007f91790d3692:   mov    %r9d,%ebp
  0x00007f91790d3695:   add    $0xfffffff9,%ebp
  0x00007f91790d3698:   test   %ebp,%ebp
  0x00007f91790d369a:   nopw   0x0(%rax,%rax,1)
  0x00007f91790d36a0:   jl     0x00007f91790d3908
  0x00007f91790d36a6:   cmp    $0x7,%r9d
  0x00007f91790d36aa:   je     0x00007f91790d3868
  0x00007f91790d36b0:   mov    0x78(%rcx),%ebx
  0x00007f91790d36b3:   mov    0xc(%r12,%rbx,8),%edi        ; implicit exception: dispatches to 0x00007f91790d3a10
  0x00007f91790d36b8:   vmovdqu32 0x10(%r12,%r8,8),%zmm0
  0x00007f91790d36c3:   vmovsd 0x90(%rcx),%xmm1
  0x00007f91790d36cb:   vmovsd 0x88(%rcx),%xmm2
  0x00007f91790d36d3:   add    $0xfffffff9,%edi
  0x00007f91790d36d6:   vbroadcastsd %xmm2,%zmm2
  0x00007f91790d36dc:   vbroadcastsd %xmm1,%zmm1
  0x00007f91790d36e2:   mov    0x9c(%rcx),%r8d
  0x00007f91790d36e9:   vcmple_oqpd %zmm1,%zmm0,%k7
  0x00007f91790d36f0:   vcmpge_oqpd %zmm2,%zmm0,%k6
  0x00007f91790d36f7:   kandb  %k7,%k6,%k7
  0x00007f91790d36fb:   kmovq  %k7,%k6
  0x00007f91790d3700:   vcompresspd %zmm0,%zmm0{%k6}{z}
  0x00007f91790d3706:   vpmovm2b %k7,%xmm2
  0x00007f91790d370c:   vpabsb %xmm2,%xmm2
  0x00007f91790d3711:   test   %edi,%edi
  0x00007f91790d3713:   jl     0x00007f91790d3924
  0x00007f91790d3719:   cmp    %edi,%r8d
  0x00007f91790d371c:   nopl   0x0(%rax)
  0x00007f91790d3720:   jae    0x00007f91790d3884
  0x00007f91790d3726:   mov    0x80(%rcx),%edi
  0x00007f91790d372c:   mov    %r8d,%r9d
  0x00007f91790d372f:   shl    $0x3,%rbx
  0x00007f91790d3733:   vmovdqu32 %zmm0,0x10(%rbx,%r9,8)
  0x00007f91790d373e:   xchg   %ax,%ax
  0x00007f91790d3740:   mov    0xc(%r12,%rdi,8),%ebp        ; implicit exception: dispatches to 0x00007f91790d3a20
  0x00007f91790d3745:   add    $0xfffffff9,%ebp
  0x00007f91790d3748:   test   %ebp,%ebp
  0x00007f91790d374a:   jl     0x00007f91790d3954
  0x00007f91790d3750:   cmp    %ebp,%r11d
  0x00007f91790d3753:   jae    0x00007f91790d38b4
  0x00007f91790d3759:   mov    0x7c(%rcx),%ebx
  0x00007f91790d375c:   nopl   0x0(%rax)
  0x00007f91790d3760:   mov    0xc(%r12,%rbx,8),%ebp        ; implicit exception: dispatches to 0x00007f91790d3a30
  0x00007f91790d3765:   shl    $0x3,%rdi
  0x00007f91790d3769:   vmovdqu 0x10(%rdi,%r11,4),%ymm0
  0x00007f91790d3770:   vpcompressd %ymm0,%ymm0{%k6}{z}
  0x00007f91790d3776:   add    $0xfffffff9,%ebp
  0x00007f91790d3779:   test   %ebp,%ebp
  0x00007f91790d377b:   nopl   0x0(%rax,%rax,1)
  0x00007f91790d3780:   jl     0x00007f91790d3978
  0x00007f91790d3786:   cmp    %ebp,%r8d
  0x00007f91790d3789:   jae    0x00007f91790d38d8
  0x00007f91790d378f:   mov    0x380(%r15),%rdi
  0x00007f91790d3796:   shl    $0x3,%rbx
  0x00007f91790d379a:   vmovdqu %ymm0,0x10(%rbx,%r9,4)
  0x00007f91790d37a1:   kmovq  %k7,%rbx
  0x00007f91790d37a6:   popcnt %rbx,%r9
  0x00007f91790d37ab:   add    %r8d,%r9d
  0x00007f91790d37ae:   mov    %r9d,0x9c(%rcx)
  0x00007f91790d37b5:   add    $0x8,%r11d                   ; ImmutableOopMap {rcx=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::ReadFilter_vector@159 (line 38)
  0x00007f91790d37b9:   test   %eax,(%rdi)                  ;   {poll}
  0x00007f91790d37bb:   nopl   0x0(%rax,%rax,1)
  0x00007f91790d37c0:   cmp    %r10d,%r11d
  0x00007f91790d37c3:   jl     0x00007f91790d35a4
  0x00007f91790d37c9:   vzeroupper 
  0x00007f91790d37cc:   add    $0x90,%rsp
  0x00007f91790d37d3:   pop    %rbp
  0x00007f91790d37d4:   cmp    0x378(%r15),%rsp             ;   {poll_return}
  0x00007f91790d37db:   ja     0x00007f91790d3a40
  0x00007f91790d37e1:   retq   
  0x00007f91790d37e2:   mov    $0xffffffe4,%esi
  0x00007f91790d37e7:   mov    %r9d,(%rsp)
  0x00007f91790d37eb:   mov    %edi,0x4(%rsp)
  0x00007f91790d37ef:   vmovsd %xmm0,0x8(%rsp)
  0x00007f91790d37f5:   mov    %r11d,0x10(%rsp)
  0x00007f91790d37fa:   mov    %r10d,0x14(%rsp)
  0x00007f91790d37ff:   nop
  0x00007f91790d3800:   vzeroupper 
  0x00007f91790d3803:   callq  0x00007f9179054580           ; ImmutableOopMap {[0]=NarrowOop }
                                                            ;*dastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@56 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3808:   mov    $0xffffff45,%esi
  0x00007f91790d380d:   mov    %r9d,(%rsp)
  0x00007f91790d3811:   mov    %edi,0x4(%rsp)
  0x00007f91790d3815:   mov    %r8d,0x8(%rsp)
  0x00007f91790d381a:   mov    %ebx,0xc(%rsp)
  0x00007f91790d381e:   mov    %r13d,0x10(%rsp)
  0x00007f91790d3823:   mov    %r11d,0x14(%rsp)
  0x00007f91790d3828:   mov    %r10d,0x18(%rsp)
  0x00007f91790d382d:   data16 xchg %ax,%ax
  0x00007f91790d3830:   vzeroupper 
  0x00007f91790d3833:   callq  0x00007f9179054580           ; ImmutableOopMap {[0]=NarrowOop [8]=NarrowOop [12]=NarrowOop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) java.util.Random::next@35 (line 444)
                                                            ; - java.util.Random::nextDouble@3 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3838:   mov    $0xffffff45,%esi
  0x00007f91790d383d:   mov    %r9d,(%rsp)
  0x00007f91790d3841:   mov    %edi,0x4(%rsp)
  0x00007f91790d3845:   mov    %rax,0x8(%rsp)
  0x00007f91790d384a:   mov    %r8d,0x10(%rsp)
  0x00007f91790d384f:   mov    %ebx,0x14(%rsp)
  0x00007f91790d3853:   mov    %r11d,0x18(%rsp)
  0x00007f91790d3858:   mov    %r10d,0x1c(%rsp)
  0x00007f91790d385d:   data16 xchg %ax,%ax
  0x00007f91790d3860:   vzeroupper 
  0x00007f91790d3863:   callq  0x00007f9179054580           ; ImmutableOopMap {[0]=NarrowOop [16]=NarrowOop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) java.util.Random::next@35 (line 444)
                                                            ; - java.util.Random::nextDouble@13 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3868:   mov    $0xffffffe4,%esi
  0x00007f91790d386d:   mov    %r11d,(%rsp)
  0x00007f91790d3871:   mov    %r10d,0x4(%rsp)
  0x00007f91790d3876:   mov    %r8d,0x8(%rsp)
  0x00007f91790d387b:   nop
  0x00007f91790d387c:   vzeroupper 
  0x00007f91790d387f:   callq  0x00007f9179054580           ; ImmutableOopMap {[8]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.DoubleVector::fromArray@9 (line 2773)
                                                            ; - test::ReadFilter_vector@70 (line 42)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3884:   mov    $0xffffffe4,%esi
  0x00007f91790d3889:   mov    %r11d,%ebp
  0x00007f91790d388c:   mov    %r10d,(%rsp)
  0x00007f91790d3890:   mov    %ebx,0x4(%rsp)
  0x00007f91790d3894:   mov    %r8d,0x8(%rsp)
  0x00007f91790d3899:   mov    %edi,0xc(%rsp)
  0x00007f91790d389d:   vmovq  %xmm2,0x10(%rsp)
  0x00007f91790d38a3:   vmovdqu64 %zmm0,0x40(%rsp)
  0x00007f91790d38ab:   nop
  0x00007f91790d38ac:   vzeroupper 
  0x00007f91790d38af:   callq  0x00007f9179054580           ; ImmutableOopMap {[4]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.LongVector::intoArray@7 (line 3105)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d38b4:   mov    $0xffffffe4,%esi
  0x00007f91790d38b9:   mov    %r10d,0x4(%rsp)
  0x00007f91790d38be:   mov    %edi,0x8(%rsp)
  0x00007f91790d38c2:   mov    %r11d,0xc(%rsp)
  0x00007f91790d38c7:   vmovq  %xmm2,0x10(%rsp)
  0x00007f91790d38cd:   data16 xchg %ax,%ax
  0x00007f91790d38d0:   vzeroupper 
  0x00007f91790d38d3:   callq  0x00007f9179054580           ; ImmutableOopMap {[8]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2953)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d38d8:   vmovdqu %ymm0,%ymm1
  0x00007f91790d38dc:   mov    $0xffffffe4,%esi
  0x00007f91790d38e1:   mov    %r11d,(%rsp)
  0x00007f91790d38e5:   mov    %r10d,0x4(%rsp)
  0x00007f91790d38ea:   mov    %ebx,0x8(%rsp)
  0x00007f91790d38ee:   mov    %r8d,0xc(%rsp)
  0x00007f91790d38f3:   vmovdqu %ymm1,0x20(%rsp)
  0x00007f91790d38f9:   vmovq  %xmm2,0x10(%rsp)
  0x00007f91790d38ff:   nop
  0x00007f91790d3900:   vzeroupper 
  0x00007f91790d3903:   callq  0x00007f9179054580           ; ImmutableOopMap {[8]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 3226)
                                                            ; - test::ReadFilter_vector@140 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3908:   mov    $0xffffffcc,%esi
  0x00007f91790d390d:   mov    %r11d,(%rsp)
  0x00007f91790d3911:   mov    %r10d,0x4(%rsp)
  0x00007f91790d3916:   mov    %r8d,0x8(%rsp)
  0x00007f91790d391b:   nop
  0x00007f91790d391c:   vzeroupper 
  0x00007f91790d391f:   callq  0x00007f9179054580           ; ImmutableOopMap {[8]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.DoubleVector::fromArray@9 (line 2773)
                                                            ; - test::ReadFilter_vector@70 (line 42)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3924:   mov    $0xffffffcc,%esi
  0x00007f91790d3929:   mov    %r11d,%ebp
  0x00007f91790d392c:   mov    %r10d,(%rsp)
  0x00007f91790d3930:   mov    %ebx,0x4(%rsp)
  0x00007f91790d3934:   mov    %r8d,0x8(%rsp)
  0x00007f91790d3939:   mov    %edi,0xc(%rsp)
  0x00007f91790d393d:   vmovq  %xmm2,0x10(%rsp)
  0x00007f91790d3943:   vmovdqu64 %zmm0,0x40(%rsp)
  0x00007f91790d394b:   nop
  0x00007f91790d394c:   vzeroupper 
  0x00007f91790d394f:   callq  0x00007f9179054580           ; ImmutableOopMap {[4]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.LongVector::intoArray@7 (line 3105)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3954:   mov    $0xffffffcc,%esi
  0x00007f91790d3959:   mov    %r10d,0x4(%rsp)
  0x00007f91790d395e:   mov    %edi,0x8(%rsp)
  0x00007f91790d3962:   mov    %r11d,0xc(%rsp)
  0x00007f91790d3967:   vmovq  %xmm2,0x10(%rsp)
  0x00007f91790d396d:   data16 xchg %ax,%ax
  0x00007f91790d3970:   vzeroupper 
  0x00007f91790d3973:   callq  0x00007f9179054580           ; ImmutableOopMap {[8]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2953)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3978:   vmovdqu %ymm0,%ymm1
  0x00007f91790d397c:   mov    $0xffffffcc,%esi
  0x00007f91790d3981:   mov    %r11d,(%rsp)
  0x00007f91790d3985:   mov    %r10d,0x4(%rsp)
  0x00007f91790d398a:   mov    %ebx,0x8(%rsp)
  0x00007f91790d398e:   mov    %r8d,0xc(%rsp)
  0x00007f91790d3993:   vmovdqu %ymm1,0x20(%rsp)
  0x00007f91790d3999:   vmovq  %xmm2,0x10(%rsp)
  0x00007f91790d399f:   nop
  0x00007f91790d39a0:   vzeroupper 
  0x00007f91790d39a3:   callq  0x00007f9179054580           ; ImmutableOopMap {[8]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 3226)
                                                            ; - test::ReadFilter_vector@140 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d39a8:   mov    $0xffffff6e,%esi
  0x00007f91790d39ad:   mov    %r10d,(%rsp)
  0x00007f91790d39b1:   data16 xchg %ax,%ax
  0x00007f91790d39b4:   vzeroupper 
  0x00007f91790d39b7:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::ReadFilter_vector@33 (line 38)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d39bc:   mov    $0xfffffff6,%esi
  0x00007f91790d39c1:   data16 xchg %ax,%ax
  0x00007f91790d39c4:   vzeroupper 
  0x00007f91790d39c7:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*invokevirtual nextDouble {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d39cc:   mov    $0xfffffff6,%esi
  0x00007f91790d39d1:   data16 xchg %ax,%ax
  0x00007f91790d39d4:   vzeroupper 
  0x00007f91790d39d7:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*invokevirtual get {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Random::next@8 (line 442)
                                                            ; - java.util.Random::nextDouble@3 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d39dc:   mov    $0xfffffff6,%esi
  0x00007f91790d39e1:   data16 xchg %ax,%ax
  0x00007f91790d39e4:   vzeroupper 
  0x00007f91790d39e7:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*invokevirtual get {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Random::next@8 (line 442)
                                                            ; - java.util.Random::nextDouble@13 (line 698)
                                                            ; - test::ReadFilter_vector@53 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d39ec:   mov    $0xfffffff6,%esi
  0x00007f91790d39f1:   mov    %edi,%ebp
  0x00007f91790d39f3:   vmovsd %xmm0,(%rsp)
  0x00007f91790d39f8:   vzeroupper 
  0x00007f91790d39fb:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*dastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::ReadFilter_vector@56 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3a00:   mov    $0xfffffff6,%esi
  0x00007f91790d3a05:   data16 xchg %ax,%ax
  0x00007f91790d3a08:   vzeroupper 
  0x00007f91790d3a0b:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.DoubleVector::fromArray@8 (line 2773)
                                                            ; - test::ReadFilter_vector@70 (line 42)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3a10:   mov    $0xfffffff6,%esi
  0x00007f91790d3a15:   data16 xchg %ax,%ax
  0x00007f91790d3a18:   vzeroupper 
  0x00007f91790d3a1b:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.LongVector::intoArray@6 (line 3105)
                                                            ; - test::ReadFilter_vector@106 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3a20:   mov    $0xfffffff6,%esi
  0x00007f91790d3a25:   data16 xchg %ax,%ax
  0x00007f91790d3a28:   vzeroupper 
  0x00007f91790d3a2b:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@8 (line 2953)
                                                            ; - test::ReadFilter_vector@114 (line 49)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3a30:   mov    $0xfffffff6,%esi
  0x00007f91790d3a35:   data16 xchg %ax,%ax
  0x00007f91790d3a38:   vzeroupper 
  0x00007f91790d3a3b:   callq  0x00007f9179054580           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@6 (line 3226)
                                                            ; - test::ReadFilter_vector@140 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f91790d3a40:   movabs $0x7f91790d37d4,%r10         ;   {internal_word}
  0x00007f91790d3a4a:   mov    %r10,0x390(%r15)
  0x00007f91790d3a51:   jmpq   0x00007f9179053400           ;   {runtime_call SafepointBlob}
  0x00007f91790d3a56:   hlt    
  0x00007f91790d3a57:   hlt    
[Exception Handler]
  0x00007f91790d3a58:   jmpq   0x00007f9179068a80           ;   {no_reloc}
[Deopt Handler Code]
  0x00007f91790d3a5d:   callq  0x00007f91790d3a62
  0x00007f91790d3a62:   subq   $0x5,(%rsp)
  0x00007f91790d3a67:   jmpq   0x00007f91790548a0           ;   {runtime_call DeoptimizationBlob}
  0x00007f91790d3a6c:   hlt    
  0x00007f91790d3a6d:   hlt    
  0x00007f91790d3a6e:   hlt    
  0x00007f91790d3a6f:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
[Vector Time]  2004 ms  [Pos] 307244 [Output] 2.7928016482346106E21
