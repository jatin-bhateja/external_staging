Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.1.144 Build 20181018

Compiler options: -O3 -mavx512f -DAVX512 -S -o VecMinR_avx512_icpc.s -qopt-report=4

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/8=12.5%] VecMinR.cpp(72,12)
  -> EXTERN: (73,26) _mm_malloc(size_t, size_t)
  -> INLINE (MANUAL): (81,3) print_vec<__m512>(__m512, int) (isz = 22) (sz = 29)
    -> EXTERN: (67,3) printf(const char *, ...)
    -> EXTERN: (69,5) printf(const char *, ...)
  -> (82,20) vminps512(__m512) (isz = 24) (sz = 31)
     [[ Called routine is noinline ]]
  -> EXTERN: (83,3) printf(const char *, ...)
  -> INLINE (MANUAL): (87,3) print_vec<__m256>(__m256, int) (isz = 22) (sz = 29)
    -> EXTERN: (67,3) printf(const char *, ...)
    -> EXTERN: (69,5) printf(const char *, ...)
  -> (88,20) vminps256(__m256) (isz = 32) (sz = 39)
     [[ Called routine is noinline ]]
  -> EXTERN: (89,3) printf(const char *, ...)
  -> INLINE (MANUAL): (92,3) print_vec<__m128>(__m128, int) (isz = 22) (sz = 29)
    -> EXTERN: (67,3) printf(const char *, ...)
    -> EXTERN: (69,5) printf(const char *, ...)
  -> (93,20) vminps128(__m128) (isz = 21) (sz = 28)
     [[ Called routine is noinline ]]
  -> EXTERN: (94,3) printf(const char *, ...)
  -> INLINE (MANUAL): (96,3) print_vec<__m128>(__m128, int) (isz = 22) (sz = 29)
    -> EXTERN: (67,3) printf(const char *, ...)
    -> EXTERN: (69,5) printf(const char *, ...)
  -> (97,19) vminps64(__m128) (isz = 10) (sz = 17)
     [[ Called routine is noinline ]]
  -> EXTERN: (98,3) printf(const char *, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at VecMinR.cpp(74,3)
   remark #15388: vectorization support: reference mem1[i] has aligned access   [ VecMinR.cpp(75,5) ]
   remark #15305: vectorization support: vector length 16
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 18.660 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at VecMinR.cpp(68,3) inlined into VecMinR.cpp(81,3)
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ VecMinR.cpp(69,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between v (69:5) and v[i] (69:5)
LOOP END

LOOP BEGIN at VecMinR.cpp(68,3) inlined into VecMinR.cpp(87,3)
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ VecMinR.cpp(69,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between v (69:5) and v[i] (69:5)
   remark #25436: completely unrolled by 8  
LOOP END

LOOP BEGIN at VecMinR.cpp(68,3) inlined into VecMinR.cpp(92,3)
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ VecMinR.cpp(69,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between v (69:5) and v[i] (69:5)
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at VecMinR.cpp(68,3) inlined into VecMinR.cpp(96,3)
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ VecMinR.cpp(69,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between v (69:5) and v[i] (69:5)
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

VecMinR.cpp(72,12):remark #34051: REGISTER ALLOCATION : [main] VecMinR.cpp:72

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rbx rsi rdi r15 zmm0 zmm16-zmm23]
        
    Routine temporaries
        Total         :     126
            Global    :      31
            Local     :      95
        Regenerable   :      53
        Spilled       :      19
        
    Routine stack
        Variables     :      68 bytes*
            Reads     :       3 [1.64e+01 ~ 4.5%]
            Writes    :       3 [1.64e+01 ~ 4.5%]
        Spills        :     232 bytes*
            Reads     :      32 [4.46e+01 ~ 12.1%]
            Writes    :      18 [1.77e+01 ~ 4.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vminps512(__m512)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vminps512(__m512)) [2/8=25.0%] VecMinR.cpp(23,30)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at VecMinR.cpp(26,14)
   remark #15316: simd loop was not vectorized: scalar assignment in simd loop is prohibited, consider private, lastprivate or reduction clauses   [ VecMinR.cpp(28,9) ]
   remark #15552: loop was not vectorized with "simd"
   remark #25436: completely unrolled by 15  
LOOP END

    Report from: Code generation optimizations [cg]

VecMinR.cpp(23,30):remark #34051: REGISTER ALLOCATION : [_Z9vminps5126__m512] VecMinR.cpp:23

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ zmm0-zmm1 zmm16]
        
    Routine temporaries
        Total         :      25
            Global    :       8
            Local     :      17
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :      64 bytes*
            Reads     :      31 [2.70e+01 ~ 27.4%]
            Writes    :      30 [2.59e+01 ~ 26.3%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vminps256(__m256)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vminps256(__m256)) [3/8=37.5%] VecMinR.cpp(39,29)
  -> EXTERN: (40,21) _mm256_permute2f128_ps(__m256, __m256, int)
  -> EXTERN: (41,15) _mm256_min_ps(__m256, __m256)
  -> EXTERN: (42,19) _mm256_shuffle_ps(__m256, __m256, int)
  -> EXTERN: (43,15) _mm256_min_ps(__m256, __m256)
  -> EXTERN: (44,19) _mm256_shuffle_ps(__m256, __m256, int)
  -> EXTERN: (45,15) _mm256_min_ps(__m256, __m256)


    Report from: Code generation optimizations [cg]

VecMinR.cpp(39,29):remark #34051: REGISTER ALLOCATION : [_Z9vminps2566__m256] VecMinR.cpp:39

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ zmm0-zmm6]
        
    Routine temporaries
        Total         :      16
            Global    :       0
            Local     :      16
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       1 [1.00e+00 ~ 3.8%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vminps128(__m128)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vminps128(__m128)) [4/8=50.0%] VecMinR.cpp(50,29)
  -> EXTERN: (51,19) _mm_shuffle_ps(__m128, __m128, unsigned int)
  -> EXTERN: (52,15) _mm_min_ps(__m128, __m128)
  -> EXTERN: (53,19) _mm_shuffle_ps(__m128, __m128, unsigned int)
  -> EXTERN: (54,15) _mm_min_ps(__m128, __m128)


    Report from: Code generation optimizations [cg]

VecMinR.cpp(50,29):remark #34051: REGISTER ALLOCATION : [_Z9vminps1286__m128] VecMinR.cpp:50

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ zmm0-zmm3]
        
    Routine temporaries
        Total         :      14
            Global    :       0
            Local     :      14
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vminps64(__m128)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vminps64(__m128)) [5/8=62.5%] VecMinR.cpp(59,28)
  -> EXTERN: (60,19) _mm_shuffle_ps(__m128, __m128, unsigned int)
  -> EXTERN: (61,15) _mm_min_ps(__m128, __m128)


    Report from: Code generation optimizations [cg]

VecMinR.cpp(59,28):remark #34051: REGISTER ALLOCATION : [_Z8vminps646__m128] VecMinR.cpp:59

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ zmm0-zmm1]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: print_vec<__m512>(__m512, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (print_vec<__m512>(__m512, int)) VecMinR.cpp(66,32)

===========================================================================

Begin optimization report for: print_vec<__m256>(__m256, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (print_vec<__m256>(__m256, int)) VecMinR.cpp(66,32)

===========================================================================

Begin optimization report for: print_vec<__m128>(__m128, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (print_vec<__m128>(__m128, int)) VecMinR.cpp(66,32)

===========================================================================
