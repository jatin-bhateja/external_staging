*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (pre inlining) ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
*** IR Dump After Force set function attributes ***
; ModuleID = 'cpuid.c'
source_filename = "cpuid.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"Original OEM\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"Intel Overdrive\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Dual Processor\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Intel Reserved\00", align 1
@__const.main.proct = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [10 x i8] c"EAX = %x\0A\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"    Stepping ID : %x \0A \00", align 1
@.str.6 = private unnamed_addr constant [24 x i8] c"    Model       : %x \0A \00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"    Family ID   : %x \0A \00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"    Proctype    : %s \0A \00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"    Ext Model ID : %x \0A \00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"    Ext Family ID : %x \0A\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"EBX = %x\0A\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"ECX = %x\0A\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"EDX = %x\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="icelake-server" "target-features"="+adx,+aes,+avx,+avx2,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vpopcntdq,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pconfig,+pku,+popcnt,+prfchw,+rdpid,+rdrnd,+rdseed,+sahf,+sgx,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+wbnoinvd,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="icelake-server" "target-features"="+adx,+aes,+avx,+avx2,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vpopcntdq,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pconfig,+pku,+popcnt,+prfchw,+rdpid,+rdrnd,+rdseed,+sahf,+sgx,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+wbnoinvd,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 4, !"cf-protection-return", i32 1}
!2 = !{i32 4, !"cf-protection-branch", i32 1}
!3 = !{!"clang version 10.0.0-4ubuntu1~18.04.2 "}
!4 = !{i32 198, i32 217, i32 256, i32 295, i32 334, i32 373, i32 412}
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After Inliner for always_inline functions ***; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***
; ModuleID = 'cpuid.c'
source_filename = "cpuid.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"Original OEM\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"Intel Overdrive\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Dual Processor\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Intel Reserved\00", align 1
@__const.main.proct = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [10 x i8] c"EAX = %x\0A\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"    Stepping ID : %x \0A \00", align 1
@.str.6 = private unnamed_addr constant [24 x i8] c"    Model       : %x \0A \00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"    Family ID   : %x \0A \00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"    Proctype    : %s \0A \00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"    Ext Model ID : %x \0A \00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"    Ext Family ID : %x \0A\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"EBX = %x\0A\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"ECX = %x\0A\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"EDX = %x\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="icelake-server" "target-features"="+adx,+aes,+avx,+avx2,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vpopcntdq,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pconfig,+pku,+popcnt,+prfchw,+rdpid,+rdrnd,+rdseed,+sahf,+sgx,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+wbnoinvd,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="icelake-server" "target-features"="+adx,+aes,+avx,+avx2,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vpopcntdq,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pconfig,+pku,+popcnt,+prfchw,+rdpid,+rdrnd,+rdseed,+sahf,+sgx,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+wbnoinvd,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 4, !"cf-protection-return", i32 1}
!2 = !{i32 4, !"cf-protection-branch", i32 1}
!3 = !{!"clang version 10.0.0-4ubuntu1~18.04.2 "}
!4 = !{i32 198, i32 217, i32 256, i32 295, i32 334, i32 373, i32 412}
*** IR Dump After Pre-ISel Intrinsic Lowering ***
; ModuleID = 'cpuid.c'
source_filename = "cpuid.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"Original OEM\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"Intel Overdrive\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Dual Processor\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Intel Reserved\00", align 1
@__const.main.proct = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [10 x i8] c"EAX = %x\0A\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"    Stepping ID : %x \0A \00", align 1
@.str.6 = private unnamed_addr constant [24 x i8] c"    Model       : %x \0A \00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"    Family ID   : %x \0A \00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"    Proctype    : %s \0A \00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"    Ext Model ID : %x \0A \00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"    Ext Family ID : %x \0A\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"EBX = %x\0A\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"ECX = %x\0A\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"EDX = %x\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="icelake-server" "target-features"="+adx,+aes,+avx,+avx2,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vpopcntdq,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pconfig,+pku,+popcnt,+prfchw,+rdpid,+rdrnd,+rdseed,+sahf,+sgx,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+wbnoinvd,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="icelake-server" "target-features"="+adx,+aes,+avx,+avx2,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vpopcntdq,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pconfig,+pku,+popcnt,+prfchw,+rdpid,+rdrnd,+rdseed,+sahf,+sgx,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+wbnoinvd,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 4, !"cf-protection-return", i32 1}
!2 = !{i32 4, !"cf-protection-branch", i32 1}
!3 = !{!"clang version 10.0.0-4ubuntu1~18.04.2 "}
!4 = !{i32 198, i32 217, i32 256, i32 295, i32 334, i32 373, i32 412}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
*** IR Dump After Rewrite Symbols ***
; ModuleID = 'cpuid.c'
source_filename = "cpuid.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"Original OEM\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"Intel Overdrive\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Dual Processor\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Intel Reserved\00", align 1
@__const.main.proct = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [10 x i8] c"EAX = %x\0A\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"    Stepping ID : %x \0A \00", align 1
@.str.6 = private unnamed_addr constant [24 x i8] c"    Model       : %x \0A \00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"    Family ID   : %x \0A \00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"    Proctype    : %s \0A \00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"    Ext Model ID : %x \0A \00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"    Ext Family ID : %x \0A\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"EBX = %x\0A\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"ECX = %x\0A\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"EDX = %x\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="icelake-server" "target-features"="+adx,+aes,+avx,+avx2,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vpopcntdq,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pconfig,+pku,+popcnt,+prfchw,+rdpid,+rdrnd,+rdseed,+sahf,+sgx,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+wbnoinvd,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="icelake-server" "target-features"="+adx,+aes,+avx,+avx2,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vpopcntdq,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pconfig,+pku,+popcnt,+prfchw,+rdpid,+rdrnd,+rdseed,+sahf,+sgx,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+wbnoinvd,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 4, !"cf-protection-return", i32 1}
!2 = !{i32 4, !"cf-protection-branch", i32 1}
!3 = !{!"clang version 10.0.0-4ubuntu1~18.04.2 "}
!4 = !{i32 198, i32 217, i32 256, i32 295, i32 334, i32 373, i32 412}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = bitcast [4 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x i8*]* @__const.main.proct to i8*), i64 32, i1 false)
  %14 = load i32, i32* %2, align 4
  %15 = call { i32, i32, i32, i32 } asm sideeffect "movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09", "=r,=r,=r,=r,0,~{eax},~{ebx},~{ecx},~{edx},~{dirflag},~{fpsr},~{flags}"(i32 %14) #3, !srcloc !4
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3
  store i32 %16, i32* %2, align 4
  store i32 %17, i32* %3, align 4
  store i32 %18, i32* %4, align 4
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %20)
  %22 = load i32, i32* %2, align 4
  %23 = and i32 %22, 15
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = and i32 %26, 240
  %28 = ashr i32 %27, 4
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %8, align 4
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %2, align 4
  %32 = and i32 %31, 3840
  %33 = ashr i32 %32, 8
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = and i32 %36, 12288
  %38 = ashr i32 %37, 12
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %6, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* %2, align 4
  %45 = and i32 %44, 983040
  %46 = ashr i32 %45, 16
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = and i32 %49, 267386880
  %51 = ashr i32 %50, 20
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %54)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %58)
  ret i32 %59
}
# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=32, align=16, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.5)
  %93:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed %93:gr64
  %94:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr %stack.5, 1, $noreg, 8, $noreg, killed %94:gr64
  %95:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr %stack.5, 1, $noreg, 16, $noreg, killed %95:gr64
  %96:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr %stack.5, 1, $noreg, 24, $noreg, killed %96:gr64
  %92:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %91:gr32 = COPY %92:gr32
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def %87:gr32, $1:[regdef:GR32], def %88:gr32, $2:[regdef:GR32], def %89:gr32, $3:[regdef:GR32], def %90:gr32, $4:[reguse tiedto:$0], %91:gr32(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  %85:gr32 = COPY %90:gr32
  %84:gr32 = COPY %89:gr32
  %83:gr32 = COPY %88:gr32
  %82:gr32 = COPY %87:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %82:gr32 :: (store 4 into %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %83:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %84:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %85:gr32 :: (store 4 into %ir.5)
  %77:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %74:gr64 = MOV64ri @.str.4
  $rdi = COPY %74:gr64
  $esi = COPY %77:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %76:gr32 = COPY $eax
  %73:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %72:gr32 = AND32ri8 killed %73:gr32(tied-def 0), 15, implicit-def $eflags
  MOV32mr %stack.6, 1, $noreg, 0, $noreg, killed %72:gr32 :: (store 4 into %ir.7)
  %69:gr32 = MOV32rm %stack.6, 1, $noreg, 0, $noreg :: (load 4 from %ir.7)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %66:gr64 = MOV64ri @.str.5
  $rdi = COPY %66:gr64
  $esi = COPY %69:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %68:gr32 = COPY $eax
  %65:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %64:gr32 = AND32ri killed %65:gr32(tied-def 0), 240, implicit-def $eflags
  %62:gr32 = SAR32ri killed %64:gr32(tied-def 0), 4, implicit-def $eflags
  MOV32mr %stack.7, 1, $noreg, 0, $noreg, killed %62:gr32 :: (store 4 into %ir.8)
  %59:gr32 = MOV32rm %stack.7, 1, $noreg, 0, $noreg :: (load 4 from %ir.8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %56:gr64 = MOV64ri @.str.6
  $rdi = COPY %56:gr64
  $esi = COPY %59:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  %55:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %54:gr32 = AND32ri killed %55:gr32(tied-def 0), 3840, implicit-def $eflags
  %52:gr32 = SAR32ri killed %54:gr32(tied-def 0), 8, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %52:gr32 :: (store 4 into %ir.9)
  %49:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load 4 from %ir.9)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %46:gr64 = MOV64ri @.str.7
  $rdi = COPY %46:gr64
  $esi = COPY %49:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax
  %45:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %44:gr32 = AND32ri killed %45:gr32(tied-def 0), 12288, implicit-def $eflags
  %42:gr32 = SAR32ri killed %44:gr32(tied-def 0), 12, implicit-def $eflags
  MOV32mr %stack.9, 1, $noreg, 0, $noreg, killed %42:gr32 :: (store 4 into %ir.10)
  %39:gr64_nosp = MOVSX64rm32 %stack.9, 1, $noreg, 0, $noreg :: (load 4 from %ir.10)
  %37:gr64 = MOV64rm %stack.5, 8, %39:gr64_nosp, 0, $noreg :: (load 8 from %ir.41)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %33:gr64 = MOV64ri @.str.8
  $rdi = COPY %33:gr64
  $rsi = COPY %37:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %35:gr32 = COPY $eax
  %32:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %31:gr32 = AND32ri killed %32:gr32(tied-def 0), 983040, implicit-def $eflags
  %29:gr32 = SAR32ri killed %31:gr32(tied-def 0), 16, implicit-def $eflags
  MOV32mr %stack.10, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.11)
  %26:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (load 4 from %ir.11)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr64 = MOV64ri @.str.9
  $rdi = COPY %23:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %21:gr32 = AND32ri killed %22:gr32(tied-def 0), 267386880, implicit-def $eflags
  %19:gr32 = SAR32ri killed %21:gr32(tied-def 0), 20, implicit-def $eflags
  MOV32mr %stack.11, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store 4 into %ir.12)
  %16:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (load 4 from %ir.12)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr64 = MOV64ri @.str.10
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr64 = MOV64ri @.str.11
  $rdi = COPY %9:gr64
  $esi = COPY %12:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV64ri @.str.12
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.13
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  $eax = COPY %3:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=32, align=16, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.5)
  %93:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed %93:gr64
  %94:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr %stack.5, 1, $noreg, 8, $noreg, killed %94:gr64
  %95:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr %stack.5, 1, $noreg, 16, $noreg, killed %95:gr64
  %96:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr %stack.5, 1, $noreg, 24, $noreg, killed %96:gr64
  %92:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %91:gr32 = COPY %92:gr32
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def %87:gr32, $1:[regdef:GR32], def %88:gr32, $2:[regdef:GR32], def %89:gr32, $3:[regdef:GR32], def %90:gr32, $4:[reguse tiedto:$0], %91:gr32(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  %85:gr32 = COPY %90:gr32
  %84:gr32 = COPY %89:gr32
  %83:gr32 = COPY %88:gr32
  %82:gr32 = COPY %87:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %82:gr32 :: (store 4 into %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %83:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %84:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %85:gr32 :: (store 4 into %ir.5)
  %77:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %74:gr64 = MOV64ri @.str.4
  $rdi = COPY %74:gr64
  $esi = COPY %77:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %76:gr32 = COPY $eax
  %73:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %72:gr32 = AND32ri8 killed %73:gr32(tied-def 0), 15, implicit-def $eflags
  MOV32mr %stack.6, 1, $noreg, 0, $noreg, killed %72:gr32 :: (store 4 into %ir.7)
  %69:gr32 = MOV32rm %stack.6, 1, $noreg, 0, $noreg :: (load 4 from %ir.7)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %66:gr64 = MOV64ri @.str.5
  $rdi = COPY %66:gr64
  $esi = COPY %69:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %68:gr32 = COPY $eax
  %65:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %64:gr32 = AND32ri killed %65:gr32(tied-def 0), 240, implicit-def $eflags
  %62:gr32 = SAR32ri killed %64:gr32(tied-def 0), 4, implicit-def $eflags
  MOV32mr %stack.7, 1, $noreg, 0, $noreg, killed %62:gr32 :: (store 4 into %ir.8)
  %59:gr32 = MOV32rm %stack.7, 1, $noreg, 0, $noreg :: (load 4 from %ir.8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %56:gr64 = MOV64ri @.str.6
  $rdi = COPY %56:gr64
  $esi = COPY %59:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  %55:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %54:gr32 = AND32ri killed %55:gr32(tied-def 0), 3840, implicit-def $eflags
  %52:gr32 = SAR32ri killed %54:gr32(tied-def 0), 8, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %52:gr32 :: (store 4 into %ir.9)
  %49:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load 4 from %ir.9)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %46:gr64 = MOV64ri @.str.7
  $rdi = COPY %46:gr64
  $esi = COPY %49:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax
  %45:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %44:gr32 = AND32ri killed %45:gr32(tied-def 0), 12288, implicit-def $eflags
  %42:gr32 = SAR32ri killed %44:gr32(tied-def 0), 12, implicit-def $eflags
  MOV32mr %stack.9, 1, $noreg, 0, $noreg, killed %42:gr32 :: (store 4 into %ir.10)
  %39:gr64_nosp = MOVSX64rm32 %stack.9, 1, $noreg, 0, $noreg :: (load 4 from %ir.10)
  %37:gr64 = MOV64rm %stack.5, 8, %39:gr64_nosp, 0, $noreg :: (load 8 from %ir.41)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %33:gr64 = MOV64ri @.str.8
  $rdi = COPY %33:gr64
  $rsi = COPY %37:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %35:gr32 = COPY $eax
  %32:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %31:gr32 = AND32ri killed %32:gr32(tied-def 0), 983040, implicit-def $eflags
  %29:gr32 = SAR32ri killed %31:gr32(tied-def 0), 16, implicit-def $eflags
  MOV32mr %stack.10, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.11)
  %26:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (load 4 from %ir.11)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr64 = MOV64ri @.str.9
  $rdi = COPY %23:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %21:gr32 = AND32ri killed %22:gr32(tied-def 0), 267386880, implicit-def $eflags
  %19:gr32 = SAR32ri killed %21:gr32(tied-def 0), 20, implicit-def $eflags
  MOV32mr %stack.11, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store 4 into %ir.12)
  %16:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (load 4 from %ir.12)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr64 = MOV64ri @.str.10
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr64 = MOV64ri @.str.11
  $rdi = COPY %9:gr64
  $esi = COPY %12:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV64ri @.str.12
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.13
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  $eax = COPY %3:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=32, align=16, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.5)
  %93:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed %93:gr64
  %94:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr %stack.5, 1, $noreg, 8, $noreg, killed %94:gr64
  %95:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr %stack.5, 1, $noreg, 16, $noreg, killed %95:gr64
  %96:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr %stack.5, 1, $noreg, 24, $noreg, killed %96:gr64
  %92:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %91:gr32 = COPY %92:gr32
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def %87:gr32, $1:[regdef:GR32], def %88:gr32, $2:[regdef:GR32], def %89:gr32, $3:[regdef:GR32], def %90:gr32, $4:[reguse tiedto:$0], %91:gr32(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  %85:gr32 = COPY %90:gr32
  %84:gr32 = COPY %89:gr32
  %83:gr32 = COPY %88:gr32
  %82:gr32 = COPY %87:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %82:gr32 :: (store 4 into %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %83:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %84:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %85:gr32 :: (store 4 into %ir.5)
  %77:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %74:gr64 = MOV64ri @.str.4
  $rdi = COPY %74:gr64
  $esi = COPY %77:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %76:gr32 = COPY $eax
  %73:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %72:gr32 = AND32ri8 killed %73:gr32(tied-def 0), 15, implicit-def $eflags
  MOV32mr %stack.6, 1, $noreg, 0, $noreg, killed %72:gr32 :: (store 4 into %ir.7)
  %69:gr32 = MOV32rm %stack.6, 1, $noreg, 0, $noreg :: (load 4 from %ir.7)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %66:gr64 = MOV64ri @.str.5
  $rdi = COPY %66:gr64
  $esi = COPY %69:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %68:gr32 = COPY $eax
  %65:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %64:gr32 = AND32ri killed %65:gr32(tied-def 0), 240, implicit-def $eflags
  %62:gr32 = SAR32ri killed %64:gr32(tied-def 0), 4, implicit-def $eflags
  MOV32mr %stack.7, 1, $noreg, 0, $noreg, killed %62:gr32 :: (store 4 into %ir.8)
  %59:gr32 = MOV32rm %stack.7, 1, $noreg, 0, $noreg :: (load 4 from %ir.8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %56:gr64 = MOV64ri @.str.6
  $rdi = COPY %56:gr64
  $esi = COPY %59:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  %55:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %54:gr32 = AND32ri killed %55:gr32(tied-def 0), 3840, implicit-def $eflags
  %52:gr32 = SAR32ri killed %54:gr32(tied-def 0), 8, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %52:gr32 :: (store 4 into %ir.9)
  %49:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load 4 from %ir.9)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %46:gr64 = MOV64ri @.str.7
  $rdi = COPY %46:gr64
  $esi = COPY %49:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax
  %45:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %44:gr32 = AND32ri killed %45:gr32(tied-def 0), 12288, implicit-def $eflags
  %42:gr32 = SAR32ri killed %44:gr32(tied-def 0), 12, implicit-def $eflags
  MOV32mr %stack.9, 1, $noreg, 0, $noreg, killed %42:gr32 :: (store 4 into %ir.10)
  %39:gr64_nosp = MOVSX64rm32 %stack.9, 1, $noreg, 0, $noreg :: (load 4 from %ir.10)
  %37:gr64 = MOV64rm %stack.5, 8, %39:gr64_nosp, 0, $noreg :: (load 8 from %ir.41)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %33:gr64 = MOV64ri @.str.8
  $rdi = COPY %33:gr64
  $rsi = COPY %37:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %35:gr32 = COPY $eax
  %32:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %31:gr32 = AND32ri killed %32:gr32(tied-def 0), 983040, implicit-def $eflags
  %29:gr32 = SAR32ri killed %31:gr32(tied-def 0), 16, implicit-def $eflags
  MOV32mr %stack.10, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.11)
  %26:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (load 4 from %ir.11)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr64 = MOV64ri @.str.9
  $rdi = COPY %23:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %21:gr32 = AND32ri killed %22:gr32(tied-def 0), 267386880, implicit-def $eflags
  %19:gr32 = SAR32ri killed %21:gr32(tied-def 0), 20, implicit-def $eflags
  MOV32mr %stack.11, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store 4 into %ir.12)
  %16:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (load 4 from %ir.12)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr64 = MOV64ri @.str.10
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr64 = MOV64ri @.str.11
  $rdi = COPY %9:gr64
  $esi = COPY %12:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV64ri @.str.12
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.13
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  $eax = COPY %3:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=32, align=16, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.5)
  %93:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed %93:gr64
  %94:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr %stack.5, 1, $noreg, 8, $noreg, killed %94:gr64
  %95:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr %stack.5, 1, $noreg, 16, $noreg, killed %95:gr64
  %96:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr %stack.5, 1, $noreg, 24, $noreg, killed %96:gr64
  %92:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %91:gr32 = COPY %92:gr32
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def %87:gr32, $1:[regdef:GR32], def %88:gr32, $2:[regdef:GR32], def %89:gr32, $3:[regdef:GR32], def %90:gr32, $4:[reguse tiedto:$0], %91:gr32(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  %85:gr32 = COPY %90:gr32
  %84:gr32 = COPY %89:gr32
  %83:gr32 = COPY %88:gr32
  %82:gr32 = COPY %87:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %82:gr32 :: (store 4 into %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %83:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %84:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %85:gr32 :: (store 4 into %ir.5)
  %77:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %74:gr64 = MOV64ri @.str.4
  $rdi = COPY %74:gr64
  $esi = COPY %77:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %76:gr32 = COPY $eax
  %73:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %72:gr32 = AND32ri8 killed %73:gr32(tied-def 0), 15, implicit-def $eflags
  MOV32mr %stack.6, 1, $noreg, 0, $noreg, killed %72:gr32 :: (store 4 into %ir.7)
  %69:gr32 = MOV32rm %stack.6, 1, $noreg, 0, $noreg :: (load 4 from %ir.7)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %66:gr64 = MOV64ri @.str.5
  $rdi = COPY %66:gr64
  $esi = COPY %69:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %68:gr32 = COPY $eax
  %65:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %64:gr32 = AND32ri killed %65:gr32(tied-def 0), 240, implicit-def $eflags
  %62:gr32 = SAR32ri killed %64:gr32(tied-def 0), 4, implicit-def $eflags
  MOV32mr %stack.7, 1, $noreg, 0, $noreg, killed %62:gr32 :: (store 4 into %ir.8)
  %59:gr32 = MOV32rm %stack.7, 1, $noreg, 0, $noreg :: (load 4 from %ir.8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %56:gr64 = MOV64ri @.str.6
  $rdi = COPY %56:gr64
  $esi = COPY %59:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  %55:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %54:gr32 = AND32ri killed %55:gr32(tied-def 0), 3840, implicit-def $eflags
  %52:gr32 = SAR32ri killed %54:gr32(tied-def 0), 8, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %52:gr32 :: (store 4 into %ir.9)
  %49:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load 4 from %ir.9)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %46:gr64 = MOV64ri @.str.7
  $rdi = COPY %46:gr64
  $esi = COPY %49:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax
  %45:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %44:gr32 = AND32ri killed %45:gr32(tied-def 0), 12288, implicit-def $eflags
  %42:gr32 = SAR32ri killed %44:gr32(tied-def 0), 12, implicit-def $eflags
  MOV32mr %stack.9, 1, $noreg, 0, $noreg, killed %42:gr32 :: (store 4 into %ir.10)
  %39:gr64_nosp = MOVSX64rm32 %stack.9, 1, $noreg, 0, $noreg :: (load 4 from %ir.10)
  %37:gr64 = MOV64rm %stack.5, 8, %39:gr64_nosp, 0, $noreg :: (load 8 from %ir.41)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %33:gr64 = MOV64ri @.str.8
  $rdi = COPY %33:gr64
  $rsi = COPY %37:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %35:gr32 = COPY $eax
  %32:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %31:gr32 = AND32ri killed %32:gr32(tied-def 0), 983040, implicit-def $eflags
  %29:gr32 = SAR32ri killed %31:gr32(tied-def 0), 16, implicit-def $eflags
  MOV32mr %stack.10, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.11)
  %26:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (load 4 from %ir.11)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr64 = MOV64ri @.str.9
  $rdi = COPY %23:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %21:gr32 = AND32ri killed %22:gr32(tied-def 0), 267386880, implicit-def $eflags
  %19:gr32 = SAR32ri killed %21:gr32(tied-def 0), 20, implicit-def $eflags
  MOV32mr %stack.11, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store 4 into %ir.12)
  %16:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (load 4 from %ir.12)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr64 = MOV64ri @.str.10
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr64 = MOV64ri @.str.11
  $rdi = COPY %9:gr64
  $esi = COPY %12:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV64ri @.str.12
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.13
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  $eax = COPY %3:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=32, align=16, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.5)
  %93:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed %93:gr64
  %94:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr %stack.5, 1, $noreg, 8, $noreg, killed %94:gr64
  %95:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr %stack.5, 1, $noreg, 16, $noreg, killed %95:gr64
  %96:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr %stack.5, 1, $noreg, 24, $noreg, killed %96:gr64
  %92:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %91:gr32 = COPY %92:gr32
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def %87:gr32, $1:[regdef:GR32], def %88:gr32, $2:[regdef:GR32], def %89:gr32, $3:[regdef:GR32], def %90:gr32, $4:[reguse tiedto:$0], %91:gr32(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  %85:gr32 = COPY %90:gr32
  %84:gr32 = COPY %89:gr32
  %83:gr32 = COPY %88:gr32
  %82:gr32 = COPY %87:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %82:gr32 :: (store 4 into %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %83:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %84:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %85:gr32 :: (store 4 into %ir.5)
  %77:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %74:gr64 = MOV64ri @.str.4
  $rdi = COPY %74:gr64
  $esi = COPY %77:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %76:gr32 = COPY $eax
  %73:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %72:gr32 = AND32ri8 killed %73:gr32(tied-def 0), 15, implicit-def $eflags
  MOV32mr %stack.6, 1, $noreg, 0, $noreg, killed %72:gr32 :: (store 4 into %ir.7)
  %69:gr32 = MOV32rm %stack.6, 1, $noreg, 0, $noreg :: (load 4 from %ir.7)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %66:gr64 = MOV64ri @.str.5
  $rdi = COPY %66:gr64
  $esi = COPY %69:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %68:gr32 = COPY $eax
  %65:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %64:gr32 = AND32ri killed %65:gr32(tied-def 0), 240, implicit-def $eflags
  %62:gr32 = SAR32ri killed %64:gr32(tied-def 0), 4, implicit-def $eflags
  MOV32mr %stack.7, 1, $noreg, 0, $noreg, killed %62:gr32 :: (store 4 into %ir.8)
  %59:gr32 = MOV32rm %stack.7, 1, $noreg, 0, $noreg :: (load 4 from %ir.8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %56:gr64 = MOV64ri @.str.6
  $rdi = COPY %56:gr64
  $esi = COPY %59:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  %55:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %54:gr32 = AND32ri killed %55:gr32(tied-def 0), 3840, implicit-def $eflags
  %52:gr32 = SAR32ri killed %54:gr32(tied-def 0), 8, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %52:gr32 :: (store 4 into %ir.9)
  %49:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load 4 from %ir.9)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %46:gr64 = MOV64ri @.str.7
  $rdi = COPY %46:gr64
  $esi = COPY %49:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax
  %45:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %44:gr32 = AND32ri killed %45:gr32(tied-def 0), 12288, implicit-def $eflags
  %42:gr32 = SAR32ri killed %44:gr32(tied-def 0), 12, implicit-def $eflags
  MOV32mr %stack.9, 1, $noreg, 0, $noreg, killed %42:gr32 :: (store 4 into %ir.10)
  %39:gr64_nosp = MOVSX64rm32 %stack.9, 1, $noreg, 0, $noreg :: (load 4 from %ir.10)
  %37:gr64 = MOV64rm %stack.5, 8, %39:gr64_nosp, 0, $noreg :: (load 8 from %ir.41)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %33:gr64 = MOV64ri @.str.8
  $rdi = COPY %33:gr64
  $rsi = COPY %37:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %35:gr32 = COPY $eax
  %32:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %31:gr32 = AND32ri killed %32:gr32(tied-def 0), 983040, implicit-def $eflags
  %29:gr32 = SAR32ri killed %31:gr32(tied-def 0), 16, implicit-def $eflags
  MOV32mr %stack.10, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.11)
  %26:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (load 4 from %ir.11)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr64 = MOV64ri @.str.9
  $rdi = COPY %23:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %21:gr32 = AND32ri killed %22:gr32(tied-def 0), 267386880, implicit-def $eflags
  %19:gr32 = SAR32ri killed %21:gr32(tied-def 0), 20, implicit-def $eflags
  MOV32mr %stack.11, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store 4 into %ir.12)
  %16:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (load 4 from %ir.12)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr64 = MOV64ri @.str.10
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr64 = MOV64ri @.str.11
  $rdi = COPY %9:gr64
  $esi = COPY %12:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV64ri @.str.12
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.13
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  $eax = COPY %3:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=32, align=16, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.5)
  %93:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed %93:gr64
  %94:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr %stack.5, 1, $noreg, 8, $noreg, killed %94:gr64
  %95:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr %stack.5, 1, $noreg, 16, $noreg, killed %95:gr64
  %96:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr %stack.5, 1, $noreg, 24, $noreg, killed %96:gr64
  %92:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %91:gr32 = COPY %92:gr32
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def %87:gr32, $1:[regdef:GR32], def %88:gr32, $2:[regdef:GR32], def %89:gr32, $3:[regdef:GR32], def %90:gr32, $4:[reguse tiedto:$0], %91:gr32(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  %85:gr32 = COPY %90:gr32
  %84:gr32 = COPY %89:gr32
  %83:gr32 = COPY %88:gr32
  %82:gr32 = COPY %87:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %82:gr32 :: (store 4 into %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %83:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %84:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %85:gr32 :: (store 4 into %ir.5)
  %77:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %74:gr64 = MOV64ri @.str.4
  $rdi = COPY %74:gr64
  $esi = COPY %77:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %76:gr32 = COPY $eax
  %73:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %72:gr32 = AND32ri8 killed %73:gr32(tied-def 0), 15, implicit-def $eflags
  MOV32mr %stack.6, 1, $noreg, 0, $noreg, killed %72:gr32 :: (store 4 into %ir.7)
  %69:gr32 = MOV32rm %stack.6, 1, $noreg, 0, $noreg :: (load 4 from %ir.7)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %66:gr64 = MOV64ri @.str.5
  $rdi = COPY %66:gr64
  $esi = COPY %69:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %68:gr32 = COPY $eax
  %65:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %64:gr32 = AND32ri killed %65:gr32(tied-def 0), 240, implicit-def $eflags
  %62:gr32 = SAR32ri killed %64:gr32(tied-def 0), 4, implicit-def $eflags
  MOV32mr %stack.7, 1, $noreg, 0, $noreg, killed %62:gr32 :: (store 4 into %ir.8)
  %59:gr32 = MOV32rm %stack.7, 1, $noreg, 0, $noreg :: (load 4 from %ir.8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %56:gr64 = MOV64ri @.str.6
  $rdi = COPY %56:gr64
  $esi = COPY %59:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  %55:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %54:gr32 = AND32ri killed %55:gr32(tied-def 0), 3840, implicit-def $eflags
  %52:gr32 = SAR32ri killed %54:gr32(tied-def 0), 8, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %52:gr32 :: (store 4 into %ir.9)
  %49:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load 4 from %ir.9)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %46:gr64 = MOV64ri @.str.7
  $rdi = COPY %46:gr64
  $esi = COPY %49:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax
  %45:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %44:gr32 = AND32ri killed %45:gr32(tied-def 0), 12288, implicit-def $eflags
  %42:gr32 = SAR32ri killed %44:gr32(tied-def 0), 12, implicit-def $eflags
  MOV32mr %stack.9, 1, $noreg, 0, $noreg, killed %42:gr32 :: (store 4 into %ir.10)
  %39:gr64_nosp = MOVSX64rm32 %stack.9, 1, $noreg, 0, $noreg :: (load 4 from %ir.10)
  %37:gr64 = MOV64rm %stack.5, 8, %39:gr64_nosp, 0, $noreg :: (load 8 from %ir.41)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %33:gr64 = MOV64ri @.str.8
  $rdi = COPY %33:gr64
  $rsi = COPY %37:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %35:gr32 = COPY $eax
  %32:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %31:gr32 = AND32ri killed %32:gr32(tied-def 0), 983040, implicit-def $eflags
  %29:gr32 = SAR32ri killed %31:gr32(tied-def 0), 16, implicit-def $eflags
  MOV32mr %stack.10, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.11)
  %26:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (load 4 from %ir.11)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr64 = MOV64ri @.str.9
  $rdi = COPY %23:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %21:gr32 = AND32ri killed %22:gr32(tied-def 0), 267386880, implicit-def $eflags
  %19:gr32 = SAR32ri killed %21:gr32(tied-def 0), 20, implicit-def $eflags
  MOV32mr %stack.11, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store 4 into %ir.12)
  %16:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (load 4 from %ir.12)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr64 = MOV64ri @.str.10
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr64 = MOV64ri @.str.11
  $rdi = COPY %9:gr64
  $esi = COPY %12:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV64ri @.str.12
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.13
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  $eax = COPY %3:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=32, align=16, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.5)
  %93:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed %93:gr64
  %94:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr %stack.5, 1, $noreg, 8, $noreg, killed %94:gr64
  %95:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr %stack.5, 1, $noreg, 16, $noreg, killed %95:gr64
  %96:gr64 = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr %stack.5, 1, $noreg, 24, $noreg, killed %96:gr64
  %92:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %91:gr32 = COPY %92:gr32
  %87:gr32 = COPY %91:gr32
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def %87:gr32, $1:[regdef:GR32], def %88:gr32, $2:[regdef:GR32], def %89:gr32, $3:[regdef:GR32], def %90:gr32, $4:[reguse tiedto:$0], %87:gr32(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  %85:gr32 = COPY %90:gr32
  %84:gr32 = COPY %89:gr32
  %83:gr32 = COPY %88:gr32
  %82:gr32 = COPY %87:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %82:gr32 :: (store 4 into %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %83:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %84:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %85:gr32 :: (store 4 into %ir.5)
  %77:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %74:gr64 = MOV64ri @.str.4
  $rdi = COPY %74:gr64
  $esi = COPY %77:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %76:gr32 = COPY $eax
  %73:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %72:gr32 = COPY %73:gr32
  %72:gr32 = AND32ri8 %72:gr32(tied-def 0), 15, implicit-def $eflags
  MOV32mr %stack.6, 1, $noreg, 0, $noreg, killed %72:gr32 :: (store 4 into %ir.7)
  %69:gr32 = MOV32rm %stack.6, 1, $noreg, 0, $noreg :: (load 4 from %ir.7)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %66:gr64 = MOV64ri @.str.5
  $rdi = COPY %66:gr64
  $esi = COPY %69:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %68:gr32 = COPY $eax
  %65:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %64:gr32 = COPY %65:gr32
  %64:gr32 = AND32ri %64:gr32(tied-def 0), 240, implicit-def $eflags
  %62:gr32 = COPY %64:gr32
  %62:gr32 = SAR32ri %62:gr32(tied-def 0), 4, implicit-def $eflags
  MOV32mr %stack.7, 1, $noreg, 0, $noreg, killed %62:gr32 :: (store 4 into %ir.8)
  %59:gr32 = MOV32rm %stack.7, 1, $noreg, 0, $noreg :: (load 4 from %ir.8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %56:gr64 = MOV64ri @.str.6
  $rdi = COPY %56:gr64
  $esi = COPY %59:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  %55:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %54:gr32 = COPY %55:gr32
  %54:gr32 = AND32ri %54:gr32(tied-def 0), 3840, implicit-def $eflags
  %52:gr32 = COPY %54:gr32
  %52:gr32 = SAR32ri %52:gr32(tied-def 0), 8, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %52:gr32 :: (store 4 into %ir.9)
  %49:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load 4 from %ir.9)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %46:gr64 = MOV64ri @.str.7
  $rdi = COPY %46:gr64
  $esi = COPY %49:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %48:gr32 = COPY $eax
  %45:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %44:gr32 = COPY %45:gr32
  %44:gr32 = AND32ri %44:gr32(tied-def 0), 12288, implicit-def $eflags
  %42:gr32 = COPY %44:gr32
  %42:gr32 = SAR32ri %42:gr32(tied-def 0), 12, implicit-def $eflags
  MOV32mr %stack.9, 1, $noreg, 0, $noreg, killed %42:gr32 :: (store 4 into %ir.10)
  %39:gr64_nosp = MOVSX64rm32 %stack.9, 1, $noreg, 0, $noreg :: (load 4 from %ir.10)
  %37:gr64 = MOV64rm %stack.5, 8, %39:gr64_nosp, 0, $noreg :: (load 8 from %ir.41)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %33:gr64 = MOV64ri @.str.8
  $rdi = COPY %33:gr64
  $rsi = COPY %37:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %35:gr32 = COPY $eax
  %32:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %31:gr32 = COPY %32:gr32
  %31:gr32 = AND32ri %31:gr32(tied-def 0), 983040, implicit-def $eflags
  %29:gr32 = COPY %31:gr32
  %29:gr32 = SAR32ri %29:gr32(tied-def 0), 16, implicit-def $eflags
  MOV32mr %stack.10, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.11)
  %26:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (load 4 from %ir.11)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr64 = MOV64ri @.str.9
  $rdi = COPY %23:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %21:gr32 = COPY %22:gr32
  %21:gr32 = AND32ri %21:gr32(tied-def 0), 267386880, implicit-def $eflags
  %19:gr32 = COPY %21:gr32
  %19:gr32 = SAR32ri %19:gr32(tied-def 0), 20, implicit-def $eflags
  MOV32mr %stack.11, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store 4 into %ir.12)
  %16:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (load 4 from %ir.12)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr64 = MOV64ri @.str.10
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr64 = MOV64ri @.str.11
  $rdi = COPY %9:gr64
  $esi = COPY %12:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV64ri @.str.12
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.13
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  $eax = COPY %3:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Fast Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=32, align=16, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr %stack.5, 1, $noreg, 8, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr %stack.5, 1, $noreg, 16, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr %stack.5, 1, $noreg, 24, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  MOV32mr %stack.12, 1, $noreg, 0, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm %stack.12, 1, $noreg, 0, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  renamable $eax = COPY renamable $esi
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  MOV32mr %stack.12, 1, $noreg, 0, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm %stack.6, 1, $noreg, 0, $noreg :: (load 4 from %ir.7)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.5
  MOV32mr %stack.13, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr %stack.7, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm %stack.7, 1, $noreg, 0, $noreg :: (load 4 from %ir.8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.6
  MOV32mr %stack.14, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load 4 from %ir.9)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  MOV32mr %stack.15, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr %stack.9, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 %stack.9, 1, $noreg, 0, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm %stack.5, 8, killed renamable $rdi, 0, $noreg :: (load 8 from %ir.41)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.8
  MOV32mr %stack.16, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr %stack.10, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (load 4 from %ir.11)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.9
  MOV32mr %stack.17, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr %stack.11, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (load 4 from %ir.12)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.10
  MOV32mr %stack.18, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.11
  MOV32mr %stack.19, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.12
  MOV32mr %stack.20, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.13
  MOV32mr %stack.21, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=32, align=16, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr %stack.5, 1, $noreg, 8, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr %stack.5, 1, $noreg, 16, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr %stack.5, 1, $noreg, 24, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  MOV32mr %stack.12, 1, $noreg, 0, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm %stack.12, 1, $noreg, 0, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  renamable $eax = COPY renamable $esi
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  MOV32mr %stack.12, 1, $noreg, 0, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm %stack.6, 1, $noreg, 0, $noreg :: (load 4 from %ir.7)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.5
  MOV32mr %stack.13, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr %stack.7, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm %stack.7, 1, $noreg, 0, $noreg :: (load 4 from %ir.8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.6
  MOV32mr %stack.14, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load 4 from %ir.9)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  MOV32mr %stack.15, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr %stack.9, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 %stack.9, 1, $noreg, 0, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm %stack.5, 8, killed renamable $rdi, 0, $noreg :: (load 8 from %ir.41)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.8
  MOV32mr %stack.16, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr %stack.10, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (load 4 from %ir.11)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.9
  MOV32mr %stack.17, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr %stack.11, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (load 4 from %ir.12)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.10
  MOV32mr %stack.18, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.11
  MOV32mr %stack.19, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.12
  MOV32mr %stack.20, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.13
  MOV32mr %stack.21, 1, $noreg, 0, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=32, align=16, at location [SP-72]
  fi#6: size=4, align=4, at location [SP-76]
  fi#7: size=4, align=4, at location [SP-80]
  fi#8: size=4, align=4, at location [SP-84]
  fi#9: size=4, align=4, at location [SP-88]
  fi#10: size=4, align=4, at location [SP-92]
  fi#11: size=4, align=4, at location [SP-96]
  fi#12: size=4, align=4, at location [SP-100]
  fi#13: size=4, align=4, at location [SP-104]
  fi#14: size=4, align=4, at location [SP-108]
  fi#15: size=4, align=4, at location [SP-112]
  fi#16: size=4, align=4, at location [SP-116]
  fi#17: size=4, align=4, at location [SP-120]
  fi#18: size=4, align=4, at location [SP-124]
  fi#19: size=4, align=4, at location [SP-128]
  fi#20: size=4, align=4, at location [SP-132]
  fi#21: size=4, align=4, at location [SP-136]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  renamable $eax = COPY renamable $esi
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -28, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.4
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -68, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -68, $noreg :: (load 4 from %ir.7)
  renamable $rdi = MOV64ri @.str.5
  MOV32mr $rbp, 1, $noreg, -96, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -72, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -72, $noreg :: (load 4 from %ir.8)
  renamable $rdi = MOV64ri @.str.6
  MOV32mr $rbp, 1, $noreg, -100, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -76, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -76, $noreg :: (load 4 from %ir.9)
  renamable $rdi = MOV64ri @.str.7
  MOV32mr $rbp, 1, $noreg, -104, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -80, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 $rbp, 1, $noreg, -80, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm $rbp, 8, killed renamable $rdi, -64, $noreg :: (load 8 from %ir.41)
  renamable $rdi = MOV64ri @.str.8
  MOV32mr $rbp, 1, $noreg, -108, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -84, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -84, $noreg :: (load 4 from %ir.11)
  renamable $rdi = MOV64ri @.str.9
  MOV32mr $rbp, 1, $noreg, -112, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -88, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load 4 from %ir.12)
  renamable $rdi = MOV64ri @.str.10
  MOV32mr $rbp, 1, $noreg, -116, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.11
  MOV32mr $rbp, 1, $noreg, -120, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.12
  MOV32mr $rbp, 1, $noreg, -124, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -28, $noreg :: (load 4 from %ir.5)
  renamable $rdi = MOV64ri @.str.13
  MOV32mr $rbp, 1, $noreg, -128, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=32, align=16, at location [SP-72]
  fi#6: size=4, align=4, at location [SP-76]
  fi#7: size=4, align=4, at location [SP-80]
  fi#8: size=4, align=4, at location [SP-84]
  fi#9: size=4, align=4, at location [SP-88]
  fi#10: size=4, align=4, at location [SP-92]
  fi#11: size=4, align=4, at location [SP-96]
  fi#12: size=4, align=4, at location [SP-100]
  fi#13: size=4, align=4, at location [SP-104]
  fi#14: size=4, align=4, at location [SP-108]
  fi#15: size=4, align=4, at location [SP-112]
  fi#16: size=4, align=4, at location [SP-116]
  fi#17: size=4, align=4, at location [SP-120]
  fi#18: size=4, align=4, at location [SP-124]
  fi#19: size=4, align=4, at location [SP-128]
  fi#20: size=4, align=4, at location [SP-132]
  fi#21: size=4, align=4, at location [SP-136]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  $eax = MOV32rr $esi
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -28, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.4
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -68, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -68, $noreg :: (load 4 from %ir.7)
  renamable $rdi = MOV64ri @.str.5
  MOV32mr $rbp, 1, $noreg, -96, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -72, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -72, $noreg :: (load 4 from %ir.8)
  renamable $rdi = MOV64ri @.str.6
  MOV32mr $rbp, 1, $noreg, -100, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -76, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -76, $noreg :: (load 4 from %ir.9)
  renamable $rdi = MOV64ri @.str.7
  MOV32mr $rbp, 1, $noreg, -104, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -80, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 $rbp, 1, $noreg, -80, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm $rbp, 8, killed renamable $rdi, -64, $noreg :: (load 8 from %ir.41)
  renamable $rdi = MOV64ri @.str.8
  MOV32mr $rbp, 1, $noreg, -108, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -84, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -84, $noreg :: (load 4 from %ir.11)
  renamable $rdi = MOV64ri @.str.9
  MOV32mr $rbp, 1, $noreg, -112, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -88, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load 4 from %ir.12)
  renamable $rdi = MOV64ri @.str.10
  MOV32mr $rbp, 1, $noreg, -116, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.11
  MOV32mr $rbp, 1, $noreg, -120, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.12
  MOV32mr $rbp, 1, $noreg, -124, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -28, $noreg :: (load 4 from %ir.5)
  renamable $rdi = MOV64ri @.str.13
  MOV32mr $rbp, 1, $noreg, -128, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=32, align=16, at location [SP-72]
  fi#6: size=4, align=4, at location [SP-76]
  fi#7: size=4, align=4, at location [SP-80]
  fi#8: size=4, align=4, at location [SP-84]
  fi#9: size=4, align=4, at location [SP-88]
  fi#10: size=4, align=4, at location [SP-92]
  fi#11: size=4, align=4, at location [SP-96]
  fi#12: size=4, align=4, at location [SP-100]
  fi#13: size=4, align=4, at location [SP-104]
  fi#14: size=4, align=4, at location [SP-108]
  fi#15: size=4, align=4, at location [SP-112]
  fi#16: size=4, align=4, at location [SP-116]
  fi#17: size=4, align=4, at location [SP-120]
  fi#18: size=4, align=4, at location [SP-124]
  fi#19: size=4, align=4, at location [SP-128]
  fi#20: size=4, align=4, at location [SP-132]
  fi#21: size=4, align=4, at location [SP-136]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  $eax = MOV32rr $esi
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -28, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.4
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -68, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -68, $noreg :: (load 4 from %ir.7)
  renamable $rdi = MOV64ri @.str.5
  MOV32mr $rbp, 1, $noreg, -96, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -72, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -72, $noreg :: (load 4 from %ir.8)
  renamable $rdi = MOV64ri @.str.6
  MOV32mr $rbp, 1, $noreg, -100, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -76, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -76, $noreg :: (load 4 from %ir.9)
  renamable $rdi = MOV64ri @.str.7
  MOV32mr $rbp, 1, $noreg, -104, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -80, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 $rbp, 1, $noreg, -80, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm $rbp, 8, killed renamable $rdi, -64, $noreg :: (load 8 from %ir.41)
  renamable $rdi = MOV64ri @.str.8
  MOV32mr $rbp, 1, $noreg, -108, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -84, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -84, $noreg :: (load 4 from %ir.11)
  renamable $rdi = MOV64ri @.str.9
  MOV32mr $rbp, 1, $noreg, -112, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -88, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load 4 from %ir.12)
  renamable $rdi = MOV64ri @.str.10
  MOV32mr $rbp, 1, $noreg, -116, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.11
  MOV32mr $rbp, 1, $noreg, -120, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.12
  MOV32mr $rbp, 1, $noreg, -124, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -28, $noreg :: (load 4 from %ir.5)
  renamable $rdi = MOV64ri @.str.13
  MOV32mr $rbp, 1, $noreg, -128, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=32, align=16, at location [SP-72]
  fi#6: size=4, align=4, at location [SP-76]
  fi#7: size=4, align=4, at location [SP-80]
  fi#8: size=4, align=4, at location [SP-84]
  fi#9: size=4, align=4, at location [SP-88]
  fi#10: size=4, align=4, at location [SP-92]
  fi#11: size=4, align=4, at location [SP-96]
  fi#12: size=4, align=4, at location [SP-100]
  fi#13: size=4, align=4, at location [SP-104]
  fi#14: size=4, align=4, at location [SP-108]
  fi#15: size=4, align=4, at location [SP-112]
  fi#16: size=4, align=4, at location [SP-116]
  fi#17: size=4, align=4, at location [SP-120]
  fi#18: size=4, align=4, at location [SP-124]
  fi#19: size=4, align=4, at location [SP-128]
  fi#20: size=4, align=4, at location [SP-132]
  fi#21: size=4, align=4, at location [SP-136]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  $eax = MOV32rr $esi
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -28, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.4
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -68, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -68, $noreg :: (load 4 from %ir.7)
  renamable $rdi = MOV64ri @.str.5
  MOV32mr $rbp, 1, $noreg, -96, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -72, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -72, $noreg :: (load 4 from %ir.8)
  renamable $rdi = MOV64ri @.str.6
  MOV32mr $rbp, 1, $noreg, -100, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -76, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -76, $noreg :: (load 4 from %ir.9)
  renamable $rdi = MOV64ri @.str.7
  MOV32mr $rbp, 1, $noreg, -104, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -80, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 $rbp, 1, $noreg, -80, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm $rbp, 8, killed renamable $rdi, -64, $noreg :: (load 8 from %ir.41)
  renamable $rdi = MOV64ri @.str.8
  MOV32mr $rbp, 1, $noreg, -108, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -84, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -84, $noreg :: (load 4 from %ir.11)
  renamable $rdi = MOV64ri @.str.9
  MOV32mr $rbp, 1, $noreg, -112, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -88, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load 4 from %ir.12)
  renamable $rdi = MOV64ri @.str.10
  MOV32mr $rbp, 1, $noreg, -116, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.11
  MOV32mr $rbp, 1, $noreg, -120, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.12
  MOV32mr $rbp, 1, $noreg, -124, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -28, $noreg :: (load 4 from %ir.5)
  renamable $rdi = MOV64ri @.str.13
  MOV32mr $rbp, 1, $noreg, -128, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=32, align=16, at location [SP-72]
  fi#6: size=4, align=4, at location [SP-76]
  fi#7: size=4, align=4, at location [SP-80]
  fi#8: size=4, align=4, at location [SP-84]
  fi#9: size=4, align=4, at location [SP-88]
  fi#10: size=4, align=4, at location [SP-92]
  fi#11: size=4, align=4, at location [SP-96]
  fi#12: size=4, align=4, at location [SP-100]
  fi#13: size=4, align=4, at location [SP-104]
  fi#14: size=4, align=4, at location [SP-108]
  fi#15: size=4, align=4, at location [SP-112]
  fi#16: size=4, align=4, at location [SP-116]
  fi#17: size=4, align=4, at location [SP-120]
  fi#18: size=4, align=4, at location [SP-124]
  fi#19: size=4, align=4, at location [SP-128]
  fi#20: size=4, align=4, at location [SP-132]
  fi#21: size=4, align=4, at location [SP-136]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  $eax = MOV32rr $esi
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -28, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.4
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -68, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -68, $noreg :: (load 4 from %ir.7)
  renamable $rdi = MOV64ri @.str.5
  MOV32mr $rbp, 1, $noreg, -96, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -72, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -72, $noreg :: (load 4 from %ir.8)
  renamable $rdi = MOV64ri @.str.6
  MOV32mr $rbp, 1, $noreg, -100, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -76, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -76, $noreg :: (load 4 from %ir.9)
  renamable $rdi = MOV64ri @.str.7
  MOV32mr $rbp, 1, $noreg, -104, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -80, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 $rbp, 1, $noreg, -80, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm $rbp, 8, killed renamable $rdi, -64, $noreg :: (load 8 from %ir.41)
  renamable $rdi = MOV64ri @.str.8
  MOV32mr $rbp, 1, $noreg, -108, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -84, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -84, $noreg :: (load 4 from %ir.11)
  renamable $rdi = MOV64ri @.str.9
  MOV32mr $rbp, 1, $noreg, -112, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -88, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load 4 from %ir.12)
  renamable $rdi = MOV64ri @.str.10
  MOV32mr $rbp, 1, $noreg, -116, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.11
  MOV32mr $rbp, 1, $noreg, -120, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.12
  MOV32mr $rbp, 1, $noreg, -124, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -28, $noreg :: (load 4 from %ir.5)
  renamable $rdi = MOV64ri @.str.13
  MOV32mr $rbp, 1, $noreg, -128, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=32, align=16, at location [SP-72]
  fi#6: size=4, align=4, at location [SP-76]
  fi#7: size=4, align=4, at location [SP-80]
  fi#8: size=4, align=4, at location [SP-84]
  fi#9: size=4, align=4, at location [SP-88]
  fi#10: size=4, align=4, at location [SP-92]
  fi#11: size=4, align=4, at location [SP-96]
  fi#12: size=4, align=4, at location [SP-100]
  fi#13: size=4, align=4, at location [SP-104]
  fi#14: size=4, align=4, at location [SP-108]
  fi#15: size=4, align=4, at location [SP-112]
  fi#16: size=4, align=4, at location [SP-116]
  fi#17: size=4, align=4, at location [SP-120]
  fi#18: size=4, align=4, at location [SP-124]
  fi#19: size=4, align=4, at location [SP-128]
  fi#20: size=4, align=4, at location [SP-132]
  fi#21: size=4, align=4, at location [SP-136]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  $eax = MOV32rr $esi
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -28, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.4
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -68, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -68, $noreg :: (load 4 from %ir.7)
  renamable $rdi = MOV64ri @.str.5
  MOV32mr $rbp, 1, $noreg, -96, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -72, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -72, $noreg :: (load 4 from %ir.8)
  renamable $rdi = MOV64ri @.str.6
  MOV32mr $rbp, 1, $noreg, -100, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -76, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -76, $noreg :: (load 4 from %ir.9)
  renamable $rdi = MOV64ri @.str.7
  MOV32mr $rbp, 1, $noreg, -104, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -80, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 $rbp, 1, $noreg, -80, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm $rbp, 8, killed renamable $rdi, -64, $noreg :: (load 8 from %ir.41)
  renamable $rdi = MOV64ri @.str.8
  MOV32mr $rbp, 1, $noreg, -108, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -84, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -84, $noreg :: (load 4 from %ir.11)
  renamable $rdi = MOV64ri @.str.9
  MOV32mr $rbp, 1, $noreg, -112, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -88, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load 4 from %ir.12)
  renamable $rdi = MOV64ri @.str.10
  MOV32mr $rbp, 1, $noreg, -116, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.11
  MOV32mr $rbp, 1, $noreg, -120, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.12
  MOV32mr $rbp, 1, $noreg, -124, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -28, $noreg :: (load 4 from %ir.5)
  renamable $rdi = MOV64ri @.str.13
  MOV32mr $rbp, 1, $noreg, -128, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=32, align=16, at location [SP-72]
  fi#6: size=4, align=4, at location [SP-76]
  fi#7: size=4, align=4, at location [SP-80]
  fi#8: size=4, align=4, at location [SP-84]
  fi#9: size=4, align=4, at location [SP-88]
  fi#10: size=4, align=4, at location [SP-92]
  fi#11: size=4, align=4, at location [SP-96]
  fi#12: size=4, align=4, at location [SP-100]
  fi#13: size=4, align=4, at location [SP-104]
  fi#14: size=4, align=4, at location [SP-108]
  fi#15: size=4, align=4, at location [SP-112]
  fi#16: size=4, align=4, at location [SP-116]
  fi#17: size=4, align=4, at location [SP-120]
  fi#18: size=4, align=4, at location [SP-124]
  fi#19: size=4, align=4, at location [SP-128]
  fi#20: size=4, align=4, at location [SP-132]
  fi#21: size=4, align=4, at location [SP-136]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  $eax = MOV32rr $esi
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -28, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.4
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -68, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -68, $noreg :: (load 4 from %ir.7)
  renamable $rdi = MOV64ri @.str.5
  MOV32mr $rbp, 1, $noreg, -96, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -72, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -72, $noreg :: (load 4 from %ir.8)
  renamable $rdi = MOV64ri @.str.6
  MOV32mr $rbp, 1, $noreg, -100, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -76, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -76, $noreg :: (load 4 from %ir.9)
  renamable $rdi = MOV64ri @.str.7
  MOV32mr $rbp, 1, $noreg, -104, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -80, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 $rbp, 1, $noreg, -80, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm $rbp, 8, killed renamable $rdi, -64, $noreg :: (load 8 from %ir.41)
  renamable $rdi = MOV64ri @.str.8
  MOV32mr $rbp, 1, $noreg, -108, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -84, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -84, $noreg :: (load 4 from %ir.11)
  renamable $rdi = MOV64ri @.str.9
  MOV32mr $rbp, 1, $noreg, -112, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -88, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load 4 from %ir.12)
  renamable $rdi = MOV64ri @.str.10
  MOV32mr $rbp, 1, $noreg, -116, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.11
  MOV32mr $rbp, 1, $noreg, -120, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.12
  MOV32mr $rbp, 1, $noreg, -124, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -28, $noreg :: (load 4 from %ir.5)
  renamable $rdi = MOV64ri @.str.13
  MOV32mr $rbp, 1, $noreg, -128, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=32, align=16, at location [SP-72]
  fi#6: size=4, align=4, at location [SP-76]
  fi#7: size=4, align=4, at location [SP-80]
  fi#8: size=4, align=4, at location [SP-84]
  fi#9: size=4, align=4, at location [SP-88]
  fi#10: size=4, align=4, at location [SP-92]
  fi#11: size=4, align=4, at location [SP-96]
  fi#12: size=4, align=4, at location [SP-100]
  fi#13: size=4, align=4, at location [SP-104]
  fi#14: size=4, align=4, at location [SP-108]
  fi#15: size=4, align=4, at location [SP-112]
  fi#16: size=4, align=4, at location [SP-116]
  fi#17: size=4, align=4, at location [SP-120]
  fi#18: size=4, align=4, at location [SP-124]
  fi#19: size=4, align=4, at location [SP-128]
  fi#20: size=4, align=4, at location [SP-132]
  fi#21: size=4, align=4, at location [SP-136]

bb.0 (%ir-block.0):
  liveins: $rbx
  ENDBR64
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  $eax = MOV32rr $esi
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -28, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.4
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -68, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -68, $noreg :: (load 4 from %ir.7)
  renamable $rdi = MOV64ri @.str.5
  MOV32mr $rbp, 1, $noreg, -96, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -72, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -72, $noreg :: (load 4 from %ir.8)
  renamable $rdi = MOV64ri @.str.6
  MOV32mr $rbp, 1, $noreg, -100, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -76, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -76, $noreg :: (load 4 from %ir.9)
  renamable $rdi = MOV64ri @.str.7
  MOV32mr $rbp, 1, $noreg, -104, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -80, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 $rbp, 1, $noreg, -80, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm $rbp, 8, killed renamable $rdi, -64, $noreg :: (load 8 from %ir.41)
  renamable $rdi = MOV64ri @.str.8
  MOV32mr $rbp, 1, $noreg, -108, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -84, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -84, $noreg :: (load 4 from %ir.11)
  renamable $rdi = MOV64ri @.str.9
  MOV32mr $rbp, 1, $noreg, -112, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -88, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load 4 from %ir.12)
  renamable $rdi = MOV64ri @.str.10
  MOV32mr $rbp, 1, $noreg, -116, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.11
  MOV32mr $rbp, 1, $noreg, -120, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.12
  MOV32mr $rbp, 1, $noreg, -124, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -28, $noreg :: (load 4 from %ir.5)
  renamable $rdi = MOV64ri @.str.13
  MOV32mr $rbp, 1, $noreg, -128, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=32, align=16, at location [SP-72]
  fi#6: size=4, align=4, at location [SP-76]
  fi#7: size=4, align=4, at location [SP-80]
  fi#8: size=4, align=4, at location [SP-84]
  fi#9: size=4, align=4, at location [SP-88]
  fi#10: size=4, align=4, at location [SP-92]
  fi#11: size=4, align=4, at location [SP-96]
  fi#12: size=4, align=4, at location [SP-100]
  fi#13: size=4, align=4, at location [SP-104]
  fi#14: size=4, align=4, at location [SP-108]
  fi#15: size=4, align=4, at location [SP-112]
  fi#16: size=4, align=4, at location [SP-116]
  fi#17: size=4, align=4, at location [SP-120]
  fi#18: size=4, align=4, at location [SP-124]
  fi#19: size=4, align=4, at location [SP-128]
  fi#20: size=4, align=4, at location [SP-132]
  fi#21: size=4, align=4, at location [SP-136]

bb.0 (%ir-block.0):
  liveins: $rbx
  ENDBR64
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  $eax = MOV32rr $esi
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -28, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.4
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -68, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -68, $noreg :: (load 4 from %ir.7)
  renamable $rdi = MOV64ri @.str.5
  MOV32mr $rbp, 1, $noreg, -96, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -72, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -72, $noreg :: (load 4 from %ir.8)
  renamable $rdi = MOV64ri @.str.6
  MOV32mr $rbp, 1, $noreg, -100, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -76, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -76, $noreg :: (load 4 from %ir.9)
  renamable $rdi = MOV64ri @.str.7
  MOV32mr $rbp, 1, $noreg, -104, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -80, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 $rbp, 1, $noreg, -80, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm $rbp, 8, killed renamable $rdi, -64, $noreg :: (load 8 from %ir.41)
  renamable $rdi = MOV64ri @.str.8
  MOV32mr $rbp, 1, $noreg, -108, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -84, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -84, $noreg :: (load 4 from %ir.11)
  renamable $rdi = MOV64ri @.str.9
  MOV32mr $rbp, 1, $noreg, -112, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -88, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load 4 from %ir.12)
  renamable $rdi = MOV64ri @.str.10
  MOV32mr $rbp, 1, $noreg, -116, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.11
  MOV32mr $rbp, 1, $noreg, -120, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.12
  MOV32mr $rbp, 1, $noreg, -124, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -28, $noreg :: (load 4 from %ir.5)
  renamable $rdi = MOV64ri @.str.13
  MOV32mr $rbp, 1, $noreg, -128, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=32, align=16, at location [SP-72]
  fi#6: size=4, align=4, at location [SP-76]
  fi#7: size=4, align=4, at location [SP-80]
  fi#8: size=4, align=4, at location [SP-84]
  fi#9: size=4, align=4, at location [SP-88]
  fi#10: size=4, align=4, at location [SP-92]
  fi#11: size=4, align=4, at location [SP-96]
  fi#12: size=4, align=4, at location [SP-100]
  fi#13: size=4, align=4, at location [SP-104]
  fi#14: size=4, align=4, at location [SP-108]
  fi#15: size=4, align=4, at location [SP-112]
  fi#16: size=4, align=4, at location [SP-116]
  fi#17: size=4, align=4, at location [SP-120]
  fi#18: size=4, align=4, at location [SP-124]
  fi#19: size=4, align=4, at location [SP-128]
  fi#20: size=4, align=4, at location [SP-132]
  fi#21: size=4, align=4, at location [SP-136]

bb.0 (%ir-block.0):
  liveins: $rbx
  ENDBR64
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  $eax = MOV32rr $esi
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -28, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.4
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -68, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -68, $noreg :: (load 4 from %ir.7)
  renamable $rdi = MOV64ri @.str.5
  MOV32mr $rbp, 1, $noreg, -96, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -72, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -72, $noreg :: (load 4 from %ir.8)
  renamable $rdi = MOV64ri @.str.6
  MOV32mr $rbp, 1, $noreg, -100, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -76, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -76, $noreg :: (load 4 from %ir.9)
  renamable $rdi = MOV64ri @.str.7
  MOV32mr $rbp, 1, $noreg, -104, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -80, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 $rbp, 1, $noreg, -80, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm $rbp, 8, killed renamable $rdi, -64, $noreg :: (load 8 from %ir.41)
  renamable $rdi = MOV64ri @.str.8
  MOV32mr $rbp, 1, $noreg, -108, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -84, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -84, $noreg :: (load 4 from %ir.11)
  renamable $rdi = MOV64ri @.str.9
  MOV32mr $rbp, 1, $noreg, -112, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -88, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load 4 from %ir.12)
  renamable $rdi = MOV64ri @.str.10
  MOV32mr $rbp, 1, $noreg, -116, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.11
  MOV32mr $rbp, 1, $noreg, -120, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.12
  MOV32mr $rbp, 1, $noreg, -124, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -28, $noreg :: (load 4 from %ir.5)
  renamable $rdi = MOV64ri @.str.13
  MOV32mr $rbp, 1, $noreg, -128, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=32, align=16, at location [SP-72]
  fi#6: size=4, align=4, at location [SP-76]
  fi#7: size=4, align=4, at location [SP-80]
  fi#8: size=4, align=4, at location [SP-84]
  fi#9: size=4, align=4, at location [SP-88]
  fi#10: size=4, align=4, at location [SP-92]
  fi#11: size=4, align=4, at location [SP-96]
  fi#12: size=4, align=4, at location [SP-100]
  fi#13: size=4, align=4, at location [SP-104]
  fi#14: size=4, align=4, at location [SP-108]
  fi#15: size=4, align=4, at location [SP-112]
  fi#16: size=4, align=4, at location [SP-116]
  fi#17: size=4, align=4, at location [SP-120]
  fi#18: size=4, align=4, at location [SP-124]
  fi#19: size=4, align=4, at location [SP-128]
  fi#20: size=4, align=4, at location [SP-132]
  fi#21: size=4, align=4, at location [SP-136]

bb.0 (%ir-block.0):
  liveins: $rbx
  ENDBR64
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store 4 into %ir.5)
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct, $noreg
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 8, $noreg
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 16, $noreg
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax
  renamable $rax = MOV64rm $noreg, 1, $noreg, @__const.main.proct + 24, $noreg
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $ecx :: (store 4 into %stack.12)
  $esi = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load 4 from %stack.12)
  INLINEASM &"movl $0 , %eax \0A\09cpuid           \0A\09movl %eax , $0 \0A\09movl %ebx , $1 \0A\09movl %ecx , $2 \0A\09movl %edx , $3 \0A\09" [sideeffect] [attdialect], $0:[regdef:GR32], def renamable $esi, $1:[regdef:GR32], def renamable $edi, $2:[regdef:GR32], def renamable $r8d, $3:[regdef:GR32], def renamable $r9d, $4:[reguse tiedto:$0], renamable $esi(tied-def 3), $5:[clobber], implicit-def early-clobber $eax, $6:[clobber], implicit-def early-clobber $ebx, $7:[clobber], implicit-def early-clobber $ecx, $8:[clobber], implicit-def early-clobber $edx, $9:[clobber], implicit-def early-clobber $df, $10:[clobber], implicit-def early-clobber $fpsw, $11:[clobber], implicit-def early-clobber $eflags, !4
  $eax = MOV32rr $esi
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $r8d :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -28, $noreg, killed renamable $r9d :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.4
  MOV32mr $rbp, 1, $noreg, -92, $noreg, killed $esi :: (store 4 into %stack.12)
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), 15, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -68, $noreg, killed renamable $ecx :: (store 4 into %ir.7)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -68, $noreg :: (load 4 from %ir.7)
  renamable $rdi = MOV64ri @.str.5
  MOV32mr $rbp, 1, $noreg, -96, $noreg, killed $eax :: (store 4 into %stack.13)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 240, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 4, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -72, $noreg, killed renamable $ecx :: (store 4 into %ir.8)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -72, $noreg :: (load 4 from %ir.8)
  renamable $rdi = MOV64ri @.str.6
  MOV32mr $rbp, 1, $noreg, -100, $noreg, killed $eax :: (store 4 into %stack.14)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 3840, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 8, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -76, $noreg, killed renamable $ecx :: (store 4 into %ir.9)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -76, $noreg :: (load 4 from %ir.9)
  renamable $rdi = MOV64ri @.str.7
  MOV32mr $rbp, 1, $noreg, -104, $noreg, killed $eax :: (store 4 into %stack.15)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 12288, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 12, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -80, $noreg, killed renamable $ecx :: (store 4 into %ir.10)
  renamable $rdi = MOVSX64rm32 $rbp, 1, $noreg, -80, $noreg :: (load 4 from %ir.10)
  renamable $rsi = MOV64rm $rbp, 8, killed renamable $rdi, -64, $noreg :: (load 8 from %ir.41)
  renamable $rdi = MOV64ri @.str.8
  MOV32mr $rbp, 1, $noreg, -108, $noreg, killed $eax :: (store 4 into %stack.16)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 983040, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 16, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -84, $noreg, killed renamable $ecx :: (store 4 into %ir.11)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -84, $noreg :: (load 4 from %ir.11)
  renamable $rdi = MOV64ri @.str.9
  MOV32mr $rbp, 1, $noreg, -112, $noreg, killed $eax :: (store 4 into %stack.17)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $ecx = AND32ri renamable $ecx(tied-def 0), 267386880, implicit-def $eflags
  renamable $ecx = SAR32ri renamable $ecx(tied-def 0), 20, implicit-def $eflags
  MOV32mr $rbp, 1, $noreg, -88, $noreg, killed renamable $ecx :: (store 4 into %ir.12)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load 4 from %ir.12)
  renamable $rdi = MOV64ri @.str.10
  MOV32mr $rbp, 1, $noreg, -116, $noreg, killed $eax :: (store 4 into %stack.18)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.11
  MOV32mr $rbp, 1, $noreg, -120, $noreg, killed $eax :: (store 4 into %stack.19)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.12
  MOV32mr $rbp, 1, $noreg, -124, $noreg, killed $eax :: (store 4 into %stack.20)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -28, $noreg :: (load 4 from %ir.5)
  renamable $rdi = MOV64ri @.str.13
  MOV32mr $rbp, 1, $noreg, -128, $noreg, killed $eax :: (store 4 into %stack.21)
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 120, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit killed $eax

# End machine code for function main.

