
import jdk.incubator.vector.*;

//----------------------------------------------------------------------------
// Interfaces generated by query parser.
interface query {
  boolean apply (int a, int b);
}

interface query_vec {
  VectorMask<Integer> apply(Vector<Integer> va, Vector<Integer> vb);
}

class query_generator {
  public enum SQLQueryOp {
     CMP_GT,
     CMP_LT,
     CMP_EQ
  }

  public static query genBinaryQuery(SQLQueryOp oper) {
     switch(oper) {
        case CMP_GT: return (a, b) -> a > b;
        case CMP_LT: return (a, b) -> a < b;
        case CMP_EQ: return (a, b) -> a == b;
     }
     return null;
  }

  public static query_vec genBinaryVecQuery(SQLQueryOp oper) {
     switch(oper) {
        case CMP_GT: return (Vector<Integer> va, Vector<Integer> vb) -> va.compare(VectorOperators.GT, vb);
        case CMP_LT: return (Vector<Integer> va, Vector<Integer> vb) -> va.compare(VectorOperators.LT, vb);
        case CMP_EQ: return (Vector<Integer> va, Vector<Integer> vb) -> va.compare(VectorOperators.EQ, vb);
     }
     return null;
  }
}
//---------------------------------------------------------------------------

public class query_executor  {
  public static final VectorSpecies<Integer> SPECIES = IntVector.SPECIES_256;

  public static boolean execute_scalar(int a, int b, query func) {
     return func.apply(a, b);
  }

  public static VectorMask<Integer> execute_vector(Vector<Integer> va, Vector<Integer> vb, query_vec func) {
     return func.apply(va, vb);
  }

  public static void main(String [] args) {
     int [] col1 = {1,2,3,4,5,6,7,8};
     int [] col2 = {1,2,3,4,5,6,7,8};

     for(int i = 0 ; i < col1.length; i++) {
        System.out.println(execute_scalar(col1[i], col2[i], query_generator.genBinaryQuery(query_generator.SQLQueryOp.CMP_GT)));
        System.out.println(execute_scalar(col1[i], col2[i], query_generator.genBinaryQuery(query_generator.SQLQueryOp.CMP_EQ)));
        System.out.println(execute_scalar(col1[i], col2[i], query_generator.genBinaryQuery(query_generator.SQLQueryOp.CMP_LT)));
     }

     IntVector vec1 = IntVector.fromArray(SPECIES, col1, 0);
     IntVector vec2 = IntVector.fromArray(SPECIES, col2, 0);
     System.out.println(execute_vector(vec1, vec2, query_generator.genBinaryVecQuery(query_generator.SQLQueryOp.CMP_GT)));
     System.out.println(execute_vector(vec1, vec2, query_generator.genBinaryVecQuery(query_generator.SQLQueryOp.CMP_LT)));
     System.out.println(execute_vector(vec1, vec2, query_generator.genBinaryVecQuery(query_generator.SQLQueryOp.CMP_EQ)));
  }
}
