diff --git a/configure b/configure
old mode 100644
new mode 100755
diff --git a/src/hotspot/cpu/x86/assembler_x86.cpp b/src/hotspot/cpu/x86/assembler_x86.cpp
index 751144b9962..a75766be292 100644
--- a/src/hotspot/cpu/x86/assembler_x86.cpp
+++ b/src/hotspot/cpu/x86/assembler_x86.cpp
@@ -625,7 +625,7 @@ void Assembler::emit_operand_helper(int reg_enc, int base_enc, int index_enc,
     if (is_valid_encoding(index_enc)) {
       assert(scale != Address::no_scale, "inconsistent address");
       // [base + index*scale + disp]
-      if (disp == 0 && no_relocation && ((base_enc & 0x7) != 5)) {       
+      if (disp == 0 && no_relocation && ((base_enc & 0x7) != 5)) {
         // [base + index*scale]
         // [00 reg 100][ss index base]
         emit_modrm_sib(0b00, reg_enc, 0b100,
@@ -12828,30 +12828,30 @@ void Assembler::emit_data64(jlong data,
 
 int Assembler::get_base_prefix_bits(int enc) {
   int bits = 0;
-  if (enc & 16) bits |= REX2BIT_B4; 
-  if (enc & 8) bits |= REXBIT_B; 
+  if (enc & 16) bits |= REX2BIT_B4;
+  if (enc & 8) bits |= REXBIT_B;
   return bits;
 }
 
 int Assembler::get_index_prefix_bits(int enc) {
   int bits = 0;
-  if (enc & 16) bits |= REX2BIT_X4; 
-  if (enc & 8) bits |= REXBIT_X; 
+  if (enc & 16) bits |= REX2BIT_X4;
+  if (enc & 8) bits |= REXBIT_X;
   return bits;
 }
 
 int Assembler::get_base_prefix_bits(Register base) {
-  return base->is_valid() ? get_base_prefix_bits(base->encoding()) : 0; 
+  return base->is_valid() ? get_base_prefix_bits(base->encoding()) : 0;
 }
 
 int Assembler::get_index_prefix_bits(Register index) {
-  return index->is_valid() ? get_index_prefix_bits(index->encoding()) : 0; 
+  return index->is_valid() ? get_index_prefix_bits(index->encoding()) : 0;
 }
 
 int Assembler::get_reg_prefix_bits(int enc) {
   int bits = 0;
-  if (enc & 16) bits |= REX2BIT_R4; 
-  if (enc & 8) bits |= REXBIT_R; 
+  if (enc & 16) bits |= REX2BIT_R4;
+  if (enc & 8) bits |= REXBIT_R;
   return bits;
 }
 
@@ -13028,7 +13028,7 @@ void Assembler::prefix_rex2(Address adr, XMMRegister src) {
   int bits = 0;
   bits |= get_base_prefix_bits(adr.base());
   bits |= get_index_prefix_bits(adr.index());
-  bits |= get_reg_prefix_bits(src->encoding()); 
+  bits |= get_reg_prefix_bits(src->encoding());
   prefix16(WREX2 | bits);
 }
 
@@ -13078,7 +13078,7 @@ int Assembler::prefix_and_encode_rex2(int dst_enc, int src_enc, int init_bits) {
   bits |= get_reg_prefix_bits(dst_enc);
   bits |= get_base_prefix_bits(src_enc);
   dst_enc &= 0x7;
-  src_enc &= 0x7;  
+  src_enc &= 0x7;
   prefix16(WREX2 | bits);
   return dst_enc << 3 | src_enc;
 }
@@ -13151,14 +13151,14 @@ int Assembler::get_prefixq_rex2(Address adr, Register src, bool is_map1) {
   if (is_map1) bits |= REX2BIT_M0;
   bits |= get_base_prefix_bits(adr.base());
   bits |= get_index_prefix_bits(adr.index());
-  bits |= get_reg_prefix_bits(src->encoding()); 
+  bits |= get_reg_prefix_bits(src->encoding());
   return WREX2 | bits;
 }
 
 void Assembler::prefixq(Address adr) {
   if (adr.base_needs_rex2() || adr.index_needs_rex2()) {
-    emit_int16(get_prefixq_rex2(adr)); 
-  } else { 
+    emit_int16(get_prefixq_rex2(adr));
+  } else {
     emit_int8(get_prefixq(adr));
   }
 }
@@ -13211,7 +13211,7 @@ void Assembler::prefixq_rex2(Address adr, XMMRegister src) {
   int bits = REXBIT_W;
   bits |= get_base_prefix_bits(adr.base());
   bits |= get_index_prefix_bits(adr.index());
-  bits |= get_reg_prefix_bits(src->encoding()); 
+  bits |= get_reg_prefix_bits(src->encoding());
   prefix16(WREX2 | bits);
 }
 
@@ -14067,9 +14067,13 @@ static bool     precomputed = false;
 
 static u_char* popa_code  = nullptr;
 static int     popa_len   = 0;
+static u_char* popa_code_apx  = nullptr;
+static int     popa_len_apx   = 0;
 
 static u_char* pusha_code = nullptr;
 static int     pusha_len  = 0;
+static u_char* pusha_code_apx = nullptr;
+static int     pusha_len_apx  = 0;
 
 static u_char* vzup_code  = nullptr;
 static int     vzup_len   = 0;
@@ -14081,7 +14085,7 @@ void Assembler::precompute_instructions() {
   ResourceMark rm;
 
   // Make a temporary buffer big enough for the routines we're capturing
-  int size = 256;
+  int size = UseAPX > 0 ? 512 : 256;
   char* tmp_code = NEW_RESOURCE_ARRAY(char, size);
   CodeBuffer buffer((address)tmp_code, size);
   MacroAssembler masm(&buffer);
@@ -14094,6 +14098,13 @@ void Assembler::precompute_instructions() {
   masm.vzeroupper_uncached();
   address end_vzup    = masm.code_section()->end();
 
+  if (UseAPX > 0) {
+    masm.popa_uncached_apx();
+    end_popa  = masm.code_section()->end();
+    masm.pusha_uncached_apx();
+    end_pusha   = masm.code_section()->end();
+  }
+
   // Save the instructions to permanent buffers.
   popa_len = (int)(end_popa - begin_popa);
   popa_code = NEW_C_HEAP_ARRAY(u_char, popa_len, mtInternal);
@@ -14111,6 +14122,16 @@ void Assembler::precompute_instructions() {
     vzup_code = pusha_code; // dummy
   }
 
+  if (UseAPX > 0) {
+    popa_len_apx = (int)(end_popa - end_vzup);
+    popa_code_apx = NEW_C_HEAP_ARRAY(u_char, popa_len_apx, mtInternal);
+    memcpy(popa_code_apx, end_vzup, popa_len_apx);
+
+    pusha_len_apx = (int)(end_pusha - end_popa);
+    pusha_code_apx = NEW_C_HEAP_ARRAY(u_char, pusha_len_apx, mtInternal);
+    memcpy(pusha_code_apx, end_popa, pusha_len_apx);
+  }
+
   assert(masm.code()->total_oop_size() == 0 &&
          masm.code()->total_metadata_size() == 0 &&
          masm.code()->total_relocation_size() == 0,
@@ -14129,6 +14150,47 @@ void Assembler::popa() { // 64bit
   emit_copy(code_section(), popa_code, popa_len);
 }
 
+#ifdef _LP64
+void Assembler::popa_uncached_apx() { // 64bit
+  assert(UseAPX > 0, "");
+  movq(r31, Address(rsp, 0));
+  movq(r30, Address(rsp, wordSize));
+  movq(r29, Address(rsp, 2 * wordSize));
+  movq(r28, Address(rsp, 3 * wordSize));
+  movq(r27, Address(rsp, 4 * wordSize));
+  movq(r26, Address(rsp, 5 * wordSize));
+  movq(r25, Address(rsp, 6 * wordSize));
+  movq(r24, Address(rsp, 7 * wordSize));
+  movq(r23, Address(rsp, 8 * wordSize));
+  movq(r22, Address(rsp, 9 * wordSize));
+  movq(r21, Address(rsp, 10 * wordSize));
+  movq(r20, Address(rsp, 11 * wordSize));
+  movq(r19, Address(rsp, 12 * wordSize));
+  movq(r18, Address(rsp, 13 * wordSize));
+  movq(r17, Address(rsp, 14 * wordSize));
+  movq(r16, Address(rsp, 15 * wordSize));
+  movq(r15, Address(rsp, 16 * wordSize));
+  movq(r14, Address(rsp, 17 * wordSize));
+  movq(r13, Address(rsp, 18 * wordSize));
+  movq(r12, Address(rsp, 19 * wordSize));
+  movq(r11, Address(rsp, 20 * wordSize));
+  movq(r10, Address(rsp, 21 * wordSize));
+  movq(r9,  Address(rsp, 22 * wordSize));
+  movq(r8,  Address(rsp, 23 * wordSize));
+  movq(rdi, Address(rsp, 24 * wordSize));
+  movq(rsi, Address(rsp, 25 * wordSize));
+  movq(rbp, Address(rsp, 26 * wordSize));
+  // Skip rsp as it is restored automatically to the value
+  // before the corresponding pusha when popa is done.
+  movq(rbx, Address(rsp, 28 * wordSize));
+  movq(rdx, Address(rsp, 29 * wordSize));
+  movq(rcx, Address(rsp, 30 * wordSize));
+  movq(rax, Address(rsp, 31 * wordSize));
+
+  addq(rsp, 32 * wordSize);
+}
+#endif
+
 void Assembler::popa_uncached() { // 64bit
   movq(r15, Address(rsp, 0));
   movq(r14, Address(rsp, wordSize));
@@ -14157,6 +14219,50 @@ void Assembler::pusha() { // 64bit
   emit_copy(code_section(), pusha_code, pusha_len);
 }
 
+#ifdef _LP64
+// Does not actually store the value of rsp on the stack.
+// The slot for rsp just contains an arbitrary value.
+void Assembler::pusha_uncached_apx() { // 64bit
+  assert(UseAPX > 0, "");
+  subq(rsp, 32 * wordSize);
+
+  movq(Address(rsp, 31 * wordSize), rax);
+  movq(Address(rsp, 30 * wordSize), rcx);
+  movq(Address(rsp, 29 * wordSize), rdx);
+  movq(Address(rsp, 28 * wordSize), rbx);
+  // Skip rsp as the value is normally not used. There are a few places where
+  // the original value of rsp needs to be known but that can be computed
+  // from the value of rsp immediately after pusha (rsp + 16 * wordSize).
+  movq(Address(rsp, 26 * wordSize), rbp);
+  movq(Address(rsp, 25 * wordSize), rsi);
+  movq(Address(rsp, 24 * wordSize), rdi);
+  movq(Address(rsp, 23 * wordSize), r8);
+  movq(Address(rsp, 22 * wordSize), r9);
+  movq(Address(rsp, 21 * wordSize), r10);
+  movq(Address(rsp, 20 * wordSize), r11);
+  movq(Address(rsp, 19 * wordSize), r12);
+  movq(Address(rsp, 18 * wordSize), r13);
+  movq(Address(rsp, 17 * wordSize), r14);
+  movq(Address(rsp, 16 * wordSize), r15);
+  movq(Address(rsp, 15 * wordSize), r16);
+  movq(Address(rsp, 14 * wordSize), r17);
+  movq(Address(rsp, 13 * wordSize), r18);
+  movq(Address(rsp, 12 * wordSize), r19);
+  movq(Address(rsp, 11 * wordSize), r20);
+  movq(Address(rsp, 10 * wordSize), r21);
+  movq(Address(rsp, 9 * wordSize), r22);
+  movq(Address(rsp, 8 * wordSize), r23);
+  movq(Address(rsp, 7 * wordSize), r24);
+  movq(Address(rsp, 6 * wordSize), r25);
+  movq(Address(rsp, 5 * wordSize), r26);
+  movq(Address(rsp, 4 * wordSize), r27);
+  movq(Address(rsp, 3 * wordSize), r28);
+  movq(Address(rsp, 2 * wordSize), r29);
+  movq(Address(rsp, wordSize), r30);
+  movq(Address(rsp, 0), r31);
+}
+#endif
+
 // Does not actually store the value of rsp on the stack.
 // The slot for rsp just contains an arbitrary value.
 void Assembler::pusha_uncached() { // 64bit
diff --git a/src/hotspot/cpu/x86/assembler_x86.hpp b/src/hotspot/cpu/x86/assembler_x86.hpp
index b455186b95a..63e95ffeada 100644
--- a/src/hotspot/cpu/x86/assembler_x86.hpp
+++ b/src/hotspot/cpu/x86/assembler_x86.hpp
@@ -1007,6 +1007,8 @@ class Assembler : public AbstractAssembler  {
 
   void pusha_uncached();
   void popa_uncached();
+  void pusha_uncached_apx();
+  void popa_uncached_apx();
 #endif
   void vzeroupper_uncached();
   void decq(Register dst);
diff --git a/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp b/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp
index dc01ada5f2d..c42cb531d4c 100644
--- a/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp
+++ b/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp
@@ -219,7 +219,32 @@ OopMap* RegisterSaver::save_live_registers(MacroAssembler* masm, int additional_
   // to be under the return like a normal enter.
 
   __ enter();          // rsp becomes 16-byte aligned here
-  __ push_CPU_state(); // Push a multiple of 16 bytes
+
+  __ pushf();
+  // Make sure rsp stays 16-byte aligned
+  __ subq(rsp, 8);
+  // Push CPU state in multiple of 16 bytes
+  __ subq(rsp, 16 * wordSize);
+
+  __ movq(Address(rsp, 15 * wordSize), rax);
+  __ movq(Address(rsp, 14 * wordSize), rcx);
+  __ movq(Address(rsp, 13 * wordSize), rdx);
+  __ movq(Address(rsp, 12 * wordSize), rbx);
+  // Skip rsp as the value is normally not used. There are a few places where
+  // the original value of rsp needs to be known but that can be computed
+  // from the value of rsp immediately after pusha (rsp + 16 * wordSize).
+  __ movq(Address(rsp, 10 * wordSize), rbp);
+  __ movq(Address(rsp, 9 * wordSize), rsi);
+  __ movq(Address(rsp, 8 * wordSize), rdi);
+  __ movq(Address(rsp, 7 * wordSize), r8);
+  __ movq(Address(rsp, 6 * wordSize), r9);
+  __ movq(Address(rsp, 5 * wordSize), r10);
+  __ movq(Address(rsp, 4 * wordSize), r11);
+  __ movq(Address(rsp, 3 * wordSize), r12);
+  __ movq(Address(rsp, 2 * wordSize), r13);
+  __ movq(Address(rsp, wordSize), r14);
+  __ movq(Address(rsp, 0), r15);
+  __ push_FPU_state();
 
   // push cpu state handles this on EVEX enabled targets
   if (save_wide_vectors) {
@@ -506,7 +531,29 @@ void RegisterSaver::restore_live_registers(MacroAssembler* masm, bool restore_wi
 #endif
 
   // Recover CPU state
-  __ pop_CPU_state();
+  __ pop_FPU_state();
+
+  __ movq(r15, Address(rsp, 0));
+  __ movq(r14, Address(rsp, wordSize));
+  __ movq(r13, Address(rsp, 2 * wordSize));
+  __ movq(r12, Address(rsp, 3 * wordSize));
+  __ movq(r11, Address(rsp, 4 * wordSize));
+  __ movq(r10, Address(rsp, 5 * wordSize));
+  __ movq(r9,  Address(rsp, 6 * wordSize));
+  __ movq(r8,  Address(rsp, 7 * wordSize));
+  __ movq(rdi, Address(rsp, 8 * wordSize));
+  __ movq(rsi, Address(rsp, 9 * wordSize));
+  __ movq(rbp, Address(rsp, 10 * wordSize));
+  // Skip rsp as it is restored automatically to the value
+  // before the corresponding pusha when popa is done.
+  __ movq(rbx, Address(rsp, 12 * wordSize));
+  __ movq(rdx, Address(rsp, 13 * wordSize));
+  __ movq(rcx, Address(rsp, 14 * wordSize));
+  __ movq(rax, Address(rsp, 15 * wordSize));
+  __ addq(rsp, 16 * wordSize);
+  __ addq(rsp, 8);
+  __ popf();
+
   // Get the rbp described implicitly by the calling convention (no oopMap)
   __ pop(rbp);
 }
@@ -2617,7 +2664,7 @@ void SharedRuntime::generate_deopt_blob() {
   }
 #endif
   if (UseAPX > 0) {
-    pad += 256;
+    pad += 752;
   }
   CodeBuffer buffer("deopt_blob", 2560+pad, 1024);
   MacroAssembler* masm = new MacroAssembler(&buffer);
@@ -3330,7 +3377,7 @@ RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const cha
   // allocate space for the code
   ResourceMark rm;
 
-  CodeBuffer buffer(name, 1456, 512);
+  CodeBuffer buffer(name, 1752, 512);
   MacroAssembler* masm = new MacroAssembler(&buffer);
 
   int frame_size_in_words;
