diff --git a/test/jdk/java/lang/Float16/FP16ScalarOperations.java b/test/jdk/java/lang/Float16/FP16ScalarOperations.java
index 96654e8497b..7cff96e3eb3 100644
--- a/test/jdk/java/lang/Float16/FP16ScalarOperations.java
+++ b/test/jdk/java/lang/Float16/FP16ScalarOperations.java
@@ -25,64 +25,48 @@
 /*
  * @test
  * @bug 8308363 8336406
- * @summary Verify binary FP16 scalar operations
+ * @summary Verify FP16 unary, binary and ternary operations
  * @compile FP16ScalarOperations.java
  * @run main/othervm --enable-preview -XX:-TieredCompilation -Xbatch FP16ScalarOperations
  */
 
 import java.util.Random;
-
+import java.util.stream.IntStream;
 import static java.lang.Float16.*;
 
 public class FP16ScalarOperations {
 
     public static Random r = new Random(1024);
+    public static final Float16 ONE = Float16.valueOf(1.0);
+    public static final Float16 ZERO = Float16.valueOf(0.0);
 
-    public static short actual_value(String oper, short... val) {
+    public static Float16 actual_value(String oper, Float16... val) {
         switch (oper) {
-            case "abs"        : return float16ToRawShortBits(Float16.abs(shortBitsToFloat16(val[0])));
-            case "neg"        : return float16ToRawShortBits(Float16.negate(shortBitsToFloat16(val[0])));
-            case "sqrt"       : return float16ToRawShortBits(Float16.sqrt(shortBitsToFloat16(val[0])));
-            case "isInfinite" : return (short)(Float16.isInfinite(shortBitsToFloat16(val[0])) ? 1 : 0);
-            case "isFinite"   : return (short)(Float16.isFinite(shortBitsToFloat16(val[0])) ? 1 : 0);
-            case "isNaN"      : return (short)(Float16.isNaN(shortBitsToFloat16(val[0])) ? 1 : 0);
-            case "+"          : return float16ToRawShortBits(Float16.add(shortBitsToFloat16(val[0]), shortBitsToFloat16(val[1])));
-            case "-"          : return float16ToRawShortBits(Float16.subtract(shortBitsToFloat16(val[0]), shortBitsToFloat16(val[1])));
-            case "*"          : return float16ToRawShortBits(Float16.multiply(shortBitsToFloat16(val[0]), shortBitsToFloat16(val[1])));
-            case "/"          : return float16ToRawShortBits(Float16.divide(shortBitsToFloat16(val[0]), shortBitsToFloat16(val[1])));
-            case "min"        : return float16ToRawShortBits(Float16.min(shortBitsToFloat16(val[0]), shortBitsToFloat16(val[1])));
-            case "max"        : return float16ToRawShortBits(Float16.max(shortBitsToFloat16(val[0]), shortBitsToFloat16(val[1])));
-            case "fma"        : return float16ToRawShortBits(Float16.fma(shortBitsToFloat16(val[0]), shortBitsToFloat16(val[1]), shortBitsToFloat16(val[2])));
+            case "abs"        : return Float16.abs(val[0]);
+            case "neg"        : return Float16.negate(val[0]);
+            case "sqrt"       : return Float16.sqrt(val[0]);
+            case "isInfinite" : return Float16.isInfinite(val[0]) ? ONE : ZERO;
+            case "isFinite"   : return Float16.isFinite(val[0]) ? ONE : ZERO;
+            case "isNaN"      : return Float16.isNaN(val[0]) ? ONE : ZERO;
+            case "+"          : return Float16.add(val[0], val[1]);
+            case "-"          : return Float16.subtract(val[0], val[1]);
+            case "*"          : return Float16.multiply(val[0], val[1]);
+            case "/"          : return Float16.divide(val[0], val[1]);
+            case "min"        : return Float16.min(val[0], val[1]);
+            case "max"        : return Float16.max(val[0], val[1]);
+            case "fma"        : return Float16.fma(val[0], val[1], val[2]);
             default           : throw new AssertionError("Unsupported Operation!");
         }
     }
 
-    public static void test_operations(short [] arr1, short arr2[], short arr3[]) {
-        for (int i = 0; i < arr1.length; i++) {
-            validate("abs", arr1[i]);
-            validate("neg", arr1[i]);
-            validate("sqrt", arr1[i]);
-            validate("isInfinite", arr1[i]);
-            validate("isFinite", arr1[i]);
-            validate("isNaN", arr1[i]);
-            validate("+", arr1[i], arr2[i]);
-            validate("-", arr1[i], arr2[i]);
-            validate("*", arr1[i], arr2[i]);
-            validate("/", arr1[i], arr2[i]);
-            validate("min", arr1[i], arr2[i]);
-            validate("max", arr1[i], arr2[i]);
-            validate("fma", arr1[i], arr2[i], arr3[i]);
-        }
-    }
-
     public static short expected_value(String oper, short... input) {
         switch(oper) {
             case "abs"        : return Float.floatToFloat16(Math.abs(Float.float16ToFloat(input[0])));
             case "neg"        : return (short)(input[0] ^ (short)0x0000_8000);
             case "sqrt"       : return Float.floatToFloat16((float)Math.sqrt((double)Float.float16ToFloat(input[0])));
-            case "isInfinite" : return (short)(Float.isInfinite(Float.float16ToFloat(input[0])) ? 1 : 0);
-            case "isFinite"   : return (short)(Float.isFinite(Float.float16ToFloat(input[0])) ? 1 : 0);
-            case "isNaN"      : return (short)(Float.isNaN(Float.float16ToFloat(input[0])) ? 1 : 0);
+            case "isInfinite" : return Float.isInfinite(Float.float16ToFloat(input[0])) ? float16ToRawShortBits(ONE) : float16ToRawShortBits(ZERO);
+            case "isFinite"   : return Float.isFinite(Float.float16ToFloat(input[0])) ? float16ToRawShortBits(ONE) : float16ToRawShortBits(ZERO);
+            case "isNaN"      : return Float.isNaN(Float.float16ToFloat(input[0])) ? float16ToRawShortBits(ONE): float16ToRawShortBits(ZERO);
             case "+"          : return Float.floatToFloat16(Float.float16ToFloat(input[0]) + Float.float16ToFloat(input[1]));
             case "-"          : return Float.floatToFloat16(Float.float16ToFloat(input[0]) - Float.float16ToFloat(input[1]));
             case "*"          : return Float.floatToFloat16(Float.float16ToFloat(input[0]) * Float.float16ToFloat(input[1]));
@@ -94,50 +78,80 @@ public static short expected_value(String oper, short... input) {
         }
     }
 
-    public static boolean compare(short actual, short expected) {
-        return !((0xFFFF & actual) == (0xFFFF & expected));
-    }
+    public static void validate(String oper, Float16... input) {
+        int arity = input.length;
+        short [] rawinput = new short[arity];
+        IntStream.range(0, input.length).forEach(i -> {rawinput[i] = float16ToRawShortBits(input[i]);});
 
-    public static void validate(String oper, short... input) {
-        short actual = actual_value(oper, input);
-        short expected = expected_value(oper, input);
-        if (compare(actual, expected)) {
-            if (input.length == 1) {
-                throw new AssertionError("Test Failed: " + oper + "(" + input[0] + ") : " +  actual + " != " + expected);
-            }
-            if (input.length == 2) {
-                throw new AssertionError("Test Failed: " + oper + "(" + input[0] + ", " + input[1] + ") : " + actual + " != " + expected);
-            }
-            if (input.length == 3) {
-                throw new AssertionError("Test failed: " + oper + "(" + input[0] + ", " + input[1] + ", " + input[2] + ") : " + actual + " != " + expected);
+        Float16 actual = actual_value(oper, input);
+        short expected = expected_value(oper, rawinput);
+
+        if (Float16.float16ToRawShortBits(actual) != expected) {
+            switch (arity) {
+                case 1:
+                    throw new AssertionError("Test Failed: " + oper + "(" + input[0] + ") : " +  actual + " != " + expected);
+                case 2:
+                    throw new AssertionError("Test Failed: " + oper + "(" + input[0] + ", " + input[1] + ") : " + actual + " != " + expected);
+                case 3:
+                    throw new AssertionError("Test failed: " + oper + "(" + input[0] + ", " + input[1] + ", " + input[2] + ") : " + actual + " != " + expected);
+                default:
+                    throw new AssertionError("Incorrect operation (" + oper + ")  arity = " + arity);
             }
         }
     }
 
-    public static short [] get_fp16_array(int size) {
-        short [] arr = new short[size];
-        for (int i = 0; i < arr.length; i++) {
-            arr[i] = Float.floatToFloat16(r.nextFloat());
+    public static void test_unary_operations(Float16 [] inp) {
+        for (int i = 0; i < inp.length; i++) {
+            validate("abs", inp[i]);
+            validate("neg", inp[i]);
+            validate("sqrt", inp[i]);
+            validate("isInfinite", inp[i]);
+            validate("isFinite", inp[i]);
+            validate("isNaN", inp[i]);
+        }
+    }
+
+    public static void test_binary_operations(Float16 [] inp1, Float16 inp2[]) {
+        for (int i = 0; i < inp1.length; i++) {
+            validate("+", inp1[i], inp2[i]);
+            validate("-", inp1[i], inp2[i]);
+            validate("*", inp1[i], inp2[i]);
+            validate("/", inp1[i], inp2[i]);
+        }
+    }
+
+    public static void test_ternary_operations(Float16 [] inp1, Float16 inp2[], Float16 inp3[]) {
+        for (int i = 0; i < inp1.length; i++) {
+            validate("fma", inp1[i], inp2[i], inp3[i]);
         }
-        return arr;
     }
 
     public static void main(String [] args) {
         int res = 0;
-        short [] input1 = get_fp16_array(1024);
-        short [] input2 = get_fp16_array(1024);
-        short [] input3 = get_fp16_array(1024);
-
-        short [] special_values = {
-              32256,          // NAN
-              31744,          // +Inf
-              (short)-1024,   // -Inf
-              0,              // +0.0
-              (short)-32768,  // -0.0
+        Float16 [] input1 = new Float16[1024];
+        Float16 [] input2 = new Float16[1024];
+        Float16 [] input3 = new Float16[1024];
+
+        IntStream.range(0, input1.length).forEach(i -> {input1[i] = Float16.valueOf(r.nextFloat());});
+        IntStream.range(0, input2.length).forEach(i -> {input2[i] = Float16.valueOf(r.nextFloat());});
+        IntStream.range(0, input2.length).forEach(i -> {input3[i] = Float16.valueOf(r.nextFloat());});
+
+        Float16 [] special_values = {
+              Float16.NaN,                 // NAN
+              Float16.POSITIVE_INFINITY,   // +Inf
+              Float16.NEGATIVE_INFINITY,   // -Inf
+              Float16.valueOf(0.0),        // +0.0
+              Float16.valueOf(-0.0),       // -0.0
         };
+
         for (int i = 0;  i < 1000; i++) {
-            test_operations(input1, input2, input3);
-            test_operations(special_values, special_values, special_values);
+            test_unary_operations(input1);
+            test_binary_operations(input1, input2);
+            test_ternary_operations(input1, input2, input3);
+
+            test_unary_operations(special_values);
+            test_binary_operations(special_values, input1);
+            test_ternary_operations(special_values, input1, input2);
         }
         System.out.println("PASS");
     }
