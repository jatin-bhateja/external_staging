diff --git a/src/hotspot/share/ci/ciField.cpp b/src/hotspot/share/ci/ciField.cpp
index a2cb2129026..39cc734f686 100644
--- a/src/hotspot/share/ci/ciField.cpp
+++ b/src/hotspot/share/ci/ciField.cpp
@@ -245,7 +245,6 @@ ciField::ciField(ciField* field, ciInstanceKlass* holder, int offset, bool is_fi
   _is_multifield = field->_is_multifield;
   _is_multifield_base = field->_is_multifield_base;
   _secondary_fields_count = field->_secondary_fields_count;
-
 }
 
 static bool trust_final_non_static_fields(ciInstanceKlass* holder) {
diff --git a/src/hotspot/share/ci/ciField.hpp b/src/hotspot/share/ci/ciField.hpp
index d69a26d40a5..041e38ea7a2 100644
--- a/src/hotspot/share/ci/ciField.hpp
+++ b/src/hotspot/share/ci/ciField.hpp
@@ -30,6 +30,7 @@
 #include "ci/ciFlags.hpp"
 #include "ci/ciInstance.hpp"
 #include "ci/ciUtilities.hpp"
+#include "utilities/growableArray.hpp"
 
 // ciField
 //
@@ -40,6 +41,7 @@ class ciField : public ArenaObj {
   CI_PACKAGE_ACCESS
   friend class ciEnv;
   friend class ciInstanceKlass;
+  friend class ciMultiField;
 
 private:
   ciFlags          _flags;
@@ -203,4 +205,20 @@ public:
   void print_name_on(outputStream* st);
 };
 
+class ciMultiField : public ciField {
+private:
+  CI_PACKAGE_ACCESS
+  friend class ciInstanceKlass;
+
+  GrowableArray<ciField*>*   _secondary_fields;
+
+  ciMultiField(ciInstanceKlass* klass, int index) : ciField(klass, index) {}
+  ciMultiField(fieldDescriptor* fd) : ciField(fd) {}
+  ciMultiField(ciField* field, ciInstanceKlass* holder, int offset, bool is_final) :
+       ciField(field, holder, offset, is_final) {}
+public:
+  void add_secondary_fields(GrowableArray<ciField*>* fields) { _secondary_fields = fields; }
+  GrowableArray<ciField*>* secondary_fields() { return _secondary_fields; }
+};
+
 #endif // SHARE_CI_CIFIELD_HPP
diff --git a/src/hotspot/share/ci/ciInlineKlass.hpp b/src/hotspot/share/ci/ciInlineKlass.hpp
index f8015a189c5..2cfa81d533a 100644
--- a/src/hotspot/share/ci/ciInlineKlass.hpp
+++ b/src/hotspot/share/ci/ciInlineKlass.hpp
@@ -31,6 +31,7 @@
 #include "ci/ciInstanceKlass.hpp"
 #include "ci/ciSymbol.hpp"
 #include "oops/inlineKlass.hpp"
+#include "ci/ciField.hpp"
 
 // ciInlineKlass
 //
@@ -70,7 +71,18 @@ public:
   // ith non-static declared field (presented by ascending address)
   ciField* declared_nonstatic_field_at(int i) {
     assert(_declared_nonstatic_fields != NULL, "should be initialized");
-    return _declared_nonstatic_fields->at(i);
+    if (i < _declared_nonstatic_fields->length()) {
+      return _declared_nonstatic_fields->at(i);
+    } else {
+      // Look for field in preceding multi-field bundle;
+      for (uint j = 0; j < (uint)i; j++) {
+        int bundle_size = _declared_nonstatic_fields->at(j)->secondary_fields_count();
+        if ((j + bundle_size) > (uint)i) {
+          return static_cast<ciMultiField*>(_declared_nonstatic_fields->at(j))->secondary_fields()->at(i - (j + 1));
+        }
+      }
+    }
+    return NULL;
   }
 
   // Inline type fields
diff --git a/src/hotspot/share/ci/ciInstanceKlass.cpp b/src/hotspot/share/ci/ciInstanceKlass.cpp
index 0071447689f..52210d987a2 100644
--- a/src/hotspot/share/ci/ciInstanceKlass.cpp
+++ b/src/hotspot/share/ci/ciInstanceKlass.cpp
@@ -419,12 +419,22 @@ ciField* ciInstanceKlass::get_field_by_offset(int field_offset, bool is_static)
   if (!is_static) {
     for (int i = 0, len = nof_nonstatic_fields(); i < len; i++) {
       ciField* field = _nonstatic_fields->at(i);
-      int  field_off = field->offset_in_bytes();
+      int field_off = field->offset_in_bytes();
       if (field_off == field_offset)
         return field;
       if (field_off > field_offset)
         break;
       // could do binary search or check bins, but probably not worth it
+      if (field->secondary_fields_count() > 1) {
+        for (int j = 0; j < field->secondary_fields_count(); j++) {
+          ciField* sec_field = static_cast<ciMultiField*>(field)->secondary_fields()->at(j);
+          int sec_field_offset = sec_field->offset_in_bytes();
+          if (sec_field_offset == field_offset)
+            return sec_field;
+          if (sec_field_offset > field_offset)
+            return NULL;
+        }
+      }
     }
     return NULL;
   }
@@ -550,7 +560,13 @@ GrowableArray<ciField*>* ciInstanceKlass::compute_nonstatic_fields_impl(Growable
 
   for (JavaFieldStream fs(k); !fs.done(); fs.next()) {
     if (fs.access_flags().is_static())  continue;
-    if (fs.is_multifield()) continue;
+    if (fs.is_multifield()) {
+      assert(fields->last()->is_multifield_base(), "");
+      ciMultiField* multifield_base = static_cast<ciMultiField*>(fields->last());
+      fieldDescriptor& fd = fs.field_descriptor();
+      multifield_base->secondary_fields()->append(new (arena) ciField(&fd));
+      continue;
+    }
     fieldDescriptor& fd = fs.field_descriptor();
     if (fd.is_inlined() && flatten) {
       // Inline type fields are embedded
@@ -567,11 +583,24 @@ GrowableArray<ciField*>* ciInstanceKlass::compute_nonstatic_fields_impl(Growable
         // A flattened field can be treated as final if the non-flattened
         // field is declared final or the holder klass is an inline type itself.
         bool is_final = fd.is_final() || is_inlinetype();
-        ciField* field = new (arena) ciField(flattened_field, this, offset, is_final);
+        ciField* field = NULL;
+        if (flattened_field->secondary_fields_count() > 1) {
+          field = new (arena) ciMultiField(flattened_field, this, offset, is_final);
+          static_cast<ciMultiField*>(field)->add_secondary_fields(static_cast<ciMultiField*>(flattened_field)->secondary_fields());
+        } else {
+          field = new (arena) ciField(flattened_field, this, offset, is_final);
+        }
         fields->append(field);
       }
     } else {
-      ciField* field = new (arena) ciField(&fd);
+      ciField* field = NULL;
+      if (fs.is_multifield_base()) {
+        field = new (arena) ciMultiField(&fd);
+        GrowableArray<ciField*>* sec_fields = new (arena) GrowableArray<ciField*>(arena, field->secondary_fields_count(), 0, NULL);
+        static_cast<ciMultiField*>(field)->add_secondary_fields(sec_fields);
+      } else {
+        field = new (arena) ciField(&fd);
+      }
       fields->append(field);
     }
   }
diff --git a/src/hotspot/share/ci/ciInstanceKlass.hpp b/src/hotspot/share/ci/ciInstanceKlass.hpp
index 48e31ace6bd..c1f55682cc6 100644
--- a/src/hotspot/share/ci/ciInstanceKlass.hpp
+++ b/src/hotspot/share/ci/ciInstanceKlass.hpp
@@ -43,6 +43,7 @@ class ciInstanceKlass : public ciKlass {
   friend class ciExceptionHandler;
   friend class ciMethod;
   friend class ciField;
+  friend class ciMultiField;
   friend class ciReplay;
 
 private:
diff --git a/src/hotspot/share/opto/inlinetypenode.cpp b/src/hotspot/share/opto/inlinetypenode.cpp
index f5f94cdcd8a..b978b2c3547 100644
--- a/src/hotspot/share/opto/inlinetypenode.cpp
+++ b/src/hotspot/share/opto/inlinetypenode.cpp
@@ -47,6 +47,26 @@ bool InlineTypeNode::cmp(const Node& n) const {
   return TypeNode::cmp(n) && ((InlineTypeNode&)n)._is_buffered == _is_buffered;
 }
 
+void InlineTypeNode::expand_input_edges(ciInlineKlass * vk) {
+  // We generally perform three operations on multi-field bundle, load its contents into vector,
+  // store the contents of vector to multi-field bundle or broadcast a value into a vector equivalent
+  // in size to a multi-field bundle. If any of these operations are not supported by target platform
+  // scalarize the multi-fields into individual fields.
+  for(int i = 0; i < vk->nof_declared_nonstatic_fields(); i++) {
+    ciField* field = vk->declared_nonstatic_field_at(i);
+    int field_count = field->secondary_fields_count();
+    BasicType bt = field->type()->basic_type();
+    if (field_count > 1 &&
+        (!Matcher::match_rule_supported_vector(Op_LoadVector, field_count, bt) ||
+        !Matcher::match_rule_supported_vector(Op_StoreVector, field_count, bt) ||
+        !Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(bt), field_count, bt))) {
+      while(--field_count) {
+        add_req(NULL);
+      }
+    }
+  }
+}
+
 // Clones the inline type to handle control flow merges involving multiple inline types.
 // The inputs are replaced by PhiNodes to represent the merged values for the given region.
 InlineTypeNode* InlineTypeNode::clone_with_phis(PhaseGVN* gvn, Node* region, bool is_init) {
@@ -86,8 +106,9 @@ InlineTypeNode* InlineTypeNode::clone_with_phis(PhaseGVN* gvn, Node* region, boo
       value = value->as_InlineType()->clone_with_phis(gvn, region);
     } else {
       phi_type = Type::get_const_type(type);
-      if (vt->is_multifield_base(i)) {
-        phi_type = TypeVect::make(phi_type, vt->secondary_field_count(i));
+      if (vt->is_multifield_base(i) &&
+          Matcher::vector_size_supported(type->basic_type(), vt->secondary_fields_count(i))) {
+        phi_type = TypeVect::make(phi_type, vt->secondary_fields_count(i));
       }
       value = PhiNode::make(region, value, phi_type);
       gvn->set_type(value, phi_type);
@@ -238,7 +259,7 @@ ciType* InlineTypeNode::field_type(uint index) const {
   return inline_klass()->declared_nonstatic_field_at(index)->type();
 }
 
-int InlineTypeNode::secondary_field_count(uint index) const {
+int InlineTypeNode::secondary_fields_count(uint index) const {
   assert(is_multifield_base(index), "non-multifield field at index");
   return inline_klass()->declared_nonstatic_field_at(index)->secondary_fields_count();
 }
@@ -379,8 +400,8 @@ void InlineTypeNode::load(GraphKit* kit, Node* base, Node* ptr, ciInstanceKlass*
   // Initialize the inline type by loading its field values from
   // memory and adding the values as input edges to the node.
   for (uint i = 0; i < field_count(); ++i) {
-    int offset = holder_offset + field_offset(i);
     Node* value = NULL;
+    int offset = holder_offset + field_offset(i);
     ciType* ft = field_type(i);
     bool null_free = field_is_null_free(i);
     if (null_free && ft->as_inline_klass()->is_empty()) {
@@ -410,28 +431,18 @@ void InlineTypeNode::load(GraphKit* kit, Node* base, Node* ptr, ciInstanceKlass*
         }
       } else {
         // Load field value from memory
+        BasicType bt = type2field[ft->basic_type()];
         const TypePtr* adr_type = field_adr_type(base, offset, holder, decorators, kit->gvn());
         Node* adr = kit->basic_plus_adr(base, ptr, offset);
-        BasicType bt = type2field[ft->basic_type()];
         assert(is_java_primitive(bt) || adr->bottom_type()->is_ptr_to_narrowoop() == UseCompressedOops, "inconsistent");
         const Type* val_type = Type::get_const_type(ft);
         if (is_array) {
           decorators |= IS_ARRAY;
         }
-        if (ft->bundle_size() > 1) {
-          int vec_len = ft->bundle_size();
-          BasicType elem_bt = ft->basic_type();
-          bool bundle_size_supported = Matcher::vector_size_supported(elem_bt, vec_len);
-
-          // Set the vector length to maximal supported vector length
-          // to allow graceful compilation exit at a later stage.
-          vec_len = bundle_size_supported ? vec_len : Matcher::max_vector_size(elem_bt);
-
-          value = kit->gvn().transform(LoadVectorNode::make(0, kit->control(), kit->memory(adr), adr, adr_type, vec_len, elem_bt));
-
-          if (!bundle_size_supported) {
-            kit->env()->record_method_not_compilable("Mutifield bundle size not supported for target", false);
-          }
+        int bundle_size = ft->bundle_size();
+        bool load_bundle = bundle_size > 1 ? Matcher::match_rule_supported_vector(Op_LoadVector, bundle_size, bt): false;
+        if (load_bundle) {
+          value = kit->gvn().transform(LoadVectorNode::make(0, kit->control(), kit->memory(adr), adr, adr_type, bundle_size, bt));
         } else {
           value = kit->access_load_at(base, adr, adr_type, val_type, bt, decorators);
         }
@@ -460,69 +471,31 @@ void InlineTypeNode::store_flattened(GraphKit* kit, Node* base, Node* ptr, ciIns
 
 void InlineTypeNode::store(GraphKit* kit, Node* base, Node* ptr, ciInstanceKlass* holder, int holder_offset, DecoratorSet decorators) const {
   // Write field values to memory
+  int field_idx = 0;
   for (uint i = 0; i < field_count(); ++i) {
-    int offset = holder_offset + field_offset(i);
     Node* value = field_value(i);
     ciType* ft = field_type(i);
+    int offset = holder_offset + field_offset(i);
     if (field_is_flattened(i)) {
-      if (kit->gvn().type(value)->isa_vect()) {
-        const TypePtr* adr_type = field_adr_type(base, offset, holder, decorators, kit->gvn());
-        Node* adr = kit->basic_plus_adr(base, ptr, offset);
-        int vec_len = kit->gvn().type(value)->is_vect()->length();
-        BasicType elem_bt = kit->gvn().type(value)->is_vect()->element_basic_type();
-        bool bundle_size_supported = Matcher::vector_size_supported(elem_bt, vec_len);
-
-        // Set the vector length to  maximal supported vector length to allow
-        // graceful compilation exit at a later stage.
-        vec_len = bundle_size_supported ? vec_len : Matcher::max_vector_size(elem_bt);
-
-        Node* store = kit->gvn().transform(StoreVectorNode::make(0, kit->control(), kit->memory(adr), adr, adr_type, value, vec_len));
-        kit->set_memory(store, adr_type);
-
-        if (!bundle_size_supported) {
-          kit->env()->record_method_not_compilable("Mutifield bundle size not supported for target", false);
-        }
-      } else {
-        if (!value->is_InlineType()) {
-          // Recursively store the flattened inline type field
-          value = InlineTypeNode::make_from_oop(kit, value, ft->as_inline_klass());
-        }
-        value->as_InlineType()->store_flattened(kit, base, ptr, holder, offset, decorators);
+      if (!value->is_InlineType()) {
+        // Recursively store the flattened inline type field
+        value = InlineTypeNode::make_from_oop(kit, value, ft->as_inline_klass());
       }
+      value->as_InlineType()->store_flattened(kit, base, ptr, holder, offset, decorators);
     } else {
-      // Store field value to memory
-      const TypePtr* adr_type = field_adr_type(base, offset, holder, decorators, kit->gvn());
-      Node* adr = kit->basic_plus_adr(base, ptr, offset);
+      int vec_len = ft->bundle_size();
       BasicType bt = type2field[ft->basic_type()];
-      assert(is_java_primitive(bt) || adr->bottom_type()->is_ptr_to_narrowoop() == UseCompressedOops, "inconsistent");
       const Type* val_type = Type::get_const_type(ft);
       const TypeAryPtr* ary_type = kit->gvn().type(base)->isa_aryptr();
       if (ary_type != NULL) {
         decorators |= IS_ARRAY;
       }
-      if (ft->bundle_size() > 1) {
-        int vec_len = ft->bundle_size();
-        BasicType elem_bt = ft->basic_type();
-
-        bool bundle_size_supported =
-          Matcher::match_rule_supported_vector(Op_StoreVector, vec_len, elem_bt) &&
-          Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(elem_bt), vec_len, elem_bt);
-
-        // Set the vector length to  maximal supported vector length
-        // to allow graceful compilation exit at a later stage.
-        vec_len = bundle_size_supported ? vec_len : Matcher::max_vector_size(elem_bt);
-
-        // Handling for non-flattened case, with default InlineFieldMaxFlatSize of 128
-        // all the concrete vectors should be fully flattened.
-        value = value->bottom_type()->isa_vect() ? value : kit->gvn().transform(VectorNode::scalar2vector(value, vec_len, val_type, false));
-        assert(value->bottom_type()->isa_vect() && value->bottom_type()->is_vect()->length() == (uint)ft->bundle_size(), "");
-
+      const TypePtr* adr_type = field_adr_type(base, offset, holder, decorators, kit->gvn());
+      Node* adr = kit->basic_plus_adr(base, ptr, offset);
+      assert(is_java_primitive(bt) || adr->bottom_type()->is_ptr_to_narrowoop() == UseCompressedOops, "inconsistent");
+      if (value->bottom_type()->isa_vect()) {
         Node* store = kit->gvn().transform(StoreVectorNode::make(0, kit->control(), kit->memory(adr), adr, adr_type, value, vec_len));
         kit->set_memory(store, adr_type);
-
-        if (!bundle_size_supported) {
-          kit->env()->record_method_not_compilable("Mutifield bundle size not supported for target", false);
-        }
       } else {
         kit->access_store_at(base, adr, adr_type, value, val_type, bt, decorators);
       }
@@ -792,17 +765,11 @@ Node* InlineTypeNode::default_value(PhaseGVN& gvn, ciType* field_type) {
   Node* value = gvn.zerocon(field_type->basic_type());
   if (field_type->bundle_size() > 1)  {
     int vec_len = field_type->bundle_size();
-    BasicType elem_bt = field_type->basic_type();
-    bool bundle_size_supported =
-      Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(elem_bt), vec_len, elem_bt);
-
-    // Set the vector length to  maximal supported vector length
-    // to allow graceful compilation exit at a later stage.
-    vec_len = bundle_size_supported ? vec_len : Matcher::max_vector_size(elem_bt);
-    value = gvn.transform(VectorNode::scalar2vector(value, vec_len, Type::get_const_type(field_type), false));
-
-    if (!bundle_size_supported) {
-        gvn.C->env()->record_method_not_compilable("Mutifield bundle size not supported for target", false);
+    BasicType bt = field_type->basic_type();
+    if (Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(bt), vec_len, bt)) {
+      value = gvn.transform(VectorNode::scalar2vector(value, vec_len, Type::get_const_type(field_type), false));
+    } else {
+      // scalar default value to match the bundle size will be returned in subsiquent calls to default_value.
     }
   }
   return value;
diff --git a/src/hotspot/share/opto/inlinetypenode.hpp b/src/hotspot/share/opto/inlinetypenode.hpp
index 812095dc9fe..92b58301426 100644
--- a/src/hotspot/share/opto/inlinetypenode.hpp
+++ b/src/hotspot/share/opto/inlinetypenode.hpp
@@ -28,6 +28,7 @@
 #include "opto/connode.hpp"
 #include "opto/loopnode.hpp"
 #include "opto/node.hpp"
+#include "opto/matcher.hpp"
 
 class GraphKit;
 
@@ -43,6 +44,7 @@ protected:
   InlineTypeNode(ciInlineKlass* vk, Node* oop, bool null_free, bool is_buffered)
       : TypeNode(TypeInstPtr::make(null_free ? TypePtr::NotNull : TypePtr::BotPTR, vk), Values + vk->nof_declared_nonstatic_fields()), _is_buffered(is_buffered) {
     init_class_id(Class_InlineType);
+    expand_input_edges(vk); 
     init_req(Oop, oop);
     Compile::current()->add_inline_type(this);
   }
@@ -53,6 +55,8 @@ protected:
          Values     // Nodes corresponding to values of the inline type's fields.
                     // Nodes are connected in increasing order of the index of the field they correspond to.
   };
+  
+  void expand_input_edges(ciInlineKlass * vk);
 
   void make_scalar_in_safepoint(PhaseIterGVN* igvn, Unique_Node_List& worklist, SafePointNode* sfpt);
 
@@ -110,11 +114,12 @@ public:
 
   Node*         field_value_by_offset(int offset, bool recursive = false) const;
   void          set_field_value(uint index, Node* value);
+
   void          set_field_value_by_offset(int offset, Node* value);
   int           field_offset(uint index) const;
   bool          is_multifield(uint index) const;
   bool          is_multifield_base(uint index) const;
-  int           secondary_field_count(uint index) const;
+  int           secondary_fields_count(uint index) const;
   bool          is_multifield() const;
   ciType*       field_type(uint index) const;
   bool          field_is_flattened(uint index) const;
diff --git a/src/hotspot/share/opto/parseHelper.cpp b/src/hotspot/share/opto/parseHelper.cpp
index 86018d2220d..c41b4ec1889 100644
--- a/src/hotspot/share/opto/parseHelper.cpp
+++ b/src/hotspot/share/opto/parseHelper.cpp
@@ -369,10 +369,18 @@ void Parse::do_withfield() {
   for (uint i = 2; i < holder->req(); ++i) {
     new_vt->set_req(i, holder->in(i));
   }
-  if (field->secondary_fields_count() > 1 && !val->bottom_type()->isa_vect()) {
+
+  BasicType bt = field->type()->basic_type();
+  int vec_len = field->secondary_fields_count();  
+  bool scalarize_fields = !is_java_primitive(bt) || !Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(bt), vec_len, bt);
+  if (scalarize_fields) {
+    for(int i = 0; i < vec_len; i++) {
+      new_vt->set_field_value_by_offset(field->offset() + i * type2aelembytes(bt), val);
+    }
+  } else {
     val = _gvn.transform(VectorNode::scalar2vector(val, field->secondary_fields_count(), Type::get_const_type(field->type()), false));
+    new_vt->set_field_value_by_offset(field->offset(), val);
   }
-  new_vt->set_field_value_by_offset(field->offset(), val);
   push(_gvn.transform(new_vt));
 }
 
