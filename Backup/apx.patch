diff --git a/src/hotspot/cpu/x86/c1_Defs_x86.hpp b/src/hotspot/cpu/x86/c1_Defs_x86.hpp
index 28da99cdf27..c951f9b0e79 100644
--- a/src/hotspot/cpu/x86/c1_Defs_x86.hpp
+++ b/src/hotspot/cpu/x86/c1_Defs_x86.hpp
@@ -39,7 +39,8 @@ enum {
 
 // registers
 enum {
-  pd_nof_cpu_regs_frame_map = Register::number_of_registers,       // number of registers used during code emission
+  //pd_nof_cpu_regs_frame_map = Register::number_of_registers,     // FIXME, enable with EGPR support for C1.
+  pd_nof_cpu_regs_frame_map = LP64_ONLY(16) NOT_LP64(8),           // number of registers used during code emission
   pd_nof_fpu_regs_frame_map = FloatRegister::number_of_registers,  // number of registers used during code emission
   pd_nof_xmm_regs_frame_map = XMMRegister::number_of_registers,    // number of registers used during code emission
 
diff --git a/src/hotspot/cpu/x86/gc/x/xBarrierSetAssembler_x86.cpp b/src/hotspot/cpu/x86/gc/x/xBarrierSetAssembler_x86.cpp
index 38129a9fc81..ef685b4d8c9 100644
--- a/src/hotspot/cpu/x86/gc/x/xBarrierSetAssembler_x86.cpp
+++ b/src/hotspot/cpu/x86/gc/x/xBarrierSetAssembler_x86.cpp
@@ -482,6 +482,25 @@ class XSaveLiveRegisters {
     caller_saved.Insert(OptoReg::as_OptoReg(r11->as_VMReg()));
     caller_saved.Remove(OptoReg::as_OptoReg(stub->ref()->as_VMReg()));
 
+    if (VM_Version::supports_apx_f()) {
+      caller_saved.Insert(OptoReg::as_OptoReg(r16->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r17->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r18->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r19->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r20->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r21->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r22->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r23->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r24->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r25->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r26->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r27->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r28->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r29->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r30->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r31->as_VMReg()));
+    }
+
     // Create mask of live registers
     RegMask live = stub->live();
     if (stub->tmp() != noreg) {
diff --git a/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp b/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp
index 6cb16a09d55..dca11d2b5d4 100644
--- a/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp
+++ b/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp
@@ -1290,6 +1290,25 @@ class ZSaveLiveRegisters {
     caller_saved.Insert(OptoReg::as_OptoReg(r10->as_VMReg()));
     caller_saved.Insert(OptoReg::as_OptoReg(r11->as_VMReg()));
 
+    if (VM_Version::supports_apx_f()) {
+      caller_saved.Insert(OptoReg::as_OptoReg(r16->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r17->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r18->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r19->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r20->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r21->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r22->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r23->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r24->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r25->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r26->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r27->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r28->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r29->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r30->as_VMReg()));
+      caller_saved.Insert(OptoReg::as_OptoReg(r31->as_VMReg()));
+    }
+
     if (stub->result() != noreg) {
       caller_saved.Remove(OptoReg::as_OptoReg(stub->result()->as_VMReg()));
     }
diff --git a/src/hotspot/cpu/x86/globals_x86.hpp b/src/hotspot/cpu/x86/globals_x86.hpp
index cacbce676d0..f13d8db14f2 100644
--- a/src/hotspot/cpu/x86/globals_x86.hpp
+++ b/src/hotspot/cpu/x86/globals_x86.hpp
@@ -116,6 +116,10 @@ define_pd_global(intx, InitArrayShortSize, 8*BytesPerLong);
           "Highest supported AVX instructions set on x86/x64")              \
           range(0, 3)                                                       \
                                                                             \
+  product(int, UseAPX, 0,                                                   \
+          "Use Intel Advanced Performance Extensions.")                     \
+          range(0, 1)                                                       \
+                                                                            \
   product(bool, UseKNLSetting, false, DIAGNOSTIC,                           \
           "Control whether Knights platform setting should be used")        \
                                                                             \
diff --git a/src/hotspot/cpu/x86/register_x86.hpp b/src/hotspot/cpu/x86/register_x86.hpp
index 2cfc3ec58ed..59ed656cdbe 100644
--- a/src/hotspot/cpu/x86/register_x86.hpp
+++ b/src/hotspot/cpu/x86/register_x86.hpp
@@ -45,7 +45,7 @@ class Register {
   inline friend constexpr Register as_Register(int encoding);
 
   enum {
-    number_of_registers      = LP64_ONLY( 16 ) NOT_LP64( 8 ),
+    number_of_registers      = LP64_ONLY( 32 ) NOT_LP64( 8 ),
     number_of_byte_registers = LP64_ONLY( 16 ) NOT_LP64( 4 ),
     max_slots_per_register   = LP64_ONLY(  2 ) NOT_LP64( 1 )
   };
@@ -115,6 +115,22 @@ constexpr Register r12 = as_Register(12);
 constexpr Register r13 = as_Register(13);
 constexpr Register r14 = as_Register(14);
 constexpr Register r15 = as_Register(15);
+constexpr Register r16 = as_Register(16);
+constexpr Register r17 = as_Register(17);
+constexpr Register r18 = as_Register(18);
+constexpr Register r19 = as_Register(19);
+constexpr Register r20 = as_Register(20);
+constexpr Register r21 = as_Register(21);
+constexpr Register r22 = as_Register(22);
+constexpr Register r23 = as_Register(23);
+constexpr Register r24 = as_Register(24);
+constexpr Register r25 = as_Register(25);
+constexpr Register r26 = as_Register(26);
+constexpr Register r27 = as_Register(27);
+constexpr Register r28 = as_Register(28);
+constexpr Register r29 = as_Register(29);
+constexpr Register r30 = as_Register(30);
+constexpr Register r31 = as_Register(31);
 #endif // _LP64
 
 
diff --git a/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp b/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp
index faa423bcf8e..43addd008de 100644
--- a/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp
+++ b/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp
@@ -97,6 +97,7 @@ class RegisterSaver {
   // units because compiler frame slots are jints.
 #define XSAVE_AREA_BEGIN 160
 #define XSAVE_AREA_YMM_BEGIN 576
+#define XSAVE_AREA_EGPRS 960
 #define XSAVE_AREA_OPMASK_BEGIN 1088
 #define XSAVE_AREA_ZMM_BEGIN 1152
 #define XSAVE_AREA_UPPERBANK 1664
@@ -106,8 +107,8 @@ class RegisterSaver {
 #define DEF_OPMASK_OFFS(regnum)    opmask ## regnum ## _off = opmask_off + (regnum)*8/BytesPerInt,     opmask ## regnum ## H_off
 #define DEF_ZMM_UPPER_OFFS(regnum) zmm ## regnum ## _off = zmm_upper_off + (regnum-16)*64/BytesPerInt, zmm ## regnum ## H_off
   enum layout {
-    fpu_state_off = frame::arg_reg_save_area_bytes/BytesPerInt, // fxsave save area
-    xmm_off       = fpu_state_off + XSAVE_AREA_BEGIN/BytesPerInt,            // offset in fxsave save area
+    fpu_state_off = frame::arg_reg_save_area_bytes/BytesPerInt,    // fxsave save area
+    xmm_off       = fpu_state_off + XSAVE_AREA_BEGIN/BytesPerInt,  // offset in fxsave save area
     DEF_XMM_OFFS(0),
     DEF_XMM_OFFS(1),
     // 2..15 are implied in range usage
@@ -115,7 +116,24 @@ class RegisterSaver {
     DEF_YMM_OFFS(0),
     DEF_YMM_OFFS(1),
     // 2..15 are implied in range usage
-    opmask_off         = xmm_off + (XSAVE_AREA_OPMASK_BEGIN - XSAVE_AREA_BEGIN)/BytesPerInt,
+    r31_off = xmm_off + (XSAVE_AREA_EGPRS - XSAVE_AREA_BEGIN)/BytesPerInt,
+    r31H_off,
+    r30_off, r30H_off,
+    r29_off, r29H_off,
+    r28_off, r28H_off,
+    r27_off, r27H_off,
+    r26_off, r26H_off,
+    r25_off, r25H_off,
+    r24_off, r24H_off,
+    r23_off, r23H_off,
+    r22_off, r22H_off,
+    r21_off, r21H_off,
+    r20_off, r20H_off,
+    r19_off, r19H_off,
+    r18_off, r18H_off,
+    r17_off, r17H_off,
+    r16_off, r16H_off,
+    opmask_off   = xmm_off + (XSAVE_AREA_OPMASK_BEGIN - XSAVE_AREA_BEGIN)/BytesPerInt,
     DEF_OPMASK_OFFS(0),
     DEF_OPMASK_OFFS(1),
     // 2..7 are implied in range usage
@@ -281,6 +299,25 @@ OopMap* RegisterSaver::save_live_registers(MacroAssembler* masm, int additional_
   map->set_callee_saved(STACK_OFFSET( r13_off ), r13->as_VMReg());
   map->set_callee_saved(STACK_OFFSET( r14_off ), r14->as_VMReg());
   map->set_callee_saved(STACK_OFFSET( r15_off ), r15->as_VMReg());
+
+  if (VM_Version::supports_apx_f()) {
+    map->set_callee_saved(STACK_OFFSET( r16_off ), r16->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r17_off ), r17->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r18_off ), r18->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r19_off ), r19->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r20_off ), r20->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r21_off ), r21->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r22_off ), r22->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r23_off ), r23->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r24_off ), r24->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r25_off ), r25->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r26_off ), r26->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r27_off ), r27->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r28_off ), r28->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r29_off ), r29->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r30_off ), r30->as_VMReg());
+    map->set_callee_saved(STACK_OFFSET( r31_off ), r31->as_VMReg());
+  }
   // For both AVX and EVEX we will use the legacy FXSAVE area for xmm0..xmm15,
   // on EVEX enabled targets, we get it included in the xsave area
   off = xmm0_off;
@@ -341,6 +378,24 @@ OopMap* RegisterSaver::save_live_registers(MacroAssembler* masm, int additional_
     map->set_callee_saved(STACK_OFFSET( r13H_off ), r13->as_VMReg()->next());
     map->set_callee_saved(STACK_OFFSET( r14H_off ), r14->as_VMReg()->next());
     map->set_callee_saved(STACK_OFFSET( r15H_off ), r15->as_VMReg()->next());
+    if (VM_Version::supports_apx_f()) {
+      map->set_callee_saved(STACK_OFFSET( r16H_off ), r16->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r17H_off ), r17->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r18H_off ), r18->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r19H_off ), r19->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r20H_off ), r20->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r21H_off ), r21->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r22H_off ), r22->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r23H_off ), r23->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r24H_off ), r24->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r25H_off ), r25->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r26H_off ), r26->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r27H_off ), r27->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r28H_off ), r28->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r29H_off ), r29->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r30H_off ), r30->as_VMReg()->next());
+      map->set_callee_saved(STACK_OFFSET( r31H_off ), r31->as_VMReg()->next());
+    }
     // For both AVX and EVEX we will use the legacy FXSAVE area for xmm0..xmm15,
     // on EVEX enabled targets, we get it included in the xsave area
     off = xmm0H_off;
diff --git a/src/hotspot/cpu/x86/vm_version_x86.cpp b/src/hotspot/cpu/x86/vm_version_x86.cpp
index df1ea6edd30..d3131f55965 100644
--- a/src/hotspot/cpu/x86/vm_version_x86.cpp
+++ b/src/hotspot/cpu/x86/vm_version_x86.cpp
@@ -113,7 +113,7 @@ class VM_Version_StubGenerator: public StubCodeGenerator {
     bool use_evex = FLAG_IS_DEFAULT(UseAVX) || (UseAVX > 2);
 
     Label detect_486, cpu486, detect_586, std_cpuid1, std_cpuid4;
-    Label sef_cpuid, ext_cpuid, ext_cpuid1, ext_cpuid5, ext_cpuid7, ext_cpuid8, done, wrapup;
+    Label sef_cpuid, sefsl1_cpuid, ext_cpuid, ext_cpuid1, ext_cpuid5, ext_cpuid7, ext_cpuid8, done, wrapup, epilogue;
     Label legacy_setup, save_restore_except, legacy_save_restore, start_simd_check;
 
     StubCodeMark mark(this, "VM_Version", "get_cpu_info_stub");
@@ -288,7 +288,7 @@ class VM_Version_StubGenerator: public StubCodeGenerator {
     __ movl(Address(rsi, 4), rdx);
 
     //
-    // cpuid(0x7) Structured Extended Features
+    // cpuid(0x7) Structured Extended Features Enumeration Leaf.
     //
     __ bind(sef_cpuid);
     __ movl(rax, 7);
@@ -303,6 +303,19 @@ class VM_Version_StubGenerator: public StubCodeGenerator {
     __ movl(Address(rsi, 8), rcx);
     __ movl(Address(rsi, 12), rdx);
 
+    if (UseAPX) {
+      //
+      // cpuid(0x7) Structured Extended Features Enumeration Sub-Leaf 1.
+      //
+      __ bind(sefsl1_cpuid);
+      __ movl(rax, 7);
+      __ movl(rcx, 1);
+      __ cpuid();
+      __ lea(rsi, Address(rbp, in_bytes(VM_Version::sefsl1_cpuid7_offset())));
+      __ movl(Address(rsi, 0), rax);
+      __ movl(Address(rsi, 4), rdx);
+    }
+
     //
     // Extended cpuid(0x80000000)
     //
@@ -579,6 +592,24 @@ class VM_Version_StubGenerator: public StubCodeGenerator {
     UseSSE = saved_usesse;
 
     __ bind(wrapup);
+
+    if (UseAPX) {
+      // To enable APX, check CPUID.EAX=7.ECX=1.EDX[21] bit for HW support
+      // and XCRO[19] bit for OS support to save/restore extended GPR state.
+      __ lea(rsi, Address(rbp, in_bytes(VM_Version::sefsl1_cpuid7_offset())));
+      __ movl(rax, 0x100000);
+      __ andl(rax, Address(rsi, 4));
+      __ cmpl(rax, 0x100000);
+      __ jcc(Assembler::notEqual, epilogue);
+      // check _cpuid_info.xem_xcr0_eax.bits.apx_f
+      __ movl(rax, 0x80000);
+      __ andl(rax, Address(rbp, in_bytes(VM_Version::xem_xcr0_offset()))); // xcr0 bits apx_f
+      __ cmpl(rax, 0x80000);
+      __ jcc(Assembler::notEqual, epilogue);
+      // TODO check for EGPR save restore
+    }
+
+    __ bind(epilogue);
     __ popf();
     __ pop(rsi);
     __ pop(rbx);
@@ -2927,6 +2958,10 @@ uint64_t VM_Version::feature_flags() {
     result |= CPU_SSE4_2;
   if (_cpuid_info.std_cpuid1_ecx.bits.popcnt != 0)
     result |= CPU_POPCNT;
+  if (_cpuid_info.sefsl1_cpuid7_edx.bits.apx_f != 0 &&
+      _cpuid_info.xem_xcr0_eax.bits.apx_f != 0) {
+    result |= CPU_APX_F;
+  }
   if (_cpuid_info.std_cpuid1_ecx.bits.avx != 0 &&
       _cpuid_info.std_cpuid1_ecx.bits.osxsave != 0 &&
       _cpuid_info.xem_xcr0_eax.bits.sse != 0 &&
diff --git a/src/hotspot/cpu/x86/vm_version_x86.hpp b/src/hotspot/cpu/x86/vm_version_x86.hpp
index e521a6ee3bc..66531b657bf 100644
--- a/src/hotspot/cpu/x86/vm_version_x86.hpp
+++ b/src/hotspot/cpu/x86/vm_version_x86.hpp
@@ -279,6 +279,19 @@ class VM_Version : public Abstract_VM_Version {
     } bits;
   };
 
+  union SefCpuid7SubLeaf1Eax {
+    uint32_t value;
+  };
+
+  union SefCpuid7SubLeaf1Edx {
+    uint32_t value;
+    struct {
+      uint32_t       : 21,
+              apx_f  : 1,
+                     : 10;
+    } bits;
+  };
+
   union ExtCpuid1EEbx {
     uint32_t value;
     struct {
@@ -299,7 +312,9 @@ class VM_Version : public Abstract_VM_Version {
                opmask  : 1,
                zmm512  : 1,
                zmm32   : 1,
-                       : 24;
+                       : 11,
+               apx_f   : 1,
+                       : 12;
     } bits;
   };
 
@@ -390,7 +405,8 @@ class VM_Version : public Abstract_VM_Version {
     decl(OSPKE,             "ospke",             55) /* OS enables protection keys */ \
     decl(CET_IBT,           "cet_ibt",           56) /* Control Flow Enforcement - Indirect Branch Tracking */ \
     decl(CET_SS,            "cet_ss",            57) /* Control Flow Enforcement - Shadow Stack */ \
-    decl(AVX512_IFMA,       "avx512_ifma",       58) /* Integer Vector FMA instructions*/
+    decl(AVX512_IFMA,       "avx512_ifma",       58) /* Integer Vector FMA instructions*/  \
+    decl(APX_F,             "apx_f",             59) /* Intel Advanced Performance Extensions*/
 
 #define DECLARE_CPU_FEATURE_FLAG(id, name, bit) CPU_##id = (1ULL << bit),
     CPU_FEATURE_FLAGS(DECLARE_CPU_FEATURE_FLAG)
@@ -447,12 +463,17 @@ class VM_Version : public Abstract_VM_Version {
     uint32_t     dcp_cpuid4_ecx; // unused currently
     uint32_t     dcp_cpuid4_edx; // unused currently
 
-    // cpuid function 7 (structured extended features)
+    // cpuid function 7 (structured extended features enumeration leaf)
     SefCpuid7Eax sef_cpuid7_eax;
     SefCpuid7Ebx sef_cpuid7_ebx;
     SefCpuid7Ecx sef_cpuid7_ecx;
     SefCpuid7Edx sef_cpuid7_edx;
 
+    // cpuid function 7 (structured extended features enumeration sub-leaf 1)
+    // eax = 7, ecx = 1
+    SefCpuid7SubLeaf1Eax sefsl1_cpuid7_eax;
+    SefCpuid7SubLeaf1Edx sefsl1_cpuid7_edx;
+
     // cpuid function 0xB (processor topology)
     // ecx = 0
     uint32_t     tpl_cpuidB0_eax;
@@ -563,6 +584,7 @@ class VM_Version : public Abstract_VM_Version {
   static ByteSize std_cpuid1_offset() { return byte_offset_of(CpuidInfo, std_cpuid1_eax); }
   static ByteSize dcp_cpuid4_offset() { return byte_offset_of(CpuidInfo, dcp_cpuid4_eax); }
   static ByteSize sef_cpuid7_offset() { return byte_offset_of(CpuidInfo, sef_cpuid7_eax); }
+  static ByteSize sefsl1_cpuid7_offset() { return byte_offset_of(CpuidInfo, sefsl1_cpuid7_eax); }
   static ByteSize ext_cpuid1_offset() { return byte_offset_of(CpuidInfo, ext_cpuid1_eax); }
   static ByteSize ext_cpuid5_offset() { return byte_offset_of(CpuidInfo, ext_cpuid5_eax); }
   static ByteSize ext_cpuid7_offset() { return byte_offset_of(CpuidInfo, ext_cpuid7_eax); }
@@ -587,6 +609,7 @@ class VM_Version : public Abstract_VM_Version {
   static void clean_cpuFeatures()   { _features = 0; }
   static void set_avx_cpuFeatures() { _features = (CPU_SSE | CPU_SSE2 | CPU_AVX | CPU_VZEROUPPER ); }
   static void set_evex_cpuFeatures() { _features = (CPU_AVX512F | CPU_SSE | CPU_SSE2 | CPU_VZEROUPPER ); }
+  static void set_apx_cpuFeatures() { _features |= CPU_APX_F; }
 
   // Initialization
   static void initialize();
@@ -683,6 +706,7 @@ class VM_Version : public Abstract_VM_Version {
   static bool supports_avx512novl()   { return (supports_evex() && !supports_avx512vl()); }
   static bool supports_avx512nobw()   { return (supports_evex() && !supports_avx512bw()); }
   static bool supports_avx256only()   { return (supports_avx2() && !supports_evex()); }
+  static bool supports_apx_f()        { return (_features & CPU_APX_F) != 0; }
   static bool supports_avxonly()      { return ((supports_avx2() || supports_avx()) && !supports_evex()); }
   static bool supports_sha()          { return (_features & CPU_SHA) != 0; }
   static bool supports_fma()          { return (_features & CPU_FMA) != 0 && supports_avx(); }
diff --git a/src/hotspot/cpu/x86/x86_64.ad b/src/hotspot/cpu/x86/x86_64.ad
index 80f281a1bf9..7ce16e76044 100644
--- a/src/hotspot/cpu/x86/x86_64.ad
+++ b/src/hotspot/cpu/x86/x86_64.ad
@@ -128,6 +128,53 @@ reg_def R14_H(SOC, SOE, Op_RegI, 14, r14->as_VMReg()->next());
 reg_def R15  (SOC, SOE, Op_RegI, 15, r15->as_VMReg());
 reg_def R15_H(SOC, SOE, Op_RegI, 15, r15->as_VMReg()->next());
 
+reg_def R16  (SOC, SOC, Op_RegI, 16, r16->as_VMReg());
+reg_def R16_H(SOC, SOC, Op_RegI, 16, r16->as_VMReg()->next());
+
+reg_def R17  (SOC, SOC, Op_RegI, 17, r17->as_VMReg());
+reg_def R17_H(SOC, SOC, Op_RegI, 17, r17->as_VMReg()->next());
+
+reg_def R18  (SOC, SOC, Op_RegI, 18, r18->as_VMReg());
+reg_def R18_H(SOC, SOC, Op_RegI, 18, r18->as_VMReg()->next());
+
+reg_def R19  (SOC, SOC, Op_RegI, 19, r19->as_VMReg());
+reg_def R19_H(SOC, SOC, Op_RegI, 19, r19->as_VMReg()->next());
+
+reg_def R20  (SOC, SOC, Op_RegI, 20, r20->as_VMReg());
+reg_def R20_H(SOC, SOC, Op_RegI, 20, r20->as_VMReg()->next());
+
+reg_def R21  (SOC, SOC, Op_RegI, 21, r21->as_VMReg());
+reg_def R21_H(SOC, SOC, Op_RegI, 21, r21->as_VMReg()->next());
+
+reg_def R22  (SOC, SOC, Op_RegI, 22, r22->as_VMReg());
+reg_def R22_H(SOC, SOC, Op_RegI, 22, r22->as_VMReg()->next());
+
+reg_def R23  (SOC, SOC, Op_RegI, 23, r23->as_VMReg());
+reg_def R23_H(SOC, SOC, Op_RegI, 23, r23->as_VMReg()->next());
+
+reg_def R24  (SOC, SOC, Op_RegI, 24, r24->as_VMReg());
+reg_def R24_H(SOC, SOC, Op_RegI, 24, r24->as_VMReg()->next());
+
+reg_def R25  (SOC, SOC, Op_RegI, 25, r25->as_VMReg());
+reg_def R25_H(SOC, SOC, Op_RegI, 25, r25->as_VMReg()->next());
+
+reg_def R26  (SOC, SOC, Op_RegI, 26, r26->as_VMReg());
+reg_def R26_H(SOC, SOC, Op_RegI, 26, r26->as_VMReg()->next());
+
+reg_def R27  (SOC, SOC, Op_RegI, 27, r27->as_VMReg());
+reg_def R27_H(SOC, SOC, Op_RegI, 27, r27->as_VMReg()->next());
+
+reg_def R28  (SOC, SOC, Op_RegI, 28, r28->as_VMReg());
+reg_def R28_H(SOC, SOC, Op_RegI, 28, r28->as_VMReg()->next());
+
+reg_def R29  (SOC, SOC, Op_RegI, 29, r29->as_VMReg());
+reg_def R29_H(SOC, SOC, Op_RegI, 29, r29->as_VMReg()->next());
+
+reg_def R30  (SOC, SOC, Op_RegI, 30, r30->as_VMReg());
+reg_def R30_H(SOC, SOC, Op_RegI, 30, r30->as_VMReg()->next());
+
+reg_def R31  (SOC, SOC, Op_RegI, 31, r31->as_VMReg());
+reg_def R31_H(SOC, SOC, Op_RegI, 31, r31->as_VMReg()->next());
 
 // Floating Point Registers
 
@@ -154,6 +201,22 @@ alloc_class chunk0(R10,         R10_H,
                    R13,         R13_H,
                    R14,         R14_H,
                    R15,         R15_H,
+                   R16,         R16_H,
+                   R17,         R17_H,
+                   R18,         R18_H,
+                   R19,         R19_H,
+                   R20,         R20_H,
+                   R21,         R21_H,
+                   R22,         R22_H,
+                   R23,         R23_H,
+                   R24,         R24_H,
+                   R25,         R25_H,
+                   R26,         R26_H,
+                   R27,         R27_H,
+                   R28,         R28_H,
+                   R29,         R29_H,
+                   R30,         R30_H,
+                   R31,         R31_H,
                    RSP,         RSP_H);
 
 
@@ -167,7 +230,7 @@ alloc_class chunk0(R10,         R10_H,
 // Empty register class.
 reg_class no_reg();
 
-// Class for all pointer/long registers
+// Class for all pointer/long registers including APX extended GPRs.
 reg_class all_reg(RAX, RAX_H,
                   RDX, RDX_H,
                   RBP, RBP_H,
@@ -183,9 +246,25 @@ reg_class all_reg(RAX, RAX_H,
                   R12, R12_H,
                   R13, R13_H,
                   R14, R14_H,
-                  R15, R15_H);
-
-// Class for all int registers
+                  R15, R15_H,
+                  R16, R16_H,
+                  R17, R17_H,
+                  R18, R18_H,
+                  R19, R19_H,
+                  R20, R20_H,
+                  R21, R21_H,
+                  R22, R22_H,
+                  R23, R23_H,
+                  R24, R24_H,
+                  R25, R25_H,
+                  R26, R26_H,
+                  R27, R27_H,
+                  R28, R28_H,
+                  R29, R29_H,
+                  R30, R30_H,
+                  R31, R31_H);
+
+// Class for all int registers including APX extended GPRs.
 reg_class all_int_reg(RAX
                       RDX,
                       RBP,
@@ -199,7 +278,23 @@ reg_class all_int_reg(RAX
                       R11,
                       R12,
                       R13,
-                      R14);
+                      R14,
+                      R16,
+                      R17,
+                      R18,
+                      R19,
+                      R20,
+                      R21,
+                      R22,
+                      R23,
+                      R24,
+                      R25,
+                      R26,
+                      R27,
+                      R28,
+                      R29,
+                      R30,
+                      R31);
 
 // Class for all pointer registers
 reg_class any_reg %{
@@ -383,6 +478,8 @@ static bool need_r12_heapbase() {
 }
 
 void reg_mask_init() {
+  constexpr Register egprs[] = {r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31};
+
   // _ALL_REG_mask is generated by adlc from the all_reg register class below.
   // We derive a number of subsets from it.
   _ANY_REG_mask = _ALL_REG_mask;
@@ -401,6 +498,12 @@ void reg_mask_init() {
   _PTR_REG_mask.Remove(OptoReg::as_OptoReg(rsp->as_VMReg()->next()));
   _PTR_REG_mask.Remove(OptoReg::as_OptoReg(r15->as_VMReg()));
   _PTR_REG_mask.Remove(OptoReg::as_OptoReg(r15->as_VMReg()->next()));
+  if (!VM_Version::supports_apx_f()) {
+    for (uint i = 0; i < sizeof(egprs)/sizeof(Register); i++) {
+      _PTR_REG_mask.Remove(OptoReg::as_OptoReg(egprs[i]->as_VMReg()));
+      _PTR_REG_mask.Remove(OptoReg::as_OptoReg(egprs[i]->as_VMReg()->next()));
+    }
+  }
 
   _STACK_OR_PTR_REG_mask = _PTR_REG_mask;
   _STACK_OR_PTR_REG_mask.OR(STACK_OR_STACK_SLOTS_mask());
@@ -417,6 +520,7 @@ void reg_mask_init() {
   _PTR_NO_RAX_RBX_REG_mask.Remove(OptoReg::as_OptoReg(rbx->as_VMReg()));
   _PTR_NO_RAX_RBX_REG_mask.Remove(OptoReg::as_OptoReg(rbx->as_VMReg()->next()));
 
+
   _LONG_REG_mask = _PTR_REG_mask;
   _STACK_OR_LONG_REG_mask = _LONG_REG_mask;
   _STACK_OR_LONG_REG_mask.OR(STACK_OR_STACK_SLOTS_mask());
@@ -438,6 +542,12 @@ void reg_mask_init() {
   _LONG_NO_RBP_R13_REG_mask.Remove(OptoReg::as_OptoReg(r13->as_VMReg()->next()));
 
   _INT_REG_mask = _ALL_INT_REG_mask;
+  if (!VM_Version::supports_apx_f()) {
+    for (uint i = 0; i < sizeof(egprs)/sizeof(Register); i++) {
+      _INT_REG_mask.Remove(OptoReg::as_OptoReg(egprs[i]->as_VMReg()));
+    }
+  }
+
   if (PreserveFramePointer) {
     _INT_REG_mask.Remove(OptoReg::as_OptoReg(rbp->as_VMReg()));
   }
diff --git a/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/amd64/AMD64.java b/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/amd64/AMD64.java
index 9b6b0e9c352..e008ecf5a55 100644
--- a/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/amd64/AMD64.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/amd64/AMD64.java
@@ -232,6 +232,7 @@
         CET_IBT,
         CET_SS,
         AVX512_IFMA,
+        APX_F,
     }
 
     private final EnumSet<CPUFeature> features;
diff --git a/test/lib-test/jdk/test/whitebox/CPUInfoTest.java b/test/lib-test/jdk/test/whitebox/CPUInfoTest.java
index c3713f300a6..2398385f032 100644
--- a/test/lib-test/jdk/test/whitebox/CPUInfoTest.java
+++ b/test/lib-test/jdk/test/whitebox/CPUInfoTest.java
@@ -65,7 +65,7 @@
                     "avx512_vbmi2", "avx512_vbmi",      "rdtscp",            "rdpid",
                     "hv",           "fsrm",             "avx512_bitalg",     "gfni",
                     "f16c",         "pku",              "ospke",             "cet_ibt",
-                    "cet_ss",       "avx512_ifma",      "serialize"
+                    "cet_ss",       "avx512_ifma",      "serialize",          "apx_f"
                     );
             // @formatter:on
             // Checkstyle: resume
