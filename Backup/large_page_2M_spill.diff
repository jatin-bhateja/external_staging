diff --git a/src/hotspot/os/linux/os_linux.cpp b/src/hotspot/os/linux/os_linux.cpp
index cd0fd06f4e1..f57a09281d6 100644
--- a/src/hotspot/os/linux/os_linux.cpp
+++ b/src/hotspot/os/linux/os_linux.cpp
@@ -3482,25 +3482,6 @@ bool os::Linux::hugetlbfs_sanity_check(bool warn, size_t page_size) {
     // Mapping succeeded, sanity check passed.
     munmap(p, page_size);
     return true;
-  } else {
-      log_info(pagesize)("Large page size (" SIZE_FORMAT "%s) failed sanity check, "
-                         "checking if smaller large page sizes are usable",
-                         byte_size_in_exact_unit(page_size),
-                         exact_unit_for_byte_size(page_size));
-      for (size_t page_size_ = _page_sizes.next_smaller(page_size);
-          page_size_ != (size_t)os::vm_page_size();
-          page_size_ = _page_sizes.next_smaller(page_size_)) {
-        flags = MAP_ANONYMOUS | MAP_PRIVATE | MAP_HUGETLB | hugetlbfs_page_size_flag(page_size_);
-        p = mmap(NULL, page_size_, PROT_READ|PROT_WRITE, flags, -1, 0);
-        if (p != MAP_FAILED) {
-          // Mapping succeeded, sanity check passed.
-          munmap(p, page_size_);
-          log_info(pagesize)("Large page size (" SIZE_FORMAT "%s) passed sanity check",
-                             byte_size_in_exact_unit(page_size_),
-                             exact_unit_for_byte_size(page_size_));
-          return true;
-        }
-      }
   }
 
   if (warn) {
@@ -3627,9 +3608,19 @@ static os::PageSizes scan_multiple_page_support() {
   while ((entry = readdir(dir)) != NULL) {
     if (entry->d_type == DT_DIR &&
         sscanf(entry->d_name, "hugepages-%zukB", &page_size) == 1) {
+      size_t page_count = 0;
+      char *nr_hugepage = NEW_C_HEAP_ARRAY(char, 128, mtInternal);
+      sprintf(nr_hugepage, "%s/%s/nr_hugepages", sys_hugepages, entry->d_name);
+
+      FILE *fp = fopen(nr_hugepage, "r");
+      assert(fp != NULL , "nr_hugepages file does not exist");
+      int bytes = fscanf(fp, SIZE_FORMAT, &page_count);
+      assert(bytes > 0, "");
       // The kernel is using kB, hotspot uses bytes
       // Add each found Large Page Size to page_sizes
-      page_sizes.add(page_size * K);
+      page_sizes.add(page_size * K, page_count);
+      fclose(fp);
+      FREE_C_HEAP_ARRAY(char, nr_hugepage);
     }
   }
   closedir(dir);
@@ -3654,7 +3645,7 @@ void warn_no_large_pages_configured() {
   }
 }
 
-bool os::Linux::setup_large_page_type(size_t page_size) {
+bool os::Linux::large_page_sanity_check(size_t page_size) {
   if (FLAG_IS_DEFAULT(UseHugeTLBFS) &&
       FLAG_IS_DEFAULT(UseSHM) &&
       FLAG_IS_DEFAULT(UseTransparentHugePages)) {
@@ -3700,6 +3691,25 @@ bool os::Linux::setup_large_page_type(size_t page_size) {
   return false;
 }
 
+bool os::Linux::setup_large_page(size_t page_size) {
+  int flags = MAP_ANONYMOUS | MAP_PRIVATE | MAP_HUGETLB | hugetlbfs_page_size_flag(page_size);
+  void *p = mmap(NULL, page_size, PROT_READ|PROT_WRITE, flags, -1, 0);
+  if (p != MAP_FAILED) {
+    // Mapping succeeded, sanity check passed.
+    log_info(pagesize)("Large page size (" SIZE_FORMAT "%s) passed sanity check",
+                        byte_size_in_exact_unit(page_size),
+                        exact_unit_for_byte_size(page_size));
+    munmap(p, page_size);
+    return true;
+  }
+  log_info(pagesize)("Large page size (" SIZE_FORMAT "%s) failed sanity check, "
+                     "checking if smaller large page sizes are usable",
+                     byte_size_in_exact_unit(page_size),
+                     exact_unit_for_byte_size(page_size));
+  return false;
+}
+
+
 void os::large_page_init() {
   // 1) Handle the case where we do not want to use huge pages and hence
   //    there is no need to scan the OS for related info
@@ -3738,7 +3748,7 @@ void os::large_page_init() {
 
   // It is unclear if /sys/kernel/mm/hugepages/ and /proc/meminfo could disagree. Manually
   // re-add the default page size to the list of page sizes to be sure.
-  all_large_pages.add(default_large_page_size);
+  all_large_pages.add(default_large_page_size, all_large_pages.get_pagecount(default_large_page_size));
 
   // Check LargePageSizeInBytes matches an available page size and if so set _large_page_size
   // using LargePageSizeInBytes as the maximum allowed large page size. If LargePageSizeInBytes
@@ -3773,9 +3783,16 @@ void os::large_page_init() {
 
   // Populate _page_sizes with large page sizes less than or equal to
   // _large_page_size.
+  bool large_page_found = false;
   for (size_t page_size = _large_page_size; page_size != 0;
          page_size = all_large_pages.next_smaller(page_size)) {
-    _page_sizes.add(page_size);
+    if (!large_page_found &&
+        page_size != (size_t)os::vm_page_size() &&
+        os::Linux::setup_large_page(page_size)) {
+      _large_page_size = page_size;
+      large_page_found = true;
+    }
+    _page_sizes.add(page_size, all_large_pages.get_pagecount(page_size));
   }
 
   LogTarget(Info, pagesize) lt;
@@ -3786,7 +3803,7 @@ void os::large_page_init() {
   }
 
   // Now determine the type of large pages to use:
-  UseLargePages = os::Linux::setup_large_page_type(_large_page_size);
+  UseLargePages = os::Linux::large_page_sanity_check(_large_page_size);
 
   set_coredump_filter(LARGEPAGES_BIT);
 }
diff --git a/src/hotspot/os/linux/os_linux.hpp b/src/hotspot/os/linux/os_linux.hpp
index 692dae042ab..253b670279b 100644
--- a/src/hotspot/os/linux/os_linux.hpp
+++ b/src/hotspot/os/linux/os_linux.hpp
@@ -81,7 +81,9 @@ class Linux {
   static size_t scan_default_large_page_size();
   static os::PageSizes scan_multiple_page_support();
 
-  static bool setup_large_page_type(size_t page_size);
+  static bool large_page_sanity_check(size_t page_size);
+  static bool setup_large_page(size_t page_size);
+
   static bool transparent_huge_pages_sanity_check(bool warn, size_t pages_size);
   static bool hugetlbfs_sanity_check(bool warn, size_t page_size);
   static bool shm_hugetlbfs_sanity_check(bool warn, size_t page_size);
diff --git a/src/hotspot/share/runtime/os.cpp b/src/hotspot/share/runtime/os.cpp
index 8263480c11d..9583d77220e 100644
--- a/src/hotspot/share/runtime/os.cpp
+++ b/src/hotspot/share/runtime/os.cpp
@@ -1949,9 +1949,20 @@ void os::naked_sleep(jlong millis) {
 
 ////// Implementation of PageSizes
 
-void os::PageSizes::add(size_t page_size) {
+void os::PageSizes::add(size_t page_size, size_t page_count) {
   assert(is_power_of_2(page_size), "page_size must be a power of 2: " SIZE_FORMAT_HEX, page_size);
   _v |= page_size;
+  _page_count[exact_log2(page_size)] = page_count;
+}
+
+size_t os::PageSizes::get_pagecount(size_t page_size) const {
+  assert((_v & page_size), "invalid page_size");
+  return _page_count[exact_log2(page_size)];
+}
+
+void os::PageSizes::set_pagecount(size_t page_size, size_t page_count) {
+  assert((_v & page_size), "invalid page_size");
+  _page_count[exact_log2(page_size)] = page_count;
 }
 
 bool os::PageSizes::contains(size_t page_size) const {
@@ -2003,12 +2014,13 @@ void os::PageSizes::print_on(outputStream* st) const {
     } else {
       st->print_raw(", ");
     }
+    size_t page_count = get_pagecount(sz);
     if (sz < M) {
       st->print(SIZE_FORMAT "k", sz / K);
     } else if (sz < G) {
-      st->print(SIZE_FORMAT "M", sz / M);
+      st->print(SIZE_FORMAT "M (" SIZE_FORMAT ")", sz / M, page_count);
     } else {
-      st->print(SIZE_FORMAT "G", sz / G);
+      st->print(SIZE_FORMAT "G (" SIZE_FORMAT ")", sz / G, page_count);
     }
   }
   if (first) {
diff --git a/src/hotspot/share/runtime/os.hpp b/src/hotspot/share/runtime/os.hpp
index 45ed150ec7a..5bba4eb57cc 100644
--- a/src/hotspot/share/runtime/os.hpp
+++ b/src/hotspot/share/runtime/os.hpp
@@ -109,9 +109,10 @@ class os: AllStatic {
   // A simple value class holding a set of page sizes (similar to sigset_t)
   class PageSizes {
     size_t _v; // actually a bitmap.
+    size_t _page_count[sizeof(size_t)*8];
   public:
-    PageSizes() : _v(0) {}
-    void add(size_t pagesize);
+    PageSizes() : _v(0) { memset(&_page_count, 0, sizeof(_page_count)); }
+    void add(size_t pagesize, size_t pagecount = 0);
     bool contains(size_t pagesize) const;
     // Given a page size, return the next smaller page size in this set, or 0.
     size_t next_smaller(size_t pagesize) const;
@@ -121,6 +122,10 @@ class os: AllStatic {
     size_t largest() const;
     // Returns the smallest page size in this set, or 0 if set is empty.
     size_t smallest() const;
+    // Returns the page count corrosponding to a given page size.
+    size_t get_pagecount(size_t pagesize) const;
+    // Sets page count corrosponding to a given page size.
+    void set_pagecount(size_t pagesize, size_t pagecount);
     // Prints one line of comma separated, human readable page sizes, "empty" if empty.
     void print_on(outputStream* st) const;
   };
diff --git a/src/hotspot/share/runtime/thread.cpp b/src/hotspot/share/runtime/thread.cpp
index cb86541b810..10c9ddb4d5d 100644
--- a/src/hotspot/share/runtime/thread.cpp
+++ b/src/hotspot/share/runtime/thread.cpp
@@ -2738,6 +2738,10 @@ jint Threads::create_vm(JavaVMInitArgs* args, bool* canTryAgain) {
   // Initialize NMT right after argument parsing to keep the pre-NMT-init window small.
   MemTracker::initialize();
 #endif // INCLUDE_NMT
+  if (PauseAtStartup) {
+    os::pause();
+  }
+
 
   os::init_before_ergo();
 
@@ -2755,10 +2759,6 @@ jint Threads::create_vm(JavaVMInitArgs* args, bool* canTryAgain) {
     return JNI_EINVAL;
   }
 
-  if (PauseAtStartup) {
-    os::pause();
-  }
-
   HOTSPOT_VM_INIT_BEGIN();
 
   // Timing (must come after argument parsing)
diff --git a/test/hotspot/jtreg/runtime/os/TestExplicitPageAllocation2.java b/test/hotspot/jtreg/runtime/os/TestExplicitPageAllocation2.java
new file mode 100644
index 00000000000..5282fc4c2ef
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/os/TestExplicitPageAllocation2.java
@@ -0,0 +1,216 @@
+/*
+ * Copyright (c) 2020, 2022, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/* @test 8271195
+ * @summary Tests how explicit huge pages are allocated as per the availability on the system in higher to lower manner.
+ * @requires os.family == "linux"
+ * @requires vm.gc != "Z"
+ * @modules java.base/jdk.internal.misc
+ * @library /test/lib
+ * @run driver runtime.os.TestExplicitPageAllocation2
+ */
+
+package runtime.os;
+
+import jdk.test.lib.process.ProcessTools;
+import jdk.test.lib.process.OutputAnalyzer;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Collections;
+import jdk.test.lib.Utils;
+import java.util.regex.Pattern;
+import java.util.regex.Matcher;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.util.Scanner;
+import java.io.FileWriter;
+
+public class TestExplicitPageAllocation2 {
+    private static String file1GHugePages = "/sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages";
+    private static String file2MHugePages = "/sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages";
+    private static String heapPrefix = "Heap:";
+    private static Pattern heapPattern = Pattern.compile(heapPrefix);
+    private static FileInputStream fis;
+    private static DataInputStream dis;
+    private static int orig1GPageCount;
+    private static int orig2MPageCount;
+    private static String errorMessage = null;
+
+
+    public static void main(String args[]) throws Exception {
+	try {
+            doSetup();
+            testCase1();
+            testCase2();
+            testCase3();
+            testCase4();
+        } catch(Exception e) {
+	     System.out.println("Exception"+e);
+        }
+        if (errorMessage!=null) {
+            throw new AssertionError(errorMessage);
+        }
+
+    }
+
+    private static boolean matchPattern(String line, Pattern regex) {
+        return regex.matcher(line).find();
+    }
+    private static boolean matchPattern(String line) {
+        return matchPattern(line, heapPattern);
+    }
+
+    private static boolean checkOutput(OutputAnalyzer out, String pageSize) throws Exception {
+        List<String> lines = out.asLines();
+        String traceLinePatternString = ".*page_size=([^ ]+).*";
+        Pattern traceLinePattern = Pattern.compile(traceLinePatternString);
+        for (int i = 0; i < lines.size(); ++i) {
+            String line = lines.get(i);
+            System.out.println(line);
+            if (matchPattern(line)) {
+                Matcher trace = traceLinePattern.matcher(line);
+                trace.find();
+                String tracePageSize = trace.group(1);
+                System.out.println(line);
+                if(pageSize.contains(tracePageSize)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    public static int checkAndReadFile(String filename, String errorstr) throws Exception {
+        try {
+            fis = new FileInputStream(filename);
+            dis = new DataInputStream(fis);
+            int pagecount = Integer.parseInt(dis.readLine());
+            dis.close();
+            fis.close();
+            return pagecount;
+        } catch (Exception e) {
+            System.out.println(errorstr);
+        }
+        return -1;
+    }
+
+    public static void doSetup() throws Exception{
+        File file;
+        // Legality check for 1G , 2M pages.
+        orig1GPageCount = checkAndReadFile(file1GHugePages, "System does not support 1G pages");
+        if (orig1GPageCount >= 0) {
+            System.out.println("Number of 1G pages = " + orig1GPageCount + "\n");
+        }
+        orig2MPageCount =  checkAndReadFile(file2MHugePages, "System does not support 2M pages");
+        if (orig2MPageCount >= 0) {
+            System.out.println("Number of 2M pages = " + orig2MPageCount + "\n");
+        }
+    }
+
+    public static void testCase1() throws Exception {
+        if(orig1GPageCount < 2) {
+            System.out.println("TestCase1 skipped\n"); 
+            return;
+        }
+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder("-Xlog:pagesize",
+                                                                  "-XX:LargePageSizeInBytes=1G",
+                                                                  "-XX:+UseParallelGC",
+                                                                  "-XX:+UseLargePages",
+                                                                  "-Xmx2g",
+                                                                  "-Xms1g",
+                                                                  TestExplicitPageAllocation2.class.getName());
+        OutputAnalyzer output = new OutputAnalyzer(pb.start());
+        output.shouldHaveExitValue(0);
+        if(!checkOutput(output,"1G")) {
+           errorMessage = "Failed 1G page allocation\n";
+        } else {
+           System.out.println("TestCase1 Passed\n");
+        }
+    }
+
+    public static void testCase2() throws Exception {
+        if(orig1GPageCount > 0 || orig2MPageCount < 1280) {
+            System.out.println("TestCase2 skipped\n"); 
+            return;
+        }
+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder("-Xlog:pagesize",
+                                                                  "-XX:LargePageSizeInBytes=1G",
+                                                                  "-XX:+UseParallelGC",
+                                                                  "-XX:+UseLargePages",
+                                                                  "-Xmx2g",
+                                                                  "-Xms1g",
+                                                                  TestExplicitPageAllocation2.class.getName());
+        OutputAnalyzer output = new OutputAnalyzer(pb.start());
+        output.shouldHaveExitValue(0);
+        if(!checkOutput(output,"2M")) {
+           errorMessage = "Failed 2M page allocation\n";
+        } else {
+           System.out.println("TestCase2 Passed\n");
+        }
+    }
+
+    public static void testCase3() throws Exception {
+        if(orig1GPageCount > 0 || orig2MPageCount > 0) {
+            System.out.println("TestCase3 skipped\n"); 
+            return;
+        }
+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder("-Xlog:pagesize",
+                                                                 "-XX:LargePageSizeInBytes=1G",
+                                                                 "-XX:+UseParallelGC",
+                                                                 "-XX:+UseLargePages",
+                                                                 "-Xmx2g",
+                                                                 "-Xms1g",
+                                                                 TestExplicitPageAllocation2.class.getName());
+        OutputAnalyzer output = new OutputAnalyzer(pb.start());
+        output.shouldHaveExitValue(0);
+        if(!checkOutput(output,"4K")) {
+           errorMessage = "Failed 4K page allocation\n";
+        } else {
+           System.out.println("TestCase3 Passed\n");
+        }
+    }
+
+    public static void testCase4() throws Exception {
+        if(orig2MPageCount < 1280) {
+            System.out.println("TestCase4 skipped\n"); 
+            return;
+        }
+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder("-Xlog:pagesize",
+                                                                 "-XX:LargePageSizeInBytes=2M",
+                                                                 "-XX:+UseParallelGC",
+                                                                 "-XX:+UseLargePages",
+                                                                 "-Xmx2g",
+                                                                 "-Xms1g",
+                                                                 TestExplicitPageAllocation2.class.getName());
+        OutputAnalyzer output = new OutputAnalyzer(pb.start());
+        output.shouldHaveExitValue(0);
+        if(!checkOutput(output,"2M")) {
+           errorMessage = "Failed 2M page allocation\n";
+        } else {
+           System.out.println("TestCase4 Passed\n");
+        }
+    }
+}
diff --git a/test/micro/org/openjdk/bench/vm/gc/MicroLargePages.java b/test/micro/org/openjdk/bench/vm/gc/MicroLargePages.java
new file mode 100644
index 00000000000..114fbb4c97b
--- /dev/null
+++ b/test/micro/org/openjdk/bench/vm/gc/MicroLargePages.java
@@ -0,0 +1,74 @@
+//
+// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
+// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+//
+// This code is free software; you can redistribute it and/or modify it
+// under the terms of the GNU General Public License version 2 only, as
+// published by the Free Software Foundation.
+//
+// This code is distributed in the hope that it will be useful, but WITHOUT
+// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+// version 2 for more details (a copy is included in the LICENSE file that
+// accompanied this code).
+//
+// You should have received a copy of the GNU General Public License version
+// 2 along with this work; if not, write to the Free Software Foundation,
+// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+//
+// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+// or visit www.oracle.com if you need additional information or have any
+// questions.
+//
+//
+package org.openjdk.bench.vm.gc;
+
+import java.util.Random;
+import java.util.concurrent.TimeUnit;
+import org.openjdk.jmh.annotations.*;
+
+@OutputTimeUnit(TimeUnit.SECONDS)
+@State(Scope.Thread)
+public class MicroLargePages { 
+ 
+  // ALLOCATION OVER 4G MEMORY.
+  @Param({"1073741824"})
+  public int ARRAYSIZE;
+
+  public static final int ITERS = 10000;
+
+  public float[] INP;
+  public float[]  OUT;
+
+  public final float[] FspecialVals = {
+      0.0f, -0.0f, Float.NaN, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY,
+      Float.MAX_VALUE, -Float.MAX_VALUE, Float.MIN_VALUE, -Float.MIN_VALUE,
+      Float.MIN_NORMAL
+  };
+
+  @Setup(Level.Trial)
+  public void BmSetup() {
+      int i = 0;
+      Random r = new Random(1024);
+
+      INP = new float[ARRAYSIZE];
+      OUT = new float[ARRAYSIZE];
+
+      for (; i < FspecialVals.length; i++) {
+          INP[i] = FspecialVals[i];
+      }
+
+      for (; i < ARRAYSIZE; i++) {
+          INP[i] = r.nextFloat()*ARRAYSIZE;
+      }
+  }
+
+  @Benchmark
+  public void micro_HOP_DIST_2M() {
+      for (int i = 0; i < ITERS ; i++) {
+         for (int j = 0; j < ARRAYSIZE; j += 524288) {
+             OUT[j] = INP[j];
+         }
+      }
+  }
+}
