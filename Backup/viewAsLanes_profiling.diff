diff --git a/configure b/configure
old mode 100644
new mode 100755
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte128Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte128Vector.java
index 059adb451b6..a61328b7ac8 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte128Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte128Vector.java
@@ -255,6 +255,22 @@ final class Byte128Vector extends ByteVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Byte128Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    Vector<?>
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.BYTE.asFloating();
+        // asFloating() will throw UnsupportedOperationException for the unsupported type byte
+        throw new AssertionError("Cannot reach here");
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte256Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte256Vector.java
index e70a4bebfa1..731162da9ad 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte256Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte256Vector.java
@@ -255,6 +255,22 @@ final class Byte256Vector extends ByteVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Byte256Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    Vector<?>
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.BYTE.asFloating();
+        // asFloating() will throw UnsupportedOperationException for the unsupported type byte
+        throw new AssertionError("Cannot reach here");
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte512Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte512Vector.java
index b30955a91b0..4468888751e 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte512Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte512Vector.java
@@ -255,6 +255,22 @@ final class Byte512Vector extends ByteVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Byte512Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    Vector<?>
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.BYTE.asFloating();
+        // asFloating() will throw UnsupportedOperationException for the unsupported type byte
+        throw new AssertionError("Cannot reach here");
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte64Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte64Vector.java
index 56824f34871..65169052005 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte64Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Byte64Vector.java
@@ -255,6 +255,22 @@ final class Byte64Vector extends ByteVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Byte64Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    Vector<?>
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.BYTE.asFloating();
+        // asFloating() will throw UnsupportedOperationException for the unsupported type byte
+        throw new AssertionError("Cannot reach here");
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ByteMaxVector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ByteMaxVector.java
index 984762ed7c8..fbae783f272 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ByteMaxVector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ByteMaxVector.java
@@ -255,6 +255,22 @@ final class ByteMaxVector extends ByteVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final ByteMaxVector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    Vector<?>
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.BYTE.asFloating();
+        // asFloating() will throw UnsupportedOperationException for the unsupported type byte
+        throw new AssertionError("Cannot reach here");
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ByteVector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ByteVector.java
index 0ae566fda7f..4e4346da529 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ByteVector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ByteVector.java
@@ -1995,6 +1995,21 @@ public abstract class ByteVector extends AbstractVector<Byte> {
         throw new AssertionError(op);
     }
 
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    ByteVector viewAsIntegralLanes();
+
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    Vector<?>
+    viewAsFloatingLanes();
+
     /**
      * {@inheritDoc} <!--workaround-->
      */
@@ -3999,15 +4014,6 @@ public abstract class ByteVector extends AbstractVector<Byte> {
         return this;
     }
 
-    /**
-     * {@inheritDoc} <!--workaround-->
-     */
-    @ForceInline
-    @Override
-    public final ByteVector viewAsIntegralLanes() {
-        return this;
-    }
-
     /**
      * {@inheritDoc} <!--workaround-->
      *
@@ -4018,15 +4024,6 @@ public abstract class ByteVector extends AbstractVector<Byte> {
      * {@code Vector<?>}.  Future versions of this API may change the return
      * type if additional floating point types become available.
      */
-    @ForceInline
-    @Override
-    public final
-    Vector<?>
-    viewAsFloatingLanes() {
-        LaneType flt = LaneType.BYTE.asFloating();
-        // asFloating() will throw UnsupportedOperationException for the unsupported type byte
-        throw new AssertionError("Cannot reach here");
-    }
 
     // ================================================
 
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double128Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double128Vector.java
index cf774e3678f..6b11e4ddbfa 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double128Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double128Vector.java
@@ -255,6 +255,21 @@ final class Double128Vector extends DoubleVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Long128Vector viewAsIntegralLanes() {
+        LaneType ilt = LaneType.DOUBLE.asIntegral();
+        return (Long128Vector) asVectorRaw(ilt);
+    }
+
+    @Override
+    @ForceInline
+    public final
+    DoubleVector
+    viewAsFloatingLanes() {
+        return this;
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double256Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double256Vector.java
index 25738ae7ae7..08014bd672c 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double256Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double256Vector.java
@@ -255,6 +255,21 @@ final class Double256Vector extends DoubleVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Long256Vector viewAsIntegralLanes() {
+        LaneType ilt = LaneType.DOUBLE.asIntegral();
+        return (Long256Vector) asVectorRaw(ilt);
+    }
+
+    @Override
+    @ForceInline
+    public final
+    DoubleVector
+    viewAsFloatingLanes() {
+        return this;
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double512Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double512Vector.java
index f4e999c808c..51bc47843d1 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double512Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double512Vector.java
@@ -255,6 +255,21 @@ final class Double512Vector extends DoubleVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Long512Vector viewAsIntegralLanes() {
+        LaneType ilt = LaneType.DOUBLE.asIntegral();
+        return (Long512Vector) asVectorRaw(ilt);
+    }
+
+    @Override
+    @ForceInline
+    public final
+    DoubleVector
+    viewAsFloatingLanes() {
+        return this;
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double64Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double64Vector.java
index 510d739d976..473103f62f2 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double64Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Double64Vector.java
@@ -255,6 +255,21 @@ final class Double64Vector extends DoubleVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Long64Vector viewAsIntegralLanes() {
+        LaneType ilt = LaneType.DOUBLE.asIntegral();
+        return (Long64Vector) asVectorRaw(ilt);
+    }
+
+    @Override
+    @ForceInline
+    public final
+    DoubleVector
+    viewAsFloatingLanes() {
+        return this;
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/DoubleMaxVector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/DoubleMaxVector.java
index 877b14e24ba..8711ad85ce7 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/DoubleMaxVector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/DoubleMaxVector.java
@@ -255,6 +255,21 @@ final class DoubleMaxVector extends DoubleVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final LongMaxVector viewAsIntegralLanes() {
+        LaneType ilt = LaneType.DOUBLE.asIntegral();
+        return (LongMaxVector) asVectorRaw(ilt);
+    }
+
+    @Override
+    @ForceInline
+    public final
+    DoubleVector
+    viewAsFloatingLanes() {
+        return this;
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/DoubleVector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/DoubleVector.java
index 64bd795f817..dd43b304ecb 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/DoubleVector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/DoubleVector.java
@@ -1824,6 +1824,21 @@ public abstract class DoubleVector extends AbstractVector<Double> {
         throw new AssertionError(op);
     }
 
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    LongVector viewAsIntegralLanes();
+
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    DoubleVector
+    viewAsFloatingLanes();
+
     /**
      * {@inheritDoc} <!--workaround-->
      */
@@ -3607,29 +3622,11 @@ public abstract class DoubleVector extends AbstractVector<Double> {
          // Going to ByteVector, pay close attention to byte order.
          assert(REGISTER_ENDIAN == ByteOrder.LITTLE_ENDIAN);
          return asByteVectorRaw();
-         //return asByteVectorRaw().rearrange(swapBytesShuffle());
     }
 
     /**
      * {@inheritDoc} <!--workaround-->
      */
-    @ForceInline
-    @Override
-    public final LongVector viewAsIntegralLanes() {
-        LaneType ilt = LaneType.DOUBLE.asIntegral();
-        return (LongVector) asVectorRaw(ilt);
-    }
-
-    /**
-     * {@inheritDoc} <!--workaround-->
-     */
-    @ForceInline
-    @Override
-    public final
-    DoubleVector
-    viewAsFloatingLanes() {
-        return this;
-    }
 
     // ================================================
 
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float128Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float128Vector.java
index 972802387f3..21fded7fe6b 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float128Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float128Vector.java
@@ -255,6 +255,21 @@ final class Float128Vector extends FloatVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Int128Vector viewAsIntegralLanes() {
+        LaneType ilt = LaneType.FLOAT.asIntegral();
+        return (Int128Vector) asVectorRaw(ilt);
+    }
+
+    @Override
+    @ForceInline
+    public final
+    FloatVector
+    viewAsFloatingLanes() {
+        return this;
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float256Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float256Vector.java
index 79326ac6f9f..73434618086 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float256Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float256Vector.java
@@ -255,6 +255,21 @@ final class Float256Vector extends FloatVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Int256Vector viewAsIntegralLanes() {
+        LaneType ilt = LaneType.FLOAT.asIntegral();
+        return (Int256Vector) asVectorRaw(ilt);
+    }
+
+    @Override
+    @ForceInline
+    public final
+    FloatVector
+    viewAsFloatingLanes() {
+        return this;
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float512Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float512Vector.java
index 7e0489b9e6a..d7845eef821 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float512Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float512Vector.java
@@ -255,6 +255,21 @@ final class Float512Vector extends FloatVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Int512Vector viewAsIntegralLanes() {
+        LaneType ilt = LaneType.FLOAT.asIntegral();
+        return (Int512Vector) asVectorRaw(ilt);
+    }
+
+    @Override
+    @ForceInline
+    public final
+    FloatVector
+    viewAsFloatingLanes() {
+        return this;
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float64Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float64Vector.java
index c82adda2632..6c07ef863c6 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float64Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Float64Vector.java
@@ -255,6 +255,21 @@ final class Float64Vector extends FloatVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Int64Vector viewAsIntegralLanes() {
+        LaneType ilt = LaneType.FLOAT.asIntegral();
+        return (Int64Vector) asVectorRaw(ilt);
+    }
+
+    @Override
+    @ForceInline
+    public final
+    FloatVector
+    viewAsFloatingLanes() {
+        return this;
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/FloatMaxVector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/FloatMaxVector.java
index 4d2c1c17876..a70d96d3a64 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/FloatMaxVector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/FloatMaxVector.java
@@ -255,6 +255,21 @@ final class FloatMaxVector extends FloatVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final IntMaxVector viewAsIntegralLanes() {
+        LaneType ilt = LaneType.FLOAT.asIntegral();
+        return (IntMaxVector) asVectorRaw(ilt);
+    }
+
+    @Override
+    @ForceInline
+    public final
+    FloatVector
+    viewAsFloatingLanes() {
+        return this;
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/FloatVector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/FloatVector.java
index 30ed43e3029..ce1983395e0 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/FloatVector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/FloatVector.java
@@ -1836,6 +1836,21 @@ public abstract class FloatVector extends AbstractVector<Float> {
         throw new AssertionError(op);
     }
 
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    IntVector viewAsIntegralLanes();
+
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    FloatVector
+    viewAsFloatingLanes();
+
     /**
      * {@inheritDoc} <!--workaround-->
      */
@@ -3557,29 +3572,11 @@ public abstract class FloatVector extends AbstractVector<Float> {
          // Going to ByteVector, pay close attention to byte order.
          assert(REGISTER_ENDIAN == ByteOrder.LITTLE_ENDIAN);
          return asByteVectorRaw();
-         //return asByteVectorRaw().rearrange(swapBytesShuffle());
     }
 
     /**
      * {@inheritDoc} <!--workaround-->
      */
-    @ForceInline
-    @Override
-    public final IntVector viewAsIntegralLanes() {
-        LaneType ilt = LaneType.FLOAT.asIntegral();
-        return (IntVector) asVectorRaw(ilt);
-    }
-
-    /**
-     * {@inheritDoc} <!--workaround-->
-     */
-    @ForceInline
-    @Override
-    public final
-    FloatVector
-    viewAsFloatingLanes() {
-        return this;
-    }
 
     // ================================================
 
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int128Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int128Vector.java
index b51bd2e25c5..a444bba4c17 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int128Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int128Vector.java
@@ -255,6 +255,21 @@ final class Int128Vector extends IntVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Int128Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    FloatVector
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.INT.asFloating();
+        return (Float128Vector) asVectorRaw(flt);
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int256Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int256Vector.java
index fe1471d8d32..b42d3c7757f 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int256Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int256Vector.java
@@ -255,6 +255,21 @@ final class Int256Vector extends IntVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Int256Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    FloatVector
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.INT.asFloating();
+        return (Float256Vector) asVectorRaw(flt);
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int512Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int512Vector.java
index 675aab8ef3a..b7a02058e42 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int512Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int512Vector.java
@@ -255,6 +255,21 @@ final class Int512Vector extends IntVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Int512Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    FloatVector
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.INT.asFloating();
+        return (Float512Vector) asVectorRaw(flt);
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int64Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int64Vector.java
index e876cd83576..9def30e93dd 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int64Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Int64Vector.java
@@ -255,6 +255,21 @@ final class Int64Vector extends IntVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Int64Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    FloatVector
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.INT.asFloating();
+        return (Float64Vector) asVectorRaw(flt);
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/IntMaxVector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/IntMaxVector.java
index 2316da250d4..05a5b80f8f3 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/IntMaxVector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/IntMaxVector.java
@@ -255,6 +255,21 @@ final class IntMaxVector extends IntVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final IntMaxVector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    FloatVector
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.INT.asFloating();
+        return (FloatMaxVector) asVectorRaw(flt);
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/IntVector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/IntVector.java
index 87787b9a611..a7de7595e4f 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/IntVector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/IntVector.java
@@ -1980,6 +1980,21 @@ public abstract class IntVector extends AbstractVector<Integer> {
         throw new AssertionError(op);
     }
 
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    IntVector viewAsIntegralLanes();
+
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    FloatVector
+    viewAsFloatingLanes();
+
     /**
      * {@inheritDoc} <!--workaround-->
      */
@@ -3713,29 +3728,11 @@ public abstract class IntVector extends AbstractVector<Integer> {
          // Going to ByteVector, pay close attention to byte order.
          assert(REGISTER_ENDIAN == ByteOrder.LITTLE_ENDIAN);
          return asByteVectorRaw();
-         //return asByteVectorRaw().rearrange(swapBytesShuffle());
     }
 
     /**
      * {@inheritDoc} <!--workaround-->
      */
-    @ForceInline
-    @Override
-    public final IntVector viewAsIntegralLanes() {
-        return this;
-    }
-
-    /**
-     * {@inheritDoc} <!--workaround-->
-     */
-    @ForceInline
-    @Override
-    public final
-    FloatVector
-    viewAsFloatingLanes() {
-        LaneType flt = LaneType.INT.asFloating();
-        return (FloatVector) asVectorRaw(flt);
-    }
 
     // ================================================
 
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long128Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long128Vector.java
index ff08bd64b39..6586267d04c 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long128Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long128Vector.java
@@ -250,6 +250,21 @@ final class Long128Vector extends LongVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Long128Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    DoubleVector
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.LONG.asFloating();
+        return (Double128Vector) asVectorRaw(flt);
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long256Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long256Vector.java
index ed62368f40a..f5903caa23e 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long256Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long256Vector.java
@@ -250,6 +250,21 @@ final class Long256Vector extends LongVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Long256Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    DoubleVector
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.LONG.asFloating();
+        return (Double256Vector) asVectorRaw(flt);
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long512Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long512Vector.java
index 290369a6874..a7b64f51395 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long512Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long512Vector.java
@@ -250,6 +250,21 @@ final class Long512Vector extends LongVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Long512Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    DoubleVector
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.LONG.asFloating();
+        return (Double512Vector) asVectorRaw(flt);
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long64Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long64Vector.java
index dfb438bf6ee..a610eae3e18 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long64Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Long64Vector.java
@@ -250,6 +250,21 @@ final class Long64Vector extends LongVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Long64Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    DoubleVector
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.LONG.asFloating();
+        return (Double64Vector) asVectorRaw(flt);
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/LongMaxVector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/LongMaxVector.java
index abcc2294d12..50d23339793 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/LongMaxVector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/LongMaxVector.java
@@ -250,6 +250,21 @@ final class LongMaxVector extends LongVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final LongMaxVector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    DoubleVector
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.LONG.asFloating();
+        return (DoubleMaxVector) asVectorRaw(flt);
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/LongVector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/LongVector.java
index 446d214a21b..f38aa21da0a 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/LongVector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/LongVector.java
@@ -1893,6 +1893,21 @@ public abstract class LongVector extends AbstractVector<Long> {
         throw new AssertionError(op);
     }
 
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    LongVector viewAsIntegralLanes();
+
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    DoubleVector
+    viewAsFloatingLanes();
+
     /**
      * {@inheritDoc} <!--workaround-->
      */
@@ -3648,29 +3663,11 @@ public abstract class LongVector extends AbstractVector<Long> {
          // Going to ByteVector, pay close attention to byte order.
          assert(REGISTER_ENDIAN == ByteOrder.LITTLE_ENDIAN);
          return asByteVectorRaw();
-         //return asByteVectorRaw().rearrange(swapBytesShuffle());
     }
 
     /**
      * {@inheritDoc} <!--workaround-->
      */
-    @ForceInline
-    @Override
-    public final LongVector viewAsIntegralLanes() {
-        return this;
-    }
-
-    /**
-     * {@inheritDoc} <!--workaround-->
-     */
-    @ForceInline
-    @Override
-    public final
-    DoubleVector
-    viewAsFloatingLanes() {
-        LaneType flt = LaneType.LONG.asFloating();
-        return (DoubleVector) asVectorRaw(flt);
-    }
 
     // ================================================
 
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short128Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short128Vector.java
index 0cc80590473..60c3c00f564 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short128Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short128Vector.java
@@ -255,6 +255,22 @@ final class Short128Vector extends ShortVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Short128Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    Vector<?>
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.SHORT.asFloating();
+        // asFloating() will throw UnsupportedOperationException for the unsupported type short
+        throw new AssertionError("Cannot reach here");
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short256Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short256Vector.java
index b39b7c509c1..1339a6eae75 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short256Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short256Vector.java
@@ -255,6 +255,22 @@ final class Short256Vector extends ShortVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Short256Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    Vector<?>
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.SHORT.asFloating();
+        // asFloating() will throw UnsupportedOperationException for the unsupported type short
+        throw new AssertionError("Cannot reach here");
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short512Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short512Vector.java
index c7a07c4d283..ca6defd26e6 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short512Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short512Vector.java
@@ -255,6 +255,22 @@ final class Short512Vector extends ShortVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Short512Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    Vector<?>
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.SHORT.asFloating();
+        // asFloating() will throw UnsupportedOperationException for the unsupported type short
+        throw new AssertionError("Cannot reach here");
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short64Vector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short64Vector.java
index 4f0d8796482..11c8385c261 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short64Vector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/Short64Vector.java
@@ -255,6 +255,22 @@ final class Short64Vector extends ShortVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final Short64Vector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    Vector<?>
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.SHORT.asFloating();
+        // asFloating() will throw UnsupportedOperationException for the unsupported type short
+        throw new AssertionError("Cannot reach here");
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ShortMaxVector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ShortMaxVector.java
index 6724ae88682..aaff4398584 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ShortMaxVector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ShortMaxVector.java
@@ -255,6 +255,22 @@ final class ShortMaxVector extends ShortVector {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final ShortMaxVector viewAsIntegralLanes() {
+        return this;
+    }
+
+    @Override
+    @ForceInline
+    public final
+    Vector<?>
+    viewAsFloatingLanes() {
+        LaneType flt = LaneType.SHORT.asFloating();
+        // asFloating() will throw UnsupportedOperationException for the unsupported type short
+        throw new AssertionError("Cannot reach here");
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ShortVector.java b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ShortVector.java
index af7ef119a92..0db8acf9770 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ShortVector.java
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/ShortVector.java
@@ -1996,6 +1996,21 @@ public abstract class ShortVector extends AbstractVector<Short> {
         throw new AssertionError(op);
     }
 
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    ShortVector viewAsIntegralLanes();
+
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    Vector<?>
+    viewAsFloatingLanes();
+
     /**
      * {@inheritDoc} <!--workaround-->
      */
@@ -3990,16 +4005,6 @@ public abstract class ShortVector extends AbstractVector<Short> {
          // Going to ByteVector, pay close attention to byte order.
          assert(REGISTER_ENDIAN == ByteOrder.LITTLE_ENDIAN);
          return asByteVectorRaw();
-         //return asByteVectorRaw().rearrange(swapBytesShuffle());
-    }
-
-    /**
-     * {@inheritDoc} <!--workaround-->
-     */
-    @ForceInline
-    @Override
-    public final ShortVector viewAsIntegralLanes() {
-        return this;
     }
 
     /**
@@ -4012,15 +4017,6 @@ public abstract class ShortVector extends AbstractVector<Short> {
      * {@code Vector<?>}.  Future versions of this API may change the return
      * type if additional floating point types become available.
      */
-    @ForceInline
-    @Override
-    public final
-    Vector<?>
-    viewAsFloatingLanes() {
-        LaneType flt = LaneType.SHORT.asFloating();
-        // asFloating() will throw UnsupportedOperationException for the unsupported type short
-        throw new AssertionError("Cannot reach here");
-    }
 
     // ================================================
 
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/X-Vector.java.template b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/X-Vector.java.template
index a4b4750f252..2d98d7f91a1 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/X-Vector.java.template
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/X-Vector.java.template
@@ -839,8 +839,13 @@ public abstract class $abstractvectortype$ extends AbstractVector<$Boxtype$> {
 
         if (opKind(op, VO_SPECIAL {#if[!FP]? | VO_SHIFT})) {
             if (op == FIRST_NONZERO) {
+#if[FP]
+                VectorMask<$Boxbitstype$> mask
+                    = this.viewAsIntegralLanes().compare(EQ, ($bitstype$) 0);
+#else[FP]
                 VectorMask<$Boxbitstype$> mask
-                    = this{#if[FP]?.viewAsIntegralLanes()}.compare(EQ, ($bitstype$) 0);
+                    = this.compare(EQ, ($bitstype$) 0);
+#end[FP]
                 return this.blend(that, mask{#if[FP]?.cast(vspecies())});
             }
 #if[BITWISE]
@@ -2343,6 +2348,21 @@ public abstract class $abstractvectortype$ extends AbstractVector<$Boxtype$> {
         throw new AssertionError(op);
     }
 
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    $Bitstype$Vector viewAsIntegralLanes();
+
+    /**
+     * {@inheritDoc} <!--workaround-->
+     */
+    @Override
+    public abstract
+    {#if[byteOrShort]?Vector<?>:$Fptype$Vector}
+    viewAsFloatingLanes();
+
     /**
      * {@inheritDoc} <!--workaround-->
      */
@@ -5232,24 +5252,9 @@ public abstract class $abstractvectortype$ extends AbstractVector<$Boxtype$> {
          // Going to ByteVector, pay close attention to byte order.
          assert(REGISTER_ENDIAN == ByteOrder.LITTLE_ENDIAN);
          return asByteVectorRaw();
-         //return asByteVectorRaw().rearrange(swapBytesShuffle());
 #end[byte]
     }
 
-    /**
-     * {@inheritDoc} <!--workaround-->
-     */
-    @ForceInline
-    @Override
-    public final $Bitstype$Vector viewAsIntegralLanes() {
-#if[BITWISE]
-        return this;
-#else[BITWISE]
-        LaneType ilt = LaneType.$TYPE$.asIntegral();
-        return ($Bitstype$Vector) asVectorRaw(ilt);
-#end[BITWISE]
-    }
-
     /**
      * {@inheritDoc} <!--workaround-->
 #if[byteOrShort]
@@ -5262,23 +5267,6 @@ public abstract class $abstractvectortype$ extends AbstractVector<$Boxtype$> {
      * type if additional floating point types become available.
 #end[byteOrShort]
      */
-    @ForceInline
-    @Override
-    public final
-    {#if[byteOrShort]?Vector<?>:$Fptype$Vector}
-    viewAsFloatingLanes() {
-#if[FP]
-        return this;
-#else[FP]
-        LaneType flt = LaneType.$TYPE$.asFloating();
-#if[!byteOrShort]
-        return ($Fptype$Vector) asVectorRaw(flt);
-#else[!byteOrShort]
-        // asFloating() will throw UnsupportedOperationException for the unsupported type $type$
-        throw new AssertionError("Cannot reach here");
-#end[!byteOrShort]
-#end[FP]
-    }
 
     // ================================================
 
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/X-VectorBits.java.template b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/X-VectorBits.java.template
index 69ff064ec53..a8bde2d27cb 100644
--- a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/X-VectorBits.java.template
+++ b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/X-VectorBits.java.template
@@ -257,6 +257,35 @@ final class $vectortype$ extends $abstractvectortype$ {
         return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
     }
 
+    @Override
+    @ForceInline
+    public final $Bitstype$$bits$Vector viewAsIntegralLanes() {
+#if[BITWISE]
+        return this;
+#else[BITWISE]
+        LaneType ilt = LaneType.$TYPE$.asIntegral();
+        return ($Bitstype$$bits$Vector) asVectorRaw(ilt);
+#end[BITWISE]
+    }
+
+    @Override
+    @ForceInline
+    public final
+    {#if[byteOrShort]?Vector<?>:$Fptype$Vector}
+    viewAsFloatingLanes() {
+#if[FP]
+        return this;
+#else[FP]
+        LaneType flt = LaneType.$TYPE$.asFloating();
+#if[!byteOrShort]
+        return ($Fptype$$bits$Vector) asVectorRaw(flt);
+#else[!byteOrShort]
+        // asFloating() will throw UnsupportedOperationException for the unsupported type $type$
+        throw new AssertionError("Cannot reach here");
+#end[!byteOrShort]
+#end[FP]
+    }
+
     // Specialized algebraic operations:
 
     // The following definition forces a specialized version of this
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/gen-src.sh b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/gen-src.sh
old mode 100644
new mode 100755
