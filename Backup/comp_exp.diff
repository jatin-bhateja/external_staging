diff --git a/src/hotspot/share/opto/intrinsicnode.cpp b/src/hotspot/share/opto/intrinsicnode.cpp
index d43ab95ad70..ec6482a3b81 100644
--- a/src/hotspot/share/opto/intrinsicnode.cpp
+++ b/src/hotspot/share/opto/intrinsicnode.cpp
@@ -238,28 +238,71 @@ static const Type* bitshuffle_value(const TypeInteger* src_type, const TypeInteg
   jlong hi = bt == T_INT ? max_jint : max_jlong;
   jlong lo = bt == T_INT ? min_jint : min_jlong;
   assert(bt == T_INT || bt == T_LONG, "");
-  if (mask_type->is_con() && mask_type->get_con_as_long(bt) != -1L) {
+
+  // Bit compression selects the source bits corresponding to true mask bits,
+  // packs them and places them contiguously at destination bit positions
+  // starting from least significant bit, remaining higher order bits are set
+  // to zero.
+
+  // Bit expansion is a reverse process, which sequentially reads source bits
+  // starting from LSB and places them at bit positions in result value where
+  // corresponding mask bits are 1. Thus, bit expansion for non-negative mask
+  // value will always generate a +ve value, this is because sign bit of result
+  // will never be set to 1 as corresponding mask bit is always 0.
+
+  // Case A) Constant mask 
+  if (mask_type->is_con()) {
+    // Case A.1 bit compression:-
+    // Result.Hi = popcount(1 << mask_bits - 1)
+    // Result.Lo = min iff mask == -1 assuming all source bits apart from most
+    //                                significant bit were set to 0
+    //       else  
+    // Result.Lo = 0 iff atleast one mask bit is zero, corresponding source
+    // bit will be masked, hence result of bit compression will be a +ve
+    // value.
+    // e.g.
+    //  src = 0xXXXXXXXX (non-constant source)
+    //  mask = 0xEFFFFFFF (constant mask)
+    //  result.hi = 0x7FFFFFFF
+    //  result.lo = 0 
     jlong maskcon = mask_type->get_con_as_long(bt);
-    int bitcount = population_count(static_cast<julong>(bt == T_INT ? maskcon & 0xFFFFFFFFL : maskcon));
     if (opc == Op_CompressBits) {
-      // Bit compression selects the source bits corresponding to true mask bits
-      // and lays them out contiguously at destination bit positions starting from
-      // LSB, remaining higher order bits are set to zero.
-      // Thus, it will always generate a +ve value i.e. sign bit set to 0 if
-      // any bit of constant mask value is zero.
-      lo = 0L;
-      hi = (1UL << bitcount) - 1;
+      int bitcount = population_count(static_cast<julong>(bt == T_INT ? maskcon & 0xFFFFFFFFL : maskcon));
+      hi = maskcon == -1L ? hi : (1UL << bitcount) - 1;
+      lo = maskcon == -1L ? lo : 0L;
     } else {
+    // Case A.2 bit expansion:-
+    //   Case A.2.1 constant mask >= 0
+    //     Result.Hi = mask, optimistically assuming all source bits
+    //     read starting from least significant bit positions are 1.
+    //     Result.Lo = 0
+    //   e.g. 
+    //    src = 0xXXXXXXXX (non-constant source)
+    //    mask = 0x7FFFFFFF (constant mask >= 0) 
+    //    result.hi = 0x7FFFFFFF
+    //    result.lo = 0
+               
+    //   Case A.2.2) mask < 0
+    //     For constant mask strictly less than zero, maximum result value will be
+    //     same as mask value with its sign bit flipped, assuming all but last read
+    //     source bits are set to 1.
+    //
+    //     To compute minimum result value we assume all but last read source bit as zero,
+    //     this is because sign bit of result will always be set to 1 while other bit
+    //     corresponding to set mask bit should be zero.
+    //   e.g.
+    //    src = 0xXXXXXXXX (non-constant source)
+    //    mask = 0xEFFFFFFF (constant mask)
+    //    result.hi = 0xEFFFFFFF ^ 0x80000000 = 0x6FFFFFFF 
+    //    result.lo = 0x80000000 
+    //
       assert(opc == Op_ExpandBits, "");
-      // Expansion sequentially reads source bits starting from LSB
-      // and places them over destination at bit positions corresponding
-      // set mask bit. Thus bit expansion for non-negative mask value
-      // will always generate a +ve value.
       hi = maskcon >= 0L ? maskcon : maskcon ^ lo;
       lo = maskcon >= 0L ? 0L : lo;
     }
   }
 
+  // Case B) Non-constant mask.
   if (!mask_type->is_con()) {
     if ( opc == Op_CompressBits) {
       // Pattern: Integer/Long.compress(src_type, mask_type)
