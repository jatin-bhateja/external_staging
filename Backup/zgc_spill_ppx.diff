diff --git a/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp b/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp
index 4a956b450bd..8e9dee0ac64 100644
--- a/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp
+++ b/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp
@@ -78,15 +78,43 @@ class ZRuntimeCallSpill {
 
   void save() {
     MacroAssembler* masm = _masm;
-    __ push(rax);
-    __ push(rcx);
-    __ push(rdx);
-    __ push(rdi);
-    __ push(rsi);
-    __ push(r8);
-    __ push(r9);
-    __ push(r10);
-    __ push(r11);
+    if (VM_Version::supports_apx_f()) {
+      // Data being pushed by PUSH2 must be 16B-aligned on the stack, for this push rax upfront
+      // and use it as a temporary register for stack alignment.
+      __ pushp(rax);
+      // Move original stack pointer to RAX and align stack pointer to 16B boundary.
+      __ movptr(rax, rsp);
+      __ andptr(rsp, -(StackAlignmentInBytes));
+      // Push original stack pointer along with remaining registers on 16B aligned stack.
+      // Note: For PPX to work properly, a PPX-marked PUSH2 (respectively, POP2) should always
+      // be matched with a PPX-marked POP2 (PUSH2), not with two PPX-marked POPs (PUSHs).
+      __ pushp(rax);
+      __ pushp(rcx);
+      __ push2p(rdx, rdi);
+      __ push2p(rsi, r8);
+      __ push2p(r9, r10);
+      __ push2p(r11, r16);
+      __ push2p(r17, r18);
+      __ push2p(r19, r20);
+      __ push2p(r21, r22);
+      __ push2p(r23, r24);
+      __ push2p(r25, r26);
+      __ push2p(r27, r28);
+      __ push2p(r29, r30);
+      // To maintain 16 byte alignment after r31 is pushed.
+      __ subptr(rsp, 8);
+      __ pushp(r31);
+    } else {
+      __ push(rax);
+      __ push(rcx);
+      __ push(rdx);
+      __ push(rdi);
+      __ push(rsi);
+      __ push(r8);
+      __ push(r9);
+      __ push(r10);
+      __ push(r11);
+    }
 
     if (_xmm_spill_size != 0) {
       __ subptr(rsp, _xmm_spill_size);
@@ -139,21 +167,49 @@ class ZRuntimeCallSpill {
       __ addptr(rsp, _xmm_spill_size);
     }
 
-    __ pop(r11);
-    __ pop(r10);
-    __ pop(r9);
-    __ pop(r8);
-    __ pop(rsi);
-    __ pop(rdi);
-    __ pop(rdx);
-    __ pop(rcx);
-    if (_result == noreg) {
-      __ pop(rax);
-    } else if (_result == rax) {
-      __ addptr(rsp, wordSize);
+    if (VM_Version::supports_apx_f()) {
+      __ popp(r31);
+      __ addptr(rsp, 8);
+      // Data being popped by pop2 must be 16B-aligned on the stack.
+      __ pop2p(r30, r29);
+      __ pop2p(r28, r27);
+      __ pop2p(r26, r25);
+      __ pop2p(r24, r23);
+      __ pop2p(r22, r21);
+      __ pop2p(r20, r19);
+      __ pop2p(r18, r17);
+      __ pop2p(r16, r11);
+      __ pop2p(r10, r9);
+      __ pop2p(r8, rsi);
+      __ pop2p(rdi, rdx);
+      __ popp(rcx);
+      // Re-instantiate original stack pointer.
+      __ movptr(rsp, Address(rsp));
+      if (_result == noreg) {
+        __ popp(rax);
+      } else if (_result == rax) {
+        __ addptr(rsp, wordSize);
+      } else {
+        __ movptr(_result, rax);
+        __ popp(rax);
+      }
     } else {
-      __ movptr(_result, rax);
-      __ pop(rax);
+      __ pop(r11);
+      __ pop(r10);
+      __ pop(r9);
+      __ pop(r8);
+      __ pop(rsi);
+      __ pop(rdi);
+      __ pop(rdx);
+      __ pop(rcx);
+      if (_result == noreg) {
+        __ pop(rax);
+      } else if (_result == rax) {
+        __ addptr(rsp, wordSize);
+      } else {
+        __ movptr(_result, rax);
+        __ pop(rax);
+      }
     }
   }
 
