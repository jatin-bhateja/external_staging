diff --git a/configure b/configure
old mode 100644
new mode 100755
diff --git a/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp b/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp
index 16bef9e8da9..dc01ada5f2d 100644
--- a/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp
+++ b/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp
@@ -97,7 +97,7 @@ class RegisterSaver {
   // units because compiler frame slots are jints.
 #define XSAVE_AREA_BEGIN 160
 #define XSAVE_AREA_YMM_BEGIN 576
-#define XSAVE_AREA_EGPRS 960
+#define XSAVE_AREA_EGPRS_BEGIN 960
 #define XSAVE_AREA_OPMASK_BEGIN 1088
 #define XSAVE_AREA_ZMM_BEGIN 1152
 #define XSAVE_AREA_UPPERBANK 1664
@@ -116,7 +116,7 @@ class RegisterSaver {
     DEF_YMM_OFFS(0),
     DEF_YMM_OFFS(1),
     // 2..15 are implied in range usage
-    r31_off = xmm_off + (XSAVE_AREA_EGPRS - XSAVE_AREA_BEGIN)/BytesPerInt,
+    r31_off = xmm_off + (XSAVE_AREA_EGPRS_BEGIN - XSAVE_AREA_BEGIN)/BytesPerInt,
     r31H_off,
     r30_off, r30H_off,
     r29_off, r29H_off,
@@ -267,6 +267,16 @@ OopMap* RegisterSaver::save_live_registers(MacroAssembler* masm, int additional_
 #endif
     }
   }
+
+#if COMPILER2_OR_JVMCI
+  if (VM_Version::supports_apx_f()) {
+    int base_addr = XSAVE_AREA_EGPRS_BEGIN;
+    int off = 0;
+    for(int n = 16; n < Register::number_of_registers; n++) {
+      __ movq(Address(rsp, base_addr+(off++*16)), as_Register(n));
+    }
+  }
+#endif
   __ vzeroupper();
   if (frame::arg_reg_save_area_bytes != 0) {
     // Allocate argument register save area
@@ -485,6 +495,16 @@ void RegisterSaver::restore_live_registers(MacroAssembler* masm, bool restore_wi
     }
   }
 
+#if COMPILER2_OR_JVMCI
+  if (VM_Version::supports_apx_f()) {
+    int base_addr = XSAVE_AREA_EGPRS_BEGIN;
+    int off = 0;
+    for(int n = 16; n < Register::number_of_registers; n++) {
+      __ movq(as_Register(n), Address(rsp, base_addr+(off++*16)));
+    }
+  }
+#endif
+
   // Recover CPU state
   __ pop_CPU_state();
   // Get the rbp described implicitly by the calling convention (no oopMap)
@@ -2596,6 +2616,9 @@ void SharedRuntime::generate_deopt_blob() {
     pad += 512; // Increase the buffer size when compiling for JVMCI
   }
 #endif
+  if (UseAPX > 0) {
+    pad += 256;
+  }
   CodeBuffer buffer("deopt_blob", 2560+pad, 1024);
   MacroAssembler* masm = new MacroAssembler(&buffer);
   int frame_size_in_words;
@@ -3144,7 +3167,7 @@ SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_t
   OopMap* map;
 
   // Allocate space for the code.  Setup code generation tools.
-  CodeBuffer buffer("handler_blob", 2048, 1024);
+  CodeBuffer buffer("handler_blob", 2368, 1024);
   MacroAssembler* masm = new MacroAssembler(&buffer);
 
   address start   = __ pc();
@@ -3307,7 +3330,7 @@ RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const cha
   // allocate space for the code
   ResourceMark rm;
 
-  CodeBuffer buffer(name, 1200, 512);
+  CodeBuffer buffer(name, 1456, 512);
   MacroAssembler* masm = new MacroAssembler(&buffer);
 
   int frame_size_in_words;
diff --git a/src/hotspot/cpu/x86/vm_version_x86.cpp b/src/hotspot/cpu/x86/vm_version_x86.cpp
index 41d939ad0a0..9c435ebb5f2 100644
--- a/src/hotspot/cpu/x86/vm_version_x86.cpp
+++ b/src/hotspot/cpu/x86/vm_version_x86.cpp
@@ -952,11 +952,11 @@ void VM_Version::get_processor_features() {
     FLAG_SET_DEFAULT(UseAVX, use_avx_limit);
   }
 
-  if (FLAG_IS_DEFAULT(UseAPX) && (UseAVX > 2)) {
-    FLAG_SET_DEFAULT(UseAPX, supports_apx_f() ? 1 : 0);
-  } else if (UseAPX > 0) {
+  if (UseAPX > 0 && !supports_apx_f()) {
     warning("UseAPX=%d is not supported on this CPU, setting it to 0", UseAPX);
     FLAG_SET_DEFAULT(UseAPX, 0);
+  } else if (FLAG_IS_DEFAULT(UseAPX)) {
+    FLAG_SET_DEFAULT(UseAPX, supports_apx_f() ? 1 : 0);
   }
 
   if (UseAVX < 3) {
diff --git a/src/hotspot/cpu/x86/x86_64.ad b/src/hotspot/cpu/x86/x86_64.ad
index afcd792ec2e..748ff99b353 100644
--- a/src/hotspot/cpu/x86/x86_64.ad
+++ b/src/hotspot/cpu/x86/x86_64.ad
@@ -187,20 +187,6 @@ reg_def R31_H(SOC, SOC, Op_RegI, 31, r31->as_VMReg()->next());
 // Registers which are used as pairs must fall on an even boundary.
 
 alloc_class chunk0(R10,         R10_H,
-                   R11,         R11_H,
-                   R8,          R8_H,
-                   R9,          R9_H,
-                   R12,         R12_H,
-                   RCX,         RCX_H,
-                   RBX,         RBX_H,
-                   RDI,         RDI_H,
-                   RDX,         RDX_H,
-                   RSI,         RSI_H,
-                   RAX,         RAX_H,
-                   RBP,         RBP_H,
-                   R13,         R13_H,
-                   R14,         R14_H,
-                   R15,         R15_H,
                    R16,         R16_H,
                    R17,         R17_H,
                    R18,         R18_H,
@@ -217,6 +203,20 @@ alloc_class chunk0(R10,         R10_H,
                    R29,         R29_H,
                    R30,         R30_H,
                    R31,         R31_H,
+                   R11,         R11_H,
+                   R8,          R8_H,
+                   R9,          R9_H,
+                   R12,         R12_H,
+                   RCX,         RCX_H,
+                   RBX,         RBX_H,
+                   RDI,         RDI_H,
+                   RDX,         RDX_H,
+                   RSI,         RSI_H,
+                   RAX,         RAX_H,
+                   RBP,         RBP_H,
+                   R13,         R13_H,
+                   R14,         R14_H,
+                   R15,         R15_H,
                    RSP,         RSP_H);
 
 
