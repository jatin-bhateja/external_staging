diff --git a/configure b/configure
old mode 100644
new mode 100755
diff --git a/make/common/JavaCompilation.gmk b/make/common/JavaCompilation.gmk
index ff7c90e5785..190a19905c9 100644
--- a/make/common/JavaCompilation.gmk
+++ b/make/common/JavaCompilation.gmk
@@ -274,7 +274,7 @@ define SetupJavaCompilationBody
   PARANOIA_FLAGS := -implicit:none -Xprefer:source -XDignore.symbol.file=true -encoding ascii
 
   $1_FLAGS += -g -Xlint:all $$($1_TARGET_RELEASE) $$(PARANOIA_FLAGS) $$(JAVA_WARNINGS_ARE_ERRORS)
-  $1_FLAGS += $$($1_JAVAC_FLAGS)
+  $1_FLAGS += $$($1_JAVAC_FLAGS) -XDenablePrimitiveClasses
 
   ifneq ($$($1_DISABLED_WARNINGS), )
     $1_FLAGS += -Xlint:$$(call CommaList, $$(addprefix -, $$($1_DISABLED_WARNINGS)))
diff --git a/src/hotspot/cpu/x86/assembler_x86.cpp b/src/hotspot/cpu/x86/assembler_x86.cpp
index 67ff8a97c7a..4d24e35930f 100644
--- a/src/hotspot/cpu/x86/assembler_x86.cpp
+++ b/src/hotspot/cpu/x86/assembler_x86.cpp
@@ -7217,6 +7217,14 @@ void Assembler::vpaddq(XMMRegister dst, XMMRegister nds, Address src, int vector
   emit_operand(dst, src, 0);
 }
 
+void Assembler::evaddsh(XMMRegister dst, XMMRegister nds, XMMRegister src) {
+  assert(VM_Version::supports_avx512_fp16(), "requires AVX512-FP16");
+  InstructionAttr attributes(AVX_128bit, false, /* legacy_mode */ false, /* no_mask_reg */ true, /* uses_vl */ false);
+  attributes.set_is_evex_instruction();
+  int encode = vex_prefix_and_encode(dst->encoding(), nds->encoding(), src->encoding(), VEX_SIMD_F3, VEX_OPCODE_MAP5, &attributes);
+  emit_int16(0x58, (0xC0 | encode));
+}
+
 void Assembler::psubb(XMMRegister dst, XMMRegister src) {
   NOT_LP64(assert(VM_Version::supports_sse2(), ""));
   InstructionAttr attributes(AVX_128bit, /* rex_w */ false, /* legacy_mode */ _legacy_mode_bw, /* no_mask_reg */ true, /* uses_vl */ true);
@@ -11364,7 +11372,7 @@ void Assembler::evex_prefix(bool vex_r, bool vex_b, bool vex_x, bool evex_r, boo
   int byte2 = (vex_r ? VEX_R : 0) | (vex_x ? VEX_X : 0) | (vex_b ? VEX_B : 0) | (evex_r ? EVEX_Rb : 0);
   byte2 = (~byte2) & 0xF0;
   // confine opc opcode extensions in mm bits to lower two bits
-  // of form {0F, 0F_38, 0F_3A}
+  // of form {0F, 0F_38, 0F_3A, MAP5}
   byte2 |= opc;
 
   // P1: byte 3 as Wvvvv1pp
diff --git a/src/hotspot/cpu/x86/assembler_x86.hpp b/src/hotspot/cpu/x86/assembler_x86.hpp
index a4bd8bf4864..413e42530bf 100644
--- a/src/hotspot/cpu/x86/assembler_x86.hpp
+++ b/src/hotspot/cpu/x86/assembler_x86.hpp
@@ -543,6 +543,7 @@ class Assembler : public AbstractAssembler  {
     VEX_OPCODE_0F    = 0x1,
     VEX_OPCODE_0F_38 = 0x2,
     VEX_OPCODE_0F_3A = 0x3,
+    VEX_OPCODE_MAP5  = 0x5,
     VEX_OPCODE_MASK  = 0x1F
   };
 
@@ -2380,6 +2381,7 @@ private:
   void vpaddw(XMMRegister dst, XMMRegister nds, Address src, int vector_len);
   void vpaddd(XMMRegister dst, XMMRegister nds, Address src, int vector_len);
   void vpaddq(XMMRegister dst, XMMRegister nds, Address src, int vector_len);
+  void evaddsh(XMMRegister dst, XMMRegister nds, XMMRegister src);
 
   // Leaf level assembler routines for masked operations.
   void evpaddb(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len);
diff --git a/src/hotspot/cpu/x86/vm_version_x86.cpp b/src/hotspot/cpu/x86/vm_version_x86.cpp
index 1136656755b..e6a08b69210 100644
--- a/src/hotspot/cpu/x86/vm_version_x86.cpp
+++ b/src/hotspot/cpu/x86/vm_version_x86.cpp
@@ -3010,6 +3010,9 @@ uint64_t VM_Version::feature_flags() {
     }
     if (_cpuid_info.sef_cpuid7_edx.bits.serialize != 0)
       result |= CPU_SERIALIZE;
+
+    if (_cpuid_info.sef_cpuid7_edx.bits.avx512_fp16 != 0)
+      result |= CPU_AVX512_FP16;
   }
 
   // ZX features.
diff --git a/src/hotspot/cpu/x86/vm_version_x86.hpp b/src/hotspot/cpu/x86/vm_version_x86.hpp
index 9213d42bc57..da55ac568c4 100644
--- a/src/hotspot/cpu/x86/vm_version_x86.hpp
+++ b/src/hotspot/cpu/x86/vm_version_x86.hpp
@@ -275,7 +275,9 @@ class VM_Version : public Abstract_VM_Version {
                  serialize : 1,
                            : 5,
                    cet_ibt : 1,
-                           : 11;
+                           : 2,
+              avx512_fp16  : 1,
+                           : 8;
     } bits;
   };
 
@@ -390,7 +392,8 @@ protected:
     decl(OSPKE,             "ospke",             55) /* OS enables protection keys */ \
     decl(CET_IBT,           "cet_ibt",           56) /* Control Flow Enforcement - Indirect Branch Tracking */ \
     decl(CET_SS,            "cet_ss",            57) /* Control Flow Enforcement - Shadow Stack */ \
-    decl(AVX512_IFMA,       "avx512_ifma",       58) /* Integer Vector FMA instructions*/
+    decl(AVX512_IFMA,       "avx512_ifma",       58) /* Integer Vector FMA instructions*/ \
+    decl(AVX512_FP16,       "avx512_fp16",       59) /* AVX512 FP16 ISA support*/
 
 #define DECLARE_CPU_FEATURE_FLAG(id, name, bit) CPU_##id = (1ULL << bit),
     CPU_FEATURE_FLAGS(DECLARE_CPU_FEATURE_FLAG)
@@ -696,6 +699,7 @@ public:
   static bool supports_avx512_bitalg()  { return (_features & CPU_AVX512_BITALG) != 0; }
   static bool supports_avx512_vbmi()  { return (_features & CPU_AVX512_VBMI) != 0; }
   static bool supports_avx512_vbmi2() { return (_features & CPU_AVX512_VBMI2) != 0; }
+  static bool supports_avx512_fp16()  { return (_features & CPU_AVX512_FP16) != 0; }
   static bool supports_hv()           { return (_features & CPU_HV) != 0; }
   static bool supports_serialize()    { return (_features & CPU_SERIALIZE) != 0; }
   static bool supports_f16c()         { return (_features & CPU_F16C) != 0; }
diff --git a/src/hotspot/cpu/x86/x86.ad b/src/hotspot/cpu/x86/x86.ad
index 3daba838a35..cd092f782e7 100644
--- a/src/hotspot/cpu/x86/x86.ad
+++ b/src/hotspot/cpu/x86/x86.ad
@@ -1455,6 +1455,11 @@ const bool Matcher::match_rule_supported(int opcode) {
         return false;
       }
       break;
+    case Op_AddHF:
+      if (!VM_Version::supports_avx512_fp16()) {
+        return false;
+      }
+      break;
     case Op_VectorLoadShuffle:
     case Op_VectorRearrange:
     case Op_MulReductionVI:
@@ -10224,4 +10229,35 @@ instruct DoubleClassCheck_reg_reg_vfpclass(rRegI dst, regD src, kReg ktmp, rFlag
   ins_pipe(pipe_slow);
 %}
 
+instruct reinterpretS2H (regF dst, rRegI src, rRegI tmp)
+%{
+  match(Set dst (ReinterpretS2HF src));
+  effect(TEMP tmp);
+  format %{ "movdl $dst, $src\t! using $tmp as TEMP" %}
+  ins_encode %{
+    __ movl($tmp$$Register, $src$$Register);
+    __ andl($tmp$$Register, 0xFFFF);
+    __ movdl($dst$$XMMRegister, $tmp$$Register);
+  %}
+  ins_pipe(pipe_slow);
+%}
+
+instruct reinterpretH2S (rRegI dst, regF src)
+%{
+  match(Set dst (ReinterpretHF2S src));
+  format %{ "movdl $dst, $src" %}
+  ins_encode %{
+    __ movdl($dst$$Register, $src$$XMMRegister);
+  %}
+  ins_pipe(pipe_slow);
+%}
 
+instruct addFP16_scalar (regF dst, regF src1, regF src2)
+%{
+  match(Set dst (AddHF src1 src2));
+  format %{ "vaddsh $dst, $src1, $src2" %}
+  ins_encode %{
+    __ evaddsh($dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister);
+  %}
+  ins_pipe(pipe_slow);
+%}
diff --git a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
index 34575adf8e6..cd7539bd019 100644
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -4781,6 +4781,15 @@ static void check_illegal_static_method(const InstanceKlass* this_klass, TRAPS)
   }
 }
 
+// utility function to skip over internal jdk primitive classes used to override the need for passing
+// an explict JVM flag EnablePrimitiveClasses.
+bool ClassFileParser::is_jdk_internal_class(const Symbol* class_name) const {
+  if (vmSymbols::java_lang_Float16() == class_name) {
+    return true;
+  }
+  return false;
+}
+
 // utility methods for format checking
 
 void ClassFileParser::verify_legal_class_modifiers(jint flags, const char* name, bool is_Object, TRAPS) const {
@@ -4811,7 +4820,7 @@ void ClassFileParser::verify_legal_class_modifiers(jint flags, const char* name,
     return;
   }
 
-  if (is_primitive_class && !EnablePrimitiveClasses) {
+  if (is_primitive_class && !is_jdk_internal_class(_class_name) && !EnablePrimitiveClasses) {
       ResourceMark rm(THREAD);
       Exceptions::fthrow(
         THREAD_AND_LOCATION,
diff --git a/src/hotspot/share/classfile/classFileParser.hpp b/src/hotspot/share/classfile/classFileParser.hpp
index de0ec157608..0be2f57a536 100644
--- a/src/hotspot/share/classfile/classFileParser.hpp
+++ b/src/hotspot/share/classfile/classFileParser.hpp
@@ -214,6 +214,8 @@ class ClassFileParser {
   bool _has_vanilla_constructor;
   int _max_bootstrap_specifier_index;  // detects BSS values
 
+  bool is_jdk_internal_class(const Symbol* class_name) const;
+
   void parse_stream(const ClassFileStream* const stream, TRAPS);
 
   void mangle_hidden_class_name(InstanceKlass* const ik);
diff --git a/src/hotspot/share/classfile/vmClassMacros.hpp b/src/hotspot/share/classfile/vmClassMacros.hpp
index f303aad6a45..6fca62cd678 100644
--- a/src/hotspot/share/classfile/vmClassMacros.hpp
+++ b/src/hotspot/share/classfile/vmClassMacros.hpp
@@ -172,6 +172,7 @@
   do_klass(Boolean_klass,                               java_lang_Boolean                                     ) \
   do_klass(Character_klass,                             java_lang_Character                                   ) \
   do_klass(Float_klass,                                 java_lang_Float                                       ) \
+  do_klass(Float16_klass,                               java_lang_Float16                                     ) \
   do_klass(Double_klass,                                java_lang_Double                                      ) \
   do_klass(Byte_klass,                                  java_lang_Byte                                        ) \
   do_klass(Short_klass,                                 java_lang_Short                                       ) \
diff --git a/src/hotspot/share/classfile/vmIntrinsics.hpp b/src/hotspot/share/classfile/vmIntrinsics.hpp
index ac1061fbb72..8a1c0d13a11 100644
--- a/src/hotspot/share/classfile/vmIntrinsics.hpp
+++ b/src/hotspot/share/classfile/vmIntrinsics.hpp
@@ -195,6 +195,12 @@ class methodHandle;
   do_intrinsic(_dsignum,                  java_lang_Math,         signum_name,        double_double_signature,   F_S)   \
   do_intrinsic(_fsignum,                  java_lang_Math,         signum_name,        float_float_signature,     F_S)   \
                                                                                                                         \
+                                                                                                                        \
+  /* Float16 intrinsics, similar to what we have in Math. */                                                            \
+  do_intrinsic(_add_float16,              java_lang_Float16,      add_name,           floa16_float16_signature,  F_R)   \
+   do_name(add_name,    "add")                                                                                          \
+   do_signature(floa16_float16_signature, "(Qjava/lang/Float16;)Qjava/lang/Float16;")                                   \
+                                                                                                                        \
   /* StrictMath intrinsics, similar to what we have in Math. */                                                         \
   do_intrinsic(_min_strict,               java_lang_StrictMath,   min_name,           int2_int_signature,        F_S)   \
   do_intrinsic(_max_strict,               java_lang_StrictMath,   max_name,           int2_int_signature,        F_S)   \
diff --git a/src/hotspot/share/classfile/vmSymbols.hpp b/src/hotspot/share/classfile/vmSymbols.hpp
index a2d31b0d981..3345c2911ea 100644
--- a/src/hotspot/share/classfile/vmSymbols.hpp
+++ b/src/hotspot/share/classfile/vmSymbols.hpp
@@ -78,6 +78,7 @@
   template(java_lang_Character_CharacterCache,        "java/lang/Character$CharacterCache")       \
   template(java_lang_CharacterDataLatin1,             "java/lang/CharacterDataLatin1")            \
   template(java_lang_Float,                           "java/lang/Float")                          \
+  template(java_lang_Float16,                         "java/lang/Float16")                        \
   template(java_lang_Double,                          "java/lang/Double")                         \
   template(java_lang_Byte,                            "java/lang/Byte")                           \
   template(java_lang_Byte_ByteCache,                  "java/lang/Byte$ByteCache")                 \
diff --git a/src/hotspot/share/opto/addnode.hpp b/src/hotspot/share/opto/addnode.hpp
index c6a6138adb7..8b07a6fc88d 100644
--- a/src/hotspot/share/opto/addnode.hpp
+++ b/src/hotspot/share/opto/addnode.hpp
@@ -129,6 +129,14 @@ public:
   virtual uint ideal_reg() const { return Op_RegF; }
 };
 
+//------------------------------AddHFNode---------------------------------------
+// Add 2 floats
+class AddHFNode : public AddFNode {
+public:
+  AddHFNode( Node *in1, Node *in2 ) : AddFNode(in1,in2) {}
+  virtual int Opcode() const;
+};
+
 //------------------------------AddDNode---------------------------------------
 // Add 2 doubles
 class AddDNode : public AddNode {
diff --git a/src/hotspot/share/opto/c2compiler.cpp b/src/hotspot/share/opto/c2compiler.cpp
index 01807587356..33718cc919a 100644
--- a/src/hotspot/share/opto/c2compiler.cpp
+++ b/src/hotspot/share/opto/c2compiler.cpp
@@ -762,7 +762,9 @@ bool C2Compiler::is_intrinsic_supported(const methodHandle& method, bool is_virt
   case vmIntrinsics::_Preconditions_checkLongIndex:
   case vmIntrinsics::_getObjectSize:
     break;
-
+  case vmIntrinsics::_add_float16:
+    if (!Matcher::match_rule_supported(Op_AddHF)) return false;
+    break;
   case vmIntrinsics::_VectorCompressExpand:
   case vmIntrinsics::_VectorUnaryOp:
   case vmIntrinsics::_VectorBinaryOp:
diff --git a/src/hotspot/share/opto/classes.hpp b/src/hotspot/share/opto/classes.hpp
index b1faed0dcd2..a9b242d8a35 100644
--- a/src/hotspot/share/opto/classes.hpp
+++ b/src/hotspot/share/opto/classes.hpp
@@ -36,6 +36,7 @@ macro(AddF)
 macro(AddI)
 macro(AddL)
 macro(AddP)
+macro(AddHF)
 macro(Allocate)
 macro(AllocateArray)
 macro(AndI)
@@ -485,6 +486,8 @@ macro(ExtractF)
 macro(ExtractD)
 macro(Digit)
 macro(LowerCase)
+macro(ReinterpretS2HF)
+macro(ReinterpretHF2S)
 macro(UpperCase)
 macro(Whitespace)
 macro(VectorBox)
diff --git a/src/hotspot/share/opto/convertnode.cpp b/src/hotspot/share/opto/convertnode.cpp
index 9a498c29b00..53af80a44a8 100644
--- a/src/hotspot/share/opto/convertnode.cpp
+++ b/src/hotspot/share/opto/convertnode.cpp
@@ -817,3 +817,27 @@ const Type* RoundDoubleModeNode::Value(PhaseGVN* phase) const {
   return Type::DOUBLE;
 }
 //=============================================================================
+
+const Type* ReinterpretS2HFNode::Value(PhaseGVN* phase) const {
+  const Type* type = phase->type( in(1) );
+  // Convert FP16 constant value to Float constant value, this will allow
+  // further constant folding to be done at float granularity by value routines
+  // of FP16 IR nodes.
+  if (type->isa_int() && type->is_int()->is_con()) {
+     jshort hfval = type->is_int()->get_con();
+     jfloat fval = SharedRuntime::hf2f(hfval);
+     return TypeF::make(fval);
+  }
+  return Type::FLOAT;
+}
+
+const Type* ReinterpretHF2SNode::Value(PhaseGVN* phase) const {
+  const Type* type = phase->type( in(1) );
+  // Convert Float constant value to FP16 constant value.
+  if (type->isa_float_constant()) {
+     jfloat fval = type->is_float_constant()->_f;
+     jshort hfval = SharedRuntime::f2hf(fval);
+     return TypeInt::make(hfval);
+  }
+  return TypeInt::SHORT;
+}
diff --git a/src/hotspot/share/opto/convertnode.hpp b/src/hotspot/share/opto/convertnode.hpp
index 5fe80253b33..d1fb1300fc4 100644
--- a/src/hotspot/share/opto/convertnode.hpp
+++ b/src/hotspot/share/opto/convertnode.hpp
@@ -174,6 +174,24 @@ class ConvI2FNode : public Node {
   virtual uint  ideal_reg() const { return Op_RegF; }
 };
 
+class ReinterpretS2HFNode : public Node {
+  public:
+  ReinterpretS2HFNode( Node *in1 ) : Node(0,in1) {}
+  virtual int Opcode() const;
+  virtual const Type *bottom_type() const { return Type::FLOAT; }
+  virtual const Type* Value(PhaseGVN* phase) const;
+  virtual uint  ideal_reg() const { return Op_RegF; }
+};
+
+class ReinterpretHF2SNode : public Node {
+  public:
+  ReinterpretHF2SNode( Node *in1 ) : Node(0,in1) {}
+  virtual int Opcode() const;
+  virtual const Type* Value(PhaseGVN* phase) const;
+  virtual const Type *bottom_type() const { return TypeInt::SHORT; }
+  virtual uint  ideal_reg() const { return Op_RegI; }
+};
+
 class RoundFNode : public Node {
   public:
   RoundFNode( Node *in1 ) : Node(0,in1) {}
diff --git a/src/hotspot/share/opto/inlinetypenode.hpp b/src/hotspot/share/opto/inlinetypenode.hpp
index a19c1500877..2d4848885b3 100644
--- a/src/hotspot/share/opto/inlinetypenode.hpp
+++ b/src/hotspot/share/opto/inlinetypenode.hpp
@@ -50,9 +50,6 @@ protected:
                      // Nodes are connected in increasing order of the index of the field they correspond to.
   };
 
-  // Get the klass defining the field layout of the inline type
-  ciInlineKlass* inline_klass() const { return type()->inline_klass(); }
-
   void make_scalar_in_safepoint(PhaseIterGVN* igvn, Unique_Node_List& worklist, SafePointNode* sfpt);
 
   const TypePtr* field_adr_type(Node* base, int offset, ciInstanceKlass* holder, DecoratorSet decorators, PhaseGVN& gvn) const;
@@ -77,6 +74,9 @@ protected:
   static InlineTypeNode* make_from_flattened_impl(GraphKit* kit, ciInlineKlass* vk, Node* obj, Node* ptr, ciInstanceKlass* holder, int holder_offset, DecoratorSet decorators, GrowableArray<ciType*>& visited);
 
 public:
+  // Get the klass defining the field layout of the inline type
+  ciInlineKlass* inline_klass() const { return type()->inline_klass(); }
+
   // Create with default field values
   static InlineTypeNode* make_default(PhaseGVN& gvn, ciInlineKlass* vk);
   // Create uninitialized
diff --git a/src/hotspot/share/opto/library_call.cpp b/src/hotspot/share/opto/library_call.cpp
index 0bfc3e516fc..8dba998a60a 100644
--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -528,6 +528,8 @@ bool LibraryCallKit::try_to_inline(int predicate) {
   case vmIntrinsics::_floatToFloat16:
   case vmIntrinsics::_float16ToFloat:           return inline_fp_conversions(intrinsic_id());
 
+  case vmIntrinsics::_add_float16:              return inline_fp16_operations(intrinsic_id());
+
   case vmIntrinsics::_floatIsFinite:
   case vmIntrinsics::_floatIsInfinite:
   case vmIntrinsics::_doubleIsFinite:
@@ -4788,6 +4790,29 @@ bool LibraryCallKit::inline_native_Reflection_getCallerClass() {
   return false;  // bail-out; let JVM_GetCallerClass do the work
 }
 
+bool LibraryCallKit::inline_fp16_operations(vmIntrinsics::ID id) {
+  Node* result = NULL;
+  Node* val1 = argument(0);  // receiver
+  Node* val2 = argument(1);  // argument
+  assert(val1->is_InlineType() && val2->is_InlineType(), "");
+
+  Node* fld1 = _gvn.transform(new ReinterpretS2HFNode(val1->as_InlineType()->field_value(0)));
+  Node* fld2 = _gvn.transform(new ReinterpretS2HFNode(val2->as_InlineType()->field_value(0)));
+
+  switch (id) {
+  case vmIntrinsics::_add_float16:   result = _gvn.transform(new AddHFNode(fld1, fld2)); break;
+
+  default:
+    fatal_unexpected_iid(id);
+    break;
+  }
+  InlineTypeNode* box = InlineTypeNode::make_uninitialized(_gvn, val1->as_InlineType()->inline_klass(), true);
+  Node* short_result  = _gvn.transform(new ReinterpretHF2SNode(result));
+  box->set_field_value(0, short_result);
+  set_result(_gvn.transform(box));
+  return true;
+}
+
 bool LibraryCallKit::inline_fp_conversions(vmIntrinsics::ID id) {
   Node* arg = argument(0);
   Node* result = NULL;
diff --git a/src/hotspot/share/opto/library_call.hpp b/src/hotspot/share/opto/library_call.hpp
index e12d042d25b..b043a26496e 100644
--- a/src/hotspot/share/opto/library_call.hpp
+++ b/src/hotspot/share/opto/library_call.hpp
@@ -296,6 +296,7 @@ class LibraryCallKit : public GraphKit {
   bool inline_unsafe_load_store(BasicType type,  LoadStoreKind kind, AccessKind access_kind);
   bool inline_unsafe_fence(vmIntrinsics::ID id);
   bool inline_onspinwait();
+  bool inline_fp16_operations(vmIntrinsics::ID id);
   bool inline_fp_conversions(vmIntrinsics::ID id);
   bool inline_fp_range_check(vmIntrinsics::ID id);
   bool inline_number_methods(vmIntrinsics::ID id);
diff --git a/src/java.base/share/classes/java/lang/Float16.java b/src/java.base/share/classes/java/lang/Float16.java
new file mode 100644
index 00000000000..69164a2b80d
--- /dev/null
+++ b/src/java.base/share/classes/java/lang/Float16.java
@@ -0,0 +1,1175 @@
+/*
+ * Copyright (c) 2023, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package java.lang;
+
+import java.lang.invoke.MethodHandles;
+import java.lang.constant.Constable;
+import java.lang.constant.ConstantDesc;
+import java.util.Optional;
+
+import jdk.internal.math.FloatConsts;
+import jdk.internal.math.FloatingDecimal;
+import jdk.internal.math.FloatToDecimal;
+import jdk.internal.vm.annotation.IntrinsicCandidate;
+
+/**
+ * The {@code Float} class wraps a value of primitive type
+ * {@code float} in an object. An object of type
+ * {@code Float} contains a single field whose type is
+ * {@code float}.
+ *
+ * <p>In addition, this class provides several methods for converting a
+ * {@code float} to a {@code String} and a
+ * {@code String} to a {@code float}, as well as other
+ * constants and methods useful when dealing with a
+ * {@code float}.
+ *
+ * <p>This is a <a href="{@docRoot}/java.base/java/lang/doc-files/ValueBased.html">value-based</a>
+ * class; programmers should treat instances that are
+ * {@linkplain #equals(Object) equal} as interchangeable and should not
+ * use instances for synchronization, or unpredictable behavior may
+ * occur. For example, in a future release, synchronization may fail.
+ *
+ * <h2><a id=equivalenceRelation>Floating-point Equality, Equivalence,
+ * and Comparison</a></h2>
+ *
+ * The class {@code java.lang.Double} has a <a
+ * href="Double.html#equivalenceRelation">discussion of equality,
+ * equivalence, and comparison of floating-point values</a> that is
+ * equally applicable to {@code float} values.
+ *
+ * @see <a href="https://standards.ieee.org/ieee/754/6210/">
+ *      <cite>IEEE Standard for Floating-Point Arithmetic</cite></a>
+ *
+ * @author  Lee Boynton
+ * @since 20.0
+ */
+public primitive class Float16 {
+   private final short value;
+
+  /**
+   * Returns a {@code Float16} instance representing the specified
+   * {@code short} value.
+   * If a new {@code Float16} instance is not required, this method
+   * should generally be used in preference to the constructor
+   * {@link #Float16(short)}, as this method is likely to yield
+   * significantly better space and time performance by caching
+   * frequently requested values.
+   *
+   * @param  value a short value.
+   * @since  20
+   */
+   public Float16 (short value ) {
+       this.value = value;
+   }
+
+  /**
+   * Returns a {@code Float16} instance representing the specified
+   * {@code short} value.
+   * If a new {@code Float16} instance is not required, this method
+   * should generally be used in preference to the constructor
+   * {@link #Float16(short)}, as this method is likely to yield
+   * significantly better space and time performance by caching
+   * frequently requested values.
+   *
+   * @param  value a short value.
+   * @return a {@code Float16} instance representing {@code value}.
+   * @since  20
+   */
+   public static Float16 valueOf(short value) {
+      return new Float16(value);
+   }
+
+   /**
+    * Adds two {@code float} values together as per the + operator.
+    *
+    * @apiNote This method corresponds to the addition operation
+    * defined in IEEE 754.
+    *
+    * @param value the first operand
+    * @return sum of receiver and {@code value)}.
+    * @since 20
+    */
+   @IntrinsicCandidate
+   public Float16 add(Float16 value) {
+      return Float16.valueOf(Float.floatToFloat16(Float.float16ToFloat(this.value) + Float.float16ToFloat(value.value)));
+   }
+
+   /**
+    * Return raw short value.
+    * @return raw short value {@code value)}.
+    * @since 20
+    */
+   public short float16ToRawShortBits() { return value; }
+}
+
+
+//public final class Float16 extends Number
+//        implements Comparable<Float16>, Constable, ConstantDesc {
+//    /**
+//     * A constant holding the positive infinity of type
+//     * {@code float}. It is equal to the value returned by
+//     * {@code Float.intBitsToFloat(0x7f800000)}.
+//     */
+//    public static final short POSITIVE_INFINITY = (short)0x7c00;
+//
+//    /**
+//     * A constant holding the negative infinity of type
+//     * {@code float}. It is equal to the value returned by
+//     * {@code Float.intBitsToFloat(0xff800000)}.
+//     */
+//    public static final short NEGATIVE_INFINITY = (short)0xfc00;
+//
+//    /**
+//     * A constant holding a Not-a-Number (NaN) value of type
+//     * {@code float}.  It is equivalent to the value returned by
+//     * {@code Float.intBitsToFloat(0x7fc00000)}.
+//     */
+//    public static final short NaN = (short)0x7e00;
+//
+//    /**
+//     * A constant holding the largest positive finite value of type
+//     * {@code float}, (2-2<sup>-9</sup>)&middot;2<sup>15</sup>.
+//     * It is equal to the hexadecimal floating-point literal
+//     * {@code 0x1.ffcP+15f} and also equal to
+//     * {@code Float.intBitsToFloat(0x7c3ff)}.
+//     */
+//    public static final short MAX_VALUE = (short)0x7c3ff; // 65504.0
+//
+//    /**
+//     * A constant holding the smallest positive normal value of type
+//     * {@code float}, 2<sup>-126</sup>.  It is equal to the
+//     * hexadecimal floating-point literal {@code 0x1.0p-126f} and also
+//     * equal to {@code Float.intBitsToFloat(0x00800000)}.
+//     *
+//     * @since 1.6
+//     */
+//    //public static final short MIN_NORMAL = 0x1.0p-14f; // 6.103515625E-5f
+//
+//    /**
+//     * A constant holding the smallest positive nonzero value of type
+//     * {@code float}, 2<sup>-149</sup>. It is equal to the
+//     * hexadecimal floating-point literal {@code 0x0.000002P-126f}
+//     * and also equal to {@code Float.intBitsToFloat(0x1)}.
+//     */
+//    public static final short MIN_VALUE = (short)0x0002; // 6.103515625E-5f
+//
+//    /**
+//     * The number of bits used to represent a {@code float} value.
+//     *
+//     * @since 1.5
+//     */
+//    public static final int SIZE = 16;
+//
+//    /**
+//     * The number of bits in the significand of a {@code float} value.
+//     * This is the parameter N in section {@jls 4.2.3} of
+//     * <cite>The Java Language Specification</cite>.
+//     *
+//     * @since 19
+//     */
+//    public static final int PRECISION = 10;
+//
+//    /**
+//     * Maximum exponent a finite {@code float} variable may have.  It
+//     * is equal to the value returned by {@code
+//     * Math.getExponent(Float.MAX_VALUE)}.
+//     *
+//     * @since 1.6
+//     */
+//    public static final int MAX_EXPONENT = (1 << (SIZE - PRECISION - 1)) - 1; // 15
+//
+//    /**
+//     * Minimum exponent a normalized {@code float} variable may have.
+//     * It is equal to the value returned by {@code
+//     * Math.getExponent(Float.MIN_NORMAL)}.
+//     *
+//     * @since 1.6
+//     */
+//    public static final int MIN_EXPONENT = 1 - MAX_EXPONENT; // -14
+//
+//    /**
+//     * The number of bytes used to represent a {@code float} value.
+//     *
+//     * @since 1.8
+//     */
+//    public static final int BYTES = SIZE / Byte.SIZE;
+//
+//    /**
+//     * The {@code Class} instance representing the primitive type
+//     * {@code float}.
+//     *
+//     * @since 1.1
+//     */
+//    @SuppressWarnings("unchecked")
+//    public static final Class<Short> TYPE = (Class<Short>) Class.getPrimitiveClass("short");
+//
+//    /**
+//     * Returns a string representation of the {@code float}
+//     * argument. All characters mentioned below are ASCII characters.
+//     * <ul>
+//     * <li>If the argument is NaN, the result is the string
+//     * "{@code NaN}".
+//     * <li>Otherwise, the result is a string that represents the sign and
+//     *     magnitude (absolute value) of the argument. If the sign is
+//     *     negative, the first character of the result is
+//     *     '{@code -}' ({@code '\u005Cu002D'}); if the sign is
+//     *     positive, no sign character appears in the result. As for
+//     *     the magnitude <i>m</i>:
+//     * <ul>
+//     * <li>If <i>m</i> is infinity, it is represented by the characters
+//     *     {@code "Infinity"}; thus, positive infinity produces
+//     *     the result {@code "Infinity"} and negative infinity
+//     *     produces the result {@code "-Infinity"}.
+//     * <li>If <i>m</i> is zero, it is represented by the characters
+//     *     {@code "0.0"}; thus, negative zero produces the result
+//     *     {@code "-0.0"} and positive zero produces the result
+//     *     {@code "0.0"}.
+//     *
+//     * <li> Otherwise <i>m</i> is positive and finite.
+//     * It is converted to a string in two stages:
+//     * <ul>
+//     * <li> <em>Selection of a decimal</em>:
+//     * A well-defined decimal <i>d</i><sub><i>m</i></sub>
+//     * is selected to represent <i>m</i>.
+//     * This decimal is (almost always) the <em>shortest</em> one that
+//     * rounds to <i>m</i> according to the round to nearest
+//     * rounding policy of IEEE 754 floating-point arithmetic.
+//     * <li> <em>Formatting as a string</em>:
+//     * The decimal <i>d</i><sub><i>m</i></sub> is formatted as a string,
+//     * either in plain or in computerized scientific notation,
+//     * depending on its value.
+//     * </ul>
+//     * </ul>
+//     * </ul>
+//     *
+//     * <p>A <em>decimal</em> is a number of the form
+//     * <i>s</i>&times;10<sup><i>i</i></sup>
+//     * for some (unique) integers <i>s</i> &gt; 0 and <i>i</i> such that
+//     * <i>s</i> is not a multiple of 10.
+//     * These integers are the <em>significand</em> and
+//     * the <em>exponent</em>, respectively, of the decimal.
+//     * The <em>length</em> of the decimal is the (unique)
+//     * positive integer <i>n</i> meeting
+//     * 10<sup><i>n</i>-1</sup> &le; <i>s</i> &lt; 10<sup><i>n</i></sup>.
+//     *
+//     * <p>The decimal <i>d</i><sub><i>m</i></sub> for a finite positive <i>m</i>
+//     * is defined as follows:
+//     * <ul>
+//     * <li>Let <i>R</i> be the set of all decimals that round to <i>m</i>
+//     * according to the usual <em>round to nearest</em> rounding policy of
+//     * IEEE 754 floating-point arithmetic.
+//     * <li>Let <i>p</i> be the minimal length over all decimals in <i>R</i>.
+//     * <li>When <i>p</i> &ge; 2, let <i>T</i> be the set of all decimals
+//     * in <i>R</i> with length <i>p</i>.
+//     * Otherwise, let <i>T</i> be the set of all decimals
+//     * in <i>R</i> with length 1 or 2.
+//     * <li>Define <i>d</i><sub><i>m</i></sub> as the decimal in <i>T</i>
+//     * that is closest to <i>m</i>.
+//     * Or if there are two such decimals in <i>T</i>,
+//     * select the one with the even significand.
+//     * </ul>
+//     *
+//     * <p>The (uniquely) selected decimal <i>d</i><sub><i>m</i></sub>
+//     * is then formatted.
+//     * Let <i>s</i>, <i>i</i> and <i>n</i> be the significand, exponent and
+//     * length of <i>d</i><sub><i>m</i></sub>, respectively.
+//     * Further, let <i>e</i> = <i>n</i> + <i>i</i> - 1 and let
+//     * <i>s</i><sub>1</sub>&hellip;<i>s</i><sub><i>n</i></sub>
+//     * be the usual decimal expansion of <i>s</i>.
+//     * Note that <i>s</i><sub>1</sub> &ne; 0
+//     * and <i>s</i><sub><i>n</i></sub> &ne; 0.
+//     * Below, the decimal point {@code '.'} is {@code '\u005Cu002E'}
+//     * and the exponent indicator {@code 'E'} is {@code '\u005Cu0045'}.
+//     * <ul>
+//     * <li>Case -3 &le; <i>e</i> &lt; 0:
+//     * <i>d</i><sub><i>m</i></sub> is formatted as
+//     * <code>0.0</code>&hellip;<code>0</code><!--
+//     * --><i>s</i><sub>1</sub>&hellip;<i>s</i><sub><i>n</i></sub>,
+//     * where there are exactly -(<i>n</i> + <i>i</i>) zeroes between
+//     * the decimal point and <i>s</i><sub>1</sub>.
+//     * For example, 123 &times; 10<sup>-4</sup> is formatted as
+//     * {@code 0.0123}.
+//     * <li>Case 0 &le; <i>e</i> &lt; 7:
+//     * <ul>
+//     * <li>Subcase <i>i</i> &ge; 0:
+//     * <i>d</i><sub><i>m</i></sub> is formatted as
+//     * <i>s</i><sub>1</sub>&hellip;<i>s</i><sub><i>n</i></sub><!--
+//     * --><code>0</code>&hellip;<code>0.0</code>,
+//     * where there are exactly <i>i</i> zeroes
+//     * between <i>s</i><sub><i>n</i></sub> and the decimal point.
+//     * For example, 123 &times; 10<sup>2</sup> is formatted as
+//     * {@code 12300.0}.
+//     * <li>Subcase <i>i</i> &lt; 0:
+//     * <i>d</i><sub><i>m</i></sub> is formatted as
+//     * <i>s</i><sub>1</sub>&hellip;<!--
+//     * --><i>s</i><sub><i>n</i>+<i>i</i></sub><code>.</code><!--
+//     * --><i>s</i><sub><i>n</i>+<i>i</i>+1</sub>&hellip;<!--
+//     * --><i>s</i><sub><i>n</i></sub>,
+//     * where there are exactly -<i>i</i> digits to the right of
+//     * the decimal point.
+//     * For example, 123 &times; 10<sup>-1</sup> is formatted as
+//     * {@code 12.3}.
+//     * </ul>
+//     * <li>Case <i>e</i> &lt; -3 or <i>e</i> &ge; 7:
+//     * computerized scientific notation is used to format
+//     * <i>d</i><sub><i>m</i></sub>.
+//     * Here <i>e</i> is formatted as by {@link Integer#toString(int)}.
+//     * <ul>
+//     * <li>Subcase <i>n</i> = 1:
+//     * <i>d</i><sub><i>m</i></sub> is formatted as
+//     * <i>s</i><sub>1</sub><code>.0E</code><i>e</i>.
+//     * For example, 1 &times; 10<sup>23</sup> is formatted as
+//     * {@code 1.0E23}.
+//     * <li>Subcase <i>n</i> &gt; 1:
+//     * <i>d</i><sub><i>m</i></sub> is formatted as
+//     * <i>s</i><sub>1</sub><code>.</code><i>s</i><sub>2</sub><!--
+//     * -->&hellip;<i>s</i><sub><i>n</i></sub><code>E</code><i>e</i>.
+//     * For example, 123 &times; 10<sup>-21</sup> is formatted as
+//     * {@code 1.23E-19}.
+//     * </ul>
+//     * </ul>
+//     *
+//     * <p>To create localized string representations of a floating-point
+//     * value, use subclasses of {@link java.text.NumberFormat}.
+//     *
+//     * @param   f   the {@code float} to be converted.
+//     * @return a string representation of the argument.
+//     */
+//    @Override
+//    public String toString(Float16 value) {
+//        return Short.toString(value.value);
+//    }
+//
+//    /**
+//     * Returns a hexadecimal string representation of the
+//     * {@code float} argument. All characters mentioned below are
+//     * ASCII characters.
+//     *
+//     * <ul>
+//     * <li>If the argument is NaN, the result is the string
+//     *     "{@code NaN}".
+//     * <li>Otherwise, the result is a string that represents the sign and
+//     * magnitude (absolute value) of the argument. If the sign is negative,
+//     * the first character of the result is '{@code -}'
+//     * ({@code '\u005Cu002D'}); if the sign is positive, no sign character
+//     * appears in the result. As for the magnitude <i>m</i>:
+//     *
+//     * <ul>
+//     * <li>If <i>m</i> is infinity, it is represented by the string
+//     * {@code "Infinity"}; thus, positive infinity produces the
+//     * result {@code "Infinity"} and negative infinity produces
+//     * the result {@code "-Infinity"}.
+//     *
+//     * <li>If <i>m</i> is zero, it is represented by the string
+//     * {@code "0x0.0p0"}; thus, negative zero produces the result
+//     * {@code "-0x0.0p0"} and positive zero produces the result
+//     * {@code "0x0.0p0"}.
+//     *
+//     * <li>If <i>m</i> is a {@code float} value with a
+//     * normalized representation, substrings are used to represent the
+//     * significand and exponent fields.  The significand is
+//     * represented by the characters {@code "0x1."}
+//     * followed by a lowercase hexadecimal representation of the rest
+//     * of the significand as a fraction.  Trailing zeros in the
+//     * hexadecimal representation are removed unless all the digits
+//     * are zero, in which case a single zero is used. Next, the
+//     * exponent is represented by {@code "p"} followed
+//     * by a decimal string of the unbiased exponent as if produced by
+//     * a call to {@link Integer#toString(int) Integer.toString} on the
+//     * exponent value.
+//     *
+//     * <li>If <i>m</i> is a {@code float} value with a subnormal
+//     * representation, the significand is represented by the
+//     * characters {@code "0x0."} followed by a
+//     * hexadecimal representation of the rest of the significand as a
+//     * fraction.  Trailing zeros in the hexadecimal representation are
+//     * removed. Next, the exponent is represented by
+//     * {@code "p-126"}.  Note that there must be at
+//     * least one nonzero digit in a subnormal significand.
+//     *
+//     * </ul>
+//     *
+//     * </ul>
+//     *
+//     * <table class="striped">
+//     * <caption>Examples</caption>
+//     * <thead>
+//     * <tr><th scope="col">Floating-point Value</th><th scope="col">Hexadecimal String</th>
+//     * </thead>
+//     * <tbody>
+//     * <tr><th scope="row">{@code 1.0}</th> <td>{@code 0x1.0p0}</td>
+//     * <tr><th scope="row">{@code -1.0}</th>        <td>{@code -0x1.0p0}</td>
+//     * <tr><th scope="row">{@code 2.0}</th> <td>{@code 0x1.0p1}</td>
+//     * <tr><th scope="row">{@code 3.0}</th> <td>{@code 0x1.8p1}</td>
+//     * <tr><th scope="row">{@code 0.5}</th> <td>{@code 0x1.0p-1}</td>
+//     * <tr><th scope="row">{@code 0.25}</th>        <td>{@code 0x1.0p-2}</td>
+//     * <tr><th scope="row">{@code Float.MAX_VALUE}</th>
+//     *     <td>{@code 0x1.fffffep127}</td>
+//     * <tr><th scope="row">{@code Minimum Normal Value}</th>
+//     *     <td>{@code 0x1.0p-126}</td>
+//     * <tr><th scope="row">{@code Maximum Subnormal Value}</th>
+//     *     <td>{@code 0x0.fffffep-126}</td>
+//     * <tr><th scope="row">{@code Float.MIN_VALUE}</th>
+//     *     <td>{@code 0x0.000002p-126}</td>
+//     * </tbody>
+//     * </table>
+//     * @param   f   the {@code float} to be converted.
+//     * @return a hex string representation of the argument.
+//     * @since 1.5
+//     * @author Joseph D. Darcy
+//     */
+//    public static String toHexString(short f) {
+//        return "fp16:" + value;
+////
+////        if (Math.abs(f) < Float.MIN_NORMAL
+////            &&  f != 0.0f ) {// float subnormal
+////            // Adjust exponent to create subnormal double, then
+////            // replace subnormal double exponent with subnormal float
+////            // exponent
+////            String s = Double.toHexString(Math.scalb((double)f,
+////                                                     /* -1022+126 */
+////                                                     Double.MIN_EXPONENT-
+////                                                     Float.MIN_EXPONENT));
+////            return s.replaceFirst("p-1022$", "p-126");
+////        }
+////        else // double string will be the same as float string
+////            return Double.toHexString(f);
+//    }
+//
+//    /**
+//     * Returns a {@code Float} object holding the
+//     * {@code float} value represented by the argument string
+//     * {@code s}.
+//     *
+//     * <p>If {@code s} is {@code null}, then a
+//     * {@code NullPointerException} is thrown.
+//     *
+//     * <p>Leading and trailing whitespace characters in {@code s}
+//     * are ignored.  Whitespace is removed as if by the {@link
+//     * String#trim} method; that is, both ASCII space and control
+//     * characters are removed. The rest of {@code s} should
+//     * constitute a <i>FloatValue</i> as described by the lexical
+//     * syntax rules:
+//     *
+//     * <blockquote>
+//     * <dl>
+//     * <dt><i>FloatValue:</i>
+//     * <dd><i>Sign<sub>opt</sub></i> {@code NaN}
+//     * <dd><i>Sign<sub>opt</sub></i> {@code Infinity}
+//     * <dd><i>Sign<sub>opt</sub> FloatingPointLiteral</i>
+//     * <dd><i>Sign<sub>opt</sub> HexFloatingPointLiteral</i>
+//     * <dd><i>SignedInteger</i>
+//     * </dl>
+//     *
+//     * <dl>
+//     * <dt><i>HexFloatingPointLiteral</i>:
+//     * <dd> <i>HexSignificand BinaryExponent FloatTypeSuffix<sub>opt</sub></i>
+//     * </dl>
+//     *
+//     * <dl>
+//     * <dt><i>HexSignificand:</i>
+//     * <dd><i>HexNumeral</i>
+//     * <dd><i>HexNumeral</i> {@code .}
+//     * <dd>{@code 0x} <i>HexDigits<sub>opt</sub>
+//     *     </i>{@code .}<i> HexDigits</i>
+//     * <dd>{@code 0X}<i> HexDigits<sub>opt</sub>
+//     *     </i>{@code .} <i>HexDigits</i>
+//     * </dl>
+//     *
+//     * <dl>
+//     * <dt><i>BinaryExponent:</i>
+//     * <dd><i>BinaryExponentIndicator SignedInteger</i>
+//     * </dl>
+//     *
+//     * <dl>
+//     * <dt><i>BinaryExponentIndicator:</i>
+//     * <dd>{@code p}
+//     * <dd>{@code P}
+//     * </dl>
+//     *
+//     * </blockquote>
+//     *
+//     * where <i>Sign</i>, <i>FloatingPointLiteral</i>,
+//     * <i>HexNumeral</i>, <i>HexDigits</i>, <i>SignedInteger</i> and
+//     * <i>FloatTypeSuffix</i> are as defined in the lexical structure
+//     * sections of
+//     * <cite>The Java Language Specification</cite>,
+//     * except that underscores are not accepted between digits.
+//     * If {@code s} does not have the form of
+//     * a <i>FloatValue</i>, then a {@code NumberFormatException}
+//     * is thrown. Otherwise, {@code s} is regarded as
+//     * representing an exact decimal value in the usual
+//     * "computerized scientific notation" or as an exact
+//     * hexadecimal value; this exact numerical value is then
+//     * conceptually converted to an "infinitely precise"
+//     * binary value that is then rounded to type {@code float}
+//     * by the usual round-to-nearest rule of IEEE 754 floating-point
+//     * arithmetic, which includes preserving the sign of a zero
+//     * value.
+//     *
+//     * Note that the round-to-nearest rule also implies overflow and
+//     * underflow behaviour; if the exact value of {@code s} is large
+//     * enough in magnitude (greater than or equal to ({@link
+//     * #MAX_VALUE} + {@link Math#ulp(float) ulp(MAX_VALUE)}/2),
+//     * rounding to {@code float} will result in an infinity and if the
+//     * exact value of {@code s} is small enough in magnitude (less
+//     * than or equal to {@link #MIN_VALUE}/2), rounding to float will
+//     * result in a zero.
+//     *
+//     * Finally, after rounding a {@code Float} object representing
+//     * this {@code float} value is returned.
+//     *
+//     * <p>To interpret localized string representations of a
+//     * floating-point value, use subclasses of {@link
+//     * java.text.NumberFormat}.
+//     *
+//     * <p>Note that trailing format specifiers, specifiers that
+//     * determine the type of a floating-point literal
+//     * ({@code 1.0f} is a {@code float} value;
+//     * {@code 1.0d} is a {@code double} value), do
+//     * <em>not</em> influence the results of this method.  In other
+//     * words, the numerical value of the input string is converted
+//     * directly to the target floating-point type.  In general, the
+//     * two-step sequence of conversions, string to {@code double}
+//     * followed by {@code double} to {@code float}, is
+//     * <em>not</em> equivalent to converting a string directly to
+//     * {@code float}.  For example, if first converted to an
+//     * intermediate {@code double} and then to
+//     * {@code float}, the string<br>
+//     * {@code "1.00000017881393421514957253748434595763683319091796875001d"}<br>
+//     * results in the {@code float} value
+//     * {@code 1.0000002f}; if the string is converted directly to
+//     * {@code float}, <code>1.000000<b>1</b>f</code> results.
+//     *
+//     * <p>To avoid calling this method on an invalid string and having
+//     * a {@code NumberFormatException} be thrown, the documentation
+//     * for {@link Double#valueOf Double.valueOf} lists a regular
+//     * expression which can be used to screen the input.
+//     *
+//     * @param   s   the string to be parsed.
+//     * @return  a {@code Float} object holding the value
+//     *          represented by the {@code String} argument.
+//     * @throws  NumberFormatException  if the string does not contain a
+//     *          parsable number.
+//     */
+//    public static Float16 valueOf(String s) throws NumberFormatException {
+//        return new Float16(parseShort(s));
+//    }
+//
+//    /**
+//     * Returns a {@code Float} instance representing the specified
+//     * {@code float} value.
+//     * If a new {@code Float} instance is not required, this method
+//     * should generally be used in preference to the constructor
+//     * {@link #Float(float)}, as this method is likely to yield
+//     * significantly better space and time performance by caching
+//     * frequently requested values.
+//     *
+//     * @param  f a float value.
+//     * @return a {@code Float} instance representing {@code f}.
+//     * @since  1.5
+//     */
+//    @IntrinsicCandidate
+//    public static Float16 valueOf(short f) {
+//        return new Float16(f);
+//    }
+//
+//    /**
+//     * Returns a new {@code float} initialized to the value
+//     * represented by the specified {@code String}, as performed
+//     * by the {@code valueOf} method of class {@code Float}.
+//     *
+//     * @param  s the string to be parsed.
+//     * @return the {@code float} value represented by the string
+//     *         argument.
+//     * @throws NullPointerException  if the string is null
+//     * @throws NumberFormatException if the string does not contain a
+//     *               parsable {@code float}.
+//     * @see    java.lang.Float#valueOf(String)
+//     * @since 1.2
+//     */
+//    public static short parseFloat16(String s) throws NumberFormatException {
+//        return Short.parseShort(s);
+//    }
+//
+//    /**
+//     * Returns {@code true} if the specified number is a
+//     * Not-a-Number (NaN) value, {@code false} otherwise.
+//     *
+//     * @apiNote
+//     * This method corresponds to the isNaN operation defined in IEEE
+//     * 754.
+//     *
+//     * @param   v   the value to be tested.
+//     * @return  {@code true} if the argument is NaN;
+//     *          {@code false} otherwise.
+//     */
+//    public static boolean isNaN(Float16 v) {
+//        return Float.float16ToFloat(v).isNaN();
+//    }
+//
+//    /**
+//     * Returns {@code true} if the specified number is infinitely
+//     * large in magnitude, {@code false} otherwise.
+//     *
+//     * @apiNote
+//     * This method corresponds to the isInfinite operation defined in
+//     * IEEE 754.
+//     *
+//     * @param   v   the value to be tested.
+//     * @return  {@code true} if the argument is positive infinity or
+//     *          negative infinity; {@code false} otherwise.
+//     */
+//    @IntrinsicCandidate
+//    public static boolean isInfinite(Float16 v) {
+//        return Float.float16ToFloat(v).isInfinite();
+//    }
+//
+//
+//    /**
+//     * Returns {@code true} if the argument is a finite floating-point
+//     * value; returns {@code false} otherwise (for NaN and infinity
+//     * arguments).
+//     *
+//     * @apiNote
+//     * This method corresponds to the isFinite operation defined in
+//     * IEEE 754.
+//     *
+//     * @param f the {@code float} value to be tested
+//     * @return {@code true} if the argument is a finite
+//     * floating-point value, {@code false} otherwise.
+//     * @since 1.8
+//     */
+//     @IntrinsicCandidate
+//     public static boolean isFinite(Float16 f) {
+//        return Float.float16ToFloat(f).isFinite();
+//    }
+//
+//    /**
+//     * The value of the Float.
+//     *
+//     * @serial
+//     */
+//    private final short value;
+//
+//    /**
+//     * Constructs a newly allocated {@code Float} object that
+//     * represents the primitive {@code float} argument.
+//     *
+//     * @param   value   the value to be represented by the {@code Float}.
+//     *
+//     * @deprecated
+//     * It is rarely appropriate to use this constructor. The static factory
+//     * {@link #valueOf(float)} is generally a better choice, as it is
+//     * likely to yield significantly better space and time performance.
+//     */
+//    @Deprecated(since="9", forRemoval = true)
+//    public Float16(short value) {
+//        this.value = value;
+//    }
+//
+//    /**
+//     * Constructs a newly allocated {@code Float} object that
+//     * represents the floating-point value of type {@code float}
+//     * represented by the string. The string is converted to a
+//     * {@code float} value as if by the {@code valueOf} method.
+//     *
+//     * @param   s   a string to be converted to a {@code Float}.
+//     * @throws      NumberFormatException if the string does not contain a
+//     *              parsable number.
+//     *
+//     * @deprecated
+//     * It is rarely appropriate to use this constructor.
+//     * Use {@link #parseFloat(String)} to convert a string to a
+//     * {@code float} primitive, or use {@link #valueOf(String)}
+//     * to convert a string to a {@code Float} object.
+//     */
+//    @Deprecated(since="9", forRemoval = true)
+//    public Float16(String s) throws NumberFormatException {
+//        value = Short.parseShort(s);
+//    }
+//
+//    /**
+//     * Returns {@code true} if this {@code Float} value is a
+//     * Not-a-Number (NaN), {@code false} otherwise.
+//     *
+//     * @return  {@code true} if the value represented by this object is
+//     *          NaN; {@code false} otherwise.
+//     */
+//    public boolean isNaN() {
+//        return isNaN(value);
+//    }
+//
+//    /**
+//     * Returns {@code true} if this {@code Float} value is
+//     * infinitely large in magnitude, {@code false} otherwise.
+//     *
+//     * @return  {@code true} if the value represented by this object is
+//     *          positive infinity or negative infinity;
+//     *          {@code false} otherwise.
+//     */
+//    public boolean isInfinite() {
+//        return isInfinite(value);
+//    }
+//
+//    /**
+//     * Returns a string representation of this {@code Float} object.
+//     * The primitive {@code float} value represented by this object
+//     * is converted to a {@code String} exactly as if by the method
+//     * {@code toString} of one argument.
+//     *
+//     * @return  a {@code String} representation of this object.
+//     * @see java.lang.Float#toString(float)
+//     */
+//    public String toString() {
+//        return Short.toString(value);
+//    }
+//
+//    /**
+//     * Returns the value of this {@code Float} as a {@code byte} after
+//     * a narrowing primitive conversion.
+//     *
+//     * @return  the {@code float} value represented by this object
+//     *          converted to type {@code byte}
+//     * @jls 5.1.3 Narrowing Primitive Conversion
+//     */
+//    public byte byteValue() {
+//        return (byte)Float.float16ToFloat(value);
+//    }
+//
+//    /**
+//     * Returns the value of this {@code Float} as a {@code short}
+//     * after a narrowing primitive conversion.
+//     *
+//     * @return  the {@code float} value represented by this object
+//     *          converted to type {@code short}
+//     * @jls 5.1.3 Narrowing Primitive Conversion
+//     * @since 1.1
+//     */
+//    public short shortValue() {
+//        return (short)Float.float16ToFloat(value);
+//    }
+//
+//    /**
+//     * Returns the value of this {@code Float} as an {@code int} after
+//     * a narrowing primitive conversion.
+//     *
+//     * @return  the {@code float} value represented by this object
+//     *          converted to type {@code int}
+//     * @jls 5.1.3 Narrowing Primitive Conversion
+//     */
+//    public int intValue() {
+//        return (int)Float.float16ToFloat(value);
+//    }
+//
+//    /**
+//     * Returns value of this {@code Float} as a {@code long} after a
+//     * narrowing primitive conversion.
+//     *
+//     * @return  the {@code float} value represented by this object
+//     *          converted to type {@code long}
+//     * @jls 5.1.3 Narrowing Primitive Conversion
+//     */
+//    public long longValue() {
+//        return (long)Float.float16ToFloat(value);
+//    }
+//
+//
+//    /**
+//     * Returns the {@code float} value of this {@code Float} object.
+//     *
+//     * @return the {@code float} value represented by this object
+//     */
+//    @IntrinsicCandidate
+//    public float floatValue() {
+//        return Float.float16ToFloat(value);
+//    }
+//
+//    /**
+//     * Returns the value of this {@code Float} as a {@code double}
+//     * after a widening primitive conversion.
+//     *
+//     * @apiNote
+//     * This method corresponds to the convertFormat operation defined
+//     * in IEEE 754.
+//     *
+//     * @return the {@code float} value represented by this
+//     *         object converted to type {@code double}
+//     * @jls 5.1.2 Widening Primitive Conversion
+//     */
+//    public double doubleValue() {
+//        return (double)Float.float16ToFloat(value);
+//    }
+//
+//    /**
+//     * Returns a hash code for this {@code Float} object. The
+//     * result is the integer bit representation, exactly as produced
+//     * by the method {@link #floatToIntBits(float)}, of the primitive
+//     * {@code float} value represented by this {@code Float}
+//     * object.
+//     *
+//     * @return a hash code value for this object.
+//     */
+//    @Override
+//    public int hashCode() {
+//        return Short.hashCode(value);
+//    }
+//
+//    /**
+//     * Returns a hash code for a {@code float} value; compatible with
+//     * {@code Float.hashCode()}.
+//     *
+//     * @param value the value to hash
+//     * @return a hash code value for a {@code float} value.
+//     * @since 1.8
+//     */
+//    public static int hashCode(short value) {
+//        return Short.hashCode(value);
+//    }
+//
+//    /**
+//     * Compares this object against the specified object.  The result
+//     * is {@code true} if and only if the argument is not
+//     * {@code null} and is a {@code Float} object that
+//     * represents a {@code float} with the same value as the
+//     * {@code float} represented by this object. For this
+//     * purpose, two {@code float} values are considered to be the
+//     * same if and only if the method {@link #floatToIntBits(float)}
+//     * returns the identical {@code int} value when applied to
+//     * each.
+//     *
+//     * @apiNote
+//     * This method is defined in terms of {@link
+//     * #floatToIntBits(float)} rather than the {@code ==} operator on
+//     * {@code float} values since the {@code ==} operator does
+//     * <em>not</em> define an equivalence relation and to satisfy the
+//     * {@linkplain Object#equals equals contract} an equivalence
+//     * relation must be implemented; see <a
+//     * href="Double.html#equivalenceRelation">this discussion</a> for
+//     * details of floating-point equality and equivalence.
+//     *
+//     * @param obj the object to be compared
+//     * @return  {@code true} if the objects are the same;
+//     *          {@code false} otherwise.
+//     * @see java.lang.Float#floatToIntBits(float)
+//     * @jls 15.21.1 Numerical Equality Operators == and !=
+//     */
+//    public boolean equals(Object obj) {
+//        return (obj instanceof Float16)
+//               && ((Float16)obj).value == value;
+//    }
+//
+//    /**
+//     * Returns a representation of the specified floating-point value
+//     * according to the IEEE 754 floating-point "single format" bit
+//     * layout.
+//     *
+//     * <p>Bit 31 (the bit that is selected by the mask
+//     * {@code 0x80000000}) represents the sign of the floating-point
+//     * number.
+//     * Bits 30-23 (the bits that are selected by the mask
+//     * {@code 0x7f800000}) represent the exponent.
+//     * Bits 22-0 (the bits that are selected by the mask
+//     * {@code 0x007fffff}) represent the significand (sometimes called
+//     * the mantissa) of the floating-point number.
+//     *
+//     * <p>If the argument is positive infinity, the result is
+//     * {@code 0x7f800000}.
+//     *
+//     * <p>If the argument is negative infinity, the result is
+//     * {@code 0xff800000}.
+//     *
+//     * <p>If the argument is NaN, the result is {@code 0x7fc00000}.
+//     *
+//     * <p>In all cases, the result is an integer that, when given to the
+//     * {@link #intBitsToFloat(int)} method, will produce a floating-point
+//     * value the same as the argument to {@code floatToIntBits}
+//     * (except all NaN values are collapsed to a single
+//     * "canonical" NaN value).
+//     *
+//     * @param   value   a floating-point number.
+//     * @return the bits that represent the floating-point number.
+//     */
+//    @IntrinsicCandidate
+//    public static int float16ToIntBits(short value) {
+//        if (!isNaN(value)) {
+//            return value;
+//        }
+//        return NaN;
+//    }
+//
+//    /**
+//     * Returns a representation of the specified floating-point value
+//     * according to the IEEE 754 floating-point "single format" bit
+//     * layout, preserving Not-a-Number (NaN) values.
+//     *
+//     * <p>Bit 31 (the bit that is selected by the mask
+//     * {@code 0x80000000}) represents the sign of the floating-point
+//     * number.
+//     * Bits 30-23 (the bits that are selected by the mask
+//     * {@code 0x7f800000}) represent the exponent.
+//     * Bits 22-0 (the bits that are selected by the mask
+//     * {@code 0x007fffff}) represent the significand (sometimes called
+//     * the mantissa) of the floating-point number.
+//     *
+//     * <p>If the argument is positive infinity, the result is
+//     * {@code 0x7f800000}.
+//     *
+//     * <p>If the argument is negative infinity, the result is
+//     * {@code 0xff800000}.
+//     *
+//     * <p>If the argument is NaN, the result is the integer representing
+//     * the actual NaN value.  Unlike the {@code floatToIntBits}
+//     * method, {@code floatToRawIntBits} does not collapse all the
+//     * bit patterns encoding a NaN to a single "canonical"
+//     * NaN value.
+//     *
+//     * <p>In all cases, the result is an integer that, when given to the
+//     * {@link #intBitsToFloat(int)} method, will produce a
+//     * floating-point value the same as the argument to
+//     * {@code floatToRawIntBits}.
+//     *
+//     * @param   value   a floating-point number.
+//     * @return the bits that represent the floating-point number.
+//     * @since 1.3
+//     */
+//    //@IntrinsicCandidate
+//    //public static native int floatToRawIntBits(float value);
+//
+//    /**
+//     * Returns the {@code float} value corresponding to a given
+//     * bit representation.
+//     * The argument is considered to be a representation of a
+//     * floating-point value according to the IEEE 754 floating-point
+//     * "single format" bit layout.
+//     *
+//     * <p>If the argument is {@code 0x7f800000}, the result is positive
+//     * infinity.
+//     *
+//     * <p>If the argument is {@code 0xff800000}, the result is negative
+//     * infinity.
+//     *
+//     * <p>If the argument is any value in the range
+//     * {@code 0x7f800001} through {@code 0x7fffffff} or in
+//     * the range {@code 0xff800001} through
+//     * {@code 0xffffffff}, the result is a NaN.  No IEEE 754
+//     * floating-point operation provided by Java can distinguish
+//     * between two NaN values of the same type with different bit
+//     * patterns.  Distinct values of NaN are only distinguishable by
+//     * use of the {@code Float.floatToRawIntBits} method.
+//     *
+//     * <p>In all other cases, let <i>s</i>, <i>e</i>, and <i>m</i> be three
+//     * values that can be computed from the argument:
+//     *
+//     * {@snippet lang="java" :
+//     * int s = ((bits >> 31) == 0) ? 1 : -1;
+//     * int e = ((bits >> 23) & 0xff);
+//     * int m = (e == 0) ?
+//     *                 (bits & 0x7fffff) << 1 :
+//     *                 (bits & 0x7fffff) | 0x800000;
+//     * }
+//     *
+//     * Then the floating-point result equals the value of the mathematical
+//     * expression <i>s</i>&middot;<i>m</i>&middot;2<sup><i>e</i>-150</sup>.
+//     *
+//     * <p>Note that this method may not be able to return a
+//     * {@code float} NaN with exactly same bit pattern as the
+//     * {@code int} argument.  IEEE 754 distinguishes between two
+//     * kinds of NaNs, quiet NaNs and <i>signaling NaNs</i>.  The
+//     * differences between the two kinds of NaN are generally not
+//     * visible in Java.  Arithmetic operations on signaling NaNs turn
+//     * them into quiet NaNs with a different, but often similar, bit
+//     * pattern.  However, on some processors merely copying a
+//     * signaling NaN also performs that conversion.  In particular,
+//     * copying a signaling NaN to return it to the calling method may
+//     * perform this conversion.  So {@code intBitsToFloat} may
+//     * not be able to return a {@code float} with a signaling NaN
+//     * bit pattern.  Consequently, for some {@code int} values,
+//     * {@code floatToRawIntBits(intBitsToFloat(start))} may
+//     * <i>not</i> equal {@code start}.  Moreover, which
+//     * particular bit patterns represent signaling NaNs is platform
+//     * dependent; although all NaN bit patterns, quiet or signaling,
+//     * must be in the NaN range identified above.
+//     *
+//     * @param   bits   an integer.
+//     * @return  the {@code float} floating-point value with the same bit
+//     *          pattern.
+//     */
+//    //@IntrinsicCandidate
+//    //public static native float intBitsToFloat(int bits);
+//
+//
+//    public short float16ToRawShortBits() { return value; }
+//
+//    /**
+//     * Compares two {@code Float} objects numerically.
+//     *
+//     * This method imposes a total order on {@code Float} objects
+//     * with two differences compared to the incomplete order defined by
+//     * the Java language numerical comparison operators ({@code <, <=,
+//     * ==, >=, >}) on {@code float} values.
+//     *
+//     * <ul><li> A NaN is <em>unordered</em> with respect to other
+//     *          values and unequal to itself under the comparison
+//     *          operators.  This method chooses to define {@code
+//     *          Float.NaN} to be equal to itself and greater than all
+//     *          other {@code double} values (including {@code
+//     *          Float.POSITIVE_INFINITY}).
+//     *
+//     *      <li> Positive zero and negative zero compare equal
+//     *      numerically, but are distinct and distinguishable values.
+//     *      This method chooses to define positive zero ({@code +0.0f}),
+//     *      to be greater than negative zero ({@code -0.0f}).
+//     * </ul>
+//     *
+//     * This ensures that the <i>natural ordering</i> of {@code Float}
+//     * objects imposed by this method is <i>consistent with
+//     * equals</i>; see <a href="Double.html#equivalenceRelation">this
+//     * discussion</a> for details of floating-point comparison and
+//     * ordering.
+//     *
+//     *
+//     * @param   anotherFloat   the {@code Float} to be compared.
+//     * @return  the value {@code 0} if {@code anotherFloat} is
+//     *          numerically equal to this {@code Float}; a value
+//     *          less than {@code 0} if this {@code Float}
+//     *          is numerically less than {@code anotherFloat};
+//     *          and a value greater than {@code 0} if this
+//     *          {@code Float} is numerically greater than
+//     *          {@code anotherFloat}.
+//     *
+//     * @jls 15.20.1 Numerical Comparison Operators {@code <}, {@code <=}, {@code >}, and {@code >=}
+//     * @since   1.2
+//     */
+//    public int compareTo(Float16 anotherFloat) {
+//        return Float16.compare(value, anotherFloat.value);
+//    }
+//
+//    /**
+//     * Compares the two specified {@code float} values. The sign
+//     * of the integer value returned is the same as that of the
+//     * integer that would be returned by the call:
+//     * <pre>
+//     *    Float.valueOf(f1).compareTo(Float.valueOf(f2))
+//     * </pre>
+//     *
+//     * @param   f1        the first {@code float} to compare.
+//     * @param   f2        the second {@code float} to compare.
+//     * @return  the value {@code 0} if {@code f1} is
+//     *          numerically equal to {@code f2}; a value less than
+//     *          {@code 0} if {@code f1} is numerically less than
+//     *          {@code f2}; and a value greater than {@code 0}
+//     *          if {@code f1} is numerically greater than
+//     *          {@code f2}.
+//     * @since 1.4
+//     */
+//    public static int compare(Float16 f1, Float16 f2) {
+//        return Float.compare(Float.float16ToFloat(f1.float16ToRawShortBits()), Float.float16ToFloat(f2.float16ToRawShortBits()));
+//    }
+//
+//    /**
+//     * Adds two {@code float} values together as per the + operator.
+//     *
+//     * @apiNote This method corresponds to the addition operation
+//     * defined in IEEE 754.
+//     *
+//     * @param a the first operand
+//     * @param b the second operand
+//     * @return the sum of {@code a} and {@code b}
+//     * @jls 4.2.4 Floating-Point Operations
+//     * @see java.util.function.BinaryOperator
+//     * @since 1.8
+//     */
+//    public static Float16 sum(Float16 a, Float16 b) {
+//        return Float.floatToFloat16(Float.float16ToFloat(a.float16ToRawShortBits()) + Float.float16ToFloat(b.float16ToRawShortBits()));
+//    }
+//
+//    /**
+//     * Returns the greater of two {@code float} values
+//     * as if by calling {@link Math#max(float, float) Math.max}.
+//     *
+//     * @apiNote
+//     * This method corresponds to the maximum operation defined in
+//     * IEEE 754.
+//     *
+//     * @param a the first operand
+//     * @param b the second operand
+//     * @return the greater of {@code a} and {@code b}
+//     * @see java.util.function.BinaryOperator
+//     * @since 1.8
+//     */
+//    public static Float16 max(Float16 a, Float16 b) {
+//        return Float.float16ToFloat(Math.max(Float.float16ToFloat(a.float16ToRawShortBits()), Float.float16ToFloat(b.float16ToRawShortBits())));
+//    }
+//
+//    /**
+//     * Returns the smaller of two {@code float} values
+//     * as if by calling {@link Math#min(float, float) Math.min}.
+//     *
+//     * @apiNote
+//     * This method corresponds to the minimum operation defined in
+//     * IEEE 754.
+//     *
+//     * @param a the first operand
+//     * @param b the second operand
+//     * @return the smaller of {@code a} and {@code b}
+//     * @see java.util.function.BinaryOperator
+//     * @since 1.8
+//     */
+//    public static Float16 min(Float16 a, Float16 b) {
+//        return Float.float16ToFloat(Math.min(Float.float16ToFloat(a.float16ToRawShortBits()), Float.float16ToFloat(b.float16ToRawShortBits)));
+//    }
+//
+//    /**
+//     * Returns an {@link Optional} containing the nominal descriptor for this
+//     * instance, which is the instance itself.
+//     *
+//     * @return an {@link Optional} describing the {@linkplain Float} instance
+//     * @since 12
+//     */
+//    @Override
+//    public Optional<Float16> describeConstable() {
+//        return Optional.of(this);
+//    }
+//
+//    /**
+//     * Resolves this instance as a {@link ConstantDesc}, the result of which is
+//     * the instance itself.
+//     *
+//     * @param lookup ignored
+//     * @return the {@linkplain Float} instance
+//     * @since 12
+//     */
+//    @Override
+//    public Float resolveConstantDesc(MethodHandles.Lookup lookup) {
+//        return this;
+//    }
+//
+//    /** use serialVersionUID from JDK 1.0.2 for interoperability */
+//    @java.io.Serial
+//    private static final long serialVersionUID = -2671257302660747028L;
+//}
diff --git a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.amd64/src/jdk/vm/ci/amd64/AMD64.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.amd64/src/jdk/vm/ci/amd64/AMD64.java
index 2165b2cc030..8aae4b4f5b1 100644
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.amd64/src/jdk/vm/ci/amd64/AMD64.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.amd64/src/jdk/vm/ci/amd64/AMD64.java
@@ -232,6 +232,7 @@ public class AMD64 extends Architecture {
         CET_IBT,
         CET_SS,
         AVX512_IFMA,
+        AVX512_FP16,
     }
 
     private final EnumSet<CPUFeature> features;
