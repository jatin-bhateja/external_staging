diff --git a/src/hotspot/share/opto/inlinetypenode.cpp b/src/hotspot/share/opto/inlinetypenode.cpp
index b978b2c3547..26b982f17b5 100644
--- a/src/hotspot/share/opto/inlinetypenode.cpp
+++ b/src/hotspot/share/opto/inlinetypenode.cpp
@@ -509,21 +509,28 @@ InlineTypeNode* InlineTypeNode::buffer(GraphKit* kit, bool safe_for_replace) {
     return this;
   }
 
-  // Check if inline type is already buffered
-  Node* not_buffered_ctl = kit->top();
-  Node* not_null_oop = kit->null_check_oop(get_oop(), &not_buffered_ctl, /* never_see_null = */ false, safe_for_replace);
-  if (not_buffered_ctl->is_top()) {
-    // Already buffered
-    InlineTypeNode* vt = clone()->as_InlineType();
-    vt->_is_buffered = true;
-    vt = kit->gvn().transform(vt)->as_InlineType();
-    if (safe_for_replace) {
-      kit->replace_in_map(this, vt);
+  Node* not_null_oop = nullptr;
+  Node* buffered_ctl = nullptr;
+  if (!is_VectorBox()) {
+    // Check if inline type is already buffered
+    Node* not_buffered_ctl = kit->top();
+    Node* not_null_oop = kit->null_check_oop(get_oop(), &not_buffered_ctl, /* never_see_null = */ false, safe_for_replace);
+    if (not_buffered_ctl->is_top()) {
+      // Already buffered
+      InlineTypeNode* vt = clone()->as_InlineType();
+      vt->_is_buffered = true;
+      vt = kit->gvn().transform(vt)->as_InlineType();
+      if (safe_for_replace) {
+        kit->replace_in_map(this, vt);
+      }
+      return vt;
     }
-    return vt;
+    buffered_ctl = kit->control();
+    kit->set_control(not_buffered_ctl);
+  } else {
+    not_null_oop = get_oop();
+    buffered_ctl = kit->control();
   }
-  Node* buffered_ctl = kit->control();
-  kit->set_control(not_buffered_ctl);
 
   // Inline type is not buffered, check if it is null.
   Node* null_ctl = kit->top();
@@ -547,7 +554,7 @@ InlineTypeNode* InlineTypeNode::buffer(GraphKit* kit, bool safe_for_replace) {
   int bci = kit->bci();
   bool reexecute = kit->jvms()->should_reexecute();
   if (!kit->stopped()) {
-    assert(!is_allocated(&kit->gvn()), "already buffered");
+    assert(is_VectorBox() || !is_allocated(&kit->gvn()), "already buffered");
 
     // Allocate and initialize buffer
     PreserveJVMState pjvms(kit);
diff --git a/src/hotspot/share/opto/node.hpp b/src/hotspot/share/opto/node.hpp
index b969b2ba7e9..e9bdd470381 100644
--- a/src/hotspot/share/opto/node.hpp
+++ b/src/hotspot/share/opto/node.hpp
@@ -168,6 +168,7 @@ class TypeNode;
 class UnlockNode;
 class InlineTypeNode;
 class VectorBoxNode;
+class VectorBoxAllocateNode;
 class VectorNode;
 class LoadVectorNode;
 class LoadVectorMaskedNode;
@@ -644,6 +645,7 @@ public:
         DEFINE_CLASS_ID(Call,      SafePoint, 0)
           DEFINE_CLASS_ID(CallJava,         Call, 0)
             DEFINE_CLASS_ID(CallStaticJava,   CallJava, 0)
+              DEFINE_CLASS_ID(VectorBoxAllocate, CallStaticJava, 0)
             DEFINE_CLASS_ID(CallDynamicJava,  CallJava, 1)
           DEFINE_CLASS_ID(CallRuntime,      Call, 1)
             DEFINE_CLASS_ID(CallLeaf,         CallRuntime, 0)
@@ -955,6 +957,7 @@ public:
   DEFINE_CLASS_QUERY(Type)
   DEFINE_CLASS_QUERY(InlineType)
   DEFINE_CLASS_QUERY(VectorBox)
+  DEFINE_CLASS_QUERY(VectorBoxAllocate)
   DEFINE_CLASS_QUERY(Vector)
   DEFINE_CLASS_QUERY(VectorMaskCmp)
   DEFINE_CLASS_QUERY(VectorUnbox)
diff --git a/src/hotspot/share/opto/vector.cpp b/src/hotspot/share/opto/vector.cpp
index 09a502cfdd0..31bac0f8300 100644
--- a/src/hotspot/share/opto/vector.cpp
+++ b/src/hotspot/share/opto/vector.cpp
@@ -314,184 +314,17 @@ void PhaseVector::scalarize_vbox_node(VectorBoxNode* vec_box) {
 
 void PhaseVector::expand_vbox_node(VectorBoxNode* vec_box) {
   if (vec_box->outcnt() > 0) {
-    Node* vbox = vec_box->get_oop();
-    Node* vect = vec_box->get_vec();
-    Node* result = expand_vbox_node_helper(vec_box, vbox, vect, vec_box->box_type(), vec_box->vec_type());
+    Node* vbox_alloc = vec_box->get_oop();
+    assert(vbox_alloc->is_Proj() && vbox_alloc->in(0)->isa_VectorBoxAllocate(), "");
+    JVMState* jvms = clone_jvms(C, vbox_alloc->in(0)->as_VectorBoxAllocate());
+    GraphKit kit(jvms);
+    Node* result = vec_box->buffer(&kit);
     C->gvn_replace_by(vec_box, result);
     C->print_method(PHASE_EXPAND_VBOX, 3, vec_box);
   }
   C->remove_macro_node(vec_box);
 }
 
-Node* PhaseVector::expand_vbox_node_helper(Node* vec_box,
-                                           Node* vbox,
-                                           Node* vect,
-                                           const TypeInstPtr* box_type,
-                                           const TypeVect* vect_type) {
-  if (vbox->is_Phi() && vect->is_Phi()) {
-    assert(vbox->as_Phi()->region() == vect->as_Phi()->region(), "");
-    Node* new_phi = new PhiNode(vbox->as_Phi()->region(), box_type);
-    for (uint i = 1; i < vbox->req(); i++) {
-      Node* new_box = expand_vbox_node_helper(vec_box, vbox->in(i), vect->in(i), box_type, vect_type);
-      new_phi->set_req(i, new_box);
-    }
-    new_phi = C->initial_gvn()->transform(new_phi);
-    return new_phi;
-  } else if (vbox->is_Phi() && (vect->is_Vector() || vect->is_LoadVector())) {
-    // Handle the case when the allocation input to VectorBoxNode is a phi
-    // but the vector input is not, which can definitely be the case if the
-    // vector input has been value-numbered. It seems to be safe to do by
-    // construction because VectorBoxNode and VectorBoxAllocate come in a
-    // specific order as a result of expanding an intrinsic call. After that, if
-    // any of the inputs to VectorBoxNode are value-numbered they can only
-    // move up and are guaranteed to dominate.
-    Node* new_phi = new PhiNode(vbox->as_Phi()->region(), box_type);
-    for (uint i = 1; i < vbox->req(); i++) {
-      Node* new_box = expand_vbox_node_helper(vec_box, vbox->in(i), vect, box_type, vect_type);
-      new_phi->set_req(i, new_box);
-    }
-    new_phi = C->initial_gvn()->transform(new_phi);
-    return new_phi;
-  } else if (vbox->is_Proj() && vbox->in(0)->Opcode() == Op_VectorBoxAllocate) {
-    VectorBoxAllocateNode* vbox_alloc = static_cast<VectorBoxAllocateNode*>(vbox->in(0));
-    return expand_vbox_alloc_node(vec_box, vbox_alloc, vect, box_type, vect_type);
-  } else {
-    assert(!vbox->is_Phi(), "");
-    // TODO: assert that expanded vbox is initialized with the same value (vect).
-    return vbox; // already expanded
-  }
-}
-
-Node* PhaseVector::expand_vbox_alloc_node_mf(Node* vbox,
-                                             VectorBoxAllocateNode* vbox_alloc,
-                                             Node* value,
-                                             const TypeInstPtr* box_type,
-                                             const TypeVect* vect_type) {
-  assert(vbox->isa_InlineType(), "");
-  JVMState* jvms = clone_jvms(C, vbox_alloc);
-  GraphKit kit(jvms);
-  PhaseGVN& gvn = kit.gvn();
-
-  ciInstanceKlass* box_klass = box_type->instance_klass();
-  BasicType bt = vect_type->element_basic_type();
-  int num_elem = vect_type->length();
-  int elem_size = type2aelembytes(bt);
-
-  const TypeKlassPtr* klass_type = box_type->as_klass_type();
-  Node* klass_node = kit.makecon(klass_type);
-  Node* buffer_mem = kit.new_instance(klass_node, NULL, NULL, /* deoptimize_on_exception */ true, vbox->as_InlineType());
-  // TODO: Re-use existing value storage routine from InlineTypeNode.
-  //vbox->as_InlineType()->store(&kit, buffer, buffer, box_klass);
-
-  // Store the vector value into the array.
-  // (The store should be captured by InitializeNode and turned into initialized store later.)
-  ciSymbol* payload_sig = ciSymbol::make(VectorSupport::get_vector_payload_field_signature(bt, num_elem)->as_C_string());
-  ciSymbol* payload_name = ciSymbol::make(vmSymbols::payload_name()->as_C_string());
-  ciField* payload = box_klass->get_field_by_name(payload_name, payload_sig, false);
-
-  Node* buffer_start_adr = kit.basic_plus_adr(buffer_mem, payload->offset());
-  const TypePtr* buffer_adr_type = buffer_start_adr->bottom_type()->is_ptr();
-  Node* buffer_mem_start = kit.memory(buffer_start_adr);
-  Node* vstore = gvn.transform(StoreVectorNode::make(0,
-                                                     kit.control(),
-                                                     buffer_mem_start,
-                                                     buffer_start_adr,
-                                                     buffer_adr_type,
-                                                     value,
-                                                     num_elem));
-  // TODO: With respect to aliasing behaviour multi-field alias type should be same as that of
-  // array, since multi-field is a bundle of scalars. An alias type determines the size of
-  // memory slice updated in global memory at a particular alias index, subsequent memory read
-  // with same alias type can directly fetch the value thus saving an extra load operation.
-  kit.set_memory(vstore, buffer_adr_type);
-
-  C->set_max_vector_size(MAX2(C->max_vector_size(), vect_type->length_in_bytes()));
-
-  kit.replace_call(vbox_alloc, buffer_mem, true);
-  C->remove_macro_node(vbox_alloc);
-
-  return buffer_mem;
-}
-
-
-Node* PhaseVector::expand_vbox_alloc_node(Node* vbox,
-                                          VectorBoxAllocateNode* vbox_alloc,
-                                          Node* value,
-                                          const TypeInstPtr* box_type,
-                                          const TypeVect* vect_type) {
-  ciInstanceKlass* box_klass = box_type->instance_klass();
-  if (is_vector(box_klass)) {
-    return expand_vbox_alloc_node_mf(vbox, vbox_alloc, value, box_type, vect_type);
-  }
-
-  JVMState* jvms = clone_jvms(C, vbox_alloc);
-  GraphKit kit(jvms);
-  PhaseGVN& gvn = kit.gvn();
-
-  BasicType bt = vect_type->element_basic_type();
-  int num_elem = vect_type->length();
-
-  bool is_mask = is_vector_mask(box_klass);
-  // If boxed mask value is present in a predicate register, it must be
-  // spilled to a vector though a VectorStoreMaskOperation before actual StoreVector
-  // operation to vector payload field.
-  if (is_mask && (value->bottom_type()->isa_vectmask() || bt != T_BOOLEAN)) {
-    value = gvn.transform(VectorStoreMaskNode::make(gvn, value, bt, num_elem));
-    // Although type of mask depends on its definition, in terms of storage everything is stored in boolean array.
-    bt = T_BOOLEAN;
-    assert(value->bottom_type()->is_vect()->element_basic_type() == bt,
-           "must be consistent with mask representation");
-  }
-
-  // Generate array allocation for the field which holds the values.
-  const TypeKlassPtr* array_klass = TypeKlassPtr::make(ciTypeArrayKlass::make(bt));
-  Node* arr = kit.new_array(kit.makecon(array_klass), kit.intcon(num_elem), 1);
-
-  // Store the vector value into the array.
-  // (The store should be captured by InitializeNode and turned into initialized store later.)
-  Node* arr_adr = kit.array_element_address(arr, kit.intcon(0), bt);
-  const TypePtr* arr_adr_type = arr_adr->bottom_type()->is_ptr();
-  Node* arr_mem = kit.memory(arr_adr);
-  Node* vstore = gvn.transform(StoreVectorNode::make(0,
-                                                     kit.control(),
-                                                     arr_mem,
-                                                     arr_adr,
-                                                     arr_adr_type,
-                                                     value,
-                                                     num_elem));
-  kit.set_memory(vstore, arr_adr_type);
-
-  C->set_max_vector_size(MAX2(C->max_vector_size(), vect_type->length_in_bytes()));
-
-  // Generate the allocate for the Vector object.
-  const TypeKlassPtr* klass_type = box_type->as_klass_type();
-  Node* klass_node = kit.makecon(klass_type);
-  Node* vec_obj = kit.new_instance(klass_node);
-
-  // Store the allocated array into object.
-  ciField* field = ciEnv::current()->vector_VectorPayload_klass()->get_field_by_name(ciSymbols::payload_name(),
-                                                                                     ciSymbols::object_signature(),
-                                                                                     false);
-  assert(field != NULL, "");
-  Node* vec_field = kit.basic_plus_adr(vec_obj, field->offset_in_bytes());
-  const TypePtr* vec_adr_type = vec_field->bottom_type()->is_ptr();
-
-  // The store should be captured by InitializeNode and turned into initialized store later.
-  Node* field_store = gvn.transform(kit.access_store_at(vec_obj,
-                                                        vec_field,
-                                                        vec_adr_type,
-                                                        arr,
-                                                        TypeOopPtr::make_from_klass(field->type()->as_klass()),
-                                                        T_OBJECT,
-                                                        IN_HEAP));
-  kit.set_memory(field_store, vec_adr_type);
-
-  kit.replace_call(vbox_alloc, vec_obj, true);
-  C->remove_macro_node(vbox_alloc);
-
-  return vec_obj;
-}
-
 Node* PhaseVector::get_loaded_payload(VectorUnboxNode* vec_unbox) {
    Node* obj = vec_unbox->obj();
    while(obj->is_InlineType()) {
diff --git a/src/hotspot/share/opto/vector.hpp b/src/hotspot/share/opto/vector.hpp
index 0c5329027bb..7ce200e7e53 100644
--- a/src/hotspot/share/opto/vector.hpp
+++ b/src/hotspot/share/opto/vector.hpp
@@ -41,16 +41,6 @@ class PhaseVector : public Phase {
                                 Node* vect,
                                 const TypeInstPtr* box_type,
                                 const TypeVect* vect_type);
-  Node* expand_vbox_alloc_node(Node* vbox,
-                               VectorBoxAllocateNode* vbox_alloc,
-                               Node* value,
-                               const TypeInstPtr* box_type,
-                               const TypeVect* vect_type);
-  Node* expand_vbox_alloc_node_mf(Node* vbox,
-                                  VectorBoxAllocateNode* vbox_alloc,
-                                  Node* value,
-                                  const TypeInstPtr* box_type,
-                                  const TypeVect* vect_type);
   Node* get_loaded_payload(VectorUnboxNode* vec_unbox);
 
   void scalarize_vbox_nodes();
diff --git a/src/hotspot/share/opto/vectornode.hpp b/src/hotspot/share/opto/vectornode.hpp
index d2a1e4f9f49..3b76fb3f2bb 100644
--- a/src/hotspot/share/opto/vectornode.hpp
+++ b/src/hotspot/share/opto/vectornode.hpp
@@ -1681,13 +1681,18 @@ class VectorBoxNode : public InlineTypeNode {
   static VectorBoxNode* make_box_node(PhaseGVN& gvn, Compile* C, Node* box, Node* val,
                                       const TypeInstPtr* box_type, const TypeVect* vt) {
     ciInlineKlass* vk = static_cast<ciInlineKlass*>(box_type->inline_klass());
-    VectorBoxNode* box_node = new VectorBoxNode(vk, box, true, vk->is_empty() && vk->is_initialized());
+    ciInlineKlass* payload = vk->declared_nonstatic_field_at(0)->type()->as_inline_klass();
+    Node* payload_oop = payload->is_initialized() ? default_oop(gvn, payload) : gvn.zerocon(T_PRIMITIVE_OBJECT);
+    Node* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, true);
+    payload_value->as_InlineType()->set_field_value(0, val);
+    payload_value = gvn.transform(payload_value);
+    VectorBoxNode* box_node = new VectorBoxNode(vk, box, false, vk->is_empty() && vk->is_initialized());
     box_node->set_is_init(gvn);
     box_node->set_vec_type(vt);
     box_node->set_box_type(box_type);
     box_node->init_flags(Flag_is_macro);
     box_node->init_class_id(Class_VectorBox);
-    box_node->init_req(InlineTypeNode::Values, val);
+    box_node->set_field_value(0, payload_value);
     C->add_macro_node(box_node);
 
     return box_node;
@@ -1695,7 +1700,7 @@ class VectorBoxNode : public InlineTypeNode {
 
   const  TypeInstPtr* box_type() const { assert(_box_type != NULL, ""); return _box_type; };
   const  TypeVect*    vec_type() const { assert(_vec_type != NULL, ""); return _vec_type; };
-  Node*  get_vec() { return field_value(0); }
+  Node*  get_vec() { return field_value(0)->as_InlineType()->field_value(0); }
 
   virtual int Opcode() const;
   virtual const Type* bottom_type() const { return _box_type; }
@@ -1709,6 +1714,7 @@ class VectorBoxAllocateNode : public CallStaticJavaNode {
  public:
   VectorBoxAllocateNode(Compile* C, const TypeInstPtr* vbox_type)
     : CallStaticJavaNode(C, VectorBoxNode::vec_box_type(vbox_type), NULL, NULL) {
+    init_class_id(Class_VectorBoxAllocate);
     init_flags(Flag_is_macro);
     C->add_macro_node(this);
   }
