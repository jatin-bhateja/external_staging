diff --git a/src/hotspot/cpu/x86/x86.ad b/src/hotspot/cpu/x86/x86.ad
index 794230b24bb..648a32165ff 100644
--- a/src/hotspot/cpu/x86/x86.ad
+++ b/src/hotspot/cpu/x86/x86.ad
@@ -3685,7 +3685,7 @@ instruct convF2HF_reg_reg(rRegI dst, vlRegF src, vlRegF tmp) %{
   effect(TEMP tmp);
   match(Set dst (ConvF2HF src));
   ins_cost(125);
-  format %{ "vcvtps2ph $dst,$src \t using $tmp as TEMP"%}
+  format %{ "vcvtps2ph $dst,$src \t! using $tmp as TEMP"%}
   ins_encode %{
     __ flt_to_flt16($dst$$Register, $src$$XMMRegister, $tmp$$XMMRegister);
   %}
@@ -3696,7 +3696,7 @@ instruct convF2HF_mem_reg(memory mem, regF src, kReg ktmp, rRegI rtmp) %{
   predicate((UseAVX > 2) && VM_Version::supports_avx512vl());
   effect(TEMP ktmp, TEMP rtmp);
   match(Set mem (StoreC mem (ConvF2HF src)));
-  format %{ "evcvtps2ph $mem,$src \t using $ktmp and $rtmp as TEMP" %}
+  format %{ "evcvtps2ph $mem,$src \t! using $ktmp and $rtmp as TEMP" %}
   ins_encode %{
     __ movl($rtmp$$Register, 0x1);
     __ kmovwl($ktmp$$KRegister, $rtmp$$Register);
@@ -4069,7 +4069,7 @@ instruct loadV(vec dst, memory mem) %{
 instruct storeV(memory mem, vec src) %{
   match(Set mem (StoreVector mem src));
   ins_cost(145);
-  format %{ "store_vector $mem,$src\n\t" %}
+  format %{ "store_vector $mem,$src" %}
   ins_encode %{
     switch (Matcher::vector_length_in_bytes(this, $src)) {
       case  4: __ movdl    ($mem$$Address, $src$$XMMRegister); break;
@@ -5100,7 +5100,7 @@ instruct reductionI(rRegI dst, rRegI src1, legVec src2, legVec vtmp1, legVec vtm
   match(Set dst (MinReductionV  src1 src2));
   match(Set dst (MaxReductionV  src1 src2));
   effect(TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_int $dst,$src1,$src2 ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_int $dst,$src1,$src2 \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5122,7 +5122,7 @@ instruct reductionL(rRegL dst, rRegL src1, legVec src2, legVec vtmp1, legVec vtm
   match(Set dst (MinReductionV  src1 src2));
   match(Set dst (MaxReductionV  src1 src2));
   effect(TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_long $dst,$src1,$src2 ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_long $dst,$src1,$src2 \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5141,7 +5141,7 @@ instruct reductionL_avx512dq(rRegL dst, rRegL src1, vec src2, vec vtmp1, vec vtm
   match(Set dst (MinReductionV  src1 src2));
   match(Set dst (MaxReductionV  src1 src2));
   effect(TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_long $dst,$src1,$src2 ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_long $dst,$src1,$src2 \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5158,7 +5158,7 @@ instruct reductionF128(regF dst, vec src, vec vtmp) %{
   match(Set dst (AddReductionVF dst src));
   match(Set dst (MulReductionVF dst src));
   effect(TEMP dst, TEMP vtmp);
-  format %{ "vector_reduction_float  $dst,$src ; using $vtmp as TEMP" %}
+  format %{ "vector_reduction_float  $dst,$src \t! using $vtmp as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src);
@@ -5172,7 +5172,7 @@ instruct reduction8F(regF dst, vec src, vec vtmp1, vec vtmp2) %{
   match(Set dst (AddReductionVF dst src));
   match(Set dst (MulReductionVF dst src));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_float $dst,$src ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_float $dst,$src \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src);
@@ -5186,7 +5186,7 @@ instruct reduction16F(regF dst, legVec src, legVec vtmp1, legVec vtmp2) %{
   match(Set dst (AddReductionVF dst src));
   match(Set dst (MulReductionVF dst src));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_float $dst,$src ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_float $dst,$src \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src);
@@ -5221,7 +5221,7 @@ instruct unordered_reduction4F(regF dst, regF src1, vec src2, vec vtmp) %{
   match(Set dst (AddReductionVF src1 src2));
   match(Set dst (MulReductionVF src1 src2));
   effect(TEMP dst, TEMP vtmp);
-  format %{ "vector_reduction_float  $dst,$src1,$src2 ; using $vtmp as TEMP" %}
+  format %{ "vector_reduction_float  $dst,$src1,$src2 \t! using $vtmp as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5238,7 +5238,7 @@ instruct unordered_reduction8F(regF dst, regF src1, vec src2, vec vtmp1, vec vtm
   match(Set dst (AddReductionVF src1 src2));
   match(Set dst (MulReductionVF src1 src2));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_float $dst,$src1,$src2 ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_float $dst,$src1,$src2 \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5255,7 +5255,7 @@ instruct unordered_reduction16F(regF dst, regF src1, legVec src2, legVec vtmp1,
   match(Set dst (AddReductionVF src1 src2));
   match(Set dst (MulReductionVF src1 src2));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_float $dst,$src1,$src2 ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_float $dst,$src1,$src2 \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5271,7 +5271,7 @@ instruct reduction2D(regD dst, vec src, vec vtmp) %{
   match(Set dst (AddReductionVD dst src));
   match(Set dst (MulReductionVD dst src));
   effect(TEMP dst, TEMP vtmp);
-  format %{ "vector_reduction_double $dst,$src ; using $vtmp as TEMP" %}
+  format %{ "vector_reduction_double $dst,$src \t! using $vtmp as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src);
@@ -5285,7 +5285,7 @@ instruct reduction4D(regD dst, vec src, vec vtmp1, vec vtmp2) %{
   match(Set dst (AddReductionVD dst src));
   match(Set dst (MulReductionVD dst src));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_double $dst,$src ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_double $dst,$src \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src);
@@ -5299,7 +5299,7 @@ instruct reduction8D(regD dst, legVec src, legVec vtmp1, legVec vtmp2) %{
   match(Set dst (AddReductionVD dst src));
   match(Set dst (MulReductionVD dst src));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_double $dst,$src ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_double $dst,$src \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src);
@@ -5333,7 +5333,7 @@ instruct unordered_reduction4D(regD dst, regD src1, vec src2, vec vtmp) %{
   match(Set dst (AddReductionVD src1 src2));
   match(Set dst (MulReductionVD src1 src2));
   effect(TEMP dst, TEMP vtmp);
-  format %{ "vector_reduction_double $dst,$src1,$src2 ; using $vtmp as TEMP" %}
+  format %{ "vector_reduction_double $dst,$src1,$src2 \t! using $vtmp as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5350,7 +5350,7 @@ instruct unordered_reduction8D(regD dst, regD src1, legVec src2, legVec vtmp1, l
   match(Set dst (AddReductionVD src1 src2));
   match(Set dst (MulReductionVD src1 src2));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_double $dst,$src1,$src2 ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_double $dst,$src1,$src2 \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5371,7 +5371,7 @@ instruct reductionB(rRegI dst, rRegI src1, legVec src2, legVec vtmp1, legVec vtm
   match(Set dst (MinReductionV  src1 src2));
   match(Set dst (MaxReductionV  src1 src2));
   effect(TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_byte $dst,$src1,$src2 ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_byte $dst,$src1,$src2 \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5389,7 +5389,7 @@ instruct reductionB_avx512bw(rRegI dst, rRegI src1, vec src2, vec vtmp1, vec vtm
   match(Set dst (MinReductionV  src1 src2));
   match(Set dst (MaxReductionV  src1 src2));
   effect(TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_byte $dst,$src1,$src2 ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_byte $dst,$src1,$src2 \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5411,7 +5411,7 @@ instruct reductionS(rRegI dst, rRegI src1, legVec src2, legVec vtmp1, legVec vtm
   match(Set dst (MinReductionV  src1 src2));
   match(Set dst (MaxReductionV  src1 src2));
   effect(TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_reduction_short $dst,$src1,$src2 ; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_reduction_short $dst,$src1,$src2 \t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5427,7 +5427,7 @@ instruct mul_reductionB(rRegI dst, rRegI src1, vec src2, vec vtmp1, vec vtmp2) %
             Matcher::vector_length(n->in(2)) <= 32); // src2
   match(Set dst (MulReductionVI src1 src2));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_mul_reduction_byte $dst,$src1,$src2; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_mul_reduction_byte $dst,$src1,$src2\t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5441,7 +5441,7 @@ instruct mul_reduction64B(rRegI dst, rRegI src1, legVec src2, legVec vtmp1, legV
             Matcher::vector_length(n->in(2)) == 64); // src2
   match(Set dst (MulReductionVI src1 src2));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_mul_reduction_byte $dst,$src1,$src2; using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_mul_reduction_byte $dst,$src1,$src2\t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen = Matcher::vector_length(this, $src2);
@@ -5461,7 +5461,7 @@ instruct minmax_reduction2F(legRegF dst, immF src1, legVec src2, legVec tmp,
   match(Set dst (MinReductionV src1 src2));
   match(Set dst (MaxReductionV src1 src2));
   effect(TEMP dst, TEMP tmp, TEMP atmp, TEMP btmp, TEMP xmm_1, KILL cr);
-  format %{ "vector_minmax2F_reduction $dst,$src1,$src2  ; using $tmp, $atmp, $btmp, $xmm_1 as TEMP" %}
+  format %{ "vector_minmax2F_reduction $dst,$src1,$src2  \t! using $tmp, $atmp, $btmp, $xmm_1 as TEMP" %}
   ins_encode %{
     assert(UseAVX > 0, "sanity");
 
@@ -5482,7 +5482,7 @@ instruct minmax_reductionF(legRegF dst, immF src1, legVec src2, legVec tmp, legV
   match(Set dst (MinReductionV src1 src2));
   match(Set dst (MaxReductionV src1 src2));
   effect(TEMP dst, TEMP tmp, TEMP atmp, TEMP btmp, TEMP xmm_0, TEMP xmm_1, KILL cr);
-  format %{ "vector_minmaxF_reduction $dst,$src1,$src2  ; using $tmp, $atmp, $btmp, $xmm_0, $xmm_1 as TEMP" %}
+  format %{ "vector_minmaxF_reduction $dst,$src1,$src2  \t! using $tmp, $atmp, $btmp, $xmm_0, $xmm_1 as TEMP" %}
   ins_encode %{
     assert(UseAVX > 0, "sanity");
 
@@ -5501,7 +5501,7 @@ instruct minmax_reduction2F_av(legRegF dst, legVec src, legVec tmp,
   match(Set dst (MinReductionV dst src));
   match(Set dst (MaxReductionV dst src));
   effect(TEMP dst, TEMP tmp, TEMP atmp, TEMP btmp, TEMP xmm_1, KILL cr);
-  format %{ "vector_minmax2F_reduction $dst,$src ; using $tmp, $atmp, $btmp, $xmm_1 as TEMP" %}
+  format %{ "vector_minmax2F_reduction $dst,$src \t! using $tmp, $atmp, $btmp, $xmm_1 as TEMP" %}
   ins_encode %{
     assert(UseAVX > 0, "sanity");
 
@@ -5521,7 +5521,7 @@ instruct minmax_reductionF_av(legRegF dst, legVec src, legVec tmp,
   match(Set dst (MinReductionV dst src));
   match(Set dst (MaxReductionV dst src));
   effect(TEMP dst, TEMP tmp, TEMP atmp, TEMP btmp, TEMP xmm_0, TEMP xmm_1, KILL cr);
-  format %{ "vector_minmaxF_reduction $dst,$src ; using $tmp, $atmp, $btmp, $xmm_0, $xmm_1 as TEMP" %}
+  format %{ "vector_minmaxF_reduction $dst,$src \t! using $tmp, $atmp, $btmp, $xmm_0, $xmm_1 as TEMP" %}
   ins_encode %{
     assert(UseAVX > 0, "sanity");
 
@@ -5545,7 +5545,7 @@ instruct minmax_reduction2D(legRegD dst, immD src1, legVec src2,
   match(Set dst (MinReductionV src1 src2));
   match(Set dst (MaxReductionV src1 src2));
   effect(TEMP dst, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, KILL cr);
-  format %{ "vector_minmax2D_reduction $dst,$src1,$src2 ; using $tmp1, $tmp2, $tmp3, $tmp4 as TEMP" %}
+  format %{ "vector_minmax2D_reduction $dst,$src1,$src2 \t! using $tmp1, $tmp2, $tmp3, $tmp4 as TEMP" %}
   ins_encode %{
     assert(UseAVX > 0, "sanity");
 
@@ -5567,7 +5567,7 @@ instruct minmax_reductionD(legRegD dst, immD src1, legVec src2,
   match(Set dst (MinReductionV src1 src2));
   match(Set dst (MaxReductionV src1 src2));
   effect(TEMP dst, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, KILL cr);
-  format %{ "vector_minmaxD_reduction $dst,$src1,$src2 ; using $tmp1, $tmp2, $tmp3, $tmp4, $tmp5 as TEMP" %}
+  format %{ "vector_minmaxD_reduction $dst,$src1,$src2 \t! using $tmp1, $tmp2, $tmp3, $tmp4, $tmp5 as TEMP" %}
   ins_encode %{
     assert(UseAVX > 0, "sanity");
 
@@ -5588,7 +5588,7 @@ instruct minmax_reduction2D_av(legRegD dst, legVec src,
   match(Set dst (MinReductionV dst src));
   match(Set dst (MaxReductionV dst src));
   effect(TEMP dst, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, KILL cr);
-  format %{ "vector_minmax2D_reduction $dst,$src ; using $tmp1, $tmp2, $tmp3, $tmp4 as TEMP" %}
+  format %{ "vector_minmax2D_reduction $dst,$src \t! using $tmp1, $tmp2, $tmp3, $tmp4 as TEMP" %}
   ins_encode %{
     assert(UseAVX > 0, "sanity");
 
@@ -5608,7 +5608,7 @@ instruct minmax_reductionD_av(legRegD dst, legVec src,
   match(Set dst (MinReductionV dst src));
   match(Set dst (MaxReductionV dst src));
   effect(TEMP dst, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, KILL cr);
-  format %{ "vector_minmaxD_reduction $dst,$src ; using $tmp1, $tmp2, $tmp3, $tmp4, $tmp5 as TEMP" %}
+  format %{ "vector_minmaxD_reduction $dst,$src \t! using $tmp1, $tmp2, $tmp3, $tmp4, $tmp5 as TEMP" %}
   ins_encode %{
     assert(UseAVX > 0, "sanity");
 
@@ -7104,7 +7104,7 @@ instruct vshift8B_var_nobw(vec dst, vec src, vec shift, vec vtmp) %{
   match(Set dst ( RShiftVB src shift));
   match(Set dst (URShiftVB src shift));
   effect(TEMP dst, TEMP vtmp);
-  format %{ "vector_varshift_byte $dst, $src, $shift\n\t! using $vtmp as TEMP" %}
+  format %{ "vector_varshift_byte $dst, $src, $shift\t! using $vtmp as TEMP" %}
   ins_encode %{
     assert(UseAVX >= 2, "required");
 
@@ -7124,7 +7124,7 @@ instruct vshift16B_var_nobw(vec dst, vec src, vec shift, vec vtmp1, vec vtmp2) %
   match(Set dst ( RShiftVB src shift));
   match(Set dst (URShiftVB src shift));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_varshift_byte $dst, $src, $shift\n\t! using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_varshift_byte $dst, $src, $shift\t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     assert(UseAVX >= 2, "required");
 
@@ -7152,7 +7152,7 @@ instruct vshift32B_var_nobw(vec dst, vec src, vec shift, vec vtmp1, vec vtmp2, v
   match(Set dst ( RShiftVB src shift));
   match(Set dst (URShiftVB src shift));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2, TEMP vtmp3, TEMP vtmp4);
-  format %{ "vector_varshift_byte $dst, $src, $shift\n\t using $vtmp1, $vtmp2, $vtmp3, $vtmp4 as TEMP" %}
+  format %{ "vector_varshift_byte $dst, $src, $shift\t! using $vtmp1, $vtmp2, $vtmp3, $vtmp4 as TEMP" %}
   ins_encode %{
     assert(UseAVX >= 2, "required");
 
@@ -7188,7 +7188,7 @@ instruct vshiftB_var_evex_bw(vec dst, vec src, vec shift, vec vtmp) %{
   match(Set dst ( RShiftVB src shift));
   match(Set dst (URShiftVB src shift));
   effect(TEMP dst, TEMP vtmp);
-  format %{ "vector_varshift_byte $dst, $src, $shift\n\t! using $vtmp as TEMP" %}
+  format %{ "vector_varshift_byte $dst, $src, $shift\t! using $vtmp as TEMP" %}
   ins_encode %{
     assert(UseAVX > 2, "required");
 
@@ -7207,7 +7207,7 @@ instruct vshift64B_var_evex_bw(vec dst, vec src, vec shift, vec vtmp1, vec vtmp2
   match(Set dst ( RShiftVB src shift));
   match(Set dst (URShiftVB src shift));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_varshift_byte $dst, $src, $shift\n\t! using $vtmp1, $vtmp2 as TEMP" %}
+  format %{ "vector_varshift_byte $dst, $src, $shift\t! using $vtmp1, $vtmp2 as TEMP" %}
   ins_encode %{
     assert(UseAVX > 2, "required");
 
@@ -7231,7 +7231,7 @@ instruct vshift8S_var_nobw(vec dst, vec src, vec shift, vec vtmp) %{
   match(Set dst ( RShiftVS src shift));
   match(Set dst (URShiftVS src shift));
   effect(TEMP dst, TEMP vtmp);
-  format %{ "vector_var_shift_left_short $dst, $src, $shift\n\t" %}
+  format %{ "vector_var_shift_left_short $dst, $src, $shift" %}
   ins_encode %{
     assert(UseAVX >= 2, "required");
 
@@ -7256,7 +7256,7 @@ instruct vshift16S_var_nobw(vec dst, vec src, vec shift, vec vtmp1, vec vtmp2) %
   match(Set dst ( RShiftVS src shift));
   match(Set dst (URShiftVS src shift));
   effect(TEMP dst, TEMP vtmp1, TEMP vtmp2);
-  format %{ "vector_var_shift_left_short $dst, $src, $shift\n\t" %}
+  format %{ "vector_var_shift_left_short $dst, $src, $shift" %}
   ins_encode %{
     assert(UseAVX >= 2, "required");
 
@@ -7344,7 +7344,7 @@ instruct vshiftL_arith_var(vec dst, vec src, vec shift, vec vtmp) %{
             UseAVX == 2);
   match(Set dst (RShiftVL src shift));
   effect(TEMP dst, TEMP vtmp);
-  format %{ "vector_varshift_long  $dst,$src,$shift\n\t! using $vtmp as TEMP" %}
+  format %{ "vector_varshift_long  $dst,$src,$shift\t! using $vtmp as TEMP" %}
   ins_encode %{
     int opcode = this->ideal_Opcode();
     int vlen_enc = vector_length_encoding(this);
@@ -8474,7 +8474,7 @@ instruct vptest_lt16(rFlagsRegU cr, legVec src1, legVec src2, legVec vtmp) %{
 instruct vptest_ge16(rFlagsRegU cr, legVec src1, legVec src2) %{
   predicate(Matcher::vector_length_in_bytes(n->in(1)) >= 16);
   match(Set cr (VectorTest src1 src2));
-  format %{ "vptest_ge16  $src1, $src2\n\t" %}
+  format %{ "vptest_ge16  $src1, $src2" %}
   ins_encode %{
     BasicType bt = Matcher::vector_element_basic_type(this, $src1);
     int vlen = Matcher::vector_length_in_bytes(this, $src1);
@@ -8518,7 +8518,7 @@ instruct ktest_ge8(rFlagsRegU cr, kReg src1, kReg src2) %{
   predicate(Matcher::vector_length(n->in(1)) >= 16 ||
             (Matcher::vector_length(n->in(1)) == 8 && VM_Version::supports_avx512dq()));
   match(Set cr (VectorTest src1 src2));
-  format %{ "ktest_ge8  $src1, $src2\n\t" %}
+  format %{ "ktest_ge8  $src1, $src2" %}
   ins_encode %{
     uint masklen = Matcher::vector_length(this, $src1);
     __ kortest(masklen, $src1$$KRegister, $src1$$KRegister);
@@ -8533,7 +8533,7 @@ instruct loadMask(legVec dst, legVec src) %{
   predicate(n->bottom_type()->isa_vectmask() == nullptr && !VM_Version::supports_avx512vlbw());
   match(Set dst (VectorLoadMask src));
   effect(TEMP dst);
-  format %{ "vector_loadmask_byte $dst, $src\n\t" %}
+  format %{ "vector_loadmask_byte $dst, $src" %}
   ins_encode %{
     int vlen_in_bytes = Matcher::vector_length_in_bytes(this);
     BasicType elem_bt = Matcher::vector_element_basic_type(this);
@@ -8863,7 +8863,7 @@ instruct rearrangeB_evex(vec dst, vec src, vec shuffle, vec xtmp1, vec xtmp2, ve
             Matcher::vector_length(n) > 32 && !VM_Version::supports_avx512_vbmi());
   match(Set dst (VectorRearrange src shuffle));
   effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP ktmp, TEMP rtmp);
-  format %{ "vector_rearrange $dst, $shuffle, $src!\t using $xtmp1, $xtmp2, $xtmp3, $rtmp and $ktmp as TEMP" %}
+  format %{ "vector_rearrange $dst, $shuffle, $src\t! using $xtmp1, $xtmp2, $xtmp3, $rtmp and $ktmp as TEMP" %}
   ins_encode %{
     int vlen_enc = vector_length_encoding(this);
     __ rearrange_bytes($dst$$XMMRegister, $shuffle$$XMMRegister, $src$$XMMRegister,
@@ -9281,7 +9281,7 @@ instruct vcount_trailing_zeros_reg_evex(vec dst, vec src, vec xtmp, rRegP rtmp)
   match(Set dst (CountTrailingZerosV src));
   effect(TEMP dst, TEMP xtmp, TEMP rtmp);
   ins_cost(400);
-  format %{ "vector_count_trailing_zeros $dst, $src!\t using $xtmp and $rtmp as TEMP" %}
+  format %{ "vector_count_trailing_zeros $dst, $src\t! using $xtmp and $rtmp as TEMP" %}
   ins_encode %{
     int vlen_enc = vector_length_encoding(this, $src);
     BasicType bt = Matcher::vector_element_basic_type(this, $src);
@@ -9298,7 +9298,7 @@ instruct vcount_trailing_zeros_short_reg_evex(vec dst, vec src, vec xtmp1, vec x
   match(Set dst (CountTrailingZerosV src));
   effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp);
   ins_cost(400);
-  format %{ "vector_count_trailing_zeros $dst, $src!\t using $xtmp1, $xtmp2, $xtmp3 and $rtmp as TEMP" %}
+  format %{ "vector_count_trailing_zeros $dst, $src\t! using $xtmp1, $xtmp2, $xtmp3 and $rtmp as TEMP" %}
   ins_encode %{
     int vlen_enc = vector_length_encoding(this, $src);
     BasicType bt = Matcher::vector_element_basic_type(this, $src);
@@ -9313,7 +9313,7 @@ instruct vcount_trailing_zeros_byte_reg_evex(vec dst, vec src, vec xtmp1, vec xt
   match(Set dst (CountTrailingZerosV src));
   effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP xtmp4, TEMP ktmp, TEMP rtmp);
   ins_cost(400);
-  format %{ "vector_count_trailing_zeros $dst, $src!\t using $xtmp1, $xtmp2, $xtmp3, $xtmp4, $ktmp and $rtmp as TEMP" %}
+  format %{ "vector_count_trailing_zeros $dst, $src\t! using $xtmp1, $xtmp2, $xtmp3, $xtmp4, $ktmp and $rtmp as TEMP" %}
   ins_encode %{
     int vlen_enc = vector_length_encoding(this, $src);
     BasicType bt = Matcher::vector_element_basic_type(this, $src);
@@ -9709,7 +9709,7 @@ instruct vreverse_reg(vec dst, vec src, vec xtmp1, vec xtmp2, rRegI rtmp) %{
   predicate(!VM_Version::supports_gfni());
   match(Set dst (ReverseV src));
   effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP rtmp);
-  format %{ "vector_reverse_bit_evex $dst, $src!\t using $xtmp1, $xtmp2 and $rtmp as TEMP" %}
+  format %{ "vector_reverse_bit_evex $dst, $src\t! using $xtmp1, $xtmp2 and $rtmp as TEMP" %}
   ins_encode %{
     int vec_enc = vector_length_encoding(this);
     BasicType bt = Matcher::vector_element_basic_type(this);
@@ -9723,7 +9723,7 @@ instruct vreverse_reg_gfni(vec dst, vec src, vec xtmp) %{
   predicate(VM_Version::supports_gfni());
   match(Set dst (ReverseV src));
   effect(TEMP dst, TEMP xtmp);
-  format %{ "vector_reverse_bit_gfni $dst, $src!\t using $xtmp as TEMP" %}
+  format %{ "vector_reverse_bit_gfni $dst, $src\t! using $xtmp as TEMP" %}
   ins_encode %{
     int vec_enc = vector_length_encoding(this);
     BasicType bt  = Matcher::vector_element_basic_type(this);
@@ -9751,7 +9751,7 @@ instruct vreverse_byte64_reg(vec dst, vec src, vec xtmp1, vec xtmp2, rRegI rtmp)
   predicate(!VM_Version::supports_avx512bw() && Matcher::vector_length_in_bytes(n) == 64);
   match(Set dst (ReverseBytesV src));
   effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP rtmp);
-  format %{ "vector_reverse_byte $dst, $src!\t using $xtmp1, $xtmp2 and $rtmp as TEMP" %}
+  format %{ "vector_reverse_byte $dst, $src\t! using $xtmp1, $xtmp2 and $rtmp as TEMP" %}
   ins_encode %{
     int vec_enc = vector_length_encoding(this);
     BasicType bt = Matcher::vector_element_basic_type(this);
@@ -9798,7 +9798,7 @@ instruct vcount_leading_zeros_short_reg_evex(vec dst, vec src, vec xtmp1, vec xt
             (VM_Version::supports_avx512vl() || Matcher::vector_length_in_bytes(n) == 64));
   match(Set dst (CountLeadingZerosV src));
   effect(TEMP dst, TEMP xtmp1, TEMP xtmp2);
-  format %{ "vector_count_leading_zeros $dst, $src!\t using $xtmp1 and $xtmp2 as TEMP" %}
+  format %{ "vector_count_leading_zeros $dst, $src\t! using $xtmp1 and $xtmp2 as TEMP" %}
   ins_encode %{
     int vlen_enc = vector_length_encoding(this, $src);
     BasicType bt = Matcher::vector_element_basic_type(this, $src);
@@ -9812,7 +9812,7 @@ instruct vcount_leading_zeros_byte_reg_evex(vec dst, vec src, vec xtmp1, vec xtm
   predicate(Matcher::vector_element_basic_type(n->in(1)) == T_BYTE && VM_Version::supports_avx512vlbw());
   match(Set dst (CountLeadingZerosV src));
   effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP ktmp, TEMP rtmp);
-  format %{ "vector_count_leading_zeros $dst, $src!\t using $xtmp1, $xtmp2, $xtmp3, $ktmp and $rtmp as TEMP" %}
+  format %{ "vector_count_leading_zeros $dst, $src\t! using $xtmp1, $xtmp2, $xtmp3, $ktmp and $rtmp as TEMP" %}
   ins_encode %{
     int vlen_enc = vector_length_encoding(this, $src);
     BasicType bt = Matcher::vector_element_basic_type(this, $src);
