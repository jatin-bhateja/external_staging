diff --git a/src/hotspot/share/opto/compile.cpp b/src/hotspot/share/opto/compile.cpp
index 6382608f36a..9489886bedc 100644
--- a/src/hotspot/share/opto/compile.cpp
+++ b/src/hotspot/share/opto/compile.cpp
@@ -3161,6 +3161,60 @@ void Compile::final_graph_reshaping_impl(Node *n, Final_Reshape_Counts& frc, Uni
   }
 }

+void Compile::handle_constrained_quadword_multiplication(Node* n) {
+  if (Matcher::supports_doubleword_mult_with_quadword_staturation() &&
+      !n->as_MulVL()->is_mult_lower_double_word()) {
+    auto is_clear_upper_doubleword_uright_shift_pattern = [](const Node* n) {
+      return n->Opcode() == Op_URShiftVL &&
+             n->in(2)->Opcode() == Op_RShiftCntV && n->in(2)->in(1)->is_Con() &&
+             n->in(2)->in(1)->bottom_type()->isa_int() &&
+             n->in(2)->in(1)->bottom_type()->is_int()->get_con() == 32;
+    };
+
+    auto is_lower_doubleword_mask_pattern = [](const Node* n) {
+      if (n->Opcode() == Op_AndV) {
+        Node* replicate_operand = n->in(1)->Opcode() == Op_Replicate ? n->in(1)
+                                  : n->in(2)->Opcode() == Op_Replicate ? n->in(2) : nullptr;
+        if (replicate_operand) {
+          return replicate_operand->in(1)->is_Con() &&
+                 replicate_operand->in(1)->bottom_type()->isa_long() &&
+                 replicate_operand->in(1)->bottom_type()->is_long()->get_con() == 4294967295L;
+        } else {
+          return false; // Replication match failed
+        }
+      } else {
+        return false; // AndV match failed
+      }
+    };
+
+    auto is_cast_integer_to_long_pattern = [](const Node* n) {
+      return n->Opcode() == Op_VectorCastI2X && Matcher::vector_element_basic_type(n) == T_LONG;
+    };
+
+    // Detect following IR pattern for doubleword unsigned multiplication with quadword
+    // satuation.
+    // MulVL (AndV  SRC1,  0xFFFFFFFF)   (AndV  SRC2,  0xFFFFFFFF)
+    // MulVL (URShiftV SRC1 , 32) (URShiftV SRC2, 32)
+    // MulVL (URShiftV SRC1 , 32)  (AndV  SRC2,  0xFFFFFFFF)
+    // MulVL (AndV  SRC1,  0xFFFFFFFF) (URShiftV SRC2 , 32)
+    if ((is_lower_doubleword_mask_pattern(n->in(1)) ||
+         is_clear_upper_doubleword_uright_shift_pattern(n->in(1)))
+      && (is_clear_upper_doubleword_uright_shift_pattern(n->in(2)) ||
+          is_lower_doubleword_mask_pattern(n->in(2)))) {
+      n->subsume_by(new MulVLNode(n->in(1), n->in(2), n->bottom_type()->is_vect(), false, true), this);
+      return;
+    }
+
+    // Detect following IR pattern for doubleword signed multiplication with quadword
+    // satuation.
+    // MulVL (VectorCastI2X src1) (VectorCastI2X src2)
+    if (is_cast_integer_to_long_pattern(n->in(1)) || is_cast_integer_to_long_pattern(n->in(2))) {
+      n->subsume_by(new MulVLNode(n->in(1), n->in(2), n->bottom_type()->is_vect(), true, true), this);
+      return;
+    }
+  }
+}
+
 void Compile::handle_div_mod_op(Node* n, BasicType bt, bool is_unsigned) {
   if (!UseDivMod) {
     return;
@@ -3649,6 +3703,9 @@ void Compile::final_graph_reshaping_main_switch(Node* n, Final_Reshape_Counts& f
     handle_div_mod_op(n, T_LONG, true);
     break;

+  case Op_MulVL:
+    handle_constrained_quadword_multiplication(n);
+    break;
   case Op_LoadVector:
   case Op_StoreVector:
 #ifdef ASSERT
