diff --git a/configure b/configure
old mode 100644
new mode 100755
diff --git a/src/hotspot/share/opto/graphKit.cpp b/src/hotspot/share/opto/graphKit.cpp
index 0935086077c..74acf6bcd5e 100644
--- a/src/hotspot/share/opto/graphKit.cpp
+++ b/src/hotspot/share/opto/graphKit.cpp
@@ -1954,15 +1954,6 @@ Node* GraphKit::set_results_for_java_call(CallJavaNode* call, bool separate_io_p
       if (type->is_inlinetypeptr()) {
         ret = InlineTypeNode::make_from_oop(this, ret, type->inline_klass(), type->inline_klass()->is_null_free());
       }
-      Node* receiver = !call->method()->is_static() ? call->in(TypeFunc::Parms) : nullptr;
-      if (ret->is_InlineType() &&
-          receiver && receiver->bottom_type()->isa_instptr() &&
-          receiver->bottom_type()->is_instptr()->instance_klass()->name()->get_symbol() == vmSymbols::jdk_internal_misc_Unsafe() &&
-          call->method()->name()->get_symbol() == vmSymbols::makePrivateBuffer_name()) {
-        // Re-buffer scalarized InlineTypeNodes returned from makePrivateBuffer
-        // and transition the allocation into larval state.
-        ret = ret->as_InlineType()->make_larval(this);
-      }
     }
   }
 
@@ -3083,6 +3074,23 @@ Node* GraphKit::type_check_receiver(Node* receiver, ciKlass* klass,
       Node* cast = new CheckCastPPNode(control(), receiver, recv_xtype);
       Node* res = _gvn.transform(cast);
       if (recv_xtype->is_inlinetypeptr()) {
+        // De-optimize if receiver is a value object in larval state.
+        Node* mark_addr = basic_plus_adr(res, oopDesc::mark_offset_in_bytes());
+        Node* mark = make_load(nullptr, mark_addr, TypeX_X, TypeX_X->basic_type(), MemNode::unordered);
+        mark = _gvn.transform(new AndXNode(mark, MakeConX(markWord::larval_bit_in_place)));
+        Node* cmp = _gvn.transform(new CmpXNode(mark, MakeConX(0)));
+        Node* bol = _gvn.transform(new BoolNode(cmp, BoolTest::ne));
+
+        IfNode* iff =  create_and_xform_if(control(), bol, PROB_MIN, COUNT_UNKNOWN);
+        Node* larval_path = _gvn.transform(new IfTrueNode(iff));
+        Node* scalarize_path = _gvn.transform(new IfFalseNode(iff));
+        {
+           PreserveJVMState pjvms(this);
+           set_control(larval_path);
+           uncommon_trap(Deoptimization::Reason_lraval_state_param,
+                         Deoptimization::Action_none);
+        }
+        set_control(scalarize_path);
         assert(!gvn().type(res)->maybe_null(), "receiver should never be null");
         res = InlineTypeNode::make_from_oop(this, res, recv_xtype->inline_klass());
       }
diff --git a/src/hotspot/share/opto/library_call.cpp b/src/hotspot/share/opto/library_call.cpp
index 1120ca7a934..50724925044 100644
--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -2331,17 +2331,6 @@ bool LibraryCallKit::inline_unsafe_access(bool is_store, const BasicType type, c
   assert(Unsafe_field_offset_to_byte_offset(11) == 11,
          "fieldOffset must be byte-scaled");
 
-  if (_gvn.type(base)->is_inlinetypeptr() && is_store) {
-    // FIXME: Larval bit check is needed to preserve the semantics of value
-    // objects which can be mutated only if its _larval bit is set. Since
-    // the oop is not always an AllocateNode, we have to find an utility way
-    // to check the larval state for all kind of oops.
-    AllocateNode* alloc = AllocateNode::Ideal_allocation(base);
-    if (alloc != nullptr) {
-      assert(alloc->_larval, "InlineType instance must be in _larval state for unsafe put operation.\n");
-    }
-  }
-
   ciInlineKlass* inline_klass = nullptr;
   if (is_flat) {
     const TypeInstPtr* cls = _gvn.type(argument(4))->isa_instptr();
@@ -2369,7 +2358,6 @@ bool LibraryCallKit::inline_unsafe_access(bool is_store, const BasicType type, c
         if ((long)(int)off != off || !vk->contains_field_offset(off)) {
           return false;
         }
-
         // Skip over direct field access for VectorPayloadMF* class instances since
         // multifield is loaded into vector, alternatively we can create a lane
         // extraction logic. Given that unsafe put operations over vector payloads are part
@@ -2624,7 +2612,6 @@ bool LibraryCallKit::inline_unsafe_access(bool is_store, const BasicType type, c
     }
   }
 
-
   return true;
 }
 
diff --git a/src/hotspot/share/runtime/deoptimization.cpp b/src/hotspot/share/runtime/deoptimization.cpp
index 27db1782835..a9a324b8b54 100644
--- a/src/hotspot/share/runtime/deoptimization.cpp
+++ b/src/hotspot/share/runtime/deoptimization.cpp
@@ -2812,6 +2812,7 @@ const char* Deoptimization::_trap_reason_name[] = {
   "unresolved",
   "jsr_mismatch",
 #endif
+  "lraval_state_param",
   "tenured"
 };
 const char* Deoptimization::_trap_action_name[] = {
diff --git a/src/hotspot/share/runtime/deoptimization.hpp b/src/hotspot/share/runtime/deoptimization.hpp
index 7ecd87f5028..cbd34b08576 100644
--- a/src/hotspot/share/runtime/deoptimization.hpp
+++ b/src/hotspot/share/runtime/deoptimization.hpp
@@ -124,6 +124,7 @@ class Deoptimization : AllStatic {
     Reason_unresolved,
     Reason_jsr_mismatch,
 #endif
+    Reason_lraval_state_param,   // suppress scalarization for incoming larval parameters.
 
     // Used to define MethodData::_trap_hist_limit where Reason_tenured isn't included
     Reason_TRAP_HISTORY_LENGTH,
@@ -152,7 +153,7 @@ class Deoptimization : AllStatic {
 
   enum {
     _action_bits = 3,
-    _reason_bits = 5,
+    _reason_bits = 6,
     _debug_id_bits = 23,
     _action_shift = 0,
     _reason_shift = _action_shift+_action_bits,
@@ -207,7 +208,6 @@ class Deoptimization : AllStatic {
   static void reassign_object_array_elements(frame* fr, RegisterMap* reg_map, ObjectValue* sv, objArrayOop obj);
   static void reassign_flat_array_elements(frame* fr, RegisterMap* reg_map, ObjectValue* sv, flatArrayOop obj, FlatArrayKlass* vak, bool skip_internal, TRAPS);
   static void reassign_fields(frame* fr, RegisterMap* reg_map, GrowableArray<ScopeValue*>* objects, bool realloc_failures, bool skip_internal, TRAPS);
-
   static bool relock_objects(JavaThread* thread, GrowableArray<MonitorInfo*>* monitors,
                              JavaThread* deoptee_thread, frame& fr, int exec_mode, bool realloc_failures);
   static void pop_frames_failed_reallocs(JavaThread* thread, vframeArray* array);
