diff --git a/src/hotspot/os/linux/os_linux.cpp b/src/hotspot/os/linux/os_linux.cpp
index cd0fd06f4e1..d9f0d2b9a11 100644
--- a/src/hotspot/os/linux/os_linux.cpp
+++ b/src/hotspot/os/linux/os_linux.cpp
@@ -3482,25 +3482,6 @@ bool os::Linux::hugetlbfs_sanity_check(bool warn, size_t page_size) {
     // Mapping succeeded, sanity check passed.
     munmap(p, page_size);
     return true;
-  } else {
-      log_info(pagesize)("Large page size (" SIZE_FORMAT "%s) failed sanity check, "
-                         "checking if smaller large page sizes are usable",
-                         byte_size_in_exact_unit(page_size),
-                         exact_unit_for_byte_size(page_size));
-      for (size_t page_size_ = _page_sizes.next_smaller(page_size);
-          page_size_ != (size_t)os::vm_page_size();
-          page_size_ = _page_sizes.next_smaller(page_size_)) {
-        flags = MAP_ANONYMOUS | MAP_PRIVATE | MAP_HUGETLB | hugetlbfs_page_size_flag(page_size_);
-        p = mmap(NULL, page_size_, PROT_READ|PROT_WRITE, flags, -1, 0);
-        if (p != MAP_FAILED) {
-          // Mapping succeeded, sanity check passed.
-          munmap(p, page_size_);
-          log_info(pagesize)("Large page size (" SIZE_FORMAT "%s) passed sanity check",
-                             byte_size_in_exact_unit(page_size_),
-                             exact_unit_for_byte_size(page_size_));
-          return true;
-        }
-      }
   }
 
   if (warn) {
@@ -3654,7 +3635,7 @@ void warn_no_large_pages_configured() {
   }
 }
 
-bool os::Linux::setup_large_page_type(size_t page_size) {
+bool os::Linux::large_page_sanity_check(size_t page_size) {
   if (FLAG_IS_DEFAULT(UseHugeTLBFS) &&
       FLAG_IS_DEFAULT(UseSHM) &&
       FLAG_IS_DEFAULT(UseTransparentHugePages)) {
@@ -3700,6 +3681,25 @@ bool os::Linux::setup_large_page_type(size_t page_size) {
   return false;
 }
 
+bool os::Linux::setup_large_page(size_t page_size) {
+  int flags = MAP_ANONYMOUS | MAP_PRIVATE | MAP_HUGETLB | hugetlbfs_page_size_flag(page_size);
+  void *p = mmap(NULL, page_size, PROT_READ|PROT_WRITE, flags, -1, 0);
+  if (p != MAP_FAILED) {
+    // Mapping succeeded, sanity check passed.
+    log_info(pagesize)("Large page size (" SIZE_FORMAT "%s) passed sanity check",
+                        byte_size_in_exact_unit(page_size),
+                        exact_unit_for_byte_size(page_size));
+    munmap(p, page_size);
+    return true;
+  }
+  log_info(pagesize)("Large page size (" SIZE_FORMAT "%s) failed sanity check, "
+                     "checking if smaller large page sizes are usable",
+                     byte_size_in_exact_unit(page_size),
+                     exact_unit_for_byte_size(page_size));
+  return false;
+}
+
+
 void os::large_page_init() {
   // 1) Handle the case where we do not want to use huge pages and hence
   //    there is no need to scan the OS for related info
@@ -3773,8 +3773,15 @@ void os::large_page_init() {
 
   // Populate _page_sizes with large page sizes less than or equal to
   // _large_page_size.
+  bool large_page_found = false;
   for (size_t page_size = _large_page_size; page_size != 0;
          page_size = all_large_pages.next_smaller(page_size)) {
+    if (!large_page_found &&
+        page_size != (size_t)os::vm_page_size() &&
+        os::Linux::setup_large_page(page_size)) {
+      _large_page_size = page_size;
+      large_page_found = true;
+    }
     _page_sizes.add(page_size);
   }
 
@@ -3786,7 +3793,7 @@ void os::large_page_init() {
   }
 
   // Now determine the type of large pages to use:
-  UseLargePages = os::Linux::setup_large_page_type(_large_page_size);
+  UseLargePages = os::Linux::large_page_sanity_check(_large_page_size);
 
   set_coredump_filter(LARGEPAGES_BIT);
 }
diff --git a/src/hotspot/os/linux/os_linux.hpp b/src/hotspot/os/linux/os_linux.hpp
index 692dae042ab..253b670279b 100644
--- a/src/hotspot/os/linux/os_linux.hpp
+++ b/src/hotspot/os/linux/os_linux.hpp
@@ -81,7 +81,9 @@ class Linux {
   static size_t scan_default_large_page_size();
   static os::PageSizes scan_multiple_page_support();
 
-  static bool setup_large_page_type(size_t page_size);
+  static bool large_page_sanity_check(size_t page_size);
+  static bool setup_large_page(size_t page_size);
+
   static bool transparent_huge_pages_sanity_check(bool warn, size_t pages_size);
   static bool hugetlbfs_sanity_check(bool warn, size_t page_size);
   static bool shm_hugetlbfs_sanity_check(bool warn, size_t page_size);
