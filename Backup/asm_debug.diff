diff --git a/src/hotspot/cpu/x86/assembler_x86.cpp b/src/hotspot/cpu/x86/assembler_x86.cpp
index 55caae6fe32..9c7bc913671 100644
--- a/src/hotspot/cpu/x86/assembler_x86.cpp
+++ b/src/hotspot/cpu/x86/assembler_x86.cpp
@@ -5894,6 +5894,71 @@ void Assembler::evpunpckhqdq(XMMRegister dst, KRegister mask, XMMRegister src1,
   emit_int16(0x6D, (0xC0 | encode));
 }
 
+void Assembler::push2(Register src1, Register src2, bool with_ppx) {
+  InstructionAttr attributes(0, /* rex_w */ with_ppx, /* legacy_mode */ false, /* no_mask_reg */ true, /* uses_vl */ false);
+  /* EVEX.BASE */
+  int src_enc = src1->encoding();
+  /* EVEX.VVVV */
+  int nds_enc = src2->encoding();
+
+  bool vex_b = (src_enc & 8) == 8;
+  bool evex_v = (nds_enc >= 16);
+  bool evex_b = (src_enc >= 16);
+
+  // EVEX.ND = 1;
+  attributes.set_extended_context();
+  attributes.set_is_evex_instruction();
+  attributes.set_print_encoding();
+  set_attributes(&attributes);
+
+  if (_attributes->get_print_encoding()) {
+     tty->print(" %s ", __PRETTY_FUNCTION__);
+  }
+
+  evex_prefix(0, vex_b, 0, 0, evex_b, evex_v, false /*eevex_x*/, nds_enc, VEX_SIMD_NONE, /* map4 */ VEX_OPCODE_0F_3C);
+  if (_attributes->get_print_encoding()) {
+     tty->print(" %x ", 0xFF);
+     tty->print(" %x \n", ((0xC0 | (0x6 << 3) | (src_enc & 7))));
+  }
+  emit_int16(0xFF, (0xC0 | (0x6 << 3) | (src_enc & 7)));
+}
+
+void Assembler::pop2(Register src1, Register src2, bool with_ppx) {
+  InstructionAttr attributes(0, /* rex_w */ with_ppx, /* legacy_mode */ false, /* no_mask_reg */ true, /* uses_vl */ false);
+  /* EVEX.BASE */
+  int src_enc = src1->encoding();
+  /* EVEX.VVVV */
+  int nds_enc = src2->encoding();
+
+  bool vex_b = (src_enc & 8) == 8;
+  bool evex_v = (nds_enc >= 16);
+  bool evex_b = (src_enc >= 16);
+
+  // EVEX.ND = 1;
+  attributes.set_extended_context();
+  attributes.set_is_evex_instruction();
+  attributes.set_print_encoding();
+  set_attributes(&attributes);
+
+  if (_attributes->get_print_encoding()) {
+     tty->print(" %s ", __PRETTY_FUNCTION__);
+  }
+  evex_prefix(0, vex_b, 0, 0, evex_b, evex_v, false /*eevex_x*/, nds_enc, VEX_SIMD_NONE, /* map4 */ VEX_OPCODE_0F_3C);
+  if (_attributes->get_print_encoding()) {
+     tty->print(" %x ", 0x8F);
+     tty->print(" %x \n", (0xC0 | (src_enc & 7)));
+  }
+  emit_int16(0x8F, (0xC0 | (src_enc & 7)));
+}
+
+void Assembler::push2p(Register src1, Register src2) {
+   push2(src1, src2, true);
+}
+
+void Assembler::pop2p(Register src1, Register src2) {
+   pop2(src1, src2, true);
+}
+
 void Assembler::push(int32_t imm32) {
   // in 64bits we push 64bits onto the stack but only
   // take a 32bit immediate
@@ -5906,6 +5971,11 @@ void Assembler::push(Register src) {
   emit_int8(0x50 | encode);
 }
 
+void Assembler::pushp(Register src) {
+  int encode = prefixq_and_encode_rex2(src->encoding());
+  emit_int8(0x50 | encode);
+}
+
 void Assembler::pushf() {
   emit_int8((unsigned char)0x9C);
 }
@@ -11810,6 +11880,9 @@ void Assembler::evex_prefix(bool vex_r, bool vex_b, bool vex_x, bool evex_r, boo
     byte4 |= (_attributes->is_clear_context() ? EVEX_Z : 0);
   }
 
+  if (_attributes->get_print_encoding()) {
+     tty->print("Inst Encoding: %x %x %x %x ", EVEX_4bytes, byte2, byte3, byte4);
+  }
   emit_int32(EVEX_4bytes, byte2, byte3, byte4);
 }
 
@@ -14140,6 +14213,11 @@ void Assembler::popq(Address dst) {
   emit_operand(rax, dst, 0);
 }
 
+void Assembler::popp(Register dst) {
+  int encode = prefixq_and_encode_rex2(dst->encoding());
+  emit_int8((unsigned char)0x58 | encode);
+}
+
 void Assembler::popq(Register dst) {
   int encode = prefix_and_encode(dst->encoding());
   emit_int8((unsigned char)0x58 | encode);
@@ -14218,41 +14296,25 @@ void Assembler::popa() { // 64bit
 
 void Assembler::popa_uncached() { // 64bit
   if (UseAPX) {
-    movq(r31, Address(rsp, 0));
-    movq(r30, Address(rsp, wordSize));
-    movq(r29, Address(rsp, 2 * wordSize));
-    movq(r28, Address(rsp, 3 * wordSize));
-    movq(r27, Address(rsp, 4 * wordSize));
-    movq(r26, Address(rsp, 5 * wordSize));
-    movq(r25, Address(rsp, 6 * wordSize));
-    movq(r24, Address(rsp, 7 * wordSize));
-    movq(r23, Address(rsp, 8 * wordSize));
-    movq(r22, Address(rsp, 9 * wordSize));
-    movq(r21, Address(rsp, 10 * wordSize));
-    movq(r20, Address(rsp, 11 * wordSize));
-    movq(r19, Address(rsp, 12 * wordSize));
-    movq(r18, Address(rsp, 13 * wordSize));
-    movq(r17, Address(rsp, 14 * wordSize));
-    movq(r16, Address(rsp, 15 * wordSize));
-    movq(r15, Address(rsp, 16 * wordSize));
-    movq(r14, Address(rsp, 17 * wordSize));
-    movq(r13, Address(rsp, 18 * wordSize));
-    movq(r12, Address(rsp, 19 * wordSize));
-    movq(r11, Address(rsp, 20 * wordSize));
-    movq(r10, Address(rsp, 21 * wordSize));
-    movq(r9,  Address(rsp, 22 * wordSize));
-    movq(r8,  Address(rsp, 23 * wordSize));
-    movq(rdi, Address(rsp, 24 * wordSize));
-    movq(rsi, Address(rsp, 25 * wordSize));
-    movq(rbp, Address(rsp, 26 * wordSize));
-    // Skip rsp as it is restored automatically to the value
-    // before the corresponding pusha when popa is done.
-    movq(rbx, Address(rsp, 28 * wordSize));
-    movq(rdx, Address(rsp, 29 * wordSize));
-    movq(rcx, Address(rsp, 30 * wordSize));
-    movq(rax, Address(rsp, 31 * wordSize));
-
-    addq(rsp, 32 * wordSize);
+    popp(rax);
+    // Skip rsp as the value is normally not used. There are a few places where
+    // the original value of rsp needs to be known but that can be computed
+    // from the value of rsp immediately after pusha (rsp + 16 * wordSize).
+    pop2p(rcx,rdx);
+    pop2p(rbx,rbp);
+    pop2p(rsi,rdi);
+    pop2p(r8, r9);
+    pop2p(r10,r11);
+    pop2p(r12,r13);
+    pop2p(r14,r15);
+    pop2p(r16,r17);
+    pop2p(r18,r19);
+    pop2p(r20,r21);
+    pop2p(r22,r23);
+    pop2p(r24,r25);
+    pop2p(r26,r27);
+    pop2p(r28,r29);
+    pop2p(r30,r31);
   } else {
     movq(r15, Address(rsp, 0));
     movq(r14, Address(rsp, wordSize));
@@ -14286,41 +14348,25 @@ void Assembler::pusha() { // 64bit
 // The slot for rsp just contains an arbitrary value.
 void Assembler::pusha_uncached() { // 64bit
   if (UseAPX) {
-    subq(rsp, 32 * wordSize);
-    movq(Address(rsp, 31 * wordSize), rax);
-    movq(Address(rsp, 30 * wordSize), rcx);
-    movq(Address(rsp, 29 * wordSize), rdx);
-    movq(Address(rsp, 28 * wordSize), rbx);
+    push2p(r31, r30);
+    push2p(r29, r28);
+    push2p(r27, r26);
+    push2p(r25, r24);
+    push2p(r23, r22);
+    push2p(r21, r20);
+    push2p(r19, r18);
+    push2p(r17, r16);
+    push2p(r15, r14);
+    push2p(r13, r12);
+    push2p(r11, r10);
+    push2p(r9, r8);
+    push2p(rdi, rsi);
+    push2p(rbp, rbx);
     // Skip rsp as the value is normally not used. There are a few places where
     // the original value of rsp needs to be known but that can be computed
     // from the value of rsp immediately after pusha (rsp + 16 * wordSize).
-    movq(Address(rsp, 26 * wordSize), rbp);
-    movq(Address(rsp, 25 * wordSize), rsi);
-    movq(Address(rsp, 24 * wordSize), rdi);
-    movq(Address(rsp, 23 * wordSize), r8);
-    movq(Address(rsp, 22 * wordSize), r9);
-    movq(Address(rsp, 21 * wordSize), r10);
-    movq(Address(rsp, 20 * wordSize), r11);
-    movq(Address(rsp, 19 * wordSize), r12);
-    movq(Address(rsp, 18 * wordSize), r13);
-    movq(Address(rsp, 17 * wordSize), r14);
-    movq(Address(rsp, 16 * wordSize), r15);
-    movq(Address(rsp, 15 * wordSize), r16);
-    movq(Address(rsp, 14 * wordSize), r17);
-    movq(Address(rsp, 13 * wordSize), r18);
-    movq(Address(rsp, 12 * wordSize), r19);
-    movq(Address(rsp, 11 * wordSize), r20);
-    movq(Address(rsp, 10 * wordSize), r21);
-    movq(Address(rsp, 9 * wordSize), r22);
-    movq(Address(rsp, 8 * wordSize), r23);
-    movq(Address(rsp, 7 * wordSize), r24);
-    movq(Address(rsp, 6 * wordSize), r25);
-    movq(Address(rsp, 5 * wordSize), r26);
-    movq(Address(rsp, 4 * wordSize), r27);
-    movq(Address(rsp, 3 * wordSize), r28);
-    movq(Address(rsp, 2 * wordSize), r29);
-    movq(Address(rsp, wordSize), r30);
-    movq(Address(rsp, 0), r31);
+    push2p(rdx, rcx);
+    pushp(rax);
   } else {
     subq(rsp, 16 * wordSize);
     movq(Address(rsp, 15 * wordSize), rax);
diff --git a/src/hotspot/cpu/x86/assembler_x86.hpp b/src/hotspot/cpu/x86/assembler_x86.hpp
index b971cc6bcd9..c8fe60e2270 100644
--- a/src/hotspot/cpu/x86/assembler_x86.hpp
+++ b/src/hotspot/cpu/x86/assembler_x86.hpp
@@ -1019,6 +1019,15 @@ class Assembler : public AbstractAssembler  {
 
   void pusha_uncached();
   void popa_uncached();
+
+  // APX ISA extensions for register save/restore optimizations.
+  void push2(Register src1, Register src2, bool with_ppx = false);
+  void pop2(Register src1, Register src2, bool with_ppx = false);
+  void push2p(Register src1, Register src2);
+  void pop2p(Register src1, Register src2);
+  void pushp(Register src);
+  void popp(Register src);
+
 #endif
   void vzeroupper_uncached();
   void decq(Register dst);
@@ -2997,6 +3006,7 @@ class InstructionAttr {
       _input_size_in_bits(Assembler::EVEX_NObit),
       _evex_encoding(0),
       _embedded_opmask_register_specifier(0), // hard code k0
+      _print_encoding(false),
       _current_assembler(nullptr) { }
 
   ~InstructionAttr() {
@@ -3019,6 +3029,7 @@ class InstructionAttr {
   int  _input_size_in_bits;
   int  _evex_encoding;
   int _embedded_opmask_register_specifier;
+  bool _print_encoding;
 
   Assembler *_current_assembler;
 
@@ -3037,6 +3048,7 @@ class InstructionAttr {
   int  get_input_size(void) const { return _input_size_in_bits; }
   int  get_evex_encoding(void) const { return _evex_encoding; }
   int  get_embedded_opmask_register_specifier(void) const { return _embedded_opmask_register_specifier; }
+  bool get_print_encoding(void) const { return _print_encoding; }
 
   // Set the vector len manually
   void set_vector_len(int vector_len) { _avx_vector_len = vector_len; }
@@ -3073,6 +3085,8 @@ class InstructionAttr {
 
   void set_extended_context(void) { _is_extended_context = true; }
 
+  void set_print_encoding(void) { _print_encoding = true; }
+
 };
 
 #endif // CPU_X86_ASSEMBLER_X86_HPP
diff --git a/src/hotspot/cpu/x86/vm_version_x86.cpp b/src/hotspot/cpu/x86/vm_version_x86.cpp
index d4904f23ac4..92cb85c65d5 100644
--- a/src/hotspot/cpu/x86/vm_version_x86.cpp
+++ b/src/hotspot/cpu/x86/vm_version_x86.cpp
@@ -1021,13 +1021,6 @@ void VM_Version::get_processor_features() {
     FLAG_SET_DEFAULT(UseAVX, use_avx_limit);
   }
 
-  if (UseAPX && !supports_apx_f()) {
-    warning("UseAPX is not supported on this CPU, setting it to false");
-    FLAG_SET_DEFAULT(UseAPX, false);
-  } else if (FLAG_IS_DEFAULT(UseAPX)) {
-    FLAG_SET_DEFAULT(UseAPX, supports_apx_f() ? true : false);
-  }
-
   if (UseAVX < 3) {
     _features &= ~CPU_AVX512F;
     _features &= ~CPU_AVX512DQ;
