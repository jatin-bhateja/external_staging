Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/jdk/incubator/vector/', will run:
* jtreg:test/jdk/jdk/incubator/vector
Clean up dirs for jtreg_test_jdk_jdk_incubator_vector

Running test 'jtreg:test/jdk/jdk/incubator/vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Float128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.786 seconds
messages:
command: build Float128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:07:09 IST 2025
Test directory:
  compile: Float128VectorTests
finished: Wed Apr 16 18:07:11 IST 2025
elapsed time (seconds): 1.786

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.785 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:07:09 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 9
Process id: 1476260
finished: Wed Apr 16 18:07:11 IST 2025
elapsed time (seconds): 1.785
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Float128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Float128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Float128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Float128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Float128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Float128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Float128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Float128VectorTests 
TIME:   267.032 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Float128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Float128VectorTests 
started: Wed Apr 16 18:07:11 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1478647
finished: Wed Apr 16 18:11:38 IST 2025
elapsed time (seconds): 267.032
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -8196969357932102504
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-8196969357932102504" to command line.
test Float128VectorTests.ABSFloat128VectorTests(float[-i * 5]): success [621ms]
test Float128VectorTests.ABSFloat128VectorTests(float[i * 5]): success [51ms]
test Float128VectorTests.ABSFloat128VectorTests(float[i + 1]): success [4ms]
test Float128VectorTests.ABSFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [4ms]
test Float128VectorTests.ABSFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [3ms]
test Float128VectorTests.ABSFloat128VectorTests(float[cornerCaseValue(i)]): success [3ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[-i * 5], mask[i % 2]): success [305ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[i * 5], mask[i % 2]): success [69ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[i + 1], mask[i % 2]): success [7ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [22ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [20ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[-i * 5], mask[true]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[i * 5], mask[true]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[i + 1], mask[true]): success [2ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(AbstractVectorTest$1@6ed11085, mask[true]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[cornerCaseValue(i)], mask[true]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[-i * 5], mask[false]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[i * 5], mask[false]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[i + 1], mask[false]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[cornerCaseValue(i)], mask[false]): success [1ms]
test Float128VectorTests.ACOSFloat128VectorTests(float[-i * 5]): success [128ms]
test Float128VectorTests.ACOSFloat128VectorTests(float[i * 5]): success [61ms]
test Float128VectorTests.ACOSFloat128VectorTests(float[i + 1]): success [9ms]
test Float128VectorTests.ACOSFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [5ms]
test Float128VectorTests.ACOSFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.ACOSFloat128VectorTests(float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTests(float[-i * 5], float[i * 5]): success [232ms]
test Float128VectorTests.ADDFloat128VectorTests(float[-i * 5], float[i + 1]): success [61ms]
test Float128VectorTests.ADDFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.ADDFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.ADDFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i * 5]): success [17ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i + 1]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [30ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [7ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [4ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [5ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [4ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [4ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [10ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [13ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [32ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [2ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [2ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [2ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [90ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [66ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [12ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [1ms]
test Float128VectorTests.ADDReduceFloat128VectorTests(float[-i * 5]): success [137ms]
test Float128VectorTests.ADDReduceFloat128VectorTests(float[i * 5]): success [0ms]
test Float128VectorTests.ADDReduceFloat128VectorTests(float[i + 1]): success [99ms]
test Float128VectorTests.ADDReduceFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.ADDReduceFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.ADDReduceFloat128VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[-i * 5], mask[i % 2]): success [111ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[i * 5], mask[i % 2]): success [2ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[i + 1], mask[i % 2]): success [95ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [2ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[-i * 5], mask[true]): success [2ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[i * 5], mask[true]): success [12ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[i + 1], mask[true]): success [2ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[true]): success [2ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [3ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[-i * 5], mask[false]): success [3ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[i * 5], mask[false]): success [3ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[i + 1], mask[false]): success [3ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [30ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[false]): success [3ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [3ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTests(float[-i * 5]): success [10ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTests(float[i * 5]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTests(float[i + 1]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[-i * 5], mask[i % 2]): success [10ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[i * 5], mask[i % 2]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[-i * 5], mask[true]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[i * 5], mask[true]): success [10ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [4ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[-i * 5], mask[false]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[i + 1], mask[false]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.ASINFloat128VectorTests(float[-i * 5]): success [146ms]
test Float128VectorTests.ASINFloat128VectorTests(float[i * 5]): success [60ms]
test Float128VectorTests.ASINFloat128VectorTests(float[i + 1]): success [3ms]
test Float128VectorTests.ASINFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.ASINFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.ASINFloat128VectorTests(float[cornerCaseValue(i)]): success [5ms]
test Float128VectorTests.ATAN2Float128VectorTests(float[-i * 5], float[i * 5]): success [208ms]
test Float128VectorTests.ATAN2Float128VectorTests(float[-i * 5], float[i + 1]): success [80ms]
test Float128VectorTests.ATAN2Float128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.ATAN2Float128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [13ms]
test Float128VectorTests.ATAN2Float128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [5ms]
test Float128VectorTests.ATANFloat128VectorTests(float[-i * 5]): success [69ms]
test Float128VectorTests.ATANFloat128VectorTests(float[i * 5]): success [59ms]
test Float128VectorTests.ATANFloat128VectorTests(float[i + 1]): success [1ms]
test Float128VectorTests.ATANFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.ATANFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.ATANFloat128VectorTests(float[cornerCaseValue(i)]): success [3ms]
test Float128VectorTests.BroadcastFloat128VectorTests(float[-i * 5]): success [134ms]
test Float128VectorTests.BroadcastFloat128VectorTests(float[i * 5]): success [71ms]
test Float128VectorTests.BroadcastFloat128VectorTests(float[i + 1]): success [0ms]
test Float128VectorTests.BroadcastFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.BroadcastFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.BroadcastFloat128VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.BroadcastLongFloat128VectorTestsSmokeTest(float[-i * 5]): success [3ms]
test Float128VectorTests.BroadcastLongFloat128VectorTestsSmokeTest(float[i * 5]): success [3ms]
test Float128VectorTests.BroadcastLongFloat128VectorTestsSmokeTest(float[i + 1]): success [3ms]
test Float128VectorTests.BroadcastLongFloat128VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [3ms]
test Float128VectorTests.CBRTFloat128VectorTests(float[-i * 5]): success [113ms]
test Float128VectorTests.CBRTFloat128VectorTests(float[i * 5]): success [63ms]
test Float128VectorTests.CBRTFloat128VectorTests(float[i + 1]): success [0ms]
test Float128VectorTests.CBRTFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [6ms]
test Float128VectorTests.CBRTFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.CBRTFloat128VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.COSFloat128VectorTests(float[-i * 5]): success [69ms]
test Float128VectorTests.COSFloat128VectorTests(float[i * 5]): success [74ms]
test Float128VectorTests.COSFloat128VectorTests(float[i + 1]): success [0ms]
test Float128VectorTests.COSFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.COSFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.COSFloat128VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.COSHFloat128VectorTests(float[-i * 5]): success [124ms]
test Float128VectorTests.COSHFloat128VectorTests(float[i * 5]): success [64ms]
test Float128VectorTests.COSHFloat128VectorTests(float[i + 1]): success [1ms]
test Float128VectorTests.COSHFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.COSHFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.COSHFloat128VectorTests(float[cornerCaseValue(i)]): success [3ms]
test Float128VectorTests.DIVFloat128VectorTests(float[-i * 5], float[i * 5]): success [173ms]
test Float128VectorTests.DIVFloat128VectorTests(float[-i * 5], float[i + 1]): success [70ms]
test Float128VectorTests.DIVFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.DIVFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.DIVFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [35ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [79ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [2ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [2ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [3ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [2ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [1ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [22ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [1ms]
test Float128VectorTests.EQFloat128VectorTests(float[i], float[i]): success [375ms]
test Float128VectorTests.EQFloat128VectorTests(float[i], float[i - length / 2]): success [198ms]
test Float128VectorTests.EQFloat128VectorTests(float[i], float[i + 1]): success [144ms]
test Float128VectorTests.EQFloat128VectorTests(float[i], float[i - 2]): success [103ms]
test Float128VectorTests.EQFloat128VectorTests(float[i], float[zigZag(i)]): success [103ms]
test Float128VectorTests.EQFloat128VectorTests(float[i], float[cornerCaseValue(i)]): success [104ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - length / 2], float[i]): success [111ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - length / 2], float[i - length / 2]): success [130ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - length / 2], float[i + 1]): success [99ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - length / 2], float[i - 2]): success [112ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - length / 2], float[zigZag(i)]): success [100ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [100ms]
test Float128VectorTests.EQFloat128VectorTests(float[i + 1], float[i]): success [111ms]
test Float128VectorTests.EQFloat128VectorTests(float[i + 1], float[i - length / 2]): success [102ms]
test Float128VectorTests.EQFloat128VectorTests(float[i + 1], float[i + 1]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[i + 1], float[i - 2]): success [105ms]
test Float128VectorTests.EQFloat128VectorTests(float[i + 1], float[zigZag(i)]): success [112ms]
test Float128VectorTests.EQFloat128VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [102ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - 2], float[i]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - 2], float[i - length / 2]): success [111ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - 2], float[i + 1]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - 2], float[i - 2]): success [108ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - 2], float[zigZag(i)]): success [102ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[zigZag(i)], float[i]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[zigZag(i)], float[i - length / 2]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[zigZag(i)], float[i + 1]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[zigZag(i)], float[i - 2]): success [118ms]
test Float128VectorTests.EQFloat128VectorTests(float[zigZag(i)], float[zigZag(i)]): success [103ms]
test Float128VectorTests.EQFloat128VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [103ms]
test Float128VectorTests.EQFloat128VectorTests(float[cornerCaseValue(i)], float[i]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [104ms]
test Float128VectorTests.EQFloat128VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [101ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[i % 2]): success [19ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[i % 2]): success [7ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[i % 2]): success [8ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[i % 2]): success [78ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[i % 2]): success [41ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[i % 2]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[i % 2]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[i % 2]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[i % 2]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[i % 2]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[i % 2]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[i % 2]): success [7ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[i % 2]): success [25ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[true]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[true]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[true]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[true]): success [57ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[true]): success [1ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[false]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[fa

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

loat[-i * 5], float[i * 5]): success [8ms]
test Float128VectorTests.divFloat128VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.divFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.divFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.divFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [7ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [44ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [34ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [7ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [6ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.eqFloat128VectorTests(float[i], float[i]): success [193ms]
test Float128VectorTests.eqFloat128VectorTests(float[i], float[i - length / 2]): success [105ms]
test Float128VectorTests.eqFloat128VectorTests(float[i], float[i + 1]): success [99ms]
test Float128VectorTests.eqFloat128VectorTests(float[i], float[i - 2]): success [98ms]
test Float128VectorTests.eqFloat128VectorTests(float[i], float[zigZag(i)]): success [99ms]
test Float128VectorTests.eqFloat128VectorTests(float[i], float[cornerCaseValue(i)]): success [99ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - length / 2], float[i]): success [98ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - length / 2], float[i - length / 2]): success [98ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - length / 2], float[i + 1]): success [99ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - length / 2], float[i - 2]): success [98ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - length / 2], float[zigZag(i)]): success [99ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [98ms]
test Float128VectorTests.eqFloat128VectorTests(float[i + 1], float[i]): success [98ms]
test Float128VectorTests.eqFloat128VectorTests(float[i + 1], float[i - length / 2]): success [99ms]
test Float128VectorTests.eqFloat128VectorTests(float[i + 1], float[i + 1]): success [98ms]
test Float128VectorTests.eqFloat128VectorTests(float[i + 1], float[i - 2]): success [98ms]
test Float128VectorTests.eqFloat128VectorTests(float[i + 1], float[zigZag(i)]): success [99ms]
test Float128VectorTests.eqFloat128VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [99ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - 2], float[i]): success [99ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - 2], float[i - length / 2]): success [103ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - 2], float[i + 1]): success [109ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - 2], float[i - 2]): success [101ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - 2], float[zigZag(i)]): success [106ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[zigZag(i)], float[i]): success [101ms]
test Float128VectorTests.eqFloat128VectorTests(float[zigZag(i)], float[i - length / 2]): success [100ms]
test Float128VectorTests.eqFloat128VectorTests(float[zigZag(i)], float[i + 1]): success [107ms]
test Float128VectorTests.eqFloat128VectorTests(float[zigZag(i)], float[i - 2]): success [110ms]
test Float128VectorTests.eqFloat128VectorTests(float[zigZag(i)], float[zigZag(i)]): success [100ms]
test Float128VectorTests.eqFloat128VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [107ms]
test Float128VectorTests.eqFloat128VectorTests(float[cornerCaseValue(i)], float[i]): success [100ms]
test Float128VectorTests.eqFloat128VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [116ms]
test Float128VectorTests.eqFloat128VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [99ms]
test Float128VectorTests.eqFloat128VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [99ms]
test Float128VectorTests.eqFloat128VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [99ms]
test Float128VectorTests.eqFloat128VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [99ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[i]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[i - length / 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[i + 1]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[i - 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[zigZag(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - length / 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i + 1]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[zigZag(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - length / 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i + 1]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[zigZag(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - length / 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i + 1]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - 2]): success [57ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[zigZag(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - length / 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i + 1]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [31ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.expandFloat128VectorTests(float[-i * 5], mask[i % 2]): success [156ms]
test Float128VectorTests.expandFloat128VectorTests(float[i * 5], mask[i % 2]): success [145ms]
test Float128VectorTests.expandFloat128VectorTests(float[i + 1], mask[i % 2]): success [78ms]
test Float128VectorTests.expandFloat128VectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [83ms]
test Float128VectorTests.expandFloat128VectorTests(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [78ms]
test Float128VectorTests.expandFloat128VectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [79ms]
test Float128VectorTests.expandFloat128VectorTests(float[-i * 5], mask[true]): success [31ms]
test Float128VectorTests.expandFloat128VectorTests(float[i * 5], mask[true]): success [6ms]
test Float128VectorTests.expandFloat128VectorTests(float[i + 1], mask[true]): success [6ms]
test Float128VectorTests.expandFloat128VectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [6ms]
test Float128VectorTests.expandFloat128VectorTests(AbstractVectorTest$1@6ed11085, mask[true]): success [6ms]
test Float128VectorTests.expandFloat128VectorTests(float[cornerCaseValue(i)], mask[true]): success [6ms]
test Float128VectorTests.expandFloat128VectorTests(float[-i * 5], mask[false]): success [9ms]
test Float128VectorTests.expandFloat128VectorTests(float[i * 5], mask[false]): success [9ms]
test Float128VectorTests.expandFloat128VectorTests(float[i + 1], mask[false]): success [8ms]
test Float128VectorTests.expandFloat128VectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [9ms]
test Float128VectorTests.expandFloat128VectorTests(AbstractVectorTest$1@6ed11085, mask[false]): success [9ms]
test Float128VectorTests.expandFloat128VectorTests(float[cornerCaseValue(i)], mask[false]): success [9ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i * 5], float[-i * 5]): success [9ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i * 5], float[i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i * 5], AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i + 1], float[i * 5]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i + 1], float[i + 1]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i + 1], AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [53ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[-i * 5]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i * 5]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i + 1]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[-i * 5]): success [9ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i * 5]): success [18ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], AbstractVectorTest$1@6ed11085): success [21ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i + 1]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[-i * 5]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i * 5]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i + 1]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.getFloat128VectorTests(float[-i * 5]): success [8ms]
test Float128VectorTests.getFloat128VectorTests(float[i * 5]): success [66ms]
test Float128VectorTests.getFloat128VectorTests(float[i + 1]): success [2ms]
test Float128VectorTests.getFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.getFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.getFloat128VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.hashCodeFloat128VectorTestsSmokeTest(float[-i * 5]): success [40ms]
test Float128VectorTests.hashCodeFloat128VectorTestsSmokeTest(float[i * 5]): success [2ms]
test Float128VectorTests.hashCodeFloat128VectorTestsSmokeTest(float[i + 1]): success [7ms]
test Float128VectorTests.hashCodeFloat128VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.hashCodeFloat128VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [8ms]
test Float128VectorTests.hashCodeFloat128VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.indexInRangeFloat128VectorTestsSmokeTest(0): success [75ms]
test Float128VectorTests.indexInRangeFloat128VectorTestsSmokeTest(-1): success [19ms]
test Float128VectorTests.indexInRangeFloat128VectorTestsSmokeTest(1): success [19ms]
test Float128VectorTests.indexInRangeFloat128VectorTestsSmokeTest(2): success [3ms]
test Float128VectorTests.indexInRangeFloat128VectorTestsSmokeTest(-2): success [4ms]
test Float128VectorTests.indexInRangeLongFloat128VectorTestsSmokeTest(0): success [3ms]
test Float128VectorTests.indexInRangeLongFloat128VectorTestsSmokeTest(-1): success [3ms]
test Float128VectorTests.indexInRangeLongFloat128VectorTestsSmokeTest(1): success [3ms]
test Float128VectorTests.indexInRangeLongFloat128VectorTestsSmokeTest(2): success [3ms]
test Float128VectorTests.indexInRangeLongFloat128VectorTestsSmokeTest(-2): success [3ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(0): success [0ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(1): success [0ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(32): success [0ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(37): success [0ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(1024): success [0ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(1025): success [0ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(1029): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(0): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(1): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(32): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(37): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(1024): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(1025): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(1029): success [0ms]
test Float128VectorTests.ltFloat128VectorTests(float[i], float[i]): success [194ms]
test Float128VectorTests.ltFloat128VectorTests(float[i], float[i - length / 2]): success [105ms]
test Float128VectorTests.ltFloat128VectorTests(float[i], float[i + 1]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[i], float[i - 2]): success [97ms]
test Float128VectorTests.ltFloat128VectorTests(float[i], float[zigZag(i)]): success [99ms]
test Float128VectorTests.ltFloat128VectorTests(float[i], float[cornerCaseValue(i)]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - length / 2], float[i]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - length / 2], float[i - length / 2]): success [97ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - length / 2], float[i + 1]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - length / 2], float[i - 2]): success [105ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - length / 2], float[zigZag(i)]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [99ms]
test Float128VectorTests.ltFloat128VectorTests(float[i + 1], float[i]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[i + 1], float[i - length / 2]): success [105ms]
test Float128VectorTests.ltFloat128VectorTests(float[i + 1], float[i + 1]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[i + 1], float[i - 2]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[i + 1], float[zigZag(i)]): success [99ms]
test Float128VectorTests.ltFloat128VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [99ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - 2], float[i]): success [99ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - 2], float[i - length / 2]): success [99ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - 2], float[i + 1]): success [112ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - 2], float[i - 2]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - 2], float[zigZag(i)]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[zigZag(i)], float[i]): success [99ms]
test Float128VectorTests.ltFloat128VectorTests(float[zigZag(i)], float[i - length / 2]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[zigZag(i)], float[i + 1]): success [99ms]
test Float128VectorTests.ltFloat128VectorTests(float[zigZag(i)], float[i - 2]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[zigZag(i)], float[zigZag(i)]): success [99ms]
test Float128VectorTests.ltFloat128VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [102ms]
test Float128VectorTests.ltFloat128VectorTests(float[cornerCaseValue(i)], float[i]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [99ms]
test Float128VectorTests.ltFloat128VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [98ms]
test Float128VectorTests.ltFloat128VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [119ms]
test Float128VectorTests.ltFloat128VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [98ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i], float[i]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i], float[i - length / 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i], float[i + 1]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i], float[i - 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i], float[zigZag(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - length / 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i + 1]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - length / 2], float[zigZag(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i + 1], float[i]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i + 1], float[i - length / 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i + 1], float[i + 1]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i + 1], float[i - 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i + 1], float[zigZag(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - 2], float[i]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - 2], float[i - length / 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - 2], float[i + 1]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - 2], float[i - 2]): success [58ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - 2], float[zigZag(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - length / 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i + 1]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [30ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.maskAndFloat128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Float128VectorTests.maskAndFloat128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float128VectorTests.maskAndNotFloat128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Float128VectorTests.maskAndNotFloat128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float128VectorTests.maskCompressFloat128VectorTestsSmokeTest(mask[i % 2]): success [235ms]
test Float128VectorTests.maskCompressFloat128VectorTestsSmokeTest(mask[true]): success [85ms]
test Float128VectorTests.maskCompressFloat128VectorTestsSmokeTest(mask[false]): success [123ms]
test Float128VectorTests.maskEqFloat128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Float128VectorTests.maskEqFloat128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float128VectorTests.maskEqualsFloat128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Float128VectorTests.maskEqualsFloat128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float128VectorTests.maskFirstTrueFloat128VectorTestsSmokeTest(mask[i % 2]): success [82ms]
test Float128VectorTests.maskFirstTrueFloat128VectorTestsSmokeTest(mask[true]): success [62ms]
test Float128VectorTests.maskFirstTrueFloat128VectorTestsSmokeTest(mask[false]): success [30ms]
test Float128VectorTests.maskFromToLongFloat128VectorTestsSmokeTest(-1): success [59ms]
test Float128VectorTests.maskFromToLongFloat128VectorTestsSmokeTest(0): success [0ms]
test Float128VectorTests.maskFromToLongFloat128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Float128VectorTests.maskFromToLongFloat128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Float128VectorTests.maskHashCodeFloat128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Float128VectorTests.maskHashCodeFloat128VectorTestsSmokeTest(mask[true]): success [0ms]
test Float128VectorTests.maskHashCodeFloat128VectorTestsSmokeTest(mask[false]): success [0ms]
test Float128VectorTests.maskLastTrueFloat128VectorTestsSmokeTest(mask[i % 2]): success [74ms]
test Float128VectorTests.maskLastTrueFloat128VectorTestsSmokeTest(mask[true]): success [62ms]
test Float128VectorTests.maskLastTrueFloat128VectorTestsSmokeTest(mask[false]): success [48ms]
test Float128VectorTests.maskOrFloat128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [46ms]
test Float128VectorTests.maskOrFloat128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float128VectorTests.maskTrueCountFloat128VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Float128VectorTests.maskTrueCountFloat128VectorTestsSmokeTest(mask[true]): success [62ms]
test Float128VectorTests.maskTrueCountFloat128VectorTestsSmokeTest(mask[false]): success [29ms]
test Float128VectorTests.maskXorFloat128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Float128VectorTests.maskXorFloat128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float128VectorTests.maxFloat128VectorTests(float[-i * 5], float[i * 5]): success [6ms]
test Float128VectorTests.maxFloat128VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.maxFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [28ms]
test Float128VectorTests.maxFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.maxFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.maxFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [7ms]
test Float128VectorTests.maxFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.maxFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.maxFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.maxFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [34ms]
test Float128VectorTests.minFloat128VectorTests(float[-i * 5], float[i * 5]): success [7ms]
test Float128VectorTests.minFloat128VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.minFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.minFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.minFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.minFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float128VectorTests.minFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [28ms]
test Float128VectorTests.minFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.minFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.minFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.mulFloat128VectorTests(float[-i * 5], float[i * 5]): success [6ms]
test Float128VectorTests.mulFloat128VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.mulFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.mulFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.mulFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [8ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [5ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.negFloat128VectorTests(float[-i * 5]): success [14ms]
test Float128VectorTests.negFloat128VectorTests(float[i * 5]): success [47ms]
test Float128VectorTests.negFloat128VectorTests(float[i + 1]): success [0ms]
test Float128VectorTests.negFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.negFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.negFloat128VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.powFloat128VectorTests(float[-i * 5], float[i * 5]): success [27ms]
test Float128VectorTests.powFloat128VectorTests(float[-i * 5], float[i + 1]): success [72ms]
test Float128VectorTests.powFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.powFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.powFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.powFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [14ms]
test Float128VectorTests.powFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.powFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.powFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.powFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.shuffleEqualsFloat128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [13ms]
test Float128VectorTests.shuffleEqualsFloat128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [10ms]
test Float128VectorTests.shuffleMiscellaneousFloat128VectorTestsSmokeTest(shuffle[random]): success [58ms]
test Float128VectorTests.shuffleTest(): success [803ms]
test Float128VectorTests.shuffleToStringFloat128VectorTestsSmokeTest(shuffle[random]): success [38ms]
test Float128VectorTests.sliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[i * 5]): success [1003ms]
test Float128VectorTests.sliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[i + 1]): success [395ms]
test Float128VectorTests.sliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [294ms]
test Float128VectorTests.sliceBinaryFloat128VectorTestsBinary(float[-i * 5], AbstractVectorTest$1@6ed11085): success [214ms]
test Float128VectorTests.sliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [212ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [297ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [440ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [216ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [203ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [217ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [198ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [307ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [198ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [197ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [197ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [197ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [200ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [197ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [197ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [215ms]
test Float128VectorTests.sliceUnaryFloat128VectorTests(float[-i * 5]): success [386ms]
test Float128VectorTests.sliceUnaryFloat128VectorTests(float[i * 5]): success [366ms]
test Float128VectorTests.sliceUnaryFloat128VectorTests(float[i + 1]): success [187ms]
test Float128VectorTests.sliceUnaryFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [189ms]
test Float128VectorTests.sliceUnaryFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [196ms]
test Float128VectorTests.sliceUnaryFloat128VectorTests(float[cornerCaseValue(i)]): success [188ms]
test Float128VectorTests.smokeTest1(): success [0ms]
test Float128VectorTests.smokeTest2(): success [46ms]
test Float128VectorTests.sqrtFloat128VectorTests(float[-i * 5]): success [15ms]
test Float128VectorTests.sqrtFloat128VectorTests(float[i * 5]): success [46ms]
test Float128VectorTests.sqrtFloat128VectorTests(float[i + 1]): success [1ms]
test Float128VectorTests.sqrtFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.sqrtFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.sqrtFloat128VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.subFloat128VectorTests(float[-i * 5], float[i * 5]): success [7ms]
test Float128VectorTests.subFloat128VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.subFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.subFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.subFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [7ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [25ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.toDoubleArrayFloat128VectorTestsSmokeTest(float[-i * 5]): success [0ms]
test Float128VectorTests.toDoubleArrayFloat128VectorTestsSmokeTest(float[i * 5]): success [0ms]
test Float128VectorTests.toDoubleArrayFloat128VectorTestsSmokeTest(float[i + 1]): success [0ms]
test Float128VectorTests.toDoubleArrayFloat128VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.toDoubleArrayFloat128VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.toDoubleArrayFloat128VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.toIntArrayFloat128VectorTestsSmokeTest(float[-i * 5]): success [6ms]
test Float128VectorTests.toIntArrayFloat128VectorTestsSmokeTest(float[i * 5]): success [13ms]
test Float128VectorTests.toIntArrayFloat128VectorTestsSmokeTest(float[i + 1]): success [6ms]
test Float128VectorTests.toIntArrayFloat128VectorTestsSmokeTest(float[intCornerCaseValue(i)]): success [6ms]
test Float128VectorTests.toLongArrayFloat128VectorTestsSmokeTest(float[-i * 5]): success [0ms]
test Float128VectorTests.toLongArrayFloat128VectorTestsSmokeTest(float[i * 5]): success [0ms]
test Float128VectorTests.toLongArrayFloat128VectorTestsSmokeTest(float[i + 1]): success [17ms]
test Float128VectorTests.toLongArrayFloat128VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.toStringFloat128VectorTestsSmokeTest(float[-i * 5]): success [15ms]
test Float128VectorTests.toStringFloat128VectorTestsSmokeTest(float[i * 5]): success [2ms]
test Float128VectorTests.toStringFloat128VectorTestsSmokeTest(float[i + 1]): success [21ms]
test Float128VectorTests.toStringFloat128VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [4ms]
test Float128VectorTests.toStringFloat128VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [23ms]
test Float128VectorTests.toStringFloat128VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [48ms]
test Float128VectorTests.unsliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[i * 5]): success [417ms]
test Float128VectorTests.unsliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[i + 1]): success [503ms]
test Float128VectorTests.unsliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [190ms]
test Float128VectorTests.unsliceBinaryFloat128VectorTestsBinary(float[-i * 5], AbstractVectorTest$1@6ed11085): success [190ms]
test Float128VectorTests.unsliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [194ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [876ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [829ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [415ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [456ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [394ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [472ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [338ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [424ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [489ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [405ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [389ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [328ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [388ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [389ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [386ms]
test Float128VectorTests.unsliceUnaryFloat128VectorTests(float[-i * 5]): success [380ms]
test Float128VectorTests.unsliceUnaryFloat128VectorTests(float[i * 5]): success [353ms]
test Float128VectorTests.unsliceUnaryFloat128VectorTests(float[i + 1]): success [187ms]
test Float128VectorTests.unsliceUnaryFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [186ms]
test Float128VectorTests.unsliceUnaryFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [204ms]
test Float128VectorTests.unsliceUnaryFloat128VectorTests(float[cornerCaseValue(i)]): success [187ms]
test Float128VectorTests.viewAsFloatingLanesTest(): success [27ms]
test Float128VectorTests.viewAsIntegeralLanesTest(): success [29ms]
test Float128VectorTests.withFloat128VectorTests(float[-i * 5], float[i * 5]): success [45ms]
test Float128VectorTests.withFloat128VectorTests(float[-i * 5], float[i + 1]): success [126ms]
test Float128VectorTests.withFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [34ms]
test Float128VectorTests.withFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [34ms]
test Float128VectorTests.withFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [41ms]

===============================================
jdk/incubator/vector/Float128VectorTests.java
Total tests run: 3215, Passes: 3214, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Float128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Float128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Float128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Float128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Float128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Float128VectorTests.d/testng.0.jta jdk/incubator/vector/Float128VectorTests.java false Float128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/Float64VectorTests.java
TEST: jdk/incubator/vector/Int128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.309 seconds
messages:
command: build Int128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:09:37 IST 2025
Test directory:
  compile: Int128VectorTests
finished: Wed Apr 16 18:09:39 IST 2025
elapsed time (seconds): 1.309

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.308 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:09:37 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 16
Process id: 1476950
finished: Wed Apr 16 18:09:39 IST 2025
elapsed time (seconds): 1.308
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
TIME:   336.094 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
started: Wed Apr 16 18:09:39 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1479418
finished: Wed Apr 16 18:15:15 IST 2025
elapsed time (seconds): 336.094
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -647165173137887257
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-647165173137887257" to command line.
test Int128VectorTests.ABSInt128VectorTests(int[-i * 5]): success [588ms]
test Int128VectorTests.ABSInt128VectorTests(int[i * 5]): success [48ms]
test Int128VectorTests.ABSInt128VectorTests(int[i + 1]): success [8ms]
test Int128VectorTests.ABSInt128VectorTests(int[cornerCaseValue(i)]): success [5ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[i % 2]): success [192ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[i % 2]): success [157ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[i % 2]): success [2ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[true]): success [28ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i * 5]): success [258ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i + 1]): success [60ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [19ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [24ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [9ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [121ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [64ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[-i * 5]): success [119ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i * 5]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i + 1]): success [67ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [110ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [96ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [29ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [13ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[-i * 5]): success [20ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i * 5]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i * 5]): success [183ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i + 1]): success [60ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [18ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [7ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [8ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [64ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[-i * 5]): success [136ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i * 5]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i + 1]): success [62ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [79ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [81ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [15ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [29ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i * 5]): success [178ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i + 1]): success [69ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [60ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [75ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [56ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i * 5]): success [106ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i + 1]): success [67ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [88ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [75ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [193ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [60ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[-i * 5]): success [8ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i * 5]): success [53ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i + 1]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [56ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [56ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [10ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [49ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [4ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [110ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [91ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [408ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [20ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [103ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [77ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [60ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [44ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [22ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [4ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success 

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

t128VectorTests.eqInt128VectorTests(int[i], int[i]): success [197ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - length / 2]): success [105ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[zigZag(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i]): success [107ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - length / 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - length / 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[zigZag(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [9ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [55ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [0ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [0ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [29ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[i % 2]): success [157ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[i % 2]): success [149ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[i % 2]): success [76ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[true]): success [6ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[true]): success [5ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[false]): success [7ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[false]): success [7ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[false]): success [7ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [7ms]
test Int128VectorTests.getInt128VectorTests(int[-i * 5]): success [8ms]
test Int128VectorTests.getInt128VectorTests(int[i * 5]): success [67ms]
test Int128VectorTests.getInt128VectorTests(int[i + 1]): success [2ms]
test Int128VectorTests.getInt128VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[-i * 5]): success [42ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i * 5]): success [2ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i + 1]): success [19ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(0): success [80ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(1): success [23ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-2): success [4ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(0): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-2): success [3ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(37): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1024): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(0): success [4ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(37): success [1ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1024): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i]): success [198ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - length / 2]): success [108ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i + 1]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[zigZag(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [116ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i]): success [144ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i + 1]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [103ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - length / 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i + 1]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - 2]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[zigZag(i)]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - length / 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i + 1]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - 2]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[zigZag(i)]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i + 1]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - 2]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [6ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [52ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [27ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[i % 2]): success [255ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[true]): success [121ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[false]): success [83ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [38ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[true]): success [59ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[false]): success [27ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(-1): success [66ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[true]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[false]): success [0ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [71ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[true]): success [59ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[false]): success [42ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[i % 2]): success [35ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[true]): success [60ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[false]): success [27ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [39ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[-i * 5]): success [14ms]
test Int128VectorTests.negInt128VectorTests(int[i * 5]): success [74ms]
test Int128VectorTests.negInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[-i * 5]): success [19ms]
test Int128VectorTests.notInt128VectorTests(int[i * 5]): success [79ms]
test Int128VectorTests.notInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [12ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [9ms]
test Int128VectorTests.shuffleMiscellaneousInt128VectorTestsSmokeTest(shuffle[random]): success [10ms]
test Int128VectorTests.shuffleTest(): success [316ms]
test Int128VectorTests.shuffleToStringInt128VectorTestsSmokeTest(shuffle[random]): success [40ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [717ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [282ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [119ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [200ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [325ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [135ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [119ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [120ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [120ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [119ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [121ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [156ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[-i * 5]): success [256ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i * 5]): success [245ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i + 1]): success [181ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [111ms]
test Int128VectorTests.smokeTest1(): success [0ms]
test Int128VectorTests.smokeTest2(): success [78ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[-i * 5]): success [2ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i + 1]): success [13ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [13ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [265ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [376ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [112ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [638ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [623ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [228ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [228ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [228ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [281ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [237ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [244ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [243ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[-i * 5]): success [240ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i * 5]): success [241ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i + 1]): success [178ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [110ms]
test Int128VectorTests.viewAsFloatingLanesTest(): success [452ms]
test Int128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i * 5]): success [44ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i + 1]): success [127ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [33ms]

===============================================
jdk/incubator/vector/Int128VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Int128VectorTests.d/testng.0.jta jdk/incubator/vector/Int128VectorTests.java false Int128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Long256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.77 seconds
messages:
command: build Long256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:12:34 IST 2025
Test directory:
  compile: Long256VectorTests
finished: Wed Apr 16 18:12:35 IST 2025
elapsed time (seconds): 0.77

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.77 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:12:34 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 2
Process id: 1475740
finished: Wed Apr 16 18:12:35 IST 2025
elapsed time (seconds): 0.77
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 3
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests 
TIME:   219.711 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests 
started: Wed Apr 16 18:12:35 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1480114
finished: Wed Apr 16 18:16:15 IST 2025
elapsed time (seconds): 219.711
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 4791980501115295555
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=4791980501115295555" to command line.
test Long256VectorTests.ABSLong256VectorTests(long[-i * 5]): success [595ms]
test Long256VectorTests.ABSLong256VectorTests(long[i * 5]): success [6ms]
test Long256VectorTests.ABSLong256VectorTests(long[i + 1]): success [49ms]
test Long256VectorTests.ABSLong256VectorTests(long[cornerCaseValue(i)]): success [6ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[i % 2]): success [243ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[i % 2]): success [77ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[i % 2]): success [75ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[true]): success [6ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[false]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[false]): success [6ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[i * 5]): success [236ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[i + 1]): success [33ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [64ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [16ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [139ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [6ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [11ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [15ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [6ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[-i * 5]): success [98ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[i * 5]): success [62ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[i + 1]): success [3ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[cornerCaseValue(i)]): success [21ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [61ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [79ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[true]): success [27ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[-i * 5]): success [5ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[i * 5]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[i + 1]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [13ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[i * 5]): success [210ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[i + 1]): success [4ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [63ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [15ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [5ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [69ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [4ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [4ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[-i * 5]): success [104ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[i * 5]): success [61ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[i + 1]): success [23ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[cornerCaseValue(i)]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [23ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [80ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [17ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[false]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[i * 5]): success [309ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[i + 1]): success [54ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [137ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [126ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [55ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [147ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [59ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [57ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [56ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [57ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [56ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [56ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[i * 5]): success [175ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[i + 1]): success [55ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [135ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [131ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [61ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [146ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [57ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [57ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [57ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [57ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [101ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [57ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [229ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [58ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[-i * 5]): success [8ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[i * 5]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[i + 1]): success [50ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [67ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [14ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [51ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [76ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [10ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [115ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [502ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [39ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [67ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [4ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTes

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

ectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.bitwiseDivByZeroSmokeTest(): success [10ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [15ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [67ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [91ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[i % 2]): success [175ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[i % 2]): success [40ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[i % 2]): success [115ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [38ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[true]): success [88ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[false]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[false]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[false]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[i * 5]): success [190ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[i + 1]): success [110ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [195ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [11ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [98ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [327ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [216ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [411ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [220ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [224ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): failure [86ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$7(LongVector.java:914)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.bOpTemplateMF(LongVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Long256Vector.bOpMF(Long256Vector.java:204)
	at jdk.incubator.vector/jdk.incubator.vector.Long256Vector.bOpMF(Long256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$6(LongVector.java:914)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lanewiseTemplate(LongVector.java:895)
	at jdk.incubator.vector/jdk.incubator.vector.Long256Vector.lanewise(Long256Vector.java:281)
	at jdk.incubator.vector/jdk.incubator.vector.Long256Vector.lanewise(Long256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.div(LongVector.java:1645)
	at Long256VectorTests.divLong256VectorTestsMasked(Long256VectorTests.java:1780)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [224ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [212ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [217ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i]): success [125ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i - length / 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i + 1]): success [58ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i - 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[cornerCaseValue(i)]): success [76ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i + 1]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[zigZag(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i + 1]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[zigZag(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i + 1]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[zigZag(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i + 1]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[zigZag(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [79ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[i % 2]): success [124ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[i % 2]): success [39ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[i % 2]): success [108ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [38ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[true]): success [27ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[true]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[true]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[false]): success [5ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[false]): success [5ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[false]): success [5ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [5ms]
test Long256VectorTests.getLong256VectorTests(long[-i * 5]): success [4ms]
test Long256VectorTests.getLong256VectorTests(long[i * 5]): success [4ms]
test Long256VectorTests.getLong256VectorTests(long[i + 1]): success [64ms]
test Long256VectorTests.getLong256VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[-i * 5]): success [36ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[i * 5]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[i + 1]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(0): success [69ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(-1): success [2ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(1): success [16ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(2): success [1ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(-2): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(0): success [2ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(-1): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(1): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(2): success [3ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(-2): success [1ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(32): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(37): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1024): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1025): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1029): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(32): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(37): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1024): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1025): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1029): success [0ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i]): success [122ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i - length / 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i + 1]): success [57ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i - 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[zigZag(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i - length / 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i + 1]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i - 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[zigZag(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i - length / 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i + 1]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i - 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[zigZag(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i - length / 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i + 1]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i - 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[zigZag(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i - length / 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i + 1]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i - 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[zigZag(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.maskAndLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Long256VectorTests.maskAndLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskAndNotLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long256VectorTests.maskAndNotLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[i % 2]): success [313ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[true]): success [148ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[false]): success [186ms]
test Long256VectorTests.maskEqLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long256VectorTests.maskEqLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskEqualsLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long256VectorTests.maskEqualsLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[true]): success [59ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[false]): success [26ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(-1): success [58ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[true]): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[false]): success [0ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[i % 2]): success [69ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[true]): success [59ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[false]): success [42ms]
test Long256VectorTests.maskOrLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Long256VectorTests.maskOrLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[true]): success [64ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[false]): success [27ms]
test Long256VectorTests.maskXorLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long256VectorTests.maskXorLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[i + 1]): success [17ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.negLong256VectorTests(long[-i * 5]): success [13ms]
test Long256VectorTests.negLong256VectorTests(long[i * 5]): success [2ms]
test Long256VectorTests.negLong256VectorTests(long[i + 1]): success [78ms]
test Long256VectorTests.negLong256VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.notLong256VectorTests(long[-i * 5]): success [83ms]
test Long256VectorTests.notLong256VectorTests(long[i * 5]): success [58ms]
test Long256VectorTests.notLong256VectorTests(long[i + 1]): success [137ms]
test Long256VectorTests.notLong256VectorTests(long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[i * 5]): success [10ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.shuffleEqualsLong256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [434ms]
test Long256VectorTests.shuffleEqualsLong256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [27ms]
test Long256VectorTests.shuffleMiscellaneousLong256VectorTestsSmokeTest(shuffle[random]): success [15ms]
test Long256VectorTests.shuffleTest(): success [382ms]
test Long256VectorTests.shuffleToStringLong256VectorTestsSmokeTest(shuffle[random]): success [57ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i * 5]): success [817ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i + 1]): success [354ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [574ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [488ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [402ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [723ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [550ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [409ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [413ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [447ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [402ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [402ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[-i * 5]): success [514ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[i * 5]): success [332ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[i + 1]): success [508ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[cornerCaseValue(i)]): success [429ms]
test Long256VectorTests.smokeTest1(): success [0ms]
test Long256VectorTests.smokeTest2(): success [45ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [51ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [4ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [6ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[i * 5]): success [5ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[-i * 5]): success [1ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[i * 5]): success [6ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[i + 1]): success [50ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i * 5]): success [542ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i + 1]): success [401ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [616ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [1208ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [728ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1318ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [695ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [711ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [698ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [737ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [732ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [703ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[-i * 5]): success [501ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[i * 5]): success [336ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[i + 1]): success [508ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[cornerCaseValue(i)]): success [333ms]
test Long256VectorTests.viewAsFloatingLanesTest(): success [243ms]
test Long256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[i * 5]): success [28ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[i + 1]): success [19ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [110ms]

===============================================
jdk/incubator/vector/Long256VectorTests.java
Total tests run: 3321, Passes: 3318, Failures: 3, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 3
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 3
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 3
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Long256VectorTests.d/testng.0.jta jdk/incubator/vector/Long256VectorTests.java false Long256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 3
--------------------------------------------------
Passed: jdk/incubator/vector/Long512VectorTests.java
TEST: jdk/incubator/vector/Long128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.765 seconds
messages:
command: build Long128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:12:18 IST 2025
Test directory:
  compile: Long128VectorTests
finished: Wed Apr 16 18:12:18 IST 2025
elapsed time (seconds): 0.765

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.765 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:12:18 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 6
Process id: 1475966
finished: Wed Apr 16 18:12:18 IST 2025
elapsed time (seconds): 0.765
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Long128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Long128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Long128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
TIME:   251.609 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
started: Wed Apr 16 18:12:18 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1480009
finished: Wed Apr 16 18:16:30 IST 2025
elapsed time (seconds): 251.609
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -7548334369173363893
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-7548334369173363893" to command line.
test Long128VectorTests.ABSLong128VectorTests(long[-i * 5]): success [553ms]
test Long128VectorTests.ABSLong128VectorTests(long[i * 5]): success [47ms]
test Long128VectorTests.ABSLong128VectorTests(long[i + 1]): success [6ms]
test Long128VectorTests.ABSLong128VectorTests(long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[i % 2]): success [216ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[i % 2]): success [111ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[true]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[false]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i * 5]): success [201ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i + 1]): success [88ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [121ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [63ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [10ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[-i * 5]): success [134ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i + 1]): success [87ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [106ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [40ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [13ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [10ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i * 5]): success [147ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i + 1]): success [59ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [8ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [64ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[-i * 5]): success [121ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i * 5]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i + 1]): success [62ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [67ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [80ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [29ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [13ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i * 5]): success [175ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i + 1]): success [71ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [62ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [74ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i * 5]): success [103ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i + 1]): success [67ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [78ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [72ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [172ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [56ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[-i * 5]): success [8ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i * 5]): success [54ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i + 1]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [58ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [55ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [13ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [49ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [108ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [88ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [489ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [5ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [83ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [23ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [3ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(lo

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

 Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[i % 2]): success [162ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[i % 2]): success [114ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[i % 2]): success [43ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [43ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[true]): success [68ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i * 5]): success [162ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i + 1]): success [206ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [80ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [167ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [275ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [307ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [161ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [161ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): failure [69ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$7(LongVector.java:914)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.bOpTemplateMF(LongVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.bOpMF(Long128Vector.java:204)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.bOpMF(Long128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$6(LongVector.java:914)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lanewiseTemplate(LongVector.java:895)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.lanewise(Long128Vector.java:281)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.lanewise(Long128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.div(LongVector.java:1645)
	at Long128VectorTests.divLong128VectorTestsMasked(Long128VectorTests.java:1780)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [152ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [173ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [152ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [168ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i]): success [170ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - length / 2]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i + 1]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - 2]): success [78ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[zigZag(i)]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [73ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i + 1]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - 2]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - length / 2]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i + 1]): success [78ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - 2]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[zigZag(i)]): success [73ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - length / 2]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i + 1]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - 2]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[zigZag(i)]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i]): success [75ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [75ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i + 1]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - 2]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [72ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [56ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[i % 2]): success [112ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[i % 2]): success [114ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[i % 2]): success [43ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [43ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[true]): success [24ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.getLong128VectorTests(long[-i * 5]): success [6ms]
test Long128VectorTests.getLong128VectorTests(long[i * 5]): success [60ms]
test Long128VectorTests.getLong128VectorTests(long[i + 1]): success [1ms]
test Long128VectorTests.getLong128VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[-i * 5]): success [39ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i * 5]): success [2ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(0): success [74ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-1): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(1): success [19ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(2): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(0): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-1): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(1): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(2): success [5ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i]): success [174ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - length / 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i + 1]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - 2]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[zigZag(i)]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i + 1]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - 2]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - length / 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i + 1]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - 2]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[zigZag(i)]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - length / 2]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i + 1]): success [73ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - 2]): success [86ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i + 1]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - 2]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [79ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [72ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [8ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [55ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[i % 2]): success [228ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[true]): success [88ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[false]): success [62ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [35ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[false]): success [22ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(-1): success [63ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[true]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[false]): success [0ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [63ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[false]): success [35ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[i % 2]): success [47ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[false]): success [22ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[-i * 5]): success [14ms]
test Long128VectorTests.negLong128VectorTests(long[i * 5]): success [46ms]
test Long128VectorTests.negLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[-i * 5]): success [19ms]
test Long128VectorTests.notLong128VectorTests(long[i * 5]): success [56ms]
test Long128VectorTests.notLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i * 5]): success [8ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [445ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [48ms]
test Long128VectorTests.shuffleMiscellaneousLong128VectorTestsSmokeTest(shuffle[random]): success [23ms]
test Long128VectorTests.shuffleTest(): success [349ms]
test Long128VectorTests.shuffleToStringLong128VectorTestsSmokeTest(shuffle[random]): success [69ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [599ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [267ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [87ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [169ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [437ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [89ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [88ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [88ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [88ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [89ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [88ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [99ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[-i * 5]): success [247ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i * 5]): success [228ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i + 1]): success [85ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [168ms]
test Long128VectorTests.smokeTest1(): success [0ms]
test Long128VectorTests.smokeTest2(): success [48ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [39ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [8ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i * 5]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i + 1]): success [12ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[-i * 5]): success [2ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i * 5]): success [6ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i + 1]): success [43ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [253ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [323ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [87ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [558ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [520ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [164ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [164ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [172ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [171ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [323ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [170ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [164ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[-i * 5]): success [232ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i * 5]): success [226ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i + 1]): success [81ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [82ms]
test Long128VectorTests.viewAsFloatingLanesTest(): success [246ms]
test Long128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i * 5]): success [41ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i + 1]): success [120ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [32ms]

===============================================
jdk/incubator/vector/Long128VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Long128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Long128VectorTests.d/testng.0.jta jdk/incubator/vector/Long128VectorTests.java false Long128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
TEST: jdk/incubator/vector/LongMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.727 seconds
messages:
command: build LongMaxVectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:14:55 IST 2025
Test directory:
  compile: LongMaxVectorTests
finished: Wed Apr 16 18:14:55 IST 2025
elapsed time (seconds): 0.727

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.727 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:14:55 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 3
Process id: 1475784
finished: Wed Apr 16 18:14:55 IST 2025
elapsed time (seconds): 0.727
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/LongMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/LongMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/LongMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/LongMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests 
TIME:   142.553 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests 
started: Wed Apr 16 18:14:55 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1480467
finished: Wed Apr 16 18:17:18 IST 2025
elapsed time (seconds): 142.553
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 177747175251650843
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=177747175251650843" to command line.
test LongMaxVectorTests.ABSLongMaxVectorTests(long[-i * 5]): success [545ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[i * 5]): success [6ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[i + 1]): success [48ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[cornerCaseValue(i)]): success [4ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [212ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[i % 2]): success [66ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[true]): success [34ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [13ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[i * 5]): success [196ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[i + 1]): success [7ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [60ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [122ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [29ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[-i * 5]): success [17ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[i * 5]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[i + 1]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [9ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[-i * 5]): success [83ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[i * 5]): success [86ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[i + 1]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [50ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [79ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [27ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [10ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[i * 5]): success [146ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[i + 1]): success [3ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [59ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [4ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [22ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [4ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[-i * 5]): success [89ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[i * 5]): success [61ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[i + 1]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[cornerCaseValue(i)]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [20ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [79ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [39ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [2ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[i * 5]): success [133ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[i + 1]): success [2ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [72ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [103ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[i * 5]): success [99ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[i + 1]): success [3ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [67ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [74ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[i * 5]): success [171ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[i + 1]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [56ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[-i * 5]): success [6ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[i * 5]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[i + 1]): success [55ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [56ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [55ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [11ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [57ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [106ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [3ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [87ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [492ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [3ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [6ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [61ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [3ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i *

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

-i * 5]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.bitwiseDivByZeroSmokeTest(): success [10ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [35ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [59ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [136ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i * 5], mask[i % 2]): success [22ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[i % 2]): success [94ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [21ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[-i * 5], mask[true]): success [64ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i * 5], mask[true]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[true]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[-i * 5], mask[false]): success [4ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i * 5], mask[false]): success [4ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[false]): success [4ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[i * 5]): success [123ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[i + 1]): success [40ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [167ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [8ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [98ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [195ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [74ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [215ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [74ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [128ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [73ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [73ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [73ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [73ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i]): success [133ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i - length / 2]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i + 1]): success [96ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i - 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i]): success [65ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i + 1]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i - 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i + 1]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i - 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i - length / 2]): success [37ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i + 1]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i - 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i + 1]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i - 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[zigZag(i)]): success [58ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i + 1]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i - 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [90ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[i % 2]): success [22ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[i % 2]): success [89ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [20ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[true]): success [19ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[true]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[true]): success [2ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[false]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[-i * 5]): success [2ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[i * 5]): success [2ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[i + 1]): success [57ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[cornerCaseValue(i)]): success [1ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[-i * 5]): success [35ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[i * 5]): success [1ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[i + 1]): success [1ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(0): success [67ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(-1): success [1ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(1): success [16ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(2): success [1ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(-2): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(0): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(-1): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(1): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(2): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(-2): success [2ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(0): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(32): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(37): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1024): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1025): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1029): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(0): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(32): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(37): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1024): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1025): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1029): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i]): success [106ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i - length / 2]): success [90ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i + 1]): success [68ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i - 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i + 1]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i - 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i + 1]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i - 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i + 1]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i - 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i + 1]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i - 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i + 1]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i - 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.maskAndLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test LongMaxVectorTests.maskAndLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskAndNotLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test LongMaxVectorTests.maskAndNotLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[i % 2]): success [280ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[true]): success [83ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[false]): success [97ms]
test LongMaxVectorTests.maskEqLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test LongMaxVectorTests.maskEqLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskEqualsLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test LongMaxVectorTests.maskEqualsLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[i % 2]): success [77ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[true]): success [81ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[false]): success [24ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[i % 2]): success [84ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[true]): success [56ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[false]): success [41ms]
test LongMaxVectorTests.maskOrLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test LongMaxVectorTests.maskOrLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[i % 2]): success [31ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[true]): success [57ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[false]): success [24ms]
test LongMaxVectorTests.maskXorLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test LongMaxVectorTests.maskXorLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[-i * 5]): success [12ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[i * 5]): success [1ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[i + 1]): success [47ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[-i * 5]): success [17ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[i * 5]): success [1ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[i + 1]): success [51ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[i * 5]): success [8ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.shuffleEqualsLongMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [420ms]
test LongMaxVectorTests.shuffleEqualsLongMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [19ms]
test LongMaxVectorTests.shuffleMiscellaneousLongMaxVectorTestsSmokeTest(shuffle[random]): success [11ms]
test LongMaxVectorTests.shuffleTest(): success [353ms]
test LongMaxVectorTests.shuffleToStringLongMaxVectorTestsSmokeTest(shuffle[random]): success [56ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i * 5]): success [499ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i + 1]): success [43ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [220ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [118ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [42ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [269ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [44ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [44ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [45ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [48ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [44ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [44ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[-i * 5]): success [195ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[i * 5]): success [41ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[i + 1]): success [185ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[cornerCaseValue(i)]): success [40ms]
test LongMaxVectorTests.smokeTest1(): success [0ms]
test LongMaxVectorTests.smokeTest2(): success [72ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [0ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[-i * 5]): success [1ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [6ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i * 5]): success [204ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i + 1]): success [96ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [204ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [465ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [108ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [406ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [80ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [80ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [80ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [83ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [80ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [248ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[-i * 5]): success [195ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[i * 5]): success [39ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[i + 1]): success [167ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[cornerCaseValue(i)]): success [38ms]
test LongMaxVectorTests.viewAsFloatingLanesTest(): success [242ms]
test LongMaxVectorTests.viewAsIntegeralLanesTest(): success [0ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[i * 5]): success [17ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[i + 1]): success [17ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [90ms]

===============================================
jdk/incubator/vector/LongMaxVectorTests.java
Total tests run: 3317, Passes: 3316, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/LongMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/LongMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/LongMaxVectorTests.d/testng.0.jta jdk/incubator/vector/LongMaxVectorTests.java false LongMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Int64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.91 seconds
messages:
command: build Int64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:11:38 IST 2025
Test directory:
  compile: Int64VectorTests
finished: Wed Apr 16 18:11:39 IST 2025
elapsed time (seconds): 0.91

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.91 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:11:38 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 9
Process id: 1476260
finished: Wed Apr 16 18:11:39 IST 2025
elapsed time (seconds): 0.91
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Int64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Int64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Int64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
TIME:   462.476 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
started: Wed Apr 16 18:11:39 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1479760
finished: Wed Apr 16 18:19:21 IST 2025
elapsed time (seconds): 462.476
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 807107693963534330
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=807107693963534330" to command line.
test Int64VectorTests.ABSInt64VectorTests(int[-i * 5]): success [576ms]
test Int64VectorTests.ABSInt64VectorTests(int[i * 5]): success [24ms]
test Int64VectorTests.ABSInt64VectorTests(int[i + 1]): success [31ms]
test Int64VectorTests.ABSInt64VectorTests(int[cornerCaseValue(i)]): success [23ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [216ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [24ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [34ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i * 5]): success [300ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i + 1]): success [27ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [9ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [25ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [44ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [162ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [33ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[-i * 5]): success [122ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i * 5]): success [31ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i + 1]): success [33ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [4ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [135ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [6ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [73ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [49ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [15ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[-i * 5]): success [20ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[true]): success [9ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i * 5]): success [194ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [53ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [20ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [37ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [20ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [68ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [6ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [68ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[-i * 5]): success [134ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i + 1]): success [45ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [55ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [61ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [41ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [72ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [19ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [8ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [9ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [8ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [8ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [8ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [10ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i * 5]): success [199ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [63ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [133ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [39ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [82ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [8ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [9ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [9ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [9ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [45ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i * 5]): success [160ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i + 1]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [60ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [149ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [6ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [38ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [218ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [52ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[-i * 5]): success [49ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i * 5]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i + 1]): success [41ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [121ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [6ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [60ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [58ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [52ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [25ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [7ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [177ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [85ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [91ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [400ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [83ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [102ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): failure [67ms]
java.lang.AssertionError: at index #623, input1 = -3115, input2 = 2147483647, input3 = -3110, mask = false expected [-3115] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:907)
	at Int64VectorTests.assertBroadcastArraysEquals(Int64VectorTests.java:650)
	at Int64VectorTests.assertBroadcastArraysEquals(Int64VectorTests.java:638)
	at Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(Int64VectorTests.java:5614)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [10ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [23ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [117ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWIS

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

s [277ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i - 2], mask[false]): success [277ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[zigZag(i)], mask[false]): success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[cornerCaseValue(i)], mask[false]): success [282ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i], mask[false]): success [279ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i - length / 2], mask[false]): success [277ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i + 1], mask[false]): success [287ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i - 2], mask[false]): success [275ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[zigZag(i)], mask[false]): success [277ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [282ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[i * 5]): success [139ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [51ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [83ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [32ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[-i * 5]): success [126ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[i + 1]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[cornerCaseValue(i)]): success [47ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [99ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [71ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [136ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i * 5]): success [140ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i + 1]): success [55ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [4ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [74ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [33ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[-i * 5]): success [103ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i * 5]): success [33ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i + 1]): success [52ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [99ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [78ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [70ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [136ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.VectorShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.VectorTypeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithLanesInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i * 5]): success [63ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [54ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [74ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [68ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[-i * 5]): success [101ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i + 1]): success [46ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[cornerCaseValue(i)]): success [48ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [80ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [62ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [69ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [123ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[-i * 5]): success [238ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i * 5]): success [171ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i + 1]): success [172ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[cornerCaseValue(i)]): success [143ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [410ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [280ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [286ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [282ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[true]): success [281ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[true]): success [281ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[true]): success [282ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [316ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[false]): success [281ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[false]): success [324ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[false]): success [279ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [280ms]
test Int64VectorTests.ZeroInt64VectorTests(int[-i * 5]): success [129ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i * 5]): success [4ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.absInt64VectorTests(int[-i * 5]): success [70ms]
test Int64VectorTests.absInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.absInt64VectorTests(int[i + 1]): success [37ms]
test Int64VectorTests.absInt64VectorTests(int[cornerCaseValue(i)]): success [20ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i * 5]): success [42ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [47ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 2]): success [26ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 5]): success [19ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 2]): success [7ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [16ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [13ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [9ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseDivByZeroSmokeTest(): success [14ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[i % 2]): success [70ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[i % 2]): success [26ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[true]): success [62ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [28ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [56ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[i % 2]): success [256ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[i % 2]): success [88ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[i % 2]): success [122ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [85ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[true]): success [74ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[false]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[false]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[false]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [13ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i * 5]): success [310ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i + 1]): success [155ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [155ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [110ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [11ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [534ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [295ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [366ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [296ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [296ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [296ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [297ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [296ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [303ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i]): success [239ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - length / 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i + 1]): success [158ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - 2]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[zigZag(i)]): success [141ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i + 1]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - 2]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - length / 2]): success [147ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i + 1]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - 2]): success [147ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[zigZag(i)]): success [141ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - length / 2]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i + 1]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - 2]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[zigZag(i)]): success [141ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [142ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i + 1]): success [141ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - 2]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [147ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [141ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [2ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [10ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [60ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[i % 2]): success [202ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[i % 2]): success [85ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[i % 2]): success [84ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [84ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[false]): success [13ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[false]): success [13ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [13ms]
test Int64VectorTests.getInt64VectorTests(int[-i * 5]): success [35ms]
test Int64VectorTests.getInt64VectorTests(int[i * 5]): success [2ms]
test Int64VectorTests.getInt64VectorTests(int[i + 1]): success [2ms]
test Int64VectorTests.getInt64VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[-i * 5]): success [50ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i * 5]): success [21ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i + 1]): success [2ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(0): success [92ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-1): success [6ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(1): success [34ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(2): success [6ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-2): success [9ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(0): success [8ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-1): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(1): success [8ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(2): success [19ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-2): success [5ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(0): success [4ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(37): success [1ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i]): success [245ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - length / 2]): success [142ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i + 1]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - 2]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[zigZag(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i]): success [184ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i + 1]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [147ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - length / 2]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i + 1]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - 2]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[zigZag(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - length / 2]): success [148ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i + 1]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - 2]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[zigZag(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i]): success [141ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [147ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i + 1]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [141ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [141ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i]): success [3ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [7ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [2ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [64ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[i % 2]): success [227ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[true]): success [81ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[false]): success [60ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[true]): success [61ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[false]): success [20ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(-1): success [83ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[true]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[false]): success [0ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [66ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[true]): success [53ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[false]): success [33ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [24ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[i % 2]): success [30ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[true]): success [53ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[false]): success [21ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [39ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i * 5]): success [11ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [8ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[-i * 5]): success [61ms]
test Int64VectorTests.negInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[i + 1]): success [37ms]
test Int64VectorTests.negInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[-i * 5]): success [61ms]
test Int64VectorTests.notInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[i + 1]): success [43ms]
test Int64VectorTests.notInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [17ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [35ms]
test Int64VectorTests.shuffleMiscellaneousInt64VectorTestsSmokeTest(shuffle[random]): success [5ms]
test Int64VectorTests.shuffleTest(): success [280ms]
test Int64VectorTests.shuffleToStringInt64VectorTestsSmokeTest(shuffle[random]): success [49ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [849ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [165ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [165ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [482ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [169ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [168ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [286ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [168ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [167ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [197ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [176ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [174ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[-i * 5]): success [449ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i * 5]): success [155ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i + 1]): success [169ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [229ms]
test Int64VectorTests.smokeTest1(): success [0ms]
test Int64VectorTests.smokeTest2(): success [91ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [22ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[-i * 5]): success [8ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i * 5]): success [16ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i + 1]): success [6ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [465ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [410ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [159ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1058ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [318ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [324ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [481ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [333ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [340ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [342ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [316ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [325ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[-i * 5]): success [411ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i * 5]): success [215ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i + 1]): success [155ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [154ms]
test Int64VectorTests.viewAsFloatingLanesTest(): success [574ms]
test Int64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i * 5]): success [117ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i + 1]): success [65ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [64ms]

===============================================
jdk/incubator/vector/Int64VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Int64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Int64VectorTests.d/testng.0.jta jdk/incubator/vector/Int64VectorTests.java false Int64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/Byte512VectorTests.java
Passed: jdk/incubator/vector/Long64VectorTests.java
TEST: jdk/incubator/vector/Short128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.824 seconds
messages:
command: build Short128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:15:25 IST 2025
Test directory:
  compile: Short128VectorTests
finished: Wed Apr 16 18:15:25 IST 2025
elapsed time (seconds): 0.824

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.824 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:15:25 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 5
Process id: 1475894
finished: Wed Apr 16 18:15:25 IST 2025
elapsed time (seconds): 0.824
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short128VectorTests 
TIME:   498.063 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short128VectorTests 
started: Wed Apr 16 18:15:25 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1480843
finished: Wed Apr 16 18:23:43 IST 2025
elapsed time (seconds): 498.063
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 3203840930057679481
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=3203840930057679481" to command line.
test Short128VectorTests.ABSMaskedShort128VectorTests(short[-i * 5], mask[i % 2]): success [605ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i * 5], mask[i % 2]): success [80ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i + 1], mask[i % 2]): success [10ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[-i * 5], mask[true]): success [29ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i * 5], mask[true]): success [28ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i + 1], mask[true]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[-i * 5], mask[false]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ABSShort128VectorTests(short[-i * 5]): success [104ms]
test Short128VectorTests.ABSShort128VectorTests(short[i * 5]): success [51ms]
test Short128VectorTests.ABSShort128VectorTests(short[i + 1]): success [1ms]
test Short128VectorTests.ABSShort128VectorTests(short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[-i * 5]): success [85ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[i * 5]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[i + 1]): success [3ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[cornerCaseValue(i)]): success [11ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [12ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [13ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[-i * 5], mask[true]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [12ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [64ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[-i * 5]): success [151ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[i * 5]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[i + 1]): success [66ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[cornerCaseValue(i)]): success [10ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [101ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [87ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [18ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[-i * 5], mask[true]): success [5ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i * 5], mask[true]): success [5ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i + 1], mask[true]): success [6ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[-i * 5], mask[false]): success [5ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i * 5], mask[false]): success [4ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i + 1], mask[false]): success [80ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short128VectorTests.ADDShort128VectorTests(short[-i * 5], short[i * 5]): success [219ms]
test Short128VectorTests.ADDShort128VectorTests(short[-i * 5], short[i + 1]): success [60ms]
test Short128VectorTests.ADDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [17ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [25ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [15ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [12ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [35ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [95ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [65ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[-i * 5]): success [159ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[i * 5]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[i + 1]): success [67ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[cornerCaseValue(i)]): success [9ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [68ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [82ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i * 5], mask[false]): success [4ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short128VectorTests.ANDShort128VectorTests(short[-i * 5], short[i * 5]): success [203ms]
test Short128VectorTests.ANDShort128VectorTests(short[-i * 5], short[i + 1]): success [59ms]
test Short128VectorTests.ANDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [19ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [11ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [65ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [40ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTests(short[-i * 5], short[i * 5]): success [180ms]
test Short128VectorTests.AND_NOTShort128VectorTests(short[-i * 5], short[i + 1]): success [76ms]
test Short128VectorTests.AND_NOTShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [80ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [75ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [17ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTests(short[-i * 5], short[i * 5]): success [144ms]
test Short128VectorTests.ASHRShort128VectorTests(short[-i * 5], short[i + 1]): success [71ms]
test Short128VectorTests.ASHRShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [105ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [75ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [211ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [64ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[-i * 5]): success [43ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[i * 5]): success [62ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[i + 1]): success [0ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [118ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [57ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [15ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [51ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [6ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [79ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [121ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [91ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [410ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [4ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [5ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [107ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [79ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [66ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [7ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [44ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [22ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroad

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

rTests.UMAXShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.UMAXShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [12ms]
test Short128VectorTests.UMAXShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [63ms]
test Short128VectorTests.UMAXShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.UMAXShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.UMAXShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.UMAXShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.UMAXShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.UMAXShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.UMAXShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.UMINReduceShort128VectorTests(short[-i * 5]): success [102ms]
test Short128VectorTests.UMINReduceShort128VectorTests(short[i * 5]): success [15ms]
test Short128VectorTests.UMINReduceShort128VectorTests(short[i + 1]): success [64ms]
test Short128VectorTests.UMINReduceShort128VectorTests(short[cornerCaseValue(i)]): success [10ms]
test Short128VectorTests.UMINReduceShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [67ms]
test Short128VectorTests.UMINReduceShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short128VectorTests.UMINReduceShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [82ms]
test Short128VectorTests.UMINReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Short128VectorTests.UMINReduceShort128VectorTestsMasked(short[-i * 5], mask[true]): success [2ms]
test Short128VectorTests.UMINReduceShort128VectorTestsMasked(short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.UMINReduceShort128VectorTestsMasked(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.UMINReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.UMINReduceShort128VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short128VectorTests.UMINReduceShort128VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.UMINReduceShort128VectorTestsMasked(short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.UMINReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [28ms]
test Short128VectorTests.UMINShort128VectorTests(short[-i * 5], short[i * 5]): success [87ms]
test Short128VectorTests.UMINShort128VectorTests(short[-i * 5], short[i + 1]): success [76ms]
test Short128VectorTests.UMINShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [12ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [64ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.VectorShapeShort128VectorTestsSmokeTest(): success [0ms]
test Short128VectorTests.VectorTypeShort128VectorTestsSmokeTest(): success [0ms]
test Short128VectorTests.WithLanesShort128VectorTestsSmokeTest(): success [0ms]
test Short128VectorTests.WithShapeShort128VectorTestsSmokeTest(): success [0ms]
test Short128VectorTests.XORReduceShort128VectorTests(short[-i * 5]): success [95ms]
test Short128VectorTests.XORReduceShort128VectorTests(short[i * 5]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTests(short[i + 1]): success [62ms]
test Short128VectorTests.XORReduceShort128VectorTests(short[cornerCaseValue(i)]): success [8ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [64ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [81ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [15ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[-i * 5], mask[true]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [28ms]
test Short128VectorTests.XORShort128VectorTests(short[-i * 5], short[i * 5]): success [12ms]
test Short128VectorTests.XORShort128VectorTests(short[-i * 5], short[i + 1]): success [80ms]
test Short128VectorTests.XORShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [12ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [64ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[-i * 5], mask[i % 2]): success [363ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i * 5], mask[i % 2]): success [412ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i + 1], mask[i % 2]): success [341ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [307ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[-i * 5], mask[true]): success [306ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i * 5], mask[true]): success [310ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i + 1], mask[true]): success [307ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [307ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[-i * 5], mask[false]): success [306ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i * 5], mask[false]): success [306ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i + 1], mask[false]): success [307ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [307ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[-i * 5]): success [233ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[i * 5]): success [234ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[i + 1]): success [154ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[cornerCaseValue(i)]): success [153ms]
test Short128VectorTests.ZeroShort128VectorTests(short[-i * 5]): success [121ms]
test Short128VectorTests.ZeroShort128VectorTests(short[i * 5]): success [33ms]
test Short128VectorTests.ZeroShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.ZeroShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.absShort128VectorTests(short[-i * 5]): success [19ms]
test Short128VectorTests.absShort128VectorTests(short[i * 5]): success [64ms]
test Short128VectorTests.absShort128VectorTests(short[i + 1]): success [1ms]
test Short128VectorTests.absShort128VectorTests(short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.addShort128VectorTests(short[-i * 5], short[i * 5]): success [35ms]
test Short128VectorTests.addShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.addShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [73ms]
test Short128VectorTests.addShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [30ms]
test Short128VectorTests.addShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.allTrueShort128VectorTests(boolean[i % 2]): success [21ms]
test Short128VectorTests.allTrueShort128VectorTests(boolean[i % 5]): success [22ms]
test Short128VectorTests.andShort128VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.andShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.andShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.andShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.andShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.andShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.anyTrueShort128VectorTests(boolean[i % 2]): success [11ms]
test Short128VectorTests.anyTrueShort128VectorTests(boolean[i % 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [51ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [71ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [70ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [71ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseDivByZeroSmokeTest(): success [12ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [30ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [58ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [41ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [61ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.compressShort128VectorTests(short[-i * 5], mask[i % 2]): success [273ms]
test Short128VectorTests.compressShort128VectorTests(short[i * 5], mask[i % 2]): success [212ms]
test Short128VectorTests.compressShort128VectorTests(short[i + 1], mask[i % 2]): success [140ms]
test Short128VectorTests.compressShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [139ms]
test Short128VectorTests.compressShort128VectorTests(short[-i * 5], mask[true]): success [92ms]
test Short128VectorTests.compressShort128VectorTests(short[i * 5], mask[true]): success [6ms]
test Short128VectorTests.compressShort128VectorTests(short[i + 1], mask[true]): success [6ms]
test Short128VectorTests.compressShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short128VectorTests.compressShort128VectorTests(short[-i * 5], mask[false]): success [10ms]
test Short128VectorTests.compressShort128VectorTests(short[i * 5], mask[false]): success [10ms]
test Short128VectorTests.compressShort128VectorTests(short[i + 1], mask[false]): success [10ms]
test Short128VectorTests.compressShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [10ms]
test Short128VectorTests.divShort128VectorTests(short[-i * 5], short[i * 5]): success [242ms]
test Short128VectorTests.divShort128VectorTests(short[-i * 5], short[i + 1]): success [282ms]
test Short128VectorTests.divShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [161ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [109ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [24ms]
test Short128VectorTests.divShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short128VectorTests.divShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [437ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [446ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [319ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [318ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [318ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [320ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [318ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [318ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [318ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i]): success [223ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i - length / 2]): success [189ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i + 1]): success [162ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i - 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[zigZag(i)]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i - length / 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i + 1]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i - 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[zigZag(i)]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i - length / 2]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i + 1]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i - 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[zigZag(i)]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i]): success [170ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i - length / 2]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i + 1]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i - 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[zigZag(i)]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i - length / 2]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i + 1]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i - 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[zigZag(i)]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [61ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [9ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.expandShort128VectorTests(short[-i * 5], mask[i % 2]): success [229ms]
test Short128VectorTests.expandShort128VectorTests(short[i * 5], mask[i % 2]): success [207ms]
test Short128VectorTests.expandShort128VectorTests(short[i + 1], mask[i % 2]): success [139ms]
test Short128VectorTests.expandShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [144ms]
test Short128VectorTests.expandShort128VectorTests(short[-i * 5], mask[true]): success [35ms]
test Short128VectorTests.expandShort128VectorTests(short[i * 5], mask[true]): success [6ms]
test Short128VectorTests.expandShort128VectorTests(short[i + 1], mask[true]): success [6ms]
test Short128VectorTests.expandShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short128VectorTests.expandShort128VectorTests(short[-i * 5], mask[false]): success [10ms]
test Short128VectorTests.expandShort128VectorTests(short[i * 5], mask[false]): success [10ms]
test Short128VectorTests.expandShort128VectorTests(short[i + 1], mask[false]): success [10ms]
test Short128VectorTests.expandShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [10ms]
test Short128VectorTests.getShort128VectorTests(short[-i * 5]): success [8ms]
test Short128VectorTests.getShort128VectorTests(short[i * 5]): success [100ms]
test Short128VectorTests.getShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.getShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[-i * 5]): success [41ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[i + 1]): success [5ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [9ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(0): success [71ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(-1): success [5ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(1): success [21ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(2): success [4ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(-2): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(0): success [5ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(-1): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(1): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(2): success [5ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(-2): success [4ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(0): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(32): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(37): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1024): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1025): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1029): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(0): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(32): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(37): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1024): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1025): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1029): success [0ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i]): success [221ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i - length / 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i + 1]): success [161ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i - 2]): success [165ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[zigZag(i)]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[cornerCaseValue(i)]): success [163ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i - length / 2]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i + 1]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i - 2]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[zigZag(i)]): success [192ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [161ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i]): success [160ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i - length / 2]): success [160ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i + 1]): success [163ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i - 2]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[zigZag(i)]): success [173ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [163ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i - length / 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i + 1]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i - 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[zigZag(i)]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [160ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i]): success [161ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i - length / 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i + 1]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i - 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[zigZag(i)]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i]): success [188ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [63ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.maskAndNotShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Short128VectorTests.maskAndNotShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskAndShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short128VectorTests.maskAndShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskCompressShort128VectorTestsSmokeTest(mask[i % 2]): success [314ms]
test Short128VectorTests.maskCompressShort128VectorTestsSmokeTest(mask[true]): success [134ms]
test Short128VectorTests.maskCompressShort128VectorTestsSmokeTest(mask[false]): success [144ms]
test Short128VectorTests.maskEqShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short128VectorTests.maskEqShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskEqualsShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short128VectorTests.maskEqualsShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskFirstTrueShort128VectorTestsSmokeTest(mask[i % 2]): success [48ms]
test Short128VectorTests.maskFirstTrueShort128VectorTestsSmokeTest(mask[true]): success [70ms]
test Short128VectorTests.maskFirstTrueShort128VectorTestsSmokeTest(mask[false]): success [37ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(-1): success [64ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(0): success [0ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short128VectorTests.maskHashCodeShort128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Short128VectorTests.maskHashCodeShort128VectorTestsSmokeTest(mask[true]): success [0ms]
test Short128VectorTests.maskHashCodeShort128VectorTestsSmokeTest(mask[false]): success [5ms]
test Short128VectorTests.maskLastTrueShort128VectorTestsSmokeTest(mask[i % 2]): success [87ms]
test Short128VectorTests.maskLastTrueShort128VectorTestsSmokeTest(mask[true]): success [69ms]
test Short128VectorTests.maskLastTrueShort128VectorTestsSmokeTest(mask[false]): success [55ms]
test Short128VectorTests.maskOrShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test Short128VectorTests.maskOrShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskTrueCountShort128VectorTestsSmokeTest(mask[i % 2]): success [46ms]
test Short128VectorTests.maskTrueCountShort128VectorTestsSmokeTest(mask[true]): success [69ms]
test Short128VectorTests.maskTrueCountShort128VectorTestsSmokeTest(mask[false]): success [37ms]
test Short128VectorTests.maskXorShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short128VectorTests.maskXorShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maxShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.maxShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.maxShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.maxShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.maxShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short128VectorTests.maxShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.minShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.minShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.minShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.minShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.minShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.minShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.mulShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.mulShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.mulShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.negShort128VectorTests(short[-i * 5]): success [41ms]
test Short128VectorTests.negShort128VectorTests(short[i * 5]): success [66ms]
test Short128VectorTests.negShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.negShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.notShort128VectorTests(short[-i * 5]): success [19ms]
test Short128VectorTests.notShort128VectorTests(short[i * 5]): success [72ms]
test Short128VectorTests.notShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.notShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.orShort128VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short128VectorTests.orShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.orShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.orShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.orShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.orShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.shuffleEqualsShort128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [517ms]
test Short128VectorTests.shuffleEqualsShort128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [129ms]
test Short128VectorTests.shuffleMiscellaneousShort128VectorTestsSmokeTest(shuffle[random]): success [198ms]
test Short128VectorTests.shuffleTest(): success [504ms]
test Short128VectorTests.shuffleToStringShort128VectorTestsSmokeTest(shuffle[random]): success [85ms]
test Short128VectorTests.sliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i * 5]): success [802ms]
test Short128VectorTests.sliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i + 1]): success [402ms]
test Short128VectorTests.sliceBinaryShort128VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [162ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [247ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [368ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [199ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [163ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [163ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [163ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [164ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [181ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [163ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[-i * 5]): success [315ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[i * 5]): success [289ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[i + 1]): success [224ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.smokeTest1(): success [0ms]
test Short128VectorTests.smokeTest2(): success [78ms]
test Short128VectorTests.subShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.subShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.subShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.subShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[-i * 5]): success [2ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[i + 1]): success [7ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[i + 1]): success [18ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[-i * 5]): success [2ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[i * 5]): success [13ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[i + 1]): success [49ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.unsliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i * 5]): success [319ms]
test Short128VectorTests.unsliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i + 1]): success [317ms]
test Short128VectorTests.unsliceBinaryShort128VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [289ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [698ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [639ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [320ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [321ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [468ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [319ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [321ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [489ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [319ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[-i * 5]): success [292ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[i * 5]): success [292ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[i + 1]): success [158ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.viewAsFloatingLanesTest(): success [24ms]
test Short128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short128VectorTests.withShort128VectorTests(short[-i * 5], short[i * 5]): success [48ms]
test Short128VectorTests.withShort128VectorTests(short[-i * 5], short[i + 1]): success [138ms]
test Short128VectorTests.withShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [32ms]

===============================================
jdk/incubator/vector/Short128VectorTests.java
Total tests run: 3598, Passes: 3596, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Short128VectorTests.d/testng.0.jta jdk/incubator/vector/Short128VectorTests.java false Short128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Short512VectorTests.java
TEST: jdk/incubator/vector/Short64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.941 seconds
messages:
command: build Short64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:16:28 IST 2025
Test directory:
  compile: Short64VectorTests
finished: Wed Apr 16 18:16:29 IST 2025
elapsed time (seconds): 0.941

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.941 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:16:28 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 12
Process id: 1476519
finished: Wed Apr 16 18:16:29 IST 2025
elapsed time (seconds): 0.941
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests 
TIME:   631.438 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests 
started: Wed Apr 16 18:16:29 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1481207
finished: Wed Apr 16 18:27:00 IST 2025
elapsed time (seconds): 631.438
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 6084558249392463152
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=6084558249392463152" to command line.
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[i % 2]): success [639ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[i % 2]): success [30ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[i % 2]): success [43ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [29ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[true]): success [28ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[true]): success [3ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[true]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[false]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[false]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.ABSShort64VectorTests(short[-i * 5]): success [127ms]
test Short64VectorTests.ABSShort64VectorTests(short[i * 5]): success [27ms]
test Short64VectorTests.ABSShort64VectorTests(short[i + 1]): success [46ms]
test Short64VectorTests.ABSShort64VectorTests(short[cornerCaseValue(i)]): success [24ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[-i * 5]): success [86ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[i * 5]): success [3ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[i + 1]): success [3ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[cornerCaseValue(i)]): success [12ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [13ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[true]): success [12ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[false]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[false]): success [10ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[false]): success [63ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[-i * 5]): success [131ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[i * 5]): success [5ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[i + 1]): success [46ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[cornerCaseValue(i)]): success [65ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [98ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [23ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [33ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [29ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[true]): success [84ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[true]): success [4ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[true]): success [4ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[i * 5]): success [260ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [53ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [17ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [26ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [6ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [14ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [33ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [9ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [146ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [68ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [32ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[-i * 5]): success [143ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[i * 5]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[i + 1]): success [46ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[cornerCaseValue(i)]): success [66ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [83ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [6ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [63ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [85ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[true]): success [6ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[true]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[true]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [19ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[false]): success [39ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[i * 5]): success [156ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [53ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [20ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [37ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [20ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [8ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [69ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [32ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [68ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [39ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[i * 5]): success [213ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [62ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [143ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [79ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[i * 5]): success [164ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[i + 1]): success [3ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [59ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [190ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [8ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [80ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [8ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [85ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [6ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [254ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [54ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[-i * 5]): success [90ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[i * 5]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[i + 1]): success [53ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [119ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [57ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [30ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [7ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [107ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [6ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [55ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [8ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [46ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [24ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [199ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [39ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [95ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [440ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [22ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [2ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [2ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [2ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [2ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [106ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [78ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [10ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [45ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [23ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

: success [0ms]
test Short64VectorTests.addShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [76ms]
test Short64VectorTests.addShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [39ms]
test Short64VectorTests.addShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [9ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.allTrueShort64VectorTests(boolean[i % 2]): success [26ms]
test Short64VectorTests.allTrueShort64VectorTests(boolean[i % 5]): success [21ms]
test Short64VectorTests.andShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.andShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.andShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.andShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.andShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.andShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.anyTrueShort64VectorTests(boolean[i % 2]): success [7ms]
test Short64VectorTests.anyTrueShort64VectorTests(boolean[i % 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [43ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [55ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [70ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [67ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [68ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseDivByZeroSmokeTest(): success [16ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [94ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[true]): success [62ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [106ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [31ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [64ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[i % 2]): success [314ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[i % 2]): success [146ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[i % 2]): success [144ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [146ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[true]): success [86ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[true]): success [11ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[true]): success [11ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [11ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[false]): success [79ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[false]): success [16ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[false]): success [15ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [15ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[i * 5]): success [362ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[i + 1]): success [209ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [271ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [110ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [19ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [12ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [648ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [436ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [405ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [402ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [476ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [403ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [402ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [401ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [402ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i]): success [303ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i - length / 2]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i + 1]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i - 2]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[zigZag(i)]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[cornerCaseValue(i)]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i]): success [206ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i - length / 2]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i + 1]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i - 2]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[zigZag(i)]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i - length / 2]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i + 1]): success [200ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i - 2]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[zigZag(i)]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i - length / 2]): success [198ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i + 1]): success [198ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i - 2]): success [200ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[zigZag(i)]): success [200ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i]): success [216ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i - length / 2]): success [198ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i + 1]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i - 2]): success [200ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[zigZag(i)]): success [205ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [199ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [59ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [32ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [10ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[i % 2]): success [269ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[i % 2]): success [149ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[i % 2]): success [149ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [149ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[true]): success [35ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[true]): success [12ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[true]): success [13ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [13ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[false]): success [17ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[false]): success [17ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[false]): success [79ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [48ms]
test Short64VectorTests.getShort64VectorTests(short[-i * 5]): success [55ms]
test Short64VectorTests.getShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.getShort64VectorTests(short[i + 1]): success [0ms]
test Short64VectorTests.getShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[-i * 5]): success [15ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[i * 5]): success [11ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[i + 1]): success [23ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [10ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(0): success [93ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(-1): success [7ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(1): success [28ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(2): success [7ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(-2): success [7ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(0): success [7ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(-1): success [7ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(1): success [7ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(2): success [17ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(-2): success [6ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(32): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(37): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1024): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1025): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1029): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(32): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(37): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1024): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1025): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1029): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i]): success [301ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i - length / 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i + 1]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i - 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[zigZag(i)]): success [204ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[cornerCaseValue(i)]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i - length / 2]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i + 1]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i - 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[zigZag(i)]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i - length / 2]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i + 1]): success [213ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i - 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[zigZag(i)]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [202ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i]): success [210ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i - length / 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i + 1]): success [199ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i - 2]): success [199ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[zigZag(i)]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i - length / 2]): success [205ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i + 1]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i - 2]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[zigZag(i)]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i]): success [228ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [199ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [196ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [59ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [32ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.maskAndNotShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Short64VectorTests.maskAndNotShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskAndShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Short64VectorTests.maskAndShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[i % 2]): success [258ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[true]): success [120ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[false]): success [82ms]
test Short64VectorTests.maskEqShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Short64VectorTests.maskEqShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskEqualsShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short64VectorTests.maskEqualsShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[i % 2]): success [40ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[true]): success [59ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[false]): success [26ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(-1): success [80ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[i % 2]): success [5ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[true]): success [0ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[false]): success [0ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[i % 2]): success [74ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[true]): success [58ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[false]): success [41ms]
test Short64VectorTests.maskOrShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [23ms]
test Short64VectorTests.maskOrShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[i % 2]): success [35ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[true]): success [59ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[false]): success [27ms]
test Short64VectorTests.maskXorShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Short64VectorTests.maskXorShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.negShort64VectorTests(short[-i * 5]): success [55ms]
test Short64VectorTests.negShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.negShort64VectorTests(short[i + 1]): success [39ms]
test Short64VectorTests.negShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.notShort64VectorTests(short[-i * 5]): success [62ms]
test Short64VectorTests.notShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.notShort64VectorTests(short[i + 1]): success [45ms]
test Short64VectorTests.notShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[i * 5]): success [9ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.shuffleEqualsShort64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [739ms]
test Short64VectorTests.shuffleEqualsShort64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [179ms]
test Short64VectorTests.shuffleMiscellaneousShort64VectorTestsSmokeTest(shuffle[random]): success [274ms]
test Short64VectorTests.shuffleTest(): success [351ms]
test Short64VectorTests.shuffleToStringShort64VectorTestsSmokeTest(shuffle[random]): success [178ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i * 5]): success [750ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i + 1]): success [206ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [205ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [477ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [334ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [306ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [208ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [217ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [224ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [208ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [226ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [208ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[-i * 5]): success [463ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[i * 5]): success [207ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[i + 1]): success [266ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[cornerCaseValue(i)]): success [200ms]
test Short64VectorTests.smokeTest1(): success [0ms]
test Short64VectorTests.smokeTest2(): success [106ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [8ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [22ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[-i * 5]): success [10ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[i * 5]): success [27ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[i + 1]): success [53ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i * 5]): success [505ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i + 1]): success [336ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [204ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [1112ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [407ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [436ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [559ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [407ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [439ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [420ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [409ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [407ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[-i * 5]): success [461ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[i * 5]): success [201ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[i + 1]): success [200ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[cornerCaseValue(i)]): success [268ms]
test Short64VectorTests.viewAsFloatingLanesTest(): success [29ms]
test Short64VectorTests.viewAsIntegeralLanesTest(): success [7ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[i * 5]): success [129ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[i + 1]): success [65ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [65ms]

===============================================
jdk/incubator/vector/Short64VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Short64VectorTests.d/testng.0.jta jdk/incubator/vector/Short64VectorTests.java false Short64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Vector128ConversionTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
TEST: jdk/incubator/vector/VectorMaxConversionTests.java#Z
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.91 seconds
messages:
command: build VectorMaxConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 18:19:45 IST 2025
Test directory:
  compile: VectorMaxConversionTests
finished: Wed Apr 16 18:19:46 IST 2025
elapsed time (seconds): 0.91

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.91 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:19:45 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 8
Process id: 1476167
finished: Wed Apr 16 18:19:46 IST 2025
elapsed time (seconds): 0.91
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/VectorMaxConversionTests_Z.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorMaxConversionTests.java#Z \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions VectorMaxConversionTests 
TIME:   736.838 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions VectorMaxConversionTests
reason: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions VectorMaxConversionTests 
started: Wed Apr 16 18:19:46 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1481812
finished: Wed Apr 16 18:32:03 IST 2025
elapsed time (seconds): 736.838
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [768ms]
castShape took 765 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@546e0bd): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 4, S_64_BIT], byte(i)): success [1155ms]
castShape took 1155 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@632e496b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 2, S_64_BIT], byte(i)): success [1022ms]
castShape took 1022 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e891bf): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 1, S_64_BIT], byte(i)): success [391ms]
castShape took 391 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a5e4d08): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 2, S_64_BIT], byte(i)): success [120ms]
castShape took 120 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f6118d8): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 1, S_64_BIT], byte(i)): success [111ms]
castShape took 111 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55eeea8b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [1735ms]
castShape took 1735 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@528d38e7): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 8, S_128_BIT], byte(i)): success [1060ms]
castShape took 1056 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cbe3618): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 4, S_128_BIT], byte(i)): success [1158ms]
castShape took 1158 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f8a8aba): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 2, S_128_BIT], byte(i)): success [978ms]
castShape took 979 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c722680): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 4, S_128_BIT], byte(i)): success [180ms]
castShape took 180 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67c6164): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 2, S_128_BIT], byte(i)): success [174ms]
castShape took 174 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b82f96e): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [3946ms]
castShape took 3946 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@71fe33e2): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 16, S_256_BIT], byte(i)): success [394ms]
castShape took 394 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@aae3445): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 8, S_256_BIT], byte(i)): success [1004ms]
castShape took 1005 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f5fc3e1): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 4, S_256_BIT], byte(i)): success [141ms]
castShape took 141 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@286ac55): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 8, S_256_BIT], byte(i)): success [782ms]
castShape took 782 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b5f9dfc): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 4, S_256_BIT], byte(i)): success [145ms]
castShape took 145 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6a61fc87): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [10365ms]
castShape took 10365 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@56deba7b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 32, S_512_BIT], byte(i)): success [2849ms]
castShape took 2849 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f089e5a): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 16, S_512_BIT], byte(i)): success [327ms]
castShape took 327 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@294ff63b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 8, S_512_BIT], byte(i)): success [122ms]
castShape took 122 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79e9a6e0): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 16, S_512_BIT], byte(i)): success [146ms]
castShape took 146 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63e75858): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 8, S_512_BIT], byte(i)): success [129ms]
castShape took 130 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@693101f): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [435ms]
castShape took 435 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26ddddeb): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [133ms]
castShape took 132 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75f408dd): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [124ms]
castShape took 124 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59d0e70b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [121ms]
castShape took 121 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@499f8b43): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [128ms]
castShape took 128 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7848b175): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [128ms]
castShape took 128 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48926f03): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 8, S_64_BIT], short(i)): success [1859ms]
castShape took 1859 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f44746e): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 4, S_64_BIT], short(i)): success [3240ms]
castShape took 3240 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49f40d9c): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 2, S_64_BIT], short(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@783e0a85): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 1, S_64_BIT], short(i)): success [864ms]
castShape took 865 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@682f65d6): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 2, S_64_BIT], short(i)): success [11ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31a601ce): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 1, S_64_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c25a547): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 16, S_128_BIT], short(i)): success [2067ms]
castShape took 2065 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@36a18f0a): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 8, S_128_BIT], short(i)): success [1164ms]
castShape took 1165 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c351bca): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 4, S_128_BIT], short(i)): success [24ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bdbaf30): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 2, S_128_BIT], short(i)): success [22ms]
castShape took 22 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3a4086a8): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 4, S_128_BIT], short(i)): success [24ms]
castShape took 25 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13ad0ef5): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 2, S_128_BIT], short(i)): success [24ms]
castShape took 22 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4278f552): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 32, S_256_BIT], short(i)): success [2553ms]
castShape took 2553 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10f3b8c6): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 16, S_256_BIT], short(i)): success [4442ms]
castShape took 4442 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@733cf401): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 8, S_256_BIT], short(i)): success [88ms]
castShape took 88 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@73d0dbaa): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 4, S_256_BIT], short(i)): success [79ms]
castShape took 79 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2427b770): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 8, S_256_BIT], short(i)): success [85ms]
castShape took 86 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dd5f6a7): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 4, S_256_BIT], short(i)): success [78ms]
castShape took 67 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6197d613): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 64, S_512_BIT], short(i)): success [6040ms]
castShape took 6040 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5017cc66): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 32, S_512_BIT], short(i)): success [2712ms]
castShape took 2713 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64047a52): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 16, S_512_BIT], short(i)): success [3370ms]
castShape took 3370 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8f4dbee): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 8, S_512_BIT], short(i)): success [874ms]
castShape took 875 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76693731): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 16, S_512_BIT], short(i)): success [2446ms]
castShape took 2446 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2de896d8): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 8, S_512_BIT], short(i)): success [83ms]
castShape took 84 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d8aba90): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [1193ms]
castShape took 1194 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6a41deb9): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 8, S_Max_BIT], short(i)): success [357ms]
castShape took 357 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@138c98cb): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 4, S_Max_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@196a447d): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 2, S_Max_BIT], short(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e7dae31): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 4, S_Max_BIT], short(i)): success [19ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f9c6bb): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 2, S_Max_BIT], short(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@58d3315b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2442ms]
castShape took 2442 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e9d92e): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 4, S_64_BIT], int(i)): success [455ms]
castShape took 455 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bbd5bf9): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 2, S_64_BIT], int(i)): success [799ms]
castShape took 800 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@257058f7): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 1, S_64_BIT], int(i)): success [219ms]
castShape took 218 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29f4f73e): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 2, S_64_BIT], int(i)): success [9ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b6a43c1): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 1, S_64_BIT], int(i)): success [11ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@28672e5b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 16, S_128_BIT], int(i)): success [566ms]
castShape took 566 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e78cab): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 8, S_128_BIT], int(i)): success [2572ms]
castShape took 2572 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11c71e54): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 4, S_128_BIT], int(i)): success [684ms]
castShape took 683 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37754ff7): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 2, S_128_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1936d71f): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 4, S_128_BIT], int(i)): success [16ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e24b32c): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 2, S_128_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cfd144a): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 32, S_256_BIT], int(i)): success [3445ms]
castShape took 3446 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53b9fe3b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 16, S_256_BIT], int(i)): success [2554ms]
castShape took 2554 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7190904f): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 8, S_256_BIT], int(i)): success [3762ms]
castShape took 3762 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@493118aa): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 4, S_256_BIT], int(i)): success [107ms]
castShape took 107 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d40da): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 8, S_256_BIT], int(i)): success [2383ms]
castShape took 2383 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6cf8b59d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 4, S_256_BIT], int(i)): success [105ms]
castShape took 105 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6d5c6722): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 64, S_512_BIT], int(i)): success [6806ms]
castShape took 6806 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c0efb4b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 32, S_512_BIT], int(i)): success [3892ms]
castShape took 3893 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55af1bc1): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 16, S_512_BIT], int(i)): success [2345ms]
castShape took 2345 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ebde77d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 8, S_512_BIT], int(i)): success [3074ms]
castShape took 3075 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@196b41fc): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 16, S_512_BIT], int(i)): success [2480ms]
castShape took 2480 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f692133): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 8, S_512_BIT], int(i)): success [2497ms]
castShape took 2497 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ead2c00): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [518ms]
castShape took 519 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e0ee11b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 8, S_Max_BIT], int(i)): success [1030ms]
castShape took 1030 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d86730d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 4, S_Max_BIT], int(i)): success [220ms]
castShape took 220 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23868d8a): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@340a9b10): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 4, S_Max_BIT], int(i)): success [11ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d444342): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@503c10a6): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 8, S_64_BIT], long(i)): success [787ms]
castShape took 787 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f3456a5): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 4, S_64_BIT], long(i)): success [1067ms]
castShape took 1068 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@bdc2f79): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 2, S_64_BIT], long(i)): success [488ms]
castShape took 488 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12c07d5f): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 1, S_64_BIT], long(i)): success [1041ms]
castShape took 1041 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b35aaff): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 2, S_64_BIT], long(i)): success [17ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@509097b3): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 1, S_64_BIT], long(i)): success [21ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e2517eb): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 16, S_128_BIT], long(i)): success [1104ms]
castShape took 1105 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6341bb9b): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 8, S_128_BIT], long(i)): success [579ms]
castShape took 579 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d4c601a): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 4, S_128_BIT], long(i)): success [2174ms]
castShape took 2174 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@208ad9db): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 2, S_128_BIT], long(i)): success [1420ms]
castShape took 1420 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16bd3d7): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 4, S_128_BIT], long(i)): success [1357ms]
castShape took 1356 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cf4db3a): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 2, S_128_BIT], long(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e8438fd): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 32, S_256_BIT], long(i)): success [7022ms]
castShape took 7022 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ddc58db): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 16, S_256_BIT], long(i)): success [4350ms]
castShape took 4350 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d67dfeb): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 8, S_256_BIT], long(i)): success [3208ms]
castShape took 3208 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@390794f6): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 4, S_256_BIT], long(i)): success [4461ms]
castShape took 4461 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@723b1bff): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 8, S_256_BIT], long(i)): success [3534ms]
castShape took 3535 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@634db3b1): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 4, S_256_BIT], long(i)): success [3203ms]
castShape took 3203 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3901e750): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 64, S_512_BIT], long(i)): success [13682ms]
castShape took 13683 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6c069932): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 32, S_512_BIT], long(i)): success [7281ms]
castShape took 7282 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3095b2d5): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 16, S_512_BIT], long(i)): success [4290ms]
castShape took 4293 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5883c5fd): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 8, S_512_BIT], long(i)): success [3375ms]
castShape took 3373 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@148f7eea): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 16, S_512_BIT], long(i)): success [4731ms]
castShape took 4731 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1684057): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 8, S_512_BIT], long(i)): success [3252ms]
castShape took 3252 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@185a9bbc): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [1041ms]
castShape took 1040 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b94d56d): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 8, S_Max_BIT], long(i)): success [604ms]
castShape took 604 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@125efa25): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 4, S_Max_BIT], long(i)): success [1084ms]
castShape took 1085 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1db55109): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 2, S_Max_BIT], long(i)): success [302ms]
castShape took 302 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27c8f2a0): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1178ms]
castShape took 1179 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8797093): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 2, S_Max_BIT], long(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30bf99a6): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1490ms]
castShape took 1490 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3021da2): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[short, 4, S_64_BIT], float(i)): success [1922ms]
castShape took 1922 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7531af5): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[int, 2, S_64_BIT], float(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c2655b1): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[long, 1, S_64_BIT], float(i)): success [1006ms]
castShape took 1006 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a11d6e8): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[float, 2, S_64_BIT], float(i)): success [544ms]
castShape took 544 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1a7b4143): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[double, 1, S_64_BIT], float(i)): success [6ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@618dd67f): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 16, S_128_BIT], float(i)): success [527ms]
castShape took 528 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e5e34f8): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[short, 8, S_128_BIT], float(i)): success [285ms]
castShape took 284 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f71e650): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[int, 4, S_128_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78606223): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[long, 2, S_128_BIT], float(i)): success [1852ms]
castShape took 1852 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27d12396): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[float, 4, S_128_BIT], float(i)): success [259ms]
castShape took 260 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3eda87de): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[double, 2, S_128_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f1e78eb): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 32, S_256_BIT], float(i)): success [3421ms]
castShape took 3422 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6807ea46): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

nt, 4, S_Max_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c3da006): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[float, 4, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b49dd1e): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[int, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e568605): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[float, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d592542): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[long, 2, S_128_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9a245e9): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[double, 2, S_128_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@284e7903): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@541885e1): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2a0ef22b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5ff8af5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@315ca928): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c10d27c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50deebc7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25497aa7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e312a12): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29ca0791): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34b11482): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c8b0070): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 5 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dc2b4a3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f32cbdf): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bd29d38): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f66f336): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69442165): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a6b811b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16462e67): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1305d893): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@611dd57b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e10bd83): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7869de30): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21b122bc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63e67cfa): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12838755): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@520bb97d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19452de4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44a14bf9): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76807c8e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fee6e6): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@647c6831): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29211322): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@579b4a3f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d284e15): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c7d3ead): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@400db070): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7699a09d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74740bab): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fd6c0fa): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6feeb1fd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 48 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@620f40bc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5da168a1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7232626d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@310841cb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c2d8368): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e1c5ece): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e3a6e7c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45e78690): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2205ea40): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8a727bc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6318a5a8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c40b2a2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14c144a2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f179f4f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@470c46ea): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6d342060): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@265b629d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15bd7f52): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@419b05f9): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5517cc1b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3eda3697): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d3e072d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f0ffaec): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77e5a132): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17949e9d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3988d3f8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b163976): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17c7e714): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3cc04052): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d89c2c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@73eeb132): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c528f7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@383e0d5f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9fe9a00): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59d6c46): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@22a27d28): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f535136): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f9bfcfb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c10253e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e668e15): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@202c21b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5004148b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7af2dadd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@418e75b3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65023999): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12722c53): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ea8f6be): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d7684b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27f99e8e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3952f3fd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@60ec4a15): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3cb7d633): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@601d418a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50eb255c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20b0cb6d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8599b0): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5262d71e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b4e3b02): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57fd5bc2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59ad3e2c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6afa8cf7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65531e6f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b90d7cc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b6ac88d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@58b1a220): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b49e09e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a453e23): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4be00ed8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3653f2c1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78f79419): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@170a18fe): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3685fc68): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e6656e2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2281c8fb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@348ca2f8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53f9aca5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7381c21d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@959ed1e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ffb23c1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12124d4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@197e67f1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6651c590): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e121581): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a1d2b5f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6db5cb1d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c153a5d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17611355): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b9c9f1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@35873b71): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 16, S_256_BIT]): success [1ms]
shuffleCastNeg took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2079de3c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@780b60de): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6a04c78f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ef74279): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ad848ae): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d56bd10): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@35359554): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32fc0baf): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@579d7af3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b54a684): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27631c0d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b13352b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6237bd38): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bd5b542): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63d7d3d6): success [0ms]

===============================================
jdk/incubator/vector/VectorMaxConversionTests.java#Z
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorMaxConversionTests.java#Z \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:+UnlockDiagnosticVMOptions \
        -XX:+UseKNLSetting \
        -XX:+UseZGC \
        -XX:+IgnoreUnrecognizedVMOptions \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/VectorMaxConversionTests_Z.d/testng.0.jta jdk/incubator/vector/VectorMaxConversionTests.java#Z false VectorMaxConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.407 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Wed Apr 16 18:20:58 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Wed Apr 16 18:20:59 IST 2025
elapsed time (seconds): 0.407

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.407 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:20:58 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 3
Process id: 1475784
finished: Wed Apr 16 18:20:59 IST 2025
elapsed time (seconds): 0.407
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   752.271 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Wed Apr 16 18:20:59 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1481882
finished: Wed Apr 16 18:33:31 IST 2025
elapsed time (seconds): 752.271
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [39581ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3220ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [4090ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4147ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [3096ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [3964ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [21782ms]
test VectorReshapeTests.testRebracket256(byte(i)): success [102653ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
Failing with Species[int, 16, S_512_BIT]->Species[byte, 64, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket512(byte(i)): failure [77535ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket512(VectorReshapeTests.java:1011)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[int, 2, S_64_BIT]->Species[byte, 8, S_64_BIT] (lanewise), partLimit=-4, block=2, part=-3, origin=6
expect: [0, 0, 0, 0, 0, 0, 1, 5]
output: [0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket64(byte(i)): failure [4178ms]
java.lang.AssertionError: arrays differ firstly at element [6]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket64(VectorReshapeTests.java:864)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[int, 4, S_Max_BIT]->Species[byte, 16, S_Max_BIT] (lanewise), partLimit=-4, block=4, part=-2, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 9, 13, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracketMax(byte(i)): failure [15396ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracketMax(VectorReshapeTests.java:1060)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[byte, 8, S_64_BIT]->Species[byte, 64, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-3, origin=24
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [21406ms]
java.lang.AssertionError: arrays differ firstly at element [24]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:441)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeDouble(byte(i)): success [109254ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[float, 4, S_128_BIT]->Species[float, 16, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeFloat(byte(i)): failure [52047ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeFloat(VectorReshapeTests.java:631)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeInt(byte(i)): success [137799ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[long, 2, S_128_BIT]->Species[long, 8, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [58352ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:585)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[short, 4, S_64_BIT]->Species[short, 32, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-4, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [54586ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:487)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [22315ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [11326ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 13, Failures: 7, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 7
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 7
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
--------------------------------------------------
TEST: jdk/incubator/vector/Vector64ConversionTests.java#id0
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.784 seconds
messages:
command: build Vector64ConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 18:17:26 IST 2025
Test directory:
  compile: Vector64ConversionTests
finished: Wed Apr 16 18:17:27 IST 2025
elapsed time (seconds): 0.784

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.784 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:17:26 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 16
Process id: 1476950
finished: Wed Apr 16 18:17:27 IST 2025
elapsed time (seconds): 0.784
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Vector64ConversionTests_id0.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Vector64ConversionTests.java#id0 \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests 
TIME:   1366.03 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests
reason: User specified action: run testng/othervm/timeout=300 -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests 
started: Wed Apr 16 18:17:27 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1481521
finished: Wed Apr 16 18:40:13 IST 2025
elapsed time (seconds): 1366.03
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [1308ms]
castShape took 1303 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cab41a5): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 4, S_64_BIT], byte(i)): success [703ms]
castShape took 703 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32f13c0c): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 2, S_64_BIT], byte(i)): success [564ms]
castShape took 565 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@177ba401): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 1, S_64_BIT], byte(i)): success [391ms]
castShape took 391 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55e9fd9b): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 2, S_64_BIT], byte(i)): success [217ms]
castShape took 217 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bf43dcb): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 1, S_64_BIT], byte(i)): success [374ms]
castShape took 374 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64cc2f05): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [2336ms]
castShape took 2332 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d3c5dca): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 8, S_128_BIT], byte(i)): success [979ms]
castShape took 979 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54302f60): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 4, S_128_BIT], byte(i)): success [866ms]
castShape took 866 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@160cc352): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 2, S_128_BIT], byte(i)): success [732ms]
castShape took 732 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@759369ce): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 4, S_128_BIT], byte(i)): success [596ms]
castShape took 596 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23821e96): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 2, S_128_BIT], byte(i)): success [182ms]
castShape took 182 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c93395e): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [5186ms]
castShape took 5187 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64daf28): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 16, S_256_BIT], byte(i)): success [4243ms]
castShape took 4243 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7453c2ce): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 8, S_256_BIT], byte(i)): success [195ms]
castShape took 195 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2911fcc7): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 4, S_256_BIT], byte(i)): success [817ms]
castShape took 817 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69a30bb8): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 8, S_256_BIT], byte(i)): success [203ms]
castShape took 202 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@695191ca): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 4, S_256_BIT], byte(i)): success [178ms]
castShape took 178 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4bf40f8): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [7126ms]
castShape took 7126 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bd98d4a): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 32, S_512_BIT], byte(i)): success [5412ms]
castShape took 5413 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e62310): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 16, S_512_BIT], byte(i)): success [3281ms]
castShape took 3280 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18ef793): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 8, S_512_BIT], byte(i)): success [1127ms]
castShape took 1128 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54eca994): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 16, S_512_BIT], byte(i)): success [2702ms]
castShape took 2702 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d9ec089): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 8, S_512_BIT], byte(i)): success [236ms]
castShape took 236 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4cd54fd1): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [1910ms]
castShape took 1910 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@630bd20e): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [154ms]
castShape took 153 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc54142): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [467ms]
castShape took 468 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@618b78f4): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [136ms]
castShape took 136 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c7674c6): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [152ms]
castShape took 152 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@72fd6e22): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [147ms]
castShape took 147 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@40d0b25): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 8, S_64_BIT], short(i)): success [3175ms]
castShape took 3176 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9ae45b9): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 4, S_64_BIT], short(i)): success [5398ms]
castShape took 5397 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fac3958): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 2, S_64_BIT], short(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19d0a0ec): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 1, S_64_BIT], short(i)): success [82ms]
castShape took 83 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7eff441c): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 2, S_64_BIT], short(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b6a37d2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 1, S_64_BIT], short(i)): success [7ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48b7f47e): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 16, S_128_BIT], short(i)): success [892ms]
castShape took 891 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c4697bc): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 8, S_128_BIT], short(i)): success [1700ms]
castShape took 1700 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5353824d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 4, S_128_BIT], short(i)): success [13ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61517fb2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 2, S_128_BIT], short(i)): success [14ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bb27146): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 4, S_128_BIT], short(i)): success [13ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@412dc1a2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 2, S_128_BIT], short(i)): success [14ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@321f317): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 32, S_256_BIT], short(i)): success [4561ms]
castShape took 4561 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b0ecc95): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 16, S_256_BIT], short(i)): success [2472ms]
castShape took 2472 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10363f91): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 8, S_256_BIT], short(i)): success [3178ms]
castShape took 3178 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42e578c0): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 4, S_256_BIT], short(i)): success [106ms]
castShape took 106 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cfc7fce): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 8, S_256_BIT], short(i)): success [2280ms]
castShape took 2280 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f84d03b): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 4, S_256_BIT], short(i)): success [2135ms]
castShape took 2123 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15e41f09): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 64, S_512_BIT], short(i)): success [6480ms]
castShape took 6480 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c73d6bf): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 32, S_512_BIT], short(i)): success [7191ms]
castShape took 7191 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d5c1d58): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 16, S_512_BIT], short(i)): success [2048ms]
castShape took 2048 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a049c7d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 8, S_512_BIT], short(i)): success [2962ms]
castShape took 2962 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61a38c6c): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 16, S_512_BIT], short(i)): success [2343ms]
castShape took 2343 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@236f95aa): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 8, S_512_BIT], short(i)): success [2492ms]
castShape took 2492 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5efab149): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [572ms]
castShape took 572 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18cb82df): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 8, S_Max_BIT], short(i)): success [1440ms]
castShape took 1441 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@643f070d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 4, S_Max_BIT], short(i)): success [8ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4934c96b): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 2, S_Max_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e059ab7): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 4, S_Max_BIT], short(i)): success [8ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5897749f): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 2, S_Max_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c1371b8): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2317ms]
castShape took 2316 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@442b18f7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 4, S_64_BIT], int(i)): success [1104ms]
castShape took 1104 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@272f2089): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 2, S_64_BIT], int(i)): success [946ms]
castShape took 945 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47411d55): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 1, S_64_BIT], int(i)): success [165ms]
castShape took 165 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14ce104e): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 2, S_64_BIT], int(i)): success [29ms]
castShape took 30 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5594fce7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 1, S_64_BIT], int(i)): success [24ms]
castShape took 25 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@385c781e): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 16, S_128_BIT], int(i)): success [1183ms]
castShape took 1184 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b49f91b): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 8, S_128_BIT], int(i)): success [602ms]
castShape took 603 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ef954c2): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 4, S_128_BIT], int(i)): success [2013ms]
castShape took 2013 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41d7eadd): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 2, S_128_BIT], int(i)): success [26ms]
castShape took 26 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77875646): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 4, S_128_BIT], int(i)): success [1268ms]
castShape took 1269 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75410c4d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 2, S_128_BIT], int(i)): success [23ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2659de2b): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 32, S_256_BIT], int(i)): success [7044ms]
castShape took 7045 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2965864e): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 16, S_256_BIT], int(i)): success [4172ms]
castShape took 4172 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2120f2e3): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 8, S_256_BIT], int(i)): success [3559ms]
castShape took 3560 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@652689d6): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 4, S_256_BIT], int(i)): success [3900ms]
castShape took 3900 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4da521da): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 8, S_256_BIT], int(i)): success [3405ms]
castShape took 3405 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b83faf6): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 4, S_256_BIT], int(i)): success [3045ms]
castShape took 3045 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5403a76a): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 64, S_512_BIT], int(i)): success [12900ms]
castShape took 12900 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f69c681): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 32, S_512_BIT], int(i)): success [7211ms]
castShape took 7211 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38212d6d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 16, S_512_BIT], int(i)): success [4499ms]
castShape took 4500 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b356941): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 8, S_512_BIT], int(i)): success [2818ms]
castShape took 2818 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e3358da): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 16, S_512_BIT], int(i)): success [4747ms]
castShape took 4748 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1127a9e1): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 8, S_512_BIT], int(i)): success [3138ms]
castShape took 3138 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ace159): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [1014ms]
castShape took 1015 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6371010b): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 8, S_Max_BIT], int(i)): success [606ms]
castShape took 607 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2ce2b52d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 4, S_Max_BIT], int(i)): success [1414ms]
castShape took 1414 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26a91840): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 2, S_Max_BIT], int(i)): success [17ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@124d2b42): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 4, S_Max_BIT], int(i)): success [1170ms]
castShape took 1171 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39a660cb): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 2, S_Max_BIT], int(i)): success [17ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54f2c322): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 8, S_64_BIT], long(i)): success [1549ms]
castShape took 1549 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a058e25): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 4, S_64_BIT], long(i)): success [797ms]
castShape took 797 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd72c2): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 2, S_64_BIT], long(i)): success [1168ms]
castShape took 1169 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@702a7105): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 1, S_64_BIT], long(i)): success [1370ms]
castShape took 1370 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17ad70a4): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 2, S_64_BIT], long(i)): success [1287ms]
castShape took 1288 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75abf337): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 1, S_64_BIT], long(i)): success [304ms]
castShape took 304 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a7adece): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 16, S_128_BIT], long(i)): success [2297ms]
castShape took 2298 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13013718): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 8, S_128_BIT], long(i)): success [1236ms]
castShape took 1236 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17e2be4e): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 4, S_128_BIT], long(i)): success [873ms]
castShape took 873 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d921bd2): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 2, S_128_BIT], long(i)): success [2908ms]
castShape took 2908 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2037f3c9): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 4, S_128_BIT], long(i)): success [1146ms]
castShape took 1146 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@276164a0): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 2, S_128_BIT], long(i)): success [1382ms]
castShape took 1382 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8c06a5d): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 32, S_256_BIT], long(i)): success [13909ms]
castShape took 13910 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@28d7f27b): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 16, S_256_BIT], long(i)): success [8075ms]
castShape took 8076 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b454dd8): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 8, S_256_BIT], long(i)): success [6079ms]
castShape took 6080 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75f7eb6a): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 4, S_256_BIT], long(i)): success [4831ms]
castShape took 4831 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e488490): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 8, S_256_BIT], long(i)): success [5820ms]
castShape took 5820 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5ca2ddd8): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 4, S_256_BIT], long(i)): success [4295ms]
castShape took 4295 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@56fbb06c): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 64, S_512_BIT], long(i)): success [25781ms]
castShape took 25780 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26680c34): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 32, S_512_BIT], long(i)): success [14132ms]
castShape took 14132 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e5aae46): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 16, S_512_BIT], long(i)): success [8206ms]
castShape took 8207 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c655cc): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 8, S_512_BIT], long(i)): success [5732ms]
castShape took 5711 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@70731f1d): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 16, S_512_BIT], long(i)): success [9314ms]
castShape took 9315 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c1007ab): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 8, S_512_BIT], long(i)): success [5908ms]
castShape took 5909 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d5cf24a): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [2190ms]
castShape took 2190 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44fa8ea1): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 8, S_Max_BIT], long(i)): success [1300ms]
castShape took 1300 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3af7f9f0): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 4, S_Max_BIT], long(i)): success [853ms]
castShape took 853 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d3eb656): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 2, S_Max_BIT], long(i)): success [1727ms]
castShape took 1727 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14b48a94): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1151ms]
castShape took 1152 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2974683e): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 2, S_Max_BIT], long(i)): success [1307ms]
castShape took 1307 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@81586e9): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1753ms]
castShape took 1753 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63b8ddc6): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[short, 4, S_64_BIT], float(i)): success [2140ms]
castShape took 2141 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@283174d3): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[int, 2, S_64_BIT], float(i)): success [14ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2109f79c): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[long, 1, S_64_BIT], float(i)): success [148ms]
castShape took 149 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26c5e81d): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[float, 2, S_64_BIT], float(i)): success [597ms]
castShape took 597 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7552b685): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[double, 1, S_64_BIT], float(i)): success [13ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@62f11d82): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[byte, 16, S_128_BIT], float(i)): success [1053ms]
castShape took 1053 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@110d084): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[short, 8, S_128_BIT], float(i)): success [568ms]
castShape took 568 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d4bbd01): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[int, 4, S_128_BIT], float(i)): success [399ms]
castShape took 400 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74ce726a): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[long, 2, S_128_BIT], float(i)): success [29ms]
castShape took 30 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@68438483): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[float, 4, S_128_BIT], float(i)): success [970ms]
castShape took 970 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49d570): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[double, 2, S_128_BIT], float(i)): success [14ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8233c99): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[byte, 32, S_256_BIT], float(i)): success [6960ms]
castShape took 6960 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f4c0e1b): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[short, 16, S_256_BIT], float(i)): success [4074ms]
castShape took 4074 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c9f6571): success [0ms]
test Vector64ConversionTests.castShape(Species[float

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6be1da02): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29897488): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@732e8986): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cbdda99): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ee39ff8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@445381b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2dc938c6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44112c3d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@344d3c48): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a4d4e7b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66741a55): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46d90bd8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 5 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d42ae57): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48b81600): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e7214ca): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4a19ce6e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@134caef3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b763382): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@517f1655): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23da9535): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3dc096e8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11e85147): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b0db1d4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e4a49a5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2633e9d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59cd536a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@380f821): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@442f10d8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d4813a4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24687549): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d333b11): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ae1a2ca): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20b713c3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@685cabee): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63c2d99): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@111d7af1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@35a4c2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b9d04a5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21bca813): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a36dc29): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e740c4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 27 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4dee5fd5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f73d371): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79c23a2a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d151ac1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d85d8b4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e5636b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@62c26811): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@714dbe24): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@bd3e301): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57aa423f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3dde168a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20bd98b9): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d219881): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38c3a523): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c762e81): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@211c2efc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ff9098): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c57030b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18377b93): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f4f44d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bd7c1d9): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67433a7e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41386df): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@700403): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43e8e8b6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f21513f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3de8fca0): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f95d66e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7461adda): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59d7e7c5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ce103d3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31b5da45): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bf99152): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@648eadea): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b672d7c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@70124837): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@644ccb61): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@752c7c78): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11ad12c6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7efa3452): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@52f5f350): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f07ac2e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c894bb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76e80835): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b6da6cb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cbd6f1d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@571f2dc1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19b8c726): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2064d20): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@773b9530): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@233b747d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f57afc1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46415e46): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21823396): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5983e717): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37962361): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a75998): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41a28db6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6817773d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@33b25e83): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bb974b4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29539615): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13e1fb18): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a111ed6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cdb1fc6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f585deb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b48852b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13c30a6a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4fd6a0f2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57fdf0dc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5dbef5fc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8fd4fd1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d5a3977): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ed439a4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7cbd8f4d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14f8736a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@679f3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f11df84): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@367aacc4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43717fa6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21ac7818): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 8, S_128_BIT]): success [8ms]
shuffleCastNeg took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50600acb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@718b30d4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f66a0b7): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d7a71f2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c0607e5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1858a725): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@395b81ec): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f20039d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b923552): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31b31435): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@592c1d5b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@480b4c0e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@460b61c2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32d189e3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@738c0207): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b340518): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75b93ea8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b49eb49): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@257fdb18): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10d3b598): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d114fb1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@142ceff8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2af8c4c7): success [0ms]

===============================================
jdk/incubator/vector/Vector64ConversionTests.java#id0
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Vector64ConversionTests.java#id0 \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Vector64ConversionTests_id0.d/testng.0.jta jdk/incubator/vector/Vector64ConversionTests.java#id0 false Vector64ConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Test results: passed: 69; failed: 11; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector
Finished running test 'jtreg:test/jdk/jdk/incubator/vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk/jdk/incubator/vector                  83    69    11     0     3 <<
==============================
TEST FAILURE

