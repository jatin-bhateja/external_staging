Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/jdk/incubator/vector/', will run:
* jtreg:test/jdk/jdk/incubator/vector
Clean up dirs for jtreg_test_jdk_jdk_incubator_vector

Running test 'jtreg:test/jdk/jdk/incubator/vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/FloatMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.576 seconds
messages:
command: build FloatMaxVectorTests
reason: Named class compiled on demand
started: Wed Apr 16 19:31:12 IST 2025
Test directory:
  compile: FloatMaxVectorTests
finished: Wed Apr 16 19:31:14 IST 2025
elapsed time (seconds): 1.576

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.576 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/FloatMaxVectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:31:12 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 8
Process id: 1537975
finished: Wed Apr 16 19:31:14 IST 2025
elapsed time (seconds): 1.576
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/FloatMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/FloatMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/FloatMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/FloatMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/FloatMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/FloatMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation FloatMaxVectorTests 
TIME:   152.703 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation FloatMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation FloatMaxVectorTests 
started: Wed Apr 16 19:31:14 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1540822
finished: Wed Apr 16 19:33:46 IST 2025
elapsed time (seconds): 152.703
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -7127716265053030869
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-7127716265053030869" to command line.
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[-i * 5]): success [598ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[i * 5]): success [4ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[i + 1]): success [56ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [2ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[-i * 5], mask[i % 2]): success [237ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i * 5], mask[i % 2]): success [3ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i + 1], mask[i % 2]): success [68ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[-i * 5], mask[true]): success [1ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i * 5], mask[true]): success [1ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i + 1], mask[true]): success [1ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[true]): success [50ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[cornerCaseValue(i)], mask[true]): success [4ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[-i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[-i * 5]): success [129ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[i * 5]): success [2ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[i + 1]): success [63ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [4ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [247ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [3ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [63ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i * 5]): success [16ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [21ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [9ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [6ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [125ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [4ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [81ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [2ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [2ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[-i * 5]): success [103ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[i * 5]): success [85ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[i + 1]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[-i * 5], mask[i % 2]): success [67ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i * 5], mask[i % 2]): success [87ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i + 1], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[-i * 5], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i * 5], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i + 1], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[true]): success [1ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[-i * 5], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i * 5], mask[false]): success [43ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i + 1], mask[false]): success [13ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[false]): success [11ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [2ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[-i * 5]): success [10ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[i * 5]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[i + 1]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [2ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[cornerCaseValue(i)]): success [3ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[-i * 5], mask[i % 2]): success [9ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i * 5], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[-i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[-i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i + 1], mask[false]): success [10ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[false]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[-i * 5]): success [150ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[i * 5]): success [2ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[i + 1]): success [63ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], float[i * 5]): success [208ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], float[i + 1]): success [18ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [79ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [4ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [3ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[-i * 5]): success [72ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[i * 5]): success [3ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[i + 1]): success [62ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[-i * 5]): success [88ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[i * 5]): success [42ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[i + 1]): success [73ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [6ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.BroadcastLongFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [3ms]
test FloatMaxVectorTests.BroadcastLongFloatMaxVectorTestsSmokeTest(float[i * 5]): success [2ms]
test FloatMaxVectorTests.BroadcastLongFloatMaxVectorTestsSmokeTest(float[i + 1]): success [2ms]
test FloatMaxVectorTests.BroadcastLongFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[-i * 5]): success [112ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[i * 5]): success [52ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[i + 1]): success [63ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[-i * 5]): success [67ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[i * 5]): success [3ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[i + 1]): success [67ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[-i * 5]): success [130ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[i * 5]): success [3ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[i + 1]): success [62ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [172ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [3ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [63ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [33ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [66ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[i]): success [289ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[i - length / 2]): success [138ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[i + 1]): success [87ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[i - 2]): success [52ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[zigZag(i)]): success [56ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[cornerCaseValue(i)]): success [52ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[i]): success [49ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[i - length / 2]): success [49ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[i + 1]): success [82ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[i - 2]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[zigZag(i)]): success [57ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[i]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[i - length / 2]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[i + 1]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[i - 2]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[zigZag(i)]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[cornerCaseValue(i)]): success [49ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[i]): success [49ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[i - length / 2]): success [49ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[i + 1]): success [49ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[i - 2]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[zigZag(i)]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[i]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[i - length / 2]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[i + 1]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[i - 2]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[zigZag(i)]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[i]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[i + 1]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - 2]): success [63ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [49ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [49ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[i % 2]): success [16ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[i % 2]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[i % 2]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[i % 2]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[i % 2]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[i % 2]): success [4ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[i % 2]): success [4ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[true]): success [5ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[true]): success [4ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[true]): success [77ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[true]): success [41ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[true]): success [26ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[false]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[false]): success [1ms]
test FloatMaxVecto

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

ivFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [5ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [61ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[i]): success [113ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[i - length / 2]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[i + 1]): success [56ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[i - 2]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[zigZag(i)]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[i]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[i - length / 2]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[i + 1]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[i - 2]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[zigZag(i)]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[i]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[i - length / 2]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[i + 1]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[i - 2]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[zigZag(i)]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[i]): success [49ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[i - length / 2]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[i + 1]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[i - 2]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[zigZag(i)]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[i]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[i - length / 2]): success [49ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[i + 1]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[i - 2]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[zigZag(i)]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[i]): success [82ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[i + 1]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - 2]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[-i * 5], mask[i % 2]): success [105ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i * 5], mask[i % 2]): success [39ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i + 1], mask[i % 2]): success [136ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [38ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[i % 2]): success [38ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [38ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[-i * 5], mask[true]): success [20ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i * 5], mask[true]): success [3ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i + 1], mask[true]): success [2ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[true]): success [3ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[cornerCaseValue(i)], mask[true]): success [3ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[-i * 5], mask[false]): success [4ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i * 5], mask[false]): success [4ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i + 1], mask[false]): success [4ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [20ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[false]): success [4ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[cornerCaseValue(i)], mask[false]): success [4ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[-i * 5]): success [9ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[-i * 5]): success [7ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[-i * 5]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[i * 5]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, AbstractVectorTest$1@12b45097): success [52ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [25ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[-i * 5]): success [4ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[i * 5]): success [4ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[i + 1]): success [74ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [35ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[i * 5]): success [1ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[i + 1]): success [1ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(AbstractVectorTest$1@12b45097): success [4ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(0): success [67ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(-1): success [16ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(1): success [16ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(2): success [1ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(-2): success [1ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(0): success [2ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(-1): success [1ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(1): success [1ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(2): success [3ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(-2): success [1ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(0): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(1): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(32): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(37): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(1024): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(1025): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(1029): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(0): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(1): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(32): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(37): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(1024): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(1025): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(1029): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[i]): success [114ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[i - length / 2]): success [50ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[i + 1]): success [55ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[i - 2]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[zigZag(i)]): success [50ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[i]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[i - length / 2]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[i + 1]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[i - 2]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[zigZag(i)]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[i]): success [50ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[i - length / 2]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[i + 1]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[i - 2]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[zigZag(i)]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[cornerCaseValue(i)]): success [61ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[i]): success [56ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[i - length / 2]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[i + 1]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[i - 2]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[zigZag(i)]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[cornerCaseValue(i)]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[i]): success [50ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[i - length / 2]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[i + 1]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[i - 2]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[zigZag(i)]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[i]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[i + 1]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - 2]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [50ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [49ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[i]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[i]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[i]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[i]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.maskAndFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test FloatMaxVectorTests.maskAndFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskAndNotFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test FloatMaxVectorTests.maskAndNotFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskCompressFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [238ms]
test FloatMaxVectorTests.maskCompressFloatMaxVectorTestsSmokeTest(mask[true]): success [125ms]
test FloatMaxVectorTests.maskCompressFloatMaxVectorTestsSmokeTest(mask[false]): success [85ms]
test FloatMaxVectorTests.maskEqFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test FloatMaxVectorTests.maskEqFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskEqualsFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test FloatMaxVectorTests.maskEqualsFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskFirstTrueFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [81ms]
test FloatMaxVectorTests.maskFirstTrueFloatMaxVectorTestsSmokeTest(mask[true]): success [62ms]
test FloatMaxVectorTests.maskFirstTrueFloatMaxVectorTestsSmokeTest(mask[false]): success [29ms]
test FloatMaxVectorTests.maskHashCodeFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test FloatMaxVectorTests.maskHashCodeFloatMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test FloatMaxVectorTests.maskHashCodeFloatMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test FloatMaxVectorTests.maskLastTrueFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [76ms]
test FloatMaxVectorTests.maskLastTrueFloatMaxVectorTestsSmokeTest(mask[true]): success [63ms]
test FloatMaxVectorTests.maskLastTrueFloatMaxVectorTestsSmokeTest(mask[false]): success [44ms]
test FloatMaxVectorTests.maskOrFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [44ms]
test FloatMaxVectorTests.maskOrFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskTrueCountFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [36ms]
test FloatMaxVectorTests.maskTrueCountFloatMaxVectorTestsSmokeTest(mask[true]): success [62ms]
test FloatMaxVectorTests.maskTrueCountFloatMaxVectorTestsSmokeTest(mask[false]): success [29ms]
test FloatMaxVectorTests.maskXorFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test FloatMaxVectorTests.maskXorFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [5ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [5ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [5ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [5ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [5ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [5ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [7ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [5ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[-i * 5]): success [12ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[i * 5]): success [1ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[i + 1]): success [45ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [23ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [4ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [73ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [13ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.shuffleEqualsFloatMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [12ms]
test FloatMaxVectorTests.shuffleEqualsFloatMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [8ms]
test FloatMaxVectorTests.shuffleMiscellaneousFloatMaxVectorTestsSmokeTest(shuffle[random]): success [2ms]
test FloatMaxVectorTests.shuffleTest(): success [807ms]
test FloatMaxVectorTests.shuffleToStringFloatMaxVectorTestsSmokeTest(shuffle[random]): success [33ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[i * 5]): success [888ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[i + 1]): success [132ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [329ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], AbstractVectorTest$1@12b45097): success [111ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [102ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [186ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [101ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [355ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [104ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [106ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [397ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [214ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [125ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [99ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [98ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [96ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [97ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [96ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [97ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [97ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[-i * 5]): success [297ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[i * 5]): success [93ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[i + 1]): success [250ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [151ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [99ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[cornerCaseValue(i)]): success [92ms]
test FloatMaxVectorTests.smokeTest1(): success [0ms]
test FloatMaxVectorTests.smokeTest2(): success [44ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[-i * 5]): success [12ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[i * 5]): success [1ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[i + 1]): success [45ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [7ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [6ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [34ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [42ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [8ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [6ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[i * 5]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[i + 1]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [6ms]
test FloatMaxVectorTests.toIntArrayFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [6ms]
test FloatMaxVectorTests.toIntArrayFloatMaxVectorTestsSmokeTest(float[i * 5]): success [7ms]
test FloatMaxVectorTests.toIntArrayFloatMaxVectorTestsSmokeTest(float[i + 1]): success [5ms]
test FloatMaxVectorTests.toIntArrayFloatMaxVectorTestsSmokeTest(float[intCornerCaseValue(i)]): success [6ms]
test FloatMaxVectorTests.toLongArrayFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [0ms]
test FloatMaxVectorTests.toLongArrayFloatMaxVectorTestsSmokeTest(float[i * 5]): success [0ms]
test FloatMaxVectorTests.toLongArrayFloatMaxVectorTestsSmokeTest(float[i + 1]): success [2ms]
test FloatMaxVectorTests.toLongArrayFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [1ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[i * 5]): success [1ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[i + 1]): success [1ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [19ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(AbstractVectorTest$1@12b45097): success [8ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [14ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[i * 5]): success [315ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[i + 1]): success [99ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [294ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], AbstractVectorTest$1@12b45097): success [101ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [104ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [616ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [186ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [619ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [618ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [474ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [188ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [189ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [189ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [188ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [187ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [188ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [291ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [457ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [201ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [194ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[-i * 5]): success [286ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[i * 5]): success [94ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[i + 1]): success [253ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [94ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [94ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[cornerCaseValue(i)]): success [94ms]
test FloatMaxVectorTests.viewAsFloatingLanesTest(): success [21ms]
test FloatMaxVectorTests.viewAsIntegeralLanesTest(): success [44ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [35ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [18ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [93ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [17ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [17ms]

===============================================
jdk/incubator/vector/FloatMaxVectorTests.java
Total tests run: 3211, Passes: 3210, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/FloatMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/FloatMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/FloatMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/FloatMaxVectorTests.d/testng.0.jta jdk/incubator/vector/FloatMaxVectorTests.java false FloatMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Float512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.839 seconds
messages:
command: build Float512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 19:29:43 IST 2025
Test directory:
  compile: Float512VectorTests
finished: Wed Apr 16 19:29:45 IST 2025
elapsed time (seconds): 1.839

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.839 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:29:43 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 6
Process id: 1537799
finished: Wed Apr 16 19:29:45 IST 2025
elapsed time (seconds): 1.839
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Float512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Float512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Float512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Float512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Float512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Float512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Float512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Float512VectorTests 
TIME:   245.983 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Float512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Float512VectorTests 
started: Wed Apr 16 19:29:45 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1540561
finished: Wed Apr 16 19:33:51 IST 2025
elapsed time (seconds): 245.983
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -3854586889229103579
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-3854586889229103579" to command line.
test Float512VectorTests.ABSFloat512VectorTests(float[-i * 5]): success [383ms]
test Float512VectorTests.ABSFloat512VectorTests(float[i * 5]): success [445ms]
test Float512VectorTests.ABSFloat512VectorTests(float[i + 1]): success [7ms]
test Float512VectorTests.ABSFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [5ms]
test Float512VectorTests.ABSFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [53ms]
test Float512VectorTests.ABSFloat512VectorTests(float[cornerCaseValue(i)]): success [5ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[-i * 5], mask[i % 2]): success [163ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[i * 5], mask[i % 2]): success [196ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[i + 1], mask[i % 2]): success [29ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [74ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[-i * 5], mask[true]): success [2ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[i * 5], mask[true]): success [2ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[i + 1], mask[true]): success [1ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(AbstractVectorTest$1@6ed11085, mask[true]): success [1ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[cornerCaseValue(i)], mask[true]): success [1ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[-i * 5], mask[false]): success [1ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[i * 5], mask[false]): success [1ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[i + 1], mask[false]): success [1ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float512VectorTests.ABSMaskedFloat512VectorTests(float[cornerCaseValue(i)], mask[false]): success [1ms]
test Float512VectorTests.ACOSFloat512VectorTests(float[-i * 5]): success [116ms]
test Float512VectorTests.ACOSFloat512VectorTests(float[i * 5]): success [46ms]
test Float512VectorTests.ACOSFloat512VectorTests(float[i + 1]): success [16ms]
test Float512VectorTests.ACOSFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [6ms]
test Float512VectorTests.ACOSFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [64ms]
test Float512VectorTests.ACOSFloat512VectorTests(float[cornerCaseValue(i)]): success [3ms]
test Float512VectorTests.ADDFloat512VectorTests(float[-i * 5], float[i * 5]): success [94ms]
test Float512VectorTests.ADDFloat512VectorTests(float[-i * 5], float[i + 1]): success [360ms]
test Float512VectorTests.ADDFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [4ms]
test Float512VectorTests.ADDFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [5ms]
test Float512VectorTests.ADDFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [79ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i * 5]): success [16ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i + 1]): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [21ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [3ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [3ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [4ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [11ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [5ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [87ms]
test Float512VectorTests.ADDFloat512VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [94ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [78ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [3ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [81ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [2ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [2ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [2ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [2ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float512VectorTests.ADDFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [2ms]
test Float512VectorTests.ADDReduceFloat512VectorTests(float[-i * 5]): success [123ms]
test Float512VectorTests.ADDReduceFloat512VectorTests(float[i * 5]): success [2ms]
test Float512VectorTests.ADDReduceFloat512VectorTests(float[i + 1]): success [95ms]
test Float512VectorTests.ADDReduceFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test Float512VectorTests.ADDReduceFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [1ms]
test Float512VectorTests.ADDReduceFloat512VectorTests(float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[-i * 5], mask[i % 2]): success [78ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[i * 5], mask[i % 2]): success [3ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[i + 1], mask[i % 2]): success [96ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [29ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [2ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[-i * 5], mask[true]): success [1ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[i * 5], mask[true]): success [2ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[i + 1], mask[true]): success [2ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [13ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[true]): success [2ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[-i * 5], mask[false]): success [2ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[i * 5], mask[false]): success [2ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[i + 1], mask[false]): success [2ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[false]): success [2ms]
test Float512VectorTests.ADDReduceFloat512VectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [2ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTests(float[-i * 5]): success [10ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTests(float[i * 5]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTests(float[i + 1]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[-i * 5], mask[i % 2]): success [8ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[i * 5], mask[i % 2]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[i + 1], mask[i % 2]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[-i * 5], mask[true]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[i * 5], mask[true]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[i + 1], mask[true]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [10ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[-i * 5], mask[false]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[i * 5], mask[false]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[i + 1], mask[false]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float512VectorTests.ADDReduceLongFloat512VectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float512VectorTests.ASINFloat512VectorTests(float[-i * 5]): success [170ms]
test Float512VectorTests.ASINFloat512VectorTests(float[i * 5]): success [94ms]
test Float512VectorTests.ASINFloat512VectorTests(float[i + 1]): success [10ms]
test Float512VectorTests.ASINFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [4ms]
test Float512VectorTests.ASINFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [62ms]
test Float512VectorTests.ASINFloat512VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float512VectorTests.ATAN2Float512VectorTests(float[-i * 5], float[i * 5]): success [360ms]
test Float512VectorTests.ATAN2Float512VectorTests(float[-i * 5], float[i + 1]): success [86ms]
test Float512VectorTests.ATAN2Float512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [13ms]
test Float512VectorTests.ATAN2Float512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [18ms]
test Float512VectorTests.ATAN2Float512VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [91ms]
test Float512VectorTests.ATANFloat512VectorTests(float[-i * 5]): success [21ms]
test Float512VectorTests.ATANFloat512VectorTests(float[i * 5]): success [94ms]
test Float512VectorTests.ATANFloat512VectorTests(float[i + 1]): success [11ms]
test Float512VectorTests.ATANFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [11ms]
test Float512VectorTests.ATANFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [63ms]
test Float512VectorTests.ATANFloat512VectorTests(float[cornerCaseValue(i)]): success [18ms]
test Float512VectorTests.BroadcastFloat512VectorTests(float[-i * 5]): success [61ms]
test Float512VectorTests.BroadcastFloat512VectorTests(float[i * 5]): success [82ms]
test Float512VectorTests.BroadcastFloat512VectorTests(float[i + 1]): success [39ms]
test Float512VectorTests.BroadcastFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [39ms]
test Float512VectorTests.BroadcastFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [105ms]
test Float512VectorTests.BroadcastFloat512VectorTests(float[cornerCaseValue(i)]): success [39ms]
test Float512VectorTests.BroadcastLongFloat512VectorTestsSmokeTest(float[-i * 5]): success [2ms]
test Float512VectorTests.BroadcastLongFloat512VectorTestsSmokeTest(float[i * 5]): success [2ms]
test Float512VectorTests.BroadcastLongFloat512VectorTestsSmokeTest(float[i + 1]): success [2ms]
test Float512VectorTests.BroadcastLongFloat512VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [2ms]
test Float512VectorTests.CBRTFloat512VectorTests(float[-i * 5]): success [38ms]
test Float512VectorTests.CBRTFloat512VectorTests(float[i * 5]): success [143ms]
test Float512VectorTests.CBRTFloat512VectorTests(float[i + 1]): success [6ms]
test Float512VectorTests.CBRTFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [6ms]
test Float512VectorTests.CBRTFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [78ms]
test Float512VectorTests.CBRTFloat512VectorTests(float[cornerCaseValue(i)]): success [62ms]
test Float512VectorTests.COSFloat512VectorTests(float[-i * 5]): success [20ms]
test Float512VectorTests.COSFloat512VectorTests(float[i * 5]): success [98ms]
test Float512VectorTests.COSFloat512VectorTests(float[i + 1]): success [4ms]
test Float512VectorTests.COSFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [4ms]
test Float512VectorTests.COSFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [84ms]
test Float512VectorTests.COSFloat512VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float512VectorTests.COSHFloat512VectorTests(float[-i * 5]): success [50ms]
test Float512VectorTests.COSHFloat512VectorTests(float[i * 5]): success [129ms]
test Float512VectorTests.COSHFloat512VectorTests(float[i + 1]): success [10ms]
test Float512VectorTests.COSHFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [5ms]
test Float512VectorTests.COSHFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [77ms]
test Float512VectorTests.COSHFloat512VectorTests(float[cornerCaseValue(i)]): success [68ms]
test Float512VectorTests.DIVFloat512VectorTests(float[-i * 5], float[i * 5]): success [206ms]
test Float512VectorTests.DIVFloat512VectorTests(float[-i * 5], float[i + 1]): success [159ms]
test Float512VectorTests.DIVFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [3ms]
test Float512VectorTests.DIVFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [3ms]
test Float512VectorTests.DIVFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [77ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [16ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [22ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [3ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [82ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [2ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [3ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [2ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [3ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [2ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [22ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [2ms]
test Float512VectorTests.DIVFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [2ms]
test Float512VectorTests.EQFloat512VectorTests(float[i], float[i]): success [237ms]
test Float512VectorTests.EQFloat512VectorTests(float[i], float[i - length / 2]): success [194ms]
test Float512VectorTests.EQFloat512VectorTests(float[i], float[i + 1]): success [161ms]
test Float512VectorTests.EQFloat512VectorTests(float[i], float[i - 2]): success [73ms]
test Float512VectorTests.EQFloat512VectorTests(float[i], float[zigZag(i)]): success [73ms]
test Float512VectorTests.EQFloat512VectorTests(float[i], float[cornerCaseValue(i)]): success [84ms]
test Float512VectorTests.EQFloat512VectorTests(float[i - length / 2], float[i]): success [71ms]
test Float512VectorTests.EQFloat512VectorTests(float[i - length / 2], float[i - length / 2]): success [71ms]
test Float512VectorTests.EQFloat512VectorTests(float[i - length / 2], float[i + 1]): success [72ms]
test Float512VectorTests.EQFloat512VectorTests(float[i - length / 2], float[i - 2]): success [71ms]
test Float512VectorTests.EQFloat512VectorTests(float[i - length / 2], float[zigZag(i)]): success [116ms]
test Float512VectorTests.EQFloat512VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [106ms]
test Float512VectorTests.EQFloat512VectorTests(float[i + 1], float[i]): success [72ms]
test Float512VectorTests.EQFloat512VectorTests(float[i + 1], float[i - length / 2]): success [72ms]
test Float512VectorTests.EQFloat512VectorTests(float[i + 1], float[i + 1]): success [71ms]
test Float512VectorTests.EQFloat512VectorTests(float[i + 1], float[i - 2]): success [71ms]
test Float512VectorTests.EQFloat512VectorTests(float[i + 1], float[zigZag(i)]): success [74ms]
test Float512VectorTests.EQFloat512VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [72ms]
test Float512VectorTests.EQFloat512VectorTests(float[i - 2], float[i]): success [70ms]
test Float512VectorTests.EQFloat512VectorTests(float[i - 2], float[i - length / 2]): success [71ms]
test Float512VectorTests.EQFloat512VectorTests(float[i - 2], float[i + 1]): success [71ms]
test Float512VectorTests.EQFloat512VectorTests(float[i - 2], float[i - 2]): success [73ms]
test Float512VectorTests.EQFloat512VectorTests(float[i - 2], float[zigZag(i)]): success [72ms]
test Float512VectorTests.EQFloat512VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [70ms]
test Float512VectorTests.EQFloat512VectorTests(float[zigZag(i)], float[i]): success [70ms]
test Float512VectorTests.EQFloat512VectorTests(float[zigZag(i)], float[i - length / 2]): success [71ms]
test Float512VectorTests.EQFloat512VectorTests(float[zigZag(i)], float[i + 1]): success [70ms]
test Float512VectorTests.EQFloat512VectorTests(float[zigZag(i)], float[i - 2]): success [70ms]
test Float512VectorTests.EQFloat512VectorTests(float[zigZag(i)], float[zigZag(i)]): success [73ms]
test Float512VectorTests.EQFloat512VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [71ms]
test Float512VectorTests.EQFloat512VectorTests(float[cornerCaseValue(i)], float[i]): success [76ms]
test Float512VectorTests.EQFloat512VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [70ms]
test Float512VectorTests.EQFloat512VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [71ms]
test Float512VectorTests.EQFloat512VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [74ms]
test Float512VectorTests.EQFloat512VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [71ms]
test Float512VectorTests.EQFloat512VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [70ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[i % 2]): success [16ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[i % 2]): success [5ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[i % 2]): success [6ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[i % 2]): success [82ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[i % 2]): success [1ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[false]): success [2ms]
test Float512VectorTests.EQFloat512VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[false]): su

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

, float[i + 1]): success [0ms]
test Float512VectorTests.divFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.divFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float512VectorTests.divFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [7ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [1ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [35ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [7ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float512VectorTests.divFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [5ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float512VectorTests.divFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float512VectorTests.eqFloat512VectorTests(float[i], float[i]): success [142ms]
test Float512VectorTests.eqFloat512VectorTests(float[i], float[i - length / 2]): success [71ms]
test Float512VectorTests.eqFloat512VectorTests(float[i], float[i + 1]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i], float[i - 2]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i], float[zigZag(i)]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i], float[cornerCaseValue(i)]): success [71ms]
test Float512VectorTests.eqFloat512VectorTests(float[i - length / 2], float[i]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i - length / 2], float[i - length / 2]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i - length / 2], float[i + 1]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i - length / 2], float[i - 2]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i - length / 2], float[zigZag(i)]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [71ms]
test Float512VectorTests.eqFloat512VectorTests(float[i + 1], float[i]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i + 1], float[i - length / 2]): success [71ms]
test Float512VectorTests.eqFloat512VectorTests(float[i + 1], float[i + 1]): success [71ms]
test Float512VectorTests.eqFloat512VectorTests(float[i + 1], float[i - 2]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i + 1], float[zigZag(i)]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i - 2], float[i]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i - 2], float[i - length / 2]): success [77ms]
test Float512VectorTests.eqFloat512VectorTests(float[i - 2], float[i + 1]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i - 2], float[i - 2]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[i - 2], float[zigZag(i)]): success [79ms]
test Float512VectorTests.eqFloat512VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [122ms]
test Float512VectorTests.eqFloat512VectorTests(float[zigZag(i)], float[i]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[zigZag(i)], float[i - length / 2]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[zigZag(i)], float[i + 1]): success [84ms]
test Float512VectorTests.eqFloat512VectorTests(float[zigZag(i)], float[i - 2]): success [69ms]
test Float512VectorTests.eqFloat512VectorTests(float[zigZag(i)], float[zigZag(i)]): success [69ms]
test Float512VectorTests.eqFloat512VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[cornerCaseValue(i)], float[i]): success [71ms]
test Float512VectorTests.eqFloat512VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [76ms]
test Float512VectorTests.eqFloat512VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [70ms]
test Float512VectorTests.eqFloat512VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [74ms]
test Float512VectorTests.eqFloat512VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [70ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i], float[i]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i], float[i - length / 2]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i], float[i + 1]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i], float[i - 2]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i], float[zigZag(i)]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - length / 2]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i + 1]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - 2]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[zigZag(i)]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - length / 2]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i + 1]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - 2]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[zigZag(i)]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - length / 2]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i + 1]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - 2]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[zigZag(i)]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - length / 2]): success [66ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i + 1]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - 2]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [1ms]
test Float512VectorTests.eqFloat512VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.expandFloat512VectorTests(float[-i * 5], mask[i % 2]): success [267ms]
test Float512VectorTests.expandFloat512VectorTests(float[i * 5], mask[i % 2]): success [101ms]
test Float512VectorTests.expandFloat512VectorTests(float[i + 1], mask[i % 2]): success [79ms]
test Float512VectorTests.expandFloat512VectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [78ms]
test Float512VectorTests.expandFloat512VectorTests(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [156ms]
test Float512VectorTests.expandFloat512VectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [79ms]
test Float512VectorTests.expandFloat512VectorTests(float[-i * 5], mask[true]): success [3ms]
test Float512VectorTests.expandFloat512VectorTests(float[i * 5], mask[true]): success [119ms]
test Float512VectorTests.expandFloat512VectorTests(float[i + 1], mask[true]): success [2ms]
test Float512VectorTests.expandFloat512VectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Float512VectorTests.expandFloat512VectorTests(AbstractVectorTest$1@6ed11085, mask[true]): success [2ms]
test Float512VectorTests.expandFloat512VectorTests(float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float512VectorTests.expandFloat512VectorTests(float[-i * 5], mask[false]): success [6ms]
test Float512VectorTests.expandFloat512VectorTests(float[i * 5], mask[false]): success [6ms]
test Float512VectorTests.expandFloat512VectorTests(float[i + 1], mask[false]): success [5ms]
test Float512VectorTests.expandFloat512VectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [39ms]
test Float512VectorTests.expandFloat512VectorTests(AbstractVectorTest$1@6ed11085, mask[false]): success [6ms]
test Float512VectorTests.expandFloat512VectorTests(float[cornerCaseValue(i)], mask[false]): success [6ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[i * 5], float[-i * 5]): success [9ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[i * 5], float[i * 5]): success [0ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[i * 5], AbstractVectorTest$1@6ed11085): success [2ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[i + 1], float[-i * 5]): success [50ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[i + 1], float[i + 1]): success [0ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[i + 1], AbstractVectorTest$1@6ed11085): success [2ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [3ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [3ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@6ed11085): success [2ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[-i * 5]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i * 5]): success [1ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i + 1]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[0.01 + (i / (i + 1))]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, AbstractVectorTest$1@6ed11085): success [2ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [0ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@6ed11085): success [0ms]
test Float512VectorTests.fmaFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[-i * 5]): success [10ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i * 5]): success [21ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i + 1]): success [1ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], AbstractVectorTest$1@6ed11085): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[-i * 5]): success [1ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i * 5]): success [1ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i + 1]): success [1ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], AbstractVectorTest$1@6ed11085): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [3ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@6ed11085): success [3ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[-i * 5]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i * 5]): success [3ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i + 1]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[0.01 + (i / (i + 1))]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, AbstractVectorTest$1@6ed11085): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[cornerCaseValue(i)]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [1ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [1ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@6ed11085): success [2ms]
test Float512VectorTests.fmaFloat512VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.getFloat512VectorTests(float[-i * 5]): success [7ms]
test Float512VectorTests.getFloat512VectorTests(float[i * 5]): success [7ms]
test Float512VectorTests.getFloat512VectorTests(float[i + 1]): success [7ms]
test Float512VectorTests.getFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [7ms]
test Float512VectorTests.getFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [98ms]
test Float512VectorTests.getFloat512VectorTests(float[cornerCaseValue(i)]): success [5ms]
test Float512VectorTests.hashCodeFloat512VectorTestsSmokeTest(float[-i * 5]): success [36ms]
test Float512VectorTests.hashCodeFloat512VectorTestsSmokeTest(float[i * 5]): success [0ms]
test Float512VectorTests.hashCodeFloat512VectorTestsSmokeTest(float[i + 1]): success [0ms]
test Float512VectorTests.hashCodeFloat512VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.hashCodeFloat512VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [1ms]
test Float512VectorTests.hashCodeFloat512VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.indexInRangeFloat512VectorTestsSmokeTest(0): success [69ms]
test Float512VectorTests.indexInRangeFloat512VectorTestsSmokeTest(-1): success [17ms]
test Float512VectorTests.indexInRangeFloat512VectorTestsSmokeTest(1): success [17ms]
test Float512VectorTests.indexInRangeFloat512VectorTestsSmokeTest(2): success [2ms]
test Float512VectorTests.indexInRangeFloat512VectorTestsSmokeTest(-2): success [3ms]
test Float512VectorTests.indexInRangeLongFloat512VectorTestsSmokeTest(0): success [2ms]
test Float512VectorTests.indexInRangeLongFloat512VectorTestsSmokeTest(-1): success [2ms]
test Float512VectorTests.indexInRangeLongFloat512VectorTestsSmokeTest(1): success [2ms]
test Float512VectorTests.indexInRangeLongFloat512VectorTestsSmokeTest(2): success [2ms]
test Float512VectorTests.indexInRangeLongFloat512VectorTestsSmokeTest(-2): success [2ms]
test Float512VectorTests.loopBoundFloat512VectorTestsSmokeTest(0): success [0ms]
test Float512VectorTests.loopBoundFloat512VectorTestsSmokeTest(1): success [0ms]
test Float512VectorTests.loopBoundFloat512VectorTestsSmokeTest(32): success [0ms]
test Float512VectorTests.loopBoundFloat512VectorTestsSmokeTest(37): success [0ms]
test Float512VectorTests.loopBoundFloat512VectorTestsSmokeTest(1024): success [0ms]
test Float512VectorTests.loopBoundFloat512VectorTestsSmokeTest(1025): success [0ms]
test Float512VectorTests.loopBoundFloat512VectorTestsSmokeTest(1029): success [0ms]
test Float512VectorTests.loopBoundLongFloat512VectorTestsSmokeTest(0): success [0ms]
test Float512VectorTests.loopBoundLongFloat512VectorTestsSmokeTest(1): success [0ms]
test Float512VectorTests.loopBoundLongFloat512VectorTestsSmokeTest(32): success [0ms]
test Float512VectorTests.loopBoundLongFloat512VectorTestsSmokeTest(37): success [0ms]
test Float512VectorTests.loopBoundLongFloat512VectorTestsSmokeTest(1024): success [0ms]
test Float512VectorTests.loopBoundLongFloat512VectorTestsSmokeTest(1025): success [0ms]
test Float512VectorTests.loopBoundLongFloat512VectorTestsSmokeTest(1029): success [0ms]
test Float512VectorTests.ltFloat512VectorTests(float[i], float[i]): success [141ms]
test Float512VectorTests.ltFloat512VectorTests(float[i], float[i - length / 2]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i], float[i + 1]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i], float[i - 2]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i], float[zigZag(i)]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i], float[cornerCaseValue(i)]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i - length / 2], float[i]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i - length / 2], float[i - length / 2]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i - length / 2], float[i + 1]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i - length / 2], float[i - 2]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i - length / 2], float[zigZag(i)]): success [69ms]
test Float512VectorTests.ltFloat512VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [69ms]
test Float512VectorTests.ltFloat512VectorTests(float[i + 1], float[i]): success [69ms]
test Float512VectorTests.ltFloat512VectorTests(float[i + 1], float[i - length / 2]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i + 1], float[i + 1]): success [86ms]
test Float512VectorTests.ltFloat512VectorTests(float[i + 1], float[i - 2]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i + 1], float[zigZag(i)]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[i - 2], float[i]): success [69ms]
test Float512VectorTests.ltFloat512VectorTests(float[i - 2], float[i - length / 2]): success [69ms]
test Float512VectorTests.ltFloat512VectorTests(float[i - 2], float[i + 1]): success [69ms]
test Float512VectorTests.ltFloat512VectorTests(float[i - 2], float[i - 2]): success [69ms]
test Float512VectorTests.ltFloat512VectorTests(float[i - 2], float[zigZag(i)]): success [78ms]
test Float512VectorTests.ltFloat512VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[zigZag(i)], float[i]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[zigZag(i)], float[i - length / 2]): success [69ms]
test Float512VectorTests.ltFloat512VectorTests(float[zigZag(i)], float[i + 1]): success [77ms]
test Float512VectorTests.ltFloat512VectorTests(float[zigZag(i)], float[i - 2]): success [69ms]
test Float512VectorTests.ltFloat512VectorTests(float[zigZag(i)], float[zigZag(i)]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [69ms]
test Float512VectorTests.ltFloat512VectorTests(float[cornerCaseValue(i)], float[i]): success [69ms]
test Float512VectorTests.ltFloat512VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [119ms]
test Float512VectorTests.ltFloat512VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [69ms]
test Float512VectorTests.ltFloat512VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [70ms]
test Float512VectorTests.ltFloat512VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [73ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i], float[i]): success [2ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i], float[i - length / 2]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i], float[i + 1]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i], float[i - 2]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i], float[zigZag(i)]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - length / 2]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i + 1]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - 2]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i - length / 2], float[zigZag(i)]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i + 1], float[i]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i + 1], float[i - length / 2]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i + 1], float[i + 1]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i + 1], float[i - 2]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i + 1], float[zigZag(i)]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i - 2], float[i]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i - 2], float[i - length / 2]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i - 2], float[i + 1]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i - 2], float[i - 2]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i - 2], float[zigZag(i)]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - length / 2]): success [68ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i + 1]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - 2]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [1ms]
test Float512VectorTests.ltFloat512VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.maskAndFloat512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Float512VectorTests.maskAndFloat512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float512VectorTests.maskAndNotFloat512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Float512VectorTests.maskAndNotFloat512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float512VectorTests.maskCompressFloat512VectorTestsSmokeTest(mask[i % 2]): success [546ms]
test Float512VectorTests.maskCompressFloat512VectorTestsSmokeTest(mask[true]): success [335ms]
test Float512VectorTests.maskCompressFloat512VectorTestsSmokeTest(mask[false]): success [343ms]
test Float512VectorTests.maskEqFloat512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Float512VectorTests.maskEqFloat512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float512VectorTests.maskEqualsFloat512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Float512VectorTests.maskEqualsFloat512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float512VectorTests.maskFirstTrueFloat512VectorTestsSmokeTest(mask[i % 2]): success [110ms]
test Float512VectorTests.maskFirstTrueFloat512VectorTestsSmokeTest(mask[true]): success [95ms]
test Float512VectorTests.maskFirstTrueFloat512VectorTestsSmokeTest(mask[false]): success [63ms]
test Float512VectorTests.maskFromToLongFloat512VectorTestsSmokeTest(-1): success [56ms]
test Float512VectorTests.maskFromToLongFloat512VectorTestsSmokeTest(0): success [0ms]
test Float512VectorTests.maskFromToLongFloat512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Float512VectorTests.maskFromToLongFloat512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Float512VectorTests.maskHashCodeFloat512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Float512VectorTests.maskHashCodeFloat512VectorTestsSmokeTest(mask[true]): success [0ms]
test Float512VectorTests.maskHashCodeFloat512VectorTestsSmokeTest(mask[false]): success [0ms]
test Float512VectorTests.maskLastTrueFloat512VectorTestsSmokeTest(mask[i % 2]): success [116ms]
test Float512VectorTests.maskLastTrueFloat512VectorTestsSmokeTest(mask[true]): success [95ms]
test Float512VectorTests.maskLastTrueFloat512VectorTestsSmokeTest(mask[false]): success [82ms]
test Float512VectorTests.maskOrFloat512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [46ms]
test Float512VectorTests.maskOrFloat512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float512VectorTests.maskTrueCountFloat512VectorTestsSmokeTest(mask[i % 2]): success [84ms]
test Float512VectorTests.maskTrueCountFloat512VectorTestsSmokeTest(mask[true]): success [115ms]
test Float512VectorTests.maskTrueCountFloat512VectorTestsSmokeTest(mask[false]): success [63ms]
test Float512VectorTests.maskXorFloat512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Float512VectorTests.maskXorFloat512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float512VectorTests.maxFloat512VectorTests(float[-i * 5], float[i * 5]): success [5ms]
test Float512VectorTests.maxFloat512VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float512VectorTests.maxFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.maxFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float512VectorTests.maxFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.maxFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float512VectorTests.maxFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float512VectorTests.maxFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.maxFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float512VectorTests.maxFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.minFloat512VectorTests(float[-i * 5], float[i * 5]): success [5ms]
test Float512VectorTests.minFloat512VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float512VectorTests.minFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.minFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float512VectorTests.minFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.minFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float512VectorTests.minFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [29ms]
test Float512VectorTests.minFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.minFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float512VectorTests.minFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.mulFloat512VectorTests(float[-i * 5], float[i * 5]): success [6ms]
test Float512VectorTests.mulFloat512VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float512VectorTests.mulFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.mulFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float512VectorTests.mulFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [7ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [1ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [5ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [140ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float512VectorTests.mulFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float512VectorTests.negFloat512VectorTests(float[-i * 5]): success [10ms]
test Float512VectorTests.negFloat512VectorTests(float[i * 5]): success [8ms]
test Float512VectorTests.negFloat512VectorTests(float[i + 1]): success [1ms]
test Float512VectorTests.negFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test Float512VectorTests.negFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [65ms]
test Float512VectorTests.negFloat512VectorTests(float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.powFloat512VectorTests(float[-i * 5], float[i * 5]): success [19ms]
test Float512VectorTests.powFloat512VectorTests(float[-i * 5], float[i + 1]): success [16ms]
test Float512VectorTests.powFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [4ms]
test Float512VectorTests.powFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [4ms]
test Float512VectorTests.powFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [120ms]
test Float512VectorTests.powFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [13ms]
test Float512VectorTests.powFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float512VectorTests.powFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.powFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float512VectorTests.powFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.shuffleEqualsFloat512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [9ms]
test Float512VectorTests.shuffleEqualsFloat512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [7ms]
test Float512VectorTests.shuffleMiscellaneousFloat512VectorTestsSmokeTest(shuffle[random]): success [60ms]
test Float512VectorTests.shuffleTest(): success [1170ms]
test Float512VectorTests.shuffleToStringFloat512VectorTestsSmokeTest(shuffle[random]): success [33ms]
test Float512VectorTests.sliceBinaryFloat512VectorTestsBinary(float[-i * 5], float[i * 5]): success [675ms]
test Float512VectorTests.sliceBinaryFloat512VectorTestsBinary(float[-i * 5], float[i + 1]): success [1234ms]
test Float512VectorTests.sliceBinaryFloat512VectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [513ms]
test Float512VectorTests.sliceBinaryFloat512VectorTestsBinary(float[-i * 5], AbstractVectorTest$1@6ed11085): success [396ms]
test Float512VectorTests.sliceBinaryFloat512VectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [1295ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [494ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [614ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [479ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [468ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [1814ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [433ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [433ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [447ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [544ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [434ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [452ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [432ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [431ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [431ms]
test Float512VectorTests.sliceFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [440ms]
test Float512VectorTests.sliceUnaryFloat512VectorTests(float[-i * 5]): success [385ms]
test Float512VectorTests.sliceUnaryFloat512VectorTests(float[i * 5]): success [620ms]
test Float512VectorTests.sliceUnaryFloat512VectorTests(float[i + 1]): success [355ms]
test Float512VectorTests.sliceUnaryFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [364ms]
test Float512VectorTests.sliceUnaryFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [674ms]
test Float512VectorTests.sliceUnaryFloat512VectorTests(float[cornerCaseValue(i)]): success [360ms]
test Float512VectorTests.smokeTest1(): success [0ms]
test Float512VectorTests.smokeTest2(): success [45ms]
test Float512VectorTests.sqrtFloat512VectorTests(float[-i * 5]): success [8ms]
test Float512VectorTests.sqrtFloat512VectorTests(float[i * 5]): success [8ms]
test Float512VectorTests.sqrtFloat512VectorTests(float[i + 1]): success [2ms]
test Float512VectorTests.sqrtFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test Float512VectorTests.sqrtFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [65ms]
test Float512VectorTests.sqrtFloat512VectorTests(float[cornerCaseValue(i)]): success [1ms]
test Float512VectorTests.subFloat512VectorTests(float[-i * 5], float[i * 5]): success [7ms]
test Float512VectorTests.subFloat512VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float512VectorTests.subFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.subFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float512VectorTests.subFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [7ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [1ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [8ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float512VectorTests.subFloat512VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [26ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float512VectorTests.subFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float512VectorTests.toDoubleArrayFloat512VectorTestsSmokeTest(float[-i * 5]): success [0ms]
test Float512VectorTests.toDoubleArrayFloat512VectorTestsSmokeTest(float[i * 5]): success [0ms]
test Float512VectorTests.toDoubleArrayFloat512VectorTestsSmokeTest(float[i + 1]): success [0ms]
test Float512VectorTests.toDoubleArrayFloat512VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [0ms]
test Float512VectorTests.toDoubleArrayFloat512VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [0ms]
test Float512VectorTests.toDoubleArrayFloat512VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.toIntArrayFloat512VectorTestsSmokeTest(float[-i * 5]): success [6ms]
test Float512VectorTests.toIntArrayFloat512VectorTestsSmokeTest(float[i * 5]): success [6ms]
test Float512VectorTests.toIntArrayFloat512VectorTestsSmokeTest(float[i + 1]): success [8ms]
test Float512VectorTests.toIntArrayFloat512VectorTestsSmokeTest(float[intCornerCaseValue(i)]): success [6ms]
test Float512VectorTests.toLongArrayFloat512VectorTestsSmokeTest(float[-i * 5]): success [3ms]
test Float512VectorTests.toLongArrayFloat512VectorTestsSmokeTest(float[i * 5]): success [0ms]
test Float512VectorTests.toLongArrayFloat512VectorTestsSmokeTest(float[i + 1]): success [2ms]
test Float512VectorTests.toLongArrayFloat512VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test Float512VectorTests.toStringFloat512VectorTestsSmokeTest(float[-i * 5]): success [2ms]
test Float512VectorTests.toStringFloat512VectorTestsSmokeTest(float[i * 5]): success [14ms]
test Float512VectorTests.toStringFloat512VectorTestsSmokeTest(float[i + 1]): success [14ms]
test Float512VectorTests.toStringFloat512VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [5ms]
test Float512VectorTests.toStringFloat512VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [22ms]
test Float512VectorTests.toStringFloat512VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [7ms]
test Float512VectorTests.unsliceBinaryFloat512VectorTestsBinary(float[-i * 5], float[i * 5]): success [386ms]
test Float512VectorTests.unsliceBinaryFloat512VectorTestsBinary(float[-i * 5], float[i + 1]): success [690ms]
test Float512VectorTests.unsliceBinaryFloat512VectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [363ms]
test Float512VectorTests.unsliceBinaryFloat512VectorTestsBinary(float[-i * 5], AbstractVectorTest$1@6ed11085): success [369ms]
test Float512VectorTests.unsliceBinaryFloat512VectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [1458ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [889ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [1645ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [764ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [912ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [2486ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [764ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [764ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [743ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [849ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [810ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [754ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [874ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [753ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [756ms]
test Float512VectorTests.unsliceFloat512VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [750ms]
test Float512VectorTests.unsliceUnaryFloat512VectorTests(float[-i * 5]): success [369ms]
test Float512VectorTests.unsliceUnaryFloat512VectorTests(float[i * 5]): success [619ms]
test Float512VectorTests.unsliceUnaryFloat512VectorTests(float[i + 1]): success [355ms]
test Float512VectorTests.unsliceUnaryFloat512VectorTests(float[0.01 + (i / (i + 1))]): success [365ms]
test Float512VectorTests.unsliceUnaryFloat512VectorTests(AbstractVectorTest$1@6ed11085): success [706ms]
test Float512VectorTests.unsliceUnaryFloat512VectorTests(float[cornerCaseValue(i)]): success [407ms]
test Float512VectorTests.viewAsFloatingLanesTest(): success [22ms]
test Float512VectorTests.viewAsIntegeralLanesTest(): success [24ms]
test Float512VectorTests.withFloat512VectorTests(float[-i * 5], float[i * 5]): success [10ms]
test Float512VectorTests.withFloat512VectorTests(float[-i * 5], float[i + 1]): success [12ms]
test Float512VectorTests.withFloat512VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [10ms]
test Float512VectorTests.withFloat512VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [10ms]
test Float512VectorTests.withFloat512VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [226ms]

===============================================
jdk/incubator/vector/Float512VectorTests.java
Total tests run: 3215, Passes: 3214, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Float512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Float512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Float512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Float512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Float512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Float512VectorTests.d/testng.0.jta jdk/incubator/vector/Float512VectorTests.java false Float512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Double64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   2.408 seconds
messages:
command: build Double64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 19:28:37 IST 2025
Test directory:
  compile: Double64VectorTests
finished: Wed Apr 16 19:28:40 IST 2025
elapsed time (seconds): 2.408

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   2.407 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:28:37 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 11
Process id: 1538246
finished: Wed Apr 16 19:28:40 IST 2025
elapsed time (seconds): 2.407
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Double64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Double64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Double64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Double64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double64VectorTests 
TIME:   437.269 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Double64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double64VectorTests 
started: Wed Apr 16 19:28:40 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1539997
finished: Wed Apr 16 19:35:57 IST 2025
elapsed time (seconds): 437.269
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 703049849557153920
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=703049849557153920" to command line.
test Double64VectorTests.ABSDouble64VectorTests(double[-i * 5]): success [616ms]
test Double64VectorTests.ABSDouble64VectorTests(double[i * 5]): success [23ms]
test Double64VectorTests.ABSDouble64VectorTests(double[i + 1]): success [27ms]
test Double64VectorTests.ABSDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [6ms]
test Double64VectorTests.ABSDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [41ms]
test Double64VectorTests.ABSDouble64VectorTests(double[cornerCaseValue(i)]): success [5ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[-i * 5], mask[i % 2]): success [252ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i * 5], mask[i % 2]): success [40ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i + 1], mask[i % 2]): success [2ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [65ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[-i * 5], mask[true]): success [3ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i * 5], mask[true]): success [2ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [5ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[cornerCaseValue(i)], mask[true]): success [14ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[-i * 5], mask[false]): success [89ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i * 5], mask[false]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i + 1], mask[false]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[cornerCaseValue(i)], mask[false]): success [4ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[-i * 5]): success [120ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[i + 1]): success [41ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.ACOSDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [60ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], double[i * 5]): success [276ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], double[i + 1]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [48ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [32ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [18ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [6ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [26ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [12ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [7ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [46ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [69ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [102ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [30ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [7ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [63ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [26ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [5ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[-i * 5]): success [124ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[i * 5]): success [31ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[i + 1]): success [29ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [36ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [5ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[cornerCaseValue(i)]): success [5ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[-i * 5], mask[i % 2]): success [119ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i * 5], mask[i % 2]): success [33ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i + 1], mask[i % 2]): success [5ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [44ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [18ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [60ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[-i * 5], mask[true]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i * 5], mask[true]): success [83ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i + 1], mask[true]): success [8ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [10ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[-i * 5], mask[false]): success [39ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i * 5], mask[false]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i + 1], mask[false]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [10ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[-i * 5]): success [11ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[i + 1]): success [2ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [3ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[-i * 5], mask[i % 2]): success [10ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i * 5], mask[i % 2]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i + 1], mask[i % 2]): success [5ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[-i * 5], mask[true]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i * 5], mask[true]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i + 1], mask[true]): success [5ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [28ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[-i * 5], mask[false]): success [5ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i * 5], mask[false]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [14ms]
test Double64VectorTests.ASINDouble64VectorTests(double[-i * 5]): success [146ms]
test Double64VectorTests.ASINDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.ASINDouble64VectorTests(double[i + 1]): success [43ms]
test Double64VectorTests.ASINDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.ASINDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [90ms]
test Double64VectorTests.ASINDouble64VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], double[i * 5]): success [167ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], double[i + 1]): success [3ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [63ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [5ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [89ms]
test Double64VectorTests.ATANDouble64VectorTests(double[-i * 5]): success [95ms]
test Double64VectorTests.ATANDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.ATANDouble64VectorTests(double[i + 1]): success [42ms]
test Double64VectorTests.ATANDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.ATANDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [68ms]
test Double64VectorTests.ATANDouble64VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[-i * 5]): success [168ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[i * 5]): success [137ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[i + 1]): success [137ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [167ms]
test Double64VectorTests.BroadcastDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [137ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[cornerCaseValue(i)]): success [193ms]
test Double64VectorTests.BroadcastLongDouble64VectorTestsSmokeTest(double[-i * 5]): success [4ms]
test Double64VectorTests.BroadcastLongDouble64VectorTestsSmokeTest(double[i * 5]): success [3ms]
test Double64VectorTests.BroadcastLongDouble64VectorTestsSmokeTest(double[i + 1]): success [3ms]
test Double64VectorTests.BroadcastLongDouble64VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[-i * 5]): success [134ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[i * 5]): success [2ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[i + 1]): success [75ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.CBRTDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [128ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[cornerCaseValue(i)]): success [5ms]
test Double64VectorTests.COSDouble64VectorTests(double[-i * 5]): success [96ms]
test Double64VectorTests.COSDouble64VectorTests(double[i * 5]): success [0ms]
test Double64VectorTests.COSDouble64VectorTests(double[i + 1]): success [37ms]
test Double64VectorTests.COSDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [30ms]
test Double64VectorTests.COSDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.COSDouble64VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.COSHDouble64VectorTests(double[-i * 5]): success [148ms]
test Double64VectorTests.COSHDouble64VectorTests(double[i * 5]): success [0ms]
test Double64VectorTests.COSHDouble64VectorTests(double[i + 1]): success [42ms]
test Double64VectorTests.COSHDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.COSHDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [133ms]
test Double64VectorTests.COSHDouble64VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], double[i * 5]): success [205ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], double[i + 1]): success [28ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [37ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [5ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [6ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [110ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [31ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [67ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [6ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [7ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [5ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[i]): success [384ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[i - length / 2]): success [206ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[i + 1]): success [152ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[i - 2]): success [115ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[zigZag(i)]): success [116ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[cornerCaseValue(i)]): success [115ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[i]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[i - length / 2]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[i + 1]): success [138ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[i - 2]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[zigZag(i)]): success [124ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [112ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[i]): success [112ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[i - length / 2]): success [112ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[i + 1]): success [112ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[i - 2]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[zigZag(i)]): success [113ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [112ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[i]): success [136ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[i - length / 2]): success [112ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[i + 1]): success [112ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[i - 2]): success [112ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[zigZag(i)]): success [135ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[i]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[i - length / 2]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[i + 1]): success [143ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[i - 2]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[zigZag(i)]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[i]): success [109ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [109ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [118ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [115ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [32ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [9ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [9ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [9ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [10ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [9ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [9ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [7ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [7ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [20ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [9ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [11ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [7ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [106ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [69ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

estsBroadcastLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [152ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [152ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [152ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [153ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [174ms]
test Double64VectorTests.compressDouble64VectorTests(double[-i * 5], mask[i % 2]): success [190ms]
test Double64VectorTests.compressDouble64VectorTests(double[i * 5], mask[i % 2]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[i + 1], mask[i % 2]): success [10ms]
test Double64VectorTests.compressDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[-i * 5], mask[true]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[i * 5], mask[true]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[i + 1], mask[true]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [10ms]
test Double64VectorTests.compressDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [10ms]
test Double64VectorTests.compressDouble64VectorTests(double[cornerCaseValue(i)], mask[true]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[-i * 5], mask[false]): success [61ms]
test Double64VectorTests.compressDouble64VectorTests(double[i * 5], mask[false]): success [12ms]
test Double64VectorTests.compressDouble64VectorTests(double[i + 1], mask[false]): success [12ms]
test Double64VectorTests.compressDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [12ms]
test Double64VectorTests.compressDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[cornerCaseValue(i)], mask[false]): success [12ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], double[i * 5]): success [9ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [9ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [17ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [7ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[i]): success [199ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[i - length / 2]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[i + 1]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[i - 2]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[zigZag(i)]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[cornerCaseValue(i)]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[i]): success [135ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[i - length / 2]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[i + 1]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[i - 2]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[zigZag(i)]): success [119ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[i]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[i - length / 2]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[i + 1]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[i - 2]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[zigZag(i)]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[i]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[i - length / 2]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[i + 1]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[i - 2]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[zigZag(i)]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[i]): success [125ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[i - length / 2]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[i + 1]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[i - 2]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[zigZag(i)]): success [117ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[i]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [111ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[i]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[i - length / 2]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[i + 1]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[i - 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[zigZag(i)]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[i]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[i + 1]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[i - 2]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[zigZag(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[i]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[i - length / 2]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[i + 1]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[i - 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[zigZag(i)]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [10ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[i]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[i + 1]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[i - 2]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[zigZag(i)]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[i]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[i + 1]): success [58ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[i - 2]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[i]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.expandDouble64VectorTests(double[-i * 5], mask[i % 2]): success [109ms]
test Double64VectorTests.expandDouble64VectorTests(double[i * 5], mask[i % 2]): success [12ms]
test Double64VectorTests.expandDouble64VectorTests(double[i + 1], mask[i % 2]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[-i * 5], mask[true]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[i * 5], mask[true]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[i + 1], mask[true]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[cornerCaseValue(i)], mask[true]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[-i * 5], mask[false]): success [24ms]
test Double64VectorTests.expandDouble64VectorTests(double[i * 5], mask[false]): success [12ms]
test Double64VectorTests.expandDouble64VectorTests(double[i + 1], mask[false]): success [13ms]
test Double64VectorTests.expandDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [13ms]
test Double64VectorTests.expandDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [12ms]
test Double64VectorTests.expandDouble64VectorTests(double[cornerCaseValue(i)], mask[false]): success [13ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[-i * 5]): success [12ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[i * 5]): success [0ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[-i * 5]): success [0ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[i * 5]): success [0ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[i + 1]): success [0ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[-i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[i + 1]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[cornerCaseValue(i)]): success [12ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[-i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[i + 1]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[-i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[i + 1]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[-i * 5]): success [12ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[i * 5]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[i + 1]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[0.01 + (i / (i + 1))]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], AbstractVectorTest$1@25daae7f): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[cornerCaseValue(i)]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[-i * 5]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[i * 5]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[i + 1]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[0.01 + (i / (i + 1))]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], AbstractVectorTest$1@25daae7f): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[cornerCaseValue(i)]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[-i * 5]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[i * 5]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[i + 1]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[0.01 + (i / (i + 1))]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], AbstractVectorTest$1@25daae7f): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[cornerCaseValue(i)]): success [17ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[-i * 5]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[i * 5]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[i + 1]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[0.01 + (i / (i + 1))]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, AbstractVectorTest$1@25daae7f): success [33ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[cornerCaseValue(i)]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[-i * 5]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[i * 5]): success [18ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[i + 1]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[0.01 + (i / (i + 1))]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], AbstractVectorTest$1@25daae7f): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [4ms]
test Double64VectorTests.getDouble64VectorTests(double[-i * 5]): success [29ms]
test Double64VectorTests.getDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.getDouble64VectorTests(double[i + 1]): success [1ms]
test Double64VectorTests.getDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.getDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.getDouble64VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[-i * 5]): success [52ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[i * 5]): success [7ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[i + 1]): success [9ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [3ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [24ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [23ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(0): success [93ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(-1): success [25ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(1): success [5ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(2): success [5ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(-2): success [5ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(0): success [12ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(-1): success [5ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(1): success [5ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(2): success [16ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(-2): success [4ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(0): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(1): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(32): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(37): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(1024): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(1025): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(1029): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(0): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(1): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(32): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(37): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(1024): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(1025): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(1029): success [0ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[i]): success [201ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[i - length / 2]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[i + 1]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[i - 2]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[zigZag(i)]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[cornerCaseValue(i)]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[i]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[i - length / 2]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[i + 1]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[i - 2]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[zigZag(i)]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[i]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[i - length / 2]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[i + 1]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[i - 2]): success [121ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[zigZag(i)]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [118ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[i]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[i - length / 2]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[i + 1]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[i - 2]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[zigZag(i)]): success [134ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[i]): success [125ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[i - length / 2]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[i + 1]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[i - 2]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[zigZag(i)]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[i]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [118ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [110ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[i]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [10ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [50ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.maskAndDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test Double64VectorTests.maskAndDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskAndNotDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Double64VectorTests.maskAndNotDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskCompressDouble64VectorTestsSmokeTest(mask[i % 2]): success [266ms]
test Double64VectorTests.maskCompressDouble64VectorTestsSmokeTest(mask[true]): success [109ms]
test Double64VectorTests.maskCompressDouble64VectorTestsSmokeTest(mask[false]): success [202ms]
test Double64VectorTests.maskEqDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Double64VectorTests.maskEqDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskEqualsDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Double64VectorTests.maskEqualsDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskFirstTrueDouble64VectorTestsSmokeTest(mask[i % 2]): success [83ms]
test Double64VectorTests.maskFirstTrueDouble64VectorTestsSmokeTest(mask[true]): success [51ms]
test Double64VectorTests.maskFirstTrueDouble64VectorTestsSmokeTest(mask[false]): success [20ms]
test Double64VectorTests.maskFromToLongDouble64VectorTestsSmokeTest(-1): success [73ms]
test Double64VectorTests.maskFromToLongDouble64VectorTestsSmokeTest(0): success [0ms]
test Double64VectorTests.maskFromToLongDouble64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Double64VectorTests.maskFromToLongDouble64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Double64VectorTests.maskHashCodeDouble64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Double64VectorTests.maskHashCodeDouble64VectorTestsSmokeTest(mask[true]): success [0ms]
test Double64VectorTests.maskHashCodeDouble64VectorTestsSmokeTest(mask[false]): success [0ms]
test Double64VectorTests.maskLastTrueDouble64VectorTestsSmokeTest(mask[i % 2]): success [66ms]
test Double64VectorTests.maskLastTrueDouble64VectorTestsSmokeTest(mask[true]): success [51ms]
test Double64VectorTests.maskLastTrueDouble64VectorTestsSmokeTest(mask[false]): success [36ms]
test Double64VectorTests.maskOrDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [24ms]
test Double64VectorTests.maskOrDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskTrueCountDouble64VectorTestsSmokeTest(mask[i % 2]): success [30ms]
test Double64VectorTests.maskTrueCountDouble64VectorTestsSmokeTest(mask[true]): success [56ms]
test Double64VectorTests.maskTrueCountDouble64VectorTestsSmokeTest(mask[false]): success [20ms]
test Double64VectorTests.maskXorDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Double64VectorTests.maskXorDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], double[i * 5]): success [7ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [8ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [2ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], double[i * 5]): success [7ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [8ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], double[i * 5]): success [7ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [9ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [11ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [8ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double64VectorTests.negDouble64VectorTests(double[-i * 5]): success [48ms]
test Double64VectorTests.negDouble64VectorTests(double[i * 5]): success [2ms]
test Double64VectorTests.negDouble64VectorTests(double[i + 1]): success [33ms]
test Double64VectorTests.negDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.negDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [45ms]
test Double64VectorTests.negDouble64VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], double[i * 5]): success [73ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], double[i + 1]): success [28ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [41ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [3ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [18ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.shuffleEqualsDouble64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [25ms]
test Double64VectorTests.shuffleEqualsDouble64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [13ms]
test Double64VectorTests.shuffleMiscellaneousDouble64VectorTestsSmokeTest(shuffle[random]): success [6ms]
test Double64VectorTests.shuffleTest(): success [712ms]
test Double64VectorTests.shuffleToStringDouble64VectorTestsSmokeTest(shuffle[random]): success [51ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[i * 5]): success [2144ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[i + 1]): success [1398ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1391ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1286ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [1216ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [1761ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [1531ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [1487ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1394ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1534ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [1378ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [1445ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1374ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1372ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1471ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1376ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1373ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1378ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1371ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1375ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[-i * 5]): success [1662ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[i * 5]): success [1149ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[i + 1]): success [1141ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1153ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [1310ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[cornerCaseValue(i)]): success [1156ms]
test Double64VectorTests.smokeTest1(): success [0ms]
test Double64VectorTests.smokeTest2(): success [64ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[-i * 5]): success [67ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[i * 5]): success [2ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[i + 1]): success [3ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [68ms]
test Double64VectorTests.sqrtDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], double[i * 5]): success [9ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], double[i + 1]): success [23ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [11ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [21ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [11ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [8ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): failure [141ms]
java.lang.AssertionError: at index #340, input1 = -1700.0, input2 = NaN, mask = false expected [-1700.0] but found [0.0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEquals(Assert.java:701)
	at Double64VectorTests.assertArraysEquals(Double64VectorTests.java:473)
	at Double64VectorTests.assertArraysEquals(Double64VectorTests.java:463)
	at Double64VectorTests.subDouble64VectorTestsMasked(Double64VectorTests.java:1673)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Double64VectorTests.toIntArrayDouble64VectorTestsSmokeTest(double[-i * 5]): success [15ms]
test Double64VectorTests.toIntArrayDouble64VectorTestsSmokeTest(double[i * 5]): success [7ms]
test Double64VectorTests.toIntArrayDouble64VectorTestsSmokeTest(double[i + 1]): success [7ms]
test Double64VectorTests.toIntArrayDouble64VectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [7ms]
test Double64VectorTests.toLongArrayDouble64VectorTestsSmokeTest(double[-i * 5]): success [0ms]
test Double64VectorTests.toLongArrayDouble64VectorTestsSmokeTest(double[i * 5]): success [0ms]
test Double64VectorTests.toLongArrayDouble64VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double64VectorTests.toLongArrayDouble64VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[-i * 5]): success [8ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[i + 1]): success [22ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [9ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [2ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [28ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[i * 5]): success [1596ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[i + 1]): success [1290ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1269ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1220ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [1173ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [3206ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [2418ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [2856ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2341ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2428ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [2337ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [2487ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2445ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2372ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2330ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [2397ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [2330ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2373ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2332ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2319ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[-i * 5]): success [1644ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[i * 5]): success [1152ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[i + 1]): success [1272ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1161ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [1141ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[cornerCaseValue(i)]): success [1165ms]
test Double64VectorTests.viewAsFloatingLanesTest(): success [27ms]
test Double64VectorTests.viewAsIntegeralLanesTest(): success [31ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], double[i * 5]): success [170ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], double[i + 1]): success [85ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [67ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [67ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [67ms]

===============================================
jdk/incubator/vector/Double64VectorTests.java
Total tests run: 3209, Passes: 3208, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Double64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Double64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Double64VectorTests.d/testng.0.jta jdk/incubator/vector/Double64VectorTests.java false Double64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
TEST: jdk/incubator/vector/Int128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.529 seconds
messages:
command: build Int128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 19:31:26 IST 2025
Test directory:
  compile: Int128VectorTests
finished: Wed Apr 16 19:31:28 IST 2025
elapsed time (seconds): 1.529

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.529 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:31:26 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 9
Process id: 1538079
finished: Wed Apr 16 19:31:28 IST 2025
elapsed time (seconds): 1.529
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
TIME:   335.385 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
started: Wed Apr 16 19:31:28 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1541005
finished: Wed Apr 16 19:37:03 IST 2025
elapsed time (seconds): 335.385
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -111097241372518624
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-111097241372518624" to command line.
test Int128VectorTests.ABSInt128VectorTests(int[-i * 5]): success [548ms]
test Int128VectorTests.ABSInt128VectorTests(int[i * 5]): success [56ms]
test Int128VectorTests.ABSInt128VectorTests(int[i + 1]): success [12ms]
test Int128VectorTests.ABSInt128VectorTests(int[cornerCaseValue(i)]): success [7ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[i % 2]): success [221ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[i % 2]): success [113ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[i % 2]): success [2ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[true]): success [27ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i * 5]): success [251ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i + 1]): success [59ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [23ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [9ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [121ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [63ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[-i * 5]): success [118ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i * 5]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i + 1]): success [65ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [23ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [109ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [117ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [13ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[-i * 5]): success [19ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i * 5]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i * 5]): success [182ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i + 1]): success [59ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [19ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [7ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [63ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[-i * 5]): success [134ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i * 5]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i + 1]): success [61ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [78ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [80ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [15ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [30ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i * 5]): success [173ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i + 1]): success [68ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [59ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [74ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [51ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i * 5]): success [106ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i + 1]): success [67ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [76ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [73ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [192ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [59ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[-i * 5]): success [8ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i * 5]): success [53ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i + 1]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [56ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [54ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [11ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [48ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [4ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [108ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [90ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [325ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [20ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [102ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [78ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [60ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [44ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [22ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [3ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): succes

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

 success [212ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i]): success [197ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - length / 2]): success [105ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i + 1]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - length / 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [105ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - length / 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[zigZag(i)]): success [139ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i]): success [108ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i + 1]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [98ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [9ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [52ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [0ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [0ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [28ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[i % 2]): success [154ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[i % 2]): success [141ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[i % 2]): success [117ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[true]): success [6ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[true]): success [6ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [8ms]
test Int128VectorTests.getInt128VectorTests(int[-i * 5]): success [7ms]
test Int128VectorTests.getInt128VectorTests(int[i * 5]): success [65ms]
test Int128VectorTests.getInt128VectorTests(int[i + 1]): success [3ms]
test Int128VectorTests.getInt128VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[-i * 5]): success [12ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i * 5]): success [2ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i + 1]): success [19ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(0): success [73ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(1): success [19ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-2): success [4ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(0): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-2): success [3ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(37): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1024): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(0): success [4ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(37): success [1ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1024): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i]): success [194ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - length / 2]): success [106ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i + 1]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[zigZag(i)]): success [122ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i]): success [128ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i + 1]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - 2]): success [108ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - length / 2]): success [97ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i + 1]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[zigZag(i)]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - length / 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i + 1]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - 2]): success [97ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[zigZag(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i + 1]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [98ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [5ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [52ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [27ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[i % 2]): success [255ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[true]): success [121ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[false]): success [82ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [37ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[true]): success [58ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[false]): success [26ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(-1): success [65ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[true]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[false]): success [0ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [86ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[true]): success [58ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[false]): success [41ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [26ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[true]): success [59ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[false]): success [27ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [39ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[-i * 5]): success [14ms]
test Int128VectorTests.negInt128VectorTests(int[i * 5]): success [74ms]
test Int128VectorTests.negInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[-i * 5]): success [19ms]
test Int128VectorTests.notInt128VectorTests(int[i * 5]): success [79ms]
test Int128VectorTests.notInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [12ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [9ms]
test Int128VectorTests.shuffleMiscellaneousInt128VectorTestsSmokeTest(shuffle[random]): success [9ms]
test Int128VectorTests.shuffleTest(): success [314ms]
test Int128VectorTests.shuffleToStringInt128VectorTestsSmokeTest(shuffle[random]): success [40ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [642ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [278ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [120ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [194ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [322ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [136ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [120ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [120ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [232ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [120ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [120ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [153ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[-i * 5]): success [254ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i * 5]): success [234ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i + 1]): success [109ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [109ms]
test Int128VectorTests.smokeTest1(): success [0ms]
test Int128VectorTests.smokeTest2(): success [78ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[-i * 5]): success [5ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i + 1]): success [13ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [13ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [267ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [445ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [119ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [605ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [581ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [229ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [228ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [278ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [265ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [240ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [227ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [242ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[-i * 5]): success [240ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i * 5]): success [236ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i + 1]): success [110ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [109ms]
test Int128VectorTests.viewAsFloatingLanesTest(): success [451ms]
test Int128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i * 5]): success [43ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i + 1]): success [124ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [32ms]

===============================================
jdk/incubator/vector/Int128VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Int128VectorTests.d/testng.0.jta jdk/incubator/vector/Int128VectorTests.java false Int128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/Float64VectorTests.java
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
TEST: jdk/incubator/vector/Int512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.611 seconds
messages:
command: build Int512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 19:32:49 IST 2025
Test directory:
  compile: Int512VectorTests
finished: Wed Apr 16 19:32:51 IST 2025
elapsed time (seconds): 1.611

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.61 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:32:49 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 15
Process id: 1538646
finished: Wed Apr 16 19:32:51 IST 2025
elapsed time (seconds): 1.61
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests 
TIME:   273.615 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests 
started: Wed Apr 16 19:32:51 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1541350
finished: Wed Apr 16 19:37:25 IST 2025
elapsed time (seconds): 273.615
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -8740522296572962259
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-8740522296572962259" to command line.
test Int512VectorTests.ABSInt512VectorTests(int[-i * 5]): success [344ms]
test Int512VectorTests.ABSInt512VectorTests(int[i * 5]): success [373ms]
test Int512VectorTests.ABSInt512VectorTests(int[i + 1]): success [10ms]
test Int512VectorTests.ABSInt512VectorTests(int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[i % 2]): success [132ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[i % 2]): success [102ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[i % 2]): success [96ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[true]): success [118ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[i * 5]): success [126ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[i + 1]): success [279ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [15ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [21ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [9ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [155ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [57ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [6ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [91ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[-i * 5]): success [129ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[i * 5]): success [5ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[i + 1]): success [67ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[cornerCaseValue(i)]): success [23ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [86ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [6ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [89ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[true]): success [4ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[true]): success [4ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[true]): success [14ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[false]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[false]): success [15ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[-i * 5]): success [8ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[i * 5]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[i + 1]): success [10ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [7ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[false]): success [12ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[i * 5]): success [274ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[i + 1]): success [60ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [17ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [10ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [85ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[-i * 5]): success [147ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[i * 5]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[i + 1]): success [64ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [32ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [83ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[false]): success [15ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[i * 5]): success [282ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[i + 1]): success [195ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [48ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [80ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [84ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [50ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [50ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [179ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [98ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[i * 5]): success [119ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[i + 1]): success [163ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [98ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [93ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [47ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [169ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [47ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [47ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [47ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [92ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [221ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[-i * 5]): success [6ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[i * 5]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[i + 1]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [16ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [22ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [66ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [9ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [58ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [26ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [5ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [12ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [82ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [175ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [8ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [9ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [9ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [385ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [103ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [11ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [61ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [45ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

* 5], mask[true]): success [238ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [441ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [243ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [237ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [237ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [237ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i]): success [145ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i - length / 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i + 1]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i - 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[zigZag(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i - length / 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i + 1]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i - 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[zigZag(i)]): success [70ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i - length / 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i + 1]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i - 2]): success [73ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[zigZag(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i - length / 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i + 1]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i - 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[zigZag(i)]): success [77ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i - length / 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i + 1]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i - 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[zigZag(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [9ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [2ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [2ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [2ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [2ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [2ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[i % 2]): success [275ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[i % 2]): success [93ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[i % 2]): success [86ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [80ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[true]): success [80ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[true]): success [145ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[true]): success [4ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[false]): success [7ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[false]): success [7ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[false]): success [7ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int512VectorTests.getInt512VectorTests(int[-i * 5]): success [7ms]
test Int512VectorTests.getInt512VectorTests(int[i * 5]): success [7ms]
test Int512VectorTests.getInt512VectorTests(int[i + 1]): success [7ms]
test Int512VectorTests.getInt512VectorTests(int[cornerCaseValue(i)]): success [7ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[-i * 5]): success [40ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(0): success [62ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(-1): success [2ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(1): success [15ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(2): success [2ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(-2): success [3ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(0): success [2ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(-1): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(1): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(2): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(-2): success [2ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(32): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(37): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1024): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1025): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1029): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(0): success [4ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(32): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(37): success [1ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1024): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1025): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1029): success [0ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i]): success [159ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i - length / 2]): success [80ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i + 1]): success [78ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i - 2]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[zigZag(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i]): success [102ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i - length / 2]): success [100ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i + 1]): success [79ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i - 2]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[zigZag(i)]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i - length / 2]): success [88ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i + 1]): success [113ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i - 2]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[zigZag(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i - length / 2]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i + 1]): success [116ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i - 2]): success [75ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[zigZag(i)]): success [79ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i - length / 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i + 1]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i - 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[zigZag(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [6ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [67ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.maskAndInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Int512VectorTests.maskAndInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskAndNotInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Int512VectorTests.maskAndNotInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[i % 2]): success [519ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[true]): success [329ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[false]): success [358ms]
test Int512VectorTests.maskEqInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int512VectorTests.maskEqInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskEqualsInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int512VectorTests.maskEqualsInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[i % 2]): success [71ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[true]): success [92ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[false]): success [61ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(-1): success [60ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[true]): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[false]): success [0ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[i % 2]): success [112ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[true]): success [92ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[false]): success [80ms]
test Int512VectorTests.maskOrInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [18ms]
test Int512VectorTests.maskOrInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[i % 2]): success [69ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[true]): success [93ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[false]): success [61ms]
test Int512VectorTests.maskXorInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int512VectorTests.maskXorInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [31ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.negInt512VectorTests(int[-i * 5]): success [7ms]
test Int512VectorTests.negInt512VectorTests(int[i * 5]): success [8ms]
test Int512VectorTests.negInt512VectorTests(int[i + 1]): success [2ms]
test Int512VectorTests.negInt512VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.notInt512VectorTests(int[-i * 5]): success [50ms]
test Int512VectorTests.notInt512VectorTests(int[i * 5]): success [55ms]
test Int512VectorTests.notInt512VectorTests(int[i + 1]): success [44ms]
test Int512VectorTests.notInt512VectorTests(int[cornerCaseValue(i)]): success [51ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.shuffleEqualsInt512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [9ms]
test Int512VectorTests.shuffleEqualsInt512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [6ms]
test Int512VectorTests.shuffleMiscellaneousInt512VectorTestsSmokeTest(shuffle[random]): success [1ms]
test Int512VectorTests.shuffleTest(): success [578ms]
test Int512VectorTests.shuffleToStringInt512VectorTestsSmokeTest(shuffle[random]): success [33ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i * 5]): success [543ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i + 1]): success [797ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [336ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [392ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [519ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [387ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [394ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1073ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [405ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [393ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [396ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [393ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[-i * 5]): success [327ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[i * 5]): success [549ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[i + 1]): success [313ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[cornerCaseValue(i)]): success [356ms]
test Int512VectorTests.smokeTest1(): success [0ms]
test Int512VectorTests.smokeTest2(): success [72ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [3ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[-i * 5]): success [5ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[i * 5]): success [7ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[i + 1]): success [13ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [12ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i * 5]): success [344ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i + 1]): success [624ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [316ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [799ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [1400ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [718ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [738ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1951ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [667ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [666ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [665ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [809ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[-i * 5]): success [468ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[i * 5]): success [716ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[i + 1]): success [315ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[cornerCaseValue(i)]): success [323ms]
test Int512VectorTests.viewAsFloatingLanesTest(): success [397ms]
test Int512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[i * 5]): success [17ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[i + 1]): success [10ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [9ms]

===============================================
jdk/incubator/vector/Int512VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Int512VectorTests.d/testng.0.jta jdk/incubator/vector/Int512VectorTests.java false Int512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorTests.java
TEST: jdk/incubator/vector/Long128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.939 seconds
messages:
command: build Long128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 19:34:13 IST 2025
Test directory:
  compile: Long128VectorTests
finished: Wed Apr 16 19:34:14 IST 2025
elapsed time (seconds): 0.939

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.939 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:34:13 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 2
Process id: 1537605
finished: Wed Apr 16 19:34:14 IST 2025
elapsed time (seconds): 0.939
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
TIME:   246.154 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
started: Wed Apr 16 19:34:14 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1541700
finished: Wed Apr 16 19:38:20 IST 2025
elapsed time (seconds): 246.154
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -2896128817161710901
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-2896128817161710901" to command line.
test Long128VectorTests.ABSLong128VectorTests(long[-i * 5]): success [569ms]
test Long128VectorTests.ABSLong128VectorTests(long[i * 5]): success [51ms]
test Long128VectorTests.ABSLong128VectorTests(long[i + 1]): success [7ms]
test Long128VectorTests.ABSLong128VectorTests(long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[i % 2]): success [216ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[i % 2]): success [111ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[true]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[false]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i * 5]): success [199ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i + 1]): success [98ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [145ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [63ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [10ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[-i * 5]): success [129ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i * 5]): success [41ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i + 1]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [107ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [82ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [13ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [28ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [22ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i * 5]): success [97ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i + 1]): success [60ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [8ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [64ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[-i * 5]): success [122ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i * 5]): success [1ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i + 1]): success [62ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [67ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [80ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [29ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [12ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i * 5]): success [168ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i + 1]): success [72ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [63ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [75ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i * 5]): success [119ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i + 1]): success [72ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [78ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [73ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [181ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [57ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[-i * 5]): success [8ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i * 5]): success [55ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i + 1]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [58ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [65ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [13ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [49ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [108ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [97ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [509ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [84ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [23ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [3ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(lo

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

e(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseDivByZeroSmokeTest(): success [11ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [25ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [58ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[i % 2]): success [164ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[i % 2]): success [114ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[i % 2]): success [42ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [42ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[true]): success [68ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i * 5]): success [204ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i + 1]): success [190ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [76ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [109ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [272ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [279ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [146ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): failure [137ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$7(LongVector.java:914)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.bOpTemplateMF(LongVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.bOpMF(Long128Vector.java:204)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.bOpMF(Long128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$6(LongVector.java:914)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lanewiseTemplate(LongVector.java:895)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.lanewise(Long128Vector.java:281)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.lanewise(Long128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.div(LongVector.java:1645)
	at Long128VectorTests.divLong128VectorTestsMasked(Long128VectorTests.java:1780)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [146ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [147ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [146ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [162ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [146ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i]): success [171ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [63ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[i % 2]): success [112ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[i % 2]): success [114ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[i % 2]): success [41ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[true]): success [22ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.getLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.getLong128VectorTests(long[i * 5]): success [59ms]
test Long128VectorTests.getLong128VectorTests(long[i + 1]): success [1ms]
test Long128VectorTests.getLong128VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[-i * 5]): success [40ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i * 5]): success [2ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(0): success [77ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-1): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(1): success [19ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(2): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(0): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-1): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(1): success [3ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(2): success [5ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i]): success [170ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [9ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [62ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[i % 2]): success [226ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[true]): success [95ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[false]): success [60ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[true]): success [53ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[false]): success [20ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(-1): success [66ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[true]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[false]): success [0ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [62ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[false]): success [33ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [18ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[i % 2]): success [28ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[true]): success [56ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[false]): success [20ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[-i * 5]): success [14ms]
test Long128VectorTests.negLong128VectorTests(long[i * 5]): success [47ms]
test Long128VectorTests.negLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[-i * 5]): success [17ms]
test Long128VectorTests.notLong128VectorTests(long[i * 5]): success [53ms]
test Long128VectorTests.notLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i * 5]): success [8ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [469ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [49ms]
test Long128VectorTests.shuffleMiscellaneousLong128VectorTestsSmokeTest(shuffle[random]): success [23ms]
test Long128VectorTests.shuffleTest(): success [346ms]
test Long128VectorTests.shuffleToStringLong128VectorTestsSmokeTest(shuffle[random]): success [50ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [598ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [265ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [83ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [167ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [313ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [85ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [84ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [84ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [84ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [200ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [84ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [84ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[-i * 5]): success [242ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i * 5]): success [225ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i + 1]): success [153ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [78ms]
test Long128VectorTests.smokeTest1(): success [0ms]
test Long128VectorTests.smokeTest2(): success [52ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [21ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [12ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i * 5]): success [7ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[-i * 5]): success [2ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i * 5]): success [7ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i + 1]): success [43ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [264ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [238ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [219ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [550ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [522ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [160ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [158ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [167ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [159ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [158ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [165ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [158ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[-i * 5]): success [238ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i * 5]): success [216ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i + 1]): success [77ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [77ms]
test Long128VectorTests.viewAsFloatingLanesTest(): success [244ms]
test Long128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i * 5]): success [40ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i + 1]): success [114ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [31ms]

===============================================
jdk/incubator/vector/Long128VectorTests.java
Total tests run: 3321, Passes: 3319, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Long128VectorTests.d/testng.0.jta jdk/incubator/vector/Long128VectorTests.java false Long128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/Long256VectorTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
TEST: jdk/incubator/vector/Int64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.927 seconds
messages:
command: build Int64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 19:33:33 IST 2025
Test directory:
  compile: Int64VectorTests
finished: Wed Apr 16 19:33:34 IST 2025
elapsed time (seconds): 0.927

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.927 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:33:33 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 1
Process id: 1537578
finished: Wed Apr 16 19:33:34 IST 2025
elapsed time (seconds): 0.927
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Int64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Int64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Int64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 3
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
TIME:   456.4 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
started: Wed Apr 16 19:33:34 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1541459
finished: Wed Apr 16 19:41:10 IST 2025
elapsed time (seconds): 456.4
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 8936722764574559120
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=8936722764574559120" to command line.
test Int64VectorTests.ABSInt64VectorTests(int[-i * 5]): success [574ms]
test Int64VectorTests.ABSInt64VectorTests(int[i * 5]): success [24ms]
test Int64VectorTests.ABSInt64VectorTests(int[i + 1]): success [31ms]
test Int64VectorTests.ABSInt64VectorTests(int[cornerCaseValue(i)]): success [19ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [215ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [24ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [34ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[true]): success [28ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i * 5]): success [289ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i + 1]): success [27ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [9ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [25ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [44ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [146ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [7ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [33ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [13ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[-i * 5]): success [122ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i * 5]): success [25ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i + 1]): success [16ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [115ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [60ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [40ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [71ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[-i * 5]): success [19ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[true]): success [8ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i * 5]): success [194ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [53ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [19ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [36ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [19ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [70ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [8ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [34ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[-i * 5]): success [144ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i * 5]): success [5ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i + 1]): success [5ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [60ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [60ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [71ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [38ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i * 5]): success [171ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [62ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [128ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [77ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [39ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i * 5]): success [155ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [58ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [144ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [36ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [76ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [12ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [215ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [50ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[-i * 5]): success [43ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i * 5]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i + 1]): success [38ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [112ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [55ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [60ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [59ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [52ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [54ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [7ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [9ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [177ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [78ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [91ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [344ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [84ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [102ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [23ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [69ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [44ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(in

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

stsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [353ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [291ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [292ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [292ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i]): success [242ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - length / 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i + 1]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i + 1]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - length / 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i + 1]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[zigZag(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i]): success [151ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - length / 2]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i + 1]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[zigZag(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i + 1]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - 2]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [3ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [10ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [57ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[i % 2]): success [197ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[i % 2]): success [114ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[i % 2]): success [83ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [82ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [13ms]
test Int64VectorTests.getInt64VectorTests(int[-i * 5]): success [35ms]
test Int64VectorTests.getInt64VectorTests(int[i * 5]): success [2ms]
test Int64VectorTests.getInt64VectorTests(int[i + 1]): success [3ms]
test Int64VectorTests.getInt64VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[-i * 5]): success [51ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i * 5]): success [20ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i + 1]): success [3ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(0): success [93ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-1): success [5ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(1): success [26ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(2): success [5ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-2): success [9ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(0): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-1): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(1): success [8ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(2): success [19ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-2): success [5ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(0): success [4ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(37): success [1ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i]): success [237ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - length / 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i + 1]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - 2]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[zigZag(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i]): success [182ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i + 1]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - 2]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - length / 2]): success [146ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i + 1]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[zigZag(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - length / 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i + 1]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - 2]): success [145ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[zigZag(i)]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [147ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - 2]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [6ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [64ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[i % 2]): success [226ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[true]): success [77ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[false]): success [58ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[true]): success [52ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[false]): success [20ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(-1): success [79ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[true]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[false]): success [0ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [65ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[true]): success [52ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[false]): success [33ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [24ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[i % 2]): success [29ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[true]): success [52ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[false]): success [20ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [31ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[-i * 5]): success [51ms]
test Int64VectorTests.negInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[i + 1]): success [37ms]
test Int64VectorTests.negInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[-i * 5]): success [60ms]
test Int64VectorTests.notInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[i + 1]): success [42ms]
test Int64VectorTests.notInt64VectorTests(int[cornerCaseValue(i)]): success [34ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [17ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [40ms]
test Int64VectorTests.shuffleMiscellaneousInt64VectorTestsSmokeTest(shuffle[random]): success [9ms]
test Int64VectorTests.shuffleTest(): success [275ms]
test Int64VectorTests.shuffleToStringInt64VectorTestsSmokeTest(shuffle[random]): success [48ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [830ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [174ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [338ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [463ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [168ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [294ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [184ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [170ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [170ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [190ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [168ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [174ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[-i * 5]): success [437ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i * 5]): success [155ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i + 1]): success [155ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [226ms]
test Int64VectorTests.smokeTest1(): success [0ms]
test Int64VectorTests.smokeTest2(): success [90ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [17ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[-i * 5]): success [15ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i * 5]): success [16ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i + 1]): success [18ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [12ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [471ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [159ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [159ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1071ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [318ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [320ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [327ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [319ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [504ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [332ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [316ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [314ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[-i * 5]): success [409ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i * 5]): success [156ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i + 1]): success [156ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [220ms]
test Int64VectorTests.viewAsFloatingLanesTest(): success [547ms]
test Int64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i * 5]): success [122ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i + 1]): success [64ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [64ms]

===============================================
jdk/incubator/vector/Int64VectorTests.java
Total tests run: 3622, Passes: 3619, Failures: 3, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 3
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 3
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 3
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Int64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Int64VectorTests.d/testng.0.jta jdk/incubator/vector/Int64VectorTests.java false Int64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 3
--------------------------------------------------
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/Byte512VectorTests.java
Passed: jdk/incubator/vector/Long64VectorTests.java
TEST: jdk/incubator/vector/Short128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.826 seconds
messages:
command: build Short128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 19:37:18 IST 2025
Test directory:
  compile: Short128VectorTests
finished: Wed Apr 16 19:37:19 IST 2025
elapsed time (seconds): 0.826

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.826 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:37:18 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 11
Process id: 1538246
finished: Wed Apr 16 19:37:19 IST 2025
elapsed time (seconds): 0.826
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Short128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Short128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Short128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short128VectorTests 
TIME:   502.597 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short128VectorTests 
started: Wed Apr 16 19:37:19 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1542547
finished: Wed Apr 16 19:45:41 IST 2025
elapsed time (seconds): 502.597
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -613979188983794374
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-613979188983794374" to command line.
test Short128VectorTests.ABSMaskedShort128VectorTests(short[-i * 5], mask[i % 2]): success [641ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i * 5], mask[i % 2]): success [73ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i + 1], mask[i % 2]): success [11ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[-i * 5], mask[true]): success [28ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i * 5], mask[true]): success [25ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i + 1], mask[true]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[-i * 5], mask[false]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ABSShort128VectorTests(short[-i * 5]): success [106ms]
test Short128VectorTests.ABSShort128VectorTests(short[i * 5]): success [53ms]
test Short128VectorTests.ABSShort128VectorTests(short[i + 1]): success [2ms]
test Short128VectorTests.ABSShort128VectorTests(short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[-i * 5]): success [92ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[i * 5]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[i + 1]): success [3ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[cornerCaseValue(i)]): success [11ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [13ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [13ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[-i * 5], mask[true]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [12ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [64ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[-i * 5]): success [148ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[i * 5]): success [2ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[i + 1]): success [1ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[cornerCaseValue(i)]): success [120ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [93ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [83ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [42ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[-i * 5], mask[true]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i + 1], mask[true]): success [5ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short128VectorTests.ADDShort128VectorTests(short[-i * 5], short[i * 5]): success [208ms]
test Short128VectorTests.ADDShort128VectorTests(short[-i * 5], short[i + 1]): success [68ms]
test Short128VectorTests.ADDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [18ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [26ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [15ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [12ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [35ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [109ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [65ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[-i * 5]): success [158ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[i * 5]): success [15ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[i + 1]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[cornerCaseValue(i)]): success [71ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [74ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [108ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [15ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[-i * 5], mask[true]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ANDShort128VectorTests(short[-i * 5], short[i * 5]): success [197ms]
test Short128VectorTests.ANDShort128VectorTests(short[-i * 5], short[i + 1]): success [61ms]
test Short128VectorTests.ANDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [21ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [9ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [66ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [40ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTests(short[-i * 5], short[i * 5]): success [189ms]
test Short128VectorTests.AND_NOTShort128VectorTests(short[-i * 5], short[i + 1]): success [72ms]
test Short128VectorTests.AND_NOTShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [80ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [75ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [17ms]
test Short128VectorTests.ASHRShort128VectorTests(short[-i * 5], short[i * 5]): success [162ms]
test Short128VectorTests.ASHRShort128VectorTests(short[-i * 5], short[i + 1]): success [71ms]
test Short128VectorTests.ASHRShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [116ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [73ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [201ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [64ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[-i * 5]): success [44ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[i * 5]): success [62ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[i + 1]): success [0ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [114ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [57ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [18ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [53ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [4ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [6ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [5ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [4ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [80ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [116ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [92ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [350ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [2ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [105ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [80ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [68ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [7ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [44ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [23ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroad

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

* 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.VectorShapeShort128VectorTestsSmokeTest(): success [0ms]
test Short128VectorTests.VectorTypeShort128VectorTestsSmokeTest(): success [0ms]
test Short128VectorTests.WithLanesShort128VectorTestsSmokeTest(): success [0ms]
test Short128VectorTests.WithShapeShort128VectorTestsSmokeTest(): success [0ms]
test Short128VectorTests.XORReduceShort128VectorTests(short[-i * 5]): success [94ms]
test Short128VectorTests.XORReduceShort128VectorTests(short[i * 5]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTests(short[i + 1]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTests(short[cornerCaseValue(i)]): success [90ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [64ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [81ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[-i * 5], mask[true]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.XORShort128VectorTests(short[-i * 5], short[i * 5]): success [12ms]
test Short128VectorTests.XORShort128VectorTests(short[-i * 5], short[i + 1]): success [52ms]
test Short128VectorTests.XORShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [12ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [63ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[-i * 5], mask[i % 2]): success [407ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i * 5], mask[i % 2]): success [379ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i + 1], mask[i % 2]): success [308ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [308ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[-i * 5], mask[true]): success [307ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i * 5], mask[true]): success [308ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i + 1], mask[true]): success [309ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [310ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[-i * 5], mask[false]): success [307ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i * 5], mask[false]): success [306ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i + 1], mask[false]): success [309ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [307ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[-i * 5]): success [237ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[i * 5]): success [244ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[i + 1]): success [154ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[cornerCaseValue(i)]): success [155ms]
test Short128VectorTests.ZeroShort128VectorTests(short[-i * 5]): success [121ms]
test Short128VectorTests.ZeroShort128VectorTests(short[i * 5]): success [34ms]
test Short128VectorTests.ZeroShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.ZeroShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.absShort128VectorTests(short[-i * 5]): success [21ms]
test Short128VectorTests.absShort128VectorTests(short[i * 5]): success [68ms]
test Short128VectorTests.absShort128VectorTests(short[i + 1]): success [1ms]
test Short128VectorTests.absShort128VectorTests(short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.addShort128VectorTests(short[-i * 5], short[i * 5]): success [35ms]
test Short128VectorTests.addShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.addShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [73ms]
test Short128VectorTests.addShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [39ms]
test Short128VectorTests.addShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.allTrueShort128VectorTests(boolean[i % 2]): success [20ms]
test Short128VectorTests.allTrueShort128VectorTests(boolean[i % 5]): success [22ms]
test Short128VectorTests.andShort128VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.andShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.andShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.andShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.andShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.andShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.anyTrueShort128VectorTests(boolean[i % 2]): success [6ms]
test Short128VectorTests.anyTrueShort128VectorTests(boolean[i % 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [42ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [70ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [68ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [68ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseDivByZeroSmokeTest(): success [11ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [34ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [58ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [45ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [61ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [15ms]
test Short128VectorTests.compressShort128VectorTests(short[-i * 5], mask[i % 2]): success [260ms]
test Short128VectorTests.compressShort128VectorTests(short[i * 5], mask[i % 2]): success [211ms]
test Short128VectorTests.compressShort128VectorTests(short[i + 1], mask[i % 2]): success [140ms]
test Short128VectorTests.compressShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [139ms]
test Short128VectorTests.compressShort128VectorTests(short[-i * 5], mask[true]): success [92ms]
test Short128VectorTests.compressShort128VectorTests(short[i * 5], mask[true]): success [6ms]
test Short128VectorTests.compressShort128VectorTests(short[i + 1], mask[true]): success [6ms]
test Short128VectorTests.compressShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short128VectorTests.compressShort128VectorTests(short[-i * 5], mask[false]): success [10ms]
test Short128VectorTests.compressShort128VectorTests(short[i * 5], mask[false]): success [10ms]
test Short128VectorTests.compressShort128VectorTests(short[i + 1], mask[false]): success [10ms]
test Short128VectorTests.compressShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [10ms]
test Short128VectorTests.divShort128VectorTests(short[-i * 5], short[i * 5]): success [242ms]
test Short128VectorTests.divShort128VectorTests(short[-i * 5], short[i + 1]): success [243ms]
test Short128VectorTests.divShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [162ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [106ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [24ms]
test Short128VectorTests.divShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short128VectorTests.divShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [436ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [444ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [372ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [318ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [319ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [321ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [319ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [318ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [319ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i]): success [222ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i - length / 2]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i + 1]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i - 2]): success [164ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[zigZag(i)]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[cornerCaseValue(i)]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i - length / 2]): success [161ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i + 1]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i - 2]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[zigZag(i)]): success [162ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i - length / 2]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i + 1]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i - 2]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[zigZag(i)]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [172ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i - length / 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i + 1]): success [161ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i - 2]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[zigZag(i)]): success [160ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i]): success [160ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i - length / 2]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i + 1]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i - 2]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[zigZag(i)]): success [164ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i]): success [161ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [62ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [10ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.expandShort128VectorTests(short[-i * 5], mask[i % 2]): success [230ms]
test Short128VectorTests.expandShort128VectorTests(short[i * 5], mask[i % 2]): success [208ms]
test Short128VectorTests.expandShort128VectorTests(short[i + 1], mask[i % 2]): success [139ms]
test Short128VectorTests.expandShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [139ms]
test Short128VectorTests.expandShort128VectorTests(short[-i * 5], mask[true]): success [35ms]
test Short128VectorTests.expandShort128VectorTests(short[i * 5], mask[true]): success [6ms]
test Short128VectorTests.expandShort128VectorTests(short[i + 1], mask[true]): success [6ms]
test Short128VectorTests.expandShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short128VectorTests.expandShort128VectorTests(short[-i * 5], mask[false]): success [10ms]
test Short128VectorTests.expandShort128VectorTests(short[i * 5], mask[false]): success [10ms]
test Short128VectorTests.expandShort128VectorTests(short[i + 1], mask[false]): success [10ms]
test Short128VectorTests.expandShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [10ms]
test Short128VectorTests.getShort128VectorTests(short[-i * 5]): success [8ms]
test Short128VectorTests.getShort128VectorTests(short[i * 5]): success [101ms]
test Short128VectorTests.getShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.getShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[-i * 5]): success [38ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[i + 1]): success [5ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [9ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(0): success [72ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(-1): success [5ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(1): success [22ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(2): success [5ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(-2): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(0): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(-1): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(1): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(2): success [5ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(-2): success [4ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(0): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(32): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(37): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1024): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1025): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1029): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(0): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(32): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(37): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1024): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1025): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1029): success [0ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i]): success [221ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i - length / 2]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i + 1]): success [169ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i - 2]): success [191ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[zigZag(i)]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[cornerCaseValue(i)]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i - length / 2]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i + 1]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i - 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[zigZag(i)]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i - length / 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i + 1]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i - 2]): success [171ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[zigZag(i)]): success [161ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [163ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i]): success [162ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i - length / 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i + 1]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i - 2]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[zigZag(i)]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i - length / 2]): success [160ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i + 1]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i - 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[zigZag(i)]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i]): success [193ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [158ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [61ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.maskAndNotShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Short128VectorTests.maskAndNotShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskAndShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short128VectorTests.maskAndShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskCompressShort128VectorTestsSmokeTest(mask[i % 2]): success [309ms]
test Short128VectorTests.maskCompressShort128VectorTestsSmokeTest(mask[true]): success [135ms]
test Short128VectorTests.maskCompressShort128VectorTestsSmokeTest(mask[false]): success [145ms]
test Short128VectorTests.maskEqShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short128VectorTests.maskEqShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskEqualsShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short128VectorTests.maskEqualsShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskFirstTrueShort128VectorTestsSmokeTest(mask[i % 2]): success [48ms]
test Short128VectorTests.maskFirstTrueShort128VectorTestsSmokeTest(mask[true]): success [69ms]
test Short128VectorTests.maskFirstTrueShort128VectorTestsSmokeTest(mask[false]): success [38ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(-1): success [63ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(0): success [0ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short128VectorTests.maskHashCodeShort128VectorTestsSmokeTest(mask[i % 2]): success [5ms]
test Short128VectorTests.maskHashCodeShort128VectorTestsSmokeTest(mask[true]): success [0ms]
test Short128VectorTests.maskHashCodeShort128VectorTestsSmokeTest(mask[false]): success [0ms]
test Short128VectorTests.maskLastTrueShort128VectorTestsSmokeTest(mask[i % 2]): success [87ms]
test Short128VectorTests.maskLastTrueShort128VectorTestsSmokeTest(mask[true]): success [69ms]
test Short128VectorTests.maskLastTrueShort128VectorTestsSmokeTest(mask[false]): success [54ms]
test Short128VectorTests.maskOrShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Short128VectorTests.maskOrShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskTrueCountShort128VectorTestsSmokeTest(mask[i % 2]): success [45ms]
test Short128VectorTests.maskTrueCountShort128VectorTestsSmokeTest(mask[true]): success [70ms]
test Short128VectorTests.maskTrueCountShort128VectorTestsSmokeTest(mask[false]): success [38ms]
test Short128VectorTests.maskXorShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short128VectorTests.maskXorShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maxShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.maxShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.maxShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.maxShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.maxShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.maxShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.minShort128VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.minShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.minShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.minShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.minShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.minShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.mulShort128VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.mulShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.mulShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.negShort128VectorTests(short[-i * 5]): success [14ms]
test Short128VectorTests.negShort128VectorTests(short[i * 5]): success [74ms]
test Short128VectorTests.negShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.negShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.notShort128VectorTests(short[-i * 5]): success [53ms]
test Short128VectorTests.notShort128VectorTests(short[i * 5]): success [44ms]
test Short128VectorTests.notShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.notShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.orShort128VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short128VectorTests.orShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.orShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.orShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.orShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.orShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.shuffleEqualsShort128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [511ms]
test Short128VectorTests.shuffleEqualsShort128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [126ms]
test Short128VectorTests.shuffleMiscellaneousShort128VectorTestsSmokeTest(shuffle[random]): success [191ms]
test Short128VectorTests.shuffleTest(): success [443ms]
test Short128VectorTests.shuffleToStringShort128VectorTestsSmokeTest(shuffle[random]): success [74ms]
test Short128VectorTests.sliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i * 5]): success [649ms]
test Short128VectorTests.sliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i + 1]): success [319ms]
test Short128VectorTests.sliceBinaryShort128VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [163ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [244ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [372ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [197ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [162ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [162ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [162ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [162ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [181ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [177ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[-i * 5]): success [322ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[i * 5]): success [288ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[i + 1]): success [157ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.smokeTest1(): success [0ms]
test Short128VectorTests.smokeTest2(): success [59ms]
test Short128VectorTests.subShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.subShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.subShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.subShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[-i * 5]): success [2ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[i + 1]): success [7ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[i + 1]): success [18ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[-i * 5]): success [1ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[i * 5]): success [1ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[i + 1]): success [18ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.unsliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i * 5]): success [316ms]
test Short128VectorTests.unsliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i + 1]): success [378ms]
test Short128VectorTests.unsliceBinaryShort128VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [159ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [698ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [636ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [317ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [317ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [464ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [315ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [319ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [326ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [316ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[-i * 5]): success [292ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[i * 5]): success [289ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[i + 1]): success [156ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.viewAsFloatingLanesTest(): success [30ms]
test Short128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short128VectorTests.withShort128VectorTests(short[-i * 5], short[i * 5]): success [47ms]
test Short128VectorTests.withShort128VectorTests(short[-i * 5], short[i + 1]): success [138ms]
test Short128VectorTests.withShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [32ms]

===============================================
jdk/incubator/vector/Short128VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Short128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Short128VectorTests.d/testng.0.jta jdk/incubator/vector/Short128VectorTests.java false Short128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/Short512VectorTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Short64VectorTests.java
TEST: jdk/incubator/vector/Vector128ConversionTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.887 seconds
messages:
command: build Vector128ConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 19:39:05 IST 2025
Test directory:
  compile: Vector128ConversionTests
finished: Wed Apr 16 19:39:06 IST 2025
elapsed time (seconds): 0.887

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.887 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:39:05 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 8
Process id: 1537975
finished: Wed Apr 16 19:39:06 IST 2025
elapsed time (seconds): 0.887
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Vector128ConversionTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Vector128ConversionTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Vector128ConversionTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Vector128ConversionTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Vector128ConversionTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector128ConversionTests 
TIME:   740.932 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector128ConversionTests
reason: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector128ConversionTests 
started: Wed Apr 16 19:39:06 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1543116
finished: Wed Apr 16 19:51:27 IST 2025
elapsed time (seconds): 740.932
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [762ms]
castShape took 758 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cab41a5): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 4, S_64_BIT], byte(i)): success [1241ms]
castShape took 1241 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c8e097): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 2, S_64_BIT], byte(i)): success [980ms]
castShape took 980 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5261d331): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 1, S_64_BIT], byte(i)): success [406ms]
castShape took 407 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b024c50): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 2, S_64_BIT], byte(i)): success [129ms]
castShape took 129 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3be09a90): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 1, S_64_BIT], byte(i)): success [115ms]
castShape took 115 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@587a291b): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [1483ms]
castShape took 1484 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f553ca0): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 8, S_128_BIT], byte(i)): success [955ms]
castShape took 954 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@199c0767): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 4, S_128_BIT], byte(i)): success [1187ms]
castShape took 1186 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@601ced8f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 2, S_128_BIT], byte(i)): success [968ms]
castShape took 968 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d7ea3c7): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 4, S_128_BIT], byte(i)): success [223ms]
castShape took 220 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b255dd9): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 2, S_128_BIT], byte(i)): success [166ms]
castShape took 166 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fa5e19f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [3944ms]
castShape took 3944 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ff24c93): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 16, S_256_BIT], byte(i)): success [437ms]
castShape took 437 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61cfed27): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 8, S_256_BIT], byte(i)): success [1027ms]
castShape took 1027 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1a8da75b): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 4, S_256_BIT], byte(i)): success [136ms]
castShape took 136 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5876605a): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 8, S_256_BIT], byte(i)): success [150ms]
castShape took 150 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bba105f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 4, S_256_BIT], byte(i)): success [726ms]
castShape took 727 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3aef685d): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [10143ms]
castShape took 10142 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@330b599c): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 32, S_512_BIT], byte(i)): success [2788ms]
castShape took 2789 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ec0d3c5): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 16, S_512_BIT], byte(i)): success [314ms]
castShape took 315 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23ebbe9b): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 8, S_512_BIT], byte(i)): success [120ms]
castShape took 121 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f31904d): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 16, S_512_BIT], byte(i)): success [143ms]
castShape took 143 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@60302e2f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 8, S_512_BIT], byte(i)): success [124ms]
castShape took 125 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@635080ac): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [309ms]
castShape took 310 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21041812): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [133ms]
castShape took 132 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6ec78b92): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [443ms]
castShape took 443 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7514785e): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [120ms]
castShape took 121 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cd890db): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [127ms]
castShape took 127 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d2edfc): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [124ms]
castShape took 124 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25c43ebb): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 8, S_64_BIT], short(i)): success [1483ms]
castShape took 1482 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c8f70a7): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 4, S_64_BIT], short(i)): success [4235ms]
castShape took 4235 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@269d30e): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 2, S_64_BIT], short(i)): success [13ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24836f52): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 1, S_64_BIT], short(i)): success [54ms]
castShape took 55 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65e87916): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 2, S_64_BIT], short(i)): success [11ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@769c5c70): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 1, S_64_BIT], short(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3702b375): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 16, S_128_BIT], short(i)): success [1919ms]
castShape took 1919 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3837a5b7): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 8, S_128_BIT], short(i)): success [497ms]
castShape took 497 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@606c340d): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 4, S_128_BIT], short(i)): success [23ms]
castShape took 23 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@630bd20e): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 2, S_128_BIT], short(i)): success [21ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12ed57a7): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 4, S_128_BIT], short(i)): success [24ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f2d24f6): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 2, S_128_BIT], short(i)): success [23ms]
castShape took 22 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37603231): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 32, S_256_BIT], short(i)): success [2542ms]
castShape took 2542 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc54142): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 16, S_256_BIT], short(i)): success [4438ms]
castShape took 4438 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e567a1): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 8, S_256_BIT], short(i)): success [91ms]
castShape took 91 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19dc3e28): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 4, S_256_BIT], short(i)): success [70ms]
castShape took 71 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3de2e4ff): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 8, S_256_BIT], short(i)): success [93ms]
castShape took 93 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@40d0b25): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 4, S_256_BIT], short(i)): success [81ms]
castShape took 71 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@377723a8): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 64, S_512_BIT], short(i)): success [5944ms]
castShape took 5944 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6516338a): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 32, S_512_BIT], short(i)): success [3891ms]
castShape took 3892 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31ffcfc1): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 16, S_512_BIT], short(i)): success [3668ms]
castShape took 3668 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fac3958): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 8, S_512_BIT], short(i)): success [1115ms]
castShape took 1115 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12aa0499): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 16, S_512_BIT], short(i)): success [2627ms]
castShape took 2628 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@acc04f5): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 8, S_512_BIT], short(i)): success [89ms]
castShape took 89 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15e41f09): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [1136ms]
castShape took 1137 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c73d6bf): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 8, S_Max_BIT], short(i)): success [460ms]
castShape took 460 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86b636b): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 4, S_Max_BIT], short(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cc95e51): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 2, S_Max_BIT], short(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69062f41): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 4, S_Max_BIT], short(i)): success [19ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b0797d8): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 2, S_Max_BIT], short(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1fde55c6): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2231ms]
castShape took 2231 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@263b3e17): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 4, S_64_BIT], int(i)): success [877ms]
castShape took 877 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19d63f56): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 2, S_64_BIT], int(i)): success [953ms]
castShape took 954 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44b0a7f2): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 1, S_64_BIT], int(i)): success [207ms]
castShape took 207 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24106675): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 2, S_64_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@236f95aa): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 1, S_64_BIT], int(i)): success [11ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5efab149): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 16, S_128_BIT], int(i)): success [557ms]
castShape took 558 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3fd3b325): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 8, S_128_BIT], int(i)): success [1639ms]
castShape took 1639 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f43f08e): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 4, S_128_BIT], int(i)): success [925ms]
castShape took 926 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fe72406): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 2, S_128_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21f61f55): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 4, S_128_BIT], int(i)): success [16ms]
castShape took 16 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3325e54b): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 2, S_128_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b339f99): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 32, S_256_BIT], int(i)): success [3563ms]
castShape took 3563 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18cb82df): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 16, S_256_BIT], int(i)): success [3423ms]
castShape took 3423 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@643f070d): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 8, S_256_BIT], int(i)): success [3857ms]
castShape took 3858 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@653e4509): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 4, S_256_BIT], int(i)): success [118ms]
castShape took 118 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2839d331): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 8, S_256_BIT], int(i)): success [2445ms]
castShape took 2445 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37078c85): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 4, S_256_BIT], int(i)): success [113ms]
castShape took 113 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76efca29): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 64, S_512_BIT], int(i)): success [6774ms]
castShape took 6774 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b5f7bb5): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 32, S_512_BIT], int(i)): success [3851ms]
castShape took 3850 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f9918c7): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 16, S_512_BIT], int(i)): success [2356ms]
castShape took 2356 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19345d92): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 8, S_512_BIT], int(i)): success [3077ms]
castShape took 3077 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49d8e1d8): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 16, S_512_BIT], int(i)): success [2483ms]
castShape took 2483 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29a2fa79): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 8, S_512_BIT], int(i)): success [2541ms]
castShape took 2541 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2659de2b): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [520ms]
castShape took 520 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5675465e): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 8, S_Max_BIT], int(i)): success [1026ms]
castShape took 1026 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b2a4a82): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 4, S_Max_BIT], int(i)): success [230ms]
castShape took 231 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38212d6d): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e3358da): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 4, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1127a9e1): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ace159): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 8, S_64_BIT], long(i)): success [838ms]
castShape took 838 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6371010b): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 4, S_64_BIT], long(i)): success [1057ms]
castShape took 1058 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f1a9567): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 2, S_64_BIT], long(i)): success [852ms]
castShape took 852 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@170549c7): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 1, S_64_BIT], long(i)): success [1309ms]
castShape took 1309 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@124d2b42): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 2, S_64_BIT], long(i)): success [17ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75b96cb8): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 1, S_64_BIT], long(i)): success [21ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e6da30a): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 16, S_128_BIT], long(i)): success [1125ms]
castShape took 1125 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e481f14): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 8, S_128_BIT], long(i)): success [593ms]
castShape took 593 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34ac9d6d): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 4, S_128_BIT], long(i)): success [1218ms]
castShape took 1218 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19137dfa): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 2, S_128_BIT], long(i)): success [1965ms]
castShape took 1966 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4068a139): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 4, S_128_BIT], long(i)): success [1277ms]
castShape took 1277 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d2ea27e): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 2, S_128_BIT], long(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42642d30): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 32, S_256_BIT], long(i)): success [7047ms]
castShape took 7046 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41f2d159): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 16, S_256_BIT], long(i)): success [4285ms]
castShape took 4285 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8040dfb): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 8, S_256_BIT], long(i)): success [3961ms]
castShape took 3962 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2dd5b0c1): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 4, S_256_BIT], long(i)): success [4630ms]
castShape took 4630 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc29b56): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 8, S_256_BIT], long(i)): success [3546ms]
castShape took 3547 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3da5771b): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 4, S_256_BIT], long(i)): success [3138ms]
castShape took 3139 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b928f24): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 64, S_512_BIT], long(i)): success [13702ms]
castShape took 13702 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53d438dd): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 32, S_512_BIT], long(i)): success [7265ms]
castShape took 7266 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e9e124f): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 16, S_512_BIT], long(i)): success [4270ms]
castShape took 4274 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3767d1fe): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 8, S_512_BIT], long(i)): success [3146ms]
castShape took 3132 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16658144): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 16, S_512_BIT], long(i)): success [4991ms]
castShape took 4991 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e488490): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 8, S_512_BIT], long(i)): success [3275ms]
castShape took 3276 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@207051a): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [1045ms]
castShape took 1045 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1684bed8): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 8, S_Max_BIT], long(i)): success [623ms]
castShape took 623 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6c6e507c): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 4, S_Max_BIT], long(i)): success [1189ms]
castShape took 1190 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1529045f): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 2, S_Max_BIT], long(i)): success [327ms]
castShape took 328 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b90aeb7): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1218ms]
castShape took 1219 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d930031): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 2, S_Max_BIT], long(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@838508): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1453ms]
castShape took 1454 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d21acd5): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[short, 4, S_64_BIT], float(i)): success [1845ms]
castShape took 1845 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c17510f): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[int, 2, S_64_BIT], float(i)): success [14ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13587957): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[long, 1, S_64_BIT], float(i)): success [1033ms]
castShape took 1034 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4fa6b2a5): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[float, 2, S_64_BIT], float(i)): success [597ms]
castShape took 597 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79362e86): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[double, 1, S_64_BIT], float(i)): success [6ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d200a30): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[byte, 16, S_128_BIT], float(i)): success [538ms]
castShape took 538 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@571838c): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[short, 8, S_128_BIT], float(i)): success [304ms]
castShape took 303 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b89077f): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[int, 4, S_128_BIT], float(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@265bfffc): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[long, 2, S_128_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b94a991): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[float, 4, S_128_BIT], float(i)): success [277ms]
castShape took 277 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5235bec2): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[double, 2, S_128_BIT], float(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d2cf589): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[byte, 32, S_256_BIT], float(i)): success [3551ms]
castShape took 3551 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@62f11d82): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_B

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

S_Max_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ef944f8): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[float, 4, S_128_BIT], Species[float, 4, S_Max_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bc51306): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[int, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49fd216e): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[float, 2, S_64_BIT]): success [27ms]
shuffleCast took 28 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1384eb87): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[long, 2, S_128_BIT]): success [3ms]
shuffleCast took 4 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15c672de): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[double, 2, S_128_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55b9f94e): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[long, 2, S_Max_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4076fced): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[double, 2, S_Max_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14f5c5a9): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e77565): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5103825a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@167a7081): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e72c4eb): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198647f7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@361e5553): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd76e9b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@693954e1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50a63192): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 5 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17f0e87c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b06ce01): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76d7bdef): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ba2a3c4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@463142d5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16da3050): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4219c83b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d863fcd): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f18e4b1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27321f76): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@99a4da7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14a4f797): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@666c1382): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@224314a2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1dfb4134): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7496b2ca): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45563d04): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@188caa7b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77ca5b48): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@390db554): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18fd0f5e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@701bc385): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d444216): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34c85df8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f3cb131): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e8d1c80): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c93a156): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67821d4e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12d3c83): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 27 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c820ef5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@491d4183): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46df943c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21550842): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77aa4c20): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@466dc5c5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cacb27e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25fea54b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7403ac38): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e150e1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b496a1d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a208eb4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b0a79e4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29812350): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25838d8c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86a45d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74779344): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dd24a2a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d369f8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80a3ef): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c7cbdb6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@277354b5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@219fe42e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@389fdeba): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45b7e819): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@216f5222): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9e4164): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bd5a86d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f7104ce): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39c11e76): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7af8d8a7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e165d44): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48e07e11): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65977dc6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@573ae6a8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f12f8f8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bf63723): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ca34cbb): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61e2481c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7652041a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@171dcd5c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13b8c413): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@68a34a82): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bb7efc2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@207054d6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b5a9bf3): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44bcaa50): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39229018): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3aa271dc): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21b29cc2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9a9a6f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cd91c5f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2865f6ed): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13e4446c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@246e3c69): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e214d63): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1319af93): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@157c2890): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b8ae83): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43daa5ab): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47292319): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57438fd4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6628a0cd): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78c44a0e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8b487c6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@739d3d0b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f47c415): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10fe1ffa): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dbd1524): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6fb99235): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5eb9a353): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30c81a1d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c663160): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@279510cc): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@303e321a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7612d72): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6cb56024): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@508fb1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b4e64be): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10d15b43): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48a586d9): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5809466): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@520d679c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42d3e00a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18a4ca36): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d6e637d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@718b30d4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f66a0b7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d7a71f2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 16, S_256_BIT]): success [11ms]
shuffleCastNeg took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c0607e5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15ce859f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@529cf764): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e239d9b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80c493): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@438e98dd): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61b0eeb1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7ff46da2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2028cad4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e946b66): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@151408c8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66b68443): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@405e2a9f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198ffaff): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@144407fa): success [0ms]

===============================================
jdk/incubator/vector/Vector128ConversionTests.java
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Vector128ConversionTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Vector128ConversionTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Vector128ConversionTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Vector128ConversionTests.d/testng.0.jta jdk/incubator/vector/Vector128ConversionTests.java false Vector128ConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
TEST: jdk/incubator/vector/Vector64ConversionTests.java#id0
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.904 seconds
messages:
command: build Vector64ConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 19:39:24 IST 2025
Test directory:
  compile: Vector64ConversionTests
finished: Wed Apr 16 19:39:24 IST 2025
elapsed time (seconds): 0.904

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.904 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:39:24 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 6
Process id: 1537799
finished: Wed Apr 16 19:39:24 IST 2025
elapsed time (seconds): 0.904
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Vector64ConversionTests.java#id0 \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests 
TIME:   1366.551 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests
reason: User specified action: run testng/othervm/timeout=300 -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests 
started: Wed Apr 16 19:39:24 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1543243
finished: Wed Apr 16 20:02:11 IST 2025
elapsed time (seconds): 1366.551
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [1322ms]
castShape took 1317 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cab41a5): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 4, S_64_BIT], byte(i)): success [701ms]
castShape took 701 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32f13c0c): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 2, S_64_BIT], byte(i)): success [568ms]
castShape took 568 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@177ba401): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 1, S_64_BIT], byte(i)): success [393ms]
castShape took 393 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55e9fd9b): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 2, S_64_BIT], byte(i)): success [217ms]
castShape took 217 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bf43dcb): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 1, S_64_BIT], byte(i)): success [381ms]
castShape took 382 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64cc2f05): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [2289ms]
castShape took 2285 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d3c5dca): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 8, S_128_BIT], byte(i)): success [977ms]
castShape took 976 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54302f60): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 4, S_128_BIT], byte(i)): success [896ms]
castShape took 897 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@160cc352): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 2, S_128_BIT], byte(i)): success [1134ms]
castShape took 1134 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@759369ce): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 4, S_128_BIT], byte(i)): success [216ms]
castShape took 216 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23821e96): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 2, S_128_BIT], byte(i)): success [203ms]
castShape took 204 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c93395e): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [5221ms]
castShape took 5221 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64daf28): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 16, S_256_BIT], byte(i)): success [4477ms]
castShape took 4477 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7453c2ce): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 8, S_256_BIT], byte(i)): success [201ms]
castShape took 201 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2911fcc7): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 4, S_256_BIT], byte(i)): success [817ms]
castShape took 817 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69a30bb8): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 8, S_256_BIT], byte(i)): success [203ms]
castShape took 203 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@695191ca): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 4, S_256_BIT], byte(i)): success [177ms]
castShape took 177 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4bf40f8): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [7167ms]
castShape took 7167 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bd98d4a): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 32, S_512_BIT], byte(i)): success [5148ms]
castShape took 5149 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e62310): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 16, S_512_BIT], byte(i)): success [3160ms]
castShape took 3161 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18ef793): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 8, S_512_BIT], byte(i)): success [1097ms]
castShape took 1098 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54eca994): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 16, S_512_BIT], byte(i)): success [2798ms]
castShape took 2797 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d9ec089): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 8, S_512_BIT], byte(i)): success [180ms]
castShape took 179 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4cd54fd1): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [1509ms]
castShape took 1509 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@630bd20e): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [467ms]
castShape took 466 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc54142): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [138ms]
castShape took 138 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@618b78f4): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [142ms]
castShape took 143 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c7674c6): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [448ms]
castShape took 448 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@72fd6e22): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [139ms]
castShape took 139 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@40d0b25): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 8, S_64_BIT], short(i)): success [3207ms]
castShape took 3207 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9ae45b9): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 4, S_64_BIT], short(i)): success [4749ms]
castShape took 4749 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fac3958): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 2, S_64_BIT], short(i)): success [9ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19d0a0ec): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 1, S_64_BIT], short(i)): success [81ms]
castShape took 81 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7eff441c): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 2, S_64_BIT], short(i)): success [7ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b6a37d2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 1, S_64_BIT], short(i)): success [7ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48b7f47e): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 16, S_128_BIT], short(i)): success [861ms]
castShape took 861 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c4697bc): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 8, S_128_BIT], short(i)): success [3878ms]
castShape took 3879 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5353824d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 4, S_128_BIT], short(i)): success [12ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61517fb2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 2, S_128_BIT], short(i)): success [13ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bb27146): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 4, S_128_BIT], short(i)): success [12ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@412dc1a2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 2, S_128_BIT], short(i)): success [13ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@321f317): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 32, S_256_BIT], short(i)): success [4699ms]
castShape took 4699 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b0ecc95): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 16, S_256_BIT], short(i)): success [2544ms]
castShape took 2545 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10363f91): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 8, S_256_BIT], short(i)): success [3277ms]
castShape took 3277 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42e578c0): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 4, S_256_BIT], short(i)): success [107ms]
castShape took 108 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cfc7fce): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 8, S_256_BIT], short(i)): success [2326ms]
castShape took 2326 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f84d03b): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 4, S_256_BIT], short(i)): success [2263ms]
castShape took 2253 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15e41f09): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 64, S_512_BIT], short(i)): success [6554ms]
castShape took 6554 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c73d6bf): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 32, S_512_BIT], short(i)): success [4725ms]
castShape took 4725 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d5c1d58): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 16, S_512_BIT], short(i)): success [2100ms]
castShape took 2101 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a049c7d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 8, S_512_BIT], short(i)): success [2987ms]
castShape took 2988 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61a38c6c): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 16, S_512_BIT], short(i)): success [2375ms]
castShape took 2375 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@236f95aa): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 8, S_512_BIT], short(i)): success [2490ms]
castShape took 2490 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5efab149): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [572ms]
castShape took 572 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18cb82df): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 8, S_Max_BIT], short(i)): success [1451ms]
castShape took 1451 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@643f070d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 4, S_Max_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4934c96b): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 2, S_Max_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e059ab7): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 4, S_Max_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5897749f): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 2, S_Max_BIT], short(i)): success [6ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c1371b8): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2238ms]
castShape took 2238 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@442b18f7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 4, S_64_BIT], int(i)): success [1088ms]
castShape took 1088 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@272f2089): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 2, S_64_BIT], int(i)): success [919ms]
castShape took 919 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47411d55): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 1, S_64_BIT], int(i)): success [164ms]
castShape took 164 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14ce104e): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 2, S_64_BIT], int(i)): success [30ms]
castShape took 31 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5594fce7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 1, S_64_BIT], int(i)): success [32ms]
castShape took 32 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@385c781e): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 16, S_128_BIT], int(i)): success [1188ms]
castShape took 1188 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b49f91b): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 8, S_128_BIT], int(i)): success [590ms]
castShape took 591 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ef954c2): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 4, S_128_BIT], int(i)): success [2009ms]
castShape took 2009 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41d7eadd): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 2, S_128_BIT], int(i)): success [25ms]
castShape took 26 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77875646): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 4, S_128_BIT], int(i)): success [1327ms]
castShape took 1327 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75410c4d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 2, S_128_BIT], int(i)): success [23ms]
castShape took 23 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2659de2b): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 32, S_256_BIT], int(i)): success [7034ms]
castShape took 7034 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2965864e): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 16, S_256_BIT], int(i)): success [4065ms]
castShape took 4065 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2120f2e3): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 8, S_256_BIT], int(i)): success [3577ms]
castShape took 3577 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@652689d6): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 4, S_256_BIT], int(i)): success [4020ms]
castShape took 4020 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4da521da): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 8, S_256_BIT], int(i)): success [3582ms]
castShape took 3582 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b83faf6): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 4, S_256_BIT], int(i)): success [3057ms]
castShape took 3057 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5403a76a): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 64, S_512_BIT], int(i)): success [12971ms]
castShape took 12970 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f69c681): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 32, S_512_BIT], int(i)): success [7346ms]
castShape took 7347 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38212d6d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 16, S_512_BIT], int(i)): success [4637ms]
castShape took 4637 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b356941): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 8, S_512_BIT], int(i)): success [2799ms]
castShape took 2799 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e3358da): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 16, S_512_BIT], int(i)): success [4843ms]
castShape took 4843 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1127a9e1): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 8, S_512_BIT], int(i)): success [3099ms]
castShape took 3099 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ace159): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [1015ms]
castShape took 1015 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6371010b): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 8, S_Max_BIT], int(i)): success [604ms]
castShape took 604 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2ce2b52d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 4, S_Max_BIT], int(i)): success [1449ms]
castShape took 1450 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26a91840): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 2, S_Max_BIT], int(i)): success [17ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@124d2b42): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 4, S_Max_BIT], int(i)): success [1201ms]
castShape took 1202 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39a660cb): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 2, S_Max_BIT], int(i)): success [17ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54f2c322): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 8, S_64_BIT], long(i)): success [1536ms]
castShape took 1536 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a058e25): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 4, S_64_BIT], long(i)): success [800ms]
castShape took 800 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd72c2): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 2, S_64_BIT], long(i)): success [1188ms]
castShape took 1188 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@702a7105): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 1, S_64_BIT], long(i)): success [1308ms]
castShape took 1308 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17ad70a4): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 2, S_64_BIT], long(i)): success [1307ms]
castShape took 1307 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75abf337): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 1, S_64_BIT], long(i)): success [300ms]
castShape took 300 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a7adece): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 16, S_128_BIT], long(i)): success [2261ms]
castShape took 2262 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13013718): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 8, S_128_BIT], long(i)): success [1223ms]
castShape took 1223 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17e2be4e): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 4, S_128_BIT], long(i)): success [865ms]
castShape took 866 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d921bd2): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 2, S_128_BIT], long(i)): success [2994ms]
castShape took 2994 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2037f3c9): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 4, S_128_BIT], long(i)): success [1145ms]
castShape took 1145 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@276164a0): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 2, S_128_BIT], long(i)): success [1403ms]
castShape took 1403 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8c06a5d): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 32, S_256_BIT], long(i)): failure [13978ms]
java.lang.AssertionError:  expected [[B@75f7eb6a] but found [[B@4fa23b31]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertArrayEquals(Assert.java:201)
	at org.testng.Assert.assertEquals(Assert.java:119)
	at org.testng.Assert.assertEquals(Assert.java:617)
	at AbstractVectorConversionTest.conversion_kernel(AbstractVectorConversionTest.java:456)
	at Vector64ConversionTests.castShape(Vector64ConversionTests.java:106)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
castShape took 13929 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@28d7f27b): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 16, S_256_BIT], long(i)): success [8094ms]
castShape took 8094 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c655cc): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 8, S_256_BIT], long(i)): success [5446ms]
castShape took 5447 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@70731f1d): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 4, S_256_BIT], long(i)): success [4730ms]
castShape took 4730 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b2b98b1): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 8, S_256_BIT], long(i)): success [5997ms]
castShape took 5994 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c1007ab): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 4, S_256_BIT], long(i)): success [4182ms]
castShape took 4182 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d5cf24a): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 64, S_512_BIT], long(i)): success [25771ms]
castShape took 25771 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44fa8ea1): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 32, S_512_BIT], long(i)): success [14044ms]
castShape took 14044 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3af7f9f0): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 16, S_512_BIT], long(i)): success [8440ms]
castShape took 8440 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d3eb656): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 8, S_512_BIT], long(i)): success [5725ms]
castShape took 5708 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14b48a94): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 16, S_512_BIT], long(i)): success [9665ms]
castShape took 9665 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9ff15bc): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 8, S_512_BIT], long(i)): success [5946ms]
castShape took 5946 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2974683e): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [2185ms]
castShape took 2186 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@81586e9): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 8, S_Max_BIT], long(i)): success [1297ms]
castShape took 1298 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78638d39): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 4, S_Max_BIT], long(i)): success [866ms]
castShape took 866 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@146f2497): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 2, S_Max_BIT], long(i)): success [1835ms]
castShape took 1835 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63b8ddc6): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1189ms]
castShape took 1190 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2109f79c): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 2, S_Max_BIT], long(i)): success [1379ms]
castShape took 1379 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26c5e81d): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1846ms]
castShape took 1847 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46dd932c): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[short, 4, S_64_BIT], float(i)): success [2121ms]
castShape took 2121 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@56adf5e0): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[int, 2, S_64_BIT], float(i)): success [13ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42109f40): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[long, 1, S_64_BIT], float(i)): success [149ms]
castShape took 149 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bcae6c9): success [0ms]
test Vector64ConversionTests.castShape(Spe

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

loat, 2, S_64_BIT], Species[double, 2, S_128_BIT]): success [8ms]
shuffleCast took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ef944f8): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[float, 2, S_64_BIT], Species[long, 2, S_Max_BIT]): success [27ms]
shuffleCast took 28 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bc51306): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[float, 2, S_64_BIT], Species[double, 2, S_Max_BIT]): success [1ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49fd216e): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[double, 1, S_64_BIT], Species[long, 1, S_64_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1384eb87): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[double, 1, S_64_BIT], Species[double, 1, S_64_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15c672de): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55b9f94e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4076fced): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14f5c5a9): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e77565): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5103825a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@167a7081): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e72c4eb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198647f7): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@361e5553): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd76e9b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@693954e1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50a63192): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17f0e87c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b06ce01): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76d7bdef): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ba2a3c4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@463142d5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 5 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16da3050): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4219c83b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d863fcd): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f18e4b1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27321f76): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@99a4da7): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14a4f797): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@666c1382): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@224314a2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1dfb4134): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7496b2ca): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45563d04): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@188caa7b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77ca5b48): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@390db554): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18fd0f5e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@701bc385): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d444216): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34c85df8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f3cb131): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e8d1c80): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c93a156): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67821d4e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12d3c83): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c820ef5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@491d4183): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46df943c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21550842): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77aa4c20): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 27 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@466dc5c5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cacb27e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25fea54b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7403ac38): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e150e1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b496a1d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a208eb4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b0a79e4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29812350): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25838d8c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86a45d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74779344): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dd24a2a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d369f8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80a3ef): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c7cbdb6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@277354b5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@219fe42e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@389fdeba): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45b7e819): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@216f5222): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9e4164): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bd5a86d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f7104ce): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39c11e76): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7af8d8a7): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e165d44): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48e07e11): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65977dc6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@573ae6a8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f12f8f8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bf63723): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ca34cbb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61e2481c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7652041a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@171dcd5c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13b8c413): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@68a34a82): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bb7efc2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@207054d6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b5a9bf3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44bcaa50): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39229018): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3aa271dc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21b29cc2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9a9a6f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cd91c5f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2865f6ed): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13e4446c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@246e3c69): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e214d63): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1319af93): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@157c2890): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b8ae83): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43daa5ab): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47292319): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57438fd4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6628a0cd): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78c44a0e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8b487c6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@739d3d0b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f47c415): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10fe1ffa): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dbd1524): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6fb99235): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5eb9a353): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30c81a1d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c663160): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@279510cc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@303e321a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7612d72): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6cb56024): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@508fb1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b4e64be): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10d15b43): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48a586d9): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5809466): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@520d679c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42d3e00a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18a4ca36): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d6e637d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 8, S_128_BIT]): success [8ms]
shuffleCastNeg took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@718b30d4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15dffe0d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@760f628b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7643adfe): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15ce859f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@529cf764): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e239d9b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80c493): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@438e98dd): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61b0eeb1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7ff46da2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2028cad4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e946b66): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@151408c8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66b68443): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@405e2a9f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198ffaff): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@144407fa): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@766dfd7f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@195ef63e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@db37e07): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@447938a0): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@218c5f42): success [0ms]

===============================================
jdk/incubator/vector/Vector64ConversionTests.java#id0
Total tests run: 936, Passes: 934, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Vector64ConversionTests.java#id0 \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Vector64ConversionTests_id0.d/testng.0.jta jdk/incubator/vector/Vector64ConversionTests.java#id0 false Vector64ConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.432 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Wed Apr 16 19:42:58 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Wed Apr 16 19:42:58 IST 2025
elapsed time (seconds): 0.432

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.432 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:42:58 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 9
Process id: 1538079
finished: Wed Apr 16 19:42:58 IST 2025
elapsed time (seconds): 0.432
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 5
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   1200.431 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Wed Apr 16 19:42:58 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1543604
finished: Wed Apr 16 20:02:59 IST 2025
elapsed time (seconds): 1200.431
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [39310ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3195ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [4074ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4084ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [3071ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [3940ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [21359ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
Failing with Species[int, 8, S_256_BIT]->Species[byte, 32, S_256_BIT] (lanewise), partLimit=-4, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 9, 13, 17, 21, 25, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket256(byte(i)): failure [79009ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket256(VectorReshapeTests.java:962)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket512(byte(i)): success [166392ms]
test VectorReshapeTests.testRebracket64(byte(i)): success [16731ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[int, 4, S_Max_BIT]->Species[byte, 16, S_Max_BIT] (lanewise), partLimit=-4, block=4, part=-3, origin=12
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 9, 13]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracketMax(byte(i)): failure [21890ms]
java.lang.AssertionError: arrays differ firstly at element [12]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracketMax(VectorReshapeTests.java:1060)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[byte, 16, S_128_BIT]->Species[byte, 64, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [266308ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:447)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeDouble(byte(i)): success [110580ms]
test VectorReshapeTests.testReshapeFloat(byte(i)): success [165974ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[int, 4, S_128_BIT]->Species[int, 16, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [19805ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:539)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[long, 1, S_64_BIT]->Species[long, 8, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-3, origin=24
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [13194ms]
java.lang.AssertionError: arrays differ firstly at element [24]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:579)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeShort(byte(i)): success [222434ms]
test VectorReshapeTests.testUCastFromByte(byte(i)): success [22154ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [11348ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 15, Failures: 5, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 5
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 5
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 5
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 5
--------------------------------------------------
Test results: passed: 69; failed: 11; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector
Finished running test 'jtreg:test/jdk/jdk/incubator/vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk/jdk/incubator/vector                  83    69    11     0     3 <<
==============================
TEST FAILURE

