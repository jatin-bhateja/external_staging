Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/jdk/incubator/vector/', will run:
* jtreg:test/jdk/jdk/incubator/vector
Clean up dirs for jtreg_test_jdk_jdk_incubator_vector

Running test 'jtreg:test/jdk/jdk/incubator/vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Double128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   24.521 seconds
messages:
command: build Double128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:50:18 IST 2025
Test directory:
  compile: Double128VectorTests
finished: Wed Apr 16 20:50:42 IST 2025
elapsed time (seconds): 24.521

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   24.515 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:50:18 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 10
Process id: 1599168
finished: Wed Apr 16 20:50:42 IST 2025
elapsed time (seconds): 24.515
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Double128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Double128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Double128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Double128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double128VectorTests 
TIME:   205.117 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Double128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double128VectorTests 
started: Wed Apr 16 20:50:42 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1600524
finished: Wed Apr 16 20:54:07 IST 2025
elapsed time (seconds): 205.117
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -1147191002756546838
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-1147191002756546838" to command line.
test Double128VectorTests.ABSDouble128VectorTests(double[-i * 5]): success [602ms]
test Double128VectorTests.ABSDouble128VectorTests(double[i * 5]): success [49ms]
test Double128VectorTests.ABSDouble128VectorTests(double[i + 1]): success [3ms]
test Double128VectorTests.ABSDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.ABSDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double128VectorTests.ABSDouble128VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[-i * 5], mask[i % 2]): success [225ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i * 5], mask[i % 2]): success [67ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i + 1], mask[i % 2]): success [2ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [43ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [17ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[-i * 5], mask[true]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i * 5], mask[true]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[cornerCaseValue(i)], mask[true]): success [5ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[-i * 5], mask[false]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i * 5], mask[false]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i + 1], mask[false]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[-i * 5]): success [133ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[i * 5]): success [56ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[i + 1]): success [2ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.ACOSDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[cornerCaseValue(i)]): success [67ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], double[i * 5]): success [225ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], double[i + 1]): success [63ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [17ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [23ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [14ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [9ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [118ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [65ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [8ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [14ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[-i * 5]): success [126ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[i * 5]): success [0ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[i + 1]): success [81ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[-i * 5], mask[i % 2]): success [111ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i * 5], mask[i % 2]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i + 1], mask[i % 2]): success [85ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[-i * 5], mask[true]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i * 5], mask[true]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i + 1], mask[true]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [29ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [10ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[-i * 5], mask[false]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i * 5], mask[false]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i + 1], mask[false]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[-i * 5]): success [10ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[i * 5]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[i + 1]): success [2ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[-i * 5], mask[i % 2]): success [10ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i * 5], mask[i % 2]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i + 1], mask[i % 2]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[-i * 5], mask[true]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [12ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[-i * 5], mask[false]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i * 5], mask[false]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.ASINDouble128VectorTests(double[-i * 5]): success [123ms]
test Double128VectorTests.ASINDouble128VectorTests(double[i * 5]): success [58ms]
test Double128VectorTests.ASINDouble128VectorTests(double[i + 1]): success [1ms]
test Double128VectorTests.ASINDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.ASINDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.ASINDouble128VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], double[i * 5]): success [181ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], double[i + 1]): success [76ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [4ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [4ms]
test Double128VectorTests.ATANDouble128VectorTests(double[-i * 5]): success [73ms]
test Double128VectorTests.ATANDouble128VectorTests(double[i * 5]): success [57ms]
test Double128VectorTests.ATANDouble128VectorTests(double[i + 1]): success [1ms]
test Double128VectorTests.ATANDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.ATANDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.ATANDouble128VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[-i * 5]): success [129ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[i * 5]): success [70ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.BroadcastDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.BroadcastLongDouble128VectorTestsSmokeTest(double[-i * 5]): success [3ms]
test Double128VectorTests.BroadcastLongDouble128VectorTestsSmokeTest(double[i * 5]): success [3ms]
test Double128VectorTests.BroadcastLongDouble128VectorTestsSmokeTest(double[i + 1]): success [3ms]
test Double128VectorTests.BroadcastLongDouble128VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [3ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[-i * 5]): success [113ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[i * 5]): success [92ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[i + 1]): success [4ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.CBRTDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[cornerCaseValue(i)]): success [6ms]
test Double128VectorTests.COSDouble128VectorTests(double[-i * 5]): success [62ms]
test Double128VectorTests.COSDouble128VectorTests(double[i * 5]): success [57ms]
test Double128VectorTests.COSDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.COSDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [59ms]
test Double128VectorTests.COSDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.COSDouble128VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.COSHDouble128VectorTests(double[-i * 5]): success [125ms]
test Double128VectorTests.COSHDouble128VectorTests(double[i * 5]): success [59ms]
test Double128VectorTests.COSHDouble128VectorTests(double[i + 1]): success [1ms]
test Double128VectorTests.COSHDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.COSHDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.COSHDouble128VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], double[i * 5]): success [163ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], double[i + 1]): success [60ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [37ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [66ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [4ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [4ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [4ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [5ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [5ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [3ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [3ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [17ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[i]): success [337ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[i - length / 2]): success [160ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[i + 1]): success [107ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[i - 2]): success [74ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[zigZag(i)]): success [100ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[cornerCaseValue(i)]): success [76ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[i]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[i - length / 2]): success [68ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[i + 1]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[i - 2]): success [100ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[zigZag(i)]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[i]): success [68ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[i - length / 2]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[i + 1]): success [68ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[i - 2]): success [68ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[zigZag(i)]): success [68ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [68ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[i]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[i - length / 2]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[i + 1]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[i - 2]): success [68ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[zigZag(i)]): success [68ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[i]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[i - length / 2]): success [68ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[i + 1]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[i - 2]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[zigZag(i)]): success [70ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[i]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [69ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [70ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [70ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [18ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [4ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [4ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [4ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [4ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [69ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [4ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [5ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [10ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [80ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[true]): success [1ms]
test Double128Ve

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

ests.fmaDouble128VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[i + 1]): success [0ms]
test Double128VectorTests.fmaDouble128VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.fmaDouble128VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.fmaDouble128VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.getDouble128VectorTests(double[-i * 5]): success [5ms]
test Double128VectorTests.getDouble128VectorTests(double[i * 5]): success [59ms]
test Double128VectorTests.getDouble128VectorTests(double[i + 1]): success [1ms]
test Double128VectorTests.getDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.getDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.getDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[-i * 5]): success [41ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[i + 1]): success [5ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [7ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [2ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(0): success [78ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(-1): success [19ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(1): success [19ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(2): success [2ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(-2): success [3ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(0): success [3ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(-1): success [3ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(1): success [3ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(2): success [4ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(-2): success [3ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(0): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(1): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(32): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(37): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(1024): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(1025): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(1029): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(0): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(1): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(32): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(37): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(1024): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(1025): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(1029): success [0ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[i]): success [166ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[i - length / 2]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[i + 1]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[i - 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[zigZag(i)]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[cornerCaseValue(i)]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[i]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[i - length / 2]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[i + 1]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[i - 2]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[zigZag(i)]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[i]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[i - length / 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[i + 1]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[i - 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[zigZag(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[i]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[i - length / 2]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[i + 1]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[i - 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[zigZag(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[i]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[i - length / 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[i + 1]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[i - 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[zigZag(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[i]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [70ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[i]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [9ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [83ms]
test Double128VectorTests.maskAndDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Double128VectorTests.maskAndDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskAndNotDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Double128VectorTests.maskAndNotDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskCompressDouble128VectorTestsSmokeTest(mask[i % 2]): success [235ms]
test Double128VectorTests.maskCompressDouble128VectorTestsSmokeTest(mask[true]): success [83ms]
test Double128VectorTests.maskCompressDouble128VectorTestsSmokeTest(mask[false]): success [63ms]
test Double128VectorTests.maskEqDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Double128VectorTests.maskEqDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskEqualsDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Double128VectorTests.maskEqualsDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskFirstTrueDouble128VectorTestsSmokeTest(mask[i % 2]): success [106ms]
test Double128VectorTests.maskFirstTrueDouble128VectorTestsSmokeTest(mask[true]): success [56ms]
test Double128VectorTests.maskFirstTrueDouble128VectorTestsSmokeTest(mask[false]): success [24ms]
test Double128VectorTests.maskFromToLongDouble128VectorTestsSmokeTest(-1): success [60ms]
test Double128VectorTests.maskFromToLongDouble128VectorTestsSmokeTest(0): success [0ms]
test Double128VectorTests.maskFromToLongDouble128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Double128VectorTests.maskFromToLongDouble128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Double128VectorTests.maskHashCodeDouble128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Double128VectorTests.maskHashCodeDouble128VectorTestsSmokeTest(mask[true]): success [0ms]
test Double128VectorTests.maskHashCodeDouble128VectorTestsSmokeTest(mask[false]): success [0ms]
test Double128VectorTests.maskLastTrueDouble128VectorTestsSmokeTest(mask[i % 2]): success [67ms]
test Double128VectorTests.maskLastTrueDouble128VectorTestsSmokeTest(mask[true]): success [55ms]
test Double128VectorTests.maskLastTrueDouble128VectorTestsSmokeTest(mask[false]): success [36ms]
test Double128VectorTests.maskOrDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [47ms]
test Double128VectorTests.maskOrDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskTrueCountDouble128VectorTestsSmokeTest(mask[i % 2]): success [31ms]
test Double128VectorTests.maskTrueCountDouble128VectorTestsSmokeTest(mask[true]): success [55ms]
test Double128VectorTests.maskTrueCountDouble128VectorTestsSmokeTest(mask[false]): success [23ms]
test Double128VectorTests.maskXorDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Double128VectorTests.maskXorDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], double[i * 5]): success [6ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [36ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], double[i * 5]): success [8ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [8ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.negDouble128VectorTests(double[-i * 5]): success [14ms]
test Double128VectorTests.negDouble128VectorTests(double[i * 5]): success [45ms]
test Double128VectorTests.negDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.negDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.negDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.negDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], double[i * 5]): success [27ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], double[i + 1]): success [69ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [2ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [2ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [14ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.shuffleEqualsDouble128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [638ms]
test Double128VectorTests.shuffleEqualsDouble128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [27ms]
test Double128VectorTests.shuffleMiscellaneousDouble128VectorTestsSmokeTest(shuffle[random]): success [29ms]
test Double128VectorTests.shuffleTest(): success [777ms]
test Double128VectorTests.shuffleToStringDouble128VectorTestsSmokeTest(shuffle[random]): success [46ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[i * 5]): success [898ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[i + 1]): success [386ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [192ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [184ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [161ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [257ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [404ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [160ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [158ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [181ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [157ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [221ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [279ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [182ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [155ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [147ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [172ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [148ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [148ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [232ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[-i * 5]): success [425ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[i * 5]): success [292ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[i + 1]): success [140ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [141ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [141ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[cornerCaseValue(i)]): success [147ms]
test Double128VectorTests.smokeTest1(): success [0ms]
test Double128VectorTests.smokeTest2(): success [52ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[-i * 5]): success [17ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[i * 5]): success [44ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[i + 1]): success [1ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.sqrtDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], double[i * 5]): success [9ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [8ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [35ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [9ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [64ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.toIntArrayDouble128VectorTestsSmokeTest(double[-i * 5]): success [6ms]
test Double128VectorTests.toIntArrayDouble128VectorTestsSmokeTest(double[i * 5]): success [6ms]
test Double128VectorTests.toIntArrayDouble128VectorTestsSmokeTest(double[i + 1]): success [6ms]
test Double128VectorTests.toIntArrayDouble128VectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [6ms]
test Double128VectorTests.toLongArrayDouble128VectorTestsSmokeTest(double[-i * 5]): success [0ms]
test Double128VectorTests.toLongArrayDouble128VectorTestsSmokeTest(double[i * 5]): success [4ms]
test Double128VectorTests.toLongArrayDouble128VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double128VectorTests.toLongArrayDouble128VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[-i * 5]): success [2ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[i * 5]): success [1ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[i + 1]): success [8ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [24ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [8ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [20ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[i * 5]): success [362ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[i + 1]): success [415ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [102ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [140ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [140ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [730ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [597ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [284ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [264ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [285ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [284ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [284ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [283ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [286ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [236ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [423ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [284ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [283ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [235ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [281ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[-i * 5]): success [335ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[i * 5]): success [356ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[i + 1]): success [162ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [140ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [140ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[cornerCaseValue(i)]): success [140ms]
test Double128VectorTests.viewAsFloatingLanesTest(): success [29ms]
test Double128VectorTests.viewAsIntegeralLanesTest(): success [31ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], double[i * 5]): success [43ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], double[i + 1]): success [114ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [33ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [33ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [33ms]

===============================================
jdk/incubator/vector/Double128VectorTests.java
Total tests run: 3209, Passes: 3208, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Double128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Double128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Double128VectorTests.d/testng.0.jta jdk/incubator/vector/Double128VectorTests.java false Double128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/IntMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.803 seconds
messages:
command: build IntMaxVectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:56:30 IST 2025
Test directory:
  compile: IntMaxVectorTests
finished: Wed Apr 16 20:56:31 IST 2025
elapsed time (seconds): 0.803

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.803 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/IntMaxVectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:56:30 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 2
Process id: 1598631
finished: Wed Apr 16 20:56:31 IST 2025
elapsed time (seconds): 0.803
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/IntMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/IntMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/IntMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/IntMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/IntMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/IntMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation IntMaxVectorTests 
TIME:   183.77 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation IntMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation IntMaxVectorTests 
started: Wed Apr 16 20:56:31 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1602462
finished: Wed Apr 16 20:59:35 IST 2025
elapsed time (seconds): 183.77
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 2985850074397771306
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=2985850074397771306" to command line.
test IntMaxVectorTests.ABSIntMaxVectorTests(int[-i * 5]): success [542ms]
test IntMaxVectorTests.ABSIntMaxVectorTests(int[i * 5]): success [7ms]
test IntMaxVectorTests.ABSIntMaxVectorTests(int[i + 1]): success [48ms]
test IntMaxVectorTests.ABSIntMaxVectorTests(int[cornerCaseValue(i)]): success [3ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[-i * 5], mask[i % 2]): success [189ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i * 5], mask[i % 2]): success [3ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i + 1], mask[i % 2]): success [66ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[-i * 5], mask[true]): success [3ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[-i * 5], mask[false]): success [16ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i * 5], mask[false]): success [11ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTests(int[-i * 5], int[i * 5]): success [286ms]
test IntMaxVectorTests.ADDIntMaxVectorTests(int[-i * 5], int[i + 1]): success [29ms]
test IntMaxVectorTests.ADDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [91ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [21ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [154ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [8ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [5ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTests(int[-i * 5]): success [85ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTests(int[i * 5]): success [83ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTests(int[i + 1]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [81ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [86ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [2ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTests(int[-i * 5]): success [8ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTests(int[i * 5]): success [10ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTests(int[i + 1]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [7ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTests(int[-i * 5], int[i * 5]): success [233ms]
test IntMaxVectorTests.ANDIntMaxVectorTests(int[-i * 5], int[i + 1]): success [3ms]
test IntMaxVectorTests.ANDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [69ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [23ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTests(int[-i * 5]): success [104ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTests(int[i * 5]): success [85ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTests(int[i + 1]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [19ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [79ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [27ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTests(int[-i * 5], int[i * 5]): success [162ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTests(int[-i * 5], int[i + 1]): success [15ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [69ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [102ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTests(int[-i * 5], int[i * 5]): success [103ms]
test IntMaxVectorTests.ASHRIntMaxVectorTests(int[-i * 5], int[i + 1]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [69ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [74ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShift(int[-i * 5], int[i * 5]): success [205ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShift(int[-i * 5], int[i + 1]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [59ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftConst(int[-i * 5]): success [6ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftConst(int[i * 5]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftConst(int[i + 1]): success [52ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [60ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [55ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [9ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [49ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [113ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [3ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [95ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [331ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [20ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [4ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [60ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [56ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
tes

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

: success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[zigZag(i)], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[cornerCaseValue(i)], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i - length / 2], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i + 1], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i - 2], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[zigZag(i)], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[cornerCaseValue(i)], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i - length / 2], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i + 1], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i - 2], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[zigZag(i)], mask[true]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [102ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i], int[i], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i], int[i - length / 2], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i], int[i + 1], mask[false]): success [98ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i], int[i - 2], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i], int[zigZag(i)], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i], int[cornerCaseValue(i)], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - length / 2], int[i], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - length / 2], int[i - length / 2], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - length / 2], int[i + 1], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - length / 2], int[i - 2], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - length / 2], int[zigZag(i)], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - length / 2], int[cornerCaseValue(i)], mask[false]): success [96ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i + 1], int[i], mask[false]): success [96ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i + 1], int[i - length / 2], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i + 1], int[i + 1], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i + 1], int[i - 2], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i + 1], int[zigZag(i)], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i + 1], int[cornerCaseValue(i)], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[i], mask[false]): success [96ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[i - length / 2], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[i + 1], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[i - 2], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[zigZag(i)], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[cornerCaseValue(i)], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i - length / 2], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i + 1], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i - 2], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[zigZag(i)], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[cornerCaseValue(i)], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i - length / 2], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i + 1], mask[false]): success [96ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i - 2], mask[false]): success [120ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[zigZag(i)], mask[false]): success [97ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [96ms]
test IntMaxVectorTests.UMAXIntMaxVectorTests(int[-i * 5], int[i * 5]): success [83ms]
test IntMaxVectorTests.UMAXIntMaxVectorTests(int[-i * 5], int[i + 1]): success [2ms]
test IntMaxVectorTests.UMAXIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [90ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [17ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTests(int[-i * 5]): success [54ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTests(int[i * 5]): success [61ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTests(int[i + 1]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTests(int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [15ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [81ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [29ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.UMINIntMaxVectorTests(int[-i * 5], int[i * 5]): success [89ms]
test IntMaxVectorTests.UMINIntMaxVectorTests(int[-i * 5], int[i + 1]): success [33ms]
test IntMaxVectorTests.UMINIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [89ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [62ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTests(int[-i * 5]): success [61ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTests(int[i * 5]): success [62ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTests(int[i + 1]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTests(int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [15ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [79ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [29ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.VectorShapeIntMaxVectorTestsSmokeTest(): success [0ms]
test IntMaxVectorTests.VectorTypeIntMaxVectorTestsSmokeTest(): success [0ms]
test IntMaxVectorTests.WithLanesIntMaxVectorTestsSmokeTest(): success [0ms]
test IntMaxVectorTests.WithShapeIntMaxVectorTestsSmokeTest(): success [0ms]
test IntMaxVectorTests.XORIntMaxVectorTests(int[-i * 5], int[i * 5]): success [9ms]
test IntMaxVectorTests.XORIntMaxVectorTests(int[-i * 5], int[i + 1]): success [2ms]
test IntMaxVectorTests.XORIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [89ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTests(int[-i * 5]): success [52ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTests(int[i * 5]): success [85ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTests(int[i + 1]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [14ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [78ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [26ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ZOMOIntMaxVectorTests(int[-i * 5]): success [90ms]
test IntMaxVectorTests.ZOMOIntMaxVectorTests(int[i * 5]): success [49ms]
test IntMaxVectorTests.ZOMOIntMaxVectorTests(int[i + 1]): success [112ms]
test IntMaxVectorTests.ZOMOIntMaxVectorTests(int[cornerCaseValue(i)]): success [48ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[-i * 5], mask[i % 2]): success [151ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[i * 5], mask[i % 2]): success [97ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[i + 1], mask[i % 2]): success [212ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [97ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[-i * 5], mask[true]): success [97ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[i * 5], mask[true]): success [97ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[i + 1], mask[true]): success [97ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[true]): success [96ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[-i * 5], mask[false]): success [96ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[i * 5], mask[false]): success [97ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[i + 1], mask[false]): success [152ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[false]): success [97ms]
test IntMaxVectorTests.ZeroIntMaxVectorTests(int[-i * 5]): success [56ms]
test IntMaxVectorTests.ZeroIntMaxVectorTests(int[i * 5]): success [43ms]
test IntMaxVectorTests.ZeroIntMaxVectorTests(int[i + 1]): success [31ms]
test IntMaxVectorTests.ZeroIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.absIntMaxVectorTests(int[-i * 5]): success [36ms]
test IntMaxVectorTests.absIntMaxVectorTests(int[i * 5]): success [1ms]
test IntMaxVectorTests.absIntMaxVectorTests(int[i + 1]): success [71ms]
test IntMaxVectorTests.absIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTests(int[-i * 5], int[i * 5]): success [34ms]
test IntMaxVectorTests.addIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [36ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [12ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.allTrueIntMaxVectorTests(boolean[i % 2]): success [19ms]
test IntMaxVectorTests.allTrueIntMaxVectorTests(boolean[i % 5]): success [20ms]
test IntMaxVectorTests.andIntMaxVectorTests(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.andIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.andIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.andIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.andIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.andIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.anyTrueIntMaxVectorTests(boolean[i % 2]): success [5ms]
test IntMaxVectorTests.anyTrueIntMaxVectorTests(boolean[i % 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [5ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [5ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [5ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [5ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseDivByZeroSmokeTest(): success [11ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[i * 5], mask[i % 2]): success [30ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [19ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[-i * 5], mask[i % 2]): success [151ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[i * 5], mask[i % 2]): success [38ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[i + 1], mask[i % 2]): success [108ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [37ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[-i * 5], mask[true]): success [72ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[i * 5], mask[true]): success [3ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[i + 1], mask[true]): success [3ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[cornerCaseValue(i)], mask[true]): success [3ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[-i * 5], mask[false]): success [4ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[i * 5], mask[false]): success [4ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[i + 1], mask[false]): success [4ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[cornerCaseValue(i)], mask[false]): success [4ms]
test IntMaxVectorTests.divIntMaxVectorTests(int[-i * 5], int[i * 5]): success [133ms]
test IntMaxVectorTests.divIntMaxVectorTests(int[-i * 5], int[i + 1]): success [52ms]
test IntMaxVectorTests.divIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [131ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [93ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [139ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [100ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [226ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [101ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [99ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [99ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [100ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [100ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [100ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[i]): success [113ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[i - length / 2]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[i + 1]): success [54ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[i - 2]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[zigZag(i)]): success [81ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[cornerCaseValue(i)]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[i]): success [47ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[i - length / 2]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[i + 1]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[i - 2]): success [47ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[zigZag(i)]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [47ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[i]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[i - length / 2]): success [47ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[i + 1]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[i - 2]): success [47ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[zigZag(i)]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[cornerCaseValue(i)]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[i]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[i - length / 2]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[i + 1]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[i - 2]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[zigZag(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[cornerCaseValue(i)]): success [67ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[i]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[i - length / 2]): success [47ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[i + 1]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[i - 2]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[zigZag(i)]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[i]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[i + 1]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[i - 2]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [48ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [9ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[-i * 5], mask[i % 2]): success [107ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i * 5], mask[i % 2]): success [38ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i + 1], mask[i % 2]): success [106ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [37ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[-i * 5], mask[true]): success [19ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i * 5], mask[true]): success [2ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i + 1], mask[true]): success [2ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[cornerCaseValue(i)], mask[true]): success [3ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[-i * 5], mask[false]): success [4ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i * 5], mask[false]): success [3ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i + 1], mask[false]): success [3ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[cornerCaseValue(i)], mask[false]): success [4ms]
test IntMaxVectorTests.getIntMaxVectorTests(int[-i * 5]): success [4ms]
test IntMaxVectorTests.getIntMaxVectorTests(int[i * 5]): success [3ms]
test IntMaxVectorTests.getIntMaxVectorTests(int[i + 1]): success [66ms]
test IntMaxVectorTests.getIntMaxVectorTests(int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.hashCodeIntMaxVectorTestsSmokeTest(int[-i * 5]): success [11ms]
test IntMaxVectorTests.hashCodeIntMaxVectorTestsSmokeTest(int[i * 5]): success [1ms]
test IntMaxVectorTests.hashCodeIntMaxVectorTestsSmokeTest(int[i + 1]): success [1ms]
test IntMaxVectorTests.hashCodeIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(0): success [66ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(-1): success [2ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(1): success [17ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(2): success [2ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(-2): success [1ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(0): success [2ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(-1): success [1ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(1): success [1ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(2): success [3ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(-2): success [1ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(0): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(1): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(32): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(37): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(1024): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(1025): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(1029): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(0): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(1): success [4ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(32): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(37): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(1024): success [1ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(1025): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(1029): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[i]): success [113ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[i - length / 2]): success [51ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[i + 1]): success [54ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[i - 2]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[zigZag(i)]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[cornerCaseValue(i)]): success [49ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[i]): success [93ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[i - length / 2]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[i + 1]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[i - 2]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[zigZag(i)]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[i]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[i - length / 2]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[i + 1]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[i - 2]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[zigZag(i)]): success [49ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[cornerCaseValue(i)]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[i]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[i - length / 2]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[i + 1]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[i - 2]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[zigZag(i)]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[cornerCaseValue(i)]): success [49ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[i]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[i - length / 2]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[i + 1]): success [49ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[i - 2]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[zigZag(i)]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[i]): success [49ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[i + 1]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[i - 2]): success [49ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [48ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [3ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [5ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.maskAndIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [15ms]
test IntMaxVectorTests.maskAndIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskAndNotIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test IntMaxVectorTests.maskAndNotIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskCompressIntMaxVectorTestsSmokeTest(mask[i % 2]): success [251ms]
test IntMaxVectorTests.maskCompressIntMaxVectorTestsSmokeTest(mask[true]): success [119ms]
test IntMaxVectorTests.maskCompressIntMaxVectorTestsSmokeTest(mask[false]): success [81ms]
test IntMaxVectorTests.maskEqIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test IntMaxVectorTests.maskEqIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskEqualsIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test IntMaxVectorTests.maskEqualsIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskFirstTrueIntMaxVectorTestsSmokeTest(mask[i % 2]): success [36ms]
test IntMaxVectorTests.maskFirstTrueIntMaxVectorTestsSmokeTest(mask[true]): success [60ms]
test IntMaxVectorTests.maskFirstTrueIntMaxVectorTestsSmokeTest(mask[false]): success [26ms]
test IntMaxVectorTests.maskHashCodeIntMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test IntMaxVectorTests.maskHashCodeIntMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test IntMaxVectorTests.maskHashCodeIntMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test IntMaxVectorTests.maskLastTrueIntMaxVectorTestsSmokeTest(mask[i % 2]): success [73ms]
test IntMaxVectorTests.maskLastTrueIntMaxVectorTestsSmokeTest(mask[true]): success [58ms]
test IntMaxVectorTests.maskLastTrueIntMaxVectorTestsSmokeTest(mask[false]): success [40ms]
test IntMaxVectorTests.maskOrIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test IntMaxVectorTests.maskOrIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskTrueCountIntMaxVectorTestsSmokeTest(mask[i % 2]): success [33ms]
test IntMaxVectorTests.maskTrueCountIntMaxVectorTestsSmokeTest(mask[true]): success [58ms]
test IntMaxVectorTests.maskTrueCountIntMaxVectorTestsSmokeTest(mask[false]): success [26ms]
test IntMaxVectorTests.maskXorIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test IntMaxVectorTests.maskXorIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maxIntMaxVectorTests(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.maxIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.maxIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.maxIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.maxIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.maxIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.minIntMaxVectorTests(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.minIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.minIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.minIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.minIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.minIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTests(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.mulIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.negIntMaxVectorTests(int[-i * 5]): success [12ms]
test IntMaxVectorTests.negIntMaxVectorTests(int[i * 5]): success [1ms]
test IntMaxVectorTests.negIntMaxVectorTests(int[i + 1]): success [72ms]
test IntMaxVectorTests.negIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.notIntMaxVectorTests(int[-i * 5]): success [16ms]
test IntMaxVectorTests.notIntMaxVectorTests(int[i * 5]): success [1ms]
test IntMaxVectorTests.notIntMaxVectorTests(int[i + 1]): success [77ms]
test IntMaxVectorTests.notIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.orIntMaxVectorTests(int[-i * 5], int[i * 5]): success [7ms]
test IntMaxVectorTests.orIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.orIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.orIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.orIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.orIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.shuffleEqualsIntMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [9ms]
test IntMaxVectorTests.shuffleEqualsIntMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [7ms]
test IntMaxVectorTests.shuffleMiscellaneousIntMaxVectorTestsSmokeTest(shuffle[random]): success [16ms]
test IntMaxVectorTests.shuffleTest(): success [311ms]
test IntMaxVectorTests.shuffleToStringIntMaxVectorTestsSmokeTest(shuffle[random]): success [35ms]
test IntMaxVectorTests.sliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[i * 5]): success [527ms]
test IntMaxVectorTests.sliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[i + 1]): success [58ms]
test IntMaxVectorTests.sliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [217ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [132ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [57ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [261ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [58ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [58ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [168ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [58ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [58ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [77ms]
test IntMaxVectorTests.sliceUnaryIntMaxVectorTests(int[-i * 5]): success [197ms]
test IntMaxVectorTests.sliceUnaryIntMaxVectorTests(int[i * 5]): success [54ms]
test IntMaxVectorTests.sliceUnaryIntMaxVectorTests(int[i + 1]): success [180ms]
test IntMaxVectorTests.sliceUnaryIntMaxVectorTests(int[cornerCaseValue(i)]): success [53ms]
test IntMaxVectorTests.smokeTest1(): success [0ms]
test IntMaxVectorTests.smokeTest2(): success [80ms]
test IntMaxVectorTests.subIntMaxVectorTests(int[-i * 5], int[i * 5]): success [6ms]
test IntMaxVectorTests.subIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [46ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.toDoubleArrayIntMaxVectorTestsSmokeTest(int[-i * 5]): success [0ms]
test IntMaxVectorTests.toDoubleArrayIntMaxVectorTestsSmokeTest(int[i * 5]): success [0ms]
test IntMaxVectorTests.toDoubleArrayIntMaxVectorTestsSmokeTest(int[i + 1]): success [0ms]
test IntMaxVectorTests.toDoubleArrayIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.toIntArrayIntMaxVectorTestsSmokeTest(int[-i * 5]): success [0ms]
test IntMaxVectorTests.toIntArrayIntMaxVectorTestsSmokeTest(int[i * 5]): success [0ms]
test IntMaxVectorTests.toIntArrayIntMaxVectorTestsSmokeTest(int[i + 1]): success [0ms]
test IntMaxVectorTests.toIntArrayIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.toLongArrayIntMaxVectorTestsSmokeTest(int[-i * 5]): success [0ms]
test IntMaxVectorTests.toLongArrayIntMaxVectorTestsSmokeTest(int[i * 5]): success [0ms]
test IntMaxVectorTests.toLongArrayIntMaxVectorTestsSmokeTest(int[i + 1]): success [0ms]
test IntMaxVectorTests.toLongArrayIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.toStringIntMaxVectorTestsSmokeTest(int[-i * 5]): success [1ms]
test IntMaxVectorTests.toStringIntMaxVectorTestsSmokeTest(int[i * 5]): success [7ms]
test IntMaxVectorTests.toStringIntMaxVectorTestsSmokeTest(int[i + 1]): success [3ms]
test IntMaxVectorTests.toStringIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.unsliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[i * 5]): success [207ms]
test IntMaxVectorTests.unsliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[i + 1]): success [55ms]
test IntMaxVectorTests.unsliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [256ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [476ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [112ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [447ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [112ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [112ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [111ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [147ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [112ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [112ms]
test IntMaxVectorTests.unsliceUnaryIntMaxVectorTests(int[-i * 5]): success [182ms]
test IntMaxVectorTests.unsliceUnaryIntMaxVectorTests(int[i * 5]): success [54ms]
test IntMaxVectorTests.unsliceUnaryIntMaxVectorTests(int[i + 1]): success [179ms]
test IntMaxVectorTests.unsliceUnaryIntMaxVectorTests(int[cornerCaseValue(i)]): success [54ms]
test IntMaxVectorTests.viewAsFloatingLanesTest(): success [413ms]
test IntMaxVectorTests.viewAsIntegeralLanesTest(): success [0ms]
test IntMaxVectorTests.withIntMaxVectorTests(int[-i * 5], int[i * 5]): success [17ms]
test IntMaxVectorTests.withIntMaxVectorTests(int[-i * 5], int[i + 1]): success [17ms]
test IntMaxVectorTests.withIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [89ms]

===============================================
jdk/incubator/vector/IntMaxVectorTests.java
Total tests run: 3618, Passes: 3617, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/IntMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/IntMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/IntMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/IntMaxVectorTests.d/testng.0.jta jdk/incubator/vector/IntMaxVectorTests.java false IntMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/Float64VectorTests.java
TEST: jdk/incubator/vector/Int128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.818 seconds
messages:
command: build Int128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:54:07 IST 2025
Test directory:
  compile: Int128VectorTests
finished: Wed Apr 16 20:54:09 IST 2025
elapsed time (seconds): 1.818

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.818 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:54:07 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 10
Process id: 1599168
finished: Wed Apr 16 20:54:09 IST 2025
elapsed time (seconds): 1.818
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
TIME:   339.071 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
started: Wed Apr 16 20:54:09 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1602010
finished: Wed Apr 16 20:59:48 IST 2025
elapsed time (seconds): 339.071
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -3256260304110554579
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-3256260304110554579" to command line.
test Int128VectorTests.ABSInt128VectorTests(int[-i * 5]): success [557ms]
test Int128VectorTests.ABSInt128VectorTests(int[i * 5]): success [52ms]
test Int128VectorTests.ABSInt128VectorTests(int[i + 1]): success [5ms]
test Int128VectorTests.ABSInt128VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[i % 2]): success [200ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[i % 2]): success [68ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[i % 2]): success [3ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[true]): success [75ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i * 5]): success [254ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i + 1]): success [61ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [23ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [9ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [122ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [64ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[-i * 5]): success [137ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i * 5]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i + 1]): success [93ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [109ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [83ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [27ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [41ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[-i * 5]): success [20ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i * 5]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i * 5]): success [184ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i + 1]): success [60ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [19ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [7ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [64ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[-i * 5]): success [156ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i * 5]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i + 1]): success [96ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [83ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [84ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [14ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [27ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i * 5]): success [223ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i + 1]): success [106ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [70ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [77ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [43ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i * 5]): success [112ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i + 1]): success [71ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [81ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [75ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [21ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [195ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [60ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[-i * 5]): success [8ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i * 5]): success [54ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i + 1]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [58ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [62ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [13ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [49ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [4ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [110ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [92ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [327ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [20ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [103ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [78ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [60ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [44ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [22ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [3ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): succe

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

.divInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [263ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [209ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [227ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [206ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [206ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [206ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i]): success [201ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - length / 2]): success [106ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i + 1]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[zigZag(i)]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i + 1]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - length / 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i + 1]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[zigZag(i)]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [169ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - length / 2]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i + 1]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - 2]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[zigZag(i)]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i + 1]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - 2]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [102ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [9ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [53ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [29ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[i % 2]): success [157ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[i % 2]): success [183ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[i % 2]): success [78ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [79ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[true]): success [5ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[true]): success [6ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[false]): success [7ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [8ms]
test Int128VectorTests.getInt128VectorTests(int[-i * 5]): success [8ms]
test Int128VectorTests.getInt128VectorTests(int[i * 5]): success [65ms]
test Int128VectorTests.getInt128VectorTests(int[i + 1]): success [3ms]
test Int128VectorTests.getInt128VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[-i * 5]): success [41ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i * 5]): success [2ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i + 1]): success [19ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(0): success [76ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(1): success [20ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-2): success [4ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(0): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-2): success [3ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(37): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1024): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1): success [4ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(37): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1024): success [1ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i]): success [196ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - length / 2]): success [107ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i + 1]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[zigZag(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i]): success [145ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i + 1]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - length / 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i + 1]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[zigZag(i)]): success [115ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - length / 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i + 1]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[zigZag(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i + 1]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [6ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [52ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[i % 2]): success [253ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[true]): success [121ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[false]): success [82ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [38ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[true]): success [59ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[false]): success [26ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(-1): success [67ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[true]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[false]): success [0ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [72ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[true]): success [59ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[false]): success [41ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[i % 2]): success [35ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[true]): success [58ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[false]): success [26ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [31ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[-i * 5]): success [14ms]
test Int128VectorTests.negInt128VectorTests(int[i * 5]): success [67ms]
test Int128VectorTests.negInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[-i * 5]): success [18ms]
test Int128VectorTests.notInt128VectorTests(int[i * 5]): success [71ms]
test Int128VectorTests.notInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [12ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [10ms]
test Int128VectorTests.shuffleMiscellaneousInt128VectorTestsSmokeTest(shuffle[random]): success [10ms]
test Int128VectorTests.shuffleTest(): success [316ms]
test Int128VectorTests.shuffleToStringInt128VectorTestsSmokeTest(shuffle[random]): success [40ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [644ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [292ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [124ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [204ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [326ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [123ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [122ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [140ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [122ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [122ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [122ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [155ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[-i * 5]): success [258ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i * 5]): success [305ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i + 1]): success [112ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [113ms]
test Int128VectorTests.smokeTest1(): success [0ms]
test Int128VectorTests.smokeTest2(): success [79ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[-i * 5]): success [5ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i + 1]): success [13ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [13ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [269ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [274ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [113ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [542ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [572ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [547ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [231ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [233ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [269ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [231ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [231ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [231ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[-i * 5]): success [244ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i * 5]): success [257ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i + 1]): success [111ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [112ms]
test Int128VectorTests.viewAsFloatingLanesTest(): success [458ms]
test Int128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i * 5]): success [52ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i + 1]): success [124ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [34ms]

===============================================
jdk/incubator/vector/Int128VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Int128VectorTests.d/testng.0.jta jdk/incubator/vector/Int128VectorTests.java false Int128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
TEST: jdk/incubator/vector/Int512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.391 seconds
messages:
command: build Int512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:55:30 IST 2025
Test directory:
  compile: Int512VectorTests
finished: Wed Apr 16 20:55:31 IST 2025
elapsed time (seconds): 1.391

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.391 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:55:30 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 5
Process id: 1598755
finished: Wed Apr 16 20:55:31 IST 2025
elapsed time (seconds): 1.391
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests 
TIME:   271.873 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests 
started: Wed Apr 16 20:55:31 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1602227
finished: Wed Apr 16 21:00:03 IST 2025
elapsed time (seconds): 271.873
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -7519159802917781200
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-7519159802917781200" to command line.
test Int512VectorTests.ABSInt512VectorTests(int[-i * 5]): success [406ms]
test Int512VectorTests.ABSInt512VectorTests(int[i * 5]): success [480ms]
test Int512VectorTests.ABSInt512VectorTests(int[i + 1]): success [11ms]
test Int512VectorTests.ABSInt512VectorTests(int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[i % 2]): success [163ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[i % 2]): success [111ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[i % 2]): success [92ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[true]): success [163ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[i * 5]): success [127ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[i + 1]): success [279ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [15ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [21ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [8ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [150ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [55ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [89ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[-i * 5]): success [118ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[i * 5]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[i + 1]): success [67ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [71ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [87ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[true]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[false]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[false]): success [15ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[false]): success [13ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[-i * 5]): success [9ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[i * 5]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[i + 1]): success [10ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [7ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[false]): success [12ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[i * 5]): success [277ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[i + 1]): success [61ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [8ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [86ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[-i * 5]): success [149ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[i * 5]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[i + 1]): success [65ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [19ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [86ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [28ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[false]): success [13ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[i * 5]): success [268ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[i + 1]): success [194ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [46ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [80ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [84ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [173ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [86ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[i * 5]): success [122ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[i + 1]): success [165ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [48ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [114ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [92ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [47ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [170ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [89ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [248ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[-i * 5]): success [7ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[i * 5]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[i + 1]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [15ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [22ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [67ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [9ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [60ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [5ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [12ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [83ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [170ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [5ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [5ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [5ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [326ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [104ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [62ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [45ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

, mask[false]): success [237ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i]): success [142ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i - length / 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i + 1]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i - 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[zigZag(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i - length / 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i + 1]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i - 2]): success [70ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[zigZag(i)]): success [77ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i - length / 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i + 1]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i - 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[zigZag(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i - length / 2]): success [78ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i + 1]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i - 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[zigZag(i)]): success [77ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i - length / 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i + 1]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i - 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[zigZag(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [9ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [66ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[i % 2]): success [268ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[i % 2]): success [93ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[i % 2]): success [72ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[true]): success [80ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[true]): success [144ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[false]): success [4ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[false]): success [4ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[false]): success [4ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int512VectorTests.getInt512VectorTests(int[-i * 5]): success [7ms]
test Int512VectorTests.getInt512VectorTests(int[i * 5]): success [7ms]
test Int512VectorTests.getInt512VectorTests(int[i + 1]): success [7ms]
test Int512VectorTests.getInt512VectorTests(int[cornerCaseValue(i)]): success [7ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[-i * 5]): success [38ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(0): success [62ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(-1): success [2ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(1): success [20ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(2): success [2ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(-2): success [3ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(0): success [2ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(-1): success [2ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(1): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(2): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(-2): success [1ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(32): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(37): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1024): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1025): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1029): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1): success [4ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(32): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(37): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1024): success [1ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1025): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1029): success [0ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i]): success [143ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i - length / 2]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i + 1]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i - 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[zigZag(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[cornerCaseValue(i)]): success [84ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i]): success [99ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i - length / 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i + 1]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i - 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[zigZag(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i - length / 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i + 1]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i - 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[zigZag(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i - length / 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i + 1]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i - 2]): success [77ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[zigZag(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i - length / 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i + 1]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i - 2]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[zigZag(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [6ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [66ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.maskAndInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Int512VectorTests.maskAndInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskAndNotInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Int512VectorTests.maskAndNotInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[i % 2]): success [504ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[true]): success [333ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[false]): success [331ms]
test Int512VectorTests.maskEqInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int512VectorTests.maskEqInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskEqualsInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int512VectorTests.maskEqualsInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[i % 2]): success [73ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[true]): success [94ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[false]): success [62ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(-1): success [59ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[true]): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[false]): success [0ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[i % 2]): success [113ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[true]): success [94ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[false]): success [81ms]
test Int512VectorTests.maskOrInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Int512VectorTests.maskOrInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[i % 2]): success [70ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[true]): success [94ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[false]): success [62ms]
test Int512VectorTests.maskXorInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int512VectorTests.maskXorInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [39ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.negInt512VectorTests(int[-i * 5]): success [8ms]
test Int512VectorTests.negInt512VectorTests(int[i * 5]): success [7ms]
test Int512VectorTests.negInt512VectorTests(int[i + 1]): success [2ms]
test Int512VectorTests.negInt512VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.notInt512VectorTests(int[-i * 5]): success [50ms]
test Int512VectorTests.notInt512VectorTests(int[i * 5]): success [55ms]
test Int512VectorTests.notInt512VectorTests(int[i + 1]): success [44ms]
test Int512VectorTests.notInt512VectorTests(int[cornerCaseValue(i)]): success [44ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.shuffleEqualsInt512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [9ms]
test Int512VectorTests.shuffleEqualsInt512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [6ms]
test Int512VectorTests.shuffleMiscellaneousInt512VectorTestsSmokeTest(shuffle[random]): success [1ms]
test Int512VectorTests.shuffleTest(): success [584ms]
test Int512VectorTests.shuffleToStringInt512VectorTestsSmokeTest(shuffle[random]): success [33ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i * 5]): success [539ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i + 1]): success [767ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [353ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [392ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [516ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [380ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [385ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1048ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [380ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [398ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [380ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [381ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[-i * 5]): success [324ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[i * 5]): success [534ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[i + 1]): success [313ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[cornerCaseValue(i)]): success [349ms]
test Int512VectorTests.smokeTest1(): success [0ms]
test Int512VectorTests.smokeTest2(): success [71ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [3ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [6ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i * 5]): success [349ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i + 1]): success [736ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [369ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [683ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [1453ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [671ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [681ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2011ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [671ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [666ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [667ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [872ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[-i * 5]): success [324ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[i * 5]): success [541ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[i + 1]): success [321ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[cornerCaseValue(i)]): success [333ms]
test Int512VectorTests.viewAsFloatingLanesTest(): success [401ms]
test Int512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[i * 5]): success [10ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[i + 1]): success [10ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [10ms]

===============================================
jdk/incubator/vector/Int512VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Int512VectorTests.d/testng.0.jta jdk/incubator/vector/Int512VectorTests.java false Int512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Long128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.792 seconds
messages:
command: build Long128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:56:51 IST 2025
Test directory:
  compile: Long128VectorTests
finished: Wed Apr 16 20:56:52 IST 2025
elapsed time (seconds): 0.792

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.792 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:56:51 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 1
Process id: 1598604
finished: Wed Apr 16 20:56:52 IST 2025
elapsed time (seconds): 0.792
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
TIME:   244.661 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
started: Wed Apr 16 20:56:52 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1602567
finished: Wed Apr 16 21:00:56 IST 2025
elapsed time (seconds): 244.661
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 4513506274633595722
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=4513506274633595722" to command line.
test Long128VectorTests.ABSLong128VectorTests(long[-i * 5]): success [550ms]
test Long128VectorTests.ABSLong128VectorTests(long[i * 5]): success [53ms]
test Long128VectorTests.ABSLong128VectorTests(long[i + 1]): success [7ms]
test Long128VectorTests.ABSLong128VectorTests(long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[i % 2]): success [217ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[i % 2]): success [111ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[true]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[false]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i * 5]): success [201ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i + 1]): success [88ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [120ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [64ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [10ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[-i * 5]): success [126ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i + 1]): success [88ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [106ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [40ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [13ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [10ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i * 5]): success [149ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i + 1]): success [60ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [7ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [64ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[-i * 5]): success [131ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i + 1]): success [81ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [67ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [80ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [27ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [12ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i * 5]): success [165ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i + 1]): success [72ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [61ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [75ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i * 5]): success [115ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i + 1]): success [71ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [4ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [92ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [76ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [16ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [189ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [57ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[-i * 5]): success [12ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i * 5]): success [56ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i + 1]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [66ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [56ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [20ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [50ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [116ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [87ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [512ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [83ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [66ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [23ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [3ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(l

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseDivByZeroSmokeTest(): success [11ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [38ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [58ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[i % 2]): success [160ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[i % 2]): success [115ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[i % 2]): success [43ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [43ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[true]): success [68ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[false]): success [40ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i * 5]): success [158ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i + 1]): success [205ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [133ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [108ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [5ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [266ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [278ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [145ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [146ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [146ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [147ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [145ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [146ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [146ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i]): success [167ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - 2]): success [68ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [84ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [76ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i]): success [68ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - length / 2]): success [68ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i + 1]): success [68ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - 2]): success [68ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [68ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [68ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [68ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [57ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[i % 2]): success [117ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[i % 2]): success [110ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[i % 2]): success [42ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [42ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[true]): success [23ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[false]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.getLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.getLong128VectorTests(long[i * 5]): success [59ms]
test Long128VectorTests.getLong128VectorTests(long[i + 1]): success [1ms]
test Long128VectorTests.getLong128VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[-i * 5]): success [38ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i * 5]): success [2ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(0): success [72ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-1): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(1): success [18ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(2): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-2): success [3ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(0): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-1): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(1): success [3ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(2): success [5ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-2): success [3ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i]): success [167ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i]): success [68ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - 2]): success [76ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i]): success [68ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i + 1]): success [68ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - 2]): success [68ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [68ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [77ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [8ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [55ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[i % 2]): success [224ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[true]): success [59ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[false]): success [79ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[true]): success [53ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[false]): success [20ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(-1): success [62ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[true]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[false]): success [0ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [61ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[true]): success [52ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[false]): success [33ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [18ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[i % 2]): success [28ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[true]): success [53ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[false]): success [21ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[-i * 5]): success [14ms]
test Long128VectorTests.negLong128VectorTests(long[i * 5]): success [46ms]
test Long128VectorTests.negLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[-i * 5]): success [17ms]
test Long128VectorTests.notLong128VectorTests(long[i * 5]): success [51ms]
test Long128VectorTests.notLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i * 5]): success [7ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [440ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [48ms]
test Long128VectorTests.shuffleMiscellaneousLong128VectorTestsSmokeTest(shuffle[random]): success [23ms]
test Long128VectorTests.shuffleTest(): success [338ms]
test Long128VectorTests.shuffleToStringLong128VectorTestsSmokeTest(shuffle[random]): success [69ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [609ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [263ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [174ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [166ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [311ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [87ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [85ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [85ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [85ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [85ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [201ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [85ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[-i * 5]): success [237ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i * 5]): success [224ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i + 1]): success [78ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [78ms]
test Long128VectorTests.smokeTest1(): success [0ms]
test Long128VectorTests.smokeTest2(): success [48ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [39ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [7ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i * 5]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i + 1]): success [12ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[-i * 5]): success [2ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i * 5]): success [6ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i + 1]): success [43ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [245ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [235ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [210ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [575ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [507ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [160ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [168ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [160ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [168ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [160ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [167ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [160ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[-i * 5]): success [228ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i * 5]): success [205ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i + 1]): success [146ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [94ms]
test Long128VectorTests.viewAsFloatingLanesTest(): success [239ms]
test Long128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i * 5]): success [40ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i + 1]): success [115ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [32ms]

===============================================
jdk/incubator/vector/Long128VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Long128VectorTests.d/testng.0.jta jdk/incubator/vector/Long128VectorTests.java false Long128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long256VectorTests.java
Passed: jdk/incubator/vector/Long512VectorTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
Passed: jdk/incubator/vector/Int64VectorTests.java
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
TEST: jdk/incubator/vector/Byte256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   20.183 seconds
messages:
command: build Byte256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:50:18 IST 2025
Test directory:
  compile: Byte256VectorTests
finished: Wed Apr 16 20:50:38 IST 2025
elapsed time (seconds): 20.183

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   20.178 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:50:18 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 6
Process id: 1598825
finished: Wed Apr 16 20:50:38 IST 2025
elapsed time (seconds): 20.178
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests 
TIME:   930.186 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests 
started: Wed Apr 16 20:50:38 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1600268
finished: Wed Apr 16 21:06:08 IST 2025
elapsed time (seconds): 930.186
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 8043941413596494315
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=8043941413596494315" to command line.
test Byte256VectorTests.ABSByte256VectorTests(byte[-i * 5]): success [1049ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[i * 5]): success [15ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[i + 1]): success [101ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[cornerCaseValue(i)]): success [8ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[i % 2]): success [382ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[i % 2]): success [55ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[i % 2]): success [162ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[false]): success [4ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[false]): success [4ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[false]): success [4ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[i * 5]): success [766ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[i + 1]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [116ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [64ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [24ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [4ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [12ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [19ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [188ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [242ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [10ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [156ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [9ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [64ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [20ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[-i * 5]): success [165ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[i * 5]): success [76ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[i + 1]): success [28ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[cornerCaseValue(i)]): success [19ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [112ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [193ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [30ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[false]): success [4ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[-i * 5]): success [9ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[i * 5]): success [11ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[i + 1]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[cornerCaseValue(i)]): success [16ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [9ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [25ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[true]): success [80ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[i * 5]): success [550ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[i + 1]): success [7ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [206ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [30ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [3ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [30ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [5ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [14ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [39ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [156ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [9ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [7ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [7ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [7ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[-i * 5]): success [136ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[i * 5]): success [77ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[i + 1]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[cornerCaseValue(i)]): success [21ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [32ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [122ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [7ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [30ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [7ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[true]): success [18ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[i * 5]): success [809ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[i + 1]): success [146ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [508ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [250ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [150ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [400ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [152ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [150ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [153ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [150ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [149ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [246ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[i * 5]): success [455ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[i + 1]): success [151ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [477ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [389ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [148ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [403ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [247ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [150ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [149ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [150ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [148ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [149ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [533ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [85ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[-i * 5]): success [84ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[i * 5]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[i + 1]): success [73ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [245ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [8ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [111ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [7ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [39ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [16ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [7ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [103ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [66ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [149ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [17ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [296ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [15ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [35ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [335ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [68ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [8ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [45ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [9ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [37ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [70ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [174ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [5ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [47ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): succes

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

orTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [22ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [23ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseDivByZeroSmokeTest(): success [17ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[i % 2]): success [28ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[i % 2]): success [8ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [145ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[false]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [185ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [135ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [267ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [186ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [142ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [135ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [136ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [138ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [135ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[i % 2]): success [1250ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[i % 2]): success [300ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[i % 2]): success [527ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [299ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[true]): success [683ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[false]): success [23ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[false]): success [83ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[false]): success [32ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [22ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[i * 5]): success [573ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[i + 1]): success [396ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [690ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [37ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [286ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [11ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [14ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [5ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [6ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [1089ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [800ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1364ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [800ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): failure [175ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$7(ByteVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.bOpTemplateMF(ByteVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.bOpMF(Byte256Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.bOpMF(Byte256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$6(ByteVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lanewiseTemplate(ByteVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.lanewise(Byte256Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.lanewise(Byte256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.div(ByteVector.java:1729)
	at Byte256VectorTests.divByte256VectorTestsMasked(Byte256VectorTests.java:1796)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [800ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [799ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [799ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [803ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i]): success [443ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i - length / 2]): success [276ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i + 1]): success [267ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i - 2]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[zigZag(i)]): success [268ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[cornerCaseValue(i)]): success [267ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i - length / 2]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i + 1]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i - 2]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [278ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i - length / 2]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i + 1]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i - 2]): success [317ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[zigZag(i)]): success [268ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [280ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i - length / 2]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i + 1]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i - 2]): success [275ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[zigZag(i)]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i + 1]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i - 2]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [277ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [266ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [103ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [12ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[i % 2]): success [1701ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[i % 2]): success [296ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[i % 2]): success [421ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [299ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[true]): success [1341ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[false]): success [23ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[false]): success [58ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[false]): success [22ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [22ms]
test Byte256VectorTests.getByte256VectorTests(byte[-i * 5]): success [34ms]
test Byte256VectorTests.getByte256VectorTests(byte[i * 5]): success [33ms]
test Byte256VectorTests.getByte256VectorTests(byte[i + 1]): success [235ms]
test Byte256VectorTests.getByte256VectorTests(byte[cornerCaseValue(i)]): success [23ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[-i * 5]): success [41ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[i * 5]): success [1ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[i + 1]): success [1ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [17ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(0): success [78ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(-1): success [7ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(1): success [22ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(2): success [6ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(-2): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(0): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(-1): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(1): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(2): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(-2): success [6ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(32): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(37): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1024): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1025): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1029): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(32): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(37): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1024): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1025): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1029): success [0ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i]): success [488ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i - length / 2]): success [269ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i + 1]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i - 2]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[zigZag(i)]): success [262ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[cornerCaseValue(i)]): success [269ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i - length / 2]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i + 1]): success [274ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i - 2]): success [270ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [263ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i - length / 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i + 1]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i - 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[zigZag(i)]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [281ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i]): success [280ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i - length / 2]): success [262ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i + 1]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i - 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[zigZag(i)]): success [262ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i + 1]): success [274ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i - 2]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [277ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i]): success [313ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [265ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [103ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [6ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.maskAndByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Byte256VectorTests.maskAndByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskAndNotByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Byte256VectorTests.maskAndNotByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[i % 2]): success [795ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[true]): success [607ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[false]): success [576ms]
test Byte256VectorTests.maskEqByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Byte256VectorTests.maskEqByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskEqualsByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Byte256VectorTests.maskEqualsByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[i % 2]): success [119ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[true]): success [149ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[false]): success [106ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(-1): success [68ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[true]): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[i % 2]): success [160ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[true]): success [145ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[false]): success [129ms]
test Byte256VectorTests.maskOrByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Byte256VectorTests.maskOrByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[i % 2]): success [117ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[true]): success [145ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[false]): success [106ms]
test Byte256VectorTests.maskXorByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Byte256VectorTests.maskXorByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[i + 1]): success [5ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [6ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.negByte256VectorTests(byte[-i * 5]): success [20ms]
test Byte256VectorTests.negByte256VectorTests(byte[i * 5]): success [5ms]
test Byte256VectorTests.negByte256VectorTests(byte[i + 1]): success [103ms]
test Byte256VectorTests.negByte256VectorTests(byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.notByte256VectorTests(byte[-i * 5]): success [162ms]
test Byte256VectorTests.notByte256VectorTests(byte[i * 5]): success [136ms]
test Byte256VectorTests.notByte256VectorTests(byte[i + 1]): success [266ms]
test Byte256VectorTests.notByte256VectorTests(byte[cornerCaseValue(i)]): success [143ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[i * 5]): success [9ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[i * 5]): success [18ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.shuffleEqualsByte256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [2164ms]
test Byte256VectorTests.shuffleEqualsByte256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [436ms]
test Byte256VectorTests.shuffleMiscellaneousByte256VectorTestsSmokeTest(shuffle[random]): success [89ms]
test Byte256VectorTests.shuffleTest(): success [1031ms]
test Byte256VectorTests.shuffleToStringByte256VectorTestsSmokeTest(shuffle[random]): success [70ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [2228ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [1182ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [3066ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [1594ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1414ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [4266ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1317ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [1350ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1370ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [1394ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [1370ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1358ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[-i * 5]): success [1546ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[i * 5]): success [1071ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[i + 1]): success [1763ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[cornerCaseValue(i)]): success [1627ms]
test Byte256VectorTests.smokeTest1(): success [25ms]
test Byte256VectorTests.smokeTest2(): success [56ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[i + 1]): success [224ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [190ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [433ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [29ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [33ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [3ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [3ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [9ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [7ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[-i * 5]): success [21ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[i * 5]): success [13ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[i + 1]): success [60ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [1627ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [1243ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [2702ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [3829ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [2332ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [5857ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [2340ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [2339ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2438ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [2383ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [2348ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2329ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[-i * 5]): success [1507ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[i * 5]): success [1070ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[i + 1]): success [1769ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[cornerCaseValue(i)]): success [1069ms]
test Byte256VectorTests.viewAsFloatingLanesTest(): success [15ms]
test Byte256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[i * 5]): success [21ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[i + 1]): success [20ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [610ms]

===============================================
jdk/incubator/vector/Byte256VectorTests.java
Total tests run: 3602, Passes: 3600, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Byte256VectorTests.d/testng.0.jta jdk/incubator/vector/Byte256VectorTests.java false Byte256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/Byte512VectorTests.java
Passed: jdk/incubator/vector/Long64VectorTests.java
TEST: jdk/incubator/vector/Short128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.037 seconds
messages:
command: build Short128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:59:58 IST 2025
Test directory:
  compile: Short128VectorTests
finished: Wed Apr 16 20:59:59 IST 2025
elapsed time (seconds): 1.037

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.036 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:59:58 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 11
Process id: 1599275
finished: Wed Apr 16 20:59:59 IST 2025
elapsed time (seconds): 1.036
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short128VectorTests 
TIME:   496.744 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short128VectorTests 
started: Wed Apr 16 20:59:59 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1603453
finished: Wed Apr 16 21:08:16 IST 2025
elapsed time (seconds): 496.744
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 4604731410882180173
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=4604731410882180173" to command line.
test Short128VectorTests.ABSMaskedShort128VectorTests(short[-i * 5], mask[i % 2]): success [658ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i * 5], mask[i % 2]): success [76ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i + 1], mask[i % 2]): success [11ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[-i * 5], mask[true]): success [29ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i * 5], mask[true]): success [56ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[-i * 5], mask[false]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ABSShort128VectorTests(short[-i * 5]): success [107ms]
test Short128VectorTests.ABSShort128VectorTests(short[i * 5]): success [55ms]
test Short128VectorTests.ABSShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.ABSShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[-i * 5]): success [96ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[i * 5]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[i + 1]): success [3ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[cornerCaseValue(i)]): success [11ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [13ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[-i * 5], mask[true]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [13ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [65ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[-i * 5]): success [154ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[i * 5]): success [2ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[i + 1]): success [66ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[cornerCaseValue(i)]): success [8ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [86ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [92ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[-i * 5], mask[true]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i + 1], mask[true]): success [4ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [81ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short128VectorTests.ADDShort128VectorTests(short[-i * 5], short[i * 5]): success [211ms]
test Short128VectorTests.ADDShort128VectorTests(short[-i * 5], short[i + 1]): success [63ms]
test Short128VectorTests.ADDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [16ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [24ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [16ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [12ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [36ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [100ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [80ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[-i * 5]): success [160ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[i * 5]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[i + 1]): success [93ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[cornerCaseValue(i)]): success [9ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [75ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [39ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[-i * 5], mask[true]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ANDShort128VectorTests(short[-i * 5], short[i * 5]): success [195ms]
test Short128VectorTests.ANDShort128VectorTests(short[-i * 5], short[i + 1]): success [59ms]
test Short128VectorTests.ANDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [20ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [8ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [66ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [40ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTests(short[-i * 5], short[i * 5]): success [176ms]
test Short128VectorTests.AND_NOTShort128VectorTests(short[-i * 5], short[i + 1]): success [78ms]
test Short128VectorTests.AND_NOTShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [83ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [76ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTests(short[-i * 5], short[i * 5]): success [154ms]
test Short128VectorTests.ASHRShort128VectorTests(short[-i * 5], short[i + 1]): success [70ms]
test Short128VectorTests.ASHRShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [104ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [73ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [200ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [63ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[-i * 5]): success [42ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[i * 5]): success [62ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[i + 1]): success [0ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [105ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [56ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [11ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [49ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [5ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [77ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [112ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [91ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [384ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [4ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [108ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [78ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [6ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [44ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [60ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [22ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcas

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

28VectorTests(short[-i * 5], short[i * 5]): success [13ms]
test Short128VectorTests.XORShort128VectorTests(short[-i * 5], short[i + 1]): success [79ms]
test Short128VectorTests.XORShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [12ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [63ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[-i * 5], mask[i % 2]): success [363ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i * 5], mask[i % 2]): success [458ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i + 1], mask[i % 2]): success [338ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [306ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[-i * 5], mask[true]): success [304ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i * 5], mask[true]): success [304ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i + 1], mask[true]): success [306ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [305ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[-i * 5], mask[false]): success [305ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i * 5], mask[false]): success [304ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i + 1], mask[false]): success [304ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [304ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[-i * 5]): success [233ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[i * 5]): success [233ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[i + 1]): success [152ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[cornerCaseValue(i)]): success [152ms]
test Short128VectorTests.ZeroShort128VectorTests(short[-i * 5]): success [121ms]
test Short128VectorTests.ZeroShort128VectorTests(short[i * 5]): success [33ms]
test Short128VectorTests.ZeroShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.ZeroShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.absShort128VectorTests(short[-i * 5]): success [19ms]
test Short128VectorTests.absShort128VectorTests(short[i * 5]): success [65ms]
test Short128VectorTests.absShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.absShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.addShort128VectorTests(short[-i * 5], short[i * 5]): success [35ms]
test Short128VectorTests.addShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.addShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [73ms]
test Short128VectorTests.addShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [30ms]
test Short128VectorTests.addShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.allTrueShort128VectorTests(boolean[i % 2]): success [22ms]
test Short128VectorTests.allTrueShort128VectorTests(boolean[i % 5]): success [22ms]
test Short128VectorTests.andShort128VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.andShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.andShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.andShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.andShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.andShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.anyTrueShort128VectorTests(boolean[i % 2]): success [11ms]
test Short128VectorTests.anyTrueShort128VectorTests(boolean[i % 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [51ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [71ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [69ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [71ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseDivByZeroSmokeTest(): success [12ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [30ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [57ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [41ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [60ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.compressShort128VectorTests(short[-i * 5], mask[i % 2]): success [257ms]
test Short128VectorTests.compressShort128VectorTests(short[i * 5], mask[i % 2]): success [223ms]
test Short128VectorTests.compressShort128VectorTests(short[i + 1], mask[i % 2]): success [171ms]
test Short128VectorTests.compressShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [138ms]
test Short128VectorTests.compressShort128VectorTests(short[-i * 5], mask[true]): success [91ms]
test Short128VectorTests.compressShort128VectorTests(short[i * 5], mask[true]): success [6ms]
test Short128VectorTests.compressShort128VectorTests(short[i + 1], mask[true]): success [5ms]
test Short128VectorTests.compressShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short128VectorTests.compressShort128VectorTests(short[-i * 5], mask[false]): success [9ms]
test Short128VectorTests.compressShort128VectorTests(short[i * 5], mask[false]): success [10ms]
test Short128VectorTests.compressShort128VectorTests(short[i + 1], mask[false]): success [10ms]
test Short128VectorTests.compressShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [10ms]
test Short128VectorTests.divShort128VectorTests(short[-i * 5], short[i * 5]): success [241ms]
test Short128VectorTests.divShort128VectorTests(short[-i * 5], short[i + 1]): success [281ms]
test Short128VectorTests.divShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [161ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [109ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [25ms]
test Short128VectorTests.divShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short128VectorTests.divShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [433ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [442ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [315ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [315ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [316ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): failure [45ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lambda$binaryOperationsMF$7(ShortVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.bOpTemplateMF(ShortVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Short128Vector.bOpMF(Short128Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Short128Vector.bOpMF(Short128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lambda$binaryOperationsMF$6(ShortVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lanewiseTemplate(ShortVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Short128Vector.lanewise(Short128Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Short128Vector.lanewise(Short128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.div(ShortVector.java:1729)
	at Short128VectorTests.divShort128VectorTestsMasked(Short128VectorTests.java:1787)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [315ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [316ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [315ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i]): success [219ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i - length / 2]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i + 1]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i - 2]): success [162ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[zigZag(i)]): success [190ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[cornerCaseValue(i)]): success [155ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i]): success [155ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i - length / 2]): success [155ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i + 1]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i - 2]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[zigZag(i)]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i - length / 2]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i + 1]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i - 2]): success [155ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[zigZag(i)]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i - length / 2]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i + 1]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i - 2]): success [169ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[zigZag(i)]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [155ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i - length / 2]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i + 1]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i - 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[zigZag(i)]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [188ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [155ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [61ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [9ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.expandShort128VectorTests(short[-i * 5], mask[i % 2]): success [227ms]
test Short128VectorTests.expandShort128VectorTests(short[i * 5], mask[i % 2]): success [206ms]
test Short128VectorTests.expandShort128VectorTests(short[i + 1], mask[i % 2]): success [138ms]
test Short128VectorTests.expandShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [138ms]
test Short128VectorTests.expandShort128VectorTests(short[-i * 5], mask[true]): success [35ms]
test Short128VectorTests.expandShort128VectorTests(short[i * 5], mask[true]): success [6ms]
test Short128VectorTests.expandShort128VectorTests(short[i + 1], mask[true]): success [6ms]
test Short128VectorTests.expandShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short128VectorTests.expandShort128VectorTests(short[-i * 5], mask[false]): success [10ms]
test Short128VectorTests.expandShort128VectorTests(short[i * 5], mask[false]): success [10ms]
test Short128VectorTests.expandShort128VectorTests(short[i + 1], mask[false]): success [10ms]
test Short128VectorTests.expandShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [10ms]
test Short128VectorTests.getShort128VectorTests(short[-i * 5]): success [8ms]
test Short128VectorTests.getShort128VectorTests(short[i * 5]): success [100ms]
test Short128VectorTests.getShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.getShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[-i * 5]): success [42ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[i + 1]): success [5ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [9ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(0): success [73ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(-1): success [5ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(1): success [21ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(2): success [4ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(-2): success [5ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(0): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(-1): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(1): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(2): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(-2): success [4ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(0): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(32): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(37): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1024): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1025): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1029): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(0): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(32): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(37): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1024): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1025): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1029): success [0ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i]): success [219ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i - length / 2]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i + 1]): success [162ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i - 2]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[zigZag(i)]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i - length / 2]): success [155ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i + 1]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i - 2]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[zigZag(i)]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i]): success [155ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i - length / 2]): success [155ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i + 1]): success [155ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i - 2]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[zigZag(i)]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i]): success [160ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i - length / 2]): success [169ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i + 1]): success [189ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i - 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[zigZag(i)]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i - length / 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i + 1]): success [189ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i - 2]): success [155ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[zigZag(i)]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i]): success [208ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [62ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.maskAndNotShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Short128VectorTests.maskAndNotShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskAndShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short128VectorTests.maskAndShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskCompressShort128VectorTestsSmokeTest(mask[i % 2]): success [308ms]
test Short128VectorTests.maskCompressShort128VectorTestsSmokeTest(mask[true]): success [155ms]
test Short128VectorTests.maskCompressShort128VectorTestsSmokeTest(mask[false]): success [124ms]
test Short128VectorTests.maskEqShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short128VectorTests.maskEqShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskEqualsShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short128VectorTests.maskEqualsShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskFirstTrueShort128VectorTestsSmokeTest(mask[i % 2]): success [49ms]
test Short128VectorTests.maskFirstTrueShort128VectorTestsSmokeTest(mask[true]): success [70ms]
test Short128VectorTests.maskFirstTrueShort128VectorTestsSmokeTest(mask[false]): success [38ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(-1): success [66ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(0): success [0ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short128VectorTests.maskHashCodeShort128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Short128VectorTests.maskHashCodeShort128VectorTestsSmokeTest(mask[true]): success [4ms]
test Short128VectorTests.maskHashCodeShort128VectorTestsSmokeTest(mask[false]): success [0ms]
test Short128VectorTests.maskLastTrueShort128VectorTestsSmokeTest(mask[i % 2]): success [90ms]
test Short128VectorTests.maskLastTrueShort128VectorTestsSmokeTest(mask[true]): success [70ms]
test Short128VectorTests.maskLastTrueShort128VectorTestsSmokeTest(mask[false]): success [55ms]
test Short128VectorTests.maskOrShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Short128VectorTests.maskOrShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskTrueCountShort128VectorTestsSmokeTest(mask[i % 2]): success [46ms]
test Short128VectorTests.maskTrueCountShort128VectorTestsSmokeTest(mask[true]): success [69ms]
test Short128VectorTests.maskTrueCountShort128VectorTestsSmokeTest(mask[false]): success [38ms]
test Short128VectorTests.maskXorShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short128VectorTests.maskXorShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maxShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.maxShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.maxShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.maxShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.maxShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.maxShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.minShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.minShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.minShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.minShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.minShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.minShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.mulShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.mulShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.mulShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.negShort128VectorTests(short[-i * 5]): success [41ms]
test Short128VectorTests.negShort128VectorTests(short[i * 5]): success [66ms]
test Short128VectorTests.negShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.negShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.notShort128VectorTests(short[-i * 5]): success [19ms]
test Short128VectorTests.notShort128VectorTests(short[i * 5]): success [71ms]
test Short128VectorTests.notShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.notShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.orShort128VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short128VectorTests.orShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.orShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.orShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.orShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.orShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.shuffleEqualsShort128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [523ms]
test Short128VectorTests.shuffleEqualsShort128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [127ms]
test Short128VectorTests.shuffleMiscellaneousShort128VectorTestsSmokeTest(shuffle[random]): success [194ms]
test Short128VectorTests.shuffleTest(): success [444ms]
test Short128VectorTests.shuffleToStringShort128VectorTestsSmokeTest(shuffle[random]): success [75ms]
test Short128VectorTests.sliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i * 5]): success [649ms]
test Short128VectorTests.sliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i + 1]): success [319ms]
test Short128VectorTests.sliceBinaryShort128VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [162ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [244ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [366ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [197ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [162ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [162ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [163ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [161ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [178ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [161ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[-i * 5]): success [299ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[i * 5]): success [288ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[i + 1]): success [157ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[cornerCaseValue(i)]): success [173ms]
test Short128VectorTests.smokeTest1(): success [0ms]
test Short128VectorTests.smokeTest2(): success [80ms]
test Short128VectorTests.subShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.subShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.subShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.subShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[-i * 5]): success [2ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[i + 1]): success [7ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[i + 1]): success [18ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[-i * 5]): success [2ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[i * 5]): success [13ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[i + 1]): success [48ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.unsliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i * 5]): success [318ms]
test Short128VectorTests.unsliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i + 1]): success [315ms]
test Short128VectorTests.unsliceBinaryShort128VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [289ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [694ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [637ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [319ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [318ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [423ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [406ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [319ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [325ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [316ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[-i * 5]): success [292ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[i * 5]): success [288ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[i + 1]): success [157ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.viewAsFloatingLanesTest(): success [24ms]
test Short128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short128VectorTests.withShort128VectorTests(short[-i * 5], short[i * 5]): success [47ms]
test Short128VectorTests.withShort128VectorTests(short[-i * 5], short[i + 1]): success [137ms]
test Short128VectorTests.withShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [32ms]

===============================================
jdk/incubator/vector/Short128VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Short128VectorTests.d/testng.0.jta jdk/incubator/vector/Short128VectorTests.java false Short128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Short256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.808 seconds
messages:
command: build Short256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 21:00:03 IST 2025
Test directory:
  compile: Short256VectorTests
finished: Wed Apr 16 21:00:04 IST 2025
elapsed time (seconds): 0.808

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.806 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:00:03 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 5
Process id: 1598755
finished: Wed Apr 16 21:00:04 IST 2025
elapsed time (seconds): 0.806
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short256VectorTests 
TIME:   503.513 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short256VectorTests 
started: Wed Apr 16 21:00:04 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1603572
finished: Wed Apr 16 21:08:27 IST 2025
elapsed time (seconds): 503.513
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -8285782613882858438
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-8285782613882858438" to command line.
test Short256VectorTests.ABSMaskedShort256VectorTests(short[-i * 5], mask[i % 2]): success [686ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i * 5], mask[i % 2]): success [9ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i + 1], mask[i % 2]): success [96ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[-i * 5], mask[true]): success [132ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i * 5], mask[true]): success [20ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i + 1], mask[true]): success [3ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i * 5], mask[false]): success [2ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i + 1], mask[false]): success [2ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short256VectorTests.ABSShort256VectorTests(short[-i * 5]): success [147ms]
test Short256VectorTests.ABSShort256VectorTests(short[i * 5]): success [11ms]
test Short256VectorTests.ABSShort256VectorTests(short[i + 1]): success [52ms]
test Short256VectorTests.ABSShort256VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[-i * 5]): success [67ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[i * 5]): success [21ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[i + 1]): success [2ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [12ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[-i * 5], mask[true]): success [14ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[-i * 5], mask[false]): success [12ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[-i * 5]): success [145ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[i * 5]): success [89ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[i + 1]): success [3ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [50ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [88ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [32ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[-i * 5], mask[true]): success [17ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i + 1], mask[true]): success [5ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[-i * 5], mask[false]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i * 5], mask[false]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [15ms]
test Short256VectorTests.ADDShort256VectorTests(short[-i * 5], short[i * 5]): success [349ms]
test Short256VectorTests.ADDShort256VectorTests(short[-i * 5], short[i + 1]): success [5ms]
test Short256VectorTests.ADDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [81ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [15ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [23ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [7ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [72ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [139ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [87ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[-i * 5]): success [107ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[i * 5]): success [66ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[i + 1]): success [23ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [22ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [85ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[-i * 5], mask[true]): success [41ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[-i * 5], mask[false]): success [4ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i * 5], mask[false]): success [4ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.ANDShort256VectorTests(short[-i * 5], short[i * 5]): success [349ms]
test Short256VectorTests.ANDShort256VectorTests(short[-i * 5], short[i + 1]): success [7ms]
test Short256VectorTests.ANDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [83ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [17ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [10ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [7ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [89ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [41ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [5ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [26ms]
test Short256VectorTests.AND_NOTShort256VectorTests(short[-i * 5], short[i * 5]): success [465ms]
test Short256VectorTests.AND_NOTShort256VectorTests(short[-i * 5], short[i + 1]): success [92ms]
test Short256VectorTests.AND_NOTShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [243ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [168ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [93ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [221ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [93ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [93ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [94ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [92ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [92ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [142ms]
test Short256VectorTests.ASHRShort256VectorTests(short[-i * 5], short[i * 5]): success [271ms]
test Short256VectorTests.ASHRShort256VectorTests(short[-i * 5], short[i + 1]): success [92ms]
test Short256VectorTests.ASHRShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [241ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [244ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [93ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [218ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [93ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [93ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [96ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [96ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [96ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [96ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [291ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [6ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [99ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[-i * 5]): success [56ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[i * 5]): success [6ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[i + 1]): success [60ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [138ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [6ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [70ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [13ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [61ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [8ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [97ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [13ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [174ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [11ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [12ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [11ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [409ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [103ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [2ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [7ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [45ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [2ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [90ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

seValue(i)], mask[false]): success [4ms]
test Short256VectorTests.XORShort256VectorTests(short[-i * 5], short[i * 5]): success [20ms]
test Short256VectorTests.XORShort256VectorTests(short[-i * 5], short[i + 1]): success [9ms]
test Short256VectorTests.XORShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [109ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [13ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [87ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[-i * 5], mask[i % 2]): success [500ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i * 5], mask[i % 2]): success [455ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i + 1], mask[i % 2]): success [556ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [456ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[-i * 5], mask[true]): success [457ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i * 5], mask[true]): success [457ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i + 1], mask[true]): success [457ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [456ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[-i * 5], mask[false]): success [457ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i * 5], mask[false]): success [456ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i + 1], mask[false]): success [457ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [456ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[-i * 5]): success [392ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[i * 5]): success [302ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[i + 1]): success [424ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[cornerCaseValue(i)]): success [304ms]
test Short256VectorTests.ZeroShort256VectorTests(short[-i * 5]): success [93ms]
test Short256VectorTests.ZeroShort256VectorTests(short[i * 5]): success [77ms]
test Short256VectorTests.ZeroShort256VectorTests(short[i + 1]): success [104ms]
test Short256VectorTests.ZeroShort256VectorTests(short[cornerCaseValue(i)]): success [78ms]
test Short256VectorTests.absShort256VectorTests(short[-i * 5]): success [22ms]
test Short256VectorTests.absShort256VectorTests(short[i * 5]): success [4ms]
test Short256VectorTests.absShort256VectorTests(short[i + 1]): success [74ms]
test Short256VectorTests.absShort256VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.addShort256VectorTests(short[-i * 5], short[i * 5]): success [67ms]
test Short256VectorTests.addShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.addShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [102ms]
test Short256VectorTests.addShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [31ms]
test Short256VectorTests.addShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.allTrueShort256VectorTests(boolean[i % 2]): success [22ms]
test Short256VectorTests.allTrueShort256VectorTests(boolean[i % 5]): success [22ms]
test Short256VectorTests.andShort256VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short256VectorTests.andShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.andShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.andShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.andShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.andShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.anyTrueShort256VectorTests(boolean[i % 2]): success [12ms]
test Short256VectorTests.anyTrueShort256VectorTests(boolean[i % 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [51ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [72ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [71ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [73ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseDivByZeroSmokeTest(): success [14ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [31ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [81ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [127ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [85ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [160ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [85ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [85ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [85ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [87ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [85ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [85ms]
test Short256VectorTests.compressShort256VectorTests(short[-i * 5], mask[i % 2]): success [371ms]
test Short256VectorTests.compressShort256VectorTests(short[i * 5], mask[i % 2]): success [156ms]
test Short256VectorTests.compressShort256VectorTests(short[i + 1], mask[i % 2]): success [226ms]
test Short256VectorTests.compressShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [143ms]
test Short256VectorTests.compressShort256VectorTests(short[-i * 5], mask[true]): success [160ms]
test Short256VectorTests.compressShort256VectorTests(short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.compressShort256VectorTests(short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.compressShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.compressShort256VectorTests(short[-i * 5], mask[false]): success [9ms]
test Short256VectorTests.compressShort256VectorTests(short[i * 5], mask[false]): success [9ms]
test Short256VectorTests.compressShort256VectorTests(short[i + 1], mask[false]): success [9ms]
test Short256VectorTests.compressShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [9ms]
test Short256VectorTests.divShort256VectorTests(short[-i * 5], short[i * 5]): success [346ms]
test Short256VectorTests.divShort256VectorTests(short[-i * 5], short[i + 1]): success [243ms]
test Short256VectorTests.divShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [416ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [17ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [138ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [5ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [21ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short256VectorTests.divShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [12ms]
test Short256VectorTests.divShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [3ms]
test Short256VectorTests.divShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [3ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [618ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [480ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [688ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [480ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [480ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): failure [419ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lambda$binaryOperationsMF$7(ShortVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.bOpTemplateMF(ShortVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Short256Vector.bOpMF(Short256Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Short256Vector.bOpMF(Short256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lambda$binaryOperationsMF$6(ShortVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lanewiseTemplate(ShortVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Short256Vector.lanewise(Short256Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Short256Vector.lanewise(Short256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.div(ShortVector.java:1729)
	at Short256VectorTests.divShort256VectorTestsMasked(Short256VectorTests.java:1787)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [479ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [479ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [479ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i]): success [250ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i - length / 2]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i + 1]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i - 2]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[zigZag(i)]): success [139ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[cornerCaseValue(i)]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i]): success [139ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i - length / 2]): success [151ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i + 1]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i - 2]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[zigZag(i)]): success [147ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i - length / 2]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i + 1]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i - 2]): success [151ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[zigZag(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i - length / 2]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i + 1]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i - 2]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[zigZag(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i - length / 2]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i + 1]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i - 2]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[zigZag(i)]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [136ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [68ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [10ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.expandShort256VectorTests(short[-i * 5], mask[i % 2]): success [360ms]
test Short256VectorTests.expandShort256VectorTests(short[i * 5], mask[i % 2]): success [143ms]
test Short256VectorTests.expandShort256VectorTests(short[i + 1], mask[i % 2]): success [219ms]
test Short256VectorTests.expandShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [142ms]
test Short256VectorTests.expandShort256VectorTests(short[-i * 5], mask[true]): success [149ms]
test Short256VectorTests.expandShort256VectorTests(short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.expandShort256VectorTests(short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.expandShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.expandShort256VectorTests(short[-i * 5], mask[false]): success [9ms]
test Short256VectorTests.expandShort256VectorTests(short[i * 5], mask[false]): success [9ms]
test Short256VectorTests.expandShort256VectorTests(short[i + 1], mask[false]): success [9ms]
test Short256VectorTests.expandShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [9ms]
test Short256VectorTests.getShort256VectorTests(short[-i * 5]): success [15ms]
test Short256VectorTests.getShort256VectorTests(short[i * 5]): success [14ms]
test Short256VectorTests.getShort256VectorTests(short[i + 1]): success [121ms]
test Short256VectorTests.getShort256VectorTests(short[cornerCaseValue(i)]): success [9ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[-i * 5]): success [42ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[i * 5]): success [1ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[i + 1]): success [1ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(0): success [71ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(-1): success [4ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(1): success [20ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(2): success [3ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(-2): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(0): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(-1): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(1): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(2): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(-2): success [3ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(0): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(32): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(37): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1024): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1025): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1029): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(0): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(32): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(37): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1024): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1025): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1029): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i]): success [244ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i - length / 2]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i + 1]): success [150ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i - 2]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[zigZag(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i - length / 2]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i + 1]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i - 2]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[zigZag(i)]): success [145ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i - length / 2]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i + 1]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i - 2]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[zigZag(i)]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i]): success [140ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i - length / 2]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i + 1]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i - 2]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[zigZag(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i - length / 2]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i + 1]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i - 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[zigZag(i)]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i]): success [182ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [142ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [136ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i]): success [3ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [68ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [4ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.maskAndNotShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Short256VectorTests.maskAndNotShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskAndShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short256VectorTests.maskAndShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskCompressShort256VectorTestsSmokeTest(mask[i % 2]): success [511ms]
test Short256VectorTests.maskCompressShort256VectorTestsSmokeTest(mask[true]): success [350ms]
test Short256VectorTests.maskCompressShort256VectorTestsSmokeTest(mask[false]): success [330ms]
test Short256VectorTests.maskEqShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Short256VectorTests.maskEqShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskEqualsShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short256VectorTests.maskEqualsShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskFirstTrueShort256VectorTestsSmokeTest(mask[i % 2]): success [71ms]
test Short256VectorTests.maskFirstTrueShort256VectorTestsSmokeTest(mask[true]): success [93ms]
test Short256VectorTests.maskFirstTrueShort256VectorTestsSmokeTest(mask[false]): success [60ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(-1): success [66ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(0): success [0ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short256VectorTests.maskHashCodeShort256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Short256VectorTests.maskHashCodeShort256VectorTestsSmokeTest(mask[true]): success [4ms]
test Short256VectorTests.maskHashCodeShort256VectorTestsSmokeTest(mask[false]): success [0ms]
test Short256VectorTests.maskLastTrueShort256VectorTestsSmokeTest(mask[i % 2]): success [115ms]
test Short256VectorTests.maskLastTrueShort256VectorTestsSmokeTest(mask[true]): success [92ms]
test Short256VectorTests.maskLastTrueShort256VectorTestsSmokeTest(mask[false]): success [80ms]
test Short256VectorTests.maskOrShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [22ms]
test Short256VectorTests.maskOrShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskTrueCountShort256VectorTestsSmokeTest(mask[i % 2]): success [70ms]
test Short256VectorTests.maskTrueCountShort256VectorTestsSmokeTest(mask[true]): success [93ms]
test Short256VectorTests.maskTrueCountShort256VectorTestsSmokeTest(mask[false]): success [61ms]
test Short256VectorTests.maskXorShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short256VectorTests.maskXorShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maxShort256VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.maxShort256VectorTests(short[-i * 5], short[i + 1]): success [5ms]
test Short256VectorTests.maxShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.maxShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.maxShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.maxShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.minShort256VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.minShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.minShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.minShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.minShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.minShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.mulShort256VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.mulShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.mulShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.negShort256VectorTests(short[-i * 5]): success [16ms]
test Short256VectorTests.negShort256VectorTests(short[i * 5]): success [23ms]
test Short256VectorTests.negShort256VectorTests(short[i + 1]): success [75ms]
test Short256VectorTests.negShort256VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.notShort256VectorTests(short[-i * 5]): success [107ms]
test Short256VectorTests.notShort256VectorTests(short[i * 5]): success [88ms]
test Short256VectorTests.notShort256VectorTests(short[i + 1]): success [176ms]
test Short256VectorTests.notShort256VectorTests(short[cornerCaseValue(i)]): success [87ms]
test Short256VectorTests.orShort256VectorTests(short[-i * 5], short[i * 5]): success [9ms]
test Short256VectorTests.orShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.orShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.orShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.orShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.orShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.shuffleEqualsShort256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [487ms]
test Short256VectorTests.shuffleEqualsShort256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [121ms]
test Short256VectorTests.shuffleMiscellaneousShort256VectorTestsSmokeTest(shuffle[random]): success [203ms]
test Short256VectorTests.shuffleTest(): success [637ms]
test Short256VectorTests.shuffleToStringShort256VectorTestsSmokeTest(shuffle[random]): success [62ms]
test Short256VectorTests.sliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i * 5]): success [1316ms]
test Short256VectorTests.sliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i + 1]): success [667ms]
test Short256VectorTests.sliceBinaryShort256VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [1140ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [915ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [780ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1529ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [850ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [845ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [802ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [771ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [764ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [781ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[-i * 5]): success [894ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[i * 5]): success [634ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[i + 1]): success [927ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[cornerCaseValue(i)]): success [646ms]
test Short256VectorTests.smokeTest1(): success [0ms]
test Short256VectorTests.smokeTest2(): success [90ms]
test Short256VectorTests.subShort256VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.subShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.subShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.subShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[-i * 5]): success [1ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [8ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[i + 1]): success [2ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [16ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[-i * 5]): success [8ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[i * 5]): success [14ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[i + 1]): success [13ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [37ms]
test Short256VectorTests.unsliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i * 5]): success [950ms]
test Short256VectorTests.unsliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i + 1]): success [742ms]
test Short256VectorTests.unsliceBinaryShort256VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [1173ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [2166ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [1339ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2538ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [1355ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [1393ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1336ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1326ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1338ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1426ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[-i * 5]): success [874ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[i * 5]): success [632ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[i + 1]): success [927ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[cornerCaseValue(i)]): success [636ms]
test Short256VectorTests.viewAsFloatingLanesTest(): success [25ms]
test Short256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short256VectorTests.withShort256VectorTests(short[-i * 5], short[i * 5]): success [20ms]
test Short256VectorTests.withShort256VectorTests(short[-i * 5], short[i + 1]): success [19ms]
test Short256VectorTests.withShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [232ms]

===============================================
jdk/incubator/vector/Short256VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Short256VectorTests.d/testng.0.jta jdk/incubator/vector/Short256VectorTests.java false Short256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Short512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.746 seconds
messages:
command: build Short512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 21:00:38 IST 2025
Test directory:
  compile: Short512VectorTests
finished: Wed Apr 16 21:00:39 IST 2025
elapsed time (seconds): 0.746

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.745 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:00:38 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 4
Process id: 1598689
finished: Wed Apr 16 21:00:39 IST 2025
elapsed time (seconds): 0.745
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Short512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Short512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Short512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests 
TIME:   492.515 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests 
started: Wed Apr 16 21:00:39 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1603690
finished: Wed Apr 16 21:08:52 IST 2025
elapsed time (seconds): 492.515
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 674381690114695153
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=674381690114695153" to command line.
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[i % 2]): success [472ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[i % 2]): success [487ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[i % 2]): success [13ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[true]): success [169ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[true]): success [35ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ABSShort512VectorTests(short[-i * 5]): success [226ms]
test Short512VectorTests.ABSShort512VectorTests(short[i * 5]): success [42ms]
test Short512VectorTests.ABSShort512VectorTests(short[i + 1]): success [5ms]
test Short512VectorTests.ABSShort512VectorTests(short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[-i * 5]): success [70ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[i * 5]): success [2ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[i + 1]): success [21ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [13ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[true]): success [25ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [38ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[-i * 5]): success [229ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[i * 5]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[i + 1]): success [75ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [73ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [119ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [64ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[i * 5]): success [103ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[i + 1]): success [662ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [19ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [24ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [6ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [304ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [100ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [8ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [154ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [16ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[-i * 5]): success [146ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[i * 5]): success [5ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[i + 1]): success [75ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [28ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [118ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [36ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [26ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[i * 5]): success [447ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[i + 1]): success [119ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [7ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [29ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [12ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [187ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[i * 5]): success [435ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[i + 1]): success [351ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [76ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [111ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [140ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [78ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [77ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [341ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [77ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [75ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [75ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [76ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[i * 5]): success [162ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[i + 1]): success [317ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [72ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [232ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [166ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [75ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [328ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [75ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [74ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [127ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [378ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[-i * 5]): success [81ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[i * 5]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[i + 1]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [17ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [61ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [108ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [10ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [99ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [14ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [132ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [290ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [6ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [7ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [321ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [104ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [45ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [70ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLEN

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

 success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[i + 1]): success [4ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [9ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [150ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[i % 2]): success [442ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[i % 2]): success [453ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[i % 2]): success [397ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [389ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[true]): success [626ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[true]): success [389ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[true]): success [394ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [390ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[false]): success [389ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[false]): success [389ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[false]): success [388ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [387ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[-i * 5]): success [328ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[i * 5]): success [320ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[i + 1]): success [265ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[cornerCaseValue(i)]): success [266ms]
test Short512VectorTests.ZeroShort512VectorTests(short[-i * 5]): success [64ms]
test Short512VectorTests.ZeroShort512VectorTests(short[i * 5]): success [79ms]
test Short512VectorTests.ZeroShort512VectorTests(short[i + 1]): success [62ms]
test Short512VectorTests.ZeroShort512VectorTests(short[cornerCaseValue(i)]): success [62ms]
test Short512VectorTests.absShort512VectorTests(short[-i * 5]): success [17ms]
test Short512VectorTests.absShort512VectorTests(short[i * 5]): success [10ms]
test Short512VectorTests.absShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.absShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[i * 5]): success [121ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [163ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [31ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.allTrueShort512VectorTests(boolean[i % 2]): success [21ms]
test Short512VectorTests.allTrueShort512VectorTests(boolean[i % 5]): success [14ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.anyTrueShort512VectorTests(boolean[i % 2]): success [11ms]
test Short512VectorTests.anyTrueShort512VectorTests(boolean[i % 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [53ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [77ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [71ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [71ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [73ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseDivByZeroSmokeTest(): success [12ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [28ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[true]): success [144ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [95ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [90ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [200ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [69ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [67ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[i % 2]): success [1013ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[i % 2]): success [227ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[i % 2]): success [149ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [149ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[true]): success [245ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[true]): success [624ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[false]): success [11ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[false]): success [11ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[false]): success [12ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [11ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[i * 5]): success [234ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[i + 1]): success [345ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [202ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [15ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [275ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [20ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [3ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [424ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): failure [656ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lambda$binaryOperationsMF$7(ShortVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.bOpTemplateMF(ShortVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Short512Vector.bOpMF(Short512Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Short512Vector.bOpMF(Short512Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lambda$binaryOperationsMF$6(ShortVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lanewiseTemplate(ShortVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Short512Vector.lanewise(Short512Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Short512Vector.lanewise(Short512Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.div(ShortVector.java:1729)
	at Short512VectorTests.divShort512VectorTestsMasked(Short512VectorTests.java:1787)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [400ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [411ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [944ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [400ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [399ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [399ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [401ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i]): success [296ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i - length / 2]): success [132ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i + 1]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i - 2]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[zigZag(i)]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[cornerCaseValue(i)]): success [132ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i - length / 2]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i + 1]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i - 2]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[zigZag(i)]): success [134ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [134ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i - length / 2]): success [142ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i + 1]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i - 2]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[zigZag(i)]): success [134ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i - length / 2]): success [132ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i + 1]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i - 2]): success [132ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[zigZag(i)]): success [134ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [132ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i - length / 2]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i + 1]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i - 2]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[zigZag(i)]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [132ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [141ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [147ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [134ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [101ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [10ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[i % 2]): success [1500ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[i % 2]): success [190ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[i % 2]): success [151ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [151ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[true]): success [130ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[true]): success [1342ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[false]): success [11ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[false]): success [11ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[false]): success [11ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [22ms]
test Short512VectorTests.getShort512VectorTests(short[-i * 5]): success [18ms]
test Short512VectorTests.getShort512VectorTests(short[i * 5]): success [17ms]
test Short512VectorTests.getShort512VectorTests(short[i + 1]): success [17ms]
test Short512VectorTests.getShort512VectorTests(short[cornerCaseValue(i)]): success [17ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[-i * 5]): success [38ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(0): success [66ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(-1): success [3ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(1): success [18ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(2): success [3ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(-2): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(0): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(-1): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(1): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(2): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(-2): success [3ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(32): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(37): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1024): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1025): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1029): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(32): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(37): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1024): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1025): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1029): success [0ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i]): success [302ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i - length / 2]): success [134ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i + 1]): success [132ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i - 2]): success [133ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[zigZag(i)]): success [140ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[cornerCaseValue(i)]): success [134ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i]): success [136ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i - length / 2]): success [135ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i + 1]): success [140ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i - 2]): success [134ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[zigZag(i)]): success [136ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [136ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i]): success [137ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i - length / 2]): success [143ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i + 1]): success [132ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i - 2]): success [138ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[zigZag(i)]): success [132ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [132ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i]): success [137ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i - length / 2]): success [136ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i + 1]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i - 2]): success [134ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[zigZag(i)]): success [133ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [138ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i]): success [132ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i - length / 2]): success [134ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i + 1]): success [133ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i - 2]): success [137ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[zigZag(i)]): success [133ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [133ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i]): success [179ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [133ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [145ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [138ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [132ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [146ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [101ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [3ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [3ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [3ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.maskAndNotShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Short512VectorTests.maskAndNotShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskAndShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short512VectorTests.maskAndShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[i % 2]): success [815ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[true]): success [627ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[false]): success [580ms]
test Short512VectorTests.maskEqShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Short512VectorTests.maskEqShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskEqualsShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short512VectorTests.maskEqualsShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[i % 2]): success [116ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[true]): success [144ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[false]): success [106ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(-1): success [60ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[true]): success [4ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[false]): success [0ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[i % 2]): success [165ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[true]): success [144ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[false]): success [129ms]
test Short512VectorTests.maskOrShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test Short512VectorTests.maskOrShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[i % 2]): success [120ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[true]): success [145ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[false]): success [106ms]
test Short512VectorTests.maskXorShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short512VectorTests.maskXorShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.negShort512VectorTests(short[-i * 5]): success [8ms]
test Short512VectorTests.negShort512VectorTests(short[i * 5]): success [11ms]
test Short512VectorTests.negShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.negShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.notShort512VectorTests(short[-i * 5]): success [75ms]
test Short512VectorTests.notShort512VectorTests(short[i * 5]): success [89ms]
test Short512VectorTests.notShort512VectorTests(short[i + 1]): success [68ms]
test Short512VectorTests.notShort512VectorTests(short[cornerCaseValue(i)]): success [68ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.shuffleEqualsShort512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [448ms]
test Short512VectorTests.shuffleEqualsShort512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [78ms]
test Short512VectorTests.shuffleMiscellaneousShort512VectorTestsSmokeTest(shuffle[random]): success [186ms]
test Short512VectorTests.shuffleTest(): success [1005ms]
test Short512VectorTests.shuffleToStringShort512VectorTestsSmokeTest(shuffle[random]): success [66ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i * 5]): success [770ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i + 1]): success [1545ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [617ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [686ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [996ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [682ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [692ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2700ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [697ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [737ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [685ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [695ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[-i * 5]): success [552ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[i * 5]): success [1002ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[i + 1]): success [554ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[cornerCaseValue(i)]): success [546ms]
test Short512VectorTests.smokeTest1(): success [0ms]
test Short512VectorTests.smokeTest2(): success [97ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [3ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [8ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [3ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[i * 5]): success [24ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[i + 1]): success [2ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [16ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[-i * 5]): success [12ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[i * 5]): success [13ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[i + 1]): success [12ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i * 5]): success [560ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i + 1]): success [1176ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [552ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [1178ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [2655ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1143ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [1896ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [4823ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1192ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1192ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1187ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1194ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[-i * 5]): success [549ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[i * 5]): success [1013ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[i + 1]): success [545ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[cornerCaseValue(i)]): success [543ms]
test Short512VectorTests.viewAsFloatingLanesTest(): success [22ms]
test Short512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[i * 5]): success [10ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[i + 1]): success [10ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [10ms]

===============================================
jdk/incubator/vector/Short512VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Short512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Short512VectorTests.d/testng.0.jta jdk/incubator/vector/Short512VectorTests.java false Short512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Short64VectorTests.java
TEST: jdk/incubator/vector/Vector128ConversionTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.811 seconds
messages:
command: build Vector128ConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 21:01:42 IST 2025
Test directory:
  compile: Vector128ConversionTests
finished: Wed Apr 16 21:01:43 IST 2025
elapsed time (seconds): 0.811

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.811 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:01:42 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 1
Process id: 1598604
finished: Wed Apr 16 21:01:43 IST 2025
elapsed time (seconds): 0.811
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Vector128ConversionTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Vector128ConversionTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Vector128ConversionTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Vector128ConversionTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Vector128ConversionTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector128ConversionTests 
TIME:   731.774 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector128ConversionTests
reason: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector128ConversionTests 
started: Wed Apr 16 21:01:43 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1603975
finished: Wed Apr 16 21:13:55 IST 2025
elapsed time (seconds): 731.774
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [843ms]
castShape took 839 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cab41a5): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 4, S_64_BIT], byte(i)): success [1207ms]
castShape took 1208 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c8e097): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 2, S_64_BIT], byte(i)): success [979ms]
castShape took 979 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5261d331): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 1, S_64_BIT], byte(i)): success [390ms]
castShape took 390 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b024c50): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 2, S_64_BIT], byte(i)): success [215ms]
castShape took 215 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3be09a90): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 1, S_64_BIT], byte(i)): success [116ms]
castShape took 116 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@587a291b): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [1481ms]
castShape took 1481 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f553ca0): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 8, S_128_BIT], byte(i)): success [949ms]
castShape took 948 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@199c0767): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 4, S_128_BIT], byte(i)): success [1198ms]
castShape took 1198 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@601ced8f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 2, S_128_BIT], byte(i)): success [947ms]
castShape took 948 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d7ea3c7): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 4, S_128_BIT], byte(i)): success [222ms]
castShape took 218 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b255dd9): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 2, S_128_BIT], byte(i)): success [164ms]
castShape took 165 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fa5e19f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [3595ms]
castShape took 3595 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ff24c93): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 16, S_256_BIT], byte(i)): success [748ms]
castShape took 749 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61cfed27): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 8, S_256_BIT], byte(i)): success [1017ms]
castShape took 1016 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1a8da75b): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 4, S_256_BIT], byte(i)): success [134ms]
castShape took 134 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5876605a): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 8, S_256_BIT], byte(i)): success [146ms]
castShape took 147 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bba105f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 4, S_256_BIT], byte(i)): success [731ms]
castShape took 731 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3aef685d): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [10008ms]
castShape took 10008 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@330b599c): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 32, S_512_BIT], byte(i)): success [2809ms]
castShape took 2809 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ec0d3c5): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 16, S_512_BIT], byte(i)): success [605ms]
castShape took 606 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23ebbe9b): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 8, S_512_BIT], byte(i)): success [117ms]
castShape took 117 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f31904d): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 16, S_512_BIT], byte(i)): success [141ms]
castShape took 141 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@60302e2f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 8, S_512_BIT], byte(i)): success [124ms]
castShape took 124 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@635080ac): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [387ms]
castShape took 387 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21041812): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [130ms]
castShape took 129 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6ec78b92): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [121ms]
castShape took 122 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7514785e): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [118ms]
castShape took 119 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cd890db): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [125ms]
castShape took 125 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d2edfc): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [125ms]
castShape took 125 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25c43ebb): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 8, S_64_BIT], short(i)): success [1660ms]
castShape took 1659 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c8f70a7): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 4, S_64_BIT], short(i)): success [3293ms]
castShape took 3293 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@269d30e): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 2, S_64_BIT], short(i)): success [814ms]
castShape took 815 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24836f52): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 1, S_64_BIT], short(i)): success [52ms]
castShape took 52 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65e87916): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 2, S_64_BIT], short(i)): success [11ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@769c5c70): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 1, S_64_BIT], short(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3702b375): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 16, S_128_BIT], short(i)): success [1924ms]
castShape took 1923 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3837a5b7): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 8, S_128_BIT], short(i)): success [489ms]
castShape took 489 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@606c340d): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 4, S_128_BIT], short(i)): success [23ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@630bd20e): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 2, S_128_BIT], short(i)): success [20ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12ed57a7): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 4, S_128_BIT], short(i)): success [25ms]
castShape took 26 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f2d24f6): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 2, S_128_BIT], short(i)): success [23ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37603231): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 32, S_256_BIT], short(i)): success [2520ms]
castShape took 2521 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc54142): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 16, S_256_BIT], short(i)): success [5529ms]
castShape took 5528 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e567a1): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 8, S_256_BIT], short(i)): success [88ms]
castShape took 88 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19dc3e28): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 4, S_256_BIT], short(i)): success [66ms]
castShape took 66 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3de2e4ff): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 8, S_256_BIT], short(i)): success [84ms]
castShape took 84 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@40d0b25): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 4, S_256_BIT], short(i)): success [77ms]
castShape took 67 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@377723a8): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 64, S_512_BIT], short(i)): success [5874ms]
castShape took 5874 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6516338a): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 32, S_512_BIT], short(i)): success [2770ms]
castShape took 2770 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31ffcfc1): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 16, S_512_BIT], short(i)): success [3620ms]
castShape took 3620 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fac3958): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 8, S_512_BIT], short(i)): success [1127ms]
castShape took 1127 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12aa0499): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 16, S_512_BIT], short(i)): success [2484ms]
castShape took 2484 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@acc04f5): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 8, S_512_BIT], short(i)): success [82ms]
castShape took 82 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15e41f09): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [1124ms]
castShape took 1124 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c73d6bf): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 8, S_Max_BIT], short(i)): success [460ms]
castShape took 460 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86b636b): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 4, S_Max_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cc95e51): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 2, S_Max_BIT], short(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69062f41): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 4, S_Max_BIT], short(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b0797d8): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 2, S_Max_BIT], short(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1fde55c6): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2218ms]
castShape took 2218 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@263b3e17): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 4, S_64_BIT], int(i)): success [848ms]
castShape took 849 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19d63f56): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 2, S_64_BIT], int(i)): success [928ms]
castShape took 929 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44b0a7f2): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 1, S_64_BIT], int(i)): success [202ms]
castShape took 202 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24106675): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 2, S_64_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@236f95aa): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 1, S_64_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5efab149): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 16, S_128_BIT], int(i)): success [554ms]
castShape took 555 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3fd3b325): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 8, S_128_BIT], int(i)): success [1646ms]
castShape took 1646 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f43f08e): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 4, S_128_BIT], int(i)): success [939ms]
castShape took 939 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fe72406): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 2, S_128_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21f61f55): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 4, S_128_BIT], int(i)): success [17ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3325e54b): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 2, S_128_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b339f99): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 32, S_256_BIT], int(i)): success [3526ms]
castShape took 3526 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18cb82df): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 16, S_256_BIT], int(i)): success [3317ms]
castShape took 3317 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@643f070d): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 8, S_256_BIT], int(i)): failure [3881ms]
java.lang.AssertionError:  expected [[I@37078c85] but found [[I@5897749f]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertArrayEquals(Assert.java:201)
	at org.testng.Assert.assertEquals(Assert.java:119)
	at org.testng.Assert.assertEquals(Assert.java:617)
	at AbstractVectorConversionTest.conversion_kernel(AbstractVectorConversionTest.java:456)
	at Vector128ConversionTests.castShape(Vector128ConversionTests.java:85)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
castShape took 3856 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@653e4509): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 4, S_256_BIT], int(i)): success [112ms]
castShape took 113 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47411d55): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 8, S_256_BIT], int(i)): success [2355ms]
castShape took 2355 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49d8e1d8): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 4, S_256_BIT], int(i)): success [106ms]
castShape took 107 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37494aca): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 64, S_512_BIT], int(i)): success [6810ms]
castShape took 6810 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e31c370): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 32, S_512_BIT], int(i)): success [3740ms]
castShape took 3740 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14ce104e): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 16, S_512_BIT], int(i)): success [2258ms]
castShape took 2258 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5594fce7): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 8, S_512_BIT], int(i)): success [3082ms]
castShape took 3083 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69c85301): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 16, S_512_BIT], int(i)): success [2364ms]
castShape took 2365 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@542c4193): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 8, S_512_BIT], int(i)): success [2497ms]
castShape took 2498 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7ca50be7): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [524ms]
castShape took 524 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ace159): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 8, S_Max_BIT], int(i)): success [1013ms]
castShape took 1013 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6371010b): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 4, S_Max_BIT], int(i)): success [224ms]
castShape took 224 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26a91840): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@170549c7): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 4, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@124d2b42): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39a660cb): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 8, S_64_BIT], long(i)): success [826ms]
castShape took 827 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42757dde): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 4, S_64_BIT], long(i)): success [1060ms]
castShape took 1060 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30e20511): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 2, S_64_BIT], long(i)): success [842ms]
castShape took 842 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53ebb446): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 1, S_64_BIT], long(i)): success [1312ms]
castShape took 1312 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd72c2): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 2, S_64_BIT], long(i)): success [21ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@584aa127): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 1, S_64_BIT], long(i)): success [22ms]
castShape took 22 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1a67c173): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 16, S_128_BIT], long(i)): success [1165ms]
castShape took 1166 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79f6ac33): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 8, S_128_BIT], long(i)): success [593ms]
castShape took 593 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75abf337): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 4, S_128_BIT], long(i)): success [1246ms]
castShape took 1247 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e3f967b): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 2, S_128_BIT], long(i)): success [1984ms]
castShape took 1983 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a7adece): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 4, S_128_BIT], long(i)): success [1245ms]
castShape took 1246 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17e2be4e): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 2, S_128_BIT], long(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2074a7f6): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 32, S_256_BIT], long(i)): success [7085ms]
castShape took 7084 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34249824): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 16, S_256_BIT], long(i)): success [4358ms]
castShape took 4357 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@276164a0): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 8, S_256_BIT], long(i)): success [3947ms]
castShape took 3948 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8c06a5d): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 4, S_256_BIT], long(i)): success [4659ms]
castShape took 4659 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fbc1263): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 8, S_256_BIT], long(i)): success [3489ms]
castShape took 3490 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b454dd8): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 4, S_256_BIT], long(i)): success [3075ms]
castShape took 3075 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75f7eb6a): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 64, S_512_BIT], long(i)): success [13505ms]
castShape took 13505 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1684bed8): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 32, S_512_BIT], long(i)): success [7129ms]
castShape took 7130 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6c6e507c): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 16, S_512_BIT], long(i)): success [4154ms]
castShape took 4154 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1529045f): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 8, S_512_BIT], long(i)): success [3073ms]
castShape took 3058 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a9f041): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 16, S_512_BIT], long(i)): success [4809ms]
castShape took 4809 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b2b98b1): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 8, S_512_BIT], long(i)): success [3146ms]
castShape took 3146 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d930031): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [1031ms]
castShape took 1031 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b49fe88): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 8, S_Max_BIT], long(i)): success [606ms]
castShape took 607 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@786be358): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 4, S_Max_BIT], long(i)): success [1097ms]
castShape took 1098 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@838508): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 2, S_Max_BIT], long(i)): success [305ms]
castShape took 306 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1109d93c): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1198ms]
castShape took 1198 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13587957): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 2, S_Max_BIT], long(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@725c2ed4): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1487ms]
castShape took 1488 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30e9dead): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[short, 4, S_64_BIT], float(i)): success [1846ms]
castShape took 1847 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@707cbf0a): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[int, 2, S_64_BIT], float(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66f8449d): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BI

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

S_Max_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ef944f8): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[float, 4, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bc51306): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[int, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49fd216e): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[float, 2, S_64_BIT]): success [27ms]
shuffleCast took 28 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1384eb87): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[long, 2, S_128_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15c672de): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[double, 2, S_128_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55b9f94e): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[long, 2, S_Max_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4076fced): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[double, 2, S_Max_BIT]): success [3ms]
shuffleCast took 4 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14f5c5a9): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e77565): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5103825a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@167a7081): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e72c4eb): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198647f7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@361e5553): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd76e9b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@693954e1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50a63192): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 5 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17f0e87c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b06ce01): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76d7bdef): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ba2a3c4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@463142d5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16da3050): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4219c83b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d863fcd): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f18e4b1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27321f76): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@99a4da7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14a4f797): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@666c1382): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@224314a2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1dfb4134): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7496b2ca): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45563d04): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@188caa7b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77ca5b48): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@390db554): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18fd0f5e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@701bc385): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d444216): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34c85df8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f3cb131): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e8d1c80): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c93a156): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67821d4e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12d3c83): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 27 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c820ef5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@491d4183): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46df943c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21550842): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77aa4c20): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@466dc5c5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cacb27e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25fea54b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7403ac38): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e150e1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b496a1d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a208eb4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b0a79e4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29812350): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25838d8c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86a45d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74779344): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dd24a2a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d369f8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80a3ef): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c7cbdb6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@277354b5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@219fe42e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@389fdeba): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45b7e819): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@216f5222): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9e4164): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bd5a86d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f7104ce): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39c11e76): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7af8d8a7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e165d44): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48e07e11): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65977dc6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@573ae6a8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f12f8f8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bf63723): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ca34cbb): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61e2481c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7652041a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@171dcd5c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13b8c413): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@68a34a82): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bb7efc2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@207054d6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b5a9bf3): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44bcaa50): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39229018): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3aa271dc): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21b29cc2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9a9a6f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cd91c5f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2865f6ed): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13e4446c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@246e3c69): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e214d63): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1319af93): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@157c2890): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b8ae83): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43daa5ab): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47292319): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57438fd4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6628a0cd): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78c44a0e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8b487c6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@739d3d0b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f47c415): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10fe1ffa): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dbd1524): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6fb99235): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5eb9a353): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30c81a1d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c663160): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@279510cc): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@303e321a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7612d72): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6cb56024): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@508fb1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b4e64be): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10d15b43): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48a586d9): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5809466): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@520d679c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42d3e00a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18a4ca36): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d6e637d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@718b30d4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f66a0b7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d7a71f2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 16, S_256_BIT]): success [10ms]
shuffleCastNeg took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c0607e5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15ce859f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@529cf764): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e239d9b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80c493): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@438e98dd): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61b0eeb1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7ff46da2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2028cad4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e946b66): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@151408c8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66b68443): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@405e2a9f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198ffaff): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@144407fa): success [0ms]

===============================================
jdk/incubator/vector/Vector128ConversionTests.java
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Vector128ConversionTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Vector128ConversionTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Vector128ConversionTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Vector128ConversionTests.d/testng.0.jta jdk/incubator/vector/Vector128ConversionTests.java false Vector128ConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   4.293 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Wed Apr 16 21:05:30 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Wed Apr 16 21:05:34 IST 2025
elapsed time (seconds): 4.293

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   4.293 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:05:30 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 15
Process id: 1599670
finished: Wed Apr 16 21:05:34 IST 2025
elapsed time (seconds): 4.293
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 8
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   910.707 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Wed Apr 16 21:05:34 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1604538
finished: Wed Apr 16 21:20:45 IST 2025
elapsed time (seconds): 910.707
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [40523ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3320ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [4087ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4117ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [3118ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [3997ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [21698ms]
test VectorReshapeTests.testRebracket256(byte(i)): success [102526ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
Failing with Species[long, 8, S_512_BIT]->Species[short, 32, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 9, 10, 17, 18, 25, 26, 33, 34, 41, 42, 49, 50, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket512(byte(i)): failure [11862ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket512(VectorReshapeTests.java:1019)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[int, 2, S_64_BIT]->Species[byte, 8, S_64_BIT] (lanewise), partLimit=-4, block=2, part=-1, origin=2
expect: [0, 0, 1, 5, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket64(byte(i)): failure [10404ms]
java.lang.AssertionError: arrays differ firstly at element [2]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket64(VectorReshapeTests.java:864)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[short, 8, S_Max_BIT]->Species[byte, 16, S_Max_BIT] (lanewise), partLimit=-2, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 9, 11, 13, 15]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracketMax(byte(i)): failure [9918ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracketMax(VectorReshapeTests.java:1053)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[byte, 16, S_128_BIT]->Species[byte, 64, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-3, origin=48
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [145179ms]
java.lang.AssertionError: arrays differ firstly at element [48]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:447)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[double, 1, S_64_BIT]->Species[double, 8, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-2, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [63983ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:671)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[float, 2, S_64_BIT]->Species[float, 8, S_256_BIT] (reinterpret), partLimit=-4, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeFloat(byte(i)): failure [108598ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeFloat(VectorReshapeTests.java:624)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[int, 4, S_Max_BIT]->Species[int, 16, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [56524ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:557)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[long, 1, S_64_BIT]->Species[long, 2, S_128_BIT] (reinterpret), partLimit=-2, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [58164ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:577)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeShort(byte(i)): success [223383ms]
test VectorReshapeTests.testUCastFromByte(byte(i)): success [22400ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [11327ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 12, Failures: 8, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 8
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 8
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 8
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 8
--------------------------------------------------
TEST: jdk/incubator/vector/Vector64ConversionTests.java#id0
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.95 seconds
messages:
command: build Vector64ConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 21:01:58 IST 2025
Test directory:
  compile: Vector64ConversionTests
finished: Wed Apr 16 21:01:59 IST 2025
elapsed time (seconds): 0.95

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.949 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:01:58 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 2
Process id: 1598631
finished: Wed Apr 16 21:01:59 IST 2025
elapsed time (seconds): 0.949
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Vector64ConversionTests_id0.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Vector64ConversionTests.java#id0 \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 3
REASON: User specified action: run testng/othervm/timeout=300 -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests 
TIME:   1378.677 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests
reason: User specified action: run testng/othervm/timeout=300 -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests 
started: Wed Apr 16 21:01:59 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1604102
finished: Wed Apr 16 21:24:58 IST 2025
elapsed time (seconds): 1378.677
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [1315ms]
castShape took 1310 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cab41a5): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 4, S_64_BIT], byte(i)): success [690ms]
castShape took 690 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32f13c0c): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 2, S_64_BIT], byte(i)): success [563ms]
castShape took 563 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@177ba401): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 1, S_64_BIT], byte(i)): success [390ms]
castShape took 390 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55e9fd9b): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 2, S_64_BIT], byte(i)): success [214ms]
castShape took 215 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bf43dcb): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 1, S_64_BIT], byte(i)): success [372ms]
castShape took 373 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64cc2f05): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [2610ms]
castShape took 2604 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d3c5dca): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 8, S_128_BIT], byte(i)): success [1041ms]
castShape took 1041 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54302f60): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 4, S_128_BIT], byte(i)): success [907ms]
castShape took 907 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@160cc352): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 2, S_128_BIT], byte(i)): success [1143ms]
castShape took 1143 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@759369ce): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 4, S_128_BIT], byte(i)): success [188ms]
castShape took 188 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23821e96): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 2, S_128_BIT], byte(i)): success [179ms]
castShape took 179 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c93395e): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [5333ms]
castShape took 5334 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64daf28): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 16, S_256_BIT], byte(i)): success [4503ms]
castShape took 4503 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7453c2ce): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 8, S_256_BIT], byte(i)): success [194ms]
castShape took 195 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2911fcc7): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 4, S_256_BIT], byte(i)): success [824ms]
castShape took 823 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69a30bb8): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 8, S_256_BIT], byte(i)): success [201ms]
castShape took 201 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@695191ca): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 4, S_256_BIT], byte(i)): success [350ms]
castShape took 350 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4bf40f8): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [7118ms]
castShape took 7119 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bd98d4a): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 32, S_512_BIT], byte(i)): success [5468ms]
castShape took 5468 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e62310): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 16, S_512_BIT], byte(i)): success [3148ms]
castShape took 3148 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18ef793): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 8, S_512_BIT], byte(i)): success [1079ms]
castShape took 1080 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54eca994): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 16, S_512_BIT], byte(i)): success [2561ms]
castShape took 2560 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d9ec089): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 8, S_512_BIT], byte(i)): success [173ms]
castShape took 174 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4cd54fd1): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [1809ms]
castShape took 1809 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@630bd20e): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [152ms]
castShape took 152 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc54142): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [139ms]
castShape took 139 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@618b78f4): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [122ms]
castShape took 123 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c7674c6): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [167ms]
castShape took 167 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@72fd6e22): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [141ms]
castShape took 141 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@40d0b25): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 8, S_64_BIT], short(i)): success [3209ms]
castShape took 3210 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9ae45b9): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 4, S_64_BIT], short(i)): success [5420ms]
castShape took 5420 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fac3958): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 2, S_64_BIT], short(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19d0a0ec): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 1, S_64_BIT], short(i)): success [82ms]
castShape took 82 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7eff441c): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 2, S_64_BIT], short(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b6a37d2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 1, S_64_BIT], short(i)): success [15ms]
castShape took 15 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48b7f47e): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 16, S_128_BIT], short(i)): success [895ms]
castShape took 894 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c4697bc): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 8, S_128_BIT], short(i)): success [4245ms]
castShape took 4245 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5353824d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 4, S_128_BIT], short(i)): success [14ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61517fb2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 2, S_128_BIT], short(i)): success [14ms]
castShape took 15 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bb27146): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 4, S_128_BIT], short(i)): success [13ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@412dc1a2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 2, S_128_BIT], short(i)): success [14ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@321f317): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 32, S_256_BIT], short(i)): success [4618ms]
castShape took 4619 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b0ecc95): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 16, S_256_BIT], short(i)): success [2510ms]
castShape took 2510 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10363f91): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 8, S_256_BIT], short(i)): success [3182ms]
castShape took 3182 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42e578c0): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 4, S_256_BIT], short(i)): success [105ms]
castShape took 106 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cfc7fce): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 8, S_256_BIT], short(i)): success [2314ms]
castShape took 2314 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f84d03b): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 4, S_256_BIT], short(i)): success [2306ms]
castShape took 2296 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15e41f09): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 64, S_512_BIT], short(i)): success [6557ms]
castShape took 6558 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c73d6bf): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 32, S_512_BIT], short(i)): success [4745ms]
castShape took 4746 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d5c1d58): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 16, S_512_BIT], short(i)): success [2089ms]
castShape took 2089 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a049c7d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 8, S_512_BIT], short(i)): success [2993ms]
castShape took 2993 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61a38c6c): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 16, S_512_BIT], short(i)): success [2371ms]
castShape took 2372 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@236f95aa): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 8, S_512_BIT], short(i)): success [2525ms]
castShape took 2526 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5efab149): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [580ms]
castShape took 580 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18cb82df): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 8, S_Max_BIT], short(i)): success [1478ms]
castShape took 1478 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@643f070d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 4, S_Max_BIT], short(i)): success [7ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4934c96b): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 2, S_Max_BIT], short(i)): success [6ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e059ab7): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 4, S_Max_BIT], short(i)): success [7ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5897749f): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 2, S_Max_BIT], short(i)): success [6ms]
castShape took 6 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c1371b8): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2206ms]
castShape took 2207 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@442b18f7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 4, S_64_BIT], int(i)): failure [1283ms]
java.lang.AssertionError:  expected [[S@49d8e1d8] but found [[S@72bbfdbc]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertArrayEquals(Assert.java:201)
	at org.testng.Assert.assertEquals(Assert.java:119)
	at org.testng.Assert.assertEquals(Assert.java:617)
	at AbstractVectorConversionTest.conversion_kernel(AbstractVectorConversionTest.java:456)
	at Vector64ConversionTests.castShape(Vector64ConversionTests.java:106)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
castShape took 1243 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@272f2089): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 2, S_64_BIT], int(i)): success [852ms]
castShape took 852 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cf44fae): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 1, S_64_BIT], int(i)): success [162ms]
castShape took 163 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4674dacb): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 2, S_64_BIT], int(i)): success [26ms]
castShape took 26 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@782e94b8): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 1, S_64_BIT], int(i)): success [23ms]
castShape took 23 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@150322ac): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 16, S_128_BIT], int(i)): success [1153ms]
castShape took 1153 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54fca7cf): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 8, S_128_BIT], int(i)): success [614ms]
castShape took 614 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2538bba3): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 4, S_128_BIT], int(i)): success [1964ms]
castShape took 1964 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17aac7f0): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 2, S_128_BIT], int(i)): success [26ms]
castShape took 26 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2aa28bd5): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 4, S_128_BIT], int(i)): success [1221ms]
castShape took 1221 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4da521da): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 2, S_128_BIT], int(i)): success [25ms]
castShape took 25 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7ca50be7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 32, S_256_BIT], int(i)): success [7149ms]
castShape took 7149 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@621544a0): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 16, S_256_BIT], int(i)): success [4109ms]
castShape took 4109 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2db9544): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 8, S_256_BIT], int(i)): success [3562ms]
castShape took 3562 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3523703): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 4, S_256_BIT], int(i)): success [3722ms]
castShape took 3722 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38212d6d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 8, S_256_BIT], int(i)): success [3448ms]
castShape took 3448 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e3358da): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 4, S_256_BIT], int(i)): success [3077ms]
castShape took 3077 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1127a9e1): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 64, S_512_BIT], int(i)): success [12990ms]
castShape took 12990 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2ce2b52d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 32, S_512_BIT], int(i)): success [7327ms]
castShape took 7327 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26a91840): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 16, S_512_BIT], int(i)): success [4598ms]
castShape took 4598 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16e80674): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 8, S_512_BIT], int(i)): success [2864ms]
castShape took 2865 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@170549c7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 16, S_512_BIT], int(i)): success [4856ms]
castShape took 4857 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@124d2b42): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 8, S_512_BIT], int(i)): success [3245ms]
castShape took 3246 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39a660cb): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [1041ms]
castShape took 1042 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42757dde): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 8, S_Max_BIT], int(i)): success [613ms]
castShape took 613 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e5e9078): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 4, S_Max_BIT], int(i)): success [1751ms]
castShape took 1751 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54f2c322): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 2, S_Max_BIT], int(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd72c2): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 4, S_Max_BIT], int(i)): success [1202ms]
castShape took 1203 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@702a7105): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 2, S_Max_BIT], int(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6ed53852): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 8, S_64_BIT], long(i)): success [1575ms]
castShape took 1575 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4216e82c): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 4, S_64_BIT], long(i)): success [818ms]
castShape took 818 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d2ea27e): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 2, S_64_BIT], long(i)): success [1213ms]
castShape took 1213 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74b8781a): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 1, S_64_BIT], long(i)): success [1298ms]
castShape took 1298 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42642d30): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 2, S_64_BIT], long(i)): success [1312ms]
castShape took 1313 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3da5771b): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 1, S_64_BIT], long(i)): success [312ms]
castShape took 312 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@183524c7): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 16, S_128_BIT], long(i)): success [2275ms]
castShape took 2276 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53d438dd): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 8, S_128_BIT], long(i)): success [1240ms]
castShape took 1240 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e9e124f): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 4, S_128_BIT], long(i)): success [863ms]
castShape took 863 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3767d1fe): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 2, S_128_BIT], long(i)): success [2953ms]
castShape took 2953 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16658144): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 4, S_128_BIT], long(i)): success [1156ms]
castShape took 1156 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48e10bd7): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 2, S_128_BIT], long(i)): success [1396ms]
castShape took 1396 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5ca2ddd8): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 32, S_256_BIT], long(i)): success [14162ms]
castShape took 14161 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e5aae46): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 16, S_256_BIT], long(i)): success [8184ms]
castShape took 8184 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c655cc): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 8, S_256_BIT], long(i)): success [6094ms]
castShape took 6094 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@70731f1d): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 4, S_256_BIT], long(i)): success [5010ms]
castShape took 5011 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b2b98b1): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 8, S_256_BIT], long(i)): success [5882ms]
castShape took 5879 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c1007ab): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 4, S_256_BIT], long(i)): success [4288ms]
castShape took 4288 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d5cf24a): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 64, S_512_BIT], long(i)): success [26013ms]
castShape took 26013 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44fa8ea1): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 32, S_512_BIT], long(i)): success [14306ms]
castShape took 14306 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3af7f9f0): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 16, S_512_BIT], long(i)): success [8356ms]
castShape took 8356 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d3eb656): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 8, S_512_BIT], long(i)): success [5833ms]
castShape took 5816 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14b48a94): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 16, S_512_BIT], long(i)): success [9311ms]
castShape took 9312 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9ff15bc): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 8, S_512_BIT], long(i)): success [5964ms]
castShape took 5965 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2974683e): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [2176ms]
castShape took 2176 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@81586e9): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 8, S_Max_BIT], long(i)): success [1319ms]
castShape took 1320 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78638d39): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 4, S_Max_BIT], long(i)): success [860ms]
castShape took 860 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@146f2497): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 2, S_Max_BIT], long(i)): success [1897ms]
castShape took 1898 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63b8ddc6): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1172ms]
castShape took 1173 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2109f79c): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 2, S_Max_BIT], long(i)): success [1318ms]
castShape took 1318 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26c5e81d): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1751ms]
castShape took 1751 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46dd932c): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[short, 4, S_64_BIT], float(i)): success [2139ms]
castShape took 2139 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@56adf5e0): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[int, 2, S_64_BIT], float(i)): success [14ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42109f40): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[long, 1, S_64_BIT], float(i)): success [145ms]
castShape took 145 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bcae6c9): success [0ms]
test Vector64ConversionTests.castSh

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

rnal.TestResult@aefea5d): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[int, 2, S_64_BIT], Species[float, 2, S_64_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7919c51): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[int, 2, S_64_BIT], Species[long, 2, S_128_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2efeefbe): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[int, 2, S_64_BIT], Species[double, 2, S_128_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64126c77): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[int, 2, S_64_BIT], Species[long, 2, S_Max_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@544b6412): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[int, 2, S_64_BIT], Species[double, 2, S_Max_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cae64fc): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[long, 1, S_64_BIT], Species[long, 1, S_64_BIT]): success [24ms]
shuffleCast took 25 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11114331): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[long, 1, S_64_BIT], Species[double, 1, S_64_BIT]): success [7ms]
shuffleCast took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@783dd120): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[float, 2, S_64_BIT], Species[int, 2, S_64_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@341be147): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[float, 2, S_64_BIT], Species[float, 2, S_64_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27543c1e): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[float, 2, S_64_BIT], Species[long, 2, S_128_BIT]): success [1ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75838fb9): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[float, 2, S_64_BIT], Species[double, 2, S_128_BIT]): success [8ms]
shuffleCast took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1df778ac): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[float, 2, S_64_BIT], Species[long, 2, S_Max_BIT]): success [27ms]
shuffleCast took 27 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@206a81af): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[float, 2, S_64_BIT], Species[double, 2, S_Max_BIT]): success [1ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3510c343): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[double, 1, S_64_BIT], Species[long, 1, S_64_BIT]): success [1ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6155fe30): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[double, 1, S_64_BIT], Species[double, 1, S_64_BIT]): success [1ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66802261): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e1c3ead): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@73016e7c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6be1da02): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29897488): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@732e8986): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cbdda99): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ee39ff8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@445381b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2dc938c6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44112c3d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@344d3c48): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a4d4e7b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66741a55): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46d90bd8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d42ae57): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48b81600): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e7214ca): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 6 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4a19ce6e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@134caef3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b763382): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@517f1655): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23da9535): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3dc096e8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11e85147): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b0db1d4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e4a49a5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2633e9d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59cd536a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@380f821): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@442f10d8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d4813a4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24687549): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d333b11): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ae1a2ca): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20b713c3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@685cabee): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63c2d99): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@111d7af1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@35a4c2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b9d04a5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21bca813): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a36dc29): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e740c4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4dee5fd5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f73d371): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79c23a2a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 27 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d151ac1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d85d8b4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e5636b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@62c26811): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@714dbe24): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@bd3e301): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57aa423f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3dde168a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20bd98b9): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d219881): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38c3a523): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c762e81): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@211c2efc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ff9098): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c57030b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18377b93): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f4f44d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bd7c1d9): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67433a7e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41386df): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@700403): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43e8e8b6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f21513f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3de8fca0): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f95d66e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7461adda): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59d7e7c5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ce103d3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31b5da45): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bf99152): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@648eadea): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b672d7c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@70124837): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@644ccb61): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@752c7c78): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11ad12c6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7efa3452): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@52f5f350): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f07ac2e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c894bb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76e80835): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b6da6cb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cbd6f1d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@571f2dc1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19b8c726): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2064d20): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@773b9530): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@233b747d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f57afc1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46415e46): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21823396): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5983e717): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37962361): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a75998): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41a28db6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6817773d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@33b25e83): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bb974b4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29539615): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13e1fb18): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a111ed6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cdb1fc6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f585deb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b48852b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13c30a6a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4fd6a0f2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57fdf0dc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5dbef5fc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8fd4fd1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d5a3977): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ed439a4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7cbd8f4d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14f8736a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@679f3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f11df84): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@367aacc4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43717fa6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21ac7818): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50600acb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f40a670): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21ed4a7c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 8, S_128_BIT]): success [8ms]
shuffleCastNeg took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15dffe0d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c0607e5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1858a725): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@395b81ec): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f20039d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b923552): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31b31435): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@592c1d5b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@480b4c0e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@460b61c2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32d189e3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@738c0207): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b340518): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75b93ea8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b49eb49): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@257fdb18): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10d3b598): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d114fb1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@142ceff8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2af8c4c7): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37d95cf8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d3e7948): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d4c5e02): success [0ms]

===============================================
jdk/incubator/vector/Vector64ConversionTests.java#id0
Total tests run: 936, Passes: 933, Failures: 3, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 3
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 3
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 3
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Vector64ConversionTests.java#id0 \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Vector64ConversionTests_id0.d/testng.0.jta jdk/incubator/vector/Vector64ConversionTests.java#id0 false Vector64ConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 3
--------------------------------------------------
Test results: passed: 68; failed: 12; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector
Finished running test 'jtreg:test/jdk/jdk/incubator/vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk/jdk/incubator/vector                  83    68    12     0     3 <<
==============================
TEST FAILURE

