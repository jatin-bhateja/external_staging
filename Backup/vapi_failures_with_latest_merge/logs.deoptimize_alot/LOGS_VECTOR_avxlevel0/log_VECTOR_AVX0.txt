Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_1', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_1
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_1

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Passed: compiler/codegen/Test6814842.java
Passed: compiler/codegen/Test6797305.java
Passed: compiler/codegen/Test6378821.java
Passed: compiler/codegen/BitTests.java
Passed: compiler/codegen/LoadWithMask2.java
Passed: compiler/codegen/IntRotateWithImmediate.java
Passed: compiler/codegen/LoadWithMask.java
Passed: compiler/codegen/BMI2.java
Passed: compiler/codegen/C1NullCheckOfNullStore.java
Passed: compiler/codegen/Test6431242.java
Passed: compiler/codegen/BadLogicCode.java
Passed: compiler/codegen/ClearArrayTest.java
Passed: compiler/codegen/ShiftByZero.java
Passed: compiler/codegen/Test7009231.java
Passed: compiler/codegen/BMI1.java
Passed: compiler/codegen/Test6909839.java
Passed: compiler/codegen/CRCTest.java
Passed: compiler/codegen/ShiftTest.java
Passed: compiler/codegen/Test8011901.java
Passed: compiler/codegen/Test8005033.java
Passed: compiler/codegen/Test6879902.java
Passed: compiler/codegen/Test6942326.java
Passed: compiler/codegen/TestConvertImplicitNullCheck.java
Passed: compiler/codegen/TestBooleanVect.java
Passed: compiler/codegen/Test7100757.java
Passed: compiler/codegen/Test6823354.java
Passed: compiler/codegen/TestByteShortVect.java
Passed: compiler/codegen/TestCharShortVect.java
Passed: compiler/codegen/TestByteIntVect.java
Passed: compiler/codegen/TestCharVect.java
Passed: compiler/codegen/TestDoubleVect.java
Passed: compiler/codegen/TestIntFloatVect.java
Passed: compiler/codegen/TestByteVect.java
Passed: compiler/codegen/TestCharVect2.java#id0
Passed: compiler/codegen/TestMultiMemInstructionMatching.java
Passed: compiler/codegen/TestFloatVect.java
Passed: compiler/codegen/TestLongDoubleVect.java
Passed: compiler/codegen/TestIntVect.java
Passed: compiler/codegen/TestLongVect.java
Passed: compiler/codegen/TestByteLongVect.java
Passed: compiler/codegen/TestByteFloatVect.java
Passed: compiler/codegen/TestGCMLoadPlacement.java
Passed: compiler/codegen/TestByteDoubleVect.java
Passed: compiler/loopopts/superword/AlignmentOnePack.java
Passed: compiler/codegen/TestFloatDoubleVect.java
Passed: compiler/loopopts/superword/CoLocatePack.java
Passed: compiler/loopopts/superword/CoLocatePackMemoryState.java
Passed: compiler/codegen/TestIntDoubleVect.java
Passed: compiler/codegen/TestShortIntVect.java
Passed: compiler/codegen/TestShortFloatVect.java
Passed: compiler/codegen/TestLongFloatVect.java
Passed: compiler/codegen/TestIntLongVect.java
Passed: compiler/codegen/TestShortVect.java
Passed: compiler/codegen/TestCharVect2.java#id1
Passed: compiler/codegen/TestOopCmp.java
Passed: compiler/codegen/TestShortDoubleVect.java
Passed: compiler/loopopts/superword/ReductionPerf.java
Passed: compiler/codegen/TestShortLongVect.java
Passed: compiler/codegen/TestSignedMultiplyLong.java
Passed: compiler/loopopts/superword/MinMaxRed_Int.java
Passed: compiler/loopopts/superword/MinMaxRed_Long.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage.java
Passed: compiler/loopopts/superword/SuperWordIntermediateUse.java
Passed: compiler/loopopts/superword/TestAlignVector.java#AlignVector
Passed: compiler/loopopts/superword/TestAlignVector.java#VerifyAlignVector
Passed: compiler/loopopts/superword/RedTest_long.java
Passed: compiler/loopopts/superword/TestAlignVector.java#NoAlignVector
Passed: compiler/loopopts/superword/RedTest_int.java
Passed: compiler/loopopts/superword/TestBestAlign.java
Passed: compiler/loopopts/superword/TestCmpInvar.java
Passed: compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
Passed: compiler/loopopts/superword/SumRed_Long.java
Passed: compiler/loopopts/superword/TestCyclicDependency.java
Passed: compiler/loopopts/superword/ProdRed_Float.java
Passed: compiler/loopopts/superword/SumRed_Int.java
Passed: compiler/loopopts/superword/ProdRed_Int.java
Passed: compiler/loopopts/superword/ProdRed_Double.java
Passed: compiler/loopopts/superword/SumRed_Float.java
Passed: compiler/loopopts/superword/SumRed_Double.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Float.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestEliminateAllocationWithCastP2XUse.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Double.java
Passed: compiler/loopopts/superword/TestFuzzPreLoop.java
Passed: compiler/loopopts/superword/TestHoistedReductionNode.java
Passed: compiler/loopopts/superword/TestGeneralizedReductions.java
Passed: compiler/loopopts/superword/TestIndependentPacksWithCyclicDependency2.java
Passed: compiler/loopopts/superword/TestLargeCompilation.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#Vanilla
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-NoTieredCompilation-Xbatch
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-Align16
Passed: compiler/loopopts/superword/SumRedSqrt_Double.java
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v004-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v004-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v008-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v008-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#char-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#double-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#float-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v016-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v016-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-A
Passed: compiler/loopopts/superword/TestMemorySegmentMainLoopAlignment.java
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#native
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegment.java#native-AlignVector
Passed: compiler/loopopts/superword/TestNegBaseOffset.java
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#Vanilla
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-VerifyAlignVector
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-U
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-VerifyAlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-AlignVector
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithFlags
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithMoreFlags
Passed: compiler/loopopts/superword/TestMemorySegment.java#short-array
Passed: compiler/loopopts/superword/TestMultiversionRemoveUselessSlowLoop.java
Passed: compiler/loopopts/superword/TestSearchAlignment.java
Passed: compiler/loopopts/superword/TestReductionWithLoopVariantUse.java
Passed: compiler/loopopts/superword/TestPeeledReductionNode.java
Passed: compiler/loopopts/superword/TestPickLastMemoryState.java
Passed: compiler/loopopts/superword/TestParallelReduction.java
Passed: compiler/loopopts/superword/TestVectorizeTypeConversionWithUnsafe.java
Passed: compiler/loopopts/superword/TestPickFirstMemoryState.java
Passed: compiler/loopopts/superword/TestWronglyMarkedReduction.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Unaligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize16-Unaligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize32-Aligned
Passed: compiler/loopopts/superword/TestVectorizationWithInvariant.java
Passed: compiler/vectorapi/Test8303508.java
Passed: compiler/vectorapi/TestIsLoadVector.java
Passed: compiler/loopopts/superword/TestVectorFPReduction.java
Passed: compiler/vectorapi/TestLongVectorNeg.java
Passed: compiler/vectorapi/Test8259353.java
Passed: compiler/vectorapi/TestBiMorphicMismatchedMemSegment.java
Passed: compiler/vectorapi/TestNoInline.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id0
Passed: compiler/vectorapi/TestLoopStoreVector.java#id1
Passed: compiler/vectorapi/TestIntrinsicBailOut.java#id0
Passed: compiler/vectorapi/TestVectorErgonomics.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#AlignVector
Passed: compiler/vectorapi/Test8278948.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#StoreToLoadForwardingFailureDetection
Passed: compiler/vectorapi/TestVectorShuffleIota.java
Passed: compiler/vectorapi/VectorBoxExpandTest.java
Passed: compiler/vectorapi/TestVectorTest.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#vanilla
Passed: compiler/vectorapi/TestVectorAddMulReduction.java
Passed: compiler/vectorapi/TestVectorShiftImm.java
Passed: compiler/loopopts/superword/TestMovingLoadBeforeStore.java
Passed: compiler/vectorapi/VectorFPtoIntCastTest.java
Passed: compiler/vectorapi/VectorCommutativeOperSharingTest.java
Passed: compiler/vectorapi/TestReverseByteTransforms.java
Passed: compiler/vectorapi/VectorMemoryAlias.java
Passed: compiler/vectorapi/TestVectorShuffleIotaByte.java
Passed: compiler/vectorapi/VectorMaskCastTest.java
Passed: compiler/loopopts/superword/TestEquivalentInvariants.java
Passed: compiler/vectorapi/TestTwoVectorPermute.java
Passed: compiler/vectorapi/TestMaskedMacroLogicVector.java
Passed: compiler/c2/cr6340864/TestFloatVect.java
Passed: compiler/c2/cr6340864/TestDoubleVect.java
Passed: compiler/vectorapi/TestRawOopAtSafepoint.java
Passed: compiler/c2/cr6340864/TestByteVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeHotInlineTest.java
Passed: compiler/c2/cr6340864/TestLongVectRotate.java
Passed: compiler/c2/irTests/blackhole/BlackholeStoreStoreEATest.java
Passed: compiler/c2/irTests/blackhole/BlackholeLoadOptoTest.java
Passed: compiler/c2/cr6340864/TestIntVectRotate.java
Passed: compiler/c2/irTests/blackhole/BlackholeSyncEATest.java
Passed: compiler/c2/cr6340864/TestIntVect.java
Passed: compiler/c2/irTests/igvn/TestCombineAddPWithConstantOffsets.java
Passed: compiler/c2/cr6340864/TestShortVect.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id0
Passed: compiler/c2/irTests/igvn/TestCleanMemPhi.java
Passed: compiler/c2/irTests/igvn/TestIntegerMulRing.java
Passed: compiler/c2/cr6340864/TestLongVect.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage2.java
Passed: compiler/c2/irTests/loopOpts/LoopIdealizationTests.java
Passed: compiler/c2/irTests/igvn/TestLoadNIdeal.java
Passed: compiler/c2/irTests/scalarReplacement/ScalarReplacementTests.java
Passed: compiler/vectorapi/VectorGatherMaskFoldingTest.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id1
Passed: compiler/vectorapi/VectorCastShape128Test.java
Passed: compiler/c2/irTests/stringopts/TestNegativeArraySize.java
Passed: compiler/c2/irTests/AddINodeIdealizationTests.java
Passed: compiler/c2/irTests/AddLNodeIdealizationTests.java
Passed: compiler/c2/irTests/AndINodeIdealizationTests.java
Passed: compiler/c2/irTests/AndLNodeIdealizationTests.java
Passed: compiler/vectorapi/VectorMultiplyOpt.java
Passed: compiler/vectorapi/VectorCastShape64Test.java
Passed: compiler/c2/irTests/CMoveLConstants.java
Passed: compiler/c2/irTests/CmpUWithZero.java
Passed: compiler/vectorapi/VectorSaturatedOperationsTest.java
Passed: compiler/c2/irTests/stable/StablePrimFinalTest.java
Passed: compiler/c2/irTests/stable/StableRefFinalTest.java
Passed: compiler/c2/irTests/stable/StablePrimArrayTest.java
Passed: compiler/c2/irTests/DeMorganLawLongTests.java
Passed: compiler/c2/irTests/stable/StablePrimPlainTest.java
Passed: compiler/c2/irTests/DivINodeIdealizationTests.java
Passed: compiler/c2/irTests/LShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefPlainTest.java
Passed: compiler/c2/irTests/ConstructorBarriers.java
Passed: compiler/c2/irTests/stable/StablePrimVolatileTest.java
Passed: compiler/c2/irTests/stable/StableRefVolatileTest.java
Passed: compiler/c2/irTests/DivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/DeMorganLawIntTests.java
Passed: compiler/c2/irTests/LShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MaxMinINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulINodeIdealizationTests.java
Passed: compiler/c2/irTests/OrINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModDNodeTests.java
Passed: compiler/c2/irTests/MulLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModFNodeTests.java
Passed: compiler/c2/irTests/MulHFNodeIdealizationTests.java
Passed: compiler/c2/irTests/OrLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestArrayElementTypeLoad.java
Passed: compiler/c2/irTests/RShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/RShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVecCountingDownLoop.java
Passed: compiler/c2/irTests/SubINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestBackToBackIfs.java
Passed: compiler/c2/irTests/SubLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVectorization2DArray.java
Passed: compiler/c2/irTests/TestBackToBackMustBeNotNull.java
Passed: compiler/c2/irTests/TestCMoveCCP.java
Passed: compiler/c2/irTests/TestConv2BExpansion.java
Passed: compiler/c2/irTests/TestConvI2LCastLongLoop.java
Passed: compiler/c2/irTests/TestEnumFinalFold.java
Passed: compiler/c2/irTests/TestDebugInfo.java
Passed: compiler/c2/irTests/TestFPConversion.java
Passed: compiler/c2/irTests/TestCountedLoopPhiValue.java
Passed: compiler/c2/irTests/TestGetAndAdd.java
Passed: compiler/c2/irTests/TestFPComparison.java
Passed: compiler/c2/irTests/TestFewIterationsCountedLoop.java
Passed: compiler/c2/irTests/TestCountedLoopSafepoint.java
Passed: compiler/c2/irTests/TestIRLShiftIdeal_XPlusX_LShiftC.java
Passed: compiler/c2/irTests/TestIterativeEA.java
Passed: compiler/c2/irTests/TestIRAbs.java
Passed: compiler/c2/irTests/TestMulNodeIdealization.java
Passed: compiler/c2/irTests/TestMinMaxIdentities.java
Passed: compiler/c2/irTests/TestOptimizeUnstableIf.java
Passed: compiler/c2/irTests/TestIfMinMax.java
Passed: compiler/c2/irTests/TestPadding.java
Passed: compiler/c2/irTests/TestPhiDuplicatedConversion.java
Passed: compiler/c2/irTests/TestPushAddThruCast.java
Passed: compiler/c2/irTests/stable/StableRefArrayTest.java
Passed: compiler/c2/irTests/TestIRFma.java
Passed: compiler/c2/irTests/TestRemixAddressExpressions.java
Passed: compiler/c2/irTests/TestScalarReplacement.java
Passed: compiler/c2/irTests/TestLongRangeChecks.java
Passed: compiler/c2/irTests/TestScheduleSmallMethod.java
Passed: compiler/c2/irTests/TestPostParseCallDevirtualization.java
Passed: compiler/c2/irTests/TestLSMMissedEmptyLoop.java
Passed: compiler/c2/irTests/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java
Passed: compiler/c2/irTests/TestShiftAndMask.java
Passed: compiler/c2/irTests/TestSkeletonPredicates.java
Passed: compiler/c2/irTests/TestTypeSpeculation.java
Passed: compiler/c2/irTests/TestTestRemovalPeephole.java
Passed: compiler/c2/irTests/TestSuperwordFailsUnrolling.java
Passed: compiler/c2/irTests/TestFloat16ScalarOperations.java
Passed: compiler/c2/irTests/gc/ReferenceClearTests.java
Passed: compiler/c2/irTests/TestStripMiningDropsSafepoint.java
Passed: compiler/c2/irTests/TestUnsignedComparison.java
Passed: compiler/c2/irTests/UDivINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestVectorizeURShiftSubword.java
Passed: compiler/c2/irTests/ConvF2HFIdealizationTests.java
Passed: compiler/c2/irTests/UDivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/UModINodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/UModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/XorINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestVectorizationMultiInvar.java
Passed: compiler/c2/irTests/XorLNodeIdealizationTests.java
Passed: compiler/vectorization/runner/ArrayCopyTest.java
Passed: compiler/vectorization/runner/ArrayUnsafeOpTest.java
Passed: compiler/c2/irTests/gc/ReferenceRefersToTests.java
Passed: compiler/vectorization/runner/ArrayIndexFillTest.java
Passed: compiler/c2/irTests/ProfileAtTypeCheck.java
Passed: compiler/vectorization/runner/ArrayShiftOpTest.java
Passed: compiler/vectorization/runner/BasicBooleanOpTest.java
Passed: compiler/vectorization/runner/BasicByteOpTest.java
Passed: compiler/vectorization/runner/BasicCharOpTest.java
Passed: compiler/vectorization/TestAbsCharVector.java
Passed: compiler/vectorization/runner/BasicIntOpTest.java
Passed: compiler/vectorization/TestCMoveWithoutBoolPack.java
Passed: compiler/vectorization/runner/LoopControlFlowTest.java
Passed: compiler/vectorization/runner/BasicLongOpTest.java
Passed: compiler/vectorization/runner/BasicShortOpTest.java
Passed: compiler/vectorization/runner/ArrayInvariantFillTest.java
Passed: compiler/vectorization/runner/LoopLiveOutNodesTest.java
Passed: compiler/vectorization/runner/LoopArrayIndexComputeTest.java
Passed: compiler/vectorization/TestMemoryVectorMismatched.java
Passed: compiler/vectorization/runner/StripMinedLoopTest.java
Passed: compiler/vectorization/TestNarrowedIntegerReverseBytes.java
Passed: compiler/vectorization/runner/LoopReductionOpTest.java
Passed: compiler/vectorization/TestMacroLogicVector.java
Passed: compiler/vectorization/TestAutoVecIntMinMax.java
Passed: compiler/vectorization/TestOverlappingMismatchedAccesses.java
Passed: compiler/vectorization/TestOptionVectorize.java
Passed: compiler/vectorization/TestMaskedVectors.java
Passed: compiler/vectorization/TestNaNVector.java
Passed: compiler/vectorization/runner/MultipleLoopsTest.java
Passed: compiler/vectorization/runner/LoopRangeStrideTest.java
Passed: compiler/vectorization/TestSmallVectorPopIndex.java
Passed: compiler/vectorization/TestComplexAddrExpr.java
Passed: compiler/vectorization/TestReplicateLoopIV.java
Passed: compiler/vectorization/TestUnexpectedLoadOrdering.java
Passed: compiler/vectorization/TestReplicateAtConv.java
Passed: compiler/vectorization/TestRotateByteAndShortVector.java
Passed: compiler/vectorization/TestPopCountVector.java
Passed: compiler/vectorization/TestVectorUnalignedOffset.java
Passed: compiler/vectorization/TestOffsetSorting.java
Passed: compiler/vectorization/TestVectorizationNegativeScale.java
Passed: compiler/vectorization/TestFloat16ToFloatConv.java
Passed: compiler/vectorization/TestOptionVectorizeIR.java
Passed: compiler/vectorization/runner/BasicFloatOpTest.java
Passed: compiler/vectorization/TestForEachRem.java
Passed: compiler/vectorization/TestSubwordReverseBytes.java
Passed: compiler/vectorization/TestVectorsNotSavedAtSafepoint.java
Passed: compiler/vectorization/TestBufferVectorization.java
Passed: compiler/vectorization/runner/BasicDoubleOpTest.java
Passed: compiler/vectorization/TestVectorZeroCount.java
Test results: passed: 335; excluded: 18; did not meet platform requirements: 73
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_1           426   335     0     0    91   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_2', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_2
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_2

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Passed: compiler/intrinsics/string/TestCopyValueOf.java
Passed: compiler/intrinsics/string/TestStringIndexOfCharIntrinsics.java
Passed: compiler/intrinsics/string/TestStringEqualsBadLength.java
Passed: compiler/intrinsics/string/TestStringConstruction.java
Passed: compiler/intrinsics/string/TestStringIntrinsicRangeChecks.java
Passed: compiler/intrinsics/string/TestStringIntrinsicMemoryFlow.java
Passed: compiler/intrinsics/Test8005419.java
Passed: compiler/intrinsics/Test6982370.java
Passed: compiler/intrinsics/Test8215792.java
Passed: compiler/intrinsics/Test8237524.java
Passed: compiler/intrinsics/TestArraysHashCode.java
Passed: compiler/intrinsics/TestArrayGuardWithInterfaces.java
Passed: compiler/intrinsics/IntrinsicDisabledTest.java
Passed: compiler/intrinsics/string/TestStringIntrinsics2.java
Passed: compiler/intrinsics/TestContinuationPinningAndEA.java
Passed: compiler/intrinsics/string/TestStringConstructionIntrinsics.java#id0
Passed: compiler/intrinsics/IntrinsicAvailableTest.java
Passed: compiler/intrinsics/TestReferenceGetWithNull.java
Passed: compiler/intrinsics/TestCheckIndex.java
Passed: compiler/intrinsics/string/TestCountPositives.java#id0
Passed: compiler/intrinsics/TestReferenceRefersTo.java
Passed: compiler/intrinsics/string/TestStringUTF16IntrinsicRangeChecks.java
Passed: compiler/intrinsics/VectorizedMismatchTest.java
Passed: compiler/codegen/Test6935535.java#id1
Passed: compiler/intrinsics/TestIntegerUnsignedDivMod.java
Passed: compiler/intrinsics/TestCompareUnsigned.java
Passed: compiler/codegen/aes/Test8292158.java
Passed: compiler/intrinsics/string/TestHasNegatives.java#id0
Passed: compiler/intrinsics/TestRotate.java
Passed: compiler/intrinsics/base64/TestBase64.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLenReturnProfile.java
Passed: compiler/intrinsics/bigInteger/TestMulAdd.java
Passed: compiler/codegen/Test6875866.java
Passed: compiler/intrinsics/string/TestEncodeIntrinsics.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestL.java
Passed: compiler/intrinsics/bigInteger/TestSquareToLen.java
Passed: compiler/codegen/aes/Test8299817.java
Passed: compiler/codegen/Test6935535.java#id0
Passed: compiler/intrinsics/bigInteger/MontgomeryMultiplyTest.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestI.java
Passed: compiler/intrinsics/bigInteger/TestShift.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestL.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestI.java
Passed: compiler/intrinsics/TestLongUnsignedDivMod.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestL.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestL.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestL.java
Passed: compiler/intrinsics/string/TestStringIntrinsics.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLen.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestL.java
Passed: compiler/intrinsics/bmi/TestLzcntI.java
Passed: compiler/intrinsics/bmi/TestBlsiI.java
Passed: compiler/intrinsics/bmi/TestBlsmskI.java
Passed: compiler/intrinsics/bmi/TestBlsiL.java
Passed: compiler/intrinsics/bmi/TestBlsrI.java
Passed: compiler/intrinsics/bmi/TestBlsmskL.java
Passed: compiler/intrinsics/bmi/TestBlsrL.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id0
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id1
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id2
Passed: compiler/intrinsics/bmi/TestLzcntL.java
Passed: compiler/intrinsics/TestBitShuffleOpers.java
Passed: compiler/intrinsics/math/Test8210461.java
Passed: compiler/intrinsics/bmi/TestAndnI.java
Passed: compiler/intrinsics/bmi/TestTzcntI.java
Passed: compiler/intrinsics/bmi/TestTzcntL.java
Passed: compiler/intrinsics/math/TestMinMaxIntrinsics.java
Passed: compiler/intrinsics/bmi/TestAndnL.java
Passed: compiler/intrinsics/math/TestPow2Opt.java
Passed: compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
Passed: compiler/intrinsics/math/TestPow0Dot5Opt.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactLongTest.java
Passed: compiler/intrinsics/klass/TestIsPrimitive.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactIntTest.java
Passed: compiler/intrinsics/math/TestMinMaxOpt.java
Passed: compiler/intrinsics/math/TestMinMaxInlining.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactLongTest.java
Passed: compiler/intrinsics/mathexact/AddExactICondTest.java
Passed: compiler/intrinsics/mathexact/AddExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactLNonConstantTest.java
Passed: compiler/intrinsics/math/MaxMinOptimizeTest.java
Passed: compiler/intrinsics/mathexact/AddExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/AddExactIRepeatTest.java
Passed: compiler/intrinsics/klass/CastNullCheckDroppingsTest.java
Passed: compiler/intrinsics/bmi/TestBzhiI2L.java
Passed: compiler/intrinsics/mathexact/CompareTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoadTest.java
Passed: compiler/intrinsics/mathexact/MulExactICondTest.java
Passed: compiler/codegen/aes/TestCipherBlockChainingEncrypt.java
Passed: compiler/intrinsics/mathexact/AddExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/DecExactLTest.java
Passed: compiler/intrinsics/mathexact/DecExactITest.java
Passed: compiler/intrinsics/mathexact/GVNTest.java
Passed: compiler/intrinsics/mathexact/IncExactLTest.java
Passed: compiler/intrinsics/mathexact/IncExactITest.java
Passed: compiler/intrinsics/mathexact/NegExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoadTest.java
Passed: compiler/intrinsics/mathexact/NegExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/NestedMathExactTest.java
Passed: compiler/intrinsics/mathexact/SplitThruPhiTest.java
Passed: compiler/intrinsics/mathexact/SubExactICondTest.java
Passed: compiler/intrinsics/mathexact/NegExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoadTest.java
Passed: compiler/intrinsics/mathexact/NegExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactIRepeatTest.java
Passed: compiler/intrinsics/SortingDeoptimizationTest.java
Passed: compiler/intrinsics/mathexact/LongMulOverflowTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoadTest.java
Passed: compiler/intrinsics/mathexact/MulExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/MulExactLConstantTest.java
Passed: compiler/intrinsics/object/TestHashCode.java
Passed: compiler/intrinsics/mathexact/SubExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactIRepeatTest.java
Passed: compiler/intrinsics/math/TestSignumIntrinsic.java
Passed: compiler/intrinsics/mathexact/SubExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactLNonConstantTest.java
Passed: compiler/loopopts/superword/Vec_MulAddS2I.java
Passed: compiler/intrinsics/mathexact/SubExactLConstantTest.java
Passed: compiler/intrinsics/sha/sanity/TestMD5Intrinsics.java
Passed: compiler/intrinsics/mathexact/MulExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoopDependentTest.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/TestCAEAntiDep.java
Passed: compiler/intrinsics/unsafe/TestUnsafeMismatchedArrayFieldAccess.java
Passed: compiler/intrinsics/unsafe/UnsafeGetAddressTest.java
Passed: compiler/intrinsics/sha/sanity/TestMD5MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256Intrinsics.java
Passed: compiler/intrinsics/unsafe/TestUnsafeUnalignedMismatchedAccesses.java
Passed: compiler/intrinsics/object/TestClone.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512MultiBlockIntrinsics.java
Passed: compiler/intrinsics/zip/TestCRC32.java
Passed: compiler/intrinsics/unsafe/UnsafeTwoCASLong.java
Passed: compiler/intrinsics/zip/TestCRC32C.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3Intrinsics.java
Passed: compiler/intrinsics/zip/TestFpRegsABI.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/AllocateUninitializedArray.java
Passed: compiler/intrinsics/zip/TestAdler32.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id1
Passed: compiler/intrinsics/unsafe/DirectByteBufferTest.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id0
Passed: compiler/intrinsics/sha/sanity/TestSHA256MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/TestDigest.java
Passed: compiler/codegen/aes/TestAESMain.java
Test results: passed: 164; skipped: 1; excluded: 1; did not meet platform requirements: 27
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_2
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_2           192   163     0     0    29   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/:jdk_vector', will run:
* jtreg:test/jdk:jdk_vector
Clean up dirs for jtreg_test_jdk_jdk_vector

Running test 'jtreg:test/jdk:jdk_vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Double128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   23.547 seconds
messages:
command: build Double128VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 00:34:57 IST 2025
Test directory:
  compile: Double128VectorTests
finished: Thu Apr 17 00:35:20 IST 2025
elapsed time (seconds): 23.547

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   23.543 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double128VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 00:34:57 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 8
Process id: 1982564
finished: Thu Apr 17 00:35:20 IST 2025
elapsed time (seconds): 23.543
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Double128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Double128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Double128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Double128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double128VectorTests 
TIME:   208.784 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Double128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double128VectorTests 
started: Thu Apr 17 00:35:20 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1983929
finished: Thu Apr 17 00:38:49 IST 2025
elapsed time (seconds): 208.784
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -7278062087237076880
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-7278062087237076880" to command line.
test Double128VectorTests.ABSDouble128VectorTests(double[-i * 5]): success [799ms]
test Double128VectorTests.ABSDouble128VectorTests(double[i * 5]): success [51ms]
test Double128VectorTests.ABSDouble128VectorTests(double[i + 1]): success [3ms]
test Double128VectorTests.ABSDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.ABSDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double128VectorTests.ABSDouble128VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[-i * 5], mask[i % 2]): success [245ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i * 5], mask[i % 2]): success [94ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i + 1], mask[i % 2]): success [4ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [53ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [26ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[-i * 5], mask[true]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i * 5], mask[true]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[cornerCaseValue(i)], mask[true]): success [6ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[-i * 5], mask[false]): success [2ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i * 5], mask[false]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i + 1], mask[false]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[-i * 5]): success [177ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[i * 5]): success [58ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[i + 1]): success [1ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.ACOSDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[cornerCaseValue(i)]): success [67ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], double[i * 5]): success [322ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], double[i + 1]): success [66ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [19ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [24ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [14ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [9ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [126ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [93ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [10ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [4ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [14ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[-i * 5]): success [129ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[i * 5]): success [0ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[i + 1]): success [87ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[-i * 5], mask[i % 2]): success [117ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i * 5], mask[i % 2]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i + 1], mask[i % 2]): success [92ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[-i * 5], mask[true]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i * 5], mask[true]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i + 1], mask[true]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [14ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [12ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[-i * 5], mask[false]): success [5ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i * 5], mask[false]): success [5ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i + 1], mask[false]): success [4ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [4ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [5ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [6ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[-i * 5]): success [15ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[i * 5]): success [2ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[i + 1]): success [2ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [3ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[-i * 5], mask[i % 2]): success [13ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i * 5], mask[i % 2]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i + 1], mask[i % 2]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[-i * 5], mask[true]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i * 5], mask[true]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [13ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[-i * 5], mask[false]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i * 5], mask[false]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.ASINDouble128VectorTests(double[-i * 5]): success [139ms]
test Double128VectorTests.ASINDouble128VectorTests(double[i * 5]): success [87ms]
test Double128VectorTests.ASINDouble128VectorTests(double[i + 1]): success [2ms]
test Double128VectorTests.ASINDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.ASINDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.ASINDouble128VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], double[i * 5]): success [204ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], double[i + 1]): success [82ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [5ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [4ms]
test Double128VectorTests.ATANDouble128VectorTests(double[-i * 5]): success [89ms]
test Double128VectorTests.ATANDouble128VectorTests(double[i * 5]): success [61ms]
test Double128VectorTests.ATANDouble128VectorTests(double[i + 1]): success [2ms]
test Double128VectorTests.ATANDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.ATANDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.ATANDouble128VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[-i * 5]): success [132ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[i * 5]): success [70ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.BroadcastDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.BroadcastLongDouble128VectorTestsSmokeTest(double[-i * 5]): success [3ms]
test Double128VectorTests.BroadcastLongDouble128VectorTestsSmokeTest(double[i * 5]): success [3ms]
test Double128VectorTests.BroadcastLongDouble128VectorTestsSmokeTest(double[i + 1]): success [3ms]
test Double128VectorTests.BroadcastLongDouble128VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [3ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[-i * 5]): success [123ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[i * 5]): success [96ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.CBRTDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double128VectorTests.COSDouble128VectorTests(double[-i * 5]): success [66ms]
test Double128VectorTests.COSDouble128VectorTests(double[i * 5]): success [83ms]
test Double128VectorTests.COSDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.COSDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [60ms]
test Double128VectorTests.COSDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.COSDouble128VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.COSHDouble128VectorTests(double[-i * 5]): success [175ms]
test Double128VectorTests.COSHDouble128VectorTests(double[i * 5]): success [63ms]
test Double128VectorTests.COSHDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.COSHDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.COSHDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.COSHDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], double[i * 5]): success [198ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], double[i + 1]): success [79ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [43ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [72ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [19ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[i]): success [373ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[i - length / 2]): success [165ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[i + 1]): success [107ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[i - 2]): success [74ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[zigZag(i)]): success [75ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[cornerCaseValue(i)]): success [75ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[i]): success [102ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[i - length / 2]): success [112ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[i + 1]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[i - 2]): success [70ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[zigZag(i)]): success [75ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [83ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[i]): success [70ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[i - length / 2]): success [70ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[i + 1]): success [70ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[i - 2]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[zigZag(i)]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [84ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[i]): success [72ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[i - length / 2]): success [70ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[i + 1]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[i - 2]): success [72ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[zigZag(i)]): success [72ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[i]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[i - length / 2]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[i + 1]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[i - 2]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[zigZag(i)]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[i]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [73ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [17ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [4ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [4ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [4ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [4ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [5ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [10ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [82ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [71ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [2ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[true]): success [1ms]
test Double128V

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

dcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[-i * 5]): success [0ms]
test Double128VectorTests.fmaDouble128VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[i * 5]): success [36ms]
test Double128VectorTests.fmaDouble128VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[i + 1]): success [0ms]
test Double128VectorTests.fmaDouble128VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.fmaDouble128VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.fmaDouble128VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.getDouble128VectorTests(double[-i * 5]): success [5ms]
test Double128VectorTests.getDouble128VectorTests(double[i * 5]): success [102ms]
test Double128VectorTests.getDouble128VectorTests(double[i + 1]): success [1ms]
test Double128VectorTests.getDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.getDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.getDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[-i * 5]): success [40ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[i + 1]): success [7ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [8ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [2ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(0): success [81ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(-1): success [27ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(1): success [19ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(2): success [2ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(-2): success [3ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(0): success [3ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(-1): success [3ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(1): success [2ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(2): success [4ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(-2): success [2ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(0): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(1): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(32): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(37): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(1024): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(1025): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(1029): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(0): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(1): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(32): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(37): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(1024): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(1025): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(1029): success [0ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[i]): success [217ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[i - length / 2]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[i + 1]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[i - 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[zigZag(i)]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[cornerCaseValue(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[i]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[i - length / 2]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[i + 1]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[i - 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[zigZag(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [76ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[i]): success [68ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[i - length / 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[i + 1]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[i - 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[zigZag(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[i]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[i - length / 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[i + 1]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[i - 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[zigZag(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[i]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[i - length / 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[i + 1]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[i - 2]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[zigZag(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[i]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [78ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [70ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [69ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[i]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [9ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [56ms]
test Double128VectorTests.maskAndDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Double128VectorTests.maskAndDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskAndNotDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Double128VectorTests.maskAndNotDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskCompressDouble128VectorTestsSmokeTest(mask[i % 2]): success [222ms]
test Double128VectorTests.maskCompressDouble128VectorTestsSmokeTest(mask[true]): success [99ms]
test Double128VectorTests.maskCompressDouble128VectorTestsSmokeTest(mask[false]): success [63ms]
test Double128VectorTests.maskEqDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Double128VectorTests.maskEqDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskEqualsDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Double128VectorTests.maskEqualsDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskFirstTrueDouble128VectorTestsSmokeTest(mask[i % 2]): success [89ms]
test Double128VectorTests.maskFirstTrueDouble128VectorTestsSmokeTest(mask[true]): success [64ms]
test Double128VectorTests.maskFirstTrueDouble128VectorTestsSmokeTest(mask[false]): success [24ms]
test Double128VectorTests.maskFromToLongDouble128VectorTestsSmokeTest(-1): success [58ms]
test Double128VectorTests.maskFromToLongDouble128VectorTestsSmokeTest(0): success [0ms]
test Double128VectorTests.maskFromToLongDouble128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Double128VectorTests.maskFromToLongDouble128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Double128VectorTests.maskHashCodeDouble128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Double128VectorTests.maskHashCodeDouble128VectorTestsSmokeTest(mask[true]): success [0ms]
test Double128VectorTests.maskHashCodeDouble128VectorTestsSmokeTest(mask[false]): success [0ms]
test Double128VectorTests.maskLastTrueDouble128VectorTestsSmokeTest(mask[i % 2]): success [75ms]
test Double128VectorTests.maskLastTrueDouble128VectorTestsSmokeTest(mask[true]): success [57ms]
test Double128VectorTests.maskLastTrueDouble128VectorTestsSmokeTest(mask[false]): success [41ms]
test Double128VectorTests.maskOrDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [62ms]
test Double128VectorTests.maskOrDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskTrueCountDouble128VectorTestsSmokeTest(mask[i % 2]): success [32ms]
test Double128VectorTests.maskTrueCountDouble128VectorTestsSmokeTest(mask[true]): success [76ms]
test Double128VectorTests.maskTrueCountDouble128VectorTestsSmokeTest(mask[false]): success [24ms]
test Double128VectorTests.maskXorDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Double128VectorTests.maskXorDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], double[i * 5]): success [6ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [54ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], double[i * 5]): success [7ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [7ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [5ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.negDouble128VectorTests(double[-i * 5]): success [14ms]
test Double128VectorTests.negDouble128VectorTests(double[i * 5]): success [48ms]
test Double128VectorTests.negDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.negDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.negDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.negDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], double[i * 5]): success [25ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], double[i + 1]): success [71ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [13ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.shuffleEqualsDouble128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [760ms]
test Double128VectorTests.shuffleEqualsDouble128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [26ms]
test Double128VectorTests.shuffleMiscellaneousDouble128VectorTestsSmokeTest(shuffle[random]): success [30ms]
test Double128VectorTests.shuffleTest(): success [880ms]
test Double128VectorTests.shuffleToStringDouble128VectorTestsSmokeTest(shuffle[random]): success [47ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[i * 5]): success [898ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[i + 1]): success [385ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [179ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [162ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [251ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [235ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [416ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [154ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [146ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [168ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [145ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [211ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [144ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [142ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [143ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [143ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [144ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [142ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [141ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [229ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[-i * 5]): success [330ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[i * 5]): success [290ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[i + 1]): success [137ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [144ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [147ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[cornerCaseValue(i)]): success [137ms]
test Double128VectorTests.smokeTest1(): success [0ms]
test Double128VectorTests.smokeTest2(): success [47ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[-i * 5]): success [15ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[i * 5]): success [54ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[i + 1]): success [1ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.sqrtDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], double[i * 5]): success [8ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [7ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [37ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [8ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.toIntArrayDouble128VectorTestsSmokeTest(double[-i * 5]): success [6ms]
test Double128VectorTests.toIntArrayDouble128VectorTestsSmokeTest(double[i * 5]): success [6ms]
test Double128VectorTests.toIntArrayDouble128VectorTestsSmokeTest(double[i + 1]): success [6ms]
test Double128VectorTests.toIntArrayDouble128VectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [6ms]
test Double128VectorTests.toLongArrayDouble128VectorTestsSmokeTest(double[-i * 5]): success [0ms]
test Double128VectorTests.toLongArrayDouble128VectorTestsSmokeTest(double[i * 5]): success [4ms]
test Double128VectorTests.toLongArrayDouble128VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double128VectorTests.toLongArrayDouble128VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[-i * 5]): success [2ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[i * 5]): success [1ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[i + 1]): success [8ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [19ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [8ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [20ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[i * 5]): success [351ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[i + 1]): success [424ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [138ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [181ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [90ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [720ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [655ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [283ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [265ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [282ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [286ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [284ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [235ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [302ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [276ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [249ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [278ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [453ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [276ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [276ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[-i * 5]): success [424ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[i * 5]): success [352ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[i + 1]): success [140ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [138ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [144ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[cornerCaseValue(i)]): success [143ms]
test Double128VectorTests.viewAsFloatingLanesTest(): success [28ms]
test Double128VectorTests.viewAsIntegeralLanesTest(): success [26ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], double[i * 5]): success [21ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], double[i + 1]): success [90ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]

===============================================
jdk/incubator/vector/Double128VectorTests.java
Total tests run: 3209, Passes: 3208, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Double128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Double128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Double128VectorTests.d/testng.0.jta jdk/incubator/vector/Double128VectorTests.java false Double128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Double256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   8.189 seconds
messages:
command: build Double256VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 00:35:14 IST 2025
Test directory:
  compile: Double256VectorTests
finished: Thu Apr 17 00:35:22 IST 2025
elapsed time (seconds): 8.189

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   8.188 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double256VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 00:35:14 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 1
Process id: 1982143
finished: Thu Apr 17 00:35:22 IST 2025
elapsed time (seconds): 8.188
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Double256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Double256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Double256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Double256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Double256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Double256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Double256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double256VectorTests 
TIME:   207.463 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Double256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double256VectorTests 
started: Thu Apr 17 00:35:22 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1984020
finished: Thu Apr 17 00:38:49 IST 2025
elapsed time (seconds): 207.463
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 2825418036191366469
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=2825418036191366469" to command line.
test Double256VectorTests.ABSDouble256VectorTests(double[-i * 5]): success [722ms]
test Double256VectorTests.ABSDouble256VectorTests(double[i * 5]): success [6ms]
test Double256VectorTests.ABSDouble256VectorTests(double[i + 1]): success [49ms]
test Double256VectorTests.ABSDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [5ms]
test Double256VectorTests.ABSDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [5ms]
test Double256VectorTests.ABSDouble256VectorTests(double[cornerCaseValue(i)]): success [5ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[-i * 5], mask[i % 2]): success [302ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[i * 5], mask[i % 2]): success [3ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[i + 1], mask[i % 2]): success [69ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[-i * 5], mask[true]): success [2ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[i * 5], mask[true]): success [1ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[i + 1], mask[true]): success [1ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[cornerCaseValue(i)], mask[true]): success [5ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[-i * 5], mask[false]): success [1ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[i * 5], mask[false]): success [2ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[i + 1], mask[false]): success [2ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double256VectorTests.ABSMaskedDouble256VectorTests(double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double256VectorTests.ACOSDouble256VectorTests(double[-i * 5]): success [201ms]
test Double256VectorTests.ACOSDouble256VectorTests(double[i * 5]): success [4ms]
test Double256VectorTests.ACOSDouble256VectorTests(double[i + 1]): success [61ms]
test Double256VectorTests.ACOSDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [5ms]
test Double256VectorTests.ACOSDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [3ms]
test Double256VectorTests.ACOSDouble256VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double256VectorTests.ADDDouble256VectorTests(double[-i * 5], double[i * 5]): success [275ms]
test Double256VectorTests.ADDDouble256VectorTests(double[-i * 5], double[i + 1]): success [6ms]
test Double256VectorTests.ADDDouble256VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [66ms]
test Double256VectorTests.ADDDouble256VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [4ms]
test Double256VectorTests.ADDDouble256VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [4ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [18ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [22ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [9ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [6ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [162ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [4ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [72ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [3ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [2ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [3ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [2ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [2ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double256VectorTests.ADDDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double256VectorTests.ADDReduceDouble256VectorTests(double[-i * 5]): success [98ms]
test Double256VectorTests.ADDReduceDouble256VectorTests(double[i * 5]): success [73ms]
test Double256VectorTests.ADDReduceDouble256VectorTests(double[i + 1]): success [2ms]
test Double256VectorTests.ADDReduceDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double256VectorTests.ADDReduceDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double256VectorTests.ADDReduceDouble256VectorTests(double[cornerCaseValue(i)]): success [26ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[-i * 5], mask[i % 2]): success [71ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[i * 5], mask[i % 2]): success [92ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[i + 1], mask[i % 2]): success [3ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[-i * 5], mask[true]): success [5ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[i * 5], mask[true]): success [5ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[i + 1], mask[true]): success [5ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [4ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [4ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [5ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[-i * 5], mask[false]): success [5ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[i * 5], mask[false]): success [5ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[i + 1], mask[false]): success [13ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [3ms]
test Double256VectorTests.ADDReduceDouble256VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [4ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTests(double[-i * 5]): success [10ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTests(double[i * 5]): success [1ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTests(double[i + 1]): success [2ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [3ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[-i * 5], mask[i % 2]): success [10ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[i * 5], mask[i % 2]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[i + 1], mask[i % 2]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[-i * 5], mask[true]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[i * 5], mask[true]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[i + 1], mask[true]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[-i * 5], mask[false]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[i * 5], mask[false]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[i + 1], mask[false]): success [10ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double256VectorTests.ADDReduceLongDouble256VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double256VectorTests.ASINDouble256VectorTests(double[-i * 5]): success [174ms]
test Double256VectorTests.ASINDouble256VectorTests(double[i * 5]): success [4ms]
test Double256VectorTests.ASINDouble256VectorTests(double[i + 1]): success [62ms]
test Double256VectorTests.ASINDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test Double256VectorTests.ASINDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [4ms]
test Double256VectorTests.ASINDouble256VectorTests(double[cornerCaseValue(i)]): success [4ms]
test Double256VectorTests.ATAN2Double256VectorTests(double[-i * 5], double[i * 5]): success [322ms]
test Double256VectorTests.ATAN2Double256VectorTests(double[-i * 5], double[i + 1]): success [28ms]
test Double256VectorTests.ATAN2Double256VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [88ms]
test Double256VectorTests.ATAN2Double256VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [31ms]
test Double256VectorTests.ATAN2Double256VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [3ms]
test Double256VectorTests.ATANDouble256VectorTests(double[-i * 5]): success [85ms]
test Double256VectorTests.ATANDouble256VectorTests(double[i * 5]): success [3ms]
test Double256VectorTests.ATANDouble256VectorTests(double[i + 1]): success [61ms]
test Double256VectorTests.ATANDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [8ms]
test Double256VectorTests.ATANDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [9ms]
test Double256VectorTests.ATANDouble256VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double256VectorTests.BroadcastDouble256VectorTests(double[-i * 5]): success [93ms]
test Double256VectorTests.BroadcastDouble256VectorTests(double[i * 5]): success [59ms]
test Double256VectorTests.BroadcastDouble256VectorTests(double[i + 1]): success [108ms]
test Double256VectorTests.BroadcastDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [44ms]
test Double256VectorTests.BroadcastDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [48ms]
test Double256VectorTests.BroadcastDouble256VectorTests(double[cornerCaseValue(i)]): success [44ms]
test Double256VectorTests.BroadcastLongDouble256VectorTestsSmokeTest(double[-i * 5]): success [3ms]
test Double256VectorTests.BroadcastLongDouble256VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double256VectorTests.BroadcastLongDouble256VectorTestsSmokeTest(double[i + 1]): success [2ms]
test Double256VectorTests.BroadcastLongDouble256VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [2ms]
test Double256VectorTests.CBRTDouble256VectorTests(double[-i * 5]): success [134ms]
test Double256VectorTests.CBRTDouble256VectorTests(double[i * 5]): success [62ms]
test Double256VectorTests.CBRTDouble256VectorTests(double[i + 1]): success [54ms]
test Double256VectorTests.CBRTDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double256VectorTests.CBRTDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [63ms]
test Double256VectorTests.CBRTDouble256VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double256VectorTests.COSDouble256VectorTests(double[-i * 5]): success [92ms]
test Double256VectorTests.COSDouble256VectorTests(double[i * 5]): success [6ms]
test Double256VectorTests.COSDouble256VectorTests(double[i + 1]): success [54ms]
test Double256VectorTests.COSDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double256VectorTests.COSDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [3ms]
test Double256VectorTests.COSDouble256VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double256VectorTests.COSHDouble256VectorTests(double[-i * 5]): success [151ms]
test Double256VectorTests.COSHDouble256VectorTests(double[i * 5]): success [4ms]
test Double256VectorTests.COSHDouble256VectorTests(double[i + 1]): success [61ms]
test Double256VectorTests.COSHDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double256VectorTests.COSHDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [69ms]
test Double256VectorTests.COSHDouble256VectorTests(double[cornerCaseValue(i)]): success [6ms]
test Double256VectorTests.DIVDouble256VectorTests(double[-i * 5], double[i * 5]): success [244ms]
test Double256VectorTests.DIVDouble256VectorTests(double[-i * 5], double[i + 1]): success [4ms]
test Double256VectorTests.DIVDouble256VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [68ms]
test Double256VectorTests.DIVDouble256VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [3ms]
test Double256VectorTests.DIVDouble256VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [3ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [38ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [5ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [110ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [3ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [3ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [3ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [3ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [3ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [3ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [3ms]
test Double256VectorTests.DIVDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double256VectorTests.EQDouble256VectorTests(double[i], double[i]): success [295ms]
test Double256VectorTests.EQDouble256VectorTests(double[i], double[i - length / 2]): success [180ms]
test Double256VectorTests.EQDouble256VectorTests(double[i], double[i + 1]): success [89ms]
test Double256VectorTests.EQDouble256VectorTests(double[i], double[i - 2]): success [64ms]
test Double256VectorTests.EQDouble256VectorTests(double[i], double[zigZag(i)]): success [55ms]
test Double256VectorTests.EQDouble256VectorTests(double[i], double[cornerCaseValue(i)]): success [55ms]
test Double256VectorTests.EQDouble256VectorTests(double[i - length / 2], double[i]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[i - length / 2], double[i - length / 2]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[i - length / 2], double[i + 1]): success [85ms]
test Double256VectorTests.EQDouble256VectorTests(double[i - length / 2], double[i - 2]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[i - length / 2], double[zigZag(i)]): success [52ms]
test Double256VectorTests.EQDouble256VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[i + 1], double[i]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[i + 1], double[i - length / 2]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[i + 1], double[i + 1]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[i + 1], double[i - 2]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[i + 1], double[zigZag(i)]): success [52ms]
test Double256VectorTests.EQDouble256VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [53ms]
test Double256VectorTests.EQDouble256VectorTests(double[i - 2], double[i]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[i - 2], double[i - length / 2]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[i - 2], double[i + 1]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[i - 2], double[i - 2]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[i - 2], double[zigZag(i)]): success [55ms]
test Double256VectorTests.EQDouble256VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[zigZag(i)], double[i]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[zigZag(i)], double[i - length / 2]): success [89ms]
test Double256VectorTests.EQDouble256VectorTests(double[zigZag(i)], double[i + 1]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[zigZag(i)], double[i - 2]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[zigZag(i)], double[zigZag(i)]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[cornerCaseValue(i)], double[i]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [51ms]
test Double256VectorTests.EQDouble256VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [50ms]
test Double256VectorTests.EQDouble256VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [51ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [16ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [3ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [3ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [3ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [4ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [4ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [77ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [41ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double256VectorTests.EQDouble256VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[true]): success [2ms]
test Double256VectorT

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

Test(double[-i * 5], double[cornerCaseValue(i)], double[0.01 + (i / (i + 1))]): success [2ms]
test Double256VectorTests.fmaDouble256VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], AbstractVectorTest$1@25daae7f): success [2ms]
test Double256VectorTests.fmaDouble256VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.getDouble256VectorTests(double[-i * 5]): success [5ms]
test Double256VectorTests.getDouble256VectorTests(double[i * 5]): success [4ms]
test Double256VectorTests.getDouble256VectorTests(double[i + 1]): success [70ms]
test Double256VectorTests.getDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double256VectorTests.getDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double256VectorTests.getDouble256VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.hashCodeDouble256VectorTestsSmokeTest(double[-i * 5]): success [37ms]
test Double256VectorTests.hashCodeDouble256VectorTestsSmokeTest(double[i * 5]): success [1ms]
test Double256VectorTests.hashCodeDouble256VectorTestsSmokeTest(double[i + 1]): success [1ms]
test Double256VectorTests.hashCodeDouble256VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [1ms]
test Double256VectorTests.hashCodeDouble256VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [5ms]
test Double256VectorTests.hashCodeDouble256VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.indexInRangeDouble256VectorTestsSmokeTest(0): success [73ms]
test Double256VectorTests.indexInRangeDouble256VectorTestsSmokeTest(-1): success [18ms]
test Double256VectorTests.indexInRangeDouble256VectorTestsSmokeTest(1): success [19ms]
test Double256VectorTests.indexInRangeDouble256VectorTestsSmokeTest(2): success [2ms]
test Double256VectorTests.indexInRangeDouble256VectorTestsSmokeTest(-2): success [2ms]
test Double256VectorTests.indexInRangeLongDouble256VectorTestsSmokeTest(0): success [2ms]
test Double256VectorTests.indexInRangeLongDouble256VectorTestsSmokeTest(-1): success [2ms]
test Double256VectorTests.indexInRangeLongDouble256VectorTestsSmokeTest(1): success [2ms]
test Double256VectorTests.indexInRangeLongDouble256VectorTestsSmokeTest(2): success [3ms]
test Double256VectorTests.indexInRangeLongDouble256VectorTestsSmokeTest(-2): success [2ms]
test Double256VectorTests.loopBoundDouble256VectorTestsSmokeTest(0): success [0ms]
test Double256VectorTests.loopBoundDouble256VectorTestsSmokeTest(1): success [0ms]
test Double256VectorTests.loopBoundDouble256VectorTestsSmokeTest(32): success [0ms]
test Double256VectorTests.loopBoundDouble256VectorTestsSmokeTest(37): success [0ms]
test Double256VectorTests.loopBoundDouble256VectorTestsSmokeTest(1024): success [0ms]
test Double256VectorTests.loopBoundDouble256VectorTestsSmokeTest(1025): success [0ms]
test Double256VectorTests.loopBoundDouble256VectorTestsSmokeTest(1029): success [0ms]
test Double256VectorTests.loopBoundLongDouble256VectorTestsSmokeTest(0): success [0ms]
test Double256VectorTests.loopBoundLongDouble256VectorTestsSmokeTest(1): success [0ms]
test Double256VectorTests.loopBoundLongDouble256VectorTestsSmokeTest(32): success [0ms]
test Double256VectorTests.loopBoundLongDouble256VectorTestsSmokeTest(37): success [0ms]
test Double256VectorTests.loopBoundLongDouble256VectorTestsSmokeTest(1024): success [0ms]
test Double256VectorTests.loopBoundLongDouble256VectorTestsSmokeTest(1025): success [0ms]
test Double256VectorTests.loopBoundLongDouble256VectorTestsSmokeTest(1029): success [0ms]
test Double256VectorTests.ltDouble256VectorTests(double[i], double[i]): success [117ms]
test Double256VectorTests.ltDouble256VectorTests(double[i], double[i - length / 2]): success [54ms]
test Double256VectorTests.ltDouble256VectorTests(double[i], double[i + 1]): success [60ms]
test Double256VectorTests.ltDouble256VectorTests(double[i], double[i - 2]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i], double[zigZag(i)]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i], double[cornerCaseValue(i)]): success [64ms]
test Double256VectorTests.ltDouble256VectorTests(double[i - length / 2], double[i]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i - length / 2], double[i - length / 2]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i - length / 2], double[i + 1]): success [52ms]
test Double256VectorTests.ltDouble256VectorTests(double[i - length / 2], double[i - 2]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i - length / 2], double[zigZag(i)]): success [116ms]
test Double256VectorTests.ltDouble256VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i + 1], double[i]): success [71ms]
test Double256VectorTests.ltDouble256VectorTests(double[i + 1], double[i - length / 2]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i + 1], double[i + 1]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i + 1], double[i - 2]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i + 1], double[zigZag(i)]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i - 2], double[i]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i - 2], double[i - length / 2]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i - 2], double[i + 1]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i - 2], double[i - 2]): success [52ms]
test Double256VectorTests.ltDouble256VectorTests(double[i - 2], double[zigZag(i)]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[zigZag(i)], double[i]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[zigZag(i)], double[i - length / 2]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[zigZag(i)], double[i + 1]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[zigZag(i)], double[i - 2]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[zigZag(i)], double[zigZag(i)]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[cornerCaseValue(i)], double[i]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [53ms]
test Double256VectorTests.ltDouble256VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [53ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i], double[i]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [1ms]
test Double256VectorTests.ltDouble256VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.maskAndDouble256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Double256VectorTests.maskAndDouble256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double256VectorTests.maskAndNotDouble256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Double256VectorTests.maskAndNotDouble256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double256VectorTests.maskCompressDouble256VectorTestsSmokeTest(mask[i % 2]): success [321ms]
test Double256VectorTests.maskCompressDouble256VectorTestsSmokeTest(mask[true]): success [166ms]
test Double256VectorTests.maskCompressDouble256VectorTestsSmokeTest(mask[false]): success [164ms]
test Double256VectorTests.maskEqDouble256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Double256VectorTests.maskEqDouble256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double256VectorTests.maskEqualsDouble256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Double256VectorTests.maskEqualsDouble256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double256VectorTests.maskFirstTrueDouble256VectorTestsSmokeTest(mask[i % 2]): success [89ms]
test Double256VectorTests.maskFirstTrueDouble256VectorTestsSmokeTest(mask[true]): success [62ms]
test Double256VectorTests.maskFirstTrueDouble256VectorTestsSmokeTest(mask[false]): success [30ms]
test Double256VectorTests.maskFromToLongDouble256VectorTestsSmokeTest(-1): success [55ms]
test Double256VectorTests.maskFromToLongDouble256VectorTestsSmokeTest(0): success [0ms]
test Double256VectorTests.maskFromToLongDouble256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Double256VectorTests.maskFromToLongDouble256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Double256VectorTests.maskHashCodeDouble256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Double256VectorTests.maskHashCodeDouble256VectorTestsSmokeTest(mask[true]): success [0ms]
test Double256VectorTests.maskHashCodeDouble256VectorTestsSmokeTest(mask[false]): success [0ms]
test Double256VectorTests.maskLastTrueDouble256VectorTestsSmokeTest(mask[i % 2]): success [81ms]
test Double256VectorTests.maskLastTrueDouble256VectorTestsSmokeTest(mask[true]): success [63ms]
test Double256VectorTests.maskLastTrueDouble256VectorTestsSmokeTest(mask[false]): success [45ms]
test Double256VectorTests.maskOrDouble256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [47ms]
test Double256VectorTests.maskOrDouble256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double256VectorTests.maskTrueCountDouble256VectorTestsSmokeTest(mask[i % 2]): success [38ms]
test Double256VectorTests.maskTrueCountDouble256VectorTestsSmokeTest(mask[true]): success [63ms]
test Double256VectorTests.maskTrueCountDouble256VectorTestsSmokeTest(mask[false]): success [30ms]
test Double256VectorTests.maskXorDouble256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Double256VectorTests.maskXorDouble256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double256VectorTests.maxDouble256VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double256VectorTests.maxDouble256VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double256VectorTests.maxDouble256VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double256VectorTests.maxDouble256VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double256VectorTests.maxDouble256VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double256VectorTests.maxDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test Double256VectorTests.maxDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double256VectorTests.maxDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double256VectorTests.maxDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double256VectorTests.maxDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double256VectorTests.minDouble256VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double256VectorTests.minDouble256VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double256VectorTests.minDouble256VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double256VectorTests.minDouble256VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double256VectorTests.minDouble256VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double256VectorTests.minDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test Double256VectorTests.minDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double256VectorTests.minDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double256VectorTests.minDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double256VectorTests.minDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double256VectorTests.mulDouble256VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double256VectorTests.mulDouble256VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double256VectorTests.mulDouble256VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double256VectorTests.mulDouble256VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double256VectorTests.mulDouble256VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [5ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double256VectorTests.mulDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double256VectorTests.negDouble256VectorTests(double[-i * 5]): success [13ms]
test Double256VectorTests.negDouble256VectorTests(double[i * 5]): success [3ms]
test Double256VectorTests.negDouble256VectorTests(double[i + 1]): success [45ms]
test Double256VectorTests.negDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double256VectorTests.negDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double256VectorTests.negDouble256VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.powDouble256VectorTests(double[-i * 5], double[i * 5]): success [27ms]
test Double256VectorTests.powDouble256VectorTests(double[-i * 5], double[i + 1]): success [5ms]
test Double256VectorTests.powDouble256VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [77ms]
test Double256VectorTests.powDouble256VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [2ms]
test Double256VectorTests.powDouble256VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [2ms]
test Double256VectorTests.powDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [13ms]
test Double256VectorTests.powDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double256VectorTests.powDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double256VectorTests.powDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double256VectorTests.powDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double256VectorTests.shuffleEqualsDouble256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [271ms]
test Double256VectorTests.shuffleEqualsDouble256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [23ms]
test Double256VectorTests.shuffleMiscellaneousDouble256VectorTestsSmokeTest(shuffle[random]): success [10ms]
test Double256VectorTests.shuffleTest(): success [1031ms]
test Double256VectorTests.shuffleToStringDouble256VectorTestsSmokeTest(shuffle[random]): success [43ms]
test Double256VectorTests.sliceBinaryDouble256VectorTestsBinary(double[-i * 5], double[i * 5]): success [1278ms]
test Double256VectorTests.sliceBinaryDouble256VectorTestsBinary(double[-i * 5], double[i + 1]): success [430ms]
test Double256VectorTests.sliceBinaryDouble256VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [769ms]
test Double256VectorTests.sliceBinaryDouble256VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [421ms]
test Double256VectorTests.sliceBinaryDouble256VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [404ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [604ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [456ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [1387ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [462ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [455ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [475ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [534ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [487ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [471ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [529ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [546ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [462ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [451ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [451ms]
test Double256VectorTests.sliceDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [452ms]
test Double256VectorTests.sliceUnaryDouble256VectorTests(double[-i * 5]): success [604ms]
test Double256VectorTests.sliceUnaryDouble256VectorTests(double[i * 5]): success [373ms]
test Double256VectorTests.sliceUnaryDouble256VectorTests(double[i + 1]): success [588ms]
test Double256VectorTests.sliceUnaryDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [520ms]
test Double256VectorTests.sliceUnaryDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [401ms]
test Double256VectorTests.sliceUnaryDouble256VectorTests(double[cornerCaseValue(i)]): success [536ms]
test Double256VectorTests.smokeTest1(): success [0ms]
test Double256VectorTests.smokeTest2(): success [47ms]
test Double256VectorTests.sqrtDouble256VectorTests(double[-i * 5]): success [17ms]
test Double256VectorTests.sqrtDouble256VectorTests(double[i * 5]): success [3ms]
test Double256VectorTests.sqrtDouble256VectorTests(double[i + 1]): success [70ms]
test Double256VectorTests.sqrtDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double256VectorTests.sqrtDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double256VectorTests.sqrtDouble256VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double256VectorTests.subDouble256VectorTests(double[-i * 5], double[i * 5]): success [8ms]
test Double256VectorTests.subDouble256VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double256VectorTests.subDouble256VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double256VectorTests.subDouble256VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double256VectorTests.subDouble256VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [9ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [53ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [61ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [8ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double256VectorTests.subDouble256VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double256VectorTests.subDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double256VectorTests.toIntArrayDouble256VectorTestsSmokeTest(double[-i * 5]): success [6ms]
test Double256VectorTests.toIntArrayDouble256VectorTestsSmokeTest(double[i * 5]): success [7ms]
test Double256VectorTests.toIntArrayDouble256VectorTestsSmokeTest(double[i + 1]): success [5ms]
test Double256VectorTests.toIntArrayDouble256VectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [5ms]
test Double256VectorTests.toLongArrayDouble256VectorTestsSmokeTest(double[-i * 5]): success [0ms]
test Double256VectorTests.toLongArrayDouble256VectorTestsSmokeTest(double[i * 5]): success [0ms]
test Double256VectorTests.toLongArrayDouble256VectorTestsSmokeTest(double[i + 1]): success [2ms]
test Double256VectorTests.toLongArrayDouble256VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double256VectorTests.toStringDouble256VectorTestsSmokeTest(double[-i * 5]): success [1ms]
test Double256VectorTests.toStringDouble256VectorTestsSmokeTest(double[i * 5]): success [1ms]
test Double256VectorTests.toStringDouble256VectorTestsSmokeTest(double[i + 1]): success [1ms]
test Double256VectorTests.toStringDouble256VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [18ms]
test Double256VectorTests.toStringDouble256VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [9ms]
test Double256VectorTests.toStringDouble256VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [15ms]
test Double256VectorTests.unsliceBinaryDouble256VectorTestsBinary(double[-i * 5], double[i * 5]): success [696ms]
test Double256VectorTests.unsliceBinaryDouble256VectorTestsBinary(double[-i * 5], double[i + 1]): success [390ms]
test Double256VectorTests.unsliceBinaryDouble256VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [736ms]
test Double256VectorTests.unsliceBinaryDouble256VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [390ms]
test Double256VectorTests.unsliceBinaryDouble256VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [390ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [1525ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [1144ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [1889ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [816ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [787ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [794ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [790ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [788ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [783ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [816ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [781ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [818ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [791ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [826ms]
test Double256VectorTests.unsliceDouble256VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1303ms]
test Double256VectorTests.unsliceUnaryDouble256VectorTests(double[-i * 5]): success [604ms]
test Double256VectorTests.unsliceUnaryDouble256VectorTests(double[i * 5]): success [405ms]
test Double256VectorTests.unsliceUnaryDouble256VectorTests(double[i + 1]): success [592ms]
test Double256VectorTests.unsliceUnaryDouble256VectorTests(double[0.01 + (i / (i + 1))]): success [384ms]
test Double256VectorTests.unsliceUnaryDouble256VectorTests(AbstractVectorTest$1@25daae7f): success [381ms]
test Double256VectorTests.unsliceUnaryDouble256VectorTests(double[cornerCaseValue(i)]): success [382ms]
test Double256VectorTests.viewAsFloatingLanesTest(): success [21ms]
test Double256VectorTests.viewAsIntegeralLanesTest(): success [24ms]
test Double256VectorTests.withDouble256VectorTests(double[-i * 5], double[i * 5]): success [29ms]
test Double256VectorTests.withDouble256VectorTests(double[-i * 5], double[i + 1]): success [20ms]
test Double256VectorTests.withDouble256VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [129ms]
test Double256VectorTests.withDouble256VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [19ms]
test Double256VectorTests.withDouble256VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [19ms]

===============================================
jdk/incubator/vector/Double256VectorTests.java
Total tests run: 3209, Passes: 3208, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Double256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Double256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Double256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Double256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Double256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Double256VectorTests.d/testng.0.jta jdk/incubator/vector/Double256VectorTests.java false Double256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
TEST: jdk/incubator/vector/FloatMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.566 seconds
messages:
command: build FloatMaxVectorTests
reason: Named class compiled on demand
started: Thu Apr 17 00:38:42 IST 2025
Test directory:
  compile: FloatMaxVectorTests
finished: Thu Apr 17 00:38:44 IST 2025
elapsed time (seconds): 1.566

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.566 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/FloatMaxVectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 00:38:42 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 3
Process id: 1982199
finished: Thu Apr 17 00:38:44 IST 2025
elapsed time (seconds): 1.566
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/FloatMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/FloatMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/FloatMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/FloatMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/FloatMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/FloatMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation FloatMaxVectorTests 
TIME:   130.11 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation FloatMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation FloatMaxVectorTests 
started: Thu Apr 17 00:38:44 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1985349
finished: Thu Apr 17 00:40:54 IST 2025
elapsed time (seconds): 130.11
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -8040410310425937287
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-8040410310425937287" to command line.
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[-i * 5]): success [596ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[i * 5]): success [4ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[i + 1]): success [50ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [2ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[-i * 5], mask[i % 2]): success [237ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i * 5], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i + 1], mask[i % 2]): success [70ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[-i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[cornerCaseValue(i)], mask[true]): success [3ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[-i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[-i * 5]): success [194ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[i * 5]): success [3ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[i + 1]): success [63ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [4ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [236ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [4ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [61ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i * 5]): success [16ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [93ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [9ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [2ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [6ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [173ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [14ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [72ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[-i * 5]): success [90ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[i * 5]): success [85ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[i + 1]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[-i * 5], mask[i % 2]): success [63ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i * 5], mask[i % 2]): success [112ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[-i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[-i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i + 1], mask[false]): success [10ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[-i * 5]): success [10ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[i * 5]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[i + 1]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [2ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[cornerCaseValue(i)]): success [3ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[-i * 5], mask[i % 2]): success [9ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i * 5], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[-i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[-i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i + 1], mask[false]): success [10ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[false]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[-i * 5]): success [134ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[i * 5]): success [2ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[i + 1]): success [62ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], float[i * 5]): success [147ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], float[i + 1]): success [23ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [81ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [13ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [4ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[-i * 5]): success [77ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[i * 5]): success [3ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[i + 1]): success [61ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [5ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[-i * 5]): success [86ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[i * 5]): success [44ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[i + 1]): success [71ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.BroadcastLongFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [3ms]
test FloatMaxVectorTests.BroadcastLongFloatMaxVectorTestsSmokeTest(float[i * 5]): success [2ms]
test FloatMaxVectorTests.BroadcastLongFloatMaxVectorTestsSmokeTest(float[i + 1]): success [2ms]
test FloatMaxVectorTests.BroadcastLongFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[-i * 5]): success [112ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[i * 5]): success [52ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[i + 1]): success [62ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[-i * 5]): success [74ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[i * 5]): success [3ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[i + 1]): success [67ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[-i * 5]): success [136ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[i * 5]): success [3ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[i + 1]): success [61ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [199ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [3ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [60ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [36ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [4ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [67ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[i]): success [309ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[i - length / 2]): success [161ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[i + 1]): success [114ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[i - 2]): success [79ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[zigZag(i)]): success [83ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[cornerCaseValue(i)]): success [61ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[i]): success [56ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[i - length / 2]): success [53ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[i + 1]): success [83ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[i - 2]): success [53ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[zigZag(i)]): success [51ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [51ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[i]): success [51ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[i - length / 2]): success [51ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[i + 1]): success [51ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[i - 2]): success [51ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[zigZag(i)]): success [51ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[cornerCaseValue(i)]): success [51ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[i]): success [51ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[i - length / 2]): success [53ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[i + 1]): success [55ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[i - 2]): success [51ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[zigZag(i)]): success [66ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[i]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[i - length / 2]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[i + 1]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[i - 2]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[zigZag(i)]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[i]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[i + 1]): success [49ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - 2]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [49ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [50ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[i % 2]): success [15ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[i % 2]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[i % 2]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[i % 2]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[i % 2]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[i % 2]): success [4ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[i % 2]): success [4ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[true]): success [78ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[true]): success [40ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[true]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[true]): success [1ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[true]): success [24ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[false]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[false]): success [0ms]
test FloatMaxVector

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

, float[i * 5], mask[i % 2]): success [10ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [8ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [8ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[i]): success [160ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[i - length / 2]): success [51ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[i + 1]): success [81ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[i - 2]): success [68ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[zigZag(i)]): success [51ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[cornerCaseValue(i)]): success [58ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[i]): success [50ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[i - length / 2]): success [54ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[i + 1]): success [52ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[i - 2]): success [52ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[zigZag(i)]): success [68ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [92ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[i]): success [80ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[i - length / 2]): success [90ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[i + 1]): success [78ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[i - 2]): success [89ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[zigZag(i)]): success [89ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[cornerCaseValue(i)]): success [88ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[i]): success [82ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[i - length / 2]): success [59ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[i + 1]): success [56ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[i - 2]): success [59ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[zigZag(i)]): success [90ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[cornerCaseValue(i)]): success [57ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[i]): success [62ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[i - length / 2]): success [71ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[i + 1]): success [60ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[i - 2]): success [78ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[zigZag(i)]): success [72ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [58ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[i]): success [84ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [85ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[i + 1]): success [85ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - 2]): success [84ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [83ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [54ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[i]): success [1ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[-i * 5], mask[i % 2]): success [116ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i * 5], mask[i % 2]): success [42ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i + 1], mask[i % 2]): success [143ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [63ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[i % 2]): success [64ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[-i * 5], mask[true]): success [24ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[-i * 5], mask[false]): success [1ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i * 5], mask[false]): success [1ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i + 1], mask[false]): success [1ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[false]): success [2ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[cornerCaseValue(i)], mask[false]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[-i * 5]): success [8ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [3ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[-i * 5]): success [8ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[-i * 5]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[i * 5]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, AbstractVectorTest$1@12b45097): success [92ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [46ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[-i * 5]): success [6ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[i * 5]): success [7ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[i + 1]): success [98ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [71ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[i * 5]): success [2ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[i + 1]): success [2ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [2ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(AbstractVectorTest$1@12b45097): success [11ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(0): success [139ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(-1): success [36ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(1): success [38ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(2): success [3ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(-2): success [3ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(0): success [3ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(-1): success [3ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(1): success [3ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(2): success [3ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(-2): success [1ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(0): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(1): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(32): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(37): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(1024): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(1025): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(1029): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(0): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(1): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(32): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(37): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(1024): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(1025): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(1029): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[i]): success [132ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[i - length / 2]): success [92ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[i + 1]): success [69ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[i - 2]): success [62ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[zigZag(i)]): success [54ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[cornerCaseValue(i)]): success [77ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[i]): success [63ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[i - length / 2]): success [83ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[i + 1]): success [98ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[i - 2]): success [64ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[zigZag(i)]): success [68ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [86ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[i]): success [68ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[i - length / 2]): success [80ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[i + 1]): success [83ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[i - 2]): success [84ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[zigZag(i)]): success [84ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[cornerCaseValue(i)]): success [84ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[i]): success [83ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[i - length / 2]): success [83ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[i + 1]): success [84ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[i - 2]): success [84ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[zigZag(i)]): success [84ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[cornerCaseValue(i)]): success [84ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[i]): success [84ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[i - length / 2]): success [85ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[i + 1]): success [85ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[i - 2]): success [86ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[zigZag(i)]): success [85ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [84ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[i]): success [85ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [84ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[i + 1]): success [85ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - 2]): success [85ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [86ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [86ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[i]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[i - length / 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[i + 1]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[i - 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[zigZag(i)]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[i]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - length / 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[i + 1]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[zigZag(i)]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[i]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[i - length / 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[i + 1]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[i - 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[zigZag(i)]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[i]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[i - length / 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[i + 1]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[i - 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[zigZag(i)]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - length / 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i + 1]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.maskAndFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [24ms]
test FloatMaxVectorTests.maskAndFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskAndNotFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test FloatMaxVectorTests.maskAndNotFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskCompressFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [280ms]
test FloatMaxVectorTests.maskCompressFloatMaxVectorTestsSmokeTest(mask[true]): success [149ms]
test FloatMaxVectorTests.maskCompressFloatMaxVectorTestsSmokeTest(mask[false]): success [102ms]
test FloatMaxVectorTests.maskEqFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test FloatMaxVectorTests.maskEqFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskEqualsFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test FloatMaxVectorTests.maskEqualsFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskFirstTrueFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [126ms]
test FloatMaxVectorTests.maskFirstTrueFloatMaxVectorTestsSmokeTest(mask[true]): success [52ms]
test FloatMaxVectorTests.maskFirstTrueFloatMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test FloatMaxVectorTests.maskHashCodeFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test FloatMaxVectorTests.maskHashCodeFloatMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test FloatMaxVectorTests.maskHashCodeFloatMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test FloatMaxVectorTests.maskLastTrueFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [101ms]
test FloatMaxVectorTests.maskLastTrueFloatMaxVectorTestsSmokeTest(mask[true]): success [37ms]
test FloatMaxVectorTests.maskLastTrueFloatMaxVectorTestsSmokeTest(mask[false]): success [20ms]
test FloatMaxVectorTests.maskOrFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [56ms]
test FloatMaxVectorTests.maskOrFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskTrueCountFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [59ms]
test FloatMaxVectorTests.maskTrueCountFloatMaxVectorTestsSmokeTest(mask[true]): success [41ms]
test FloatMaxVectorTests.maskTrueCountFloatMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test FloatMaxVectorTests.maskXorFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test FloatMaxVectorTests.maskXorFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [9ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [7ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [8ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [8ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [7ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [7ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [9ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [7ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[-i * 5]): success [17ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[i * 5]): success [1ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[i + 1]): success [49ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [31ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [4ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [97ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [16ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.shuffleEqualsFloatMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [15ms]
test FloatMaxVectorTests.shuffleEqualsFloatMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [15ms]
test FloatMaxVectorTests.shuffleMiscellaneousFloatMaxVectorTestsSmokeTest(shuffle[random]): success [4ms]
test FloatMaxVectorTests.shuffleTest(): success [996ms]
test FloatMaxVectorTests.shuffleToStringFloatMaxVectorTestsSmokeTest(shuffle[random]): success [37ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[i * 5]): success [965ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[i + 1]): success [138ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [339ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], AbstractVectorTest$1@12b45097): success [153ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [124ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [192ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [101ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [382ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [113ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [122ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [91ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [221ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [123ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [106ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [120ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [110ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [118ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [258ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [165ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [155ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[-i * 5]): success [406ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[i * 5]): success [96ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[i + 1]): success [291ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [195ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [164ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[cornerCaseValue(i)]): success [163ms]
test FloatMaxVectorTests.smokeTest1(): success [0ms]
test FloatMaxVectorTests.smokeTest2(): success [99ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[-i * 5]): success [25ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[i * 5]): success [3ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[i + 1]): success [54ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [9ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [10ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [60ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [60ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [9ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [14ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[i * 5]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[i + 1]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [11ms]
test FloatMaxVectorTests.toIntArrayFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [12ms]
test FloatMaxVectorTests.toIntArrayFloatMaxVectorTestsSmokeTest(float[i * 5]): success [12ms]
test FloatMaxVectorTests.toIntArrayFloatMaxVectorTestsSmokeTest(float[i + 1]): success [18ms]
test FloatMaxVectorTests.toIntArrayFloatMaxVectorTestsSmokeTest(float[intCornerCaseValue(i)]): success [15ms]
test FloatMaxVectorTests.toLongArrayFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [1ms]
test FloatMaxVectorTests.toLongArrayFloatMaxVectorTestsSmokeTest(float[i * 5]): success [0ms]
test FloatMaxVectorTests.toLongArrayFloatMaxVectorTestsSmokeTest(float[i + 1]): success [4ms]
test FloatMaxVectorTests.toLongArrayFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [10ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[i * 5]): success [2ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[i + 1]): success [2ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [28ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(AbstractVectorTest$1@12b45097): success [2ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [42ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[i * 5]): success [471ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[i + 1]): success [175ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [325ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], AbstractVectorTest$1@12b45097): success [125ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [145ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [981ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [325ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [1059ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [360ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [325ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [277ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [313ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [287ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [315ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [338ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [571ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [350ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [290ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [331ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [312ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[-i * 5]): success [513ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[i * 5]): success [138ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[i + 1]): success [358ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [146ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [149ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[cornerCaseValue(i)]): success [173ms]
test FloatMaxVectorTests.viewAsFloatingLanesTest(): success [51ms]
test FloatMaxVectorTests.viewAsIntegeralLanesTest(): success [88ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [69ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [36ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [183ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [20ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [28ms]

===============================================
jdk/incubator/vector/FloatMaxVectorTests.java
Total tests run: 3211, Passes: 3210, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/FloatMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/FloatMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/FloatMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/FloatMaxVectorTests.d/testng.0.jta jdk/incubator/vector/FloatMaxVectorTests.java false FloatMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/Int128VectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
TEST: jdk/incubator/vector/Double64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   2.653 seconds
messages:
command: build Double64VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 00:35:50 IST 2025
Test directory:
  compile: Double64VectorTests
finished: Thu Apr 17 00:35:53 IST 2025
elapsed time (seconds): 2.653

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   2.652 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double64VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 00:35:50 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 7
Process id: 1982467
finished: Thu Apr 17 00:35:53 IST 2025
elapsed time (seconds): 2.652
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Double64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Double64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Double64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Double64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double64VectorTests 
TIME:   503.39 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Double64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double64VectorTests 
started: Thu Apr 17 00:35:53 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1984579
finished: Thu Apr 17 00:44:17 IST 2025
elapsed time (seconds): 503.39
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -7303916811783135378
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-7303916811783135378" to command line.
test Double64VectorTests.ABSDouble64VectorTests(double[-i * 5]): success [663ms]
test Double64VectorTests.ABSDouble64VectorTests(double[i * 5]): success [22ms]
test Double64VectorTests.ABSDouble64VectorTests(double[i + 1]): success [27ms]
test Double64VectorTests.ABSDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [6ms]
test Double64VectorTests.ABSDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [45ms]
test Double64VectorTests.ABSDouble64VectorTests(double[cornerCaseValue(i)]): success [8ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[-i * 5], mask[i % 2]): success [292ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i * 5], mask[i % 2]): success [3ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i + 1], mask[i % 2]): success [49ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [34ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[-i * 5], mask[true]): success [23ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i * 5], mask[true]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i + 1], mask[true]): success [5ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [6ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [7ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[cornerCaseValue(i)], mask[true]): success [9ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[-i * 5], mask[false]): success [134ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i * 5], mask[false]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i + 1], mask[false]): success [3ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [3ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[cornerCaseValue(i)], mask[false]): success [4ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[-i * 5]): success [146ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[i + 1]): success [43ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [29ms]
test Double64VectorTests.ACOSDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], double[i * 5]): success [279ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], double[i + 1]): success [37ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [60ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [17ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [6ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [25ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [11ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [6ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [45ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [63ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [106ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [29ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [8ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [30ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [41ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [5ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[-i * 5]): success [133ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[i * 5]): success [7ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[i + 1]): success [51ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [43ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [70ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[cornerCaseValue(i)]): success [7ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[-i * 5], mask[i % 2]): success [137ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i * 5], mask[i % 2]): success [5ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i + 1], mask[i % 2]): success [63ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [44ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [80ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[-i * 5], mask[true]): success [8ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i * 5], mask[true]): success [18ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i + 1], mask[true]): success [9ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [10ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[-i * 5], mask[false]): success [39ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i * 5], mask[false]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i + 1], mask[false]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [10ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[-i * 5]): success [11ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[i + 1]): success [2ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [3ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[-i * 5], mask[i % 2]): success [10ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i * 5], mask[i % 2]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i + 1], mask[i % 2]): success [4ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[-i * 5], mask[true]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i * 5], mask[true]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i + 1], mask[true]): success [5ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [28ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[-i * 5], mask[false]): success [5ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i * 5], mask[false]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [14ms]
test Double64VectorTests.ASINDouble64VectorTests(double[-i * 5]): success [150ms]
test Double64VectorTests.ASINDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.ASINDouble64VectorTests(double[i + 1]): success [41ms]
test Double64VectorTests.ASINDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.ASINDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [60ms]
test Double64VectorTests.ASINDouble64VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], double[i * 5]): success [238ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], double[i + 1]): success [4ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [62ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [5ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [92ms]
test Double64VectorTests.ATANDouble64VectorTests(double[-i * 5]): success [94ms]
test Double64VectorTests.ATANDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.ATANDouble64VectorTests(double[i + 1]): success [42ms]
test Double64VectorTests.ATANDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test Double64VectorTests.ATANDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [67ms]
test Double64VectorTests.ATANDouble64VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[-i * 5]): success [169ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[i * 5]): success [143ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[i + 1]): success [145ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [139ms]
test Double64VectorTests.BroadcastDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [136ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[cornerCaseValue(i)]): success [145ms]
test Double64VectorTests.BroadcastLongDouble64VectorTestsSmokeTest(double[-i * 5]): success [4ms]
test Double64VectorTests.BroadcastLongDouble64VectorTestsSmokeTest(double[i * 5]): success [4ms]
test Double64VectorTests.BroadcastLongDouble64VectorTestsSmokeTest(double[i + 1]): success [4ms]
test Double64VectorTests.BroadcastLongDouble64VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [4ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[-i * 5]): success [130ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[i * 5]): success [2ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[i + 1]): success [75ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.CBRTDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [131ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[cornerCaseValue(i)]): success [5ms]
test Double64VectorTests.COSDouble64VectorTests(double[-i * 5]): success [95ms]
test Double64VectorTests.COSDouble64VectorTests(double[i * 5]): success [0ms]
test Double64VectorTests.COSDouble64VectorTests(double[i + 1]): success [35ms]
test Double64VectorTests.COSDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.COSDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [62ms]
test Double64VectorTests.COSDouble64VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.COSHDouble64VectorTests(double[-i * 5]): success [152ms]
test Double64VectorTests.COSHDouble64VectorTests(double[i * 5]): success [0ms]
test Double64VectorTests.COSHDouble64VectorTests(double[i + 1]): success [41ms]
test Double64VectorTests.COSHDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.COSHDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [128ms]
test Double64VectorTests.COSHDouble64VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], double[i * 5]): success [204ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], double[i + 1]): success [25ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [29ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [90ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [3ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [59ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [35ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [6ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [6ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [10ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [5ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[i]): success [358ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[i - length / 2]): success [211ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[i + 1]): success [123ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[i - 2]): success [115ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[zigZag(i)]): success [115ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[cornerCaseValue(i)]): success [141ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[i]): success [112ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[i - length / 2]): success [136ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[i + 1]): success [158ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[i - 2]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[zigZag(i)]): success [114ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[i]): success [144ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[i - length / 2]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[i + 1]): success [121ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[i - 2]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[zigZag(i)]): success [123ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[i]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[i - length / 2]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[i + 1]): success [131ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[i - 2]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[zigZag(i)]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [120ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[i]): success [146ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[i - length / 2]): success [108ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[i + 1]): success [108ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[i - 2]): success [120ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[zigZag(i)]): success [116ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [108ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[i]): success [108ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [117ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [108ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [108ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [108ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [107ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [20ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [7ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [7ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [10ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [7ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [88ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [80ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [72ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [7ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(doubl

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

ts.blendDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[i * 5], mask[true]): success [5ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[i + 1], mask[true]): success [5ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [5ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [4ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [27ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[i * 5], mask[false]): success [2ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[i + 1], mask[false]): success [2ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [284ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [155ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [258ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [179ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [284ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [157ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [160ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [203ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [312ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [262ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [198ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [253ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [200ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [189ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [273ms]
test Double64VectorTests.compressDouble64VectorTests(double[-i * 5], mask[i % 2]): success [217ms]
test Double64VectorTests.compressDouble64VectorTests(double[i * 5], mask[i % 2]): success [18ms]
test Double64VectorTests.compressDouble64VectorTests(double[i + 1], mask[i % 2]): success [17ms]
test Double64VectorTests.compressDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [18ms]
test Double64VectorTests.compressDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [18ms]
test Double64VectorTests.compressDouble64VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [18ms]
test Double64VectorTests.compressDouble64VectorTests(double[-i * 5], mask[true]): success [17ms]
test Double64VectorTests.compressDouble64VectorTests(double[i * 5], mask[true]): success [16ms]
test Double64VectorTests.compressDouble64VectorTests(double[i + 1], mask[true]): success [15ms]
test Double64VectorTests.compressDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [15ms]
test Double64VectorTests.compressDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [15ms]
test Double64VectorTests.compressDouble64VectorTests(double[cornerCaseValue(i)], mask[true]): success [15ms]
test Double64VectorTests.compressDouble64VectorTests(double[-i * 5], mask[false]): success [74ms]
test Double64VectorTests.compressDouble64VectorTests(double[i * 5], mask[false]): success [17ms]
test Double64VectorTests.compressDouble64VectorTests(double[i + 1], mask[false]): success [17ms]
test Double64VectorTests.compressDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [17ms]
test Double64VectorTests.compressDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [16ms]
test Double64VectorTests.compressDouble64VectorTests(double[cornerCaseValue(i)], mask[false]): success [17ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], double[i * 5]): success [14ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [29ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [3ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [3ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [4ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [2ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [13ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [9ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[i]): success [272ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[i - length / 2]): success [192ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[i + 1]): success [131ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[i - 2]): success [164ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[zigZag(i)]): success [203ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[cornerCaseValue(i)]): success [115ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[i]): success [122ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[i - length / 2]): success [121ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[i + 1]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[i - 2]): success [163ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[zigZag(i)]): success [126ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [154ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[i]): success [169ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[i - length / 2]): success [163ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[i + 1]): success [177ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[i - 2]): success [171ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[zigZag(i)]): success [162ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [112ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[i]): success [119ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[i - length / 2]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[i + 1]): success [219ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[i - 2]): success [158ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[zigZag(i)]): success [166ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [112ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[i]): success [118ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[i - length / 2]): success [194ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[i + 1]): success [164ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[i - 2]): success [125ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[zigZag(i)]): success [134ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [112ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[i]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [165ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [113ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [116ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [205ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [118ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[i]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[i + 1]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[i - 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[zigZag(i)]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[i]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[i + 1]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[i - 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[zigZag(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[i]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[i + 1]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[i - 2]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[zigZag(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [11ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[i]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[i - length / 2]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[i + 1]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[i - 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[zigZag(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[i]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[i + 1]): success [52ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[i - 2]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[i]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.expandDouble64VectorTests(double[-i * 5], mask[i % 2]): success [167ms]
test Double64VectorTests.expandDouble64VectorTests(double[i * 5], mask[i % 2]): success [12ms]
test Double64VectorTests.expandDouble64VectorTests(double[i + 1], mask[i % 2]): success [13ms]
test Double64VectorTests.expandDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [32ms]
test Double64VectorTests.expandDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [12ms]
test Double64VectorTests.expandDouble64VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [13ms]
test Double64VectorTests.expandDouble64VectorTests(double[-i * 5], mask[true]): success [12ms]
test Double64VectorTests.expandDouble64VectorTests(double[i * 5], mask[true]): success [12ms]
test Double64VectorTests.expandDouble64VectorTests(double[i + 1], mask[true]): success [12ms]
test Double64VectorTests.expandDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [12ms]
test Double64VectorTests.expandDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [12ms]
test Double64VectorTests.expandDouble64VectorTests(double[cornerCaseValue(i)], mask[true]): success [14ms]
test Double64VectorTests.expandDouble64VectorTests(double[-i * 5], mask[false]): success [25ms]
test Double64VectorTests.expandDouble64VectorTests(double[i * 5], mask[false]): success [16ms]
test Double64VectorTests.expandDouble64VectorTests(double[i + 1], mask[false]): success [18ms]
test Double64VectorTests.expandDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [14ms]
test Double64VectorTests.expandDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [14ms]
test Double64VectorTests.expandDouble64VectorTests(double[cornerCaseValue(i)], mask[false]): success [22ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[-i * 5]): success [13ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[i * 5]): success [0ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[0.01 + (i / (i + 1))]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], AbstractVectorTest$1@25daae7f): success [3ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[-i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[i + 1]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[0.01 + (i / (i + 1))]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], AbstractVectorTest$1@25daae7f): success [3ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[-i * 5]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[i * 5]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[i + 1]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[0.01 + (i / (i + 1))]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], AbstractVectorTest$1@25daae7f): success [4ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[cornerCaseValue(i)]): success [14ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[-i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[i + 1]): success [2ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, AbstractVectorTest$1@25daae7f): success [2ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[-i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[i + 1]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], AbstractVectorTest$1@25daae7f): success [2ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[-i * 5]): success [14ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[i * 5]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[i + 1]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[0.01 + (i / (i + 1))]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], AbstractVectorTest$1@25daae7f): success [12ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[cornerCaseValue(i)]): success [10ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[-i * 5]): success [6ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[i * 5]): success [6ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[i + 1]): success [20ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[0.01 + (i / (i + 1))]): success [8ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], AbstractVectorTest$1@25daae7f): success [6ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[cornerCaseValue(i)]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[-i * 5]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[i * 5]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[i + 1]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[0.01 + (i / (i + 1))]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], AbstractVectorTest$1@25daae7f): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[cornerCaseValue(i)]): success [18ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[-i * 5]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[i * 5]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[i + 1]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[0.01 + (i / (i + 1))]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, AbstractVectorTest$1@25daae7f): success [97ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[cornerCaseValue(i)]): success [7ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[-i * 5]): success [7ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[i * 5]): success [42ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[i + 1]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[0.01 + (i / (i + 1))]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], AbstractVectorTest$1@25daae7f): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [4ms]
test Double64VectorTests.getDouble64VectorTests(double[-i * 5]): success [30ms]
test Double64VectorTests.getDouble64VectorTests(double[i * 5]): success [2ms]
test Double64VectorTests.getDouble64VectorTests(double[i + 1]): success [2ms]
test Double64VectorTests.getDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.getDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double64VectorTests.getDouble64VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[-i * 5]): success [57ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[i * 5]): success [15ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[i + 1]): success [18ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [15ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [49ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [59ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(0): success [171ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(-1): success [31ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(1): success [5ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(2): success [5ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(-2): success [5ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(0): success [5ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(-1): success [5ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(1): success [5ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(2): success [16ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(-2): success [4ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(0): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(1): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(32): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(37): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(1024): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(1025): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(1029): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(0): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(1): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(32): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(37): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(1024): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(1025): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(1029): success [0ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[i]): success [278ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[i - length / 2]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[i + 1]): success [148ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[i - 2]): success [166ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[zigZag(i)]): success [205ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[cornerCaseValue(i)]): success [171ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[i]): success [133ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[i - length / 2]): success [187ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[i + 1]): success [127ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[i - 2]): success [300ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[zigZag(i)]): success [175ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [130ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[i]): success [121ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[i - length / 2]): success [168ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[i + 1]): success [168ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[i - 2]): success [159ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[zigZag(i)]): success [202ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [201ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[i]): success [204ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[i - length / 2]): success [205ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[i + 1]): success [209ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[i - 2]): success [195ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[zigZag(i)]): success [162ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[i]): success [112ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[i - length / 2]): success [204ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[i + 1]): success [139ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[i - 2]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[zigZag(i)]): success [167ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [113ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[i]): success [113ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [207ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [126ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [118ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [112ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [164ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[i]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [5ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [25ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [7ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [6ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [5ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [5ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [4ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [4ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [4ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [6ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [13ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [4ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [4ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [4ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [4ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [6ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [63ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.maskAndDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [29ms]
test Double64VectorTests.maskAndDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskAndNotDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [48ms]
test Double64VectorTests.maskAndNotDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskCompressDouble64VectorTestsSmokeTest(mask[i % 2]): success [275ms]
test Double64VectorTests.maskCompressDouble64VectorTestsSmokeTest(mask[true]): success [187ms]
test Double64VectorTests.maskCompressDouble64VectorTestsSmokeTest(mask[false]): success [250ms]
test Double64VectorTests.maskEqDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [11ms]
test Double64VectorTests.maskEqDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskEqualsDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Double64VectorTests.maskEqualsDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskFirstTrueDouble64VectorTestsSmokeTest(mask[i % 2]): success [148ms]
test Double64VectorTests.maskFirstTrueDouble64VectorTestsSmokeTest(mask[true]): success [70ms]
test Double64VectorTests.maskFirstTrueDouble64VectorTestsSmokeTest(mask[false]): success [35ms]
test Double64VectorTests.maskFromToLongDouble64VectorTestsSmokeTest(-1): success [149ms]
test Double64VectorTests.maskFromToLongDouble64VectorTestsSmokeTest(0): success [0ms]
test Double64VectorTests.maskFromToLongDouble64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Double64VectorTests.maskFromToLongDouble64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Double64VectorTests.maskHashCodeDouble64VectorTestsSmokeTest(mask[i % 2]): success [2ms]
test Double64VectorTests.maskHashCodeDouble64VectorTestsSmokeTest(mask[true]): success [0ms]
test Double64VectorTests.maskHashCodeDouble64VectorTestsSmokeTest(mask[false]): success [0ms]
test Double64VectorTests.maskLastTrueDouble64VectorTestsSmokeTest(mask[i % 2]): success [146ms]
test Double64VectorTests.maskLastTrueDouble64VectorTestsSmokeTest(mask[true]): success [73ms]
test Double64VectorTests.maskLastTrueDouble64VectorTestsSmokeTest(mask[false]): success [51ms]
test Double64VectorTests.maskOrDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [28ms]
test Double64VectorTests.maskOrDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskTrueCountDouble64VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Double64VectorTests.maskTrueCountDouble64VectorTestsSmokeTest(mask[true]): success [61ms]
test Double64VectorTests.maskTrueCountDouble64VectorTestsSmokeTest(mask[false]): success [23ms]
test Double64VectorTests.maskXorDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [30ms]
test Double64VectorTests.maskXorDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], double[i * 5]): success [26ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [16ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], double[i * 5]): success [10ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [13ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [2ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [2ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], double[i * 5]): success [15ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [34ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [18ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [3ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [12ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [10ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double64VectorTests.negDouble64VectorTests(double[-i * 5]): success [49ms]
test Double64VectorTests.negDouble64VectorTests(double[i * 5]): success [2ms]
test Double64VectorTests.negDouble64VectorTests(double[i + 1]): success [35ms]
test Double64VectorTests.negDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [24ms]
test Double64VectorTests.negDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double64VectorTests.negDouble64VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], double[i * 5]): success [189ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], double[i + 1]): success [4ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [76ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [3ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [116ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [28ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [2ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.shuffleEqualsDouble64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [26ms]
test Double64VectorTests.shuffleEqualsDouble64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [18ms]
test Double64VectorTests.shuffleMiscellaneousDouble64VectorTestsSmokeTest(shuffle[random]): success [7ms]
test Double64VectorTests.shuffleTest(): success [1162ms]
test Double64VectorTests.shuffleToStringDouble64VectorTestsSmokeTest(shuffle[random]): success [125ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[i * 5]): success [2972ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[i + 1]): success [1746ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1868ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [2184ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [1911ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [2480ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [1892ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [2219ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1732ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1831ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [1740ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [1697ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1742ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1709ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2038ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1783ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1814ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1958ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1716ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1488ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[-i * 5]): success [1695ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[i * 5]): success [1257ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[i + 1]): success [1212ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1345ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [1441ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[cornerCaseValue(i)]): success [1260ms]
test Double64VectorTests.smokeTest1(): success [1ms]
test Double64VectorTests.smokeTest2(): success [75ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[-i * 5]): success [98ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[i * 5]): success [4ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[i + 1]): success [39ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [4ms]
test Double64VectorTests.sqrtDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [67ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[cornerCaseValue(i)]): success [4ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], double[i * 5]): success [17ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [20ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [3ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [37ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [3ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [19ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [3ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [3ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [36ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [175ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double64VectorTests.toIntArrayDouble64VectorTestsSmokeTest(double[-i * 5]): success [22ms]
test Double64VectorTests.toIntArrayDouble64VectorTestsSmokeTest(double[i * 5]): success [18ms]
test Double64VectorTests.toIntArrayDouble64VectorTestsSmokeTest(double[i + 1]): success [10ms]
test Double64VectorTests.toIntArrayDouble64VectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [11ms]
test Double64VectorTests.toLongArrayDouble64VectorTestsSmokeTest(double[-i * 5]): success [0ms]
test Double64VectorTests.toLongArrayDouble64VectorTestsSmokeTest(double[i * 5]): success [0ms]
test Double64VectorTests.toLongArrayDouble64VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double64VectorTests.toLongArrayDouble64VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[-i * 5]): success [8ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[i + 1]): success [23ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [20ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [3ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [29ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[i * 5]): success [1912ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[i + 1]): success [1723ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1611ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1529ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [1351ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [4177ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [3134ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [3310ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2920ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2903ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [2772ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [2635ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [3232ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2944ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2734ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [2836ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [3328ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [3324ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2971ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [3361ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[-i * 5]): success [1929ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[i * 5]): success [1445ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[i + 1]): success [1761ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1698ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [1556ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[cornerCaseValue(i)]): success [1416ms]
test Double64VectorTests.viewAsFloatingLanesTest(): success [82ms]
test Double64VectorTests.viewAsIntegeralLanesTest(): success [41ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], double[i * 5]): success [150ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], double[i + 1]): success [116ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [67ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [67ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [67ms]

===============================================
jdk/incubator/vector/Double64VectorTests.java
Total tests run: 3209, Passes: 3208, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Double64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Double64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Double64VectorTests.d/testng.0.jta jdk/incubator/vector/Double64VectorTests.java false Double64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float64VectorTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
TEST: jdk/incubator/vector/Long256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.94 seconds
messages:
command: build Long256VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 00:42:15 IST 2025
Test directory:
  compile: Long256VectorTests
finished: Thu Apr 17 00:42:16 IST 2025
elapsed time (seconds): 0.94

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.939 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 00:42:15 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 3
Process id: 1982199
finished: Thu Apr 17 00:42:16 IST 2025
elapsed time (seconds): 0.939
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests 
TIME:   261.63 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests 
started: Thu Apr 17 00:42:16 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2002056
finished: Thu Apr 17 00:46:38 IST 2025
elapsed time (seconds): 261.63
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -1185648645280723481
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-1185648645280723481" to command line.
test Long256VectorTests.ABSLong256VectorTests(long[-i * 5]): success [854ms]
test Long256VectorTests.ABSLong256VectorTests(long[i * 5]): success [9ms]
test Long256VectorTests.ABSLong256VectorTests(long[i + 1]): success [52ms]
test Long256VectorTests.ABSLong256VectorTests(long[cornerCaseValue(i)]): success [7ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[i % 2]): success [329ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[i % 2]): success [88ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[i % 2]): success [79ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[true]): success [6ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[true]): success [4ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[false]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[false]): success [7ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[false]): success [4ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[i * 5]): success [355ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[i + 1]): success [33ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [71ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [16ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [16ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [28ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [5ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [243ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [6ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [113ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [20ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [12ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [41ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[-i * 5]): success [126ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[i * 5]): success [102ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[i + 1]): success [3ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [106ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [140ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [45ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[-i * 5]): success [12ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[i * 5]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[i + 1]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [9ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [23ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[i * 5]): success [466ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[i + 1]): success [7ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [113ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [7ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [27ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [22ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [12ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [81ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [7ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [7ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [7ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [6ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [6ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [6ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[-i * 5]): success [245ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[i * 5]): success [88ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[i + 1]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [29ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [132ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[false]): success [4ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[i * 5]): success [489ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[i + 1]): success [83ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [179ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [232ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [93ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [360ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [150ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [98ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [96ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [98ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [149ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [61ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[i * 5]): success [236ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[i + 1]): success [60ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [207ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [174ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [135ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [194ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [60ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [91ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [110ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [74ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [61ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [61ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [307ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [5ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [62ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[-i * 5]): success [9ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[i * 5]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[i + 1]): success [64ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [6ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [102ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [8ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [62ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [14ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [139ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [13ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [174ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [46ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [5ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [590ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [5ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [2ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [10ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [69ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [3ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [103ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [4ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_B

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

56VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [7ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.bitwiseDivByZeroSmokeTest(): success [12ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [15ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [68ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[i % 2]): success [169ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[i % 2]): success [39ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[i % 2]): success [124ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [38ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[true]): success [87ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[true]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[false]): success [5ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[false]): success [5ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[false]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[i * 5]): success [198ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[i + 1]): success [113ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [201ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [10ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [123ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [4ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [427ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [219ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [414ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [261ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [231ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [214ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [215ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [227ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [241ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i]): success [121ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i + 1]): success [92ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i - 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[zigZag(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i - length / 2]): success [58ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i + 1]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i - 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i - length / 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i + 1]): success [66ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i - 2]): success [77ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [81ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i]): success [52ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i - length / 2]): success [78ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i + 1]): success [55ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i - 2]): success [67ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[zigZag(i)]): success [81ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [54ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i]): success [54ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i - length / 2]): success [92ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i + 1]): success [52ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i - 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [87ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [52ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[i % 2]): success [123ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[i % 2]): success [73ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[i % 2]): success [111ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [39ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[true]): success [30ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[false]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[false]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[false]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long256VectorTests.getLong256VectorTests(long[-i * 5]): success [6ms]
test Long256VectorTests.getLong256VectorTests(long[i * 5]): success [28ms]
test Long256VectorTests.getLong256VectorTests(long[i + 1]): success [71ms]
test Long256VectorTests.getLong256VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[-i * 5]): success [35ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[i * 5]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[i + 1]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(0): success [71ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(-1): success [2ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(1): success [16ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(2): success [2ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(-2): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(0): success [2ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(-1): success [2ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(1): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(2): success [3ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(-2): success [1ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(32): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(37): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1024): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1025): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1029): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(32): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(37): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1024): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1025): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1029): success [0ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i]): success [123ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i - length / 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i + 1]): success [59ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i - 2]): success [83ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[zigZag(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i]): success [53ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i - length / 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i + 1]): success [83ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i - 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[zigZag(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i]): success [84ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i - length / 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i + 1]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i - 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[zigZag(i)]): success [55ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [91ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i - length / 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i + 1]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i - 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[zigZag(i)]): success [103ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i - length / 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i + 1]): success [88ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i - 2]): success [53ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[zigZag(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [57ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [86ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [62ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i]): success [3ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.maskAndLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Long256VectorTests.maskAndLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskAndNotLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long256VectorTests.maskAndNotLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[i % 2]): success [372ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[true]): success [198ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[false]): success [154ms]
test Long256VectorTests.maskEqLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long256VectorTests.maskEqLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [1ms]
test Long256VectorTests.maskEqualsLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Long256VectorTests.maskEqualsLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [1ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[i % 2]): success [58ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[true]): success [60ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[false]): success [26ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(-1): success [60ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[true]): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[false]): success [0ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[i % 2]): success [72ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[true]): success [97ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[false]): success [41ms]
test Long256VectorTests.maskOrLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [28ms]
test Long256VectorTests.maskOrLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[i % 2]): success [35ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[true]): success [60ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[false]): success [26ms]
test Long256VectorTests.maskXorLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long256VectorTests.maskXorLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[i + 1]): success [18ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [10ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[i * 5]): success [16ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [10ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[i * 5]): success [13ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [7ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.negLong256VectorTests(long[-i * 5]): success [15ms]
test Long256VectorTests.negLong256VectorTests(long[i * 5]): success [2ms]
test Long256VectorTests.negLong256VectorTests(long[i + 1]): success [79ms]
test Long256VectorTests.negLong256VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long256VectorTests.notLong256VectorTests(long[-i * 5]): success [67ms]
test Long256VectorTests.notLong256VectorTests(long[i * 5]): success [78ms]
test Long256VectorTests.notLong256VectorTests(long[i + 1]): success [185ms]
test Long256VectorTests.notLong256VectorTests(long[cornerCaseValue(i)]): success [52ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[i * 5]): success [9ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [17ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long256VectorTests.shuffleEqualsLong256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [485ms]
test Long256VectorTests.shuffleEqualsLong256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [29ms]
test Long256VectorTests.shuffleMiscellaneousLong256VectorTestsSmokeTest(shuffle[random]): success [15ms]
test Long256VectorTests.shuffleTest(): success [475ms]
test Long256VectorTests.shuffleToStringLong256VectorTestsSmokeTest(shuffle[random]): success [58ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i * 5]): success [1035ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i + 1]): success [387ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [732ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [728ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [484ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [893ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [671ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [681ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [491ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [478ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [445ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [458ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[-i * 5]): success [630ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[i * 5]): success [428ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[i + 1]): success [585ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[cornerCaseValue(i)]): success [381ms]
test Long256VectorTests.smokeTest1(): success [0ms]
test Long256VectorTests.smokeTest2(): success [45ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [61ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [31ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [7ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [6ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[i * 5]): success [5ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[-i * 5]): success [1ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[i * 5]): success [6ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[i + 1]): success [44ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i * 5]): success [673ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i + 1]): success [498ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [884ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [1796ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [975ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2317ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [785ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [820ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [936ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [885ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [853ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [828ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[-i * 5]): success [766ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[i * 5]): success [457ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[i + 1]): success [721ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[cornerCaseValue(i)]): success [504ms]
test Long256VectorTests.viewAsFloatingLanesTest(): success [308ms]
test Long256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[i * 5]): success [28ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[i + 1]): success [19ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [111ms]

===============================================
jdk/incubator/vector/Long256VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Long256VectorTests.d/testng.0.jta jdk/incubator/vector/Long256VectorTests.java false Long256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Long512VectorTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
TEST: jdk/incubator/vector/LongMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.071 seconds
messages:
command: build LongMaxVectorTests
reason: Named class compiled on demand
started: Thu Apr 17 00:44:34 IST 2025
Test directory:
  compile: LongMaxVectorTests
finished: Thu Apr 17 00:44:35 IST 2025
elapsed time (seconds): 1.071

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.071 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 00:44:34 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 16
Process id: 1983339
finished: Thu Apr 17 00:44:35 IST 2025
elapsed time (seconds): 1.071
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/LongMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/LongMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/LongMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/LongMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests 
TIME:   159.422 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests 
started: Thu Apr 17 00:44:35 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2004425
finished: Thu Apr 17 00:47:15 IST 2025
elapsed time (seconds): 159.422
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 8730963123459907489
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=8730963123459907489" to command line.
test LongMaxVectorTests.ABSLongMaxVectorTests(long[-i * 5]): success [584ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[i * 5]): success [6ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[i + 1]): success [48ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[cornerCaseValue(i)]): success [4ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [233ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[i % 2]): success [68ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[true]): success [15ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [35ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[i * 5]): success [227ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[i + 1]): success [7ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [61ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [130ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [71ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [43ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[-i * 5]): success [17ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[i * 5]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[i + 1]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [9ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[-i * 5]): success [89ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[i * 5]): success [92ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[i + 1]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [51ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [84ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [29ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [12ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[i * 5]): success [176ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[i + 1]): success [3ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [60ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [23ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [5ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [9ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [5ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [4ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[-i * 5]): success [94ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[i * 5]): success [123ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[i + 1]): success [0ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [24ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [86ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [13ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [2ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[i * 5]): success [138ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[i + 1]): success [2ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [73ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [103ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[i * 5]): success [134ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[i + 1]): success [8ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [72ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [81ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [75ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[i * 5]): success [202ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[i + 1]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [58ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[-i * 5]): success [6ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[i * 5]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[i + 1]): success [83ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [94ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [57ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [11ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [50ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [167ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [2ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [148ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [524ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [5ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [4ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [6ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [63ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [3ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

pressLongMaxVectorTests(long[i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[false]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[i * 5]): success [131ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[i + 1]): success [39ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [169ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [9ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [109ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [201ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [76ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): failure [248ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$7(LongVector.java:914)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.bOpTemplateMF(LongVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.LongMaxVector.bOpMF(LongMaxVector.java:204)
	at jdk.incubator.vector/jdk.incubator.vector.LongMaxVector.bOpMF(LongMaxVector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$6(LongVector.java:914)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lanewiseTemplate(LongVector.java:895)
	at jdk.incubator.vector/jdk.incubator.vector.LongMaxVector.lanewise(LongMaxVector.java:281)
	at jdk.incubator.vector/jdk.incubator.vector.LongMaxVector.lanewise(LongMaxVector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.div(LongVector.java:1645)
	at LongMaxVectorTests.divLongMaxVectorTestsMasked(LongMaxVectorTests.java:1785)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [96ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [75ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [75ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [74ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [74ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [74ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i]): success [110ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i - length / 2]): success [98ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i + 1]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i - 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i + 1]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i - 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i + 1]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i - 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i + 1]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i - 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i + 1]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i - 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i + 1]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i - 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [107ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[i % 2]): success [22ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[i % 2]): success [92ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [21ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[true]): success [19ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[true]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[true]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[false]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[-i * 5]): success [3ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[i * 5]): success [2ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[i + 1]): success [61ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[-i * 5]): success [36ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[i * 5]): success [1ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[i + 1]): success [1ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(0): success [69ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(-1): success [1ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(1): success [16ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(2): success [1ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(-2): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(0): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(-1): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(1): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(2): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(-2): success [2ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(0): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(32): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(37): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1024): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1025): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1029): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(0): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(32): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(37): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1024): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1025): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1029): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i]): success [135ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i + 1]): success [98ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i - 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[zigZag(i)]): success [65ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i + 1]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i - 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i]): success [40ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i + 1]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i - 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i + 1]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i - 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[zigZag(i)]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i + 1]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i - 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i + 1]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i - 2]): success [49ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [63ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [59ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.maskAndLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test LongMaxVectorTests.maskAndLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskAndNotLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test LongMaxVectorTests.maskAndNotLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[i % 2]): success [230ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[true]): success [80ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[false]): success [62ms]
test LongMaxVectorTests.maskEqLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test LongMaxVectorTests.maskEqLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskEqualsLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test LongMaxVectorTests.maskEqualsLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[i % 2]): success [35ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[true]): success [54ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[false]): success [21ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[i % 2]): success [65ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[true]): success [54ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[false]): success [35ms]
test LongMaxVectorTests.maskOrLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test LongMaxVectorTests.maskOrLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[i % 2]): success [30ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[true]): success [55ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[false]): success [21ms]
test LongMaxVectorTests.maskXorLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test LongMaxVectorTests.maskXorLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[i * 5]): success [6ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[-i * 5]): success [14ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[i * 5]): success [1ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[i + 1]): success [48ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[-i * 5]): success [17ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[i * 5]): success [1ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[i + 1]): success [52ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[i * 5]): success [7ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.shuffleEqualsLongMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [445ms]
test LongMaxVectorTests.shuffleEqualsLongMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [20ms]
test LongMaxVectorTests.shuffleMiscellaneousLongMaxVectorTestsSmokeTest(shuffle[random]): success [11ms]
test LongMaxVectorTests.shuffleTest(): success [362ms]
test LongMaxVectorTests.shuffleToStringLongMaxVectorTestsSmokeTest(shuffle[random]): success [62ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i * 5]): success [497ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i + 1]): success [44ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [237ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [121ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [45ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [297ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [44ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [43ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [42ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [42ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [42ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [42ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[-i * 5]): success [190ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[i * 5]): success [39ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[i + 1]): success [190ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[cornerCaseValue(i)]): success [38ms]
test LongMaxVectorTests.smokeTest1(): success [0ms]
test LongMaxVectorTests.smokeTest2(): success [74ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [0ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[-i * 5]): success [1ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [6ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i * 5]): success [201ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i + 1]): success [40ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [277ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [461ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [79ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [421ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [79ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [99ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [252ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [81ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [83ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [80ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[-i * 5]): success [193ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[i * 5]): success [40ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[i + 1]): success [224ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[cornerCaseValue(i)]): success [39ms]
test LongMaxVectorTests.viewAsFloatingLanesTest(): success [237ms]
test LongMaxVectorTests.viewAsIntegeralLanesTest(): success [0ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[i * 5]): success [18ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[i + 1]): success [17ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [91ms]

===============================================
jdk/incubator/vector/LongMaxVectorTests.java
Total tests run: 3317, Passes: 3316, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/LongMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/LongMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/LongMaxVectorTests.d/testng.0.jta jdk/incubator/vector/LongMaxVectorTests.java false LongMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int64VectorTests.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Short128VectorTests.java
Passed: jdk/incubator/vector/AddTest.java
TEST: jdk/incubator/vector/Long64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.103 seconds
messages:
command: build Long64VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 00:43:53 IST 2025
Test directory:
  compile: Long64VectorTests
finished: Thu Apr 17 00:43:54 IST 2025
elapsed time (seconds): 1.103

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.102 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long64VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 00:43:53 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 14
Process id: 1983142
finished: Thu Apr 17 00:43:54 IST 2025
elapsed time (seconds): 1.102
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long64VectorTests 
TIME:   509.691 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long64VectorTests 
started: Thu Apr 17 00:43:54 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2003804
finished: Thu Apr 17 00:52:24 IST 2025
elapsed time (seconds): 509.691
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -6812507537593839454
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-6812507537593839454" to command line.
test Long64VectorTests.ABSLong64VectorTests(long[-i * 5]): success [720ms]
test Long64VectorTests.ABSLong64VectorTests(long[i * 5]): success [26ms]
test Long64VectorTests.ABSLong64VectorTests(long[i + 1]): success [73ms]
test Long64VectorTests.ABSLong64VectorTests(long[cornerCaseValue(i)]): success [17ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[-i * 5], mask[i % 2]): success [352ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i * 5], mask[i % 2]): success [27ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i + 1], mask[i % 2]): success [5ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [89ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[-i * 5], mask[true]): success [15ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i * 5], mask[true]): success [8ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i + 1], mask[true]): success [7ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[cornerCaseValue(i)], mask[true]): success [8ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[-i * 5], mask[false]): success [100ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i * 5], mask[false]): success [15ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i + 1], mask[false]): success [26ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long64VectorTests.ADDLong64VectorTests(long[-i * 5], long[i * 5]): success [310ms]
test Long64VectorTests.ADDLong64VectorTests(long[-i * 5], long[i + 1]): success [50ms]
test Long64VectorTests.ADDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [66ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [19ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [26ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [6ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [196ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [64ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [41ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [15ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [10ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [11ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [11ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [11ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [15ms]
test Long64VectorTests.ADDReduceLong64VectorTests(long[-i * 5]): success [147ms]
test Long64VectorTests.ADDReduceLong64VectorTests(long[i * 5]): success [43ms]
test Long64VectorTests.ADDReduceLong64VectorTests(long[i + 1]): success [40ms]
test Long64VectorTests.ADDReduceLong64VectorTests(long[cornerCaseValue(i)]): success [5ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[-i * 5], mask[i % 2]): success [194ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i * 5], mask[i % 2]): success [49ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i + 1], mask[i % 2]): success [6ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [71ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[-i * 5], mask[true]): success [6ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i * 5], mask[true]): success [65ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i + 1], mask[true]): success [43ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[-i * 5], mask[false]): success [42ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i * 5], mask[false]): success [6ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i + 1], mask[false]): success [6ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [6ms]
test Long64VectorTests.ADDReduceLongLong64VectorTests(long[-i * 5]): success [13ms]
test Long64VectorTests.ADDReduceLongLong64VectorTests(long[i * 5]): success [2ms]
test Long64VectorTests.ADDReduceLongLong64VectorTests(long[i + 1]): success [3ms]
test Long64VectorTests.ADDReduceLongLong64VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[-i * 5], mask[i % 2]): success [12ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i + 1], mask[i % 2]): success [3ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long64VectorTests.ANDLong64VectorTests(long[-i * 5], long[i * 5]): success [220ms]
test Long64VectorTests.ANDLong64VectorTests(long[-i * 5], long[i + 1]): success [30ms]
test Long64VectorTests.ANDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [6ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [23ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [52ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [8ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [6ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [27ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [3ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [82ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [12ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [77ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [10ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [11ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [10ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [11ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [11ms]
test Long64VectorTests.ANDReduceLong64VectorTests(long[-i * 5]): success [175ms]
test Long64VectorTests.ANDReduceLong64VectorTests(long[i * 5]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTests(long[i + 1]): success [51ms]
test Long64VectorTests.ANDReduceLong64VectorTests(long[cornerCaseValue(i)]): success [65ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[-i * 5], mask[i % 2]): success [85ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i * 5], mask[i % 2]): success [10ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i + 1], mask[i % 2]): success [74ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [59ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[-i * 5], mask[true]): success [126ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i * 5], mask[true]): success [15ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i + 1], mask[true]): success [15ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [15ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[-i * 5], mask[false]): success [22ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i * 5], mask[false]): success [16ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i + 1], mask[false]): success [15ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [16ms]
test Long64VectorTests.AND_NOTLong64VectorTests(long[-i * 5], long[i * 5]): success [473ms]
test Long64VectorTests.AND_NOTLong64VectorTests(long[-i * 5], long[i + 1]): success [307ms]
test Long64VectorTests.AND_NOTLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [330ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [504ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [321ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [403ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [230ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [289ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [283ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [286ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [264ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [230ms]
test Long64VectorTests.ASHRLong64VectorTests(long[-i * 5], long[i * 5]): success [489ms]
test Long64VectorTests.ASHRLong64VectorTests(long[-i * 5], long[i + 1]): success [213ms]
test Long64VectorTests.ASHRLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [268ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [522ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [210ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [178ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [303ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [261ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [183ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [196ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [196ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [238ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [240ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [32ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [37ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftConst(long[-i * 5]): success [93ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftConst(long[i * 5]): success [74ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftConst(long[i + 1]): success [8ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [115ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [29ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [61ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [106ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [7ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [57ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [57ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [7ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [149ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [106ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [15ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [12ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [112ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [12ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [12ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [12ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [12ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [12ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [12ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [12ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [618ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [3ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [3ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [3ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [41ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [3ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [92ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [9ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [30ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [6ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [27ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [71ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[co

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long64VectorTests.divLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [7ms]
test Long64VectorTests.divLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [7ms]
test Long64VectorTests.divLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long64VectorTests.divLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [12ms]
test Long64VectorTests.divLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [4ms]
test Long64VectorTests.divLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [4ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [911ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [636ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [625ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [618ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [725ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [676ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [644ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [618ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [604ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[i]): success [233ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[i - length / 2]): success [110ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[i + 1]): success [110ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[i - 2]): success [126ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[zigZag(i)]): success [111ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[cornerCaseValue(i)]): success [111ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[i]): success [115ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[i - length / 2]): success [145ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[i + 1]): success [110ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[i - 2]): success [110ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[zigZag(i)]): success [110ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [110ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[i]): success [112ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[i - length / 2]): success [153ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[i + 1]): success [111ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[i - 2]): success [111ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[zigZag(i)]): success [119ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [110ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[i]): success [112ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[i - length / 2]): success [136ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[i + 1]): success [151ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[i - 2]): success [110ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[zigZag(i)]): success [110ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [110ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[i]): success [110ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[i - length / 2]): success [112ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[i + 1]): success [111ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[i - 2]): success [153ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[zigZag(i)]): success [111ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [111ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[i]): success [109ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [111ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [112ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [112ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [149ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [117ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [59ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.expandLong64VectorTests(long[-i * 5], mask[i % 2]): success [113ms]
test Long64VectorTests.expandLong64VectorTests(long[i * 5], mask[i % 2]): success [16ms]
test Long64VectorTests.expandLong64VectorTests(long[i + 1], mask[i % 2]): success [15ms]
test Long64VectorTests.expandLong64VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [15ms]
test Long64VectorTests.expandLong64VectorTests(long[-i * 5], mask[true]): success [16ms]
test Long64VectorTests.expandLong64VectorTests(long[i * 5], mask[true]): success [16ms]
test Long64VectorTests.expandLong64VectorTests(long[i + 1], mask[true]): success [20ms]
test Long64VectorTests.expandLong64VectorTests(long[cornerCaseValue(i)], mask[true]): success [15ms]
test Long64VectorTests.expandLong64VectorTests(long[-i * 5], mask[false]): success [29ms]
test Long64VectorTests.expandLong64VectorTests(long[i * 5], mask[false]): success [17ms]
test Long64VectorTests.expandLong64VectorTests(long[i + 1], mask[false]): success [17ms]
test Long64VectorTests.expandLong64VectorTests(long[cornerCaseValue(i)], mask[false]): success [17ms]
test Long64VectorTests.getLong64VectorTests(long[-i * 5]): success [29ms]
test Long64VectorTests.getLong64VectorTests(long[i * 5]): success [3ms]
test Long64VectorTests.getLong64VectorTests(long[i + 1]): success [3ms]
test Long64VectorTests.getLong64VectorTests(long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.hashCodeLong64VectorTestsSmokeTest(long[-i * 5]): success [49ms]
test Long64VectorTests.hashCodeLong64VectorTestsSmokeTest(long[i * 5]): success [11ms]
test Long64VectorTests.hashCodeLong64VectorTestsSmokeTest(long[i + 1]): success [18ms]
test Long64VectorTests.hashCodeLong64VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [5ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(0): success [145ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(-1): success [6ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(1): success [6ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(2): success [8ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(-2): success [9ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(0): success [9ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(-1): success [9ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(1): success [10ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(2): success [17ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(-2): success [8ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(0): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(1): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(32): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(37): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(1024): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(1025): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(1029): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(0): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(1): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(32): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(37): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(1024): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(1025): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(1029): success [0ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[i]): success [233ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[i - length / 2]): success [111ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[i + 1]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[i - 2]): success [111ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[zigZag(i)]): success [111ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[cornerCaseValue(i)]): success [130ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[i]): success [111ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[i - length / 2]): success [111ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[i + 1]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[i - 2]): success [111ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[zigZag(i)]): success [111ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [111ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[i]): success [150ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[i - length / 2]): success [136ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[i + 1]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[i - 2]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[zigZag(i)]): success [111ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[i]): success [124ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[i - length / 2]): success [159ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[i + 1]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[i - 2]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[zigZag(i)]): success [111ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[i]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[i - length / 2]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[i + 1]): success [180ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[i - 2]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[zigZag(i)]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[i]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [109ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [110ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [159ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [110ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[i]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [11ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [51ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.maskAndLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test Long64VectorTests.maskAndLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskAndNotLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Long64VectorTests.maskAndNotLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskCompressLong64VectorTestsSmokeTest(mask[i % 2]): success [279ms]
test Long64VectorTests.maskCompressLong64VectorTestsSmokeTest(mask[true]): success [103ms]
test Long64VectorTests.maskCompressLong64VectorTestsSmokeTest(mask[false]): success [218ms]
test Long64VectorTests.maskEqLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long64VectorTests.maskEqLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskEqualsLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long64VectorTests.maskEqualsLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskFirstTrueLong64VectorTestsSmokeTest(mask[i % 2]): success [29ms]
test Long64VectorTests.maskFirstTrueLong64VectorTestsSmokeTest(mask[true]): success [49ms]
test Long64VectorTests.maskFirstTrueLong64VectorTestsSmokeTest(mask[false]): success [18ms]
test Long64VectorTests.maskFromToLongLong64VectorTestsSmokeTest(-1): success [77ms]
test Long64VectorTests.maskFromToLongLong64VectorTestsSmokeTest(0): success [0ms]
test Long64VectorTests.maskFromToLongLong64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long64VectorTests.maskFromToLongLong64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long64VectorTests.maskHashCodeLong64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long64VectorTests.maskHashCodeLong64VectorTestsSmokeTest(mask[true]): success [0ms]
test Long64VectorTests.maskHashCodeLong64VectorTestsSmokeTest(mask[false]): success [0ms]
test Long64VectorTests.maskLastTrueLong64VectorTestsSmokeTest(mask[i % 2]): success [58ms]
test Long64VectorTests.maskLastTrueLong64VectorTestsSmokeTest(mask[true]): success [48ms]
test Long64VectorTests.maskLastTrueLong64VectorTestsSmokeTest(mask[false]): success [30ms]
test Long64VectorTests.maskOrLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [23ms]
test Long64VectorTests.maskOrLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskTrueCountLong64VectorTestsSmokeTest(mask[i % 2]): success [27ms]
test Long64VectorTests.maskTrueCountLong64VectorTestsSmokeTest(mask[true]): success [49ms]
test Long64VectorTests.maskTrueCountLong64VectorTestsSmokeTest(mask[false]): success [23ms]
test Long64VectorTests.maskXorLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Long64VectorTests.maskXorLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maxLong64VectorTests(long[-i * 5], long[i * 5]): success [19ms]
test Long64VectorTests.maxLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.maxLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.maxLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long64VectorTests.maxLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.maxLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.minLong64VectorTests(long[-i * 5], long[i * 5]): success [7ms]
test Long64VectorTests.minLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.minLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.minLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long64VectorTests.minLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.minLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.mulLong64VectorTests(long[-i * 5], long[i * 5]): success [7ms]
test Long64VectorTests.mulLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.mulLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [8ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [7ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long64VectorTests.negLong64VectorTests(long[-i * 5]): success [68ms]
test Long64VectorTests.negLong64VectorTests(long[i * 5]): success [50ms]
test Long64VectorTests.negLong64VectorTests(long[i + 1]): success [8ms]
test Long64VectorTests.negLong64VectorTests(long[cornerCaseValue(i)]): success [71ms]
test Long64VectorTests.notLong64VectorTests(long[-i * 5]): success [259ms]
test Long64VectorTests.notLong64VectorTests(long[i * 5]): success [166ms]
test Long64VectorTests.notLong64VectorTests(long[i + 1]): success [201ms]
test Long64VectorTests.notLong64VectorTests(long[cornerCaseValue(i)]): success [185ms]
test Long64VectorTests.orLong64VectorTests(long[-i * 5], long[i * 5]): success [13ms]
test Long64VectorTests.orLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.orLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.orLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long64VectorTests.orLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.orLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.shuffleEqualsLong64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [16ms]
test Long64VectorTests.shuffleEqualsLong64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [18ms]
test Long64VectorTests.shuffleMiscellaneousLong64VectorTestsSmokeTest(shuffle[random]): success [13ms]
test Long64VectorTests.shuffleTest(): success [271ms]
test Long64VectorTests.shuffleToStringLong64VectorTestsSmokeTest(shuffle[random]): success [46ms]
test Long64VectorTests.sliceBinaryLong64VectorTestsBinary(long[-i * 5], long[i * 5]): success [1799ms]
test Long64VectorTests.sliceBinaryLong64VectorTestsBinary(long[-i * 5], long[i + 1]): success [1229ms]
test Long64VectorTests.sliceBinaryLong64VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [1140ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [1620ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [1287ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1254ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1205ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1204ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1297ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1203ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1199ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1218ms]
test Long64VectorTests.sliceUnaryLong64VectorTests(long[-i * 5]): success [1281ms]
test Long64VectorTests.sliceUnaryLong64VectorTests(long[i * 5]): success [1000ms]
test Long64VectorTests.sliceUnaryLong64VectorTests(long[i + 1]): success [994ms]
test Long64VectorTests.sliceUnaryLong64VectorTests(long[cornerCaseValue(i)]): success [1014ms]
test Long64VectorTests.smokeTest1(): success [0ms]
test Long64VectorTests.smokeTest2(): success [92ms]
test Long64VectorTests.subLong64VectorTests(long[-i * 5], long[i * 5]): success [7ms]
test Long64VectorTests.subLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.subLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [9ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [39ms]
test Long64VectorTests.subLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [10ms]
test Long64VectorTests.subLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [7ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long64VectorTests.toDoubleArrayLong64VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long64VectorTests.toDoubleArrayLong64VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long64VectorTests.toDoubleArrayLong64VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long64VectorTests.toDoubleArrayLong64VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.toIntArrayLong64VectorTestsSmokeTest(long[-i * 5]): success [14ms]
test Long64VectorTests.toIntArrayLong64VectorTestsSmokeTest(long[i * 5]): success [7ms]
test Long64VectorTests.toIntArrayLong64VectorTestsSmokeTest(long[i + 1]): success [7ms]
test Long64VectorTests.toIntArrayLong64VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [7ms]
test Long64VectorTests.toLongArrayLong64VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long64VectorTests.toLongArrayLong64VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long64VectorTests.toLongArrayLong64VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long64VectorTests.toLongArrayLong64VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.toStringLong64VectorTestsSmokeTest(long[-i * 5]): success [9ms]
test Long64VectorTests.toStringLong64VectorTestsSmokeTest(long[i * 5]): success [21ms]
test Long64VectorTests.toStringLong64VectorTestsSmokeTest(long[i + 1]): success [48ms]
test Long64VectorTests.toStringLong64VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.unsliceBinaryLong64VectorTestsBinary(long[-i * 5], long[i * 5]): success [1378ms]
test Long64VectorTests.unsliceBinaryLong64VectorTestsBinary(long[-i * 5], long[i + 1]): success [1025ms]
test Long64VectorTests.unsliceBinaryLong64VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [1346ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [3201ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [2124ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2123ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2104ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2105ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2117ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [2125ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2335ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2116ms]
test Long64VectorTests.unsliceUnaryLong64VectorTests(long[-i * 5]): success [1288ms]
test Long64VectorTests.unsliceUnaryLong64VectorTests(long[i * 5]): success [1027ms]
test Long64VectorTests.unsliceUnaryLong64VectorTests(long[i + 1]): success [1008ms]
test Long64VectorTests.unsliceUnaryLong64VectorTests(long[cornerCaseValue(i)]): success [1055ms]
test Long64VectorTests.viewAsFloatingLanesTest(): success [513ms]
test Long64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long64VectorTests.withLong64VectorTests(long[-i * 5], long[i * 5]): success [138ms]
test Long64VectorTests.withLong64VectorTests(long[-i * 5], long[i + 1]): success [84ms]
test Long64VectorTests.withLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [68ms]

===============================================
jdk/incubator/vector/Long64VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Long64VectorTests.d/testng.0.jta jdk/incubator/vector/Long64VectorTests.java false Long64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/Short64VectorTests.java
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/Short512VectorTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Byte512VectorTests.java
Passed: jdk/incubator/vector/Vector128ConversionTests.java
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.488 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Thu Apr 17 00:49:21 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Thu Apr 17 00:49:22 IST 2025
elapsed time (seconds): 0.488

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.488 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 00:49:21 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 4
Process id: 1982228
finished: Thu Apr 17 00:49:22 IST 2025
elapsed time (seconds): 0.488
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   645.584 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Thu Apr 17 00:49:22 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 2007015
finished: Thu Apr 17 01:00:07 IST 2025
elapsed time (seconds): 645.584
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [41948ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3529ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [4188ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4228ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [3173ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [4046ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [20474ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
Failing with Species[long, 4, S_256_BIT]->Species[short, 16, S_256_BIT] (lanewise), partLimit=-4, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 9, 10, 17, 18, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket256(byte(i)): failure [87832ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket256(VectorReshapeTests.java:970)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket512(byte(i)): success [178992ms]
test VectorReshapeTests.testRebracket64(byte(i)): success [15981ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [21441ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[byte, 16, S_Max_BIT]->Species[byte, 64, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [41462ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:465)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[double, 2, S_Max_BIT]->Species[double, 8, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [3599ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:695)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[float, 2, S_64_BIT]->Species[float, 16, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-5, origin=40
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeFloat(byte(i)): failure [86463ms]
java.lang.AssertionError: arrays differ firstly at element [40]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeFloat(VectorReshapeTests.java:625)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[int, 2, S_64_BIT]->Species[int, 8, S_256_BIT] (reinterpret), partLimit=-4, block=8, part=-2, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [43636ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:532)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[long, 2, S_128_BIT]->Species[long, 8, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-3, origin=48
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [25253ms]
java.lang.AssertionError: arrays differ firstly at element [48]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:585)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[short, 8, S_Max_BIT]->Species[short, 32, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [17500ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:511)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [24280ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [12096ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 13, Failures: 7, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 7
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 7
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
--------------------------------------------------
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
TEST: jdk/incubator/vector/VectorMaxConversionTests.java#Z
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.868 seconds
messages:
command: build VectorMaxConversionTests
reason: Named class compiled on demand
started: Thu Apr 17 00:48:13 IST 2025
Test directory:
  compile: VectorMaxConversionTests
finished: Thu Apr 17 00:48:14 IST 2025
elapsed time (seconds): 0.868

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.868 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 00:48:13 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 8
Process id: 1982564
finished: Thu Apr 17 00:48:14 IST 2025
elapsed time (seconds): 0.868
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/VectorMaxConversionTests_Z.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorMaxConversionTests.java#Z \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions VectorMaxConversionTests 
TIME:   780.14 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions VectorMaxConversionTests
reason: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions VectorMaxConversionTests 
started: Thu Apr 17 00:48:14 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 2006780
finished: Thu Apr 17 01:01:14 IST 2025
elapsed time (seconds): 780.14
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [747ms]
castShape took 745 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@546e0bd): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 4, S_64_BIT], byte(i)): success [1305ms]
castShape took 1305 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@632e496b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 2, S_64_BIT], byte(i)): success [1156ms]
castShape took 1156 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e891bf): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 1, S_64_BIT], byte(i)): success [433ms]
castShape took 433 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a5e4d08): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 2, S_64_BIT], byte(i)): success [222ms]
castShape took 221 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f6118d8): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 1, S_64_BIT], byte(i)): success [117ms]
castShape took 118 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55eeea8b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [1896ms]
castShape took 1896 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@528d38e7): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 8, S_128_BIT], byte(i)): success [1447ms]
castShape took 1443 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cbe3618): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 4, S_128_BIT], byte(i)): success [1176ms]
castShape took 1176 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f8a8aba): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 2, S_128_BIT], byte(i)): success [1322ms]
castShape took 1322 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c722680): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 4, S_128_BIT], byte(i)): success [408ms]
castShape took 408 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67c6164): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 2, S_128_BIT], byte(i)): success [177ms]
castShape took 177 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b82f96e): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [4982ms]
castShape took 4982 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@71fe33e2): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 16, S_256_BIT], byte(i)): success [1522ms]
castShape took 1522 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@aae3445): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 8, S_256_BIT], byte(i)): success [1829ms]
castShape took 1830 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f5fc3e1): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 4, S_256_BIT], byte(i)): success [142ms]
castShape took 143 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@286ac55): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 8, S_256_BIT], byte(i)): success [884ms]
castShape took 884 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b5f9dfc): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 4, S_256_BIT], byte(i)): success [190ms]
castShape took 190 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6a61fc87): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [21949ms]
castShape took 21950 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@56deba7b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 32, S_512_BIT], byte(i)): success [4140ms]
castShape took 4140 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f089e5a): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 16, S_512_BIT], byte(i)): success [777ms]
castShape took 777 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@294ff63b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 8, S_512_BIT], byte(i)): success [122ms]
castShape took 123 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79e9a6e0): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 16, S_512_BIT], byte(i)): success [169ms]
castShape took 169 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63e75858): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 8, S_512_BIT], byte(i)): success [127ms]
castShape took 127 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@693101f): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [258ms]
castShape took 258 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26ddddeb): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [178ms]
castShape took 176 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75f408dd): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [123ms]
castShape took 123 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59d0e70b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [121ms]
castShape took 122 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@499f8b43): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [129ms]
castShape took 129 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7848b175): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [126ms]
castShape took 126 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48926f03): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 8, S_64_BIT], short(i)): success [2798ms]
castShape took 2798 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f44746e): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 4, S_64_BIT], short(i)): success [3889ms]
castShape took 3889 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49f40d9c): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 2, S_64_BIT], short(i)): success [1285ms]
castShape took 1286 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@783e0a85): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 1, S_64_BIT], short(i)): success [53ms]
castShape took 53 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@682f65d6): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 2, S_64_BIT], short(i)): success [12ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31a601ce): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 1, S_64_BIT], short(i)): success [19ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c25a547): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 16, S_128_BIT], short(i)): success [2585ms]
castShape took 2583 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@36a18f0a): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 8, S_128_BIT], short(i)): success [405ms]
castShape took 406 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c351bca): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 4, S_128_BIT], short(i)): success [25ms]
castShape took 25 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bdbaf30): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 2, S_128_BIT], short(i)): success [26ms]
castShape took 26 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3a4086a8): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 4, S_128_BIT], short(i)): success [44ms]
castShape took 45 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13ad0ef5): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 2, S_128_BIT], short(i)): success [32ms]
castShape took 29 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4278f552): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 32, S_256_BIT], short(i)): success [3930ms]
castShape took 3931 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10f3b8c6): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 16, S_256_BIT], short(i)): success [7369ms]
castShape took 7368 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@733cf401): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 8, S_256_BIT], short(i)): success [84ms]
castShape took 84 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@73d0dbaa): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 4, S_256_BIT], short(i)): success [66ms]
castShape took 66 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2427b770): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 8, S_256_BIT], short(i)): success [86ms]
castShape took 86 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dd5f6a7): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 4, S_256_BIT], short(i)): success [79ms]
castShape took 67 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6197d613): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 64, S_512_BIT], short(i)): success [12258ms]
castShape took 12258 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5017cc66): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 32, S_512_BIT], short(i)): success [4262ms]
castShape took 4262 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64047a52): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 16, S_512_BIT], short(i)): success [4693ms]
castShape took 4693 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8f4dbee): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 8, S_512_BIT], short(i)): success [1483ms]
castShape took 1483 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76693731): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 16, S_512_BIT], short(i)): success [3364ms]
castShape took 3364 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2de896d8): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 8, S_512_BIT], short(i)): success [85ms]
castShape took 84 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d8aba90): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [1112ms]
castShape took 1113 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6a41deb9): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 8, S_Max_BIT], short(i)): success [399ms]
castShape took 400 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@138c98cb): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 4, S_Max_BIT], short(i)): success [23ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@196a447d): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 2, S_Max_BIT], short(i)): success [20ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e7dae31): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 4, S_Max_BIT], short(i)): success [26ms]
castShape took 26 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f9c6bb): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 2, S_Max_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@58d3315b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2756ms]
castShape took 2756 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e9d92e): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 4, S_64_BIT], int(i)): success [1044ms]
castShape took 1044 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bbd5bf9): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 2, S_64_BIT], int(i)): success [919ms]
castShape took 919 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@257058f7): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 1, S_64_BIT], int(i)): success [225ms]
castShape took 225 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29f4f73e): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 2, S_64_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b6a43c1): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 1, S_64_BIT], int(i)): success [11ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@28672e5b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 16, S_128_BIT], int(i)): success [405ms]
castShape took 406 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e78cab): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 8, S_128_BIT], int(i)): success [3185ms]
castShape took 3185 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11c71e54): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 4, S_128_BIT], int(i)): success [689ms]
castShape took 689 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37754ff7): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 2, S_128_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1936d71f): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 4, S_128_BIT], int(i)): success [16ms]
castShape took 16 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e24b32c): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 2, S_128_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cfd144a): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 32, S_256_BIT], int(i)): success [3849ms]
castShape took 3850 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53b9fe3b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 16, S_256_BIT], int(i)): success [2738ms]
castShape took 2738 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7190904f): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 8, S_256_BIT], int(i)): success [4276ms]
castShape took 4276 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@493118aa): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 4, S_256_BIT], int(i)): success [106ms]
castShape took 106 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d40da): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 8, S_256_BIT], int(i)): success [2609ms]
castShape took 2609 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6cf8b59d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 4, S_256_BIT], int(i)): success [106ms]
castShape took 106 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6d5c6722): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 64, S_512_BIT], int(i)): success [7054ms]
castShape took 7053 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c0efb4b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 32, S_512_BIT], int(i)): success [3878ms]
castShape took 3878 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55af1bc1): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 16, S_512_BIT], int(i)): success [2357ms]
castShape took 2357 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ebde77d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 8, S_512_BIT], int(i)): success [3286ms]
castShape took 3286 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@196b41fc): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 16, S_512_BIT], int(i)): success [2450ms]
castShape took 2450 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f692133): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 8, S_512_BIT], int(i)): success [2690ms]
castShape took 2690 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ead2c00): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [391ms]
castShape took 392 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e0ee11b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 8, S_Max_BIT], int(i)): success [1043ms]
castShape took 1043 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d86730d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 4, S_Max_BIT], int(i)): success [299ms]
castShape took 299 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23868d8a): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@340a9b10): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 4, S_Max_BIT], int(i)): success [11ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d444342): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@503c10a6): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 8, S_64_BIT], long(i)): success [742ms]
castShape took 743 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f3456a5): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 4, S_64_BIT], long(i)): success [1009ms]
castShape took 1009 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@bdc2f79): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 2, S_64_BIT], long(i)): success [994ms]
castShape took 994 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12c07d5f): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 1, S_64_BIT], long(i)): success [1141ms]
castShape took 1142 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b35aaff): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 2, S_64_BIT], long(i)): success [17ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@509097b3): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 1, S_64_BIT], long(i)): success [22ms]
castShape took 22 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e2517eb): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 16, S_128_BIT], long(i)): success [785ms]
castShape took 786 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6341bb9b): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 8, S_128_BIT], long(i)): success [480ms]
castShape took 480 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d4c601a): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 4, S_128_BIT], long(i)): success [2114ms]
castShape took 2114 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@208ad9db): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 2, S_128_BIT], long(i)): success [1650ms]
castShape took 1651 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16bd3d7): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 4, S_128_BIT], long(i)): success [1160ms]
castShape took 1160 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cf4db3a): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 2, S_128_BIT], long(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e8438fd): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 32, S_256_BIT], long(i)): success [7782ms]
castShape took 7782 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ddc58db): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 16, S_256_BIT], long(i)): success [4825ms]
castShape took 4826 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d67dfeb): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 8, S_256_BIT], long(i)): success [3431ms]
castShape took 3431 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@390794f6): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 4, S_256_BIT], long(i)): success [5357ms]
castShape took 5357 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@723b1bff): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 8, S_256_BIT], long(i)): success [3817ms]
castShape took 3817 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@634db3b1): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 4, S_256_BIT], long(i)): success [3713ms]
castShape took 3713 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3901e750): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 64, S_512_BIT], long(i)): success [14280ms]
castShape took 14280 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6c069932): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 32, S_512_BIT], long(i)): success [7369ms]
castShape took 7368 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3095b2d5): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 16, S_512_BIT], long(i)): success [4515ms]
castShape took 4518 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5883c5fd): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 8, S_512_BIT], long(i)): success [3104ms]
castShape took 3102 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@148f7eea): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 16, S_512_BIT], long(i)): success [4908ms]
castShape took 4908 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1684057): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 8, S_512_BIT], long(i)): success [3227ms]
castShape took 3227 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@185a9bbc): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [758ms]
castShape took 759 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b94d56d): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 8, S_Max_BIT], long(i)): success [461ms]
castShape took 461 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@125efa25): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 4, S_Max_BIT], long(i)): success [1012ms]
castShape took 1012 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1db55109): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 2, S_Max_BIT], long(i)): success [300ms]
castShape took 300 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27c8f2a0): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1106ms]
castShape took 1105 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8797093): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 2, S_Max_BIT], long(i)): success [30ms]
castShape took 31 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30bf99a6): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1574ms]
castShape took 1574 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3021da2): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[short, 4, S_64_BIT], float(i)): success [2185ms]
castShape took 2185 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7531af5): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[int, 2, S_64_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c2655b1): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[long, 1, S_64_BIT], float(i)): success [1111ms]
castShape took 1111 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a11d6e8): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[float, 2, S_64_BIT], float(i)): success [572ms]
castShape took 572 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1a7b4143): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[double, 1, S_64_BIT], float(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@618dd67f): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 16, S_128_BIT], float(i)): success [378ms]
castShape took 378 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e5e34f8): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[short, 8, S_128_BIT], float(i)): success [262ms]
castShape took 262 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f71e650): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[int, 4, S_128_BIT], float(i)): success [9ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78606223): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[long, 2, S_128_BIT], float(i)): success [2189ms]
castShape took 2189 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27d12396): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[float, 4, S_128_BIT], float(i)): success [258ms]
castShape took 258 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3eda87de): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[double, 2, S_128_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f1e78eb): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 32, S_256_BIT], float(i)): success [3614ms]
castShape took 3614 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6807ea46): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4,

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

nt, 4, S_Max_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c3da006): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[float, 4, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b49dd1e): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[int, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e568605): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[float, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d592542): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[long, 2, S_128_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9a245e9): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[double, 2, S_128_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@284e7903): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@541885e1): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2a0ef22b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5ff8af5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@315ca928): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c10d27c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50deebc7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25497aa7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e312a12): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29ca0791): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34b11482): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c8b0070): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 5 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dc2b4a3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f32cbdf): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bd29d38): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f66f336): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69442165): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a6b811b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16462e67): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1305d893): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@611dd57b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e10bd83): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7869de30): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21b122bc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63e67cfa): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12838755): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@520bb97d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19452de4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44a14bf9): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76807c8e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fee6e6): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@647c6831): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29211322): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@579b4a3f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d284e15): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c7d3ead): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@400db070): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7699a09d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74740bab): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fd6c0fa): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6feeb1fd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 31 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@620f40bc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5da168a1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7232626d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@310841cb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c2d8368): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e1c5ece): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e3a6e7c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45e78690): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2205ea40): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8a727bc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6318a5a8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c40b2a2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14c144a2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f179f4f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@470c46ea): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6d342060): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@265b629d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15bd7f52): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@419b05f9): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5517cc1b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3eda3697): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d3e072d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f0ffaec): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77e5a132): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17949e9d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3988d3f8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b163976): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17c7e714): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3cc04052): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d89c2c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@73eeb132): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c528f7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@383e0d5f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9fe9a00): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59d6c46): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@22a27d28): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f535136): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f9bfcfb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c10253e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e668e15): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@202c21b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5004148b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7af2dadd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@418e75b3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65023999): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12722c53): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ea8f6be): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d7684b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27f99e8e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3952f3fd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@60ec4a15): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3cb7d633): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@601d418a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50eb255c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20b0cb6d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8599b0): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5262d71e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b4e3b02): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57fd5bc2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59ad3e2c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6afa8cf7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65531e6f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b90d7cc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b6ac88d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@58b1a220): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b49e09e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a453e23): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4be00ed8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3653f2c1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78f79419): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@170a18fe): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3685fc68): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e6656e2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2281c8fb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@348ca2f8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53f9aca5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7381c21d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@959ed1e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ffb23c1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12124d4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@197e67f1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6651c590): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e121581): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a1d2b5f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6db5cb1d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c153a5d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17611355): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b9c9f1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@35873b71): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 16, S_256_BIT]): success [2ms]
shuffleCastNeg took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2079de3c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@780b60de): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6a04c78f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ef74279): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ad848ae): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d56bd10): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@35359554): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32fc0baf): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@579d7af3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b54a684): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27631c0d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b13352b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6237bd38): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bd5b542): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63d7d3d6): success [0ms]

===============================================
jdk/incubator/vector/VectorMaxConversionTests.java#Z
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorMaxConversionTests.java#Z \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:+UnlockDiagnosticVMOptions \
        -XX:+UseKNLSetting \
        -XX:+UseZGC \
        -XX:+IgnoreUnrecognizedVMOptions \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorMaxConversionTests_Z.d/testng.0.jta jdk/incubator/vector/VectorMaxConversionTests.java#Z false VectorMaxConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Vector64ConversionTests.java#id0
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.023 seconds
messages:
command: build Vector64ConversionTests
reason: Named class compiled on demand
started: Thu Apr 17 00:47:04 IST 2025
Test directory:
  compile: Vector64ConversionTests
finished: Thu Apr 17 00:47:05 IST 2025
elapsed time (seconds): 1.023

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.023 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 00:47:04 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 5
Process id: 1982294
finished: Thu Apr 17 00:47:05 IST 2025
elapsed time (seconds): 1.023
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Vector64ConversionTests.java#id0 \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests 
TIME:   1384.635 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests
reason: User specified action: run testng/othervm/timeout=300 -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests 
started: Thu Apr 17 00:47:05 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 2006396
finished: Thu Apr 17 01:10:09 IST 2025
elapsed time (seconds): 1384.635
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [1323ms]
castShape took 1318 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cab41a5): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 4, S_64_BIT], byte(i)): success [872ms]
castShape took 871 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32f13c0c): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 2, S_64_BIT], byte(i)): success [640ms]
castShape took 640 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@177ba401): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 1, S_64_BIT], byte(i)): success [483ms]
castShape took 483 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55e9fd9b): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 2, S_64_BIT], byte(i)): success [218ms]
castShape took 218 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bf43dcb): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 1, S_64_BIT], byte(i)): success [401ms]
castShape took 401 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64cc2f05): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [2150ms]
castShape took 2146 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d3c5dca): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 8, S_128_BIT], byte(i)): success [1055ms]
castShape took 1055 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54302f60): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 4, S_128_BIT], byte(i)): success [969ms]
castShape took 969 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@160cc352): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 2, S_128_BIT], byte(i)): success [822ms]
castShape took 823 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@759369ce): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 4, S_128_BIT], byte(i)): success [677ms]
castShape took 677 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23821e96): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 2, S_128_BIT], byte(i)): success [187ms]
castShape took 188 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c93395e): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [8180ms]
castShape took 8180 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64daf28): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 16, S_256_BIT], byte(i)): success [5647ms]
castShape took 5648 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7453c2ce): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 8, S_256_BIT], byte(i)): success [243ms]
castShape took 243 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2911fcc7): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 4, S_256_BIT], byte(i)): success [960ms]
castShape took 959 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69a30bb8): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 8, S_256_BIT], byte(i)): success [216ms]
castShape took 216 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@695191ca): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 4, S_256_BIT], byte(i)): success [217ms]
castShape took 217 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4bf40f8): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [13278ms]
castShape took 13278 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bd98d4a): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 32, S_512_BIT], byte(i)): success [8321ms]
castShape took 8321 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e62310): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 16, S_512_BIT], byte(i)): success [4089ms]
castShape took 4089 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18ef793): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 8, S_512_BIT], byte(i)): success [1172ms]
castShape took 1173 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54eca994): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 16, S_512_BIT], byte(i)): success [3316ms]
castShape took 3315 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d9ec089): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 8, S_512_BIT], byte(i)): success [175ms]
castShape took 175 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4cd54fd1): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [1800ms]
castShape took 1800 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@630bd20e): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [159ms]
castShape took 158 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc54142): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [151ms]
castShape took 151 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@618b78f4): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [546ms]
castShape took 546 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c7674c6): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [145ms]
castShape took 145 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@72fd6e22): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [143ms]
castShape took 143 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@40d0b25): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 8, S_64_BIT], short(i)): success [3648ms]
castShape took 3649 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9ae45b9): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 4, S_64_BIT], short(i)): success [7648ms]
castShape took 7648 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fac3958): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 2, S_64_BIT], short(i)): success [8ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19d0a0ec): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 1, S_64_BIT], short(i)): success [81ms]
castShape took 82 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7eff441c): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 2, S_64_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b6a37d2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 1, S_64_BIT], short(i)): success [6ms]
castShape took 6 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48b7f47e): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 16, S_128_BIT], short(i)): success [3419ms]
castShape took 3417 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c4697bc): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 8, S_128_BIT], short(i)): success [4421ms]
castShape took 4422 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5353824d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 4, S_128_BIT], short(i)): success [23ms]
castShape took 22 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61517fb2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 2, S_128_BIT], short(i)): success [22ms]
castShape took 23 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bb27146): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 4, S_128_BIT], short(i)): success [22ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@412dc1a2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 2, S_128_BIT], short(i)): success [21ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@321f317): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 32, S_256_BIT], short(i)): success [6068ms]
castShape took 6068 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b0ecc95): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 16, S_256_BIT], short(i)): success [2764ms]
castShape took 2765 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10363f91): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 8, S_256_BIT], short(i)): success [3868ms]
castShape took 3868 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42e578c0): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 4, S_256_BIT], short(i)): success [143ms]
castShape took 143 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cfc7fce): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 8, S_256_BIT], short(i)): success [2684ms]
castShape took 2684 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f84d03b): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 4, S_256_BIT], short(i)): success [2587ms]
castShape took 2578 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15e41f09): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 64, S_512_BIT], short(i)): success [6655ms]
castShape took 6655 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c73d6bf): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 32, S_512_BIT], short(i)): success [5859ms]
castShape took 5859 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d5c1d58): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 16, S_512_BIT], short(i)): success [2242ms]
castShape took 2242 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a049c7d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 8, S_512_BIT], short(i)): failure [3983ms]
java.lang.AssertionError:  expected [[J@5efab149] but found [[J@604eb843]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertArrayEquals(Assert.java:201)
	at org.testng.Assert.assertEquals(Assert.java:119)
	at org.testng.Assert.assertEquals(Assert.java:617)
	at AbstractVectorConversionTest.conversion_kernel(AbstractVectorConversionTest.java:456)
	at Vector64ConversionTests.castShape(Vector64ConversionTests.java:106)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
castShape took 3953 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61a38c6c): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 16, S_512_BIT], short(i)): success [2487ms]
castShape took 2487 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6876f85d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 8, S_512_BIT], short(i)): success [3123ms]
castShape took 3123 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4aae3d2e): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [423ms]
castShape took 424 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c1371b8): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 8, S_Max_BIT], short(i)): success [1672ms]
castShape took 1673 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@442b18f7): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 4, S_Max_BIT], short(i)): success [9ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19345d92): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 2, S_Max_BIT], short(i)): success [8ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20f96a5a): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 4, S_Max_BIT], short(i)): success [9ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@72bbfdbc): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 2, S_Max_BIT], short(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@569ffb40): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2479ms]
castShape took 2479 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75bc56d3): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 4, S_64_BIT], int(i)): success [1058ms]
castShape took 1058 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69ac08ab): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 2, S_64_BIT], int(i)): success [1040ms]
castShape took 1040 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cf44fae): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 1, S_64_BIT], int(i)): success [171ms]
castShape took 170 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4674dacb): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 2, S_64_BIT], int(i)): success [23ms]
castShape took 23 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@782e94b8): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 1, S_64_BIT], int(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@150322ac): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 16, S_128_BIT], int(i)): success [786ms]
castShape took 786 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54fca7cf): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 8, S_128_BIT], int(i)): success [524ms]
castShape took 524 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2538bba3): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 4, S_128_BIT], int(i)): success [1741ms]
castShape took 1741 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17aac7f0): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 2, S_128_BIT], int(i)): success [82ms]
castShape took 83 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2aa28bd5): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 4, S_128_BIT], int(i)): success [1166ms]
castShape took 1167 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4da521da): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 2, S_128_BIT], int(i)): success [24ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7ca50be7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 32, S_256_BIT], int(i)): success [7258ms]
castShape took 7258 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@621544a0): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 16, S_256_BIT], int(i)): success [4166ms]
castShape took 4166 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2db9544): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 8, S_256_BIT], int(i)): success [3824ms]
castShape took 3824 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3523703): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 4, S_256_BIT], int(i)): success [4438ms]
castShape took 4438 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38212d6d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 8, S_256_BIT], int(i)): success [3696ms]
castShape took 3697 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e3358da): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 4, S_256_BIT], int(i)): success [3319ms]
castShape took 3320 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1127a9e1): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 64, S_512_BIT], int(i)): success [13683ms]
castShape took 13683 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2ce2b52d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 32, S_512_BIT], int(i)): success [7840ms]
castShape took 7840 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26a91840): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 16, S_512_BIT], int(i)): success [4648ms]
castShape took 4649 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16e80674): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 8, S_512_BIT], int(i)): success [2885ms]
castShape took 2885 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@170549c7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 16, S_512_BIT], int(i)): success [4757ms]
castShape took 4758 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@124d2b42): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 8, S_512_BIT], int(i)): success [3168ms]
castShape took 3168 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39a660cb): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [758ms]
castShape took 758 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42757dde): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 8, S_Max_BIT], int(i)): success [452ms]
castShape took 453 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e5e9078): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 4, S_Max_BIT], int(i)): success [1333ms]
castShape took 1332 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54f2c322): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 2, S_Max_BIT], int(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd72c2): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 4, S_Max_BIT], int(i)): success [1078ms]
castShape took 1078 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@702a7105): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 2, S_Max_BIT], int(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6ed53852): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 8, S_64_BIT], long(i)): success [1266ms]
castShape took 1267 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4216e82c): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 4, S_64_BIT], long(i)): success [706ms]
castShape took 707 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d2ea27e): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 2, S_64_BIT], long(i)): success [1135ms]
castShape took 1135 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74b8781a): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 1, S_64_BIT], long(i)): success [1417ms]
castShape took 1417 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42642d30): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 2, S_64_BIT], long(i)): success [1285ms]
castShape took 1285 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3da5771b): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 1, S_64_BIT], long(i)): success [301ms]
castShape took 301 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@183524c7): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 16, S_128_BIT], long(i)): success [1645ms]
castShape took 1646 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53d438dd): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 8, S_128_BIT], long(i)): success [1058ms]
castShape took 1058 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e9e124f): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 4, S_128_BIT], long(i)): success [716ms]
castShape took 716 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3767d1fe): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 2, S_128_BIT], long(i)): success [3087ms]
castShape took 3088 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16658144): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 4, S_128_BIT], long(i)): success [1034ms]
castShape took 1035 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48e10bd7): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 2, S_128_BIT], long(i)): success [1387ms]
castShape took 1388 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5ca2ddd8): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 32, S_256_BIT], long(i)): success [14203ms]
castShape took 14203 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e5aae46): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 16, S_256_BIT], long(i)): success [8696ms]
castShape took 8697 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c655cc): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 8, S_256_BIT], long(i)): success [5722ms]
castShape took 5722 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@70731f1d): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 4, S_256_BIT], long(i)): success [5107ms]
castShape took 5107 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b2b98b1): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 8, S_256_BIT], long(i)): success [6343ms]
castShape took 6340 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c1007ab): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 4, S_256_BIT], long(i)): success [4626ms]
castShape took 4627 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d5cf24a): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 64, S_512_BIT], long(i)): success [26406ms]
castShape took 26406 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44fa8ea1): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 32, S_512_BIT], long(i)): success [14276ms]
castShape took 14275 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3af7f9f0): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 16, S_512_BIT], long(i)): success [8217ms]
castShape took 8218 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d3eb656): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 8, S_512_BIT], long(i)): success [5785ms]
castShape took 5768 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14b48a94): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 16, S_512_BIT], long(i)): success [9417ms]
castShape took 9417 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9ff15bc): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 8, S_512_BIT], long(i)): success [6003ms]
castShape took 6003 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2974683e): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [1641ms]
castShape took 1642 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@81586e9): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 8, S_Max_BIT], long(i)): success [1045ms]
castShape took 1046 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78638d39): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 4, S_Max_BIT], long(i)): success [713ms]
castShape took 713 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@146f2497): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 2, S_Max_BIT], long(i)): success [1704ms]
castShape took 1705 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63b8ddc6): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1030ms]
castShape took 1031 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2109f79c): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 2, S_Max_BIT], long(i)): success [1288ms]
castShape took 1289 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26c5e81d): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1756ms]
castShape took 1756 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46dd932c): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[short, 4, S_64_BIT], float(i)): success [2225ms]
castShape took 2226 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@56adf5e0): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[int, 2, S_64_BIT], float(i)): success [13ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42109f40): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[long, 1, S_64_BIT], float(i)): success [148ms]
castShape took 148 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bcae6c9): success [0ms]
test Vector64ConversionTests.castShape

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

esult@6be1da02): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29897488): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@732e8986): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cbdda99): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ee39ff8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@445381b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2dc938c6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44112c3d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@344d3c48): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a4d4e7b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66741a55): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46d90bd8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 5 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d42ae57): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48b81600): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e7214ca): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4a19ce6e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@134caef3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b763382): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@517f1655): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23da9535): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3dc096e8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11e85147): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b0db1d4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e4a49a5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2633e9d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59cd536a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@380f821): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@442f10d8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d4813a4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24687549): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d333b11): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ae1a2ca): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20b713c3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@685cabee): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63c2d99): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@111d7af1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@35a4c2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b9d04a5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21bca813): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a36dc29): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e740c4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 28 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4dee5fd5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f73d371): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79c23a2a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d151ac1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d85d8b4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e5636b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@62c26811): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@714dbe24): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@bd3e301): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57aa423f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3dde168a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20bd98b9): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d219881): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38c3a523): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c762e81): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@211c2efc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ff9098): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c57030b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18377b93): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f4f44d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bd7c1d9): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67433a7e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41386df): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@700403): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43e8e8b6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f21513f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3de8fca0): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f95d66e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7461adda): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59d7e7c5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ce103d3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31b5da45): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bf99152): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@648eadea): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b672d7c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@70124837): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@644ccb61): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@752c7c78): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11ad12c6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7efa3452): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@52f5f350): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f07ac2e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c894bb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76e80835): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b6da6cb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cbd6f1d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@571f2dc1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19b8c726): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2064d20): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@773b9530): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@233b747d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f57afc1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46415e46): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21823396): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5983e717): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37962361): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a75998): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41a28db6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6817773d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@33b25e83): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bb974b4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29539615): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13e1fb18): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a111ed6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cdb1fc6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f585deb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b48852b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13c30a6a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4fd6a0f2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57fdf0dc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5dbef5fc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8fd4fd1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d5a3977): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ed439a4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7cbd8f4d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14f8736a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@679f3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f11df84): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@367aacc4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43717fa6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21ac7818): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 8, S_128_BIT]): success [8ms]
shuffleCastNeg took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50600acb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@718b30d4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f66a0b7): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d7a71f2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c0607e5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1858a725): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@395b81ec): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f20039d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b923552): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31b31435): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@592c1d5b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@480b4c0e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@460b61c2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32d189e3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@738c0207): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b340518): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75b93ea8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b49eb49): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@257fdb18): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10d3b598): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d114fb1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@142ceff8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2af8c4c7): success [0ms]

===============================================
jdk/incubator/vector/Vector64ConversionTests.java#id0
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Vector64ConversionTests.java#id0 \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Vector64ConversionTests_id0.d/testng.0.jta jdk/incubator/vector/Vector64ConversionTests.java#id0 false Vector64ConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Test results: passed: 70; failed: 10; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector
Finished running test 'jtreg:test/jdk:jdk_vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk:jdk_vector                            83    70    10     0     3 <<
==============================
TEST FAILURE

