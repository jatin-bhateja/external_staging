Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_1', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_1
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_1

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Passed: compiler/codegen/LoadWithMask.java
Passed: compiler/codegen/IntRotateWithImmediate.java
Passed: compiler/codegen/ClearArrayTest.java
Passed: compiler/codegen/C1NullCheckOfNullStore.java
Passed: compiler/codegen/Test6378821.java
Passed: compiler/codegen/ShiftByZero.java
Passed: compiler/codegen/BitTests.java
Passed: compiler/codegen/Test6797305.java
Passed: compiler/codegen/BMI2.java
Passed: compiler/codegen/BadLogicCode.java
Passed: compiler/codegen/Test6909839.java
Passed: compiler/codegen/Test8005033.java
Passed: compiler/codegen/Test6814842.java
Passed: compiler/codegen/LoadWithMask2.java
Passed: compiler/codegen/Test7009231.java
Passed: compiler/codegen/BMI1.java
Passed: compiler/codegen/ShiftTest.java
Passed: compiler/codegen/CRCTest.java
Passed: compiler/codegen/Test6431242.java
Passed: compiler/codegen/Test6879902.java
Passed: compiler/codegen/Test6823354.java
Passed: compiler/codegen/Test8011901.java
Passed: compiler/codegen/TestConvertImplicitNullCheck.java
Passed: compiler/codegen/Test7100757.java
Passed: compiler/codegen/TestCharShortVect.java
Passed: compiler/codegen/TestByteShortVect.java
Passed: compiler/codegen/TestByteIntVect.java
Passed: compiler/codegen/TestBooleanVect.java
Passed: compiler/codegen/TestByteVect.java
Passed: compiler/codegen/TestDoubleVect.java
Passed: compiler/codegen/TestCharVect.java
Passed: compiler/codegen/TestCharVect2.java#id0
Passed: compiler/codegen/TestFloatDoubleVect.java
Passed: compiler/codegen/TestLongDoubleVect.java
Passed: compiler/codegen/TestFloatVect.java
Passed: compiler/codegen/TestIntFloatVect.java
Passed: compiler/codegen/TestByteLongVect.java
Passed: compiler/codegen/TestByteDoubleVect.java
Passed: compiler/codegen/Test6942326.java
Passed: compiler/codegen/TestLongVect.java
Passed: compiler/codegen/TestIntVect.java
Passed: compiler/codegen/TestByteFloatVect.java
Passed: compiler/codegen/TestMultiMemInstructionMatching.java
Passed: compiler/loopopts/superword/AlignmentOnePack.java
Passed: compiler/codegen/TestGCMLoadPlacement.java
Passed: compiler/loopopts/superword/CoLocatePack.java
Passed: compiler/loopopts/superword/CoLocatePackMemoryState.java
Passed: compiler/codegen/TestShortIntVect.java
Passed: compiler/codegen/TestIntDoubleVect.java
Passed: compiler/codegen/TestIntLongVect.java
Passed: compiler/codegen/TestShortFloatVect.java
Passed: compiler/codegen/TestCharVect2.java#id1
Passed: compiler/codegen/TestShortVect.java
Passed: compiler/codegen/TestLongFloatVect.java
Passed: compiler/codegen/TestOopCmp.java
Passed: compiler/loopopts/superword/ReductionPerf.java
Passed: compiler/codegen/TestShortLongVect.java
Passed: compiler/codegen/TestShortDoubleVect.java
Passed: compiler/codegen/TestSignedMultiplyLong.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage.java
Passed: compiler/loopopts/superword/MinMaxRed_Long.java
Passed: compiler/loopopts/superword/MinMaxRed_Int.java
Passed: compiler/loopopts/superword/SuperWordIntermediateUse.java
Passed: compiler/loopopts/superword/TestAlignVector.java#AlignVector
Passed: compiler/loopopts/superword/TestAlignVector.java#NoAlignVector
Passed: compiler/loopopts/superword/RedTest_long.java
Passed: compiler/loopopts/superword/RedTest_int.java
Passed: compiler/loopopts/superword/SumRed_Long.java
Passed: compiler/loopopts/superword/TestBestAlign.java
Passed: compiler/loopopts/superword/TestCmpInvar.java
Passed: compiler/loopopts/superword/TestAlignVector.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
Passed: compiler/loopopts/superword/TestCyclicDependency.java
Passed: compiler/loopopts/superword/ProdRed_Float.java
Passed: compiler/loopopts/superword/TestEliminateAllocationWithCastP2XUse.java
Passed: compiler/loopopts/superword/ProdRed_Int.java
Passed: compiler/loopopts/superword/TestFuzzPreLoop.java
Passed: compiler/loopopts/superword/SumRed_Int.java
Passed: compiler/loopopts/superword/TestHoistedReductionNode.java
Passed: compiler/loopopts/superword/TestIndependentPacksWithCyclicDependency2.java
Passed: compiler/loopopts/superword/SumRed_Float.java
Passed: compiler/loopopts/superword/TestGeneralizedReductions.java
Passed: compiler/loopopts/superword/TestLargeCompilation.java
Passed: compiler/loopopts/superword/ProdRed_Double.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Double.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array
Passed: compiler/loopopts/superword/SumRedAbsNeg_Float.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#Vanilla
Passed: compiler/loopopts/superword/SumRed_Double.java
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-Align16
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegment.java#char-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#float-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#double-array
Passed: compiler/loopopts/superword/TestMemorySegmentMainLoopAlignment.java
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#native
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array-AlignVector
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-NoTieredCompilation-Xbatch
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#native-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#short-array
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-AlignVector
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithFlags
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#Vanilla
Passed: compiler/loopopts/superword/TestNegBaseOffset.java
Passed: compiler/loopopts/superword/TestMultiversionRemoveUselessSlowLoop.java
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-VerifyAlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native
Passed: compiler/loopopts/superword/TestReductionWithLoopVariantUse.java
Passed: compiler/loopopts/superword/TestPeeledReductionNode.java
Passed: compiler/loopopts/superword/TestPickFirstMemoryState.java
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithMoreFlags
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-AlignVector
Passed: compiler/loopopts/superword/TestPickLastMemoryState.java
Passed: compiler/loopopts/superword/TestParallelReduction.java
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-VerifyAlignVector
Passed: compiler/loopopts/superword/TestSearchAlignment.java
Passed: compiler/loopopts/superword/TestWronglyMarkedReduction.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize32-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Unaligned
Passed: compiler/loopopts/superword/TestVectorizeTypeConversionWithUnsafe.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize16-Unaligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Aligned
Passed: compiler/loopopts/superword/TestVectorizationWithInvariant.java
Passed: compiler/vectorapi/TestIsLoadVector.java
Passed: compiler/loopopts/superword/TestVectorFPReduction.java
Passed: compiler/vectorapi/Test8303508.java
Passed: compiler/vectorapi/TestLongVectorNeg.java
Passed: compiler/vectorapi/Test8259353.java
Passed: compiler/vectorapi/TestBiMorphicMismatchedMemSegment.java
Passed: compiler/vectorapi/TestNoInline.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id0
Passed: compiler/vectorapi/TestLoopStoreVector.java#id1
Passed: compiler/loopopts/superword/SumRedSqrt_Double.java
Passed: compiler/vectorapi/TestIntrinsicBailOut.java#id0
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#StoreToLoadForwardingFailureDetection
Passed: compiler/vectorapi/TestVectorErgonomics.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#AlignVector
Passed: compiler/vectorapi/Test8278948.java
Passed: compiler/vectorapi/VectorBoxExpandTest.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#vanilla
Passed: compiler/vectorapi/TestVectorShuffleIota.java
Passed: compiler/vectorapi/TestVectorAddMulReduction.java
Passed: compiler/loopopts/superword/TestMovingLoadBeforeStore.java
Passed: compiler/vectorapi/VectorFPtoIntCastTest.java
Passed: compiler/vectorapi/TestVectorShiftImm.java
Passed: compiler/vectorapi/VectorCommutativeOperSharingTest.java
Passed: compiler/loopopts/superword/TestEquivalentInvariants.java
Passed: compiler/vectorapi/TestVectorShuffleIotaByte.java
Passed: compiler/vectorapi/TestReverseByteTransforms.java
Passed: compiler/vectorapi/VectorMemoryAlias.java
Passed: compiler/vectorapi/VectorMaskCastTest.java
Passed: compiler/vectorapi/TestTwoVectorPermute.java
Passed: compiler/c2/cr6340864/TestFloatVect.java
Passed: compiler/c2/cr6340864/TestDoubleVect.java
Passed: compiler/vectorapi/TestRawOopAtSafepoint.java
Passed: compiler/c2/cr6340864/TestByteVect.java
Passed: compiler/c2/cr6340864/TestIntVectRotate.java
Passed: compiler/c2/cr6340864/TestIntVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeHotInlineTest.java
Passed: compiler/c2/cr6340864/TestLongVectRotate.java
Passed: compiler/c2/irTests/blackhole/BlackholeStoreStoreEATest.java
Passed: compiler/c2/irTests/blackhole/BlackholeLoadOptoTest.java
Passed: compiler/c2/cr6340864/TestShortVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeSyncEATest.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id0
Passed: compiler/c2/irTests/igvn/TestCleanMemPhi.java
Passed: compiler/c2/irTests/igvn/TestCombineAddPWithConstantOffsets.java
Passed: compiler/c2/irTests/igvn/TestLoadNIdeal.java
Passed: compiler/c2/cr6340864/TestLongVect.java
Passed: compiler/c2/irTests/loopOpts/LoopIdealizationTests.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id1
Passed: compiler/vectorapi/VectorCastShape128Test.java
Passed: compiler/c2/irTests/igvn/TestIntegerMulRing.java
Passed: compiler/vectorapi/VectorGatherMaskFoldingTest.java
Passed: compiler/c2/irTests/scalarReplacement/ScalarReplacementTests.java
Passed: compiler/c2/irTests/stringopts/TestNegativeArraySize.java
Passed: compiler/c2/irTests/AddINodeIdealizationTests.java
Passed: compiler/vectorapi/VectorCastShape64Test.java
Passed: compiler/c2/irTests/AddLNodeIdealizationTests.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage2.java
Passed: compiler/c2/irTests/stable/StablePrimFinalTest.java
Passed: compiler/vectorapi/VectorSaturatedOperationsTest.java
Passed: compiler/c2/irTests/AndLNodeIdealizationTests.java
Passed: compiler/c2/irTests/CmpUWithZero.java
Passed: compiler/c2/irTests/AndINodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StablePrimArrayTest.java
Passed: compiler/vectorapi/VectorMultiplyOpt.java
Passed: compiler/c2/irTests/stable/StablePrimPlainTest.java
Passed: compiler/c2/irTests/stable/StableRefFinalTest.java
Passed: compiler/c2/irTests/stable/StablePrimVolatileTest.java
Passed: compiler/c2/irTests/DeMorganLawIntTests.java
Passed: compiler/c2/irTests/DeMorganLawLongTests.java
Passed: compiler/c2/irTests/DivINodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefArrayTest.java
Passed: compiler/c2/irTests/stable/StableRefPlainTest.java
Passed: compiler/c2/irTests/LShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/ConstructorBarriers.java
Passed: compiler/c2/irTests/LShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModINodeIdealizationTests.java
Passed: compiler/c2/irTests/MaxMinINodeIdealizationTests.java
Passed: compiler/c2/irTests/DivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModDNodeTests.java
Passed: compiler/c2/irTests/stable/StableRefVolatileTest.java
Passed: compiler/c2/irTests/ModFNodeTests.java
Passed: compiler/c2/irTests/ModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MulINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulHFNodeIdealizationTests.java
Passed: compiler/c2/irTests/OrINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulLNodeIdealizationTests.java
Passed: compiler/c2/irTests/CMoveLConstants.java
Passed: compiler/c2/irTests/TestArrayElementTypeLoad.java
Passed: compiler/c2/irTests/OrLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVecCountingDownLoop.java
Passed: compiler/c2/irTests/RShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/RShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/SubINodeIdealizationTests.java
Passed: compiler/c2/irTests/SubLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVectorization2DArray.java
Passed: compiler/c2/irTests/TestBackToBackIfs.java
Passed: compiler/c2/irTests/TestBackToBackMustBeNotNull.java
Passed: compiler/c2/irTests/TestConv2BExpansion.java
Passed: compiler/c2/irTests/TestConvI2LCastLongLoop.java
Passed: compiler/c2/irTests/TestCMoveCCP.java
Passed: compiler/c2/irTests/TestDebugInfo.java
Passed: compiler/c2/irTests/TestEnumFinalFold.java
Passed: compiler/c2/irTests/TestCountedLoopPhiValue.java
Passed: compiler/c2/irTests/TestFPComparison.java
Passed: compiler/c2/irTests/TestFPConversion.java
Passed: compiler/c2/irTests/TestFewIterationsCountedLoop.java
Passed: compiler/c2/irTests/TestGetAndAdd.java
Passed: compiler/c2/irTests/TestCountedLoopSafepoint.java
Passed: compiler/c2/irTests/TestIRLShiftIdeal_XPlusX_LShiftC.java
Passed: compiler/c2/irTests/TestIterativeEA.java
Passed: compiler/c2/irTests/TestIRAbs.java
Passed: compiler/c2/irTests/TestMulNodeIdealization.java
Passed: compiler/c2/irTests/TestMinMaxIdentities.java
Passed: compiler/c2/irTests/TestPadding.java
Passed: compiler/c2/irTests/TestOptimizeUnstableIf.java
Passed: compiler/c2/irTests/TestIfMinMax.java
Passed: compiler/c2/irTests/TestPhiDuplicatedConversion.java
Passed: compiler/c2/irTests/TestPushAddThruCast.java
Passed: compiler/c2/irTests/TestIRFma.java
Passed: compiler/c2/irTests/TestScalarReplacement.java
Passed: compiler/c2/irTests/TestRemixAddressExpressions.java
Passed: compiler/c2/irTests/TestLongRangeChecks.java
Passed: compiler/c2/irTests/TestScheduleSmallMethod.java
Passed: compiler/c2/irTests/TestPostParseCallDevirtualization.java
Passed: compiler/c2/irTests/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java
Passed: compiler/c2/irTests/TestLSMMissedEmptyLoop.java
Passed: compiler/c2/irTests/TestShiftAndMask.java
Passed: compiler/c2/irTests/TestSkeletonPredicates.java
Passed: compiler/c2/irTests/TestTestRemovalPeephole.java
Passed: compiler/c2/irTests/TestFloat16ScalarOperations.java
Passed: compiler/c2/irTests/TestStripMiningDropsSafepoint.java
Passed: compiler/c2/irTests/TestVectorizationMultiInvar.java
Passed: compiler/c2/irTests/TestTypeSpeculation.java
Passed: compiler/c2/irTests/TestSuperwordFailsUnrolling.java
Passed: compiler/c2/irTests/gc/ReferenceClearTests.java
Passed: compiler/c2/irTests/gc/ReferenceRefersToTests.java
Passed: compiler/c2/irTests/UDivINodeIdealizationTests.java
Passed: compiler/c2/irTests/UModINodeIdealizationTests.java
Passed: compiler/c2/irTests/UDivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestUnsignedComparison.java
Passed: compiler/c2/irTests/UModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ConvF2HFIdealizationTests.java
Passed: compiler/c2/irTests/URShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/XorINodeIdealizationTests.java
Passed: compiler/c2/irTests/XorLNodeIdealizationTests.java
Passed: compiler/vectorization/runner/ArrayCopyTest.java
Passed: compiler/vectorization/runner/ArrayIndexFillTest.java
Passed: compiler/vectorization/runner/ArrayUnsafeOpTest.java
Passed: compiler/vectorization/runner/BasicBooleanOpTest.java
Passed: compiler/vectorization/runner/ArrayShiftOpTest.java
Passed: compiler/vectorization/runner/BasicByteOpTest.java
Passed: compiler/vectorization/runner/BasicCharOpTest.java
Passed: compiler/vectorization/TestAbsCharVector.java
Passed: compiler/vectorization/runner/BasicIntOpTest.java
Passed: compiler/c2/irTests/ProfileAtTypeCheck.java
Passed: compiler/vectorization/runner/BasicLongOpTest.java
Passed: compiler/vectorization/runner/BasicShortOpTest.java
Passed: compiler/vectorization/runner/StripMinedLoopTest.java
Passed: compiler/vectorization/runner/LoopRangeStrideTest.java
Passed: compiler/vectorization/runner/LoopLiveOutNodesTest.java
Passed: compiler/vectorization/TestCMoveWithoutBoolPack.java
Passed: compiler/vectorization/runner/LoopArrayIndexComputeTest.java
Passed: compiler/vectorization/runner/ArrayInvariantFillTest.java
Passed: compiler/vectorization/runner/LoopControlFlowTest.java
Passed: compiler/vectorization/runner/LoopReductionOpTest.java
Passed: compiler/vectorization/runner/MultipleLoopsTest.java
Passed: compiler/vectorization/TestMemoryVectorMismatched.java
Passed: compiler/vectorization/TestNarrowedIntegerReverseBytes.java
Passed: compiler/vectorization/TestOverlappingMismatchedAccesses.java
Passed: compiler/vectorization/TestPopCountVector.java
Passed: compiler/vectorization/TestOptionVectorize.java
Passed: compiler/vectorization/TestReplicateAtConv.java
Passed: compiler/vectorization/TestNaNVector.java
Passed: compiler/vectorization/TestMaskedVectors.java
Passed: compiler/vectorization/TestMacroLogicVector.java
Passed: compiler/vectorization/TestFloat16ToFloatConv.java
Passed: compiler/vectorization/TestSmallVectorPopIndex.java
Passed: compiler/vectorization/TestUnexpectedLoadOrdering.java
Passed: compiler/vectorization/TestReplicateLoopIV.java
Passed: compiler/vectorization/TestRotateByteAndShortVector.java
Passed: compiler/vectorization/TestVectorUnalignedOffset.java
Passed: compiler/vectorization/TestOffsetSorting.java
Passed: compiler/vectorization/TestComplexAddrExpr.java
Passed: compiler/vectorization/TestVectorizationNegativeScale.java
Passed: compiler/vectorization/TestForEachRem.java
Passed: compiler/vectorization/TestOptionVectorizeIR.java
Passed: compiler/vectorization/runner/BasicFloatOpTest.java
Passed: compiler/vectorization/TestSubwordReverseBytes.java
Passed: compiler/vectorization/TestBufferVectorization.java
Passed: compiler/vectorization/TestVectorsNotSavedAtSafepoint.java
Passed: compiler/vectorization/runner/BasicDoubleOpTest.java
Passed: compiler/vectorization/TestVectorZeroCount.java
--------------------------------------------------
TEST: compiler/vectorapi/TestMaskedMacroLogicVector.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.044 seconds
messages:
command: build compiler.vectorapi.TestMaskedMacroLogicVector
reason: Named class compiled on demand
started: Wed Apr 16 20:05:43 IST 2025
Test directory:
  compile: compiler.vectorapi.TestMaskedMacroLogicVector
finished: Wed Apr 16 20:05:44 IST 2025
elapsed time (seconds): 1.044

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.044 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:05:43 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 6
Process id: 1546788
finished: Wed Apr 16 20:05:44 IST 2025
elapsed time (seconds): 1.044
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/compiler/vectorapi/TestMaskedMacroLogicVector.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/test/lib
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp \
        -J-Dtest.vm.opts='-XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -J-Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -J-Dtest.name=compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0 \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0 \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0 \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

ACTION: driver -- Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
REASON: User specified action: run driver compiler.vectorapi.TestMaskedMacroLogicVector 
TIME:   290.124 seconds
messages:
command: driver compiler.vectorapi.TestMaskedMacroLogicVector
reason: User specified action: run driver compiler.vectorapi.TestMaskedMacroLogicVector 
started: Wed Apr 16 20:05:44 IST 2025
Mode: othervm [test requires --enable-preview, test requires non-default system module]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1557858
finished: Wed Apr 16 20:10:34 IST 2025
elapsed time (seconds): 290.124
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -258282333776557558
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-258282333776557558" to command line.
IR verification disabled due to the following reason(s):
- Using non-whitelisted JTreg VM or Javaoptions flag(s):
  - DeoptimizeALot
  - SafepointALot

Skip Flag VM due to not performing IR verification.
Run Test VM - [-XX:-TieredCompilation, -XX:UseAVX=3, --add-modules=jdk.incubator.vector, -XX:CompileThresholdScaling=0.3]:
Command line: [/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -cp /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp -XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot -Dir.framework.server.port=36157 -XX:-TieredCompilation -XX:UseAVX=3 --add-modules=jdk.incubator.vector -XX:CompileThresholdScaling=0.3 -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.TestMaskedMacroLogicVector ]
[2025-04-16T14:35:45.341391353Z] Gathering output for process 1557974
[2025-04-16T14:35:45.424931588Z] Waiting for completion for process 1557974
[2025-04-16T14:40:34.226451650Z] Waiting for completion finished for process 1557974
Output and diagnostic info for process 1557974 was saved into 'pid-1557974-output.log'

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector

TestFramework test VM exited with code 1

Command Line:
/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -DReproduce=true -cp /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp -XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot -Dir.framework.server.port=36157 -XX:-TieredCompilation -XX:UseAVX=3 --add-modules=jdk.incubator.vector -XX:CompileThresholdScaling=0.3 -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.TestMaskedMacroLogicVector


Error Output
------------
OpenJDK 64-Bit Server VM warning: UseAVX=3 requires UseSSE=4, setting it to UseAVX=0
WARNING: Using incubator modules: jdk.incubator.vector
Exception in thread "main" compiler.lib.ir_framework.shared.TestRunException: 

Test Failures (3)
-----------------
Custom Run Test: @Run: kernel_testInt6_Int256 - @Test: testInt6_Int256:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt6_Int256()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt6: at #162: r=0, expected = 1661821076 = intFunc6(1799223453,1938776532,448860058,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt6(TestMaskedMacroLogicVector.java:406)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt6_Int256(TestMaskedMacroLogicVector.java:747)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more


Custom Run Test: @Run: kernel_testInt3_Int512 - @Test: testInt3_Int512:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt3_Int512()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt3: at #448: r=1094914048, expected = 35660290 = intFunc3(1130574338,-151270321,-716481364,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt3(TestMaskedMacroLogicVector.java:255)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt3_Int512(TestMaskedMacroLogicVector.java:710)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more


Custom Run Test: @Run: kernel_testInt4_Int256 - @Test: testInt4_Int256:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt4_Int256()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt4: at #448: r=760253526, expected = -37446418 = intFunc4(-377976021,-795602760,760253526,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt4(TestMaskedMacroLogicVector.java:309)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt4_Int256(TestMaskedMacroLogicVector.java:621)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more



	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:903)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.TestVMProcess.throwTestVMException(TestVMProcess.java:245)
	at compiler.lib.ir_framework.driver.TestVMProcess.checkTestVMExitCode(TestVMProcess.java:226)
	at compiler.lib.ir_framework.driver.TestVMProcess.<init>(TestVMProcess.java:76)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:787)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:758)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:351)
	at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:248)
	at compiler.vectorapi.TestMaskedMacroLogicVector.main(TestMaskedMacroLogicVector.java:843)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -Dtest.name=compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0 \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/0 \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/compiler/vectorapi/TestMaskedMacroLogicVector.d/driver.0.jta

TEST RESULT: Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
--------------------------------------------------
Test results: passed: 325; failed: 1; excluded: 18; did not meet platform requirements: 82
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/hotspot/jtreg:hotspot_vector_1           426   325     1     0   100 <<
==============================
TEST FAILURE

Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_2', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_2
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_2

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Passed: compiler/intrinsics/string/TestStringEqualsBadLength.java
Passed: compiler/intrinsics/string/TestStringIndexOfCharIntrinsics.java
Passed: compiler/intrinsics/string/TestStringIntrinsicRangeChecks.java
Passed: compiler/intrinsics/string/TestCopyValueOf.java
Passed: compiler/intrinsics/string/TestStringConstruction.java
Passed: compiler/intrinsics/Test8005419.java
Passed: compiler/intrinsics/string/TestStringIntrinsicMemoryFlow.java
Passed: compiler/intrinsics/Test6982370.java
Passed: compiler/intrinsics/Test8237524.java
Passed: compiler/intrinsics/Test8215792.java
Passed: compiler/intrinsics/string/TestStringConstructionIntrinsics.java#id0
Passed: compiler/intrinsics/IntrinsicDisabledTest.java
Passed: compiler/intrinsics/string/TestStringIntrinsics2.java
Passed: compiler/intrinsics/TestArrayGuardWithInterfaces.java
Passed: compiler/intrinsics/TestArraysHashCode.java
Passed: compiler/intrinsics/IntrinsicAvailableTest.java
Passed: compiler/intrinsics/TestContinuationPinningAndEA.java
Passed: compiler/intrinsics/TestReferenceRefersTo.java
Passed: compiler/intrinsics/TestReferenceGetWithNull.java
Passed: compiler/intrinsics/TestCheckIndex.java
Passed: compiler/intrinsics/TestCompareUnsigned.java
Passed: compiler/codegen/aes/Test8292158.java
Passed: compiler/intrinsics/string/TestStringUTF16IntrinsicRangeChecks.java
Passed: compiler/codegen/aes/Test8299817.java
Passed: compiler/intrinsics/string/TestCountPositives.java#id0
Passed: compiler/codegen/Test6935535.java#id1
Passed: compiler/intrinsics/TestRotate.java
Passed: compiler/intrinsics/base64/TestBase64.java
Passed: compiler/intrinsics/string/TestHasNegatives.java#id0
Passed: compiler/intrinsics/TestIntegerUnsignedDivMod.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLenReturnProfile.java
Passed: compiler/codegen/aes/TestCipherBlockChainingEncrypt.java
Passed: compiler/intrinsics/bigInteger/TestMulAdd.java
Passed: compiler/intrinsics/bigInteger/TestSquareToLen.java
Passed: compiler/codegen/Test6935535.java#id0
Passed: compiler/intrinsics/bmi/verifycode/AndnTestI.java
Passed: compiler/codegen/Test6875866.java
Passed: compiler/intrinsics/string/TestEncodeIntrinsics.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestI.java
Passed: compiler/intrinsics/bigInteger/TestShift.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestI.java
Passed: compiler/intrinsics/bigInteger/MontgomeryMultiplyTest.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestL.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestL.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestL.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestI.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLen.java
Passed: compiler/intrinsics/string/TestStringIntrinsics.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestI.java
Passed: compiler/intrinsics/TestLongUnsignedDivMod.java
Passed: compiler/intrinsics/bmi/TestBlsiI.java
Passed: compiler/intrinsics/bmi/TestLzcntI.java
Passed: compiler/intrinsics/bmi/TestBlsiL.java
Passed: compiler/intrinsics/bmi/TestLzcntL.java
Passed: compiler/intrinsics/bmi/TestBlsrI.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id0
Passed: compiler/intrinsics/bmi/TestBlsmskI.java
Passed: compiler/intrinsics/bmi/TestBlsmskL.java
Passed: compiler/intrinsics/bmi/TestTzcntI.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id1
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id2
Passed: compiler/intrinsics/bmi/TestBlsrL.java
Passed: compiler/intrinsics/math/Test8210461.java
Passed: compiler/intrinsics/math/TestMinMaxIntrinsics.java
Passed: compiler/intrinsics/bmi/TestTzcntL.java
Passed: compiler/intrinsics/bmi/TestAndnL.java
Passed: compiler/intrinsics/math/TestPow0Dot5Opt.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactIntTest.java
Passed: compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
Passed: compiler/intrinsics/math/TestPow2Opt.java
Passed: compiler/intrinsics/bmi/TestAndnI.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactLongTest.java
Passed: compiler/intrinsics/klass/TestIsPrimitive.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactLongTest.java
Passed: compiler/intrinsics/TestBitShuffleOpers.java
Passed: compiler/intrinsics/math/TestMinMaxInlining.java
Passed: compiler/intrinsics/math/TestMinMaxOpt.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactLongTest.java
Passed: compiler/intrinsics/mathexact/AddExactICondTest.java
Passed: compiler/intrinsics/mathexact/AddExactIRepeatTest.java
Passed: compiler/intrinsics/math/MaxMinOptimizeTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoadTest.java
Passed: compiler/intrinsics/mathexact/AddExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/CompareTest.java
Passed: compiler/intrinsics/klass/CastNullCheckDroppingsTest.java
Passed: compiler/intrinsics/bmi/TestBzhiI2L.java
Passed: compiler/codegen/aes/TestAESMain.java
Passed: compiler/intrinsics/mathexact/AddExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/GVNTest.java
Passed: compiler/intrinsics/mathexact/MulExactICondTest.java
Passed: compiler/intrinsics/mathexact/AddExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/IncExactLTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoadTest.java
Passed: compiler/intrinsics/mathexact/DecExactITest.java
Passed: compiler/intrinsics/mathexact/DecExactLTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/IncExactITest.java
Passed: compiler/intrinsics/mathexact/NestedMathExactTest.java
Passed: compiler/intrinsics/mathexact/SplitThruPhiTest.java
Passed: compiler/intrinsics/mathexact/SubExactICondTest.java
Passed: compiler/intrinsics/mathexact/MulExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/NegExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/LongMulOverflowTest.java
Passed: compiler/intrinsics/mathexact/NegExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoadTest.java
Passed: compiler/intrinsics/object/TestHashCode.java
Passed: compiler/intrinsics/mathexact/MulExactLConstantTest.java
Passed: compiler/intrinsics/math/TestSignumIntrinsic.java
Passed: compiler/intrinsics/mathexact/SubExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoadTest.java
Passed: compiler/intrinsics/mathexact/MulExactINonConstantTest.java
Passed: compiler/intrinsics/SortingDeoptimizationTest.java
Passed: compiler/intrinsics/mathexact/SubExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/SubExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/SubExactINonConstantTest.java
Passed: compiler/intrinsics/sha/sanity/TestMD5Intrinsics.java
Passed: compiler/intrinsics/mathexact/SubExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactLNonConstantTest.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestMD5MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/TestUnsafeMismatchedArrayFieldAccess.java
Passed: compiler/intrinsics/unsafe/TestCAEAntiDep.java
Passed: compiler/intrinsics/unsafe/TestUnsafeUnalignedMismatchedAccesses.java
Passed: compiler/loopopts/superword/Vec_MulAddS2I.java
Passed: compiler/intrinsics/object/TestClone.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256Intrinsics.java
Passed: compiler/intrinsics/unsafe/UnsafeGetAddressTest.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/UnsafeTwoCASLong.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3Intrinsics.java
Passed: compiler/intrinsics/zip/TestFpRegsABI.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/AllocateUninitializedArray.java
Passed: compiler/intrinsics/zip/TestAdler32.java
Passed: compiler/intrinsics/zip/TestCRC32C.java
Passed: compiler/intrinsics/zip/TestCRC32.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id1
Passed: compiler/intrinsics/unsafe/DirectByteBufferTest.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id0
Passed: compiler/intrinsics/sha/sanity/TestSHA256MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/TestDigest.java
Test results: passed: 163; skipped: 5; excluded: 1; did not meet platform requirements: 28
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_2
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_2           192   158     0     0    34   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/:jdk_vector', will run:
* jtreg:test/jdk:jdk_vector
Clean up dirs for jtreg_test_jdk_jdk_vector

Running test 'jtreg:test/jdk:jdk_vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Double512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   2.232 seconds
messages:
command: build Double512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:16:01 IST 2025
Test directory:
  compile: Double512VectorTests
finished: Wed Apr 16 20:16:03 IST 2025
elapsed time (seconds): 2.232

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   2.232 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:16:01 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 3
Process id: 1589709
finished: Wed Apr 16 20:16:03 IST 2025
elapsed time (seconds): 2.232
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Double512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Double512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Double512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Double512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double512VectorTests 
TIME:   165.972 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Double512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double512VectorTests 
started: Wed Apr 16 20:16:03 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1591919
finished: Wed Apr 16 20:18:49 IST 2025
elapsed time (seconds): 165.972
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 1476346641475005155
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=1476346641475005155" to command line.
test Double512VectorTests.ABSDouble512VectorTests(double[-i * 5]): success [340ms]
test Double512VectorTests.ABSDouble512VectorTests(double[i * 5]): success [355ms]
test Double512VectorTests.ABSDouble512VectorTests(double[i + 1]): success [12ms]
test Double512VectorTests.ABSDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [4ms]
test Double512VectorTests.ABSDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [49ms]
test Double512VectorTests.ABSDouble512VectorTests(double[cornerCaseValue(i)]): success [4ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[-i * 5], mask[i % 2]): success [154ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i * 5], mask[i % 2]): success [174ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i + 1], mask[i % 2]): success [37ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [68ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[-i * 5], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i * 5], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[-i * 5], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i + 1], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[-i * 5]): success [94ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[i * 5]): success [34ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[i + 1]): success [8ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [4ms]
test Double512VectorTests.ACOSDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [56ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[i * 5]): success [92ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[i + 1]): success [250ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [4ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [3ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [70ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [16ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [20ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [8ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [14ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [125ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [54ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [7ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [71ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[-i * 5]): success [106ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[i * 5]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[i + 1]): success [70ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[-i * 5], mask[i % 2]): success [69ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i * 5], mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i + 1], mask[i % 2]): success [89ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[-i * 5], mask[true]): success [48ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i * 5], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i + 1], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[-i * 5], mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i * 5], mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i + 1], mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [13ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[-i * 5]): success [10ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[i * 5]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[i + 1]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[-i * 5], mask[i % 2]): success [8ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i * 5], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[-i * 5], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[-i * 5], mask[false]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [10ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.ASINDouble512VectorTests(double[-i * 5]): success [129ms]
test Double512VectorTests.ASINDouble512VectorTests(double[i * 5]): success [71ms]
test Double512VectorTests.ASINDouble512VectorTests(double[i + 1]): success [8ms]
test Double512VectorTests.ASINDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.ASINDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [55ms]
test Double512VectorTests.ASINDouble512VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[i * 5]): success [254ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[i + 1]): success [64ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [23ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [14ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [78ms]
test Double512VectorTests.ATANDouble512VectorTests(double[-i * 5]): success [19ms]
test Double512VectorTests.ATANDouble512VectorTests(double[i * 5]): success [69ms]
test Double512VectorTests.ATANDouble512VectorTests(double[i + 1]): success [9ms]
test Double512VectorTests.ATANDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [8ms]
test Double512VectorTests.ATANDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [61ms]
test Double512VectorTests.ATANDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[-i * 5]): success [44ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[i * 5]): success [61ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[i + 1]): success [28ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [28ms]
test Double512VectorTests.BroadcastDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [90ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[cornerCaseValue(i)]): success [28ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[-i * 5]): success [2ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[i + 1]): success [2ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[-i * 5]): success [36ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[i * 5]): success [107ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[i + 1]): success [3ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.CBRTDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [87ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[cornerCaseValue(i)]): success [51ms]
test Double512VectorTests.COSDouble512VectorTests(double[-i * 5]): success [16ms]
test Double512VectorTests.COSDouble512VectorTests(double[i * 5]): success [73ms]
test Double512VectorTests.COSDouble512VectorTests(double[i + 1]): success [2ms]
test Double512VectorTests.COSDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.COSDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [75ms]
test Double512VectorTests.COSDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.COSHDouble512VectorTests(double[-i * 5]): success [52ms]
test Double512VectorTests.COSHDouble512VectorTests(double[i * 5]): success [100ms]
test Double512VectorTests.COSHDouble512VectorTests(double[i + 1]): success [8ms]
test Double512VectorTests.COSHDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.COSHDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [70ms]
test Double512VectorTests.COSHDouble512VectorTests(double[cornerCaseValue(i)]): success [53ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[i * 5]): success [143ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[i + 1]): success [115ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [2ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [67ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [16ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [20ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [70ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i]): success [205ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i - length / 2]): success [158ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i + 1]): success [47ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i - 2]): success [47ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[zigZag(i)]): success [74ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[cornerCaseValue(i)]): success [45ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i - length / 2]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i + 1]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i - 2]): success [78ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[zigZag(i)]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i - length / 2]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i + 1]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i - 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[zigZag(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i - length / 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i + 1]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i - 2]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[zigZag(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i - length / 2]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i + 1]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i - 2]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[zigZag(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [42ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [15ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [3ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [62ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [3ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [4ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [4ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [81ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[true]): success [1ms]
test Do

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

e(i)], AbstractVectorTest$1@25daae7f): success [47ms]
test Double512VectorTests.fmaDouble512VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.getDouble512VectorTests(double[-i * 5]): success [5ms]
test Double512VectorTests.getDouble512VectorTests(double[i * 5]): success [4ms]
test Double512VectorTests.getDouble512VectorTests(double[i + 1]): success [4ms]
test Double512VectorTests.getDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [4ms]
test Double512VectorTests.getDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [92ms]
test Double512VectorTests.getDouble512VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[-i * 5]): success [35ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[i * 5]): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(0): success [65ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(-1): success [16ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(1): success [15ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(2): success [1ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(-2): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(0): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(-1): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(1): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(2): success [2ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(-2): success [1ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(0): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(32): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(37): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1024): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1025): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1029): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(0): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(32): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(37): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1024): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1025): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1029): success [0ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i]): success [108ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i - length / 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i + 1]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i - 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[zigZag(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i - length / 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i + 1]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i - 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[zigZag(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [55ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i - length / 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i + 1]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i - 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[zigZag(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [45ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i - length / 2]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i + 1]): success [73ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i - 2]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[zigZag(i)]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i - length / 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i + 1]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i - 2]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[zigZag(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i]): success [48ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [37ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.maskAndDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Double512VectorTests.maskAndDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskAndNotDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Double512VectorTests.maskAndNotDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskCompressDouble512VectorTestsSmokeTest(mask[i % 2]): success [425ms]
test Double512VectorTests.maskCompressDouble512VectorTestsSmokeTest(mask[true]): success [216ms]
test Double512VectorTests.maskCompressDouble512VectorTestsSmokeTest(mask[false]): success [219ms]
test Double512VectorTests.maskEqDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Double512VectorTests.maskEqDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskEqualsDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Double512VectorTests.maskEqualsDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskFirstTrueDouble512VectorTestsSmokeTest(mask[i % 2]): success [84ms]
test Double512VectorTests.maskFirstTrueDouble512VectorTestsSmokeTest(mask[true]): success [72ms]
test Double512VectorTests.maskFirstTrueDouble512VectorTestsSmokeTest(mask[false]): success [40ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(-1): success [53ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(0): success [0ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Double512VectorTests.maskHashCodeDouble512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Double512VectorTests.maskHashCodeDouble512VectorTestsSmokeTest(mask[true]): success [0ms]
test Double512VectorTests.maskHashCodeDouble512VectorTestsSmokeTest(mask[false]): success [0ms]
test Double512VectorTests.maskLastTrueDouble512VectorTestsSmokeTest(mask[i % 2]): success [88ms]
test Double512VectorTests.maskLastTrueDouble512VectorTestsSmokeTest(mask[true]): success [72ms]
test Double512VectorTests.maskLastTrueDouble512VectorTestsSmokeTest(mask[false]): success [57ms]
test Double512VectorTests.maskOrDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [45ms]
test Double512VectorTests.maskOrDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskTrueCountDouble512VectorTestsSmokeTest(mask[i % 2]): success [56ms]
test Double512VectorTests.maskTrueCountDouble512VectorTestsSmokeTest(mask[true]): success [72ms]
test Double512VectorTests.maskTrueCountDouble512VectorTestsSmokeTest(mask[false]): success [40ms]
test Double512VectorTests.maskXorDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Double512VectorTests.maskXorDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [28ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [5ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.negDouble512VectorTests(double[-i * 5]): success [8ms]
test Double512VectorTests.negDouble512VectorTests(double[i * 5]): success [7ms]
test Double512VectorTests.negDouble512VectorTests(double[i + 1]): success [2ms]
test Double512VectorTests.negDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.negDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [47ms]
test Double512VectorTests.negDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[i * 5]): success [16ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[i + 1]): success [12ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [3ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [79ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [12ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.shuffleEqualsDouble512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [223ms]
test Double512VectorTests.shuffleEqualsDouble512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [23ms]
test Double512VectorTests.shuffleMiscellaneousDouble512VectorTestsSmokeTest(shuffle[random]): success [6ms]
test Double512VectorTests.shuffleTest(): success [908ms]
test Double512VectorTests.shuffleToStringDouble512VectorTestsSmokeTest(shuffle[random]): success [36ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i * 5]): success [490ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i + 1]): success [932ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [290ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [278ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [686ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [315ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [407ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [307ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [316ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [863ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [306ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [366ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [299ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [300ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [576ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [297ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [296ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [304ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [296ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [296ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[-i * 5]): success [261ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[i * 5]): success [446ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[i + 1]): success [246ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [246ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [465ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[cornerCaseValue(i)]): success [262ms]
test Double512VectorTests.smokeTest1(): success [0ms]
test Double512VectorTests.smokeTest2(): success [44ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[-i * 5]): success [8ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[i * 5]): success [7ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[i + 1]): success [1ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.sqrtDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [61ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[i * 5]): success [8ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [8ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [36ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [7ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[-i * 5]): success [6ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[i * 5]): success [5ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[i + 1]): success [5ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [5ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[-i * 5]): success [0ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[-i * 5]): success [7ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[i * 5]): success [1ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[i + 1]): success [1ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [17ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [1ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [15ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i * 5]): success [269ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i + 1]): success [492ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [331ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [250ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [855ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [539ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [1214ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [511ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [555ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1291ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [515ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [513ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [522ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [523ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [528ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [513ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [514ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [513ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [512ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [513ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[-i * 5]): success [255ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[i * 5]): success [447ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[i + 1]): success [262ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [246ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [616ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[cornerCaseValue(i)]): success [246ms]
test Double512VectorTests.viewAsFloatingLanesTest(): success [21ms]
test Double512VectorTests.viewAsIntegeralLanesTest(): success [23ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[i * 5]): success [11ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[i + 1]): success [23ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [10ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [10ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [156ms]

===============================================
jdk/incubator/vector/Double512VectorTests.java
Total tests run: 3209, Passes: 3208, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Double512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Double512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Double512VectorTests.d/testng.0.jta jdk/incubator/vector/Double512VectorTests.java false Double512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Float128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   2.484 seconds
messages:
command: build Float128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:16:50 IST 2025
Test directory:
  compile: Float128VectorTests
finished: Wed Apr 16 20:16:52 IST 2025
elapsed time (seconds): 2.484

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   2.484 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:16:50 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 11
Process id: 1590348
finished: Wed Apr 16 20:16:52 IST 2025
elapsed time (seconds): 2.484
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Float128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Float128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Float128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Float128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Float128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Float128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Float128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Float128VectorTests 
TIME:   267.821 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Float128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Float128VectorTests 
started: Wed Apr 16 20:16:52 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1592255
finished: Wed Apr 16 20:21:20 IST 2025
elapsed time (seconds): 267.821
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 7844462304524145481
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=7844462304524145481" to command line.
test Float128VectorTests.ABSFloat128VectorTests(float[-i * 5]): success [579ms]
test Float128VectorTests.ABSFloat128VectorTests(float[i * 5]): success [50ms]
test Float128VectorTests.ABSFloat128VectorTests(float[i + 1]): success [2ms]
test Float128VectorTests.ABSFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.ABSFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.ABSFloat128VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[-i * 5], mask[i % 2]): success [234ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[i * 5], mask[i % 2]): success [67ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[i + 1], mask[i % 2]): success [5ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [38ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [17ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[-i * 5], mask[true]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[i * 5], mask[true]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[i + 1], mask[true]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(AbstractVectorTest$1@6ed11085, mask[true]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[cornerCaseValue(i)], mask[true]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[-i * 5], mask[false]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[i * 5], mask[false]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[i + 1], mask[false]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float128VectorTests.ABSMaskedFloat128VectorTests(float[cornerCaseValue(i)], mask[false]): success [1ms]
test Float128VectorTests.ACOSFloat128VectorTests(float[-i * 5]): success [126ms]
test Float128VectorTests.ACOSFloat128VectorTests(float[i * 5]): success [59ms]
test Float128VectorTests.ACOSFloat128VectorTests(float[i + 1]): success [10ms]
test Float128VectorTests.ACOSFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [4ms]
test Float128VectorTests.ACOSFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.ACOSFloat128VectorTests(float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTests(float[-i * 5], float[i * 5]): success [218ms]
test Float128VectorTests.ADDFloat128VectorTests(float[-i * 5], float[i + 1]): success [60ms]
test Float128VectorTests.ADDFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.ADDFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.ADDFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i * 5]): success [16ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i + 1]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [31ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [7ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [4ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [4ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [4ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [4ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [9ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [12ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [31ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [2ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [2ms]
test Float128VectorTests.ADDFloat128VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [2ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [118ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [65ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [4ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [3ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [13ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float128VectorTests.ADDFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [1ms]
test Float128VectorTests.ADDReduceFloat128VectorTests(float[-i * 5]): success [136ms]
test Float128VectorTests.ADDReduceFloat128VectorTests(float[i * 5]): success [0ms]
test Float128VectorTests.ADDReduceFloat128VectorTests(float[i + 1]): success [96ms]
test Float128VectorTests.ADDReduceFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.ADDReduceFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.ADDReduceFloat128VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[-i * 5], mask[i % 2]): success [126ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[i * 5], mask[i % 2]): success [3ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[i + 1], mask[i % 2]): success [87ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [3ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[-i * 5], mask[true]): success [3ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[i * 5], mask[true]): success [13ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[i + 1], mask[true]): success [30ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[true]): success [2ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [1ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[-i * 5], mask[false]): success [2ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[i * 5], mask[false]): success [15ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[i + 1], mask[false]): success [2ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float128VectorTests.ADDReduceFloat128VectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [2ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTests(float[-i * 5]): success [10ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTests(float[i * 5]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTests(float[i + 1]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[-i * 5], mask[i % 2]): success [10ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[i * 5], mask[i % 2]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[-i * 5], mask[true]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[i * 5], mask[true]): success [10ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [4ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[-i * 5], mask[false]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[i + 1], mask[false]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float128VectorTests.ADDReduceLongFloat128VectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.ASINFloat128VectorTests(float[-i * 5]): success [144ms]
test Float128VectorTests.ASINFloat128VectorTests(float[i * 5]): success [58ms]
test Float128VectorTests.ASINFloat128VectorTests(float[i + 1]): success [2ms]
test Float128VectorTests.ASINFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.ASINFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.ASINFloat128VectorTests(float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ATAN2Float128VectorTests(float[-i * 5], float[i * 5]): success [130ms]
test Float128VectorTests.ATAN2Float128VectorTests(float[-i * 5], float[i + 1]): success [78ms]
test Float128VectorTests.ATAN2Float128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.ATAN2Float128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [13ms]
test Float128VectorTests.ATAN2Float128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [6ms]
test Float128VectorTests.ATANFloat128VectorTests(float[-i * 5]): success [67ms]
test Float128VectorTests.ATANFloat128VectorTests(float[i * 5]): success [57ms]
test Float128VectorTests.ATANFloat128VectorTests(float[i + 1]): success [1ms]
test Float128VectorTests.ATANFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.ATANFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.ATANFloat128VectorTests(float[cornerCaseValue(i)]): success [3ms]
test Float128VectorTests.BroadcastFloat128VectorTests(float[-i * 5]): success [121ms]
test Float128VectorTests.BroadcastFloat128VectorTests(float[i * 5]): success [71ms]
test Float128VectorTests.BroadcastFloat128VectorTests(float[i + 1]): success [0ms]
test Float128VectorTests.BroadcastFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.BroadcastFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.BroadcastFloat128VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.BroadcastLongFloat128VectorTestsSmokeTest(float[-i * 5]): success [3ms]
test Float128VectorTests.BroadcastLongFloat128VectorTestsSmokeTest(float[i * 5]): success [3ms]
test Float128VectorTests.BroadcastLongFloat128VectorTestsSmokeTest(float[i + 1]): success [3ms]
test Float128VectorTests.BroadcastLongFloat128VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [3ms]
test Float128VectorTests.CBRTFloat128VectorTests(float[-i * 5]): success [111ms]
test Float128VectorTests.CBRTFloat128VectorTests(float[i * 5]): success [62ms]
test Float128VectorTests.CBRTFloat128VectorTests(float[i + 1]): success [11ms]
test Float128VectorTests.CBRTFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.CBRTFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.CBRTFloat128VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.COSFloat128VectorTests(float[-i * 5]): success [68ms]
test Float128VectorTests.COSFloat128VectorTests(float[i * 5]): success [63ms]
test Float128VectorTests.COSFloat128VectorTests(float[i + 1]): success [0ms]
test Float128VectorTests.COSFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.COSFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.COSFloat128VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.COSHFloat128VectorTests(float[-i * 5]): success [130ms]
test Float128VectorTests.COSHFloat128VectorTests(float[i * 5]): success [63ms]
test Float128VectorTests.COSHFloat128VectorTests(float[i + 1]): success [1ms]
test Float128VectorTests.COSHFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.COSHFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.COSHFloat128VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.DIVFloat128VectorTests(float[-i * 5], float[i * 5]): success [186ms]
test Float128VectorTests.DIVFloat128VectorTests(float[-i * 5], float[i + 1]): success [60ms]
test Float128VectorTests.DIVFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.DIVFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.DIVFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [35ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [65ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [3ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [3ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [5ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [3ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [4ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [4ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [24ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [3ms]
test Float128VectorTests.DIVFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [3ms]
test Float128VectorTests.EQFloat128VectorTests(float[i], float[i]): success [374ms]
test Float128VectorTests.EQFloat128VectorTests(float[i], float[i - length / 2]): success [211ms]
test Float128VectorTests.EQFloat128VectorTests(float[i], float[i + 1]): success [136ms]
test Float128VectorTests.EQFloat128VectorTests(float[i], float[i - 2]): success [103ms]
test Float128VectorTests.EQFloat128VectorTests(float[i], float[zigZag(i)]): success [103ms]
test Float128VectorTests.EQFloat128VectorTests(float[i], float[cornerCaseValue(i)]): success [102ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - length / 2], float[i]): success [100ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - length / 2], float[i - length / 2]): success [99ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - length / 2], float[i + 1]): success [104ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - length / 2], float[i - 2]): success [138ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - length / 2], float[zigZag(i)]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[i + 1], float[i]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[i + 1], float[i - length / 2]): success [103ms]
test Float128VectorTests.EQFloat128VectorTests(float[i + 1], float[i + 1]): success [100ms]
test Float128VectorTests.EQFloat128VectorTests(float[i + 1], float[i - 2]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[i + 1], float[zigZag(i)]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [102ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - 2], float[i]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - 2], float[i - length / 2]): success [100ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - 2], float[i + 1]): success [100ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - 2], float[i - 2]): success [103ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - 2], float[zigZag(i)]): success [102ms]
test Float128VectorTests.EQFloat128VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[zigZag(i)], float[i]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[zigZag(i)], float[i - length / 2]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[zigZag(i)], float[i + 1]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[zigZag(i)], float[i - 2]): success [100ms]
test Float128VectorTests.EQFloat128VectorTests(float[zigZag(i)], float[zigZag(i)]): success [103ms]
test Float128VectorTests.EQFloat128VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [100ms]
test Float128VectorTests.EQFloat128VectorTests(float[cornerCaseValue(i)], float[i]): success [107ms]
test Float128VectorTests.EQFloat128VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [100ms]
test Float128VectorTests.EQFloat128VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [102ms]
test Float128VectorTests.EQFloat128VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [104ms]
test Float128VectorTests.EQFloat128VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [101ms]
test Float128VectorTests.EQFloat128VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [102ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[i % 2]): success [18ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[i % 2]): success [7ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[i % 2]): success [7ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[i % 2]): success [77ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[i % 2]): success [40ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[i % 2]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[i % 2]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[i % 2]): success [8ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[i % 2]): success [4ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[i % 2]): success [25ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[true]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[true]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[true]): success [3ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[true]): success [56ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[false]): success [2ms]
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[f

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

6ed11085, mask[false]): success [8ms]
test Float128VectorTests.compressFloat128VectorTests(float[cornerCaseValue(i)], mask[false]): success [8ms]
test Float128VectorTests.divFloat128VectorTests(float[-i * 5], float[i * 5]): success [8ms]
test Float128VectorTests.divFloat128VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.divFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.divFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.divFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [8ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [43ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [34ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [7ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.divFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [6ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float128VectorTests.divFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.eqFloat128VectorTests(float[i], float[i]): success [206ms]
test Float128VectorTests.eqFloat128VectorTests(float[i], float[i - length / 2]): success [106ms]
test Float128VectorTests.eqFloat128VectorTests(float[i], float[i + 1]): success [101ms]
test Float128VectorTests.eqFloat128VectorTests(float[i], float[i - 2]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i], float[zigZag(i)]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i], float[cornerCaseValue(i)]): success [103ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - length / 2], float[i]): success [101ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - length / 2], float[i - length / 2]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - length / 2], float[i + 1]): success [101ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - length / 2], float[i - 2]): success [101ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - length / 2], float[zigZag(i)]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i + 1], float[i]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i + 1], float[i - length / 2]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i + 1], float[i + 1]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i + 1], float[i - 2]): success [101ms]
test Float128VectorTests.eqFloat128VectorTests(float[i + 1], float[zigZag(i)]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - 2], float[i]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - 2], float[i - length / 2]): success [101ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - 2], float[i + 1]): success [108ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - 2], float[i - 2]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - 2], float[zigZag(i)]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [101ms]
test Float128VectorTests.eqFloat128VectorTests(float[zigZag(i)], float[i]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[zigZag(i)], float[i - length / 2]): success [109ms]
test Float128VectorTests.eqFloat128VectorTests(float[zigZag(i)], float[i + 1]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[zigZag(i)], float[i - 2]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[zigZag(i)], float[zigZag(i)]): success [101ms]
test Float128VectorTests.eqFloat128VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[cornerCaseValue(i)], float[i]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [101ms]
test Float128VectorTests.eqFloat128VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [102ms]
test Float128VectorTests.eqFloat128VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [116ms]
test Float128VectorTests.eqFloat128VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [100ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[i]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[i - length / 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[i + 1]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[i - 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[zigZag(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - length / 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i + 1]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[zigZag(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - length / 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i + 1]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[zigZag(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - length / 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i + 1]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - 2]): success [57ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[zigZag(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - length / 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i + 1]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [1ms]
test Float128VectorTests.eqFloat128VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.expandFloat128VectorTests(float[-i * 5], mask[i % 2]): success [157ms]
test Float128VectorTests.expandFloat128VectorTests(float[i * 5], mask[i % 2]): success [147ms]
test Float128VectorTests.expandFloat128VectorTests(float[i + 1], mask[i % 2]): success [79ms]
test Float128VectorTests.expandFloat128VectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [87ms]
test Float128VectorTests.expandFloat128VectorTests(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [79ms]
test Float128VectorTests.expandFloat128VectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [79ms]
test Float128VectorTests.expandFloat128VectorTests(float[-i * 5], mask[true]): success [29ms]
test Float128VectorTests.expandFloat128VectorTests(float[i * 5], mask[true]): success [6ms]
test Float128VectorTests.expandFloat128VectorTests(float[i + 1], mask[true]): success [5ms]
test Float128VectorTests.expandFloat128VectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [5ms]
test Float128VectorTests.expandFloat128VectorTests(AbstractVectorTest$1@6ed11085, mask[true]): success [5ms]
test Float128VectorTests.expandFloat128VectorTests(float[cornerCaseValue(i)], mask[true]): success [6ms]
test Float128VectorTests.expandFloat128VectorTests(float[-i * 5], mask[false]): success [8ms]
test Float128VectorTests.expandFloat128VectorTests(float[i * 5], mask[false]): success [8ms]
test Float128VectorTests.expandFloat128VectorTests(float[i + 1], mask[false]): success [8ms]
test Float128VectorTests.expandFloat128VectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [8ms]
test Float128VectorTests.expandFloat128VectorTests(AbstractVectorTest$1@6ed11085, mask[false]): success [8ms]
test Float128VectorTests.expandFloat128VectorTests(float[cornerCaseValue(i)], mask[false]): success [15ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i * 5], float[-i * 5]): success [8ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i * 5], float[i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i + 1], float[i + 1]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i + 1], AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [52ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[-i * 5]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i * 5]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i + 1]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.fmaFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[-i * 5]): success [9ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i * 5]): success [18ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], AbstractVectorTest$1@6ed11085): success [21ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i + 1]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[-i * 5]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i * 5]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i + 1]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.fmaFloat128VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.getFloat128VectorTests(float[-i * 5]): success [7ms]
test Float128VectorTests.getFloat128VectorTests(float[i * 5]): success [64ms]
test Float128VectorTests.getFloat128VectorTests(float[i + 1]): success [2ms]
test Float128VectorTests.getFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.getFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.getFloat128VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.hashCodeFloat128VectorTestsSmokeTest(float[-i * 5]): success [39ms]
test Float128VectorTests.hashCodeFloat128VectorTestsSmokeTest(float[i * 5]): success [2ms]
test Float128VectorTests.hashCodeFloat128VectorTestsSmokeTest(float[i + 1]): success [7ms]
test Float128VectorTests.hashCodeFloat128VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [2ms]
test Float128VectorTests.hashCodeFloat128VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [8ms]
test Float128VectorTests.hashCodeFloat128VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.indexInRangeFloat128VectorTestsSmokeTest(0): success [75ms]
test Float128VectorTests.indexInRangeFloat128VectorTestsSmokeTest(-1): success [19ms]
test Float128VectorTests.indexInRangeFloat128VectorTestsSmokeTest(1): success [19ms]
test Float128VectorTests.indexInRangeFloat128VectorTestsSmokeTest(2): success [3ms]
test Float128VectorTests.indexInRangeFloat128VectorTestsSmokeTest(-2): success [4ms]
test Float128VectorTests.indexInRangeLongFloat128VectorTestsSmokeTest(0): success [3ms]
test Float128VectorTests.indexInRangeLongFloat128VectorTestsSmokeTest(-1): success [3ms]
test Float128VectorTests.indexInRangeLongFloat128VectorTestsSmokeTest(1): success [3ms]
test Float128VectorTests.indexInRangeLongFloat128VectorTestsSmokeTest(2): success [3ms]
test Float128VectorTests.indexInRangeLongFloat128VectorTestsSmokeTest(-2): success [3ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(0): success [0ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(1): success [0ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(32): success [0ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(37): success [0ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(1024): success [0ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(1025): success [0ms]
test Float128VectorTests.loopBoundFloat128VectorTestsSmokeTest(1029): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(0): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(1): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(32): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(37): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(1024): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(1025): success [0ms]
test Float128VectorTests.loopBoundLongFloat128VectorTestsSmokeTest(1029): success [0ms]
test Float128VectorTests.ltFloat128VectorTests(float[i], float[i]): success [195ms]
test Float128VectorTests.ltFloat128VectorTests(float[i], float[i - length / 2]): success [106ms]
test Float128VectorTests.ltFloat128VectorTests(float[i], float[i + 1]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[i], float[i - 2]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[i], float[zigZag(i)]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[i], float[cornerCaseValue(i)]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - length / 2], float[i]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - length / 2], float[i - length / 2]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - length / 2], float[i + 1]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - length / 2], float[i - 2]): success [108ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - length / 2], float[zigZag(i)]): success [107ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[i + 1], float[i]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[i + 1], float[i - length / 2]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[i + 1], float[i + 1]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[i + 1], float[i - 2]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[i + 1], float[zigZag(i)]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - 2], float[i]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - 2], float[i - length / 2]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - 2], float[i + 1]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - 2], float[i - 2]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - 2], float[zigZag(i)]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[zigZag(i)], float[i]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[zigZag(i)], float[i - length / 2]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[zigZag(i)], float[i + 1]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[zigZag(i)], float[i - 2]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[zigZag(i)], float[zigZag(i)]): success [100ms]
test Float128VectorTests.ltFloat128VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[cornerCaseValue(i)], float[i]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [107ms]
test Float128VectorTests.ltFloat128VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [101ms]
test Float128VectorTests.ltFloat128VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [100ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i], float[i]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i], float[i - length / 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i], float[i + 1]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i], float[i - 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i], float[zigZag(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - length / 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i + 1]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - length / 2], float[zigZag(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i + 1], float[i]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i + 1], float[i - length / 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i + 1], float[i + 1]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i + 1], float[i - 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i + 1], float[zigZag(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - 2], float[i]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - 2], float[i - length / 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - 2], float[i + 1]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - 2], float[i - 2]): success [56ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - 2], float[zigZag(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - length / 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i + 1]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [30ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [1ms]
test Float128VectorTests.ltFloat128VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.maskAndFloat128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Float128VectorTests.maskAndFloat128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float128VectorTests.maskAndNotFloat128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Float128VectorTests.maskAndNotFloat128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float128VectorTests.maskCompressFloat128VectorTestsSmokeTest(mask[i % 2]): success [231ms]
test Float128VectorTests.maskCompressFloat128VectorTestsSmokeTest(mask[true]): success [123ms]
test Float128VectorTests.maskCompressFloat128VectorTestsSmokeTest(mask[false]): success [102ms]
test Float128VectorTests.maskEqFloat128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Float128VectorTests.maskEqFloat128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float128VectorTests.maskEqualsFloat128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Float128VectorTests.maskEqualsFloat128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float128VectorTests.maskFirstTrueFloat128VectorTestsSmokeTest(mask[i % 2]): success [81ms]
test Float128VectorTests.maskFirstTrueFloat128VectorTestsSmokeTest(mask[true]): success [61ms]
test Float128VectorTests.maskFirstTrueFloat128VectorTestsSmokeTest(mask[false]): success [29ms]
test Float128VectorTests.maskFromToLongFloat128VectorTestsSmokeTest(-1): success [58ms]
test Float128VectorTests.maskFromToLongFloat128VectorTestsSmokeTest(0): success [0ms]
test Float128VectorTests.maskFromToLongFloat128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Float128VectorTests.maskFromToLongFloat128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Float128VectorTests.maskHashCodeFloat128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Float128VectorTests.maskHashCodeFloat128VectorTestsSmokeTest(mask[true]): success [0ms]
test Float128VectorTests.maskHashCodeFloat128VectorTestsSmokeTest(mask[false]): success [0ms]
test Float128VectorTests.maskLastTrueFloat128VectorTestsSmokeTest(mask[i % 2]): success [73ms]
test Float128VectorTests.maskLastTrueFloat128VectorTestsSmokeTest(mask[true]): success [61ms]
test Float128VectorTests.maskLastTrueFloat128VectorTestsSmokeTest(mask[false]): success [43ms]
test Float128VectorTests.maskOrFloat128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [46ms]
test Float128VectorTests.maskOrFloat128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float128VectorTests.maskTrueCountFloat128VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Float128VectorTests.maskTrueCountFloat128VectorTestsSmokeTest(mask[true]): success [61ms]
test Float128VectorTests.maskTrueCountFloat128VectorTestsSmokeTest(mask[false]): success [29ms]
test Float128VectorTests.maskXorFloat128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Float128VectorTests.maskXorFloat128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float128VectorTests.maxFloat128VectorTests(float[-i * 5], float[i * 5]): success [6ms]
test Float128VectorTests.maxFloat128VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.maxFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.maxFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.maxFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [27ms]
test Float128VectorTests.maxFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float128VectorTests.maxFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.maxFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.maxFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.maxFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [34ms]
test Float128VectorTests.minFloat128VectorTests(float[-i * 5], float[i * 5]): success [7ms]
test Float128VectorTests.minFloat128VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.minFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.minFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.minFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.minFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float128VectorTests.minFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [28ms]
test Float128VectorTests.minFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.minFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.minFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.mulFloat128VectorTests(float[-i * 5], float[i * 5]): success [6ms]
test Float128VectorTests.mulFloat128VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.mulFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.mulFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.mulFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [7ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [5ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float128VectorTests.mulFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.negFloat128VectorTests(float[-i * 5]): success [14ms]
test Float128VectorTests.negFloat128VectorTests(float[i * 5]): success [47ms]
test Float128VectorTests.negFloat128VectorTests(float[i + 1]): success [0ms]
test Float128VectorTests.negFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.negFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.negFloat128VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.powFloat128VectorTests(float[-i * 5], float[i * 5]): success [46ms]
test Float128VectorTests.powFloat128VectorTests(float[-i * 5], float[i + 1]): success [73ms]
test Float128VectorTests.powFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [3ms]
test Float128VectorTests.powFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [2ms]
test Float128VectorTests.powFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [2ms]
test Float128VectorTests.powFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [13ms]
test Float128VectorTests.powFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.powFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.powFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.powFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.shuffleEqualsFloat128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [12ms]
test Float128VectorTests.shuffleEqualsFloat128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [10ms]
test Float128VectorTests.shuffleMiscellaneousFloat128VectorTestsSmokeTest(shuffle[random]): success [58ms]
test Float128VectorTests.shuffleTest(): success [794ms]
test Float128VectorTests.shuffleToStringFloat128VectorTestsSmokeTest(shuffle[random]): success [36ms]
test Float128VectorTests.sliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[i * 5]): success [1003ms]
test Float128VectorTests.sliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[i + 1]): success [400ms]
test Float128VectorTests.sliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [294ms]
test Float128VectorTests.sliceBinaryFloat128VectorTestsBinary(float[-i * 5], AbstractVectorTest$1@6ed11085): success [219ms]
test Float128VectorTests.sliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [211ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [296ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [445ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [217ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [201ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [199ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [214ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [257ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [198ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [201ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [211ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [207ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [239ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [198ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [198ms]
test Float128VectorTests.sliceFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [205ms]
test Float128VectorTests.sliceUnaryFloat128VectorTests(float[-i * 5]): success [387ms]
test Float128VectorTests.sliceUnaryFloat128VectorTests(float[i * 5]): success [345ms]
test Float128VectorTests.sliceUnaryFloat128VectorTests(float[i + 1]): success [206ms]
test Float128VectorTests.sliceUnaryFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [269ms]
test Float128VectorTests.sliceUnaryFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [190ms]
test Float128VectorTests.sliceUnaryFloat128VectorTests(float[cornerCaseValue(i)]): success [201ms]
test Float128VectorTests.smokeTest1(): success [0ms]
test Float128VectorTests.smokeTest2(): success [47ms]
test Float128VectorTests.sqrtFloat128VectorTests(float[-i * 5]): success [15ms]
test Float128VectorTests.sqrtFloat128VectorTests(float[i * 5]): success [47ms]
test Float128VectorTests.sqrtFloat128VectorTests(float[i + 1]): success [1ms]
test Float128VectorTests.sqrtFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test Float128VectorTests.sqrtFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.sqrtFloat128VectorTests(float[cornerCaseValue(i)]): success [1ms]
test Float128VectorTests.subFloat128VectorTests(float[-i * 5], float[i * 5]): success [14ms]
test Float128VectorTests.subFloat128VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.subFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.subFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.subFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [8ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.subFloat128VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [26ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float128VectorTests.subFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float128VectorTests.toDoubleArrayFloat128VectorTestsSmokeTest(float[-i * 5]): success [0ms]
test Float128VectorTests.toDoubleArrayFloat128VectorTestsSmokeTest(float[i * 5]): success [0ms]
test Float128VectorTests.toDoubleArrayFloat128VectorTestsSmokeTest(float[i + 1]): success [0ms]
test Float128VectorTests.toDoubleArrayFloat128VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [0ms]
test Float128VectorTests.toDoubleArrayFloat128VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [0ms]
test Float128VectorTests.toDoubleArrayFloat128VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.toIntArrayFloat128VectorTestsSmokeTest(float[-i * 5]): success [6ms]
test Float128VectorTests.toIntArrayFloat128VectorTestsSmokeTest(float[i * 5]): success [14ms]
test Float128VectorTests.toIntArrayFloat128VectorTestsSmokeTest(float[i + 1]): success [6ms]
test Float128VectorTests.toIntArrayFloat128VectorTestsSmokeTest(float[intCornerCaseValue(i)]): success [6ms]
test Float128VectorTests.toLongArrayFloat128VectorTestsSmokeTest(float[-i * 5]): success [0ms]
test Float128VectorTests.toLongArrayFloat128VectorTestsSmokeTest(float[i * 5]): success [0ms]
test Float128VectorTests.toLongArrayFloat128VectorTestsSmokeTest(float[i + 1]): success [17ms]
test Float128VectorTests.toLongArrayFloat128VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test Float128VectorTests.toStringFloat128VectorTestsSmokeTest(float[-i * 5]): success [15ms]
test Float128VectorTests.toStringFloat128VectorTestsSmokeTest(float[i * 5]): success [2ms]
test Float128VectorTests.toStringFloat128VectorTestsSmokeTest(float[i + 1]): success [22ms]
test Float128VectorTests.toStringFloat128VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [24ms]
test Float128VectorTests.toStringFloat128VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [1ms]
test Float128VectorTests.toStringFloat128VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [38ms]
test Float128VectorTests.unsliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[i * 5]): success [414ms]
test Float128VectorTests.unsliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[i + 1]): success [386ms]
test Float128VectorTests.unsliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [381ms]
test Float128VectorTests.unsliceBinaryFloat128VectorTestsBinary(float[-i * 5], AbstractVectorTest$1@6ed11085): success [187ms]
test Float128VectorTests.unsliceBinaryFloat128VectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [186ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [850ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [807ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [379ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [399ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [588ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [448ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [381ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [414ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [382ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [382ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [343ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [324ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [380ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [382ms]
test Float128VectorTests.unsliceFloat128VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [382ms]
test Float128VectorTests.unsliceUnaryFloat128VectorTests(float[-i * 5]): success [381ms]
test Float128VectorTests.unsliceUnaryFloat128VectorTests(float[i * 5]): success [344ms]
test Float128VectorTests.unsliceUnaryFloat128VectorTests(float[i + 1]): success [185ms]
test Float128VectorTests.unsliceUnaryFloat128VectorTests(float[0.01 + (i / (i + 1))]): success [193ms]
test Float128VectorTests.unsliceUnaryFloat128VectorTests(AbstractVectorTest$1@6ed11085): success [185ms]
test Float128VectorTests.unsliceUnaryFloat128VectorTests(float[cornerCaseValue(i)]): success [202ms]
test Float128VectorTests.viewAsFloatingLanesTest(): success [23ms]
test Float128VectorTests.viewAsIntegeralLanesTest(): success [26ms]
test Float128VectorTests.withFloat128VectorTests(float[-i * 5], float[i * 5]): success [45ms]
test Float128VectorTests.withFloat128VectorTests(float[-i * 5], float[i + 1]): success [125ms]
test Float128VectorTests.withFloat128VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [33ms]
test Float128VectorTests.withFloat128VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [33ms]
test Float128VectorTests.withFloat128VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [33ms]

===============================================
jdk/incubator/vector/Float128VectorTests.java
Total tests run: 3215, Passes: 3214, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Float128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Float128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Float128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Float128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Float128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Float128VectorTests.d/testng.0.jta jdk/incubator/vector/Float128VectorTests.java false Float128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Double64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   2.727 seconds
messages:
command: build Double64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:16:18 IST 2025
Test directory:
  compile: Double64VectorTests
finished: Wed Apr 16 20:16:20 IST 2025
elapsed time (seconds): 2.727

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   2.727 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:16:18 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 12
Process id: 1590428
finished: Wed Apr 16 20:16:20 IST 2025
elapsed time (seconds): 2.727
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Double64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Double64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Double64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Double64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double64VectorTests 
TIME:   434.663 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Double64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double64VectorTests 
started: Wed Apr 16 20:16:20 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1592052
finished: Wed Apr 16 20:23:35 IST 2025
elapsed time (seconds): 434.663
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -8765956337862707751
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-8765956337862707751" to command line.
test Double64VectorTests.ABSDouble64VectorTests(double[-i * 5]): success [603ms]
test Double64VectorTests.ABSDouble64VectorTests(double[i * 5]): success [22ms]
test Double64VectorTests.ABSDouble64VectorTests(double[i + 1]): success [28ms]
test Double64VectorTests.ABSDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [7ms]
test Double64VectorTests.ABSDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [49ms]
test Double64VectorTests.ABSDouble64VectorTests(double[cornerCaseValue(i)]): success [6ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[-i * 5], mask[i % 2]): success [285ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i * 5], mask[i % 2]): success [23ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i + 1], mask[i % 2]): success [3ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [69ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[-i * 5], mask[true]): success [3ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i * 5], mask[true]): success [2ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [25ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[cornerCaseValue(i)], mask[true]): success [8ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[-i * 5], mask[false]): success [88ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i * 5], mask[false]): success [4ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[i + 1], mask[false]): success [13ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double64VectorTests.ABSMaskedDouble64VectorTests(double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[-i * 5]): success [121ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[i + 1]): success [42ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [35ms]
test Double64VectorTests.ACOSDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.ACOSDouble64VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], double[i * 5]): success [243ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], double[i + 1]): success [25ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [60ms]
test Double64VectorTests.ADDDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [20ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [7ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [26ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [18ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [6ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [4ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [46ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [58ms]
test Double64VectorTests.ADDDouble64VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [103ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [30ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [8ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [32ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [6ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [5ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [40ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [3ms]
test Double64VectorTests.ADDDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[-i * 5]): success [127ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[i * 5]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[i + 1]): success [44ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [37ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [62ms]
test Double64VectorTests.ADDReduceDouble64VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[-i * 5], mask[i % 2]): success [119ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i * 5], mask[i % 2]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i + 1], mask[i % 2]): success [59ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [41ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [72ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[-i * 5], mask[true]): success [4ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i * 5], mask[true]): success [4ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i + 1], mask[true]): success [8ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [3ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [10ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[-i * 5], mask[false]): success [40ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i * 5], mask[false]): success [4ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[i + 1], mask[false]): success [4ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [4ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [6ms]
test Double64VectorTests.ADDReduceDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [12ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[-i * 5]): success [12ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[i * 5]): success [2ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[i + 1]): success [2ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [3ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[-i * 5], mask[i % 2]): success [10ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i * 5], mask[i % 2]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i + 1], mask[i % 2]): success [5ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[-i * 5], mask[true]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i * 5], mask[true]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i + 1], mask[true]): success [5ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [28ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[-i * 5], mask[false]): success [5ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i * 5], mask[false]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double64VectorTests.ADDReduceLongDouble64VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [14ms]
test Double64VectorTests.ASINDouble64VectorTests(double[-i * 5]): success [147ms]
test Double64VectorTests.ASINDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.ASINDouble64VectorTests(double[i + 1]): success [41ms]
test Double64VectorTests.ASINDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.ASINDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [68ms]
test Double64VectorTests.ASINDouble64VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], double[i * 5]): success [171ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], double[i + 1]): success [3ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [71ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [7ms]
test Double64VectorTests.ATAN2Double64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [93ms]
test Double64VectorTests.ATANDouble64VectorTests(double[-i * 5]): success [102ms]
test Double64VectorTests.ATANDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.ATANDouble64VectorTests(double[i + 1]): success [42ms]
test Double64VectorTests.ATANDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test Double64VectorTests.ATANDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [70ms]
test Double64VectorTests.ATANDouble64VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[-i * 5]): success [174ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[i * 5]): success [137ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[i + 1]): success [148ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [138ms]
test Double64VectorTests.BroadcastDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [138ms]
test Double64VectorTests.BroadcastDouble64VectorTests(double[cornerCaseValue(i)]): success [148ms]
test Double64VectorTests.BroadcastLongDouble64VectorTestsSmokeTest(double[-i * 5]): success [4ms]
test Double64VectorTests.BroadcastLongDouble64VectorTestsSmokeTest(double[i * 5]): success [3ms]
test Double64VectorTests.BroadcastLongDouble64VectorTestsSmokeTest(double[i + 1]): success [3ms]
test Double64VectorTests.BroadcastLongDouble64VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[-i * 5]): success [126ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[i * 5]): success [2ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[i + 1]): success [74ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.CBRTDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [137ms]
test Double64VectorTests.CBRTDouble64VectorTests(double[cornerCaseValue(i)]): success [5ms]
test Double64VectorTests.COSDouble64VectorTests(double[-i * 5]): success [99ms]
test Double64VectorTests.COSDouble64VectorTests(double[i * 5]): success [0ms]
test Double64VectorTests.COSDouble64VectorTests(double[i + 1]): success [36ms]
test Double64VectorTests.COSDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.COSDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [62ms]
test Double64VectorTests.COSDouble64VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.COSHDouble64VectorTests(double[-i * 5]): success [156ms]
test Double64VectorTests.COSHDouble64VectorTests(double[i * 5]): success [0ms]
test Double64VectorTests.COSHDouble64VectorTests(double[i + 1]): success [41ms]
test Double64VectorTests.COSHDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.COSHDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [120ms]
test Double64VectorTests.COSHDouble64VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], double[i * 5]): success [194ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], double[i + 1]): success [32ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [34ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [5ms]
test Double64VectorTests.DIVDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [91ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [61ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [33ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [6ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [5ms]
test Double64VectorTests.DIVDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [5ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[i]): success [367ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[i - length / 2]): success [200ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[i + 1]): success [116ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[i - 2]): success [116ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[zigZag(i)]): success [115ms]
test Double64VectorTests.EQDouble64VectorTests(double[i], double[cornerCaseValue(i)]): success [142ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[i]): success [143ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[i - length / 2]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[i + 1]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[i - 2]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[zigZag(i)]): success [138ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[i]): success [161ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[i - length / 2]): success [108ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[i + 1]): success [109ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[i - 2]): success [108ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[zigZag(i)]): success [109ms]
test Double64VectorTests.EQDouble64VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [108ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[i]): success [134ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[i - length / 2]): success [108ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[i + 1]): success [108ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[i - 2]): success [109ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[zigZag(i)]): success [109ms]
test Double64VectorTests.EQDouble64VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [113ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[i]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[i - length / 2]): success [122ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[i + 1]): success [113ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[i - 2]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[zigZag(i)]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[i]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [110ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [111ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [115ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [113ms]
test Double64VectorTests.EQDouble64VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [111ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [24ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [7ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [9ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [87ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [5ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [70ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [6ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [3ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]): success [3ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[true]): success [3ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[true]): success [3ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[true]): success [3ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[true]): success [4ms]
test Double64VectorTests.EQDouble64VectorTestsBroadcastLongMaskedSmokeTest(double[

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

.01 + (i / (i + 1))], mask[i % 2]): success [72ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [28ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[i + 1], mask[true]): success [3ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [3ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [3ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[i * 5], mask[false]): success [3ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[i + 1], mask[false]): success [3ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [3ms]
test Double64VectorTests.blendDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [244ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [172ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [191ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [160ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [154ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [161ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [194ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [160ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [152ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [156ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [152ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [152ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [152ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [151ms]
test Double64VectorTests.blendDouble64VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [156ms]
test Double64VectorTests.compressDouble64VectorTests(double[-i * 5], mask[i % 2]): success [193ms]
test Double64VectorTests.compressDouble64VectorTests(double[i * 5], mask[i % 2]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[i + 1], mask[i % 2]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [10ms]
test Double64VectorTests.compressDouble64VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[-i * 5], mask[true]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[i * 5], mask[true]): success [10ms]
test Double64VectorTests.compressDouble64VectorTests(double[i + 1], mask[true]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[cornerCaseValue(i)], mask[true]): success [11ms]
test Double64VectorTests.compressDouble64VectorTests(double[-i * 5], mask[false]): success [63ms]
test Double64VectorTests.compressDouble64VectorTests(double[i * 5], mask[false]): success [12ms]
test Double64VectorTests.compressDouble64VectorTests(double[i + 1], mask[false]): success [12ms]
test Double64VectorTests.compressDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [12ms]
test Double64VectorTests.compressDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [12ms]
test Double64VectorTests.compressDouble64VectorTests(double[cornerCaseValue(i)], mask[false]): success [12ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], double[i * 5]): success [10ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.divDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [12ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [2ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [3ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [6ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [12ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.divDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [8ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double64VectorTests.divDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[i]): success [201ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[i - length / 2]): success [141ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[i + 1]): success [108ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[i - 2]): success [108ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[zigZag(i)]): success [118ms]
test Double64VectorTests.eqDouble64VectorTests(double[i], double[cornerCaseValue(i)]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[i]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[i - length / 2]): success [145ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[i + 1]): success [146ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[i - 2]): success [108ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[zigZag(i)]): success [108ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [108ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[i]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[i - length / 2]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[i + 1]): success [126ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[i - 2]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[zigZag(i)]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[i]): success [118ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[i - length / 2]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[i + 1]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[i - 2]): success [111ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[zigZag(i)]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[i]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[i - length / 2]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[i + 1]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[i - 2]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[zigZag(i)]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[i]): success [109ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [110ms]
test Double64VectorTests.eqDouble64VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [109ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[i]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[i + 1]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[i - 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[zigZag(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[i]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[i + 1]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[i - 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[zigZag(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[i]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[i + 1]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[i - 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[zigZag(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [10ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[i]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[i + 1]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[i - 2]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[zigZag(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[i]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[i + 1]): success [50ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[i - 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[i]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [3ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [2ms]
test Double64VectorTests.eqDouble64VectorTestsBroadcastMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.expandDouble64VectorTests(double[-i * 5], mask[i % 2]): success [118ms]
test Double64VectorTests.expandDouble64VectorTests(double[i * 5], mask[i % 2]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[i + 1], mask[i % 2]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[-i * 5], mask[true]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[i * 5], mask[true]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[i + 1], mask[true]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [30ms]
test Double64VectorTests.expandDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[cornerCaseValue(i)], mask[true]): success [11ms]
test Double64VectorTests.expandDouble64VectorTests(double[-i * 5], mask[false]): success [24ms]
test Double64VectorTests.expandDouble64VectorTests(double[i * 5], mask[false]): success [13ms]
test Double64VectorTests.expandDouble64VectorTests(double[i + 1], mask[false]): success [13ms]
test Double64VectorTests.expandDouble64VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [13ms]
test Double64VectorTests.expandDouble64VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [13ms]
test Double64VectorTests.expandDouble64VectorTests(double[cornerCaseValue(i)], mask[false]): success [13ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[-i * 5]): success [11ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[i * 5]): success [0ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[-i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[i + 1]): success [0ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[i + 1], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[-i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[i + 1]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))], double[cornerCaseValue(i)]): success [11ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[-i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[i + 1]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f, double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[-i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[i * 5]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[i + 1]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.fmaDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[-i * 5]): success [13ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[i * 5]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[i + 1]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[0.01 + (i / (i + 1))]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], AbstractVectorTest$1@25daae7f): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i * 5], double[cornerCaseValue(i)]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[-i * 5]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[i * 5]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[i + 1]): success [3ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[0.01 + (i / (i + 1))]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], AbstractVectorTest$1@25daae7f): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[i + 1], double[cornerCaseValue(i)]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[-i * 5]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[i * 5]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[i + 1]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[0.01 + (i / (i + 1))]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], AbstractVectorTest$1@25daae7f): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], double[cornerCaseValue(i)]): success [16ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[-i * 5]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[i * 5]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[i + 1]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[0.01 + (i / (i + 1))]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, AbstractVectorTest$1@25daae7f): success [56ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, double[cornerCaseValue(i)]): success [5ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[-i * 5]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[i * 5]): success [30ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[i + 1]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[0.01 + (i / (i + 1))]): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], AbstractVectorTest$1@25daae7f): success [4ms]
test Double64VectorTests.fmaDouble64VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [4ms]
test Double64VectorTests.getDouble64VectorTests(double[-i * 5]): success [29ms]
test Double64VectorTests.getDouble64VectorTests(double[i * 5]): success [1ms]
test Double64VectorTests.getDouble64VectorTests(double[i + 1]): success [1ms]
test Double64VectorTests.getDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.getDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.getDouble64VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[-i * 5]): success [52ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[i * 5]): success [7ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[i + 1]): success [9ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [3ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [24ms]
test Double64VectorTests.hashCodeDouble64VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [23ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(0): success [103ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(-1): success [25ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(1): success [5ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(2): success [5ms]
test Double64VectorTests.indexInRangeDouble64VectorTestsSmokeTest(-2): success [5ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(0): success [5ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(-1): success [5ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(1): success [5ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(2): success [15ms]
test Double64VectorTests.indexInRangeLongDouble64VectorTestsSmokeTest(-2): success [4ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(0): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(1): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(32): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(37): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(1024): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(1025): success [0ms]
test Double64VectorTests.loopBoundDouble64VectorTestsSmokeTest(1029): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(0): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(1): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(32): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(37): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(1024): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(1025): success [0ms]
test Double64VectorTests.loopBoundLongDouble64VectorTestsSmokeTest(1029): success [0ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[i]): success [197ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[i - length / 2]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[i + 1]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[i - 2]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[zigZag(i)]): success [134ms]
test Double64VectorTests.ltDouble64VectorTests(double[i], double[cornerCaseValue(i)]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[i]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[i - length / 2]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[i + 1]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[i - 2]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[zigZag(i)]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[i]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[i - length / 2]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[i + 1]): success [124ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[i - 2]): success [147ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[zigZag(i)]): success [157ms]
test Double64VectorTests.ltDouble64VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[i]): success [111ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[i - length / 2]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[i + 1]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[i - 2]): success [108ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[zigZag(i)]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[i]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[i - length / 2]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[i + 1]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[i - 2]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[zigZag(i)]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[i]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [118ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [110ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [109ms]
test Double64VectorTests.ltDouble64VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [110ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[i]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [10ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [50ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [3ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [2ms]
test Double64VectorTests.ltDouble64VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.maskAndDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test Double64VectorTests.maskAndDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskAndNotDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Double64VectorTests.maskAndNotDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskCompressDouble64VectorTestsSmokeTest(mask[i % 2]): success [253ms]
test Double64VectorTests.maskCompressDouble64VectorTestsSmokeTest(mask[true]): success [105ms]
test Double64VectorTests.maskCompressDouble64VectorTestsSmokeTest(mask[false]): success [166ms]
test Double64VectorTests.maskEqDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Double64VectorTests.maskEqDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskEqualsDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Double64VectorTests.maskEqualsDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskFirstTrueDouble64VectorTestsSmokeTest(mask[i % 2]): success [81ms]
test Double64VectorTests.maskFirstTrueDouble64VectorTestsSmokeTest(mask[true]): success [50ms]
test Double64VectorTests.maskFirstTrueDouble64VectorTestsSmokeTest(mask[false]): success [20ms]
test Double64VectorTests.maskFromToLongDouble64VectorTestsSmokeTest(-1): success [71ms]
test Double64VectorTests.maskFromToLongDouble64VectorTestsSmokeTest(0): success [0ms]
test Double64VectorTests.maskFromToLongDouble64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Double64VectorTests.maskFromToLongDouble64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Double64VectorTests.maskHashCodeDouble64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Double64VectorTests.maskHashCodeDouble64VectorTestsSmokeTest(mask[true]): success [0ms]
test Double64VectorTests.maskHashCodeDouble64VectorTestsSmokeTest(mask[false]): success [0ms]
test Double64VectorTests.maskLastTrueDouble64VectorTestsSmokeTest(mask[i % 2]): success [71ms]
test Double64VectorTests.maskLastTrueDouble64VectorTestsSmokeTest(mask[true]): success [51ms]
test Double64VectorTests.maskLastTrueDouble64VectorTestsSmokeTest(mask[false]): success [32ms]
test Double64VectorTests.maskOrDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [23ms]
test Double64VectorTests.maskOrDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maskTrueCountDouble64VectorTestsSmokeTest(mask[i % 2]): success [29ms]
test Double64VectorTests.maskTrueCountDouble64VectorTestsSmokeTest(mask[true]): success [51ms]
test Double64VectorTests.maskTrueCountDouble64VectorTestsSmokeTest(mask[false]): success [21ms]
test Double64VectorTests.maskXorDouble64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [11ms]
test Double64VectorTests.maskXorDouble64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], double[i * 5]): success [7ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.maxDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [8ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.maxDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], double[i * 5]): success [7ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.minDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [8ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.minDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], double[i * 5]): success [7ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.mulDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [8ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [9ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [7ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double64VectorTests.mulDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double64VectorTests.negDouble64VectorTests(double[-i * 5]): success [46ms]
test Double64VectorTests.negDouble64VectorTests(double[i * 5]): success [2ms]
test Double64VectorTests.negDouble64VectorTests(double[i + 1]): success [33ms]
test Double64VectorTests.negDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [4ms]
test Double64VectorTests.negDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double64VectorTests.negDouble64VectorTests(double[cornerCaseValue(i)]): success [44ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], double[i * 5]): success [72ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], double[i + 1]): success [5ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [3ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [68ms]
test Double64VectorTests.powDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [3ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [18ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.powDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.shuffleEqualsDouble64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [16ms]
test Double64VectorTests.shuffleEqualsDouble64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [12ms]
test Double64VectorTests.shuffleMiscellaneousDouble64VectorTestsSmokeTest(shuffle[random]): success [6ms]
test Double64VectorTests.shuffleTest(): success [704ms]
test Double64VectorTests.shuffleToStringDouble64VectorTestsSmokeTest(shuffle[random]): success [50ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[i * 5]): success [2019ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[i + 1]): success [1355ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1500ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1217ms]
test Double64VectorTests.sliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [1209ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [1857ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [1645ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [1646ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1474ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1412ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [1419ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [1484ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1425ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1474ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1491ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1442ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1435ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1429ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1421ms]
test Double64VectorTests.sliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1448ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[-i * 5]): success [1524ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[i * 5]): success [1338ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[i + 1]): success [1355ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1203ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [1208ms]
test Double64VectorTests.sliceUnaryDouble64VectorTests(double[cornerCaseValue(i)]): success [1193ms]
test Double64VectorTests.smokeTest1(): success [0ms]
test Double64VectorTests.smokeTest2(): success [64ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[-i * 5]): success [46ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[i * 5]): success [26ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[i + 1]): success [34ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.sqrtDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [57ms]
test Double64VectorTests.sqrtDouble64VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], double[i * 5]): success [10ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], double[i + 1]): success [28ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double64VectorTests.subDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [13ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [35ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [12ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double64VectorTests.subDouble64VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [29ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double64VectorTests.subDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double64VectorTests.toIntArrayDouble64VectorTestsSmokeTest(double[-i * 5]): success [15ms]
test Double64VectorTests.toIntArrayDouble64VectorTestsSmokeTest(double[i * 5]): success [7ms]
test Double64VectorTests.toIntArrayDouble64VectorTestsSmokeTest(double[i + 1]): success [7ms]
test Double64VectorTests.toIntArrayDouble64VectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [7ms]
test Double64VectorTests.toLongArrayDouble64VectorTestsSmokeTest(double[-i * 5]): success [0ms]
test Double64VectorTests.toLongArrayDouble64VectorTestsSmokeTest(double[i * 5]): success [0ms]
test Double64VectorTests.toLongArrayDouble64VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double64VectorTests.toLongArrayDouble64VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[-i * 5]): success [8ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[i + 1]): success [22ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [9ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [2ms]
test Double64VectorTests.toStringDouble64VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [28ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[i * 5]): success [1464ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[i + 1]): success [1686ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1193ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1070ms]
test Double64VectorTests.unsliceBinaryDouble64VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [1186ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [3399ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [2428ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [2360ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2411ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2446ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [2580ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [2535ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2475ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2386ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2642ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [2321ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [2401ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2314ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2320ms]
test Double64VectorTests.unsliceDouble64VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2328ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[-i * 5]): success [1497ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[i * 5]): success [1245ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[i + 1]): success [1240ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[0.01 + (i / (i + 1))]): success [1160ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(AbstractVectorTest$1@25daae7f): success [1170ms]
test Double64VectorTests.unsliceUnaryDouble64VectorTests(double[cornerCaseValue(i)]): success [1143ms]
test Double64VectorTests.viewAsFloatingLanesTest(): success [29ms]
test Double64VectorTests.viewAsIntegeralLanesTest(): success [31ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], double[i * 5]): success [143ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], double[i + 1]): success [85ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [67ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [67ms]
test Double64VectorTests.withDouble64VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [67ms]

===============================================
jdk/incubator/vector/Double64VectorTests.java
Total tests run: 3209, Passes: 3208, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Double64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Double64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Double64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Double64VectorTests.d/testng.0.jta jdk/incubator/vector/Double64VectorTests.java false Double64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float64VectorTests.java
TEST: jdk/incubator/vector/Int256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.071 seconds
messages:
command: build Int256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:19:23 IST 2025
Test directory:
  compile: Int256VectorTests
finished: Wed Apr 16 20:19:24 IST 2025
elapsed time (seconds): 1.071

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.071 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:19:23 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 3
Process id: 1589709
finished: Wed Apr 16 20:19:24 IST 2025
elapsed time (seconds): 1.071
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int256VectorTests 
TIME:   317.347 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int256VectorTests 
started: Wed Apr 16 20:19:24 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1593001
finished: Wed Apr 16 20:24:42 IST 2025
elapsed time (seconds): 317.347
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 2543390522816218503
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=2543390522816218503" to command line.
test Int256VectorTests.ABSInt256VectorTests(int[-i * 5]): success [669ms]
test Int256VectorTests.ABSInt256VectorTests(int[i * 5]): success [8ms]
test Int256VectorTests.ABSInt256VectorTests(int[i + 1]): success [53ms]
test Int256VectorTests.ABSInt256VectorTests(int[cornerCaseValue(i)]): success [6ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[-i * 5], mask[i % 2]): success [208ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i * 5], mask[i % 2]): success [86ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i + 1], mask[i % 2]): success [83ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[-i * 5], mask[true]): success [28ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i * 5], mask[true]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i + 1], mask[true]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[-i * 5], mask[false]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i + 1], mask[false]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int256VectorTests.ADDInt256VectorTests(int[-i * 5], int[i * 5]): success [320ms]
test Int256VectorTests.ADDInt256VectorTests(int[-i * 5], int[i + 1]): success [5ms]
test Int256VectorTests.ADDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [70ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [23ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [16ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [8ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [224ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [6ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [75ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [14ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int256VectorTests.ADDReduceInt256VectorTests(int[-i * 5]): success [114ms]
test Int256VectorTests.ADDReduceInt256VectorTests(int[i * 5]): success [62ms]
test Int256VectorTests.ADDReduceInt256VectorTests(int[i + 1]): success [3ms]
test Int256VectorTests.ADDReduceInt256VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[-i * 5], mask[i % 2]): success [69ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i * 5], mask[i % 2]): success [83ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i + 1], mask[i % 2]): success [28ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[-i * 5], mask[true]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i * 5], mask[true]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i + 1], mask[true]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [14ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[-i * 5], mask[false]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int256VectorTests.ADDReduceLongInt256VectorTests(int[-i * 5]): success [9ms]
test Int256VectorTests.ADDReduceLongInt256VectorTests(int[i * 5]): success [10ms]
test Int256VectorTests.ADDReduceLongInt256VectorTests(int[i + 1]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.ANDInt256VectorTests(int[-i * 5], int[i * 5]): success [253ms]
test Int256VectorTests.ANDInt256VectorTests(int[-i * 5], int[i + 1]): success [4ms]
test Int256VectorTests.ANDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [69ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [17ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [6ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [75ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int256VectorTests.ANDReduceInt256VectorTests(int[-i * 5]): success [139ms]
test Int256VectorTests.ANDReduceInt256VectorTests(int[i * 5]): success [63ms]
test Int256VectorTests.ANDReduceInt256VectorTests(int[i + 1]): success [23ms]
test Int256VectorTests.ANDReduceInt256VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[-i * 5], mask[i % 2]): success [36ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i * 5], mask[i % 2]): success [83ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i + 1], mask[i % 2]): success [4ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[-i * 5], mask[true]): success [4ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i * 5], mask[true]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i + 1], mask[true]): success [15ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [22ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[-i * 5], mask[false]): success [27ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int256VectorTests.AND_NOTInt256VectorTests(int[-i * 5], int[i * 5]): success [374ms]
test Int256VectorTests.AND_NOTInt256VectorTests(int[-i * 5], int[i + 1]): success [70ms]
test Int256VectorTests.AND_NOTInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [159ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [145ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [69ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [190ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [68ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [67ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [68ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [68ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [67ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [104ms]
test Int256VectorTests.ASHRInt256VectorTests(int[-i * 5], int[i * 5]): success [206ms]
test Int256VectorTests.ASHRInt256VectorTests(int[-i * 5], int[i + 1]): success [66ms]
test Int256VectorTests.ASHRInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [155ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [158ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [70ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [181ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [70ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [70ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [70ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [111ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [70ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [70ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [258ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [4ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [61ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftConst(int[-i * 5]): success [8ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftConst(int[i * 5]): success [4ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftConst(int[i + 1]): success [54ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [2ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [66ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [61ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [11ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [5ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [54ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [6ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [2ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [26ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [81ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [11ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [134ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [9ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [9ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [9ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [331ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [5ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [104ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [7ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [26ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [61ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [45ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [73ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [5ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

(i)], mask[true]): success [296ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [361ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [298ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [299ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[i]): success [191ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[i - length / 2]): success [82ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[i + 1]): success [82ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[i - 2]): success [103ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[zigZag(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[cornerCaseValue(i)]): success [88ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[i]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[i - length / 2]): success [81ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[i + 1]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[i - 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[zigZag(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[i]): success [81ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[i - length / 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[i + 1]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[i - 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[zigZag(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [81ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[i]): success [81ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[i - length / 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[i + 1]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[i - 2]): success [79ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[zigZag(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[i]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[i - length / 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[i + 1]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[i - 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[zigZag(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[i]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [81ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [2ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [9ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [61ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.expandInt256VectorTests(int[-i * 5], mask[i % 2]): success [193ms]
test Int256VectorTests.expandInt256VectorTests(int[i * 5], mask[i % 2]): success [76ms]
test Int256VectorTests.expandInt256VectorTests(int[i + 1], mask[i % 2]): success [149ms]
test Int256VectorTests.expandInt256VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Int256VectorTests.expandInt256VectorTests(int[-i * 5], mask[true]): success [43ms]
test Int256VectorTests.expandInt256VectorTests(int[i * 5], mask[true]): success [4ms]
test Int256VectorTests.expandInt256VectorTests(int[i + 1], mask[true]): success [4ms]
test Int256VectorTests.expandInt256VectorTests(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int256VectorTests.expandInt256VectorTests(int[-i * 5], mask[false]): success [6ms]
test Int256VectorTests.expandInt256VectorTests(int[i * 5], mask[false]): success [6ms]
test Int256VectorTests.expandInt256VectorTests(int[i + 1], mask[false]): success [6ms]
test Int256VectorTests.expandInt256VectorTests(int[cornerCaseValue(i)], mask[false]): success [6ms]
test Int256VectorTests.getInt256VectorTests(int[-i * 5]): success [14ms]
test Int256VectorTests.getInt256VectorTests(int[i * 5]): success [7ms]
test Int256VectorTests.getInt256VectorTests(int[i + 1]): success [81ms]
test Int256VectorTests.getInt256VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int256VectorTests.hashCodeInt256VectorTestsSmokeTest(int[-i * 5]): success [39ms]
test Int256VectorTests.hashCodeInt256VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int256VectorTests.hashCodeInt256VectorTestsSmokeTest(int[i + 1]): success [1ms]
test Int256VectorTests.hashCodeInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(0): success [72ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(-1): success [2ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(1): success [18ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(2): success [2ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(-2): success [3ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(0): success [2ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(-1): success [2ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(1): success [2ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(2): success [2ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(-2): success [2ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(0): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(1): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(32): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(37): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(1024): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(1025): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(1029): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(0): success [4ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(1): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(32): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(37): success [1ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(1024): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(1025): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(1029): success [0ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[i]): success [184ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[i - length / 2]): success [82ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[i + 1]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[i - 2]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[zigZag(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[i]): success [132ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[i - length / 2]): success [88ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[i + 1]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[i - 2]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[zigZag(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[i]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[i - length / 2]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[i + 1]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[i - 2]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[zigZag(i)]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [95ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[i]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[i - length / 2]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[i + 1]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[i - 2]): success [86ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[zigZag(i)]): success [87ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[i]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[i - length / 2]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[i + 1]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[i - 2]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[zigZag(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[i]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [9ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [2ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [3ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [2ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [2ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [2ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [5ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [2ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [61ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.maskAndInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test Int256VectorTests.maskAndInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskAndNotInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Int256VectorTests.maskAndNotInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskCompressInt256VectorTestsSmokeTest(mask[i % 2]): success [392ms]
test Int256VectorTests.maskCompressInt256VectorTestsSmokeTest(mask[true]): success [207ms]
test Int256VectorTests.maskCompressInt256VectorTestsSmokeTest(mask[false]): success [205ms]
test Int256VectorTests.maskEqInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int256VectorTests.maskEqInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskEqualsInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int256VectorTests.maskEqualsInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskFirstTrueInt256VectorTestsSmokeTest(mask[i % 2]): success [49ms]
test Int256VectorTests.maskFirstTrueInt256VectorTestsSmokeTest(mask[true]): success [74ms]
test Int256VectorTests.maskFirstTrueInt256VectorTestsSmokeTest(mask[false]): success [37ms]
test Int256VectorTests.maskFromToLongInt256VectorTestsSmokeTest(-1): success [65ms]
test Int256VectorTests.maskFromToLongInt256VectorTestsSmokeTest(0): success [0ms]
test Int256VectorTests.maskFromToLongInt256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int256VectorTests.maskFromToLongInt256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int256VectorTests.maskHashCodeInt256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int256VectorTests.maskHashCodeInt256VectorTestsSmokeTest(mask[true]): success [0ms]
test Int256VectorTests.maskHashCodeInt256VectorTestsSmokeTest(mask[false]): success [0ms]
test Int256VectorTests.maskLastTrueInt256VectorTestsSmokeTest(mask[i % 2]): success [92ms]
test Int256VectorTests.maskLastTrueInt256VectorTestsSmokeTest(mask[true]): success [70ms]
test Int256VectorTests.maskLastTrueInt256VectorTestsSmokeTest(mask[false]): success [55ms]
test Int256VectorTests.maskOrInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Int256VectorTests.maskOrInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskTrueCountInt256VectorTestsSmokeTest(mask[i % 2]): success [54ms]
test Int256VectorTests.maskTrueCountInt256VectorTestsSmokeTest(mask[true]): success [71ms]
test Int256VectorTests.maskTrueCountInt256VectorTestsSmokeTest(mask[false]): success [38ms]
test Int256VectorTests.maskXorInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int256VectorTests.maskXorInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maxInt256VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.maxInt256VectorTests(int[-i * 5], int[i + 1]): success [19ms]
test Int256VectorTests.maxInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.maxInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.maxInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.maxInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.minInt256VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int256VectorTests.minInt256VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.minInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.minInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.minInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.minInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [32ms]
test Int256VectorTests.mulInt256VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.mulInt256VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.mulInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.negInt256VectorTests(int[-i * 5]): success [41ms]
test Int256VectorTests.negInt256VectorTests(int[i * 5]): success [3ms]
test Int256VectorTests.negInt256VectorTests(int[i + 1]): success [68ms]
test Int256VectorTests.negInt256VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int256VectorTests.notInt256VectorTests(int[-i * 5]): success [82ms]
test Int256VectorTests.notInt256VectorTests(int[i * 5]): success [63ms]
test Int256VectorTests.notInt256VectorTests(int[i + 1]): success [179ms]
test Int256VectorTests.notInt256VectorTests(int[cornerCaseValue(i)]): success [63ms]
test Int256VectorTests.orInt256VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int256VectorTests.orInt256VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.orInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.orInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int256VectorTests.orInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.orInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.shuffleEqualsInt256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [11ms]
test Int256VectorTests.shuffleEqualsInt256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [8ms]
test Int256VectorTests.shuffleMiscellaneousInt256VectorTestsSmokeTest(shuffle[random]): success [5ms]
test Int256VectorTests.shuffleTest(): success [422ms]
test Int256VectorTests.shuffleToStringInt256VectorTestsSmokeTest(shuffle[random]): success [39ms]
test Int256VectorTests.sliceBinaryInt256VectorTestsBinary(int[-i * 5], int[i * 5]): success [977ms]
test Int256VectorTests.sliceBinaryInt256VectorTestsBinary(int[-i * 5], int[i + 1]): success [452ms]
test Int256VectorTests.sliceBinaryInt256VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [757ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [640ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [529ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [920ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [528ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [515ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [515ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [515ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [520ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [709ms]
test Int256VectorTests.sliceUnaryInt256VectorTests(int[-i * 5]): success [690ms]
test Int256VectorTests.sliceUnaryInt256VectorTests(int[i * 5]): success [437ms]
test Int256VectorTests.sliceUnaryInt256VectorTests(int[i + 1]): success [697ms]
test Int256VectorTests.sliceUnaryInt256VectorTests(int[cornerCaseValue(i)]): success [440ms]
test Int256VectorTests.smokeTest1(): success [0ms]
test Int256VectorTests.smokeTest2(): success [83ms]
test Int256VectorTests.subInt256VectorTests(int[-i * 5], int[i * 5]): success [9ms]
test Int256VectorTests.subInt256VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.subInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int256VectorTests.subInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int256VectorTests.subInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.toDoubleArrayInt256VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int256VectorTests.toDoubleArrayInt256VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int256VectorTests.toDoubleArrayInt256VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int256VectorTests.toDoubleArrayInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.toIntArrayInt256VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int256VectorTests.toIntArrayInt256VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int256VectorTests.toIntArrayInt256VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int256VectorTests.toIntArrayInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.toLongArrayInt256VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int256VectorTests.toLongArrayInt256VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int256VectorTests.toLongArrayInt256VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int256VectorTests.toLongArrayInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.toStringInt256VectorTestsSmokeTest(int[-i * 5]): success [8ms]
test Int256VectorTests.toStringInt256VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int256VectorTests.toStringInt256VectorTestsSmokeTest(int[i + 1]): success [13ms]
test Int256VectorTests.toStringInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [12ms]
test Int256VectorTests.unsliceBinaryInt256VectorTestsBinary(int[-i * 5], int[i * 5]): success [724ms]
test Int256VectorTests.unsliceBinaryInt256VectorTestsBinary(int[-i * 5], int[i + 1]): success [449ms]
test Int256VectorTests.unsliceBinaryInt256VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [968ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1623ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [936ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1711ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [925ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [897ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [896ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1203ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [897ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1007ms]
test Int256VectorTests.unsliceUnaryInt256VectorTests(int[-i * 5]): success [608ms]
test Int256VectorTests.unsliceUnaryInt256VectorTests(int[i * 5]): success [432ms]
test Int256VectorTests.unsliceUnaryInt256VectorTests(int[i + 1]): success [627ms]
test Int256VectorTests.unsliceUnaryInt256VectorTests(int[cornerCaseValue(i)]): success [439ms]
test Int256VectorTests.viewAsFloatingLanesTest(): success [453ms]
test Int256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int256VectorTests.withInt256VectorTests(int[-i * 5], int[i * 5]): success [53ms]
test Int256VectorTests.withInt256VectorTests(int[-i * 5], int[i + 1]): success [19ms]
test Int256VectorTests.withInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [189ms]

===============================================
jdk/incubator/vector/Int256VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int256VectorTests.d/testng.0.jta jdk/incubator/vector/Int256VectorTests.java false Int256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
TEST: jdk/incubator/vector/Int128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.274 seconds
messages:
command: build Int128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:19:15 IST 2025
Test directory:
  compile: Int128VectorTests
finished: Wed Apr 16 20:19:16 IST 2025
elapsed time (seconds): 1.274

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.273 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:19:15 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 16
Process id: 1590845
finished: Wed Apr 16 20:19:16 IST 2025
elapsed time (seconds): 1.273
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Int128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Int128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Int128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
TIME:   332.971 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
started: Wed Apr 16 20:19:16 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1592895
finished: Wed Apr 16 20:24:49 IST 2025
elapsed time (seconds): 332.971
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 8926921100905166595
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=8926921100905166595" to command line.
test Int128VectorTests.ABSInt128VectorTests(int[-i * 5]): success [556ms]
test Int128VectorTests.ABSInt128VectorTests(int[i * 5]): success [49ms]
test Int128VectorTests.ABSInt128VectorTests(int[i + 1]): success [7ms]
test Int128VectorTests.ABSInt128VectorTests(int[cornerCaseValue(i)]): success [5ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[i % 2]): success [191ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[i % 2]): success [114ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[i % 2]): success [2ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[true]): success [27ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i * 5]): success [253ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i + 1]): success [60ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [18ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [23ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [9ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [121ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [64ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[-i * 5]): success [118ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i * 5]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i + 1]): success [66ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [117ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [82ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [13ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [40ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[-i * 5]): success [19ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i * 5]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i * 5]): success [183ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i + 1]): success [60ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [19ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [7ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [8ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [64ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[-i * 5]): success [135ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i * 5]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i + 1]): success [63ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [23ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [81ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [82ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [15ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i * 5]): success [174ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i + 1]): success [69ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [61ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [75ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [15ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [38ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i * 5]): success [109ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i + 1]): success [68ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [79ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [75ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [200ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [62ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[-i * 5]): success [8ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i * 5]): success [55ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i + 1]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [59ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [56ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [18ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [50ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [4ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [112ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [93ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [336ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [20ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [105ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [78ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [69ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [44ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [22ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [3ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

OperationsMF$6(IntVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lanewiseTemplate(IntVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Int128Vector.lanewise(Int128Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Int128Vector.lanewise(Int128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.div(IntVector.java:1732)
	at Int128VectorTests.divInt128VectorTestsMasked(Int128VectorTests.java:1758)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [201ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [202ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [201ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [201ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [201ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i]): success [193ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - length / 2]): success [104ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i + 1]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - 2]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[zigZag(i)]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i + 1]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - length / 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i + 1]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[zigZag(i)]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - length / 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i + 1]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - 2]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[zigZag(i)]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i + 1]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - 2]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [97ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [9ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [52ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [0ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [28ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[i % 2]): success [152ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[i % 2]): success [139ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[i % 2]): success [72ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[true]): success [28ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[true]): success [6ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[true]): success [5ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[false]): success [7ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [7ms]
test Int128VectorTests.getInt128VectorTests(int[-i * 5]): success [7ms]
test Int128VectorTests.getInt128VectorTests(int[i * 5]): success [65ms]
test Int128VectorTests.getInt128VectorTests(int[i + 1]): success [2ms]
test Int128VectorTests.getInt128VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[-i * 5]): success [41ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i * 5]): success [2ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i + 1]): success [19ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(0): success [74ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(1): success [20ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-2): success [4ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(0): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-2): success [3ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(37): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1024): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(0): success [4ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(37): success [1ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1024): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i]): success [206ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - length / 2]): success [104ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i + 1]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - 2]): success [114ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[zigZag(i)]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i]): success [143ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i + 1]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [97ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - length / 2]): success [97ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i + 1]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - 2]): success [97ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[zigZag(i)]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i]): success [104ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - length / 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i + 1]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[zigZag(i)]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i + 1]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - 2]): success [97ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [97ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [98ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [6ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [58ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [0ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [0ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [28ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[i % 2]): success [261ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[true]): success [117ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[false]): success [80ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [37ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[true]): success [58ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[false]): success [26ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(-1): success [67ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[true]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[false]): success [0ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [71ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[true]): success [58ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[false]): success [40ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[true]): success [58ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[false]): success [26ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [39ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[-i * 5]): success [14ms]
test Int128VectorTests.negInt128VectorTests(int[i * 5]): success [74ms]
test Int128VectorTests.negInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[-i * 5]): success [19ms]
test Int128VectorTests.notInt128VectorTests(int[i * 5]): success [79ms]
test Int128VectorTests.notInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [12ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [10ms]
test Int128VectorTests.shuffleMiscellaneousInt128VectorTestsSmokeTest(shuffle[random]): success [10ms]
test Int128VectorTests.shuffleTest(): success [313ms]
test Int128VectorTests.shuffleToStringInt128VectorTestsSmokeTest(shuffle[random]): success [39ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [655ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [281ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [125ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [202ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [330ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [140ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [118ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [119ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [230ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [118ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [117ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [151ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[-i * 5]): success [256ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i * 5]): success [236ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i + 1]): success [109ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [108ms]
test Int128VectorTests.smokeTest1(): success [0ms]
test Int128VectorTests.smokeTest2(): success [78ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [1ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[-i * 5]): success [5ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i + 1]): success [13ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [13ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [265ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [354ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [109ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [609ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [558ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [404ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [225ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [224ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [282ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [222ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [255ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [239ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[-i * 5]): success [240ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i * 5]): success [235ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i + 1]): success [108ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [108ms]
test Int128VectorTests.viewAsFloatingLanesTest(): success [463ms]
test Int128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i * 5]): success [43ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i + 1]): success [122ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [32ms]

===============================================
jdk/incubator/vector/Int128VectorTests.java
Total tests run: 3622, Passes: 3620, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Int128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int128VectorTests.d/testng.0.jta jdk/incubator/vector/Int128VectorTests.java false Int128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long256VectorTests.java
TEST: jdk/incubator/vector/Long128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.858 seconds
messages:
command: build Long128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:21:56 IST 2025
Test directory:
  compile: Long128VectorTests
finished: Wed Apr 16 20:21:57 IST 2025
elapsed time (seconds): 0.858

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.858 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:21:56 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 15
Process id: 1590720
finished: Wed Apr 16 20:21:57 IST 2025
elapsed time (seconds): 0.858
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Long128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Long128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Long128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
TIME:   246.665 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
started: Wed Apr 16 20:21:57 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1593573
finished: Wed Apr 16 20:26:03 IST 2025
elapsed time (seconds): 246.665
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -4762781007624779382
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-4762781007624779382" to command line.
test Long128VectorTests.ABSLong128VectorTests(long[-i * 5]): success [590ms]
test Long128VectorTests.ABSLong128VectorTests(long[i * 5]): success [53ms]
test Long128VectorTests.ABSLong128VectorTests(long[i + 1]): success [9ms]
test Long128VectorTests.ABSLong128VectorTests(long[cornerCaseValue(i)]): success [7ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[i % 2]): success [226ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[i % 2]): success [116ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[true]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[false]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i * 5]): success [201ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i + 1]): success [89ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [16ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [126ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [66ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [10ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [27ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[-i * 5]): success [130ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i * 5]): success [42ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i + 1]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [109ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [85ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [29ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [11ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i * 5]): success [100ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i + 1]): success [63ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [6ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [7ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [67ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[-i * 5]): success [126ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i * 5]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i + 1]): success [64ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [70ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [83ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [30ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [13ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i * 5]): success [183ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i + 1]): success [78ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [64ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [78ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i * 5]): success [123ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i + 1]): success [70ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [80ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [96ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [184ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [60ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[-i * 5]): success [9ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i * 5]): success [57ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i + 1]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [60ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [57ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [14ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [51ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [6ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [113ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [92ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [506ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): failure [37ms]
java.lang.AssertionError: at index #373, input1 = -1865, input2 = 1860, input3 = 9223372036854775807, mask = false expected [-1865] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:797)
	at Long128VectorTests.assertAltBroadcastArraysEquals(Long128VectorTests.java:628)
	at Long128VectorTests.assertAltBroadcastArraysEquals(Long128VectorTests.java:616)
	at Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(Long128VectorTests.java:5585)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [15ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [90ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [4ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [13ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128Ve

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

BlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseDivByZeroSmokeTest(): success [11ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [15ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [69ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[false]): success [11ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[i % 2]): success [158ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[i % 2]): success [113ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[i % 2]): success [42ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [41ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[true]): success [68ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[false]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[false]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[false]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i * 5]): success [159ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i + 1]): success [177ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [77ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [107ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [268ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [285ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [145ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [145ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [145ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [154ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [146ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [161ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [145ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i]): success [166ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - length / 2]): success [79ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i]): success [78ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[zigZag(i)]): success [80ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [57ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[i % 2]): success [112ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[i % 2]): success [139ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[i % 2]): success [40ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [40ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[true]): success [22ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[true]): success [5ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[false]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[false]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[false]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [6ms]
test Long128VectorTests.getLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.getLong128VectorTests(long[i * 5]): success [59ms]
test Long128VectorTests.getLong128VectorTests(long[i + 1]): success [1ms]
test Long128VectorTests.getLong128VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[-i * 5]): success [47ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i * 5]): success [2ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(0): success [83ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-1): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(1): success [18ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(2): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(0): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-1): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(1): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(2): success [5ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i]): success [169ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [8ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [56ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[i % 2]): success [241ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[true]): success [79ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[false]): success [59ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[true]): success [53ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[false]): success [20ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(-1): success [63ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[true]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[false]): success [0ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [63ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[true]): success [53ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[false]): success [33ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[i % 2]): success [28ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[true]): success [53ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[false]): success [20ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[-i * 5]): success [14ms]
test Long128VectorTests.negLong128VectorTests(long[i * 5]): success [47ms]
test Long128VectorTests.negLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[-i * 5]): success [18ms]
test Long128VectorTests.notLong128VectorTests(long[i * 5]): success [51ms]
test Long128VectorTests.notLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i * 5]): success [9ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [470ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [49ms]
test Long128VectorTests.shuffleMiscellaneousLong128VectorTestsSmokeTest(shuffle[random]): success [23ms]
test Long128VectorTests.shuffleTest(): success [353ms]
test Long128VectorTests.shuffleToStringLong128VectorTestsSmokeTest(shuffle[random]): success [50ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [608ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [265ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [84ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [167ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [322ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [85ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [85ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [84ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [84ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [84ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [85ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [84ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[-i * 5]): success [243ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i * 5]): success [227ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i + 1]): success [78ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [86ms]
test Long128VectorTests.smokeTest1(): success [0ms]
test Long128VectorTests.smokeTest2(): success [48ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [14ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [21ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [7ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i * 5]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[-i * 5]): success [2ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i * 5]): success [6ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i + 1]): success [43ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [261ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [300ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [78ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [550ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [593ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [159ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [159ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [167ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [160ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [159ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [166ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [336ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[-i * 5]): success [238ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i * 5]): success [208ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i + 1]): success [77ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [147ms]
test Long128VectorTests.viewAsFloatingLanesTest(): success [249ms]
test Long128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i * 5]): success [40ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i + 1]): success [112ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [32ms]

===============================================
jdk/incubator/vector/Long128VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Long128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Long128VectorTests.d/testng.0.jta jdk/incubator/vector/Long128VectorTests.java false Long128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long512VectorTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Int64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.024 seconds
messages:
command: build Int64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:21:20 IST 2025
Test directory:
  compile: Int64VectorTests
finished: Wed Apr 16 20:21:21 IST 2025
elapsed time (seconds): 1.024

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.024 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:21:20 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 11
Process id: 1590348
finished: Wed Apr 16 20:21:21 IST 2025
elapsed time (seconds): 1.024
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
TIME:   464.751 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
started: Wed Apr 16 20:21:21 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1593240
finished: Wed Apr 16 20:29:06 IST 2025
elapsed time (seconds): 464.751
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -4668902747416218280
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-4668902747416218280" to command line.
test Int64VectorTests.ABSInt64VectorTests(int[-i * 5]): success [601ms]
test Int64VectorTests.ABSInt64VectorTests(int[i * 5]): success [24ms]
test Int64VectorTests.ABSInt64VectorTests(int[i + 1]): success [32ms]
test Int64VectorTests.ABSInt64VectorTests(int[cornerCaseValue(i)]): success [20ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [218ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [51ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [34ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i * 5]): success [300ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [54ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [9ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [24ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [44ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [147ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [66ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [44ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[-i * 5]): success [121ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i * 5]): success [16ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i + 1]): success [26ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [131ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [15ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [20ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [48ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [90ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [6ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[-i * 5]): success [20ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[true]): success [9ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i * 5]): success [195ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [54ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [20ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [38ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [20ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [71ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [66ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [53ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[-i * 5]): success [131ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i * 5]): success [25ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i + 1]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [61ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [39ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i * 5]): success [176ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [62ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [129ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [77ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [41ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i * 5]): success [159ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i + 1]): success [33ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [52ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [150ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [38ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [79ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [6ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [215ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [50ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[-i * 5]): success [48ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i * 5]): success [19ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i + 1]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [54ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [113ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [56ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [29ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [59ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [52ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [54ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [12ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [182ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [77ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [91ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [342ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [83ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [102ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [23ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [68ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [44ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTes

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

nt[i + 1]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[cornerCaseValue(i)]): success [55ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [99ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [7ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [115ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [13ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i * 5]): success [143ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i + 1]): success [60ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [44ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [81ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [66ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [6ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [73ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [6ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [6ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [6ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[-i * 5]): success [108ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i * 5]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i + 1]): success [50ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[cornerCaseValue(i)]): success [94ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [94ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [5ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [69ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [120ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [64ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [14ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.VectorShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.VectorTypeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithLanesInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i * 5]): success [71ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [56ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [99ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [72ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[-i * 5]): success [127ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i * 5]): success [5ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i + 1]): success [49ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[cornerCaseValue(i)]): success [46ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [92ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [67ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [114ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [6ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [14ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [5ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [64ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[-i * 5]): success [282ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i * 5]): success [163ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i + 1]): success [137ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [398ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [275ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [277ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [309ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[true]): success [275ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[true]): success [275ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[true]): success [276ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [276ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[false]): success [276ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[false]): success [276ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[false]): success [276ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [287ms]
test Int64VectorTests.ZeroInt64VectorTests(int[-i * 5]): success [117ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.absInt64VectorTests(int[-i * 5]): success [68ms]
test Int64VectorTests.absInt64VectorTests(int[i * 5]): success [18ms]
test Int64VectorTests.absInt64VectorTests(int[i + 1]): success [2ms]
test Int64VectorTests.absInt64VectorTests(int[cornerCaseValue(i)]): success [67ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i * 5]): success [32ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [37ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 2]): success [36ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 5]): success [23ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 2]): success [12ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [11ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [16ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [12ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseDivByZeroSmokeTest(): success [13ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[i % 2]): success [68ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[i % 2]): success [22ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[true]): success [29ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [92ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [31ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [96ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[i % 2]): success [281ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[i % 2]): success [88ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[i % 2]): success [87ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [86ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[true]): success [84ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[true]): success [20ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[true]): success [15ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[false]): success [15ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[false]): success [15ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[false]): success [15ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [15ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i * 5]): success [326ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i + 1]): success [188ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [221ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [111ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): failure [575ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lambda$binaryOperationsMF$7(IntVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.bOpTemplateMF(IntVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.bOpMF(Int64Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.bOpMF(Int64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lambda$binaryOperationsMF$6(IntVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lanewiseTemplate(IntVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.lanewise(Int64Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.lanewise(Int64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.div(IntVector.java:1732)
	at Int64VectorTests.divInt64VectorTestsMasked(Int64VectorTests.java:1758)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [341ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [350ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [302ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [291ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [346ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [290ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [291ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [291ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i]): success [262ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - length / 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i + 1]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[zigZag(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i + 1]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - 2]): success [151ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - length / 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i + 1]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - length / 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i + 1]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i + 1]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [3ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [9ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [60ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[i % 2]): success [201ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[i % 2]): success [83ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[i % 2]): success [83ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [83ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [14ms]
test Int64VectorTests.getInt64VectorTests(int[-i * 5]): success [35ms]
test Int64VectorTests.getInt64VectorTests(int[i * 5]): success [2ms]
test Int64VectorTests.getInt64VectorTests(int[i + 1]): success [2ms]
test Int64VectorTests.getInt64VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[-i * 5]): success [60ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i * 5]): success [21ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i + 1]): success [3ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(0): success [92ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-1): success [6ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(1): success [26ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(2): success [5ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-2): success [8ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(0): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-1): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(1): success [8ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(2): success [19ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-2): success [5ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(0): success [4ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(37): success [1ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i]): success [233ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i + 1]): success [135ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - 2]): success [165ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[zigZag(i)]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [135ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i]): success [180ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [135ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i + 1]): success [134ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - 2]): success [134ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [134ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [135ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i]): success [135ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - length / 2]): success [150ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i + 1]): success [135ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - 2]): success [135ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[zigZag(i)]): success [135ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - length / 2]): success [166ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i + 1]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - 2]): success [144ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[zigZag(i)]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i + 1]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - 2]): success [135ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [135ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [135ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i]): success [2ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [6ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [64ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[i % 2]): success [225ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[true]): success [78ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[false]): success [59ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[true]): success [52ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[false]): success [20ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(-1): success [80ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[true]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[false]): success [0ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [64ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[true]): success [52ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[false]): success [33ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [26ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[i % 2]): success [30ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[true]): success [53ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[false]): success [21ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [31ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[-i * 5]): success [53ms]
test Int64VectorTests.negInt64VectorTests(int[i * 5]): success [18ms]
test Int64VectorTests.negInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[cornerCaseValue(i)]): success [67ms]
test Int64VectorTests.notInt64VectorTests(int[-i * 5]): success [60ms]
test Int64VectorTests.notInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[i + 1]): success [42ms]
test Int64VectorTests.notInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [17ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [39ms]
test Int64VectorTests.shuffleMiscellaneousInt64VectorTestsSmokeTest(shuffle[random]): success [9ms]
test Int64VectorTests.shuffleTest(): success [276ms]
test Int64VectorTests.shuffleToStringInt64VectorTestsSmokeTest(shuffle[random]): success [49ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [835ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [240ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [249ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [461ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [292ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [282ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [167ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [166ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [277ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [187ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [164ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [173ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[-i * 5]): success [429ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i * 5]): success [220ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i + 1]): success [154ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [223ms]
test Int64VectorTests.smokeTest1(): success [0ms]
test Int64VectorTests.smokeTest2(): success [88ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [17ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[-i * 5]): success [15ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i * 5]): success [16ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i + 1]): success [17ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [12ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [468ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [395ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [154ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1050ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [312ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [320ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [313ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [472ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [354ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [309ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [310ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [313ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[-i * 5]): success [404ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i * 5]): success [151ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i + 1]): success [153ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [213ms]
test Int64VectorTests.viewAsFloatingLanesTest(): success [555ms]
test Int64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i * 5]): success [122ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i + 1]): success [64ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [64ms]

===============================================
jdk/incubator/vector/Int64VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int64VectorTests.d/testng.0.jta jdk/incubator/vector/Int64VectorTests.java false Int64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
TEST: jdk/incubator/vector/Byte512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   20.959 seconds
messages:
command: build Byte512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:15:19 IST 2025
Test directory:
  compile: Byte512VectorTests
finished: Wed Apr 16 20:15:40 IST 2025
elapsed time (seconds): 20.959

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   20.952 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:15:19 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 7
Process id: 1589976
finished: Wed Apr 16 20:15:40 IST 2025
elapsed time (seconds): 20.952
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Byte512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Byte512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Byte512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests 
TIME:   986.484 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests 
started: Wed Apr 16 20:15:40 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1591316
finished: Wed Apr 16 20:32:06 IST 2025
elapsed time (seconds): 986.484
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 7102268473587030819
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=7102268473587030819" to command line.
test Byte512VectorTests.ABSByte512VectorTests(byte[-i * 5]): success [493ms]
test Byte512VectorTests.ABSByte512VectorTests(byte[i * 5]): success [1155ms]
test Byte512VectorTests.ABSByte512VectorTests(byte[i + 1]): success [32ms]
test Byte512VectorTests.ABSByte512VectorTests(byte[cornerCaseValue(i)]): success [8ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[-i * 5], mask[i % 2]): success [337ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i * 5], mask[i % 2]): success [353ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i + 1], mask[i % 2]): success [248ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[-i * 5], mask[true]): success [390ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i * 5], mask[true]): success [5ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i + 1], mask[true]): success [5ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[cornerCaseValue(i)], mask[true]): success [7ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[-i * 5], mask[false]): success [3ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i * 5], mask[false]): success [4ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i + 1], mask[false]): success [3ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte512VectorTests.ADDByte512VectorTests(byte[-i * 5], byte[i * 5]): success [266ms]
test Byte512VectorTests.ADDByte512VectorTests(byte[-i * 5], byte[i + 1]): success [1859ms]
test Byte512VectorTests.ADDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [8ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [66ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [3ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [5ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [40ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [8ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [19ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [11ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [9ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [66ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [4ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [679ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [201ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [12ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [12ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [330ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [12ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [67ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [9ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [9ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[-i * 5]): success [247ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[i * 5]): success [8ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[i + 1]): success [113ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[cornerCaseValue(i)]): success [34ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [200ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i * 5], mask[i % 2]): success [10ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i + 1], mask[i % 2]): success [192ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [33ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[-i * 5], mask[true]): success [9ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i * 5], mask[true]): success [8ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i + 1], mask[true]): success [8ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[-i * 5], mask[false]): success [6ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i * 5], mask[false]): success [6ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i + 1], mask[false]): success [7ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[-i * 5]): success [9ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[i * 5]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[i + 1]): success [11ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[cornerCaseValue(i)]): success [16ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [9ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i * 5], mask[i % 2]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [25ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i + 1], mask[true]): success [105ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.ANDByte512VectorTests(byte[-i * 5], byte[i * 5]): success [988ms]
test Byte512VectorTests.ANDByte512VectorTests(byte[-i * 5], byte[i + 1]): success [268ms]
test Byte512VectorTests.ANDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [8ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [6ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [3ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [66ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [30ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [5ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [12ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [35ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [8ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [331ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [7ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [6ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [6ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[-i * 5]): success [419ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[i * 5]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[i + 1]): success [137ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[cornerCaseValue(i)]): success [20ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [41ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i * 5], mask[i % 2]): success [7ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i + 1], mask[i % 2]): success [187ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [29ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[-i * 5], mask[true]): success [6ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i * 5], mask[true]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[-i * 5], mask[false]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i * 5], mask[false]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i + 1], mask[false]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte512VectorTests.AND_NOTByte512VectorTests(byte[-i * 5], byte[i * 5]): success [922ms]
test Byte512VectorTests.AND_NOTByte512VectorTests(byte[-i * 5], byte[i + 1]): success [748ms]
test Byte512VectorTests.AND_NOTByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [149ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [177ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [254ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [131ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [130ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [763ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [129ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [129ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [135ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [128ms]
test Byte512VectorTests.ASHRByte512VectorTests(byte[-i * 5], byte[i * 5]): success [260ms]
test Byte512VectorTests.ASHRByte512VectorTests(byte[-i * 5], byte[i + 1]): success [669ms]
test Byte512VectorTests.ASHRByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [127ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [424ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [312ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [129ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [146ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [1060ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [208ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [139ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [238ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [182ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [283ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [917ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [9ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[-i * 5]): success [170ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[i * 5]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[i + 1]): success [6ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [20ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [105ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [9ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [210ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [40ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [6ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [15ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [10ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [12ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [193ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [70ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [24ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [289ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [22ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [14ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [896ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [11ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [336ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [68ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [8ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [46ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [9ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [37ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [72ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [5ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [48ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

ctorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [23ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.bitwiseDivByZeroSmokeTest(): success [17ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i * 5], mask[i % 2]): success [28ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i * 5], mask[true]): success [7ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i + 1], mask[true]): success [317ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i * 5], mask[false]): success [5ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i + 1], mask[false]): success [5ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [144ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [171ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [126ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [121ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [408ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [121ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [123ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [121ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [121ms]
test Byte512VectorTests.compressByte512VectorTests(byte[-i * 5], mask[i % 2]): success [5241ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i * 5], mask[i % 2]): success [476ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i + 1], mask[i % 2]): success [330ms]
test Byte512VectorTests.compressByte512VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [340ms]
test Byte512VectorTests.compressByte512VectorTests(byte[-i * 5], mask[true]): success [566ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i * 5], mask[true]): success [4258ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i + 1], mask[true]): success [4ms]
test Byte512VectorTests.compressByte512VectorTests(byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte512VectorTests.compressByte512VectorTests(byte[-i * 5], mask[false]): success [40ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i * 5], mask[false]): success [38ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i + 1], mask[false]): success [38ms]
test Byte512VectorTests.compressByte512VectorTests(byte[cornerCaseValue(i)], mask[false]): success [38ms]
test Byte512VectorTests.divByte512VectorTests(byte[-i * 5], byte[i * 5]): success [397ms]
test Byte512VectorTests.divByte512VectorTests(byte[-i * 5], byte[i + 1]): success [644ms]
test Byte512VectorTests.divByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [359ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [34ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [653ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [9ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [12ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [5ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [5ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [723ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [984ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [713ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): failure [116ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$7(ByteVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.bOpTemplateMF(ByteVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Byte512Vector.bOpMF(Byte512Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Byte512Vector.bOpMF(Byte512Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$6(ByteVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lanewiseTemplate(ByteVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Byte512Vector.lanewise(Byte512Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Byte512Vector.lanewise(Byte512Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.div(ByteVector.java:1729)
	at Byte512VectorTests.divByte512VectorTestsMasked(Byte512VectorTests.java:1796)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [716ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2306ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [714ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [714ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [715ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i]): success [454ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i - length / 2]): success [272ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i + 1]): success [272ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i - 2]): success [274ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[zigZag(i)]): success [273ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[cornerCaseValue(i)]): success [405ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i - length / 2]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i + 1]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i - 2]): success [273ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i]): success [282ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i - length / 2]): success [273ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i + 1]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i - 2]): success [273ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[zigZag(i)]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [273ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i]): success [274ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i - length / 2]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i + 1]): success [284ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i - 2]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[zigZag(i)]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [272ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i + 1]): success [272ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i - 2]): success [281ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [272ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [272ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [282ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [181ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [12ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.expandByte512VectorTests(byte[-i * 5], mask[i % 2]): success [8369ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i * 5], mask[i % 2]): success [404ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i + 1], mask[i % 2]): success [339ms]
test Byte512VectorTests.expandByte512VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [332ms]
test Byte512VectorTests.expandByte512VectorTests(byte[-i * 5], mask[true]): success [282ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i * 5], mask[true]): success [7841ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i + 1], mask[true]): success [4ms]
test Byte512VectorTests.expandByte512VectorTests(byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte512VectorTests.expandByte512VectorTests(byte[-i * 5], mask[false]): success [38ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i * 5], mask[false]): success [40ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i + 1], mask[false]): success [37ms]
test Byte512VectorTests.expandByte512VectorTests(byte[cornerCaseValue(i)], mask[false]): success [152ms]
test Byte512VectorTests.getByte512VectorTests(byte[-i * 5]): success [45ms]
test Byte512VectorTests.getByte512VectorTests(byte[i * 5]): success [45ms]
test Byte512VectorTests.getByte512VectorTests(byte[i + 1]): success [45ms]
test Byte512VectorTests.getByte512VectorTests(byte[cornerCaseValue(i)]): success [45ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[-i * 5]): success [36ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [16ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(0): success [71ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(-1): success [7ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(1): success [20ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(2): success [6ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(-2): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(0): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(-1): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(1): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(2): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(-2): success [6ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(0): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(32): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(37): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1024): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1025): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1029): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(0): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(32): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(37): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1024): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1025): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1029): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i]): success [454ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i - length / 2]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i + 1]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i - 2]): success [280ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[zigZag(i)]): success [272ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[cornerCaseValue(i)]): success [272ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i - length / 2]): success [271ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i + 1]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i - 2]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [281ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [272ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i]): success [271ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i - length / 2]): success [272ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i + 1]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i - 2]): success [271ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[zigZag(i)]): success [271ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [276ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i]): success [343ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i - length / 2]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i + 1]): success [272ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i - 2]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[zigZag(i)]): success [271ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [272ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i]): success [271ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [283ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i + 1]): success [271ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i - 2]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [271ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [271ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i]): success [318ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [272ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [272ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [281ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [272ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [270ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [179ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.maskAndByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Byte512VectorTests.maskAndByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskAndNotByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Byte512VectorTests.maskAndNotByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskCompressByte512VectorTestsSmokeTest(mask[i % 2]): success [1548ms]
test Byte512VectorTests.maskCompressByte512VectorTestsSmokeTest(mask[true]): success [1084ms]
test Byte512VectorTests.maskCompressByte512VectorTestsSmokeTest(mask[false]): success [1113ms]
test Byte512VectorTests.maskEqByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Byte512VectorTests.maskEqByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskEqualsByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Byte512VectorTests.maskEqualsByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskFirstTrueByte512VectorTestsSmokeTest(mask[i % 2]): success [209ms]
test Byte512VectorTests.maskFirstTrueByte512VectorTestsSmokeTest(mask[true]): success [248ms]
test Byte512VectorTests.maskFirstTrueByte512VectorTestsSmokeTest(mask[false]): success [198ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(-1): success [59ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(0): success [0ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Byte512VectorTests.maskHashCodeByte512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Byte512VectorTests.maskHashCodeByte512VectorTestsSmokeTest(mask[true]): success [0ms]
test Byte512VectorTests.maskHashCodeByte512VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte512VectorTests.maskLastTrueByte512VectorTestsSmokeTest(mask[i % 2]): success [264ms]
test Byte512VectorTests.maskLastTrueByte512VectorTestsSmokeTest(mask[true]): success [245ms]
test Byte512VectorTests.maskLastTrueByte512VectorTestsSmokeTest(mask[false]): success [226ms]
test Byte512VectorTests.maskOrByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [18ms]
test Byte512VectorTests.maskOrByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskTrueCountByte512VectorTestsSmokeTest(mask[i % 2]): success [207ms]
test Byte512VectorTests.maskTrueCountByte512VectorTestsSmokeTest(mask[true]): success [248ms]
test Byte512VectorTests.maskTrueCountByte512VectorTestsSmokeTest(mask[false]): success [200ms]
test Byte512VectorTests.maskXorByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Byte512VectorTests.maskXorByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maxByte512VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.maxByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.maxByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [6ms]
test Byte512VectorTests.maxByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte512VectorTests.maxByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.maxByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.minByte512VectorTests(byte[-i * 5], byte[i * 5]): success [5ms]
test Byte512VectorTests.minByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.minByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.minByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.minByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.minByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.mulByte512VectorTests(byte[-i * 5], byte[i * 5]): success [5ms]
test Byte512VectorTests.mulByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.mulByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [6ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [5ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.negByte512VectorTests(byte[-i * 5]): success [10ms]
test Byte512VectorTests.negByte512VectorTests(byte[i * 5]): success [19ms]
test Byte512VectorTests.negByte512VectorTests(byte[i + 1]): success [5ms]
test Byte512VectorTests.negByte512VectorTests(byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.notByte512VectorTests(byte[-i * 5]): success [128ms]
test Byte512VectorTests.notByte512VectorTests(byte[i * 5]): success [152ms]
test Byte512VectorTests.notByte512VectorTests(byte[i + 1]): success [125ms]
test Byte512VectorTests.notByte512VectorTests(byte[cornerCaseValue(i)]): success [124ms]
test Byte512VectorTests.orByte512VectorTests(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte512VectorTests.orByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.orByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.orByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.orByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.orByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[-i * 5]): success [4ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[i * 5]): success [19ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.shuffleEqualsByte512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [4303ms]
test Byte512VectorTests.shuffleEqualsByte512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [270ms]
test Byte512VectorTests.shuffleMiscellaneousByte512VectorTestsSmokeTest(shuffle[random]): success [224ms]
test Byte512VectorTests.shuffleTest(): success [1770ms]
test Byte512VectorTests.shuffleToStringByte512VectorTestsSmokeTest(shuffle[random]): success [59ms]
test Byte512VectorTests.sliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [1505ms]
test Byte512VectorTests.sliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [3082ms]
test Byte512VectorTests.sliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [1208ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [1306ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [2061ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1546ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1295ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [8920ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1300ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [1318ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [1293ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [3522ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[-i * 5]): success [1001ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[i * 5]): success [2162ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[i + 1]): success [1037ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[cornerCaseValue(i)]): success [1043ms]
test Byte512VectorTests.smokeTest1(): success [43ms]
test Byte512VectorTests.smokeTest2(): success [56ms]
test Byte512VectorTests.subByte512VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.subByte512VectorTests(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.subByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [534ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [382ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [970ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [29ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [33ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[i + 1]): success [3ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[-i * 5]): success [5ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[i * 5]): success [9ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[i + 1]): success [7ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[-i * 5]): success [24ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[i * 5]): success [13ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[i + 1]): success [60ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [1082ms]
test Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [2700ms]
test Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [1035ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [2314ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [5691ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2591ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [2202ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [12969ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2204ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [2202ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [2807ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2209ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[-i * 5]): success [1406ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[i * 5]): success [2085ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[i + 1]): success [1000ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[cornerCaseValue(i)]): success [1009ms]
test Byte512VectorTests.viewAsFloatingLanesTest(): success [14ms]
test Byte512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Byte512VectorTests.withByte512VectorTests(byte[-i * 5], byte[i * 5]): success [12ms]
test Byte512VectorTests.withByte512VectorTests(byte[-i * 5], byte[i + 1]): success [11ms]
test Byte512VectorTests.withByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [34ms]

===============================================
jdk/incubator/vector/Byte512VectorTests.java
Total tests run: 3602, Passes: 3601, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Byte512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Byte512VectorTests.d/testng.0.jta jdk/incubator/vector/Byte512VectorTests.java false Byte512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long64VectorTests.java
Passed: jdk/incubator/vector/Short128VectorTests.java
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/Short512VectorTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
TEST: jdk/incubator/vector/Short64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.029 seconds
messages:
command: build Short64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 20:26:03 IST 2025
Test directory:
  compile: Short64VectorTests
finished: Wed Apr 16 20:26:04 IST 2025
elapsed time (seconds): 1.029

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.029 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:26:03 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 15
Process id: 1590720
finished: Wed Apr 16 20:26:04 IST 2025
elapsed time (seconds): 1.029
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Short64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Short64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Short64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests 
TIME:   621.633 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests 
started: Wed Apr 16 20:26:04 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1594831
finished: Wed Apr 16 20:36:26 IST 2025
elapsed time (seconds): 621.633
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -7396592936286498702
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-7396592936286498702" to command line.
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[i % 2]): success [627ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[i % 2]): success [30ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[i % 2]): success [44ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [31ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[true]): success [28ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[true]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[true]): success [42ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[false]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.ABSShort64VectorTests(short[-i * 5]): success [127ms]
test Short64VectorTests.ABSShort64VectorTests(short[i * 5]): success [27ms]
test Short64VectorTests.ABSShort64VectorTests(short[i + 1]): success [4ms]
test Short64VectorTests.ABSShort64VectorTests(short[cornerCaseValue(i)]): success [26ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[-i * 5]): success [86ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[i * 5]): success [3ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[i + 1]): success [3ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[cornerCaseValue(i)]): success [11ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [13ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[true]): success [12ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[false]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[false]): success [10ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[false]): success [64ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[-i * 5]): success [130ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[i * 5]): success [32ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[i + 1]): success [4ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[cornerCaseValue(i)]): success [73ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [97ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [41ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [15ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [97ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[true]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[true]): success [4ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[i * 5]): success [259ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [53ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [17ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [26ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [6ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [14ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [33ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [9ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [147ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [68ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [5ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[-i * 5]): success [145ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[i * 5]): success [19ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[i + 1]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[cornerCaseValue(i)]): success [62ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [99ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [6ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [6ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [75ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[true]): success [74ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[true]): success [17ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[false]): success [40ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[i * 5]): success [232ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [54ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [20ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [37ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [20ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [69ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [33ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [40ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[i * 5]): success [201ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [62ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [150ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [77ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[i * 5]): success [164ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[i + 1]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [61ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [174ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [8ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [80ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [7ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [247ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [53ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[-i * 5]): success [88ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[i * 5]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[i + 1]): success [50ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [117ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [57ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [31ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [104ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [27ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [8ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [46ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [23ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [186ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [81ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [45ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [412ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [21ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [105ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [77ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [6ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [45ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [23ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [4ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.B

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

hort[i * 5]): success [35ms]
test Short64VectorTests.addShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.addShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [75ms]
test Short64VectorTests.addShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [38ms]
test Short64VectorTests.addShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [8ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [50ms]
test Short64VectorTests.allTrueShort64VectorTests(boolean[i % 2]): success [24ms]
test Short64VectorTests.allTrueShort64VectorTests(boolean[i % 5]): success [20ms]
test Short64VectorTests.andShort64VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short64VectorTests.andShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.andShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.andShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short64VectorTests.andShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short64VectorTests.andShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.anyTrueShort64VectorTests(boolean[i % 2]): success [6ms]
test Short64VectorTests.anyTrueShort64VectorTests(boolean[i % 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [43ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [55ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [70ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [67ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [68ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseDivByZeroSmokeTest(): success [15ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [122ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [29ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[true]): success [61ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [106ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [64ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[i % 2]): success [310ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[i % 2]): success [144ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[i % 2]): success [144ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [148ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[true]): success [86ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[true]): success [11ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[true]): success [11ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [11ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[false]): success [77ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[false]): success [15ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[false]): success [15ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [15ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[i * 5]): success [361ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[i + 1]): success [210ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [210ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [114ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [19ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [11ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [647ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [401ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [402ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [402ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [423ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [403ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [402ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [402ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [402ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i]): success [297ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i - length / 2]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i + 1]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i - 2]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[zigZag(i)]): success [195ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[cornerCaseValue(i)]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i - length / 2]): success [195ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i + 1]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i - 2]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[zigZag(i)]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [195ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i - length / 2]): success [195ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i + 1]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i - 2]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[zigZag(i)]): success [195ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i - length / 2]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i + 1]): success [195ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i - 2]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[zigZag(i)]): success [195ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [208ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i]): success [195ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i - length / 2]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i + 1]): success [195ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i - 2]): success [195ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[zigZag(i)]): success [195ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [195ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [194ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [194ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [59ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [32ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [10ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[i % 2]): success [267ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[i % 2]): success [148ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[i % 2]): success [149ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [150ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[true]): success [34ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[true]): success [11ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[true]): success [11ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [11ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[false]): success [16ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[false]): success [15ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[false]): success [77ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [45ms]
test Short64VectorTests.getShort64VectorTests(short[-i * 5]): success [54ms]
test Short64VectorTests.getShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.getShort64VectorTests(short[i + 1]): success [0ms]
test Short64VectorTests.getShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[-i * 5]): success [55ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[i * 5]): success [11ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[i + 1]): success [23ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [10ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(0): success [88ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(-1): success [7ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(1): success [26ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(2): success [6ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(-2): success [6ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(0): success [6ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(-1): success [6ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(1): success [6ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(2): success [16ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(-2): success [5ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(32): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(37): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1024): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1025): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1029): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(32): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(37): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1024): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1025): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1029): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i]): success [297ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i - length / 2]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i + 1]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i - 2]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[zigZag(i)]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[cornerCaseValue(i)]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i - length / 2]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i + 1]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i - 2]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[zigZag(i)]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i]): success [194ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i - length / 2]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i + 1]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i - 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[zigZag(i)]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [215ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i - length / 2]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i + 1]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i - 2]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[zigZag(i)]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i - length / 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i + 1]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i - 2]): success [195ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[zigZag(i)]): success [194ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i]): success [242ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [195ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [59ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [32ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.maskAndNotShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test Short64VectorTests.maskAndNotShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskAndShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Short64VectorTests.maskAndShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[i % 2]): success [255ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[true]): success [118ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[false]): success [80ms]
test Short64VectorTests.maskEqShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Short64VectorTests.maskEqShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskEqualsShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short64VectorTests.maskEqualsShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[i % 2]): success [38ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[true]): success [58ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[false]): success [26ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(-1): success [76ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[i % 2]): success [5ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[true]): success [0ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[false]): success [0ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[i % 2]): success [72ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[true]): success [58ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[false]): success [40ms]
test Short64VectorTests.maskOrShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [22ms]
test Short64VectorTests.maskOrShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[true]): success [58ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[false]): success [26ms]
test Short64VectorTests.maskXorShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Short64VectorTests.maskXorShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.negShort64VectorTests(short[-i * 5]): success [53ms]
test Short64VectorTests.negShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.negShort64VectorTests(short[i + 1]): success [39ms]
test Short64VectorTests.negShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.notShort64VectorTests(short[-i * 5]): success [60ms]
test Short64VectorTests.notShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.notShort64VectorTests(short[i + 1]): success [44ms]
test Short64VectorTests.notShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.shuffleEqualsShort64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [708ms]
test Short64VectorTests.shuffleEqualsShort64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [177ms]
test Short64VectorTests.shuffleMiscellaneousShort64VectorTestsSmokeTest(shuffle[random]): success [273ms]
test Short64VectorTests.shuffleTest(): success [346ms]
test Short64VectorTests.shuffleToStringShort64VectorTestsSmokeTest(shuffle[random]): success [175ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i * 5]): success [743ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i + 1]): success [276ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [204ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [475ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [245ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [209ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [208ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [210ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [222ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [305ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [226ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [209ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[-i * 5]): success [480ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[i * 5]): success [267ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[i + 1]): success [199ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[cornerCaseValue(i)]): success [200ms]
test Short64VectorTests.smokeTest1(): success [0ms]
test Short64VectorTests.smokeTest2(): success [85ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [8ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [22ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[-i * 5]): success [10ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[i * 5]): success [27ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[i + 1]): success [53ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i * 5]): success [498ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i + 1]): success [402ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [203ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [1097ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [417ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [430ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [407ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [571ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [590ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [419ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [405ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [405ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[-i * 5]): success [452ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[i * 5]): success [259ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[i + 1]): success [199ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[cornerCaseValue(i)]): success [268ms]
test Short64VectorTests.viewAsFloatingLanesTest(): success [36ms]
test Short64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[i * 5]): success [131ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[i + 1]): success [64ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [64ms]

===============================================
jdk/incubator/vector/Short64VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Short64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Short64VectorTests.d/testng.0.jta jdk/incubator/vector/Short64VectorTests.java false Short64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Vector128ConversionTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.461 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Wed Apr 16 20:30:44 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Wed Apr 16 20:30:44 IST 2025
elapsed time (seconds): 0.461

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.461 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 20:30:44 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 4
Process id: 1589738
finished: Wed Apr 16 20:30:44 IST 2025
elapsed time (seconds): 0.461
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   943.045 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Wed Apr 16 20:30:44 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1595700
finished: Wed Apr 16 20:46:27 IST 2025
elapsed time (seconds): 943.045
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [39565ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3198ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [4071ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4129ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [3081ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [3942ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[long, 2, S_128_BIT]->Species[byte, 16, S_128_BIT] (lanewise), partLimit=-8, block=2, part=-2, origin=4
expect: [0, 0, 0, 0, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket128(byte(i)): failure [18399ms]
java.lang.AssertionError: arrays differ firstly at element [4]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket128(VectorReshapeTests.java:920)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket256(byte(i)): success [101453ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
Failing with Species[int, 16, S_512_BIT]->Species[byte, 64, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket512(byte(i)): failure [124836ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket512(VectorReshapeTests.java:1011)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket64(byte(i)): success [16450ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [22717ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[byte, 8, S_64_BIT]->Species[byte, 32, S_256_BIT] (lanewise), partLimit=-4, block=8, part=-2, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [87271ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:440)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeDouble(byte(i)): success [107655ms]
test VectorReshapeTests.testReshapeFloat(byte(i)): success [158305ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[int, 4, S_128_BIT]->Species[int, 16, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [83554ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:539)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[long, 1, S_64_BIT]->Species[long, 8, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-3, origin=24
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [49287ms]
java.lang.AssertionError: arrays differ firstly at element [24]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:579)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[short, 8, S_Max_BIT]->Species[short, 32, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-3, origin=48
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [76228ms]
java.lang.AssertionError: arrays differ firstly at element [48]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:511)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [22066ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [11217ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 14, Failures: 6, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 6
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 6
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
--------------------------------------------------
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
Test results: passed: 70; failed: 10; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector
Finished running test 'jtreg:test/jdk:jdk_vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk:jdk_vector                            83    70    10     0     3 <<
==============================
TEST FAILURE

